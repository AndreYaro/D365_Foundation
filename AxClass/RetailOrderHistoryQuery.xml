<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOrderHistoryQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailOrderHistoryQuery
{
    private Query query;
    private QueryRun queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostWIPStatementCmdMapQuery</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// An instance of the <c>QueryRun</c> class to map.
    /// </param>
    void new(CustAccount _custAccount, CreatedDateTime _startDateTime = DateTimeUtil::minValue(), CreatedDateTime _endDateTime = DateTimeUtil::maxValue())
    {
        query = new Query();

        QueryBuildDataSource qbds;

        // If we have QuotationBasic key we return orders and quotations.
        if (isConfigurationkeyEnabled(ConfigurationKeyNum(QuotationBasic)))
        {
            qbds = query.addDataSource(tableNum(RetailOrderHistoryView));
            qbds.addRange(fieldNum(RetailOrderHistoryView, custAccount)).value(_custAccount);
            if (_startDateTime != DateTimeUtil::minValue() || _endDateTime != DateTimeUtil::maxValue())
            {
                qbds.addRange(fieldNum(RetailOrderHistoryView, OrderDateTime)).value(queryRange(_startDateTime, _endDateTime));
            }
            qbds.addSortField(fieldNum(RetailOrderHistoryView, OrderDateTime), SortOrder::Descending);
            qbds.addSortField(fieldNum(RetailOrderHistoryView, OrderRecId), SortOrder::Ascending);
            qbds.addSortField(fieldNum(RetailOrderHistoryView, OrderId), SortOrder::Ascending);
        }
        else
        {
            // Otherwise we return only orders
            qbds = query.addDataSource(tableNum(RetailOrderHistoryWithoutQuotationView));
            qbds.addRange(fieldNum(RetailOrderHistoryWithoutQuotationView, custAccount)).value(_custAccount);
            if (_startDateTime != DateTimeUtil::minValue() || _endDateTime != DateTimeUtil::maxValue())
            {
                qbds.addRange(fieldNum(RetailOrderHistoryWithoutQuotationView, OrderDateTime)).value(queryRange(_startDateTime, _endDateTime));
            }
            qbds.addSortField(fieldNum(RetailOrderHistoryWithoutQuotationView, OrderDateTime), SortOrder::Descending);
            qbds.addSortField(fieldNum(RetailOrderHistoryWithoutQuotationView, OrderRecId), SortOrder::Ascending);
            qbds.addSortField(fieldNum(RetailOrderHistoryWithoutQuotationView, OrderId), SortOrder::Ascending);
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPageRange</Name>
				<Source><![CDATA[
    internal void addPageRange(int resultsStartingPosition, int resultsMaxCount)
    {
        queryRun.enablePositionPaging(true);
        queryRun.addPageRange(resultsStartingPosition, resultsMaxCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    internal boolean moveNext()
    {
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    internal container get()
    {
        int historySource;
        int64 orderRecId;

        if (isConfigurationkeyEnabled(ConfigurationKeyNum(QuotationBasic)))
        {
            RetailOrderHistoryView orderHistoryView = queryRun.get(tableNum(RetailOrderHistoryView));
            historySource = orderHistoryView.HistorySource;
            orderRecId = orderHistoryView.OrderRecId;
        }
        else
        {
            RetailOrderHistoryWithoutQuotationView orderHistoryView = queryRun.get(tableNum(RetailOrderHistoryWithoutQuotationView));
            historySource = orderHistoryView.HistorySource;
            orderRecId = orderHistoryView.OrderRecId;
        }

        return [historySource, orderRecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>