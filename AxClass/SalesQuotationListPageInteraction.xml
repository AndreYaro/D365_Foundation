<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationListPageInteraction</c> class is the interaction class for a model driven
/// <c>PurchTableListPage</c> form.
/// </summary>
class SalesQuotationListPageInteraction extends SysListPageInteractionBase
{
    SalesQuotationMenuItemFormView          menuItemFormView;

    SalesQuotationTable                     salesQuotationTable;
    SalesQuotationTableInteractionHelper    salesQuotationTableInteractionHelper;

    boolean isSalesQuotationVisible;
    boolean isSalesQuotation;
    boolean isSalesOrder;
    boolean isRelAccountValid;

    boolean canConvertToCustomer;

    boolean isRetailOrder;
    NoYes	enableOrderPriceControl_Workflow;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an active record in the <c>SalesQuotationTable</c> table.
    /// </summary>
    /// <returns>
    /// An active record in the <c>SalesQuotationTable</c> table.
    /// </returns>
    internal protected SalesQuotationTable currentSalesQuotationTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(SalesQuotationListPage, SalesQuotationTable)) as SalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an active record in the <c>SmmBusRelTable</c> table.
    /// </summary>
    /// <returns>
    /// An active record in the <c>SmmBusRelTable</c> table.
    /// </returns>
    private smmBusRelTable currentSmmBusRelTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(SalesQuotationListPage, SmmBusRelTable)) as smmBusRelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>SmmBusRelTable</c> field in the data source provided the table is not a temporary
    /// table and sets the range values for the query.
    /// </summary>
    /// <param name="_query">
    /// The input query.
    /// </param>
    /// <remarks>
    /// This method is called one time by the framework when the data source query is initialized.
    /// </remarks>
    public void initializeQuery(Query _query)
    {
        smmBusRelTable       smmBusRelTable;

        super(_query);

        _query.dataSourceTable(tableNum(smmBusRelTable)).enabled(!smmBusRelTable.isTmp());

        this.linkActive(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsRelAccountValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quotation business account is valid and saves the result in a global variable.
    /// </summary>
    private void initIsRelAccountValid()
    {
        isRelAccountValid = salesQuotationTable && salesQuotationTable.BusRelAccount != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the quotation is a template and has a reference to a sales order and saves the
    ///    result in a global variable.
    /// </summary>
    private void initIsSalesOrder()
    {
        isSalesOrder = salesQuotationTable && salesQuotationTable.SalesIdRef != '' && !salesQuotationTable.isTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quotation type is equal to the <c>QuotationType::Sales</c> enumeration value and
    /// saves the result in a global variable.
    /// </summary>
    private void initIsSalesQuotation()
    {
        isSalesQuotationVisible = !salesQuotationTable || salesQuotationTable.QuotationType == QuotationType::Sales;
        isSalesQuotation = salesQuotationTable && salesQuotationTable.QuotationType == QuotationType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActive</Name>
				<Source><![CDATA[
    protected void linkActive(Query _query)
    {
        DirPartyRecId           party;

        Common callerRecord = this.listPage().listPageArgs().externalRecord();

        // Is form called with a record
        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                // Is the form called from the Campaign form
                case tableNum(smmCampaignSelection) :
                    party = callerRecord.(fieldNum(smmCampaignSelection,Party));
                    break;
            }

            if (party)
            {
                _query.dataSourceTable(tableNum(SalesQuotationTable)).clearDynalinks();
                CustTable custTable = CustTable::findByPartyRecId(party);
                if (custTable)
                {
                    _query.dataSourceTable(tableNum(SalesQuotationTable)).addDynalink(fieldNum(SalesQuotationTable,CustAccount),custTable,fieldNum(CustTable,AccountNum));
                }
                else
                {
                    smmBusRelTable smmBusRelTable = smmBusRelTable::findByParty(party);
                    _query.dataSourceTable(tableNum(SalesQuotationTable)).addDynalink(fieldNum(SalesQuotationTable,BusRelAccount),smmBusRelTable,fieldNum(smmBusRelTable,BusRelAccount));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current record in the <c>SalesQuotationTable</c> table and initializes the record-specific
    /// global variables.
    /// </summary>
    /// <remarks>
    /// This method is called by the framework every time that a record is selected in the grid on the list
    /// page.
    /// </remarks>
    public void selectionChanged()
    {
        salesQuotationTable = this.currentSalesQuotationTable();

        salesQuotationTableInteractionHelper = SalesQuotationTableInteractionHelper::construct();
        salesQuotationTableInteractionHelper.initHeaderActions(salesQuotationTable);

        this.initializeOnSelectionChange();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOnSelectionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the<c>SalesQuotationListPageInteraction</c> class when the selection is changed.
    /// </summary>
    protected void initializeOnSelectionChange()
    {
        this.initIsSalesQuotation();
        this.initIsSalesOrder();
        this.initIsRelAccountValid();

        // init for retail sales quotation line workflow
        isRetailOrder = RetailPricingEngine::useRetailPricingEngineForSalesQuatation(salesQuotationTable.QuotationId);
        enableOrderPriceControl_Workflow = RetailMCRChannelTable::mcrEnableOrderPriceControlFindByUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables action pane buttons according to the active record data.
    /// </summary>
    protected void setButtonEnabled()
    {
        super();

        this.setButtonGeneral();
        this.setButtonFollowup();
        this.setButtonQuotation();
        this.setButtonQuote();
        this.setButtonRetail();

        xFormRun formRun = FormDataUtil::getFormDataSource(salesQuotationTable).formRun();
        FormDataSource salesQuotationTable_ds = SysFormDataSource::findDataSource(formRun, tablenum(SalesQuotationTable));
        if (salesQuotationTable_ds)
        {
            salesQuotationTable_ds.allowDelete(salesQuotationTable.checkDelete());
        }

        menuItemFormView.setButtonEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonFollowup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables follow-up action pane tab buttons according to the active record data.
    /// </summary>
    protected void setButtonFollowup()
    {
        // FollowUpStatus (Generate)

        // Confirmation
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, buttonUpdateConfirmation), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonUpdateConfirmation),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateConfirmationEnabled());

        // Cancled
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, buttonUpdateCancelled), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonUpdateCancelled),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateCancelledEnabled());

        // Lost
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, buttonUpdateLost), isSalesQuotationVisible);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonUpdateLost),
            isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateLostEnabled());

        // Modify
        // Can convert to customer
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonConvert2Customer), salesQuotationTableInteractionHelper.parmCanConvert2Customer());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, changeReasonCode), salesQuotationTableInteractionHelper.parmChangeReasonCodeEnabled());

        // Change ownership
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, salesQuotationOwnershipChange), salesQuotationTableInteractionHelper.parmCanUpdateQuotationOwnership());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the general action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonGeneral()
    {
        boolean isCustomer = salesQuotationTable.CustAccount? true : false;

        // Trade agreements
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, priceDiscTable_Sales), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, salesPrice), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, salesLineDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, salesMultiLineDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, salesEndDisc), isCustomer);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, priceDiscAdmTable_SalesCreate), isCustomer);

        // Activities
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, ServicingViewActivities), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, CreateActivity), isSalesQuotation);
        }

        // Manage
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, suppItemTable_Sales), isCustomer);

        // Related information
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, generalSalesOrders), isSalesQuotation || isSalesOrder);
        // May quotation be linked
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, generalAlternativeQuotations), salesQuotationTable && salesQuotationTableInteractionHelper.parmAlternativeQuotationsEnabled());

        // Setup
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, Btn_PrintMgmt), salesQuotationTableInteractionHelper.parmIsNotTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the Sales quotation action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonQuotation()
    {
        // Copy
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonCopyAllHeader), salesQuotationTableInteractionHelper.parmMayQuotationBeCopied());

        // View
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, totals), salesQuotationTableInteractionHelper.parmQuotationNotConfirmed());
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, totals), isSalesQuotationVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonQuote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the quote action pane tab buttons based on the active record data.
    /// </summary>
    protected void setButtonQuote()
    {
        // Tax
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, SalesTax), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Calculate group
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, MultiLnDiscAction),
            salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.CustAccount != "");
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, buttonEndDiscAction),
            salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTable.CustAccount != "");

        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, SuppItemCalc_QuotationHeader), salesQuotationTableInteractionHelper.parmIsNotTemplate() && salesQuotationTableInteractionHelper.parmButtonSupplementaryItemsVisible());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, AutoCharges), salesQuotationTableInteractionHelper.parmButtonAutoChargesEnabled());
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, AutoCharges), salesQuotationTableInteractionHelper.parmButtonAutoChargesVisible());

        // Process (Generate)  - May Quotation be updated
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, updateQuotation), isSalesQuotationVisible && salesQuotationTableInteractionHelper.parmUpdateQuotationEnabled());
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, updateQuotation), isSalesQuotationVisible);

        // Accounts
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, customer), salesQuotationTable && salesQuotationTable.CustAccount != "");
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, businessRelationship), isRelAccountValid);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, Prices), salesQuotationTableInteractionHelper.parmIsNotTemplate());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, ContactPerson), salesQuotationTableInteractionHelper.parmIsNotTemplate());

        // Bank
        this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, BankLGRequestForm), salesQuotationTableInteractionHelper.parmBankLGRequestFormEnabled());

        // Journals group
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, quotationJournals), salesQuotationTableInteractionHelper.parmJournalQuotationEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, confirmationJournal), salesQuotationTableInteractionHelper.parmJournalConfirmationEnabled());

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesQuotationListPage, TaxDocumentLauncher), true);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the retail action pane tab buttons based on the active record data.
    /// </summary>
    private void setButtonRetail()
    {
        if (isRetailOrder)
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesQuotationListPage, AffiliationsButtonGroup), isRetailOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the action pane buttons according to the list page type.
    /// </summary>
    /// <remarks>
    /// The method is only called one time when the list page is opened.
    /// </remarks>
    protected void setButtonVisibility()
    {
        super();

        menuItemFormView.setButtonVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form caption according to the list page type.
    /// </summary>
    /// <remarks>
    /// This method is only called one time when the list page is opened.
    /// </remarks>
    protected void setCaption()
    {
        super();

        menuItemFormView.setCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides the fields in the grid.
    /// </summary>
    /// <remarks>
    /// This method is only called one time when the list page is opened.
    /// </remarks>
    protected void setGridFieldVisibility()
    {
        super();

        menuItemFormView.setGridFieldVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the list page type.
    /// </summary>
    /// <param name="_listPageArgs">
    ///    The list page type.
    /// </param>
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        super(_listPageArgs);

        menuItemFormView = SysListPageMenuItemFormView::newFromListPageInteraction(this, classNum(SalesQuotationMenuItemFormView)) as SalesQuotationMenuItemFormView;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>