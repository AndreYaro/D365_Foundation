<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemKey</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemKey</c> class provides different keys to identify a released product.
/// </summary>
final public class InventItemKey
{
    private ItemId              itemId;
    private InventDimId         inventDimId;
    private CompanyId           itemDataAreaId;

    private EcoResProductRecId  productRecId;

    private EcoResProductKey    productKey;

    private InventTable         inventTable;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the released product record associated with the released product key.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> record.
    /// </returns>
    [Hookable(false)]
    final public InventTable inventTable()
    {
        if (!inventTable.RecId)
        {
            if (itemId)
            {
                inventTable = InventTable::find(ItemId);
            }
            else if (productRecId)
            {   
                EcoResProduct product = EcoResProduct::find(productRecId);

                if (product is EcoResDistinctProductVariant)
                {
                    InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(productRecId);
                    
                    inventTable         = inventDimCombination.inventTable();
                }
                else
                {
                    inventTable         = InventTable::findByProduct(productRecId);
                }
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public ItemId parmItemId()
    {
        if (!itemId)
        {
            itemId = this.inventTable().itemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public CompanyId parmItemDataAreaId()
    {
        return itemDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public EcoResProductRecId parmProductRecId()
    {
        if (!productRecId)
        {
            productRecId = this.inventTable().Product;
        }

        return productRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventDimId parmInventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a product key based on the current key.
    /// </summary>
    /// <returns>
    /// The instantiated <c>EcoResProductKey</c> object.
    /// </returns>
    [Hookable(false)]
    final public EcoResProductKey productKey()
    {
        if (!productKey)
        {
            productKey = EcoResProductKey::newFromItemKey(this);
        }

        return productKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the instance specifies a key to identify a released product.
    /// </summary>
    /// <returns>
    /// True if a key is specified; otherwise, false.
    /// </returns>
    [Hookable(false)]
    final public boolean isSpecified()
    {
        return itemId || productRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a released product key based on an item number and inventory dimensions.
    /// </summary>
    /// <param name = "_itemId">
    /// An item number.
    /// </param>
    /// <param name = "_inventDimId">
    /// An inventory dimension ID.
    /// </param>
    /// <returns>
    /// An <c>InventItemKey</c> object.
    /// </returns>
    [Hookable(false)]
    static internal InventItemKey newFromItem(ItemId _itemId, InventDimId _inventDimId)
    {
        InventItemKey itemkey = new InventItemKey();

        itemkey.itemId          = _itemId;
        itemkey.inventDimId     = _inventDimId;
        itemkey.itemDataAreaId  = curExt();

        return itemKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a released product key based on an product record ID.
    /// </summary>
    /// <param name = "_productRecId">
    /// A product record ID.
    /// </param>
    /// <returns>
    /// An <c>InventItemKey</c> object.
    /// </returns>
    [Hookable(false)]
    static internal InventItemKey newFromProduct(EcoResProductRecId _productRecId)
    {
        InventItemKey itemkey = new InventItemKey();

        itemkey.productRecId    = _productRecId;
        itemkey.itemDataAreaId  = curExt();

        return itemKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>