<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseReportViewVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class controls the visibility of expense report view fields based on setup.
/// </summary>
class TrvExpenseReportViewVisibilityManager extends TrvVisibilityManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for an new instance of TrvExpenseReportVisibilityManager.
    /// </summary>
    /// <param name = "_trvExpTableView">
    /// The current record instance of the <c>TrvExpTableView</c>.
    /// </param>
    /// <param name = "_trvExpenseReportForm">
    /// An instance of the calling form object.
    /// </param>
    /// <param name = "_dataSourceName">
    /// Name of the datasource on the form for which we set the visibility.
    /// </param>
    void new(Common _trvExpTableView, FormRun _trvExpenseReportForm, str _dataSourceName)
    {
        this.parmTrvExpenseRecord(_trvExpTableView);
        this.parmFormInstance(_trvExpenseReportForm);
        this.parmDataSourceName(_dataSourceName);

        // Get admin custom fields only once to improve efficiency.
        trvAdminCustomFieldsContainer = TrvAdminCustomFieldsCacheHelper::getHeaderAdminFieldsCacheValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of header fields based on the setup.
    /// </summary>
    /// <param name = "_isVisible">True if set to visible, otherwise false.</param>
    public void setFieldVisibilities(boolean _isVisible = true)
    {
        FormDataSource formDataSource = trvExpenseForm.dataSource(dataSourceName);

        // If formDataSource is null return and skip execution of visibility logic.
        if (!formDataSource)
        {
            return;
        }
       
        // Views editability will always be false
        this.setVisibilityForAdminCustomFields(trvAdminCustomFieldsContainer, formDataSource, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAdminCustomFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility on the fields of the datasource.
    /// </summary>
    /// <param name = "_trvAdminCustomFieldsContainer">
    /// A container of <c>TrvAdminCustomFields</c> records for setting visibility.
    /// </param>
    /// <param name = "_formDataSource">
    /// An instance of the datasource on the calling form object.
    /// </param>
    /// <param name = "_isEditable">
    /// Specifies if the datasource is editable or read only.  
    /// Not used as <c>TrvExpTableView</c> is a view that will always be read-only.
    /// </param>
    void setVisibilityForAdminCustomFields(container _trvAdminCustomFieldsContainer, FormDataSource _formDataSource, boolean _isEditable = true)
    {       
        int rowCount = conlen(_trvAdminCustomFieldsContainer); 

        for (int i = 1; i <= rowCount; i++)
        {
            TrvAdminCustomFields trvAdminCustomFields = TrvAdminCustomFieldsCacheHelper::convertContainerToTableBuffer(_trvAdminCustomFieldsContainer, i);

            if (trvAdminCustomFields.RefTableId != tableNum(TrvExpTable))
            {
                continue;
            }

            FormDataObject formDataObject;

            switch (trvAdminCustomFields.RefFieldId)
            {
                case fieldNum (TrvExpTable, CustAccount) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, CustAccount));
                    break;

                case fieldNum (TrvExpTable, Destination) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, Destination));
                    break;

                case fieldNum (TrvExpTable, LegalEntity) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, LegalEntity));
                    break;

                case fieldNum (TrvExpTable, ProjId) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, ProjId));
                    break;

                case fieldNum (TrvExpTable, Txt1) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, Txt1));
                    break;

                case fieldNum (TrvExpTable, Txt2) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, Txt2));
                    break;

                case fieldNum (TrvExpTable, VendAccount) :
                    formDataObject = _formDataSource.object(fieldNum(TrvExpTableView, VendAccount));
                    break;
            }

            if (formDataObject)
            {
                this.setVisibilityForFormDataObject(formDataObject, trvAdminCustomFields.Visibility);
            }

        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForFormDataObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Sets visibility for each control.
    /// </summary>
    /// <param name = "_formDataObject">
    ///	Form data object.
    /// </param>
    /// <param name = "_trvFieldVisibilty">
    ///	Field visibility.
    /// </param>
    void setVisibilityForFormDataObject(FormDataObject _formDataObject, TrvFieldVisibility _trvFieldVisibilty)
    {
        if ((_formDataObject.visible() && _trvFieldVisibilty == TrvFieldVisibility::DoNotDisplay))
        {
            _formDataObject.visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>