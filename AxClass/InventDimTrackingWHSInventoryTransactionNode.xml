<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimTrackingWHSInventoryTransactionNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimTrackingWHSInventoryTransactionNode</c> holds tracing relations for a single record
/// of the warehouse inventory transaction stack.
/// </summary>
internal final class InventDimTrackingWHSInventoryTransactionNode extends InventDimTrackingInventTransNode
{
    private InventTrackingDimTracingWHSInventoryTransactionDTO whsInventoryTransactionDTO;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromWHSInventoryTransDTO</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventDimTrackingWHSInventoryTransactionNode newFromWHSInventoryTransDTO(InventTrackingDimTracingWHSInventoryTransactionDTO _whsInventoryTransactionDTO)
    {
        var inventDimTrackingWHSInventoryTransactionNode = InventDimTrackingWHSInventoryTransactionNode::construct();

        inventDimTrackingWHSInventoryTransactionNode.parmWHSInventoryTransactionDTO(_whsInventoryTransactionDTO);
        inventDimTrackingWHSInventoryTransactionNode.initDateInformationForWHSNode();

        return inventDimTrackingWHSInventoryTransactionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSInventoryTransactionDTO</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTrackingDimTracingWHSInventoryTransactionDTO parmWHSInventoryTransactionDTO(InventTrackingDimTracingWHSInventoryTransactionDTO _whsInventoryTransactionDTO = whsInventoryTransactionDTO)
    {
        if (!prmisDefault(_whsInventoryTransactionDTO))
        {
            whsInventoryTransactionDTO   = _whsInventoryTransactionDTO;
        }

        return whsInventoryTransactionDTO ? whsInventoryTransactionDTO : InventTrackingDimTracingWHSInventoryTransactionDTO::initFromCommon(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimTrackingWHSInventoryTransactionNode construct()
    {
        return new InventDimTrackingWHSInventoryTransactionNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeForIssueTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isNodeForIssueTransaction()
    {
        return whsInventoryTransactionDTO.type() == WHSInventoryTransactionTypeEnum::RegisteredIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim getInventDim()
    {
        return InventDim::find(whsInventoryTransactionDTO.InventDimId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId getItemId()
    {
        return whsInventoryTransactionDTO.itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTrackingTransactionType getTransactionType()
    {
        return InventTrackingTransactionType::WHSInventoryTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeContainerToSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addNodeContainerToSet(Set _set)
    {
        _set.add([this.getItemId(), this.stockQtyChangeDate(), this.getTransactionType(), 0, 0, whsInventoryTransactionDTO.uniqueKey()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tracingNodeKey</Name>
				<Source><![CDATA[
    public str tracingNodeKey()
    {
        return whsInventoryTransactionDTO.uniqueKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockQtyChangeDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal StockQtyChangeDate stockQtyChangeDate()
    {
        return whsInventoryTransactionDTO.stockQtyChangeDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDate</Name>
				<Source><![CDATA[
    public TransDate trackingDate()
    {
        return whsInventoryTransactionDTO.stockQtyChangeDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDTOSet</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean transactionDTOSet()
    {
        return whsInventoryTransactionDTO.uniqueKey() != '';           
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransRefId referenceId()
    {
        return whsInventoryTransactionDTO.referenceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeTxt</Name>
				<Source><![CDATA[
    public str treeNodeTxt()
    {
        str         lineTxt;

        void addFieldBreak()
        {
            lineTxt += #TreeNodePartSeparator;
        }

        InventTrackingDimTracingWHSInventoryTransactionDTO whsInventoryTransactionDTOLocal = this.parmWHSInventoryTransactionDTO();

        ItemId itemId = whsInventoryTransactionDTOLocal.itemId();

        lineTxt += itemId ? itemId : '--';
        addFieldBreak();
       
        lineTxt += enum2str(whsInventoryTransactionDTOLocal.referenceCategory()) + ' ';
        lineTxt += (whsInventoryTransactionDTOLocal.referenceId() ? whsInventoryTransactionDTOLocal.referenceId() : '--');
        addFieldBreak();

        lineTxt += (whsInventoryTransactionDTOLocal.stockQtyChangeDate() ? date2StrUsr(whsInventoryTransactionDTOLocal.stockQtyChangeDate(), DateFlags::FormatAll) : '--');
        addFieldBreak();

        // For Catch Weight items also show CW quantity and unit
        PdsCWUnitId cwUnitId = whsInventoryTransactionDTOLocal.catchWeightUnitId();
        if (cwUnitId)
        {
            int cwQtyNoOfDecimals = new SysDictType(extendedTypeNum(PdsCWInventQty)).noOfDecimals();
            lineTxt += strFmt("@SYS311966", num2str(whsInventoryTransactionDTOLocal.catchWeightQty(), 0, cwQtyNoOfDecimals, 0, 0), cwUnitId);
            addFieldBreak();
        }
                
        lineTxt += strFmt("@SYS311966", whsInventoryTransactionDTOLocal.inventQty(), whsInventoryTransactionDTOLocal.inventUnitId());
        
        addFieldBreak();

        lineTxt += this.getInventDim().preFix();

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId getInventDimId()
    {
        return whsInventoryTransactionDTO.InventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNodeAttributesAsXML</Name>
				<Source><![CDATA[
    public void writeNodeAttributesAsXML(XmlWriter _xmlWriter)
    {
        this.defineCommonXMLAttributes(_xmlWriter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str referenceCategory()
    {
        return enum2Str(whsInventoryTransactionDTO.referenceCategory());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQty inventQty()
    {
        return whsInventoryTransactionDTO.inventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol inventUnitId()
    {               
        return InventTableModule::find(this.getItemId(), ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol catchWeightUnitId()
    {
        return this.parmInventTransOriginDTO().catchWeightUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PdsCWQty catchWeightQty()
    {
        return this.parmInventTransDTO().catchWeightQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateInformationForWHSNode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initDateInformationForWHSNode()
    {
        hasFullDateTime = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>