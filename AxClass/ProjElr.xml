<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjElr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds methods related to the Effective Labor Rate functionality
/// </summary>
class ProjElr
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustHourTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust hour transactions for a resource within a period
    /// </summary>
    /// <param name="_fromDate">
    /// period start date
    /// </param>
    /// <param name="_toDate">
    /// period end date
    /// </param>
    /// <param name="_resource">
    /// The resource to adjust for
    /// </param>
    /// <param name="_newCostPerHour">
    /// The cost to adjust to
    /// </param>
    static void adjustHourTrans(
    TransDate   _fromDate,
    TransDate   _toDate,
    ResourceRecId _resource,
    AmountCur   _newCostPerHour)
    {
        ProjAdjustmentELR projAdjustmentELR = new ProjAdjustmentELR();

        projAdjustmentELR.adjustCostTransPeriod(
        _fromDate,
        _toDate,
        _resource,
        _newCostPerHour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasicCalendar</Name>
				<Source><![CDATA[
    private static CalendarId getBasicCalendar(WorkCalendarTable _workCalendarTable)
    {
        WorkCalendarTable basicWorkCalendarTable;

        if (_workCalendarTable.BasicCalendarId)
        {
            basicWorkCalendarTable = WorkCalendarTable::find(_workCalendarTable.BasicCalendarId);
            return ProjElr::GetBasicCalendar(basicWorkCalendarTable);
        }
        return _workCalendarTable.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the work calendar for a _resource
    /// </summary>
    /// <param name="_resource">
    /// The resource to get the calendar for
    /// </param>
    /// <returns>
    /// the calendar id of the work calendar
    /// </returns>
    public static CalendarId getCalendarId(ResourceRecId _resource)
    {        
        WorkCalendarTable   workCalendarTable;
        CalendarId          calendarId;

        calendarId = ResourceFacade::getCalendarId(_resource);
        workCalendarTable   = WorkCalendarTable::find(calendarId);

        return ProjElr::GetBasicCalendar(workCalendarTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostPerHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated the new ELR cost per hour for a resource in a period
    /// </summary>
    /// <param name="_fromDate">
    /// start of period
    /// </param>
    /// <param name="_toDate">
    /// end of period
    /// </param>
    /// <param name="_resource">
    /// the resource to calculate for
    /// </param>
    /// <param name="_newHoursInPeriod">
    /// New hours that will be added to the period (for example in a new timesheet)
    /// </param>
    /// <returns>
    /// The new cost price
    /// </returns>
    public static AmountCur newCostPerHour(
    TransDate   _fromDate,
    TransDate   _toDate,
    ResourceRecId _resource,
    ProjQtyEmpl _newHoursInPeriod)
    {
        ProjEmplTrans           emplTrans;

        ProjQtyEmpl             hoursUsedInPeriod;
        ProjQtyEmpl             hoursExpectedInPeriod;

        AmountCur               newCostPerHour;
        AmountCur               elrCostPerHourSetup;
        CurrencyCode            currencyCode = CompanyInfoHelper::standardCurrency();

        // Need to pass the TO Date of the Calendar week period instead of FROM
        // The price finder for the ELR should include all the dates of the week for a given period
        // Using the start of the week date would not include all the dates of the week period
        elrCostPerHourSetup = ProjHourCostPrice::findResourceRate(_resource, _toDate).CostPrice;

        if (elrCostPerHourSetup == 0)
        {
            return 0;
        }

        // existing hours in the system
        select crossCompany sum (Qty), sum(TotalCostAmountCur) from emplTrans where
        emplTrans.TransDate >= _fromDate &&
        emplTrans.TransDate <= _toDate   &&
        emplTrans.Resource    == _resource;

        hoursUsedInPeriod = emplTrans.Qty + _newHoursInPeriod;

        hoursExpectedInPeriod = ProjElr::getHoursExpectedInPeriod(_resource, _fromDate, _toDate);

        if (hoursExpectedInPeriod == 0 || hoursUsedInPeriod == 0)
        {
            return 0;
        }

        newCostPerHour = hoursExpectedInPeriod / hoursUsedInPeriod * elrCostPerHourSetup;
        return CurrencyExchangeHelper::price(newCostPerHour, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoursExpectedInPeriod</Name>
				<Source><![CDATA[
    public static ProjQtyEmpl getHoursExpectedInPeriod(ResourceRecId _resource, TransDate _fromDate, TransDate _toDate)
    {
        List dates;
        date toDate = _toDate;
        CalendarRecId calendar;
        ListEnumerator datesEnumerator;
        ProjQtyEmpl hoursExpectedInPeriod;

        // Find the calendar to use
        calendar = ResourceFacade::getCalendar(_resource, _fromDate, toDate);

        // Need to fetch ToDate when employment end date falls before last day of provided timeframe.
        if (!calendar)
        {
            toDate = DateTimeUtil::date(ProjElr::getResourceCalendarToDate(_resource, _fromDate, toDate));
            calendar = ResourceFacade::getCalendar(_resource, _fromDate, toDate);
        }

        // standard working hours for the week
        dates = ResourceCalendarFacade::getDates(calendar, _fromDate, toDate);
        datesEnumerator = dates.getEnumerator();

        while (datesEnumerator.moveNext())
        {
            CalendarId calendarId = ProjElr::GetBasicCalendar(WorkCalendarTable::find(ResourceFacade::getCalendarId(_resource, _fromDate, toDate)));
            date transDate = datesEnumerator.current();
            hoursExpectedInPeriod += WorkCalendarDate::calcDefinedHours(calendarId, transDate, false);
        }

        return hoursExpectedInPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCalendarToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves ToDate of the calendar used by the resource during provided timeframe, specifically when employment end date falls before last day of provided timeframe.
    /// </summary>
    /// <param name = "_resource">The resource to get calendar of.</param>
    /// <param name = "_validFromDateTime">Start of timeframe to get calendar for.</param>
    /// <param name = "_validToDateTime">End of timeframe to get calendar for.</param>
    /// <returns>The To Date of the calendar used by the resource for the provided timeframe.</returns>
    public static utcdatetime getResourceCalendarToDate(
        ResourceRecId _resource,
        TransDate _validFromDateTime,
        TransDate _validToDateTime)
    {
        utcdatetime validToDateTime, validFromDateTime, resourceTodate;
        validToDateTime = DateTimeUtil::newDateTime(_validToDateTime, #LastSecondOfTheDay);
        validFromDateTime = DateTimeUtil::newDateTime(_validFromDateTime, 0);

        if (_resource)
        {
            if(ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                ResCalendarDateTimeRange calendarDateTimeRange;

                select firstonly validToDateTime from calendarDateTimeRange
                    order by calendarDateTimeRange.ValidFromDateTime
                    where calendarDateTimeRange.Resource == _resource
                        && calendarDateTimeRange.ValidFromDateTime <= validFromDateTime
                        && calendarDateTimeRange.validToDateTime < validToDateTime;

                resourceTodate = calendarDateTimeRange.validToDateTime;
            }
            else
            {
                ResourceLegalEntityView resourceLegalEntityView;

                select firstonly CalendarvalidTo from resourceLegalEntityView
                    order by resourceLegalEntityView.CalendarValidFrom
                    where resourceLegalEntityView.Resource == _resource
                        && resourceLegalEntityView.CalendarValidFrom <= validFromDateTime
                        && resourceLegalEntityView.CalendarValidTo < validToDateTime;

                resourceTodate = resourceLegalEntityView.CalendarValidTo;
            }
        }

        return resourceTodate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>