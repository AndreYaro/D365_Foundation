<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorDeleteCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorDeleteCatalog
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelPendingWorkflows</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the workflows of a deleted catalog file.
    /// </summary>
    /// <param name="_catVendorCatalogRecId">
    ///    The record ID of the <c>CatVendorCatalog</c> record.
    /// </param>
    public static void cancelPendingWorkflows(RefRecId _catVendorCatalogRecId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        WorkflowTrackingStatusTable         workflowTrackingStatusTable;
        while select recId from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.VendorCatalog == _catVendorCatalogRecId
        {
            // Find tracking status record for current document which is neither cancelled nor completed.
            // Don't want to call Workflow::findTrackingStatusForCurrentUser which restricts result to
            // WorkflowTrackingStatusTable.Originator == curUserId().
            select firstonly recId,CorrelationId from workflowTrackingStatusTable
                    order by CreatedDateTime
                    where workflowTrackingStatusTable.ContextRecId   == catVendorCatalogMaintenanceRequest.RecId &&
                          workflowTrackingStatusTable.ContextTableId == catVendorCatalogMaintenanceRequest.TableId &&
                          workflowTrackingStatusTable.TrackingStatus != WorkflowTrackingStatus::Cancelled &&
                          workflowTrackingStatusTable.TrackingStatus != WorkflowTrackingStatus::Completed;
            if (workflowTrackingStatusTable)
            {
                Workflow::cancelWorkflow(workflowTrackingStatusTable.CorrelationId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCatalog</Name>
				<Source><![CDATA[
        public static void deleteCatalog(RefRecId _catalogId)
    {
        CatVendorCatalogMaintenance catVendorCatalogMaintenance = new CatVendorCatalogMaintenance();
        ttsbegin;
            CatVendorDeleteCatalog::cancelPendingWorkflows(_catalogId);
            catVendorCatalogMaintenance.deleteCatalog(_catalogId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args args)
    {
        boolean                     calledFromClient;

        CatVendorCatalog            catVendorCatalog;

        catVendorCatalog = args.record() as CatVendorCatalog;

        calledFromClient = ( args.menuItemName() == menuitemActionStr(CatVendorDeleteCatalog) );

        if (catVendorCatalog)
        {
            if (calledFromClient)
            {
                if (box::yesNo("@SYS311258", DialogButton::Cancel, "@SYS311259"))
                {
                    CatVendorDeleteCatalog::deleteCatalog(catVendorCatalog.RecId);
                }
            }
            else
            {
                CatVendorDeleteCatalog::deleteCatalog(catVendorCatalog.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>