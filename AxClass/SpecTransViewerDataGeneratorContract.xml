<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransViewerDataGeneratorContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransViewerDataGeneratorContract</c> class provides a contract for temporary table instance and
/// search criteria used when generating data for the <c>SpecTransViewer</c> form.
/// </summary>
internal final class SpecTransViewerDataGeneratorContract implements SysPackable
{
    private TableName specTransTmpTableName;
    private SpecTransViewerSearchCriteria searchCriteria;

    private const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSpecTransTmpTableName</Name>
				<Source><![CDATA[
    internal TableName parmSpecTransTmpTableName(TableName _specTransTmpTableName = specTransTmpTableName)
    {
        specTransTmpTableName = _specTransTmpTableName;
        return specTransTmpTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchCriteria</Name>
				<Source><![CDATA[
    internal SpecTransViewerSearchCriteria parmSearchCriteria(SpecTransViewerSearchCriteria _searchCriteria = searchCriteria)
    {
        searchCriteria = _searchCriteria;
        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, specTransTmpTableName, searchCriteria.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedVersion)
    {
        boolean isValid = true;

        Version version = RunBase::getVersion(_packedVersion);
        container packedSearchCriteria;

        switch (version)
        {
            case CurrentVersion:
                [version, specTransTmpTableName, packedSearchCriteria] = _packedVersion;
                break;

            default:
                return false;
        }

        if (packedSearchCriteria != conNull())
        {
            searchCriteria = SpecTransViewerSearchCriteria::construct();
            searchCriteria.unpack(packedSearchCriteria);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SpecTransViewerDataGeneratorContract construct()
    {
        return new SpecTransViewerDataGeneratorContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newContract</Name>
				<Source><![CDATA[
    internal static SpecTransViewerDataGeneratorContract newContract(
        TableName _tableName,
        SpecTransViewerSearchCriteria _searchCriteria)
    {
        SpecTransViewerDataGeneratorContract contract =  SpecTransViewerDataGeneratorContract::construct();
        contract.parmSpecTransTmpTableName(_tableName);
        contract.parmSearchCriteria(_searchCriteria);

        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>