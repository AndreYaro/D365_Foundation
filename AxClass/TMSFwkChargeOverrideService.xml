<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkChargeOverrideService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkChargeOverrideService</c> class applies charge overrides for transportation rates.
/// </summary>
class TMSFwkChargeOverrideService
{
    private static TMSFwkRatingService ratingService = TMSFwkRatingService::construct();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processChargeOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies charge overrides to a shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    public static void processChargeOverride(TmsTransactionFacade _transactionFacade, XElement _shippingEntity)
    {
        // first do we have a customer transportation template override
        TMSTransportationTemplateId transportationTemplateId = _shippingEntity.GetString(ElementXmlConstants::TransportationTemplate);

        if (transportationTemplateId != '')
        {
            TMSTransportationTemplate transportationTemplate = TMSTransportationTemplate::find(transportationTemplateId);

            if (transportationTemplate != null)
            {
                TMSFwkChargeOverrideService::processOverride(
                    _transactionFacade,
                    _shippingEntity,
                    transportationTemplate.CustManual == NoYes::Yes,
                    transportationTemplate.CustRoutePlanCode,
                    transportationTemplate.CustCarrierCode,
                    transportationTemplate.RecId,
                    transportationTemplate.CustCarrierServiceCode,
                    TMSTableRef::TransportationTemplateTable);
            }
        }
        else
        {
            // second see if we have a charge override
            TMSChargeOverride chargeOverride = TMSChargeOverride::findForCustAccountOrVendAccount(_transactionFacade.parmCustomerCode(), _transactionFacade.parmVendorCode());

            if (chargeOverride != null)
            {
                TMSFwkChargeOverrideService::processOverride(
                    _transactionFacade,
                    _shippingEntity,
                    chargeOverride.CustManual == NoYes::Yes,
                    chargeOverride.RoutePlanCode,
                    chargeOverride.CarrierCode,
                    chargeOverride.RecId,
                    chargeOverride.CarrierServiceCode,
                    TMSTableRef::ChargeOverrideTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOverride</Name>
				<Source><![CDATA[
    private static void processOverride(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        boolean                 _isManual,
        TMSRouteConfigCode      _routePlanCode,
        TMSCarrierCode          _carrierCode,
        RefRecId                _refRecId,
        TMSCarrierServiceCode   _carrierServiceCode,
        TMSTableRef             _tableRef)
    {
        if (_isManual)
        {
            TMSFwkChargeOverrideService::handleManualGridCharge(_refRecId, _shippingEntity, _tableRef);
        }
        else
        {
            if (_routePlanCode != '')
            {
                RatingDtoList ratingDTOs = TMSFwkRatingService::retrieveRatingDtoList(_transactionFacade, _shippingEntity);

                // get original trans facade and shipping entities for fresh route/rate
                TMSFwkTransportationTemplateService::processRoutePlan(_transactionFacade, _shippingEntity, _routePlanCode, true, ratingDTOs);
            }
            else if (_carrierCode != '')
            {
                TMSFwkChargeOverrideService::processCarrierService(_transactionFacade, _shippingEntity, _carrierCode, _carrierServiceCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleManualGridCharge</Name>
				<Source><![CDATA[
    private static void handleManualGridCharge(
        RefRecId    _refRecId,
        XElement    _shippingEntity,
        TMSTableRef _tableRef)
    {
        TMSChargeOverrideDetail chargeOverrideDetail;
        CurrencyCode parentCurrencyCode = _shippingEntity.GetString(ElementXmlConstants::OrderCurrency);

        // Ordering by carrier code and accessorial master code by legacy requirement
        while select chargeOverrideDetail
            where chargeOverrideDetail.TableRef == _tableRef
                && chargeOverrideDetail.RefRecId == _refRecId
        {
            RatingDto ratingDto = new RatingDto();
            ratingDto.CarrierCode = chargeOverrideDetail.CarrierCode;
            ratingDto.CarrierServiceCode = chargeOverrideDetail.CarrierServiceCode;
            ratingDto.IsChargeOverride = true;

            TMSFwkChargeOverrideService::addManualRate(
                _shippingEntity.RetrieveOrCreateRatingEntity(ratingDTO),
                chargeOverrideDetail.AccessorialMasterCode,
                chargeOverrideDetail.Qty,
                chargeOverrideDetail.UnitPrice,
                chargeOverrideDetail.CurrencyCode,
                parentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCarrierService</Name>
				<Source><![CDATA[
    private static void processCarrierService(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        TMSCarrierCode          _carrierCode,
        TMSCarrierServiceCode   _carrierServiceCode)
    {
        RatingDto ratingDto = TMSFwkRatingDtoHelper::getRatingDtoForCarrier(
            _transactionFacade,
            _carrierCode,
            _carrierServiceCode,
            DateTimeUtil::newDateTime(dateNull(), 0));

        ratingDto.IsChargeOverride = true;

        RatingDtoList ratingDtos = new RatingDtoList();
        ratingDtos.Add(ratingDto);

        TMSFwkRatingService::rateEntity(_transactionFacade, _shippingEntity, ratingDtos);
        ratingService.processAccessorialCharges(_transactionFacade, _shippingEntity, ratingDtos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addManualRate</Name>
				<Source><![CDATA[
    private static void addManualRate(
        XElement                    _ratingEntity,
        TMSAccessorialMasterCode    _accessorialMasterCode,
        TMSQty                      _units,
        TMSUnitPrice                _unitRate,
        CurrencyCode                _currencyCode,
        CurrencyCode                _baseCurrency)
    {
        real rate = _units * _unitRate;
        real baseCurrencyRate = rate;

        Microsoft.Dynamics.Ax.Tms.Base.Data.TmsRateType rateType = _accessorialMasterCode != '' ?
            Microsoft.Dynamics.Ax.Tms.Base.Data.TmsRateType::Accessorial :
            Microsoft.Dynamics.Ax.Tms.Base.Data.TmsRateType::Rate;

        if (_baseCurrency != '' && _currencyCode != _baseCurrency)
        {
            baseCurrencyRate = TMSGlobal::convertCurrency(_currencyCode, _baseCurrency, rate);
        }

        _ratingEntity.AddChargeWithCurrencyInfo(
            rateType,
            _accessorialMasterCode,
            _currencyCode,
            rate,
            _baseCurrency,
            baseCurrencyRate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>