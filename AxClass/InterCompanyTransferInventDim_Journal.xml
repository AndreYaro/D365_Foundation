<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTransferInventDim_Journal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InterCompanyTransferInventDim_Journal</c> class handles the <c>invent</c> dimensions
///    transfer when called from journals.
/// </summary>
/// <remarks>
///    The journals are <c>VendPackingSlipJour</c>, <c>VendInvoiceJour</c>, <c>CustPackingSlipJour</c> and
///    <c>CustInvoiceJour</c>.
/// </remarks>
class InterCompanyTransferInventDim_Journal extends InterCompanyTransferInventDim
{
    InterCompanyJour    interCompanyJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common)
    {
        super(_common);

        interCompanyJour = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the direction of the transfer, depending on whether the transaction is of type Issue or
    ///    Receipt.
    /// </summary>
    public void run()
    {
        InterCompanyTrans                           interCompanyTrans;
        QueryRun                                    tradeLoopTrans;
        boolean                                     ret;

        interCompanyTransferExternal = interCompanyJour.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);

        super();

        switch (interCompanyJour.TableId)
        {
            case (tablenum(CustInvoiceJour)):
            case (tablenum(VendInvoiceJour)):
                statusIssue = StatusIssue::Sold;
                break;
            default:
                statusIssue = StatusIssue::Deducted;
                break;
        }

        tradeLoopTrans = new TradeLoopTrans(interCompanyJour, interCompanyJour.interCompanyTransTableNum()).buildQueryRun();
        while (tradeLoopTrans.next())
        {
            interCompanyTrans = tradeLoopTrans.get(interCompanyJour.interCompanyTransTableNum());
            if (interCompanyTrans.isStocked())
            {
                if (interCompanyTrans.isTransferFromCurrentCompany())
                {
                    ret = this.transfer(interCompanyJour.DataAreaId,
                                        interCompanyTrans.InventTransId,
                                        interCompanyJour.InterCompanyCompanyId,
                                        interCompanyTrans.InterCompanyInventTransId,
                                        interCompanyTransferExternal,
                                        statusIssue,
                                        interCompanyJour.DocumentNum,
                                        false,
                                        true) || ret;
                }
                else
                {
                    ret = this.transfer(interCompanyJour.InterCompanyCompanyId,
                                        interCompanyTrans.InterCompanyInventTransId,
                                        interCompanyJour.DataAreaId,
                                        interCompanyTrans.InventTransId,
                                        interCompanyTransferExternal,
                                        statusIssue,
                                        interCompanyJour.DocumentNum,
                                        false,
                                        true) || ret;
                }
            }
        }

        if (ret)
        {
            info(this.getSynchronizationSuccessMessage());
        }
        else
        {
            warning(this.getSynchronizationFailedMessage(statusIssue));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>