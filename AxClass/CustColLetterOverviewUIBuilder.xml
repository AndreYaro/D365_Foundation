<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustColLetterOverviewUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustColLetterOverviewUIBuilder</c> class builds the UI for the <c>CustColLetterOverview</c> SSRS report parameters.
/// </summary>
class CustColLetterOverviewUIBuilder extends SrsReportDataContractUIBuilder
{
    private DialogField fromDateField;
    private DialogField toDateField;
    private DialogField billingClassificationsField;
    private DialogField inclTransWithNoBillingClassificationField;

    private SysLookupMultiSelectCtrl billingClassificationsControl;

    private CustCollLetterOverviewRdlContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>CustCollLetterOverview</c> report parameter form that is based on billing
    /// classification.
    /// </summary>
    public void build()
    {
        #Characters

        // don't call super as the parent UI builder class will attempt to generate UI elements from the parameters defined in the RDL
        // contract of the report.
        //super();

        Dialog dialogLocal = this.dialog();
        contract = this.dataContractObject() as CustCollLetterOverviewRdlContract;

        fromDateField = dialogLocal.addFieldValue(extendedTypeStr(FromDate), contract.parmFromDate());
        toDateField = dialogLocal.addFieldValue(extendedTypeStr(ToDate), contract.parmToDate());

        if (CustParameters::isBillingClassificationEnabled())
        {
            billingClassificationsField = dialogLocal.addFieldValue(extendedTypeStr(BillingClassification), con2Str(list2Con(contract.parmBillingClassifications()), #SEMICOLON));
            billingClassificationsField.helpText("@SPS677");
            billingClassificationsField.lookupButton(FormLookupButton::Always);

            inclTransWithNoBillingClassificationField = dialogLocal.addFieldValue(enumStr(NoYes), contract.parmInclTransWithNoBillingClassification(), "@SPS691", "@SPS1009");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the functionality that is supposed to execute after run.
    /// </summary>
    public void postRun()
    {
        if (CustParameters::isBillingClassificationEnabled())
        {
            Query query = new Query(queryStr(CustBillingClassificationLookup));
            TableId multiSelectTableNum = tableNum(CustBillingClassification);
            container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

            billingClassificationsControl = SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationsField.control(), query, false, selectedFields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes user input to a report data contract class.
    /// </summary>
    public void getFromDialog()
    {
        contract.parmFromDate(fromDateField.value());
        contract.parmToDate(toDateField.value());

        if (CustParameters::isBillingClassificationEnabled())
        {
            List stringifiedValues = CustColLetterOverviewUIBuilder::convertContainerValuesToStrings(billingClassificationsControl.getSelectedFieldValues());

            contract.parmBillingClassifications(stringifiedValues);
            contract.parmInclTransWithNoBillingClassification(inclTransWithNoBillingClassificationField.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertContainerValuesToStrings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>List</c> of strings from a passed in container.
    /// </summary>
    /// <param name = "_container">A container that possibly contains some non string as well as string values.</param>
    /// <returns>A <c>List</c> consisting of all of the passed in container values converted to strings.</returns>
    private static List convertContainerValuesToStrings(container _container)
    {
        // This is needed because SysLookupMultiSelectCtrl.getSelectedFieldValues can return a container with number elements.
        List stringList = new List(Types::String);
        int length = conLen(_container);
        for (int i = 1; i <= length; i++)
        {
            str stringValue = conPeek(_container, i);
            stringList.addEnd(stringValue);
        }

        return stringList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>