<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesQualityOrder_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxSalesQualityOrder_IN</c> class integrates with the calculation of tax from the quality order lines.
/// </summary>
class TaxSalesQualityOrder_IN extends TaxSales
{
    RefRecId      inventLedgerAccount;
    LedgerVoucher ledgerVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax amount.
    /// </summary>
    /// <returns>
    /// Returns the calculated tax amount.
    /// </returns>
    public TaxAmount calc()
    {
        TaxAmount   taxAmount;
        AmountCur   baseAmount;
        AmountCur   lineAmount;
        DiscAmount  lineEndDisc;
        AmountCur   baseAmountInclTax;
        boolean     amountsInclTaxExist;
        boolean     moreLines;
        Map         amountInclTax   = new Map(Types::Container, Types::Real);
        Map         amountExclTax   = new Map(Types::Container, Types::Real);
        RecId       adjustRecId[];
        RefTableId  adjustedTableId[];
        AmountCur   pennyDiff[];
        Counter     counter;
        Counter     counterMax;
        TableId     qualityOrderTableId;
        DiscPct     cashDisc = salesFormLetter.taxCashDiscPercent();
        Currency    sourceCurrency;
        TaxCalculationAdjustment taxCalculationAdjustment;

        if (!headingRecId)
        {
            return 0;
        }

        sourceCurrency = this.getSourceCurrency();

        salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                               salesFormLetter.recID());

        salesFormLetter.initCursor();
        moreLines = true;

        while (moreLines)
        {
            salesLine               = salesFormLetter.nextLine();
            inventQualityOrderTable = InventQualityOrderTable::findSalesPurchRefTransId_IN(salesLine.InventTransId, InventTestReferenceType::Sales);

            if (salesFormLetter.lineExist())
            {
                if (!salesFormLetter.isNewLine())
                {
                    continue;
                }

                [baseAmount, lineAmount, lineEndDisc] = salesFormLetter.baseAmount_IN(false);
                baseAmountInclTax                     = -salesFormLetter.baseAmountInclTax_IN();

                if (baseAmountInclTax != baseAmount)
                {
                    amountInclTax.insert(this.taxTransOrigin(salesLine), baseAmountInclTax);
                    amountExclTax.insert(this.taxTransOrigin(salesLine), baseAmount);
                    amountsInclTaxExist = true;
                }

                if (this.taxParameters().TaxLessCashDisc)
                {
                   lineEndDisc += baseAmount * cashDisc / 100;
                   baseAmount  -= baseAmount * cashDisc / 100;
                }

                qualityOrderTableId = this.sourceTableId();

                this.parmAssessableValue_IN(salesFormLetter.assessableValue_IN());
                this.parmMaximumRetailPrice_IN(salesFormLetter.maximumRetailPrice_IN());
                this.insertLineInInternal(baseAmount,
                                          salesFormLetter.destructiveQty_IN(),
                                          salesLine.SalesUnit,
                                          salesLine.ItemId,
                                          salesFormLetter.transPcsPrice(),
                                          salesLine.DefaultDimension,
                                          salesFormLetter.operationAccount(),
                                          salesFormLetter.operationPosting());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();
                    this.saveInProcessTransaction();

                    if (!taxCalculateTotal
                        && (salesFormLetter.exchRate(taxDate)         != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)
                        || salesFormLetter.exchRateSecondary(taxDate) != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)
                        || salesFormLetter.triangulation(taxDate)     != Currency::triangulation(sourceCurrencyCode, taxDate)))
                    {
                        this.adjustAmount(salesFormLetter.exchRate(taxDate), salesFormLetter.exchRateSecondary(taxDate));
                    }
                }

                if (!skipLineMarkup)
                {
                    this.calcMarkup(amountInclTax, amountExclTax);
                }
            }
            else
            {
                moreLines = false;
            }
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(cashDisc);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        if (amountsInclTaxExist)
        {
            while select sum(SourceTaxAmountCur)
            from taxWorkTrans
            group by  SourceRecId
                where taxWorkTrans.SourceTableId == qualityOrderTableId
                    && taxWorkTrans.TaxDirection  != TaxDirection::UseTax
                    && taxWorkTrans.TaxOrigin     != TaxOrigin::TaxReversed
            {
                if (amountInclTax.exists(taxWorkTrans.SourceRecId)
                    && amountExclTax.exists(taxWorkTrans.SourceRecId))
                {
                    amountInclTax.insert(taxWorkTrans.SourceRecId, CurrencyExchangeHelper::amount(amountInclTax.lookup(taxWorkTrans.SourceRecId), sourceCurrencyCode));

                    if ((amountExclTax.lookup(taxWorkTrans.SourceRecId) + taxWorkTrans.SourceTaxAmountCur) != amountInclTax.lookup(taxWorkTrans.SourceRecId))
                    {
                        counterMax++;
                        adjustRecId[counterMax]     = taxWorkTrans.SourceRecId;
                        adjustedTableId[counterMax] = taxWorkTrans.SourceTableId;
                        pennyDiff[counterMax]       = amountExclTax.lookup(taxWorkTrans.SourceRecId)
                                                        + taxWorkTrans.SourceTaxAmountCur
                                                        - amountInclTax.lookup(taxWorkTrans.SourceRecId);
                    }
                }
            }

            if (counterMax)
            {
                for (counter = 1; counter <= counterMax; counter++)
                {
                    this.adjustPennyDiff(pennyDiff[counter], adjustedTableId[counter], adjustRecId[counter]);
                }
            }
        }

        if (taxCalculateTotal)
        {
            if (salesFormLetter.exchRate(taxDate)             != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)
                || salesFormLetter.exchRateSecondary(taxDate) != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)
                || salesFormLetter.triangulation(taxDate)     != Currency::triangulation(sourceCurrencyCode, taxDate))
            {
                this.adjustAmount(salesFormLetter.exchRate(taxDate), salesFormLetter.exchRateSecondary(taxDate));
            }
        }

        this.roundTaxOnTaxGroup();
        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForQualityOrderLine</Name>
				<Source><![CDATA[
    private void configureTaxForQualityOrderLine()
    {
        TaxCalculationDateType          taxCalculationDateType  = this.taxParameters().TaxCalculationDateType;
        TransDate                       taxCalculationDate;

        switch (taxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:
                taxCalculationDate = salesFormLetter.deliveryDate();
                break;

            case TaxCalculationDateType::DocumentDate:
                taxCalculationDate = salesFormLetter.documentDate();
                break;

            case TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = salesFormLetter.invoiceDate();
                break;
        }

        this.insertIntersection_IN(salesFormLetter.transTaxGroup(),
                                   salesFormLetter.transTaxItemGroup(),
                                   salesFormLetter.transTransId(),
                                   this.transTxt(),
                                   taxCalculationDate);

        if (! this.checkTaxCodesByLine())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets currency code.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CurrencyCode</c> class.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTaxCalculationdate_IN</Name>
				<Source><![CDATA[
    protected TransDateTime exciseTaxCalculationdate_IN(RefRecId _sourceRecId,
                                                        TableId _sourceTableId)
    {
        TransDateTime                   taxCalculationDateTime;
        CustomerCalculationDateType_IN  customerCalculationDateType = this.taxParameters().CustomerCalculationDateType_IN;
        InventQualityOrderTable         inventQualityOrderTableLoc;

        if (_sourceTableId == tableNum(InventQualityOrderTable))
        {
            inventQualityOrderTableLoc = InventQualityOrderTable::findSalesPurchRefTransId_IN(salesLine.InventTransId, InventTestReferenceType::Sales);

            switch (customerCalculationDateType)
            {
                case CustomerCalculationDateType_IN::DeliveryDate:

                    if (inventQualityOrderTableLoc.ValidateDate_IN)
                    {
                        taxCalculationDateTime = DateTimeUtil::newDateTime(inventQualityOrderTable.ValidateDate_IN, 0, DateTimeUtil::getUserPreferredTimeZone());
                    }
                    else
                    {
                        taxCalculationDateTime = DateTimeUtil::newDateTime(salesFormLetter.deliveryDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                    }
                    break;

                case CustomerCalculationDateType_IN::InvoiceDate:
                    taxCalculationDateTime = DateTimeUtil::newDateTime(salesFormLetter.invoiceDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                    break;
            }
        }

        return taxCalculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>TaxSalesQualityOrder_IN</c> class.
    /// </summary>
    /// <param name="_salesForm">
    /// The sales form.
    /// </param>
    protected void init(SalesCalcTax_Sales _salesForm)
    {
        boolean     moreLines;

        super(_salesForm);
        salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                               salesFormLetter.recID());

        salesFormLetter.initCursor();
        moreLines = true;

        while (moreLines)
        {
            salesLine = salesFormLetter.nextLine();

            inventQualityOrderTable = InventQualityOrderTable::findSalesPurchRefTransId_IN(salesLine.InventTransId, InventTestReferenceType::Sales);

            if (salesLine.RecId)
            {
                this.configureTaxForQualityOrderLine();
            }
            else
            {
                moreLines = false;
            }
        }
        if (!this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLossAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invents loss account.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    public void inventLossAccount(ItemId _itemId)
    {
        inventLedgerAccount = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventLoss, _itemId));

        if (!inventLedgerAccount)
        {
            throw error("@GLS60830");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        ItemId              _itemId)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(_inventAccountType, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        InventQualityOrderTable _inventQualityOrderTable,
        SalesQty                _salesQty)
    {
        super();

        inventQualityOrderTable = _inventQualityOrderTable;
        destructiveQty          = _inventQualityOrderTable.Qty;
        lineQty                 = _salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postHandleExciseAmountRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts handle excise amount register.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The excise taxable tax model.
    /// </param>
    /// <param name="_taxTrans">
    /// The tax transaction.
    /// </param>
    /// <param name="_register">
    /// The tax excise amount register.
    /// </param>
    /// <param name="_taxTransIN">
    /// The tax transaction.
    /// </param>
    protected void postHandleExciseAmountRegister_IN(
        TaxModelExciseTaxable_IN    _taxModelExciseTaxable,
        TaxTrans                    _taxTrans,
        TaxExciseAmountRegister_IN  _register,
        TaxTrans_IN                 _taxTransIN)
    {
        _register.selectForUpdate(true);
        _register.TaxTrans_IN = _taxTransIN.RecId;
        _register.rgDate      = _taxTransIN.TransDate;
        _register.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postHandleExciseQuantityRegister_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts handle excise quantity register.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The excise taxable tax model.
    /// </param>
    /// <param name="_register">
    /// The tax excise quantity register.
    /// </param>
    /// <param name="_taxTransIN">
    /// The tax transaction.
    /// </param>
    protected void postHandleExciseQuantityRegister_IN(
        TaxModelExciseTaxable_IN        _taxModelExciseTaxable,
        TaxExciseQuantityRegister_IN    _register,
        TaxTrans_IN                     _taxTransIN)
    {
        _register.selectForUpdate(true);
        _register.TaxTrans_IN = _taxTransIN.RecId;
        _register.rgDate      = _taxTransIN.TransDate;
        _register.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save and post.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller.
    /// </param>
    /// <param name="_inventQualityOrderTable">
    /// The invent quality order table.
    /// </param>
    public void saveAndPost(
        LedgerPostingController _ledgerPostingController,
        InventQualityOrderTable _inventQualityOrderTable = null)
    {
        TaxTrans                            taxTrans;
        TaxTrans_W                          taxTrans_W;
        TaxAmountCur                        taxAmountCur;
        TaxAmountCur                        taxInCostPrice;
        TaxAmountCur                        totalTaxAmount;
        CurrencyExchangeHelper              exchangeRateHelper;
        TaxTable                            taxTableLoc;
        RefRecId                            postingAccount;
        SalesPurchJournalLine               salesPurchJournalLine;
        LedgerDimensionAccount              ledgerDimensionAccount;
        LedgerVoucherTransObject            ledgerVoucherTransObject;
        LedgerDimensionAccount              inventLossLedgerDimensionAccount;
        CustomerCalculationDateType_IN      customerCalculationDateType = TaxParameters::find().CustomerCalculationDateType_IN;

        this.validate_IN();

        exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));

        if (!this.checkTaxCodesByOperationAccount())
        {
            throw error("@SYS18447");
        }

        ttsbegin;

        while select
            sum(TaxBaseAmount),
            sum(TaxBaseAmountCur),
            sum(TaxBaseQty),
            sum(TaxAmount),
            sum(TaxAmountCur),
            sum(TaxInCostPrice),
            sum(TaxInCostPriceMST),
            sum(TaxInCostPriceCur),
            sum(SourceTaxAmountCur),
            sum(SourceBaseAmountCur),
            sum(SourceRegulateAmountCur),
            sum(TaxInCostPriceRegulated),
            sum(AbatementAmount_IN),
            sum(SourceBaseAmountCurRegulated),
            NegativeTax
        from taxWorkTrans
        group by Voucher, TransDate, InventTransId, TaxCode, CurrencyCode, TaxDirection, ExemptTax, TaxOrigin,
                 LedgerDimension, TaxOffsetUseTaxLedgerDimension, Source, SourceCurrencyCode, TaxAutogenerated,
                 TaxReports, TaxRefId,OperationLedgerDimension, TaxGroup, TaxItemGroup, euroTriangulation,
                 CalculationDate, IntracomVAT, NegativeTax, Warning, SourceTableId, SourceRecId
            where taxWorkTrans.HeadingRecId == headingRecId
           && taxWorkTrans.SourceRecId  == _inventQualityOrderTable.RecId
           && taxWorkTrans.TaxOrigin    != TaxOrigin::TaxReversed
        {
            taxTableLoc = TaxTable::find(taxWorkTrans.TaxCode);

            if (taxWorkTrans.TaxCode)
            {
                taxTrans.clear();
                this.initFromTaxWorkTrans(taxTrans, taxWorkTrans, this.taxOrigin(taxWorkTrans.TaxOrigin));

                if (!taxWorkTrans.TaxAutogenerated)
                {
                    taxTrans.TaxAutogenerated = NoYes::No;
                }

                taxTrans.euroTriangulation = triangulation;
                taxTrans.TaxOrigin         = this.taxOrigin(taxWorkTrans.TaxOrigin);
                taxTrans.Voucher           = voucher;
                taxTrans.JournalNum        = this.journalNum();

                if (!taxTrans.TaxAutogenerated)
                {
                    taxAmountCur   = taxTrans.SourceRegulateAmountCur;
                    taxInCostPrice = taxTrans.TaxInCostPriceRegulated;
                    this.taxAmountRegulation(taxTrans,
                                             taxTrans.SourceRegulateAmountCur,
                                             this.exchRate(),
                                             this.exchRateSecondary());
                    this.taxInCostPriceReporting(taxTrans,
                                                 taxTrans.TaxInCostPriceRegulated,
                                                 this.exchRate(),
                                                 this.exchRateSecondary());
                }
                else
                {
                    taxAmountCur   = taxTrans.SourceTaxAmountCur;
                    taxInCostPrice = taxTrans.TaxInCostPrice;
                }

                this.initTaxTrans(taxTrans, _ledgerPostingController.getJournal().parmVoucherSeriesCode());

                taxTrans_W = taxTrans.taxTrans_W();
                if (taxTableLoc.TaxType_IN != TaxType_IN::None)
                {
                    abatementAmount          = taxWorkTrans.AbatementAmount_IN;
                    salesPurchJournalLine    = this.getSalesPurchJournalLineFromInventId_IN();
                    taxTrans.TaxValue        = taxWorkTrans.showTaxValue_IN(salesPurchJournalLine);
                    taxTrans.SourceTableId   = _inventQualityOrderTable.TableId;
                    taxTrans.SourceRecId     = _inventQualityOrderTable.RecId;
                    taxTrans_W.TaxComponentTable_IN = taxTableLoc.TaxComponentTable_IN;
                }

                taxTrans_W.TaxRegistrationNumberTable_IN = this.getTaxRegistrationNumber_IN(taxTableLoc.TaxType_IN, salesPurchJournalLine);
                taxTrans.packTaxTrans_W(taxTrans_W);

                this.getPostingType_IN(taxTableLoc.TaxType_IN);

                if (isExciseEnabled
                    && taxTableLoc.TaxType_IN == TaxType_IN::Excise)
                {
                    postingAccount      = this.getSettledExcisePayableAcc_IN(taxTrans);
                }

                taxTrans.insert();

                ledgerDimensionAccount = postingAccount ? postingAccount :taxWorkTrans.LedgerDimension;

                if (taxWorkTrans.ExemptTax == NoYes::No
                    && taxAmountCur)
                {
                    exchangeRateHelper.parmExchangeRate1(exchRate);
                    exchangeRateHelper.parmExchangeRate2(exchRateSecond);
                    exchangeRateHelper.parmExchangeDate(taxTrans.TransDate);

                    totalTaxAmount += taxAmountCur;

                    this.post(_ledgerPostingController,
                              taxTrans,
                              taxAmountCur,
                              taxInCostPrice,
                              exchangeRateHelper,
                              ledgerDimensionAccount,
                              0,
                              0);
                }
            }

            if (taxTableLoc.TaxType_IN != TaxType_IN::None)
            {
                this.insertTaxTrans_IN(taxTrans, salesPurchJournalLine);
            }

            if (taxTableLoc.TaxType_IN == TaxType_IN::Excise)
            {
                this.updateExciseRegister_IN(taxTrans, _inventQualityOrderTable);
            }
        }

        if (totalTaxAmount && inventLedgerAccount)
        {
            taxPostingType = LedgerPostingType::InventLoss;
            inventLossLedgerDimensionAccount = LedgerDimensionFacade::serviceMergeLedgerDimensions(LedgerDimensionFacade::serviceCreateLedgerDimension(inventLedgerAccount), ledgerDimensionAccount);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                             LedgerPostingType::InventLoss,
                                                                                             inventLossLedgerDimensionAccount,
                                                                                             taxTrans.SourceCurrencyCode,
                                                                                             -totalTaxAmount-taxInCostPrice,
                                                                                             exchangeRateHelper);

            if (taxTrans)
            {
                ledgerVoucherTransObject.addTaxTransRelationship(taxTrans.RecId,TaxTransRelationshipType::Tax);
            }
            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::AsDefault);
            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }

        TaxCalculationAdjustment::deleteTaxRegulation(this);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRelatedVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets related voucher object.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    public void setRelatedVoucherObject(LedgerVoucher _ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets voucher id.
    /// </summary>
    /// <param name="_voucherId">
    /// The voucher id.
    /// </param>
    /// <returns>
    /// The instance of the <c>Voucher</c> class.
    /// </returns>
    public Voucher setVoucherId(Voucher _voucherId)
    {
        voucher = _voucherId;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RecId sourceRecId()
    {
        if (markupAdminister)
        {
            return markupTrans.RecId;
        }
        else
        {
            return inventQualityOrderTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        if (markupAdminister)
        {
            return markupTrans.TableId;
        }
        else
        {
            return inventQualityOrderTable.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a Boolean value that indicates whether the current transaction being calculated
    ///    supports sales tax adjustments.
    /// </summary>
    /// <returns>
    ///    return true always.
    /// </returns>
    /// <remarks>
    ///    By default, the current transaction supports sales tax adjustments.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and creates a new instance of <c> TaxSalesQualityOrder_IN </c>.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An instance of <c> InventQualityOrderTable </c>.
    /// </param>
    /// <returns>
    /// A new instance of <c> TaxSalesQualityOrder_IN </c>.
    /// </returns>
    public static TaxSalesQualityOrder_IN construct(InventQualityOrderTable  _inventQualityOrderTable)
    {
        TaxSalesQualityOrder_IN qualityOrderTax;
        SalesTable              salesTableLoc;
        SalesCalcTax_Sales      salesForm;
        SalesTotals             salesTotals;
        SalesLine               salesLineLoc;

        salesTableLoc   = SalesTable::find(_inventQualityOrderTable.InventRefId);
        salesLineLoc    = SalesLine::findInventTransId(_inventQualityOrderTable.InventRefTransId);
        qualityOrderTax = new TaxSalesQualityOrder_IN(_inventQualityOrderTable, salesLineLoc.SalesQty);

        salesForm   = SalesCalcTax_Sales::construct(salesTableLoc, SalesUpdate::All);
        salesTotals = SalesTotals::construct(salesTableLoc);
        salesForm.setSalesTotals_IN(salesTotals);
        qualityOrderTax.init(salesForm);

        return qualityOrderTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a FormRun to run form <c>TaxTmpWorkQualityOrder_IN</c>.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An instance of <c> InventQualityOrderTable </c>.
    /// </param>
    /// <returns>
    /// A FromRun for <c>TaxTmpWorkQualityOrder_IN</c>.
    /// </returns>
    static FormRun showTax(InventQualityOrderTable _inventQualityOrderTable)
    {
        TaxSalesQualityOrder_IN salesQualityOrderTax;

        salesQualityOrderTax = TaxSalesQualityOrder_IN::construct(_inventQualityOrderTable);
        salesQualityOrderTax.calc();

        return Tax::showTaxes(menuitemDisplayStr(TaxTmpWorkQualityOrder_IN), salesQualityOrderTax, _inventQualityOrderTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>