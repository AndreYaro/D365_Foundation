<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrApplicableResourceListCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrApplicableResourceListCache</c> class implements a cache for applicable resource lists
///    for activity requirement sets.
/// </summary>
class WrkCtrApplicableResourceListCache
{
    Map applicableResourceListCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applicableResourceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the applicable resource list for a specific activity requirement set by first looking at the
    /// activity requirement set cache. If the information is not found in the cache then it is retrieved
    /// from the database;
    /// </summary>
    /// <param name="_activityRequirementSet">
    /// An <c>WrkCtrActivityRequirementSet</c> table buffer to retrieve the applicable resource list for.
    /// </param>
    /// <param name="_siteId">
    /// A <c>InventSiteId</c> value to get the applicable resource list for; optional.
    /// </param>
    /// <param name="_cacheStartDate">
    /// The start date for the cache.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// true if the activity requirements that the list is based on must have the <c>UsedForJobScheduling</c> flag set to true to be included as filters; otherwise, false.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// true if the activity requirements that the list is based on must have the <c>UsedForOperationScheduling</c> flag set to true to be included as filters; otherwise, false.
    /// </param>
    /// <param name="_retrieveGroups">
    /// true if the resource groups should be returned; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>List</c> containing all the resources that can be used for scheduling for the specified
    /// activity requirement set.
    /// </returns>
    /// <remarks>
    /// The cache for a specific activity requirement set is cleared if a request is made with a start date that
    /// is lower than the start date for the data currently held in cache.
    /// </remarks>
    public List applicableResourceList(WrkCtrActivityRequirementSet _activityRequirementSet,
                                       InventSiteId                 _siteId = '',
                                       TransDate                    _cacheStartDate = dateNull(),
                                       boolean                      _jobSchedRequirements       = false,
                                       boolean                      _operationSchedRequirements = false,
                                       boolean                      _retrieveGroups             = false)
    {
        Map                                     activityRequirementSetMap;
        List                                    resourceList;
        boolean                                 refreshCacheEntry = false;
        WrkCtrApplicableResourceListCacheEntry  cacheEntry;

        if (!applicableResourceListCache.exists(_siteId))
        {
            activityRequirementSetMap = new Map(Types::Int64, Types::Class);
            applicableResourceListCache.insert(_siteId, activityRequirementSetMap);
        }
        else
        {
            activityRequirementSetMap = applicableResourceListCache.lookup(_siteId);
        }

        if (!activityRequirementSetMap.exists(_activityRequirementSet.RecId))
        {
            refreshCacheEntry = true;
        }
        else
        {
            cacheEntry = activityRequirementSetMap.lookup(_activityRequirementSet.RecId);
            if (cacheEntry.parmCacheStartDate() > _cacheStartDate)
            {
                // start date is not good enough
                refreshCacheEntry = true;
            }
            else
            {
                // data found in cache
                resourceList = cacheEntry.parmResourceList();
            }
        }

        if (refreshCacheEntry)
        {
            // refresh the cache entry since the data was not in cache or the start date was not good enough
            if (!cacheEntry)
            {
                cacheEntry = WrkCtrApplicableResourceListCacheEntry::construct();
            }

            cacheEntry.parmCacheStartDate(_cacheStartDate);
            resourceList = _activityRequirementSet.applicableResourcesList(_cacheStartDate,
                                                                           dateMax(),
                                                                           _siteId,
                                                                           _jobSchedRequirements,
                                                                           _operationSchedRequirements,
                                                                           _retrieveGroups);
            cacheEntry.parmResourceList(resourceList);

            activityRequirementSetMap.insert(_activityRequirementSet.RecId, cacheEntry);
        }

        // return copy of cached value to avoid side-effects
        return List::create(resourceList.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        applicableResourceListCache = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WrkCtrApplicableResourceListCache construct()
    {
        return new WrkCtrApplicableResourceListCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>