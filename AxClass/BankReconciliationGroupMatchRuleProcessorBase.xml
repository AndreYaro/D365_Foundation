<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationGroupMatchRuleProcessorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class BankReconciliationGroupMatchRuleProcessorBase extends BankReconciliationMatchRuleProcessor
{
    protected BankReconciliationQuery statementQuery;
    protected BankReconciliationQuery documentQuery;
    protected BankReconciliationQuery groupDocumentQuery;
    protected BankReconciliationQuery groupStatementQuery;

    protected BankReconciliationGroupDocumentOpenTmp reconciliationGroupDocumentTmp;
    protected BankReconciliationGroupStatementOpenTmp reconciliationGroupStatementTmp;

    protected RecId currentGroupDocumentTmpRecId;

    protected List searchedDocumentIdList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankReconciliationMatchRule _matchRule, BankReconciliationStatementOpenTmp _statementTmp, BankReconciliationDocumentOpenTmp _documentTmp, BankReconciliationHeader _reconciliation, BankReconciliationDataManager _dataManager)
    {
        super(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager);
        statementQuery = new BankReconciliationStatementOpenQuery(_matchRule);
        documentQuery = new BankReconciliationDocumentOpenQuery(_matchRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementCount</Name>
				<Source><![CDATA[
    internal protected int64 getUnmatchedStatementCount()
    {
        select count(RecId) from reconciliationGroupStatementTmp
            where reconciliationGroupStatementTmp.IsMatched == NoYes::No;

        return reconciliationGroupStatementTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    internal protected void preprocess()
    {
        if (matchRule.BankDocumentGroupRule)
        {
            documentQuery.buildQuery();

            QueryRun documentQueryRun = new QueryRun(documentQuery.getQuery());
            documentQuery.setQueryRunRecord(documentQueryRun, reconciliationDocumentTmp);

            while (documentQueryRun.next())
            {
                BankReconciliationDocumentOpenTmp tmpDocumentLocal = documentQueryRun.get(tableNum(BankReconciliationDocumentOpenTmp));
                BankReconciliationGroupDocumentOpenTmp::insertFromDocumentOpenTmp(reconciliationGroupDocumentTmp, tmpDocumentLocal);
            }
        }

        if (matchRule.BankStatementGroupRule)
        {
            statementQuery.buildQuery();

            QueryRun statementQueryRun = new QueryRun(statementQuery.getQuery());
            statementQuery.setQueryRunRecord(statementQueryRun, reconciliationStatementTmp);

            while (statementQueryRun.next())
            {
                BankReconciliationStatementOpenTmp tmpStatementLocal = statementQueryRun.get(tableNum(BankReconciliationStatementOpenTmp));
                BankReconciliationGroupStatementOpenTmp::insertFromStatementOpenTmp(reconciliationGroupStatementTmp, tmpStatementLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementQueryRun</Name>
				<Source><![CDATA[
    internal protected QueryRun buildStatementQueryRun()
    {
        groupStatementQuery.buildQuery();
        QueryRun statementQueryRun = new QueryRun(groupStatementQuery.getQuery());
        groupStatementQuery.setQueryRunRecord(statementQueryRun, reconciliationGroupStatementTmp);

        return statementQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchedDocumentIdList</Name>
				<Source><![CDATA[
    internal protected void getSearchedDocumentIdList(Common _tmpStatement)
    {
        searchedDocumentIdList = new List(Types::Int64);

        if (this.canProcessMatchRule(_tmpStatement))
        {
            groupDocumentQuery.setComparedRecordBuffer(_tmpStatement);
            groupDocumentQuery.buildQuery();
            QueryRun qrDocument = new QueryRun(groupDocumentQuery.getQuery());
            groupDocumentQuery.setQueryRunRecord(qrDocument, reconciliationGroupDocumentTmp);
            if (qrDocument)
            {
                boolean firstRecord = true;
                while (qrDocument.next())
                {
                    if (!firstRecord)
                    {
                        searchedDocumentIdList = new List(Types::Int64);
                        break;
                    }

                    BankReconciliationGroupDocumentOpenTmp groupDocumentTmpLocal = qrDocument.get(tableNum(BankReconciliationGroupDocumentOpenTmp));
                    currentGroupDocumentTmpRecId = groupDocumentTmpLocal.RecId;

                    QueryRun expandQuery = new QueryRun(documentQuery.getQuery());
                    expandQuery.query().clearGroupBy();
                    expandQuery.query().clearAllFields();

                    QueryBuildDataSource qbds = expandQuery.query().dataSourceTable(tableNum(BankReconciliationDocumentOpenTmp));

                    this.applyGroupDocValue(qbds, documentQuery.getGroupByFieldIds(), groupDocumentTmpLocal);

                    qbds.addSelectionField(fieldNum(BankReconciliationDocumentOpenTmp, RecId));
                    documentQuery.setQueryRunRecord(expandQuery, reconciliationDocumentTmp);
                    while (expandQuery.next())
                    {
                        BankReconciliationDocumentOpenTmp singleDoc = expandQuery.get(tableNum(BankReconciliationDocumentOpenTmp));
                        searchedDocumentIdList.addEnd(singleDoc.RecId);
                    }

                    firstRecord = false;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformMatchAction</Name>
				<Source><![CDATA[
    internal protected boolean canPerformMatchAction()
    {
        return searchedDocumentIdList && searchedDocumentIdList.elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessMatchRule</Name>
				<Source><![CDATA[
    internal protected boolean canProcessMatchRule(Common _tmpStatement)
    {
        return matchRule
            && matchRule.isSearchingMatchingEntry()
            && _tmpStatement
            && statementQuery
            && documentQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGroupDocValue</Name>
				<Source><![CDATA[
    internal protected void applyGroupDocValue(QueryBuildDataSource _qbds, List _groupByFieldIds, BankReconciliationGroupDocumentOpenTmp _record)
    {
        ListEnumerator enumerator = _groupByfieldIds.getEnumerator();

        QueryBuildRange range = _qbds.range(1);
        str rangeValue = range.value();

        while (enumerator.moveNext())
        {
            FieldId documentOpenTmpFieldId = enumerator.current();
            FieldId groupDocumentOpenTmpFieldId = BankReconciliationGroupDocumentOpenTmp::getFieldIdFromDocumentOpen(documentOpenTmpFieldId);
            if (groupDocumentOpenTmpFieldId)
            {
                anytype comparedValue = _record.(groupDocumentOpenTmpFieldId);
                if (BankReconciliationRuleParser::getTypeForField(_qbds.table(), documentOpenTmpFieldId) == Types::Enum)
                {
                    comparedValue = BankReconciliationRuleParser::convertEnumCompareValueToIndex(_qbds.table(), documentOpenTmpFieldId, comparedValue);
                }

                str newRangeStr = documentQuery.getFieldStr(_qbds, documentOpenTmpFieldId) +
                    BankReconciliationRuleParser::getSQLRangeValueString(
                        BankReconciliationMatchOperatorType::Equals,
                        comparedValue,
                        BankReconciliationRuleParser::getTypeForField(_qbds.table(), documentOpenTmpFieldId));
                rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue, newRangeStr);
            }
        }

        range.value(rangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGroupStmtValue</Name>
				<Source><![CDATA[
    internal protected void applyGroupStmtValue(QueryBuildDataSource _qbds, List _groupByFieldIds, BankReconciliationGroupStatementOpenTmp _record)
    {
        ListEnumerator enumerator = _groupByfieldIds.getEnumerator();

        QueryBuildRange range = _qbds.range(1);
        str rangeValue = range.value();

        while (enumerator.moveNext())
        {
            FieldId statementOpenTmpFieldId = enumerator.current();
            FieldId groupStatementOpenTmpFieldId = BankReconciliationGroupStatementOpenTmp::getFieldIdFromStatementOpen(statementOpenTmpFieldId);
            if (groupStatementOpenTmpFieldId)
            {
                anytype comparedValue = _record.(groupStatementOpenTmpFieldId);
                if (BankReconciliationRuleParser::getTypeForField(_qbds.table(), statementOpenTmpFieldId) == Types::Enum)
                {
                    comparedValue = BankReconciliationRuleParser::convertEnumCompareValueToIndex(_qbds.table(), statementOpenTmpFieldId, comparedValue);
                }

                str newRangeStr = statementQuery.getFieldStr(_qbds, statementOpenTmpFieldId) +
                    BankReconciliationRuleParser::getSQLRangeValueString(
                        BankReconciliationMatchOperatorType::Equals,
                        comparedValue,
                        BankReconciliationRuleParser::getTypeForField(_qbds.table(), statementOpenTmpFieldId));
                rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue, newRangeStr);
            }
        }

        range.value(rangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForMatchedStatements</Name>
				<Source><![CDATA[
    internal protected QueryRun buildQueryForMatchedStatements(Common _openStatementForMatch)
    {
        QueryRun matchQuery = new QueryRun(statementQuery.getQuery());
        statementQuery.setQueryRunRecord(matchQuery, reconciliationStatementTmp);
        matchQuery.query().clearGroupBy();
        matchQuery.query().clearAllFields();

        QueryBuildDataSource qbds = matchQuery.query().dataSourceTable(tableNum(BankReconciliationStatementOpenTmp));
        
        this.applyGroupStmtValue(qbds, statementQuery.getGroupByFieldIds(), _openStatementForMatch);

        return matchQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatchStatusForGroupDocumentOpen</Name>
				<Source><![CDATA[
    internal protected void updateMatchStatusForGroupDocumentOpen()
    {
        BankReconciliationGroupDocumentOpenTmp currentGroupDocumentTmp;
        currentGroupDocumentTmp.linkPhysicalTableInstance(reconciliationGroupDocumentTmp);

        select firstonly forupdate currentGroupDocumentTmp
            where currentGroupDocumentTmp.RecId == currentGroupDocumentTmpRecId;

        currentGroupDocumentTmp.updateMatchedStatus(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandGroupStatement</Name>
				<Source><![CDATA[
    internal protected List expandGroupStatement(QueryRun _queryRun)
    {
        List impactedStatementIdList = new List(Types::Int64);

        while (_queryRun.next())
        {
            BankReconciliationStatementOpenTmp singleStatement = _queryRun.get(tableNum(BankReconciliationStatementOpenTmp));
            impactedStatementIdList.addEnd(singleStatement.RecId);
        }

        return impactedStatementIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatementsToUpdate</Name>
				<Source><![CDATA[
    internal protected void addStatementsToUpdate(QueryRun _matchQuery, BankStmtTmp _bankStatementsToUpdate)
    {
        _matchQuery.reset();
        while (_matchQuery.next())
        {
            BankReconciliationStatementOpenTmp singleStatement = _matchQuery.get(tableNum(BankReconciliationStatementOpenTmp));
            if (BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
            {
                BankStmtISOAccountStatement::updateBankStatementStatus(singleStatement.BankStmtISOAccountStatement);
            }
            else
            {
                BankReconciliationAutoMatchUtils::addBankStatementForUpdate(_bankStatementsToUpdate, singleStatement.BankStmtISOReportEntry);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>