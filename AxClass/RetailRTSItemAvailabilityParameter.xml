<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRTSItemAvailabilityParameter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailRTSItemAvailabilityParameter</c> class that represents a parameter object that is created by reading an xml string containing item product availability parameter.
/// </summary>
public class RetailRTSItemAvailabilityParameter
{
    private List inventLocationIds = new List(Types::String);
    private ListEnumerator inventLocationIdEnum;
    private EcoResProductRecId productId;
    private List productDimensionCombinations = new List(Types::Class);
    private ListEnumerator productDimensionCombinationEnum;
    private boolean isSizeActive, isColorActive, isStyleActive, isVersionActive, isConfigActive;
    private ItemId itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the item availability parameter from an xml format to <c>RetailRTSItemAvailabilityParameter</c> object.
    /// </summary>
    /// <param name = "_itemAvailabilityParameterXmlStr">The item availability lookup parameter in xml format.</param>
    /// <returns>An <c>RetailRTSItemAvailabilityParameter</c> object.</returns>
    public static RetailRTSItemAvailabilityParameter fromXML(str _itemAvailabilityParameterXmlStr)
    {
        const str ItemAvailabilityParameterConst    = 'ItemAvailabilityParameter';
        const str InventLocationsConst              = 'InventLocations';
        const str InventLocationConst               = 'InventLocation';
        const str ProductConst                      = 'Product';
        const str IdConst                           = 'Id';
        const str ProductDimensionCombinationsConst = 'ProductDimensionCombinations';
        const str ProductDimensionCombinationConst  = 'ProductDimensionCombination';
        const str ProductDimensionConst             = 'ProductDimension';
        const str DimensionTypeConst                = 'DimensionType';
        const str DimensionValueConst               = 'DimensionValue';

        RetailRTSItemAvailabilityParameter retailRTSItemAvailabilityParameter = new RetailRTSItemAvailabilityParameter();

        XmlDocument itemAvailabilityParameterDocument = new XmlDocument();
        itemAvailabilityParameterDocument.loadXml(_itemAvailabilityParameterXmlStr);

        // get the 'ItemAvailabilityParameter' node.
        XmlElement itemAvailabilityParameterNode = itemAvailabilityParameterDocument.getNamedElement(ItemAvailabilityParameterConst);
        if (itemAvailabilityParameterNode == null)
        {
            return retailRTSItemAvailabilityParameter;
        }

        XmlElement inventLocationsNode = itemAvailabilityParameterNode.getNamedElement(InventLocationsConst);
        if (inventLocationsNode == null)
        {
            return retailRTSItemAvailabilityParameter;
        }

        XMLNodeListIterator xmlInventLocationListIterator = new XMLNodeListIterator(inventLocationsNode.selectNodes(InventLocationConst));

        // loop through the locations under the InventLocations node and insert the location Ids to inventLocationIds list.
        List inventLocationIds = new List(Types::String);
        while (xmlInventLocationListIterator.more())
        {
            XmlElement xmlInventLocation = xmlInventLocationListIterator.value();

            inventLocationIds.addEnd(xmlInventLocation.getAttribute(IdConst));

            xmlInventLocationListIterator.next();
        }

        // set the locationIds property.
        retailRTSItemAvailabilityParameter.parmInventLocationIds(inventLocationIds);

        // set the locationIdEnum property.
        retailRTSItemAvailabilityParameter.parmInventLocationIdEnum(inventLocationIds.getEnumerator());

        // set product Id
        XmlElement xmlProduct = itemAvailabilityParameterNode.getNamedElement(ProductConst);
        EcoResProductRecId productId = xmlProduct == null ? 0 : str2Int64(xmlProduct.getAttribute(IdConst));
        retailRTSItemAvailabilityParameter.parmProductId(productId);

        // set item Id
        EcoResProduct ecoResProduct = EcoResProduct::find(productId);
        retailRTSItemAvailabilityParameter.parmItemId(ecoResProduct.releasedItemId());

        // for the specified dimension group determine which dimensions are active
        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(productId);
        if (ecoResProductDimensionGroupProduct)
        {
            EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(ecoResProductDimensionGroupProduct.ProductDimensionGroup);
            retailRTSItemAvailabilityParameter.parmIsSizeActive(ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSizeId)).isActive());
            retailRTSItemAvailabilityParameter.parmIsColorActive(ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventColorId)).isActive());
            retailRTSItemAvailabilityParameter.parmIsStyleActive(ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventStyleId)).isActive());
            retailRTSItemAvailabilityParameter.parmIsVersionActive(ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventVersionId)).isActive());
            retailRTSItemAvailabilityParameter.parmIsConfigActive(ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, configId)).isActive());
        }

        // get product dimension combinations
        List productDimensionCombinations = new List(Types::Class);

        XmlElement xmlProductDimensionCombinations = itemAvailabilityParameterNode.getNamedElement(ProductDimensionCombinationsConst);
        if (xmlProductDimensionCombinations != null)
        {
            XMLNodeListIterator xmlProductDimensionCombinationListIterator;
            xmlProductDimensionCombinationListIterator = new XMLNodeListIterator(xmlProductDimensionCombinations.selectNodes(ProductDimensionCombinationConst));

            // loop through ProductDimensionCombination node list from xml and insert into productDimensionCombinations
            while (xmlProductDimensionCombinationListIterator.more())
            {
                List productDimensions = new List(Types::Container);
                XmlElement xmlProductDimensionCombination = xmlProductDimensionCombinationListIterator.value();
                if (xmlProductDimensionCombination != null)
                {
                    XMLNodeListIterator xmlProductDimensionListIterator = new XMLNodeListIterator(xmlProductDimensionCombination.selectNodes(ProductDimensionConst));
                    while (xmlProductDimensionListIterator.more())
                    {
                        XmlElement xmlProductDimension = xmlProductDimensionListIterator.value();
                        str dimensionType = xmlProductDimension.getAttribute(DimensionTypeConst);
                        str dimensionValue = xmlProductDimension.getAttribute(DimensionValueConst);
                        productDimensions.addEnd([dimensionType, dimensionValue]);

                        xmlProductDimensionListIterator.next();
                    }
                }
                
                productDimensionCombinations.addEnd(productDimensions);

                xmlProductDimensionCombinationListIterator.next();
            }
        }

        retailRTSItemAvailabilityParameter.parmProductDimensionCombinations(productDimensionCombinations);

        retailRTSItemAvailabilityParameter.parmProductDimensionCombinationEnum(productDimensionCombinations.getEnumerator());

        return retailRTSItemAvailabilityParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIds</Name>
				<Source><![CDATA[
    public List parmInventLocationIds(List _inventLocationIds = inventLocationIds)
    {
        this.inventLocationIds = _inventLocationIds;
        return this.inventLocationIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdEnum</Name>
				<Source><![CDATA[
    public ListEnumerator parmInventLocationIdEnum(ListEnumerator _inventLocationIdEnum = inventLocationIdEnum)
    {
        this.inventLocationIdEnum = _inventLocationIdEnum;
        return this.inventLocationIdEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    public RecId parmProductId(RecId _productId = productId)
    {
        this.productId = _productId;
        return this.productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionCombinations</Name>
				<Source><![CDATA[
    public List parmProductDimensionCombinations(List _productDimensionCombinations = productDimensionCombinations)
    {
        this.productDimensionCombinations = _productDimensionCombinations;
        return this.productDimensionCombinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        this.itemId = _itemId;
        return this.itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionCombinationEnum</Name>
				<Source><![CDATA[
    public ListEnumerator parmProductDimensionCombinationEnum(ListEnumerator _productDimensionCombinationEnum = productDimensionCombinationEnum)
    {
        this.productDimensionCombinationEnum = _productDimensionCombinationEnum;
        return this.productDimensionCombinationEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSizeActive</Name>
				<Source><![CDATA[
    public boolean parmIsSizeActive(boolean _isSizeActive = isSizeActive)
    {
        this.isSizeActive = _isSizeActive;
        return this.isSizeActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsColorActive</Name>
				<Source><![CDATA[
    public boolean parmIsColorActive(boolean _isColorActive = isColorActive)
    {
        this.isColorActive = _isColorActive;
        return this.isColorActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsStyleActive</Name>
				<Source><![CDATA[
    public boolean parmIsStyleActive(boolean _isStyleActive = isStyleActive)
    {
        this.isStyleActive = _isStyleActive;
        return this.isStyleActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsVersionActive</Name>
				<Source><![CDATA[
    public boolean parmIsVersionActive(boolean _isVersionActive = isVersionActive)
    {
        this.isVersionActive = _isVersionActive;
        return this.isVersionActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsConfigActive</Name>
				<Source><![CDATA[
    public boolean parmIsConfigActive(boolean _isConfigActive = isConfigActive)
    {
        this.isConfigActive = _isConfigActive;
        return this.isConfigActive;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>