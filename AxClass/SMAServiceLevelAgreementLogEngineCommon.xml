<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceLevelAgreementLogEngineCommon</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaServiceLevelAgreementLogEngineCommon extends RunBase
{
    SMAServiceOrderId           serviceOrderId;
    SMALogStatus                chosenLogStatus;
    SMASLAStartDateTime         startEndDateTime;
    NoYes                       createReason;
    SMAStageId                  reason;
    Description                 reasonDescription;
    SMAServiceOrderTable        serviceOrderTable;
    SMAServiceOrderLine         serviceOrderLine;
    smmActivities               activities;

    Common                      common;

    DialogRunbase               dialog;
    DialogField                 dialogTime;
    DialogField                 dialogDate;
    DialogField                 dialogCreateReason;
    DialogField                 dialogReason;
    DialogField                 dialogReasonDescription;
    SMAParameters               parameters;
    Description                 dialogCaption;
    boolean                     isActionDialogClosedOK;
    FormDataSource              callerFormDataSource;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
            startEndDateTime
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description from the current class by calling the static description method on the
    /// class if there is one.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description, for example, when you need some
    /// internal variables to build the description text.The static <c>description </c> method is generally
    /// used to obtain the description of a class because you do not have to instantiate the class to call
    /// it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        return dialogCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean                 ret;
        SMALatestCompletionDateTime   latestCompletionDateTime;

        ret = super(_calledFrom);

        if (dialogCreateReason && dialogCreateReason.value() == NoYes::Yes)
        {
            if (!dialogReason.value())
            {
                // A reason must be specified
                ret = checkFailed("@SYS104855");
            }
        }
        else
        if (chosenLogStatus == SMALogStatus::Closed && parameters.ReasonOnExceedTime)
        {
            if (tableHasMethod(new DictTable(common.TableId), identifierStr(displayLatestCompletionDateTime)))
            {
                latestCompletionDateTime = common.displayLatestCompletionDateTime();
                if (startEndDateTime > latestCompletionDateTime)
                {
                    // A reason must be specified when the service order is closed later than agreed
                    ret = checkFailed("@SYS104857");
                }
            }
        }
        else
        if (chosenLogStatus == SMALogStatus::Cancel && parameters.ReasonOnCancel)
        {
            // A reason must be specified when the service order is cancelled
            ret = checkFailed("@SYS110378");
        }

        if (dialogReason && dialogReason.value())
        {
            if (!SMAReasonTable::find(dialogReason.value()))
            {
                // Invalid reason specified
                ret = checkFailed("@SYS104856");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup                     dialogGroup;
        SMAServiceLevelAgreementTable   serviceLevelAgreementTable;
        fieldId                         slaFieldId, latestCompletionFieldId;
        SMALatestCompletionDateTime     latestCompletionDateTime;

        startEndDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(),DateTimeUtil::getUserPreferredTimeZone());
        dialog = this.dialogInternal(dialog);

        if (chosenLogStatus == SMALogStatus::Closed)
        {
            dialogGroup = dialog.addGroup();

            // End date and time
            dialogGroup.caption("@SYS34406");

            // End time of period
            dialogTime = dialog.addFieldValue(extendedTypeStr(SMASLAEndDateTime), startEndDateTime, "@SYS8758", "@SYS102926");
        }
        else
        if (chosenLogStatus == SMALogStatus::Open)
        {
            slaFieldId = fieldName2id(common.TableId, identifierStr(ServiceLevelAgreementId));

            if (slaFieldId)
                serviceLevelAgreementTable = SMAServiceLevelAgreementTable::find(common.(slaFieldId));

            dialogGroup = dialog.addGroup();
            // Start date and time
            dialogGroup.caption("@SYS34405");

            // Start time of period
            dialogTime = dialog.addFieldValue(extendedTypeStr(SMASLAStartDateTime), startEndDateTime, "@SYS8758", "@SYS102925");
        }

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialog.addText("@SYS105910");
            }

            // Reason
            dialog.addGroup("@SYS86426");

            // Create reason
            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialogCreateReason = dialog.addField(enumStr(NoYes), "@SYS104635", "@SYS113166");
            }
            else
            {
                dialogCreateReason = dialog.addField(enumStr(NoYes), "@SYS104635", "@SYS113164");
            }

            dialogReason = dialog.addField(extendedTypeStr(SMAReasonId));

            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                dialogReasonDescription = dialog.addField(extendedTypeStr(Description),"@SYS6303","@SYS113167");
            }
            else
            {
                dialogReasonDescription = dialog.addField(extendedTypeStr(Description),"@SYS6303","@SYS113165");
            }

            latestCompletionFieldId = fieldName2id(common.TableId, identifierStr(SLALatestCompletionDateTime));

            if (latestCompletionFieldId)
                latestCompletionDateTime = common.(latestCompletionFieldId);

            if ((parameters.ReasonOnCancel && chosenLogStatus == SMALogStatus::Cancel)
                ||(parameters.ReasonOnExceedTime && chosenLogStatus == SMALogStatus::Closed && (latestCompletionDateTime < startEndDateTime)))
            {
                dialogCreateReason.value(NoYes::Yes);
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (chosenLogStatus != SMALogStatus::Cancel)
        {
            startEndDateTime        = DateTimeUtil::removeTimeZoneOffset(dialogTime.value(),DateTimeUtil::getUserPreferredTimeZone());
        }

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            createReason        = dialogCreateReason.value();
            reason              = dialogReason.value();
            reasonDescription   = dialogReasonDescription.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SMALogStatus _logStatus, Common _common)
    {
        super();

        chosenLogStatus = _logStatus;
        common          = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource  parmCallerFormDataSource(FormDataSource _callerFormDataSource = callerFormDataSource)
    {
        callerFormDataSource = _callerFormDataSource;

        return callerFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsActionDialogClosedOK</Name>
				<Source><![CDATA[
    public boolean parmIsActionDialogClosedOK(boolean _isActionDialogClosedOK = isActionDialogClosedOK)
    {
        isActionDialogClosedOK = _isActionDialogClosedOK;

        return isActionDialogClosedOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(boolean _calledFromEp = false)
    {
        SMAReasonType       reasonType;

        parameters = SMAParameters::find();

        if (_calledFromEp)
        {
            this.updateSLALog();
            this.parmIsActionDialogClosedOK(true);
        }
        else
        {
            if (chosenLogStatus == SMALogStatus::Closed)
            {
                // Stop time log
                dialogCaption = "@SYS102927";
            }
            else
            if (chosenLogStatus == SMALogStatus::Cancel)
            {
                // Cancel time log
                dialogCaption = "@SYS104854";
            }
            else
            if (chosenLogStatus == SMALogStatus::Open)
            {
                // Start time log
                dialogCaption = "@SYS102928";
            }

            //when this class is called from EP, the below code (this.prompt()) should not be run, because this internally
            //creates a dialog at runtime for accepting input from user which is not supported in EP. The dialog will gather
            //reason for closing/cancelling the case from user. Note that specifying reason is optional. If the call is from EP
            //we need to skip this dialog. A seperate bug is opened up to show reson lookup in EP also.
            if (this.prompt())
            {
                this.parmIsActionDialogClosedOK(true);
                // Update SLA time log status
                if (this.updateSLALog())
                {
                    if (callerFormDataSource == null)
                    {
                        callerFormDataSource = FormDataUtil::getFormDataSource(common);
                    }

                    if (callerFormDataSource)
                    {
                        callerFormDataSource.setCurrent();
                        callerFormDataSource.refresh();
                    }
                }

                if (createReason)
                {
                    if (chosenLogStatus == SMALogStatus::Closed)
                    {
                        reasonType = SMAReasonType::Stop;
                    }
                    else
                    {
                        reasonType = SMAReasonType::Cancel;
                    }

                    SMAServiceLevelAgreementReason::createReasonFromTimeLog(
                        SMAServiceLevelAgreementLogTable::tableId2LogType(common.TableId),
                        common.RecId,
                        reason,
                        reasonType,
                        reasonDescription);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = conNull();

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonStatus</Name>
				<Source><![CDATA[
    void updateCommonStatus(SMAServiceLevelAgreementLogType _logType)
    {
        Common                              newCommon;
        fieldId                             statusFieldId, slaFieldId;
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        DictTable                           dictTable;

        newCommon = SMAServiceLevelAgreementLogTable::getRelatedRecord(_logType, common.RecId);
        newCommon.selectForUpdate(true);

        statusFieldId = fieldName2id(newCommon.TableId, identifierStr(ServiceLevelAgreementStatus));

        if (statusFieldId)
            newCommon.(statusFieldId) = chosenLogStatus;

        dictTable = new DictTable(newCommon.TableId);

        if (tableHasMethod(dictTable, identifierStr(calcServiceLevelAgreementCompliance)))
            newCommon.calcServiceLevelAgreementCompliance();

        if (tableHasMethod(dictTable, identifierStr(calcLatestCompletionDateTime)))
            newCommon.calcLatestCompletionDateTime();

        if (chosenLogStatus == SMALogStatus::Cancel)
        {
            slaFieldId = fieldName2id(newCommon.TableId, identifierStr(ServiceLevelAgreementId));
            if (slaFieldId)
                newCommon.(slaFieldId) = '';

            delete_from serviceLevelAgreementLog
                where serviceLevelAgreementLog.LogType == _logType && serviceLevelAgreementLog.RefRecId == newCommon.RecId;
        }

        newCommon.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSLALog</Name>
				<Source><![CDATA[
    public boolean updateSLALog()
    {
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        SMAServiceLevelAgreementLogTable    newServiceLevelAgreementLog;
        boolean                             checkIfDateIsOpen   = true;
        boolean                             ret                 = true;
        SMAServiceLevelAgreementLogType     logType;

        logType = SMAServiceLevelAgreementLogTable::tableId2LogType(common.TableId);

        if (!startEndDateTime)
            startEndDateTime = DateTimeUtil::utcNow();

        if (chosenLogStatus == SMALogStatus::Closed || chosenLogStatus == SMALogStatus::Cancel)
        {
            // Update the service level agreement log
            ttsbegin;

            select firstonly forupdate serviceLevelAgreementLog order by RecId desc
                where serviceLevelAgreementLog.LogType == logType
                && serviceLevelAgreementLog.RefRecId == common.RecId;

            serviceLevelAgreementLog.EndDateTime    = startEndDateTime;
            serviceLevelAgreementLog.Status         = chosenLogStatus;

            if (serviceLevelAgreementLog && serviceLevelAgreementLog.validateWrite())
            {
                serviceLevelAgreementLog.update();

                this.updateCommonStatus(logType);

                // update caller (in case if dialog was called due to sign off)
                if (activities)
                {
                    activities.update();
                }
                else if (serviceOrderLine)
                {
                    serviceOrderLine.update();
                }
                else if (serviceOrderTable)
                {
                    serviceOrderTable.update();
                }
                else if (common)
                {
                    common.update();
                }
            }

            ttscommit;
        }
        else
        if (chosenLogStatus == SMALogStatus::Open)
        {
            // Insert into the service level agreement log
            ttsbegin;

            newServiceLevelAgreementLog.LogType         = logType;
            newServiceLevelAgreementLog.RefRecId        = common.RecId;
            newServiceLevelAgreementLog.Status          = SMALogStatus::Open;
            newServiceLevelAgreementLog.StartDateTime   = startEndDateTime;

            if (newServiceLevelAgreementLog.validateWrite())
            {
                newServiceLevelAgreementLog.insert();

                // Update record's SLA status
                this.updateCommonStatus(logType);
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMAServiceLevelAgreementLogEngineCommon construct(SMALogStatus _logStatus, Common _buffer = null)
    {
        SMAServiceLevelAgreementLogEngineCommon   logStatusEngine = null;

        if (_buffer)
        {
            _buffer.reread();
            logStatusEngine     = new SMAServiceLevelAgreementLogEngineCommon(_logStatus, _buffer);
        }
        else
        {
            // Class %1 must be called with caller.
            throw error(strFmt("@SYS53926", classStr(SMAServiceLevelAgreementLogEngineCommon)));
        }

        return logStatusEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMAServiceLevelAgreementLogEngineCommon logStatusEngine;
        SMALogStatus                            logStatus;

        if (args)
        {
            if (args.parmEnumType() == enumNum(SMALogStatus))
            {
                logStatus =  args.parmEnum();
            }

            if (args.record() && logStatus)
            {
                logStatusEngine = SMAServiceLevelAgreementLogEngineCommon::construct(logStatus, args.record());
            }

            if (logStatusEngine)
            {
                logStatusEngine.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>