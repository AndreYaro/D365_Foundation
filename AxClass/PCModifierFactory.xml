<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCModifierFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCModifierFactory</c> class is the factory class responsible for modifier creation.
/// </summary>
public class PCModifierFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAttributeModifierCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a condition that is associated with a specified attribute modifier.
    /// </summary>
    /// <param name="_componentControl">
    /// The modifier that is associated with the condition.
    /// </param>
    /// <param name="_expressionConstraint">
    /// The expression constraint that is associated with the condition.
    /// </param>
    /// <returns>
    /// A record in the <c>PCApplicationControlConstraint</c> table that is related to the specified modifier.
    /// </returns>
    protected PCApplicationControlConstraint createAttributeModifierCondition(
        EcoResComponentControl _componentControl,
        PCExpressionConstraint _expressionConstraint)
    {
        PCApplicationControlConstraint  condition;

        condition.ComponentControl              = _componentControl.RecId;
        condition.ConditionExpressionConstraint = _expressionConstraint.RecId;
        condition.insert();

        return condition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubComponentModifierCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a condition that is associated with a specified subcomponent modifier.
    /// </summary>
    /// <param name="_subComponentControl">
    /// The modifier that is associated with the condition.
    /// </param>
    /// <param name="_expressionConstraint">
    /// The expression constraint that is associated with the condition.
    /// </param>
    /// <returns>
    /// A record in the <c>PCSubComponentControlConstraint</c> table that is related to the specified modifier.
    /// </returns>
    protected PCSubComponentControlConstraint createSubComponentModifierCondition(
        PCSubComponentControl _subComponentControl,
        PCExpressionConstraint _expressionConstraint)
    {
        PCSubComponentControlConstraint condition;

        condition.SubComponentControl   = _subComponentControl.RecId;
        condition.ExpressionConstraint  = _expressionConstraint.RecId;
        condition.insert();

        return condition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findModifierConditionExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an expression that is associated with a specified modifier.
    /// </summary>
    /// <param name="_componentControl">
    /// The modifier that is associated with the constraint.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value indicates whether to select for update; optional.
    /// </param>
    /// <returns>
    /// An expression.
    /// </returns>
    public PCExpressionConstraint findModifierConditionExpression(Common _componentControl, boolean _forUpdate = false)
    {
        PCSubComponentControl  subComponentControl;
        EcoResComponentControl componentControl;

        switch (_componentControl.TableId)
        {
            case tableNum(PCSubComponentControl):
                subComponentControl = _componentControl;
                return subComponentControl.getConstraint(_forUpdate);

            case tableNum(EcoResComponentControl):
                componentControl    = _componentControl;
                return componentControl.getConstraint(_forUpdate);

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateModifierConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a constraint that is associated with a specified modifier.
    /// </summary>
    /// <param name="_componentControl">
    /// The modifier that is associated with the constraint.
    /// </param>
    /// <returns>
    /// A record in the <c>PCExpressionConstraint</c> table that is related to the specified modifier.
    /// </returns>
    public PCExpressionConstraint findOrCreateModifierConstraint(Common _componentControl)
    {
        PCExpressionConstraint expressionConstraint = this.findModifierConditionExpression(_componentControl, true);

        if (!expressionConstraint)
        {
            ttsBegin;
            expressionConstraint.insert();

            switch (_componentControl.TableId)
            {
                case tableNum(PCSubComponentControl):
                    this.createSubComponentModifierCondition(_componentControl, expressionConstraint);
                    break;

                case tableNum(EcoResComponentControl):
                    this.createAttributeModifierCondition(_componentControl, expressionConstraint);
                    break;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
            ttsCommit;
        }
        return expressionConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentControlModifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an enum representing the type of modifier for a <c>PCSubComponentControl</c> or <c>EcoResComponentControl</c> record.
    /// </summary>
    /// <param name="_componentControl">
    /// The record.
    /// </param>
    /// <returns>
    /// A <c>PCSubComponentModifierType</c> enum or an <c>EcoResModifierType</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Unexpected record type.
    /// </exception>
    public anytype getComponentControlModifier(Common _componentControl)
    {
        PCSubComponentControl   subComponentControl;
        EcoResComponentControl  componentControl;

        switch (_componentControl.TableId)
        {
            case tableNum(PCSubComponentControl):
                subComponentControl = _componentControl;
                return subComponentControl.Modifier;

            case tableNum(EcoResComponentControl):
                componentControl = _componentControl;
                return componentControl.Modifier;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrCreateModifierConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates a constraint that is associated with a specified modifier.
    /// </summary>
    /// <param name="_componentControl">
    /// The modifier that is associated with the constraint.
    /// </param>
    /// <param name="_expression">
    /// The expression constraint.
    /// </param>
    public void updateOrCreateModifierConstraint(Common _componentControl, PCConstraintExpression _expression)
    {
        PCExpressionConstraint  constraint;

        ttsbegin;
        constraint = this.findOrCreateModifierConstraint(_componentControl);
        constraint.Expression = _expression;
        constraint.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCModifierFactory construct()
    {
        return new PCModifierFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>