<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchParmTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchParmTableDataPersistence</c> class persists data to <c>PurchParmTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(PurchParmTable))]
public class TaxIntegrationPurchParmTableDataPersistence
    extends TaxIntegrationPurchTableDataPersistence
{
    protected PurchParmTable purchParmTable;
    protected PurchParmLine purchParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchParmTable = document.getLocalRecord();
            purchParmTable.selectForUpdate(true);
            return SysDaQueryObjectBuilder::from(this.purchTable)
                .forUpdate()
                .where(this.purchTable, fieldStr(PurchTable, PurchId))
                    .isEqualToLiteral(this.purchParmTable.PurchId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchParmTable)
                .where(this.purchParmTable, fieldStr(PurchParmTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.purchTable) // alternate key
                    .forUpdate()
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualTo(this.purchParmTable, fieldStr(purchParmTable, PurchId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchParmLine)
            .where(this.purchParmLine, fieldStr(PurchParmLine, ParmId))
                .isEqualToLiteral(this.purchParmTable.ParmId)
            .where(this.purchParmLine, fieldStr(PurchParmLine, TableRefId))
                .isEqualToLiteral(this.purchParmTable.TableRefId)
            .innerJoin(this.purchLine) // primary key
                .forUpdate()
                .where(this.purchLine, fieldStr(PurchLine, RecId))
                    .isEqualTo(this.purchParmLine, fieldStr(PurchParmLine, PurchLineRecId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLineObject line;
        // Receipts list: purchCalcTax_parmTrans
        // Product receipt: purchCalcTax_PackingSlip
        if (this.document.getLegacyTax().purchCalcTax() is PurchCalcTax_PackingSlip)
        {
            TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.purchParmLine.TableId, this.purchParmLine.RecId);
            if (!document.checkLine(localId))
            {
                document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
                return null;
            }
            line = document.getLine(localId);
        }
        if (!line)
        {
            line = super();
        }

        return line;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>