<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreateDeposit_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayCreateDeposit_Trans extends RPayCreateDeposit
{
    RPaySheetTrans      rPaySheetTrans;
    FormDataSource      rPaySheetTrans_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
        protected void calcTotalAmount()
    {
        RPaySheetTrans rPaySheetTransLocal, rPaySheetTransCheck;
        paySheetDepositAmount = 0;

        for (rPaySheetTransLocal = rPaySheetTrans_ds.getFirst(true) ? rPaySheetTrans_ds.getFirst(true) : rPaySheetTrans_ds.cursor(); rPaySheetTransLocal; rPaySheetTransLocal = rPaySheetTrans_ds.getNext())
        {
            rPaySheetTransCheck = RPaySheetTrans::find(rPaySheetTransLocal.Emplid, rPaySheetTransLocal.sheetTableRecId);
            if (rPaySheetTransCheck.SendToBank && ! rPaySheetTransCheck.JournalNum)
            {
                paySheetDepositAmount += rPaySheetTransLocal.Amount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        protected void createTrans()
    {
        RPaySheetTrans      rPaySheetTransLocal,rPaySheetTransUpdate;
        RPayDepositTable    rPayDepositTable;
        ttsbegin;

        super();

        for (rPaySheetTransLocal = rPaySheetTrans_ds.getFirst(true) ? rPaySheetTrans_ds.getFirst(true) : rPaySheetTrans_ds.cursor(); rPaySheetTransLocal; rPaySheetTransLocal = rPaySheetTrans_ds.getNext())
        {
            rPaySheetTransUpdate  = RPaySheetTrans::find(rPaySheetTransLocal.Emplid,rPaySheetTransLocal.SheetTableRecId,true);
            if (rPaySheetTransUpdate.SendToBank && ! rPaySheetTransUpdate.JournalNum)
            {
                rPaySheetTransUpdate.SendToBank    = NoYes::No;
                rPaySheetTransUpdate.Deposit       = NoYes::Yes;
                rPaySheetTransUpdate.BankPayment   = NoYes::No;
                rPaySheetTransUpdate.SendToDeposit = NoYes::Yes;
                rPaySheetTransUpdate.update();
                rPayDepositTable.initFromRPaySheetTrans(rPaySheetTransUpdate);
                rPayDepositTable.Voucher     = voucherNum;
                rPayDepositTable.VoucherDate = ledgerVoucher.lastTransDate();
                rPayDepositTable.insert();
            }
        }

        if (! rPaySheetTransUpdate.checkLastRecordBankPayment())
        {
            rPaySheetTable.BankPayment = NoYes::No;
        }

        rPaySheetTable.updateDisbursedSum(paySheetDepositAmount);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Common _rPaySheetTrans,
                   FormDataSource _rPaySheetTrans_ds)
    {
        super(_rPaySheetTrans.findRPaySheetTable(), null);

        rPaySheetTrans    = _rPaySheetTrans;
        rPaySheetTrans_ds = _rPaySheetTrans_ds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>