<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjDependecyEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjDependecyEnumerator</c> class is enumerator class used for iterating through
///    <c>ProjWBSTreeNode</c> node dependencies: children and predecessors.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class ProjDependecyEnumerator
{
    ProjWBSTreeNode     node;
    ProjWBSTree         tree;

    str                 predecessorToExclude;
    ProjWBSTreeNode     childNodeToExcludeFrom;

    List                children;
    Set                 predecessors;

    Enumerator          enumerator;
    ProjWBSTreeNode     currentNode;

    boolean             inChildren;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns current dependency.
    /// </summary>
    /// <returns>
    ///     Current dependency element number.
    /// </returns>
    public ElementNumber current()
    {
        ElementNumber result  = "";

        if (inChildren)
        {
            result = enumerator.current();
        }
        else
        {
            result = currentNode.elementNumber();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Moves iterator forward.
    /// </summary>
    /// <returns>
    ///     True if enumerator denotes a valid dependency.
    /// </returns>
    public boolean moveNext()
    {
        boolean result = enumerator.moveNext();

        if (inChildren && result)
        {
            currentNode = tree.getNodeByElementNumber(enumerator.current());
            if (childNodeToExcludeFrom && currentNode.parmSiblingNumber() >= childNodeToExcludeFrom.parmSiblingNumber())
            {
                result =  this.moveNext();
            }
        }
        else if (result)
        {
            currentNode = tree.getNodeByActivityNumber(enumerator.current());
            return predecessorToExclude == currentNode.activityNumber() ? this.moveNext() : result;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new(ProjWbsTree        _tree,
                     ProjWBSTreeNode    _node,
                     str                _predecessorToExclude,
                     List               _childrenToAdd,
                     str                _childToExcludeFrom)
    {
        node = _node;
        tree = _tree;

        predecessorToExclude    = _predecessorToExclude;
        childNodeToExcludeFrom  = _childToExcludeFrom ? tree.getNodeByElementNumber(_childToExcludeFrom) : null;

        children                = tree.getChildrenOf(node.elementNumber());
        children                = _childrenToAdd ? List::merge(children, _childrenToAdd) : children;

        predecessors            = _node.parmPredecessors();

        inChildren              = !children.empty();

        if (inChildren)
        {
            enumerator = children.getEnumerator();
        }
        else
        {
            enumerator = predecessors.getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new <c>ProjDependecyEnumerator</c> instance.
    /// </summary>
    /// <param name = "_tree">
    ///     <c>ProjWbsTree</c> object to which <c>ProjWBSTreeNode</c> node belongs.
    /// </param>
    /// <param name = "_node">
    ///     <c>ProjWbsTreeNode</c> object for which to enumerate dependencies.
    /// </param>
    /// <param name = "_predecessorToExclude">
    ///     Makes enumerator skip predecessor with specified activity number.
    /// </param>
    /// <param name = "_childrenToAdd">
    ///     Makes enumerator iterate through additional children with elemenent numbers specified in list.
    /// </param>
    ///  <param name = "_childToExcludeFrom">
    ///     Makes enumerator skip nodes starting from the one specified.
    /// </param>
    /// <returns>
    ///     True if enumerator denotes a valid dependency.
    /// </returns>
    public static ProjDependecyEnumerator construct(ProjWbsTree        _tree,
                                                    ProjWBSTreeNode    _node,
                                                    str                _predecessorToExclude   = "",
                                                    List               _childrenToAdd          = null,
                                                    str                _childToExcludeFrom     = "" )
    {
        return new ProjDependecyEnumerator(_tree, _node, _predecessorToExclude, _childrenToAdd, _childToExcludeFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForParentNodeWithNewChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new <c>ProjDependecyEnumerator</c> instance.
    ///   Provides simplified signature for nodes with one new child.
    /// </summary>
    /// <param name = "_tree">
    ///     <c>ProjWbsTree</c> object to which <c>ProjWBSTreeNode</c> node belongs.
    /// </param>
    /// <param name = "_node">
    ///     <c>ProjWbsTreeNode</c> object for which to enumerate dependencies.
    /// </param>
    /// <param name = "_childToAdd">
    ///     Makes enumerate additionaly through child node with specified element number.
    /// </param>
    /// <returns>
    ///     True if enumerator denotes a valid dependency.
    /// </returns>
    public static ProjDependecyEnumerator constructForParentNodeWithNewChild(ProjWbsTree     _tree,
                                                                             ProjWBSTreeNode _node,
                                                                             str             _childToAdd)

    {
        List childrenToAdd = new List(Types::String);
        childrenToAdd.addEnd(_childToAdd);
        return ProjDependecyEnumerator::construct(_tree, _node, "", childrenToAdd);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>