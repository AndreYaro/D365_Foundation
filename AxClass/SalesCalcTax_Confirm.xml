<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_Confirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesCalcTax_Confirm
extends     SalesCalcTax
{
    CustConfirmJour     custConfirmJour;
    CustConfirmTrans    custConfirmTrans;
    SalesTable          salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return custConfirmJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custConfirmJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custConfirmJour.ExchRateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        select nofetch forupdate custConfirmTrans
            index hint ConfirmIdx
            where custConfirmTrans.SalesId      == custConfirmJour.SalesId      &&
                  custConfirmTrans.ConfirmId    == custConfirmJour.ConfirmId    &&
                  custConfirmTrans.ConfirmDate  == custConfirmJour.ConfirmDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the sales document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in the item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return custConfirmJour.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (salesLine)
            return salesLine.DefaultDimension;

        return custConfirmJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(CustConfirmJour  _custConfirmJour)
    {
        super(_custConfirmJour);

        custConfirmJour = _custConfirmJour;
        salesTable      = custConfirmJour.salesTable();
        update          = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next custConfirmTrans;

        this.getSalesLine();
        this.initCursorMarkup(custConfirmTrans.TableId, custConfirmTrans.RecId);

        return custConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupRecId</Name>
				<Source><![CDATA[
    recId  salesMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupTableId</Name>
				<Source><![CDATA[
    tableId  salesMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    recId  salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    tableId  salesTableTableID()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void  setTax(TaxWriteCode      taxWriteCode,
                 AmountCur         amountCur)
    {
        custConfirmTrans.TaxWriteCode    = taxWriteCode;
        custConfirmTrans.TaxAmount       = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return custConfirmTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return custConfirmTrans.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty    transQty()
    {
        return custConfirmTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    TradeInventTransId transTransId()
    {
        return custConfirmTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custConfirmJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    public boolean useAndConsumption_BR()
    {
        return salesTable.salesTable_BR().CustFinalUser_BR;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>