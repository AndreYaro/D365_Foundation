<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheck_InterCompanyInventoryDimensionId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventConsistencyCheck_InterCompanyInventoryDimensionId</c> class fixes intercompany inventory dimension and inventory sum records 
/// that have an inventory dimension Id value as a concatenation of a company Id and an inventory dimension Id itself.
/// </summary>
public class InventConsistencyCheck_InterCompanyInventoryDimensionId extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ttsbegin;

        if (this.checkFix() == CheckFix::Fix)
        {
            InterCompanyInventDim interCompanyInventDim;
            InterCompanyInventSum interCompanyInventSum;
            InventDim inventDim;

            if (InventConsChkInterCompInventDimIdPerfFlight::instance().IsEnabled())
            {
                update_recordset interCompanyInventDim
                    setting InterCompanyCompanyId = interCompanyInventSum.InterCompanyCompanyId
                join interCompanyInventSum
                    where interCompanyInventDim.InventDimId like (interCompanyInventSum.InterCompanyCompanyId + '%')
                        && interCompanyInventDim.InterCompanyCompanyId == '';

                update_recordset interCompanyInventDim
                    setting InventDimId = inventDim.inventDimId
                join inventDim
                    where interCompanyInventDim.InventDimId == interCompanyInventDim.InterCompanyCompanyId + inventDim.InventDimId
                        && interCompanyInventDim.InventDimId == '';
            }
            else
            {
                
                update_recordset interCompanyInventDim
                setting InterCompanyCompanyId = interCompanyInventSum.InterCompanyCompanyId,
                    InventDimId = inventDim.inventDimId
                join interCompanyInventSum
                    where interCompanyInventDim.InventDimId like (interCompanyInventSum.InterCompanyCompanyId + '%')
                join inventDim
                    where interCompanyInventDim.InventDimId == interCompanyInventSum.InterCompanyCompanyId + inventDim.InventDimId;
            }

            update_recordset interCompanyInventSum
                setting InventDimId = inventDim.inventDimId
            join inventDim
                where interCompanyInventSum.InventDimId == interCompanyInventSum.InterCompanyCompanyId + inventDim.InventDimId;
        }

        if (this.checkFix() == CheckFix::Fix)
        {
            this.updateCorrected();
        }
        else
        {
            this.updateNotCorrected();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Intercompany:ConsistencyCheck_InventoryDimensionId_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@Intercompany:ConsistencyCheck_InventoryDimensionId_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>