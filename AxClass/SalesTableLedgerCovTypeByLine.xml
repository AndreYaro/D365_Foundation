<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableLedgerCovTypeByLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SalesTableLedgerCovTypeByLine extends SalesPurchTableLedgerCovTypeByLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInvoices</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected int processInvoices(
        TransDate _invoiceDate)
    {
        int invoiceLineCount = super(_invoiceDate);

        if (invoiceLineCount > 0)
        {
            this.processProjectedInvoice(_invoiceDate);
        }

        return invoiceLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovWithInvoiceMarkupKeep</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void updateLedgerCovWithInvoiceMarkupKeep(TransDate _invoiceDate, TransDate _dueDate, AmountCur _invoiceAmount)
    {
        contract.parmLedgerCoverage().setRemainingPercentage(1.0);

        contract.parmMarkup().isLedgerCovCalcOnlyKeep(true);
        this.updateLedgerCovForInvoiceMarkup(_invoiceDate, _invoiceAmount);
        contract.parmMarkup().isLedgerCovCalcOnlyKeep(false);

        AmountCur markupTotal = contract.parmMarkup().getLedgerCovTotalMarkupAmount();
        this.updateLedgerCovForInvoiceSummary(_invoiceDate, markupTotal);
        this.updateLedgerCovForPayment(_dueDate, markupTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjectedInvoice</Name>
				<Source><![CDATA[
    private void processProjectedInvoice(
        TransDate _invoiceDate)
    {
        DueDate dueDate = this.determineDueDate(_invoiceDate);
        this.createOrUpdateProjectedInvoice(_invoiceDate, dueDate, contract.totalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateProjectedInvoice</Name>
				<Source><![CDATA[
    private void createOrUpdateProjectedInvoice(TransDate _invoiceDate, DueDate _dueDate, AmountCur _invoiceAmount)
    {
        if (this.useLedgerCovPayPredFeature())
        {
            PayPredProjectedInvoice payPredProjectedInvoice = PayPredProjectedInvoice::find(
                contract.parmSalesPurchTableInterface().parmSalesPurchTable().TableId,
                contract.parmSalesPurchTableInterface().parmSalesPurchTable().RecId,
                true);

            payPredProjectedInvoice.CustomerId = contract.parmSalesPurchTableInterface().parmOrderAccount();
            payPredProjectedInvoice.AccountingCurrency = Ledger::accountingCurrency();
            payPredProjectedInvoice.CashDiscountCode = contract.parmSalesPurchTableInterface().parmCashDisc();
            payPredProjectedInvoice.CashDiscountPercent = contract.parmSalesPurchTableInterface().parmCashDiscPercent();
            payPredProjectedInvoice.DueDate = _dueDate;
            payPredProjectedInvoice.InvoiceAmountAccounting = CurrencyExchangeHelper::amountCur2MST(_invoiceAmount, contract.parmSalesPurchTableInterface().parmCurrencyCode());
            payPredProjectedInvoice.OrderAccount = contract.parmSalesPurchTableInterface().parmOrderAccount();
            payPredProjectedInvoice.PaymentScheduleId = contract.parmSalesPurchTableInterface().parmPaymentSched();
            payPredProjectedInvoice.TransType = LedgerTransType::Cust;
            payPredProjectedInvoice.InvoiceDate = _invoiceDate;
            payPredProjectedInvoice.SourceTableId = contract.parmSalesPurchTableInterface().parmSalesPurchTable().TableId;
            payPredProjectedInvoice.SourceRecId = contract.parmSalesPurchTableInterface().parmSalesPurchTable().RecId;

            payPredProjectedInvoice.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPredictionResult</Name>
				<Source><![CDATA[
    private PayPredPredictionResult findPredictionResult()
    {
        PayPredPredictionResult predictionResult;

        if (this.useLedgerCovPayPredFeature())
        {
            predictionResult = PayPredPredictionResult::findPredictionResult(
                contract.parmSalesPurchTableInterface().parmSalesPurchTable().TableId,
                contract.parmSalesPurchTableInterface().parmSalesPurchTable().RecId);
        }

        return predictionResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLedgerCovPayPredFeature</Name>
				<Source><![CDATA[
    private boolean useLedgerCovPayPredFeature()
    {
        boolean useLedgerCovPayPredFeature;

        if (CashflowInsightsActivation::isPayPredIntegrationActive())
        {
            useLedgerCovPayPredFeature = true;
        }

        return useLedgerCovPayPredFeature;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForPayment</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void updateLedgerCovForPayment(
        DueDate _dueDate,
        AmountCur _invoiceAmount)
    {
        PayPredPredictionResult predictionResult = this.findPredictionResult();

        if (predictionResult.RecId != 0)
        {
            PayPredParameters payPredParameters = PayPredParameters::findOrCreate();

            //Payment summary
            LedgerCoveragePayment ledgerCoveragePayment = LedgerCoveragePayment::construct();
            ledgerCoveragePayment.updateSum(
                contract.parmLedgerCoverage(),
                predictionResult,
                payPredParameters.BucketLate1BoundaryDays,
                _dueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().summaryLedgerDimension() ),
                contract.parmInvoiceCustVendTable().DefaultDimension,
                contract.parmSalesPurchTableInterface().parmCurrencyCode(),
                -_invoiceAmount);

            //Payment clearing
            ledgerCoveragePayment.updateSum(
                contract.parmLedgerCoverage(),
                predictionResult,
                payPredParameters.BucketLate1BoundaryDays,
                _dueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().clearingLedgerDimension()),
                contract.parmInvoiceCustVendTable().DefaultDimension,
                contract.parmSalesPurchTableInterface().parmCurrencyCode(),
                _invoiceAmount);
        }
        else
        {
            super(_dueDate, _invoiceAmount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>