<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryBudgetControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AdvancedLedgerEntryBudgetControl</c> class manages budgetary control for an advanced ledger entry.
/// </summary>
public class AdvancedLedgerEntryBudgetControl
{
    AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetSourceBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>BudgetCheckResult</c> value for the specified <c>AdvancedLedgerEntryHeader</c> record.
    /// </summary>
    /// <param name="_advancedLedgerEntryHeader">
    ///    The <c>AdvancedLedgerEntryHeader"</c> record.
    /// </param>
    /// <returns>
    ///    A <c>BudgetCheckResult</c> value that is calculated by using the query.
    /// </returns>
    public static BudgetCheckResult getBudgetSourceBudgetCheckResult(AdvancedLedgerEntryHeader _advancedLedgerEntryHeader)
    {
        BudgetCheckResult                   budgetCheckResult = BudgetCheckResult::NoCheck;
        BudgetSourceSourceDocumentHeader    budgetSourceSourceDocumentHeader;

        if (_advancedLedgerEntryHeader
            && _advancedLedgerEntryHeader.SourceDocumentHeader
            && BudgetControlConfiguration::isControlConfigured()
            && hasTableAccess(tablenum(BudgetSource)))
        {
            budgetSourceSourceDocumentHeader    = BudgetSourceSourceDocumentHeader::newBudgetSourceSourceDocumentHeader(_advancedLedgerEntryHeader.SourceDocumentHeader);
            budgetCheckResult                   = budgetSourceSourceDocumentHeader.getHeaderBudgetCheckResult();
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceLineBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>BudgetCheckResult</c> value for the specified <c>AdvancedLedgerEntryLine</c> record.
    /// </summary>
    /// <param name="_advancedLedgerEntryLine">
    ///    The <c>AdvancedLedgerEntryLine</c> record.
    /// </param>
    /// <returns>
    ///    A <c>BudgetCheckResult</c> value that is calculated by using the query.
    /// </returns>
    public static BudgetCheckResult getBudgetSourceLineBudgetCheckResult(AdvancedLedgerEntryLine _advancedLedgerEntryLine)
    {
        BudgetCheckResult budgetCheckResult = BudgetCheckResult::NoCheck;

        if (_advancedLedgerEntryLine
            && _advancedLedgerEntryLine.SourceDocumentLine
            && BudgetControlConfiguration::isControlConfigured()
            && hasTableAccess(tablenum(BudgetSource)))
        {
            budgetCheckResult = BudgetSourceSourceDocumentLine::findBudgetCheckResult(_advancedLedgerEntryLine.SourceDocumentLine);
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvLedgerEntryBudgetControlRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budgetary control is required for an advanced ledger entry.
    /// </summary>
    /// <param name="_checkAdvLedgerEntryLineBudgetControlStatus">
    ///    A boolean value that indicates whether the budgetary control setting for performing a budget check
    ///    on an advanced ledger entry line save should be considered when determining whether budgetary control is
    ///    required for Advanced ledger entries.
    /// </param>
    /// <returns>
    ///    true if budgetary control is required for an advanced ledger entry; otherwise, false.
    /// </returns>
    public static boolean isAdvLedgerEntryBudgetControlRequired(boolean _checkAdvLedgerEntryLineBudgetControlStatus = false)
    {
        boolean isRequired = false;
        LedgerRecId primaryLedgerRecId = Ledger::current();

        if (Ledger::isLedgerBudgetControlEnabled(primaryLedgerRecId))
        {
            if (_checkAdvLedgerEntryLineBudgetControlStatus)
            {
                isRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(primaryLedgerRecId, BudgetControlSourceIntegrator::AdvancedLedgerEntry);
            }
            else
            {
                isRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(primaryLedgerRecId, BudgetControlSourceIntegrator::AdvancedLedgerEntry);
            }
        }

        return isRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document to check budget funds availability and reserve budget funds.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The source document header for the source document.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A boolean value that indicates whether the budget check is initiated by a specific user action; optional.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A boolean value that indicates whether the budget reservation is a carryforward reservation; optional.
    /// </param>
    /// <param name="_user">
    /// The user that is submitting the source document line to check budget; optional.
    /// </param>
    /// <returns>
    /// true if budget funds is available and budget reservations are made; otherwise, false.
    /// </returns>
    public static boolean runCheckBudget(
        SourceDocumentHeader    _sourceDocumentHeader,
        boolean                 _isDraftReservation,
        boolean                 _isOnDemandBudgetCheck = false,
        boolean                 _isCarryforwardReservation = false,
        userId                  _user = curuserid())
    {
        SourceDocumentLine  sourceDocumentLine;
        BudgetCheckResult   budgetCheckResult;
        boolean             passed = true;

        while select * from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeader.RecId
        {
            BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                                    sourceDocumentLine,
                                    _isDraftReservation,
                                    null,
                                    _isOnDemandBudgetCheck,
                                    _user);

            budgetCheckResult = BudgetSourceSourceDocumentLine::findBudgetCheckResult(sourceDocumentLine.RecId);

            passed = passed && budgetCheckResult != BudgetCheckResult::Failed;
        }

        return passed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCheckBudgetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to check budget funds availability and reserve budget funds.
    /// </summary>
    /// <param name="_advancedLedgerEntryLine">
    /// The advanced ledger entry line to run the budget check on.
    /// </param>
    /// <returns>
    /// true if budget funds is available and budget reservations are made; otherwise, false.
    /// </returns>
    public static BudgetCheckResult runCheckBudgetLine(AdvancedLedgerEntryLine _advancedLedgerEntryLine)
    {
        BudgetCheckResult budgetCheckResult;

        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(_advancedLedgerEntryLine);

        budgetCheckResult = BudgetSourceSourceDocumentLine::findBudgetCheckResult(_advancedLedgerEntryLine.SourceDocumentLine);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>