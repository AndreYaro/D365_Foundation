<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransTmpStaticCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetTransTmpStaticCache</c> class implements logic to work with the <c>AssetTransTmp</c> table as the asset trans cache.
/// </summary>
internal final class AssetTransTmpStaticCache implements System.IDisposable
{
    private static AssetTransTmpStaticCache instance;

    private AssetTransTmp cacheTrans;
    private AssetId assetId;
    private AssetBookId bookId;
    private boolean initialized;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(AssetId _assetId, AssetBookId _bookId, boolean _initCache = true)
    {
        if (instance)
        {
            // Nesting is not supported
            throw error(Error::wrongUseOfFunction(classStr(AssetTransTmpStaticCache)));
        }

        assetId = _assetId;
        bookId = _bookId;

        if (_initCache)
        {
            AssetTransTmpCache transCache = AssetTransTmpCache::newFromAssetBook(_assetId, _bookId);
            if (transCache)
            {
                cacheTrans = transCache.getCacheAssetTrans();
            }

            initialized = true;
        }

        AssetTransTmpStaticCache::instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCurrent</Name>
				<Source><![CDATA[
    internal static boolean hasCurrent(AssetId _assetId, AssetBookId _bookId)
    {
        return AssetTransTmpStaticCache::instance != null
            && AssetTransTmpStaticCache::instance.initialized
            && AssetTransTmpStaticCache::instance.assetId == _assetId
            && AssetTransTmpStaticCache::instance.bookId == _bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        if (AssetTransTmpStaticCache::instance)
        {
            cacheTrans.dispose();
            cacheTrans = null;

            AssetTransTmpStaticCache::instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheAssetTrans</Name>
				<Source><![CDATA[
    internal static AssetTransTmp getCacheAssetTrans(AssetId _assetId, AssetBookId _bookId)
    {
        if (!AssetTransTmpStaticCache::instance
            || !AssetTransTmpStaticCache::instance.initialized
            || AssetTransTmpStaticCache::instance.assetId != _assetId
            || AssetTransTmpStaticCache::instance.bookId != _bookId)
        {
            throw error(Error::wrongUseOfFunction(classStr(AssetTransTmpStaticCache) + '.' + staticMethodStr(AssetTransTmpStaticCache, getCacheAssetTrans)));
        }

        return AssetTransTmpStaticCache::instance.cacheTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>