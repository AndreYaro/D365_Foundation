<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfTCAUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class used to calculate and update the co-products cost allocation percent.
/// </summary>
abstract class PmfTCAUpdate
{
    #define.Percent(100)

    Map             cobyMap;
    MapEnumerator   me_cobyMap;

    Price           cobyExtendedPrice;
    Price           totalCobyExtendedPrice;
    Price           formulaExtendedPrice;
    Price           totalFormulaExtendedPrice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCoByExtPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the co-product extended price from the buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The query run buffer record to be used in the calculation.
    /// </param>
    /// <returns>
    /// The calculated co-product extended price.
    /// </returns>
    abstract Price calcCoByExtPrice(Common _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedAllocationPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the estimated allocation percent.
    /// </summary>
    /// <returns>
    /// The calculated allocation percent.
    /// </returns>
    abstract Percent estimatedAllocationPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record from the query run.
    /// </summary>
    /// <param name="_queryRun">
    /// The active query run.
    /// </param>
    /// <returns>
    /// The buffer from the query run object.
    /// </returns>
    abstract Common getBufferFromQueryRun(QueryRun  _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormulaExtPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total extended price of the formula item.
    /// </summary>
    /// <returns>
    /// The total extended price of the formula item.
    /// </returns>
    abstract Price getFormulaExtPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values of the variables.
    /// </summary>
    public void initValues()
    {
        cobyMap = new Map(Types::Record, Types::Real);

        cobyExtendedPrice = 0;
        totalCobyExtendedPrice = 0;
        formulaExtendedPrice = 0;
        totalFormulaExtendedPrice = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common      _buffer)
    {
        if (! _buffer.TableId)
        {
            throw error(Error::missingRecord(funcname()));
        }

        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query run.
    /// </summary>
    /// <returns>
    /// The query run.
    /// </returns>
    abstract QueryRun queryRunBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalFormulaExtendedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calculated total formula extended price.
    /// </summary>
    /// <returns>
    /// The calculated total formula extended price.
    /// </returns>
    public Price totalFormulaExtendedPrice()
    {
        return totalFormulaExtendedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the buffer with the calculated cost allocation percent.
    /// </summary>
    /// <param name="_buffer">
    /// The query run record to be updated.
    /// </param>
    /// <param name="_percent">
    /// The cost allocation percent used to update the record value.
    /// </param>
    abstract void updateBuffer(Common _buffer, Real _percent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBufferCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves to co-product records and calculates the cost allocation percent.
    /// </summary>
    public void updateBufferCostAllocation()
    {
        PmfCostAllocationPct allocatedPercentage;

        if (cobyMap)
        {
            me_cobyMap = cobyMap.getEnumerator();

            while (me_cobyMap.moveNext())
            {
                if (totalFormulaExtendedPrice)
                {
                    PmfCostAllocationPct costAllocationPercentage = me_coByMap.currentValue() / totalFormulaExtendedPrice * #Percent;
                    PmfCoByMap           coBy = me_coByMap.currentKey();

                    this.updateBuffer(coBy, costAllocationPercentage);

                    // As the SQL precision and IL decimal data type precision are different
                    // we have to read the buffer back to check what has been really written to the DB.
                    allocatedPercentage += coBy.CostAllocationPct;
                }
            }

            this.allocateRoundingRemainderToCoproduct(100.00 - allocatedPercentage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateRoundingRemainderToCoproduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the total cost allocation rounding remainder to a co-product if necessary.
    /// </summary>
    /// <param name = "_notAllocatedPercentage">
    /// Percentage that should be allocated to coproducts.
    /// </param>
    private void allocateRoundingRemainderToCoproduct(PmfCostAllocationPct _notAllocatedPercentage)
    {
        // If full cost should be allocated to co-products we have to distribute the remainder allocation
        // coming from rounding in the calculations.
        if (totalFormulaExtendedPrice == totalCobyExtendedPrice &&
            _notAllocatedPercentage != 0.00)
        {
            me_cobyMap = cobyMap.getEnumerator();

            while (me_cobyMap.moveNext())
            {
                // don't allocate to co-products that don't have cost
                if (me_coByMap.currentValue() != 0.00)
                {
                    PmfCoByMap coBy = me_coByMap.currentKey();

                    ttsbegin;
                    coBy.reread();
                    coBy.CostAllocationPct = coBy.CostAllocationPct + _notAllocatedPercentage;
                    coBy.update();
                    ttscommit;

                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the co-product's allocation percent for records with a cost allocation type of total cost allocation.
    /// </summary>
    /// <param name="_updateBuffer">
    /// Boolean to indicate whether or not to update the co-product records with the calculated cost allocation percent.
    /// </param>
    public void updateTCA(boolean _updateBuffer = true)
    {
        QueryRun    queryRun;
        Common      buffer;

        this.initValues();

        queryRun = this.queryRunBuild();

        while (queryRun.next())
        {
            buffer = this.getBufferFromQueryRun(queryRun);
            coByExtendedPrice = this.calcCoByExtPrice(buffer);
            totalCobyExtendedPrice += coByExtendedPrice;
            coByMap.insert(buffer, coByExtendedPrice);
        }

        totalFormulaExtendedPrice = this.getFormulaExtPrice() + totalCobyExtendedPrice;

        if (_updateBuffer)
        {
            this.updateBufferCostAllocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCoByPrice</Name>
				<Source><![CDATA[
    public void validateCoByPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfTCAUpdate construct(Common  _buffer)
    {
        PmfTCAUpdate    pmfTCAUpdate;

        switch (_buffer.TableId)
        {
            case tableNum(ProdTable) : pmfTCAUpdate = PmfTCAUpdate_Prod::newFromProdTable(_buffer as ProdTable);
            break;

            case tableNum(BOMVersion) : pmfTCAUpdate = PmfTCAUpdate_Formula::newFromBOMVersion(_buffer as BOMVersion);
            break;
        }

        return pmfTCAUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>