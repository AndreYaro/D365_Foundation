<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationProjAdvancedJournalDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationProjAdvancedJournalDataRetrieval</c> class retrieves data from <c>ProjAdvancedJournalLine</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(ProjAdvancedJournal))]
public class TaxIntegrationProjAdvancedJournalDataRetrieval extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected ProjAdvancedJournal projAdvancedJournal;
    protected ProjAdvancedJournalLine projAdvancedJournalLine;
    protected InventDim inventDim;
    private CustVendTable custVendTable, custVendTableInvoiceAccount;
    private LogisticsPostalAddress shipmentOriginLogisticsPostalAddress;
    private LogisticsPostalAddress invoiceOriginLogisticsPostalAddress;
    private LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
    private LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query of the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (document.getLocalRecord())
        {
            this.projAdvancedJournal = document.getLocalRecord();
            return null;
        }
        else
        {
            throw error(strFmt("@TaxIntegrationException:RecordNotFound",
                fieldStr(ProjAdvancedJournal, RecId),
                this.document.getLocalRecId(),
                tableStr(ProjAdvancedJournal)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.projAdvancedJournalLine)
            .where(this.projAdvancedJournalLine, fieldStr(ProjAdvancedJournalLine, ProjAdvancedJournal))
                .isEqualToLiteral(this.projAdvancedJournal.RecId)
            .where(this.projAdvancedJournalLine, fieldStr(ProjAdvancedJournalLine, Voucher))
                .isEqualToLiteral(this.document.getVoucher())
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document.</returns>
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // The shouldSkipDocumentCharge must be true
        throw Error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // The shouldSkipLineCharge must be true
        throw Error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Cust
            || this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend)
        {
            AccountNum account = DimensionAttributeValueCombination::find(this.projAdvancedJournalLine.OffsetLedgerDimension).DisplayValue;
            ModuleCustVend moduleCustVend = this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend ? ModuleCustVend::Vend : ModuleCustVend::Cust;

            custVendTable = CustVendTable::findModule(moduleCustVend, account);

            if (custVendTable.InvoiceAccount)
            {
                custVendTableInvoiceAccount = CustVendTable::findModule(moduleCustVend, custVendTable.InvoiceAccount);
            }

            custVendTableInvoiceAccount = custVendTableInvoiceAccount ? custVendTableInvoiceAccount : custVendTable;
        }

        return TaxIntegrationLineObject::constructOnDocument(
            this.projAdvancedJournalLine.TableId,
            this.projAdvancedJournalLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();
        document.setInvoiceId('');
        document.setIncludingTax(NoYes::No);
        document.setDirection(TaxIntegrationDirection::Purchase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        ProjAdvancedJournalLineTaxLine projAdvancedJournalLineTaxline = ProjAdvancedJournalLineTaxLine::construct(this.projAdvancedJournalLine);
        _line.setTaxableLine(projAdvancedJournalLineTaxline);

        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>ProjAdvancedJournalLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.projAdvancedJournalLine.ItemId)
        {
            _line.setItemId(this.projAdvancedJournalLine.ItemId);
            inventDim = InventDim::find(this.projAdvancedJournalLine.InventDimId);
            this.copyToLineFromInventDim(_line, inventDim);
            this.copyToLineFromInventTable(_line, InventTable::find(this.projAdvancedJournalLine.ItemId));
            _line.setInventoryTransactionId(this.projAdvancedJournalLine.InventTransId);
        }

        ProjAdvancedJournalLineTaxLine taxableLine = _line.getTaxableLine();
        _line.setCalculationDate(taxableLine.getTaxRateDate(document.getCompany()));
        _line.setLedgerPostingType(taxableLine.getPostingType());
        _line.setText(taxableLine.getTransactionText());
        _line.setTransactionCurrencyCode(taxableLine.getTransactionCurrency());
        _line.setTaxGroup(taxableLine.getTaxGroup());
        _line.setTaxItemGroup(taxableLine.getTaxItemGroup());
        _line.setOverrideSalesTax(this.projAdvancedJournalLine.OverrideSalesTax);
        _line.setLedgerDimension(taxableLine.getDefaultDimension());
        _line.setOperationLedgerDimension(taxableLine.getOperationLedgerDimension(_line.getCompany() ? _line.getCompany() : curExt()));

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _line.setGeneralLedgerAccount(this.getAccountNumFromLine());
        }

        // The address information is on the line level. Line object address information should be reterived from transaction line.
        [shipmentOriginLogisticsPostalAddress, invoiceOriginLogisticsPostalAddress] = this.getOriginAddress();
        [shipmentDestinationLogisticsPostalAddress, invoiceDestinationLogisticsPostalAddress] = this.getDestinationAddress();

        this.copyToLineFromShipmentAddressWithCountryRegionType(
            _line,
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
        _line.setQuantity(this.projAdvancedJournalLine.Quantity);
        _line.setProjectId(this.projAdvancedJournalLine.ProjId);
        _line.setProjectCategory(this.projAdvancedJournalLine.ProjCategoryId);
        _line.setLineAmount(_line.getTaxableLine().getTransactionAmount());
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>No address on the header, so it can't copy address to line.</remarks>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipment and invoice origin address.
    /// </summary>
    /// <returns>The container of shipment and invoice origin address.</returns>
    protected container getOriginAddress()
    {
        // Only customer and vendor type have address
        if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Cust)
        {
            CompanyInfo companyInfo = CompanyInfo::find();
            shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                companyInfo,
                LogisticsLocationRoleType::Delivery);

            invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                companyInfo,
                LogisticsLocationRoleType::Invoice);
        }
        else if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend)
        {
            shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
                custVendTable,
                LogisticsLocationRoleType::Delivery);

            invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
                custVendTableInvoiceAccount,
                LogisticsLocationRoleType::Invoice);
        }

        return [shipmentOriginLogisticsPostalAddress, invoiceOriginLogisticsPostalAddress];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipment and invoice destination address.
    /// </summary>
    /// <returns>The container of shipment and invoice destination address.</returns>
    protected container getDestinationAddress()
    {
        // Only customer and vendor type have address
        if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Cust)
        {
            shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                custVendTable,
                LogisticsLocationRoleType::Delivery);

            invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                custVendTableInvoiceAccount,
                LogisticsLocationRoleType::Invoice);
        }
        else if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Vend)
        {
            CompanyInfo companyInfo = CompanyInfo::find();
            shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                companyInfo,
                LogisticsLocationRoleType::Delivery);

            invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                companyInfo,
                LogisticsLocationRoleType::Invoice);
        }

        return [shipmentDestinationLogisticsPostalAddress, invoiceDestinationLogisticsPostalAddress];
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        // No need to call super() method to set the calculation date since it is set via this.copyToLineFromLineTable() method.
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information to the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToDocumentFromLineTable(TaxIntegrationLineObject _line)
    {
        document.setTransactionCurrencyCode(this.projAdvancedJournalLine.CostCurrency);
        document.setAccountType(this.projAdvancedJournalLine.OffsetAccountType);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setVATRegisterDate(this.projAdvancedJournalLine.VatDueDate_W);
            document.setAccountingDate(this.projAdvancedJournalLine.AccountingDate);
        }

        this.copyCustVendGroupToDocument();
        this.copyAddressToDocumentFromLine();

        // No VAT number exists for project advanced journal and line.
        this.copyToDocumentFromVATNum(
            '',
            TaxExemptNumberSourceType::None,
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustVendGroupToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies cust group and vend group to the document.
    /// </summary>
    protected void copyCustVendGroupToDocument()
    {
        if (document.getAccountType() == LedgerJournalACType::Cust
            || document.getAccountType() == LedgerJournalACType::Vend)
        {
            document.setOrderAccount(custVendTable.AccountNum);
            document.setOrderAccountGroup(custVendTable.GroupId);
            document.setInvoiceAccount(custVendTableInvoiceAccount.AccountNum);
            document.setInvoiceAccountGroup(custVendTableInvoiceAccount.GroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocumentFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address from line.
    /// </summary>
    protected void copyAddressToDocumentFromLine()
    {
        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNumFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the account number from current voucher line.
    /// </summary>
    /// <returns>Account Number</returns>
    private MainAccountNum getAccountNumFromLine()
    {
        if (this.projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.projAdvancedJournalLine.OffsetLedgerDimension).MainAccountId;
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>