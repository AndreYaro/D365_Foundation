<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSApplicationInsightsActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Stopwatch = System.Diagnostics.Stopwatch;

internal abstract class WHSApplicationInsightsActivity implements System.IDisposable
{
    private static Map currentActivities = new Map(Types::String, Types::Class);
    
    private Map savedSharedProperties = new Map(Types::String, Types::Class);
    private Map currentSharedProperties;
    private WHSApplicationInsightsActivity previousActivity;

    private Stopwatch stopwatch;
    private WHSApplicationInsightsEventTelemetry startEventTelemetry;
    private WHSApplicationInsightsEventTelemetry endEventTelemetry;
    private WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSApplicationInsightsActivity));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Map _initialProperties, Map _sharedProperties)
    {
        using (var activityContext = instrumentationLogger.applicationInsightsTelemetryActivities().newActivity(this.name()))
        {
            this.initStartEventTelemetry();
            this.initEndEventTelemetry();
            this.increaseActivityGraphSharedProperty();
            this.initFromSharedProperties(_sharedProperties);
            this.initInitialProperties(_initialProperties);
            this.initCurrentActivity();
            this.startEvent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startEvent</Name>
				<Source><![CDATA[
    private void startEvent()
    {
        this.trackStartEvent();
        stopwatch = Stopwatch::StartNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public final void Dispose()
    {
        using (var activityContext = instrumentationLogger.applicationInsightsTelemetryActivities().disposeActivity(this.name()))
        {
            this.endEvent();
            this.decreaseActivityGraphSharedProperty();
            this.restoreSharedProperties();
            this.restoreCurrentActivity();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackStartEvent</Name>
				<Source><![CDATA[
    private void trackStartEvent()
    {
        WHSApplicationInsightsTelemetryLogger::instance().trackEvent(startEventTelemetry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endEvent</Name>
				<Source><![CDATA[
    private void endEvent()
    {
        stopwatch.Stop();

        this.addEndEventProperties();
        endEventTelemetry.addProperty(WHSApplicationInsightsElapsedMillisecondsEventProperty::newFromValue(stopwatch.ElapsedMilliseconds.ToString()));

        WHSApplicationInsightsTelemetryLogger::instance().trackEvent(endEventTelemetry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStartEventTelemetry</Name>
				<Source><![CDATA[
    private void initStartEventTelemetry()
    {
        str eventId = this.eventId();
        str name = this.name();

        startEventTelemetry = WHSApplicationInsightsEventTelemetry::newFromEventIdName(eventId, name);
        startEventTelemetry.addProperty(WHSApplicationInsightsEventStatusEventProperty::newFromValue('start'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEndEventTelemetry</Name>
				<Source><![CDATA[
    private void initEndEventTelemetry()
    {
        str eventId = this.eventId();
        str name = this.name();

        endEventTelemetry = WHSApplicationInsightsEventTelemetry::newFromEventIdName(eventId, name);
        endEventTelemetry.addProperty(WHSApplicationInsightsEventStatusEventProperty::newFromValue('stop'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseActivityGraphSharedProperty</Name>
				<Source><![CDATA[
    private void increaseActivityGraphSharedProperty()
    {
        var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

        if (sharedParametersContext)
        {
            SysApplicationInsightsProperty property = this.findActivityGraphProperty(sharedParametersContext);

            if (property)
            {
                property.parmValue(property.parmValue() + '.' + this.currentActivityGraphLevelName());
            }
            else
            {
                str activityGraphPropertyValue = 'Warehouse.' + this.currentActivityGraphLevelName();

                var activityGraphProperty = WHSApplicationInsightsActivityGraphEventProperty::newFromValue(activityGraphPropertyValue);
                sharedParametersContext.addSharedProperty(activityGraphProperty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseActivityGraphSharedProperty</Name>
				<Source><![CDATA[
    private void decreaseActivityGraphSharedProperty()
    {
        var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

        if (sharedParametersContext)
        {
            SysApplicationInsightsProperty property = this.findActivityGraphProperty(sharedParametersContext);

            if (property)
            {
                int propertyValueLenght = strLen(property.parmValue());
                str currentActivityGraphLevel = '.' + this.currentActivityGraphLevelName();
                int lastOccurencePosition = strScan(property.parmValue(), currentActivityGraphLevel, propertyValueLenght, -propertyValueLenght);

                property.parmValue(strDel(property.parmValue(), lastOccurencePosition, strLen(currentActivityGraphLevel)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityGraphProperty</Name>
				<Source><![CDATA[
    private SysApplicationInsightsProperty findActivityGraphProperty(WHSApplicationInsightsActivitySharedParametersContext _sharedParametersContext)
    {
        return _sharedParametersContext.findPropertyByKey(conPeek(WHSApplicationInsightsEventProperties::ActivityGraph, 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentActivityGraphLevelName</Name>
				<Source><![CDATA[
    protected abstract str currentActivityGraphLevelName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSharedProperties</Name>
				<Source><![CDATA[
    private void initFromSharedProperties(Map _sharedProperties)
    {
        var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

        if (sharedParametersContext)
        {
            currentSharedProperties = _sharedProperties;

            this.updateSharedParametersContext(sharedParametersContext);
            this.assignPropertiesFromSharedParameters(sharedParametersContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSharedParametersContext</Name>
				<Source><![CDATA[
    private void updateSharedParametersContext(WHSApplicationInsightsActivitySharedParametersContext _sharedParametersContext)
    {
        if (currentSharedProperties)
        {
            MapEnumerator currentSharedPropertiesEnumerator = currentSharedProperties.getEnumerator();

            while (currentSharedPropertiesEnumerator.moveNext())
            {
                SysApplicationInsightsProperty newSharedProperty = currentSharedPropertiesEnumerator.currentValue();
                SysApplicationInsightsProperty existingSharedProperty = _sharedParametersContext.findPropertyByKey(newSharedProperty.key());

                if (existingSharedProperty)
                {
                    savedSharedProperties.add(existingSharedProperty.key(), existingSharedProperty);
                }

                _sharedParametersContext.addSharedProperty(newSharedProperty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrentActivity</Name>
				<Source><![CDATA[
    private void initCurrentActivity()
    {
        str eventId = this.eventId();

        Map currentActivitiesLocal = WHSApplicationInsightsActivity::currentActivities;

        if (currentActivitiesLocal.exists(eventId))
        {
            previousActivity = currentActivitiesLocal.lookup(eventId);
        }

        currentActivitiesLocal.add(eventId, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreCurrentActivity</Name>
				<Source><![CDATA[
    private void restoreCurrentActivity()
    {
        str eventId = this.eventId();

        Map currentActivitiesLocal = WHSApplicationInsightsActivity::currentActivities;

        currentActivitiesLocal.remove(eventId);

        if (previousActivity)
        {
            currentActivitiesLocal.add(eventId, previousActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignPropertiesFromSharedParameters</Name>
				<Source><![CDATA[
    private void assignPropertiesFromSharedParameters(WHSApplicationInsightsActivitySharedParametersContext _sharedParametersContext)
    {
        MapEnumerator sharedPropertiesEnumerator = _sharedParametersContext.sharedPropertiesEnumerator();

        while (sharedPropertiesEnumerator.moveNext())
        {
            SysApplicationInsightsProperty property = sharedPropertiesEnumerator.currentValue();
            startEventTelemetry.addProperty(property);
            endEventTelemetry.addProperty(property);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInitialProperties</Name>
				<Source><![CDATA[
    private void initInitialProperties(Map _initialProperties)
    {
        if (_initialProperties)
        {
            MapEnumerator initialPropertiesEnumerator = _initialProperties.getEnumerator();

            while (initialPropertiesEnumerator.moveNext())
            {
                SysApplicationInsightsProperty property = initialPropertiesEnumerator.currentValue();
                startEventTelemetry.addProperty(property);
                endEventTelemetry.addProperty(property);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    protected final WHSApplicationInsightsActivity addProperty(SysApplicationInsightsProperty _property)
    {
        endEventTelemetry.addProperty(_property);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentActivityInstanceForEventId</Name>
				<Source><![CDATA[
    private static WHSApplicationInsightsActivity currentActivityInstanceForEventId(str _eventId)
    {
        if (WHSApplicationInsightsActivity::currentActivities.exists(_eventId))
        {
            return WHSApplicationInsightsActivity::currentActivities.lookup(_eventId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSharedProperty</Name>
				<Source><![CDATA[
    protected static final void addSharedProperty(str _eventId, SysApplicationInsightsProperty _property)
    {
        WHSApplicationInsightsActivity currentActivity = WHSApplicationInsightsActivity::currentActivityInstanceForEventId(_eventId);

        if (currentActivity)
        {
            var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

            if (sharedParametersContext)
            {
                SysApplicationInsightsProperty existingSharedProperty = sharedParametersContext.findPropertyByKey(_property.key());

                if (existingSharedProperty)
                {
                    Map savedSharedProperties = currentActivity.savedSharedProperties;
                    savedSharedProperties.add(existingSharedProperty.key(), existingSharedProperty);
                }

                Map currentSharedProperties = currentActivity.currentSharedProperties;
                currentSharedProperties.add(_property.key(), _property);

                sharedParametersContext.addSharedProperty(_property);
            }

            WHSApplicationInsightsEventTelemetry endEventTelemetry = currentActivity.endEventTelemetry;
            endEventTelemetry.addProperty(_property);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSharedProperties</Name>
				<Source><![CDATA[
    private void restoreSharedProperties()
    {
        var sharedParametersContext = WHSApplicationInsightsActivitySharedParametersContext::instance();

        if (sharedParametersContext)
        {
            this.removeCurrentSharedProperties(sharedParametersContext);
            this.addSavedSharedProperties(sharedParametersContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCurrentSharedProperties</Name>
				<Source><![CDATA[
    private void removeCurrentSharedProperties(WHSApplicationInsightsActivitySharedParametersContext _sharedParametersContext)
    {
        if (currentSharedProperties)
        {
            MapEnumerator currentSharedPropertiesEnumerator = currentSharedProperties.getEnumerator();

            while (currentSharedPropertiesEnumerator.moveNext())
            {
                SysApplicationInsightsProperty currentSharedProperty = currentSharedPropertiesEnumerator.currentValue();
                _sharedParametersContext.removeSharedProperty(currentSharedProperty.key());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSavedSharedProperties</Name>
				<Source><![CDATA[
    private void addSavedSharedProperties(WHSApplicationInsightsActivitySharedParametersContext _sharedParametersContext)
    {
        MapEnumerator savedSharedPropertiesEnumerator = savedSharedProperties.getEnumerator();

        while (savedSharedPropertiesEnumerator.moveNext())
        {
            SysApplicationInsightsProperty savedSharedProperty = savedSharedPropertiesEnumerator.currentValue();
            _sharedParametersContext.addSharedProperty(savedSharedProperty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEndEventProperties</Name>
				<Source><![CDATA[
    protected void addEndEventProperties()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventId</Name>
				<Source><![CDATA[
    protected abstract str eventId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    protected abstract str name()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>