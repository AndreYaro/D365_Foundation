<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetLineToForecastEmplMapper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

internal class ProjBudgetLineToForecastEmplMapper implements ProjBudgetLineEntityTableMapper
{
    private ProjForecastEmpl projForecastEmpl;
    private Entity entity;
    private const str DEFAULT_EMPL_CATEGORY = 'Default-Hour';
    private static ProjOpsInstrumentationLogger logger = ProjOpsInstrumentationLogger::createLogger(classStr(ProjBudgetLineToForecastEmplMapper));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Entity _entity)
    {
        if ( !_entity || !_entity.Attributes )
        {
            logger.logError(strFmt("@Proj:ProjBudgetLoggerEmptyEntityPassed", any2Str(_entity)));
            throw error(strFmt("@Proj:ProjBudgetEmptyEntityPassed"));
        }
        this.entity = _entity;
        this.mapEntityToTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToTable</Name>
				<Source><![CDATA[
    private void mapEntityToTable()
    {
        AttributeCollection attributes = entity.Attributes;
        projForecastEmpl.ProjId = attributes.ContainsKey(ProjBudgetDataverseConstants::PROJECTNUMBER)
                                    ? attributes.get_Item(ProjBudgetDataverseConstants::PROJECTNUMBER) : '';

        this.updateQuantityAndCostPrice(projForecastEmpl, attributes);
        
        AliasedValue startDateTime = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(attributes, ProjBudgetDataverseConstants::STARTTIME);
        projForecastEmpl.SchedFromDate = startDateTime ? startDateTime.Value : ProjBudgetDataverseConstants::DEFAULT_DATETIME;

        AliasedValue description = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(attributes, ProjBudgetDataverseConstants::DESCRIPTION);
        projForecastEmpl.Txt = description ? description.Value : '';

        projForecastEmpl.ModelId = ProjBudgetLineEntityCollectionWriter::getBudgetForecastModel().ModelId;


        AliasedValue activity = ProjBudgetLineToForecastMapperUtil::getItem(attributes, ProjBudgetDataverseConstants::ACTIVITY_NUMBER, ProjBudgetDataverseConstants::TASK_ENTITY);
        projForecastEmpl.ActivityNumber = activity ? activity.Value : '';
        
        ProjCategory defaultProjCategory = ProjCategory::find(DEFAULT_EMPL_CATEGORY);
        AliasedValue category = ProjBudgetLineToForecastMapperUtil::getItem(attributes, ProjBudgetDataverseConstants::TRANSACTION_NUMBER, ProjBudgetDataverseConstants::TRANSACTION_CATEGORY_ENTITY);
        projForecastEmpl.CategoryId = category ? category.Value : defaultProjCategory.CategoryId;

        AliasedValue resource = ProjBudgetLineToForecastMapperUtil::getItem(attributes, ProjBudgetDataverseConstants::RESOURCE_CATEGORY, ProjBudgetDataverseConstants::BOOKABLE_RESOURCE_CATEGORY_ENTITY);
        projForecastEmpl.ResourceCategory = resource ? resource.Value : 0;

        EntityReference currencyId = attributes.ContainsKey(ProjBudgetDataverseConstants::CURRENCYID)
                                                        ? attributes.get_Item(ProjBudgetDataverseConstants::CURRENCYID): null;

        projForecastEmpl.CurrencyId = currencyId ? currencyId.Name : '';
        
        EntityReference contract = attributes.ContainsKey(ProjBudgetDataverseConstants::CONTRACTLINEID)
                                                        ? attributes.get_Item(ProjBudgetDataverseConstants::CONTRACTLINEID) : null;
        projForecastEmpl.ContractLineId = contract ? contract.Name : '';

        AliasedValue billingType = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(attributes, ProjBudgetDataverseConstants::BILLINGTYPE);
        OptionSetValue billingTypeValue = billingType ? billingType.Value : null;
        projForecastEmpl.LinePropertyId = ProjBudgetLineToForecastMapperUtil::convertBillingTypeToLineProperty(billingTypeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityAndCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// updating the quantity and cost price to support the case where quantity is 0 and amount is not
    /// </summary>
    /// <param name="_projForecastEmpl">The ProjForecastEmpl object to be updated.</param>
    /// <param name="_attributes">Collection of attributes used to fetch the budget line item amount.</param>
    private void updateQuantityAndCostPrice(ProjForecastEmpl _projForecastEmpl, AttributeCollection _attributes)
    {
        AliasedValue qty = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(_attributes, ProjBudgetDataverseConstants::QUANTITY);
        real quantity = qty ? qty.Value : 0;
        real value;

        AliasedValue module = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(_attributes, ProjBudgetDataverseConstants::MODULE);
        OptionSetValue moduleOptionSet = module ? module.Value : null;
        int budgetType = moduleOptionSet ? moduleOptionSet.Value : 0;

        //Set qty
        if(quantity == 0)
        {
            AliasedValue amount = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(_attributes, ProjBudgetDataverseConstants::AMOUNT);
            Microsoft.Xrm.Sdk.Money money = amount ? amount.Value : null;
            value = money ? money.Value : 0;
            _projForecastEmpl.Qty = value ? 1 : 0;
        }
        else
        {
            AliasedValue price = ProjBudgetLineToForecastMapperUtil::getBudgetLineItem(_attributes, ProjBudgetDataverseConstants::PRICE);
            Microsoft.Xrm.Sdk.Money money = price ? price.Value : null;
            value = money ? money.Value : 0;
            _projForecastEmpl.Qty = quantity;
        }

        //Set Cost/Sales Price
        if (budgetType == ProjBudgetDataverseConstants::MODULE_COST)
        {
            _projForecastEmpl.CostPrice = value;
        }
        else if (budgetType == ProjBudgetDataverseConstants::MODULE_SALES)
        {
            _projForecastEmpl.SalesPrice = value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTableToDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes mapped ProjForecastEmpl to Database
    /// </summary>
    public void writeTableToDatabase()
    {
        projForecastEmpl.selectForUpdate(true);
        projForecastEmpl.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionClassification</Name>
				<Source><![CDATA[
    public ProjTransType getTransactionClassification()
    {
        return ProjTransType::Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    public Common getTable()
    {
        return projForecastEmpl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>