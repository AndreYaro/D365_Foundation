<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyVendorInvoiceCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class generates a vendor invoice at the borrowing company side
/// for an intercompany invoice scenario with project transactions.
/// </summary>
class ProjIntercompanyVendorInvoiceCreator
{
    CustInvoiceTable            custInvoice;
    CustTable                   custTable;
    VendTable                   vendTable;

    EcoResCategory procurementCategory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the vendor invoice.
    /// </summary>
    public void createVendorInvoice()
    {
        CustInvoiceLine                     custInvoiceLine;
        CustInvoiceLineInterProj            interProjLine;

        // First store the lines in a list to change the company context
        // only once, instead of one time per each line.
        List origInvoiceLines = new List(Types::Container);

        while select custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoice.RecId
            join interProjLine
            where interProjLine.CustInvoiceLine == custInvoiceLine.RecId
        {
            origInvoiceLines.addEnd([custInvoiceLine, interProjLine]);
        }

        if (ProjIntercompanyParameters::canAccrueRevenue(CompanyInfo::findDataArea(custInvoice.ProjIntercompany).RecId))
        {
            this.reverseAccruedRevenue(origInvoiceLines);
        }

        changecompany(custInvoice.ProjIntercompany)
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = this.createVendorInvoiceHeader();
            ListEnumerator origLinesEnum = origInvoiceLines.getEnumerator();
            while (origLinesEnum.moveNext())
            {
                [custInvoiceLine, interProjLine] = origLinesEnum.current();
                this.createVendorInvoiceLine(vendInvoiceInfoTable, custInvoiceLine, interProjLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>VendInvoiceInfoTable</c> fields.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceInfoTable</c> record.
    /// </returns>
    protected VendInvoiceInfoTable initializeVendInvoiceInfoTable()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        vendInvoiceInfoTable.TableRefId = formletterParmData::getNewTableRefId();
        if (custInvoice.DocumentDate != dateNull())
        {
            vendInvoiceInfoTable.DocumentDate = custInvoice.DocumentDate;
        }
        else
        {
            vendInvoiceInfoTable.DocumentDate = custInvoice.InvoiceDate;
        }
        vendInvoiceInfoTable.CurrencyCode = custInvoice.CurrencyCode;
        vendInvoiceInfoTable.TransDate = custInvoice.InvoiceDate;
        vendInvoiceInfoTable.Num = custInvoice.InvoiceId;
        vendInvoiceInfoTable.OrderAccount = vendTable.AccountNum;
        vendInvoiceInfoTable.InvoiceAccount = vendTable.AccountNum;
        vendInvoiceInfoTable.ParmJobStatus = ParmJobStatus::Waiting;
        vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
        vendInvoiceInfoTable.InclTax = NoYes::Yes;

        vendInvoiceInfoTable.defaultRow();

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoiceHeader</Name>
				<Source><![CDATA[
    protected VendInvoiceInfoTable createVendorInvoiceHeader()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.initializeVendInvoiceInfoTable();
        if (vendInvoiceInfoTable.validateWrite())
        {
            vendInvoiceInfoTable.insert();
        }
        else
        {
            error("@Proj:VendorInvoiceNotCreated");
        }

        VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(vendInvoiceInfoTable);

        // Create <c>markUpTrans</c> for intercompany, non-po case.
        if (vendInvoiceInfoTable.isNonPO()
            && ProjIntercompanyCreateMarkUpTransForNonPOFlight::instance().isEnabled())
        {
            vendInvoiceInfoTable.createMarkupTrans();
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoiceLine</Name>
				<Source><![CDATA[
    protected void createVendorInvoiceLine(VendInvoiceInfoTable _vendInvoiceInfoTable,
                                            CustInvoiceLine _custInvoiceLine,
                                            CustInvoiceLineInterProj _interProjLine)
    {
        ProjTable projTable = ProjTable::find(_interProjLine.ProjId, false);

        VendInvoiceInfoLine vendInvoiceLine = this.populateVendInvoiceInfoLine(_vendInvoiceInfoTable, _custInvoiceLine, _interProjLine, projTable);
        vendInvoiceLine.insert();

        VendInvoiceInfoLine_Project projVendInvoiceLine = this.populateVendInvoiceInfoLine_Project(_vendInvoiceInfoTable, _custInvoiceLine, _interProjLine, vendInvoiceLine);
        projVendInvoiceLine.insert();

        if (VendInvoiceInfoLine_Project::existsForInvoice(_vendInvoiceInfoTable))
        {
            SysTransactionScopeCache::clear(classStr(AccountingDistributionRule));
        }

        // Add the lending entity dataareaid to the cache so that it can be used while posting.
        // A combination of project and category is used as key, since the consumer of the cache (ProjectPosting class > costLedgerDimensiondoes()) is a static method and do not have a way to get the value apart from these 2.
        SysGlobalCache  globalCache = appl.globalCache();
        str cacheKey = _interProjLine.ProjId + ':' + _interProjLine.ProjCategoryId + ':' + projTable.DataAreaId;

        globalCache.set(classStr(ProjIntercompanyVendorInvoiceCreator), cacheKey, _custInvoiceLine.DataAreaId);

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(vendInvoiceLine, false, SourceDocumentLineAccountingStatus::FullyDistributed);

        // Clear the cache.
        globalCache.remove(classStr(ProjIntercompanyVendorInvoiceCreator), cacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    protected VendInvoiceInfoLine populateVendInvoiceInfoLine(VendInvoiceInfoTable _vendInvoiceInfoTable,
                                            CustInvoiceLine _custInvoiceLine,
                                            CustInvoiceLineInterProj _interProjLine,
                                            ProjTable _projTable)
    {
        VendInvoiceInfoLine vendInvoiceLine;

        vendInvoiceLine.initValue();
        vendInvoiceLine.TableRefId          = _vendInvoiceInfoTable.TableRefid;
        
        if (_custInvoiceLine.InvoiceTxt)
        {
            vendInvoiceLine.Description         = _custInvoiceLine.InvoiceTxt;
        }
        else
        {
            vendInvoiceLine.Description         = _custInvoiceLine.Description;
        }
        vendInvoiceLine.OrderAccount        = vendTable.AccountNum;
        vendInvoiceLine.ProcurementCategory = procurementCategory.RecId;
        vendInvoiceLine.InventDimId         = InventDim::findOrCreateBlank().inventDimId;
        vendInvoiceLine.currencyCode        = custInvoice.CurrencyCode;

        Qty lineQuantity = _custInvoiceLine.Quantity;
        if (lineQuantity == 0)
        {
            lineQuantity = 1;
        }

        vendInvoiceLine.ReceiveNow = lineQuantity;

        AmountCur                           lineAmount;
        ProjIntercompanyInvoiceOrigTrans    origTrans;
        Amount                              finalSalesPrice;
        changecompany(_custInvoiceLine.DataAreaId)
        {
            lineAmount = CurrencyExchangeHelper::amount(_custInvoiceLine.AmountCur + _custInvoiceLine.displayTaxAmount(), custInvoice.CurrencyCode);
            origTrans = _interProjLine.getOrigTrans();
            finalSalesPrice = origTrans.getFinalSalesPrice();
        }

        vendInvoiceLine.LineAmount = lineamount;
        vendInvoiceLine.PriceUnit = 1.0;

        // Price is purpousely not set here because the vendor invoice does not support having both price and total line amount
        // through the UI the user can only specify one or the other, and entering the amount clears unit price on the line.
        // If both are forced to be specified through X++ code, parts of vendor invoice calculation and distribution
        // code will work from total and parts from price/quantity, resulting in discrepancies. In cases when
        // rounding makes qty*price to not exactly equal total lineAmount (e.g. total=100, price=33.33, qty=3),
        // this has previously caused discount lines for $0.01 where none should be, and in conjunction with taxes,
        // the inability to post the invoice due to an imbalance on the voucher.
        // Price was previously set here as follows:

        //InvoiceUnitPrice unitPrice;
        //if (lineQuantity)
        //{
        //    unitPrice = lineAmount / lineQuantity;
        //}
        // vendInvoiceLine.PurchPrice = CurrencyExchangeHelper::price(unitPrice, custInvoice.CurrencyCode);
        
        vendInvoiceLine.PurchUnit = UnitOfMeasure::findBySymbol(origTrans.getUnitOfMeasureSymbol()).Symbol;

        /// Retrieves the item tax group that is associated with the specified Procurement category and for the specified organization.
        if (vendInvoiceLine.ProcurementCategory 
            && this.getProjConfigureIntercompanyItemSalesTaxGroup() == ProjConfigureIntercompanyItemSalesTaxGroup::ByProcurementCategories)
        {
            vendInvoiceLine.TaxItemGroup = ProcCategoryItemTaxGroup::getProcCategoryItemTaxGroup(
                vendInvoiceLine.ProcurementCategory, CompanyInfo::findDataArea(vendInvoiceLine.DataAreaId).RecId).TaxItemGroup;
        }
        else
        {
            vendInvoiceLine.TaxItemGroup = ProjCategory::find(_interProjLine.ProjCategoryId).TaxItemGroupId;
        }

        vendInvoiceLine.TaxGroup = _vendInvoiceInfoTable.TaxGroup;

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            && TaxWithholdDefaultWHTGroupsForIntercompanyVendInvoiceFlight::instance().isEnabled())
        {
            this.populateTaxWithholdFieldsForVendInvoiceInfoLine(vendInvoiceLine);
        }

        vendInvoiceLine.DefaultDimension = vendInvoiceLine.mergeDimension(_projTable.DefaultDimension, _vendInvoiceInfoTable.DefaultDimension);
        DimensionDefault custDimensionUsingSharedAttribute = LedgerDimensionDefaultFacade::getDefaultDimensionUsingSharedAttributes(_custInvoiceLine.DefaultDimension, _custInvoiceLine.DataAreaId, vendInvoiceLine.DataAreaId);
        vendInvoiceLine.DefaultDimension = vendInvoiceLine.mergeDimension(vendInvoiceLine.DefaultDimension, custDimensionUsingSharedAttribute);
        
        return vendInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjConfigureIntercompanyItemSalesTaxGroup</Name>
				<Source><![CDATA[
    private ProjConfigureIntercompanyItemSalesTaxGroup getProjConfigureIntercompanyItemSalesTaxGroup()
    {
        return ProjParameters::find().ConfigureIntercompanyItemSalesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxWithholdFieldsForVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    private void populateTaxWithholdFieldsForVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        if (!_vendInvoiceInfoLine.TaxWithholdGroup)
        {
            _vendInvoiceInfoLine.TaxWithholdGroup = VendTable::find(_vendInvoiceInfoLine.OrderAccount).TaxWithholdGroup;
        }

        if (!_vendInvoiceInfoLine.TaxWithholdItemGroupHeadingId)
        {
            ProcCategoryItemTaxGroup procCategoryItemTaxGroup = ProcCategoryItemTaxGroup::getProcCategoryTaxItemWithholdItemGroup(_vendInvoiceInfoLine.ProcurementCategory);
            _vendInvoiceInfoLine.TaxWithholdItemGroupHeadingId = procCategoryItemTaxGroup.TaxWithholdItemGroupHeadingId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendInvoiceInfoLine_Project</Name>
				<Source><![CDATA[
    protected VendInvoiceInfoLine_Project populateVendInvoiceInfoLine_Project(VendInvoiceInfoTable _vendInvoiceInfoTable,
                                            CustInvoiceLine _custInvoiceLine,
                                            CustInvoiceLineInterProj _interProjLine,
                                            VendInvoiceInfoLine _vendInvoiceLine)
    {
        VendInvoiceInfoLine_Project projVendInvoiceLine;

        projVendInvoiceLine.initValue();
        projVendInvoiceLine.VendInvoiceInfoLineRefRecId = _vendInvoiceLine.RecId;
        projVendInvoiceLine.ProjActivityNumber          = _interProjLine.ActivityNumber;
        projVendInvoiceLine.ProjCategoryId              = _interProjLine.ProjCategoryId;
        projVendInvoiceLine.ProjId                      = _interProjLine.ProjId;
        projVendInvoiceLine.TransDate                   = _interProjLine.TransDate;

        ProjIntercompanyInvoiceOrigTrans    origTrans;
        Amount                              finalSalesPrice;
        changecompany(_custInvoiceLine.DataAreaId)
        {
            origTrans = _interProjLine.getOrigTrans();
            finalSalesPrice = origTrans.getFinalSalesPrice();
        }

        if (_interProjLine.HcmWorker)
        {
            projVendInvoiceLine.Resource = ResourceFacade::findOrCreateByWorker(_interProjLine.HcmWorker, CompanyInfo::findDataArea(_interProjLine.DataAreaId).RecId);
        }
        projVendInvoiceLine.ProjLinePropertyId  = _interProjLine.ProjLinePropertyId;
        projVendInvoiceLine.ProjSalesUnitId     = UnitOfMeasure::findBySymbol(origTrans.getUnitOfMeasureSymbol()).RecId;
        projVendInvoiceLine.ProjSalesCurrencyId = origTrans.getFinalSalesCurrencyCode();
        if (projVendInvoiceLine.ProjSalesCurrencyId == '')
        {
            //
            // Sales currency code is required by the table. If not provided by the transaction line use the
            // accounting currency of the ledger. This normally happens when intercompany transactions are created
            // for a internal project.  This project type does not have an associated contract to define the
            // billing currency. This mimics the behavior of entering the vendor invoice through the client.
            //
            CurrencyCode ledgerCurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(_interProjLine.ProjDataArea).RecId);
            projVendInvoiceLine.ProjSalesCurrencyId = ledgerCurrencyCode;
        }
        projVendInvoiceLine.ProjSalesPrice = finalSalesPrice;
        if (projVendInvoiceLine.ProjSalesPrice < 0)
        {
            // Credit transaction, we changed the Qty sign in the Intercompany invoice so we need to update sales price
            projVendInvoiceLine.ProjSalesPrice = projVendInvoiceLine.ProjSalesPrice * -1;
        }

        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            projVendInvoiceLine.ProjTaxGroupId = vendTable.TaxGroup;

            changecompany(_interProjLine.ProjDataArea)
            {
                projVendInvoiceLine.ProjTaxItemGroupId = ProjCategory::find(_interProjLine.ProjCategoryId).TaxItemGroupId;
            }
        }
        else
        {
            projVendInvoiceLine.ProjTaxGroupId = ProjParameters::taxGroupInvoice(_interProjLine.ProjId);
            projVendInvoiceLine.ProjTaxItemGroupId = ProjCategory::find(_interProjLine.ProjCategoryId).TaxItemGroupId;
        }

        return projVendInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance from the originating customer intercompany invoice record.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> record to create the matching vendor invoice from.
    /// </param>
    /// <param name="_custTable">
    /// An optional <c>CustTable</c> record of the customer that represents the borrowing LE.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Mandatory parameters are missing or wrong.
    /// </exception>
    protected void new(CustInvoiceTable           _custInvoiceTable,
                       CustTable                  _custTable            = null)
    {
        custInvoice          = _custInvoiceTable;
        custTable            = _custTable ? _custTable : CustTable::find(custInvoice.InvoiceAccount);

        changecompany (custTable.interCompanyTradingPartnerCompanyID())
        {
            vendTable           = VendTable::find(custTable.interCompanyTradingPartnerAccount());
            procurementCategory = EcoResCategory::find(ProjParameters::find().DefaultICProcurCategory);
            if (!procurementCategory)
            {
                throw error(strFmt("@SYS4005077", custTable.interCompanyTradingPartnerCompanyID()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAccruedRevenue</Name>
				<Source><![CDATA[
    private void reverseAccruedRevenue(List _origInvoiceLines)
    {
        CustInvoiceLine             custInvoiceLine;
        CustInvoiceLineInterProj    interProjLine;
        AmountCur                   amount;
        Qty                         qty;
        TaxAmountCur                intercompanyExemptTax;
        AmountCur                   amountInTransferCurrency;

        ListEnumerator origLinesEnum = _origInvoiceLines.getEnumerator();
        while (origLinesEnum.moveNext())
        {
            [custInvoiceLine, interProjLine] = origLinesEnum.current();

            if (interProjLine.TransactionOrigin == ProjOrigin::Timesheet
                || interProjLine.TransactionOrigin == ProjOrigin::ExpenseManagement
                || (interProjLine.TransactionOrigin == ProjOrigin::ProjAdvancedJournal
                    && ProjIntercompanyAdvanceJournalAccruedRevenueFlight::instance().isEnabled())
                || (interProjLine.TransactionOrigin == ProjOrigin::VendorInvoice
                    && ProjIntercompanyVendInvAccruedRevenueFlight::instance().isEnabled()
                    && !ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()))
            {
                if (interProjLine.OrigTransRecId && interProjLine.TransactionOrigin != ProjOrigin::ProjAdvancedJournal)
                {
                    ProjectRevenueLine projectRevenueLine;

                    boolean ProjIntercompanyInvoiceDupRevenueLineRefRecIdFlightEnabled = ProjIntercompanyInvoiceDupRevenueLineRefRecIdFlight::instance().isEnabled();

                    // Gets the original accrued sales value for timesheet or expense transactions in order to post reverse accrued revenue.
                    if (ProjIntercompanyInvoiceDupRevenueLineRefRecIdFlightEnabled)
                    {
                        projectRevenueLine = interProjLine.getProjectRevenueLine();
                    }
                    else
                    {
                        select firstonly TransactionCurrencyAmount from projectRevenueLine
                            where projectRevenueLine.RefRecId == interProjLine.OrigTransRecId;
                    }

                    if (projectRevenueLine.TransactionCurrencyAmount)
                    {
                        amountInTransferCurrency = projectRevenueLine.TransactionCurrencyAmount;
                    }
                    else
                    {
                        amountInTransferCurrency = 0;
                    }
                }
                else
                {
                    amountInTransferCurrency = interProjLine.SalesPrice * custInvoiceLine.Quantity + interProjLine.IndirectComponentAmount + intercompanyExemptTax;
                }
            }
            else
            {
                amountInTransferCurrency = ((custInvoiceLine.AmountCur < 0) ? -1 : 1) * (interProjLine.SalesPrice + interProjLine.IndirectComponentAmount + intercompanyExemptTax);
            }

            amount += CurrencyExchangeHelper::curAmount2CurAmount(amountInTransferCurrency,
                                                        interProjLine.SalesPriceCurrency,
                                                        custInvoice.CurrencyCode,
                                                        custInvoice.InvoiceDate,
                                                        false);
        }

        if (amount != 0)
        {
            ttsbegin;
            ProjectRevenueHeader        revenueHeader;
            revenueHeader.ReferenceSourceDocumentHeader = custInvoice.SourceDocumentHeader;
            revenueHeader.IsIntercompany = true;
            revenueHeader.insert();

            ProjectRevenueLine          revenueLine;
            revenueLine.ProjectRevenueHeader      = revenueHeader.RecId;
            revenueLine.AccountingLegalEntity     = CompanyInfo::current();
            revenueLine.Currency                  = Currency::find(custInvoice.CurrencyCode).RecId;
            revenueLine.TransactionCurrencyAmount = -amount;
            revenueLine.AccountingDate            = custInvoice.InvoiceDate;
            revenueLine.insert();
            ttscommit;
            SourceDocumentProcessorFacade::submitSourceDocumentImplementation(revenueHeader, false, SourceDocumentAccountingStatus::Completed);
     
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProjIntercompanyVendorInvoiceCreator</c> instance from the
    /// originating customer intercompany invoice record.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> record to create the matching vendor invoice from.
    /// </param>
    /// <param name="_custTable">
    /// An optional <c>CustTable</c> record of the customer that represents the borrowing LE.
    /// </param>
    /// <returns>
    /// A new <c>ProjIntercompanyVendorInvoiceCreator</c> instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Mandatory parameters are missing or wrong.
    /// </exception>
    public static ProjIntercompanyVendorInvoiceCreator construct(CustInvoiceTable           _custInvoiceTable,
                                                                 CustTable                  _custTable            = null)
    {
        return new ProjIntercompanyVendorInvoiceCreator(_custInvoiceTable, _custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>CustInvoiceTable</c> entry is intercompany invoice for project transactions.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> entry to be checked.
    /// </param>
    /// <returns>
    /// true if this is a project intercompany invoice; false otherwise.
    /// </returns>
    public static boolean isProjIntercompany(CustInvoiceTable _custInvoiceTable)
    {
        return (_custInvoiceTable.ProjIntercompany != '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>