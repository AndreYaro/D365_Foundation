<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingCancel_EndWIP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostClosingCancel_EndWIP_RU extends InventCostClosingCancel_End implements BatchRetryable
{
    Voucher     cancelVoucher;
    TransDate   cancelTransDate;

    Voucher     newVoucher;

    private const Version CurrentVersionEndWIP = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParams</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkParams()
    {
        boolean ret = true;

        if (!cancelTransDate)
        {
            ret = checkFailed("@GLS115862");
        }

        if (!cancelVoucher)
        {
            ret = checkFailed("@GLS115863");
        }

        if (!newVoucher)
        {
            ret = checkFailed("@GLS115864");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected void execute()
    {
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            this.updateLedger();
        }
        else
        {
            this.updateLedgerSecCur_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        if (!this.checkParams())
        {
            throw error("@GLS115865");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmCancelTransDate(TransDate _cancelTransDate = cancelTransDate)
    {
        cancelTransDate = _cancelTransDate;

        return cancelTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmCancelVoucher(Voucher _cancelVoucher = cancelVoucher)
    {
        cancelVoucher = _cancelVoucher;

        return cancelVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmNewVoucher(Voucher _newVoucher = newVoucher)
    {
        newVoucher = _newVoucher;

        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersionEndWIP, cancelVoucher, cancelTransDate, newVoucher, super()] ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersionEndWIP:
                container base;
                [version, cancelVoucher, cancelTransDate, newVoucher, base] = _packedClass;
                ret = super(base);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    protected void rereadRecords()
    {
        cancelClosing.clear();
        cancelClosing.TransDate         = cancelTransDate;
        cancelClosing.Voucher           = cancelVoucher;
        cancelClosing.AdjustmentType    = InventAdjustmentType::Recalculation;
        cancelClosing.InventCostStatus  = InventCostStatus::Ended;
        // without insert()

        inventClosing.clear();
        inventClosing.TransDate         = cancelTransDate;
        inventClosing.Voucher           = newVoucher;
        inventClosing.AdjustmentType    = InventAdjustmentType::Recalculation;
        inventClosing.Ledger            = NoYes::Yes;
        inventClosing.AdjustmentSpec    = InventAdjustmentSpec::ItemNum;
        // without insert()
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public InventCostClosingCancel_EndWIP_RU construct()
    {
        return new InventCostClosingCancel_EndWIP_RU();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>