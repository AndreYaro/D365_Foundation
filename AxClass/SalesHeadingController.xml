<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesHeadingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesHeadingController</c> class is the controller class for the <c>SalesHeading</c> report.
/// </summary>
class SalesHeadingController extends SrsReportRunController implements BatchRetryable
{
    #define.ParameterCurrency('Currency')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code.
    /// </summary>
    /// <returns>
    /// The default currency code.
    /// </returns>
    /// <remarks>
    /// Gets the company currency code or the <c>isoCurrencyCode</c> value.
    /// </remarks>
    public CurrencyCode getCurrency()
    {
        CurrencyCode currencyCode = infolog.isoCurrencyCode();
        if (!currencyCode)
        {
            currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller.
    /// </summary>
    /// <param name="_args">
    /// The arguments with which the controller will be initialized.
    /// </param>
    protected void init(Args _args)
    {
        if (SalesOrderByCustomerFlight::instance().isEnabled())
        {
            this.parmReportName(ssrsReportStr(SalesOrderByCustomer, Report));
        }
        else
        {
            this.parmReportName(ssrsReportStr(SalesHeading, Report));
        }
        this.parmArgs(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before a dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. This method is called only during interactive
    /// scenario, before rendering the UI to the user.For batch scenario, we do not call this method
    /// because there is no user interaction, and contract values are already saved in batch.Do not
    /// initialize any instance variables in this code if they are used during the lifetime of the
    /// controller because these will fail in batch cases.
    /// </remarks>
    public void prePromptModifyContract()
    {
        this.parmReportContract().parmRdlContract().getParameter(#ParameterCurrency).setValueTyped(this.getCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates prior to running the report.
    /// </summary>
    /// <returns>
    /// A container that contains two items.
    /// </returns>
    /// <remarks>
    ///  Override this method to perform validation before running a report. A common use of this method is
    ///  to validate whether the time taken to run the report is acceptable.The following are common
    ///  scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Return a warning if the number of records processed is large enough to affect the user
    ///   experience if the report is printed to the screen.</description>
    ///   </item>
    ///   <item>
    ///   <description>Return an error if the number of records processed is large enough that the report
    ///   could timeout.</description>
    ///   </item>
    ///  </list>
    ///   The default behavior is to run the report.
    /// </remarks>
    protected container preRunValidate()
    {
        // More than 100,000 rows will take more than 10 minutes on a warm box with low volume
        // and not under load while 1,000 records will take about 10 seconds, so these are
        // used as the warning and error limits.
        #Define.ErrorLimit(100000)
        #Define.WarningLimit(1000)

        // Using the query from the contract, count up to the error limit + 1 since anything
        // over the error limit will return the same error
        container   validateResult;
        Query       query = this.getFirstQuery();
        int         rowCount = QueryRun::getQueryRowCount(query, #ErrorLimit + 1);

        if (rowCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }
        else if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SalesHeadingController construct()
    {
        return new SalesHeadingController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SalesHeadingController  controller = SalesHeadingController::construct();
        controller.init(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>