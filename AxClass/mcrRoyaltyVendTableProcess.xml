<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrRoyaltyVendTableProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableProcess</c> class processes and posts journals for vendor reabte records.
/// </summary>
public class mcrRoyaltyVendTableProcess
{
    MCRRoyaltyVendTable mcrRoyaltyVendTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doPostLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the royalty is processed.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_amount">
    /// The amount associated to the rebate.
    /// </param>
    /// <param name="_forAdjustment">
    /// A <c>Boolean</c> value indicating whether the royalty is an adjustment.
    /// </param>
    protected void doPostLedgerTrans(
        Voucher         _voucher,
        Amount          _amount,
        boolean         _forAdjustment = false)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        SalesLine           salesLine;
        List                dimensionSources;

        ledgerJournalTable                      = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalNameProcess());
        salesLine                               = SalesLine::findRecId(mcrRoyaltyVendTable.SalesLineRefRecId);
        dimensionSources                        = new List(Types::Class);
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(mcrRoyaltyVendTable.getDefaultDimension()));

        ttsbegin;
        ledgerJournalTable.insert();

        ledgerJournalTrans.initValue();
        ledgerJournalTrans                      = this.initLedgerJournalTrans(ledgerJournalTrans);
        ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Voucher              = _voucher;

        ledgerJournalTrans.LedgerDimension      = LedgerDimensionDefaultingEngine::createLedgerDimension(mcrRoyaltyVendTable.LedgerDimension, dimensionSources);

        ledgerJournalTrans.TaxGroup             = MainAccountLegalEntity::findByMainAccountLegalEntity(
                                                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension),
                                                    CompanyInfo::current()).TaxGroup;

        ledgerJournalTrans.Txt                  = "@MCR4410134";

        ledgerJournalTrans.AmountCurDebit       = 0;
        if (_amount > 0)
        {
            ledgerJournalTrans.AmountCurCredit  = _amount;
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit   = -_amount;
        }

        ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(mcrRoyaltyVendTable.OffsetLedgerDimension, dimensionSources);

        ledgerJournalTrans.DocumentDate         = mcrRoyaltyVendTable.ProcessDate;
        ledgerJournalTrans.CurrencyCode         = mcrRoyaltyVendTable.CurrencyCode;
        ledgerJournalTrans.TransDate            = mcrRoyaltyVendTable.ProcessDate;
        ledgerJournalTrans.Invoice              = mcrRoyaltyVendTable.SalesInvoiceId;

        this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTrans);

        ledgerJournalTrans.insert();

        ttscommit;

        MCRRoyaltyVendTrans::insertFromMCRRoyaltyVendTable(mcrRoyaltyVendTable,
            MCRRoyaltyTransactionType::RoyaltyAccrual,
            _amount,
            ledgerJournalTrans.JournalNum);

        LedgerJournalPost::postJournal(ledgerJournalTable, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>LedgerJournalTrans</c> table record used for the royalty process posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The ledger journal transactions.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for royalty process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameProcess()
    {
        return LedgerJournalName::find(VendParameters::find().mcrRoyaltyJournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    /// The jounal for which to retrieve the number sequence.
    /// </param>
    /// <returns>
    /// The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher(LedgerJournalName _ledgerJournalName)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>MCRRoyaltyVendTableProcess</c> class.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The <c>MCRRoyaltyVendTable</c> record to use to instantiate the class.
    /// </param>
    public void new (MCRRoyaltyVendTable _mcrRoyaltyVendTable)
    {
        this.parmMCRRoyaltyVendTable(_mcrRoyaltyVendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRRoyaltyVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>MCRRoyaltyVendTable</c> table record on which the royalty process is performing.
    /// </summary>
    /// <param name="_mcrRoyaltyVendTable">
    /// The <c>MCRRoyaltyVendTable</c> table record to be processed.
    /// </param>
    /// <returns>
    /// The rebate table record to be processed.
    /// </returns>
    protected MCRRoyaltyVendTable parmMCRRoyaltyVendTable(Common _mcrRoyaltyVendTable = mcrRoyaltyVendTable)
    {
        if (!prmisDefault(_mcrRoyaltyVendTable))
        {
            mcrRoyaltyVendTable = _mcrRoyaltyVendTable;
        }

        return mcrRoyaltyVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger journal number and posts the journal when a royalty is processed.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A <c>boolean</c> value that determines if the royalty is an adjustment.
    /// </param>
    /// <returns>
    /// The Voucher number for the ledger journal.
    /// </returns>
    private Voucher postLedger(boolean _forAdjustment)
    {
        Voucher                     voucher;
        NumberSeq                   numberSeq;

        if (this.ledgerJournalNameProcess())
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(
                                        this.ledgerJournalNameVoucher(this.ledgerJournalNameProcess()),
                                        NumberSeqScopeFactory::createDefaultScope(),
                                        false);

            voucher = numberSeq.voucher();

            this.postLedgerTrans(voucher, _forAdjustment);

            return voucher;
        }
        else
        {
            throw error("@MCR4410132");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the royalty is processed,
    /// if the rebate amount is not zero.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_forAdjustment">
    /// A <c>boolean</c> value that determines if the royalty is an adjustment.
    /// </param>
    protected void postLedgerTrans(Voucher      _voucher,
                                    boolean     _forAdjustment = false)
    {
        Amount amount;

        if (_voucher)
        {
            amount = mcrRoyaltyVendTable.ledgerPostingAmount();

            if (amount != 0)
            {
                this.doPostLedgerTrans(_voucher, amount, _forAdjustment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// performs the royalty deletion process.
    /// </summary>
    public void runDeleted()
    {
        MCRRoyaltyVendTablePaymentPost  mcrRoyaltyPaymentPost;

        if (mcrRoyaltyVendTable.RoyaltyBalance  != 0)
        {
            // Reverse the ledger when there is a balance left
            mcrRoyaltyPaymentPost = new MCRRoyaltyVendTablePaymentPost();
            mcrRoyaltyPaymentPost.postAccrualReversal(mcrRoyaltyVendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty payment process.
    /// </summary>
    public void runPayment()
    {
        mcrRoyaltyVendTable.setRoyaltyBalance();
        mcrRoyaltyVendTable.setCorrectedRoyaltyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty processing.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the royalty is an adjustment.
    /// </param>
    public void runProcess(boolean _forAdjustment  = false)
    {
        mcrRoyaltyVendTable.ProcessDate          = this.getProcessDate();

        mcrRoyaltyVendTable.RoyaltyJournalRefNum = this.postLedger(_forAdjustment);

        mcrRoyaltyVendTable.setNextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets the <c>MCRRoyaltyVendTable</c> table's process date.
    /// </summary>
    /// <returns>The process date.</returns>
    protected PdsProcessDate getProcessDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());    
	}

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets exchange rate information in the <c>LedgerJournalTrans</c>
    /// based on the currency code and transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the values on.
    /// </param>
    protected void setLedgerJournalTransCurrencyExchRate(LedgerJournalTrans  _ledgerJournalTrans)
    {
        _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);

        _ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>