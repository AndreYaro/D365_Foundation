<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngineCorrections</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngineCorrections</c> class extends the functionality of <c>EUSalesListReportingEngine</c> class 
/// to support requirements specific to corrections.
/// </summary>
class EUSalesListReportingEngineCorrections extends EUSalesListReportingEngine implements BatchRetryable
{
    Correct         correction;

    DialogField     dialogCorrection;

    RefRecId        reportedEUSalesListReportingGroupRecId;

    AmountMST       totalCancelledAmountItems;
    AmountMST       totalCancelledAmountServices;
    AmountMST       totalCancelledAmountTriangular;

    boolean             correctionMode;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        correction
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader  euSalesListReportingHeader;

        euSalesListReportingHeader = super();
        euSalesListReportingHeader.Correction               = correction;
        euSalesListReportingHeader.update();

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToTotals</Name>
				<Source><![CDATA[
    protected void addLineToTotals(EUSalesListReportingLine _euSalesListReportingLine)
    {
        if (_euSalesListReportingLine.Cancelled)
        {
            // Add to total amounts for cancelled lines.
            totalCancelledAmountItems           += _euSalesListReportingLine.ItemAmountMST;
            totalCancelledAmountTriangular      += _euSalesListReportingLine.TriangularAmountMST;
            totalCancelledAmountServices        += _euSalesListReportingLine.ServiceAmountMST;
        }
        else
        {
            super(_euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCorrectionLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies correction logic to the <c>EUSalesListReportingLine</c> buffer. This involves looking up the previously reported values and determining if the
    /// new line is a change in values, repeat of values or a total cancellation.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The buffer for which correction logic should be applied.
    /// </param>
    /// <returns>
    /// An <c>EUSalesListReportingLine</c> buffer for the cancellation values in case a change or cancellation is taking place; otherwise, null.
    /// </returns>
    protected EUSalesListReportingLine applyCorrectionLogic(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesListReportingLine    previouslyReportedLine;

        select forupdate firstonly previouslyReportedLine
            where previouslyReportedLine.euSalesListTaxCode == _euSalesListReportingLine.euSalesListTaxCode
                && previouslyReportedLine.StrippedVATNum == _euSalesListReportingLine.StrippedVATNum
                && previouslyReportedLine.Direction == _euSalesListReportingLine.Direction
                && previouslyReportedLine.euSalesListReportingGroup == reportedEUSalesListReportingGroupRecId;

        if (previouslyReportedLine.RecId)
        {
            // Mark as cancelled and include the line in the current report.
            previouslyReportedLine.Cancelled = NoYes::Yes;
            previouslyReportedLine.euSalesListReportingGroup = _euSalesListReportingLine.euSalesListReportingGroup;

            this.applyCorrectionLogicForAmount(previouslyReportedLine, _euSalesListReportingLine, fieldNum(EUSalesListReportingLine, ItemAmountMST));
            this.applyCorrectionLogicForAmount(previouslyReportedLine, _euSalesListReportingLine, fieldNum(EUSalesListReportingLine, ServiceAmountMST));
            this.applyCorrectionLogicForAmount(previouslyReportedLine, _euSalesListReportingLine, fieldNum(EUSalesListReportingLine, TriangularAmountMST));
        }

        return previouslyReportedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCorrectionLogicForAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the correction logic for a single amount type.
    /// </summary>
    /// <param name="_previouslyReportedLine">
    /// The buffer for the previously reported values.
    /// </param>
    /// <param name="_euSalesListReportingLine">
    /// The buffer for the current values.
    /// </param>
    /// <param name="_amountFieldId">
    /// The <c>FieldId</c> of the field which contains the amount.
    /// </param>
    protected void applyCorrectionLogicForAmount(
        EUSalesListReportingLine    _previouslyReportedLine,
        EUSalesListReportingLine    _euSalesListReportingLine,
        FieldId                     _amountFieldId)
    {
        if (_previouslyReportedLine.(_amountFieldId) || _euSalesListReportingLine.(_amountFieldId))
        {
            // There are 4 possible scenarios
            if (_previouslyReportedLine.(_amountFieldId) == _euSalesListReportingLine.(_amountFieldId))
            {
                // 1) A repeat of original values. In this case we should not report anything, so setting amounts to 0.
                _euSalesListReportingLine.(_amountFieldId) = 0.00;
                _previouslyReportedLine.(_amountFieldId) = 0.00;
            }
            else if (_previouslyReportedLine.(_amountFieldId) && !_euSalesListReportingLine.(_amountFieldId))
            {
                // 2) Full cancellation of previous report. Report previously reported as cancellation. Don't report new line.
                _euSalesListReportingLine.(_amountFieldId) = 0.00;
            }
            // 3) Completely new line. Report new line as normal.
            // 4) Change in amount. Report previously reported as cancellation and report new line as normal.
            // In both of these last scenarios, everything is already correct in the buffers, and no adjustments are needed.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    protected RefRecId calculate()
    {
        RefRecId ret;

        if (correction)
        {
            reportedEUSalesListReportingGroupRecId = this.calculateAlreadyReported();
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAlreadyReported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a separate instance of the <c>EUSalseListReportingEngine</c> class and performs a calculation of previously reported transactions.
    /// </summary>
    /// <returns>
    /// A <c>RecId</c> for the <c>EUSalesListReportingGroup</c> record which contains the calculation.
    /// </returns>
    protected RefRecId calculateAlreadyReported()
    {
        EUSalesListReportingEngineCorrections   engineReported = ClassFactory::makeObjectOnServer(classIdGet(this));
        RefRecId                                reportedEUSalesListReportingHeaderRecId;
        EUSalesListReportingGroup               reportedEUSalesListReportingGroup;

        // Temporarily set corrected so it can be serialized to the new instance.
        correction = false;

        engineReported.unpack(this.pack());
        engineReported.parmCorrectionMode(true);
        engineReported.prepareQuery();

        // Fill a background table with data already reported.
        reportedEUSalesListReportingHeaderRecId = engineReported.calculate();

        // Restore state.
        correction = true;

        // Cache the group RecId for the already reported lines.
        select firstonly RecId from reportedEUSalesListReportingGroup
            where reportedEUSalesListReportingGroup.euSalesListReportingHeader == reportedEUSalesListReportingHeaderRecId;

        return reportedEUSalesListReportingGroup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGrandTotals</Name>
				<Source><![CDATA[
    protected void calculateGrandTotals(EUSalesListReportingHeader _euSalesListReportingHeader)
    {
        _euSalesListReportingHeader.TotalCancelledAmountItems             = totalCancelledAmountItems;
        _euSalesListReportingHeader.TotalCancelledAmountServices          = totalCancelledAmountServices;
        _euSalesListReportingHeader.TotalCancelledAmountTriangular        = totalCancelledAmountTriangular;

        super(_euSalesListReportingHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEUSalesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation of a single <c>EUSalesList</c> buffer.
    /// </summary>
    /// <param name="_euSalesList">
    /// The <c>EUSalesList</c> buffer to check.
    /// </param>
    /// <remarks>
    /// Any validation errors occuring at this step is purely informational. They do not prevent the reporting from continuing with the record.
    /// In correction mode, we are looking at already reported lines in the background. In this case we do not want to show confusing warning messages,
    /// so the super() call is skipped.
    /// </remarks>
    protected void checkEUSalesList(EUSalesList _euSalesList)
    {
        if (!correctionMode)
        {
            super(_euSalesList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogCorrection = dialog.addFieldValue(extendedTypeStr(Correct), correction, "@SYS13069", "@SYS334906");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            correction          = dialogCorrection.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrection</Name>
				<Source><![CDATA[
    public boolean parmCorrection(Correct _correction = correction)
    {
        correction = _correction;

        return correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionMode</Name>
				<Source><![CDATA[
    public boolean parmCorrectionMode(boolean _correctionMode = correctionMode)
    {
        correctionMode = _correctionMode;

        return correctionMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    protected void prepareQuery()
    {
        QueryBuildRange  queryBuildRange;

        super();

        queryBuildRange = SysQuery::findOrCreateRange(queryRun.query().dataSourceTable(tableNum(EUSalesList)), fieldNum(EUSalesList, Status));
        if (correctionMode)
        {
            // CorrectionMode means that we are being called indirectly to calculate amounts for already reported transactions.
            queryBuildRange.value(queryValue(ListStatus::Reported));
        }
        else if (correction)
        {
            // When correction is selected, it means that we should consider both reported and included transactions as part of the report.
            queryBuildRange.value(queryRange(ListStatus::Include, ListStatus::Reported));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>EUSalesListReportingLineAmountItems</c> table buffers with updated amounts.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    ///    The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <remarks>
    ///    This method is overwritten to save the number of unique invoices covered by the reported line.
    /// </remarks>
    protected void saveLastLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesListReportingLine    previouslyReportedLine;

        if (_euSalesListReportingLine && correction)
        {
            previouslyReportedLine = this.applyCorrectionLogic(_euSalesListReportingLine);
            if (previouslyReportedLine)
            {
                lineCount++;
                super(previouslyReportedLine);
            }
        }

        super(_euSalesListReportingLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>