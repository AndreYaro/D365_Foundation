<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationValidateBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationValidateBase</c> class contains the base validation logic for shipment consolidation.
/// </summary>
public abstract class WHSShipConsolidationValidateBase
{
    protected WHSShipmentTable						baseShipment;
    protected container								shipments;
    protected WHSShipConsolidationValidationMode	shipConsolidationValidationMode;
    protected WHSShipConsolidationPolicyData		shipConsolidationPolicyData;
    protected WHSTmpShipmentId						tmpShipment;
    protected WHSLoadTable							loadTableBase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        shipConsolidationValidationMode = WHSShipConsolidationValidationMode::Default;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseShipment</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmBaseShipment(WHSShipmentTable _baseShipment = baseShipment)
    {
        baseShipment = _baseShipment;

        return baseShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipments</Name>
				<Source><![CDATA[
    public container parmShipments(container _shipments = shipments)
    {
        shipments = _shipments;

        return shipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipConsolidationValidationMode</Name>
				<Source><![CDATA[
    protected boolean parmShipConsolidationValidationMode(WHSShipConsolidationValidationMode _shipConsolidationValidationMode = shipConsolidationValidationMode)
    {
        shipConsolidationValidationMode = _shipConsolidationValidationMode;

        return shipConsolidationValidationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs validation process.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if consolidation is cancelled.
    /// </exception>
    public void run()
    {
        boolean ok = this.validateShipments();

        if (!ok)
        {
            throw error("@WAX2186");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipments</Name>
				<Source><![CDATA[
	/// <summary>
	/// Runs validation process.
	/// </summary>
    /// <returns>
    /// False if a validation should be stopped and an exception should be thrown, True otherwise.
    /// </returns>
    protected boolean validateShipments()
    {
        boolean      ok = true;
        int			 shipmentsLen = conLen(shipments);

        loadTableBase = WHSLoadTable::find(baseShipment.LoadId);

        WHSShipConsolidationPolicy shipConsolidationPolicy = WHSShipConsolidationPolicy::findByRecId(baseShipment.ShipConsolidationPolicy);
        shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);
        tmpShipment                 = null;

        RecordInsertList tmpShipmentInsertList = new RecordInsertList(tmpShipment.TableId, true, true, true, true, true, tmpShipment);

        ttsbegin;

        for (int i = 1; i <= shipmentsLen; i++)
        {
            tmpShipment.clear();
            tmpShipment.initValue();
            tmpShipment.ShipmentId = conPeek(shipments, i);

            tmpShipmentInsertList.add(tmpShipment);
        }

        tmpShipmentInsertList.insertDatabase();

        ttscommit;

        if (loadTableBase.LoadTemplateId)
        {
            Weight weightDiff = WHSShipConsolidationValidate::getWeightDiff(baseShipment, shipments);

            if (weightDiff < 0)
            {
                ok = this.addValidationError(NoYes::No, '', literalStr("@WAX2184"), strFmt('%1', abs(weightDiff)));
            }
        }

        if (ok)
        {
            container promptShipments = WHSShipConsolidationValidate::getShipmentsToValidate(shipments, baseShipment);
            int		  promptShipmentsLen = conLen(promptShipments);

            for (int i = 1; i <= promptShipmentsLen; i++)
            {
                ok = this.addValidationError(NoYes::No, conPeek(promptShipments, i), literalStr("@WAX2198"), conPeek(promptShipments, i));

                if (!ok)
                {
                    break;
                }
            }
        }

        if (ok)
        {
            WHSWarehouseReleaseQueryBuilder warehouseReleaseQueryBuilder = WHSWarehouseReleaseQueryBuilder::construct();

            if (!shipmentsLen)
            {
                ok = this.addValidationError(NoYes::Yes, '', literalStr("@WAX:Error_ProposedShipmentHasOnlyOneShipment"));
            }

			if (ok)
            {
                WHSShipmentTable shipmentTable;
                boolean			 hasWork = baseShipment.hasWork();

                while select shipmentTable
                exists join tmpShipment
                    where tmpShipment.ShipmentId == shipmentTable.ShipmentId
                {
                    ok = this.validateShipment(shipmentTable, hasWork);

                    if (!ok)
                    {
                        break;
                    }
                }
            }

            if (ok && !shipConsolidationPolicyData.shipConsolidationPolicyFields().empty() && shipmentsLen > 0)
            {
                Query          query = warehouseReleaseQueryBuilder.buildBaseShipmentValidateQueryForPolicy(shipConsolidationPolicyData, baseShipment);
                QueryRun       queryRun = new QueryRun(query);

                if (queryRun.next())
                {
                    shipConsolidationPolicyData.calcShipConsolidationFieldValues(baseShipment, queryRun);

                    Set                                    shipmentsWithoutDifferences = new Set(Types::String);
                    WHSShipConsolidationPolicyTypeProvider shipConsolidationPolicyTypeProvider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(shipConsolidationPolicyData.parmShipConsolidationPolicy().ShipConsolidationPolicyType);

                    query = warehouseReleaseQueryBuilder.buildShipmentValidateQueryForPolicyAndTmpShipment(shipConsolidationPolicyData, baseShipment);
                
                    QueryBuildDataSource shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));
                    shipmentTableDS.fields().clearFieldList();
                    shipmentTableDS.addSelectionField(fieldNum(WHSShipmentTable, ShipmentId));

                    queryRun = new QueryRun(query);
                    queryRun.setCursor(tmpShipment);

                    while (queryRun.next())
                    {
                        WHSShipmentTable shipmentTable = queryRun.get(tableNum(WHSShipmentTable));

                        shipmentsWithoutDifferences.add(shipmentTable.ShipmentId);
                    }

                    for (int i = 1; i <= shipmentsLen; i++)
                    {
                        WHSShipConsolidationPolicyData childShipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicyData.parmShipConsolidationPolicy());

                        if (!shipmentsWithoutDifferences.in(conPeek(shipments, i)))
                        {
                            WHSShipmentTable childShipment = WHSShipmentTable::find(conPeek(shipments, i));

                            query = warehouseReleaseQueryBuilder.buildBaseShipmentValidateQueryForPolicy(childShipConsolidationPolicyData, childShipment);
                            queryRun = new QueryRun(query);

                            if (!queryRun.next())
                            {
                                throw error("@SYS6144");
                            }

                            childShipConsolidationPolicyData.calcShipConsolidationFieldValues(childShipment, queryRun);

                            ListEnumerator policyFieldEnumerator = shipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();
                            ListEnumerator childPolicyFieldEnumerator = childShipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();
                            str            hardErrorFields;
                            str            softErrorFields;

                            while (policyFieldEnumerator.moveNext())
                            {
                                childPolicyFieldEnumerator.moveNext();

                                WHSShipConsolidationPolicyFieldData shipConsolidationPolicyFieldData = policyFieldEnumerator.current();
                                WHSShipConsolidationPolicyFieldData childShipConsolidationPolicyFieldData = childPolicyFieldEnumerator.current();

                                if (shipConsolidationPolicyFieldData.getFieldValue() != childShipConsolidationPolicyFieldData.getFieldValue())
                                {
                                    WHSShipConsolidationPolicyField     shipConsolidationPolicyField = shipConsolidationPolicyFieldData.getShipConsolidationPolicyField();
                                    TableId                             tableId = tableName2Id(shipConsolidationPolicyField.SourceTableName);
                                    FieldId                             fieldId = fieldName2Id(tableId, shipConsolidationPolicyField.SourceFieldName);

                                    if (shipConsolidationPolicyTypeProvider.mandatoryShipConsolidationPolicyFields(shipConsolidationPolicy).in([tableId, fieldId]))
                                    {
                                        hardErrorFields += (hardErrorFields ? ', ' : '') + fieldId2PName(tableId, fieldId);
                                    }
                                    else
                                    {
                                        softErrorFields += (softErrorFields ? ', ' : '') + fieldId2PName(tableId, fieldId);
                                    }
                                }
                            }

                            if (hardErrorFields || softErrorFields)
                            {
                                if (hardErrorFields)
                                {
                                    ok = this.addValidationError(NoYes::Yes, conPeek(shipments, i), literalStr("@WAX:Error_ConsolidationOfShipmentsWithDifferentValuesInTheMandatoryFieldsIsProhibited"), hardErrorFields);
                                }

                                if (softErrorFields && ok)
                                {
                                    ok = this.addValidationError(NoYes::No, conPeek(shipments, i), literalStr("@WAX:Error_YouAreTryingToConsolidateShipmentsWithDifferentValuesInTheNonMandatoryFields"), softErrorFields);
                                }
                            }
                            else // error description is empty
                            {
                                ok = this.addValidationError(NoYes::No, conPeek(shipments, i), literalStr("@WAX:Error_ShipmentHasDifferentValuesInPolicyKeyFieldsThanTheBaseShipment"), conPeek(shipments, i));
                            }

                            if (!ok)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a shipment.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment to validate.</param>
    /// <returns>
    /// False if a validation should be stopped and an exception should be thrown; otherwise true.
    /// </returns>
    /// <remarks>
    /// Be aware that the <c>addValidationError</c> method can display a dialog.
    /// </remarks>
    protected boolean validateShipment(WHSShipmentTable _shipmentTable, boolean _baseHasWork)
    {
        boolean ok = true;

        if (_shipmentTable.ShipConsolidationPolicy != baseShipment.ShipConsolidationPolicy)
        {
            ok = this.addValidationError(
                NoYes::No,
                _shipmentTable.ShipmentId,
                literalStr("@WAX:Error_TheConsolidationPolicyOfTheShipmentDiffersFromThePolicyOfTheBaseShipment"),
                WHSShipConsolidationPolicy::findByRecId(_shipmentTable.ShipConsolidationPolicy).ShipConsolidationPolicyName,
                _shipmentTable.ShipmentId,
                WHSShipConsolidationPolicy::findByRecId(baseShipment.ShipConsolidationPolicy).ShipConsolidationPolicyName);
        }

        if (!_baseHasWork && _shipmentTable.hasWork())
        {
            ok = this.addValidationError(
                NoYes::Yes,
                _shipmentTable.ShipmentId,
                literalStr("@WAX:Error_TheBaseShipmentWithoutLoadShipmentWithLoadCantBeConsolidated"),
                _shipmentTable.ShipmentId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a shipment consolidation error to a temporary storage or displays it to a user.
    /// </summary>
    /// <param name="_errorHardStop">
    /// Determines whether the error is a hard stop error.
    /// </param>
    /// <param name="_shipmentId">
    /// Shipment Id.
    /// </param>
    /// <param name="_labelId">
    /// Label of the error
    /// </param>
    /// <param name="_errorParm1">
    /// First parameter of the error.
    /// </param>
    /// <param name="_errorParm2">
    /// Second parameter of the error.
    /// </param>
    /// <param name="_errorParm3">
    /// Third parameter of the error.
    /// </param>
    /// <param name="_errorParm4">
    /// Fourth parameter of the error.
    /// </param>
    /// <returns>
    /// False if a validation should be stopped and an exception should be thrown, True otherwise.
    /// </returns>
    abstract protected boolean addValidationError(
        NoYes           _errorHardStop,
        WHSShipmentId   _shipmentId,
        LabelId         _labelId,
        str             _errorParm1 = '',
        str             _errorParm2 = '',
        str             _errorParm3 = '',
        str             _errorParm4 = '')
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>