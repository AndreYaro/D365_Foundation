<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoLineTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoLineTableHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField_OtherFieldsDelegate</Name>
				<Source><![CDATA[
    delegate void modifiedField_OtherFieldsDelegate(FieldId _fieldId,
                                                    VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimEventHandler_Markup</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(VendInvoiceInfoLine), tablemethodstr(VendInvoiceInfoLine, ledgerDim))]
    /// <summary>
    /// Extends the ledger dimension behavior to provide markup ledger dimension.
    /// </summary>
    /// <param name="_args">
    /// Standard event handler arguments.
    /// </param>
    public static void ledgerDimEventHandler_Markup(XppPrePostArgs _args)
    {
        #isoCountryRegionCodes
        VendInvoiceInfoLine line;
        VendInvoiceInfoLine_W line_W;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            line = _args.getThis();
            line_W = line.vendInvoiceInfoLine_W();
            if (line_W.LedgerDimension_RU)
            {
                _args.setReturnValue(line_W.LedgerDimension_RU);
            }
            else if (line.markupLedgerAccount())
            {
                _args.setReturnValue(line.markupLedgerAccount());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimEventHandlerPayroll</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(VendInvoiceInfoLine), tableMethodStr(VendInvoiceInfoLine, ledgerDim))]
    /// <summary>
    /// Event handler extends ledgerDim behavior to default correct ledger dimension for
    /// invoice lines created from pay statements.
    /// </summary>
    /// <param name="_args">
    /// Standard event handler args
    /// </param>
    public static void ledgerDimEventHandlerPayroll(XppPrePostArgs _args)
    {
        VendInvoiceInfoLine line = _args.getThis();

        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
            && line.PayrollLedgerDimension != 0)
        {
            _args.setReturnValue(line.PayrollLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_OtherFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles when a field is modified and is not handled in the <c>SYS</c> layer.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that is modified.
    /// </param>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record that is modified.
    /// </param>
    public static void modifiedField_OtherFields(FieldId _fieldId, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        VendInvoiceInfoLineTableHandler infoLineTableHandler;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            infoLineTableHandler = new VendInvoiceInfoLineTableHandler();
            infoLineTableHandler.modifiedField_OtherFieldsDelegate(_fieldId, _vendInvoiceInfoLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_OtherFields_PSA</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(VendInvoiceInfoLineTableHandler), delegatestr(VendInvoiceInfoLineTableHandler, modifiedField_OtherFieldsDelegate))]
    /// <param name="_fieldId"></param>
    /// <param name="_vendInvoiceInfoLine"></param>
    /// <summary>
    /// Called when the other fields are modified and is not handled within the SYS layer.
    /// Include the code here to handle the changes in the FPK layer. This method is attached to the modifiedField_OtherFields
    /// method as a post event handler.
    /// </summary>
    /// <param name="_fieldId">field id that is modified.</param>
    /// <param name="_vendInvoiceInfoLine">the VendInvoiceInfoLine table record that is modified.</param>
    public static void modifiedField_OtherFields_PSA(FieldId _fieldId, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        boolean deleteTaxUncommitted = false;

        if (!Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceInfoLine, psaRetainagePercent):
                if (_vendInvoiceInfoLine.LineAmount)
                {
                    _vendInvoiceInfoLine.psaRetainageAmount = CurrencyExchangeHelper::amount(_vendInvoiceInfoLine.psaRetainagePercent * _vendInvoiceInfoLine.LineAmount / 100, _vendInvoiceInfoLine.CurrencyCode);
                }
                else
                {
                    _vendInvoiceInfoLine.psaRetainageAmount = 0;
                }

                deleteTaxUncommitted = true;
                break;

            case fieldNum(VendInvoiceInfoLine, psaReleasePercent):
                if (_vendInvoiceInfoLine.psaRetainageBalance)
                {
                    _vendInvoiceInfoLine.psaReleaseAmount = CurrencyExchangeHelper::amount(_vendInvoiceInfoLine.psaReleasePercent * _vendInvoiceInfoLine.psaRetainageBalance / 100, _vendInvoiceInfoLine.CurrencyCode);
                }
                else
                {
                    _vendInvoiceInfoLine.psaReleaseAmount = 0;
                }

                deleteTaxUncommitted = true;
                break;

            case fieldNum(VendInvoiceInfoLine, psaRetainageAmount):
                if (_vendInvoiceInfoLine.LineAmount)
                {
                    _vendInvoiceInfoLine.psaRetainagePercent = (_vendInvoiceInfoLine.psaRetainageAmount / _vendInvoiceInfoLine.LineAmount) * 100;
                }
                else
                {
                    _vendInvoiceInfoLine.psaRetainagePercent = 0;
                }

                deleteTaxUncommitted = true;
                break;

            case fieldNum(VendInvoiceInfoLine, psaReleaseAmount):
                if (_vendInvoiceInfoLine.psaRetainageBalance)
                {
                    _vendInvoiceInfoLine.psaReleasePercent = (_vendInvoiceInfoLine.psaReleaseAmount / _vendInvoiceInfoLine.psaRetainageBalance)*100;
                }
                else
                {
                    _vendInvoiceInfoLine.psaReleasePercent = 0;
                }

                deleteTaxUncommitted = true;
                break;

            case fieldNum(VendInvoiceInfoLine, PSAIsFinal):
                if (_vendInvoiceInfoLine.psaRetainageBalance && _vendInvoiceInfoLine.PSAIsFinal == NoYes::Yes)
                {
                    _vendInvoiceInfoLine.psaReleasePercent = 100;
                    _vendInvoiceInfoLine.PSAReleaseAmount = _vendInvoiceInfoLine.psaRetainageBalance;
                }
                else
                {
                    _vendInvoiceInfoLine.psaReleasePercent = 0;
                    _vendInvoiceInfoLine.PSAReleaseAmount = 0;
                }

                deleteTaxUncommitted = true;
                break;

            default:
                break;
        }

        //Delete the Tax-uncommitted transaction when any one of the PSA field is modified.
        if (deleteTaxUncommitted)
        {
            ttsbegin;
            _vendInvoiceInfoLine.update();
            VendInvoiceInfoLineTableHandler::updateProjectRecordsForVendorPaymentRetention(_vendInvoiceInfoLine);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectRecordsForVendorPaymentRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ProjectAccountingDistribution</c> and <c>ProjFundingLimitTracking</c> amount for vendor Payment retention scenario.
    /// </summary>
    /// <param name = "_vendInvoiceInfoLine"><c>VendInvoiceInfoLine</c> table buffer.</param>
    private static void updateProjectRecordsForVendorPaymentRetention(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        if (_vendInvoiceInfoLine.purchLine().PSARetainScheduleId)
        {
            //Update ProjectAccountingDistribution and ProjFundingLimitTracking amount for vendor Payment retention scenario.
            ProjectAccountingDistribution projAccountingDistribution = ProjectAccountingDistribution::findByVendInvoiceInfoLine(_vendInvoiceInfoLine.RecId, true);
            if (projAccountingDistribution)
            {
                SourceDocumentLine vendSourceDocumentLine;
                select firstonly vendSourceDocumentLine
                    where vendSourceDocumentLine.RecId == _vendInvoiceInfoLine.SourceDocumentLine;

                if (vendSourceDocumentLine)
                {
                    SourceDocumentLineItem vendSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(vendSourceDocumentLine);
                    SourceDocumentLineItemList sourceDocumentLineItemList = SourceDocumentLineItemList::construct();
                    sourceDocumentLineItemList.addEnd(vendSourceDocumentLineItem);

                    AccDistProcessorProjectExtension accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();
                    accDistProcessorProjectExtension.processing(sourceDocumentLineItemList);
                    accDistProcessorProjectExtension.processed(sourceDocumentLineItemList);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_PurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles when a field is modified and is not handled in the <c>SYS</c> layer.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record that is modified.
    /// </param>
    public static void modifiedField_PurchPrice(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            VendInvoiceInfoLineTableHandler::modifiedField_PurchPrice_PSA(_vendInvoiceInfoLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_PurchPrice_PSA</Name>
				<Source><![CDATA[
    public static void modifiedField_PurchPrice_PSA(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select Ordering from vendInvoiceInfoTable where
            vendInvoiceInfoTable.ParmId == _vendInvoiceInfoLine.ParmId &&
            vendInvoiceInfoTable.TableRefId == _vendInvoiceInfoLine.TableRefId;

            _vendInvoiceInfoLine.psaSetRetainage(_vendInvoiceInfoLine.LineAmount, vendInvoiceInfoTable.Ordering, _vendInvoiceInfoLine.purchLine());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow_PSA</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(VendInvoiceInfoLine), tableMethodStr(VendInvoiceInfoLine, modifiedReceiveNow))]
    public static void modifiedReceiveNow_PSA(XppPrePostArgs _args)
    {
        VendInvoiceInfoLine thisVendInvoiceInfoLine = _args.getThis();
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select Ordering from vendInvoiceInfoTable where
                vendInvoiceInfoTable.ParmId == thisVendInvoiceInfoLine.ParmId &&
                vendInvoiceInfoTable.TableRefId == thisVendInvoiceInfoLine.TableRefId;

            thisVendInvoiceInfoLine.psaSetRetainage (
                thisVendInvoiceInfoLine.LineAmount,
                vendInvoiceInfoTable.Ordering,
                thisVendInvoiceInfoLine.purchLine());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField_PSA</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(VendInvoiceInfoLine), tableMethodStr(VendInvoiceInfoLine, validateField))]
    /// <summary>
    /// This method is attached as a post event handler for the ValidateField method for the VendInvoiceInfoLine table to handle
    /// changes in the FPK layer.
    /// </summary>
    /// <param name="_args">argument representing pre/post event handler parameters and return value.</param>
    public static void validateField_PSA(XppPrePostArgs _args)
    {
        FieldId field = _args.getArg('field');
        VendInvoiceInfoLine thisVendInvoiceInfoLine = _args.getThis();

        boolean ret = _args.getReturnValue();

        if (Global::isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            switch (field)
            {
                case fieldNum(VendInvoiceInfoLine, psaRetainagePercent):

                    if (thisVendInvoiceInfoLine.psaRetainagePercent >100)
                    {
                        ret = ret && checkFailed(strFmt("@PSA2898", fieldPName(VendInvoiceInfoLine, psaRetainagePercent)));
                    }

                    if (ret && thisVendInvoiceInfoLine.psaRetainagePercent && !thisVendInvoiceInfoLine.LineAmount)
                    {
                        ret = checkFailed("@PSA11585");
                    }

                    break;

                case fieldNum(VendInvoiceInfoLine, psaReleasePercent):

                    if (thisVendInvoiceInfoLine.psaReleasePercent >100)
                    {
                        ret = ret && checkFailed(strFmt("@PSA2898", fieldPName(VendInvoiceInfoLine, psaReleasePercent)));
                    }

                    if (ret && thisVendInvoiceInfoLine.psaReleasePercent && !thisVendInvoiceInfoLine.psaRetainageBalance)
                    {
                        ret = checkFailed("@PSA11586");
                    }

                    break;

                case fieldNum(VendInvoiceInfoLine, psaRetainageAmount):

                    AmountCur psaRetainageAmount = thisVendInvoiceInfoLine.psaRetainageAmount;
                    AmountCur lineAmount = thisVendInvoiceInfoLine.purchLine().LineAmount;
                    AmountCur invoicedAmount = thisVendInvoiceInfoLine.purchLine().psaInvoicedAmount();
                    AmountCur netAmount = lineAmount - invoicedAmount;

                    if (psaRetainageAmount
                        && ((lineAmount > 0 && psaRetainageAmount > netAmount)
                        || (lineAmount < 0 && psaRetainageAmount < netAmount)))
                    {
                        ret = checkFailed("@PSA11589");
                    }

                    AmountCur psaLineAmount = thisVendInvoiceInfoLine.LineAmount;

                    if (ret
                        && (psaRetainageAmount
                        && ((psaLineAmount > 0 && psaRetainageAmount > psaLineAmount)
                        || (psaLineAmount < 0 && psaRetainageAmount < psaLineAmount))))
                    {
                        ret = checkFailed("@PSA11587");
                    }

                    break;

                case fieldNum(VendInvoiceInfoLine, psaReleaseAmount):

                    if (thisVendInvoiceInfoLine.psaReleaseAmount > thisVendInvoiceInfoLine.psaRetainageBalance)
                    {
                        ret = checkFailed("@PSA11588");
                    }

                    break;

                default:

                    break;
            }
        }

        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>