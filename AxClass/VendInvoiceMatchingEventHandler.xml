<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceMatchingEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceMatchingEventHandler</c> class is used as the event handler for the vendor
/// invoice workflow.
/// </summary>
/// <remarks>
/// This class implements the <c>WorkflowElementStartedEventHandler</c> and
/// <c>WorkflowElementCompletedEventHandler</c> interfaces and handles the updates that are needed when
/// the workflow event has ended.
/// </remarks>
class VendInvoiceMatchingEventHandler implements WorkflowElementStartedEventHandler, WorkflowElementCompletedEventHandler
{
    VendInvoiceInfoTable vendInvoiceInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>completed</c> method from the workflow framework when a matching task is completed.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the matching task is completed.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendInvoiceInfoTable::setMatchStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), VendInvoiceMatchStatus::NotWaiting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>started</c> method from the workflow framework when a matching task is started.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the matching task is started.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendInvoiceInfoTable::setMatchStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), VendInvoiceMatchStatus::Waiting);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>