<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvWorkflowCancelManager extends WorkflowCancelManager
{
    FormDataSource  formDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// If invoked from a form (<c>_args</c> contain a valid caller), delegates the execution to <c>super(_args)</c>.
    /// If Invoked from a service context (<c>_args.parmObject() is TrvWorkflowControlContext</c>) calls the workflow cancel
    /// and <c>updateDocument()</c> routines to complete the cancel request.
    /// </summary>
    /// <param name="_args">
    /// If called from a form, an <c>Args</c> instance with <c>_args.caller()</c> not null.
    /// If called from a service context, an <c>Args</c> instance with <c>_args.parmObject() is TrvWorkflowControlContext</c>.
    /// </param>
    public void run(Args _args)
    {
        // Called from a form
        if (_args.caller())
        {
            super(_args);
        }
        // Called from a service
        else if (_args.parmObject()  is TrvWorkflowControlContext)
        {
            TrvWorkflowControlContext context = _args.parmObject() as TrvWorkflowControlContext;
            WorkflowCancelManager::cancelWorkflows(TrvWorkflowCancelManager::getWorkflowsToCancel(_args), context.parmWorkflowComment());

            this.updateDocument(_args);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelDocument</Name>
				<Source><![CDATA[
    public boolean canCancelDocument(List list)
    {
        ListEnumerator              listEnumerator = list.getEnumerator();
        SysWorkflowTable            workflowTable;
        WorkflowCorrelationId       rootCorrelationId;
        WorkflowCorrelationId       workflowCorrelationId;
        TrvExpTable                 trvExpTable;
        TrvExpTrans                 trvExpTrans;

        while (listEnumerator.moveNext())
        {
            workflowCorrelationId = listEnumerator.current();
            workflowTable = SysWorkflowTable::find(workflowCorrelationId);
            if (!workflowTable)
            {
                throw error("@SYS116100");
            }
            rootCorrelationId = workflowTable.RootCorrelationId;
            workflowTable.clear();

            //
            // Find the root.
            // Performing a select for update as well in order to avoid selecting the records which are about to get deleted.
            // This helps us avoid inserting duplicate/unwanted records in SYSWORKFLOWMESSAGETABLE when recall is called for
            // a second time while the first one is still processing.
            //
            workflowTable = SysWorkflowTable::find(rootCorrelationId, true);
            if (!workflowTable)
            {
                throw error("@SYS116092");
            }

            if (workflowTable.ContextTableId == tablenum(TrvExpTable))
            {
                select count(RecId) from trvExpTrans
                    join RecId from trvExpTable
                        where trvExpTrans.TrvExpTable == trvExpTable.RecId
                            && trvExpTrans.ApprovalStatus == TrvAppStatus::Ledger
                            && trvExpTable.RecId == workflowTable.ContextRecId;

                if (trvExpTrans.RecId > 0)
                {
                    return false;
                }
            }
            else if (workflowTable.ContextTableId == tablenum(TrvCashAdvance))
            {
                TrvCashAdvance trvCashAdvance;
                select firstonly RecId from trvCashAdvance where trvCashAdvance.RecId == workflowTable.ContextRecId &&
                                                                 trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid;
                if (trvCashAdvance.RecId != 0)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of workflow correlation IDs to cancel.
    ///    If called from a form, delegates the list generation to <c>WorkflowCancelManager::getWorkflowsToCancel()</c>.
    ///    If called from a service context, retrieves the correlation ID from the <c>TrvWorkflowControlContext</c> parameter.
    /// </summary>
    /// <param name="_args">
    ///    If called from a form, an <c>Args</c> instance with <c>_args.caller()</c> not null.
    ///    If called from a service context, an <c>Args</c> instance with <c>_args.parmObject() is TrvWorkflowControlContext</c>.
    /// </param>
    /// <returns>
    ///    The list of workflow correlation IDs to cancel.
    /// </returns>
    public static List getWorkflowsToCancel(Args _args)
    {
        List ret;
        // Called from a form
        if (_args.caller())
        {
            ret = WorkflowCancelManager::getWorkflowsToCancel(_args.caller());
        }
        // Called from a service
        else if (_args.parmObject() is TrvWorkflowControlContext)
        {
            TrvWorkflowControlContext   context = _args.parmObject() as TrvWorkflowControlContext;
            WorkflowTrackingStatusTable trackingStatusTable;
            ret = new List(Types::Guid);

            trackingStatusTable = context.parmWorkflowTrackingStatusTable();

            if (trackingStatusTable.RecId != 0)
            {
                ret.addEnd(trackingStatusTable.CorrelationId);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataSource</Name>
				<Source><![CDATA[
    private void setFormDataSource(FormDataSource _formDataSource)
    {
        formDataSource = _formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the necessary application logic when the workflow cancel action is taken from the UI.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>getDocumentToCancel</c> method.
    /// </param>
    public void updateDocument(Args _args)
    {
        List list = TrvWorkflowCancelManager::getWorkflowsToCancel(_args);
        TrvIWorkflowEnabledForm caller = _args.caller() as TrvIWorkflowEnabledForm;

        this.updateExpenseDocumentStatus(list);

        if (caller)
        {
            caller.workflowActionDone(TrvWorkflowAction::Cancel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseDocumentStatus</Name>
				<Source><![CDATA[
    public void updateExpenseDocumentStatus(List list)
    {
        ListEnumerator          listEnumerator = list.getEnumerator();
        WorkflowCorrelationId   workflowCorrelationId;
        SysWorkflowTable        workflowTable;
        WorkflowCorrelationId   rootCorrelationId;
        TrvExpTable             trvExpTable;
        TrvExpTrans             trvExpTrans;

        while (listEnumerator.moveNext())
        {
            workflowCorrelationId = listEnumerator.current();
            workflowTable = SysWorkflowTable::find(workflowCorrelationId);
            if (!workflowTable)
            {
                throw error("@SYS116100");
            }
            rootCorrelationId = workflowTable.RootCorrelationId;
            workflowTable.clear();

            // find the root
            workflowTable = SysWorkflowTable::find(rootCorrelationId);
            if (!workflowTable)
            {
                throw error("@SYS116092");
            }

            ttsbegin;
            if (workflowTable.ContextTableId == tablenum(TrvExpTable))
            {
                //trvExpTable = formDataSource.cursor();
                select firstonly forupdate RecId, ApprovalStatus from trvExpTable where trvExpTable.RecId == workflowTable.ContextRecId;
                trvExpTable.ApprovalStatus = TrvAppStatus::Create;
                trvExpTable.doUpdate();

                // If line item is configured, the canceled event handler of the line will fire
                // meaning before this line is executed, the line status have already been set to Draft
                if (!TrvWorkflowUtilities::isLineItemApprovalConfigured(rootCorrelationId))
                {
                    // Reset all lines Status regardless if Line Item Approval is set or not
                    update_recordset trvExpTrans setting ApprovalStatus = TrvAppStatus::Create
                                                 where trvExpTrans.TrvExpTable == trvExpTable.RecId &&
                                                       trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger;
                }
            }
            else if (workflowTable.ContextTableId == tablenum(TrvExpTrans))
            {
                //trvExpTrans = formDataSource.cursor();
                select firstonly forupdate RecId, ApprovalStatus from trvExpTrans where trvExpTrans.RecId == workflowTable.ContextRecId;
                trvExpTrans.ApprovalStatus = TrvAppStatus::Create;
                trvExpTrans.doUpdate();
            }
            else if (workflowTable.ContextTableId == tablenum(TrvCashAdvance))
            {
                TrvCashAdvance trvCashAdvance;
                select firstonly forupdate RecId, CashAdvanceStatus from trvCashAdvance where trvCashAdvance.RecId == workflowTable.ContextRecId;
                trvCashAdvance.CashAdvanceStatus = TrvWorkflowCashAdvanceStatus::Created;
                trvCashAdvance.doUpdate();
            }
            else if (workflowTable.ContextTableId == tablenum(TrvRequisitionTable))
            {
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowTable.ContextRecId, TrvRequisitionApprovalStatus::Create);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WorkflowCancelManager construct()
    {
        return new TrvWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TrvWorkflowCancelManager workflowCancelManager = TrvWorkflowCancelManager::construct();
        List                     list;

        list = TrvWorkflowCancelManager::getWorkflowsToCancel(_args);

        if (!workflowCancelManager.canCancelDocument(list))
        {
            error("@SYS317191");
            return;
        }

        if (_args.record().TableId == tableNum(TrvExpTable))
        {
            TrvWorkflowUtilities::removeTrvAccountingDistributions(_args.record());
        }

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>