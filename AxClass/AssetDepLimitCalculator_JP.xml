<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepLimitCalculator_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Japan fixed asset depreciation limit calculator.
/// </summary>
class AssetDepLimitCalculator_JP
{
    // Basic info
    AssetBook                   assetBook;
    AssetDepLimitType_JP        assetDepLimitType;
    AssetDepreciationProfile    assetDepreciationProfile;
    AssetTransDate              calculationStartDate;

    // Additional info, optional.
    AssetBudgetModelId          assetBudgetModelId;

    // Helpers
    AssetTableMethod            assetTableMethod;
    AssetTableInterval          assetTableInterval;

    //
    // For cache
    //
    anytype                     allowableLimitCacheOwner;
    // The cache set record ID for the cache owner. If owner is not specified, it will be 0.
    // And the cache will become an local cache.
    RefRecId                    assetDepLimitCacheSetRecId;
    // It may be changed to a local in-Memory temp table through setTmp() to do a local cache without any owner.
    // So always use "assetDepLimitCache" var to access the cache.
    AssetDepLimitCache_JP       assetDepLimitCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLimitToCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <C>AssetDepLimitCache_JP</C> table.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date
    /// </param>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <param name="_limit">
    /// The limit amount
    /// </param>
    protected void addLimitToCache(
        AssetTransDate  _fromDate,
        AssetTransDate  _toDate,
        AssetAmount     _limit)
    {
        assetDepLimitCache.clear();
        assetDepLimitCache.AssetDepLimitCacheSet_JP = assetDepLimitCacheSetRecId;
        assetDepLimitCache.AssetId                  = assetBook.AssetId;
        assetDepLimitCache.BookId                   = assetBook.BookId;
        assetDepLimitCache.LimitType                = assetDepLimitType;
        assetDepLimitCache.FromDate                 = _fromDate;
        assetDepLimitCache.ToDate                   = _toDate;
        assetDepLimitCache.AllowableLimit           = _limit;
        assetDepLimitCache.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLimitForDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates limit amount by from and to date.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date
    /// </param>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <returns>
    /// Returns the calculated limit amount
    /// </returns>
    public AssetAmount calcLimitForDateRange(FromDate _fromDate, ToDate _toDate)
    {
        AssetAmount     ret;
        AssetTransDate  maxToCacheOfCachedLimit;

        if (_toDate >= _fromDate)
        {
            maxToCacheOfCachedLimit = this.maxToDateOfCachedLimit();
            if (_toDate > maxToCacheOfCachedLimit)
            {
                if (this.isInLocalCacheMode())
                {
                    this.updateLimitToDate(_toDate, maxToCacheOfCachedLimit + 1);
                }
                else
                {
                    // ALways calculate and cache for whole year to avoid duplicated calculation.
                    this.updateLimitToDate(assetTableInterval.findLastDayOfYear(_toDate), maxToCacheOfCachedLimit + 1);
                }
            }

            // Only consider the assetDepLimitCache.ToDate to determine whether the limit amount should be countered or not.
            // Because if consider the date range [FromDate, ToDate], and if [_fromDate, _toDate] only cover a partial of [FromDate, ToDate],
            // it is not right to recalculate the limit based on the covered date range. So, just use "ToDate" to determin whether it is covered or not.
            select sum(AllowableLimit) from assetDepLimitCache
                where assetDepLimitCache.AssetDepLimitCacheSet_JP   == assetDepLimitCacheSetRecId
                    && assetDepLimitCache.AssetId                   == assetBook.AssetId
                    && assetDepLimitCache.BookId                    == assetBook.BookId
                    && assetDepLimitCache.LimitType                 == assetDepLimitType
                    && assetDepLimitCache.ToDate                    >= _fromDate
                    && assetDepLimitCache.ToDate                    <= _toDate;

            ret = assetDepLimitCache.AllowableLimit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLimitForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates limit amount by dates in period.
    /// </summary>
    /// <param name="_dateInPeriod">
    /// The date in period
    /// </param>
    /// <returns>
    /// Returns the calculated limit amount
    /// </returns>
    public AssetAmount calcLimitForPeriod(AssetTransDate _dateInPeriod)
    {
        AssetAmount     ret;
        FromDate        fromDate    = assetTableInterval.startOfPeriod(_dateInPeriod);
        ToDate          toDate      = assetTableInterval.endPeriod(_dateInPeriod);

        ret = this.calcLimitForDateRange(fromDate, toDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLimitForPeriodYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates limit amount by dates in last period.
    /// </summary>
    /// <param name="_dateInLastPeriod">
    /// The date in last period
    /// </param>
    /// <returns>
    /// Returns the calculated limit amount
    /// </returns>
    public AssetAmount calcLimitForPeriodYTD(AssetTransDate _dateInLastPeriod)
    {
        AssetAmount     ret;
        FromDate        fromDate    = assetTableInterval.findFirstDayOfYear(_dateInLastPeriod);
        ToDate          toDate      = assetTableInterval.endPeriod(_dateInLastPeriod);

        ret = this.calcLimitForDateRange(fromDate, toDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLimitForYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates limit amount by dates in year.
    /// </summary>
    /// <param name="_dateInYear">
    /// The date in year
    /// </param>
    /// <returns>
    /// Returns the calculated limit amount
    /// </returns>
    public AssetAmount calcLimitForYear(AssetTransDate _dateInYear)
    {
        AssetAmount     ret;
        FromDate        fromDate    = assetTableInterval.findFirstDayOfYear(_dateInYear);
        ToDate          toDate      = assetTableInterval.findLastDayOfYear(_dateInYear);

        ret = this.calcLimitForDateRange(fromDate, toDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSelfCalculationMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables self calculation mode.
    /// </summary>
    protected void enableSelfCalculationMode()
    {
        if (!assetTableMethod)
        {
            this.initAssetTableMethod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <C>AssetTableMethod</C> instance.
    /// </summary>
    /// <returns>
    /// Returns the initialized instance.
    /// </returns>
    public AssetTableMethod getAssetTableMethod()
    {
        if (!assetTableMethod)
        {
            this.initAssetTableMethod();
        }

        return assetTableMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does initializations here.
    /// </summary>
    public void init()
    {
        if (assetTableInterval == null)
        {
            this.enableSelfCalculationMode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetTableMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <C>AssetTableMethod</C> instance.
    /// </summary>
    protected void initAssetTableMethod()
    {
        AssetTableMethod_JP     assetTableMethod_JP;

        if (assetTableMethod == null)
        {
            assetTableMethod = AssetTableMethod::construct(assetBook, dateMax(), assetBudgetModelId);
        }

        assetTableInterval  = assetTableMethod.getAssetTableInterval_JP();

        assetTableMethod.parmIsCatchUpDepreciation(true);
        assetTableMethod.parmIsOriginalDepreciation(false);
        assetTableMethod.parmPeriodstart(calculationStartDate);
        assetTableMethod.parmPeriodEnd(assetTableInterval.endPeriod(calculationStartDate));
        assetTableMethod.parmPrevDepAmount(0);
        assetTableMethod.parmAllowableLimitCacheOwner_JP(allowableLimitCacheOwner);
        assetTableMethod.parmIsForPreTaxDeduction_JP(true);

        if (assetTableMethod is AssetTableMethod_JP)
        {
            assetTableMethod_JP = assetTableMethod as AssetTableMethod_JP;
            assetTableMethod_JP.initAdditional();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes for construct
    /// </summary>
    /// <param name="_assetBook">
    /// The <C>AssetBook</C>
    /// </param>
    /// <param name="_assetDepLimitType">
    /// The <C>AssetDepLimitType_JP</C>
    /// </param>
    /// <param name="_assetDepreciationProfile">
    /// The <C>AssetDepreciationProfile</C> defualt as null
    /// </param>
    /// <param name="_calculationStartDate">
    /// The calculation start date, defualt as date null
    /// </param>
    /// <param name="_cacheOwner">
    /// The cache owner defualt as null
    /// </param>
    protected void initForConstruct(
        AssetBook                   _assetBook,
        AssetDepLimitType_JP        _assetDepLimitType,
        AssetDepreciationProfile    _assetDepreciationProfile   = null,
        AssetTransDate              _calculationStartDate       = dateNull(),
        anytype                     _cacheOwner                 = null)
    {
        assetBook                   = _assetBook;
        assetDepLimitType           = _assetDepLimitType;
        assetDepreciationProfile    = _assetDepreciationProfile;
        calculationStartDate        = max(_calculationStartDate, _assetBook.DepreciationStartDate);

        // If the _cacheOwner is specified, then share the cache between calculator that with same owner.
        // If not, then only do a local cache.
        if (_cacheOwner)
        {
            allowableLimitCacheOwner    = _cacheOwner;
            assetDepLimitCacheSetRecId  = AssetDepLimitCacheSet_JP::findOrCreateByOwner(_cacheOwner).RecId;
        }
        else
        {
            // Change to assetDepLimitCache to a local in-Memory temp table to do a local cache without any owner.
            // Note: always use "assetDepLimitCache" var to access the cache.
            assetDepLimitCache.setTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInLocalCacheMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if is in local cache mode.
    /// </summary>
    /// <returns>
    /// Returns true if is, otherwise false
    /// </returns>
    protected boolean isInLocalCacheMode()
    {
        return (assetDepLimitCacheSetRecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxToDateOfCachedLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// The latest to date of cache limit
    /// </summary>
    /// <returns>
    /// Returns the latest to date
    /// </returns>
    protected ToDate maxToDateOfCachedLimit()
    {
        select maxOf(ToDate) from assetDepLimitCache
            where assetDepLimitCache.AssetDepLimitCacheSet_JP   == assetDepLimitCacheSetRecId
                && assetDepLimitCache.AssetId                   == assetBook.AssetId
                && assetDepLimitCache.BookId                    == assetBook.BookId
                && assetDepLimitCache.LimitType                 == assetDepLimitType;

        return assetDepLimitCache.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBudgetModelId</Name>
				<Source><![CDATA[
    public AssetBudgetModelId parmAssetBudgetModelId(AssetBudgetModelId _assetBudgetModelId = assetBudgetModelId)
    {
        assetBudgetModelId = _assetBudgetModelId;
        return assetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTableInterval</Name>
				<Source><![CDATA[
    public AssetTableInterval parmAssetTableInterval(AssetTableInterval _assetTableInterval = assetTableInterval)
    {
        assetTableInterval = _assetTableInterval;
        return assetTableInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLimitToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates limit to date.
    /// </summary>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <param name="_fromDate">
    /// The from date default as date null
    /// </param>
    protected void updateLimitToDate(ToDate _toDate, FromDate _fromDate = dateNull())
    {
        this.enableSelfCalculationMode();

        while (assetTableMethod.parmPeriodEnd() <= _toDate && assetTableMethod.next())
        {
            if (_fromDate <= assetTableMethod.parmPeriodEnd())
            {
                this.addLimitToCache(
                    assetTableMethod.parmPeriodstart(),
                    assetTableMethod.parmPeriodEnd(),
                    assetTableMethod.calc());
            }
            else
            {
                // Still do the calculation to move to next period. But not save the result.
                assetTableMethod.calc();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheForOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears cache for owner.
    /// </summary>
    /// <param name="_owner">
    /// The cache owner
    /// </param>
    public static void clearCacheForOwner(anytype _owner)
    {
        AssetDepLimitCacheSet_JP        assetDepLimitCacheSet;
        Description                     ownerNum;

        ownerNum = AssetDepLimitCacheSet_JP::generateOwnerNum(_owner);

        if (ownerNum)
        {
            delete_from assetDepLimitCacheSet
                where assetDepLimitCacheSet.OwnerNum == ownerNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a sub class of <C>AssetDepLimitCalculator_JP</C> based on specified type of depreciation method.
    /// </summary>
    /// <param name="_assetBook">
    /// A record of <C>AssetBook</C>.
    /// </param>
    /// <param name="_assetDepLimitType">
    /// The asset depreciation limit type.
    /// </param>
    /// <param name="_calculationStartDate">
    /// A date that start to calculate allowable limit. Optional.
    /// </param>
    /// <param name="_cacheOwner">
    /// The owner the cache of calculated allowable limit. Optional.
    /// </param>
    /// <returns>
    /// A new instance of a sub class of <C>AssetDepLimitCalculator_JP</C>.
    /// </returns>
    public static AssetDepLimitCalculator_JP construct(
        AssetBook               _assetBook,
        AssetDepLimitType_JP    _assetDepLimitType,
        AssetTransDate          _calculationStartDate   = dateNull(),
        anytype                 _cacheOwner             = null)
    {
        AssetDepLimitCalculator_JP      ret;
        AssetBook                       assetBookLoc;
        AssetDepreciationProfile        assetDepreciationProfile;

        // The passed in _assetBook may not have selected out all fields, refetch it from DB.
        assetBookLoc                = AssetBook::find(_assetBook.AssetId, _assetBook.BookId);
        assetDepreciationProfile    = AssetDepLimitCalculator_JP::determineDepProfileBasedOnType(assetBookLoc, _assetDepLimitType);

        ret = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(AssetDepLimitCalculator_JP),
            new AssetDepMethodAttribute_JP(assetDepreciationProfile.Method));

        if (ret == null)
        {
            ret = new AssetDepLimitCalculator_JP();
        }

        ret.initForConstruct(
            assetBookLoc,
            _assetDepLimitType,
            assetDepreciationProfile,
            _calculationStartDate,
            _cacheOwner);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDepProfileBasedOnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines depreciation profile based on type.
    /// </summary>
    /// <param name="_assetBook">
    /// The <C>AssetBook</C> instance
    /// </param>
    /// <param name="_assetDepLimitType">
    /// The <C>assetDepLimitType</C>
    /// </param>
    /// <returns>
    /// Returns the profile based on type
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exceptions when type is not correct
    /// </exception>
    protected static AssetDepreciationProfile determineDepProfileBasedOnType(
        AssetBook               _assetBook,
        AssetDepLimitType_JP    _assetDepLimitType)
    {
        AssetDepreciationProfile    ret;

        if (_assetBook)
        {
            switch (_assetDepLimitType)
            {
                case AssetDepLimitType_JP::OrdinaryDepreciation:
                    ret = AssetDepreciationProfile::find(_assetBook.depreciationProfileId());
                    break;

                case AssetDepLimitType_JP::ExtraordinaryDepreciation:
                    ret = _assetBook.depreciationExtProfile();
                    break;

                case AssetDepLimitType_JP::AcceleratedDepreciation:
                    ret = _assetBook.AssetDepBookMap_JP::acceleratedDepreciationProfile();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>