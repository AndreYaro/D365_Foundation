<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentUtility_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset document utility.
/// </summary>
class AssetDocumentUtility_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AccDepAccType2DocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from accelerated depreciation type to asset document type in posting profile.
    /// </summary>
    /// <param name="_accDepAccType">
    /// Accelerated depreciation account type
    /// </param>
    /// <returns>
    /// Asset document type in posting profile.
    /// </returns>
    public static AssetDocumentTransType_JP AccDepAccType2DocumentTransType(AssetDocumentAcceleratedDepAccType_JP _accDepAccType)
    {
        switch (_accDepAccType)
        {
            case AssetDocumentAcceleratedDepAccType_JP::AcceleratedDepreciation:
                return AssetDocumentTransType_JP::AcceleratedDepreciation;
        }

        return AssetDocumentTransType_JP::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2DocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts account type to document type.
    /// </summary>
    /// <param name="_accType">
    /// The asset document account type.
    /// </param>
    /// <param name="_mainType">
    /// The asset document main type.
    /// </param>
    /// <returns>
    /// The document type.
    /// </returns>
    public static AssetDocumentTransType_JP accountType2DocumentTransType(int _accType, AssetDocumentMainType_JP _mainType)
    {
        AssetDocumentTransType_JP   transType = AssetDocumentTransType_JP::None;
        switch (_mainType)
        {
            case AssetDocumentMainType_JP::ReductionEntry:
                transType = AssetDocumentUtility_JP::reductionEntryAccType2DocumentTransType(_accType);
                break;
            case AssetDocumentMainType_JP::AssetImpairment:
                transType = AssetDocumentUtility_JP::impairmentAccType2DocumentTransType(_accType);
                break;
            case AssetDocumentMainType_JP::AssetRetirementObligation:
                transType = AssetDocumentUtility_JP::AROAccType2DocumentTransType(_accType);
                break;
            case AssetDocumentMainType_JP::AssetAcceleratedDepreciation:
                transType = AssetDocumentUtility_JP::AccDepAccType2DocumentTransType(_accType);
                break;
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AROAccType2DocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers retirment obligation account type to asset document type in posting profile.
    /// </summary>
    /// <param name="_accType">
    /// Retirment obligation account type
    /// </param>
    /// <returns>
    /// Asset document type in posting profile.
    /// </returns>
    public static AssetDocumentTransType_JP AROAccType2DocumentTransType(AssetRetirementObligationAccountType_JP _accType)
    {
        AssetDocumentTransType_JP result;

        switch (_accType)
        {
            case AssetRetirementObligationAccountType_JP::Liability:
                result = AssetDocumentTransType_JP::RetirementObligationLiability;
                break;
            case AssetRetirementObligationAccountType_JP::Interest:
                result = AssetDocumentTransType_JP::RetirementObligationInterest;
                break;
            default:
                result = AssetDocumentTransType_JP::None;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetDocType2AssetDocTransType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from <c>AssetTransTypePurch</c> and <c>_assetDocumentType_JP</c> to <c>AssetDocumentTransType_JP</c>
    /// </summary>
    /// <param name="_assetDocumentType_JP">
    /// The asset document type.
    /// </param>
    /// <returns>
    /// The asset document transaction type.
    /// </returns>
    public static AssetDocumentTransType_JP assetDocType2AssetDocTransType_JP(AssetDocumentType_JP _assetDocumentType_JP)
    {
        AssetDocumentTransType_JP  transType = AssetDocumentTransType_JP::None;
        switch (_assetDocumentType_JP)
        {
            case AssetDocumentType_JP::AssetReductionEntry_DirectOff:
                transType = AssetDocumentTransType_JP::ReductionEntryDirectOff;
                break;
            case AssetDocumentType_JP::AssetReductionEntry_Reserve:
                transType = AssetDocumentTransType_JP::ReductionEntryReserve;
                break;
            case AssetDocumentType_JP::AssetImpairment:
                transType = AssetDocumentTransType_JP::Impairment;
                break;
            case AssetDocumentType_JP::AssetAcceleratedDepreciation:
                transType = AssetDocumentTransType_JP::AcceleratedDepreciation;
                break;
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetPostValue2AssetPostValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from asset post value and asset document type to japan asset post value.
    /// </summary>
    /// <param name="_assetPostValue">
    /// Asset post value.
    /// </param>
    /// <param name="_assetDocumentType">
    /// Japan asset document type.
    /// </param>
    /// <returns>
    /// Japan asset post value.
    /// </returns>
    public static AssetPostValue_JP assetPostValue2AssetPostValue_JP(
        AssetPostValue         _assetPostValue
        , AssetDocumentType_JP _assetDocumentType)
    {
        AssetPostValue_JP postType;

        switch (_assetDocumentType)
        {
            case AssetDocumentType_JP::AssetReductionEntry_DirectOff:
                switch (_assetPostValue)
                {
                    case AssetPostValue::AcqPriorYears:
                        postType = AssetPostValue_JP::ReductionEntryPriorYears;
                        break;
                    case AssetPostValue::AcqThisYear:
                        postType = AssetPostValue_JP::ReductionEntryThisYear;
                        break;
                }
                break;
            case AssetDocumentType_JP::AssetRetirementObligation:
                switch (_assetPostValue)
                {
                    case AssetPostValue::AcqAdjPriorYears:
                        postType = AssetPostValue_JP::AROPriorYears;
                        break;
                    case AssetPostValue::AcqAdjThisYear:
                        postType = AssetPostValue_JP::AROThisYear;
                        break;
                }
                break;
            case AssetDocumentType_JP::AssetImpairment:
                switch (_assetPostValue)
                {
                    case AssetPostValue::WriteDownAdjPriorYear:
                        postType = AssetPostValue_JP::ImpairmentPriorYears;
                        break;
                    case AssetPostValue::WriteDownAdjThisYear:
                        postType = AssetPostValue_JP::ImpairmentThisYear;
                        break;
                }
                break;
        }

        return postType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetPostValue2AssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from <c>AssetPostValue</c> to <c>AssetTransType</c>
    /// </summary>
    /// <param name="_assetPostValue">
    /// Asset post value.
    /// </param>
    /// <returns>
    /// Asset transaction type;
    /// </returns>
    public static AssetTransType assetPostValue2AssetTransType(
        AssetPostValue   _assetPostValue)
    {
        AssetTransType   assetTransTypeLoc;

        switch (_assetPostValue)
        {
            case AssetPostValue::AcqPriorYears:
                assetTransTypeLoc = AssetTransType::AcqPriorYears;
                break;
            case AssetPostValue::AcqThisYear:
                assetTransTypeLoc = AssetTransType::AcqThisYear;
                break;
            case AssetPostValue::AcqAdjPriorYears:
                assetTransTypeLoc = AssetTransType::AcqAdjPriorYears;
                break;
            case AssetPostValue::AcqAdjthisYear:
                assetTransTypeLoc = AssetTransType::AcqAdjthisYear;
                break;
            case AssetPostValue::WriteDownAdjPriorYear:
                assetTransTypeLoc = AssetTransType::WriteDownAdjPriorYears;
                break;
            case AssetPostValue::WriteDownAdjThisYear:
                assetTransTypeLoc = AssetTransType::WriteDownAdjThisYear;
                break;
        }

        return assetTransTypeLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransTypeJournal2AssetTransType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from <c>AssetTransTypeJournal</c> and <c>AssetDocumentType_JP</c> to <c>AssetTransType</c>
    /// </summary>
    /// <param name="_assetTransTypeJournal">
    /// The asset journal type.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    /// The asset document type; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetTrans</c> transaction type.
    /// </returns>
    public static AssetTransType assetTransTypeJournal2AssetTransType_JP(
        AssetTransTypeJournal _assetTransTypeJournal,
        AssetDocumentType_JP  _assetDocumentType_JP = AssetDocumentType_JP::None)
    {
        AssetTransType ret = AssetTransType::None;

        if (_assetTransTypeJournal == AssetTransTypeJournal::Acquisition
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
        {
            ret = AssetTransType::Acquisition;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::Acquisition
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            ret = AssetTransType::ReductionEntryReserve_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::Depreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            ret = AssetTransType::ReductionEntryReserveAllocation_JP;
        }
        //repayment
        else if ((_assetTransTypeJournal == AssetTransTypeJournal::ReductionEntryRepayment_JP)
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            ret = AssetTransType::ReductionEntryRepayment_JP;
        }
        else if ((_assetTransTypeJournal == AssetTransTypeJournal::ReductionEntryRepaymentSubsidy_JP)
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            ret = AssetTransType::ReductionEntryRepaymentSubsidy_JP;
        }
        else if ((_assetTransTypeJournal == AssetTransTypeJournal::ReductionEntryRepaymentProportional_JP)
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            ret = AssetTransType::ReductionEntryRepaymentProportional_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::WriteDownAdj
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetImpairment)
        {
              ret = AssetTransType::WriteDownAdj;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExpensedRetirmentObligation_JP
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetRetirementObligation)
        {
            ret = AssetTransType::AssetRetirementObligationInterest_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetAcceleratedDepreciation)
        {
            ret = AssetTransType::ExtraordinaryDepreciation;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::SpecialDepReserve)
        {
            ret = AssetTransType::SpecialDepReserve_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::SpecialDepReserveAllocation)
        {
            ret = AssetTransType::SpecialDepReserveAllocation_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::AdditionalDepReserve)
        {
            ret = AssetTransType::AdditionalDepReserve_JP;
        }
        else if (_assetTransTypeJournal == AssetTransTypeJournal::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::AdditionalDepReserveAllocation)
        {
            ret = AssetTransType::AdditionalDepReserveAllocation_JP;
        }
        else
        {
            // follow the default rule if no specific mapping rule is found
            ret = AssetPost::assetTransTypeJournal2AssetTransType(_assetTransTypeJournal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransTypePurch2AssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from <c>AssetTransTypePurch</c> and <c>AssetDocumentType_JP</c> to <c>AssetTransType</c>
    /// </summary>
    /// <param name="_assetTransTypePurch">
    /// The asset purch line type.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    /// The asset document type; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetTrans</c> transaction type.
    /// </returns>
    public static AssetTransType assetTransTypePurch2AssetTransType(
        AssetTransTypePurch  _assetTransTypePurch,
        AssetDocumentType_JP _assetDocumentType_JP = AssetDocumentType_JP::None
        )
    {
        AssetTransType ret = AssetTransType::None;

        if (_assetTransTypePurch == AssetTransTypePurch::Acquisition
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_DirectOff )
        {
            ret = AssetTransType::Acquisition;
        }
        else if (_assetTransTypePurch == AssetTransTypePurch::Acquisition
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve )
        {
            ret = AssetTransType::ReductionEntryReserve_JP;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalPostValueByDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets supported japan fixed asset disposal post value by document type.
    /// </summary>
    /// <param name="_documentType">
    /// Japan fixed asset document type.
    /// </param>
    /// <returns>
    /// Supported disposal post value
    /// </returns>
    public static container getDisposalPostValueByDocument(
        AssetDocumentType_JP  _documentType)
    {
        container conRet = conNull();

        switch (_documentType)
        {
            case AssetDocumentType_JP::AssetReductionEntry_DirectOff:
                conRet = [AssetPostValue::AcqPriorYears
                    , AssetPostValue::AcqThisYear];
                break;
            case AssetDocumentType_JP::AssetRetirementObligation:
                conRet = [AssetPostValue::AcqAdjPriorYears
                    , AssetPostValue::AcqAdjThisYear];
                break;
            case AssetDocumentType_JP::AssetImpairment:
                conRet = [AssetPostValue::WriteDownAdjPriorYear
                    , AssetPostValue::WriteDownAdjThisYear];
                break;
        }

        return conRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalSummaryTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a container which contains pairs of <c>AssetTransType</c> and <c>AssetDocumentType_JP</c> for disposal summary.
    /// </summary>
    /// <returns>
    /// A container contains several pairs in format of [Asset trans type, Asset document type]
    /// </returns>
    public static Set getDisposalSummaryTransType()
    {
        Set docTypes = new Set(Types::Container);

        docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetReductionEntry_DirectOff]);
        docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::WriteDownAdj, AssetDocumentType_JP::AssetImpairment]);

        return docTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impairmentAccType2DocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from impairment account type to asset document type in posting profile.
    /// </summary>
    /// <param name="_impairmentAccType">
    /// Impairment account type
    /// </param>
    /// <returns>
    /// Asset document type in posting profile.
    /// </returns>
    public static AssetDocumentTransType_JP impairmentAccType2DocumentTransType(AssetDocumentImpairmentAccType_JP _impairmentAccType)
    {
        switch (_impairmentAccType)
        {
            case AssetDocumentImpairmentAccType_JP::Impairment:
                return AssetDocumentTransType_JP::Impairment;
        }

        return AssetDocumentTransType_JP::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetDocumentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if asset document is enabled.
    /// </summary>
    /// <returns>
    /// True if asset document is enabled; otherwise, false.
    /// </returns>
    public static boolean isAssetDocumentEnabled()
    {
        #isoCOuntryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetDocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if specific asset trans type is supported for asset document posting.
    /// </summary>
    /// <param name="_transType">
    /// The transaction type to check.
    /// </param>
    /// <returns>
    /// True if the transaction type is supported; otherwise, false.
    /// </returns>
    public static boolean isAssetDocumentTransType(AssetTransType _transType)
    {
        boolean ret;

        switch (_transType)
        {
            case AssetTransType::ReductionEntryReserve_JP:
            case AssetTransType::ReductionEntryReserveAllocation_JP:
            case AssetTransType::AssetRetirementObligationInterest_JP:
            case AssetTransType::ReductionEntryRepayment_JP:
            case AssetTransType::ReductionEntryRepaymentSubsidy_JP:
            case AssetTransType::ReductionEntryRepaymentProportional_JP:
            case AssetTransType::SpecialDepReserve_JP:
            case AssetTransType::SpecialDepReserveAllocation_JP:
            case AssetTransType::AdditionalDepReserve_JP:
            case AssetTransType::AdditionalDepReserveAllocation_JP:
            ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentTypeWithoutEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if specific asset document type is used without asset document entry
    /// </summary>
    /// <param name="_documentType">
    /// Asset document type.
    /// </param>
    /// <returns>
    /// True if asset document type is used without asset document entry; otherwise, false.
    /// </returns>
    public static boolean isDocumentTypeWithoutEntry(AssetDocumentType_JP _documentType)
    {
        boolean ret;

        switch (_documentType)
        {
            case AssetDocumentType_JP::SpecialDepDirectOff:
            case AssetDocumentType_JP::SpecialDepReserve:
            case AssetDocumentType_JP::SpecialDepReserveAllocation:
            case AssetDocumentType_JP::AdditionalDepDirectOff:
            case AssetDocumentType_JP::AdditionalDepReserve:
            case AssetDocumentType_JP::AdditionalDepReserveAllocation:
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionAffectingAcquisitionCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the transaction type affects the acquisition cost.
    /// </summary>
    /// <param name="_assetTransType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_assetDocumentType">
    /// Asset docuemnt type.
    /// </param>
    /// <returns>
    /// True if the transaction type affects the acquisition cost; otherwise, false.
    /// </returns>
    public static boolean isTransactionAffectingAcquisitionCost(
        AssetTransType _assetTransType,
        AssetDocumentType_JP _assetDocumentType)
    {
        boolean result = true;

        switch (_assetDocumentType)
        {
            case AssetDocumentType_JP::AssetReductionEntry_Reserve:
                if (_assetTransType == AssetTransType::ReductionEntryReserve_JP
                    || _assetTransType == AssetTransType::ReductionEntryReserveAllocation_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepayment_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepaymentSubsidy_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepaymentProportional_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AssetRetirementObligation:
                if (_assetTransType != AssetTransType::Acquisition
                    && _assetTransType != AssetTransType::AcquisitionAdj)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::SpecialDepReserve:
                if (_assetTransType == AssetTransType::SpecialDepReserve_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::SpecialDepReserveAllocation:
                if (_assetTransType == AssetTransType::SpecialDepReserveAllocation_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AdditionalDepReserve:
                if (_assetTransType == AssetTransType::AdditionalDepReserve_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AdditionalDepReserveAllocation:
                if (_assetTransType == AssetTransType::AdditionalDepReserveAllocation_JP)
                {
                    result = false;
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionAffectingNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the transaction type affects the net book value.
    /// </summary>
    /// <param name="_assetTransType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_assetDocumentType">
    /// Asset docuemnt type.
    /// </param>
    /// <returns>
    /// True if the transaction type affects the net book value; otherwise, false.
    /// </returns>
    public static boolean isTransactionAffectingNetBookValue(
        AssetTransType _assetTransType,
        AssetDocumentType_JP _assetDocumentType)
    {
        boolean result = true;

        switch (_assetDocumentType)
        {
            case AssetDocumentType_JP::AssetReductionEntry_Reserve:
                if (_assetTransType == AssetTransType::ReductionEntryReserve_JP
                    || _assetTransType == AssetTransType::ReductionEntryReserveAllocation_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepayment_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepaymentSubsidy_JP
                    || _assetTransType == AssetTransType::ReductionEntryRepaymentProportional_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AssetRetirementObligation:
                if (_assetTransType == AssetTransType::AssetRetirementObligationInterest_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::SpecialDepReserve:
                if (_assetTransType == AssetTransType::SpecialDepReserve_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::SpecialDepReserveAllocation:
                if (_assetTransType == AssetTransType::SpecialDepReserveAllocation_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AdditionalDepReserve:
                if (_assetTransType == AssetTransType::AdditionalDepReserve_JP)
                {
                    result = false;
                }
                break;
            case AssetDocumentType_JP::AdditionalDepReserveAllocation:
                if (_assetTransType == AssetTransType::AdditionalDepReserveAllocation_JP)
                {
                    result = false;
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the give <c>AssetTransType</c> is valid for the given <c>AssetDocumentType_JP</c>.
    /// </summary>
    /// <param name="_transType">
    /// The given <c>AssetTransType</c> enum.
    /// </param>
    /// <param name="_docType">
    /// The given <c>AssetDocumentType_JP</c> enum.
    /// </param>
    /// <param name="_originRet">
    /// The original validation value.
    /// </param>
    /// <returns>
    /// A boolean value represents the result of validation.
    /// </returns>
    /// <remarks>
    /// If there is no dependency between the _transType and _docType, the _originRet will be returned.
    /// </remarks>
    public static boolean isValidAssetTransType(AssetTransType _transType, AssetDocumentType_JP _docType, boolean _originRet)
    {
        boolean ret = _originRet;

        switch (_docType)
        {
            case AssetDocumentType_JP::AssetImpairment:
                switch (_transType)
                {
                    case AssetTransType::WriteDownAdj:
                        break;
                    default:
                        ret = false;
                        break;
                }
                break;
            case AssetDocumentType_JP::AssetAcceleratedDepreciation:
                switch (_transType)
                {
                    case AssetTransType::ExtraordinaryDepreciation:
                        break;
                    default:
                        ret = false;
                        break;
                }
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryAccType2DocumentTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from reduction entry account type to asset document type in posting profile.
    /// </summary>
    /// <param name="_reductionEntryAccType">
    /// Reduction entry account type
    /// </param>
    /// <returns>
    /// Asset document type in posting profile.
    /// </returns>
    public static AssetDocumentTransType_JP reductionEntryAccType2DocumentTransType(AssetDocumentReductionEntryAccType_JP _reductionEntryAccType)
    {
        AssetDocumentTransType_JP  transType =  AssetDocumentTransType_JP::None;
        switch (_reductionEntryAccType)
        {
            case AssetDocumentReductionEntryAccType_JP::DirectOff:
                transType = AssetDocumentTransType_JP::ReductionEntryDirectOff;
                break;
            case AssetDocumentReductionEntryAccType_JP::Reserve:
                transType = AssetDocumentTransType_JP::ReductionEntryReserve;
                break;
            case AssetDocumentReductionEntryAccType_JP::ReserveAllocation:
                transType = AssetDocumentTransType_JP::ReductionEntryAllocation;
                break;
            case AssetDocumentReductionEntryAccType_JP::RepayCompletely:
                transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletely;
                break;
            case AssetDocumentReductionEntryAccType_JP::RepayCompletelySubsidy:
                transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletelySubsidy;
                break;
            case AssetDocumentReductionEntryAccType_JP::RepayProportional:
                transType = AssetDocumentTransType_JP::ReductionEntryRepayProportional;
                break;
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeWithDocType2AccTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from asset transaction type and asset document type to asset transaction type used in posting profile.
    /// </summary>
    /// <param name="_assetTransType">
    /// The asset transaction type.
    /// </param>
    /// <param name="_assetDocumentType">
    /// The asset document type.
    /// </param>
    /// <returns>
    /// The asset document transaction type used in posting profile.
    /// </returns>
    public static AssetTransType transTypeWithDocType2AccTransType(
        AssetTransType       _assetTransType,
        AssetDocumentType_JP _assetDocumentType)
    {
        AssetTransType  ret = _assetTransType;

        if (_assetTransType == AssetTransType::SpecialDepReserve_JP
            || _assetTransType == AssetTransType::SpecialDepReserveAllocation_JP
            || _assetTransType == AssetTransType::AdditionalDepReserve_JP
            || _assetTransType == AssetTransType::AdditionalDepReserveAllocation_JP)
        {
            ret = AssetTransType::ExtraordinaryDepreciation;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeWithDocType2TransType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps from asset transaction type and asset document type to asset document transaction type in posting profile.
    /// </summary>
    /// <param name="_assetTransType">
    /// The asset transaction type.
    /// </param>
    /// <param name="_assetDocumentType_JP">
    /// The asset document type.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    /// The recid of asset document entry. Optional
    /// </param>
    /// <returns>
    /// The asset document transaction type.
    /// </returns>
    public static AssetDocumentTransType_JP transTypeWithDocType2TransType_JP(
        AssetTransType       _assetTransType,
        AssetDocumentType_JP _assetDocumentType_JP,
        AssetDocumentRecId_JP _assetDocumentEntryRecId = 0)
    {
        AssetDocumentTransType_JP  transType = AssetDocumentTransType_JP::None;

        if (_assetTransType == AssetTransType::Acquisition &&
            _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
        {
            transType = AssetDocumentTransType_JP::ReductionEntryDirectOff;
        }

        if (_assetTransType == AssetTransType::ReductionEntryReserve_JP &&
            _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            transType = AssetDocumentTransType_JP::ReductionEntryReserve;
        }

        if (_assetTransType == AssetTransType::ReductionEntryReserveAllocation_JP &&
            _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            transType = AssetDocumentTransType_JP::ReductionEntryAllocation;
        }
	    //repayment
	    if (_assetTransType == AssetTransType::ReductionEntryRepayment_JP
	        && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
	    {
	       transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletely;
	    }
	    if (_assetTransType == AssetTransType::ReductionEntryRepaymentSubsidy_JP
	        && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
	    {
	        transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletelySubsidy;
	    }
	    if (_assetTransType == AssetTransType::ReductionEntryRepaymentProportional_JP
	        && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
	    {
        	transType = AssetDocumentTransType_JP::ReductionEntryRepayProportional;
        }

        //repayment
        if (_assetTransType == AssetTransType::ReductionEntryRepayment_JP
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
           transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletely;
        }
        if (_assetTransType == AssetTransType::ReductionEntryRepaymentSubsidy_JP
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            transType = AssetDocumentTransType_JP::ReductionEntryRepayCompletelySubsidy;
        }
        if (_assetTransType == AssetTransType::ReductionEntryRepaymentProportional_JP
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetReductionEntry_Reserve)
        {
            transType = AssetDocumentTransType_JP::ReductionEntryRepayProportional;
        }

        if (_assetTransType == AssetTransType::WriteDownAdj &&
            _assetDocumentType_JP == AssetDocumentType_JP::AssetImpairment)
        {
            transType = AssetDocumentTransType_JP::Impairment;
        }

        //ARO capitalized
        if ((_assetTransType == AssetTransType::Acquisition
                || _assetTransType == AssetTransType::AcquisitionAdj)
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetRetirementObligation)
        {
            transType = AssetDocumentTransType_JP::RetirementObligationLiability;
        }

        //ARO expensed
        if (_assetTransType == AssetTransType::AssetRetirementObligationInterest_JP
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetRetirementObligation)
        {
            transType = AssetDocumentTransType_JP::RetirementObligationInterest;
        }

        //Accelerated depreciation
        if (_assetTransType == AssetTransType::ExtraordinaryDepreciation
            && _assetDocumentType_JP == AssetDocumentType_JP::AssetAcceleratedDepreciation)
        {
            transType = AssetDocumentTransType_JP::AcceleratedDepreciation;
        }
        return transType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>