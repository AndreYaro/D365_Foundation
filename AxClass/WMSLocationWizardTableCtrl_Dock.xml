<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsLocationWizardTableCtrl_Dock</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class wmsLocationWizardTableCtrl_Dock extends WMSLocationWizardTableCtrl_Location
{
    #WMSLocationDefaultData

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    boolean canUpdate()
    {
        boolean ret = super();

        if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate()       &&
            !this.wmsLocationWizardTableCtrl_Aisle().specialAisleExists())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotExistTmp</Name>
				<Source><![CDATA[
    public boolean checkNotExistTmp(
        Common      _cursor = this.buffer(),
        boolean     _onlySuper = false)
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;
        WMSLocation cursor = _cursor as WMSLocation;

        if (! super(cursor))
        {
            return false;
        }

        if (_onlySuper)
        {
            return true;
        }

        if (! localLocationWizard.wmsLocationWizardTableCtrl_Buffer().checkNotExistTmp(cursor,true))
        {
            return false;
        }

        if (! localLocationWizard.wmsLocationWizardTableCtrl_Pick().checkNotExistTmp(cursor,true))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTable</Name>
				<Source><![CDATA[
    public void doTable(boolean _useCurBuffer = false)
    {
        if (_useCurBuffer)
        {
            return;
        }

        if (! this.wmsLocationWizardTableCtrl_Aisle().parmAisleIdSpecial())
        {
            this.wmsLocationWizardTableCtrl_Aisle().parmAisleIdSpecial(WMSLocationWizardTableCtrl_Aisle::suggestSpecialAisle(this.inventLocationId()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParmTab</Name>
				<Source><![CDATA[
    /*
    This method is to be used in the wizard form to test if a parameter tabpage is enabled.
    */
    public boolean enableParmTab()
    {
        boolean ret = super();

        if (ret)
            if (!this.wmsLocationWizardTableCtrl_Aisle().specialAisleExists())
        {
            ret = false;
            if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate())
            {
                update = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDB</Name>
				<Source><![CDATA[
    protected boolean existDB()
    {
        return WMSLocation::exist(buffer.wmsLocationId, this.inventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _bufferToCheck = null)
    {
        WMSLocation bufferToCheck = _bufferToCheck as WMSLocation;
        return WMSLocationWizardTableCtrl_Dock::existThisOrCrossBuffer(this.makeTmp(),bufferToCheck,this.wmsLocationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    public void initRecord()
    {
        buffer.InventLocationId = this.inventLocationId();
        buffer.AisleId          = this.wmsLocationWizardTableCtrl_Aisle().parmAisleIdSpecial();
        buffer.wmsLocationId    = this.getKey();
        buffer.InputLocation    = buffer.wmsLocationId;
        buffer.ManualName       = NoYes::Yes;
        buffer.LocationType     = this.wmsLocationType();
        buffer.changeCheckText(#SPECIAL_AISLENO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDB</Name>
				<Source><![CDATA[
    public void insertDB()
    {
        WMSLocation         wmsLocationDB, wmsLocationFile;
        WMSAisleId          wmsAisleId;

        wmsLocationFile.setTmp();
        wmsLocationFile.setTmpData(buffer);

        ttsbegin;

        while select wmsLocationFile
            index CoordinateIdx
        {
            if (wmsAisleId != wmsLocationFile.AisleId)
            {
                this.testCreateAisle(wmsLocationFile.AisleId);
            }
            wmsAisleId = wmsLocationFile.AisleId;

            wmsLocationDB.data(wmsLocationFile);
            wmsLocationDB.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFieldId</Name>
				<Source><![CDATA[
    protected FieldId keyFieldId()
    {
        return fieldNum(WMSLocation,wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectKeyDB</Name>
				<Source><![CDATA[
    protected Common selectKeyDB()
    {
        WMSLocation             wmsLocationDB;

        select nofetch wmsLocationDB
            where wmsLocationDB.LocationType        == this.wmsLocationType()      &&
                  wmsLocationDB.InventLocationId    == this.inventLocationId();

        return wmsLocationDB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testCreateAisle</Name>
				<Source><![CDATA[
    protected void testCreateAisle(WMSAisleId _wmsAisleId, WMSAisleNo _wmsAisleNo = #SPECIAL_AISLENO, WMSSortCode wmsSortCode = 99999)
    {
        WMSAisle    wmsAisle;

        if (!WMSAisle::exist(_wmsAisleId, this.inventLocationId()))
        {
            wmsAisle.InventLocationId   = this.inventLocationId();
            wmsAisle.AisleId            = _wmsAisleId;
            wmsAisle.AisleNo            = _wmsAisleNo;
            wmsAisle.Name               = strFmt('%1, %2', this.inventLocationId(), _wmsAisleId);
            wmsAisle.SortCode           = wmsSortCode;
            wmsAisle.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildsUpdate</Name>
				<Source><![CDATA[
    protected void updateChildsUpdate()
    {
        super();
        if (!update)
        {
            if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate()       &&
                !this.wmsLocationWizardTableCtrl_Aisle().specialAisleExists())
            {
                update = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationType</Name>
				<Source><![CDATA[
    abstract WMSLocationType wmsLocationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existThisOrCrossBuffer</Name>
				<Source><![CDATA[
    static boolean existThisOrCrossBuffer(
        WMSLocation         bufferToSelect,
        WMSLocation         bufferToCheck,
        WMSLocationType     curWMSLocationType)
    {
        WMSLocation wmsLocation;

        wmsLocation = bufferToSelect;
        select firstonly wmsLocation
            where wmsLocation.wmsLocationId     == bufferToCheck.wmsLocationId      &&
                  ((bufferToCheck.LocationType  == curWMSLocationType               &&
                    wmsLocation.RecId           != bufferToCheck.RecId
                   ) ||
                   bufferToCheck.LocationType   != curWMSLocationType
                  );

        return wmsLocation.RecId
            ? true
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
    public static container getWarehouseInformation(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        return [WMSLocationWizardTableCtrl_Location::getWarehouseInformation(_inventLocationId, _wmsLocationType)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>