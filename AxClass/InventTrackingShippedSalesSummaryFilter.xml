<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingShippedSalesSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingShippedSalesSummaryFilter</c> class provides tracing hierarchy filtering for
///    the <see cref="SalesLine form"/> form.
/// </summary>
class InventTrackingShippedSalesSummaryFilter extends InventTrackingTraceSummaryFilter
{
    FormDataSource      salesTableDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilter</Name>
				<Source><![CDATA[
    public void applyFilter()
    {
        super();

        filterDataSource.queryBuildDataSource().clearLinks();
        filterDataSource.queryBuildDataSource().addLink(fieldNum(SalesLine, InventTransId), fieldNum(SalesLineTmpFilter, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionSuffix</Name>
				<Source><![CDATA[
    protected str captionSuffix()
    {
        #define.ListSeparator(', ')

        return "@SYS4004865" + #ListSeparator + tracingCriteria.captionSuffix();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    public void dataSourceInitPost()
    {
        super();

        if (!salesTableDataSource)
        {
            throw(error(error::wrongUseOfFunction(funcName())));
        }

        salesTableDataSource.joinSource(mainDataSource.id());
        salesTableDataSource.linkType(FormLinkType::InnerJoin);

        mainDataSource.queryBuildDataSource().clearDynalinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    protected TableId filterTableType()
    {
        return tableNum(SalesLineTmpFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInFilterDTO</Name>
				<Source><![CDATA[
    protected boolean includeInFilterDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        if (_inventTransOriginDTO.referenceCategory() != InventTransType::Sales)
        {
            return false;
        }

        if (_inventTransDTO.statusIssue() == StatusIssue::Deducted || _inventTransDTO.statusIssue() == StatusIssue::Sold)
        {
            return true;
        }

        if (_inventTransDTO.statusReceipt() == StatusReceipt::Received || _inventTransDTO.statusReceipt() == StatusReceipt::Purchased)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    protected void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        SalesLineTmpFilter      salesLineTmpFilter = filterTmp as SalesLineTmpFilter;

        salesLineTmpFilter.InventTransId = _inventTransOriginDTO.inventTransId();
        salesLineTmpFilter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTableDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmSalesTableDataSource(FormDataSource _salesTableDataSource = salesTableDataSource)
    {
        salesTableDataSource = _salesTableDataSource;

        return salesTableDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    protected str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        return _inventTransOriginDTO.inventTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventTrackingShippedSalesSummaryFilter construct()
    {
        return new InventTrackingShippedSalesSummaryFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingShippedSalesSummaryFilter</c> class with a given tracing hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///    The tracing hierarchy to use.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingShippedSalesSummaryFilter</c> class.
    /// </returns>
    public static InventTrackingShippedSalesSummaryFilter newHierarchy(
        InventTrackingDimTracingHierarchy   _hierarchy)
    {
        InventTrackingShippedSalesSummaryFilter filter = InventTrackingShippedSalesSummaryFilter::construct();

        filter.parmTracingHierarchy(_hierarchy);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>