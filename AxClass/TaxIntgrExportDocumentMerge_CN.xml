<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentMerge_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgrExportDocumentMerge_CN</c> handles the merge operation.
/// </summary>
class TaxIntgrExportDocumentMerge_CN extends TaxIntgrExportDocumentOperator_CN
{
    AmountCur                       totalAmount;
    RefRecId                        firstExportSourceRecId;
    TaxIntgrExportDocumentSource_CN firstExportDocumentSource;
    real                            firstSign;
    TaxCode                         firstTaxCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        protected void calculate(RefRecId _sourceRecId)
    {
        //Merge reuse existing rsult, no calculation is needed.
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOperation</Name>
				<Source><![CDATA[
    protected void doOperation(RefRecId _sourceRecId, boolean _isGenerateFromOriginalDoc = false)
    {
        TaxIntgrExportDocumentSource_CN             docSource;
        TaxIntgrExportDocument_CN                   exportDocOld;
        TaxIntgrExportDocument_CN                   exportDoc;
        TaxIntgrExportDocumentLine_CN               exportDocLine;
        TaxIntgrExportDocumentOperation_CN          operation;
        RefRecId                                    newDocRecId;
        NumberSequenceReference                     numberSequenceReference;
        UserId                                      userId = curUserId();
        utcDateTime                                 dateTime = DateTimeUtil::getSystemDateTime();
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;

        numberSequenceReference = TaxIntgrUtility_CN::numRefTaxIntgExportDocumentId();
        docSource = TaxIntgrExportDocumentSource_CN::find(firstExportSourceRecId);
        exportDoc = TaxIntgrExportDocumentManager_CN::newExportDocumentFromSource(docSource, totalAmount, numberSequenceReference);
        exportDoc.insert();
        newDocRecId = exportDoc.RecId;

        update_recordSet operation
            setting TaxIntgrExportDocument_CN = newDocRecId,
                    OperationType = TaxIntgrExportDocumentOperationType_CN::Merge,
                    OperationDateTime = dateTime,
                    OperatedBy = userId
        exists join exportDocOld
            where operation.TaxIntgrExportDocument_CN == exportDocOld.RecId
        exists join historyLine
            where historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                && historyLine.ExportDocumentId == exportDocOld.Id;

        update_recordSet exportDocLine
            setting TaxIntgrExportDocument_CN = newDocRecId
        exists join exportDocOld
            where exportDocLine.TaxIntgrExportDocument_CN == exportDocOld.RecId
        exists join historyLine
            where historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                && historyLine.ExportDocumentId == exportDocOld.Id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document amount.
    /// </summary>
    /// <returns>
    /// The document amount.
    /// </returns>
    protected AmountCur getDocumentAmount()
    {
        TaxIntgrExportDocument_CN                   exportDocument;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;

        select sum(TransactionCurrencyAmount) from exportDocument
            exists join historyLine
            where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                &&  historyLine.ExportDocumentId == exportDocument.Id;

        return exportDocument.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationType</Name>
				<Source><![CDATA[
        public TaxIntgrExportDocumentOperationType_CN getOperationType()
    {
        return TaxIntgrExportDocumentOperationType_CN::Merge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImpactedSource</Name>
				<Source><![CDATA[
        protected void initializeImpactedSource()
    {
        TaxIntgrExportDocumentSource_CN curExportDocumentSource;
        SetEnumerator                   enumerator = setOfSource.getEnumerator();

        enumerator.moveNext();
        curExportDocumentSource = TaxIntgrExportDocumentSource_CN::find(enumerator.current());

        firstExportSourceRecId = curExportDocumentSource.RecId;
        firstExportDocumentSource.data(curExportDocumentSource);
        firstSign = sign(curExportDocumentSource.TransactionCurrencyAmount);
        firstTaxCode = curExportDocumentSource.TaxCode;

        setOfImpactedSource = setOfSource;
        setOfImpactedDocument = setOfDocument;

        setOfTargetSource = new Set(Types::Int64);
        setOfTargetSource.add(firstExportSourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerInformationDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the customer information different.
    /// </summary>
    /// <returns>
    /// Trur if the customer information is different; otherwise, false.
    /// </returns>
    protected boolean isCustomerInformationDifferent()
    {
        TaxIntgrExportDocument_CN                   exportDocument;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;

        select firstOnly RecId from exportDocument
            where exportDocument.TaxCode            != firstExportDocumentSource.TaxCode
                || exportDocument.CurrencyCode      != firstExportDocumentSource.CurrencyCode
                || exportDocument.InvoiceAccount    != firstExportDocumentSource.InvoiceAccount
                || exportDocument.TaxRegistration   != firstExportDocumentSource.TaxRegistration
                || exportDocument.CustBankAccountId != firstExportDocumentSource.CustBankAccountId
        exists join historyLine
            where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                &&  historyLine.ExportDocumentId == exportDocument.Id;

        return (exportDocument.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSignDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the sign is different.
    /// </summary>
    /// <returns>
    /// Trur if the sign is different; otherwise, false.
    /// </returns>
    protected boolean isSignDifferent()
    {
        TaxIntgrExportDocument_CN                   exportDocument;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;

        if (firstExportDocumentSource.TransactionCurrencyAmount > 0)
        {
            select firstOnly RecId from exportDocument
                where exportDocument.TransactionCurrencyAmount < 0
            exists join historyLine
                where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                    &&  historyLine.ExportDocumentId == exportDocument.Id;
        }
        else if (firstExportDocumentSource.TransactionCurrencyAmount < 0)
        {
            select firstOnly RecId from exportDocument
                where exportDocument.TransactionCurrencyAmount > 0
            exists join historyLine
                where   historyLine.TaxIntgrExportDocOperationHistory_CN == historyRecId
                    &&  historyLine.ExportDocumentId == exportDocument.Id;
        }

        return (exportDocument.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        protected boolean validate()
    {
        boolean     result;

        result = super();

        if (result)
        {
            if (this.isAnyDocumentSplitOrMerged()
                || this.isAnyDocumentExported())
            {
                result = checkFailed("@SYS4002237");
            }
        }

        if (result)
        {
            totalAmount = this.getDocumentAmount();

            if (setOfSource.elements() <= 1)
            {
                result = false;
            }

            if (TaxIntgrUtility_CN::isOverAmountLimit(firstTaxCode, totalAmount))
            {
                result = checkFailed("@SYS4002240");
            }
        }

        if (result)
        {
            if (this.isCustomerInformationDifferent())
            {
                result = checkFailed("@SYS4002238");
            }
        }

        if (result)
        {
            if (this.isSignDifferent())
            {
                result = checkFailed("@SYS4002239");
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>