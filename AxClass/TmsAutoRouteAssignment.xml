<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAutoRouteAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsAutoRouteAssignment</c> class is used to assign route to a sales order.
/// </summary>
class TmsAutoRouteAssignment
{
    Common              common;
    TMSProcessXML_Base  processXML;
    TMSRouteAssignment  routeAssignment;
    RefRecId            refRecId;
    RefTableId          refTableId;
    RefRecId            parentRecId;
    InventTransType     parentInventTransType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOrderHeader</Name>
				<Source><![CDATA[
    protected Common getOrderHeader()
    {
        switch (parentInventTransType)
        {
            case InventTransType::Purch:
                return PurchTable::findRecId(parentRecId);

            case InventTransType::Sales:
                return SalesTable::findRecId(parentRecId);

            default:
                throw error(strFmt("@TRX2708", parentInventTransType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs route assignment initialized from load
    /// </summary>
    /// <param name="_loadTable">
    /// Load record used to initialize route assignemnt
    /// </param>
    protected void initFromLoadTable(WHSLoadTable _loadTable)
    {
        InventLocation          warehouse;
        WHSLoadLine             loadLine;
        WHSSTCCCode             whsSTCC;
        WHSLTLClassCode         whsLTL;
        Common                  orderHeader;
        TMSRouteTable           routeTable;
        TMSSourceDocument       tmsSourceDocument;

        refTableId = _loadTable.TableId;
        refRecId = _loadTable.RecId;

        TMSRouteTable::deleteByRefRecord(refTableId, refRecId);

        orderHeader = this.getOrderHeader();

        processXML = TMSProcessXML_Base::construct(TMSRecordType::Load);
        tmsSourceDocument = TMSSourceDocument::construct(orderHeader);
        tmsSourceDocument.initializeProcessXML(processXML);
        routeAssignment = TMSRouteAssignment::construct(TMSRecordType::Load);
        processXML.parmCommunicationType(TMSCommunicationType::Rate);
        processXML.parmRecordType(TMSRecordType::Load);

        loadLine = WHSLoadLine::findFirstForLoadId(_loadTable.LoadId);

        warehouse = InventLocation::find(loadLine.warehouse());

        [whsSTCC,
        whsLTL]     = TMSAutoRouteAssignment::findLoadSTCCandLTL(_loadTable.LoadId);

        processXML.parmId(_loadTable.LoadId);
        processXML.parmRecId(_loadTable.RecId);

        tmsSourceDocument.initializeAddressesOnTMSProcessXML(processXML, TMSAddressPhone::initFromInventLocation(warehouse));

        processXML.initCarrierFields(_loadTable.CarrierCode, _loadTable.CarrierServiceCode, _loadTable.CarrierGroupCode, _loadTable.ModeCode, _loadTable.TransportationTemplateId);

        processXML.parmInventSiteId(warehouse.InventSiteId);
        processXML.parmInventLocationId(warehouse.InventLocationId);
        processXML.parmLTLClass(whsLTL);
        processXML.parmSTCC(whsSTCC);
        processXML.parmDlvDateTime(_loadTable.LoadArrivalUTCDateTime);
        processXML.parmShipDateTime(_loadTable.LoadSchedShipUTCDateTime);

        processXML.parmParentRecId(parentRecId);
        processXML.parmParentInventTransType(parentInventTransType);

        processXML.initShippingDimensions(
            _loadTable.effectiveGrossWeight(),
            _loadTable.effectiveTotalVolumeInLoad(),
            _loadTable.displayTotalAmount(),
            _loadTable.tmsDisplayEquipmentCode());

        processXML.execute();

        select firstonly routeTable
            order by routeTable.ModifiedDateTime desc
            where routeTable.createdBy  == curUserId()
               && routeTable.RefRecId   == orderHeader.RecId
               && routeTable.RefTableId == orderHeader.TableId;

        routeAssignment.parmRouteTable(routeTable);
        routeAssignment.parmCommon(_loadTable);
        routeAssignment.assignRoute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    protected void initFromSalesTable(SalesTable _salesTable)
    {
        TMSSalesTable           tmsSalesTable = TMSSalesTable::find(_salesTable.SalesId);
        InventLocation          warehouse;
        Weight                  totalWeight;
        Volume                  totalVolume;
        WHSSTCCCode             whsSTCC;
        WHSLTLClassCode         whsLTL;
        WHSLoadLine             loadLine;
        int                     counter;
        TMSRouteTable           routeTable;
        int                     time = timeMax();
        TMSSourceDocument       tmsSourceDocument;

        while select loadLine
            group by LoadId
            where loadLine.OrderNum         == _salesTable.SalesId
               && loadLine.InventTransType  == InventTransType::Sales
               && loadLine.TransportRequest == NoYes::No
        {
            ++counter;
        }

        if (counter == 1)
        {
            select firstonly loadLine
                where loadLine.OrderNum         == _salesTable.SalesId
                   && loadLine.InventTransType  == InventTransType::Sales
                   && loadLine.TransportRequest == NoYes::No;

            parentRecId = _salesTable.RecId;
            parentInventTransType = InventTransType::Sales;
            this.initFromLoadTable(loadLine.whsLoadTable());
        }
        else
        {
            refTableId = _salesTable.TableId;
            refRecId = _salesTable.RecId;

            TMSRouteTable::deleteByRefRecord(refTableId, refRecId);

            processXML = TMSProcessXML_Base::construct(TMSRecordType::Sales);
            tmsSourceDocument = TMSSourceDocument::construct(_salesTable);
            TMSSourceDocument.initializeProcessXML(processXML);
            routeAssignment = TMSRouteAssignment::construct(TMSRecordType::Sales);
            processXML.parmCommunicationType(TMSCommunicationType::Rate);
            processXML.parmRecordType(TMSRecordType::Sales);

            warehouse = InventLocation::find(_salesTable.InventLocationId);

            [whsSTCC,
            whsLTL] = TMSAutoRouteAssignment::findSalesSTCCandLTL(_salesTable.SalesId);

            processXML.parmId(_salesTable.SalesId);
            processXML.parmRecId(_salesTable.RecId);

            tmsSourceDocument.initializeAddressesOnTMSProcessXML(processXML, TMSAddressPhone::initFromInventLocation(warehouse));

            processXML.initCarrierFields(tmsSalesTable.CarrierCode, tmsSalesTable.CarrierServiceCode, tmsSalesTable.CarrierGroupCode, tmsSalesTable.ModeCode, tmsSalesTable.TransportationTemplateId);

            processXML.parmInventSiteId(warehouse.InventSiteId);
            processXML.parmInventLocationId(warehouse.InventLocationId);
            processXML.parmLTLClass(whsLTL);
            processXML.parmSTCC(whsSTCC);
            processXML.parmDlvDateTime(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(_salesTable.ReceiptDateRequested, time), DateTimeUtil::getCompanyTimeZone()));

            [totalWeight, totalVolume] = _salesTable.totalWeightAndVolume();

            processXML.initShippingDimensions(
                totalWeight,
                totalVolume,
                _salesTable.amountInvoiced() + _salesTable.amountOrderedNotInvoiced() + TMSRateRoute::calcMiscCharges(_salesTable.SalesId, TMSMiscCharges::SalesOrder),
                '');
            processXML.execute();

            select firstonly routeTable
                order by routeTable.ModifiedDateTime desc
                where routeTable.createdBy  == curUserId()
                   && routeTable.RefRecId   == _salesTable.RecId
                   && routeTable.RefTableId == _salesTable.TableId;

            routeAssignment.parmRouteTable(routeTable);
            routeAssignment.parmCommon(_salesTable);
            routeAssignment.assignRoute();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    Common parmCommon(Common _common)
    {
        if (_common)
        {
            common = _common;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
	/// Runs auto route assignment for a selected sales record.
	/// </summary>
    void run()
    {
        SalesTable  salesTable;

        switch (common.TableId)
        {
            case tableNum(SalesTable):
                salesTable = common;
                this.initFromSalesTable(salesTable);
                break;

            default:
                throw error("@SYS82774");
        }

        info("@TRX895");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSAutoRouteAssignment construct()
    {
        return new TMSAutoRouteAssignment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadSTCCandLTL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks at all of the load lines for a given load and checks to see if they have the same or multiple LTL (Less than Truckload) and STCC (Standard Transportation Commodity Code) codes.
    /// </summary>
    /// <param name="_loadId">
    /// The record ID of the <c>WHSLoadTable</c> record.
    /// </param>
    /// <returns>
    /// If all load lines have the codes - the codes are returned
    /// If there are multiple codes of one type - empty codes are returned.
    /// </returns>
    public static container findLoadSTCCandLTL(WHSLoadId _loadId)
    {
        WHSSTCCCode     retSTCC;
        WHSLTLClassCode retLTL;
        WHSLoadLine     loadLine;
        boolean         multipleSTCC;
        boolean         multipleLTL;

        while select ItemId from loadLine
            where loadLine.LoadId == _loadId
        {
            [retSTCC, retLTL, multipleSTCC, multipleLTL] = TMSAutoRouteAssignment::iterateSTCCandLTL(loadLine.ItemId, retSTCC, retLTL, multipleSTCC, multipleLTL);
        }

        return [retSTCC, retLTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchSTCCandLTL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks at all of the load lines for a given load and checks to see if they have the same or multiple LTL (Less than Truckload) and STCC (Standard Transportation Commodity Code) codes.
    /// </summary>
    /// <param name="_purchId">
    /// The record ID of the <c>PurchTable</c> record.
    /// </param>
    /// <returns>
    /// If all load lines have the codes - the codes are returned
    /// If there are multiple codes of one type - empty codes are returned.
    /// </returns>
    public static container findPurchSTCCandLTL(PurchId _purchId)
    {
        WHSSTCCCode     retSTCC;
        WHSLTLClassCode retLTL;
        PurchLine       purchLine;
        boolean         multipleSTCC;
        boolean         multipleLTL;

        while select ItemId from purchLine
            where purchLine.PurchId == _purchId
        {
            [retSTCC, retLTL, multipleSTCC, multipleLTL] = TMSAutoRouteAssignment::iterateSTCCandLTL(purchLine.ItemId, retSTCC, retLTL, multipleSTCC, multipleLTL);
        }

        return [retSTCC, retLTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesSTCCandLTL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks at all of the load lines for a given load and checks to see if they have the same or multiple LTL (Less than Truckload) and STCC (Standard Transportation Commodity Code) codes.
    /// </summary>
    /// <param name="_salesId">
    /// The record ID of the <c>SalesTable</c> record.
    /// </param>
    /// <returns>
    /// If all load lines have the codes - the codes are returned
    /// If there are multiple codes of one type - empty codes are returned.
    /// </returns>
    public static container findSalesSTCCandLTL(SalesId _salesId)
    {
        WHSSTCCCode     retSTCC;
        WHSLTLClassCode retLTL;
        SalesLine       salesLine;
        boolean         multipleSTCC;
        boolean         multipleLTL;

        while select ItemId from salesLine
            where salesLine.SalesId == _salesId
        {
            [retSTCC, retLTL, multipleSTCC, multipleLTL] = TMSAutoRouteAssignment::iterateSTCCandLTL(salesLine.ItemId, retSTCC, retLTL, multipleSTCC, multipleLTL);
        }

        return [retSTCC, retLTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShipSTCCandLTL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks at all of the load lines for a given load and checks to see if they have the same or multiple LTL (Less than Truckload) and STCC (Standard Transportation Commodity Code) codes.
    /// </summary>
    /// <param name="_shipmentId">
    /// The record ID of the <c>WHSShipmentTable</c> record.
    /// </param>
    /// <returns>
    /// If all load lines have the codes - the codes are returned
    /// If there are multiple codes of one type - empty codes are returned.
    /// </returns>
    public static container findShipSTCCandLTL(WHSShipmentId _shipmentId)
    {
        WHSSTCCCode     retSTCC;
        WHSLTLClassCode retLTL;
        WHSLoadLine     loadLine;
        boolean         multipleSTCC;
        boolean         multipleLTL;

        while select ItemId from loadLine
            where loadLine.ShipmentId == _shipmentId
        {
            [retSTCC, retLTL, multipleSTCC, multipleLTL] = TMSAutoRouteAssignment::iterateSTCCandLTL(loadLine.ItemId, retSTCC, retLTL, multipleSTCC, multipleLTL);
        }

        return [retSTCC, retLTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateSTCCandLTL</Name>
				<Source><![CDATA[
    protected static container iterateSTCCandLTL(
        ItemId          _itemId,
        WHSSTCCCode     _stcc,
        WHSLTLClassCode _ltl,
        boolean         _multipleSTCC,
        boolean         _multipleLTL)
    {
        WHSSTCCCode                         whsstcc;
        WHSLTLClassCode                     ltl;
        WHSEcoResProductTransportationCodes whsCodes;

        whsCodes = WHSEcoResProductTransportationCodes::findByItemId(_itemId);
        whsstcc  = whsCodes.stccCode;
        ltl      = WHSNMFC::find(whsCodes.nmfcCode).ltlClassCode;

        if (!_multipleSTCC)
        {
            if (_stcc != '' && _stcc != whsstcc)
            {
                _stcc = '';
                _multipleSTCC = true;
            }
            else if (_stcc == '')
            {
                _stcc  = whsstcc;
            }
        }

        if (!_multipleLTL)
        {
            if (_ltl != '' && _ltl != ltl)
            {
                _ltl = '';
                _multipleLTL = true;
            }
            else if (_ltl == '')
            {
                _ltl  = ltl;
            }
        }

        return [_stcc, _ltl, _multipleSTCC, _multipleLTL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TMSAutoRouteAssignment autoRouteAssignment = TMSAutoRouteAssignment::construct();

        if (_args != null
            && _args.record())
        {
            autoRouteAssignment.parmCommon(_args.record());
            autoRouteAssignment.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>