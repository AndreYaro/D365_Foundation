<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMTable_BOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class manages the form controls for the ingredient lines on the <c>BOMTable</c> form
/// </summary>
class PmfFormCtrl_BOMTable_BOM extends PmfFormCtrl_BOMConsistOf_BOM
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the buffer as a typed BOM record
    /// </summary>
    /// <returns>
    /// The buffer as a BOM record
    /// </returns>
    protected BOM bom()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the validation for deleting
    /// a record on the form datasource.
    /// </summary>
    /// <returns>
    /// Result of validation.
    /// True if record can be deleted.
    /// </returns>
    public boolean dataSourceValidateDelete()
    {
        boolean ret = super();
        ret = ret && this.isDeleteRefCompensationPrinciplesOk();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle the lookup for fields on the BOM record
    /// </summary>
    /// <param name="_fieldId">
    /// The field id of the field to do the lookup for
    /// </param>
    /// <param name="_formControl">
    /// The form control that initiates the form lookup
    /// </param>
    /// <param name="_filterStr">
    /// an additional filter to consider for the lookup
    /// </param>
    public void fieldLookup(
        fieldId         _fieldId,
        FormControl     _formControl,
        str             _filterStr)
    {
        boolean handled = true;

        switch (_fieldId)
        {
            case fieldnum(BOM, ItemId) :
                PmfInventLookupItemIdByDefaultOrder::newLookupCtrl(_formControl, false, PmfProductType::MainItem, InventItemLookupDefaultTab::TabProduction).run();
                handled = true;
                break;

            case fieldnum(BOM, ItemBOMId) :
                BOM bom = this.bom();
                if (this.isFormulaEnabled())
                {
                    InventTable::lookupFormulaId(
                        _formControl,
                        bom.ItemId,
                        this.parmInventDim());
                }
                else
                {
                    InventTable::lookupBOMId(
                        _formControl,
                        bom.ItemId,
                        this.parmInventDim());
                }

                handled = true;
                break;
            default :
                // break;
        }

        if (!handled)
        {
            super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifiy fields of form BOMTable of BOM data source.
    /// </summary>
    /// <param name="_fieldId">
    /// BOM data source field identifier.
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do some additional field validations for fields on the BOM record
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to validate
    /// </param>
    /// <returns>
    /// true, if the validation succeeds
    /// </returns>
    public boolean fieldValidate(fieldId _fieldId)
    {
        BOM bom = this.bom();
        boolean ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldnum(BOM, ItemId):
                    if (!this.isFormulaEnabled() && PdsGlobal::pdsIsCWItem(bom.ItemId))
                    {
                        ret = checkFailed("@PDS138");
                    }

                    break;

                default:
                    //break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form is initialized
    /// </summary>
    /// <remarks>
    /// The method initializes the button manager for several controls on the form
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an exception, if the form run has not been set for the class
    /// </exception>
    public void initPost()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        const str isFormulaEnabledMethodStr = methodStr(PmfFormCtrl_BOMTable_BOM, isFormulaEnabled);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, BOMLineIdentificationDetails)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::Caption, "@PRO1115");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, ItemType)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, Position)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO1008");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, BOM_FromDate)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, checkGroupBOMVisible),
                ButtonRuleEffectType::HelpText,
                "@PRO1009");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, BOM_ToDate)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, checkGroupBOMVisible),
                ButtonRuleEffectType::HelpText,
                "@PRO1024");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, Consumption)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, Calculation)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO990");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, ItemBOMId)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO1023");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, ItemBOMId)),
                methodstr(PmfFormCtrl, isPmfEnabled),
                ButtonRuleEffectType::Label,
                "@PRO140");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, ConsumptionCalculate_ScrapConst)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO1028");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, MeasureConfig)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, checkMeasureConfigVisible),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, BOMRouteCopyJob)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO316");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, Sorting)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO129");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, Check)),
                isFormulaEnabledMethodStr,
                ButtonRuleEffectType::HelpText,
                "@PRO531");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable,PDSPotencyIngredients)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, isPotencyFormulaEnabled),
                ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup
                (formRun.design().controlName(formcontrolstr(BOMTable, PDSActiveQty)),
                methodStr(PmfFormCtrl_BOMConsistOf_BOM, isPotencyFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable,PDSBatchAttribTransfer)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, isLotGenealogyFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable,PDSGenealogy)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOM, isLotGenealogyFormulaEnabled),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPdsCatchWeightCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPdsCatchWeightCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, BOM_PdsCWUnitId)),
                methodstr(PmfFormCtrl_BOMTable_BOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        BOM         callerBOM;
        BOMVersion  callerBOMVersion;
        BOMTable    callerBOMTable;
        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(BOM) :
                callerBOM = common;
                ret = callerBOM.inventTable().isFormulaAllowed();
                break;
            case tablenum(BOMVersion) :
                callerBOMVersion = common;
                ret = callerBOMVersion.inventTable().isFormulaAllowed();
                break;
            case tablenum(BOMTable) :
                callerBOMTable = common;
                ret = callerBOMTable.PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            default:
                ret = (this.menuItemName() == menuitemdisplaystr(PmfFormulaTable)
                    || this.menuItemName() == menuitemdisplaystr(PmfFormulaTableHeader));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBOMFormulaSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the change of the of formula size on the version
    /// </summary>
    public void modifiedBOMFormulaSize()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMTable_BOM construct()
    {
        return new PmfFormCtrl_BOMTable_BOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMTable_BOM newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMTable_BOM::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>