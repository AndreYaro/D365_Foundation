<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSContainerPrintReturnShippingLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSContainerPrintReturnShippingLabel</c> class is used for printing the return shipping labels for Small Parcel Shipping scenarios.
/// </summary>
internal static class TMSContainerPrintReturnShippingLabel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        WHSContainerTable containerTable = TMSContainerPrintReturnShippingLabel::callerContainerTable(_args.record());

        if (containerTable.RecId)
        {
            WHSCloseContainerProfile closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

            if (closeContainerProfile.RecId)
            {
                TMSContainerPrintReturnShippingLabel::printContainerReturnShippingLabel(containerTable, closeContainerProfile);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerContainerTable</Name>
				<Source><![CDATA[
    private static WHSContainerTable callerContainerTable(Common _callerRecord)
    {
        WHSContainerTable containerTable;

        if (_callerRecord is WHSContainerTable)
        {
            containerTable = _callerRecord as WHSContainerTable;
        }
        else if (_callerRecord is WHSReturnDetail)
        {
            WHSReturnDetail returnDetail = _callerRecord as WHSReturnDetail;
            containerTable = WHSContainerTable::findByContainerId(returnDetail.ContainerId);
        }

        return containerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printContainerReturnShippingLabel</Name>
				<Source><![CDATA[
    internal static void printContainerReturnShippingLabel(
        WHSContainerTable           _containerTable,
        WHSCloseContainerProfile    _closeContainerProfile)
    {
        if (!_containerTable.ShipCarrierTrackingNum)
        {
            throw error("@TRX:NoShippingTrackingNumberFound");
        }
        
        if (!_closeContainerProfile.ContainerShippingLabelPrinterName)
        {
            throw error("@TRX:NoPrinterConfiguredForPrintingContainerLabel");
        }

        TMSRouteSegmentContainer routeSegmentContainer = _containerTable.findRouteSegmentContainer();

        if (routeSegmentContainer.ContainerReturnShippingLabel)
        {
            TMSPrintContainerShippingLabel printShippingContainerLabel = TMSPrintContainerShippingLabel::createInstance(routeSegmentContainer.ContainerReturnShippingLabelType);
            printShippingContainerLabel.printLabel(_closeContainerProfile.ContainerShippingLabelPrinterName, routeSegmentContainer.ContainerReturnShippingLabel);

            if (WHSReturnDetailUpdatePrintedUTCDateTimeFlight::instance().isEnabled())
            {
                ttsbegin;
                WHSReturnDetail::findForContainerId(_containerTable.ContainerId, true).updatePrintedUTCDateTime();
                ttscommit;
            }
        }
        else
        {
            throw error("@TRX:NoContainerReturnShippingLabelFound");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>