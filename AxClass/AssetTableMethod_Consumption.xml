<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Consumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableMethod_Consumption extends AssetTableMethod
{
    boolean                 firstDepreciationCalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates consumption amount.
    /// </summary>
    /// <returns>
    /// Consumption amount for a given period.
    /// </returns>
    public AssetAmount calc()
    {
        if (isReportingCurrencyDepreciation)
        {
            return assetBook.roundOffDepreciationReportingCurrency(CurrencyExchange::round(this.calcQty() *
                                                assetBook.DepreciationAmountUnitReportingCurrency, this.getCurrencyCode()));
        }
        else
        {
            return assetBook.roundOffDepreciation(CurrencyExchange::round(this.calcQty() *
                                                assetBook.DepreciationAmountUnit, this.getCurrencyCode()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates consumption amount for a given period either using consumption quantity or percentage factor.
    /// </summary>
    /// <returns>
    /// Consumption amount for a given period.
    /// </returns>
    /// <remarks>
    /// If Consumption Quantity is defined in <c>AssetConsumptionFactor</c> table for a given period, Quantity amount is used for calculation.
    /// Otherwise, Percentage factor is used instead.
    /// </remarks>
    public AssetConsumptionQty calcQty()
    {
        AssetConsumptionQty      assetConsumptionQty;

        if (AssetConsumptionFactor::fixedConsumption(assetBook.consumptionFactorId, depreciationDate))
        {
            assetConsumptionQty = this.calculateFixedConsumption();     // Calculate fixed consumption.
        }
        else
        {
            assetConsumptionQty = this.calculateFactorConsumption();    // Calculate factor consumption.
        }

        this.setAmountToDepreciate(depreciationDate);

        if (assetBook.depreciationAmountUnit > 0 &&
            assetBook.getAcquisitionAmountSign() * (assetConsumptionQty * assetBook.depreciationAmountUnit) 
                > assetBook.getAcquisitionAmountSign() * (amountToDepreciate - prevDepAmount))
        {
            assetConsumptionQty = (amountToDepreciate - prevDepAmount) / assetBook.depreciationAmountUnit;
        }

        prevDepAmount += CurrencyExchange::round(assetConsumptionQty * assetBook.depreciationAmountUnit, this.getCurrencyCode());

        return assetConsumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFactorConsumption</Name>
				<Source><![CDATA[
    private AssetAmount calculateFactorConsumption()
    {
        AssetConsumptionQty     consumptionQty;

        consumptionQty = TmpAssetConsumptionProposal::calculateConsumption(assetBook.assetId,
                                                                           assetBook.bookId,
                                                                           depreciationDate,
                                                                           firstDepreciationCalculated,
                                                                           (assetBudgetModelId ? true : false));

        if (!assetBook.lastDepreciationDate && !firstDepreciationCalculated)
        {
             firstDepreciationCalculated = true;
        }

        return consumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFixedConsumption</Name>
				<Source><![CDATA[
    private AssetAmount calculateFixedConsumption()
    {
        return TmpAssetConsumptionProposal::calculateConsumption(assetBook.assetId,
                                                                 assetBook.bookId,
                                                                 depreciationDate,
                                                                 false,
                                                                 (assetBudgetModelId ? true : false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (parmRunDate < baseDate)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (! depreciationDate || depreciationDate > parmRunDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date for the depreciation
    /// </summary>
    public void setDepDate()
    {
        if (!depreciationDate)
        {
            depreciationDate = assetBook.lastDepreciationDate ? assetBook.lastDepreciationDate + 1 : (assetBook.depreciationStartDate);
        }

        depreciationDate = AssetConsumptionFactorLines::findNextDate(assetBook.consumptionFactorId, depreciationDate + 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>