<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EePermissionChangesLogController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class invokes the appropriate EEPermissionChangesLog report based on the user selection.
/// </summary>
public class EePermissionChangesLogController extends SrsReportRunController implements BatchRetryable
{
    const str userRoleChangeLogReportName = 'EePermissionChangesLog.UserRole';
    const str securityRightsChangeLogReportName = 'EePermissionChangesLog.SecurityRights';
    const str parameterReportView = 'ReportView';
    const str parameterUserId = 'UserId';
    const str parameterFromDate = 'FromDate';
    const str parameterToDate = 'ToDate';
    const str parameterQueriedByUserName = 'QueriedByUserName';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        Query query = this.getFirstQuery();
        QueryBuildDataSource qbds;

        RefRecId organizationId = CompanyInfo::current();
        UserId userId = rdlContract.getParameter(parameterUserId).getValueTyped();
        date fromDate = rdlContract.getParameter(parameterFromDate).getValueTyped();
        date toDate = rdlContract.getParameter(parameterToDate).getValueTyped();
        PermissionChangesLogReportView reportView = rdlContract.getParameter(parameterReportView).getValueTyped();

        switch (reportView)
        {
            case PermissionChangesLogReportView::User :
                this.parmReportContract().parmReportName(userRoleChangeLogReportName);

                qbds = query.dataSourceTable(tableNum(EeUserRoleChangeLog));

                //Set range on Organization to only include records associated with the current company this includes where the organization is ALL companies which is represented in data as 0.
                qbds.addRange(fieldNum(EeUserRoleChangeLog, OMInternalOrganization)).value(SysQuery::value(0));
                qbds.addRange(fieldNum(EeUserRoleChangeLog, OMInternalOrganization)).value(SysQuery::value(organizationId));

                qbds.addRange(fieldNum(EeUserRoleChangeLog, UserId)).value(SysQuery::value(userId));

                SrsReportHelper::addFromAndToDateRangeToQuery(
                    query,
                    fromDate,
                    ToDate,
                    tableNum(EeUserRoleChangeLog),
                    fieldNum(EeUserRoleChangeLog, createdDateTime));

                //We do not want records from the security rights change log for this view create a range which will result in no records selected set range on user id.
                qbds = query.dataSourceTable(tableNum(EeSecurityRightsUpdateLog));
                qbds.addRange(fieldNum(EeSecurityRightsUpdateLog, RecId)).value(SysQuery::value(0));

                break;

            case PermissionChangesLogReportView::Permissions:
                this.parmReportContract().parmReportName(securityRightsChangeLogReportName);

                qbds = query.dataSourceTable(tableNum(EeSecurityRightsUpdateLog));

                //Set range on Organization to only include records associated with the current company this includes where the organization is ALL companies which is represented in data as 0.
                qbds.addRange(fieldNum(EeSecurityRightsUpdateLog, OMInternalOrganization)).value(SysQuery::value(0));
                qbds.addRange(fieldNum(EeSecurityRightsUpdateLog, OMInternalOrganization)).value(SysQuery::value(organizationId));

                qbds.addRange(fieldNum(EeSecurityRightsUpdateLog, UserId)).value(SysQuery::value(userId));

                SrsReportHelper::addFromAndToDateRangeToQuery(
                    query,
                    fromDate,
                    ToDate,
                    tableNum(EeSecurityRightsUpdateLog),
                    fieldNum(EeSecurityRightsUpdateLog, AccessChangedDateTime));

                qbds.addOrderByField(fieldNum(EeSecurityRightsUpdateLog, AccessChangedDateTime), SortOrder::Ascending);

                //We do not want records from the user role change log for this view create a range which will result in no records selected.
                qbds = query.dataSourceTable(tableNum(EeUserRoleChangeLog));
                qbds.addRange(fieldNum(EeUserRoleChangeLog, RecId)).value(SysQuery::value(0));

                QueryRun qr = new QueryRun(query);
                while (qr.next())
                {
                    EESecurityRightsUpdateLog eESecurityRightsUpdateLog = qr.getNo(2);
                    if (eESecurityRightsUpdateLog.RecId && !eESecurityRightsUpdateLog.PreviousAccessType)
                    {
                        this.initPreviousAccessType(eESecurityRightsUpdateLog);
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>EePermissionChangesLogController</c> instance.
    /// </summary>
    /// <param name="_args">
    /// Arguments that define how the controller is initialized.
    /// </param>
    /// <returns>
    /// A permission changes log controller.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The arguments are missing.
    /// </exception>

    public static EePermissionChangesLogController construct(Args _args)
    {
        EePermissionChangesLogController controller = new EePermissionChangesLogController();

        if (!_args)
        {
            throw error(Error::missingParameter(null));
        }

        //Hook one of the reports to get the data contract which is shared by both reports.
        controller.parmReportName(securityRightsChangeLogReportName);

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        const str FeatureReference = 'EE-00012';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        EePermissionChangesLogController::construct(args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreviousAccessType</Name>
				<Source><![CDATA[
    void initPreviousAccessType(EESecurityRightsUpdateLog _eESecurityRightsUpdateLog)
    {
        EESecurityRightsUpdateLog eESecurityRightsUpdateLogLocal;

        select firstonly eESecurityRightsUpdateLogLocal order by eESecurityRightsUpdateLogLocal.AccessChangedDateTime desc
            where eESecurityRightsUpdateLogLocal.AccessChangedDateTime < _eESecurityRightsUpdateLog.AccessChangedDateTime
            && eESecurityRightsUpdateLogLocal.OMInternalOrganization == _eESecurityRightsUpdateLog.OMInternalOrganization
            && eESecurityRightsUpdateLogLocal.SecurityRole == _eESecurityRightsUpdateLog.SecurityRole
            && eESecurityRightsUpdateLogLocal.UserId == _eESecurityRightsUpdateLog.UserId
            && eESecurityRightsUpdateLogLocal.SecurityPrivilege == _eESecurityRightsUpdateLog.SecurityPrivilege
            && eESecurityRightsUpdateLogLocal.ResourceType == _eESecurityRightsUpdateLog.ResourceType
            && eESecurityRightsUpdateLogLocal.ResourceName == _eESecurityRightsUpdateLog.ResourceName;

        ttsbegin;
        _eESecurityRightsUpdateLog.selectForUpdate(true);
        _eESecurityRightsUpdateLog.PreviousAccessType = eESecurityRightsUpdateLogLocal.RecId ? eESecurityRightsUpdateLogLocal.AccessType : AccessRight::NoAccess;
        _eESecurityRightsUpdateLog.Update();
        ttscommit;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>