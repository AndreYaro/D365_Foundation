<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerPackingDimensionsProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSContainerPackingDimensionsProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deriveMissingUnambiguousProductDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on provided product dimensions and <c>WHSTmpPackingLine</c> (what is available for packing)
    /// derive remaining unambiguous product dimensions.
    /// E.g. if color == red and we have 2 tmpPackLines [(red, small), (blue, small)] we can derive that size to pack is 'small'.
    /// </summary>
    /// <param name = "_tmpPackingLine"><c>WHSTmpPackingLine</c> buffer.</param>
    /// <param name = "_itemId">Item to pack.</param>
    /// <param name = "_specifiedProductInventDim">InventDim with known dimensions.</param>
    /// <returns><c>InventDim</c> buffer with the product dimensions which could be derived based on provided ones.</returns>
    [Hookable(false)]
    internal static InventDim deriveMissingUnambiguousProductDims(
        WHSTmpPackingLine _tmpPackingLine,
        ItemId _itemId,
        InventDim _specifiedProductInventDim)
    {
        if (InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_itemId, _specifiedProductInventDim))
        {
            return _specifiedProductInventDim;
        }

        List productDimList = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields();
        if (productDimList.empty())
        {
            return _specifiedProductInventDim;
        }

        Map distinctProductFieldValues = WHSContainerPackingDimensionsProvider::getDistinctProductFieldValues(_tmpPackingLine, _itemId, productDimList, _specifiedProductInventDim);

        return WHSContainerPackingDimensionsProvider::getUnambiguousProductDimensions(distinctProductFieldValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctProductFieldValues</Name>
				<Source><![CDATA[
    private static Map getDistinctProductFieldValues(
        WHSTmpPackingLine _tmpPackingLine,
        ItemId _itemId,
        List _productDimList,
        InventDim _specifiedProductInventDim)
    {
        InventDim inventDimCriteria;
        InventDim inventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_specifiedProductInventDim);

        Map productFieldValues = new Map(Types::Integer, Types::Class);

        while select _tmpPackingLine
            group by _tmpPackingLine.InventDimId
            where _tmpPackingLine.ItemId == _itemId
            && _tmpPackingLine.QtyRemaining > 0
            #InventDimExistsJoin(_tmpPackingLine.inventDimId, inventDim, _specifiedProductInventDim, inventDimParm)
        {
            InventDim packLineInventDim = InventDim::find(_tmpPackingLine.InventDimId);
            ListEnumerator le = _productDimList.getEnumerator();

            while (le.moveNext())
            {
                FieldId fieldId = le.current();
                var fieldValue = packLineInventDim.(fieldId);
                WHSContainerPackingDimensionsProvider::updateMap(productFieldValues, fieldId, fieldValue);
            }
        }

        return productFieldValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnambiguousProductDimensions</Name>
				<Source><![CDATA[
    private static InventDim getUnambiguousProductDimensions(Map _distinctProductFieldValues)
    {
        InventDim updatedProductInventDim;
        MapEnumerator en = new MapEnumerator(_distinctProductFieldValues);
        while (en.moveNext())
        {
            FieldId fieldId = en.currentKey();
            Set values = en.currentValue();

            if (values.elements() == 1)
            {
                SetEnumerator setEnum = values.getEnumerator();
                setEnum.moveNext();
                updatedProductInventDim.(fieldId) = setEnum.current();
            }
        }

        return InventDim::findOrCreate(updatedProductInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMap</Name>
				<Source><![CDATA[
    private static void updateMap(Map _variantsForPack, FieldId _fieldId, anyType _fieldValue)
    {
        Set fieldValues = _variantsForPack.exists(_fieldId)
            ? _variantsForPack.lookup(_fieldId)
            : new Set(Types::AnyType);

        fieldValues.add(_fieldValue);
        _variantsForPack.add(_fieldId, fieldValues);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>