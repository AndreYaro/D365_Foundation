<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplSettleDynamicAdv_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplSettleDynamicAdv_RU extends EmplSettleDynamic_RU
{
    EmplAdvanceId_RU    advanceId;
    EmplAdvTable_RU     advTable;
    EmplAccount_RU      emplAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initSettleTrans</Name>
				<Source><![CDATA[
        public void initSettleTrans()
    {
        EmplSettlement_RU   staticSettle, debitStaticSettle;
        EmplTrans_RU        creditEmplTrans, creditEmplTrans2;
        boolean             zeroPoint, zeroPointConditions = false;
        TransDate           zeroDate;
        EmplAdvanceId_RU    zeroAdvanceId;

        super();

        while select RecId, TransDate, AdvanceId from creditEmplTrans
            order by TransDate desc, AdvanceId desc
            where creditEmplTrans.AmountMST         <  0.0
               && creditEmplTrans.SettleAmountCur   != 0.0
               && creditEmplTrans.EmplAccount       == emplAccount
        {
            if (creditEmplTrans.TransDate < advTable.TransDate && ! zeroPointConditions)
            {
                zeroPointConditions = true;
                while select RecId, TransDate, AdvanceId from creditEmplTrans2
                    order by TransDate desc, AdvanceId desc
                    where creditEmplTrans2.AmountMST    <  0.0
                       && creditEmplTrans2.TransDate    <  advTable.TransDate
                       && creditEmplTrans2.EmplAccount  == emplAccount
                {
                    zeroPoint = true;
                    while select DebitRecId from debitStaticSettle
                        where debitStaticSettle.CreditRecId == creditEmplTrans2.RecId
                    {
                        select firstonly RecId from transSettle
                            where transSettle.DebitRecId == debitStaticSettle.DebitRecId;

                        if (transSettle)
                        {
                            zeroPoint = false;
                            break;
                        }
                    }

                    if (zeroPoint)
                    {
                        zeroDate = creditEmplTrans2.TransDate;
                        zeroAdvanceId = creditEmplTrans2.AdvanceId;
                        break;
                    }
                }
            }

            if (zeroPointConditions                     &&
                creditEmplTrans.TransDate <= zeroDate   &&
                ((zeroAdvanceId   && creditEmplTrans.AdvanceId < zeroAdvanceId) ||
                 (! zeroAdvanceId && ! creditEmplTrans.AdvanceId)))
            {
                break;
            }

            while select staticSettle
                where staticSettle.CreditRecId == creditEmplTrans.RecId
            {
                transSettle.data(staticSettle);
                transSettle.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceId</Name>
				<Source><![CDATA[
        public EmplAdvanceId_RU parmAdvanceId(EmplAdvanceId_RU _advanceId = advanceId)
    {
        if (_advanceId != advanceId)
        {
            advanceId   = _advanceId;
            advTable    = EmplAdvTable_RU::find(advanceId);
            if (! advTable)
                throw error(EmplAdvTable_RU::txtNotExist(), _advanceId);

            toDate      = maxdate();
            emplAccount = advTable.EmplAccount;
        }
        return advanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleNow</Name>
				<Source><![CDATA[
        public void settleNow(EmplAccount_RU _onlyEmplAccount = '')
    {
        super(emplAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>