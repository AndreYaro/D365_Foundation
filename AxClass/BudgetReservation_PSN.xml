<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservation_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservation_PSN</c> class provides information for a budget reservation document.
/// </summary>
public class BudgetReservation_PSN
{
    public static const str GBRPostCacheNameSuffix = ' - Posting';

    BudgetReservationHeader_PSN budgetReservationHeader;
    BudgetReservationRecId_PSN currentBudgetReservationRecId;
    AccountingDate sessionDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the header buttons on the budget reservation form.
    /// </summary>
    /// <param name="_formRun">
    /// The form calling this method.
    /// </param>    
    public void enableHeaderButtons(FormRun _formRun)
    {
        boolean isDocumentDraft;
        boolean isDocumentReferenced;
        boolean isBudgetReservationEnabled;
        boolean isDocumentPosted;
        boolean isDocumentEditable;
        boolean hasDocumentBeenPosted;

        FormDataSource budgetReservationHeader_PSN_ds = _formRun.dataSource(formDataSourceStr(BudgetReservation_PSN, BudgetReservationHeader_PSN));
    
        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BudgetReservation_PSN));
        Debug::assert(budgetReservationHeader_PSN_ds != null);
    
        isDocumentDraft             = this.isDocumentDraft();
        isDocumentReferenced        = this.isBudgetReservationReferenced();
        isBudgetReservationEnabled  = PublicSectorUtils::isBudgetReservationEnabled();
        isDocumentPosted            = this.isDocumentPosted();
        hasDocumentBeenPosted       = this.hasBudgetResDocumentEverBeenPosted();
        isDocumentEditable          = this.canEditDocument();
            
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, BudgetReservationPost_PSN))).enabled(isBudgetReservationEnabled && this.canPostDocument());
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, BudgetReservationCancel_PSN))).enabled(isBudgetReservationEnabled && (isDocumentPosted || hasDocumentBeenPosted) && !isDocumentReferenced);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, ViewSummary))).enabled(!isDocumentDraft);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, BudgetReservationFinalize))).enabled(isBudgetReservationEnabled && this.parmBudgetReservationHeader().canFinalizeDocument());
        budgetReservationHeader_PSN_ds.allowDelete(isBudgetReservationEnabled && isDocumentEditable && !isDocumentPosted && !hasDocumentBeenPosted);
        budgetReservationHeader_PSN_ds.allowEdit(isBudgetReservationEnabled && isDocumentEditable);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, ledgerTransVoucher))).enabled(isBudgetReservationEnabled && (this.isDocumentFinalized() || hasDocumentBeenPosted));
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, budgetReservationNew))).enabled(isBudgetReservationEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables header and line fields on the budget reservation form based on document status.
    /// </summary>
    /// <param name="_budgetReservationHeaderDS">
    /// The budget reservation header form data source.
    /// </param>
    /// <param name="_budgetReservationLineDS">
    /// The budget reservation line form data source.
    /// </param>
    public void enableHeaderLineFields(
        FormDataSource _budgetReservationHeaderDS,
        FormDataSource _budgetReservationLineDS)
    {
        BudgetReservationLine_PSN   budgetReservationLine;
        SourceDocumentLine          sourceDocumentLine;
        SourceDocumentHeader        sourceDocumentHeader;
    
        boolean isPurchReqSetOnLine;
        boolean isDocumentFinalized;
        boolean isLineDraft;
        boolean isLinePosted;
        boolean isLineFinalized;
        boolean isLineReferenced;
        boolean isLineFullyDistributed;
        boolean enablePurchReqReferenceOnLine;
        boolean isDocumentEditable;
        boolean hasDocumentBeenPosted;
        boolean isSourceDocumentComplete;
        boolean isProjectIdSetOnLine;
        boolean enableLedgerDimensionFieldOnLine;
        boolean isItemTypeProjectCategory;
        boolean isDocumentPosted;
        boolean hasBudgetResLineBeenThroughYearEnd;
    
        if (_budgetReservationLineDS == null
            || !(_budgetReservationLineDS.cursor() is BudgetReservationLine_PSN))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        hasDocumentBeenPosted               = this.hasBudgetResDocumentEverBeenPosted();
        budgetReservationLine               = _budgetReservationLineDS.cursor() as BudgetReservationLine_PSN;
        hasBudgetResLineBeenThroughYearEnd  = budgetReservationLine.hasLineBeenThroughYearEnd();
        sourceDocumentLine                  = SourceDocumentLine::find(budgetReservationLine.SourceDocumentLine);
        sourceDocumentHeader                = sourceDocumentHeader::find(sourceDocumentLine.SourceDocumentHeader);
    
        isPurchReqSetOnLine         = budgetReservationLine.PurchReqLine != 0;
        isProjectIdSetOnLine        = budgetReservationLine.ProjId != '';
        isDocumentFinalized         = this.isDocumentFinalized();
        isLineFinalized             = sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized;
        isLineFullyDistributed      = sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed;
        isLineReferenced            = budgetReservationLine.isLineReferenced();
        isLineDraft                 = sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft;
        isLinePosted                = budgetReservationLine.isPosted();
        isDocumentEditable          = this.canEditDocument();
        isSourceDocumentComplete    = sourceDocumentHeader.AccountingStatus == SourceDocumentAccountingStatus::Completed;
        isItemTypeProjectCategory   = ProjCategory::find(budgetReservationLine.ProjCategoryId).CategoryType == ProjCategoryType::Item;
        isDocumentPosted            = this.isDocumentPosted();
        boolean isLineReferencedByPurchaseOrder = budgetReservationLine.isLineReferencedByPurchaseOrder();
        boolean isLineReferencedByPurchaseRequisition = budgetReservationLine.isLineReferencedByPurchaseRequisition();
    
        enablePurchReqReferenceOnLine    =
            this.parmBudgetReservationHeader().RelievingDocumentType != BudgetReservationRelievingDocument_PSN::PurchaseRequisition
            && (isLineDraft || isLineFullyDistributed) && isDocumentEditable;
        enableLedgerDimensionFieldOnLine =
            !isPurchReqSetOnLine
            && !isProjectIdSetOnLine
            && !hasBudgetResLineBeenThroughYearEnd;
    
        // Budget reservation header fields.
        if (BudgetParameters::find().UseSessionDateForAccounting == NoYes::Yes)
        {
            _budgetReservationHeaderDS.object(fieldNum(BudgetReservationHeader_PSN, AccountingDate)).allowEdit(false);
        }
        else
        {
            _budgetReservationHeaderDS.object(fieldNum(BudgetReservationHeader_PSN, AccountingDate)).allowEdit(isDocumentEditable);
        }

        _budgetReservationHeaderDS.object(fieldNum(BudgetReservationHeader_PSN, DocumentTitle)).allowEdit(isDocumentEditable && !isLineReferenced && !hasDocumentBeenPosted);
        _budgetReservationHeaderDS.object(fieldNum(BudgetReservationHeader_PSN, BudgetReservationType_PSN)).allowEdit(false);
        _budgetReservationHeaderDS.object(fieldNum(BudgetReservationHeader_PSN, RelievingDocumentType)).allowEdit(isDocumentEditable);
    
        // Budget reservation line fields.
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, PurchReqLine)).allowEdit(enablePurchReqReferenceOnLine);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, LedgerDimension)).allowEdit(enableLedgerDimensionFieldOnLine);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, LedgerDimension)).mandatory(enableLedgerDimensionFieldOnLine);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProcurementCategory)).allowEdit((!isPurchReqSetOnLine) && isProjectIdSetOnLine && isItemTypeProjectCategory);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProcurementCategory)).mandatory((!isPurchReqSetOnLine) && isProjectIdSetOnLine && isItemTypeProjectCategory);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjSalesUnitId)).mandatory(isProjectIdSetOnLine);
    
        // Header and line allow edit.
        _budgetReservationHeaderDS.allowEdit(isDocumentEditable);
        _budgetReservationHeaderDS.allowCreate(false);
        _budgetReservationLineDS.allowEdit(!isLineReferenced && !isLineFinalized && isDocumentEditable && !isLineReferencedByPurchaseOrder && !isLineReferencedByPurchaseRequisition);
        _budgetReservationLineDS.allowCreate(isDocumentEditable);
        _budgetReservationLineDS.allowDelete(!isLinePosted && isDocumentEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables line buttons on the budget reservation form.
    /// </summary>
    /// <param name="_formRun">
    /// The form calling this method
    /// </param>
    /// <param name="_budgetReservationLine">
    /// The current <c>BudgetReservationLine_PSN</c> object used to determine line state.
    /// </param>    
    public void enableLineButtons(
        FormRun                    _formRun,
        BudgetReservationLine_PSN  _budgetReservationLine)
    {
        boolean isCanceled;
        boolean isDraft;
        boolean isCommittedCostEnabled;
        SourceDocumentHeader    sourceDocumentHeader = _budgetReservationLine.parmSourceDocumentHeader();
    
        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BudgetReservation_PSN));
    
        isCanceled              = this.isDocumentCanceled();
        isDraft                 = this.isDocumentDraft();
        isCommittedCostEnabled  = _budgetReservationLine.ProjId != '';
    
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, LineBudgetCheckResultsButton))).enabled(!isCanceled);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, BudgetReservationLineFinancialSummary))).enabled(!isDraft);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, BudgetReservationRelievingLineDetail))).enabled(!isDraft);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, FinalizeLine))).enabled(_budgetReservationLine.canFinalizeLine());
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, LineCommittedCost))).enabled(isCommittedCostEnabled);
        _formRun.control(_formRun.controlId(formControlStr(BudgetReservation_PSN, RenumberLines))).enabled(this.canEditDocument() && !this.hasBudgetResDocumentEverBeenPosted());
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableProjFieldsIfPurchReqReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the project fields based on whether a purchase requisition is referenced by the passed in budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLineDS">
    /// The budget reservation line form data source.
    /// </param>
    public void disableProjFieldsIfPurchReqReferenced(FormDataSource _budgetReservationLineDS)
    {
        boolean                     isPurchReqReferenced;
        BudgetReservationLine_PSN   budgetReservationLine;
    
        if (_budgetReservationLineDS == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetReservationLine = _budgetReservationLineDS.cursor();
    
        isPurchReqReferenced = budgetReservationLine.PurchReqLine != 0;
    
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjId)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjId)).skip(isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjCategoryId)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjCategoryId)).skip(isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ActivityNumber)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ActivityNumber)).skip(isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjLinePropertyId)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjLinePropertyId)).skip(isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjTaxGroupId)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjTaxGroupId)).skip(isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjTaxItemGroupId)).allowEdit(!isPurchReqReferenced);
        _budgetReservationLineDS.object(fieldNum(BudgetReservationLine_PSN, ProjTaxItemGroupId)).skip(isPurchReqReferenced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the budget reservation document.
    /// </summary>
    /// <param name="_cancelDate">
    /// The date to cancel; optional
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error on an empty buffer.
    /// </exception>
    public void cancelDocument(TransDate _cancelDate = dateNull())
    {
        #define.Paragraph("\n\n")
    
        BudgetReservationLine_PSN     budgetReservationLineLocal;
        BudgetReservationPost_PSN     budgetReservationPost;
        BudgetReservationFinalize_PSN budgetReservationFinalize;
        str                           strMessage = "@Budgeting_BudgetReservationPS:BudgetReservation_Cancel" + #Paragraph + "@SYS73804";
    
        if (currentBudgetReservationRecId == 0)
        {
            throw error(Error::missingRecord(funcName()));
        }
    
        if (Box::yesNo(strMessage, DialogButton::No) == DialogButton::Yes)
        {
            ttsbegin;
    
            this.selectBudgetReservationHeaderForUpdate();
    
            this.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::DocumentCancel, false);
    
            budgetReservationHeader.CancelDate = _cancelDate;
    
            budgetReservationHeader.update();
    
            budgetReservationLineLocal.skipDataMethods(true);
    
            update_recordset budgetReservationLineLocal
                setting
                    Quantity   = 0,
                    UnitPrice  = 0,
                    LineAmount = 0
                where
                    budgetReservationLineLocal.BudgetReservationHeader_PSN == budgetReservationHeader.RecId;
    
            if (_cancelDate != dateNull())
            {
                budgetReservationFinalize = BudgetReservationFinalize_PSN::newForBudgetReservationDocument(budgetReservationHeader, _cancelDate);
            }
            else
            {
                budgetReservationFinalize = BudgetReservationFinalize_PSN::newForBudgetReservationDocument(budgetReservationHeader, budgetReservationHeader.AccountingDate);
            }
    
            if (budgetReservationHeader.CarriedForwardBudgetTransactionHeader)
            // reduce carried forward budget in the new year.
            {
                budgetReservationFinalize.reduceCarryForwardTransactions();
            }
    
            budgetReservationPost = BudgetReservationPost_PSN::newFromBudgetReservationHeader_PSN(budgetReservationHeader);
            budgetReservationPost.runOperation();
    
            ttscommit;
    
            // Finalize all associated purchase requisition lines.
            budgetReservationHeader.finalizePurchaseRequisitionLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document can be edited.
    /// </summary>
    /// <returns>
    /// true if the document can be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Document should always be disabled when the document status has an enum value of draft and workflow status has an enum value of in review.
    /// The only exception to the above scenario is when the workflow is at request change and the user is the
    /// person assigned by the approver or reviewer.
    /// </remarks>
    public boolean canEditDocument()
    {
        boolean isEditable = false;
    
        isEditable = PublicSectorUtils::isBudgetReservationEnabled() && !this.isDocumentCanceled() && !this.isDocumentFinalized();
    
        // Note that the document should remain editable when the document status and workflow status is posted.
        isEditable =
            isEditable
            && (!(this.isDocumentDraft()
                    && this.isWorkflowInReview())
                || (this.parmBudgetReservationHeader().isWorkflowAtRequestChange()
                    && this.isDocumentDraft()
                    && this.isWorkflowInReview()));
    
        return isEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Post button should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Post button should be enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Post button is enabled when the workflow is disabled and the document status enum value is draft and
    /// workflow status enum value is draft
    /// or when the workflow is enabled and document status enum value is approved and
    /// workflow status enum value is completed.
    /// </remarks>
    public boolean canPostDocument()
    {
        boolean isPostEnabled = false;
    
        isPostEnabled = PublicSectorUtils::isBudgetReservationEnabled() && this.hasLines();
    
        isPostEnabled = isPostEnabled
            && (((!this.parmBudgetReservationHeader().isWorkflowEnabled()
                    && this.isWorkflowDraft())
                || (this.parmBudgetReservationHeader().isWorkflowEnabled()
                    && this.isWorkflowCompleted()
                    && this.isDocumentApproved())));
    
        return isPostEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetReservationLinesFromPurchaseRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the budget reservation lines from the purchase requisition lines.
    /// </summary>
    /// <param name="_purchReqId">
    /// The record ID of the <c>PurchReqTable</c> table to be used when creating budget reservation line records.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The wrong use of function error is thrown if the purchase requisition ID is not provided.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The validation fail exception is thrown if any of the budget reservation line fails the validation.
    /// </exception>
    public void createBudgetReservationLinesFromPurchaseRequisition(PurchReqId _purchReqId)
    {
        PurchReqLine                purchReqLine;
        PurchReqTable               purchReqTable;
        BudgetReservationLine_PSN   localBudgetReservationLine;
        RecordInsertList            recordInsertListBudgetReservationLine;
        RefRecId                    purchReqTableRecId;

        if (_purchReqId == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        recordInsertListBudgetReservationLine = new RecordInsertList(tableNum(BudgetReservationLine_PSN));
    
        try
        {
            ttsbegin;
    
            while select RecId from purchReqTable
                where purchReqTable.PurchReqId == _purchReqId
                join purchReqLine
                    where purchReqLine.PurchReqTable        == purchReqTable.RecId
                        && purchReqLine.RequisitionStatus   == PurchReqRequisitionStatus::Approved
            {
                purchReqTableRecId = purchReqTable.RecId;

                if (purchReqLine.BudgetReservationLine_PSN == 0)
                {
                    localBudgetReservationLine.clear();
                    localBudgetReservationLine.initValue();
                    localBudgetReservationLine.initFromPurchReqLine(purchReqLine);
                    localBudgetReservationLine.BudgetReservationHeader_PSN = budgetReservationHeader.RecId;
    
                    if (localBudgetReservationLine.validateWrite())
                    {
                        recordInsertListBudgetReservationLine.add(localBudgetReservationLine);
                    }
                    else
                    {
                        throw error(strFmt("@Budgeting_BudgetReservationPS:BudgetReservationClassPurchaseRequisitionError", _purchReqId, purchReqLine.LineNum, purchReqLine.itemName()));
                    }
                }
                else
                {
                    warning(strFmt("@Budgeting_BudgetReservationPS:BudgetReservationClassPRLinesReferencedOnAnotherGBRError", _purchReqId, purchReqLine.LineNum, purchReqLine.itemName()));
                }
            }
    
            recordInsertListBudgetReservationLine.insertDatabase();
            PurchReqLine::updatePurchaseRequisitionStatusToReferencedByBudgetReservation(budgetReservationHeader.RecId);

            if (purchReqTableRecId)
            {
                // Update purchase requisition header status.
                purchReqWFStatusTransitionHelper::setPurchReqTableByBudgetReservationReference(purchReqTableRecId);
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendarYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal calendar year based on the accounting date of the current budget reservation.
    /// </summary>
    /// <returns>
    /// Returns the fiscal calendar year based on the accounting date of the current budget reservation.
    /// </returns>
    public FiscalCalendarYear getFiscalCalendarYear()
    {
        FiscalCalendarYear  fiscalCalendarYear;
    
        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(
            Ledger::fiscalCalendar(CompanyInfo::current()),
            budgetReservationHeader.AccountingDate);
    
        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the next line number based on the line numbers for the current budget reservation.
    /// </summary>
    /// <returns>
    /// The next line number for the current budget reservation.
    /// </returns>
    public BudgetReservationLineNumber_PSN getNextLineNumber()
    {
        BudgetReservationLine_PSN       budgetReservationLine_PSN;
        BudgetReservationLineNumber_PSN newLineNumber;
        int                             lineNumberIncrement = SystemParameters::find().SystemLineNumberIncrement;
    
        // If system paramter is not set, initialize it to 1.
        if (lineNumberIncrement == 0)
        {
            lineNumberIncrement = 1;
        }
    
        select maxof(LineNumber) from budgetReservationLine_PSN
            where budgetReservationLine_PSN.BudgetReservationHeader_PSN == budgetReservationHeader.RecId;
    
        //
        // Divide the max number by the increment and get the integer value. This represents the number of times the line number has been incremented.
        // Next, multiply that by the increment to get the actual max line number increment. Finally, add the increment amount.
        // Example: (int)26/10 = 2.  2x10=20. 20+10=30.
        //
        newLineNumber = real2int(budgetReservationLine_PSN.LineNumber / lineNumberIncrement) * lineNumberIncrement + lineNumberIncrement;
    
        return newLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetResDocumentBeenThroughYearEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current document has been processed by the Year End process.
    /// </summary>
    /// <returns>
    /// true if the document has been through the year end process at least once; otherwise, false.
    /// </returns>
    public boolean hasBudgetResDocumentBeenThroughYearEnd()
    {
        AccountingEvent accountingEventYearEndOpen;
        boolean         hasYearEndOpeningAccountingEvent = false;
    
        accountingEventYearEndOpen = AccountingEvent::findByAccountingEventType(
            budgetReservationHeader.SourceDocumentHeader,
            AccountingEventType::PeriodOpen);
    
        hasYearEndOpeningAccountingEvent = accountingEventYearEndOpen.RecId != 0;
    
        return hasYearEndOpeningAccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetResDocumentEverBeenPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current document has ever been posted.
    /// </summary>
    /// <returns>
    /// true if the document has been posted at least once; otherwise, false.
    /// </returns>
    public boolean hasBudgetResDocumentEverBeenPosted()
    {
        AccountingEvent accountingEventOriginal;
        boolean         hasOriginalAccountingEvent = false;
    
        accountingEventOriginal = AccountingEvent::findByAccountingEventType(
            budgetReservationHeader.SourceDocumentHeader,
            AccountingEventType::Original);
    
        hasOriginalAccountingEvent = accountingEventOriginal.RecId != 0;
    
        return hasOriginalAccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation has lines associated with it.
    /// </summary>
    /// <returns>
    /// true if the budget reservation has lines; otherwise, false.
    /// </returns>    
    public boolean hasLines()
    {
        BudgetReservationLine_PSN   budgetReservationLine_PSN;
    
        select firstonly RecId from budgetReservationLine_PSN
            where budgetReservationLine_PSN.BudgetReservationHeader_PSN == budgetReservationHeader.RecId;
    
        return budgetReservationLine_PSN.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any line on the budget reservation document is referenced.
    /// </summary>
    /// <returns>
    /// true if any line on the budget reservation document is referenced; otherwise, false.
    /// </returns>    
    public boolean isBudgetReservationReferenced()
    {
        AccountingDistribution  accountingDistributionBudgetReservation;
        AccountingDistribution  referenceAccountingDistribution;
    
        select firstonly RecId from accountingDistributionBudgetReservation
            where accountingDistributionBudgetReservation.SourceDocumentHeader == budgetReservationHeader.SourceDocumentHeader
            exists join referenceAccountingDistribution
                where referenceAccountingDistribution.ReferenceDistribution == accountingDistributionBudgetReservation.RecId
                    && referenceAccountingDistribution.ReferenceRole        == AccountingDistributionReferenceRole::Matching;
    
        return (accountingDistributionBudgetReservation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is approved.
    /// </summary>
    /// <returns>
    /// true if the document is approved; otherwise, false.
    /// </returns>    
    public boolean isDocumentApproved()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Approved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is canceled.
    /// </summary>
    /// <returns>
    /// true if the document is canceled; otherwise, false.
    /// </returns>    
    public boolean isDocumentCanceled()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is draft.
    /// </summary>
    /// <returns>
    /// true if the document is draft; otherwise, false.
    /// </returns>    
    public boolean isDocumentDraft()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentFinalized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is finalized.
    /// </summary>
    /// <returns>
    /// true if the document is finalized; otherwise, false.
    /// </returns>    
    public boolean isDocumentFinalized()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Finalized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is posted.
    /// </summary>
    /// <returns>
    /// true if the document is posted; otherwise, false.
    /// </returns>    
    public boolean isDocumentPosted()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentRejected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document status is rejected.
    /// </summary>
    /// <returns>
    /// true if the document is rejected; otherwise, false.
    /// </returns>    
    public boolean isDocumentRejected()
    {
        return (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Rejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowCompleted</Name>
				<Source><![CDATA[
    // </PubSect
    /// <summary>
    /// Checks if the budget reservation document has a workflow status of Completed.
    /// </summary>
    /// <returns>
    /// true if the workflow status is Completed; otherwise, false.
    /// </returns>    
    public boolean isWorkflowCompleted()
    {
        return (budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document has a workflow status of Draft.
    /// </summary>
    /// <returns>
    /// true if the workflow status is Draft; otherwise, false.
    /// </returns>    
    public boolean isWorkflowDraft()
    {
        return (budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowInReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document has a workflow status of in review.
    /// </summary>
    /// <returns>
    /// true if the workflow status is In review; otherwise, false.
    /// </returns>    
    public boolean isWorkflowInReview()
    {
        return (budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::InReview);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation document has a workflow status of Posted.
    /// </summary>
    /// <returns>
    /// true if the workflow status is Posted; otherwise, false.
    /// </returns>    
    public boolean isWorkflowPosted()
    {
        return (budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Posted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationHeader</Name>
				<Source><![CDATA[
    public BudgetReservationHeader_PSN parmBudgetReservationHeader(BudgetReservationHeader_PSN _budgetReservationHeader = budgetReservationHeader)
    {
        budgetReservationHeader         = _budgetReservationHeader;
        currentBudgetReservationRecId   = budgetReservationHeader.RecId;
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSessionDate(AccountingDate _sessionDate = sessionDate)
    {
        sessionDate = _sessionDate;

        return sessionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBudgetCheckOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs budget checks for the current budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// A <c>BudgetReservationLine_PSN</c> record to check for budget.
    /// </param>    
    public void performBudgetCheckOnLine(BudgetReservationLine_PSN _budgetReservationLine)
    {
        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(_budgetReservationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectBudgetReservationHeaderForUpdate</Name>
				<Source><![CDATA[
    private void selectBudgetReservationHeaderForUpdate()
    {
        if (!budgetReservationHeader.selectForUpdate())
        {
            select firstonly forupdate budgetReservationHeader
                    where budgetReservationHeader.RecId == currentBudgetReservationRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total line amount in accounting currency for a budget reservation.
    /// </summary>
    /// <returns>
    /// Sum of all the line amounts in accounting currency.
    /// </returns>
    /// <remarks>
    /// This method uses the system date for getting the exchange rate that is used in the currency conversion.
    /// </remarks>
    public Total totalLineAmount()
    {
        BudgetReservationLine_PSN   budgetReservationLine;
        CurrencyExchangeHelper      currencyExchangeHelper;
        Amount                      totalLineAmount;
    
        currencyExchangeHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
    
        while select sum (LineAmount), Currency from budgetReservationLine
            group by Currency
                where budgetReservationLine.BudgetReservationHeader_PSN == budgetReservationHeader.RecId
        {
            totalLineAmount += currencyExchangeHelper.calculateTransactionToAccounting(
                budgetReservationLine.Currency,
                budgetReservationLine.LineAmount,
                true);
        }
    
        return totalLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatusFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget reservation document status and workflow status fields based on the document action that has been taken.
    /// </summary>
    /// <param name="_budgetReservationDocumentAction">
    /// The document action that has been taken.
    /// </param>
    /// <param name="_writeChanges">
    /// true if the record should be updated; otherwise, false.
    /// </param>    
    public void updateDocumentStatusFields(
        BudgetReservationDocumentAction_PSN     _budgetReservationDocumentAction,
        boolean                                 _writeChanges = true)
    {
        ttsbegin;

        if (_writeChanges && budgetReservationHeader && !budgetReservationHeader.selectForUpdate())
        {
            this.selectBudgetReservationHeaderForUpdate();
        }
    
        //
        // If any changes are made to the states below please make sure to check
        // all locations that this method is called from and ensure those locations that use
        // the enum that has been modified will still be set to valid states.
        //
        switch (_budgetReservationDocumentAction)
        {
            case BudgetReservationDocumentAction_PSN::WorkflowSubmit :
                budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::InReview;
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Draft;
                break;
    
            case BudgetReservationDocumentAction_PSN::WorkflowRecall :
                budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Draft;
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Draft;
                break;
    
            case BudgetReservationDocumentAction_PSN::WorkflowComplete :
                budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Completed;
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Approved;
                break;
    
            case BudgetReservationDocumentAction_PSN::WorkflowReject :
                budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Draft;
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Rejected;
                break;
    
            case BudgetReservationDocumentAction_PSN::DocumentEdit :
                if (budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted
                    && budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Posted)
                {
                    budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Draft;
                    if (BudgetReservationDocumentEditStatusFlight::instance().isEnabled())
                    {
                        budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Draft;
                    }
                }
                else if (this.isDocumentApproved() && this.isWorkflowCompleted())
                {
                    budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Draft;
                    budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Draft;
                }
                break;
    
            case BudgetReservationDocumentAction_PSN::DocumentCancel :
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Canceled;
                budgetReservationHeader.WorkflowStatus = BudgetReservationWorkflowStatus_PSN::Posted;
                break;
    
            case BudgetReservationDocumentAction_PSN::DocumentPost :
                if (budgetReservationHeader.DocumentStatus != BudgetReservationDocumentStatus_PSN::Canceled)
                {
                    budgetReservationHeader.DocumentStatus  = BudgetReservationDocumentStatus_PSN::Posted;
                    budgetReservationHeader.WorkflowStatus  = BudgetReservationWorkflowStatus_PSN::Posted;
                }
                break;
    
            case BudgetReservationDocumentAction_PSN::DocumentFinalize :
                budgetReservationHeader.DocumentStatus = BudgetReservationDocumentStatus_PSN::Finalized;
                break;
        }
    
        if (_writeChanges && budgetReservationHeader)
        {
            budgetReservationHeader.update(false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCheckOnBudgetResLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget check of all the budget reservation line records for a given budget reservation table record.
    /// </summary>
    /// <param name="_budgetReservationHeader">
    /// The <c>BudgetReservationHeader_PSN</c> table record to evaluate.
    /// </param>
    /// <returns>
    /// true if the budget check is validated successfully; otherwise, false.
    /// </returns>    
    public boolean validateBudgetCheckOnBudgetResLines(BudgetReservationHeader_PSN _budgetReservationHeader)
    {
        BudgetReservationLine_PSN   budgetReservationLine;
        BudgetCheckResult           budgetCheckResult;
        boolean                     isValid = true;
        AccountingDate              originalBudgetDate;

        while select * from budgetReservationLine
            where budgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationHeader.RecId
        {
            ttsBegin;

            if (this.parmSessionDate())
            {
                originalBudgetDate = BudgetReservation_PSN::updateBudgetCheckDate(budgetReservationLine, this.parmSessionDate());
            }

            //
            // Set the accounting date to the session date to validate the budget based on the
            // current session date
            //
            this.performBudgetCheckOnLine(budgetReservationLine);

            if (this.parmSessionDate() != dateNull())
            {
                BudgetReservation_PSN::updateBudgetCheckDate(budgetReservationLine, originalBudgetDate);
            }

            ttsCommit;

           budgetCheckResult = BudgetReservation_PSN::getBudgetCheckResult(budgetReservationLine);
    
            if (budgetCheckResult == BudgetCheckResult::Failed)
            {
                isValid = false;
                break;
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEffectivePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a period from start date to end date.
    /// </summary>
    /// <returns>
    /// true if the period is valid; otherwise, false.
    /// </returns>    
    public boolean validateEffectivePeriod()
    {
        boolean isValid = true;
    
        if (budgetReservationHeader.EndDate
            && budgetReservationHeader.StartDate
            && budgetReservationHeader.StartDate > budgetReservationHeader.EndDate)
        {
            isValid = checkFailed("@SYS302117");
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetReservationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the remaining balance on a budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of the budget reservation line to check.
    /// </param>
    /// <param name="_draftRelievingSourceDocumentHeaderRecId">
    /// The record ID of the draft document referencing the budget reservation line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The transaction amount exceeds the available balance of the line for the budget reservation document.
    /// </exception>    
    public static void checkBudgetReservationBalance(
        BudgetReservationLineRecId_PSN  _budgetReservationLineRecId,
        SourceDocumentHeaderRecId       _draftRelievingSourceDocumentHeaderRecId)
    {
        boolean doValidateBudgetReservationBalance = true;

        if (BudgetReservationCheckForGBRRelievingDocTypeFlight::instance().isEnabled())
        {
            doValidateBudgetReservationBalance = BudgetReservation_PSN::matchSourceDocumentBudgetReservationType(_budgetReservationLineRecId, _draftRelievingSourceDocumentHeaderRecId);
        }

        if (doValidateBudgetReservationBalance)
        {
            BudgetReservationHeader_PSN  budgetReservationHeaderLocal;
            BudgetReservationLine_PSN    budgetReservationLineLocal;
    
            if (BudgetReservationCalculateBalance_PSN::getBudgetReservationLineTotalBalance(
                _budgetReservationLineRecId, _draftRelievingSourceDocumentHeaderRecId) < 0)
            {
                select firstonly BudgetReservationHeader_PSN from budgetReservationLineLocal
                    where budgetReservationLineLocal.RecId == _budgetReservationLineRecId
                join RecId, DocumentNumber from budgetReservationHeaderLocal
                    where budgetReservationHeaderLocal.RecId == budgetReservationLineLocal.BudgetReservationHeader_PSN;
    
                throw error(strFmt("@Budgeting_BudgetReservationPS:BudgetReservationClassAmountExceedsBalanceInfolog", budgetReservationHeaderLocal.DocumentNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSourceDocumentBudgetReservationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if given source document relieving document type match with the budget reservation line relieving type.
    /// </summary>
    /// <param name = "_budgetReservationLineRecId">
    /// The record ID of the budget reservation line.
    /// </param>
    /// <param name = "_draftRelievingSourceDocumentHeaderRecId">
    /// The record ID of the draft document referencing the budget reservation line.
    /// </param>
    /// <returns>
    /// true if the relieving type of the source document matches that of the budget reservation line.
    /// </returns>
    private static boolean matchSourceDocumentBudgetReservationType(
        BudgetReservationLineRecId_PSN  _budgetReservationLineRecId,
        SourceDocumentHeaderRecId       _sourceDocumentHeaderRecId)
    {
        if (_budgetReservationLineRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        SourceDocumentHeader sourceDocumentHeaderLocal =  SourceDocumentHeader::find(_sourceDocumentHeaderRecId);
        BudgetReservationRelievingDocument_PSN relievingDocumentType = BudgetReservationHeader_PSN::findByLine(_budgetReservationLineRecId).RelievingDocumentType;

        switch (relievingDocumentType)
        {
            case BudgetReservationRelievingDocument_PSN::PurchaseOrder:

                if (!(sourceDocumentHeaderLocal.TypeEnumName == enumStr(SourceDocument_ProductOrder) &&
                    sourceDocumentHeaderLocal.TypeEnumValue == SourceDocument_ProductOrder::PurchaseOrder))
                {
                    return false;
                }
                break;

            case BudgetReservationRelievingDocument_PSN::PurchaseRequisition:

                if (!(sourceDocumentHeaderLocal.TypeEnumName == enumStr(SourceDocument_ProductRequisition) &&
                    sourceDocumentHeaderLocal.TypeEnumValue == SourceDocument_ProductRequisition::PurchaseRequisition))
                {
                    return false;
                }
                break;

            case BudgetReservationRelievingDocument_PSN::VendorInvoice:

                if (!(sourceDocumentHeaderLocal.TypeEnumName == enumStr(SourceDocument_VendorInvoice) &&
                    sourceDocumentHeaderLocal.TypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice))
                {
                    return false;
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRelievingDocumentTypesMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified expected relieving document type matches the relieving document type of the specified budget reservation header.
    /// </summary>
    /// <param name="_expectedRelievingDocument">
    /// The relieving document type that the specified budget reservation header is expected to have.
    /// </param>
    /// <param name="_currentBudgetReservationHeader">
    /// The budget reservation header to match the relieving document type for.
    /// </param>
    /// <returns>
    /// true if the specified relieving document type is the same as the relieving document type of the specified budget reservation header.
    /// </returns>    
    private static boolean doRelievingDocumentTypesMatch(BudgetReservationRelievingDocument_PSN _expectedRelievingDocument, BudgetReservationHeader_PSN _currentBudgetReservationHeader)
    {
        return _expectedRelievingDocument == _currentBudgetReservationHeader.RelievingDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetResForPurchLineSourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified source document line or its top parent line has any accounting distributions that reference
    /// a budget reservation source document line's accounting distributions.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the source document line to check.
    /// </param>
    /// <returns>
    /// true if the source document line or its top parent has any accounting distributions that reference
    /// a budget reservation source document line's accounting distributions; otherwise, false.
    /// </returns>    
    public static boolean existBudgetResForPurchLineSourceDocLine(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        AccountingDistribution      referencedDistribution;
        AccountingDistribution      accountingDistribution;
        SourceDocumentLine          topParentSourceDocumentLine;
        BudgetReservationLine_PSN   budgetReservationLine;
        PurchLine                   purchLine;
        boolean                     isReferencingBudgetReservation = false;
    
        // Find the parent source document line for child lines, such as tax, charges, etc. as they should also be partially relieved when the
        // purchase order line has a budget reservation associated with it.
        if (_sourceDocumentLineRecId)
        {
            topParentSourceDocumentLine  = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineRecId);
    
            if (topParentSourceDocumentLine)
            {
                purchLine = PurchLine::findBySourceDocumentLine(topParentSourceDocumentLine.RecId);
            }
        }
    
        if (purchLine.BudgetReservationLine_PSN)
        {
            select RecId from accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId
            exists join budgetReservationLine
                where budgetReservationLine.RecId == purchLine.BudgetReservationLine_PSN
            exists join referencedDistribution
                where referencedDistribution.SourceDocumentLine == budgetReservationLine.SourceDocumentLine
                    && referencedDistribution.RecId == accountingDistribution.ReferenceDistribution
                    && accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching;
    
            isReferencingBudgetReservation = (accountingDistribution.RecId != 0);
        }
    
        return isReferencingBudgetReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the <c>BudgetReservationLine_PSN</c> record.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// A <c>BudgetReservationLine</c> table record used for the budget check result.
    /// </param>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated by the query.
    /// </returns>    
    public static BudgetCheckResult getBudgetCheckResult(BudgetReservationLine_PSN _budgetReservationLine)
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(_budgetReservationLine.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number sequence ID.
    /// </summary>
    /// <param name="_budgetReservationTypeRecId">
    /// The record ID of the <c>BudgetReservationType_PSN</c> table record to return the number sequence ID for.
    /// </param>
    /// <returns>
    /// The number sequence ID associated with the specified budget reservation type record, if associated; otherwise, the number sequence ID associated with the budget parameters record.
    /// </returns>    
    public static RefRecId getNumberSequenceId(BudgetReservationTypeRecId_PSN _budgetReservationTypeRecId)
    {
        RefRecId numberSequenceId;
    
        if (_budgetReservationTypeRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else
        {
            numberSequenceId = BudgetReservationType_PSN::find(_budgetReservationTypeRecId).NumberSequenceTable;
    
            if (!numberSequenceId)
            {
                numberSequenceId = BudgetParameters::numRefBudgetReservation_PSN().NumberSequenceId;
            }
        }
    
        return numberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetControlEnabledForBudgetRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control has been enabled for budget reservations.
    /// </summary>
    /// <returns>
    /// true if budget control has been enabled for budget reservations; otherwise, false.
    /// </returns>    
    public static boolean isBudgetControlEnabledForBudgetRes()
    {
        LedgerRecId ledgerRecId = Ledger::current();
    
        return Ledger::isLedgerBudgetControlEnabled(ledgerRecId)
            && BudgetControlConfiguration::isSourceIntegratorEnabled(ledgerRecId, BudgetControlSourceIntegrator::BudgetReservation_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetResHeaderStatusPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the header status of the specified budget reservation header record has a workflow and document status of posted.
    /// </summary>
    /// <param name="_budgetReservationHeader">
    /// The budget reservation header record to check the document status and workflow status for.
    /// </param>
    /// <returns>
    /// true if the workflow status and document status of the specified budget reservation header record is posted.
    /// </returns>    
    private static boolean isBudgetResHeaderStatusPosted(BudgetReservationHeader_PSN _budgetReservationHeader)
    {
        if (BudgetReservationCheckForGBRRelievingDocTypeFlight::instance().isEnabled())
        {
            return (_budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted
                || _budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Finalized)
                && _budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Posted;
        }

        return _budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted 
            && _budgetReservationHeader.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateInBudgetReservationFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified accounting event is in the same fiscal year as the specified accounting date.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date to compare to the date on the specified accounting event.
    /// </param>
    /// <param name="_budgetReservationLastAccountingEvent">
    /// The accounting event to retrieve the accounting date from when comparing to the specified accounting date.
    /// </param>
    /// <returns>
    /// true if the specified accounting event accounting date is in the same fiscal year as the specified accounting date.
    /// </returns>    
    private static boolean isDateInBudgetReservationFiscalYear(AccountingDate _accountingDate, AccountingEvent _budgetReservationLastAccountingEvent)
    {
        return FiscalCalendars::areDatesInSameFiscalYear(
            CompanyInfoHelper::fiscalCalendarRecId(),
            _accountingDate,
            _budgetReservationLastAccountingEvent.AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseRequisitionAvailableToReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purchase requisition selected on the budget reservation line is
    /// available to reference on a budget reservation line.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The record ID of the purchase requisition line to validate.
    /// </param>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of the current budget reservation line.
    /// </param>
    /// <param name="_budgetReservationHeader">
    /// The budget reservation header to validate purchase requisition reference on.
    /// </param>
    /// <param name="_showError">
    /// Optional boolean value indicating whether an error message should be thrown if validation fails.
    /// </param>
    /// <param name="_errorMessage">
    /// Optional error message to throw when validation fails and _showError is true.
    /// </param>
    /// <returns>
    /// true if the selected purchase requisition line is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A purchase requisition is available if it is approved or closed, not on hold and
    /// not referenced on another budget reservation line.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Wrong use of function error thrown if all parameters are 0 or null.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Validation error is thrown if _showError is true.
    /// </exception>    
    public static boolean isPurchaseRequisitionAvailableToReference(
        RefRecId                        _purchReqLineRecId          = 0,
        BudgetReservationLineRecId_PSN  _budgetReservationLineRecId = 0,
        BudgetReservationHeader_PSN     _budgetReservationHeader    = null,
        boolean                         _showError                  = false,
        str                             _errorMessage               = '')
    {
        PurchReqTable               purchReqTable;
        PurchReqLine                purchReqLineApproved;
        PurchReqLine                purchReqLine;
        BudgetReservationLine_PSN   budgetReservationLine;
        boolean                     isPurchReqAvailableToReference = true;
    
        if ((!_purchReqLineRecId || !_purchReqLineRecId) && !_budgetReservationHeader)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        if (_showError)
        {
            Debug::assert(_errorMessage != '');
        }
    
        select firstonly RecId, BudgetReservationHeader_PSN from budgetReservationLine
            where (_budgetReservationLineRecId == 0 || budgetReservationLine.RecId == _budgetReservationLineRecId)
                    &&  (_budgetReservationLineRecId != 0 || budgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationHeader.RecId)
            outer join RecId from purchReqLineApproved
                where (_purchReqLineRecId == 0 || purchReqLineApproved.RecId == _purchReqLineRecId)
                    &&  (_purchReqLineRecId != 0 || purchReqLineApproved.RecId == budgetReservationLine.PurchReqLine)
                    && purchReqLineApproved.RequisitionStatus != PurchReqRequisitionStatus::Approved
                    && purchReqLineApproved.RequisitionStatus != PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN
                    && purchReqLineApproved.RequisitionStatus != PurchReqRequisitionStatus::Closed
            join RecId from purchReqLine
                where (_purchReqLineRecId == 0 || purchReqLine.RecId == _purchReqLineRecId)
                    &&  (_purchReqLineRecId != 0 || purchReqLine.RecId == budgetReservationLine.PurchReqLine)
            join RecId, TransDate, OnHold, PurchReqId from purchReqTable
                where purchReqTable.RecId == purchReqLine.PurchReqTable;
    
        if (purchReqLineApproved.RecId || purchReqTable.OnHold == NoYes::Yes)
        {
            isPurchReqAvailableToReference = false;
        }
    
        if (isPurchReqAvailableToReference && purchReqTable.TransDate)
        {
            if (!_budgetReservationHeader && budgetReservationLine.BudgetReservationHeader_PSN)
            {
                _budgetReservationHeader = BudgetReservationHeader_PSN::find(budgetReservationLine.BudgetReservationHeader_PSN);
            }
    
            isPurchReqAvailableToReference = FiscalCalendars::areDatesInSameFiscalYear(
                Ledger::fiscalCalendar(CompanyInfo::current()),
                _budgetReservationHeader.AccountingDate,
                purchReqTable.TransDate);
        }
    
        if (!isPurchReqAvailableToReference && _showError)
        {
            throw error(strFmt(_errorMessage, purchReqTable.PurchReqId));
        }
    
        return isPurchReqAvailableToReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseRequisitionHeaderAvailableToReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the purchase requisition availability for the budget reservation document.
    /// </summary>
    /// <param name="_purchReqId">
    /// The <c>PurchReqId</c> Id for the purchase requisition header
    /// to be validated for availability for referencing on budget reservation document.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date for the budget reservation document.
    /// </param>
    /// <returns>
    /// true if the purchase requisition is available for selection; otherwise, false.
    /// </returns>    
    public static boolean isPurchaseRequisitionHeaderAvailableToReference(PurchReqId _purchReqId, TransDate _accountingDate)
    {
        PurchReqLine              purchReqLine;
        BudgetReservationLine_PSN budgetReservationLine;
        PurchReqTable             purchReqTable;
        boolean                   isValid = true;
    
        select firstonly TransDate from purchReqTable
            where purchReqTable.PurchReqId == _purchReqId
                && purchReqTable.OnHold == NoYes::No
            outer join firstonly RecId from purchReqLine
                where purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved
                    && purchReqLine.PurchReqTable == purchReqTable.RecId
            outer join budgetReservationLine
                where budgetReservationLine.PurchReqLine == purchReqLine.RecId;
    
        if (purchReqTable && purchReqLine && !budgetReservationLine)
        {
            isValid = FiscalCalendars::areDatesInSameFiscalYear(
                Ledger::fiscalCalendar(),
                _accountingDate,
                purchReqTable.TransDate);
        }
        else
        {
            isValid = checkFailed("@Budgeting_BudgetReservationPS:PRNotAvailableForBRError");
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>BudgetReservationTable_PSN</c> form and displays the specified budget reservation record.
    /// </summary>
    /// <param name="_budgetReservationLineRecId">
    /// The budget reservation line record ID that is currently selected by the user.
    /// </param>    
    public static void jumpRefBudgetReservation(RefRecId _budgetReservationLineRecId)
    {
        Args                        args;
        FormRun                     formRun;
        BudgetReservationLine_PSN   budgetReservationLine;
        BudgetReservationHeader_PSN budgetReservationHeader;
    
        select firstonly budgetReservationHeader
            exists join budgetReservationLine
                where budgetReservationHeader.RecId == budgetReservationLine.BudgetReservationHeader_PSN
                    && budgetReservationLine.RecId == _budgetReservationLineRecId;
    
        args = new Args();
        args.record(budgetReservationHeader);
        MenuFunction mf = new MenuFunction(menuItemDisplayStr(BudgetReservation_PSN), MenuItemType::Display);
        formRun = mf.create(args);
        
        formRun.run();
        formRun.dataSource(1).findRecord(budgetReservationHeader);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefPurchaseRequistion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the <c>PurchReqTable</c> form synchronized to the specified purchase requisition record.
    /// </summary>
    /// <param name="_common">
    /// The <c>PurchReqTable</c> table record referenced by the caller.
    /// </param>
    /// <param name="_object">
    /// The caller object.
    /// </param>    
    public static void jumpRefPurchaseRequistion(Common _common, Object _object)
    {
        Args            args;
        MenuFunction    menuFunction;
    
        args = new Args();
        args.caller(_object);
        args.record(_common);
        args.lookupRecord(_common);
        menuFunction = new MenuFunction(menuitemDisplayStr(PurchReqTable), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a reason code lookup.
    /// </summary>
    /// <param name="_formControl">
    /// <c>FormControl</c> instance for which to open the lookup.
    /// </param>    
    public static void lookupReasonCode(FormControl _formControl)
    {
        LedgerJournalACType   offsetAccountType = LedgerJournalACType::Ledger;
        LedgerJournalACType   accountType       = LedgerJournalACType::Ledger;
        LedgerJournalACType   ledgerAccountType = LedgerJournalACType::Ledger;
        boolean               useLedgerAccount  = true;
        boolean               useOffsetAccount  = false;
        boolean               useMainAccount    = true;
    
        if (_formControl == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        ReasonFormTable::reasonCodeLookup(
            _formControl,
            offsetAccountType,
            accountType,
            useMainAccount,
            useOffsetAccount,
            ledgerAccountType,
            useLedgerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetReservationHeader_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BudgetReservation_PSN</c> class from
    /// a <c>BudgetReservationHeader_PSN</c> record.
    /// </summary>
    /// <param name="_budgetReservationHeader">
    /// A <c>BudgetReservationHeader_PSN</c> record to be used for instantiation.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BudgetReservation_PSN</c> class.
    /// </returns>    
    public static BudgetReservation_PSN newFromBudgetReservationHeader_PSN(BudgetReservationHeader_PSN _budgetReservationHeader)
    {
        BudgetReservation_PSN budgetReservation_PSN = new BudgetReservation_PSN();
    
        budgetReservation_PSN.parmBudgetReservationHeader(_budgetReservationHeader);
    
        return budgetReservation_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumberLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new line number values for all budget reservation lines in the specified data source.
    /// </summary>
    /// <param name="_budgetReservationLineDS">
    /// The <c>BudgetReservationLine_PSN</c> datasource.
    /// </param>
    /// <remarks>
    /// Uses the line number increment value in the <c>SystemParameters</c> table to renumber the lines in the same order as they are in in the form data source.
    /// </remarks>    
    public static void renumberLines(FormDataSource _budgetReservationLineDS)
    {
        BudgetReservationLine_PSN   budgetReservationLine_PSN;
        BudgetReservationRecId_PSN  budgetReservationRecId_PSN;
        List                        budgetReservationLineRecIdList = new List(Types::Int64);
    
        if (_budgetReservationLineDS == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        _budgetReservationLineDS.first();
        budgetReservationLine_PSN = _budgetReservationLineDS.cursor();
    
        budgetReservationRecId_PSN = budgetReservationLine_PSN.BudgetReservationHeader_PSN;
    
        while (budgetReservationLine_PSN)
        {
            budgetReservationLineRecIdList.addEnd(budgetReservationLine_PSN.RecId);
    
            _budgetReservationLineDS.next();
            budgetReservationLine_PSN = _budgetReservationLineDS.cursor();
        }
    
        BudgetReservation_PSN::renumberLinesServer(
            budgetReservationLineRecIdList.pack(),
            budgetReservationRecId_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionDistributionDateUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date on all of the corrected accounting distributions for a <c>BudgetReservationHeader_PSN</c> record.
    /// </summary>
    /// <param name="_correctionDate">
    /// The date of the correction.
    /// </param>
    /// <param name="_budgetReservationLine">
    /// The budget reservation line for which to update distributions; optional
    /// </param>
    /// <param name="_budgetReservationHeader">
    /// The budget reservation header for which to update distributions; optional
    /// </param>
    /// <param name="_reversalsOnly">
    /// Determines whether to update the date of just the reversing entries; optional
    /// </param>
    public static server void correctionDistributionDateUpdate(TransDate _correctionDate,
        BudgetReservationLineRecId_PSN _budgetReservationLine = 0,
        BudgetReservationRecId_PSN _budgetReservationHeader = 0,
        boolean _reversalsOnly = false)
    {
        BudgetReservationLine_PSN budgetReservationLineLocal;
        BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(_budgetReservationLine);
        BudgetReservationHeader_PSN budgetReservationHeaderLocal;
        AccountingDistribution accountingDistribution;
        SourceDocumentLine sourceDocumentLine;

        if (_budgetReservationLine != 0)
        {
            while select forUpdate accountingDistribution
                where accountingDistribution.AccountingEvent == AccountingEventType::None
                    && (!_reversalsOnly || (accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing))
                exists join budgetReservationLineLocal
                    where budgetReservationLineLocal.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                        && budgetReservationLineLocal.SourceDocumentLine == budgetReservationLine.SourceDocumentLine
            {
                ttsBegin;
                accountingDistribution.AccountingDate = _correctionDate;
                accountingDistribution.update();
                ttscommit;
            }
        }
        else if (_budgetReservationHeader != 0)
        {
            while select forUpdate accountingDistribution
                where accountingDistribution.AccountingEvent == AccountingEventType::None
                exists join budgetReservationLineLocal
                    where budgetReservationLineLocal.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                exists join sourceDocumentLine
                    where sourceDocumentLine.RecId == budgetReservationLineLocal.SourceDocumentLine
                exists join budgetReservationHeaderLocal
                    where budgetReservationHeaderLocal.RecId == budgetReservationLineLocal.BudgetReservationHeader_PSN
                        && budgetReservationHeaderLocal.RecId == _budgetReservationHeader
            {
                ttsBegin;
                accountingDistribution.AccountingDate = _correctionDate;
                accountingDistribution.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExistsForGBRSourceDocumentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any event for the GBR has been posted.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line for the GBR line being checked.1
    /// </param>
    /// <returns>
    /// true if the event exists; otherwise, false.
    /// </returns>
    public static server boolean eventExistsForGBRSourceDocumentLine_PSN(SourceDocumentLineRecId _sourceDocumentLine)
    {
        AccountingDistribution accountingDistributionHasEvent;
        boolean eventExists;

        if (_sourceDocumentLine
            && BudgetReservation_PSN::isSourceBudgetReservation_PSN(_sourceDocumentLine))
        {
            select firstOnly SourceDocumentLine from accountingDistributionHasEvent
                where accountingDistributionHasEvent.AccountingEvent != AccountingEventType::None
                && accountingDistributionHasEvent.SourceDocumentLine == _sourceDocumentLine;

            eventExists = accountingDistributionHasEvent.RecId;
        }

        return eventExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceBudgetReservation_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the calling source document line item is of type <c>BudgetResLineSourceDocLineItem_PSN</c>.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line to check.
    /// </param>
    /// <returns>
    /// true if the calling <c>SourceDocumentLineItem</c> object is of type <c>BudgetResLineSourceDocLineItem_PSN</c>; otherwise, false.
    /// </returns>
    public static boolean isSourceBudgetReservation_PSN(SourceDocumentLineRecId _sourceDocumentLine)
    {
        SourceDocumentLine      callerSourceDocumentLine;
        SourceDocumentLineItem  callerSourceDocumentLineItem;
        boolean                 isCallerBudgetReservation;

        if (_sourceDocumentLine)
        {
            callerSourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLine);
            callerSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(callerSourceDocumentLine);

            isCallerBudgetReservation = PublicSectorUtils::isBudgetReservationEnabled()
                && (callerSourceDocumentLineItem is BudgetReservationSourceDocumentLineItem_PSN);
        }

        return isCallerBudgetReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the budget checking date and gets the original accounting date. 
    /// </summary>
    /// <param name = "_budgetReservationLine">The record of the<c>BudgetReservationLine_PSN</c> table.</param>
    /// <param name = "_budgetCheckDate">The date to use for checking the budget.</param>
    /// <returns>The original accounting date.</returns>
    public static AccountingDate updateBudgetCheckDate(BudgetReservationLine_PSN _budgetReservationLine, AccountingDate _budgetCheckDate)
    {
        AccountingDate originalBudgetDate;
        AccountingDistribution accountingDistribution;
        BudgetReservationLine_PSN budgetReservationLine;

        if (BudgetParameters::find().UseSessionDateForAccounting == NoYes::Yes)
        {
            select firstOnly AccountingDate, RecId, SourceDocumentLine from accountingDistribution
                order by Number asc
                where accountingDistribution.SourceDocumentLine == _budgetReservationLine.SourceDocumentLine
                    && accountingDistribution.AccountingEvent == AccountingEventType::None
                join RecId from budgetReservationLine
                    where budgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationLine.BudgetReservationHeader_PSN;

            if (accountingDistribution.RecId)
            {
                originalBudgetDate = accountingDistribution.AccountingDate;

                BudgetReservation_PSN::correctionDistributionDateUpdate(_budgetCheckDate,
                    0,
                    budgetReservationLine.BudgetReservationHeader_PSN);
            }

            return originalBudgetDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumberLinesServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Regenerates line numbers for all budget reservation lines.
    /// </summary>
    /// <param name="_budgetReservationLineRecIdList">
    /// A container containing <c>BudgetReservationLine_PSN</c> record Ids whose line numbers should be regenerated.
    /// </param>
    /// <param name="_budgetReservationRecId_PSN">
    /// The record Id of the <c>BudgetReservationHeader_PSN</c> record.
    /// </param>    
    private static void renumberLinesServer(
        container                   _budgetReservationLineRecIdList,
        BudgetReservationRecId_PSN  _budgetReservationRecId_PSN)
    {
        BudgetReservationLine_PSN   budgetReservationLine_PSN;
        int                         lineNumberIncrement;
        int                         linePosition = 1;
        List                        budgetReservationLineRecIdList;
        ListEnumerator              budgetReservationLineRecIdListEnumerator;
    
        // Unpack the container.
        budgetReservationLineRecIdList           = List::create(_budgetReservationLineRecIdList);
        budgetReservationLineRecIdListEnumerator = budgetReservationLineRecIdList.getEnumerator();
    
        // Get system line increment constant.
        lineNumberIncrement = SystemParameters::find().SystemLineNumberIncrement;
    
        ttsbegin;
    
        // Update the existing numbers with a negative value so that there are no update conflicts when the new numbers are generated.
        update_recordset budgetReservationLine_PSN
            setting LineNumber = budgetReservationLine_PSN.LineNumber * -1
            where budgetReservationLine_PSN.BudgetReservationHeader_PSN == _budgetReservationRecId_PSN;
    
        while (budgetReservationLineRecIdListEnumerator.moveNext())
        {
            budgetReservationLine_PSN = BudgetReservationLine_PSN::find(budgetReservationLineRecIdListEnumerator.current(), true, ConcurrencyModel::Auto);
            budgetReservationLine_PSN.LineNumber = lineNumberIncrement * linePosition;
            budgetReservationLine_PSN.update();
    
            linePosition++;
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes and regenerates the distributions for a document.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The source document line record ID of the document for which to reset distributions.
    /// </param>
    /// <remarks>
    /// This is used by the budget reservation feature to reset the accounting distributions after
    /// the relieving reference for the current line is changed.
    /// </remarks>    
    public static void resetDistributions(SourceDocumentLineRefRecId _sourceDocumentLineRefRecId)
    {
        SourceDocumentLine  sourceDocumentLine;
    
        if (_sourceDocumentLineRefRecId && AccountingDistribution::existSourceDocumentLine(_sourceDocumentLineRefRecId))
        {
            sourceDocumentLine = SourceDocumentLine::find(_sourceDocumentLineRefRecId);
    
            // Set the accounting state to draft.
            SourceDocumentLineProcessor::submitSourceDocumentLine(
                sourceDocumentLine,
                false,
                SourceDocumentLineAccountingStatus::Draft,
                AccountingDistributionViewModelCaller::construct(AccountingDistributionMethod::None));
    
            // Set the accounting state back to fully distributed.
            SourceDocumentLineProcessor::submitSourceDocumentLine(
                sourceDocumentLine,
                false,
                SourceDocumentLineAccountingStatus::FullyDistributed,
                AccountingDistributionViewModelCaller::construct(AccountingDistributionMethod::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the reference for the budget reservation line by line number and budget reservation header.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The calling form control.
    /// </param>
    /// <param name="_budgetReservationHeader">
    /// The record ID of the associated budget reservation header.
    /// </param>
    /// <returns>
    /// The resolved budget reservation line.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The wrong use of function error is thrown if used outside of a reference control.
    /// </exception>    
    public static BudgetReservationLine_PSN resolveBudgetReservationLine(
        FormReferenceControl _formReferenceControl,
        BudgetReservationRecId_PSN _budgetReservationHeader)
    {
        BudgetReservationLineNumber_PSN budgetReservationLineNumber;
    
        if (!_formReferenceControl)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        budgetReservationLineNumber = str2int(_formReferenceControl.filterValue(
            AbsoluteFieldBinding::construct(fieldStr(BudgetReservationLine_PSN, LineNumber), tableStr(BudgetReservationLine_PSN))).value());
    
        return BudgetReservationLine_PSN::findByLineNumber(budgetReservationLineNumber, _budgetReservationHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBudgetReservationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the lookup dialog for budget reservations.
    /// </summary>
    /// <param name="_recordContext">
    /// The record context to pass to the lookup form.
    /// </param>
    /// <param name="_formRun">
    /// The form that is calling the lookup.
    /// </param>
    /// <param name="_formControl">
    /// The form control that will host the lookup.
    /// </param>    
    public static void showBudgetReservationLookup(
        Common _recordContext,
        FormRun _formRun,
        FormReferenceGroupControl _formControl)
    {
        Args    args = new Args();
        FormRun budgetReservationLookup;
    
        args.name(formStr(BudgetReservationLookup_PSN));
        args.record(_recordContext);
        args.menuItemName(menuitemDisplayStr(BudgetReservationLookup_PSN));
        args.caller(_formRun);
    
        budgetReservationLookup = classfactory.formRunClass(args);
        budgetReservationLookup.init();
    
        _formControl.performFormLookup(budgetReservationLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationToBeRelieved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the selected budget reservation can be referenced by a relieving document.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date of the document that is relieving the budget reservation.
    /// </param>
    /// <param name="_budgetReservationRecId">
    /// The budget reservation record that is being relieved.
    /// </param>
    /// <param name="_relievingDocumentType">
    /// The type of document that is relieving the budget reservation.
    /// </param>
    /// <param name="_errorMessageFiscalYear">
    /// Error message to be thrown if the fiscal year of the accounting date on the referencing document does not match the
    /// fiscal year on the budget reservation.
    /// </param>
    /// <param name="_errorMessageValidDateRange">
    /// Error message to be thrown if the accounting date on the referencing document is not within the start and end date
    /// on the budget reservation.
    /// </param>
    /// <param name="_validateRelievingDocumentType">
    /// An optional boolean value indicating whether a relieving document type should be validated or not.
    /// </param>
    /// <returns>
    /// true if successful; otherwise, false and a warning message is thrown.
    /// </returns>    
    public static boolean validateBudgetReservationToBeRelieved(
        AccountingDate                         _accountingDate,
        BudgetReservationRecId_PSN             _budgetReservationRecId,
        BudgetReservationRelievingDocument_PSN _relievingDocumentType,
        str                                    _errorMessageFiscalYear,
        str                                    _errorMessageValidDateRange,
        boolean                                _validateRelievingDocumentType = true)
    {
        BudgetReservationHeader_PSN localBudgetReservationHeader;
        boolean                     isValid = true;
        str                         errorMessage;
    
        if (_budgetReservationRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        select firstonly RecId, RelievingDocumentType, DocumentStatus, WorkflowStatus, StartDate, EndDate, DocumentNumber, SourceDocumentHeader from localBudgetReservationHeader
            where localBudgetReservationHeader.RecId == _budgetReservationRecId;

        if (localBudgetReservationHeader.RecId == 0
            || !BudgetReservation_PSN::isBudgetResHeaderStatusPosted(localBudgetReservationHeader)
            || (_validateRelievingDocumentType && !BudgetReservation_PSN::doRelievingDocumentTypesMatch(_relievingDocumentType, localBudgetReservationHeader)))
        {
            isValid = false;
            errorMessage = "@Budgeting_BudgetReservationPS:POFormSelectedGBRCannotBeReferencedError";
        }
        else if (localBudgetReservationHeader.StartDate > _accountingDate
            || localBudgetReservationHeader.EndDate < _accountingDate)
        {
            isValid = false;
            errorMessage = strFmt(_errorMessageValidDateRange, localBudgetReservationHeader.DocumentNumber);
        }
        else if (!BudgetReservation_PSN::isDateInBudgetReservationFiscalYear(_accountingDate, AccountingEvent::getLastEvent(localBudgetReservationHeader.SourceDocumentHeader)))
        {
            isValid = false;
            errorMessage = strFmt(_errorMessageFiscalYear, localBudgetReservationHeader.DocumentNumber);
        }

        if (!isValid)
        {
            checkFailed(errorMessage);
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseRequisitionLineVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the provided vendor account is the same as the one on the provided purchase requisition line.
    /// </summary>
    /// <param name="_purchReqLineRefRecId">
    /// The reference record ID  of the purchase requisition line to check against.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account to match.
    /// </param>
    /// <returns>
    /// true if the provided vendor account is the same as the one on the provided purchase requisition line; otherwise, false.
    /// </returns>    
    public static boolean validatePurchaseRequisitionLineVendor(
        RefRecId    _purchReqLineRefRecId,
        VendAccount _vendAccount)
    {
        PurchReqLine    purchReqLine;
        boolean         isValid = true;
    
        purchReqLine = PurchReqLine::find(_purchReqLineRefRecId);
    
        if (purchReqLine.VendAccount && _vendAccount != purchReqLine.VendAccount)
        {
            isValid = checkFailed("@Budgeting_BudgetReservationPS:BudgetReservationClassSelectDifferentGBRMessage");
        }
    
        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>