<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovTotalProcessAutomationRuntimeMonitor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovTotalProcessAutomationRuntimeMonitor</c> class handles monitoring running cash flow forecast automations and logging
/// success or failure messages based on the running status of the automation.
/// </summary>
internal final class LedgerCovTotalProcessAutomationRuntimeMonitor extends SysOperationServiceController
{
    private LedgerCovTotalProcessAutomationRuntimeMonitorContract contract;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private LedgerCovTotalProcessAutomationRuntimeMonitorContract getContract()
    {
        return this.getDataContractObject(classStr(LedgerCovTotalProcessAutomationRuntimeMonitorContract)) as LedgerCovTotalProcessAutomationRuntimeMonitorContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashFlowManagement:LedgerCovTotalRuntimeMonitorCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMonitor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void runMonitor(LedgerCovTotalProcessAutomationRuntimeMonitorContract _contract)
    {
        contract = _contract;

        if (contract.validate())
        {
            if (contract.parmIsFinalRuntimeMonitor())
            {
                this.updateBatchJobExecutionResults();
            }
            else
            {
                this.validateCurrentState();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchJobExecutionResults</Name>
				<Source><![CDATA[
    private void updateBatchJobExecutionResults()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && batch.Status != BatchStatus::Finished
                && batch.RecId != BatchHeader::getCurrentBatchTask().RecId;
                
        boolean isJobFinishedSuccesfully = batch.RecId == 0;

        if (isJobFinishedSuccesfully)
        {
            if (!this.doesProcessExecutionMessageLogHaveError())
            {
                this.logBatchJobSuccess();
            }
            else
            {
                this.logBatchJobWarning();
            }
        }
        else
        {
            this.logBatchJobFailure();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentState</Name>
				<Source><![CDATA[
    private void validateCurrentState()
    {
        Batch batch;

        select count(RecId) from batch
            where batch.BatchJobId == contract.parmBatchJobId()
                && (batch.Status == BatchStatus::Canceled
                    || batch.Status == BatchStatus::Cancelling
                    || batch.Status == BatchStatus::Error);
        
        boolean isValid = batch.RecId == 0;

        if (!isValid)
        {
            this.logBatchJobFailure();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesProcessExecutionMessageLogHaveError</Name>
				<Source><![CDATA[
    private boolean doesProcessExecutionMessageLogHaveError()
    {
        ProcessExecutionMessageLog messageLog;

        select firstonly RecId 
            from messageLog
            where messageLog.ProcessExecutionSourceLink == contract.parmProcessExecutionSourceLinkRecId()
                && messageLog.Exception == Exception::Error;

        return messageLog.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchJobSuccess</Name>
				<Source><![CDATA[
    private void logBatchJobSuccess()
    {
        ttsbegin;
        
        ProcessExecutionSourceLink sourceLink;

        select forupdate firstonly sourceLink
            where sourceLink.RecId == contract.parmProcessExecutionSourceLinkRecId();

        if(sourceLink.RecId == 0)
        {
            throw error("@CashFlowManagement:LedgerCovTotalMissingBatchTaskMonitoringSourceLinkid");
        }

        sourceLink.Message = "@CashFlowManagement:LedgerCovTotalAutomationSucceeded";
        sourceLink.Status = ProcessExecutionSourceStatus::Success;

        sourceLink.update();
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(contract.parmProcessExecutionSourceLinkRecId());
        messageLogItem.parmException(Exception::Info);
        messageLogItem.parmMessage("@CashFlowManagement:LedgerCovTotalAutomationSucceeded");

        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchJobWarning</Name>
				<Source><![CDATA[
    private void logBatchJobWarning()
    {
        ttsbegin;
        
        ProcessExecutionSourceLink sourceLink;

        select forupdate firstonly sourceLink
            where sourceLink.RecId == contract.parmProcessExecutionSourceLinkRecId();

        if(sourceLink.RecId == 0)
        {
            throw error("@CashFlowManagement:LedgerCovTotalMissingBatchTaskMonitoringSourceLinkid");
        }

        sourceLink.Message = "@CashFlowManagement:LedgerCovTotalAutomationWarning";
        sourceLink.Status = ProcessExecutionSourceStatus::Warning;

        sourceLink.update();
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(contract.parmProcessExecutionSourceLinkRecId());
        messageLogItem.parmException(Exception::Info);
        messageLogItem.parmMessage("@CashFlowManagement:LedgerCovTotalAutomationWarning");

        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchJobFailure</Name>
				<Source><![CDATA[
    private void logBatchJobFailure()
    {
        ttsbegin;
        
        ProcessExecutionSourceLink sourceLink;

        select forupdate firstonly sourceLink
            where sourceLink.RecId == contract.parmProcessExecutionSourceLinkRecId();

        if(sourceLink.RecId == 0)
        {
            throw error("@CashFlowManagement:LedgerCovTotalMissingBatchTaskMonitoringSourceLinkid");
        }

        sourceLink.Message = "@CashFlowManagement:LedgerCovTotalAutomationFailed";
        sourceLink.Status = ProcessExecutionSourceStatus::Error;

        sourceLink.update();
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(contract.parmProcessExecutionSourceLinkRecId());
        messageLogItem.parmException(Exception::Error);
        messageLogItem.parmMessage("@CashFlowManagement:LedgerCovTotalAutomationFailed");

        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;

        throw error("@CashFlowManagement:LedgerCovTotalAutomationFailed");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>