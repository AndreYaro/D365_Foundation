<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportLayout_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TaxReportLayout_JP implements TaxReportILayout_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createConsumptionTaxReportRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createConsumptionTaxReportRecord(TaxReportIParameters_JP _taxReportParameters)
    {
        TaxReport_JP taxReport = _taxReportParameters as TaxReport_JP;
        if (!taxReport)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxCalcReportFields_JP taxCalcReportFields_JP = TaxCalcReportFields_JP::newTaxReport(taxReport);

        TaxCalcReportFields_JP::getBadDebtLedgerDimension(taxCalcReportFields_JP);
        taxCalcReportFields_JP.insertOrUpdateInConsTaxReport(
            taxCalcReportFields_JP.parmFromDate(),
            taxCalcReportFields_JP.parmToDate(),
            taxCalcReportFields_JP.parmTaxPeriod(),
            taxCalcReportFields_JP.parmTypeOfDeclaration(),
            taxCalcReportFields_JP.parmCalcMethod(),
            CompanyInfo::find().CompanyRepresentative_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openConsumptionTaxTransactionForm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void openConsumptionTaxTransactionForm(TaxReportIParameters_JP _taxReportParameters)
    {
        TaxReport_JP taxReport = _taxReportParameters as TaxReport_JP;
        if (!taxReport)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        new MenuFunction(menuItemDisplayStr(LedgerConsumptionTaxCalcTrans_JP), MenuItemType::Display).run(this.getTaxReportArguments(taxReport));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutConsumptionTaxReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printoutConsumptionTaxReport(TaxReportIParameters_JP _taxReportParameters)
    {
        TaxReport_JP taxReport = _taxReportParameters as TaxReport_JP;
        if (!taxReport)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.printoutCalcSheet(taxReport);
        this.printoutTaxReport(taxReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calculateReport(TaxReportIParameters_JP _taxReportParameters)
    {
        TaxReport_JP taxReport = _taxReportParameters as TaxReport_JP;
        if (!taxReport)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxCalcReportFields_JP taxCalcReportFields_JP = TaxCalcReportFields_JP::newTaxReport(taxReport);
        TaxCalcReportFields_JP::calcOnServer(taxCalcReportFields_JP, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEnabled(TaxReportIParameters_JP _taxReportParameters)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesTransactionExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean doesTransactionExist(TaxReportIParameters_JP _taxReportParameters)
    {
        if (TaxTrans::existPeriod(_taxReportParameters.parmFromDate(), _taxReportParameters.parmToDate(), _taxReportParameters.parmTaxPeriod()))
        {
            return true;
        }

        if (LedgerJournalTrans_JP_Extension::existBadDebtPeriod_JP(_taxReportParameters.parmFromDate(), _taxReportParameters.parmToDate(), LedgerBadDebtAccounts_JP::getLedgerBadDebtDimension()))
        {
            return true;
        }

        if (LedgerJournalTrans_JP_Extension::existCollectedBadDebtPeriod_JP(_taxReportParameters.parmFromDate(), _taxReportParameters.parmToDate(), LedgerBadDebtAccounts_JP::getLedgerCollectedBadDebtDimension()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutCalcSheet</Name>
				<Source><![CDATA[
    protected void printoutCalcSheet(TaxReportIParameters_JP _taxReportParameters)
    {
        new MenuFunction(menuItemOutputStr(TaxReportCalcSheet_JP), MenuItemType::Output).run(this.getTaxReportArguments(_taxReportParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutTaxReport</Name>
				<Source><![CDATA[
    protected void printoutTaxReport(TaxReportIParameters_JP _taxReportParameters)
    {
        new MenuFunction(menuItemOutputStr(TaxReport_JP), MenuItemType::Output).run(this.getTaxReportArguments(_taxReportParameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportArguments</Name>
				<Source><![CDATA[
    protected Args getTaxReportArguments(TaxReportIParameters_JP _taxReportParameters)
    {
        Args args = new Args();
        
        args.parmObject(_taxReportParameters);
        args.caller(_taxReportParameters);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TaxReportLayout_JP construct()
    {
        return new TaxReportLayout_JP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>