<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailExternalIdentityCreateJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Azure.ActiveDirectory.GraphClient;
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.AX.Security.DirectoryHelper;
using Microsoft.Dynamics.AX.Security.GraphAPIHelper;
using Microsoft.Dynamics.AX.Security.MicrosoftGraphHelper;

/// <summary>
/// This class is used to batch create external identities for workers
/// </summary>
class RetailExternalIdentityCreateJob extends RunBaseBatch implements BatchRetryable
{
    str upnMask = '@Retail:RetailExternalIdentityCreateJob_UPNMask'; //'%1@%2', eg: 'alias@domain'
    str aliasMask = '@Retail:RetailExternalIdentityCreateJob_AliasMask'; //'%1.%2', eg 'first.last'
    container allowedAppsForMSGraphMigration;

    RecId retailStaffRecId;
    str domain, extIdAlias, extIdPassword;
    boolean hasError = false;

    #define.RetryNum(3)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        retailStaffRecId,
        extIdAlias,
        extIdPassword
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;
        RetailExternalIdentityUtils util = new RetailExternalIdentityUtils();
        
        allowedAppsForMSGraphMigration = util.GetAllowedAppsForMSGraphMigration();
        ret = super();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailStaffRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// RecId of RetailStaffTable record.
    /// </summary>
    /// <param name = "_retailStaffRecId">RecId of RetailStaffTable record.</param>
    /// <returns>The RecId of RetailStaffTable record.</returns>
    public RecId parmRetailStaffRecId(RecId _retailStaffRecId = retailStaffRecId)
    {
        retailStaffRecId = _retailStaffRecId;
        return retailStaffRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlias</Name>
				<Source><![CDATA[
    /// <summary>
    /// Alias for the external identity to be created.
    /// </summary>
    /// <param name = "_extIdAlias">Alias text.</param>
    /// <returns>The alias of the external identity to be created.</returns>
    public str parmAlias(str _extIdAlias = extIdAlias)
    {
        extIdAlias = _extIdAlias;
        return extIdAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Password for the external identity to be created.
    /// </summary>
    /// <param name = "_extIdPassword">Password text.</param>
    /// <returns>The password of the external identity to be created.</returns>
    public str parmPassword(str _extIdPassword = extIdPassword)
    {
        extIdPassword = _extIdPassword;
        return extIdPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HasError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate if there are errors during external identity creation.
    /// </summary>
    /// <returns>Return true if there are error(s) during external identity creation; otherwise return false.</returns>
    public boolean HasError()
    {
        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack the job instance into a container.
    /// </summary>
    /// <returns>Container of the packed instance.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack the job instance from a container.
    /// </summary>
    /// <param name = "packedClass">The previously packed container.</param>
    /// <returns>True if successfully unpacked, false otherwise.</returns>
    public boolean unpack(container packedClass)
    {
        Version thisVersion = RunBase::getVersion(packedClass);

        switch (thisVersion)
        {
            case #CurrentVersion:
                [thisVersion, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the job description.
    /// </summary>
    /// <returns>Job description.</returns>
    public static ClassDescription description()
    {
        return '@Retail:RetailExternalIdentityCreateJob_Description';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenantDomain</Name>
				<Source><![CDATA[
    private str getTenantDomain()
    {
        return SysUserMSODSImportHelper::curUserDomain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameParts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get name parts based on the given full name and domain.
    /// </summary>
    /// <param name = "_fullName">Users full name.</param>
    /// <param name = "_domain">Tenant domain.</param>
    /// <param name = "_alias">Alias for external identity.</param>
    /// <returns>Container of [first name, last name, user principal name]</returns>
    public container getNameParts(str _fullName, str _domain, str _alias)
    {
        str nameFirst, nameMiddle, nameLast, nameUpn;

        //Get name parts
        [nameFirst, nameMiddle, nameLast] = DirPerson::splitNameParts(_fullName);

        // determine the new UPN
        nameUpn = strfmt(upnMask, _alias, _domain);      // alias@domain.com

        return [nameFirst, nameLast, nameUpn];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempt to create the new AAD user with the specified values.
    /// </summary>
    /// <param name = "_fullName">User's full name.</param>
    /// <param name = "_firstName">User's first name.</param>
    /// <param name = "_lastName">User's last name.</param>
    /// <param name = "_alias">User's alias.</param>
    /// <param name = "_upnName">Users UPN.</param>
    /// <param name = "_oneTimePass">User's one time password.</param>
    /// <returns>A container containing the external ID information.</returns>
    public container createUser(
        System.String _fullName,
        System.String _firstName,
        System.String _lastName,
        System.String _alias,
        System.String _upnName,
        System.String _oneTimePass)
    {
        str callerAppId = GraphAPIClient::GetCallerApplicationId();
        boolean migrateToMicrosoftGraph = RetailExternalIdentityCreateJobMicrosoftGraphMigrationFlight::instance().isEnabled() 
            && (EnableMSGraphMigrationForAllAppIdsFlight::instance().isEnabled() || (conFind(allowedAppsForMSGraphMigration, callerAppId) != 0));
        str infoMessage = strFmt('class: %1, method: %2, callerAppId: %3', classStr(RetailExternalIdentityCreateJob), methodStr(RetailExternalIdentityCreateJob, createUser), callerAppId);

        if(migrateToMicrosoftGraph)
        {
            IDirectoryClient directoryClient = DirectoryClientProvider::GetDirectoryClient();
            Microsoft.Dynamics.AX.Security.DirectoryHelper.User createdUser = directoryClient.GetUserByUserPrincipalName(_upnName, true);
            
            SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('GetUserByUserPrincipalName', true, infoMessage, null, null, null);
        
            if (createdUser == null)
            {
                // It is recommended to use IDirectoryClient for graph related operations but it does not support AddUser so using concrete class.
                MicrosoftGraphClient microsoftGraphClient = new MicrosoftGraphClient();
                Microsoft.Dynamics.AX.Security.MicrosoftGraphHelper.UserBuilder builder = Microsoft.Dynamics.AX.Security.MicrosoftGraphHelper.UserBuilder::NewBuilder();

                // Create the user via the builder...
                Microsoft.Graph.User user = builder.SetUserPrincipalName(_upnName)    //john.doe@domain.com
                .SetAccountEnabled(true)
                .SetDisplayName(_fullName)                  //john doe
                .SetMailNickname(_alias)                     //john.doe
                .SetPassword(_oneTimePass)                  //*****
                .SetGivenName(_firstName)                    //john
                .SetSurname(_lastName)                       //doe
                .Build();

                // ... add the user via MicrosoftGraphClient
                microsoftGraphClient.AddUser(user);
                
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('AddUser', true, infoMessage, null, null, null);

                // Get the newly created user.
                createdUser = directoryClient.GetUserByUserPrincipalName(_upnName, true);
                
                SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('GetUserByUserPrincipalName', true, infoMessage, null, null, null);
            }
            else
            {
                warning(strFmt("@Retail:RetailExternalIdentityCreateJob_ExternalIdentityAlreadyExists", _upnName, _fullName));
            }

            str externalName = createdUser.UserPrincipalName;
            // Since tenant id is optional for a single-tenant environment, and not directly available on the newly created User, just set it to blank.
            str externalId = '';

            System.Guid externalIdentitySubId = createdUser.ObjectID;
            str externalSubId = externalIdentitySubId.ToString();

            return [externalId, externalSubId, externalName];
        }
        else
        {
            SystemRuntimeEventSource::EventWriteADGraphToMSGraphMigration('', false, infoMessage, null, null, null);
            
            GraphAPIClient graphClient = new GraphAPIClient();
            IUser createdUser = graphClient.GetUserByUserPrincipalName(_upnName);

            if (createdUser == null)
            {
                Microsoft.Dynamics.AX.Security.GraphAPIHelper.UserBuilder builder = Microsoft.Dynamics.AX.Security.GraphAPIHelper.UserBuilder::NewBuilder();

                // Create the user via the builder...
                IUser user = builder.SetUserPrincipalName(_upnName)    //john.doe@domain.com
                    .SetAccountEnabled(true)
                    .SetDisplayName(_fullName)                  //john doe
                    .SetMailNickname(_alias)                     //john.doe
                    .SetPassword(_oneTimePass)                  //*****
                    .SetGivenName(_firstName)                    //john
                    .SetSurname(_lastName)                       //doe
                    .Build();

                // ... add the user via GraphApiClient
                graphClient.AddUser(user);

                // Get the newly created user.
                createdUser = graphClient.GetUserByUserPrincipalName(_upnName);
            }
            else
            {
                warning(strFmt("@Retail:RetailExternalIdentityCreateJob_ExternalIdentityAlreadyExists", _upnName, _fullName));
            }

            // Extract external id info to names and identifiers
            IDirectoryObject directoryObject = createdUser;
            str externalName = createdUser.UserPrincipalName;
            // Since tenant id is optional for a single-tenant environment, and not directly available on the newly created User, just set it to blank.
            str externalId = '';
            str externalSubId = directoryObject.ObjectId;

            return [externalId, externalSubId, externalName];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private boolean validateParameters()
    {
        if (!this.parmAlias() || !this.parmPassword())
        {
            this.logError("@Retail:RetailExternalIdentityAliasOrPasswdMissing");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the job to create external identities for the given workers.
    /// </summary>
    public void run()
    {
        str displayName, nameFirst, nameLast, nameUpn;
        str externalId, externalSubId, externalName;

        // Make sure required parameters are provided
        if (this.validateParameters())
        {
            //Get tenant domain
            str tenantDomain = this.getTenantDomain();

            try
            {
                HcmWorker workerTable;
                DirPerson personTable;
                RetailStaffTable staffTable;

                select firstonly PersonnelNumber from workerTable
                    join ExternalIdentityId from staffTable
                        where staffTable.staffId == workerTable.PersonnelNumber &&
                            staffTable.RecId == this.parmRetailStaffRecId()
                    join Name from personTable
                        where personTable.RecId == workerTable.Person;

                if (workerTable)
                {
                    //Get name parts
                    displayName = personTable.Name;
                    [nameFirst, nameLast, nameUpn] = this.getNameParts(displayName, tenantDomain, this.parmAlias());

                    //create AAD user
                    [externalId, externalSubId, externalName] = this.createUser(displayName, nameFirst, nameLast, this.parmAlias(), nameUpn, this.parmPassword());

                    ttsbegin;
                    staffTable = RetailStaffTable::find(workerTable.PersonnelNumber, true);
                    staffTable.ExternalIdentityId = externalId;
                    staffTable.ExternalIdentitySubId = externalSubId;
                    staffTable.ExternalIdentityName = externalName;
                    staffTable.ExternalIdentityAlias = this.parmAlias();
                    staffTable.tmpExternalIdentityAlias = '';
                    staffTable.update();
                    ttscommit;

                    //Log success
                    info(strFmt("@Retail:RetailExternalIdentityCreateJob_SuccessMessage", externalId, displayName));  //'Created external identity %1 for worker %2.'
                }
                else
                {
                    //Log failure: 'The attempt to create external failed because the specified worker could not be found.'
                    this.logError(strFmt("@Retail:RetailExternalIdentityCreateJob_ErrorUnknownWorker", int642Str(this.parmRetailStaffRecId())));
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        //'The attempt to create external identity %1 for worker %2 failed due to update conflicts, and the retry limit was exceeded.'
                        this.logError(strFmt("@Retail:RetailExternalIdentityCreateJob_ErrorUpdateRetryExceeded", externalId, displayName));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    //'The attempt to create external identity %1 for worker %2 failed due to update conflicts.'
                    this.logError(strFmt("@Retail:RetailExternalIdentityCreateJob_ErrorUpdateConflict", externalId, displayName));
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                //Log failure: 'The attempt to create external identity %1 for worker %2 failed.'
                // Use 'UPN' because the External Id may not have been successfully generated.
                this.logError(strFmt("@Retail:RetailExternalIdentityCreateJob_ErrorMessage", nameUpn, displayName));
            }
            catch (Exception::CLRError)
            {
                //Log CLR error.
                System.Exception ex = ClrInterop::getLastException();
                if (ex != null)
                {
                    System.Exception innerEx = ex.get_InnerException();
                    if (innerEx != null)
                    {
                        this.logError(innerEx.Message);
                    }
                    else
                    {
                        this.logError(ex.Message);
                    }
                }

                //Log failure: 'The attempt to create external identity %1 for worker %2 failed.'
                // Use 'UPN' because the External Id may not have been successfully generated.
                this.logError(strFmt("@Retail:RetailExternalIdentityCreateJob_ErrorMessage", nameUpn, displayName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    private void logError(str msg)
    {
        hasError = true;
        error(msg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailExternalIdentityCreateJob</c> class
    /// can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailExternalIdentityCreateJob</c>
    /// cannot be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>