<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseTransHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TrvExpTransHelper class contains methods that have been removed from objects moved into
/// the Expense model. The methods require access to objects found in the Application Suite
/// model and the Expense model. Methods in this class access the expense transaction talbes.
/// </summary>
class TrvExpenseTransHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query range value for the current legal entity.
    /// </summary>
    /// <returns>
    /// The query range value string.
    /// </returns>
    [QueryRangeFunctionAttribute()]
    public static str currentLegalEntity()
    {
        return SysQuery::value(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPerCostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of <c>AmountMST</c> for all expense lines of a given expense report whose expense category
    /// reference a given statistics group.
    /// </summary>
    /// <param name = "_trvCostTypeStatisticsId">The statistics group of interest to calculate the aggregate <c>AmountMST</c> value.</param>
    /// <param name = "_trvExpNumber">The expense report number of interest.</param>
    /// <returns>The sum of expense lines amounts for those lines whose expense category reference a given statistics group.</returns>
    public static AmountMST costPerCostType(TrvCostTypeStatisticsId _trvCostTypeStatisticsId, TrvExpNumber _trvExpNumber)
    {
        TrvExpTrans trvExpTrans;
        TrvCostType trvCostType;

        select sum(AmountMST), CostType
        from trvExpTrans
        where trvExpTrans.ExpNumber == _trvExpNumber
            && trvExpTrans.LineType != TrvExpLineType::ItemizedHeader
        join CostType from trvCostType
        where trvCostType.CostType == trvExpTrans.CostType
            && trvCostType.TrvCostTypeStatisticsId == _trvCostTypeStatisticsId;

        return trvExpTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCashAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the cash advance returns to the specified expense report.
    /// </summary>
    /// <param name="_expNumber">
    /// The Expense number of the expense report.
    /// </param>
    /// <param name="_recIdCont">
    /// A container that contains the record IDs of the cash advances.
    /// </param>
    /// <param name="_categoryCont">
    /// A container that contains the selected category IDs for the cash advance returns.
    /// </param>
    /// <remarks>This method was moved from the table <c>TrvCashAdvance</c>.</remarks>
    public static void transferCashAdvance(TrvExpNumber _expNumber, container _recIdCont, container _categoryCont)
    {
        TrvCashAdvance         trvCashAdvance;
        TrvExpTable            expTable;
        TrvExpTrans            trvExpTrans;
        TrvCostType            trvCostType;
        RefRecId               ccRecId;
        int i;
        int numRecId = conlen(_recIdCont);
        int numCtgId = conlen(_categoryCont);

        if (!_expNumber && (numRecId <= 0) && (numRecId != numCtgId) )
        {
            return;
        }

        expTable = TrvExpTable::find(_expNumber);
        if ( (expTable.ApprovalStatus != TrvAppStatus::Create) &&
             (expTable.ApprovalStatus != TrvAppStatus::Returned) )
        {
            info(strfmt("@SYS102125", expTable.ApprovalStatus));
            return;
        }

        for (i=1; i <= numRecId; i++)
        {
            ccRecId = conpeek(_recIdCont, i);

            select firstonly trvCashAdvance where trvCashAdvance.RecId == ccRecId;
            if (!trvCashAdvance)
                continue;

            trvCostType = TrvCostType::find(conpeek(_categoryCont, i));

            if (!trvCostType)
            {
                warning("@SYS138700");
                continue;
            }
            if (trvCostType.ExpType != TrvExpType::Advance)
            {
                warning("@SYS138701");
                continue;
            }

            select firstonly ExpNumber,CashAdvanceRecId from trvExpTrans where trvExpTrans.ExpNumber == expTable.ExpNumber &&
                                                             trvExpTrans.CashAdvanceRecId == ccRecId;

            if (trvExpTrans)
            {
                // You can only return this cash advance once from this expense report.
                info(strfmt("@SYS126604", trvCashAdvance.CashAdvanceNumber));
                continue;
            }

            trvExpTrans.clear();
            trvExpTrans.ExpNumber       = _expNumber;
            trvExpTrans.initValue();
            trvExpTrans.InterCompanyLE = curext();
            trvExpTrans.CashAdvanceRecId = trvCashAdvance.RecId;
            trvExpTrans.TaxIncluded = NoYes::No;
            trvExpTrans.TaxGroup = '';
            trvExpTrans.TaxItemGroup = '';

            trvExpTrans.CostType = trvCostType.CostType;
            trvExpTrans.initFromCostType();  // this sets the Account Number/Account Type

            trvExpTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            trvExpTrans.AmountCurr = trvCashAdvance.Balance;
            trvExpTrans.ExchangeCode = trvCashAdvance.CurrencyCode;
            trvExpTrans.ExchangeRate = trvCashAdvance.ExchRate;
            trvExpTrans.AmountMST = CurrencyExchangeHelper::amountCur2MST(trvExpTrans.AmountCurr, trvExpTrans.ExchangeCode, trvExpTrans.ExchangeRate);

            if (trvExpTrans.validateWrite())
            {
                ttsbegin;
                trvExpTrans.insert();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the accounting currency code for the current ledger.
    /// </summary>
    /// <returns>The reporting currency code.</returns>
    public static CurrencyCode standardCurrency()
    {
        CurrencyCode currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        if (!currencyCode)
        {
            checkFailed("@SYS26296");
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxPostingInNextOpenPeriodInAnyYearEnabled</Name>
				<Source><![CDATA[
    private static boolean isTaxPostingInNextOpenPeriodInAnyYearEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(TrvPostTaxInNextOpenPeriodInAnyYearFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdatedAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the corrected accounting date if the fiscal period is not open.
    /// This is used when posting tax documents.
    /// </summary>
    /// <param name="_trvExpTransRecID">
    /// The <c>recId</c> of the expense.
    /// </param>
    /// <returns>
    /// Returns the corrected accounting date.
    /// </returns>
    public static AccountingDate getUpdatedAccountingDate(RefRecID _trvExpTransRecID)
    {
        TrvParameters trvParameters = TrvParameters::find();

        #define.cacheScope("TrvExpenseTransHelper.getUpdatedAccountingDate");

        TrvExpTrans trvExpTrans = TrvExpTrans::find(_trvExpTransRecID);

        AccountingDate updatedAccountingDate = TrvExpenseTransHelper::getPostingDate(trvExpTrans.SourceDocumentLine, trvExpTrans.TransDate);

        if (trvParameters.IsAllowUpdateAccountingDate)
        {
            if (SysTransactionScopeCache::get(#cacheScope, updatedAccountingDate))
            {
                updatedAccountingDate = SysTransactionScopeCache::get(#cacheScope, updatedAccountingDate);
            }
            else
            {
                FiscalCalendarRecId fiscalCalendar = Ledger::fiscalCalendar(trvExpTrans.LegalEntity);

                if (!LedgerFiscalCalendar::existDateWithOpenStatus(fiscalCalendar, updatedAccountingDate, FiscalPeriodType::Operating, SysModule::Expense))
                {
                    if (!TrvExpenseTransHelper::isTaxPostingInNextOpenPeriodInAnyYearEnabled())
                    {
                        FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findFirstOpenPeriodInYear(fiscalCalendar, updatedAccountingDate, SysModule::Expense);
                        if (fiscalCalendarPeriod)
                        {
                            updatedAccountingDate = fiscalCalendarPeriod.StartDate;
                        }
                        else
                        {
                            // If there are no open periods in the current fiscal year, it gets the first date of the open period in the next fiscal year.
                            date nextFiscalYearStartDate = FiscalCalendars::findNextYearStart(fiscalCalendar, updatedAccountingDate);
                            updatedAccountingDate = LedgerFiscalCalendar::findFirstOpenPeriodInYear(fiscalCalendar, nextFiscalYearStartDate, SysModule::Expense).StartDate;
                        }
                    }
                    else
                    {
                        // If the feature to post tax in next open ledger fiscal period in any upcoming fiscal calendar year is turned on, 
                        // then updated accounting date will find the start date of next open ledger fiscal period in any upcoming fiscal calendar year (not limited till next fiscal calendar year).
                        updatedAccountingDate = LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(fiscalCalendar, updatedAccountingDate);
                    }
                }

                SysTransactionScopeCache::set(#cacheScope, updatedAccountingDate, updatedAccountingDate);
            }
        }

        return updatedAccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateExpenseReportCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a descriptive caption for an expense report or itemized line.
    /// If itemizedLine is false, set the caption of the form dynamically
    /// to inform the user which expense report he is looking at. Shows the expense report number and, if not empty, its purpose.
    /// </summary>
    /// <param name = "_trvExpTable">The TrvExpTable record to have its caption generated</param>
    /// <param name = "_isItemizedLine">True if the caption should inform the user that it's an itemized line or false to use default caption. Default false.</param>
    /// <param name = "_creatingWorkerName">The optional name of the delegator that owns the expense report.</param>
    public static str generateExpenseReportCaption(TrvExpTable _trvExpTable, boolean _isItemizedLine = false, HcmWorkerName _creatingWorkerName = null)
    {
        str formCaption;

        if (!_isItemizedLine)
        {
            // If the report is on-behalf of another worker.
            if (_creatingWorkerName)
            {
                if (_trvExpTable.Txt2)
                {
                    formCaption = strfmt("@Expense:ExpenseReportDelegateCaptionWithPurpose", _creatingWorkerName, _trvExpTable.ExpNumber, _trvExpTable.Txt2);
                }
                else
                {
                    formCaption = strfmt("@Expense:ExpenseReportDelegateCaptionWithoutPurpose", _creatingWorkerName, _trvExpTable.ExpNumber);
                }
            }
            // If the report is for the current worker.
            else
            {
                if (_trvExpTable.Txt2)
                {
                    formCaption = strfmt("@Expense:ExpenseReportCaptionWithPurpose", _trvExpTable.ExpNumber, _trvExpTable.Txt2);
                }
                else
                {
                    formCaption = strfmt("@Expense:ExpenseReportCaptionWithoutPurpose", _trvExpTable.ExpNumber);
                }
            }
        }
        else
        {
            // Itemization details.
            formCaption = "@Expense:ItemizationDetails";
        }

        return formCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSourceDocumentAndPoliciesAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create source document line and handle calculations dependent on it. After source document line is created,
    /// evaluate policies. This is a wrapper method suitable for being called asynchronously.
    /// </summary>
    /// <param name = "_params">
    /// A container with two values in this order:
    /// 1. RecId of <c>TrvExpTrans</c> record.
    /// 2. A boolean value that controls policy evaluation. True, if policies are to be evaluated; otherwise, false.
    /// </param>
    /// <param name = "_cancellationToken">A cancellation token to request cancellation of async method's execution.</param>
    public static void handleSourceDocumentAndPoliciesAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        if (conLen(_params) != 2)
        {
            error(strFmt("@SYS22828", funcName()));
        }

        RefRecId trvExpTransRecId = conpeek(_params, 1);
        boolean evaluatePolicies = conpeek(_params, 2);

        if (trvExpTransRecId)
        {
            TrvExpTrans::handleSourceDocumentAndPolicies(trvExpTransRecId, evaluatePolicies);
        }

        if (_cancellationToken.IsCancellationRequested)
        {
            _cancellationToken.ThrowIfCancellationRequested();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get posting date.
    /// </summary>
    /// <param name = "_sourceDocLineRecId">Source document line recid.</param>
    /// <param name = "_transDate">Expense line transaction date.</param>
    /// <returns>Tax transaction posting date.</returns>
    public static AccountingDate getPostingDate(SourceDocumentLineRecId _sourceDocLineRecId, TrvDateStd _transDate)
    {
        TrvParameters                   trvParameters = TrvParameters::find();
        AccountingDistribution          accountingDistribution;
        AccountingDate                  postingDate;

        if (trvParameters.AllowGroupingForPostTransactions)
        {
            select firstOnly AccountingDate from accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocLineRecId;

            postingDate = accountingDistribution.AccountingDate;
        }
        else
        {
            postingDate = _transDate;
        }

        return postingDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>