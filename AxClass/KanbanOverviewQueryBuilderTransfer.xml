<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewQueryBuilderTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The AIF Query Builder class for the kanban quantity overview and transfer job control.
/// </summary>
public class KanbanOverviewQueryBuilderTransfer extends KanbanOverviewQueryBuilderCriteria
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to fetch the products for the transfer job overview control.
    /// </summary>
    public void initialize()
    {
        LegalEntity                         legalEntity                  = this.legalEntity();
        str                                 activeDateTime               = DateTimeUtil::toStr(this.getArgs().parmActiveDateTime());
        KanbanBoardTmpFilterCriteria        kanbanBoardTmpFilterCriteria = this.kanbanBoardTmpFilterCriteria();

        //get query to be extended
        query = this.buildItemRelationQueryBase();

        //kanban rule
        QueryBuildDataSource qbdsKanbanRule = query.dataSourceTable(tablenum(KanbanRule));

        //kanban flow
        QueryBuildDataSource qbdsKanbanFlow = qbdsKanbanRule.addDataSource(tablenum(KanbanFlow));
        qbdsKanbanFlow.joinMode(JoinMode::ExistsJoin);
        qbdsKanbanFlow.addLink(fieldnum(KanbanRule,KanbanFlow),fieldnum(KanbanFlow,RecId));

        //last activity in plan
        QueryBuildDataSource qbdsPlanPlanActivityLast = qbdsKanbanFlow.addDataSource(tablenum(PlanPlanActivity));
        qbdsPlanPlanActivityLast.joinMode(JoinMode::InnerJoin);
        qbdsPlanPlanActivityLast.fetchMode(QueryFetchMode::One2One);
        qbdsPlanPlanActivityLast.addLink(fieldnum(KanbanFlow,LastPlanPlanActivity),fieldnum(PlanPlanActivity,RecId));

        //relationship exists where flow has more than just one activity
        QueryBuildDataSource qbdsKanbanFlowActivityRelationship = qbdsKanbanFlow.addDataSource(tablenum(KanbanFlowActivityRelationship));
        qbdsKanbanFlowActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsKanbanFlowActivityRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanFlowActivityRelationship.addLink(fieldnum(KanbanFlow,RecId),fieldnum(KanbanFlowActivityRelationship,KanbanFlow));

        QueryBuildDataSource qbdsLeanProdFlowPlanActivityRelation = qbdsKanbanFlowActivityRelationship.addDataSource(tablenum(LeanProdFlowPlanActivityRelation));
        qbdsLeanProdFlowPlanActivityRelation.joinMode(JoinMode::OuterJoin);
        qbdsLeanProdFlowPlanActivityRelation.fetchMode(QueryFetchMode::One2One);
        qbdsLeanProdFlowPlanActivityRelation.addLink(fieldnum(KanbanFlowActivityRelationship,LeanProdFlowActivityRelation),
                                                     fieldnum(LeanProdFlowPlanActivityRelation,RecId));

        QueryBuildDataSource qbdsPlanActivityRelationship = qbdsLeanProdFlowPlanActivityRelation.addDataSource(tablenum(PlanActivityRelationship));
        qbdsPlanActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsPlanActivityRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsPlanActivityRelationship.addLink(fieldnum(LeanProdFlowPlanActivityRelation,PlanActivityRelationship),
                                             fieldnum(PlanActivityRelationship,RecId));

        //activity; flow must have at least one transfer activity; look at all independent activities + the last activity
        QueryBuildDataSource qbdsPlanActivity = qbdsKanbanFlow.addDataSource(tablenum(PlanActivity));
        qbdsPlanActivity.joinMode(JoinMode::ExistsJoin);
        QueryBuildRange queryBuildRange = qbdsPlanActivity.addRange(fieldnum(PlanActivity,PlanActivityId));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strfmt('((%1.%2 == %3.%4) || (%5.%6 == %7.%8))',
            qbdsPlanActivity.name(),
            fieldstr(PlanActivity,RecId),
            qbdsPlanActivityRelationship.name(),
            fieldstr(PlanActivityRelationship,IndependentPlanActivity),
            qbdsPlanActivity.name(),
            fieldstr(PlanActivity,RecId),
            qbdsPlanPlanActivityLast.name(),
            fieldstr(PlanPlanActivity,PlanActivity)));

        queryBuildRange = qbdsPlanActivity.addRange(fieldnum(PlanActivity,PlanActivityType));
        queryBuildRange.value(queryValue(PlanActivityType::Transfer));

        //apply filter criteria
        kanbanBoardTmpFilterCriteria.applyFilterCriteria(qbdsPlanActivity);

        //kanban kule inverted; there is no rule that has minimum alert level but is expired
        QueryBuildDataSource qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tablenum(KanbanRule));
        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldnum(KanbanRule,RecId),fieldnum(KanbanRule,RecId));

        //first criteria - no minimum alert level or rule expired
        //kanban rule inverted; there is no rule that has an alert level but is expired
        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule,MinimumAlertLevel));
        queryBuildRange.value(SysQuery::valueNot(0));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule,LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        //has not started, or has already ended
        QueryBuildDataSource qbdsLeanCoverageKanbanRule = query.dataSourceTable(tablenum(LeanCoverageKanbanRule));
        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule,RecId));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strfmt('((%1.%2 > %3) || ((%4.%5 < %6) && (%7.%8 != %9)))',
            qbdsLeanCoverageKanbanRule.name(),fieldstr(LeanCoverageKanbanRule,ValidFrom),activeDateTime,
            qbdsLeanCoverageKanbanRule.name(),fieldstr(LeanCoverageKanbanRule,ValidTo),activeDateTime,
            qbdsLeanCoverageKanbanRule.name(),fieldstr(LeanCoverageKanbanRule,ValidTo),KanbanOverviewQueryBuilderCriteria::dateTimeNull2Str()));

        //kanban rule inverted; there is no rule that has no minimum alert level and no kanbans jobs
        qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tablenum(KanbanRule));
        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldnum(KanbanRule,RecId),fieldnum(KanbanRule,RecId));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule,MinimumAlertLevel));
        queryBuildRange.value(queryValue(0));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule,LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        //second criteria - no jobs
        //jobs that belong to a created kanban which must belong to a not expired rule
        QueryBuildDataSource qbdsKanban = qbdsKanbanRuleInvert.addDataSource(tablenum(Kanban));
        qbdsKanban.joinMode(JoinMode::NoExistsJoin);
        qbdsKanban.addLink(fieldnum(KanbanRule,RecId),fieldnum(Kanban,KanbanRule));

        queryBuildRange = qbdsKanban.addRange(fieldnum(Kanban,Status));
        queryBuildRange.value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        queryBuildRange = qbdsKanban.addRange(fieldnum(Kanban,LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        //initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewQueryBuilderTransfer construct()
    {
        return new KanbanOverviewQueryBuilderTransfer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
