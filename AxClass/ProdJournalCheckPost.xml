<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class ProdJournalCheckPost  extends JournalCheckPostLedger
{
    RecordSortedList        cacheProdJournalTableBOM;
    Map                     mapJournalDate;             //  journalId,transDate

    CostAmountPhysical      costAmountPhysical;
    ProdReportedGood        qtyGood;
    ProdReportedError       qtyError;

    PdsCWBatchGood          cwQtyGood;
    PdsCWBatchErr           cwQtyError;

    InventCostProdIndirect  inventCostProdIndirect;
    // <GEERU>
    #ISOCountryRegionCodes
    boolean                 countryRegion_RU;
    // </GEERU>

    InventQualityManagementOrderCreator inventQualityManagementOrderCreator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExistJournalRelease_RU</Name>
				<Source><![CDATA[
    public void checkExistJournalRelease_RU()
    {
        ProdJournalTable            journalTable, journalTableRelease;
        boolean                     hasQtyError;
        ProdJournalRoute            prodJournalRoute;
        ProdJournalProd             prodJournalProd;

        journalTable = ProdJournalTable::find(journalId);
        if (ProdTable::find(journalTable.ProdId).useReleaseFromProduction_RU() &&
            journalTableId == tableNum(ProdJournalTable))
        {
            switch (journalTable.JournalType)
            {
                case ProdJournalType::RouteCard, ProdJournalType::JobCard :
                    select firstonly RecId from prodJournalRoute
                        where prodJournalRoute.JournalId == journalId &&
                              prodJournalRoute.QtyError  > 0;

                    hasQtyError = (prodJournalRoute.RecId != 0);
                    break;

                case ProdJournalType::ReportFinished:
                    select firstonly RecId from prodJournalProd
                        where prodJournalProd.JournalId == journalId &&
                              prodJournalProd.QtyError  > 0;

                    hasQtyError = (prodJournalProd.RecId != 0);
                    break;

                default :
                    throw error(strFmt("@SYS22828", funcName()));
            }

            if (hasQtyError)
            {
                select firstonly journalTableRelease
                    where journalTableRelease.ProdRefJournalId_RU   == journalTable.JournalId &&
                          journalTableRelease.ProdRefJournalType_RU == journalTable.JournalType;

                if (!journalTableRelease &&
                    Box::yesNo("@GLS115792", DialogButton::Yes) == DialogButton::Yes)
                {
                    ProdJournalCreateRelease_RU prodJournalCreateRelease = ProdJournalCreateRelease_RU::construct();
                    prodJournalCreateRelease.setParmForm(journalTable.ProdId);
                    prodJournalCreateRelease.parmCallerJournalId(journalTable.JournalId);
                    prodJournalCreateRelease.init();

                    if (prodJournalCreateRelease.prompt())
                    {
                        prodJournalCreateRelease.runOperation();

                        journalTable = ProdJournalTable::find(prodJournalCreateRelease.parmJournalId());
                        if (journalTable)
                        {
                            Args args = new Args();
                            args.record(journalTable);

                            MenuFunction mfJournalForm = new MenuFunction(menuItemDisplayStr(ProdJournalTable), MenuItemType::Display);
                            FormRun journalFormRun = mfJournalForm.create(args);
                            journalFormRun.run();

                            args = new Args();
                            args.record(journalTable);
                            args.caller(journalFormRun);

                            MenuFunction mfJourLinesForm = new MenuFunction(menuItemDisplayStr(ProdJournalRelease_RU), MenuItemType::Display);
                            FormRun jourLinesFormRun = mfJourLinesForm.create(args);
                            jourLinesFormRun.run();

                            journalFormRun.detach();
                            jourLinesFormRun.detach();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    public boolean checkJournal(JournalTransList _journalTransList)
    {
        return super(_journalTransList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdTable</Name>
				<Source><![CDATA[
    boolean checkProdTable(ProdTable _prodTable)
    {
        boolean ok = true;

        ok = ok && _prodTable.checkValid(_prodTable.ProdId);
        ok = ok && _prodTable.status().checkPostJournal();
        ok = ok && ProdGroup::checkExist(_prodTable.ProdGroupId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    boolean checkTrans(JournalTransData _journalTransData)
    {
        ProdJournalTransData journalTransData = _journalTransData as JournalTransData;
        boolean ok = super(_journalTransData);

        ok = ok && this.checkProdTable(ProdTable::find(journalTransData.prodId()));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQualityOrderBeforePostRAF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates quality order before posting the report as finished journal.
    /// </summary>
    /// <param name="_journalId">
    /// The journal id for the journal.
    /// </param>
    /// <remarks>
    /// Quality order before RAF must be created outside the posting transaction.
    /// </remarks>
    protected void createQualityOrderBeforePostRAF(JournalId _journalId)
    {
        ProdJournalProd prodJournalProd;

        if (this.parmJournalCheckPostType() != JournalCheckPostType::Post ||
            !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        while select prodJournalProd
            order by LineNum asc
            where prodJournalProd.JournalId == _journalId
               && (prodJournalProd.QtyGood > 0 || prodJournalProd.PdsCWBatchGood > 0)
        {
            if (prodJournalProd.isCoBy())
            {
                InventQualityManagementCreateHandler::createProductionReportFinishedCo(prodJournalProd, InventTestExecution::Before);
            }
            else
            {
                inventQualityManagementOrderCreator.createProductionReportFinishedBefore(
                                        ProdTable::find(prodJournalProd.ProdId),
                                        prodJournalProd.QtyGood,
                                        prodJournalProd.PdsCWBatchGood);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventCostProdIndirectRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Two posted production journal lines may create two identical (or undistinguishable) indirect cost transaction lines.
    /// If we want to join them, we need to record the recId of the journal lines on the prodIndirectTrans table.
    /// </summary>
    /// <param name = "_journalTransData">Production journal line data.</param>
    /// <param name = "_InventCostProdIndirect"Production indirect trans data.</param>
    protected void addInventCostProdIndirectRelation(
        JournalTransData _journalTransData,
        InventCostProdIndirect _InventCostProdIndirect)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCacheProdJournalTableBOM</Name>
				<Source><![CDATA[
    RecordSortedList initCacheProdJournalTableBOM()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(ProdJournalTable));

        recordSortedList.sortOrder(fieldNum(ProdJournalTable,EndJob),fieldNum(ProdJournalTable,JournalId));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdTableJour</Name>
				<Source><![CDATA[
    ProdTableJour initProdTableJour(
        JournalTransData    _journalTransData,
        ProdTable           _prodTable
        )
    {
        ProdTableJour   prodTableJour;

        prodTableJour.initFromProdTable(_prodTable);

        prodTableJour.TransDate      = _journalTransData.journalTrans().TransDate;
        prodTableJour.Voucher        = _journalTransData.journalTrans().Voucher;

        return prodTableJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSysModule</Name>
				<Source><![CDATA[
    SysModule ledgerSysModule()
    {
        return SysModule::Prod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtType</Name>
				<Source><![CDATA[
    LedgerTransTxt ledgerTransTxtType()
    {
        Integer journalTypeId = journalTableData.journalTable().JournalType;

        switch (journalTypeId)
        {
            case ProdJournalType::Picklist      : return LedgerTransTxt::ProdPicklist;
            case ProdJournalType::ReportFinished: return LedgerTransTxt::ProdReportFinished;
            case ProdJournalType::RouteCard     : return LedgerTransTxt::ProdRouteCard;
            case ProdJournalType::JobCard       : return LedgerTransTxt::ProdJobCard;
        }
        return LedgerTransTxt::ProdPicklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckExistJournalRelease_RU</Name>
				<Source><![CDATA[
    public NoYes mustCheckExistJournalRelease_RU()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRealCalcProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the production calculation transaction should be updated.
    /// </summary>
    /// <returns>
    /// true if the production calculation transaction should be updated; otherwise, false.
    /// </returns>
    public boolean mustUpdateRealCalcProduction()
    {
        ProdParameters prodParameters = ProdParameters::find();
        return !prodParameters.SkipUpdateOfProdCalcTransWhenPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        inventQualityManagementOrderCreator = InventQualityManagementOrderCreator::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityManagementOrderCreator</Name>
				<Source><![CDATA[
    public InventQualityManagementOrderCreator parmInventQualityManagementOrderCreator(InventQualityManagementOrderCreator _inventQualityManagementOrderCreator = inventQualityManagementOrderCreator)
    {
        inventQualityManagementOrderCreator = _inventQualityManagementOrderCreator;

        return inventQualityManagementOrderCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the batch attributes for all production related quality orders.
    /// </summary>
    private void pdsBatchAttribUpdate()
    {
        PmfProdCoBy             pmfProdCoBy;

        if (#PdsBatchAttribEnabled)
        {
            ProdJournalTable prodJournalTable = journalTableData.journalTable();

            if (prodJournalTable.JournalType
                == ProdJournalType::ReportFinished)
            {
                ProdTable prodTable = ProdTable::find(prodJournalTable.ProdId);

                InventQualityReferenceType::newPdsBatchAttribUpdateBuffer(
                    prodTable,
                    PdsBatchAttribUpdateType::ReportFinished)
                        .pdsBatchAttribSelect();

                if (prodTable.ProdType == ProdType::Process)
                {
                    while select pmfProdCoBy
                        where pmfProdCoBy.ProdId == prodTable.ProdId
                    {
                        InventQualityReferenceType::newPdsBatchAttribUpdateBuffer(
                            pmfProdCoBy,
                            PdsBatchAttribUpdateType::ReportFinished)
                                .pdsBatchAttribSelect();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    boolean postingType()
    {
        ProdJournalTable prodJournalTable = journalTableData.journalTable();
        return (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? !ProdParametersDim::projPostExPostingType(prodJournalTable) : !ProdTable::find(prodJournalTable.ProdId).prodParametersDim().PostExPostingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the parent method to also post updates to batch attributes when the journal is posted.
    /// </summary>
    /// <param name="_journalTransList">
    /// A list of journal transaction to post.
    /// </param>
    [Wrappable(true)]
    protected void postJournal(JournalTransList _journalTransList)
    {
        if (this.mustPostProductionJournal())
        {
            super(_journalTransList);

            this.pdsBatchAttribUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostProductionJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the production journal must be posted.
    /// </summary>
    /// <returns>true if the production journal must be posted; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean mustPostProductionJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckLedgerTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the posted date must be checked against the fiscal calendar period to make sure
    /// that the latter is open and accessible.
    /// </summary>
    /// <param name = "_journalTransData">The production journal transaction to check.</param>
    /// <returns>
    /// true if the posted date must be checked against the fiscal calendar period; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    internal boolean mustCheckLedgerTransDate(JournalTransData  _journalTransData)
    {
        return super(_journalTransData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeletePostedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal lines must be deleted after posting,
    /// e.g. if DeletePostedLines = Yes ("Delete lines after posting").
    /// </summary>
    /// <param name = "_jourTable">The production journal header.</param>
    /// <returns>
    /// true if the journal lines must be deleted after posting; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    internal boolean mustDeletePostedLines(JournalTableMap _jourTable)
    {
        return super(_jourTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalCreateBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdJournalCreateBOM</c> class instance.
    /// </summary>
    /// <param name = "_prodJournalTableBOM">The production journal.</param>
    /// <param name = "_skipAccError">A Boolean controlling if accumulated errors are be skipped.</param>
    /// <returns>A new instance.</returns>
    protected ProdJournalCreateBOM createProdJournalCreateBOM(ProdJournalTable _prodJournalTableBOM, NoYes _skipAccError)
    {
        return ProdJournalCreateBOM::newProdJournalTableBOMAuto(_prodJournalTableBOM, _skipAccError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdJournalTableBOM</Name>
				<Source><![CDATA[
    void postProdJournalTableBOM(NoYes _skipAccError = NoYes::No)
    {
        ProdJournalTable prodJournalTableBOM;

        if (   cacheProdJournalTableBOM
            && cacheProdJournalTableBOM.len() > 0)
        {
            setPrefix("@SYS69509");

            if (cacheProdJournalTableBOM.first(prodJournalTableBOM))
            {
                do
                {
                    ProdJournalCreateBOM prodJournalCreateBOM;
                    try
                    {
                        boolean postJournal = true;

                        if (prodJournalTableBOM.WaitCreateLine)
                        {
                            ttsbegin;

                            prodJournalCreateBOM = this.createProdJournalCreateBOM(prodJournalTableBOM,_skipAccError);
                            if (mapJournalDate && mapJournalDate.exists(prodJournalTableBOM.JournalId))
                            {
                                prodJournalCreateBOM.parmTransDate(mapJournalDate.lookup(prodJournalTableBOM.JournalId));
                            }

                            prodJournalCreateBOM.runOperation();

                            if (prodJournalCreateBOM.isJournalEmpty())
                            {
                                postJournal = false;
                            }

                            ttscommit;
                        }

                        if (postJournal)
                        {
                            ttsbegin;
                            ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTableBOM.JournalId,this.parmShowInfoResult());
                            // do not throw exception if picking list journal posting fails
                            // so that we process all records in the picking list journal
                            prodJournalCheckPostBOM.parmThrowCheckFailed(false);
                            // also mark transfer errors to new journal for the picking list journal
                            prodJournalCheckPostBOM.parmTransferErrors(this.parmTransferErrors());
                            prodJournalCheckPostBOM.runOperation();
                            ttscommit;
                        }
                    }
                    catch (Exception::Error)
                    {
                        continue;
                    }
                    finally
                    {
                        if (prodJournalCreateBOM && prodJournalCreateBOM.isJournalEmpty())
                        {
                            ProdJournalTable prodJournalTableEmpty = ProdJournalTable::find(prodJournalTableBOM.JournalId, true);
                            prodJournalTableEmpty.delete();
                        }
                    }
                }
                while (cacheProdJournalTableBOM.next(prodJournalTableBOM));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdTableJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>ProdTableJour</c> table instance.
    /// </summary>
    /// <param name = "_prodTable">A production order instance.</param>
    /// <param name = "_prodTableJour">A production order journal instance.</param>
    protected void insertProdTableJour(ProdTable _prodTable, ProdTableJour _prodTableJour)
    {
        _prodTableJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVoucher</Name>
				<Source><![CDATA[
    void postVoucher(JournalTransList _journalTransList)
    {
        costAmountPhysical  = 0;
        qtyGood             = 0;
        qtyError            = 0;

        cwQtyGood           = 0;
        cwQtyError          = 0;

        super(_journalTransList);

        if (_journalTransList.first())
        {
            ProdJournalTransData prodJournalTransData = _journalTransList.journalTransData();

            ProdTable prodTable = ProdTable::find(prodJournalTransData.prodId(),true);
            ProdTableJour prodTableJour = this.initProdTableJour(prodJournalTransData,prodTable);

            prodTableJour.JournalType     = prodJournalTransData.prodJourType();
            prodTableJour.AmountPhysical  = costAmountPhysical;
            prodTableJour.QtyError        = qtyError;
            prodTableJour.QtyGood         = qtyGood;

            prodTableJour.PdsCWBatchGood     = cwQtyGood;
            prodTableJour.PdsCWBatchErr      = cwQtyError;

            this.insertProdTableJour(prodTable, prodTableJour);

            if (   prodTableJour.JournalType==ProdJourType::Receipt
                && prodTable.isProjMethodConsumed())
            {
                if (prodTable.qtyError())
                {
                    ProjInventJournalTransMapForm::updateOrCreateProdTableProj(prodTable, ProjItemTypeProdTable::ErrorQuantity, prodTableJour.TransDate);
                }
                else
                {
                    prodTable.deleteProdTableProj(ProjItemTypeProdTable::ErrorQuantity);
                }

                if (prodTable.overDelivery())
                {
                    ProjInventJournalTransMapForm::updateOrCreateProdTableProj(prodTable, ProjItemTypeProdTable::Overdelivery, prodTableJour.TransDate);
                }
                else
                {
                    prodTable.deleteProdTableProj(ProjItemTypeProdTable::Overdelivery);
                }

                ProdBOM prodBOM;
                while select prodBOM
                    where prodBOM.ProdId     == prodTable.ProdId &&
                        prodBOM.InventRefType == InventRefType::Production
                {
                    ProdTable prodTableRef = prodBOM.prodTableRef();
                    if (prodTableRef.isProjMethodConsumed())
                    {
                        InventQty qtyUnderconsumed = prodTableRef.qtyUnderconsumed();
                        if (qtyUnderconsumed)
                        {
                            ProjInventJournalTransMapForm::updateOrCreateProdTableProj(prodTableRef, ProjItemTypeProdTable::Underconsumed, prodTableJour.TransDate, qtyUnderconsumed);
                        }
                        else
                        {
                            prodTableRef.deleteProdTableProj(ProjItemTypeProdTable::Underconsumed);
                        }
                    }
                }
            }

            prodTable.status().setBackStatus();
            prodTable.doUpdate();

            if (this.mustRecalculatePriceForJournal(prodJournalTransData.prodJourType()))
            {
                if (!ProdTableJour::isHistoricalCost(prodTable.ProdId) || (countryRegion_RU && prodTable.calculatingWIP_RU()))
                {
                    // calculate indirect cost amounts (including for co-products) and production cost amounts
                    // note that production costs should be calculated *after* its sub-costs (including indirect costs)
                    this.updateRealCalcProduction(prodTable);

                    if (   this.mustUpdateRealCalcProduction()
                        && prodTable.ProdType == ProdType::Process)
                    {
                        //Only update the co-product totals - indirect already handled
                        PmfCoByProdCalcTrans::updateRealCalcProduction(prodTable);
                    }
                }
                else
                {
                    warning(strFmt("@SYS85107", prodTable.ProdId));
                }
            }
        }

        if ( inventCostProdIndirect )
        {
            inventCostProdIndirect.finalizeCalc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecalculatePriceForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the price must be recalculated for a given journal type.
    /// </summary>
    /// <param name = "_prodJourType">The type of the production journal.</param>
    /// <returns>true if price must be recalculated; otherwise, false.</returns>
    protected boolean mustRecalculatePriceForJournal(ProdJourType _prodJourType)
    {
        switch (_prodJourType)
        {
            case ProdJourType::Release:
            case ProdJourType::RouteCard:
            case ProdJourType::Receipt:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked just before the run method.
    /// </summary>
    protected void preRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressText</Name>
				<Source><![CDATA[
    str progressText(JournalTransData _journalTransData)
    {
        ProdJournalTransData journalTransData = _journalTransData as ProdJournalTransData;
        return strFmt("@SYS69042",journalTransData.journalTrans().LineNum,journalTransData.prodId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInit</Name>
				<Source><![CDATA[
    Integer runInit()
    {
        cacheProdJournalTableBOM = null;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected Integer runEnd(boolean _deleteErrors = false)
    {
        return super(_deleteErrors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>ProdCalcTrans</c> table with indirect cost and production cost amounts.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production order to update.
    /// </param>
    protected void updateRealCalcProduction(ProdTable _prodTable)
    {
        if (this.mustUpdateRealCalcProduction())
        {
            ProdCalcTrans::updateRealCalcIndirect(_prodTable);
            ProdCalcTrans::updateRealCalcProduction(_prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalForm journalForm = JournalForm::fromArgs(_args);
        ProdJournalCheckPost journalCheckPost = ProdJournalCheckPost::newFromForm(_args,journalForm);

        journalForm.runbaseMainStart();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && journalCheckPost.mustCheckExistJournalRelease_RU())
        {
            journalCheckPost.checkExistJournalRelease_RU();
        }
        // </GEERU>

        if (!journalCheckPost.prompt())
        {
            if (!journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }
            return;
        }

        try
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                journalCheckPost.preRun();
                journalCheckPost.runOperation();
                journalForm.runbaseMainEnd(journalCheckPost,false);
            }
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static ProdJournalCheckPost newFromForm(Args _args,JournalForm _journalForm)
    {        
        ProdJournalTable        journalTable = _journalForm.journalTableData().journalTable();
        ProdJournalCheckPost    journalCheckPost = ProdJournalCheckPost::newProdJournalCheckPost(_args, journalTable);

        if(!journalCheckPost)
        {
            throw error(strFmt("@SYS23455",funcName()));
        }

        JournalTransData journalTransData = _journalForm.journalTransData();
        if (journalTransData)
        {
            journalCheckPost.parmVoucher(journalTransData.journalTrans().Voucher);
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalCheckPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdJournalCheckPost</c> instance.
    /// </summary>
    /// <param name = "_args"> The form arguments. </param>
    /// <param name = "_journalTable"> The <c>ProdJournalTable</c> record from which the <c>ProdJournalCheckPost</c> record is initialized. </param>
    /// <returns> The new <c>ProdJournalCheckPost</c> instance. </returns>
    protected static ProdJournalCheckPost newProdJournalCheckPost(Args _args, ProdJournalTable _journalTable)
    {
        switch (_journalTable.JournalType)
        {
            case ProdJournalType::Picklist:
                return ProdJournalCheckPostBOM::newJournalCheckPost(false,true,_args.parmEnum(),_journalTable.TableId,_journalTable.JournalId);
            case ProdJournalType::RouteCard:
                return ProdJournalCheckPostRoute::newJournalCheckPost(false,true,_args.parmEnum(),_journalTable.TableId,_journalTable.JournalId);
            case ProdJournalType::JobCard:
                return ProdJournalCheckPostRouteJob::newJournalCheckPost(false,true,_args.parmEnum(),_journalTable.TableId,_journalTable.JournalId);
            case ProdJournalType::ReportFinished:
                return ProdJournalCheckPostProd::newJournalCheckPost(false,true,_args.parmEnum(),_journalTable.TableId,_journalTable.JournalId,true);
            // <GEERU>
            case ProdJournalType::ReleaseFromProduction_RU :                
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00124,funcName());
                return ProdJournalCheckPostRelease_RU::newJournalCheckPost(false, true, _args.parmEnum(), _journalTable.TableId, _journalTable.JournalId);
            // </GEERU>
            
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>