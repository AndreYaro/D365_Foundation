<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowInsightsStateMachineV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ServiceFramework.Communication.Http;

[Export(identifierStr(Dynamics.AX.Application.PowerAIInsightsIStateMachine))]
[ExportMetadata(classStr(PowerAIInsightsIStateMachine), identifierStr(CashFlowInsightsV2))]
internal class CashFlowInsightsStateMachineV2 implements PowerAIInsightsIStateMachine
{
    private SysInstrumentationLogger logger;
    private FinanceInsightsInitiatorServiceClient serviceClient;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = SysInstrumentationLoggerFactory::CreateLogger(this.GetType().Name);

        serviceClient = FinanceInsightsInitiatorServiceClient::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessEvents</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canProcessEvents()
    {
        return CashflowInsightsActivation::isConfigurable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPollingExternalServiceForStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isPollingExternalServiceForStatus(PowerAIInsightsStateMachineState _state)
    {
        return _state == CashFlowInsightsStateMachineState::ExternalDataServicePolling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchDataSyncState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataJobServiceState fetchDataSyncState()
    {
        DataJobServiceState jobState;

        guid executionId = CashFlowInsightsParameters::findOrCreate().FinanceInsightsExecutionId;

        if (executionId != emptyGuid())
        {
            jobState = serviceClient.getCashFlowTimeSeriesClient().fetchExecutionStatus(executionId);
        }

        return jobState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public PowerAIInsightsStateMachineState transition(PowerAIInsightsStateMachineState _beginningState, PowerAIInsightsEvent _event)
    {
        PowerAIInsightsStateMachineState newState;

        switch (_beginningState)
        {
            case CashFlowInsightsStateMachineState::Disabled:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::AcceptedTermsClicked:
                        newState = this.onAcceptedTermsClicked(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::Enabled:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::CreateModelClicked:
                        newState = this.onCreateModelClicked(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::DisableTermsClicked:
                        newState = this.onDisableTermsClicked(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::BatchJobQueued:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::BatchJobStarted:
                        newState = this.onBatchJobStarted(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::BatchJobInProgress:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::BatchJobSucceeded:
                        newState = this.onBatchJobSucceeded(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::BatchJobFailed:
                        newState = this.onBatchJobFailed(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::BatchJobSucceeded:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::TriggerDataFlow:
                        newState = this.onTriggerDataFlow(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::RetriggerDataFlow:
                        newState = this.onRetriggerDataFlow(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::BatchJobFailed:
                switch (_event.getEvent())
                {
                    case PowerAIInsightsEventConstants::RecreateModelClicked:
                        newState = this.onRecreateModelClicked(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::DisableTermsClicked:
                        newState = this.onDisableTermsClicked(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::ExternalServiceCallFailed:
                switch (_event.getEvent())
                {
                    // If recreate is clicked and we are in ExternalServiceCallFailed, we can just retrigger the external api since data is already aggregated.
                    case PowerAIInsightsEventConstants::RecreateModelClicked:
                        newState = this.onRetriggerDataFlow(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::DisableTermsClicked:
                        newState = this.onDisableTermsClicked(_event.getEvent());
                        break;
                }
                break;
            case CashFlowInsightsStateMachineState::ExternalDataServicePolling:
                switch (_event.getEvent())
                {
                    // Don't change to a new state when we encounter polling state changes.
                    case PowerAIInsightsEventConstants::ExternalServicePolledAndReturnedInitializeCompleted,
                         PowerAIInsightsEventConstants::ExternalServicePolledAndReturnedInitializeFailed,
                         PowerAIInsightsEventConstants::ExternalServicePolledAndReturnedInitializeNone,
                         PowerAIInsightsEventConstants::ExternalServicePolledAndReturnedInitializeInProgress,
                         PowerAIInsightsEventConstants::PowerAIPolledAndReturnedWarmupSuccess,
                         PowerAIInsightsEventConstants::PowerAIPolledAndReturnedWarmupFailure,
                         PowerAIInsightsEventConstants::PowerAIPolledAndReturnedWarmupInProgress,
                         PowerAIInsightsEventConstants::PowerAIPolledAndReturnedWarmupUnknown:
                        newState = this.onExternalServicePolled(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::RecreateModelClicked:
                        newState = this.onRecreateModelClicked(_event.getEvent());
                        break;
                    case PowerAIInsightsEventConstants::DisableTermsClicked:
                        newState = this.onDisableTermsClicked(_event.getEvent());
                        break;
                }
                break;
        }

        // Initialize to beginning state in case no transition is found.
        if (newState == '')
        {
            newState = _beginningState;
        }

        return newState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAcceptedTermsClicked</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onAcceptedTermsClicked(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityAcceptingTerms, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            // Update the parameters table
            CashflowInsightsParameters::acceptTermsAndConditions(NoYes::Yes);

            return CashFlowInsightsStateMachineState::Enabled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisableTermsClicked</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onDisableTermsClicked(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityDisablingFeature, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            serviceClient.getCashFlowTimeSeriesClient().deleteAllExecutions();

            // Update the parameters table
            CashflowInsightsParameters::acceptTermsAndConditions(NoYes::No);

            // Disable any recurring batches.
            CashFlowTimeSeriesRefreshServiceController::endBatchJobRecurrence();

            return CashFlowInsightsStateMachineState::Disabled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCreateModelClicked</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onCreateModelClicked(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityQueueingInitializeBatchJob, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            // Trigger the batch job
            CashFlowTimeSeriesInitializeServiceController::main();

            // Schedule the recurring batch job.
            CashFlowTimeSeriesRefreshServiceController::createBatchJob();

            return CashFlowInsightsStateMachineState::BatchJobQueued;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBatchJobStarted</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onBatchJobStarted(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityBatchJobStarted, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            return CashFlowInsightsStateMachineState::BatchJobInProgress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBatchJobSucceeded</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onBatchJobSucceeded(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityBatchJobSucceeded, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            return CashFlowInsightsStateMachineState::BatchJobSucceeded;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBatchJobFailed</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onBatchJobFailed(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityBatchJobFailed, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            return CashFlowInsightsStateMachineState::BatchJobFailed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRecreateModelClicked</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onRecreateModelClicked(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityQueueingReInitializeBatchJob, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            // Trigger the batch job
            CashFlowTimeSeriesReInitializeServiceController::main();

            return CashFlowInsightsStateMachineState::BatchJobQueued;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTriggerDataFlow</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onTriggerDataFlow(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityTriggeringDataFlow, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            return this.tryInitializeCashFlowTimeSeries(context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRetriggerDataFlow</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onRetriggerDataFlow(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityRetriggeringDataFlow, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            serviceClient.getCashFlowTimeSeriesClient().deleteAllExecutions();

            return this.tryInitializeCashFlowTimeSeries(context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryInitializeCashFlowTimeSeries</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState tryInitializeCashFlowTimeSeries(SysInstrumentationActivityContext context)
    {
        System.Exception exception;
        NonSuccessHttpResponseException commException;

        try
        {
            this.initializeCashFlowTimeSeries();

            return CashFlowInsightsStateMachineState::ExternalDataServicePolling;
        }
        catch (commException)
        {
            str exceptionMessage = strFmt('ReasonCode: %1, %2 %3', commException.RemoteStatusCode, commException.RemoteReasonPhrase, commException.ToString());
            logger.logError(exceptionMessage);
            context.addCustomProperty(FinanceInsightsConstants::InstrumentationCustomPropertyExceptionType, commException.RemoteServiceError != null ? commException.RemoteServiceError.ErrorCode : 'Unknown');

            return CashFlowInsightsStateMachineState::ExternalServiceCallFailed;
        }
        catch (exception)
        {
            logger.logError(exception.ToString());
            context.addCustomProperty(FinanceInsightsConstants::InstrumentationCustomPropertyExceptionType, exception.GetType().Name);

            return CashFlowInsightsStateMachineState::ExternalServiceCallFailed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashFlowTimeSeries</Name>
				<Source><![CDATA[
    private void initializeCashFlowTimeSeries()
    {
        FinanceInsightsExecutionInitializationResponseDataContract initializationResponse = this.createCashFlowExecution();

        if (initializationResponse != null && initializationResponse.parmExecutionId() != emptyGuid())
        {
            #OCCRetryCount

            try
            {
                CashflowInsightsParameters params = CashflowInsightsParameters::findOrCreate(true);

                ttsbegin;
                params.FinanceInsightsExecutionId = initializationResponse.parmExecutionId();
                params.doUpdate();
                ttscommit;
            }
            #StandardRetryCatchBlock
        }
        else
        {
            throw new System.Exception('Failed to trigger the FinanceInsightsInitiatorService to start training. Response was empty.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashFlowExecution</Name>
				<Source><![CDATA[
    private FinanceInsightsExecutionInitializationResponseDataContract createCashFlowExecution()
    {
        FinanceInsightsCashFlowTimeSeriesRequestDataContract requestDataContract = this.createRequestDataContract();

        return serviceClient.getCashFlowTimeSeriesClient().createExecution(requestDataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestDataContract</Name>
				<Source><![CDATA[
    private FinanceInsightsCashFlowTimeSeriesRequestDataContract createRequestDataContract()
    {
        const int WeeklyInterval = 1;

        FinanceInsightsProductInfoProvider productInfo = FinanceInsightsProductInfoProvider::construct();
        str appVersion = productInfo.getApplicationVersion();

        logger.logInformation(strFmt('AppVersion: %1', appVersion));

        FinanceInsightsExecutionRecurrenceFrequency executionRecurrence = new FinanceInsightsExecutionRecurrenceFrequency();
        executionRecurrence.parmFrequencyUnit(FinanceInsightsFrequencyUnit::Week);
        executionRecurrence.parmInterval(WeeklyInterval);

        FinanceInsightsCashFlowTimeSeriesRequestDataContract requestDataContract = new FinanceInsightsCashFlowTimeSeriesRequestDataContract();
        requestDataContract.parmAxVersion(appVersion);
        requestDataContract.parmExecutionRecurrenceFrequency(executionRecurrence);

        return requestDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExternalServicePolled</Name>
				<Source><![CDATA[
    private PowerAIInsightsStateMachineState onExternalServicePolled(PowerAIInsightsStateMachineEvent _event)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext(FinanceInsightsConstants::InstrumentationActivityExternalServicePolled, FinanceInsightsConstants::FinanceInsightsMetricNamespace))
        {
            context.addCustomProperty(FinanceInsightsConstants::InstrumentationCustomPropertyEventName,  _event);

            return CashFlowInsightsStateMachineState::ExternalDataServicePolling;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>