<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicAccountServiceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionDynamicAccountServiceProvider</c> class resolves and validates multi-type dimension combinations.
/// </summary>
public class DimensionDynamicAccountServiceProvider extends DimensionCombinationServiceProvider
{
    #DimensionServiceFaults

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForDynamicAccountContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>DimensionDynamicAccountContract</c> class for the specified
    ///    dynamic account contract.
    /// </summary>
    /// <param name="_dimensionDynamicAccountContract">
    ///    An instance of the <c>DimensionDynamicAccountContract</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>DimensionDynamicAccountServiceProvider</c> class.
    /// </returns>
    public static DimensionDynamicAccountServiceProvider newForDynamicAccountContract(
        DimensionDynamicAccountContract _dimensionDynamicAccountContract)
    {
        DimensionDynamicAccountServiceProvider serviceProvider = new DimensionDynamicAccountServiceProvider();
        serviceProvider.initialize(_dimensionDynamicAccountContract);

        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionStorage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>DimensionStorage</c> instance with the resolved values.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DimensionStorage</c> class.
    /// </returns>
    protected DimensionStorage getDimensionStorage()
    {
        DimensionStorage        dimensionStorage;

        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionNameValueListContract() as DimensionDynamicAccountContract;

        DimensionAttribute dimensionAttribute = this.getPrimaryDimensionAttribute();

        DimensionDynamicAccount ledgerDimensionId = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue().parmValue(), dimensionDynamicAccountContract.parmAccountType());
        dimensionStorage = DimensionStorage::findById(ledgerDimensionId);

        return dimensionStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves and returns a <c>DimensionStorageResult</c> instance in the company context of the dynamic account instance.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DimensionStorageResult</c> class.
    /// </returns>
    public DimensionStorageResult resolve()
    {
        DimensionStorageResult dimStorageResult;
        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionNameValueListContract() as DimensionDynamicAccountContract;
        SelectableDataArea dimensionCompany;

        if (!dimensionDynamicAccountContract)
        {
            throw error("@SYS98197", #ValidationFailed);
        }

        // Use the company from the contract if specified, but fall back to
        // curext if it is not specified
        dimensionCompany = dimensionDynamicAccountContract.parmCompany();
        if (!dimensionCompany)
        {
            dimensionCompany = curext();
        }

        changecompany(dimensionCompany)
        {
            if (dimensionDynamicAccountContract.parmAccountType() == LedgerJournalACType::Ledger)
            {
                // If it's a ledger account pass to the ledger provider
                LedgerAccountContract ledgerAccountContract = new LedgerAccountContract();
                ledgerAccountContract.parmMainAccount(dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue().parmValue());
                ledgerAccountContract.parmValues(dimensionDynamicAccountContract.parmValues());

                LedgerDimensionCombinationServiceProvider ledgerDimensionCombinationServiceProvider = LedgerDimensionCombinationServiceProvider::newForLedgerAccountContract(LedgerAccountContract);
                dimStorageResult = ledgerDimensionCombinationServiceProvider.resolve();
            }
            else
            {
                dimStorageResult = super();
            }
        }

        return dimStorageResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNameValueListContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>DimensionNameValueListContract</c> instance and updates the dimension storage result with any errors.
    /// </summary>
    /// <returns>
    ///    true if the contract is valid; otherwise, false.
    /// </returns>
    protected boolean validateNameValueListContract()
    {
        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionNameValueListContract() as DimensionDynamicAccountContract;

        if (dimensionDynamicAccountContract)
        {
            if (dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue())
            {
                DimensionAttributeValueContract dimensionAttributeValueContract = new DimensionAttributeValueContract();
                dimensionAttributeValueContract.parmName(this.getPrimaryDimensionAttribute().Name);
                dimensionAttributeValueContract.parmValue(dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue().parmValue());

                changecompany(dimensionDynamicAccountContract.parmCompany())
                {
                    // Get the resolved value.
                    DimensionAttributeValue dav = this.resolveValue(dimensionAttributeValueContract);

                    if (dav && dav.DisplayValue != '')
                    {
                        // Replace the old value in the contract
                        dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue().parmValue(dav.DisplayValue);
                    }
                }
            }
        }
        else
        {
            this.getDimensionStorageResult().parmStatus(DimensionStorageResultStatus::InvalidContract);
        }

        return this.getDimensionStorageResult().isValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DimensionAttribute</c> for the current contract's multi-type account.
    /// </summary>
    /// <returns>The <c>DimensionAttribute</c> record for the account type.</returns>
    private DimensionAttribute getPrimaryDimensionAttribute()
    {
        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionNameValueListContract() as DimensionDynamicAccountContract;

        // An invalid hierarchy will be caught by the getHierarchyIdByAccountType method.
        DimensionHierarchyId hierarchyId = DimensionHierarchyHelper::getHierarchyIdByAccountType(enum2int(dimensionDynamicAccountContract.parmAccountType()));

        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::find(hierarchyId);
        DimensionAttribute dimensionAttribute = DimensionAttribute::getAttributeByHierarchyType(dimensionHierarchy.StructureType);

        return dimensionAttribute;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>