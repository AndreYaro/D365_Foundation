<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineCopyFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineCopyFromSource</c> class is responsible for copying <c>SalesLine</c>.
/// </summary>
abstract class SalesLineCopyFromSource
{
    SalesLine           salesLine;
    SalesTable          salesTable;
    TmpFrmVirtual       tmpFrmVirtualLine;
    SalesCopying        salesCopying;

    // Parameters for the copy
    Qty     qtyFactor;
    NoYes   reverseSign;
    NoYes   recalculateAmount;
    NoYes   copyMarkup;
    NoYes   copyPrecisely;
    NoYes   deleteLines;

    // Calculated values for the copy
    NoYes   createCorrectionLine;
    NoYes   copyExchRate;
    boolean searchPrice;
    boolean copyQty;
    
    RefRecId                        parentRecId;
    RefTableId                      parentTableId;
    SalesLineForeignTradeCategory   salesLineForeignTradeCategory;
    AgreementLine                   agreementLine;
    boolean                         copyForeignTradeRecord;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
     /// <summary>
    /// Retrieves the source record.
    /// </summary>
    /// <returns>A <c>Common</c> record.</returns>
    abstract public Common retrieveSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the source quantity.
    /// </summary>
    /// <returns>A <c>Qty</c> value.</returns>
    abstract public Qty retrieveSourceQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventTransId</c> of the source.
    /// </summary>
    /// <returns>An <c>InventTransId</c> value.</returns>
    abstract public InventTransId retrieveSourceInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters for the copying.
    /// </summary>
    /// <param name = "_salesCopying">A <c>SalesCopying</c> instance.</param>
    protected void initParameters(SalesCopying _salesCopying)
    {
        qtyFactor           = _salesCopying.parmQtyFactor();
        reverseSign         = _salesCopying.parmreverseSign();
        recalculateAmount   = _salesCopying.parmrecalculateAmount();
        copyMarkup          = _salesCopying.parmcopyMarkup();
        copyPrecisely       = _salesCopying.parmcopyPrecisely();
        deleteLines         = _salesCopying.parmdeleteLines();
        createCorrectionLine = _salesCopying.parmcreateCorrectionLine();
        copyExchRate         = _salesCopying.parmcopyExchRate();

        searchPrice = _salesCopying.parmRecalculateAmount()? NoYes::Yes : NoYes::No;
        copyQty = _salesCopying.parmQtyFactor() ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the copy can be done.
    /// </summary>
    /// <returns>true, if the copy can be done; otherwise, false.</returns>
    public boolean canCopy()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from the source line to the <c>SalesLine</c>.
    /// </summary>
    protected void copyFromSource()
    {
        salesLine.ProjId = salesTable.ProjId;
        salesLine.SalesType = salesTable.SalesType;

        salesLine.initValue();
        salesLine.initFromSalesTable(salesTable);

        parentRecId = salesTable.RecId;
        parentTableId = salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on the <c>SalesLine</c>.
    /// </summary>
    protected void updateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDropShipmentRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates MCR drop shipment related data.
    /// </summary>
    protected void copyDropShipmentRelatedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies category related data.
    /// </summary>
    protected void copyCategoryRelatedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementLine</Name>
				<Source><![CDATA[
    public AgreementLine parmAgreementLine()
    {
        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyForeignTradeRecord</Name>
				<Source><![CDATA[
    public boolean parmCopyForeignTradeRecord()
    {
        return copyForeignTradeRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentRecId</Name>
				<Source><![CDATA[
    public RecId parmParentRecId()
    {
        return parentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentTableId</Name>
				<Source><![CDATA[
    public TableId parmParentTableId()
    {
        return parentTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    public TmpFrmVirtual parmTmpFrmVirtualLine()
    {
        return tmpFrmVirtualLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFindAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an <c>AgreementLine</c> must be found and linked.
    /// </summary>
    /// <returns>true if an <c>AgreementLine</c> should be looked for.</returns>
    public boolean mustFindAgreementLine()
    {
        boolean findAgreementLine = (salesLine.returnItem() ? AgreementLine::findCustInvoiceTrans(tmpFrmVirtualLine.RecordNo).RecId
                                              : salesTable.MatchingAgreement);
        return findAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed parameters.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    /// <param name = "_salesTable">A <c>SalesTable</c> record.</param>
    /// <param name = "_tmpFrmVirtualLines">A <c>TmpFrmVirtual</c> record.</param>
    /// <param name = "_salesCopying">An instance of <c>SalesCopying</c>.</param>
    protected void initialize(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtualLines, SalesCopying _salesCopying)
    {
        salesLine           = _salesLine;
        tmpFrmVirtualLine  = _tmpFrmVirtualLines;
        salesTable          = _salesTable;
        salesCopying        = _salesCopying;
        this.initParameters(salesCopying);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales line based on the source; after the copy and line creation.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record to update.</param>
    protected void updateBasedOnSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesLineCopyFromSource</c>.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> which is being copied into.</param>
    /// <param name = "_salesTable">The sales order for the sales line being copied.</param>
    /// <param name = "_tmpFrmVirtualLines">The source line to copy from.</param>
    /// <param name = "_salesCopying">An instance of the <c>SalesCopying</c> class.</param>
    /// <returns></returns>
    public static SalesLineCopyFromSource construct(SalesLine _salesLine, SalesTable _salesTable, TmpFrmVirtual _tmpFrmVirtualLines, SalesCopying _salesCopying)
    {
        SalesLineCopyFromSourceFactoryAttribute attr = new SalesLineCopyFromSourceFactoryAttribute(tableId2Name(_tmpFrmVirtualLines.TableNum));
        SalesLineCopyFromSource salesLineCopyFromSource = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesLineCopyFromSource), attr) as SalesLineCopyFromSource;

        if (!salesLineCopyFromSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        salesLineCopyFromSource.initialize(_salesLine, _salesTable, _tmpFrmVirtualLines, _salesCopying);
        return salesLineCopyFromSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code from the source line.
    /// </summary>
    /// <returns>A <c>CurrencyCode</c> value.</returns>
    protected CurrencyCode retrieveCurrencyCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAgreementRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy agreement related data.
    /// </summary>
    protected void copyAgreementRelatedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update tax information for India.
    /// </summary>
    public void updateTaxInformation_IN()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies from the source record to the given <c>SalesLine</c>.
    /// </summary>
    /// <returns>true if the copy was successful; otherwise, false.</returns>
    public boolean copy()
    {
        if (!this.canCopy())
        {
            return false;
        }

        this.copyFromSource();
        this.copyCategoryRelatedData();
        this.copyDropShipmentRelatedData();
        this.copyAgreementRelatedData();
        this.updateAmounts();
        this.copyQty();
        this.setPDSSameLot();
        this.copyDateFields();
        this.copyCountryRegionSpecificData(salesCopying, this);
        salesCopying.setInventTransIdReturn(salesLine, this.retrieveSource());
        this.copyMCRRelatedData();
        this.updateStatus();
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMCRRelatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies MCR related data.
    /// </summary>
    protected void copyMCRRelatedData()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Pass return action in - only set from the Sales Create Return form
            // Remove return action defaulting & set other return defaults - Merge JS returns
            if (salesCopying.mcrIsSalesCopying_CreditNote_Object())
            {
                salesCopying.mcrSetReturnValues(salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPDSSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PDS batch parameters.
    /// </summary>
    protected void setPDSSameLot()
    {
        salesLine.setPdsSameLot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies date fields.
    /// </summary>
    protected void copyDateFields()
    {
        SalesCalcAvailableDlvDates::initDateFields(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies amounts.
    /// </summary>
    protected void updateAmounts()
    {
        CurrencyCode currencyCode = this.retrieveCurrencyCode();

        if (currencyCode)
        {
            salesLine.SalesPrice  = ExchangeRateHelper::curPrice2CurPrice(salesLine.SalesPrice, currencyCode, salesLine.currencyCode);
            salesLine.LineDisc    = ExchangeRateHelper::curPrice2CurPrice(salesLine.LineDisc, currencyCode, salesLine.currencyCode);
            salesLine.MultiLnDisc = ExchangeRateHelper::curPrice2CurPrice(salesLine.MultiLnDisc, currencyCode, salesLine.currencyCode);
            salesLine.SalesMarkup = ExchangeRateHelper::curPrice2CurPrice(salesLine.SalesMarkup, currencyCode, salesLine.currencyCode);
            salesLine.LineAmount  = CurrencyExchangeHelper::curAmount2CurAmount(salesLine.LineAmount, currencyCode, salesLine.currencyCode);
        }

        salesLine.LineAmount = reverseSign ? -salesLine.LineAmount : salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCountryRegionSpecificData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This event handler can be subscribed to copy country region specific data.
    /// </summary>
    /// <param name = "_salesCopying">A <c>SalesCopying</c> instance.</param>
    /// <param name = "_salesLineCopyFromSource">A <c>SalesLineCopyFromSource</c> instance.</param>
    delegate void copyCountryRegionSpecificData(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCountryRegionSpecificData_IN</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SalesLineCopyFromSource), delegateStr(SalesLineCopyFromSource, copyCountryRegionSpecificData))]
    public static void copyCountryRegionSpecificData_IN(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine_IN salesLine_IN = _salesLineCopyFromSource.parmSalesLine().salesLine_IN();
            salesLine_IN.AssessableValueTransactionCurrency = _salesCopying.parmReverseSign() ? -salesLine_IN.AssessableValueTransactionCurrency : salesLine_IN.AssessableValueTransactionCurrency;
            _salesLineCopyFromSource.parmSalesLine().packSalesLine_IN(salesLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCountryRegionSpecificData_RU</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SalesLineCopyFromSource), delegateStr(SalesLineCopyFromSource, copyCountryRegionSpecificData))]
    public static void copyCountryRegionSpecificData_RU(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!_salesLineCopyFromSource.parmSalesTable().salesTable_RU().AgreementHeaderExt_RU)
            {
                _salesLineCopyFromSource.parmSalesLine().DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(_salesLineCopyFromSource.parmSalesLine().DefaultDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies quantity based on the type of the line.
    /// </summary>
    protected void copyQty()
    {
        if (qtyFactor)
        {
            if (!salesLine.salesTable().returnItem())
            {
                this.copyQtySalesLine();
            }
            //  When creating credit note for return lines only the expected return quantity is filled
            else
            {
                this.copyQtyCreditNote();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQtySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies quantity for a sales line.
    /// </summary>
    protected void copyQtySalesLine()
    {
        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            salesCopying.setPdsCWQty(salesLine, reverseSign, qtyFactor);
        }
        else
        {
            salesLine.SalesQty = reverseSign ? -salesLine.SalesQty : salesLine.SalesQty;
            salesLine.SalesQty = decRound(salesLine.SalesQty * qtyFactor, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                        UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit)));
            salesLine.QtyOrdered = reverseSign ? -salesLine.QtyOrdered : salesLine.QtyOrdered;
            salesLine.QtyOrdered = salesLine.QtyOrdered * qtyFactor;
        }

        salesLine.LineAmount =  salesLine.calcLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQtyCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies quantiy for a credit note line.
    /// </summary>
    protected void copyQtyCreditNote()
    {
        salesLine.ReturnStatus   = ReturnStatusLine::Awaiting;
        salesLine.ExpectedRetQty = -salesLine.SalesQty;
        salesLine.QtyOrdered     = 0;

        if (tmpFrmVirtualLine.TableNum == tableNum(CustInvoiceTrans))
        {
            if (!this.retrieveSource().RecId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (!salesLine.SalesPrice)
            {
                salesLine.SalesQty = -this.retrieveSourceQty();
            }
        }

        salesLine.LineAmount = salesLine.returnLineAmount();
        salesLine.SalesQty   = 0;

        salesLine.PdsCWExpectedRetQty = -salesLine.PdsCWQty;
        salesLine.PdsCWQty            = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy retail sales line.
    /// </summary>
    protected void updateRetailSalesLine()
    {
        SalesLine origSalesLine = SalesLine::findInventTransId(this.retrieveSourceInventTransId());

        if (origSalesLine)
        {
            RetailSalesLine origRetailSalesLine = RetailSalesLine::findBySalesLine(origSalesLine.RecId);

            if (origRetailSalesLine)
            {
                ttsbegin;
                RetailSalesLine retailSalesLine = RetailSalesLine::findBySalesLine(salesLine.RecId, true);
                retailSalesLine.LineDscAmount = reverseSign ? -1 * origRetailSalesLine.LineDscAmount : origRetailSalesLine.LineDscAmount;
                retailSalesLine.LineManualDiscountAmount = reverseSign ? -1 * origRetailSalesLine.LineManualDiscountAmount : origRetailSalesLine.LineManualDiscountAmount;
                retailSalesLine.LineManualDiscountPercentage = origRetailSalesLine.LineManualDiscountPercentage;
                retailSalesLine.PeriodicDiscount = origRetailSalesLine.PeriodicDiscount;
                retailSalesLine.PeriodicPercentageDiscount = origRetailSalesLine.PeriodicPercentageDiscount;
                retailSalesLine.TenderDiscount = origRetailSalesLine.TenderDiscount;
                retailSalesLine.TenderDiscountPercentage = origRetailSalesLine.TenderDiscountPercentage;
                retailSalesLine.TotalDiscount = origRetailSalesLine.TotalDiscount;
                retailSalesLine.TotalPctDiscount = origRetailSalesLine.TotalPctDiscount;
                // When copy from an invoiced sales line, lock the price.
                if (RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled()
                    && origSalesLine.SalesStatus == SalesStatus::Invoiced)
                {
                    retailSalesLine.IsPriceLocked = NoYes::Yes;
                }
                
                retailSalesLine.update();
                ttscommit;
            }
        }

        // Copy sales discount lines.
        this.createRetailSalesDiscountLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailSalesDiscountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy retail discount lines.
    /// </summary>
    protected void createRetailSalesDiscountLine()
    {
        RetailSalesDiscountLine discountLine;
        RetailSalesDiscountLine salesDiscountLine;
        
        while select * from salesDiscountLine
            where salesDiscountLine.InventTransId == this.retrieveSourceInventTransId()
        {
            discountLine.clear();
            discountLine.InventTransId = salesLine.InventTransId;
            Qty sourceQty = RetailPricingUseQtyFromSalesLineWhenCopyingFromCITFlight::instance().isEnabled() && this is SalesLineCopyFromCustInvoiceTrans ?
                SalesLine::findInventTransId(this.retrieveSourceInventTransId(), false).SalesQty :
                this.retrieveSourceQty();
            discountLine.initFromRetailSalesDiscountLineWithQty(salesDiscountLine, sourceQty, tmpFrmVirtualLine.Qty, salesLine.CurrencyCode);
            discountLine.Amount = reverseSign ? -1 * discountLine.Amount : discountLine.Amount;
            discountLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatchingAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the agreement line after copy.
    /// </summary>
    protected void updateMatchingAgreementLine()
    {
        SalesLine agreementSalesLine;
        buf2Buf(salesLine, agreementSalesLine);

        if (agreementLine)
        {
            boolean isReturnOrder = salesTable.returnItem();
            // For non-return lines we need to check if agreement is still in a right state, before proceed with association to it:
            if (!isReturnOrder && agreementLine.agreementHeader().AgreementState == AgreementState::OnHold)
            {
                throw error("@GLS180240");
            }

            // DO NOT transfer info from agreement line - newly copied line should derrive everything (price info included) from the original line!
            // Only MatchingAgreementLine field should be set to reference the 'original' agreement line.
            agreementSalesLine.MatchingAgreementLine = agreementLine.RecId;
            if (!agreementLine.isLinkValid(agreementSalesLine, false))
            {
                agreementLine = null;
                // We accept only deep copy in terms of price information and  relations of new sales line to the agreement line:
                // if it is not possible anymore to maintain exact copy of price information and link to the exact same agreement line at the same time for new sales line
                // we should terminate copying of the line (in all other cases):
                agreementSalesLine.MatchingAgreementLine = 0;
                throw error("@GLS180242");
            }
        }
        if (agreementLine)
        {
            buf2Buf(agreementSalesLine, salesLine);
            ttsbegin;
            salesLine.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForeignTradeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the foreign trade category.
    /// </summary>
    protected void updateForeignTradeCategory()
    {
        if (this.parmCopyForeignTradeRecord())
        {
            salesLineForeignTradeCategory.initFromSalesLine(salesLine);
            salesLineForeignTradeCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountryRegionSpecificData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This event handler can be subscribed to update country region specific data, after the copy and <c>SalesLine</c> creation.
    /// </summary>
    /// <param name = "_salesCopying">A <c>SalesCopying</c> instance.</param>
    /// <param name = "_salesLineCopyFromSource">A <c>SalesLineCopyFromSource</c> instance.</param>
    delegate void updateCountryRegionSpecificData(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountryRegionSpecificData_IN</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SalesLineCopyFromSource), delegateStr(SalesLineCopyFromSource, updateCountryRegionSpecificData))]
    public static void updateCountryRegionSpecificData_IN(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            SalesLine salesLine = _salesLineCopyFromSource.parmSalesLine();

            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();

            if (!(SalesTable::find(salesLine.SalesId).CustomsExportOrder_IN)
                && TaxParameters::checkTaxParameters_IN())
            {
                salesLine_IN.AssessableValueTransactionCurrency = salesLine.LineAmount
                    + salesLine.SalesPurchJournalLine::getMiscChargesAmount(salesLine.TableId, salesLine.RecId);
                salesLine.packSalesLine_IN(salesLine_IN);
                salesLine.update();
            }

            if (_salesLineCopyFromSource.parmTmpFrmVirtualLine().tableNum == tableNum(CustinvoiceTrans))
            {
                SalesReturn_IN salesReturn = SalesReturn_IN::construct(salesLine.TaxItemGroup);
                salesReturn.createReturnableDetails(_salesCopying.parmSalesReturnType_IN(), _salesLineCopyFromSource.retrieveSource(), salesLine_IN);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountryRegionSpecificData_Multiple</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SalesLineCopyFromSource), delegateStr(SalesLineCopyFromSource, updateCountryRegionSpecificData))]
    public static void updateCountryRegionSpecificData_Multiple(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled() || BrazilParameters::isEnabled())
        {
            SalesLine salesLineLoc = SalesLine::findInventTransId(_salesLineCopyFromSource.retrieveSourceInventTransId());
            _salesLineCopyFromSource.parmSalesLine().TaxWithholdGroup = salesLineLoc.TaxWithholdGroup;
            _salesLineCopyFromSource.parmSalesLine().TaxWithholdItemGroupHeading_TH = salesLineLoc.TaxWithholdItemGroupHeading_TH;
            _salesLineCopyFromSource.parmSalesLine().write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountryRegionSpecificData_PL</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SalesLineCopyFromSource), delegateStr(SalesLineCopyFromSource, updateCountryRegionSpecificData))]
    public static void updateCountryRegionSpecificData_PL(SalesCopying _salesCopying, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(_salesLineCopyFromSource.parmParentTableId(), 
                _salesLineCopyFromSource.parmParentRecId(), 
                _salesLineCopyFromSource.parmSalesLine().TableId, 
                _salesLineCopyFromSource.parmSalesLine().RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDiscLineChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the price discount policies for the lines of the new sales orders.
    /// </summary>
    protected void updatePriceDiscLineChangePolicy()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopiedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SalesLine</c> after the copy and creation; and creates the correction line.
    /// </summary>
    /// <param name = "_salesLine"></param>
    /// <param name = "_salesTable"></param>
    public void updateCopiedLine(SalesLine _salesLine, SalesTable _salesTable)
    {
        salesLine = _salesLine;
        salesTable = _salesTable;

        this.updateSalesLine();

        // <GEEU>
        if (createCorrectionLine)
        {
            this.makeCorrectionLine();
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales line after the copy.
    /// </summary>
    protected void updateSalesLine()
    {
        if (RetailPricingEngine::useRetailPricingEngineForSalesOrder(salesLine.SalesId))
        {
            this.updateRetailSalesLine();
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            if (this.retrieveSource())
            {
                this.kittingProcessCopy_delegate(this.retrieveSource(), salesLine);
            }
        }

        if (this.mustFindAgreementLine())
        {
            this.updateMatchingAgreementLine();
        }

        this.updateForeignTradeCategory();

        if (copyMarkup)
        {
            Markup::copy(reverseSign, this.retrieveSource(), salesLine);
        }

        this.updateMCRCallCenterData();

        this.updateBasedOnSource();

        if (!salesLine.salesTable().returnItem())
        {
            this.updatePriceDiscLineChangePolicy();
            salesLine.update();
        }

        this.updateTaxInformation();

        this.updateCountryRegionSpecificData(salesCopying, this);

        this.updateRetailSalesLineFulFillmentStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update tax information
    /// </summary>
    protected void updateTaxInformation()
    {
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            this.updateTaxInformation_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCRCallCenterData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the MCR call center data.
    /// </summary>
    protected void updateMCRCallCenterData()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // MCRSalesCreateReturn class needs to know which line each corresponding
            // original line after this method finishes.
            tmpFrmVirtualLine.mcrCreatedRecordNo = salesLine.RecId;
            tmpFrmVirtualLine.update();

            // If the original sales line was price matched, need to create
            // the offsetting misc. charge so the customer will not get extra money.
            MCRCustCreditTable mcrCustCreditTable = MCRCustCreditTable::findByInventTransID(salesLine.InventTransIdReturn);
            if (mcrCustCreditTable)
            {
                mcrCustCreditTable.generateMiscCharge(salesLine.InventTransId, salesLine.InventTransIdReturn);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCorrectionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a correction line.
    /// </summary>
    protected void makeCorrectionLine()
    {
        if (salesCopying.parmSalesPurchCopy() != SalesPurchCopy::CreditNoteHeader
            && salesCopying.parmSalesPurchCopy() != SalesPurchCopy::CreditNoteLines)
        {
            return;
        }

        salesLine.CreditNoteInternalRef_PL = salesLine.RecId;
        salesLine.doUpdate();

        InventTransOriginId inventTransOriginId_SalesLineCorrection = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;

        salesLine.LineNum                   += 1;
        salesline.LineCreationSequenceNumber = 0;

        salesLine.SalesQty                  = tmpFrmVirtualLine.qty;
        salesLine.PdsCWQty                  = tmpFrmVirtualLine.PdsCWQty;
        salesLine.QtyOrdered                = salesLine.calcQtyOrdered();
        salesLine.LineDisc                  = salesLine.LineDisc;
        salesLine.MultiLnDisc               = salesLine.MultiLnDisc;
        salesLine.SalesMarkup               = salesLine.SalesMarkup;

        salesLine.LineAmount                = salesLine.SalesQty ?
                                              -CurrencyExchangeHelper::amount(salesLine.LineAmount, salesLine.currencyCode) :
                                              0;
        salesLine.LineAmount                = salesLine.calcLineAmount();

        salesLine.RemainInventPhysical      = salesLine.QtyOrdered;
        salesLine.PdsCWRemainInventPhysical = salesLine.PdsCWQty;
        salesLine.RemainSalesPhysical       = salesLine.SalesQty;
        salesLine.InventTransIdReturn       = '';

        this.resetSalesLineForPolishLocalization(salesLine);

        if (ProjCreditNoteInheritOriginalSOLineTaxItemGroupFlight::instance().isEnabled())
        {
            SalesLineType salesLineType = salesLine.type(salesTable);
            salesLineType.setTaxItemGroup(salesLine.TaxItemGroup);
        }

        salesLine.CostPrice                 = 0;

        salesLine.CreditNoteInternalRef_PL  = salesLine.RecId;
        salesLine.RefReturnInvoiceTrans_W   = 0;
        salesLine.CreditNoteReasonCode      = salesCopying.copyReasonTableRef(salesCopying.parmReasonTableRef());

        salesLine.insert();

        if (salesLine.isCategoryBased() && !SalesLineForeignTradeCategory::findSalesLine(salesLine))
        {
            salesLineForeignTradeCategory.initFromSalesLine(salesLine);
            salesLineForeignTradeCategory.insert();
            salesLine.type().updatePendingRegistrationsNonStocked(false);
        }

        InventTransOriginId inventTransOriginId_SalesLine = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;

        InventTransOrigin::updateMarking(inventTransOriginId_SalesLineCorrection, inventTransOriginId_SalesLine, salesLine.calcQtyOrdered());
        InventTransOrigin::updateMarking(inventTransOriginId_SalesLine, inventTransOriginId_SalesLineCorrection, -salesLine.calcQtyOrdered());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLineFulFillmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the copied line fulfillment status based on source line status and auto accept value.
    /// </summary>
    protected void updateRetailSalesLineFulFillmentStatus()
    {
        RetailSalesLine retailSalesLineLocal = RetailSalesLine::findBySalesLine(salesLine.RecId);
        RetailFulfillmentLineStatus updatedStatus;

        if (retailSalesLineLocal == null)
        {
            return;
        }

        // update quantity invoiced, packed and picked to 0 for the new line.
        retailSalesLineLocal.QuantityInvoiced = 0;
        retailSalesLineLocal.QuantityPacked = 0;
        retailSalesLineLocal.QuantityPicked = 0;

        if (retailSalesLineLocal.FulfillmentStatus != RetailFulfillmentLineStatus::Unknown)
        {
            // status should be based on IsManualAccept configuration for store.
            updatedStatus = RetailTransactionServiceFulfillment::getUpdatedOpenOrderFulfillmentStatus(retailSalesLineLocal);
            retailSalesLineLocal.FulfillmentStatus = updatedStatus;
        }

        ttsbegin;
        retailSalesLineLocal.selectForUpdate(true);
        retailSalesLineLocal.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSalesLineForPolishLocalization</Name>
				<Source><![CDATA[
    private void resetSalesLineForPolishLocalization(SalesLine _salesLine)
    {
        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])))
        {
            salesLine.ProjTransId = '';
            salesLine.InventRefTransId = '';

            if (SalesCopyCorrectionLineClearInterCompanyFlight::instance().isEnabled())
            {
                salesLine.InterCompanyInventTransId = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingProcessCopy_delegate</Name>
				<Source><![CDATA[
    delegate void kittingProcessCopy_delegate(Common _fromLine, salesLine _salesLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>