<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementPostProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementPostProcessor</c> class holds the processing methods for the bank statement post operation.
/// </summary>
internal final class BankStatementPostProcessor
{
    private BankStatementPostContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankStatementPostProcessor construct()
    {
        BankStatementPostProcessor postProcessor = new BankStatementPostProcessor();
        return postProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(BankStatementPostContract bankStatementPostContract)
    {
        contract = bankStatementPostContract;

        BankStatementPostLogger logger = new BankStatementPostLogger();
        logger.addActivity(BankInstrumentationConstants::PostScheduledInBatch);
        this.processPost();
        logger.finishActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPost</Name>
				<Source><![CDATA[
    private void processPost()
    {
        BankReconciliationOperationType operationType = contract.parmBankReconciliationOperationType();
        switch (operationType)
        {
            case BankReconciliationOperationType::BankStatementPost:
                RecId statementRecId = contract.parmSingleBankStatementRecId();
                BankStatementPost::postBankStatement(statementRecId);
                break;
            case BankReconciliationOperationType::BankStatementLinePost:
                Map statementToLineMap = contract.parmStatementToLineListMap();
                BankStatementPost::postBankStatementLines(statementToLineMap);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>