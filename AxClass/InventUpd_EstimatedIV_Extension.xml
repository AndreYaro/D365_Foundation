<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_EstimatedIV_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventUpd_Estimated))]
final class InventUpd_EstimatedIV_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        next updateNow();

        if (InventInventoryDataServiceAdjustmentOffsetHelper::shouldProcessTrigger())
        {
            if (movement is InventMov_Sales)
            {
                SalesLine salesLine = movement.buffer() as SalesLine;
                SalesLine salesLineOrig = salesLine.orig();

                if (InventInventoryDataServiceAdjustmentOffsetHelper::shouldBlockUpdateForSales(salesLine, salesLineOrig))
                {
                    throw error(strFmt("@SCM:InventoryServiceAdjustmentOffsetSourceLineModifiedBlockError", 'salesLine', salesLine.ItemId, salesLine.RecId));
                }

                if (updEstimated && InventInventoryDataServiceAdjustmentOffsetHelper::shouldOffsetForSales(salesLine, InventoryServiceAdjustmentOffsetOrderEvent::Create))
                {
                    InventInventoryDataServiceAdjustmentOffsetQueue::insertRecord(salesLine.itemId, salesLine.inventDimId, salesLine.inventDimId, salesLine.InventoryServiceAdjustmentOffsetDatasource, salesLine.InventoryServiceAdjustmentOffsetPhysicalMeasure, -updEstimated);
                }
            }

            if (movement is InventMov_Journal)
            {
                InventJournalTrans journalLine = movement.buffer() as InventJournalTrans; 
                InventJournalTrans journalLineOrig = journalLine.orig();

                if (InventInventoryDataServiceAdjustmentOffsetHelper::shouldBlockUpdateForJournal(journalLine, journalLineOrig))
                {
                    throw error(strFmt("@SCM:InventoryServiceAdjustmentOffsetSourceLineModifiedBlockError", 'inventJournalLine', journalLine.ItemId, journalLine.RecId));
                }

                if (updEstimated && InventInventoryDataServiceAdjustmentOffsetHelper::shouldOffsetForInventJournal(journalLine, InventoryServiceAdjustmentOffsetJournalEvent::Create))
                {
                    InventInventoryDataServiceAdjustmentOffsetQueue::insertRecord(journalLine.itemId, journalLine.inventDimId, journalLine.inventDimId, journalLine.InventoryServiceAdjustmentOffsetDatasource, journalLine.InventoryServiceAdjustmentOffsetPhysicalMeasure, updEstimated);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>