<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSettleTransSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSettleTransSummary</c> class is used in the <c>TaxVatRegister</c> SSRS report for reporting partial or full payments associated with tax transactions.
/// </summary>
public class TaxSettleTransSummary
{
    TransDate   fromDate;
    TransDate   toDate;
    PlTaxDueTable taxDueTable;

    private boolean useInvoiceTrans = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUseInvoiceTrans</Name>
				<Source><![CDATA[
    public boolean parmUseInvoiceTrans(boolean _useInvoiceTrans = useInvoiceTrans)
    {
        useInvoiceTrans = _useInvoiceTrans;
        return useInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxTransAmountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>TaxTrans</c> amount fields.
    /// </summary>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> table buffer.
    /// </param>
    private void clearTaxTransAmountFields(TaxTrans _taxTrans)
    {
        _taxTrans.TaxAmount        = 0;
        _taxTrans.TaxBaseAmount    = 0;
        _taxTrans.TaxAmountCur     = 0;
        _taxTrans.TaxBaseAmountCur = 0;
        _taxTrans.TaxAmountRep     = 0;
        _taxTrans.TaxBaseAmountRep = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransQueryForCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxTrans</c> query from the <c>CustVendTrans</c> buffer.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> buffer that contains the record.
    /// </param>
    /// <param name="_custVendInvoiceTrans">
    /// The <c>CustVendInvoiceTrans</c> buffer for when we need only those records that relate to a single invoice line.
    /// </param>
    /// <returns>
    /// A TaxTrans table query for the CustVendTrans record.
    /// </returns>
    private Query createTaxTransQueryForCustVendTrans(CustVendTrans _custVendTrans, CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        Query                query = new Query();
        QueryBuildDataSource qBd;

        qBd = query.addDataSource(tablenum(TaxTrans));
        qBd.orderMode(OrderMode::GroupBy);

        qBd.addSelectionField(fieldnum(TaxTrans,TaxBaseAmount),SelectionField::Sum);
        qBd.addSelectionField(fieldnum(TaxTrans,TaxAmount),SelectionField::Sum);
        qBd.addSelectionField(fieldnum(TaxTrans,SourceBaseAmountCur),SelectionField::Sum);
        qBd.addSelectionField(fieldnum(TaxTrans,SourceTaxAmountCur),SelectionField::Sum);
        qBd.addSelectionField(fieldnum(TaxTrans,SourceRegulateAmountCur),SelectionField::Sum);

        qBd.addSortField(fieldnum(TaxTrans,TaxCode));
        qBd.addSortField(fieldnum(TaxTrans,TaxAutogenerated));
        qBd.addSortField(fieldnum(TaxTrans,euroTriangulation));
        qBd.addSortField(fieldnum(TaxTrans,TaxDirection));
        qBd.addSortField(fieldnum(TaxTrans,SourceCurrencyCode));

        if (_custVendInvoiceTrans)
        {
            qBd.addRange(fieldnum(TaxTrans, SourceRecId)).value(queryValue(_custVendInvoiceTrans.RecId));
            qBd.addRange(fieldNum(TaxTrans, SourceTableId)).value(queryValue(_custVendInvoiceTrans.TableId));
        }
        qBd.addRange(fieldnum(TaxTrans,Voucher)).value(queryValue(_custVendTrans.Voucher));
        qBd.addRange(fieldnum(TaxTrans,TransDate)).value(queryValue(_custVendTrans.TransDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSettleTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated <c>TaxTrans</c> buffer with regard to settlement.
    /// </summary>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> table buffer.
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> table buffer.
    /// </param>
    /// <param name="_invoice">
    /// The <c>InvoiceId</c> Id value of the transaction.
    /// </param>
    /// <returns>
    /// The <c>TaxTrans</c> buffer updated with regard to settlement.
    /// </returns>
    public TaxTrans getTaxSettleTransLine(
        TaxTrans _taxTrans,
        CustVendTrans _custVendTrans,
        InvoiceId _invoice)
    {
        TaxTrans                      taxTrans;
        CustVendCalcSettledAmounts_RU custVendCalcSettledAmounts;
        Map                           mapMapInvoiceSettledAmounts, mapSmallSettledAmounts;
        MapEnumerator                 mapSettleEnumerator, mapTaxCodeEnumerator;
        TransDate                     transDate;
        BookStructSmallVATAmounts_RU  smallSettledAmounts;
        TaxCode                       taxCode;
        TaxTrans_W                    taxTrans_W;

        taxTrans.data(_taxTrans);

        if (!taxDueTable)
        {
            taxDueTable = PlTaxDueTable::find(_taxTrans.taxTrans_W().TaxPeriodPaymentCode_PL);
        }

        this.clearTaxTransAmountFields(taxTrans);

        if (taxDueTable.Partial)
        {
            CustVendInvoiceTrans custVendInvoiceTrans;
            if (this.useInvoiceTrans)
            {
                if (taxTrans.SourceTableId == tableNum(VendInvoiceTrans))
                {
                    custVendInvoiceTrans = VendInvoiceTrans::findRecId(taxTrans.SourceRecId);
                }
                else if (taxTrans.SourceTableId == tableNum(CustInvoiceTrans))
                {
                    custVendInvoiceTrans = CustInvoiceTrans::findRecId(taxTrans.SourceRecId);
                }
            }

            custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(
                _custVendTrans,
                NoYes::No,
                true,
                this.createTaxTransQueryForCustVendTrans(_custVendTrans, custVendInvoiceTrans));
            custVendCalcSettledAmounts.calcSettledAmounts();
            mapMapInvoiceSettledAmounts = custVendCalcSettledAmounts.mapMapSettledAmountsMST();
            mapSettleEnumerator = mapMapInvoiceSettledAmounts.getEnumerator();

            while (mapSettleEnumerator.moveNext())
            {
                [transDate] = mapSettleEnumerator.currentKey();

                if (transDate >= fromDate && transDate <= toDate)
                {
                    mapSmallSettledAmounts = mapSettleEnumerator.currentValue();
                    mapTaxCodeEnumerator = mapSmallSettledAmounts.getEnumerator();

                    while (mapTaxCodeEnumerator.moveNext())
                    {
                        [taxCode] = mapTaxCodeEnumerator.currentKey();
                        if (taxCode == taxTrans.TaxCode)
                        {
                            smallSettledAmounts = BookStructSmallVATAmounts_RU::create(mapTaxCodeEnumerator.currentValue());
                            taxTrans.TaxAmount     -= smallSettledAmounts.taxAmountVAT();
                            taxTrans.TaxBaseAmount -= smallSettledAmounts.amountLiableToVAT();
                            taxTrans_W = taxTrans.taxTrans_W();
                            taxTrans_W.VatDueDate_W   = transDate;
                            taxTrans.packTaxTrans_W(taxTrans_W) ;
                        }
                    }
                }
            }
        }
        else
        {
            if (_custVendTrans.Closed)
            {
                if (_custVendTrans.Closed >= fromDate && _custVendTrans.Closed <= toDate)
                {
                    taxTrans.data(_taxTrans);
                    taxTrans_W = taxTrans.taxTrans_W();
                    taxTrans_W.VatDueDate_W   = _custVendTrans.Closed;
                    taxTrans.packTaxTrans_W(taxTrans_W);
                }
            }
        }

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>TaxSettleTransSummary</c> class.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The end date.
    /// </param>
    public void new(TransDate _fromDate, TransDate _toDate)
    {
        fromDate = _fromDate;
        toDate   = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDueTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>taxDueTable</c> field to the new value passed in and returns it. If a <c>taxDueTable</c> value is not
    ///  passed in then the current <c>taxDueTable</c> field is returned.
    /// </summary>
    /// <param name="_taxDueTable">
    /// Sets the table buffer.
    /// </param>
    /// <returns>
    ///  The new <c>taxDueTable</c> value.
    /// </returns>
    public PlTaxDueTable parmTaxDueTable(PlTaxDueTable _taxDueTable = taxDueTable)
    {
        taxDueTable = _taxDueTable;
        return taxDueTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>