<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAutoMatchBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TMSAutoMatchBatch</c> class provides an ability to execute auto match batch process.
/// </summary>
public class TMSAutoMatchBatch extends RunBaseBatch implements BatchRetryable
{
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;

        try
        {
            TMSICommandAutoMatchFreightInvoices autoMatchCommand = TMSCommandAutoMatchFreightInvoicesFactory::createCommand();
         
            using (var activityContext = this.instrumentationLogger().autoMatchBatchActivities().matchFreightBillsAndInvoices())
            {
                autoMatchCommand.Execute();
            }
        }
        catch (Exception::CLRError)
        {
            ex = ClrInterop::getLastException();

            if (ex != null)
            {
                ex = ex.get_InnerException();
                ApplicationUnhandledExceptionLogger::logCLRException(ex);
            }
        }
        catch
        {
            error("@TRX2585");
        }

        if (ex != null)
        {
            TMSErrorLog::createLogEntry(ex);
            error(ex.get_Message());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSAutoMatchBatch construct()
    {
        return new TMSAutoMatchBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TRX1316";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TMSAutoMatchBatch tmsAutoMatchBatch = TMSAutoMatchBatch::construct();

        if (tmsAutoMatchBatch.prompt())
        {
            tmsAutoMatchBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>