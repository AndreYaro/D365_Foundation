<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSExecuteDeferredReceivingInBundle</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSExecuteDeferredReceivingInBundle extends RunBaseBatch implements BatchRetryable
{
    #define.CurrentVersion(1)

    private WHSReceivingProcessingID receivingProcessingID;
    private boolean wasSuccess = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    public BatchInfo batchInfo()
    {
        // Do not retry because it can be a lengthy process. Users can re-process from UI.
        BatchInfo ret = super();
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, receivingProcessingID];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version, receivingProcessingID] = packedClass;
                if (!receivingProcessingID)
                {
                    ret = false;
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchHeaderId</Name>
				<Source><![CDATA[
    private RefRecId getBatchHeaderId()
    {
        return this.batchInfo().parmBatchHeader().parmBatchHeaderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLogRecordsForAllFailedReceipts</Name>
				<Source><![CDATA[
    private void insertLogRecordsForAllFailedReceipts(UserConnection _userConnection, WHSMixedLicensePlateReceipt _rootCauseMixedLPReceipt)
    {
        InfologData logData = [MessageSeverity::Error,
                        strFmt("@WAX:WHSDeferredReceivingBundleError",
                            _rootCauseMixedLPReceipt.LicensePlateId,
                            _rootCauseMixedLPReceipt.ReceiptId,
                            _rootCauseMixedLPReceipt.ReceivingProcessingId)];
        RefRecId batchHeaderId = this.getBatchHeaderId();

        WHSMixedLicensePlateReceipt failedDueTobundle;
        failedDueTobundle.setConnection(_userConnection);

        while select failedDueTobundle
            where failedDueTobundle.ReceivingProcessingId == this.receivingProcessingID
                && failedDueTobundle.ReceiptStatus != WHSMixedLicensePlateReceiptStatus::Error
        {
            WHSMixedLicensePlateReceiptLog logToInsert;
            logToInsert.setConnection(_userConnection);
            logToInsert.MixedLicensePlateReceipt = failedDueTobundle.RecId;
            logToInsert.Info = logData;
            logToInsert.BatchJob = batchHeaderId;
            logToInsert.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFailureRootCauseMixedLPReceipt</Name>
				<Source><![CDATA[
    private WHSMixedLicensePlateReceipt findFailureRootCauseMixedLPReceipt(UserConnection _userConnection)
    {
        WHSMixedLicensePlateReceipt rootCauseMixedLPReceipt;
        rootCauseMixedLPReceipt.setConnection(_userConnection);
        select firstonly rootCauseMixedLPReceipt
                    where rootCauseMixedLPReceipt.ReceivingProcessingId == this.receivingProcessingID
                        && rootCauseMixedLPReceipt.ReceiptStatus == WHSMixedLicensePlateReceiptStatus::Error;

        return rootCauseMixedLPReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceiptStatusFromProcessingToErrorForRecordsInBundle</Name>
				<Source><![CDATA[
    private void updateReceiptStatusFromProcessingToErrorForRecordsInBundle(UserConnection _userConnection)
    {
        WHSMixedLicensePlateReceipt mixedLPReceiptToUpdate;
        mixedLPReceiptToUpdate.setConnection(_userConnection);
        Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlUpdateIndexHint(mixedLPReceiptToUpdate, indexStr(WHSMixedLicensePlateReceipt, ReceivingProcessingIdIdx));

        update_recordset mixedLPReceiptToUpdate
            setting
                ReceiptStatus = WHSMixedLicensePlateReceiptStatus::Error,
                MixedLPComplete = NoYes::No,
                CurrentUser = ''
            where mixedLPReceiptToUpdate.ReceivingProcessingId == this.receivingProcessingID
                && mixedLPReceiptToUpdate.ReceiptStatus == WHSMixedLicensePlateReceiptStatus::Processing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    private void handleError()
    {
        if (!receivingProcessingID)
        {
            return;
        }

        UserConnection  userConnection;

        try
        {
            userConnection = new UserConnection();
            userConnection.ttsbegin();

            if (WHSExecuteDeferredReceivingInBundleUpdateReceiptLogOnErrorHandlingFlight::instance().isEnabled())
            {
                WHSMixedLicensePlateReceipt rootCauseMixedLPReceipt = this.findFailureRootCauseMixedLPReceipt(userConnection);

                if (rootCauseMixedLPReceipt.RecId)
                {
                    this.insertLogRecordsForAllFailedReceipts(userConnection, rootCauseMixedLPReceipt);
                }
            }

            this.updateReceiptStatusFromProcessingToErrorForRecordsInBundle(userConnection);

            userConnection.ttscommit();
        }
        finally
        {
            if (userConnection)
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void run()
    {
        if (WHSExecuteDeferredReceivingInBundleUpdateReceiptStatusOnErrorFlight::instance().isEnabled())
        {

            try
            {
                wasSuccess = false;

                ttsbegin;

                WHSMixedLicensePlateReceipt mixedLPReceiptToProcess;
                while select mixedLPReceiptToProcess
                where mixedLPReceiptToProcess.ReceivingProcessingId == receivingProcessingID
                {
                    WHSDeferredReceiving::processDeferredReceiving(mixedLPReceiptToProcess);
                }

                ttscommit;

                wasSuccess = true;
            }
            finally
            {
                if (!wasSuccess)
                {
                    this.handleError();
                }
            }
        }
        else
        {
            ttsbegin;

            WHSMixedLicensePlateReceipt mixedLPReceiptToProcess;
            while select mixedLPReceiptToProcess
                where mixedLPReceiptToProcess.ReceivingProcessingId == receivingProcessingID
            {
                WHSDeferredReceiving::processDeferredReceiving(mixedLPReceiptToProcess);
            }
        
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReceivingProcessingId</Name>
				<Source><![CDATA[
    internal static WHSExecuteDeferredReceivingInBundle newFromReceivingProcessingId(WHSReceivingProcessingID _receivingProcessingId)
    {
        WHSExecuteDeferredReceivingInBundle ret = new WHSExecuteDeferredReceivingInBundle();
        ret.receivingProcessingID = _receivingProcessingId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>