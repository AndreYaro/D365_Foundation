<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchMergeJournalPostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchMergeJournalPostController</c> class checks and posts an inventory batch merge journal.
/// </summary>
class InventBatchMergeJournalPostController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        IdentifierName              _className      = classStr(InventBatchMergeJournalPostService),
        IdentifierName              _methodName     = methodStr(InventBatchMergeJournalPostService, post),
        SysOperationExecutionMode   _executionMode  = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>InventBatchMergeJournalPostController</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventBatchMergeJournalPostController</c> class.
    /// </returns>
    public static InventBatchMergeJournalPostController construct()
    {
        return new InventBatchMergeJournalPostController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        if (_args.dataset() != tableNum(InventBatchJournal))
        {
            throw error(Error::missingRecord(tableStr(InventBatchJournal)));
        }

        InventBatchJournal inventBatchJournal = _args.record();

        SysOperationServiceController controller = InventBatchMergeJournalPostController::newInventBatchJournal(inventBatchJournal);
        controller.initializeFromArgs(_args);
        controller.parmShowDialog(false);

        InventBatchMergeJournalPostDataContract dataContract = controller.getDataContractObject();
        dataContract.parmShowDialogs(true);
        dataContract.parmTransferToJournalOnly(controller.parmMethodName() == methodStr(InventBatchMergeJournalPostService, transferToJournal));

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of an <c>InventBatchMergeJournalPostController</c> class.
    /// </summary>
    /// <param name="_inventBatchJournal">
    ///    The inventory batch journal to check and/or post.
    /// </param>
    /// <returns>
    ///    A new instance of an <c>InventBatchMergeJournalPostController</c> class to check or post <paramref name="_inventBatchJournal"/>.
    /// </returns>
    public static InventBatchMergeJournalPostController newInventBatchJournal(InventBatchJournal _inventBatchJournal)
    {
        InventBatchMergeJournalPostController   inventBatchMergeJournalPostController = InventBatchMergeJournalPostController::construct();

        InventBatchMergeJournalPostDataContract dataContract = inventBatchMergeJournalPostController.getDataContractObject();

        dataContract.parmInventBatchJournalId(_inventBatchJournal.JournalId);
        return inventBatchMergeJournalPostController;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
