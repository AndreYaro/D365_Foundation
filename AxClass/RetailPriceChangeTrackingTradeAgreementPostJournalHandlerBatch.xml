<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to track the price changes for trade agreement post journal.
/// Use this batch but not table level event handler based change tracking as PostJournal is likely to have large data volume and skipped data events by default.
/// </summary>
internal class RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    const int RetryMax = 3;

    private str journalNumber;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        journalNumber
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;
        boolean needFullRefresh = false;
        int retryCount = 0;

        str className = classStr(RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch);
        str methodName = methodStr(RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch, trackPriceChangesForPostedJournal);

        try
        {
            this.trackPriceChangesForPostedJournal();
        }
        catch(Exception::UpdateConflict)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(className, methodName);
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
                needFullRefresh = true;
            }
        }
        catch(Exception::DuplicateKeyException)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(className, methodName);
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
                needFullRefresh = true;
            }
        }
        catch(ex)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(className, methodName);
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
            needFullRefresh = true;
        }
        finally
        {
            if (needFullRefresh)
            {
                eventSource.EventWritePriceChangeTrackingFullRefresh(
                    strFmt('track price changes for trade agreement post journal %1 failure', journalNumber),
                    className,
                    methodName,
                    '');

                RetailPriceChangeTracking::writeFullRefreshRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch construct()
    {
        var batch = new RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch();
        RetailPriceChangeTrackingHelper::setBatchGroup(batch);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch scheduler = new RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RetailPricing:RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatchLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the job must be run in batch.
    /// </summary>
    /// <returns>Always return true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNumber</Name>
				<Source><![CDATA[
    public str parmJournalNumber(str _journalNumber = journalNumber)
    {
        journalNumber = _journalNumber;
        return journalNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailPriceChangeTrackingTradeAgreementPostJournalHandlerBatch</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackPriceChangesForPostedJournal</Name>
				<Source><![CDATA[
    private boolean trackPriceChangesForPostedJournal()
    {
        boolean isFullRefreshTriggered = this.trackAllItemCodeDiscountTradeAgreements();

        // If full refresh triggered, then there is no need to do product id level track.
        if (isFullRefreshTriggered)
        {
            return true;
        }

        utcdatetime updatedDatetime = DateTimeUtil::utcNow();
        guid tag = newGuid();

        this.trackTableItemCodeTradeAgreements(updatedDatetime, tag);
        this.trackGroupItemCodeDiscountTradeAgreements(updatedDatetime, tag);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackTableItemCodeTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = Table.
    /// </summary>
    /// <param name = "_updateDatetime">The updated datetime.</param>
    /// <param name = "_tag">The tag to mark a change tracking record reversion.</param>
    private void trackTableItemCodeTradeAgreements(utcdatetime _updateDatetime, guid _tag)
    {
        PriceDiscTable priceDiscTable;
        PriceDiscAdmTrans priceDiscAdmTrans;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        RetailPriceChangeTracking priceChangeTracking, existingRecords;

        ttsbegin;

        if (RetailPriceChangeTrackingTrackTAUpdateFlight::instance().isEnabled())
        {
            // Update exist records.
            update_recordset priceChangeTracking
                setting UpdatedDatetime = _updateDatetime, Tag = _tag
            exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product && priceChangeTracking.Tag != _tag // not yet updated by previous steps.
            join priceDiscTable
                where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
                && priceDiscTable.Module == ModuleInventCustVend::Cust
                && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
                && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                && priceDiscTable.ItemRelation == inventTable.ItemId
            join priceDiscAdmTrans
                where priceDiscAdmTrans.JournalNum == journalNumber
                && (priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId // New TA from scratch.
                    || priceDiscAdmTrans.PriceDiscTableRef == priceDiscTable.RecId); // TA copied from an existing one.

            // Insert not exist records.
            insert_recordset priceChangeTracking
            (
                ProductId,
                Tag,
                UpdatedDatetime // need to be the last as extra timezone field will be added automatically
            )
            select Product, _tag, _updateDatetime
            from inventTable
                group by Product
            exists join priceDiscTable
                where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
                && priceDiscTable.Module == ModuleInventCustVend::Cust
                && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
                && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                && priceDiscTable.ItemRelation == inventTable.ItemId
            join priceDiscAdmTrans
                where priceDiscAdmTrans.JournalNum == journalNumber
                && (priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId // New TA from scratch.
                    || priceDiscAdmTrans.PriceDiscTableRef == priceDiscTable.RecId) // TA copied from an existing one.
            notexists join existingRecords
                where existingRecords.ProductId == inventTable.Product;
        }
        else
        {
            // Update exist records.
            update_recordset priceChangeTracking
                setting UpdatedDatetime = _updateDatetime, Tag = _tag
            exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product && priceChangeTracking.Tag != _tag // not yet updated by previous steps.
            join priceDiscTable
                where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
                && priceDiscTable.Module == ModuleInventCustVend::Cust
                && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
                && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                && priceDiscTable.ItemRelation == inventTable.ItemId
            join priceDiscAdmTrans
                where priceDiscAdmTrans.JournalNum == journalNumber
                && priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId;

            // Insert not exist records.
            insert_recordset priceChangeTracking
            (
                ProductId,
                Tag,
                UpdatedDatetime // need to be the last as extra timezone field will be added automatically
            )
            select Product, _tag, _updateDatetime
            from inventTable
                group by Product
            exists join priceDiscTable
                where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
                && priceDiscTable.Module == ModuleInventCustVend::Cust
                && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
                && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                && priceDiscTable.ItemRelation == inventTable.ItemId
            join priceDiscAdmTrans
                where priceDiscAdmTrans.JournalNum == journalNumber
                && priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId
            notexists join existingRecords
                where existingRecords.ProductId == inventTable.Product;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackGroupItemCodeDiscountTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = Group.
    /// </summary>
    /// <param name = "_updateDatetime">The updated datetime.</param>
    /// <param name = "_tag">The tag to mark a change tracking record reversion.</param>
    private void trackGroupItemCodeDiscountTradeAgreements(utcdatetime _updateDatetime, guid _tag)
    {
        PriceDiscTable priceDiscTable;
        PriceDiscAdmTrans priceDiscAdmTrans;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        InventTableModule inventTableModule;
        RetailPriceChangeTracking priceChangeTracking, existingRecords;

        ttsbegin;

        // Update exist records.
        update_recordset priceChangeTracking
            setting UpdatedDatetime = _updateDatetime, Tag = _tag
        exists join inventTable
            where priceChangeTracking.ProductId == inventTable.Product && priceChangeTracking.Tag != _tag // not yet updated by previous steps.
        join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        join priceDiscTable
            where priceDiscTable.relation == PriceType::LineDiscSales
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::GroupId
            && priceDiscTable.ItemRelation == inventTableModule.LineDisc
        join priceDiscAdmTrans
            where priceDiscAdmTrans.JournalNum == journalNumber
            && priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId;

        // Insert not exist records.
        insert_recordset priceChangeTracking
        (
            ProductId,
            Tag,
            UpdatedDatetime // need to be the last as extra timezone field will be added automatically
        )
        select Product, _tag, _updateDatetime
        from inventTable
            group by Product
        exists join inventTableModule
            where inventTable.ItemId == inventTableModule.ItemId && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
        join priceDiscTable
            where (priceDiscTable.relation == PriceType::PriceSales || priceDiscTable.relation == PriceType::LineDiscSales)
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::GroupId
            && priceDiscTable.ItemRelation == inventTableModule.LineDisc
        join priceDiscAdmTrans
            where priceDiscAdmTrans.JournalNum == journalNumber
            && priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId
        notexists join existingRecords
            where existingRecords.ProductId == inventTable.Product;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackAllItemCodeDiscountTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Track price trade agreements and line discount trade agreements with ItemCode = All.
    /// </summary>
    /// <returns>True if all item code exists, otherwise false.</returns>
    private boolean trackAllItemCodeDiscountTradeAgreements()
    {
        PriceDiscTable priceDiscTable;
        PriceDiscAdmTrans priceDiscAdmTrans;

        select firstonly RecId from priceDiscTable
            where priceDiscTable.relation == PriceType::LineDiscSales
            && priceDiscTable.Module == ModuleInventCustVend::Cust
            && priceDiscTable.AccountCode == PriceDiscPartyCodeType::All
            && priceDiscTable.ItemCode == PriceDiscProductCodeType::All
        exists join priceDiscAdmTrans
            where priceDiscAdmTrans.JournalNum == journalNumber
            && priceDiscAdmTrans.RecId == priceDiscTable.OriginalPriceDiscAdmTransRecId;


        if (priceDiscTable.RecId)
        {
            RetailTradeAgreementChangeTrackingHelper::trackAllItemCodeTradeAgreement();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>