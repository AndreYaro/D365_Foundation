<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCNumberController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCNumberController</c> class is the controller helper class for the <c>BankLCNumber</c>
///    field of the <c>BankLC</c> table.
/// </summary>
abstract class BankLCNumberController
{
    boolean isAllBankLCAllowed;
    boolean isReturnAsBankLC;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to use for a lookup.
    /// </summary>
    /// <returns>
    ///    The new query.
    /// </returns>
    abstract protected Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>SysTableLookup</c> class.
    /// </summary>
    /// <param name="_control">
    ///    The form control to use to perform the lookup.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>SysTableLookup</c> class.
    /// </returns>
    abstract protected SysTableLookup createSysTableLookup(FormStringControl _control)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJumpRefForms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reference of the jumper form.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of the letter of credit record to jump.
    /// </param>
    /// <returns>
    ///    The created form arguments.
    /// </returns>
    abstract protected Args getJumpRefForms(BankLCRefRecId _bankLCRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the prepared instance of the <c>SysReferenceTableLookup</c> class.
    /// </summary>
    /// <param name="_control">
    ///    The controller to use to perform the lookup
    /// </param>
    /// <returns>
    ///    The prepared instance of the <c>SysReferenceTableLookup</c> class.
    /// </returns>
    protected SysReferenceTableLookup getReferenceLookup(FormReferenceControl _control)
    {
        BankLCNumberReferenceLookup bankLCNumberReferenceLookup;

        if (isReturnAsBankLC)
        {
            bankLCNumberReferenceLookup = BankLCNumberReferenceLookup::construct(this, tableNum(BankLC), _control);
        }
        else
        {
            bankLCNumberReferenceLookup = BankLCNumberReferenceLookup::construct(this, this.getSubTable(), _control);
        }

        bankLCNumberReferenceLookup.parmQuery(this.buildQuery());

        return bankLCNumberReferenceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>TableId</c> field of the subtable of the <c>BankLC</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>TableId</c> field of the subtable.
    /// </returns>
    abstract protected tableId getSubTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the prepared <c>SysTableLookup</c> object.
    /// </summary>
    /// <param name="_control">
    ///    The form control to use to perform the reference lookup
    /// </param>
    /// <returns>
    ///    The prepared <c>SysTableLookup</c> object.
    /// </returns>
    protected SysTableLookup getSysTableLookup(FormStringControl _control)
    {
        SysTableLookup sysTableLookup;

        sysTableLookup = this.createSysTableLookup(_control);

        // The parameter 'isReturnAsBankLC' is not needed for SysTableLookup.
        // Set it to false before build the query.
        this.parmReturnAsBankLC(false);
        sysTableLookup.parmQuery(this.buildQuery());

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the reference jump.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of the letter of credit to jump.
    /// </param>
    public void jumpRef(BankLCRefRecId _bankLCRefRecId)
    {
        Args            args;
        FormRun         formRun;

        args = this.getJumpRefForms(_bankLCRefRecId);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the reference lookup.
    /// </summary>
    /// <param name="_control">
    ///    The form control to use to perform the reference lookup.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common lookupReference(FormReferenceControl _control)
    {
        return this.getReferenceLookup(_control).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BankLCNumberController</c> class.
    /// </summary>
    /// <param name="_isReturnAsBankLC">
    ///    A Boolean value that indicates whether the lookup record should be returned as the super type of
    ///    the letter of credit.
    /// </param>
    /// <param name="_isAllBankLCAllowed">
    ///    A Boolean value that indicates whether all letter of credit records should be shown in the
    ///    selection list.
    /// </param>
    protected void new(
        boolean _isReturnAsBankLC   = false,
        boolean _isAllBankLCAllowed = false)
    {
        this.parmAllBankLCAllowed(_isAllBankLCAllowed);
        this.parmReturnAsBankLC(_isReturnAsBankLC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllBankLCAllowed</Name>
				<Source><![CDATA[
        public boolean parmAllBankLCAllowed(
        boolean _isAllBankLCAllowed = isAllBankLCAllowed)
    {
        isAllBankLCAllowed = _isAllBankLCAllowed;
        return isAllBankLCAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnAsBankLC</Name>
				<Source><![CDATA[
        public boolean parmReturnAsBankLC(
        boolean _isReturnAsBankLC = isReturnAsBankLC)
    {
        isReturnAsBankLC = _isReturnAsBankLC;
        return isReturnAsBankLC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the table lookup.
    /// </summary>
    /// <param name="_control">
    ///    The form control that requires the lookup.
    /// </param>
    public void performLookup(FormControl _control)
    {
        this.getSysTableLookup(_control).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the resolving reference.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    The form control to request the resolve reference.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common resolveReference(FormReferenceGroupControl _formReferenceControl)
    {
        Common       ret;
        BankLCNumber bankLCNumber;

        if (_formReferenceControl.controlCount() > 0)
        {
            bankLCNumber = _formReferenceControl.controlNum(1).valueStr();
        }

        ret = BankLC::findByBankLCNumber(bankLCNumber);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>