<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlSerialId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlSerialId</c> class is responsible for handling the serial id controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#SerialId)]
public class WhsControlSerialId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSWorkLine workLine = controlData.parmWorkLine();
        InventSerialId serialId = this.parmData();

        if (workLine.WorkType == WHSWorkType::Count)
        {
            if (!controlData.validateSerialInLocationCycleCount(serialId) && !pass.exists(#RFAddLP))
            {
                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                pass.insert(#RFAddLP, 1);
                return this.fail("@WAX1164");
            }
        }
        else if (mode == WHSWorkExecuteMode::AdjustmentIn || pass.exists(#AssignSerial))
        {
            if (!controlData.validateSerialQty(serialId, fieldValues.parmItemId())
               || (pass.exists(#AssignSerial) && !controlData.validateAssignSerial(serialId))
               || (serialId && !this.checkReturnSerialSalesProcess(serialId)))
            {
                return this.fail("@WAX1164");
            }
            else if (serialId &&  WHSRFControlData::checkSerialSalesProcess(workLine.InventTransId, serialId, pass.lookupStr(#ItemId), pass.lookupStr(#RMANum)))
            {
                return this.fail("@WAX:SerialAlreadyExists");
            }
            else if (workLine.isActiveInSalesSerialProcess() &&  this.validateSalesSerialQuantity())
            {
                return this.fail("@WAX:TooManySerials");
            }
        }
        else if (step != #SplitPutWork && this.isSerialIdWorkExecuteModeInbound())
        {
            boolean skipSerialExistInInventoryCheck = false;

            if (controlData.isTransferOrderReceiving() && !this.validateSerialIdOnTOReceiving(this.parmData()))
            {
                return this.fail("@WAX1164");
            }

            // If the item is being removed or transferred the validateSerialQty should not been called again. This validation
            // has already been done during the receipt of the item and it is expected to be in the inventory during the removal.
            if ((workLine.WorkType  == WHSWorkType::Pick
                    && (WHSWorkExecutionMode::newFromMode(mode).isInboundOrderReceivingAndPutaway()
                        || mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate ))
                || (!workLine
                    && (mode == WHSWorkExecuteMode::TransferOrderItemReceiving
                        || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate
                        || mode == WHSWorkExecuteMode::TransferOrderLineReceiving
                        || mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)))
            {
                skipSerialExistInInventoryCheck = true;
            }
            if ((!skipSerialExistInInventoryCheck && !controlData.validateSerialQty(serialId, fieldValues.parmItemId()))
               ||(pass.exists(#SerialList)
                    && (str2num(pass.lookup(#SerialCounter)) <= str2num(pass.lookup(#SerialQty)))
                    && (conFind(WHSParameters::str2con(pass.lookup(#SerialList), '|'), serialId) != 0)))
            {
                return this.fail("@WAX1164");
            }
        }
        else if (mode != WHSWorkExecuteMode::Packing
            || !pass.exists(#CaptureSerialNumberAtPacking))
        {
            fieldValues.parmSerialId(serialId);
            WHSInventStatusId fromInventStatusId = this.retrieveDefaultInventStatusId();

            if (!fromInventStatusId && mode == WHSWorkExecuteMode::MovementByTemplate && pass.hasValue(#FromInventoryStatus))
            {
                fromInventStatusId = pass.lookupStr(#FromInventoryStatus);
            }

            controlData.parmFromInventStatusId(fromInventStatusId);

            if (mode != WHSWorkExecuteMode::ReportAsFinishedBySerial && !controlData.serialExistInLocation(serialId))
            {
                return this.fail("@WAX1164");
            }
        }

        fieldValues.parmSerialId(serialId);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialIdOnTOReceiving</Name>
				<Source><![CDATA[
    private boolean validateSerialIdOnTOReceiving(InventSerialId _serialId)
    {
        InventTransferId    transferId = pass.lookupStr(#TONum);
        LineNum             transferLineNum = pass.lookupNum(#TOLineNum);
        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        select firstonly RecId from inventTrans
            where  inventTrans.StatusReceipt == StatusReceipt::Ordered 
                && inventTrans.StatusIssue == StatusIssue::None
        exists join inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        exists join transferLine
            where  transferLine.InventTransIdReceive == inventTransOrigin.InventTransId
                && transferLine.TransferId == transferId
                && transferLine.LineNum == transferLineNum
        exists join inventDim
            where  inventDim.InventDimId == inventTrans.InventDimId
                && inventDim.InventSerialId == _serialId;

        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultInventStatusId</Name>
				<Source><![CDATA[
    private WHSInventStatusId retrieveDefaultInventStatusId()
    {
        WHSInventStatusId defaultInventStatusId;

        ItemId itemId = pass.lookupStr(#ItemId);

        if (itemId
            && mode == WHSWorkExecuteMode::Movement)
        {
            InventDim inventDim = pass.createInventDimFromPass();
            inventDim.inventSerialId = data;
            inventDim.InventStatusId = ''; // Clear the status from the pass' InventDim as it could have been defaulted before all the dimensions were known.

            var statusRetriever = WHSItemAndDimensionsOnHandInventoryStatusRetriever::newFromItemIdAndInventDim(itemId, inventDim);

            // If the status can't be found or there are multiple statuses for the given dimensions, the retriever will return an empty value.
            defaultInventStatusId = statusRetriever.retrieveInventoryStatusId();
        }

        // As it is not allowed to have multiple statuses on the same license plate if all other dimensions are the same,
        // the retriever would usually return a single status and this if block will not be entered.
        // However, in same cases (e.g. if there given dimensions are not enough to uniquely identify a status) the returned value would be empty,
        // so we need to fallback to getting the status from the license plate.
        if (!defaultInventStatusId)
        {
            defaultInventStatusId = controlData.getInventStatusId();
        }

        return defaultInventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        if (mode == WHSWorkExecuteMode::AdjustmentIn)
        {
            if (!fieldValues.parmLicensePlateId() || WHSLicensePlate::exist(fieldValues.parmLicensePlateId()))
            {
                fieldValues.parmSerialId(this.getSerialId());
            }
        }
        else if (controlData.parmWorkLine().WorkType != WHSWorkType::Count)
        {
            fieldValues.parmSerialId(this.getSerialId());
        }
        else if (!fieldValues.exists(#SerialId))
        {
            fieldValues.parmSerialId('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialId</Name>
				<Source><![CDATA[
    private str getSerialId()
    {
        return controlData.getValueFromInventDimField(fieldNum(InventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesSerialQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there will be too many serials captured during picking.
    /// This will occur if serials are added to the load before picking is completed.
    /// </summary>
    /// <returns>
    /// true if too many serials will be captured; otherwise, false.
    /// </returns>
    private boolean validateSalesSerialQuantity()
    {
        InventQty orderLineQty;
        InventQty serialQtyAssociatedToOrderLine;

        if (pass.exists(#ClusterId))
        {
            [orderLineQty, serialQtyAssociatedToOrderLine] = this.getOrderLineQtyAndSerialQtyAssociatedToOrderLine();
        }
        else
        {
            WHSWorkLine workLine = controlData.parmWorkLine();
            RecId inventTransOriginRecId = InventTransOrigin::findByInventTransId(workLine.InventTransId).RecId;
            orderLineQty = SalesLine::findInventTransId(workline.InventTransId).QtyOrdered;
            serialQtyAssociatedToOrderLine = abs(InventTrackingRegisterTrans::qtyPhysicalIssue(inventTransOriginRecId));
        }

        InventQty currentSerialQty = 1;
        InventQty serialQtyRemainingToCapture = pass.lookupNum(#SerialQty) - pass.lookupNum(#SerialCounter);

        return serialQtyAssociatedToOrderLine + currentSerialQty + serialQtyRemainingToCapture > orderLineQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineQtyAndSerialQtyAssociatedToOrderLine</Name>
				<Source><![CDATA[
    private container getOrderLineQtyAndSerialQtyAssociatedToOrderLine()
    {
        InventQty           orderLineQty;
        InventQty           serialQtyAssociatedToOrderLine;
        SalesLine           salesLine;
        WHSWorkLine         workLine;
        WHSWorkClusterLine  workClusterLine;

        while select QtyOrdered, ItemId, InventTransId from salesLine
                     exists join workLine
                         where workLine.InventTransId == salesLine.InventTransId
                         exists join workClusterLine
                             where workClusterLine.ClusterId == pass.lookup(#ClusterId)
                                   &&  workClusterLine.WorkId    == workLine.WorkId
        {
            if (InventTable::find(salesLine.ItemId).isSalesProcessSerialActive())
            {
                RecId inventTransOriginRecId = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;
                orderLineQty += salesLine.QtyOrdered;
                serialQtyAssociatedToOrderLine += abs(InventTrackingRegisterTrans::qtyPhysicalIssue(inventTransOriginRecId));
            }
        }

        return [orderLineQty, serialQtyAssociatedToOrderLine];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReturnSerialSalesProcess</Name>
				<Source><![CDATA[
    private boolean checkReturnSerialSalesProcess(InventSerialId _serialId)
    {
        ItemId itemId = pass.lookupStr(#ItemId);
        SalesReturnItemNum returnNum = pass.lookupStr(#RMANum);
        if (returnNum
            && InventTable::find(itemId).isSalesProcessSerialActive())
        {
            SalesTable salesTable = SalesTable::findReturnItemNum(returnNum);
            
            if (salesTable.RecId)
            {
                SalesLine  returnLine;

                select firstonly InventTransIdReturn from returnLine
                    order by LineNum desc
                    where returnLine.SalesId                == salesTable.SalesId
                        && returnLine.ItemId                == itemId
                        && returnLine.ReturnStatus          == ReturnStatusLine::Registered
                        && returnLine.InventTransIdReturn   != '';

                if (returnLine)
                {
                    return InventTrackingRegisterTrans::checkSerialId(returnLine.InventTransIdReturn, _serialId);
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialIdWorkExecuteModeInbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the execute mode is receiving or return.
    /// </summary>
    /// <returns>true if the execute mode is receiving or return; otherwise, false.</returns>
    protected boolean isSerialIdWorkExecuteModeInbound()
    {
        return (mode == WHSWorkExecuteMode::TransferOrderItemReceiving                  ||
                mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate         ||
                mode == WHSWorkExecuteMode::TransferOrderLineReceiving                  ||
                mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate         ||
                mode == WHSWorkExecuteMode::ReturnOrder                                 ||
                mode == WHSWorkExecuteMode::ReturnOrderAndLocate                        ||
                mode == WHSWorkExecuteMode::ReturnItemReceiving                         ||
                mode == WHSWorkExecuteMode::MixedLPReceiving                            ||
                mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate                   ||
                WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>