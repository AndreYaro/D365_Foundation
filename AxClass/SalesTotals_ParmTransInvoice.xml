<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_ParmTransInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTotals_ParmTransInvoice extends SalesTotals_ParmTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateIsCreditNote</Name>
				<Source><![CDATA[
    protected void calculateIsCreditNote()
    {
        isCreditNote = this.determineIsCreditNote(this.totalAmount(), this.totalQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new <see cref="T:SalesTotals" /> object to calculate the totals from an associated
    /// table record.
    /// </summary>
    /// <param name="_source">
    /// The source table record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to use.
    /// </param>
    /// <param name="_sumBy">
    /// The grouping by which to summarize the document.
    /// </param>
    /// <param name="_parmId">
    /// A session identifier.
    /// </param>
    /// <param name="_sumSalesId">
    /// A Sales order identifier of the summary <see cref="T:SalesParmTable" /> record.
    /// </param>
    /// <param name="_documentStatus">
    /// The document type.
    /// </param>
    /// <returns>
    /// An instance of the <see cref="T:SalesTotals_ParmTransInvoice" /> class.
    /// </returns>
    public static SalesTotals_ParmTransInvoice construct(
            Common _source,
            SalesUpdate _specQty,
            AccountOrder _sumBy,
            ParmId _parmId,
            SalesId _sumSalesId,
            DocumentStatus _documentStatus)
    {
        return new SalesTotals_ParmTransInvoice(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source,
             SalesUpdate _specQty,
             AccountOrder _sumBy,
             ParmId _parmId,
             SalesId _sumSalesId,
             DocumentStatus _documentStatus)
    {
        super(_source, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount percentage for current line.
    /// </summary>
    /// <returns>The discount percentage.</returns>
    protected DiscPct discPercent()
    {
        // This is necessary to preserve Chain of command on this method in this
        // class without the need for a recompile.
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        CustInvoiceJour custInvoiceJour;

        if (salesParmTable.ParmJobStatus == ParmJobStatus::Executed)
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.SalesId == salesTable.SalesId;

            if (custInvoiceJour)
            {
                return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceJour);
            }
        }

        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithholdTaxLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows withholding tax line for posting sales invoice line.
    /// </summary>
    /// <param name = "_salesParmTable">A instance of <c>SalesParmTable</c> representing the posting sales order.</param>
    /// <param name = "_salesParmLine">A instance of <c>SalesParmLine</c> representing the posting sales order line.</param>
    /// <param name = "_salesParmUpdate">A instance of <c>SalesParmUpdate</c> contains posting parameters.</param>
    /// <param name = "_formRun">A instance of <c>FormRun</c>.</param>
    /// <returns>A instance of <c>FormRun</c>.</returns>
    internal static FormRun showWithholdTaxLine_IN(
        SalesParmTable _salesParmTable,
        SalesParmLine _salesParmLine,
        SalesParmUpdate _salesParmUpdate,
        FormRun _formRun)
    {
        SalesTotals_ParmTransInvoice salesParmTotals = SalesTotals_ParmTransInvoice::construct(
            _salesParmTable,
            _salesParmUpdate.SpecQty,
            _salesParmUpdate.SumBy,
            _salesParmUpdate.ParmId,
            _salesParmUpdate.SumSalesId,
            DocumentStatus::Invoice);
        salesParmTotals.calc();
        return TaxWithhold_IN::showWithholdTaxes(salesParmTotals.taxWithhold_IN(), _salesParmLine, _formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>