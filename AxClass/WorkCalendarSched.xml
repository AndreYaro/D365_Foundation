<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarSched</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkCalendarSched
{
    #define.loopBreak(1000)         // keep for backward compatibility

    protected boolean   useCache;
    protected Map       mapCalendarDateOpen;
    protected Map       mapCalendarClosedForPickup;
     
    protected int64     cacheInitDateTime;
    protected container globalCacheKey;

    protected boolean   reloadCacheOnKeyMiss;
    protected boolean   mustSaveCache;

    private int         loopThreshold;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromGlobalCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the class to load from global cache the first time a key in the local cache is missed.
    /// </summary>
    public void initFromGlobalCache()
    {
        reloadCacheOnKeyMiss = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoopThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the threshold used to loop through calendar slots
    /// </summary>
    /// <returns>
    ///    The looping threshold
    /// </returns>
    protected int getLoopThreshold()
    {
        return #loopBreak;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromGlobalCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads the cached maps from the global object cache based on the specified key.
    /// </summary>
    private void loadFromGlobalCache()
    {
        if (useCache)
        {
            reloadCacheOnKeyMiss   = false;
            SysGlobalObjectCache   globalObjectCache      = new SysGlobalObjectCache();
            GlobalObjectCacheScope globalObjectCacheScope = WorkCalendarSched::getGlobalCacheScope();

            container globalObjectCacheValue = globalObjectCache.find(
                globalObjectCacheScope,
                globalCacheKey);

            if (globalObjectCacheValue == conNull())
            {
                //put the initial container values in the cache
                globalObjectCache.insert(
                    globalObjectCacheScope,
                    globalCacheKey,
                    [mapCalendarDateOpen.pack(), mapCalendarClosedForPickup.pack()]);
            }
            else
            {
                container daysOpenMapPacked;
                container daysClosedMapPacked;
                [daysOpenMapPacked, daysClosedMapPacked] = globalObjectCacheValue;
                mapCalendarDateOpen         = Map::create(daysOpenMapPacked);
                mapCalendarClosedForPickup  = Map::create(daysClosedMapPacked);
            }

            cacheInitDateTime = WorkCalendarSched::getLastInvalidatedTimeStamp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a date is open in a calendar.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar to examine.
    /// </param>
    /// <param name="_schedDate">
    ///    The date to check for.
    /// </param>
    /// <param name="_skipGlobalCaching">
    ///    A boolean value indicating whether to skip global caching.
    /// </param>
    /// <returns>
    ///    true if the date is open; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If <paramref name="_calendarId" /> is blank, the method returns true, which means that the date
    ///    <paramref name="_schedDate" /> is considered open.
    /// </remarks>
    public boolean isDateOpen(
        CalendarId      _calendarId,
        SchedDate       _schedDate,
        boolean         _skipGlobalCaching = false)
    {
        if (!_calendarId)
        {
            return true;
        }

        if (!useCache || !mapCalendarDateOpen)
        {
            return WorkCalendarDate::isDateOpen(_calendarId, _schedDate);
        }

        str key = WorkCalendarSched::calendarDateKey(_calendarId, _schedDate);

        if (!mapCalendarDateOpen.exists(key))
        {
            boolean mustInsert = true;
            if (!_skipGlobalCaching || reloadCacheOnKeyMiss)
            {
                this.loadFromGlobalCache();
                mustInsert = !mapCalendarDateOpen.exists(key);
            }

            if (mustInsert)
            {
                mapCalendarDateOpen.insert(key, WorkCalendarDate::isDateOpen(_calendarId, _schedDate));
                mustSaveCache = true;
            }
        }

        if (!_skipGlobalCaching)
        {
            this.saveToGlobalCache();
        }

        return mapCalendarDateOpen.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickupDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a date is open for pickup in the calendar.
    /// </summary>
    /// <param name="_calendarId">
    ///    The ID of the calendar that <paramref name="_schedDate" /> is checked against.
    /// </param>
    /// <param name="_schedDate">
    ///    The date being checked.
    /// </param>
    /// <param name="_skipGlobalCaching">
    ///    A boolean value indicating whether to skip local caching.
    /// </param>
    /// <returns>
    ///    true if the date <paramref name="_schedDate" /> is open for pickup in the calendar <paramref
    ///    name="_calendarId" />; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_calendarId" /> parameter is blank, the method returns true, which means
    ///    that the date <paramref name="_schedDate" /> is considered open for pickup.
    /// </remarks>
    public boolean isPickupDate(
        CalendarId _calendarId,
        SchedDate  _schedDate,
        boolean    _skipGlobalCaching = false)
    {
        if (!_calendarId)
        {
            return true;
        }

        if (!useCache || !mapCalendarClosedForPickup)
        {
            return WorkCalendarDate::isPickupDate(_calendarId, _schedDate);
        }

        str key = WorkCalendarSched::calendarDateKey(_calendarId, _schedDate);

        if (!mapCalendarClosedForPickup.exists(key))
        {
            boolean mustInsert = true;
            if (!_skipGlobalCaching || reloadCacheOnKeyMiss)
            {
                this.loadFromGlobalCache();
                mustInsert = !mapCalendarClosedForPickup.exists(key);
            }

            if (mustInsert)
            {
                mapCalendarClosedForPickup.insert(key, WorkCalendarDate::isPickupDate(_calendarId, _schedDate));
                mustSaveCache = true;
            }
        }

        if (!_skipGlobalCaching)
        {
            this.saveToGlobalCache();
        }

        return mapCalendarClosedForPickup.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarDateKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a key, which is used for lookup in the cache maps.
    /// </summary>
    /// <param name = "_calendarId">
    ///     The ID of the calendar that <paramref name="_schedDate" /> is checked against.
    /// </param>
    /// <param name = "_schedDate">
    ///     The date being checked.
    /// </param>
    /// <returns>
    ///     A string key for the given calendar and date, whivh is used or lokup in the cache maps.
    /// </returns>
    protected static str calendarDateKey(CalendarId _calendarId, SchedDate  _schedDate)
    {
        return _calendarId+'#'+int2str(date2num(_schedDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>WorkCalendarSched</c> with a custom cache key.
    /// </summary>
    /// <param name = "_cacheKey">A custom cache key</param>
    /// <returns>An instance of <c>WorkCalendarSched</c> using the given custom cache key.</returns>
    public static WorkCalendarSched newFromCacheKey(container _cacheKey)
    {
        WorkCalendarSched workCalendarSched = new WorkCalendarSched(true);
        workCalendarSched.globalCacheKey = _cacheKey;
        return workCalendarSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    public void new(boolean _useCache = true)
    {
        useCache      = _useCache;
        loopThreshold = this.getLoopThreshold();

        if (useCache)
        {
            mustSaveCache                   = false;
            reloadCacheOnKeyMiss            = false;
            mapCalendarDateOpen             = new Map(Types::String, Types::Enum);
            mapCalendarClosedForPickup      = new Map(Types::String, Types::Enum);
            cacheInitDateTime               = WorkCalendarSched::getLastInvalidatedTimeStamp();
            globalCacheKey                  = WorkCalendarSched::createGlobalCacheKey();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToGlobalCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Saves the local cached calendar values to global object cache.
    /// </summary>
    public void saveToGlobalCache()
    {
        if (useCache && mustSaveCache)
        {
            mustSaveCache = false;
            SysGlobalObjectCache   globalObjectCache        = new SysGlobalObjectCache();
            GlobalObjectCacheScope globalObjectCacheScope   = WorkCalendarSched::getGlobalCacheScope();

            //
            // only save to cache if the timestamp of the last invalidation
            // happend before the cache was initialized (the current cache is up-to-date)
            //

            if (cacheInitDateTime >= WorkCalendarSched::getLastInvalidatedTimeStamp())
            {
                globalObjectCache.insert(
                    globalObjectCacheScope,
                    globalCacheKey,
                    [mapCalendarDateOpen.pack(), mapCalendarClosedForPickup.pack()]);
                cacheInitDateTime = WorkCalendarSched::getDateTimeTicks();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the first <c>schedDate</c> where the working time is open.
    /// </summary>
    /// <param name="_schedDirection">
    ///    Determines whether the date should be calculated backward or forward from the <paramref
    ///    name="_schedDateFrom" />.
    /// </param>
    /// <param name="_schedDateFrom">
    ///    The from date upon which calculations are based.
    /// </param>
    /// <param name="_days">
    ///    The lead time.
    /// </param>
    /// <param name="_calendarDays">
    ///    Determines whether to consider open and closed days when you add lead time to the from date to
    ///    acquire the first <c>schedDate</c>.
    /// </param>
    /// <param name="_calendarId">
    ///    The ID of primary calendar; optional.
    /// </param>
    /// <param name="_secondaryCalendarId">
    ///    The ID of secondary calendar; optional.
    /// </param>
    /// <param name="_checkForPickup">
    ///    Determines whether to check if the <c>schedDate</c> is a pickup date, and in which calendar to
    ///    check; optional. The default value is <c>SalesCheckForPickup::Never</c>.
    /// </param>
    /// <returns>
    ///    The first <c>SchedDate</c> where the working time is open.
    /// </returns>
    /// <remarks>
    ///    If both a primary calendar and a secondary calendar are provided, the <c>schedDate</c> will be the
    ///    first date where there is an opening in both calendars. By using the argument <paramref
    ///    name="_checkForPickup" />, it is possible also to require that the <c>schedDate</c> has to be open
    ///    for pickup in either the primary calendar or the secondary calendar.
    ///    If either of the
    ///    <c>CalendarId</c> objects that are passed as arguments are blank, the calendar will be treated as a
    ///    calendar with all days open. This is because of the way the <c>isDateOpen</c> method functions.
    ///    To
    ///    avoid infinite loops where two calendars never have a matching opening, an internal limit of 1,000
    ///    days is used. If no open day is found within this limit, the original from date (Arg2) is returned.
    /// </remarks>
    public SchedDate schedDate(
        SchedDirection      _schedDirection,
        SchedDate           _schedDateFrom,
        Days                _days,
        CalendarDays        _calendarDays,
        CalendarId          _calendarId,
        CalendarId          _secondaryCalendarId = '',
        SalesCheckForPickup _checkForPickup      = SalesCheckForPickup::Never)
    {
        SchedDate   schedDateTo;
        Days        remainDays;
        Integer     loopCounter;
        SchedDate   retValue    = dateNull();

        this.initFromGlobalCache();

        if (!(_calendarDays && _calendarId))
        {
            schedDateTo = _schedDateFrom + (_schedDirection == SchedDirection::Forward ? _days : - _days);
        }
        else //find an open day in primary calendar
        {
            remainDays  = _days;
            schedDateTo = _schedDateFrom;

            while (remainDays > 0)
            {
                if (_schedDirection == SchedDirection::Forward)
                {
                    schedDateTo++;
                }
                else
                {
                    schedDateTo--;
                }

                if (this.isDateOpen(_calendarId, schedDateTo, true))
                {
                    remainDays--;
                }

                loopCounter++;
                if (loopCounter > loopThreshold)
                {
                    schedDateTo = _schedDateFrom;
                    break;
                }
            }
        }

        for (loopCounter = 0; loopCounter <= loopThreshold; loopCounter++)//find an open day in both sec AND prim calendar
        {
            if (this.isDateOpen(_calendarId, schedDateTo, true) && 
                    (_checkForPickup != SalesCheckForPickup::PrimaryCalendar ||
                    (_checkForPickup == SalesCheckForPickup::PrimaryCalendar && this.isPickupDate(_calendarId, schedDateTo, true))))
            {
                if (_secondaryCalendarId)
                {
                    if (this.isDateOpen(_secondaryCalendarId, schedDateTo, true) && 
                            (_checkForPickup != SalesCheckForPickup::SecondCalendar || 
                            (_checkForPickup == SalesCheckForPickup::SecondCalendar && this.isPickupDate(_secondaryCalendarId, schedDateTo, true))))
                    {
                        retValue = schedDateTo;
                        break;
                    }
                }
                else
                {
                    retValue = schedDateTo;
                    break;
                }
            }

            if (_schedDirection == SchedDirection::Forward)
            {
                schedDateTo++;
            }
            else
            {
                schedDateTo--;
            }
        }

        this.saveToGlobalCache();
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules forward or backward from a given date by a given number of seconds.
    /// </summary>
    /// <param name="_schedDirection">
    /// The scheduling direction.
    /// </param>
    /// <param name="_schedDateTimeFrom">
    /// The date and time to schedule from.
    /// </param>
    /// <param name="_seconds">
    /// The number of seconds to schedule forward or backward from the schedule date and time.
    /// </param>
    /// <param name="_calendarDays">
    /// A boolean value that indicates whether the scheduling must consider the calendar or not.
    /// </param>
    /// <param name="_calendarId">
    /// The calendar used determine the result.
    /// </param>
    /// <param name="_useEffectivity">
    /// A boolean value that indicates whether or not the effecticity defined on the calendar must be considered; optional.
    /// </param>
    /// <param name="_limitDateTime">
    /// A date and time value that defines where to stop scheduling if no time slot can be found; optional.
    /// </param>
    /// <returns>
    /// The scheduling result.
    /// </returns>
    public utcdatetime schedTime(
        SchedDirection      _schedDirection,
        utcdatetime         _schedDateTimeFrom,    //company timezone
        real                _seconds,
        CalendarDays        _calendarDays,
        CalendarId          _calendarId,
        boolean             _useEffectivity = true,
        utcdatetime         _limitDateTime  = _schedDirection == SchedDirection::Forward
                                            ? DateTimeUtil::maxValue()
                                            : DateTimeUtil::minValue())
    {
        #TimeConstants
        utcdatetime             schedDateTimeTo;
        real                    remainSeconds;
        CapacityValue           capacity;
        Integer                 loopCounter;
        SchedDate               schedDate;
        timeOfDay               schedTime;
        SchedDate               schedDateFrom;
        timeOfDay               schedTimeFrom;
        SchedDate               limitDate = DateTimeUtil::date(_limitDateTime);
        timeOfDay               limitTime = DateTimeUtil::time(_limitDateTime);
        WorkCalendarDateLine    workCalendarDateLine;
        boolean                 first = true;

        this.initFromGlobalCache();

        if (!(_calendarDays && _calendarId))
        {
            switch (_schedDirection)
            {
                case SchedDirection::Forward:
                    schedDateTimeTo = min(_limitDateTime, DateTimeUtil::addSeconds(_schedDateTimeFrom, real2int(decRound(_seconds, 0))));
                    break;
                default:
                    schedDateTimeTo = max(_limitDateTime, DateTimeUtil::addSeconds(_schedDateTimeFrom, -real2int(decRound(_seconds, 0))));
                    break;
            }
        }
        else //find an open day(s) and time(s) in calendar
        {
            schedDateFrom   = DateTimeUtil::date(_schedDateTimeFrom);
            schedTimeFrom   = DateTimeUtil::time(_schedDateTimeFrom);
            schedDate       = schedDateFrom;
            remainSeconds   = _seconds;
            schedDateTimeTo = _schedDateTimeFrom;

            while (   remainSeconds > 0
                   && ((schedDate       <= limitDate
                   &&   _schedDirection == SchedDirection::Forward)
                   ||  (schedDate       >= limitDate
                   &&   _schedDirection == SchedDirection::Backward)))
            {
                if (this.isDateOpen(_calendarId, schedDate, true))
                {
                    if (_schedDirection == SchedDirection::Forward)
                    {
                        while select workCalendarDateLine
                            order by FromTime
                            where workCalendarDateLine.CalendarId == WorkCalendar::defined(_calendarId, schedDate) &&
                                  workCalendarDateLine.TransDate  == schedDate
                        {
                            if (first)
                            {
                                if (workCalendarDateLine.ToTime   >= schedTimeFrom)
                                {
                                    first = false;
                                    //only use the remaining part of this slot for capacity calculation
                                    workCalendarDateLine.FromTime = max(workCalendarDateLine.FromTime, schedTimeFrom);
                                }
                                else
                                {
                                    continue;
                                }
                            }

                            if (schedDate == limitDate)
                            {
                                if (workCalendarDateLine.FromTime > limitTime)
                                {
                                    continue;
                                }

                                workCalendarDateLine.ToTime = min(limitTime, workCalendarDateLine.ToTime);
                            }

                            capacity = workCalendarDateLine.capacity(100, _useEffectivity);
                            if (remainSeconds <= capacity)
                            {
                                if (_useEffectivity)
                                {
                                    if (workCalendarDateLine.Effectivity)
                                    {
                                        schedTime     = any2int(workCalendarDateLine.FromTime + (remainSeconds * 100/workCalendarDateLine.Effectivity));
                                        remainSeconds = 0;
                                    }
                                }
                                else
                                {
                                    schedTime     = workCalendarDateLine.FromTime + real2int(decRound(remainSeconds, 0));
                                    remainSeconds = 0;
                                }
                                break;
                            }
                            else
                            {
                                remainSeconds -= capacity;
                            }
                        }
                    }
                    else //backward
                    {
                        while select workCalendarDateLine
                            order by ToTime desc
                            where workCalendarDateLine.CalendarId == WorkCalendar::defined(_calendarId, schedDate) &&
                                  workCalendarDateLine.TransDate  == schedDate
                        {
                            if (first)
                            {
                                if (workCalendarDateLine.FromTime <= schedTimeFrom)
                                {
                                    first = false;
                                    //only use the remaining part of this slot for capacity calculation
                                    workCalendarDateLine.ToTime = min(schedTimeFrom, workCalendarDateLine.ToTime);
                                }
                                else
                                {
                                    continue;
                                }
                            }

                            if (schedDate == limitDate)
                            {
                                if (workCalendarDateLine.ToTime < limitTime)
                                {
                                    continue;
                                }

                                workCalendarDateLine.FromTime = max(limitTime, workCalendarDateLine.FromTime);
                            }

                            capacity = workCalendarDateLine.capacity(100, _useEffectivity);
                            if (remainSeconds <= capacity)
                            {
                                if (_useEffectivity)
                                {
                                    if (workCalendarDateLine.Effectivity)
                                    {
                                        schedTime     = any2int(workCalendarDateLine.ToTime - (remainSeconds * 100/workCalendarDateLine.Effectivity));
                                        remainSeconds = 0;
                                    }
                                }
                                else
                                {
                                    schedTime     = workCalendarDateLine.ToTime - real2int(decRound(remainSeconds, 0));
                                    remainSeconds = 0;
                                }
                                break;
                            }
                            else
                            {
                                remainSeconds -= capacity;
                            }
                        }
                    }
                }

                loopCounter++;
                if (   loopCounter > loopThreshold
                    || (schedDate == limitDate
                    &&  remainSeconds))
                {
                    //exceeded date/time or loop limit
                    schedDateTimeTo = DateTimeUtil::newDateTime(schedDate, schedDate == limitDate ? limitTime : #secondsPerDay);
                    break;
                }
                else
                {
                    if (remainSeconds)
                    {
                        //not done yet
                        if (_schedDirection == SchedDirection::Forward)
                        {
                            schedDate++;
                        }
                        else
                        {
                            schedDate--;
                        }
                        first = false;
                    }
                    else
                    {
                        //scheduled within date/time and loop limits
                        schedDateTimeTo = DateTimeUtil::newDateTime(schedDate, schedTime);
                    }
                }
            }
        }

        this.saveToGlobalCache();
        return schedDateTimeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedTimeUTC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Schedules a time that is forward or backward from a given date by a given number of seconds.
    /// </summary>
    /// <param name="_schedDirection">
    ///    The scheduling direction.
    /// </param>
    /// <param name="_schedDateTimeFrom">
    ///    The UTC date and the time from which to schedule.
    /// </param>
    /// <param name="_seconds">
    ///    The number of seconds to schedule forward or backward from the schedule date and time.
    /// </param>
    /// <param name="_calendarDays">
    ///    A Boolean value that indicates whether scheduling must consider the calendar.
    /// </param>
    /// <param name="_calendarId">
    ///    The calendar to use to determine the result.
    /// </param>
    /// <param name="_useEffectivity">
    ///    A Boolean value that indicates whether the effectivity that is defined on the calendar must be
    ///    considered; optional.
    /// </param>
    /// <param name="_limitDateTime">
    ///    A date and time value that defines where to stop a schedule if a time slot is not found; optional.
    /// </param>
    /// <returns>
    ///    The scheduling result as a UTC date and time.
    /// </returns>
    /// <remarks>
    ///    Calendars are related to the time zone of the company. This method applies the company time zone
    ///    offset to the provided UTC date and removes it from the scheduling result to wrap the
    ///    <c>WorkCalendarSched.schedTime</c> method.
    /// </remarks>
    public utcdatetime schedTimeUTC(
        SchedDirection _schedDirection,
        utcdatetime    _schedDateTimeFrom,    //UTC
        real           _seconds,
        CalendarDays   _calendarDays,
        CalendarId     _calendarId,
        boolean        _useEffectivity = true,
        utcdatetime    _limitDateTime  = _schedDirection == SchedDirection::Forward
                                            ? DateTimeUtil::maxValue()
                                            : DateTimeUtil::minValue())
    {
        utcdatetime schedDateTimeFromTZ = DateTimeUtil::applyTimeZoneOffset(_schedDateTimeFrom, DateTimeUtil::getCompanyTimeZone());
        utcdatetime limitDateTimeTZ     = _limitDateTime;
        utcdatetime schedDateTimeToUTC;

        this.initFromGlobalCache();

        if (   _limitDateTime != DateTimeUtil::minValue()
            && _limitDateTime != DateTimeUtil::maxValue())
        {
            limitDateTimeTZ = DateTimeUtil::applyTimeZoneOffset(_limitDateTime, DateTimeUtil::getCompanyTimeZone());
        }

        schedDateTimeToUTC = this.schedTime(_schedDirection,
                                            schedDateTimeFromTZ,
                                            _seconds,
                                            _calendarDays,
                                            _calendarId,
                                            _useEffectivity,
                                            limitDateTimeTZ);

        //convert back from company timezone to UTC
        schedDateTimeToUTC = DateTimeUtil::removeTimeZoneOffset(schedDateTimeToUTC, DateTimeUtil::getCompanyTimeZone());
        this.saveToGlobalCache();
        return schedDateTimeToUTC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGlobalCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a key that can be used to read and write the caching of the calendar.
    /// </summary>
    /// <returns>
    ///     A container with the composition of the cache key.
    /// </returns>
    private static container createGlobalCacheKey()
    {
        return [classstr(WorkCalendarSched)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateTimeTicks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current date time in milliseconds.
    /// </summary>
    /// <returns>
    ///     An int64 value.
    /// </returns>
    private static int64 getDateTimeTicks()
    {
        System.DateTime now     = System.DateTime::get_Now();
        int64           ticks   = now.get_Ticks();

        return ticks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGlobalCacheScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the global object cache scope for the caching to use the calendar.
    /// </summary>
    /// <returns>
    ///     The name of the scope for the global object cache.
    /// </returns>
    public static GlobalObjectCacheScope getGlobalCacheScope()
    {
        return classstr(WorkCalendarSched) + getcurrentpartition() + curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastInvalidatedTimeStamp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the timestamp of the last invalidate action that was done to the caching mechanism.
    /// </summary>
    /// <returns>
    ///     The milisseconds representing the date and time of the last invalidation.
    /// </returns>
    private static int64 getLastInvalidatedTimeStamp()
    {
        int64               lastInvalidatedTimeStamp;
        SysGlobalObjectCache globalObjectCache      = new SysGlobalObjectCache();
        GlobalObjectCacheScope cacheScope           = WorkCalendarSched::getGlobalCacheScope();
        container            timestampCacheKey      = [identifierStr(timestamp)];
        container            globalObjectCacheValue = globalObjectCache.find(cacheScope, timestampCacheKey);

        if (globalObjectCacheValue == conNull())
        {
            lastInvalidatedTimeStamp = WorkCalendarSched::getDateTimeTicks();
            globalObjectCache.insert(cacheScope, timestampCacheKey, [lastInvalidatedTimeStamp]);
        }
        else
        {
            [lastInvalidatedTimeStamp] = globalObjectCacheValue;
        }

        return lastInvalidatedTimeStamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateGlobalCacheScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Invalidates the calendar settings stored in the global cache.
    /// </summary>
    public static void invalidateGlobalCacheScope()
    {
        SysGlobalObjectCache    globalObjectCache = new SysGlobalObjectCache();

        globalObjectCache.clear(WorkCalendarSched::getGlobalCacheScope());
        WorkCalendarSched::setLastInvalidatedTimeStamp(WorkCalendarSched::getDateTimeTicks());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastInvalidatedTimeStamp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the timestamp of the last invalidate action that was done to the caching mechanism.
    /// </summary>
    /// <param name="_lastInvalidatedTimeStamp">
    ///     The number of ticks representing the timestamp of the date for invalidation.
    /// </param>
    private static void setLastInvalidatedTimeStamp(int64 _lastInvalidatedTimeStamp)
    {
        SysGlobalObjectCache globalObjectCache      = new SysGlobalObjectCache();
        GlobalObjectCacheScope cacheScope           = WorkCalendarSched::getGlobalCacheScope();
        container            timestampCacheKey      = [identifierStr(timestamp)];

        globalObjectCache.insert(cacheScope, timestampCacheKey, [_lastInvalidatedTimeStamp]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>