<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_PurchOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysOperationJournaledParametersAttribute(true)]
class       PurchFormLetter_PurchOrder
extends     PurchFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return PurchFormLetter_PurchOrder::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the purchase order for limit errors
    /// </summary>
    /// <returns>
    /// <c>False</c> if there is a funding limit error, otherwise <c>true</c>.
    /// </returns>
    protected boolean checkFundingLimit()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            ProjFundingLimitTrackingManager::hasLimitErrorSourceDocument(this.purchTable().SourceDocumentHeader))
        {
            return checkFailed("@SYS4110061");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to construct a new contract that is used in the unpack method.
    /// </summary>
    /// <returns>
    /// A new <c>PurchFormLetterContract</c> class instance
    /// </returns>
    /// <remarks>
    /// It enables passing a specific contract object relevant for the class
    /// e.g. PurchFormLetterPurchOrderContract for the PurchFormLetter_PurchOrder object and
    /// PurchFormLetterConfirmRequestContract for the PurchFormLetter_ConfirmationRequest object
    /// </remarks>
    protected PurchFormLetterContract constructContract()
    {
        return PurchFormLetterPurchOrderContract::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        this.allowEmptyTable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrShowVendPrintOptionsCheckBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor print options checkbox should be shown.
    /// </summary>
    /// <returns>
    /// true to indicate that the vendor print options checkbox should be shown.
    /// </returns>
    public boolean mcrShowVendPrintOptionsCheckBox()
    {
        //Return true to show vendor print options check box.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postPurchaseOrderConfirmation),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);

        this.reArrangeNow(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        if (prmisDefault(_showDialog))
            if (this.parmCallerMenuItem() == menuitemActionStr(PurchFormLetter_Confirm))
            {
                return false;
            }

        return super(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for purchase order requisition.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeNow</Name>
				<Source><![CDATA[
    boolean reArrangeNow(boolean _reArrangeNow = reArrangeNow)
    {
        // reArrange is not allowed on confirmation.
        reArrangeNow = false;
        return reArrangeNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    public void resetParmListCommonCS()
    {
        super();
        purchFormLetterContract.parmAllowEmptyTable(true);
        reArrangeNow                    = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        ParmId          parmId;
        PurchParmUpdate purchParmUpdate;
        Printout        printout;
        NoYes           printFormletter;
        container       printersettingsFormletter;
        container       printersettingsFormletterCopy;
        boolean         usePrintManagement;

        #LOCALMACRO.ParmList_v25sp2
            ParmId,
            purchParmUpdate.SpecQty,
            Printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            purchParmUpdate,
            Printout,
            printFormletter,
            printersettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            purchParmUpdate,
            Printout,
            printFormletter,
            printersettingsFormletter,
            printersettingsFormletterCopy
        #ENDMACRO

        #LOCALMACRO.ParmList_v5
            parmId,
            purchParmUpdate,
            Printout,
            printFormletter,
            printersettingsFormletter,
            printersettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case 7+1 /*case is old currentversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(this.constructContract());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchParmUpdate(purchParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.usePrintManagement(usePrintManagement);
                break;

            case 6                  :   [version, #ParmList_v401]               = _packedClass;
                                        break;

            case 5                  :   [version, #ParmList_v30]                = _packedClass;
                                        printersettingsFormletterCopy           = printersettingsFormletter;
                                        break;

            case 4                  :   [version, #ParmList_v25sp2]             = _packedClass;
                                        break;

            default : return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjWorkerForPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method validates worker field on purch lines for a purchase order.
    /// </summary>
    /// <param name = "_purchId">
    /// Purchase Id of a purchase order.
    /// </param>
    /// <returns>
    /// true if project resource validation was successful; otherwise, false.
    /// </returns>
    /// <remarks> 
    /// This method should be called before a purchase order workflow is confirmed or submitted for approval.
    /// </remarks>
    public static boolean validateProjWorkerForPurchOrder(PurchId _purchId)
    {
        boolean ret = true;
        boolean emplProjMandatoryCheck = false;
        PurchLine       purchLine;

        if (ProjProjectOperationsIntegrationFeatureHelper::isProcurementCategoriesEnabledWithProjOps())
        {
            return ret;
        }
        
        if(ProjParameters::find().ValidationEmplProj == ProjValParameter::Mandatory)
        {
            emplProjMandatoryCheck = true;
        }

        setPrefix(strFmt("@Proj:ProjectWorkerMissingOnPurchOrderLines", fieldPName(PurchLine, ProjWorker)));

        while select purchLine
                where purchLine.PurchId == _purchId && purchLine.ProjId
        {
			if(!purchLine.ProjWorker)
            {
                // ProjCategory should exisit at this point because validateWrite() would have validated this check.
                ProjCategory projCategory = ProjCategory::find(purchLine.ProjCategoryId);
                if (ProjParameters::find().DisableExpenseCategoryResourceCheckProcurement == NoYes::Yes)
                {
                    // Only validate Hour categories
                    if (projCategory.CategoryType == ProjCategoryType::Hour && (emplProjMandatoryCheck || projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory))
                    {
                        ret = checkFailed(strFmt("@Proj:ProjectWorkerMissingOnPurchLineWithProcurementCategory", EcoResCategory::find(purchLine.ProcurementCategory).Name, purchLine.LineAmount, purchLine.LineNumber));
                    }
                }
                // Validate all supported category types except Item
                else if (projCategory.CategoryType != ProjCategoryType::Item && (emplProjMandatoryCheck || projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory))
                {
                    ret = checkFailed(strFmt("@Proj:ProjectWorkerMissingOnPurchLineWithProcurementCategory", EcoResCategory::find(purchLine.ProcurementCategory).Name, purchLine.LineAmount, purchLine.LineNumber));
                }
               
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret;
        PurchLine       purchLine;

        PurchId purchId = this.purchTable().PurchId;

        ret = super(_calledFrom) && PurchFormLetter_PurchOrder::validateProjWorkerForPurchOrder(purchId);

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            while select purchLine
                where purchLine.PurchId      == this.purchTable().PurchId &&
                      ! purchLine.IsDeleted                               &&
                      purchLine.Blocked      == NoYes::No                 &&
                      (purchLine.PurchStatus == PurchStatus::Backorder    ||
                       purchLine.PurchStatus == PurchStatus::Received)
            {
                if (InventTable::find(purchLine.ItemId).AssetGroupId_RU ||
                    (purchLine.ProcurementCategory && RAssetPurchTrans::exist(purchLine)))
                {
                    if (! RAssetPurchTrans::checkBeforePost(purchLine))
                        ret = checkFailed("@SYS93289");
                }
            }
        }

        if (ret && this.documentStatus() == DocumentStatus::PurchaseOrder)
        {
            ret = PurchaseOrderVendorCollaborationValidator::validateVendorCollaborationResponses(this.parmId());
            if (!ret)
            {
                ret = Box::okCancel("@SCM:LatestPurchaseOrderVersionIsNotConfirmedByVendor", DialogButton::Cancel) == DialogButton::Ok;
            }

            PurchTable purchTable = this.purchTable();

            if (ret 
                && BudgetControlDraftPODateValidationFlight::instance().isEnabled()
                && BudgetControlPurchaseOrderSettingsValidator::canUpdatedAccountingDateAffectBudgetForDraftPO(purchTable.SourceDocumentHeader, purchTable.AccountingDate, purchTable.dataAreaId))
            {
                ret = checkFailed(strFmt("@Budget:BudgetControlPOConfirmationDateError", purchTable.AccountingDate,  LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(CompanyInfoHelper::fiscalCalendarRecId(), purchTable.AccountingDate)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static  ClassDescription  description()
    {
        return "@SYS319254";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchOrder</Name>
				<Source><![CDATA[
    static public PurchFormLetter_PurchOrder newPurchOrder(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postPurchaseOrderConfirmation),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_PurchOrder formLetter = new PurchFormLetter_PurchOrder (_className, _methodName, _executionMode);
        formLetter.init();
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (PurchFormLetterErrorMessageHelpScopeConfirmationFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>