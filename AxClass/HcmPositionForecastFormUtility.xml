<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastFormUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A utility class for managing the business logic on the <c>HcmPositionForecast</c> form.
/// </summary>
/// <remarks>
/// Any business logic which is pertinent to the form that cannot be added to another
/// object must go here in order to isolate all business logic from the actual form
/// more sense to put it on a table.
/// </remarks>
class HcmPositionForecastFormUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignDefaultCostElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the API necessary for creating the <c>HcmPositionBudgetAcctLine</c> records.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record Id value of the position for which we are defaulting budget cost elements.
    /// </param>
    /// <param name="_compensationGroupId">
    /// The record Id value of the compensation group for which to assign the cost elements.
    /// </param>
    static void assignDefaultCostElements(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                            HcmPositionForecastCompGroupRecId _compensationGroupId)
    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newAssignCostFromCompByPosition(_positionForecastScenarioRecId,
                                                                                _compensationGroupId);
        //Copy over all default cost elelments for compensation group
        positionForecastAssignCostElement.runForecastPositionCostAssignments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostElementsFromCompGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>HcmPositionForecastBudgetAcctLine</c> records based on the default <c>HcmBudgetPurposeType</c> records.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The position to for which to default the budget cost element records.
    /// </param>
    /// <param name="_positionForecastCompensationGroupId">
    /// The compensation group for which to create the <c>HcmPositionForecastBudgetAcctLine</c> records.
    /// </param>
    /// <param name="_positionForecastCompDataAreaId">
    /// The company of the <c>HcmPositionForecastScenario</c> record for which to create the <c>HcmPositionForecastBudgetAcctLine</c> records.
    /// </param>
    /// <param name="_showDialogBox">
    /// The boolean value that determines whether we display a message dialog, or just do the work without user interaction.
    /// </param>
    /// <returns>
    /// true if the compensation group default budget cost elements were successfully processed; otherwise, false.
    /// </returns>
    static boolean defaultCostElementsFromCompGroup(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                        HcmPositionForecastCompensationGroupId _positionForecastCompensationGroupId,
                                                        DataAreaId _positionForecastCompDataAreaId,
                                                        boolean _showDialogBox = true)
    {
        boolean processCostElements = true;

        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;
        HcmPositionForecastScenario positionForecastScenario  = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        CompanyInfo companyInfo = CompanyInfo::findDataArea(_positionForecastCompDataAreaId);
        boolean isExistingValue = (positionForecastScenario.CompensationGroupId != '');

        if (_positionForecastScenarioRecId == 0)
        {
            return false;
        }

        if (_positionForecastCompensationGroupId != '')
        {
            positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(_positionForecastCompensationGroupId, _positionForecastCompDataAreaId);
        }

        if (isExistingValue)
        {
            if (_showDialogBox)
            {
                if (HcmPositionForecastFormUtility::showCompensationGroupModifiedDialog())
                {
                    if (HcmPositionForecastBudgetAcctLine::existByPositionForecastScenarioLE(_positionForecastScenarioRecId, companyInfo.RecId))
                    {
                        HcmPositionForecastFormUtility::removeCostElements(positionForecastScenario.RecId, positionForecastCompensationGroup.RecId);
                    }
                }
                else
                {
                    processCostElements = false;
                }
            }
            else if (HcmPositionForecastBudgetAcctLine::existByPositionForecastScenarioLE(_positionForecastScenarioRecId, companyInfo.RecId))
            {
                HcmPositionForecastFormUtility::removeCostElements(positionForecastScenario.RecId, positionForecastCompensationGroup.RecId);
            }
        }

        if ((positionForecastCompensationGroup.RecId != 0)
            && (processCostElements == true))
        {
            HcmPositionForecastFormUtility::assignDefaultCostElements(positionForecastScenario.RecId, positionForecastCompensationGroup.RecId);
        }

        return processCostElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumOfDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the maximum date by comparing two dates.
    /// </summary>
    /// <param name="firstDate">
    /// The first date to compare with.
    /// </param>
    /// <param name="secondDate">
    /// The second date to compare with.
    /// </param>
    /// <returns>
    /// Returns the maximum date from given two dates.
    /// </returns>

    public static TransDate getMaximumOfDates(TransDate firstDate, TransDate secondDate)
    {
        TransDate resultDate;

        resultDate = firstDate;

        if (firstDate < secondDate)
        {
            resultDate = secondDate;
        }

        return resultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumOfDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the minimum date by comparing two dates.
    /// </summary>
    /// <param name="firstDate">
    /// The first date to compare with.
    /// </param>
    /// <param name="secondDate">
    /// The second date to compare with.
    /// </param>
    /// <returns>
    /// Returns the minimum date from given two dates.
    /// </returns>

    public static TransDate getMinimumOfDates(TransDate firstDate, TransDate secondDate)
    {
        TransDate resultDate;

        resultDate = firstDate;

        if (firstDate > secondDate)
        {
            resultDate =  secondDate;
        }

        return resultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCompensationGroupModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modification of a change to the <c>HcmPositionForecastCompensationGroup</c> record.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The forecast position scenario for which to process the compensation group change.
    /// </param>
    /// <param name="_positionForecastCompensationGroupId">
    /// The new compensation group value for which to process.
    /// </param>
    /// <param name="_positionForecastCompDataAreaId">
    /// The new compensation group data area value for which to process.
    /// </param>
    /// <param name="_showDialogBox">
    /// The boolean value that determines whether we display a message dialog, or just do the work without user interaction.
    /// </param>
    /// <returns>
    /// true if the compensation group was successfully processed; otherwise, false.
    /// </returns>
    static boolean handleCompensationGroupModified(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                        HcmPositionForecastCompensationGroupId _positionForecastCompensationGroupId,
                                                        DataAreaId _positionForecastCompDataAreaId,
                                                        boolean _showDialogBox = true)
    {
        boolean continueProcess;

        continueProcess = HcmPositionForecastFormUtility::defaultCostElementsFromCompGroup(_positionForecastScenarioRecId,
                                                                                            _positionForecastCompensationGroupId,
                                                                                            _positionForecastCompDataAreaId,
                                                                                            _showDialogBox);
        return continueProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCostElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all the <c>HcmBudgetPurposeType</c> records for the given position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The position for which we are deleting the budget cost element records.
    /// </param>
    /// <param name="_compensationGroupId">
    /// The compensation group
    /// </param>
    static void removeCostElements(  HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                            HcmPositionForecastCompGroupRecId _compensationGroupId)
    {
        HcmPositionForecastAssignCostElement positionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newAssignCostFromCompByPosition(_positionForecastScenarioRecId,
                                                                                _compensationGroupId);
        positionForecastAssignCostElement.removeAllCostElementsByPosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCompensationGroupModifiedDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a dialog box that asks if they wish to continue with the change of the compensation group record.
    /// </summary>
    /// <returns>
    /// true if the use responded yes to the change; otherwise, false.
    /// </returns>
    static boolean showCompensationGroupModifiedDialog()
    {
        DialogButton answer;
        str strMessage = "@SYS4005754";
        str strTitle = "@SYS116555";

        answer = Box::yesNo(
                    strMessage,
                    DialogButton::No, // Initial focus is on the No button.
                    strTitle);

        return (answer == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCriteriaDateRangeByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats starting and ending date type field references into a date range query string expression from passing dates.
    /// </summary>
    /// <param name="_startDateField">
    /// The field name of starting date type field reference.
    /// </param>
    /// <param name="_endDateField">
    /// The field name of the ending date type field reference.
    /// </param>
    /// <param name="_startDate">
    /// The start date of the criteria date range.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the criteria date range.
    /// </param>
    /// <returns>
    /// The date range criteria query string expression.
    /// </returns>
    public static str formatCriteriaDateRangeByDate(FieldName _startDateField, FieldName _endDateField, ValidFromDate _startDate, ValidToDate _endDate)
    {
        str criteriaDateRange;

        criteriaDateRange = '(%1 <= %4) && (%2 >= %3)';

        // Format the criteria date range expression
        return strFmt(criteriaDateRange,
            _startDateField,
            _endDateField,
            date2StrXpp(_startDate),
            date2StrXpp(_endDate ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDateRangeByForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats starting and ending date type field references into a date range query string expression based on the forecast position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record Id of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_startDateField">
    /// The field name of starting date type field reference.
    /// </param>
    /// <param name="_endDateField">
    /// The field name of the ending date type field reference.
    /// </param>
    /// <returns>
    /// The date range criteria query string expression.
    /// </returns>
    public static str formatDateRangeByForecastScenario(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                                FieldName _startDateField,
                                                                FieldName _endDateField)
    {
        str                         criteriaDateRange;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        criteriaDateRange = '(%1 <= %4) && (%2 >= %3)';

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);

        // Format the criteria date range expression
        return strFmt(criteriaDateRange,
            _startDateField,
            _endDateField,
            date2StrXpp(hcmPositionForecastScenario.getPositionForecastDateRangeStartDate()),
            date2StrXpp(hcmPositionForecastScenario.getPositionForecastDateRangeEndDate()) );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStepDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the description of the record in the <c>HRCCompRefPointSetupLine</c> table.
    /// </summary>
    /// <param name="_compensationGridRecId">
    /// The record ID of the Compensation grid in the <c>HcmPositionForecastCompensationGrid</c> table.
    /// </param>
    /// <returns>
    /// The description of the record in the <c>HRCCompRefPointSetupLine</c> table; otherwise, a blank.
    /// </returns>
    /// <remarks>
    /// Uses the cross company data access pattern in order to prevent the data from being restricted to just the current company context.
    /// </remarks>
    public static HRCCompRefPointDescription getStepDescription(HcmPositionForecastCompensationGridRecId _compensationGridRecId)
    {
        HRCCompRefPointSetupLine                hrcCompRefPointSetupLine;
        HcmPositionForecastCompensationGrid     hcmPositionForecastCompensationGrid;
        HcmPositionForecastCompGroupRefPoint    hcmPositionForecastCompGroupRefPoint;

        select firstonly crossCompany Description from hrcCompRefPointSetupLine
            exists join hcmPositionForecastCompensationGrid
                where hcmPositionForecastCompensationGrid.RefPointId == hrcCompRefPointSetupLine.RefPointId
                    && hcmPositionForecastCompensationGrid.RecId == _compensationGridRecId
            exists join hcmPositionForecastCompGroupRefPoint
                where hrcCompRefPointSetupLine.RefPointSetupId == hcmPositionForecastCompGroupRefPoint.RefPointSetupId;

        return hrcCompRefPointSetupLine.Description;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>