<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_ChargeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll charge types report.
/// </summary>
class RPayReport_ChargeType extends OXMLExcelReport_RPay implements BatchRetryable
{
    RPayChargeType  parmEnum;
    DialogField     dialogPayPeriod;
    ReportPeriod_RU rPayPeriod;
    RPayAmount      totalAmount;

    RPayChargeType  chargeType;

    counter         pageNumber;
    QueryRun        queryRun;

    #define.pageWidth(9)

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')
    #define.Footer('FOOTER')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rPayPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Prolog:
            case #Header:
            case #Footer:
                return this.getRangeHeight(_bookmark);
        }
        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return chargeType == RPayChargeType::Deduction ? "@RUP727" : "@RUP728";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Prolog);

        this.execute(#Header);

        this.updateQuery();
        queryRun.reset();
        while (queryRun.next())
        {
            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                pageNumber ++;
                this.execute(#Header);
            }
            this.execute(#Body);
        }

        this.execute(#Footer);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        this.updateQuery();
        dialog = super();

        dialog.addGroup("@SYS2163");
        dialogPayPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), rPayPeriod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayChargeType';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(rPayPeriod, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.paytype('paytype')
    #define.name('name')
    #define.amount_pos('amount_pos')
    #define.amount_neg('amount_neg')
    private void fillBody()
    {
        RPayTable   rpayTable;
        RPayTrans   rpayTrans;

        rpayTrans = queryRun.get(tableNum(RPayTrans));
        rpayTable = rpayTable::find(rpayTrans.PayCtype);

        this.insertValueToSection(#paytype, rpayTrans.PayCtype);
        this.insertValueToSection(#name,    rpayTable.Name);
        //erase cells after copy
        this.insertValueToSection(#amount_pos, "");
        this.insertValueToSection(#amount_neg, "");
        this.insertValueToSection(rpayTrans.Amount < 0  ? #amount_neg : #amount_pos, RPayTrans.Amount );
        totalAmount += RPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.totalLabel('total_label')
    #define.total_pos('total_pos')
    #define.total_neg('total_neg')
    private void fillFooter()
    {
        this.insertValueToSection(#totalLabel, "@SYS304698");
        this.insertValueToSection(totalAmount < 0 ? #total_neg : #total_pos, totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.TitleLabel('title_label')
    #define.datetime('datetime')
    #define.paytypeLabel('paytype_label')
    #define.nameLabel('name_label')
    #define.amountLabel('amount_label')
    #define.companyName('companyname')
    #define.pageNumber('pagenum')
    private void fillHeader()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection(#TitleLabel,      chargeType == RPayChargeType::Deduction ? "@RUP727" : "@RUP728");
        this.insertValueToSection(#dateTime,        dateTime);

        this.insertValueToSection(#paytypeLabel,    "@RUP309");
        this.insertValueToSection(#nameLabel,       "@SYS7399");
        this.insertValueToSection(#amountLabel,     "@GLS105334");
        this.insertValueToSection(#companyName,     CompanyInfo::find().Name);
        this.insertValueToSection(#pageNumber,      strFmt("@SYS24160", pageNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.calcperiodLabel('calcperiod_label')
    #define.calcperiod('calcperiod')
    private void fillProlog()
    {
        this.insertValueToSection(#calcperiodLabel, "@GLS105772");
        this.insertValueToSection(#calcperiod,      rPayPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        rPayPeriod = dialogPayPeriod.value() ? endmth(dialogPayPeriod.value()) : RPayParameters::payPeriod();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        chargeType = this.parmArgs().parmEnum();
        totalAmount = 0;
        pageNumber = 1;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        rPayPeriod = RPayParameters::payPeriod();
        queryRun = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    rpayTransQBDS;
        QueryBuildDataSource    rpayTableQBDS;
        QueryBuildRange         chargePayTypeRange;

        query = new Query();
        rpayTransQBDS = query.addDataSource(tableNum(RPayTrans));
        rpayTransQBDS.addRange(fieldNum(RPayTrans, PayCType));
        rpayTransQBDS.addGroupByField(fieldNum(RPayTrans, PayCType));
        rpayTransQBDS.addSelectionField(fieldNum(RPayTrans, Amount), SelectionField::Sum);

        rpayTableQBDS = rpayTransQBDS.addDataSource(tableNum(RPayTable));
        rpayTableQBDS.relations(true);

        chargePayTypeRange = rpayTableQBDS.addRange(fieldNum(RPayTable, PayChargeType));
        chargePayTypeRange.value(enum2str(args.parmEnum()));
        chargePayTypeRange.status(RangeStatus::Locked);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real requiredHeight = 0;
        boolean ret;

        requiredHeight = this.getRangeHeight(#body);
        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayChargeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        RPayTrans localRPayTrans;
        #define.headerCells(8)
        #define.footerCells(2)
        #define.bodyCells(3)

        select count(RecId) from localRPayTrans
            group by payctype
            where localRPayTrans.PayPeriod == rPayPeriod;

        return #headerCells + #footerCells + #bodyCells * int642int(localRPayTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                QueryRun = this.initQueryRun();
                rPayPeriod = endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPayTrans)), fieldNum(RPayTrans, payPeriod), queryValue(rPayPeriod));
        findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPayTable)), fieldNum(RPayTable, PayChargeType), queryValue(args.parmEnum()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP755";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_ChargeType               report = new RPayReport_ChargeType();

        report.parmArgs(_args);
        report.init();
        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>