<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>CustVendCreatePaymJournalBillDraw_Cust</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class CustVendCreatePaymJournalBillDraw_Cust extends CustVendCreatePaymJournalBill_Cust implements BatchRetryable
{
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        negInstStatus
    #ENDMACRO
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    /// Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #ISOCountryRegionCodes

        super();

        dialogDueBillsOnly.visible(false);
        dialogLackDate.visible(false);

        dialogNegInstStatus.active(false);

        // Italian only feature so dialog only needed then
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            dialog.curFormGroup(dialogGroupDateOfPayment.formGroup());
            dialogUseFutureDueDate.visible(true);
        }
        return dialog;
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
      </Method>
      <Method>
        <Name>runProposalEditForm</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Runs the form to modify the generated payment proposal.
    /// </summary>
    public void runProposalEditForm()
    {
        CustVendPaymProposalEditForm::newPaymProposal(paymProposal, true, paymProposal.ledgerJournalId(), paymProposal.ledgerJournalType(), paymProposal.moduleCustVend()).run();
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container base;
        boolean ret;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS75712";
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>