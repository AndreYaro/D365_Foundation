<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowTimeSeriesRefreshServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowTimeSeriesRefreshServiceController extends SysOperationServiceController implements BatchRetryable
{
    private const int PeriodicIntervalToExecuteLargeWindow = 4;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super(classStr(CashFlowTimeSeriesService), methodStr(CashFlowTimeSeriesService, refreshAggregates));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CashFlowTimeSeriesRefreshServiceController construct()
    {
        CashFlowTimeSeriesRefreshServiceController controller = new CashFlowTimeSeriesRefreshServiceController();

        controller.parmShowDialog(false);
        controller.parmLoadFromSysLastValue(false);
        controller.parmExecutionMode(SysOperationExecutionMode::ScheduledBatch);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    internal static void createBatchJob()
    {
        if (!CashFlowTimeSeriesRefreshServiceController::doesBatchJobExist())
        {
            CashFlowTimeSeriesRefreshServiceController controller = CashFlowTimeSeriesRefreshServiceController::construct();

            BatchInfo batchInfo = controller.batchInfo();

            SysRecurrenceData recurrenceData = controller.getRecurrenceData();
            batchInfo.parmRecurrenceData(recurrenceData);

            controller.doBatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBatchJobRecurrence</Name>
				<Source><![CDATA[
    internal static void endBatchJobRecurrence()
    {
        if (CashFlowTimeSeriesRefreshServiceController::doesBatchJobExist())
        {
            BatchJob batchJob = CashFlowTimeSeriesRefreshServiceController::findBatchJob(true);

            if (batchJob
                && batchJob.RecurrenceData
                && SysRecurrence::nextTime(batchJob.RecurrenceData) != 0)
            {
                batchJob.RecurrenceData = SysRecurrence::setRecurrenceEndAfter(batchJob.RecurrenceData, 1);

                ttsbegin;
                batchJob.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBatchJobExist</Name>
				<Source><![CDATA[
    private static boolean doesBatchJobExist()
    {
        BatchJob batchJob = CashFlowTimeSeriesRefreshServiceController::findBatchJob();

        return batchJob != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchJob</Name>
				<Source><![CDATA[
    private static BatchJob findBatchJob(boolean _forUpdate = false)
    {
        Batch batch;
        BatchJob batchJob;

        if (_forUpdate)
        {
            batchJob.selectForUpdate(true);
        }

        select firstonly batchJob
            where batchJob.DataPartition == getCurrentPartition()
                && (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
            exists join batch
                where batch.ClassNumber == classNum(CashFlowTImeSeriesRefreshServiceController)
                    && batch.DataPartition == batchJob.DataPartition
                    && batch.BatchJobId == batchJob.RecId;

        return batchJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        // For this process, we initialize the contract at runtime.
        CashFlowTimeSeriesDataContract contract = this.getDataContractObject() as CashFlowTimeSeriesDataContract;

        if (this.shouldProcessLargerWindow())
        {
            contract.initializeForRollingWindowFromToday(CashflowInsightsParameterConstants::RollingWindowWeeksLarge);
        }
        else
        {
            contract.initializeForRollingWindowFromToday(CashflowInsightsParameterConstants::RollingWindowWeeksSmall);
        }

        guid runId = newGuid();

        CashFlowTimeSeriesAggregationRunHistory::insertHistoryRecord(
            runId,
            contract.parmStartDate(),
            contract.parmEndDate(),
            CashFlowTimeSeriesAggregationRunType::IncrementalRefresh,
            CashFlowTimeSeriesAggregationRunStartEnd::Start,
            DateTimeUtil::utcNow());

        super();

        CashFlowTimeSeriesAggregationRunHistory::insertHistoryRecord(
            runId,
            contract.parmStartDate(),
            contract.parmEndDate(),
            CashFlowTimeSeriesAggregationRunType::IncrementalRefresh,
            CashFlowTimeSeriesAggregationRunStartEnd::End,
            DateTimeUtil::utcNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessLargerWindow</Name>
				<Source><![CDATA[
    private boolean shouldProcessLargerWindow()
    {
        boolean shouldExecuteLargeWindow;

        BatchHeader header = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        RecId batchJobId = header.parmBatchHeaderId();

        int recurrenceCount = BatchJobRecurrenceCount::FindOrCreateRecurrenceCount(batchJobId);

        // Every Nth recurrence we should process on the larger window to include any transactions > RollingWindowWeeksSmall.
        if (recurrenceCount mod PeriodicIntervalToExecuteLargeWindow == 0)
        {
            shouldExecuteLargeWindow = true;
        }
        
        return shouldExecuteLargeWindow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:CashFlowTimeSeriesRefreshControllerCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceData</Name>
				<Source><![CDATA[
    private SysRecurrenceData getRecurrenceData()
    {
        // execute every Monday, Wednesday, Friday, Sunday at 12:24 AM (user timezone)
        
        // Start a few days from now.
        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        const int DaysInFuture = 2;
        date startDate = today + DaysInFuture;

        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        recurrenceData = SysRecurrence::setRecurrenceStartDateTime(recurrenceData, DateTimeUtil::newDateTime(startDate, str2Time('00:24:00'), DateTimeUtil::getUserPreferredTimeZone()));
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Week);

        /*
        Recurrence uses a bitmask to represent the days of the week.
        | Day       | Binary    | Hex  |
        | --------- | --------- | ---  |
        | Monday    | 0b0000001 | 0x1  |
        | Wednesday | 0b0000100 | 0x4  |
        | Friday    | 0b0010000 | 0x10 |
        | Sunday    | 0b1000000 | 0x40 |
        */
        const int RecurrenceDataIntervalIndex = 8;
        int WeeklyRecurrence = 1;
        int RecurrenceWeeklyBitMask = 0x1 | 0x4 | 0x10 | 0x40;

        recurrenceData = conpoke(recurrenceData, RecurrenceDataIntervalIndex, [WeeklyRecurrence, RecurrenceWeeklyBitMask]);

        return recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>