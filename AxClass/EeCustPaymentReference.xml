<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EeCustPaymentReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EeCustPaymentReference</c> class represents Customer payment reference generation tool
/// </summary>
public class EeCustPaymentReference extends RunBase
{
    private const str FeatureReference = 'EE-00015';

    private DialogRunbase dialogRunbase;
    private DialogField dialogCreatePaymRef;
    private DialogField dialogDeletePaymRef;
    private QueryRun queryRun;
    public NoYes createPaymRef;
    public NoYes deletePaymRef;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        CustTable custTable;

        if (!CustParameters::numRefCustPaymentReference_EE())
        {
            throw error("@AccountsReceivable:NumberSequencePaymReferenceNotSetup");
        }

        queryRun.setRecord(custTable);

        ttsbegin;
        while (queryRun.next())
        {
            custTable = queryRun.get(tableNum(CustTable));
            custTable.selectForUpdate(true);

            if (deletePaymRef && custTable.PaymentReference_EE)
            {
                info(strfmt("@AccountsReceivable:PaymRefNumberRemoved", custTable.PaymentReference_EE, custTable.AccountNum));
                custTable.PaymentReference_EE = '';
                custTable.update();
            }
            if (createPaymRef && !custTable.PaymentReference_EE)
            {
                if (this.setPaymentReference(custTable))
                {
                    custTable.update();
                    info(strfmt("@AccountsReceivable:PaymRefNumberGenerated", custTable.PaymentReference_EE, custTable.AccountNum));
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the corresponding reference number to passed Customer
    /// </summary>
    /// <param name="_custTable">
    /// Customer the reference number to be set
    /// </param>
    /// <returns>
    /// true if reference number is successfully set, otherwise false
    /// </returns>
    public boolean setPaymentReference(CustTable _custTable)
    {
        NumberSeq   num;
        CustTable   custTable;
        #isoCountryRegionCodes

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE]))
        {
            return true;
        }

        if (!_custTable.PaymentReference_EE)
        {
            num = NumberSeq::newGetNum(CustParameters::numRefCustPaymentReference_EE(), true);
            _custTable.PaymentReference_EE = EeReferenceNumber::genRefNum(num.num());
            num.used();
        }

        if (_custTable.PaymentReference_EE)
        {
            if (!EeReferenceNumber::checkRefNum(_custTable.PaymentReference_EE))
            {
                return checkFailed("@AccountsReceivable:ReferenceNumberDifferent");
            }

            select firstonly RecId from custTable
                where custTable.PaymentReference_EE == _custTable.PaymentReference_EE
                    && custTable.RecId != _custTable.RecId;
            if (custTable)
            {
                return checkFailed(strfmt("@AccountsReceivable:CustReferenceNumberExists", _custTable.PaymentReference_EE));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the dialog form that is called by the class.
    /// </summary>
    /// <returns>
    /// The dialog form object that is constructed by this method.
    /// </returns>
    public Object dialog()
    {
        dialogRunbase = super();
        dialogRunbase.caption("@AccountsReceivable:UpdatePaymRefNumbers");

        dialogDeletePaymRef = dialogRunbase.addFieldValue(extendedtypestr(NoYesId), deletePaymRef, "@AccountsReceivable:DeletePaymRefNumbers", "@AccountsReceivable:DeletePaymRefNumbersCust");
        dialogCreatePaymRef = dialogRunbase.addFieldValue(extendedtypestr(NoYesId), createPaymRef, "@AccountsReceivable:CreatePaymRefNumbers", "@AccountsReceivable:CreatePaymRefNumbersCust");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        createPaymRef = dialogCreatePaymRef.value();
        deletePaymRef = dialogDeletePaymRef.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;

        query = new Query();
        queryBuildDataSource = query.addDataSource(TableNum(CustTable));
        queryBuildRange = queryBuildDataSource.addRange(FieldNum(CustTable, AccountNum));
        queryBuildRange = queryBuildDataSource.addRange(FieldNum(CustTable, CustGroup));
        queryBuildDataSource.addSortField(FieldNum(CustTable, DlvMode));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EeCustPaymentReference paymentReference = new EeCustPaymentReference();

        if (paymentReference.prompt())
        {
            paymentReference.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>