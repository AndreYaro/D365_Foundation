<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyPostSales extends InterCompanyPost
{
    PurchFormLetter purchFormLetter;
    SalesFormLetter salesFormLetter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditRemaining</Name>
				<Source><![CDATA[
    NoYesId creditRemaining()
    {
        PurchFormLetter localPurchFormLetter = this.fromFormLetter() as PurchFormLetter;
        return localPurchFormLetter.purchParmUpdate().CreditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    void formLetterUpdate()
    {
        SalesTable      localSalesTable;
        MapEnumerator   mapSalesTableEnumerator = interCompanyMapRecord.map().getEnumerator();
        List            confirmedSalesTableList = new List(Types::Record);

        // SO markup allocation.
        while (mapSalesTableEnumerator.moveNext())
        {
            localSalesTable = mapSalesTableEnumerator.currentValue();

            if (localSalesTable.isInterCompanyOrder() && localSalesTable.InterCompanyDirectDelivery && !this.fromFormLetter().proforma())
            {
                this.interCompanyMarkupAllocationForSO(localSalesTable, interCompanyJour.DocumentNum, this.toFormLetter().transDate());
                localSalesTable.reread();
            }
        }

        super();

        if (this.fromFormLetter().proforma())
        {
            formletterPrintout = fromFormLetter.printFormLetter();
            usePrintManagement = false;
        }

        SalesFormLetter localSalesFormLetter = this.initializeSalesFormLetterForUpdate();
        localSalesFormLetter.update(null,
                                   interCompanyJour.DocumentDate,
                                   this.salesUpdate(),
                                   SalesParameters::find().SummaryUpdateBy,
                                   this.fromFormLetter().proforma(),
                                   formletterPrintout,
                                   usePrintManagement,
                                   this.creditRemaining(),
                                   this.conTmpFrmVirtual());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesFormLetterForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesFormLetter</c> object.
    /// </summary>
    /// <returns>An instance of <c>SalesFormLetter</c> object.</returns>
    protected SalesFormLetter initializeSalesFormLetterForUpdate()
    {
        SalesFormLetter localSalesFormLetter = this.toFormLetter() as SalesFormLetter;
        localSalesFormLetter.parmRelatedJournal(interCompanyJour);
        localSalesFormLetter.interCompanyPosted(NoYes::Yes);
        // set reArrangeNow value from fromFormletter
        localSalesFormLetter.reArrangeNow(purchFormLetter.sumBy() != AccountOrder::None);

        return localSalesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFormLetter</Name>
				<Source><![CDATA[
    FormLetterServiceController fromFormLetter()
    {
        purchFormLetter = fromFormLetter;
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUpdate</Name>
				<Source><![CDATA[
    protected SalesUpdate salesUpdate()
    {
        SalesUpdate     salesUpdate = SalesUpdate::All;

        if (transferFromJournal)
        {
            salesUpdate = SalesUpdate::PackingSlip;
        }
        return salesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetter</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetter()
    {
        salesFormLetter = toFormLetter;
        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetterNew</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetterNew()
    {
        toFormLetter = SalesFormLetter::construct(this.documentStatus());
        return toFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTable</Name>
				<Source><![CDATA[
    Common toTable(Common _common = salesTable)
    {
        salesTable = _common;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InterCompanyPostSales construct(FormLetterContract _formLetter,
                                           Common             _record       = null,
                                           RecordSortedList   _journalList  = null,
                                           boolean            _intercompany = false,
                                           boolean            _doOriginal   = false)
    {
        if (_doOriginal)
        {
            return new InterCompanyPostSales_InvoiceFromSales(_formLetter,_record,_journalList,_intercompany);
        }
        else
        {
            DocumentStatusFactoryAttribute attr = new DocumentStatusFactoryAttribute(_formLetter.getDocumentStatus());
            SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_formLetter, _record, _journalList, _intercompany);
            InterCompanyPostSales handler = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(InterCompanyPostSales), attr, instantiation) as InterCompanyPostSales;

            if (classIdGet(handler) == classNum(InterCompanyPostSales))
            {
                throw error(strfmt("@SYS19306",funcname()));
            }

            return handler;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    static void post(FormLetterContract _formLetter   = null,
                     Common             _record       = null,
                     RecordSortedList   _journalList  = null,
                     boolean            _intercompany = false,
                     boolean            _doOriginal   = false)
    {
        InterCompanyPostSales interCompanyPostSales = InterCompanyPostSales::construct(_formLetter,_record,_journalList,_intercompany,_doOriginal);      
        if (interCompanyPostSales)
        {
            if (_record is VendPackingSlipJour
                && InterCompanyVendPackingSlipJourCheckFlight::instance().isEnabled())
            {
                PurchFormLetter_PackingSlip fromFormLetter = interCompanyPostSales.fromFormLetter() as PurchFormLetter_PackingSlip;
            
                if (fromFormLetter && fromFormLetter.isVersioningCorrectionOrCancel()
                    && _record.RecId != fromFormLetter.parmCallerTable().RecId
                    && _record.TableId == fromFormLetter.parmCallerTable().TableId)
                {
                    fromFormLetter.parmCallerTable(_record);
                }
            }
        
            interCompanyPostSales.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForSO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    The sales order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the document that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the document that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForSO(SalesTable _salesTable, Num _docNum, TransDate _transDate)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>