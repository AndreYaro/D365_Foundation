<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineMarkupTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  TaxModelDocLine for MarkupTrans
/// </summary>
public class TaxModelDocLineMarkupTransImpl_IN extends TaxModelDocLineBaseImpl_IN
    implements TaxModelGSTTaxable_IN
{
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Initialize TaxModelDocLineMarkupTransImpl_IN like this for MarkupTrans of sales invoice:
    //
    // if (isSalesInvoice)
    // {
    //    // bind markupTrans from salesLine to salesParmLine
    //    markupTrans.TransTableId = salesParmLine.SourceTableId;
    //    markupTrans.TransRecId   = salesParmLine.SourceRecId;
    // }
    // taxModelTaxableOfMarkupTrans = TaxModelDocLineFactory_IN::newTaxModelDocLine(markupTrans);
    // taxModelTaxableOfMarkupTrans.getTransDate();
    // taxModelTaxableOfMarkupTrans.getLineAmount();
    //
    // Why this is required?
    // MarkupTrans.TransTableId/TransRecId of sales invoice are bound to SalesLine table, so getTransDate() returns created date of sales order and getLineAmount() always returns markup amount for full sales invoice only
    // But expected results are getTransDate() returns invoice date, and getLineAmount() can support both full and partial sales invoice.
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MarkupTrans                 markupTrans;
    MarkupTrans_IN              markupTransIN;
    SalesPurchJournalLine       sourceTransLine;
    TaxModelTaxable_IN          taxModelTaxableSourceTransLine;
    TaxModelDocLineGSTHelper_IN gstHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        if (markupTrans.TransTableId == tableNum(VendInvoiceInfoLine)
            && markupTrans.OrigRecId == 0)
        {
            // Tax information should be editable for the new charges on vendor invoice.
            return NoYes::Yes;
        }

        return this.getReferenceTaxModelDocLine().canModifyTaxInformation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return this.getLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption country region id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption country region id.
    /// </returns>
    public LogisticsAddressCountryRegionId getConsumptionCountryRegionId()
    {
        return taxModelTaxableSourceTransLine.getConsumptionCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption city name.
    /// </returns>
    public LogisticsAddressCityName getConsumptionCityName()
    {
        return taxModelTaxableSourceTransLine.getConsumptionCityName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    public LogisticsAddressStateId getConsumptionStateId()
    {
        return taxModelTaxableSourceTransLine.getConsumptionStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption zip code id.
    /// </returns>
    public LogisticsAddressZipCodeId getConsumptionZipCodeId()
    {
        return taxModelTaxableSourceTransLine.getConsumptionZipCodeId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin country region id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin country region id.
    /// </returns>
    public LogisticsAddressCountryRegionId getOriginCountryRegionId()
    {
        return taxModelTaxableSourceTransLine.getOriginCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin city name.
    /// </returns>
    public LogisticsAddressCityName getOriginCityName()
    {
        return taxModelTaxableSourceTransLine.getOriginCityName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin state id.
    /// </returns>
    public LogisticsAddressStateId getOriginStateId()
    {
        return taxModelTaxableSourceTransLine.getOriginStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin zip code id.
    /// </returns>
    public LogisticsAddressZipCodeId getOriginZipCodeId()
    {
        return taxModelTaxableSourceTransLine.getOriginZipCodeId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return this.getReferenceTaxModelDocLine().getCustTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTHSNCodeRefRecId()
    {
        return gstHelper.getGSTHSNCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>HSNCodeTable_IN</c>
    /// </returns>
    public HSNCodeTable_IN getGSTHSNCodeTable()
    {
        return gstHelper.getGSTHSNCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTITCCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ITC category of the transaction line.
    /// </summary>
    /// <returns>
    /// The ITC category.
    /// </returns>
    public ITCCategory_IN getGSTITCCategory()
    {
        return gstHelper.getGSTITCCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTNonBusinessUsagePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Non-business usage perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the GST Non-business usage part.
    /// </returns>
    public Percent getGSTNonBusinessUsagePercent()
    {
        return gstHelper.getGSTNonBusinessUsagePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getGSTRegistrationNumber()
    {
        return gstHelper.getGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTRegistrationRefRecId()
    {
        return gstHelper.getGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Scrap of the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Scrap for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId getGSTScrap()
    {
        return gstHelper.getGSTScrap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Service accounting code.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTServiceAccountingCodeRefRecId()
    {
        return gstHelper.getGSTServiceAccountingCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Service accounting code table.
    /// </summary>
    /// <returns>
    /// The <c>ServiceAccountingCodeTable_IN</c>
    /// </returns>
    public ServiceAccountingCodeTable_IN getGSTServiceAccountingCodeTable()
    {
        return gstHelper.getGSTServiceAccountingCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service category of the transaction line.
    /// </summary>
    /// <returns>
    /// The service category.
    /// </returns>
    public ServiceCategory_IN getGSTServiceCategory()
    {
        return gstHelper.getGSTServiceCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return this.getReferenceTaxModelDocLine().getInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    public InventTransId getInventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    public LineAmount getLineAmount()
    {
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Initialize TaxModelDocLineMarkupTransImpl_IN like this for MarkupTrans of sales invoice:
        //
        // if (isSalesInvoice)
        // {
        //    // bind markupTrans from salesLine to salesParmLine
        //    markupTrans.TransTableId = salesParmLine.SourceTableId;
        //    markupTrans.TransRecId   = salesParmLine.SourceRecId;
        // }
        // taxModelTaxableOfMarkupTrans = TaxModelDocLineFactory_IN::newTaxModelDocLine(markupTrans);
        // taxModelTaxableOfMarkupTrans.getTransDate();
        // taxModelTaxableOfMarkupTrans.getLineAmount();
        //
        // Why this is required?
        // MarkupTrans.TransTableId/TransRecId of sales invoice are bound to SalesLine table, so getTransDate() returns created date of sales order and getLineAmount() always returns markup amount for full sales invoice only
        // But expected results are getTransDate() returns invoice date, and getLineAmount() can support both full and partial sales invoice.
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        SalesLine salesLine;
        PurchLine purchLine;
        AmountCur intercompanyAmount;
        TaxModelTaxable taxModelTaxable;

        SalesPurchJournalLine common = SalesPurchJournalLine::findRecId(markupTrans.TransTableId, markupTrans.TransRecId);

        if (common)
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(common);
        }

        if (markupTrans.Posted)
        {
            return markupTrans.CalculatedAmount;
        }
        else
        {
            if (markupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent)
            {
                switch (markupTrans.TransTableId)
                {
                    case tableNum(PurchLine):
                        purchLine           = PurchLine::findRecId(markupTrans.TransRecId);
                        intercompanyAmount  = purchLine.interCompanyLineAmount(purchLine.PurchQty, this.getReferenceTaxModelDocLine().getTransDate());
                        break;

                    case tableNum(SalesLine):
                        salesLine           = SalesLine::findRecId(markupTrans.TransRecId);
                        intercompanyAmount  = salesLine.interCompanyLineAmount(salesLine.SalesQty, this.getReferenceTaxModelDocLine().getTransDate());
                        break;

                    default:
                        intercompanyAmount = 0;
                        break;
                }
            }

            if (sourceTransLine.SourceTableId == tableNum(ProjProposalItem))
            {
                ProjProposalItem projProposalItem = ProjProposalItem::findRecId(sourceTransLine.SourceRecId);
                select firstonly lineAmount from salesLine where salesLine.InventTransId  == projProposalItem.InventTransId;
            }

            Qty quantity;
            if (Markup::isProratedMarkupTrans(markupTrans))
            {
                quantity = taxModelTaxableSourceTransLine ? taxModelTaxableSourceTransLine.getQuantity() : 0;
            }
            else
            {
                quantity = taxModelTaxable ? taxModelTaxable.getQuantity() : 0;
            }

            return Markup::calcMarkupAmount(
                markupTrans,
                quantity,
                sourceTransLine.SourceTableId == tableNum(ProjProposalItem) ? salesLine.LineAmount : sourceTransLine.LineAmount,
                intercompanyAmount,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return this.getLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party GST Registration Number.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getPartyGSTRegistrationNumber()
    {
        return gstHelper.getPartyGSTRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The party <c>RefRecId</c>
    /// </returns>
    public RefRecId getPartyGSTRegistrationRefRecId()
    {
        return gstHelper.getPartyGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        LogisticsPostalAddress  logisticsPostalAddress;

        transTaxInformation = this.getTransTaxInfomation();

        if (transTaxInformation.VendorLocation)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformation.VendorLocation);
        }
        else if (transTaxInformation.CustomerLocation)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformation.CustomerLocation);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        TransTaxInformation  transTaxInformationLoc;

        transTaxInformationLoc = this.getTransTaxInfomation();

        if (transTaxInformationLoc.CustomerTaxInformation)
        {
            return TaxInformation_IN::find(transTaxInformationLoc.CustomerTaxInformation);
        }
        else if (transTaxInformationLoc.VendorTaxInformation)
        {
            return TaxInformation_IN::find(transTaxInformationLoc.VendorTaxInformation);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    public NoYes getIsDeemedExport()
    {
        return gstHelper.getIsDeemedExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    public NoYes getIsSEZParty()
    {
        return gstHelper.getIsSEZParty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax document purpose.
    /// </summary>
    /// <returns>The tax document purpose.</returns>
    public TaxDocumentPurpose getPurpose()
    {
        return this.getReferenceTaxModelDocLine().getPurpose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return taxModelTaxableSourceTransLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return this.getReferenceTaxModelDocLine().getTaxDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    public TaxModuleType getTaxModuleType()
    {
        TaxModuleType ret;

        switch (markupTrans.TransTableId)
        {
            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoSubTable):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(VendInvoiceJour):
            case tableNum(VendInvoiceTrans):
                ret = TaxModuleType::PurchInvoice;
                break;

            case tableNum(PurchTable):
            case tableNum(PurchLine):
                ret = TaxModuleType::Purch;
                break;

            case tableNum(CustInvoiceTable):
            case tableNum(CustInvoiceLine):
                ret = TaxModuleType::FreeTxtInvoice;
                break;

            case tableNum(CustInvoiceJour):
            if (CustInvoiceJour::findRecId(markupTrans.TransRecId).salesTable())
                {
                    ret = TaxModuleType::SalesInvoice;
                }
                else
                {
                    ret = TaxModuleType::FreeTxtInvoice;
                }
                break;

            case tableNum(CustInvoiceTrans):
            if (CustInvoiceTrans::findRecId(markupTrans.TransRecId).salesLine())
                {
                    ret = TaxModuleType::SalesInvoice;
                }
                else
                {
                    ret = TaxModuleType::FreeTxtInvoice;
                }
                break;

            case tableNum(SalesTable):
            case tableNum(SalesLine):
                ret = TaxModuleType::SalesInvoice;
                break;
            case tableNum(ProjInvoiceItem):
                ret = TaxModuleType::Project;
                break;
            default:
                TaxModelTaxable referenceTaxModelDocLine = this.getReferenceTaxModelDocLine();
                if (referenceTaxModelDocLine)
                {
                    ret = referenceTaxModelDocLine.getTaxModuleType();
                }
                else
                {
                    // Missing implementation
                    throw error("@GLS110454");
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Initialize TaxModelDocLineMarkupTransImpl_IN like this for MarkupTrans of sales invoice:
        //
        // if (isSalesInvoice)
        // {
        //    // bind markupTrans from salesLine to salesParmLine
        //    markupTrans.TransTableId = salesParmLine.SourceTableId;
        //    markupTrans.TransRecId   = salesParmLine.SourceRecId;
        // }
        // taxModelTaxableOfMarkupTrans = TaxModelDocLineFactory_IN::newTaxModelDocLine(markupTrans);
        // taxModelTaxableOfMarkupTrans.getTransDate();
        // taxModelTaxableOfMarkupTrans.getLineAmount();
        //
        // Why this is required?
        // MarkupTrans.TransTableId/TransRecId of sales invoice are bound to SalesLine table, so getTransDate() returns created date of sales order and getLineAmount() always returns markup amount for full sales invoice only
        // But expected results are getTransDate() returns invoice date, and getLineAmount() can support both full and partial sales invoice.
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        if (markupTrans.Posted)
        {
            return markupTrans.TransDate;
        }
        else
        {
            return this.getReferenceTaxModelDocLine().getTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return this.getReferenceTaxModelDocLine().getVendTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        ProjItemTransSale   projItemTransSale;
        ProjInvoiceItem     projInvoiceItem;
        ProjProposalItem    projProposalItem;

        markupTrans = _documentLineMap;
        markupTransIN = markupTrans.markupTrans_IN();

        if (markupTrans.TransTableId == tableNum(ProjInvoiceItem))
        {
            select firstOnly RecId from projItemTransSale
            exists join projInvoiceItem
                where projInvoiceItem.ProjTransId == projItemTransSale.ProjTransId
                    && projInvoiceItem.RecId == markupTrans.TransRecId;

            sourceTransLine = SalesPurchJournalLine::findRecId(
            tableNum(ProjItemTransSale),
            projItemTransSale.RecId);
        }
        else if (markupTrans.TransTableId == tableNum(ProjProposalItem))
        {
            select firstOnly RecId from projProposalItem
                where projProposalItem.RecId == markupTrans.TransRecId;

            sourceTransLine = SalesPurchJournalLine::findRecId(
            tableNum(ProjProposalItem),
            projProposalItem.RecId);
        }
        else
        {
            sourceTransLine = SalesPurchJournalLine::findRecId(markupTrans.TransTableId, markupTrans.TransRecId);
        }

        taxModelTaxableSourceTransLine  = TaxModelDocLineFactory::newTaxModelDocLine(sourceTransLine) as TaxModelTaxable_IN;
        markupTrans.reread();

        if (taxModelTaxableSourceTransLine)
        {
            super(_documentLineMap);
            gstHelper = new TaxModelDocLineGSTHelper_IN();
            gstHelper.setDocumentLine(_documentLineMap);
            gstHelper.setTaxModelTaxable(this);
            gstHelper.setTaxModelGSTTaxable(this);
            gstHelper.setTransTaxInformation(transTaxInformation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if it is the inter state transaction.
    /// </summary>
    /// <returns>
    /// True if it is not inter state transaction; otherwise, false.
    /// </returns>
    public NoYes IsInterStateTransaction()
    {
        return this.getReferenceTaxModelDocLine().IsInterStateTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should enable accounting or not.
    /// </summary>
    /// <returns>
    /// True if the document line should enable accounting; otherwise, false.
    /// </returns>
    public NoYes shouldEnableAccounting()
    {
        return this.getReferenceTaxModelDocLine().shouldEnableAccounting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return this.getReferenceTaxModelDocLine().shouldPostTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipForTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should skip this line for tax calculation.
    /// </summary>
    /// <returns>True Yes if tax should be skipped for calculation, otherwise, return false.</returns>
    public boolean shouldSkipForTaxCalculation()
    {
        if (markupTrans.CustomsAssessableValue_IN || markupTrans.NotionalCharges_IN)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    public RefRecId getTaxLocationRefRecId()
    {
        return this.getReferenceTaxModelDocLine().getTaxLocationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    public Qty getQuantity()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return markupTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return markupTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        if (this.getReferenceTaxModelDocLine() is TaxModelDocLineBaseImpl_IN)
        {
            TaxModelDocLineBaseImpl_IN taxModelDocLineBaseImplIN = this.getReferenceTaxModelDocLine();
            if (taxModelDocLineBaseImplIN)
            {
                return taxModelDocLineBaseImplIN.isSupportCalcTaxInAccountingCurrency();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>.
    /// </returns>
    /// <remarks>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from the source line TransTaxInformation.CompanyLocation for charge.
    /// </remarks>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddressTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>