<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetExpansion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BudgetExpansion
{
    BudgetMap           parentBudget;

    LedgerAllocatePct   accummulatedPercentProportion;
    UnitQty             accummulatedBudgetQuantity;
    InventQty           accummulatedInventQuantity;
    PdsCWInventQty      accummulatedCWQuantity;

    private readonly boolean forecastOptimizeHasRelatedForecastInventFlightEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInserted</Name>
				<Source><![CDATA[
    boolean canBeInserted(BudgetMap testBudget)
    {
        return testBudget.StartDate >= parentBudget.StartDate    &&
               ((parentBudget.EndDate && testBudget.StartDate <= parentBudget.EndDate
                ) ||
                 ! parentBudget.EndDate
               )                                                 &&
               this.canBeInsertedTestFields(testBudget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInsertedTestFields</Name>
				<Source><![CDATA[
    boolean canBeInsertedTestFields(BudgetMap testBudget)
    {
        boolean ret;

        if (parentBudget.TableId == tablenum(ProjForecastCost))
        {
            ret = (testBudget.Qty != 0);
        }
        else
        {
            ret = (testBudget.Amount || testBudget.Qty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    //
    // Creates budget expansion records for the parent budget.
    //
    void create()
    {
        BudgetMap               newBudget;
        LedgerAllocateTrans     allocateTrans;
        Futures                 futures;
        TransDate               tmpDate;
        ;

        if (parentBudget.ExpandId != 0)
        {
            return;
        }

        ForecastSales localForecastSales;
        boolean existRelatedForecastInvent;

        if (parentBudget.TableId == tableNum(ForecastSales))
        {
            localForecastSales = parentBudget;
            existRelatedForecastInvent = this.hasRelatedForecastInvent(localForecastSales);
        }

        parentBudget.BudgetMap::deleteExpansion();

        // re-generate forecastInvent record after all related records are deleted
        if (localForecastSales
        &&  existRelatedForecastInvent
        &&  !this.hasRelatedForecastInvent(localForecastSales)
        &&  localForecastSales.inventTable().isStocked())
        {
            ForecastAllocate budgetAllocate = ForecastAllocate::construct(parentBudget);
            budgetAllocate.create();
        }

        if (!this.mustBeExploded())
        {
            return;
        }

        newBudget                   = parentBudget.data();
        newBudget.AllocateMethod    = BudgetAllocateMethod::None;
        newBudget.Key               = '';
        newBudget.FreqCode          = PeriodUnit::Day;
        newBudget.Freq              = 0;
        newBudget.EndDate           = dateNull();
        newBudget.ExpandId          = parentBudget.RecId;

        accummulatedPercentProportion   = 0;
        accummulatedBudgetQuantity      = 0;
        accummulatedInventQuantity      = 0;
        accummulatedCWQuantity          = 0;

        if (this.mustKeyBeExploded())
        {
            while select allocateTrans
                index KeyIdx
                where allocateTrans.Key == parentBudget.Key
            {
                accummulatedPercentProportion += allocateTrans.PctProportion;

                newBudget.StartDate = allocateTrans.startDate(parentBudget);
                newBudget.DefaultDimension = newBudget.copyDimension(allocateTrans.DefaultDimension);
                newBudget.DefaultDimension = newBudget.mergeDimension(parentBudget.DefaultDimension);

                this.setFields(newBudget,allocateTrans);

                accummulatedBudgetQuantity += newBudget.Qty;
                if (parentBudget.TableId == tableNum(ForecastPurch) || parentBudget.TableId == tableNum(ForecastSales))
                {
                    accummulatedInventQuantity += newBudget.inventQty;
                    accummulatedCWQuantity     += newBudget.PdsCWQty;
                }

                if (this.canBeInserted(newBudget))
                {
                    this.setTransId(newBudget);
                    newBudget.insert();
                }
            }
        }
        else
        {
            if (this.mustPeriodBeExploded())
            {
                futures = Futures::construct(parentBudget.StartDate,parentBudget.Freq,parentBudget.FreqCode);

                tmpDate = parentBudget.StartDate;
                while (tmpDate <= parentBudget.EndDate)
                {
                    newBudget.StartDate = tmpDate;

                    if (this.canBeInserted(newBudget))
                    {
                        this.setTransId(newBudget);
                        newBudget.insert();
                    }

                    tmpDate = futures.next();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeExploded</Name>
				<Source><![CDATA[
    boolean mustBeExploded()
    {
        return (! parentBudget.ExpandId               &&
                (this.mustKeyBeExploded()       ||
                 this.mustPeriodBeExploded()
                )
               );
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustKeyBeExploded</Name>
				<Source><![CDATA[
    boolean mustKeyBeExploded()
    {
        return parentBudget.AllocateMethod == BudgetAllocateMethod::Key   &&
               parentBudget.Key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPeriodBeExploded</Name>
				<Source><![CDATA[
    boolean mustPeriodBeExploded()
    {
        return (parentBudget.AllocateMethod == BudgetAllocateMethod::Period   &&
                parentBudget.Freq            > 0                              &&
                parentBudget.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(BudgetMap _budget)
    {
        parentBudget = _budget;
        forecastOptimizeHasRelatedForecastInventFlightEnabled = ForecastOptimizeHasRelatedForecastInventFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFields</Name>
				<Source><![CDATA[
    void setFields(BudgetMap newBudget, LedgerAllocateTrans allocateTrans)
    {
        if (parentBudget.TableId != tablenum(ProjForecastCost))
        {
            newBudget.Amount = CurrencyExchangeHelper::amount(parentBudget.Amount * allocateTrans.PctProportion / 100, parentBudget.Currency);
        }

        newBudget.Qty = parentBudget.Qty * allocateTrans.PctProportion/100;

        if (parentBudget.TableId == tableNum(ForecastPurch) || parentBudget.TableId == tableNum(ForecastSales))
        {
            newBudget.PdsCWQty = PdsCatchWeight::cwQty(parentBudget.ItemId, newBudget.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransId</Name>
				<Source><![CDATA[
    void setTransId(BudgetMap _newBudget)
    {
        NumberSeq   numberSeq;
        
        // generate new TransId
        If (SysDictField::isFieldMapped(tableStr(BudgetMap), tableId2Name(parentBudget.TableId), fieldStr(BudgetMap, ProjId)))
        {
            if (parentBudget.TableId == tablenum(ProjForecastRevenue) || parentBudget.TableId == tablenum(ProjForecastCost) || (parentBudget.ProjId && parentBudget.TableId == tablenum(ForecastSales)))
            {
                numberSeq           = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
                _newBudget.TransId  = numberSeq.num();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BudgetExpansion construct(BudgetMap budget)
    {
        BudgetExpansion budgetExpansion;

        switch (budget.TableId)
        {
            case tablenum(ForecastSales), tablenum(ForecastPurch):
                budgetExpansion = new ForecastExpand(budget);
                break;

            case tablenum(ProjForecastEmpl):
                budgetExpansion = new BudgetExpansion(budget);
                break;

            case tablenum(ProjForecastCost):
                budgetExpansion = new BudgetExpansion(budget);
                break;

            case tablenum(ProjForecastRevenue):
                budgetExpansion = new BudgetExpansion(budget);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return budgetExpansion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRelatedForecastInvent</Name>
				<Source><![CDATA[
    boolean hasRelatedForecastInvent(ForecastSales _forecastSales)
    {
        ForecastInvent forecastInvent;
        ForecastSales  forecastSales;

        if (forecastOptimizeHasRelatedForecastInventFlightEnabled)
        {
            select forceselectorder firstonly RecId from forecastSales
                join forecastInvent
                    where forecastSales.RecId     == forecastInvent.TransRecId
                        && forecastSales.ExpandId == parentBudget.RecId;

            return forecastSales.RecId;
        }
        else
        {
            select firstonly RecId from forecastInvent
                exists join forecastSales
                    where forecastSales.RecId     == forecastInvent.TransRecId
                        && forecastSales.ExpandId == parentBudget.RecId;

            return forecastInvent.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>