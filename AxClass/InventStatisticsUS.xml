<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatisticsUS</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class InventStatisticsUS
{
    date            s_ReceiveDate;
    InventTransRefId    s_ReceiveNum;
    Qty             s_ReceiveQty;

    date            s_PurchDate;
    InvoiceId       s_PurchNum;
    Qty             s_PurchQty;
    Amount          s_PurchTotal;

    date            s_PosCorrDate;
    InventTransRefId    s_PosCorrNum;
    Qty             s_PosCorrQty;
    Amount          s_PosCorrTotal;

    date            s_SendDate;
    InvoiceId       s_SendNum;
    Qty             s_SendQty;
    Amount          s_SendTotal;

    date            s_SalesDate;
    InvoiceId       s_SalesNum;
    Qty             s_SalesQty;
    Amount          s_SalesTotal;

    date            s_NegCorrDate;
    InventTransRefId    s_NegCorrNum;
    Qty             s_NegCorrQty;
    Amount          s_NegCorrTotal;

    Qty             qtyAvailable;
    Qty             numOfNotAvailable;

    #localmacro.CurrentList
        s_ReceiveDate,
        s_ReceiveNum,
        s_ReceiveQty,

        s_PurchDate,
        s_PurchNum,
        s_PurchQty,
        s_PurchTotal,

        s_PosCorrDate,
        s_PosCorrNum,
        s_PosCorrQty,
        s_PosCorrTotal,

        s_SendDate,
        s_SendNum,
        s_SendQty,
        s_SendTotal,

        s_SalesDate,
        s_SalesNum,
        s_SalesQty,
        s_SalesTotal,

        s_NegCorrDate,
        s_NegCorrNum,
        s_NegCorrQty,
        s_NegCorrTotal,

        qtyAvailable,
        numOfNotAvailable
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStatistics</Name>
				<Source><![CDATA[
    public void calcStatistics(InventTable inventTable)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventTrans             inventTransSum;
        VendInvoiceTrans        vendInvoiceTrans;
        CustPackingSlipTrans    custPckSlpTrans;
        CustInvoiceTrans        custInvoiceTrans;

        s_ReceiveDate           = dateNull();
        s_ReceiveNum            = '';
        s_ReceiveQty             = 0;

        s_PurchDate             = dateNull();
        s_PurchNum              = '';
        s_PurchQty              = 0;
        s_PurchTotal             = 0;

        s_PosCorrDate           = dateNull();
        s_PosCorrNum            = '';
        s_PosCorrQty            = 0;
        s_PosCorrTotal          = 0;

        s_SendDate              = dateNull();
        s_SendNum               = '';
        s_SendQty               = 0;
        s_SendTotal             = 0;

        s_SalesDate             = dateNull();
        s_SalesNum              = '';
        s_SalesQty              = 0;
        s_SalesTotal             = 0;

        s_NegCorrDate           = dateNull();
        s_NegCorrNum            = '';
        s_NegCorrQty            = 0;
        s_NegCorrTotal          = 0;

        qtyAvailable            = 0;
        numOfNotAvailable       = 0;

        inventTrans.clear();

        select firstonly inventTransOrigin
            where inventTransOrigin.ItemId            == inventTable.ItemId           &&
                 (inventTransOrigin.ReferenceCategory == InventTransType::Production  ||
                  inventTransOrigin.ReferenceCategory == InventTransType::Purch       ||
                  inventTransOrigin.ReferenceCategory == InventTransType::BOMMain)
            join inventTrans
                order by DatePhysical desc
                where  inventTrans.InventTransOrigin == inventTransOrigin.RecId  &&
                      (inventTrans.StatusReceipt     == StatusReceipt::Purchased ||
                       inventTrans.StatusReceipt     == StatusReceipt::Received);

        if (inventTrans)
        {
            s_ReceiveDate   = inventTrans.DatePhysical;
            s_ReceiveNum    = inventTransOrigin.ReferenceId;
            select sum(Qty) from inventTransSum
                where inventTransSum.ItemId            == inventTransOrigin.ItemId &&
                      inventTransSum.InventTransOrigin == inventTransOrigin.RecId  &&
                      inventTransSum.DatePhysical      == inventTrans.DatePhysical &&
                      inventTransSum.PackingSlipId     == inventTrans.PackingSlipId;
            s_ReceiveQty    = inventTransSum.Qty;
        }

        select reverse firstonly vendInvoiceTrans
            order by InvoiceDate, InvoiceId
            where vendInvoiceTrans.ItemId   == inventTable.ItemId;

        if (vendInvoiceTrans)
        {
            s_PurchDate     = vendInvoiceTrans.InvoiceDate;
            s_PurchNum      = vendInvoiceTrans.InvoiceId;
            s_PurchQty      = vendInvoiceTrans.getInventQty();
            s_PurchTotal    = vendInvoiceTrans.vendInvoiceJour().amountMST(vendInvoiceTrans.LineAmount);
        }

        inventTrans.clear();

        select firstonly inventTransOrigin
            where inventTransOrigin.ItemId            == inventTable.ItemId &&
                  inventTransOrigin.ReferenceCategory == InventTransType::InventLossProfit
            join inventTrans
                order by DatePhysical desc
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                      inventTrans.Qty               >  0; // Receipt

        if (inventTrans)
        {
            s_PosCorrDate       = inventTrans.DatePhysical;
            s_PosCorrNum        = inventTransOrigin.ReferenceId;
            select sum(Qty), sum(CostAmountPosted) from inventTransSum
                where inventTransSum.InventTransOrigin == inventTransOrigin.RecId &&
                      inventTransSum.DatePhysical      == inventTrans.DatePhysical;

            s_PosCorrQty        = inventTransSum.Qty;
            s_PosCorrTotal      = inventTransSum.CostAmountPosted;
        }

        inventTrans.clear();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            select firstonly inventTransOrigin
                where inventTransOrigin.ItemId            == inventTable.ItemId &&
                      (inventTransOrigin.ReferenceCategory == InventTransType::Sales ||
                      inventTransOrigin.ReferenceCategory == InventTransType::Statement)
                join inventTrans
                    order by DatePhysical desc
                    where  inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          (inventTrans.StatusIssue       == StatusIssue::Sold       ||
                           inventTrans.StatusIssue       == StatusIssue::Deducted);
        }
        else
        {
            select firstonly inventTransOrigin
                where inventTransOrigin.ItemId            == inventTable.ItemId &&
                      inventTransOrigin.ReferenceCategory == InventTransType::Sales
                join inventTrans
                    order by DatePhysical desc
                    where  inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          (inventTrans.StatusIssue       == StatusIssue::Sold       ||
                           inventTrans.StatusIssue       == StatusIssue::Deducted);
        }

        if (inventTrans)
        {
            if (inventTrans.PackingSlipId)
            {
                select custPckSlpTrans
                    where custPckSlpTrans.InventTransId == inventTransOrigin.InventTransId &&
                          custPckSlpTrans.PackingSlipId == inventTrans.PackingSlipId;

                s_SendDate      = custPckSlpTrans.DeliveryDate;
                s_SendNum       = custPckSlpTrans.PackingSlipId;
                s_SendQty       = -custPckSlpTrans.inventQty();
                s_SendTotal     = custPckSlpTrans.ValueMST;
            }
            else
            {
                select custInvoiceTrans
                    where custInvoiceTrans.InventTransId    == inventTransOrigin.InventTransId    &&
                          custInvoiceTrans.InvoiceId        == inventTrans.InvoiceId;

                s_SendDate      = custInvoiceTrans.InvoiceDate;
                s_SendNum       = custInvoiceTrans.InvoiceId;
                s_SendQty       = -custInvoiceTrans.inventQty();
                s_SendTotal     = custInvoiceTrans.LineAmountMST;
            }
        }

        custInvoiceTrans.clear();

        select reverse firstonly custInvoiceTrans
            order by InvoiceDate, InvoiceId
            where custInvoiceTrans.ItemId   == inventTable.ItemId;

        if (custInvoiceTrans)
        {
            s_SalesDate     = custInvoiceTrans.InvoiceDate;
            s_SalesNum      = custInvoiceTrans.InvoiceId;
            s_SalesQty      = -custInvoiceTrans.inventQty();
            s_SalesTotal    = custInvoiceTrans.custInvoiceJour().amountMST(custInvoiceTrans.LineAmount);
        }

        inventTrans.clear();

        select firstonly ReferenceId, ItemId, RecId from inventTransOrigin
            where inventTransOrigin.ItemId            == inventTable.ItemId
               && inventTransOrigin.ReferenceCategory == InventTransType::InventLossProfit
            join inventTrans
                order by DatePhysical desc
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId      &&
                      inventTrans.Qty               <  0; // Issue;

        if (inventTrans)
        {
            s_PosCorrDate       = inventTrans.DatePhysical;
            s_PosCorrNum        = inventTransOrigin.ReferenceId;
            select sum(Qty), sum(CostAmountPosted)
                from inventTransSum
                where inventTransSum.ItemId            == inventTransOrigin.ItemId &&
                      inventTransSum.InventTransOrigin == inventTransOrigin.RecId  &&
                      inventTransSum.DatePhysical      == inventTrans.DatePhysical;
            s_PosCorrQty        = inventTransSum.Qty;
            s_PosCorrTotal      = inventTransSum.CostAmountPosted;
        }

        InventOnhandQty inventOnhandQty = InventOnhandQty::newItemId(inventTable.ItemId);
        qtyAvailable = inventOnhandQty.availOrdered() - inventOnhandQty.onOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getlast</Name>
				<Source><![CDATA[
    public container getlast()
    {
        return [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceAmount</Name>
				<Source><![CDATA[
    public Amount lastInvoiceAmount()
    {
        return s_SalesTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    public date lastInvoiceDate()
    {
        return s_SalesDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceNum</Name>
				<Source><![CDATA[
    public InvoiceId lastInvoiceNum()
    {
        return s_SalesNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceQty</Name>
				<Source><![CDATA[
    public Qty lastInvoiceQty()
    {
        return s_SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNegCorrAmount</Name>
				<Source><![CDATA[
    public Amount lastNegCorrAmount()
    {
        return s_NegCorrTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNegCorrDate</Name>
				<Source><![CDATA[
    public date lastNegCorrDate()
    {
        return s_NegCorrDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNegCorrNum</Name>
				<Source><![CDATA[
    public InventTransRefId lastNegCorrNum()
    {
        return s_NegCorrNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNegCorrQty</Name>
				<Source><![CDATA[
    public Qty lastNegCorrQty()
    {
        return s_NegCorrQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPosCorrAmount</Name>
				<Source><![CDATA[
    public Amount lastPosCorrAmount()
    {
        return s_PosCorrTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPosCorrDate</Name>
				<Source><![CDATA[
    public date lastPosCorrDate()
    {
        return s_PosCorrDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPosCorrNum</Name>
				<Source><![CDATA[
    public InventTransRefId lastPosCorrNum()
    {
        return s_PosCorrNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPosCorrQty</Name>
				<Source><![CDATA[
    public Qty   lastPosCorrQty()
    {
        return s_PosCorrQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchAmount</Name>
				<Source><![CDATA[
    public Amount lastPurchAmount()
    {
        return s_PurchTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchDate</Name>
				<Source><![CDATA[
    public date lastPurchDate()
    {
        return s_PurchDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchNum</Name>
				<Source><![CDATA[
    public InvoiceId lastPurchNum()
    {
        return s_PurchNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPurchQty</Name>
				<Source><![CDATA[
    public Qty lastPurchQty()
    {
        return s_PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastReceiveDate</Name>
				<Source><![CDATA[
    public date lastReceiveDate()
    {
        return s_ReceiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastReceiveNum</Name>
				<Source><![CDATA[
    public InventTransRefId lastReceiveNum()
    {
        return s_ReceiveNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastReceiveQty</Name>
				<Source><![CDATA[
    public Qty lastReceiveQty()
    {
        return s_ReceiveQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastSendAmount</Name>
				<Source><![CDATA[
    public Amount lastSendAmount()
    {
        return s_SendTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastSendDate</Name>
				<Source><![CDATA[
    public date lastSendDate()
    {
        return s_SendDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastSendNum</Name>
				<Source><![CDATA[
    public InvoiceId lastSendNum()
    {
        return s_SendNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastSendQty</Name>
				<Source><![CDATA[
    public Qty lastSendQty()
    {
        return s_SendQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfNotAvailable</Name>
				<Source><![CDATA[
    public Qty numOfNotAvailable()
    {
        return numOfNotAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyAvailable</Name>
				<Source><![CDATA[
    public Qty qtyAvailable()
    {
        return qtyAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    public static void calcTotals(
        InventTable     inventTable,
        TmpStatPer      tmpStatPer,
        boolean         updateRecord = true)
    {
        InventTrans             inventTrans;
        InventSum               inventSum;
        CustInvoiceTrans        custInvoiceTrans;
        VendInvoiceTrans        vendInvoiceTrans;

        Qty                     averageInventOnHand;

        tmpStatPer.NumberOfPurchases    = 0;
        tmpStatPer.PurchQty             = 0;
        tmpStatPer.PurchTotal           = 0;
        tmpStatPer.NumberOfSales        = 0;
        tmpStatPer.SalesQty             = 0;
        tmpStatPer.SalesTotal           = 0;
        tmpStatPer.NumberOfReturns      = 0;
        tmpStatPer.ReturnQty            = 0;
        tmpStatPer.ReturnTotal          = 0;
        tmpStatPer.TurnoverRatio        = 0;

        inventTrans.clear();
        select firstonly inventTrans
            order by DateFinancial
            where inventTrans.ItemId == inventTable.ItemId
                && inventTrans.DateFinancial;
        TransDate firstTrans = inventTrans.DateFinancial;
        TransDate startDate = tmpStatPer.StartDate;
        if (!startDate)
        {
            startDate               = firstTrans;
        }
        TransDate endDate = tmpStatPer.EndDate;
        if (!endDate)
        {
            endDate                 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        Days period = endDate + 1 - startDate;

        while select vendInvoiceTrans
            where vendInvoiceTrans.ItemId       == inventTable.ItemId   &&
                  vendInvoiceTrans.InvoiceDate  >= startDate            &&
                  vendInvoiceTrans.InvoiceDate  <= endDate
        {
            tmpStatPer.NumberOfPurchases++;
            tmpStatPer.PurchQty         += vendInvoiceTrans.getInventQty();
            tmpStatPer.PurchTotal       += vendInvoiceTrans.vendInvoiceJour().amountMST(vendInvoiceTrans.LineAmount);
        }

        while select custInvoiceTrans
            where custInvoiceTrans.ItemId       == inventTable.ItemId   &&
                  custInvoiceTrans.InvoiceDate  >= startDate            &&
                  custInvoiceTrans.InvoiceDate  <= endDate
        {
            if (custInvoiceTrans.Qty >= 0)
            {
                tmpStatPer.NumberOfSales++;
                tmpStatPer.SalesQty     += -custInvoiceTrans.inventQty();
                tmpStatPer.SalesTotal   += custInvoiceTrans.LineAmountMST;
            }
            else
            {
                tmpStatPer.NumberOfReturns++;
                tmpStatPer.ReturnQty    -= -custInvoiceTrans.inventQty();
                tmpStatPer.ReturnTotal  -= custInvoiceTrans.LineAmountMST;
            }
        }

        if (startDate <= endDate)
        {
            if (firstTrans < startDate)
            {
                while select ItemId from inventSum
                    group by ItemId
                    where inventSum.ItemId  == inventTable.ItemId
                {
                    InventSumFinancial inventSumFinancial = InventSumFinancial::newInventTable(startDate - 1,inventTable);
                    averageInventOnHand     += inventSumFinancial.qty();
                }
            }
            while select sum(Qty) from inventTrans
                group by DateFinancial
                where inventTrans.ItemId        == inventTable.ItemId           &&
                      inventTrans.DateFinancial >= startDate                    &&
                      inventTrans.DateFinancial <= endDate                      &&
                      (inventTrans.DateFinancial)
            {
                averageInventOnHand        += inventTrans.Qty * (endDate + 1 - inventTrans.DateFinancial) / period;
            }

            averageInventOnHand = decRound(averageInventOnHand, new SysDictType(extendedTypeName2Id(extendedTypeStr(InventQty))).noOfDecimals());

            if (averageInventOnHand)
            {
                tmpStatPer.TurnoverRatio    = tmpStatPer.SalesQty / averageInventOnHand;
            }
        }
        if (updateRecord)
        {
            tmpStatPer.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsAll</Name>
				<Source><![CDATA[
    public static container calcTotalsAll(container _conmapInventStatistics, InventTable _inventTable)
    {
        Map             mapInventStatistics  = (_conmapInventStatistics) ? Map::create(_conmapInventStatistics) : null;

        if (!mapInventStatistics)
        {
            return connull();
        }

        MapIterator mi = new MapIterator(mapInventStatistics);
        mi.begin();

        while (mi.more())
        {
            TmpStatPer tmpStat = mapInventStatistics.lookup(mi.key());
            InventStatisticsUS::calcTotals(_inventTable,tmpStat,false);
            mapInventStatistics.insert(mi.key(),tmpStat.data());
            mi.next();
        }

        return mapInventStatistics.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStatisticsUS construct()
    {
        return new InventStatisticsUS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInventValues</Name>
				<Source><![CDATA[
    public static container lastInventValues(InventTable inventTable)
    {
        InventStatisticsUS  inventStatisticsUS = InventStatisticsUS::construct();

        inventStatisticsUS.calcStatistics(inventTable);
        return inventStatisticsUS.getlast();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>