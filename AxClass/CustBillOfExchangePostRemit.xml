<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangePostRemit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBillOfExchangePostRemit extends CustBillOfExchangePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher custVendVoucher, CustVendTrans settlingTrans)
    {
        super(custVendVoucher, settlingTrans);

        if (ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Discount
            && ledgerJournalTrans.BankAccountId)
        {
            BankVoucher bankVoucher = BankVoucher::newBankVoucher(
                -settlingTrans.AmountCur,
                settlingTrans.CurrencyCode,
                ledgerJournalTrans.BankAccountId,
                settlingTrans.PaymMode,
                settlingTrans.PaymReference,
                '',
                settlingTrans.Txt,
                custVendVoucher.parmLedgerPostingType(),
                settlingTrans.DefaultDimension,
                BankAccountTable::findLedgerDimension(ledgerJournalTrans.BankAccountId),
                ledgerJournalTrans.BankTransType,
                settlingTrans.ExchRate,
                settlingTrans.ExchRateSecond,
                Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation),
                settlingTrans.ReportingCurrencyExchRate,
                settlingTrans.ReportingCurrencyExchRateSecondary);

            bankVoucher.parmSourceTableId(ledgerJournalTrans.TableId);
            bankVoucher.parmSourceRecId(ledgerJournalTrans.RecId);
            bankVoucher.post(ledgerVoucher);

            LedgerDimensionDefaultAccount ledgerDimensionLiabilities = this.getCustLiabilitiesLedgerDimension(settlingTrans.AccountNum);
            LedgerDimensionAccount ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionLiabilities, settlingTrans.DefaultDimension);

            LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
            CurrencyExchangeHelper exchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                ledgerVoucherObject.parmAccountingDate());

            exchRateHelper.parmExchangeRate1(settlingTrans.ExchRate);
            exchRateHelper.parmExchangeRate2(settlingTrans.ExchRateSecond);
            exchRateHelper.parmReportingExchangeRate1(settlingTrans.ReportingCurrencyExchRate);
            exchRateHelper.parmReportingExchangeRate2(settlingTrans.ReportingCurrencyExchRateSecondary);

            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                custVendVoucher.parmLedgerPostingType(),
                ledgerDimensionMerged,
                settlingTrans.CurrencyCode,
                settlingTrans.AmountCur,
                exchRateHelper);
            // <GEERU>
            ledgerVoucher.bondLast2_RU();
            // </GEERU>
            ledgerVoucherTransObject.parmSourceTableId(settlingTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(settlingTrans.RecId);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustLiabilitiesLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the liabilities ledger dimension from the liabilities posting profile.
    /// </summary>
    /// <param name = "_accountNum">
    ///     The account number.
    /// </param>
    /// <returns>
    ///     The liabilities ledger dimension.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerDimensionDefaultAccount getCustLiabilitiesLedgerDimension(CustVendAC _accountNum)
    {
        return CustLedgerAccounts::liabilitiesLedgerDimension(_accountNum, this.getCustLiabilitiesLedgerDimensionPostingProfle());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustLiabilitiesLedgerDimensionPostingProfle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the remit for discount from <c>CustParameters</c> table.
    /// </summary>
    /// <returns>
    ///     The remit for discount value.
    /// </returns>
    protected CustPostingProfile getCustLiabilitiesLedgerDimensionPostingProfle()
    {
        return CustParameters::find().PostingProfileBillsRemitDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        ;
        return CustVendNegInstStatus::Remitted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>