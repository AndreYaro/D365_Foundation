<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegType_DebtDebitMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegType_DebtDebitMovement extends RTax25RegType
{
    container   outgoingFields;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>badDebtModel</Name>
				<Source><![CDATA[
    public RefRecId badDebtModel()
    {
        return CustParameters::rTax25DebtModelTax(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachedTableId</Name>
				<Source><![CDATA[
    public TableId detachedTableId()
    {
        return tablenum(RTax25RegisterTrans_DebtDebitMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public NotesLine description()
    {
        return "@GLS104312";
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(boolean _useDetachedTable = true)
    {
        RTax25DebtPeriodType    periodType;
        int                     i;
        int                     periodNumDelta;
        int                     periodPos = RTax25RegType_DebtDebitMovement::debtStartPos();
        int                     remainderPos = RTax25RegType_DebtDebitMovement::debtEndPos();

        periodType = RTax25DebtPeriodType::newModelParameters(RTax25DebtType::Debit, this.badDebtModel());
        periodType.prepareLabels();

        detachedTableId = this.detachedTableId();
        this.initFromDetachedTable();

        periodNumDelta = RTax25DebtModelPeriod::maxPeriodNum() - periodType.rowCount();

        fieldId = conDel(fieldId, remainderPos + periodType.rowCount(), periodNumDelta);
        fieldId = conDel(fieldId, periodPos + periodType.rowCount(), periodNumDelta);

        remainderPos -= periodNumDelta;

        fieldType        = [extendedtypenum(DocumentNum),
                            extendedtypenum(DocumentDate),
                            extendedtypenum(TransTxt),
                            extendedtypenum(DeadLine),
                            extendedtypenum(RTax25AccountsOrder),

                            extendedtypenum(RTax25DebtExchRateDifferenceAmount),
                            extendedtypenum(RTax25DebtAcquisitionDebt),
                            extendedtypenum(RTax25DebtCollateral),
                            extendedtypenum(RTax25DebtMaturityDate),
                            extendedtypenum(RTax25DebtMaturityDocNum),
                            extendedtypenum(RTax25DebtMaturityAmount)];

        for (i = periodPos; i < periodPos + periodType.rowCount(); i++)
        {
            fieldType = conins(fieldType, i, extendedtypenum(RTax25BadDebtAmount));
        }

        for (i = remainderPos; i < remainderPos + periodType.rowCount(); i++)
        {
            fieldType = conins(fieldType, i, extendedtypenum(RTax25BadDebtAmount));
        }

        fieldLabel       = ["@GLS103916",
                            "@SYS67",
                            "@GLS103917",
                            "@GLS103918",
                            "@GLS103919",

                            "@GLS104243",
                            "@GLS103924",
                            "@GLS103925",
                            "@GLS103926",
                            "@GLS103927",
                            "@GLS103928"];

        fieldDescription = ["@GLS103935",
                            "@GLS103936",
                            "@GLS103917",
                            "@GLS103937",
                            "@GLS103938",

                            "@GLS103943",
                            "@GLS103944",
                            "@GLS103945",
                            "@GLS103946",
                            "@GLS103947",
                            "@GLS103948" ];

        fieldLabel = periodType.insLabels(fieldLabel, remainderPos, "@GLS103658");
        fieldLabel = periodType.insLabels(fieldLabel, periodPos, "@GLS104318");

        fieldDescription = periodType.insDescriptions(fieldDescription, remainderPos, "@GLS104319");
        fieldDescription = periodType.insDescriptions(fieldDescription, periodPos, "@GLS104313");

        this.initRegType();

        headerFields = [0,0,0,0,0];

        for (i = 1; i <= periodType.rowCount(); i++)
        {
            headerFields += 1;
        }

        headerFields += [1,1,0,0,0,1];

        for (i = 1; i <= periodType.rowCount(); i++)
        {
            headerFields += 1;
        }

        calcParameters   = [ "@SYP4860776" ];
        suspendRecIds    = true;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes register type and child registers.
    /// </summary>

    protected void initRegType()
    {
        childRegisters   = [RTax25RegisterType::DebtDebitReservMovement, RTax25RegisterType::DebtDebitReservMovementDetail];

        registerType     = RTax25RegisterType::DebtDebitMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtEndPos</Name>
				<Source><![CDATA[
    public static int debtEndPos()
    {
        const int DebtEndPos = 17;
        return DebtEndPos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtStartPos</Name>
				<Source><![CDATA[
    public static int debtStartPos()
    {
        const int DebtStartPos = 6;
        return DebtStartPos;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>