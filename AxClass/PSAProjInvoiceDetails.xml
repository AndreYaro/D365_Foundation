<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaProjInvoiceDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
class psaProjInvoiceDetails
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>proposalTrans</Name>
				<Source><![CDATA[
    static PSATmpProjProposalTrans proposalTrans(ProjProposalId _sProposalId,
        PSATmpProjProposalTrans _tProposalTrans)
    {
        ProjProposalCost    tProjProposalCost;
        ProjProposalEmpl    tProjProposalEmpl;
        ProjProposalItem    tProjProposalItem;
        ProjProposalOnAcc   tProjProposalOnAcc;
        ProjProposalRevenue tProjProposalRevenue;
        SalesLine           tSalesLine;

        ProjCostTrans       tProjCostTrans;
        ProjEmplTrans       tProjEmplTrans;
        ProjItemTrans       tProjItemTrans;
        ProjOnAccTrans      tProjOnAccTrans;
        ProjRevenueTrans    tProjRevenueTrans;
        ProjItemTransSale   tProjItemTransSale;

        PSAContractLineItems psaContractLineItemsCost,
                             psaContractLineItemsEmpl,
                             psaContractLineItemsItem,
                             psaContractLineItemsOnAcc,
                             psaContractLineItemsRevenue;

        while select ProposalId, TransId, psaContractLineNum from tProjProposalCost
            where tProjProposalCost.ProposalId == _sProposalId
            join tProjCostTrans
                where tProjCostTrans.TransId == tProjProposalCost.TransId
        {
            psaContractLineItemsCost = PSAContractLineItems::find(tProjProposalCost.psaContractLineNum);

            _tProposalTrans.initFromProjCostTrans(tProjCostTrans);
            _tProposalTrans.ContractLineType    = psaContractLineItemsCost.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsCost.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalCost.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalCost.lineAmount();
            _tProposalTrans.insert();
        }

        while select ProposalId, TransId, psaContractLineNum from tProjProposalOnAcc
            where tProjProposalOnAcc.ProposalId == _sProposalId
            join tProjOnAccTrans
                where tProjOnAccTrans.TransId == tProjProposalOnAcc.TransId
        {
            psaContractLineItemsOnAcc = PSAContractLineItems::find(tProjProposalOnAcc.psaContractLineNum);

            _tProposalTrans.initFromProjOnAccTrans(tProjOnAccTrans);
            _tProposalTrans.ContractLineType    = psaContractLineItemsOnAcc.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsOnAcc.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalOnAcc.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalOnAcc.lineAmount();
            _tProposalTrans.insert();
        }

        while select ProposalId, TransId, psaContractLineNum from tProjProposalRevenue
            where tProjProposalRevenue.ProposalId == _sProposalId
            join tProjRevenueTrans
                where tProjRevenueTrans.TransId == tProjProposalRevenue.TransId
        {
            psaContractLineItemsRevenue = PSAContractLineItems::find(tProjProposalRevenue.psaContractLineNum);

            _tProposalTrans.initFromProjRevenueTrans(tProjRevenueTrans);
            _tProposalTrans.ContractLineType    = psaContractLineItemsRevenue.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsRevenue.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalRevenue.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalRevenue.lineAmount();
            _tProposalTrans.insert();
        }

        while select ProposalId, ItemType, ProjTransId, psaContractLineNum from tProjProposalItem
            where tProjProposalItem.ProposalId == _sProposalId
                && tProjProposalItem.ItemType != ProjItemType::SalesOrder // for Sales Line
            join tProjItemTrans
                where tProjItemTrans.ProjTransId == tProjProposalItem.ProjTransId

        {
            psaContractLineItemsItem = PSAContractLineItems::find(tProjProposalItem.psaContractLineNum);

            _tProposalTrans.initFromProjItemTrans(tProjItemTrans);
            _tProposalTrans.ContractLineType    = psaContractLineItemsItem.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsItem.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalItem.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalItem.lineAmt();
            _tProposalTrans.insert();
        }

        // added sales line
        while select RecId, ProjId, CustAccount, ProjTransId, QtyOrdered, ProjCategoryId, ConfirmedDlv, SalesPrice, CurrencyCode, DefaultDimension, SalesStatus, Name from tSalesLine
            join tProjProposalItem
                where tSalesLine.ProjTransId == tProjProposalItem.ProjTransId
                && tProjProposalItem.ProposalId == _sProposalId
                && tProjProposalItem.ItemType == ProjItemType::SalesOrder // for Sales Line
        {
            psaContractLineItemsItem = PSAContractLineItems::find(tProjProposalItem.psaContractLineNum);

            _tProposalTrans.initFromSalesLine(tSalesLine, tSalesLine.QtyOrdered);
            _tProposalTrans.ContractLineType    = psaContractLineItemsItem.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsItem.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalItem.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalItem.lineAmt();
            _tProposalTrans.RefTransId          = tSalesLine.ProjTransId;
            _tProposalTrans.insert();
        }
        // added sales line

        // Insert credit note transactions for invoice proposal
        while select ProposalId, ItemType, ProjTransId, psaContractLineNum from tProjProposalItem
            where tProjProposalItem.ProposalId == _sProposalId
                && tProjProposalItem.ItemType == ProjItemType::SalesOrder
            join tProjItemTrans
                where tProjItemTrans.ProjTransId == tProjProposalItem.ProjTransId
            exists join tProjItemTransSale
                where tProjItemTransSale.ProjTransId == tProjItemTrans.ProjTransId
                    && tProjItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
        {
            psaContractLineItemsItem = PSAContractLineItems::find(tProjProposalItem.psaContractLineNum);

            _tProposalTrans.initFromProjItemTrans(tProjItemTrans);
            _tProposalTrans.ContractLineType = psaContractLineItemsItem.LineType;
            _tProposalTrans.ContractLineValue = psaContractLineItemsItem.LineValue;
            _tProposalTrans.ContractLineNum = tProjProposalItem.psaContractLineNum;
            _tProposalTrans.LineAmount = tProjProposalItem.lineAmt();
            _tProposalTrans.insert();
        }

        while select ProposalId, TransId, psaContractLineNum from tProjProposalEmpl
            where tProjProposalEmpl.ProposalId == _sProposalId
            join tProjEmplTrans
                where tProjEmplTrans.TransId == tProjProposalEmpl.TransId
        {
            psaContractLineItemsEmpl = PSAContractLineItems::find(tProjProposalEmpl.psaContractLineNum);

            _tProposalTrans.initFromProjEmplTrans(tProjEmplTrans);
            _tProposalTrans.ContractLineType    = psaContractLineItemsEmpl.LineType;
            _tProposalTrans.ContractLineValue   = psaContractLineItemsEmpl.LineValue;
            _tProposalTrans.ContractLineNum     = tProjProposalEmpl.psaContractLineNum;
            _tProposalTrans.LineAmount          = tProjProposalEmpl.lineAmount();
            _tProposalTrans.insert();

            // Insert indirect component transaction to tmptable
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (ProjInvoiceTable::find(PSAContractLineItems::find(tProjEmplTrans.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
                {
                    if (PSAContractLineItems::find(tProjEmplTrans.psaContractLineNum).IncludeIndirectCost == NoYes::Yes)
                    {
                        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                        {
                            _tProposalTrans = PSATmpProjProposalTrans::insertIndirectComponentTrans(tProjEmplTrans, _tProposalTrans);
                        }
                    }
                }
                else
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        _tProposalTrans = PSATmpProjProposalTrans::insertIndirectComponentTrans(tProjEmplTrans, _tProposalTrans);
                    }
                }
            }
            else
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    _tProposalTrans = PSATmpProjProposalTrans::insertIndirectComponentTrans(tProjEmplTrans, _tProposalTrans);
                }
            }
        }

        return _tProposalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>