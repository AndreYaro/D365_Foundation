<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBridgedTransAutoClearingUpdateHistoricalCheckTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class BankBridgedTransAutoClearingUpdateHistoricalCheckTask implements IDataMaintenanceTask
{
    private BankBridgedAutoClearInstrumentationLogger logger = BankBridgedAutoClearInstrumentationLogger::createLogger(classStr(BankBridgedTransAutoClearingUpdateHistoricalCheckTask));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        DataMaintenanceTaskResult taskResult = DataMaintenanceTaskResult::construct();

        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankBridgingTrans(methodStr(BankBridgedTransAutoClearingUpdateHistoricalCheckTask, run)))
        {
            int impactedRows;
            CompanyInfo companyInfo;
            while select DataArea from companyInfo
            {
                changecompany (companyInfo.DataArea)
                {
                    ttsbegin;
                    BankBridgingTransactionTmp bankBridgingTransactionTmp = this.insertTempTable();

                    int countOfRecords = this.getCountOfRecords(bankBridgingTransactionTmp);
                    if (countOfRecords > 0)
                    {
                        taskResult.addMessage(
                            DataMaintenanceMessageContract::constructForMessage(
                                Exception::Info,
                                strFmt("@CashManagement:BankBridgedTransAutoClearingUpdateHistoricalCheckTaskMessage", countOfRecords, companyInfo.DataArea)));

                        impactedRows += countOfRecords;

                        this.updateLedgerJournalTrans(bankBridgingTransactionTmp);
                        this.insertBankBridgingTrans(bankBridgingTransactionTmp, ModuleCustVend::Cust);
                        this.insertBankBridgingTrans(bankBridgingTransactionTmp, ModuleCustVend::Vend);
                    }
                    ttscommit;
                }
            }
            activityContext.addCustomProperty(BankBridgedAutoClearingInstrumentationConstants::UpdateRecordCount, ApplicationCommonInstrumentationMagnitude::log10Magnitude(impactedRows));
            taskResult.parmCount(impactedRows);
        }
        
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:BankBridgedTransAutoClearingUpdateHistoricalCheckActionName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfRecords</Name>
				<Source><![CDATA[
    private int getCountOfRecords(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
    {
        select count(RecId) from _bankBridgingTransactionTmp;
        return _bankBridgingTransactionTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempTable</Name>
				<Source><![CDATA[
    private BankBridgingTransactionTmp insertTempTable()
    {
        BankBridgingTransactionTmp bankBridgingTransactionTmp;

        BankAccountTable bankAccountTable;
        DimensionAttributeValueCombination davc;
        BankBridgingInquiry bankBridgingInquiry;
        LedgerEntry ledgerEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntryJournal ledgerEntryJournal;
        LedgerJournalTrans ledgerJournalTrans;
        BankChequeTable bankChequeTable;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        
        insert_recordset bankBridgingTransactionTmp(
            PaymentMethod, AccountType, LedgerEntryRecId, GeneralJournalAccountEntryRecId,
            Voucher, AccountingDate, JournalBatchNumber, LedgerJournalTransRecId, BankAccount, BankCheuqeTableRecId)
            select forceselectorder PaymMode, AccountType from ledgerTransFurtherPosting
                join RecId from ledgerEntry
                    where ledgerEntry.RecId == ledgerTransFurtherPosting.RefRecId
                        && ledgerEntry.IsBridgingPosting == NoYes::Yes
                join RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                join SubledgerVoucher, AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join ledgerEntryJournal
                    where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                join JournalNum, RecId from ledgerJournalTrans
                    where ledgerJournalTrans.Voucher == generalJournalEntry.SubledgerVoucher
                        && ledgerJournalTrans.TransDate == generalJournalEntry.AccountingDate
                        && ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber
                        && generalJournalAccountEntry.TransactionCurrencyCode == ledgerJournalTrans.CurrencyCode
                        && generalJournalAccountEntry.TransactionCurrencyAmount == ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit
                        && ledgerJournalTrans.BridgingBankAccount == ''
                join bankBridgingInquiry
                    where bankBridgingInquiry.PaymMode == ledgerTransFurtherPosting.PaymMode
                        && bankBridgingInquiry.AccountType == ledgerTransFurtherPosting.AccountType
                join davc
                    where davc.RecId == bankBridgingInquiry.PaymentLedgerDimension
                join AccountID from bankAccountTable
                    where bankAccountTable.AccountID == davc.DisplayValue
                join RecId from bankChequeTable
                    where bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans)
                        && bankChequeTable.SourceRecId == ledgerJournalTrans.RecId
                        && bankChequeTable.AccountId == bankAccountTable.AccountID;

        return bankBridgingTransactionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankBridgingTrans</Name>
				<Source><![CDATA[
    private void insertBankBridgingTrans(BankBridgingTransactionTmp _bankBridgingTransactionTmp, ModuleCustVend _moduleCustVend)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        const BankBridgingStatus bankBridgingStatus = BankBridgingStatus::Bridged;
        const NoYes IsCheck = NoYes::Yes;
        LedgerJournalType ledgerJournalType = _moduleCustVend == ModuleCustVend::Cust ? LedgerJournalType::CustPayment : LedgerJournalType::Payment;

        BankBridgingTrans bankBridgingTrans;
        bankBridgingTrans.skipDatabaseLog(true);
        bankBridgingTrans.skipDataMethods(true);
        bankBridgingTrans.skipEvents(true);

        insert_recordset bankBridgingTrans(
            AccountType,
            IsCheck,
            BridgingStatus,
            AccountId,
            BridgedVoucher,
            BridgedLedgerJournalTransRecId,
            LedgerEntryRecId,
            BankChequeTableRecId,
            FloatAccountLedgerDimension)
            select _moduleCustVend, IsCheck, bankBridgingStatus, BankAccount, Voucher, LedgerJournalTransRecId, LedgerEntryRecId, BankCheuqeTableRecId from _bankBridgingTransactionTmp
                join OffsetLedgerDimension from ledgerJournalTrans
                    where ledgerJournalTrans.RecId == _bankBridgingTransactionTmp.LedgerJournalTransRecId
                join ledgerJournalTable
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                        && ledgerJournalTable.JournalType == ledgerJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void updateLedgerJournalTrans(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.skipDatabaseLog(true);
        ledgerJournalTrans.skipDataMethods(true);
        ledgerJournalTrans.skipEvents(true);

        update_recordset crosscompany ledgerJournalTrans
            setting BridgingBankAccount = _bankBridgingTransactionTmp.BankAccount
            join BankAccount, LedgerJournalTransRecId from _bankBridgingTransactionTmp
                where ledgerJournalTrans.RecId == _bankBridgingTransactionTmp.LedgerJournalTransRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>