<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmSalesCustItemStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmSalesCustItemStatisticsDP</c> class is the report data provider class for the
/// <c>smmSalesCustItemStatistics</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(smmSalesCustItemStatisticsContract)),
    SRSReportQueryAttribute(queryStr(smmSalesCustItemStatistics))
]
public class smmSalesCustItemStatisticsDP extends SrsReportDataProviderPreProcessTempDB
{
    tmpSmmSalesCustItemStatistics   returnTable;

    CustAccount                     orderAccount;
    ItemId                          itemId;
    SalesUnit                       salesUnit;

    AmountMST                       lineAmountMST_Period1;
    ContributionMarginMST           contributionMarginMST_Period1;
    AmountMST                       lineAmountMST_Period2;
    ContributionMarginMST           contributionMarginMST_Period2;
    SalesQty                        qty_Period1;
    SalesQty                        qty_Period2;

    boolean                         orderAccountPrinted;

    FromDate                        fromDate_Period1;
    ToDate                          toDate_Period1;
    FromDate                        fromDate_Period2;
    ToDate                          toDate_Period2;

    ItemReportPeriodNum             periodNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPeriodQuery</Name>
				<Source><![CDATA[
        private Query buildPeriodQuery(Query _query)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   queryBuild;

        queryBuild              = new Query(_query.pack());

        queryBuildDataSource    = queryBuild.dataSourceTable(tablenum(CustInvoiceJour));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(CustInvoiceJour, InvoiceDate));

        queryBuildRange.value(queryRange(fromDate_Period1, toDate_Period1) + ',' + queryRange(fromDate_Period2, toDate_Period2));

        return queryBuild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the period for statistics.
    /// </summary>
    /// <param name="_date">
    /// The date to define the period.
    /// </param>
    void definePeriod(TransDate _date)
    {
        if ( (_date >= fromDate_Period1 || !fromDate_Period1)
            && (_date <= toDate_Period1 || !toDate_Period1) )
        {
            periodNum = ItemReportPeriodNum::First;
        }

        if ((_date >= fromDate_Period2 || !fromDate_Period2)
           && (_date <= toDate_Period2 || !toDate_Period2))
        {
            if (periodNum == ItemReportPeriodNum::First)
                periodNum = ItemReportPeriodNum::Both;
            else
                periodNum = ItemReportPeriodNum::Second;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>gettmpSmmSalesCustItemStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>tmpSmmSalesCustItemStatistics</c> table.
    /// </summary>
    /// <returns>
    /// The <c>tmpSmmSalesCustItemStatistics</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(tmpSmmSalesCustItemStatistics))
    ]
    public tmpSmmSalesCustItemStatistics gettmpSmmSalesCustItemStatistics()
    {
        select returnTable;
        return returnTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>tmpSmmSalesCustItemStatistics</c> table with data.
    /// </summary>
    private void insertIntoTmpTable()
    {
        if (orderAccount)
        {
            returnTable.AccountNum  = orderAccount;
            returnTable.Name        = CustTable::find(orderAccount).name();
            returnTable.ItemId      = itemId;
            returnTable.ItemName    = InventTable::find(itemId).defaultProductName();
            returnTable.Qty1        = qty_Period1;
            returnTable.Unit1       = salesUnit;
            returnTable.Revenue1    = lineAmountMST_Period1;
            returnTable.Margin1     = contributionMarginMST_Period1;
            returnTable.Qty2        = qty_Period2;
            returnTable.Unit2       = salesUnit;
            returnTable.Revenue2    = lineAmountMST_Period2;
            returnTable.Margin2     = contributionMarginMST_Period2;
            returnTable.insert();
            this.resetLineValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by Microsoft
    /// SQL Server Reporting Services at runtime. The method will compute data and populate the data tables
    /// that will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        smmSalesCustItemStatisticsContract  contract = this.parmDataContract() as smmSalesCustItemStatisticsContract;
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
        currencyExchangeHelper.parmErrorType(AifErrorType::Exception);

        fromDate_Period1    = contract.parmPeriodOneFromDate();
        toDate_Period1      = contract.parmPeriodOneToDate();
        fromDate_Period2    = contract.parmPeriodTwoFromDate();
        toDate_Period2      = contract.parmPeriodTwoToDate();

        QueryRun queryRun_Current = new QueryRun(this.buildPeriodQuery(this.parmQuery()));

        while (queryRun_Current.next())
        {
            CustInvoiceJour custInvoiceJour_Current     = queryRun_Current.get(tablenum(CustInvoiceJour));
            CustInvoiceTrans custInvoiceTrans_Current   = queryRun_Current.get(tablenum(CustInvoiceTrans));

            ItemId currentCustInvoiceTransItemId = this.parmCustInvoiceTransItemId(custInvoiceTrans_Current);
            boolean itemNEqPrev = itemId != currentCustInvoiceTransItemId;
            boolean accNEqPrev  = orderAccount != custInvoiceJour_Current.OrderAccount;

            periodNum = ItemReportPeriodNum::Both;

            if (accNEqPrev || itemNEqPrev)
            {
                this.insertIntoTmpTable();

                if (itemNEqPrev)
                {
                    salesUnit = InventTableModule::find(currentCustInvoiceTransItemId,ModuleInventPurchSales::Sales).UnitId;
                }

                orderAccount    = custInvoiceJour_Current.OrderAccount;
                itemId          = currentCustInvoiceTransItemId;
            }

            this.definePeriod(custInvoiceTrans_Current.InvoiceDate);

            currencyExchangeHelper.parmExchangeRate1(CustInvoiceJour_Current.ExchRate);
            currencyExchangeHelper.parmExchangeRate2(custInvoiceJour_Current.ExchRateSecondary);
            currencyExchangeHelper.parmExchangeDate(custInvoiceJour_Current.InvoiceDate);

            AmountMST lineAmountMST_current = currencyExchangeHelper.calculateTransactionToAccounting(custInvoiceJour_Current.CurrencyCode, custInvoiceTrans_Current.LineAmount, true);
            ContributionMarginMST contributionMarginMST_current = custInvoiceTrans_Current.contributionMarginMST();
            SalesQty qtyPeriod_current = orderAccount && (salesUnit == custInvoiceTrans_Current.SalesUnit) ? 
                custInvoiceTrans_Current.Qty : 
                this.unitConvertValue(
                    currentCustInvoiceTransItemId,
                    custInvoiceTrans_Current.InventDimId,
                    ModuleInventPurchSales::Sales,
                    custInvoiceTrans_Current.SalesUnit,
                    custInvoiceTrans_Current.Qty);

            this.updatePeriodAmounts(qtyPeriod_current,
                                     lineAmountMST_current,
                                     contributionMarginMST_current);
        }

        this.insertIntoTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTransItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item ID from a customer invoice transaction.
    /// </summary>
    /// <param name = "_custInvoiceTrans">A customer invoice transaction.</param>
    /// <returns>An item ID.</returns>
    protected ItemId parmCustInvoiceTransItemId(CustInvoiceTrans _custInvoiceTrans)
    {
        return _custInvoiceTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all the line values.
    /// </summary>
    void resetLineValues()
    {
        lineAmountMST_Period1           = 0;
        contributionMarginMST_Period1   = 0;
        lineAmountMST_Period2           = 0;
        contributionMarginMST_Period2   = 0;
        qty_Period1                     = 0;
        qty_Period2                     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the value to the unit that is based on the item and module.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to look up the target unit.
    /// </param>
    /// <param name="module">
    /// The module ID to look up the target unit.
    /// </param>
    /// <param name="unitFrom">
    /// The original unit.
    /// </param>
    /// <param name="valueFrom">
    /// The original value.
    /// </param>
    /// <returns>
    /// The value in the new unit.
    /// </returns>
    [SysObsolete('This method is deprecated please use unitConvertValue instead.', false, 30\06\2018)]
    public Qty unitConvert(ItemId                  _itemId,
                           ModuleInventPurchSales  module,
                           UnitOfMeasureSymbol     unitFrom,
                           Qty                     valueFrom = 1)
    {
        return this.unitConvertValue(_itemId, '', module, unitFrom, valueFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity value to the unit that is based on the item and module.
    /// </summary>
    /// <param name="_itemId">The item ID to look up the target unit.</param>
    /// <param name="_inventDimId">The inventory dimension ID.</param>
    /// <param name="_module">The module ID to look up the target unit.</param>
    /// <param name="_unitFrom">The original unit.</param>
    /// <param name="_value">The original quantity value.</param>
    /// <returns>The quantity value in the new unit.</returns>
    public Qty unitConvertValue(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        ModuleInventPurchSales  _module,
        UnitOfMeasureSymbol     _unitFrom,
        Qty                     _value = 1)
    {
        UnitOfMeasureSymbol unitTo = InventTableModule::find(_itemId, _module).UnitId;

        if (_unitFrom != unitTo)
        {
            UnitOfMeasureSymbol unitInvent  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

            EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                                                _itemId, 
                                                                                                _inventDimId, 
                                                                                                _unitFrom,
                                                                                                unitInvent, 
                                                                                                NoYes::Yes);

            InventQty inventQty = productUnitConverter.convertValue(_value);

            productUnitConverter.parmFromUnitOfMeasureSymbol(unitInvent);
            productUnitConverter.parmToUnitOfMeasureSymbol(unitTo);

            return productUnitConverter.convertValue(inventQty);
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriodAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the period amounts.
    /// </summary>
    /// <param name="_salesQty">
    /// The sales quantity.
    /// </param>
    /// <param name="_amountMST">
    /// The <c>AmountMST</c> value.
    /// </param>
    /// <param name="_contrMargin">
    /// The contribution margin.
    /// </param>
    void updatePeriodAmounts(   SalesQty                    _salesQty,
                                AmountMST                   _amountMST,
                                ContributionMarginMST       _contrMargin
                            )
    {
        if (periodNum == ItemReportPeriodNum::First ||  periodNum == ItemReportPeriodNum::Both)
        {
             qty_Period1                        += _salesQty;
             lineAmountMST_Period1              += _amountMST;
             contributionMarginMST_Period1      += _contrMargin;
        }
        if (periodNum == ItemReportPeriodNum::Second || periodNum == ItemReportPeriodNum::Both)
        {
             qty_Period2                        += _salesQty;
             lineAmountMST_Period2              += _amountMST;
             contributionMarginMST_Period2      += _contrMargin;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>