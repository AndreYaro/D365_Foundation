<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease_StartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStatusDecrease_StartUp</c> class is used for changing production status from started
/// to released.
/// </summary>
/// <remarks>
/// When a production order has status started and the decrease status is run an instance of this class
/// will be created.
/// </remarks>
[ProdStatusFactory(ProdStatus::StartedUp)]
class ProdUpdStatusDecrease_StartUp extends ProdUpdStatusDecrease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAreJournalsOpen</Name>
				<Source><![CDATA[
    boolean checkAreJournalsOpen(ProdId _prodId)
    {
        ProdJournalTable        journalTable;
        boolean                 ok = true;
        while select journalTable
            index hint ProdIdx
            where journalTable.ProdId == _prodId        &&
                  journalTable.Posted == NoYes::No
        {
            if (JournalTableData::journalBlockLevel(journalTable) != JournalBlockLevel::None)
            {
                SysInfoAction_Formrun infoAction = SysInfoAction_Formrun::newFormname(formStr(ProdJournalTable));
                infoAction.parmCallerBuffer(ProdJournalTable::find(journalTable.JournalId));

                ok = checkFailed(strFmt("@SYS69035",journalTable.JournalId), '', infoAction);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the results of production start.
    /// </summary>
    /// <remarks>
    ///    The clean up will have effect on BOM components, route operations and production journals.
    /// </remarks>
    void cleanUp()
    {
        PmfProdCoBy         pmfProdCoByProduct;

        if (! this.checkAreJournalsOpen(prodTable.ProdId))
        {
            throw Exception::Error;
        }

        ProdJournalTable::deleteProdIdReferences(prodTable.ProdId);

        this.reverseReportFinish();

        this.reverseBOMStartUp();

        this.reverseRouteStartUp();

        this.reverseDerivedProductions();

        if (prodTable.ProdType == ProdType::Process)
        {
            while select forupdate pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId == prodTable.ProdId
            {
                pmfProdCoByProduct.status()
                    .runStatusDecrease(this.parmParmBuffer());
            }
        }

        // SFC - BEGIn
        this.reverseSFC();
        // SFC - ENd

        // <GEERU>
        this.reverseRelease_RU();
        // </GEERU>

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        prodTable.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdateProduction</Name>
				<Source><![CDATA[
    void endUpdateProduction()
    {
        prodTable.QtyStUp        = 0;
        prodTable.StUpDate       = dateNull();
        prodTable.FinishedDate   = dateNull();
        if (#PdsCatchWeightEnabled)
        {
            prodTable.PdsCWBatchStup = 0;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdJournalTableProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a report as finished journal.
    /// </summary>
    /// <param name="_prodJournalTable">
    /// The journal to post.
    /// </param>
    protected void postProdJournalTableProd(ProdJournalTable  _prodJournalTable)
    {
        // Post the reversed journals.
        ProdJournalCheckPostProd prodJournalCheckPostProd = ProdJournalCheckPostProd::newPostJournal(_prodJournalTable.JournalId, true);
        prodJournalCheckPostProd.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseBOMStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses production BOM and removes reservations for lines that have reservation set to "Start".
    /// </summary>
    void reverseBOMStartUp()
    {
        ProdBOM                     prodBOM;

        ProdJournalCreateBOM prodJournalCreate = ProdJournalCreateBOM::newStatusDecrease(prodTable.ProdId);
        prodJournalCreate.runOperation();

        ProdJournalTable prodJournalTable = prodJournalCreate.usedProdJournalTable();

        if (prodJournalTable.RecId && prodJournalTable.JournalId)
        {
            ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId,true);
            prodJournalCheckPostBOM.runOperation();
        }

        Query query = this.buildProdBOMReversalQuery();
        QueryRun queryRun = new QueryRun(query);
        
        while (queryRun.next())
        {
            prodBOM = queryRun.get(tableNum(ProdBOM));
            
            prodBOM.QtyInventStUp        = 0;
            prodBOM.QtyBOMStUp           = 0;
            prodBOM.ConstantReleased     = NoYes::No;

            prodBOM.RemainBOMPhysical    = prodBOM.QtyBOMCalc;
            prodBOM.RemainInventPhysical = prodBOM.QtyInventCalc;
            if (#PdsCatchWeightEnabled)
            {
                prodBOM.PdsCWInventStup      = 0;
                prodBOM.PdsCWRemainPhysical  = prodBOM.PdsCWInventCalc;
            }

            prodBOM.update();

            if (prodBOM.ProdLineType == BOMType::Item)
            {
                InventMovement movement = InventMovement::construct(prodBOM);
                if (movement)
                {
                    if (prodBOM.Reservation == ProdReservation::Start)
                    {
                        //Remove reservation
                        InventUpd_Reservation::deleteReserveRefTransId(movement,true);
                    }
                    else
                    {
                        if (prodBOM.Reservation != ProdReservation::None)
                        {
                            // Reservation might has been deleted when starting up the production so
                            // it should be done again
                            movement.updateReservation();
                        }
                    }
                }
            }
        }

        if (BOMParameters::find().EnableTrackedComponents && ProdAsBuiltBOMCreatePickingListSplitBatchFlight::instance().isEnabled())
        {
            ProdAsBuiltBOMComponentLotAssociation::resetProdPickListJournals(prodTable.ProdId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdBOMReversalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to reverse the production BOM.
    /// </summary>
    /// <returns>The query used to reverse the production BOM.</returns>
    protected Query buildProdBOMReversalQuery ()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsProdBOM = query.addDataSource(tableNum(ProdBOM));
        qbdsProdBOM.update(true);

        qbdsProdBOM.addRange(fieldNum(ProdBOM, ProdId)).value(queryValue(prodTable.ProdId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerivedProductions</Name>
				<Source><![CDATA[
    void reverseDerivedProductions()
    {
        ProdBOM prodBOM;
        while select forupdate prodBOM
            index hint NumIdx
            where prodBOM.ProdId     == prodTable.ProdId
        {
            this.reverseDerived(prodBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRelease_RU</Name>
				<Source><![CDATA[
    public void reverseRelease_RU()
    {
        if (prodTable.useReleaseFromProduction_RU())
        {
            ProdJournalCreateRelease_RU prodJournalCreate = ProdJournalCreateRelease_RU::newStatusDecrease(prodTable.ProdId);
            prodJournalCreate.runOperation();

            ProdJournalTable prodJournalTable = prodJournalCreate.usedProdJournalTable();
            if (prodJournalTable.RecId && prodJournalTable.JournalId)
            {
                if (prodJournalTable.numOfLines_RU())
                {
                    ProdJournalCheckPostRelease_RU prodJournalCheckPostRelease = ProdJournalCheckPostRelease_RU::newPostJournal(prodJournalTable.JournalId, true);
                    prodJournalCheckPostRelease.parmUpdateFinancial(true);
                    prodJournalCheckPostRelease.runOperation();
                }
                else
                {
                    prodJournalTable.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReportFinish</Name>
				<Source><![CDATA[
    void reverseReportFinish()
    {
        ProdJournalCreateProd       prodJournalCreate;
        InventTrans                 inventTransReceived;
        ProdJournalTable            prodJournalTable;
        InventQty                   errorQty = prodTable.reportedFinishedError();
        PdsCWBatchErr               cwErrorQty = 0;
        
        if (PdsGlobal::pdsIsCWItem(prodTable.ItemId))
        {
            cwErrorQty = prodTable.pdsCWReportedFinishedErr();
        }

        // Find the RAF quantities
        select InventDimId, sum(Qty), sum(PdsCWQty)  from inventTransReceived
            group by InventDimId
            where inventTransReceived.InventTransOrigin == InventTransOriginProdTable::findInventTransOriginId(prodTable.DataAreaId, prodTable.ProdId)
                && inventTransReceived.StatusReceipt     == StatusReceipt::Received;


        if (!inventTransReceived && prodTable.inventTable().isFormulaAllowed())
        {
            InventTransOrigin           inventTransOrigin;

            // CoBy will be looped in ProdJournalCreateProd::pmfCreateCoByLines(), no need group by inventDimId
            select firstonly RecId from inventTransReceived
                where inventTransReceived.StatusReceipt         == StatusReceipt::Received
                exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTransReceived.InventTransOrigin
                       && inventTransOrigin.ReferenceId         == prodTable.ProdId
                       && inventTransOrigin.ReferenceCategory   == InventTransType::PmfProdCoBy;
        }

        const ProdReportedError ProdReportedErrorQty = 0;
        while (inventTransReceived)
        {
            prodJournalCreate = ProdJournalCreateProd::newStatusDecrease(prodTable,
                inventTransReceived.InventDimId,
                inventTransReceived.Qty,
                ProdReportedErrorQty,
                prodJournalTable.JournalId,
                inventTransReceived.PdsCWQty);

            prodJournalCreate.runOperation();

            prodJournalTable = prodJournalCreate.usedProdJournalTable();

            if (inventTransReceived)
            {
                next inventTransReceived;
            }
        }

        // Need to reverse quantity if Product has an Error RAF or if product has an Error RAF only for CoBy
        if (errorQty != 0 || cwErrorQty != 0 || prodTable.hasCoByReportedFinishedError())
        {
            const ProdReportedGood ProdReportedGoodQty = 0;

            // Need a line to reverse remain quantity which have inconsistent dimensions.
            prodJournalCreate = ProdJournalCreateProd::newStatusDecrease(prodTable,
            prodTable.InventDimId,
            ProdReportedGoodQty,
            errorQty,
            prodJournalTable.JournalId,
            0,
            cwErrorQty);

            prodJournalCreate.runOperation();

            prodJournalTable = prodJournalCreate.usedProdJournalTable();
        }

        if (prodJournalTable.RecId && prodJournalTable.JournalId)
        {
            this.postProdJournalTableProd(prodJournalTable);
        }

        if (BOMParameters::find().EnableTrackedComponents && ProdAsBuiltBOMCreatePickingListSplitBatchFlight::instance().isEnabled())
        {
            ProdAsBuiltBOMProductLotAssociation::resetProdReportFinishedJournals(prodTable.ProdId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRouteStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse all route postings.
    /// </summary>
    public void reverseRouteStartUp()
    {
        this.reverseRouteStartUpOfBurdenEstimation();
        this.reverseRouteStartUpForNormalRoutes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSFC</Name>
				<Source><![CDATA[
    // SFC - BEGIn
    private void reverseSFC()
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;

        if (isConfigurationkeyEnabled(configurationkeynum(JmgJob)))
        {
            while select forupdate jmgStampJournalTrans
                where jmgStampJournalTrans.JobRef == prodTable.ProdId
            {
                jmgStampJournalTrans.QtyStartup     = 0;
                jmgStampJournalTrans.QtyError       = 0;
                jmgStampJournalTrans.QtyGood        = 0;
                jmgStampJournalTrans.SysQtyStartup  = 0;
                jmgStampJournalTrans.SysQtyError    = 0;
                jmgStampJournalTrans.SysQtyGood     = 0;
                jmgStampJournalTrans.PdsCWQtyStartup     = 0;
                jmgStampJournalTrans.PdsCWQtyError       = 0;
                jmgStampJournalTrans.PdsCWQtyGood        = 0;
                jmgStampJournalTrans.PdsCWSysQtyStartup  = 0;
                jmgStampJournalTrans.PdsCWSysQtyError    = 0;
                jmgStampJournalTrans.PdsCWSysQtyGood     = 0;

                jmgStampJournalTrans.doUpdate();
            }

            while select forupdate jmgStampTrans
                where jmgStampTrans.JobRef == prodTable.ProdId
            {
                jmgStampTrans.QtyStartup            = 0;
                jmgStampTrans.QtyError              = 0;
                jmgStampTrans.QtyGood               = 0;
                jmgStampTrans.SysQtyStartup         = 0;
                jmgStampTrans.SysQtyError           = 0;
                jmgStampTrans.SysQtyGood            = 0;
                jmgStampTrans.PdsCWQtyStartup       = 0;
                jmgStampTrans.PdsCWQtyError         = 0;
                jmgStampTrans.PdsCWQtyGood          = 0;
                jmgStampTrans.PdsCWSysQtyStartup    = 0;
                jmgStampTrans.PdsCWSysQtyError      = 0;
                jmgStampTrans.PdsCWSysQtyGood       = 0;
                jmgStampTrans.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRouteStartUpForNormalRoutes</Name>
				<Source><![CDATA[
    // SFC - END

    /// <summary>
    /// Reverse route postings coming from standard route journals.
    /// </summary>
    private void reverseRouteStartUpForNormalRoutes()
    {
        ProdRoute                    prodRoute;
        ProdRouteJob                 prodRouteJob;
        
        ProdJournalCreateRoute prodJournalCreate = ProdJournalCreateRoute::newStatusDecrease(prodTable.ProdId);
        prodJournalCreate.runOperation();

        ProdJournalTable prodJournalTable = prodJournalCreate.usedProdJournalTable();

        if (prodJournalTable.RecId && prodJournalTable.JournalId)
        {
            ProdJournalCheckPostRoute prodJournalCheckPostRoute = ProdJournalCheckPostRoute::newPostJournal(prodJournalTable.JournalId,true);
            prodJournalCheckPostRoute.runOperation();
        }

        while select forupdate prodRoute
            index hint NumOprNumIdx
            where prodRoute.ProdId  == prodTable.ProdId
        {
            prodRoute.OprStartedUp      = NoYes::No;
            prodRoute.OprFinished       = NoYes::No;
            prodRoute.ExecutedProcess   = 0;
            prodRoute.ExecutedSetup     = 0;
            prodRoute.ConstantReleased  = NoYes::No;
            prodRoute.update();
        }

        while select forupdate prodRouteJob
            index hint ProdOprIdx
            where prodRouteJob.ProdId   == prodTable.ProdId
        {
            prodRouteJob.ExecutedPct     = 0;
            prodRouteJob.JobStatus       = ProdJobStatus::Coming;
            prodRouteJob.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRouteStartUpOfBurdenEstimation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse route postings coming from burden estimation journals.
    /// </summary>
    protected void reverseRouteStartUpOfBurdenEstimation()
    {
        PmfProdCoBy                                    pmfProdCoBy;

        while select pmfProdCoBy
            where pmfProdCoBy.ProductType == PmfProductType::By_Product
               && pmfProdCoBy.ProdId      == prodTable.ProdId
        {
            PmfBurdenProdRouteCardPost pmfBurdenProdRouteCardPost = PmfBurdenProdRouteCardPost::newFromProdTable(prodTable);
            pmfBurdenProdRouteCardPost.parmReversalOnly(true);
            pmfBurdenProdRouteCardPost.parmByProduct(pmfProdCoBy);
            pmfBurdenProdRouteCardPost.post();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>