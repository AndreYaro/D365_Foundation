<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostLedgerDimensionPostingTypeAccountController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostLedgerDimensionPostingAccountController</c> class provides support for filtering default accounts in the segmented entry control by posting types.
/// </summary>
public class CostLedgerDimensionPostingTypeAccountController extends LedgerDimensionDefaultAccountController
{
    CostParameters                      parameters;
    CostReconciliationMethodStrategy    reconciliationMethodStrategy;

    boolean                             isWipPostingType;
    boolean                             isInventoryPostingType;
    boolean                             showAllValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the main account lookup data.
    /// </summary>
    /// <param name = "_elements">
    /// The collection to which the lookup data should be added.
    /// </param>
    /// <param name = "_currentSegment">
    /// The current segment the lookup is for; always 1.
    /// </param>
    /// <param name = "_autoCompleteMode">
    /// The mode for loading auto complete data.
    /// </param>
    /// <param name = "_filterValue">
    /// The pattern to use to filter the lookup values.
    /// </param>
    /// <param name = "_lastPagedValue">
    /// The last lookup value returned.
    /// </param>
    /// <param name = "_lastPagedTag">
    /// The last lookup tag returned.
    /// </param>
    public void loadLookupData(
        Array                _elements,
        int                  _currentSegment,
        AutoCompleteDataMode _autoCompleteMode,
        str                  _filterValue,
        str                  _lastPagedValue,
        str                  _lastPagedTag)
    {
        if (_autoCompleteMode == AutoCompleteDataMode::AllValues
            || !(isInventoryPostingType
                || isWipPostingType))
        {
            showAllValues = true;
            super(_elements, _currentSegment, _autoCompleteMode, _filterValue, _lastPagedValue, _lastPagedTag);
        }
        else
        {
            Debug::assert(_currentSegment == 1);

            changecompany(dataAreaId)
            {
                showAllValues = false;
                this.addPostingTypeMainAccountLookupData(_elements, _autoCompleteMode, _filterValue, _lastPagedValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPostingTypeMainAccountLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the main account lookup data.
    /// </summary>
    /// <param name = "_elements">
    /// The array to which the autocomplete data should be added.
    /// </param>
    /// <param name = "_autoCompleteMode">
    /// The mode for loading auto complete data.
    /// </param>
    /// <param name = "_filterValuePattern">
    /// The pattern to use to filter the lookup values.
    /// </param>
    /// <param name = "_lastPagedValue">
    /// The last lookup value returned.
    /// </param>
    private void addPostingTypeMainAccountLookupData(
        Array                _elements,
        AutoCompleteDataMode _autoCompleteMode,
        DimensionValue       _filterValuePattern,
        DimensionValue       _lastPagedValue)
    {
        boolean haslookupValues;

        Debug::assert(_elements != null);

        Query mainAccountLookupQueryLocal = this.getMainAccountAutoCompleteQuery(DimensionLedgerAccountType::Total, DimensionLedgerAccountType::Total, _filterValuePattern, _lastPagedValue);

        var queryRun = new QueryRun(mainAccountLookupQueryLocal);

        int numberPaged = 0;
        while (queryRun.next() && numberPaged < maxAutoCompletePageSize)
        {
            numberPaged++;

            Common common = queryRun.get(dimensionAttributeMainAccountViewContractViewId);
            MainAccount mainAccountLookup = queryRun.get(tableNum(MainAccount)) as MainAccount;

            str value = common.(dimensionAttributeMainAccountViewContractValueFieldId);
            str description = common.(dimensionAttributeMainAccountViewContractNameFieldId);

            // Add to the lookup collection
            var lookupElement = new LookupElement();
            lookupElement.parmId(value);
            lookupElement.parmDescription(description);
            _elements.value(_elements.lastIndex() + 1, lookupElement);

            haslookupValues = true;
        }

        // If no accounts were found due to a filter, then try to display without a filter
        if (!showAllValues && !haslookupValues && _lastPagedValue == '')
        {
            showAllValues = true;
            this.addPostingTypeMainAccountLookupData(_elements, AutoCompleteDataMode::AllValues, _filterValuePattern, _lastPagedValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountAutoCompleteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies ranges on the main account data source.
    /// </summary>
    /// <param name = "_excludeType1">
    /// The first <c>DimensionLedgerAccountType</c> value to exclude main accounts of from the lookup.
    /// </param>
    /// <param name = "_excludeType2">
    /// The second <c>DimensionLedgerAccountType</c> value to exclude main accounts of from the lookup.
    /// </param>
    /// <param name = "_filterValue">
    /// The pattern to use to filter the lookup values.
    /// </param>
    /// <param name = "_lastPagedValue">
    /// The last lookup value returned.
    /// </param>
    /// <returns>
    /// The main account auto complete lookup query.
    /// </returns>
    protected Query getMainAccountAutoCompleteQuery(
        DimensionLedgerAccountType _excludeType1,
        DimensionLedgerAccountType _excludeType2,
        DimensionValue       _filterValue,
        DimensionValue      _lastPagedValue)
    {
        Query mainAccountLookupQueryLocal = super(DimensionLedgerAccountType::Total, DimensionLedgerAccountType::Total, _filterValue, _lastPagedValue);

        QueryBuildDataSource mainAccountQbds = mainAccountLookupQueryLocal.dataSourceTable(tableNum(MainAccount));

        this.applyMainAccountPostingTypeRanges(mainAccountQbds);

        return mainAccountLookupQueryLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMainAccountPostingTypeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies main account type ranges on the provided main account query build data source.
    /// </summary>
    /// <param name = "_mainAccountQbds">
    /// The <c>QueryBuildDataSource</c> instance for <c>MainAccount</c>.
    /// </param>
    protected void applyMainAccountPostingTypeRanges(QueryBuildDataSource _mainAccountQbds)
    {
        str criteria = strfmt('(%1.Type != %2)', _mainAccountQbds.name(),
                                            enum2int(DimensionLedgerAccountType::Total));

        if (!showAllValues)
        {
            if (parameters.ReconciliationMethod == CostReconciliationMethod::MainAccountCategory)
            {
                if (isInventoryPostingType)
                {
                    criteria = strfmt('%1 && (%2.AccountCategoryRef == %3)', criteria,
                                                                            _mainAccountQbds.name(),
                                                                            parameters.InventoryAccountCategoryRef);
                }
                else if (isWipPostingType)
                {
                    criteria = strfmt('%1 && (%2.AccountCategoryRef == %3)', criteria,
                                                                            _mainAccountQbds.name(),
                                                                            parameters.WIPAccountCategoryRef);
                }
            }
            else
            {
                if (isInventoryPostingType)
                {
                    reconciliationMethodStrategy.addInventoryMainAccountRanges(_mainAccountQbds);
                }
                else if (isWipPostingType)
                {
                    reconciliationMethodStrategy.addWIPMainAccountRanges(_mainAccountQbds);
                }
            }
        }

        _mainAccountQbds.addRange(fieldNum(MainAccount, Type)).value(strfmt('(%1)', criteria));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmPostingType(LedgerPostingType _postingType = postingType)
    {
        if (!prmIsDefault(_postingType))
        {
            isWipPostingType = InventPosting::isWIPPostingType(_postingType);
            isInventoryPostingType = InventPosting::isInventoryPostingType(_postingType);
        }
        return super(_postingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        parameters = CostParameters::find();
        reconciliationMethodStrategy = CostReconciliationMethodStrategy::newFromParameters();

        isWipPostingType = InventPosting::isWIPPostingType(this.parmPostingType());
        isInventoryPostingType = InventPosting::isInventoryPostingType(this.parmPostingType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostLedgerDimensionPostingTypeAccountController construct()
    {
        return new CostLedgerDimensionPostingTypeAccountController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>