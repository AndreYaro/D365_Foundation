<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtHierarchy_Invent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtHierarchy_Invent</c> class is responsible for managing the Inventory hierarchy.
/// </summary>
/// <remarks>
///    The <c>PrintMgmtHierarchy_Invent</c> class manages the default hierarchy for the inventory module.
///    It manages print management data for transactions and the entire module level.
/// </remarks>
public class PrintMgmtHierarchy_Invent extends PrintMgmtHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodesImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds valid nodes for the <c>PrintMgmtHierarchy_Sales</c> class.
    /// </summary>
    /// <returns>
    ///    A list of <c>PrintMgmtNodeType</c> enumeration values that specify the valid nodes for the
    ///    <c>PrintMgmtHierarchy_Sales</c> class hierarchy.
    /// </returns>
    /// <remarks>
    ///    The valid nodes for this hierarchy are <c>PrintMgmtNode_Invent</c>, <c>PrintMgmtNode_CustTable</c>,
    ///    <c>PrintMgmtNode_SalesTable</c> and <c>PrintMgmtNode_InventTransferTable</c>.
    /// </remarks>
    protected List getNodesImplementation()
    {
        List supportedNodes = new List(Types::Enum);

        // Add allowable nodes for this hierarchy
        supportedNodes.addEnd(PrintMgmtNodeType::Invent);
        supportedNodes.addEnd(PrintMgmtNodeType::CustTable);
        supportedNodes.addEnd(PrintMgmtNodeType::InventTransferTable);
        supportedNodes.addEnd(PrintMgmtNodeType::SalesTable);

        return supportedNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the parent node instance based on the information provided.
    /// </summary>
    /// <param name="_nodeInstance">
    ///    The instance of the <c>PrintMgmtNodeInstance</c> class for which the parent is being requested.
    /// </param>
    /// <param name="_docType">
    ///    The <c>PrintMgmtDocumentType</c> enumeration value that is used to determine the appropriate parent.
    /// </param>
    /// <returns>
    ///    An instance of the parent <c>PrintMgmtNodeInstance</c> class; otherwise, a null result.
    /// </returns>
    /// <remarks>
    ///    The parent returned can vary on the table being referenced by the <paramref name="_nodeInstance" />
    ///    parameter and the <paramref name="_docType" /> parameter being requested.
    /// </remarks>
    protected PrintMgmtNodeInstance getParentImplementation(PrintMgmtNodeInstance _nodeInstance, PrintMgmtDocumentType _docType)
    {
        // Find the appropriate parent
        PrintMgmtNodeInstance result;
        SalesTable salesTable;

        result = new PrintMgmtNodeInstance();

        // Get the node instance type
        switch (_nodeInstance.parmNodeDefinition().getNodeType())
        {
            case PrintMgmtNodeType::SalesTable:
                salesTable = _nodeInstance.parmReferencedTableBuffer();
                if (salesTable.CustAccount)
                {
                    result.parmReferencedTableBuffer(salesTable.selectRefRecord(fieldNum(SalesTable, CustAccount)));
                    result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                    break;
                }
                //fallthrough by intention
            case PrintMgmtNodeType::CustTable:  //fallthrough
            case PrintMgmtNodeType::InventTransferTable:
                // No record to reference, but there is another node in the hierarchy
                result.parmReferencedTableBuffer(null);
                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::Invent));
                break;
            case PrintMgmtNodeType::Invent:
                // When no parent is present, return null
                result = null;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PrintMgmtHierarchy_Invent</c> class.
    /// </summary>
    /// <remarks>
    ///    Call the <c>construct</c> method of the <c>PrintMgmtHierarchy</c> class and pass the appropriate
    ///    hierarchy type in order to construct this class.
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PrintMgmtHierarchy_Invent construct()
    {
        return new PrintMgmtHierarchy_Invent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>