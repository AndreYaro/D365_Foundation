<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXSeedData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX seed data.
/// </summary>
[SysObsolete("This class is deprecated. Use RetailCDXSeedDataBase instead.", true, 30\06\2020)]
abstract class RetailCDXSeedData
{
    container channelFieldNames;
    container axFieldNames;

    str channelTableSchemaName;
    str defaultChannelTableSchemaName;
    str channelTableName;
    TableName axTableName;

    RetailConnSubJobId subjobID;
    container jobIDContainer;

    RefRecId channelSchemaRecID;

    FieldName replicationCounterFieldName;
    TableName tempDBTableName;

    List subjobList;
    ClassName seedDataClassName;

    boolean isUpload;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendFieldMapping</Name>
				<Source><![CDATA[
    private void appendFieldMapping()
    {
        RetailCDXSeedDataSubJob subjobCreation;
        ;

        this.fillChannelSideInfo();

        subjobCreation = new RetailCDXSeedDataSubJob();

        subjobCreation.paramSubJobID(subjobID);
        subjobCreation.paramChannelFieldNames(channelFieldNames);
        subjobCreation.paramAXFieldNames(axFieldNames);
        subjobCreation.paramIsUpload(isUpload);

        subjobCreation.appendFieldMapping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates job.
    /// </summary>
    abstract protected void createJob()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubJob</Name>
				<Source><![CDATA[
    private void createSubJob()
    {
        RetailCDXSeedDataSubJob subjobCreation;
        ;

        this.fillChannelSideInfo();

        subjobCreation = new RetailCDXSeedDataSubJob();

        subjobCreation.paramJobIDs(jobIDContainer);
        subjobCreation.paramSubJobID(subjobID);
        subjobCreation.paramSubJobName(subjobID);
        subjobCreation.paramChannelTableSchemaName(channelTableSchemaName);
        subjobCreation.paramChannelTableName(channelTableName);
        subjobCreation.paramAXTableName(axTableName);
        subjobCreation.paramChannelFieldNames(channelFieldNames);
        subjobCreation.paramAXFieldNames(axFieldNames);
        subjobCreation.paramChannelSchema(channelSchemaRecID);

        if (isUpload)
        {
            subjobCreation.paramIsUpload(isUpload);
            subjobCreation.paramTempDBTableName(tempDBTableName);
            subjobCreation.paramReplicationCounterFieldName(replicationCounterFieldName);
        }

        subjobCreation.Run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillChannelSideInfo</Name>
				<Source><![CDATA[
    private void fillChannelSideInfo()
    {
        int i;
        FieldName fieldName;
        ;

        if (!channelTableName)
        {
            channelTableName = strUpr(axTableName);
        }

        if (conLen(channelFieldNames) <= 0)
        {
            for (i = 1; i <= conLen(axFieldNames); ++i)
            {
                fieldName = conPeek(axFieldNames, i);
                fieldName = strUpr(fieldName);
                channelFieldNames += fieldName;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubJobList</Name>
				<Source><![CDATA[
    private List getSubJobList()
    {
        return subjobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization.
    /// </summary>
    abstract protected void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubjobList</Name>
				<Source><![CDATA[
    private void loadSubjobList(ClassName _seedDataClassName)
    {
        DictClass dc = new DictClass(className2Id(_seedDataClassName));
        int methodCount;
        int i;
        MethodName methodName;
        str prefix;

        methodCount = dc.objectMethodCnt();

        for (i = 1; i <= methodCount; ++i)
        {
            methodName = dc.objectMethod(i);
            prefix = subStr(methodName, 1, 2);

            if (prefix == 'C_' || prefix == 'A_')
            {
                subjobList.addEnd(methodName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        subjobList = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParameters</Name>
				<Source><![CDATA[
    private void resetParameters()
    {
        channelFieldNames = conNull();
        axFieldNames = conNull();

        channelTableSchemaName = defaultChannelTableSchemaName;
        channelTableName = '';
        axTableName = '';

        subjobID = '';
        jobIDContainer = conNull();

        replicationCounterFieldName = '';
        tempDBTableName = '';
        isUpload = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddDummyChannelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds dummy tables to data base for this schema.
    /// </summary>
    /// <param name="_channelSchemaRecId">
    /// Channel schema rec id.
    /// </param>
    public static void AddDummyChannelTable(RefRecId _channelSchemaRecId)
    {
        #RetailCDXCodeGen

        int i;
        RetailConnTableName tableName = #DummyChannelTableName;
        RetailConnFieldName fieldName;

        RetailConnLocationDesignTable channelTable;
        RetailConnLocationDesignTableField channelField;

        channelTable = RetailConnLocationDesignTable::find(
            _channelSchemaRecId,
            #DummyChannelTableName);

        if (!channelTable)
        {
            channelTable.initValue();
            channelTable.RetailConnChannelSchema = _channelSchemaRecId;
            channelTable.locationTableName = tableName;
            channelTable.insert();
        }

        for (i = 1; i <= 40; ++i)
        {
            if (i < 10)
            {
                fieldName = strFmt('C0%', i);
            }
            else
            {
                fieldName = strFmt('C%', i);
            }

            if (!RetailConnLocationDesignTableField::exist(_channelSchemaRecId, tableName, fieldName))
            {
                channelField.initValue();
                channelField.RetailConnChannelSchema = _channelSchemaRecId;
                channelField.locationTableName = tableName;
                channelField.fieldName = fieldName;
                channelField.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonFunctionalSubjob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds non-functional subjobs to support previous version.
    /// </summary>
    /// <param name="_axTableName">
    /// Ax Table name.
    /// </param>
    /// <param name="_axFieldNames">
    /// Ax field name.
    /// </param>
    /// <param name="_channelSchemaRecId">
    /// Channel schema rec id.
    /// </param>
    /// <param name="_jobIdContainer">
    /// Jobs for which this table contains related information
    /// </param>
    public static void addNonFunctionalSubjob(str _axTableName, container _axFieldNames, RefRecId _channelSchemaRecId, container _jobIdContainer = [''])
    {
        #RetailCDXCodeGen
        RetailCDXSeedDataSubJob subjobCreation = new RetailCDXSeedDataSubJob();
        container channelFieldNameContainer;
        int i;
        str fieldName;
        str subjobId;
        RetailConnChannelSchema channelSchema;
        str suffix;

        select SchemaType from channelSchema where channelSchema.RecId == _channelSchemaRecId;

        switch (channelSchema.SchemaType)
        {
            case RetailConnChannelSchemaTypeEnum::AX63:
                suffix = '_AX63';
                break;
            case RetailConnChannelSchemaTypeEnum::AX62POS:
                suffix = '_AX62';
                break;
            case RetailConnChannelSchemaTypeEnum::AX61POS:
                suffix = '_AX61';
                break;
            case RetailConnChannelSchemaTypeEnum::AX5POS:
                suffix = '_AX5';
                break;
        }

        for ( i = 1 ; i <= conLen(_axFieldNames) ; i++ )
        {
            if (i < 10)
            {
                fieldName = strFmt('C0%1', i);
            }
            else
            {
                fieldName = strFmt('C%1', i);
            }

            channelFieldNameContainer += fieldName;
        }

        subjobId = 'NonFn_'+_axTableName+suffix;

        subjobCreation.paramJobIDs(_jobIdContainer);
        subjobCreation.paramSubJobID(subjobId);
        subjobCreation.paramSubJobName(subjobId);
        subjobCreation.paramChannelTableName(#DummyChannelTableName);
        subjobCreation.paramAXTableName(_axTableName);
        subjobCreation.paramChannelFieldNames(channelFieldNameContainer);
        subjobCreation.paramAXFieldNames(_axFieldNames);
        subjobCreation.paramChannelSchema(_channelSchemaRecId);
        subjobCreation.paramReplicateDataAreaID(false);
        subjobCreation.paramForReferenceOnly(true);
        subjobCreation.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates seed data for passed class.
    /// </summary>
    /// <param name="_seedDataClassName">
    /// Seed data class name.
    /// </param>
    public static void run(ClassName _seedDataClassName)
    {
        DictClass dc = new DictClass(className2Id(_seedDataClassName));
        ListEnumerator subjobEnumerator;
        MethodName subjobMethod;
        RetailCDXSeedData seedDataClass;
        ;

        seedDataClass = dc.makeObject();
        seedDataClass.initialize();
        seedDataClass.loadSubJobList(_seedDataClassName);

        seedDataClass.createJob();

        subjobEnumerator = seedDataClass.getSubJobList().getEnumerator();

        while (subjobEnumerator.moveNext())
        {
            subjobMethod = subjobEnumerator.current();

            if (subStr(subjobMethod, 1, 2) == 'C_')
            {
                seedDataClass.resetParameters();
                dc.callObject(subjobMethod, seedDataClass);
                seedDataClass.createSubJob();
            }
        }

        subjobEnumerator.reset();

        while (subjobEnumerator.moveNext())
        {
            subjobMethod = subjobEnumerator.current();

            if (subStr(subjobMethod, 1, 2) == 'A_')
            {
                seedDataClass.resetParameters();
                dc.callObject(subjobMethod, seedDataClass);
                seedDataClass.appendFieldMapping();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllSeedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear all CDX seed data from AX database.
    /// </summary>
    public static void clearAllSeedData()
    {
        RetailConnSchedulerJobTable schedulerJob;
        RetailConnSchedulerSubjobTable schedulerSubJob;
        RetailConnSchedulerJobLine schedulerJobLine;
        RetailConnSchedulerSubjobFieldList fieldList;
        RetailConnLocationDesignTable designTable;
        RetailConnLocationDesignTableField designTableField;
        RetailConnScheduleJobMapping scheduleJobMapping;
        RetailCDXScheduleDataGroup scheduleDataGroup;
        RetailConnSchedule schedule;
        RetailCDXChangeTrackingSQL ctSql;
        RetailCDXChangeTrackingQueue ctQueue;
        RetailCdxChannelSpecificTable channelSpecificTable;
        RetailCdxDataDistributionQuery ddQuery;
        RetailCdxDataDistributionQueryFilter ddFileter;
        RetailConnChannelSchema channelSchema;

        delete_from schedulerJobLine;
        schedulerJob.skipDeleteActions(true);
        delete_from schedulerJob;
        delete_from fieldList;
        delete_from schedulerSubJob;
        delete_from designTable;
        delete_from designTableField;
        delete_from scheduleJobMapping;
        delete_from scheduleDataGroup;
        delete_from schedule;
        delete_from ctSql;
        delete_from ctQueue;
        delete_from channelSpecificTable;
        delete_from ddQuery;
        delete_from ddFileter;
        delete_from channelSchema;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>