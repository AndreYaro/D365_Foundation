<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyCardTransferBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailLoyaltyCardTransferBalance</c> class is responsible for transferring points from selected blocked loyalty card
/// to active loyalty card.
/// </summary>
class RetailLoyaltyCardTransferBalance extends RunBaseBatch implements BatchRetryable
{
    RetailLoyaltyCard loyaltyCardSource;
    RetailLoyaltyCardNumber loyaltyCardNumberDestination;

    DialogField dlgLoyaltyCardNumberSource;
    DialogField dlgLoyaltyCardNumberDestination;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        loyaltyCardNumberDestination
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@Retail:RetailTransferBalanceReplacementCardButton";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        eventSource.EventWriteLoyaltyCardTrfBalanceDialog(loyaltyCardSource.RecId);

        DialogRunbase dialog = super();
        dlgLoyaltyCardNumberSource = dialog.addFieldValue(extendedTypeStr(RetailLoyaltyCardNumber), loyaltyCardSource.CardNumber, "@SYS4004418", "@SYS4004417");
        dlgLoyaltyCardNumberSource.allowEdit(false);
        dlgLoyaltyCardNumberDestination = dialog.addFieldValue(extendedTypeStr(RetailLoyaltyCardNumber), loyaltyCardNumberDestination, "@SYS4009770", "@SYS4009771");
        dlgLoyaltyCardNumberDestination.value('');
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after dialog() is called, making it possible to override methods on the dialog.
    /// </summary>
    /// <param name="dialog">
    /// The <c>Dialog</c> containing the fields to override methods on.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);
        dialog.formRun().controlMethodOverload(true);
        dialog.formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the source loyalty card number dialog field.
    /// </summary>
    public void fld2_1_lookup()
    {
        TableLookup_RU          sysTableLookup; 
        Query                   query = new Query(); 
        QueryBuildDataSource    queryBuildDataSource; 
        QueryBuildDataSource    qbdsReplacementCards;
        QueryBuildRange         queryBuildRange;  

        sysTableLookup = TableLookup_RU::newParameters(tablenum(RetailLoyaltyCard), dlgLoyaltyCardNumberDestination.control()); 
        queryBuildDataSource = query.addDataSource(tablenum(RetailLoyaltyCard)); 

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailLoyaltyCard, CardTenderType));
        queryBuildRange.value(SysQuery::valueNot(RetailLoyaltyTenderTypeBase::Blocked));
        queryBuildRange.status(RangeStatus::Hidden);

        // Do not show the cards which are replacement cards for other loyalty cards.
        qbdsReplacementCards = queryBuildDataSource.addDataSource(tablenum(RetailLoyaltyCard));
        qbdsReplacementCards.relations(true);
        qbdsReplacementCards.joinMode(JoinMode::NoExistsJoin);

        sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, CardNumber));
        sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, CardTenderType));
        sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, Party)); 
        
        sysTableLookup.addSelectionField(fieldnum(RetailLoyaltyCard, CardNumber)); 

        sysTableLookup.parmQuery(query); 
        sysTableLookup.parmUseLookupValue(true);
        sysTableLookup.performFormLookup();

        eventSource.EventWriteOpenlookupOnSourceLoyaltyCard(funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates destination loyalty card number value
    /// </summary>
    /// <returns>
    /// true if the selected value is allowed; otherwise, false.
    /// </returns>
    public boolean fld2_1_validate()
    {
        boolean ret = RetailLoyaltyRewardPointsTransfer::validateDestinationLoyaltyCard(dlgLoyaltyCardNumberDestination.value());
        RetailLoyaltyCard loyaltyCard = RetailLoyaltyCard::findByCardNumber(dlgLoyaltyCardNumberDestination.value());
        RetailLoyaltyCard replacedLoyaltyCard = RetailLoyaltyCard::findByReplacementCard(loyaltyCard.RecId);

        // Should not allow to replace with destination card if it is already replacing other card.
        if (ret && replacedLoyaltyCard.ReplacementCard)
        {
            eventSource.EventWriteReplacementCancelled(loyaltyCard.RecId);
            ret = checkFailed(strFmt("@Retail:CannotReplaceMorethanOneCardsWithSingleLoyaltyCard", dlgLoyaltyCardNumberDestination.value(), replacedLoyaltyCard.CardNumber));
        }

        if (ret) 
        {
            RetailSharedParameters rsp;
            select BlockTransferBetweenDifferentLoyalty from rsp;

            if (rsp.BlockTransferBetweenDifferentLoyalty)
            {
                RetailLoyaltyCard src, dest;
                RetailLoyaltyCardTier t1, t2;

                select RecId from src where src.CardNumber == dlgLoyaltyCardNumberSource.value();
                select RecId from dest where dest.CardNumber == dlgLoyaltyCardNumberDestination.value();

                select count(RecId) from t1
                    join t2 where t1.AFFILIATION == t2.AFFILIATION
                        && (t1.LOYALTYCARD == src.RecId && t2.LOYALTYCARD == dest.RecId);
                
                if(t1.RecId == 0)
                {
                    eventSource.EventWriteTrfPointsFailedBetweenDiffLoyaltyTiers(src.RecId, dest.RecId, t1.RecId, t2.RecId);
                    ret = checkFailed("@Retail:RetailBlockTransferBetweenDifferentLoyaltyError");
                }
            }
        }

        return ret; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        loyaltyCardNumberDestination = dlgLoyaltyCardNumberDestination.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize form parameters from args
    /// </summary>
    /// <param name="_args">
    /// The arguments object representing a record of destination loyalty card of <c>RetailLoyaltyCard</c> table
    /// </param>
    /// <returns>
    /// True if arguments were initialized successfully, otherwise returns false
    /// </returns>
    public boolean initFromArgs(Args _args)
    {
        boolean ret = false;
        this.init();

        if (_args && _args.dataset() == tablenum(RetailLoyaltyCard))
        {
            loyaltyCardSource  = _args.record();

            if (RetailLoyaltyRewardPointsTransfer::validateSourceLoyaltyCard(loyaltyCardSource.CardNumber,false,true))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,loyaltyCardSource];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailLoyaltyRewardPointsTransfer::transferLoyaltyPointsFromBlockedCard(loyaltyCardSource.CardNumber, loyaltyCardNumberDestination);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        RetailLoyaltyCard dummyLoyaltyCard;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, dummyLoyaltyCard] = packedClass;
                if (!loyaltyCardSource)
                {
                    loyaltyCardSource = dummyLoyaltyCard;
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RetailLoyaltyCardTransferBalance construct()
    {
        return new RetailLoyaltyCardTransferBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RetailLoyaltyCardTransferBalance  loyaltyTransferBalance = RetailLoyaltyCardTransferBalance::newFormArgs(_args);

        if (loyaltyTransferBalance.prompt())
        {
            eventSource.EventWriteRunOperationForLoyaltyTransferBalance(_args.record().RecId);
            loyaltyTransferBalance.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>RetailLoyaltyCardTransferBalance</c> dialog
    /// </summary>
    /// <param name="_args">
    /// List of arguments. Record to destination loyalty card of <c>RetailLoyaltyCardTransferBalance</c> table should be set
    /// </param>
    /// <returns>
    /// Returns initialized <c>RetailLoyaltyCardTransferBalance</c> dialog
    /// </returns>
    protected static RetailLoyaltyCardTransferBalance newFormArgs(Args _args)
    {
        RetailLoyaltyCardTransferBalance loyaltyTransferBalance;
        loyaltyTransferBalance = RetailLoyaltyCardTransferBalance::construct();

        if (!loyaltyTransferBalance.initFromArgs(_args))
        {
            throw(error(Error::wrongUseOfFunction(funcName())));
        }
        return loyaltyTransferBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>