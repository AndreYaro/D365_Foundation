<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTax25RegTree
{
    #MACROLIB.resAppl
    #define.TypeNotExists(244)

    #define.RegCommon(866)
    #define.RegTotal(824)

    ImageListAppl_RTax25Fields      imageList;
    TmpRTax25RegisterDependences    regDependencies;

    FormTreeControl                 tree;
    FormTreeItem                    item;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLegend</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void buildLegend(FormListControl _listView)
    {
        _listView.addItem(new FormListItem("@GLS104377", imageList.image(#RegTotal)));
        _listView.addItem(new FormListItem("@GLS104777", imageList.image(#RegCommon)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void buildTree()
    {
        TmpRTax25RegisterDependences childDependency;

        if (! RTax25RegCalcController::checkDependences())
        {
            throw error("@GLS107216");
        }
        this.loadDependencies();

        childDependency.setTmpData(regDependencies);
        while select regDependencies
            where regDependencies.ChildRegisterType == #TypeNotExists
        notexists join childDependency
            where childDependency.ChildRegisterType == regDependencies.ParentRegisterType
        {
            this.createNode(0, regDependencies.ParentRegisterType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    private void createNode(int                 _parentIdx,
                    RTax25RegisterType  _type)
    {
        TmpRTax25RegisterDependences    dependency;
        int                             idx;

        dependency.setTmpData(regDependencies);
        select count(RecId) from dependency
            where dependency.ParentRegisterType == _type &&
                  dependency.ChildRegisterType  != #TypeNotExists;

        item = new FormTreeItem();
        item.children(any2int(dependency.RecId));

        select firstonly dependency
            where dependency.ParentRegisterType == _type;

        if (dependency.ParentRegisterId)
        {
            item.text(strfmt("%1 (%2)", _type, dependency.ParentRegisterId));
            item.stateBold(true);
        }
        else
        {
            item.text(enum2str(_type));
        }

        item.data(_type);
        item.image(this.image(dependency));
        item.selectedImage(item.image());

        idx = tree.addItem(_parentIdx, 0, item);
        while select dependency
            where dependency.ParentRegisterType == _type &&
                  dependency.ChildRegisterType  != #TypeNotExists
        {
            this.createNode(idx, dependency.ChildRegisterType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ImageRes image(TmpRTax25RegisterDependences  _dependency)
    {
        RTax25ProfitTotalsSetup profitTotalsSetup;
        ImageRes                ret;

        if (_dependency.ParentRegisterId)
        {
            select firstonly RecId from profitTotalsSetup
                where profitTotalsSetup.RegisterId == _dependency.ParentRegisterId;
        }

        if (profitTotalsSetup)
        {
            ret = imageList.image(#RegTotal);
        }
        else
        {
            ret = imageList.image(#RegCommon);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependencies</Name>
				<Source><![CDATA[
    private void loadDependencies()
    {
        RTax25RegType       regType;
        RTax25RegisterType  registerType;

        container       childRegisters;
        DictEnum        dictEnum = new DictEnum(enumnum(RTax25RegisterType));
        int             idx, i;

        for (idx = 0; idx < dictEnum.values(); idx++)
        {
            registerType = dictEnum.index2Value(idx);
            childRegisters = connull();
            try
            {
                regType =  RTax25RegType::construct(registerType);
                childRegisters = regType.childRegisters();
            }
            catch (Exception::Error)
            {
                error(strfmt("@GLS104769", registerType));
                continue;
            }

            regDependencies.clear();
            regDependencies.ParentRegisterType = regType.registerType();
            regDependencies.ParentRegisterId = RTax25RegisterTable::registerType2Id(
                                                    regDependencies.ParentRegisterType);
            regDependencies.ChildRegisterType = #TypeNotExists;
            regDependencies.insert();

            for (i = 1 ; i <= conlen(childRegisters) ; i++)
            {
                regDependencies.ChildRegisterType = conpeek(childRegisters, i);
                regDependencies.ChildRegisterId = RTax25RegisterTable::registerType2Id(
                                                        regDependencies.ChildRegisterType);
                regDependencies.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormTreeControl _formTree)
    {
        tree = _formTree;

        imageList = new ImageListAppl_RTax25Fields();
        tree.setImagelist(imageList.imageList());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>