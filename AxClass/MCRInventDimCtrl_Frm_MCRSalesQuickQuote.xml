<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRInventDimCtrl_Frm_MCRSalesQuickQuote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRInventDimCtrl_Frm_MCRSalesQuickQuote</c> is a child of the <c>InventDimCtrl_Frm_QuickQuote</c> class
/// and handles the invendory dimension form control for sales quick quote functionality.
/// </summary>
class mcrInventDimCtrl_Frm_MCRSalesQuickQuote extends InventDimCtrl_Frm_QuickQuote
{
    FormDataSource          localTmpFrmVirtual_DS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds to the extended class so that <c>MCRSalesQuickQuote</c> will
    /// only add a group by if needed.
    /// </summary>
    /// <param name = "_doResearch">Determines if the main data source should automatically be refreshed; optional.</param>
    public void buildQuery(boolean _doResearch = true)
    {
        // Method gets called upon initialization of the class, only call once
        //  the initQuery method is called
        if (origQuery)
        {
            boolean sortfield;
            ListEnumerator listEnumerator = InventDim::dimFieldListEnumerator();
            this.modifyQuery();

            QueryBuildDataSource queryBuildDsDim = this.getQuery().dataSourceTable(tableNum(InventDim));

            queryBuildDsDim.sortClear();
            queryBuildDsDim.orderMode(OrderMode::GroupBy);
            // Loop over all fields in the InventoryDimensions field group on the InventDim table
            while (listEnumerator.moveNext())
            {
                FieldId dimFieldId = listEnumerator.current();
                FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                // If the dimension is visible in the grid, group by it
                if (dimParmVisibleGrid.(dimParmFieldId))
                {
                    queryBuildDsDim.addSortField(dimFieldId);
                    sortfield = true;
                }
            }

            // Clear the group by if no dimensions are displayed in the grid
            if (!sortfield)
            {
                queryBuildDsDim.sortClear();
                queryBuildDsDim.orderMode(OrderMode::OrderBy);
            }

            if (_doResearch)
            {
                localTmpFrmVirtual_DS.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the parent class to display dimensions.
    /// </summary>
    /// <remarks>
    /// The parent class calls logic that disables the
    /// ability to show color, size, and config.  Removed this
    /// call so that these invent dims can now be shown.
    /// </remarks>
    public void initFromCaller()
    {
        InventDimParm dimParmVisibleGridLocal;

        dimParmVisibleGridLocal.ItemIdFlag = true;
        dimParmVisibleGridLocal.InventSiteIdFlag = true;
        dimParmVisibleGridLocal.setAllProductDimensions();

        this.parmDimParmVisibleGrid(dimParmVisibleGridLocal, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <param name="_localTmpFrmVirtual_DS">
    /// Datasource on the <c>MCRSalesQuickQuote</c> form.
    /// </param>
    /// <remarks>
    /// Have to execute an aggregate function on all fields since
    ///     the form groups by item ID.
    /// </remarks>

    public void initQuery(FormDataSource _localTmpFrmVirtual_DS)
    {
        localTmpFrmVirtual_DS = _localTmpFrmVirtual_DS;

        origQuery = this.getQuery();
        queryBuildDs = origQuery.dataSourceTable(tableNum(MCRSalesQuickQuoteSumUnion));

        queryBuildDs.addSelectionField(fieldNum(MCRSalesQuickQuoteSumUnion, AvailPhysical), SelectionField::Sum);
        queryBuildDs.addSelectionField(fieldNum(MCRSalesQuickQuoteSumUnion, PdsCWAvailPhysical), SelectionField::Sum);

        this.modifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    private Query getQuery()
    {
        // If queryRun object is set use it to access the datasource on related form
        if (localTmpFrmVirtual_DS.queryRun())
        {
            return localTmpFrmVirtual_DS.queryRun().query();
        }
        else
        {
            return localTmpFrmVirtual_DS.query();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query to group by item ID and dependent fields.
    /// </summary>
    public void modifyQuery()
    {
        QueryBuildDataSource qbds = this.getQuery().dataSourceTable(tableNum(InventItemDimTmpFilter));
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(InventItemDimTmpFilter,ItemId));

        qbds = this.getQuery().dataSourceTable(tableNum(MCRSalesQuickQuoteSumUnion));
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(MCRSalesQuickQuoteSumUnion,ItemId));

        qbds = this.getQuery().dataSourceTable(tableNum(EcoResProductTranslation));
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(EcoResProductTranslation,Name));

        qbds = this.getQuery().dataSourceTable(tableNum(InventTableModule));
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(InventTableModule,UnitId));

        qbds = this.getQuery().dataSourceTable(tableNum(PdsCatchWeightItem));
        qbds.sortClear();
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(PdsCatchWeightItem,PdsCWUnitId));

        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && EcoResProductParameters::find().UseFallbackTranslation)
        {
            qbds = this.getQuery().dataSourceTable(tableNum(EcoResProductTranslationFallbackView));
            qbds.sortClear();
            qbds.orderMode(OrderMode::GroupBy);
            qbds.addSortField(fieldNum(EcoResProductTranslationFallbackView,Name));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRInventDimCtrl_Frm_MCRSalesQuickQuote construct()
    {
        return new MCRInventDimCtrl_Frm_MCRSalesQuickQuote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of this class to be used in Forms.
    /// </summary>
    /// <param name="_formRun">
    /// The Form where controls are maintained.
    /// </param>
    /// <returns>
    /// An instance of this class to be used in a Form.
    /// </returns>
    public static MCRInventDimCtrl_Frm_MCRSalesQuickQuote newFromForm(FormRun _formRun)
    {
        MCRInventDimCtrl_Frm_MCRSalesQuickQuote   inventDimCtrl = MCRInventDimCtrl_Frm_MCRSalesQuickQuote::construct();
        InventDimAxFormAdapter                  adapter = InventDimAxFormAdapter::newFromForm(_formRun);
        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>