<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayAdjustIn</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplayAdjustIn</c> class is used to display Adjust In form in RF device.
/// </summary>
[SysObsolete('This class has been refactored. Refer class <c>InventProcessGuideAdjustInController</c> instead.', false, 30\06\2020),
WHSWorkExecuteMode(WHSWorkExecuteMode::AdjustmentIn)]
class WhsWorkExecuteDisplayAdjustIn extends WHSWorkExecuteDisplay
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlQty:
                Qty scannedQtyLimit = WHSParameters::find().ScannedQtyLimit;

                if (scannedQtyLimit &&
                    WHSWorkExecuteDisplay::str2numDisplay(_value) > scannedQtyLimit)
                {
                    return _control.fail("@WAX2770");
                }
                break;

            case _control is WhsControlLicensePlateId:
                var fieldValues = _control.parmContext().fieldValues;
                var controlData = _control.parmContext().controlData;
                if (!WHSLicensePlate::exist(_control.parmData()))
                {
                    if (!controlData.validateLicensePlateQty(_control.parmData()))
                    {
                        return _control.fail(strFmt("@WAX:Error_InvalidLicensePlateQuantity", _control.parmData()));
                    }
                    if (WMSLocation::exist(_control.parmData(), fieldValues.parmInventLocationId()))
                    {
                        return _control.fail(strFmt("@WAX:Error_LocationExists", _control.parmData()));
                    }

                    fieldValues.parmLicensePlateId(_control.parmData());
                    return true;
                }

                if (WHSLicensePlate::isParentLicensePlate(_control.parmData()))
                {
                    return _control.fail("@WAX3934");
                }

                if (!controlData.validateLicensePlateInLocation(_control.parmData(), true))
                {
                    if (!controlData.validateLicensePlateQty(_control.parmData()))
                    {
                        return _control.fail(strFmt("@WAX:Error_InvalidLicensePlateQuantity", _control.parmData()));
                    }
                            
                    fieldValues.parmLicensePlateId(_control.parmData());
                }
                else
                {
                    fieldValues.parmLicensePlateId(_control.parmData());
                    fieldValues.parmItemId(controlData.getItemId());
                    pass.insert(#ContainerType, WHSLicensePlate::find(fieldValues.parmLicensePlateId()).ContainerTypeCode);
                    return true;
                }

                break;

            case _control is WhsControlContainerType:
                WhsControlContainerType controlContainer = _control as WhsControlContainerType;
                controlContainer.initializeContainerType();

                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAdjustIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to Adjustment In form state.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <param name="_locationId">
    /// Location id to be shown in LocationId field, empty string by default.
    /// </param>
    /// <param name="_itemId">
    /// The adjusted item id, empty string by default.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildAdjustIn(container       _con,
                            str             _extraText = '',
                            WMSLocationId   _locationId = '',
                            ItemId          _itemId = '')
    {
        InventTable         inventTable;
        container           ret = _con;
        str                 finalLabel = _extraText ? _extraText : "@WAX1100";
        WMSLocation         location;
        WHSInventTable      whsInventTable;
        WHSInventStatusId   inventStatusId;
        WHSRFMenuItemTable  rfMenuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
        boolean             disableStatus;

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);
        }

        ret += [this.buildControl(#RFLabel, 'AdjustmentIn', finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];

        if (_locationId && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

            if (location.whsLocationIsLPControlled())
            {
                ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0, WHSRFMenuItemTable::generatedLPEnabled(pass.lookup(#MenuItem)))];

                if (rfMenuItemTable.DisplayContainerTypeCode)
                {
                    ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#AlreadyHaveLP));
                }
            }

            if (WHSLocationProfile::find(location.LocProfileId).DisplayMobileDeviceLocationLicensePlatePositioning)
            {
                this.buildLocationLicensePlatePositioning(ret);
            }

            pass.insert(#SystemPopulated, 1);

            ret += this.addLocationConfirmationControl(WHSWorkType::Adjustment, location);
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];

        if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

        ret = this.buildAdjustInTrackingDimensions(ret, inventTable.ItemId);

        ret += [this.buildControl(#RFText, #CurrentQty, "@WAX1147", 1, '', extendedTypeNum(Qty), '', 0, false)];
        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        if (pass.lookupNum(#Qty) &&
            WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Adjustment))
        {
            ret += this.addQtyVerificationControl(pass.lookupStr(#SelectedValueUOM));
        }

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM), true);

        if (pass.exists(#LicensePlateId)        &&
            pass.lookup(#LicensePlateId) != ''  &&
            WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(pass.lookup(#LicensePlateId)))
        {
            inventStatusId = this.getDefaultLPInventStatusId(pass.lookup(#LicensePlateId));
            disableStatus = true;
        }

        if (rfMenuItemTable.RFDisplayStatus)
        {
            if (inventStatusId)
            {
                pass.insert(#SelectedValue, inventStatusId);
                ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookup(#SelectedValue), false);
            }
            else
            {
                ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), !disableStatus);
            }
        }

        ret = this.buildAdjustmentType(ret, '', false, false, false, pass.lookupStr(#SelectedAdjustmentType));

        if (rfMenuItemTable.DisplayCountingReasonCode == WHSDisplayCountingReasonCode::Line)
        {
            ret = this.buildCountingReasonCode(ret, rfMenuItemTable.DefaultCountingReasonCode, rfMenuItemTable.EditCountingReasonCode);
        }
        else
        {
            pass.insert(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode, rfMenuItemTable.DefaultCountingReasonCode);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationLicensePlatePositioning</Name>
				<Source><![CDATA[
	private container buildLocationLicensePlatePositioning(container _ret)
    {
        _ret += [this.buildControl(#RFText,
                                   WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition,
								   "@WAX:LPPositionFormat",
                                   1,
                                   pass.lookupStr(WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition),
                                   extendedTypeNum(WHSLocationLicensePlatePosition),
                                   '',
                                   0,
                                   true)];

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = "")
    {
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::AdjustmentIn);
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        container               tmpFieldValues;
        boolean                 complete;
        WHSRFPassthrough        fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                 addCancel = true;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            pass.insert(#InventSiteId, InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId);
        }

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0,1:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                    addCancel = false;
                }
                if (pass.exists(#MenuItem))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData && !step)
                    {
                        con = this.buildAdjustIn(ret,
                                            '',
                                            fieldValues.lookupStr(#WMSLocationId),
                                            fieldValues.lookupStr(#ItemId));

                        con = this.updateModeStepPass(con, mode, step, pass);

                        step = 1;
                    }
                }
                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }
                    [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);
                    if (hasError && conPeek(conPeek(con, 3), #label) != "@WAX866")
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                }

                con = this.buildAdjustIn(ret,
                                            '',
                                            fieldValues.lookupStr(#WMSLocationId),
                                            fieldValues.lookupStr(#ItemId));

                WMSLocation wmsLocation = WMSLocation::find(pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId));

                if (pass.exists(#WMSLocationId))
                {
                    if (wmsLocation.whsLocationIsLPControlled()  &&
                        !pass.exists(#LicensePlateId))
                    {
                        fieldValues.insert(#LicensePlateId, '');
                    }

                    if (fieldValues.exists(#LicensePlateId) && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP &&
                        !pass.exists(#LicensePlateId))
                    {
                        pass.insert(#LicensePlateId, WHSLicensePlate::generateLicensePlateIdNoItem());
                        fieldValues.insert(#LicensePlateId, WHSLicensePlate::generateLicensePlateIdNoItem());
                    }
                }

                if (pass.exists(#SerialQty))
                {
                    fieldValues.insert(#Qty, 1);

                    if (!fieldValues.exists(#SerialId))
                    {
                        fieldValues.insert(#SerialId, '');
                    }
                }

				if (this.shouldDisplayLicensePlatePosition(fieldValues, wmsLocation))
                {
                    WHSLocationLicensePlatePosition locationLicensePlatePosition 
                        = WHSLocationLicensePlatePositioning::find(fieldValues.lookup(#LicensePlateId)).LicensePlatePosition;

					if (locationLicensePlatePosition)
                    {
                        fieldValues.insert(WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition, LocationLicensePlatePosition);
                    }
                }

                if (pass.exists(#Qty) && !fieldValues.exists(#QtyVerification))
                {
                    if (WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Adjustment))
                    {
                        fieldValues.insert(#QtyVerification, '');
                    }
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        this.validateCountingReasonCode(pass.lookupStr(#ItemId), pass.createInventDimFromPass().inventDimId);

                        // If Inventory status is not displayed need to resolve a default value
                        if (!WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
                        {
                            WHSInventStatusId defaultInventoryStatusId = WHSInventStatus::getDefaultInventStatus(pass.lookup(#InventLocationId)).InventStatusId;
                            if (defaultInventoryStatusId)
                            {
                                pass.insert(#InventoryStatus, defaultInventoryStatusId);
                            }
                        }

                        if (pass.exists(#InventoryStatus) && !WHSInvent::allowMixedStatus(pass.lookup(#InventoryStatus),
                                                                                            pass.lookup(#InventLocationId),
                                                                                            pass.lookup(#WMSLocationId)))
                        {
                            throw error("@WAX3389");
                        }

                        if (pass.parmLicensePlateId()
                            && WHSWorkTable::findByLicensePlate(pass.parmLicensePlateId()))
                        {
                            throw error("@WAX3837");
                        }

                        this.checkVolumetrics();

                        if (pass.parmLicensePlateId())
                        {
                            WHSLicensePlate::createLicensePlate(pass.parmLicensePlateId(), true, this.getDefaultContainerTypeCode());
                        }

                        this.createSerialNumber();

                        if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                            && !pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                        {
                            if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                            {
                                step = #CatchWeightTagCapture;
                                ret = conNull();
                                ret = this.buildCWTagCaptureAdjustIn(ret);
                                break;
                            }
                            else
                            {
                                // Insert nominal weight
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                                            PdsCatchWeight::inventQty(pass.lookup(#ItemId), pass.lookupNum(#Qty)));

                            }
                        }

                        this.createAdjustmentWork();

                        pass = this.resetPassthrough(con, false);
                        pass.insert(#WorkComplete, 1);
                        pass.remove(#AlreadyHaveLP);
                        con = conPoke(con, 2, pass.pack());
                        step = 0;
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                        ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case #CatchWeightTagCapture:
                ret = this.processCWTagCaptureAdjustIn(hasError, _con);
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisplayLicensePlatePosition</Name>
				<Source><![CDATA[
    private boolean shouldDisplayLicensePlatePosition(WhsrfPassthrough _fieldValues, WMSLocation _wmsLocation)
    {

        return WHSLocationProfile::find(_wmsLocation.LocProfileId).DisplayMobileDeviceLocationLicensePlatePositioning
               && _fieldValues.exists(#LicensePlateId) 
               && _fieldValues.parmLicensePlateId() != ''
               && WHSLicensePlate::getTotalQtyOnLicensePlate(_fieldValues.lookup(#LicensePlateId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialNumber</Name>
				<Source><![CDATA[
    protected void createSerialNumber()
    {
        if (pass.exists(#SerialId) && InventTable::find(pass.lookup(#ItemId)).isItemSerialNumberControlled())
        {
            InventSerial::findOrCreate(pass.lookupStr(#SerialId), pass.lookup(#ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentWork</Name>
				<Source><![CDATA[
    protected void createAdjustmentWork()
    {
        WHSInventAdjustmentCreateParameters params = this.createAdjustmentWorkParams();
        WHSInventAdjustmentCreate createAdj = WHSInventAdjustmentCreate::newFromParams(params);
        createAdj.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentWorkParams</Name>
				<Source><![CDATA[
    protected WHSInventAdjustmentCreateParameters createAdjustmentWorkParams()
    {
        WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();

        params.WorkUserId				= pass.lookupStr(#UserId);
        params.ItemId					= pass.lookup(#ItemId);
        params.InventDim				= pass.createInventDimFromPass();
        params.LicensePlateId			= pass.parmLicensePlateId();
        params.WmsLocationId			= pass.lookup(#WMSLocationId);
        params.InventLocationId			= pass.lookup(#InventLocationId);
        params.AdjustmentQty			= pass.lookupNum(#Qty);
        params.AdjustmentUnit			= pass.lookup(#UOM);
        params.AdjustmentTypeCode		= pass.lookup(#AdjustmentType);
        params.WorkCreatedBy			= WHSWorkUser::getWorkerEmployeeRecId(params.WorkUserId);
        params.InventCountingReasonCode = pass.lookupStr(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode);
        params.AdjustmentCatchWeight    = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
        params.LocationLicensePlatePosition = pass.lookupNum(WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition);

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVolumetrics</Name>
				<Source><![CDATA[
    private void checkVolumetrics()
    {
        if (pass.exists(#WMSLocationId)
            && pass.exists(#InventLocationId)
            && pass.exists(#ItemId)
            && pass.exists(#Qty)
            && pass.exists(#UOM)
            && !WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).AllowLocationOverflow)
        {
            WMSLocation location = WMSLocation::find(pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId));
            WHSLocationProfile locationProfile = WHSLocationProfile::find(location.LocProfileId);

            if (locationProfile.isVolumetricsEnabled())
            {
                WHSVolumetricsPutawayValidator validator = WHSVolumetricsPutawayValidator::newPutaway(
                    pass.lookup(#ItemId),
                    pass.createInventDimFromPass().inventDimId,
                    pass.lookupNum(#Qty),
                    pass.lookup(#UOM),
                    false); // don't allow split for adjustment

                if (pass.lookupStr(#ContainerType) != '')
                {
                    validator.parmContainerTypeCode(pass.lookupStr(#ContainerType));
                }

                validator.validateLocation(location, locationProfile);
                if (validator.validateLocationErrorMessage())
                {
                    throw error(validator.validateLocationErrorMessage());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCWTagCaptureAdjustIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the mobile device screen for capturing catch weight tags.
    /// </summary>
    /// <param name="_con">
    /// The current mobile device container.
    /// </param>
    /// <returns>
    /// An updated mobile device container with appropriate mobile device controls.
    /// </returns>
    private container buildCWTagCaptureAdjustIn(container _con)
    {
        container   ret = _con;

         if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);

            UnitOfMeasureSymbol uom = pass.lookup(#UOM);
            ItemId itemId = pass.lookup(#ItemId);
            Qty catchWeightTagQty;

            if (uom != WHSCatchWeightHelper::inventHandlingUnitId(itemId))
            {
                catchWeightTagQty = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                           uom,
                                                                           pass.lookupReal(pass.lookup(#Qty)),
                                                                           pass.createInventDimFromPass().inventDimId);
            
            }
            else
            {
                catchWeightTagQty = pass.lookupReal(pass.lookup(#Qty));
            }
         
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, catchWeightTagQty);
        }

        ret += this.buildCWTagCapture(ret, false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCWTagCaptureAdjustIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag capture display step for adjustments in.
    /// </summary>
    /// <param name="_hasError">
    /// True if mobile device screen has an error message; otherwise False.
    /// </param>
    /// <param name="_con">
    /// The current mobile device container being built.
    /// </param>
    /// <returns>
    /// An updated mobile device container.
    /// </returns>
    private container processCWTagCaptureAdjustIn(
        boolean     _hasError,
        container   _con)
    {
        WHSRFPassthrough fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        
        container ret = _con;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        container tmpFieldValues;
        [ret, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        boolean hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                // Create catch weight tag record
                this.createCatchWeightTagFromPass();
                
                // Remove current Tag Id and increment Tag Counter
                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                // Increment total catch weight value
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                            (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight)));

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);

                    step = 1;
                    ret = conNull();
                    ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);

                    ret = conNull();
                    ret = this.buildCWTagCaptureAdjustIn(ret);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>