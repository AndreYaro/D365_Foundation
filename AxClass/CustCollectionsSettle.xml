<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustCollectionsSettle</c> class helps perform settlement actions.
/// </summary>
class CustCollectionsSettle
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTransClosedOrMarked</Name>
				<Source><![CDATA[
    public static boolean anyTransClosedOrMarked(CustTrans _custTrans, CustTable _custTable, boolean _suppressWarnings)
    {
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        FormDataSource custTransDS = FormDataUtil::getFormDataSource(_custTrans);
        SpecTransManager specManager;
        List custTransMsg = new List(Types::String);
        List billsOfExchangeMsg = new List(Types::String);

        void displayMessages(List _messages, str _heading1, str _heading2)
        {
            ListEnumerator enumerator;

            if (_messages.elements())
            {
                warning(_heading1);
                warning(_heading2);
                enumerator = _messages.getEnumerator();
                while (enumerator.moveNext())
                {
                    warning(enumerator.current());
                }
            }
        }

        void addMessage(List _list)
        {
            _list.addEnd(strfmt("@SYS135079",
                    custTrans.AccountNum,
                    CustTable::find(custTrans.AccountNum).name(),
                    custTrans.company(),
                    custTrans.Voucher,
                    custTrans.TransDate,
                    custTrans.AmountCur));
        }

        if (_custTrans || custTransDS.anyMarked())
        {
            // If there are multiple marked records, get the first, otherwise use the single record
            if (custTransDS)
            {
                custTrans = custTransDS.getFirst(true) as CustTrans;
            }

            custTrans = custTrans ? custTrans : _custTrans;

            // Loop over associated CustTransOpen records
            specManager = SpecTransManager::newFromSpec(_custTable, false);

            while (custTrans)
            {
                if (custTrans.BillOfExchangeID)
                {
                    addMessage(billsOfExchangeMsg);
                }

                //If it's not closed
                if (custTrans.Closed == dateNull())
                {
                    while select custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId
                    {
                        // Check to see if it's already marked
                        if (specManager.existForOtherSpec(custTransOpen.company(), tablenum(CustTransOpen), custTransOpen.RecId))
                        {
                            addMessage(custTransMsg);
                        }
                    }
                }
                else
                {
                    addMessage(custTransMsg);
                }

                custTrans = custTransDS ? custTransDS.getNext() as CustTrans : null;
            }
        }

        if (!_suppressWarnings)
        {
            displayMessages(custTransMsg, "@SYS133158", "@SYS134946");
            displayMessages(billsOfExchangeMsg, "@SYS310561", "@SYS310562");
        }

        return custTransMsg.elements() || billsOfExchangeMsg.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markOpenTransForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the <c>CustOpenTrans</c> records for settlement using the <c>SpecTransManager</c> class.
    /// </summary>
    /// <param name="_custTrans">
    ///    A transaction tied to one or more open transactions.
    /// </param>
    /// <param name="_custTable">
    ///    The customer tied to the <c>CustTrans</c> record.
    /// </param>
     /// <summary>
    /// Marks <c>CustOpenTrans</c> table records for settlement using the <c>SpecTransManager</c> class.
    /// </summary>
    /// <param name="_custTrans">
    /// A transaction tied to one or more open transactions.
    /// </param>
    /// <param name="_custTable">
    /// The customer tied to the <c>CustTrans</c> table record.
    /// </param>
    private static void markOpenTransForSettlement(CustTrans _custTrans, CustTable _custTable)
    {
        CustTransOpen custTransOpen;
        CashDiscAmount discountAmount;

        CustVendSettleCalcDiscount settleHelper = CustVendSettleCalcDiscount::construct(SysModule::Cust);
        SpecTransManager specManager = SpecTransManager::newFromSpec(_custTable, false);

        // Get all the CustTransOpen for this CustTrans
        while select crossCompany custTransOpen
            where custTransOpen.RefRecId == _custTrans.RecId
        {
            // Check to see if it's already marked
            if (!specManager.exist(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId)
                && !specManager.existForOtherSpec(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId))
            {
                discountAmount = settleHelper.determineCashDiscAmountToTake(custTransOpen);
                specManager.insert(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId, custTransOpen.AmountCur, _custTrans.CurrencyCode, NoYes::No, discountAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the settlement of marked <c>CustTrans</c> records.
    /// </summary>
    /// <param name="_custTrans">
    ///    One or many marked <c>CustTrans</c> records.
    /// </param>
    /// <param name="_custTable">
    ///    The customer tied to the <c>CustTrans</c> records.
    /// </param>
    /// <param name="_element">
    ///    The form that called this method.
    /// </param>
    /// <param name="_markOnly">
    ///    true if the <c>CustOpenTrans</c> form should not be opened after marking the transactions or show
    ///    any warning dialog boxes.
    /// </param>
    /// <remarks>
    ///    The <c>settleCustTrans</c> method examines the <c>custTrans</c> value to find one or more marked
    ///    <c>CustTrans</c> records. For each of those, the method checks to make sure that it is not closed
    ///    and then calls the <c>markOpenTransForSettlement</c> method to do the remaining work. Then the
    ///    <c>CustOpenTrans</c> form is opened to show only items for the current customer.
    /// </remarks>
    public static void settleCustTrans(CustTrans _custTrans, CustTable _custTable, FormRun _element, boolean _markOnly = false)
    {
        CustTrans custTrans;
        FormDataSource custTransDS = FormDataUtil::getFormDataSource(_custTrans);
        #OCCRetryCount

        // Warn about transactions that can't be settled
        CustCollectionsSettle::anyTransClosedOrMarked(_custTrans, _custTable, _markOnly);

        try
        {
            ttsbegin;

            if (_custTrans || custTransDS.anyMarked())
            {
                // If there are multiple marked record, get the first, otherwise use the single record
                if (custTransDS)
                {
                    custTrans = custTransDS.getFirst(true) as CustTrans;
                }

                custTrans = custTrans ? custTrans : _custTrans;

                while (custTrans)
                {
                    if (custTrans.Closed == dateNull() && !custTrans.BillOfExchangeID)
                    {
                        CustCollectionsSettle::markOpenTransForSettlement(custTrans, _custTable);
                    }

                    custTrans = custTransDS ? custTransDS.getNext() as CustTrans : null;
                }
            }

            ttscommit;
            if (!_markOnly)
            {
                CustCollectionsSettle::showCustOpenTrans(_custTable, _element);
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCustOpenTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the <c>CustOpenTrans</c> form.
    /// </summary>
    /// <param name="_custTable">
    ///    The customer record to use to limit the display.
    /// </param>
    /// <param name="_element">
    ///    The form that the <c>CustOpenTrans</c> form should see as the caller.
    /// </param>
    /// <remarks>
    ///    The <c>OpenTransactionEditing</c> form should behave like it was opened from the <c>CustTable</c>
    ///    form. Due to the complexity of the <c>OpenTransactionEditing</c> form, the easiest way to achieve
    ///    this is to send in the <c>CustTable</c> record.
    /// </remarks>
    private static void showCustOpenTrans(CustTable _custTable, FormRun _element)
    {
        Args args = new Args(formstr(CustTable));
        args.record(_custTable);
        args.caller(_element);

        new MenuFunction(menuitemdisplaystr(CustOpenTrans), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>