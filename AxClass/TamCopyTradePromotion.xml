<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamCopyTradePromotion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMCopyTradePromotion</c> class will copy a trade promotion and
/// its related tables to create a new trade promotion.
/// </summary>
class TamCopyTradePromotion
{
    TAMPromotionID              origTAMPromotionID;
    TAMPromotionCustAccount     origTAMPromotionCust;
    MCRMerchandisingEventID     origMCRMerchEventID;

    TAMTradePromotion           fromTAMTradePromotion;
    TAMPromotionItem            fromTAMPromotionItemsTP;
    TAMPromotionCust            fromTAMPromotionCust;
    TAMPromotionFund            fromTAMPromotionFundTP;
    TAMMerchandisingEvent       fromTAMMerchandisingEvent;
    TAMPromotionFund            fromTAMPromotionFundME;
    TAMPromotionItem            fromTAMPromotionItemsME;
    PdsRebateAgreement          fromPdsRebateAgreement;
    PdsRebateAgreementLine      fromPdsRebateAgreementLine;
    TAMMerchEventPricing        fromTAMMerchEventPricing;

    TAMMerchandisingEvent       toTAMMerchandisingEvent;
    TAMTradePromotion           toTAMTradePromotion;
    TAMPromotionItem            toTAMPromotionItemsTP;
    TAMPromotionCust            toTAMPromotionCust;
    TAMPromotionFund            toTAMPromotionFundTP;
    TAMPromotionFund            toTAMPromotionFundME;
    TAMPromotionItem            toTAMPromotionItemsME;
    PdsRebateAgreement          toPdsRebateAgreement;
    PdsRebateAgreementLine      toPdsRebateAgreementLine;
    TAMMerchEventPricing        toTAMMerchEventPricing;

    boolean                     copyPromotionItems;
    boolean                     copyPromotionCust;
    boolean                     copyPromotionFunds;
    boolean                     copyMerchandisingEvents;
    boolean                     copyMEFunds;
    boolean                     copyMEItems;
    boolean                     copyMEDiscounts;
    boolean                     copyAsTemplate;

    TAMPromotionID              toPromotionID;
    Description                 toPromotionDescription;
    MCRMerchandisingEventID     newMerchEventID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyMerchandisingEventFunds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies merchandising funds related to the original merchandising event.
    /// </summary>
    protected void copyMerchandisingEventFunds()
    {
        RecordInsertList tamPromotionFundList = new RecordInsertList(tableNum(TAMPromotionFund));
        if (copyMEFunds)
        {
            ttsbegin;
            while select forupdate fromTAMPromotionFundME
                where fromTAMPromotionFundME.MerchandisingEventID == origMCRMerchEventID
            {
                toTAMPromotionFundME = fromTAMPromotionFundME;
                toTAMPromotionFundME.MerchandisingEventID = toTAMMerchandisingEvent.MerchandisingEventID;
                tamPromotionFundList.add(toTAMPromotionFundME);
            }
            tamPromotionFundList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMerchandisingEventItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies items tied to merchandising events.
    /// </summary>
    protected void copyMerchandisingEventItems()
    {
        if (copyMEItems)
        {
            ttsbegin;
            while select forupdate fromTAMPromotionItemsME
                    where fromTAMPromotionItemsME.MerchandisingEventID == origMCRMerchEventID
            {
                toTAMPromotionItemsME = fromTAMPromotionItemsME;
                toTAMPromotionItemsME.PromotionID = toTAMTradePromotion.PromotionID;
                toTAMPromotionItemsME.MerchandisingEventID = toTAMMerchandisingEvent.MerchandisingEventID;
                toTAMPromotionItemsME.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMerchandisingEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all the merchandising events for a trade promotion and any records related to
    /// the merchandising event.
    /// </summary>
    /// <param name="_template">
    /// A <c>Boolean</c> value defining whether the promotion being copied is a template.
    /// </param>
    protected void copyMerchandisingEvents(boolean _template)
    {
        if (copyMerchandisingEvents)
        {
            ttsbegin;
            while select forupdate fromTAMMerchandisingEvent
                    where fromTAMMerchandisingEvent.PromotionID == origTAMPromotionID
            {
                origMCRMerchEventID = fromTAMMerchandisingEvent.MerchandisingEventID;
                toTAMMerchandisingEvent = fromTAMMerchandisingEvent;
                toTAMMerchandisingEvent.PromotionID = toTAMTradePromotion.PromotionID;

                toTAMMerchandisingEvent.MerchandisingEventID =
                                NumberSeq::newGetNum(TAMPromotionParameters::numRefMerchandisingEventID()).num();

                toTAMMerchandisingEvent.insert();

                this.copyMerchandisingEventItems();

                this.copyMerchandisingEventFunds();

                this.copyMerchEventDiscounts(_template);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMerchEventDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the merchandising event discounts.
    /// </summary>
    /// <param name="_template">
    /// A <c>Boolean</c> value defining whether the promotion being copied is a template.
    /// </param>
    void copyMerchEventDiscounts(boolean _template)
    {
        MCRMerchandisingEventID     mcrMerchandisingEventID = toTAMMerchandisingEvent.MerchandisingEventID;
        AmountCur                   approvedAmount = 0;
        MCRNotes                    mcrNotes = '';
        RecId                       origRebateAgreementRecId;
        MCRLumpSumStatus            mcrLumpSumStatusNew = MCRLumpSumStatus::Open;
        RecId                       toRebateAgreementRecId;

        if (copyMEDiscounts)
        {
            ttsbegin;
            if (toTAMMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack)
            {
                while select fromPdsRebateAgreement
                    where fromPdsRebateAgreement.tamMerchandisingEventID == origMCRMerchEventID
                {
                    origRebateAgreementRecId = fromPdsRebateAgreement.RecId;

                    toPdsRebateAgreement = fromPdsRebateAgreement;
                    toPdsRebateAgreement.tamMerchandisingEventID = toTAMMerchandisingEvent.MerchandisingEventID;
                    toPdsRebateAgreement.RebateAgreementId = ''; // New agreement Id will be assigned only if agreement Id is blank

                    toPdsRebateAgreement.insert();

                    toRebateAgreementRecId = toPdsRebateAgreement.RecId;

                    toPdsRebateAgreementLine.skipDataMethods(true);
                    insert_recordset toPdsRebateAgreementLine (Currency, InventDimId, LineNum, RebateAgreementRefRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateToQty, RebateUnit, RebateValue)
                    select Currency, InventdimId, LineNum, toRebateAgreementRecId, RebateAmtType,
                        RebateFromAmount, RebateFromQty, RebateToAmount, RebateToQty, RebateUnit, RebateValue
                    from fromPdsRebateAgreementLine
                    where fromPdsRebateAgreementLine.RebateAgreementRefRecId == origRebateAgreementRecId;
                    toPdsRebateAgreementLine.skipDataMethods(false);
                }
            }

            insert_recordset toTAMMerchEventPricing (BillBackDiscount, BillBackDiscountType, CostingLevel, CustInvoiceAccount,
                CustPaymMode, DeductionNoYes, DiscountAmt, DiscountFixedAmt, DiscountPercent, DiscountType,
                LumpSumAmount, LumpSumApprovedAmount, LumpSumDetails, LumpSumStatus, LumpSumStatusDetails,
                MerchandisingEventID, OneTimeLumpSum, Quantity, QuantityTo,TFClaimPayType, TFPayTo,
                VendPaymMode, LSOffsetLedgerDimension)
                select BillBackDiscount, BillBackDiscountType, CostingLevel, CustInvoiceAccount,
                CustPaymMode, DeductionNoYes, DiscountAmt, DiscountFixedAmt, DiscountPercent, DiscountType,
                LumpSumAmount, approvedAmount, LumpSumDetails, mcrLumpSumStatusNew, mcrNotes,
                mcrMerchandisingEventID, OneTimeLumpSum, Quantity, QuantityTo, tfClaimPayType, tfPayTo,
                VendPaymMode, lsOffsetLedgerDimension
                from fromTAMMerchEventPricing
                where fromTAMMerchEventPricing.MerchandisingEventID == origMCRMerchEventID;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromoFundToMerchEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the current promotion's funds and copies them down to a new merchandising event.
    /// </summary>
    void copyPromoFundToMerchEvent()
    {
        ttsbegin;
        insert_recordset toTAMPromotionFundME (Fund, MerchandisingEventID, percent,
            PromotionCust, PromotionID)
            select Fund, newMerchEventID, Percent, origTAMPromotionCust, origTAMPromotionID
            from fromTAMPromotionFundTP
            where fromTAMPromotionFundTP.PromotionID == origTAMPromotionID
                && fromTAMPromotionFundTP.PromotionCust == origTAMPromotionCust
                && !fromTAMPromotionFundTP.MerchandisingEventID;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromoFundToNewPromo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the selected promotion and copies it to a new promotion.
    /// </summary>
    void copyPromoFundToNewPromo()
    {
        RecordInsertList tamPromotionFundList = new RecordInsertList(tableNum(TAMPromotionFund));

        ttsbegin;
        while select forupdate fromTAMPromotionFundTP
                where fromTAMPromotionFundTP.PromotionID == origTAMPromotionID
                && !fromTAMPromotionFundTP.MerchandisingEventID
        {
            toTAMPromotionFundTP = fromTAMPromotionFundTP;
            toTAMPromotionFundTP.PromotionID = toTAMTradePromotion.PromotionID;

            toTAMPromotionFundTP.MerchandisingEventID = '';
            tamPromotionFundList.add(toTAMPromotionFundTP);
        }
        tamPromotionFundList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromoItemToMerchEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes promotion items and copies them down to new merchandising events.
    /// </summary>
    protected void copyPromoItemToMerchEvent()
    {
        TAMPromotionItem tamPromotionItemCheck;
        ttsbegin;
        while select forupdate fromTAMPromotionItemsTP
                where fromTAMPromotionItemsTP.PromotionID == origTAMPromotionID
                    && fromTAMPromotionItemsTP.PromotionCust == origTAMPromotionCust
                    && !fromTAMPromotionItemsTP.MerchandisingEventID
                notexists join tamPromotionItemCheck
                where tamPromotionItemCheck.MerchandisingEventID == newMerchEventID
                    && tamPromotionItemCheck.ItemID == fromTAMPromotionItemsTP.ItemID
                    && tamPromotionItemCheck.InventDimID == fromTAMPromotionItemsTP.InventDimID
        {
            toTAMPromotionItemsME = fromTAMPromotionItemsTP;
            toTAMPromotionItemsME.PromotionID = origTAMPromotionID;
            toTAMPromotionItemsME.PromotionCust = '';
            toTAMPromotionItemsME.MerchandisingEventID = newMerchEventID;
            toTAMPromotionItemsME.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromoItemToNewPromo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies promotional items to a new promotion.
    /// </summary>
    protected void copyPromoItemToNewPromo()
    {
        RecordInsertList tamPromotionItemList = new RecordInsertList(tableNum(TAMPromotionItem));

        ttsbegin;
        while select forupdate fromTAMPromotionItemsTP
                where fromTAMPromotionItemsTP.PromotionID == origTAMPromotionID
                && fromTAMPromotionItemsTP.PromotionCust == origTAMPromotionCust
                && !fromTAMPromotionItemsTP.MerchandisingEventID
        {
            toTAMPromotionItemsTP = fromTAMPromotionItemsTP;
            toTAMPromotionItemsTP.PromotionID = toTAMTradePromotion.PromotionID;

            toTAMPromotionItemsTP.MerchandisingEventID = '';
            tamPromotionItemList.add(toTAMPromotionItemsTP);
        }
        tamPromotionItemList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromotionCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies promotion customers that will be used as defaults if additional
    /// merchandising events are added to a trade promotion.
    /// </summary>
    protected void copyPromotionCustomers()
    {
        RecordInsertList tamPromotionCustList = new RecordInsertList(tableNum(TAMPromotionCust));

        if (copyPromotionCust
            && fromTAMTradePromotion.PromotionID != TAMPromotionParameters::find().EndOfPeriodTemplate)
        {
            ttsbegin;
            while select forupdate fromTAMPromotionCust
                    where fromTAMPromotionCust.PromotionID == origTAMPromotionID
                    && fromTAMPromotionCust.PromotionCust == origTAMPromotionCust
            {
                toTAMPromotionCust = fromTAMPromotionCust;
                toTAMPromotionCust.PromotionID = toTAMTradePromotion.PromotionID;
                tamPromotionCustList.add(toTAMPromotionCust);
            }
            tamPromotionCustList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromotionFunds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies promotion funds that will be used as defaults if additional merchandising events
    /// are added to a trade promotion.
    /// </summary>
    /// <param name="_copyToMerchEvent">
    /// A <c>Boolean</c> valued that defines whether the funds should be copied to a
    /// merchandising event or not.
    /// </param>
    protected void copyPromotionFunds(boolean _copyToMerchEvent = false)
    {
        if (copyPromotionFunds)
        {
            // If copying to a merchandisingEvent.
            if (_copyToMerchEvent)
            {
                this.copyPromoFundToMerchEvent();
            }
            // Copying to a new promotion.
            else
            {
                this.copyPromoFundToNewPromo();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromotionItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies promotion items that will be used as defaults if additional merchandising events
    /// are added to a trade promotion.
    /// </summary>
    /// <param name="_copyToMerchEvent">
    /// A <c>Boolean</c> valued that defines whether the promotional items should be copied to a
    /// merchandising event or not.
    /// </param>
    protected void copyPromotionItems(boolean _copyToMerchEvent = false)
    {
        if (copyPromotionItems)
        {
            // If copying to a merchandisingEvent.
            if (_copyToMerchEvent)
            {
                this.copyPromoItemToMerchEvent();
            }
            // Copying to a new promotion.
            else
            {
                this.copyPromoItemToNewPromo();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPromotionMultipleCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies promotion customers with merchandising events
    /// which when creating the trade agreement are used as customer groups.
    /// </summary>
    protected void copyPromotionMultipleCustomers()
    {
        TAMMerchandisingEvent    tamMerchandisingEvent;
        TAMTradePromotion         tamTradePromotion;
        TAMPromotionID            tamPromotionID;
        TAMPromotionCustAccount   tamPromotionCust;

        tamMerchandisingEvent = TAMMerchandisingEvent::find(newMerchEventID);
        tamTradePromotion = tamMerchandisingEvent.tamTradePromotion();

        tamPromotionCust = tamMerchandisingEvent.PromotionCust;
        tamPromotionID = tamTradePromotion.PromotionID;

        insert_recordset toTAMPromotionCust (CustAccount, MerchandisingEventId, PromotionCust, PromotionId)
            select CustAccount, newMerchEventID, tamPromotionCust, tamPromotionID from fromTAMPromotionCust
            where fromTAMPromotionCust.PromotionID == origTAMPromotionID
                && !fromTAMPromotionCust.MerchandisingEventID;

        PriceDisc_LineDisc::tamPromotionCustClearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToMerchEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies values from the promotion down to the new merchandising events.
    /// </summary>
    /// <param name="_merchandisingEventID">
    /// The <c>MCRMerchandisingEventID</c> value on the new merchandisi9ng event.
    /// </param>
    /// <param name="_copyPromotionItems">
    /// A <c>Boolean</c> value that defines whether the promotional items should be copied.
    /// </param>
    /// <param name="_copyPromotionFunds">
    /// A <c>Boolean</c> value that defines whether the promotional funds should be copied.
    /// </param>
    public void copyToMerchEvent(MCRMerchandisingEventID _merchandisingEventID,
                            boolean _copyPromotionItems = true,
                            boolean _copyPromotionFunds = true)
    {
        ttsbegin;
        newMerchEventID = _merchandisingEventID;

        copyPromotionItems = _copyPromotionItems;
        copyPromotionFunds = _copyPromotionFunds;

        this.copyPromotionItems(true);
        this.copyPromotionFunds(true);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToNewPromotion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the trade allowance to a new trade allowance.
    /// </summary>
    /// <param name="_toPromotionID">
    /// The <c>TAMPromotionId</c> to use for the new trade allowance.
    /// </param>
    /// <param name="_toPromotionDescription">
    /// The description to use on the new trade allowance.
    /// </param>
    /// <param name="_copyPromotionItems">
    /// A boolean value that defines whether to copy the promotion items to the new trade allowance.
    /// </param>
    /// <param name="_copyPromotionCust">
    /// A boolean value that defines whether to copy the promotion customers to the new trade allowance.
    /// </param>
    /// <param name="_copyPromotionFunds">
    /// A boolean value that defines whether to copy the promotion funds to the new trade allowance.
    /// </param>
    /// <param name="_copyMerchandisingEvents">
    /// A boolean value that defines whether to copy the merchandising events to the new trade allowance.
    /// </param>
    /// <param name="_copyMEFunds">
    /// A boolean value that defines whether to copy the merchandising event funds to the new trade allowance.
    /// </param>
    /// <param name="_copyMEItems">
    ///  A boolean value that defines whether to copy the merchandising event items to the new trade allowance.
    /// </param>
    /// <param name="_copyMEDiscounts">
    ///  A boolean value that defines whether to copy the merchandising event discounts to the new trade allowance.
    /// </param>
    /// <param name="_asTemplate">
    ///  A boolean value that defines whether to create the new trade allowance as a template.
    /// </param>
    public void copyToNewPromotion(TAMPromotionID _toPromotionID,
                            Description _toPromotionDescription,
                            boolean _copyPromotionItems = false,
                            boolean _copyPromotionCust = false,
                            boolean _copyPromotionFunds = false,
                            boolean _copyMerchandisingEvents = false,
                            boolean _copyMEFunds = false,
                            boolean _copyMEItems = false,
                            boolean _copyMEDiscounts = false,
                            boolean _asTemplate = false)
    {
        copyPromotionItems = _copyPromotionItems;
        copyPromotionCust = _copyPromotionCust;
        copyPromotionFunds = _copyPromotionFunds;
        copyMerchandisingEvents = _copyMerchandisingEvents;
        copyMEFunds = _copyMEFunds;
        copyMEItems = _copyMEItems;
        copyMEDiscounts = _copyMEDiscounts;
        copyAsTemplate = _asTemplate;

        toPromotionID = _toPromotionID;
        toPromotionDescription = _toPromotionDescription;

        ttsbegin;

        if (!toPromotionID)
        {
            ttsbegin;
            toPromotionID = NumberSeq::newGetNum(TAMPromotionParameters::numRefPromotionID()).num();
            ttscommit;
        }

        this.copyTradePromotion();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTradePromotion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the trade promotion and any other related tables to a new trade promotion.
    /// </summary>
    protected void copyTradePromotion()
    {
        TAMCalcMerchandiseCost tamCalcMerchandiseCost;

        ttsbegin;

        toTAMTradePromotion = fromTAMTradePromotion;
        toTAMTradePromotion.RecId = 0;
        toTAMTradePromotion.PromotionStatus = TAMStatus::InProcess;
        toTAMTradePromotion.PromotionID = toPromotionID;
        toTAMTradePromotion.PromotionDescription = toPromotionDescription;
        toTAMTradePromotion.WFApprovalStatus = TAMPromoMgmtApprovalStatus::NotSubmitted;

        if (!copyAsTemplate)
        {
            toTAMTradePromotion.Template = false;
        }

        if (toTAMTradePromotion.validateWrite())
        {
            toTAMTradePromotion.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        this.copyPromotionItems();
        this.copyPromotionCustomers();
        this.copyPromotionFunds();
        this.copyMerchandisingEvents(true);

        tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(TAMPromoMerchEvent::Promotion,
                                                            '',
                                                            toTAMTradePromotion.PromotionID,
                                                            toTAMTradePromotion.CustAccount);
        tamCalcMerchandiseCost.calcPromotionCost();

        toTAMTradePromotion.setRebateAgreementStatus();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes what should be copied, the old promotion record,
    /// and the new promotion ID and description.
    /// </summary>
    /// <param name="_tamTradePromotion">
    /// The original trade promotion being copied.
    /// </param>
    public void new(TAMTradePromotion _tamTradePromotion)
    {
        origTAMPromotionID = _tamTradePromotion.PromotionID;
        origTAMPromotionCust = _tamTradePromotion.CustAccount;
        fromTAMTradePromotion = _tamTradePromotion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>