<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProd_PmfCoProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMCalcPRod_PmfCoProduct</c> runs the cost calculation for
/// a production order with co products.
/// </summary>
class BomCalcProd_PmfCoProduct extends BOMCalcProd_PmfCoByProduct
{
    PmfProdCoBy coProduct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowNonBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if non BOM formulas should be calculated.
    /// </summary>
    /// <returns>
    /// Should non BOM formulas be allowed.  This always returns true.
    /// </returns>
    //FS Pmf
    public boolean allowNonBOMFormula()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates costing sheet for production order with Co/By products.
    /// </summary>
    protected void calcCostSheet()
    {
        CostSheet                   costSheet;
        ListEnumerator              calculationNodeEnumerator;
        CostSheetNodeCalculation    calculationNode;
        PmfCoByProdCalcTrans        indirectProdCalcTrans;
        PmfCoByProdCalcTrans        prodCalcTransCheck;
        boolean                     costSheetCalculated;

        costCalcTransData.setLevel(this.parmLevel() + 1);
        costCalcTransData.setInventSiteId(siteId);

        costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(CostPriceType::COGM, costCalcTransData));
        costSheetCalculated = costSheet.calc(costCalcTransData);

        if (costSheetCalculated)
        {
            calculationNodeEnumerator = costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
            while (calculationNodeEnumerator.moveNext())
            {
                calculationNode = calculationNodeEnumerator.current();
                indirectProdCalcTrans = calculationNode.toPmfCoByProdCalcTrans(CostSheetProdCalcMode::Estimation, profitSet, calcDate);
                indirectProdCalcTrans.PmfIdRefCoByRecId = coProduct.RecId;

                if (prodTable.PmfTotalCostAllocation || indirectProdCalcTrans.costPriceSum() != 0.00)
                {
                    // Check if the record already exists
                    select forupdate firstonly prodCalcTransCheck
                    where prodCalcTransCheck.TransRefId   == prodTable.ProdId
                       && prodCalcTransCheck.TransRefType == ProdTransRefType::Production
                       && prodCalcTransCheck.Resource == indirectProdCalcTrans.Resource
                       && prodCalcTransCheck.PmfIdRefCoByRecId == coProduct.RecId
                       && prodCalcTransCheck.CalcType in this.indirectProductionItemCalcTypes();

                    if (prodCalcTransCheck)
                    {
                        //record already exists, so update it
                        prodCalcTransCheck.CostGroupId = indirectProdCalcTrans.CostGroupId;
                        prodCalcTransCheck.ConsumpVariable = indirectProdCalcTrans.ConsumpVariable;
                        prodCalcTransCheck.CostAmount = indirectProdCalcTrans.CostAmount;
                        prodCalcTransCheck.SalesAmount = indirectProdCalcTrans.SalesAmount;
                        prodCalcTransCheck.CostMarkup = indirectProdCalcTrans.CostMarkup;
                        prodCalcTransCheck.SalesMarkup = indirectProdCalcTrans.SalesMarkup;

                        prodCalcTransCheck.update();
                    }
                    else
                    {
                        indirectProdCalcTrans.CollectRefProdId = prodTable.CollectRefProdId;
                        indirectProdCalcTrans.TransRefId = prodTable.ProdId;
                        indirectProdCalcTrans.TransRefType = ProdTransRefType::Production;
                        indirectProdCalcTrans.LineNum = this.getLineNum();
                        indirectProdCalcTrans.insert();
                    }

                    this.updateCalcAmount(indirectProdCalcTrans);
                    this.updateCostCalcTransData(indirectProdCalcTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanOldCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transactions without realized values.
    /// </summary>
    public void cleanOldCalcTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>coProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and returns the current <c>PmfProdCoBy</c> record.
    /// </summary>
    /// <returns>
    /// Current <c>PmfProdCoBy</c> record being calculated.
    /// </returns>
    public PmfProdCoBy coProduct()
    {
        return coProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        super();

        costCalcTransData = CostCalcTransData::construct(itemId, coProduct.QtyCoByCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>BOMCalcProd_PmfCoProduct</c>
    /// class based on input parameters.
    /// </summary>
    /// <param name="_prodCoBy">
    /// The <c>PmfProdCoBy</c> record used to run the calculation.
    /// </param>
    /// <param name="_profitSet">
    /// A profit setting used to calculate the price.
    /// </param>
    /// <param name="_calcDate">
    /// Date the calculation is being generated.
    /// </param>
    /// <param name="_calcReferences">
    /// True if references should be calculated; false otherwise.
    /// </param>
    /// <param name="_showProgress">
    /// True if a progress bar should be shown during calculation run; false otherwise.
    /// </param>
    protected void initFromParameters(PmfProdCoBy   _prodCoBy,
                                      CostProfitSet _profitSet,
                                      TransDate     _calcDate,
                                      NoYes         _calcReferences,
                                      boolean       _showProgress)
    {
        this.parmCoProduct(_prodCoBy);

        this.parmItemId(_prodCoBy.ItemId);
        this.parmInventDimId(_prodCoBy.InventDimId);

        this.parmProfitSet(_profitSet);

        this.parmCalcDate(_calcDate);
        this.parmCalcReferences(_calcReferences);
        this.parmShowProgress(_showProgress);
        this.parmSiteId(InventDim::find(_prodCoBy.InventDimId).InventSiteId);
        this.parmProdTable(ProdTable::find(_prodCoBy.ProdId));

        this.parmPmfCostAllocationPct(_prodCoBy.CostAllocationPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a BOM list for current production order,
    /// if the list isn't already populated.
    /// </summary>
    protected void initListBOM()
    {
        ProdBOM   prodBOMTmp;
        BOMCalcProdLine_PmfCoProduct bomCalcProdLine;

        if (listBOM.elements())
        {
            return;
        }

        while select prodBOMTmp
            index hint NumIdx
            where prodBOMTmp.ProdId        == prodTable.ProdId
                && prodBOMTmp.QtyInventCalc != 0
                && prodBOMTmp.Calculation   == NoYes::Yes
        {
            bomCalcProdLine = BOMCalcProdLine_PmfCoProduct::newBOMCalcCoProd(prodBOMTmp,
                                                                             this,
                                                                             this.getLineNum(),
                                                                             this.parmSiteId());

            bomCalcProdLine.parmPmfRecycledBpConsumptionCalc(this.createRecycledBpConsumptionCalc(bomCalcProdLine));

            listBOM.addEnd(bomCalcProdLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of Route operations current production order.
    /// </summary>
    /// <returns>
    /// The initialized list.
    /// </returns>
    protected List initListRoute()
    {
        ProdRoute   prodRouteTmp;
        RouteGroup  routeGroupTmp;
        LineNum     lineNumTmp = 0;
        List        listRoute = new List(Types::Class);

        while select forupdate prodRouteTmp
            where prodRouteTmp.ProdId == prodTable.ProdId
        {
            routeGroupTmp  = RouteGroup::find(prodRouteTmp.RouteGroupId);

            if (routeGroupTmp.CalcSetUp && prodRouteTmp.CalcSetUp)
            {
                lineNumTmp = this.getLineNum();
            }

            if (routeGroupTmp.CalcProc && prodRouteTmp.CalcProc)
            {
                lineNumTmp = this.getLineNum();
            }

            if (routeGroupTmp.CalcQty && prodRouteTmp.CalcQty)
            {
                lineNumTmp = this.getLineNum();
            }

            if (lineNumTmp)
            {
                listRoute.addEnd(BOMCalcProdOper_PmfCoProduct::newProdRoute_PmfCoProduct(prodRouteTmp, this, lineNumTmp));
            }
        }

        return listRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes PmfProdCalcTransMap from the current ProdTable and PmfProdCoBy records.
    /// </summary>
    public void initProdCalcTrans()
    {
        prodCalcTrans.clear();
        prodCalcTrans = PmfCoByProdCalcTrans::findIdRef(
                                prodTable.TableId,
                                prodTable.RecId,
                                coProduct.RecId,
                                true);

        if (prodCalcTrans.RecId)
        {
            this.resetCalcValues();

            itemId          = prodCalcTrans.Resource    ? prodCalcTrans.Resource    : itemId;
            inventUnitId    = prodCalcTrans.UnitId      ? prodCalcTrans.UnitId      : inventUnitId;
            inventDimId     = prodCalcTrans.InventDimId ? prodCalcTrans.InventDimId : inventDimId;
        }

        prodCalcTrans.PmfIdRefCoByRecId = coProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSeriesSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the global seriesSize variable from the current
    /// PmfProdCoBy record.
    /// </summary>
    public void initSeriesSize()
    {
        seriesSize = coProduct.QtyCoByCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransCostBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the estimated costs for material and
    /// time consumption for batch orders.
    /// </summary>
    public void insertProdCalcTransCostBreakdown()
    {
        PmfCoByProdCalcTrans    prodCalcTransCostBreakdown;
        LineNum                 lineNumBreakdown;
        MapEnumerator           stdCostBreakdownEnumerator;

        if (topBOMStopExplosionCostBreakdownMap && topBOMStopExplosionCostBreakdownMap.elements())
        {
            lineNumBreakdown = prodCalcTrans.LineNum;

            stdCostBreakdownEnumerator = topBOMStopExplosionCostBreakdownMap.getEnumerator();

            prodCalcTrans.bom = NoYes::Yes;
            prodCalcTrans.update();

            delete_from prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.PmfIdRefCoByRecId  == prodCalcTrans.PmfIdRefCoByRecId
                   && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
                   && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1;

            while (stdCostBreakdownEnumerator.moveNext())
            {
                lineNumBreakdown += 0.00001;

                prodCalcTransCostBreakdown.initCostBreakdown(prodCalcTrans);
                prodCalcTransCostBreakdown.LineNum      = lineNumBreakdown;
                prodCalcTransCostBreakdown.CostGroupId  = stdCostBreakdownEnumerator.currentKey();
                prodCalcTransCostBreakdown.CostAmount   = stdCostBreakdownEnumerator.currentValue();
                prodCalcTransCostBreakdown.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the PmfProdCoBy.
    /// </summary>
    /// <param name="_coProduct">PmfProdCoBy record to set.</param>
    /// <returns>PmfProdCoBy record</returns>
    public PmfProdCoBy parmCoProduct(
        PmfProdCoBy _coProduct = coProduct)
    {
        coProduct = _coProduct;
        return coProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCalcBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates burden cost for the current production order.
    /// </summary>
    //FS PMF
    protected void pmfCalcBurden()
    {
        PmfProdCoBy                 burdenItems;
        BOMCalcProdLine_PmfCoBurden burden;

        if (!#PmfEnabled)
        {
            return;
        }

        while select burdenItems
            where  burdenItems.ProdId       == prodTable.ProdId
                && burdenItems.ProductType  == PmfProductType::By_Product
                && burdenItems.BurdenType   != PmfBurdenType::None
                && burdenItems.BurdenType   != PmfBurdenType::Recycled
        {
            burden = BOMCalcProdLine_PmfCoBurden::newBurdenCalcProd(burdenItems,
                this,
                this.getLineNum(),
                this.parmSiteId());
            burden.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcProd_PmfCoProduct construct()
    {
        return new BOMCalcProd_PmfCoProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of <c>BOMCalcProd_PmfCoProduct</c>
    /// class based on input parameters.
    /// </summary>
    /// <param name="_prodCoBy">
    /// The <c>PmfProdCoBy</c> record used to run the calculation.
    /// </param>
    /// <param name="_profitSet">
    /// A profit setting used to calculate the price.
    /// </param>
    /// <param name="_calcDate">
    /// Date the calculation is being generated.
    /// </param>
    /// <param name="_calcReferences">
    /// True if references should be calculated; false otherwise.
    /// </param>
    /// <param name="_showProgress">
    /// True if a progress bar should be shown during calculation run; false otherwise.
    /// </param>
    /// <returns>
    /// New instance of the <c>BOMCalcProd_PmfCoProduct</c> class.
    /// </returns>
    public static BOMCalcProd_PmfCoProduct newCoProduct(
        PmfProdCoBy   _prodCoBy,
        CostProfitSet _profitSet      = ProdParameters::find().ProfitSet,
        TransDate     _calcDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYes         _calcReferences = NoYes::Yes,
        boolean       _showProgress   = false)
    {
        BOMCalcProd_PmfCoProduct bomCalcCoProduct = BOMCalcProd_PmfCoProduct::construct();

        bomCalcCoProduct.initFromParameters(_prodCoBy,
                                            _profitSet,
                                            _calcDate,
                                            _calcReferences,
                                            _showProgress);

        return bomCalcCoProduct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>