<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingDeleteOrphanedMemberLineScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for scheduling <c>RetailPricingDeleteOrphanedMemberLineJob</c>.
/// </summary>
public final class RetailPricingDeleteOrphanedMemberLineScheduler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSkipDeletionJobDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to get whether to skip exeution of deletion job.
    /// </summary>
    /// <param name = "_result">Gets or sets whether to skip execution of deletion job.</param>
    static delegate void isSkipDeletionJobDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDeletionJobIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule deletion job in batch if needed.
    /// </summary>
    internal static void scheduleDeletionJobIfNeeded()
    {
        if (!RetailPricingDeleteOrphanedMemberLineScheduler::isSkipDeletionJob() &&
            !RetailPricingDeleteOrphanedMemberLineScheduler::isDeletionJobRunning() &&
            RetailPricingDeleteOrphanedMemberLineScheduler::isThresholdForDeletionJobReached())
        {
            // Create batch task
            RetailPricingDeleteOrphanedMemberLineJob task =
                new RetailPricingDeleteOrphanedMemberLineJob();

            task.batchInfo().parmCaption(
                RetailPricingDeleteOrphanedMemberLineScheduler::getBatchJobCaption());
            task.batchInfo().parmBatchExecute(true);
            task.batchInfo().doBatch();
         }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSkipDeletionJob</Name>
				<Source><![CDATA[
    internal static boolean isSkipDeletionJob()
    {
        EventHandlerResult result = new EventHandlerResult();
        result.booleanResult(false);
        RetailPricingDeleteOrphanedMemberLineScheduler::isSkipDeletionJobDelegate(result);
        return result.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdForDeletionJobReached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the number of potentially orphaned RetailGroupMemberLine records reaches threshold to trigger the deletion job.
    /// </summary>
    /// <returns>True if the threshold has been reached; otherwise, false.</returns>
    private static boolean isThresholdForDeletionJobReached()
    {
        RetailGroupMemberLine rgml;
        select count(RecId) from rgml
            where rgml.Category == 0 && rgml.Product == 0 && rgml.Variant == 0;
        return rgml.RecId > 10000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchJobCaption</Name>
				<Source><![CDATA[
    private static str getBatchJobCaption()
    {
        return "@RetailPricing:DeleteOrphanedRetailGroupMemberLineCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeletionJobRunning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether there is a deletion job already running.
    /// </summary>
    /// <returns>True if there is one already running; otherwise, false.</returns>
    private static boolean isDeletionJobRunning()
    {
        Batch batch;
        container batchStatus = [BatchStatus::Executing, BatchStatus::Waiting];
        select firstonly RecId from batch
            where batch.ClassNumber == classNum(RetailPricingDeleteOrphanedMemberLineJob)
            && batch.Status in batchStatus;

        return batch.RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>