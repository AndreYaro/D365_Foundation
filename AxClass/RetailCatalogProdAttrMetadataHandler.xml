<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogProdAttrMetadataHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailChannelProdAttrMetadataHandler</c> is used to work with Metadata values.
/// </summary>
public class RetailCatalogProdAttrMetadataHandler
{
    #define.IsSearchable('IsSearchable')
    #define.IsRetrievable('IsRetrievable')
    #define.IsQueryable('IsQueryable')
    #define.IsRefinable('IsRefinable')
    #define.IsSortable('IsSortable')
    #define.IsTokenNormalization('IsTokenNormalization')
    #define.IsCompleteMatch('IsCompleteMatch')
    #define.CurrentMetadataVersion(2)

    public const str IsMultiValueConst = 'IsMultiValue';
    public const str IsMandatoryConst = 'IsMandatory';
    public const str IsHiddenConst = 'IsHidden';

    public boolean isSearchable;
    public boolean isRetrievable;
    public boolean isQueryable;
    public boolean isRefinable;
    public boolean isSortable;
    public boolean isMultiValue;
    public boolean isTokenNormalization;
    public boolean isCompleteMatch;
    public boolean isMandatory;
    public boolean isHidden;

    public FormCheckBoxControl isSearchableCheckBox;
    public FormCheckBoxControl isRetrievableCheckBox;
    public FormCheckBoxControl isQueryableCheckBox;
    public FormCheckBoxControl isRefinableCheckBox;
    public FormCheckBoxControl isSortableCheckBox;
    public FormCheckBoxControl isMultiValueCheckBox;
    public FormCheckBoxControl isTokenNormalizationCheckBox;
    public FormCheckBoxControl isCompleteMatchCheckBox;
    public FormCheckBoxControl isMandatoryCheckBox;
    public FormCheckBoxControl isHiddenCheckBox;
    public RefRecId metadataId;
    public boolean allowEdit;
    public Object  callerObject;
    public CatalogRefRecId catalogRefRecId;
    public TmpRetailProductAttributeMetadata tmpRetailProductAttributeMetadata;
    public RetailAttributeMetadata retailAttributeMetadata;

    public const int Version1 = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets <c>allowEdit</c> of the metadata controls.
    /// </summary>
    /// <param name="_value">
    /// The value to set.
    /// </param>
    /// <param name="_version">
    /// The version number of the metadata.
    /// </param>
    /// <returns>
    /// The value.
    /// </returns>
    public boolean allowEdit(boolean _value = allowEdit, int _version = Version1)
    {
        if (!prmisdefault(_value))
        {
            allowEdit = _value;
            this.allowEditChanged(_value, _version);
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditChanged</Name>
				<Source><![CDATA[
    private void allowEditChanged(boolean _value, int _version)
    {
        switch (_version)
        {
            case Version1:
                this.allowEditChanged_v1(_value);
                break;
            case #CurrentMetadataVersion:
                this.allowEditChanged_v2(_value);
                break;
            default :
                // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditChanged_v1</Name>
				<Source><![CDATA[
    private void allowEditChanged_v1(boolean _value)
    {
        if ((metadataId > 0) || (catalogRefRecId && tmpRetailProductAttributeMetadata.Attribute))
        {
            if (isSearchableCheckBox != null)
            {
                isSearchableCheckBox.allowEdit(_value);
            }

            if (isRetrievableCheckBox != null)
            {
                isRetrievableCheckBox.allowEdit(_value);
            }

            if (isQueryableCheckBox != null)
            {
                isQueryableCheckBox.allowEdit(_value);
            }

            if (isRefinableCheckBox != null)
            {
                isRefinableCheckBox.allowEdit(_value);
            }

            if (isSortableCheckBox != null)
            {
                isSortableCheckBox.allowEdit(_value);
            }

            if (isMultiValueCheckBox != null)
            {
                isMultiValueCheckBox.allowEdit(_value);
            }

            if (isTokenNormalizationCheckBox != null)
            {
                isTokenNormalizationCheckBox.allowEdit(_value);
            }

            if (isCompleteMatchCheckBox != null)
            {
                isCompleteMatchCheckBox.allowEdit(_value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditChanged_v2</Name>
				<Source><![CDATA[
    private void allowEditChanged_v2(boolean _value)
    {
        this.allowEditChanged_v1(_value);

        if ((metadataId > 0) || (catalogRefRecId && tmpRetailProductAttributeMetadata.Attribute))
        {
            if (isMandatoryCheckBox != null)
            {
                isMandatoryCheckBox.allowEdit(_value);
            }

            if (isHiddenCheckBox != null)
            {
                isHiddenCheckBox.allowEdit(_value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentMetadataVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current version number.
    /// </summary>
    /// <returns>
    /// The current version number.
    /// </returns>
    public int currentMetadataVersion()
    {
        return #CurrentMetadataVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate a serialized string based on default metadata values.
    /// </summary>
    /// <param name="_attributeRelationType">
    ///     Attribute relation type (standard product, channel, category).
    /// </param>
    /// <param name="_standardAttributeId">
    ///     Standard attribute Id.
    /// </param>
    /// <param name="_catalogProductAttributeId">
    ///     Provisioned catalog product attribute Id.
    /// </param>
    /// <param name="_version">
    ///     The version number of the metadata.
    /// </param>
    /// <returns>
    ///     A serialized string.
    /// </returns>
    public str defaultMetadata(
        RetailProductAttributeRelationType _attributeRelationType,
        RetailStandardAttributeID _standardAttributeId = RetailStandardAttributeID::None,
        RetailCatalogProductAttributeID _catalogProductAttributeId = RetailCatalogProductAttributeID::None,
        int _version = Version1)
    {
        str xml;

        switch (_attributeRelationType)
        {
            case RetailProductAttributeRelationType::StandardProduct:
                switch (_standardAttributeId)
                {
                    case RetailStandardAttributeID::ProductNumber:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, false, false, true, true, false, false);
                        break;

                    case RetailStandardAttributeID::ProductName:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, true, false, true, false);
                        break;

                    case RetailStandardAttributeID::SearchName:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, false, false, true, true);
                        break;

                    case RetailStandardAttributeID::Description:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, false);
                        break;

                    case RetailStandardAttributeID::Color:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);
                        break;

                    case RetailStandardAttributeID::Size:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);
                        break;

                    case RetailStandardAttributeID::Style:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);
                        break;

                    case RetailStandardAttributeID::Config:
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);
                        break;

                    case RetailStandardAttributeID::None:
                        // Enrichment attributes
                        xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, false, false, false, false, false, false);
                        break;

                    default:
                        EventHandlerResult result = new EventHandlerResult();
                        this.defaultMetadataDelegateBasedOnRetailStandardAttributeID(_attributeRelationType, _standardAttributeId, _catalogProductAttributeId, _version, result);
                        if (result.hasResult())
                        {
                            xml = result.result();
                        }
                        else
                        {
                            // Enrichment attributes
                            xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, false, false, false, false, false, false);
                        }
                        break;
                }
                break;

            case RetailProductAttributeRelationType::Catalog:
                xml = this.defaultMetadataFromCatalogAttribute(_catalogProductAttributeId, _version);
                break;

            case RetailProductAttributeRelationType::Category:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, true);
                break;

            default:
                // do Nothing
        }

        if (xml == '')
        {
            xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, false, false, false, false);
        }

        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMetadataDelegateBasedOnRetailStandardAttributeID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to retrieve default metadata  based on the RetailStandardAttributeID.
    /// </summary>
    /// <param name = "_attributeRelationType">Type of attribute relation.</param>
    /// <param name = "_standardAttributeId">Identifier of the standard attribute.</param>
    /// <param name = "_catalogProductAttributeId">Identifier of catalog product attribute.</param>
    /// <param name = "_version">Version.</param>
    /// <param name = "_result">Subscriber should use this parameter to return the metadata for the specified RetailStandardAttributeID.</param>
    delegate void defaultMetadataDelegateBasedOnRetailStandardAttributeID(
        RetailProductAttributeRelationType _attributeRelationType,
        RetailStandardAttributeID _standardAttributeId,
        RetailCatalogProductAttributeID _catalogProductAttributeId,
        int _version,
        EventHandlerResult _result)
    {
        // Subscriber will provide proper implementation to this method
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMetadataFromCatalogAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to retrieve default metadata  based on the RetailCatalogProductAttributeID.
    /// </summary>
    /// <param name = "_catalogProductAttributeId">An enum specifying the type of the catalog product attribute.</param>
    /// <param name = "_version">The version of the metadata to be retrieved.</param>
    /// <returns>
    /// Returns the metadata for the specified RetailCatalogProductAttributeID.
    /// </returns>
    private str defaultMetadataFromCatalogAttribute(RetailCatalogProductAttributeID _catalogProductAttributeId, int _version)
    {
        str xml;
        RetailProvisionedCatalogProductAttribute retailProvisionedCatalogProductAttribute;

        switch (_catalogProductAttributeId)
        {
            case RetailCatalogProductAttributeID::ProductName:
                //isSearchable, isRetrievable, isQueryable, isRefinable, isSortable, isMultiValue, isTokenNormalization, isCompleteMatch
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, true, false, true, false);
                break;

            case RetailCatalogProductAttributeID::Description:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, false);
                break;

            case RetailCatalogProductAttributeID::ItemNumber:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, false, false, false, true, true);
                break;

            case RetailCatalogProductAttributeID::Features:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, false);
                break;

            case RetailCatalogProductAttributeID::Specification:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, false);
                break;

            case RetailCatalogProductAttributeID::Image:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, false, false, false, false, false, false);
                break;

            case RetailCatalogProductAttributeID::Color:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::Color;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::MultiSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::Size:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::Size;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::Style:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::Style;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::MultiSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::Configuration:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::Configuration;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::ReviewRating:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, true, true, true, false, false, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::ReviewRating;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::Slider);
                break;

            case RetailCatalogProductAttributeID::New:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, true, true, false, false, false, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::New;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::CustomerFavorites:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, true, true, false, false, false, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::CustomerFavorites;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::StaffFavorites:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, false, true, true, true, false, false, false, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::StaffFavorites;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::SingleSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::Brand:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, true, true, true, false, true, false);

                select firstOnly retailProvisionedCatalogProductAttribute
                            where retailProvisionedCatalogProductAttribute.CatalogProductAttributeId == RetailCatalogProductAttributeID::Brand;

                RetailAttributeFilter::createAttributeFilter(retailProvisionedCatalogProductAttribute.Attribute, RetailAttributeFilterDisplayOption::MultiSelect, RetailAttributeFilterDisplayTemplate::List);
                break;

            case RetailCatalogProductAttributeID::None:
                xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, true);
                break;
            default:
                EventHandlerResult result = new EventHandlerResult();
                this.defaultMetadataFromCatalogAttributeDelegate(_catalogProductAttributeId, _version, result);
                if (result.hasResult())
                {
                    xml = result.result();
                }
                else
                {
                    // this is the same metadata as when RetailCatalogProductAttributeID::None is specified
                    xml = RetailCatalogProdAttrMetadataHandler::generateXML(_version, true, true, false, false, false, false, true, true);
                }
        }

        return xml;

    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMetadataFromCatalogAttributeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to retrieve the default metadata for the specified RetailCatalogProductAttributeID.
    /// </summary>
    /// <param name = "_catalogProductAttributeId">An enum specifying the type of the catalog product attribute.</param>
    /// <param name = "_version">Version.</param>
    /// <param name = "_result">Subscriber should use this parameter to return the metadata for the specified RetailCatalogProductAttributeID.</param>
    delegate void defaultMetadataFromCatalogAttributeDelegate(
        RetailCatalogProductAttributeID _catalogProductAttributeId,
        int _version,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes metadata.
    /// </summary>
    /// <param name="_metadata">
    /// Metadata string.
    /// </param>
    /// <param name="_version">
    /// The version number of the metadata.
    /// </param>
    public void deserialize(str _metadata, int _version)
    {
        switch (_version)
        {
            case Version1:
                this.parseXML_v1(_metadata);
                break;
            case #CurrentMetadataVersion:
                this.parseXML_v2(_metadata);
                break;
            default :
                // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>draw</Name>
				<Source><![CDATA[
    /// <summary>
    /// Draw metadata controls in a group control.
    /// </summary>
    /// <param name="_groupControl">
    /// Form group control to draw on.
    /// </param>
    /// <param name="_version">
    /// The version number of the metadata.
    /// </param>
    public void draw(FormGroupControl _groupControl, int _version = Version1)
    {
        switch (_version)
        {
            case Version1:
                this.draw_v1(_groupControl);
                break;
            case #CurrentMetadataVersion:
                this.draw_v2(_groupControl);
                break;
            default :
                // do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>draw_v1</Name>
				<Source><![CDATA[
    private FormGroupControl draw_v1(FormGroupControl _groupControl)
    {
        FormGroupControl posAttributes = _groupControl.addControl(FormControlType::Group, 'POSAttributes');
        posAttributes.caption("@Retail:RetailAttributeMetadataForCommerceCatalogs");

        isRefinableCheckBox = posAttributes.addControl(FormControlType::CheckBox, 'IsRefinableCheckBox');
        isRefinableCheckBox.label("@RET490192");

        if (tmpRetailProductAttributeMetadata.Attribute)
        {
            retailAttributeMetadata = RetailAttributeMetadata::findByAttribute(tmpRetailProductAttributeMetadata.Attribute);
        }

        if (this.isAttributeDataTypeDateTimeOrRichType(retailAttributeMetadata))
        {
            isRefinableCheckBox.enabled(false);
        }
        else
        {
            isRefinableCheckBox.allowEdit(allowEdit);
        }

        isRefinableCheckBox.value(isRefinable);
        isRefinableCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        FormGroupControl thirdPartyAttributes = _groupControl.addControl(FormControlType::Group, 'ThirdPartyAttributes');
        thirdPartyAttributes.caption("@Retail:RetailProductAttributesMetadataForExternalSearch");

        isSearchableCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsSearchableCheckBox');
        isSearchableCheckBox.label("@RET261322");
        isSearchableCheckBox.allowEdit(allowEdit);
        isSearchableCheckBox.value(isSearchable);
        isSearchableCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isRetrievableCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsRetrievableCheckBox');
        isRetrievableCheckBox.label("@RET261321");
        isRetrievableCheckBox.allowEdit(allowEdit);
        isRetrievableCheckBox.value(isRetrievable);
        isRetrievableCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isQueryableCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsQueryableCheckBox');
        isQueryableCheckBox.label("@RET261319");
        isQueryableCheckBox.allowEdit(allowEdit);
        isQueryableCheckBox.value(isQueryable);
        isQueryableCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isSortableCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsSortableCheckBox');
        isSortableCheckBox.label("@RET261323");
        isSortableCheckBox.allowEdit(allowEdit);
        isSortableCheckBox.value(isSortable);
        isSortableCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isMultiValueCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsMultiValueCheckBox');
        isMultiValueCheckBox.label("@RET261328");
        isMultiValueCheckBox.allowEdit(allowEdit);
        isMultiValueCheckBox.value(isMultiValue);
        isMultiValueCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isTokenNormalizationCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsTokenNormalizationCheckBox');
        isTokenNormalizationCheckBox.label("@RET261336");
        isTokenNormalizationCheckBox.allowEdit(allowEdit);
        isTokenNormalizationCheckBox.value(isTokenNormalization);
        isTokenNormalizationCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isCompleteMatchCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsCompleteMatchCheckBox');
        isCompleteMatchCheckBox.label("@RET261343");
        isCompleteMatchCheckBox.allowEdit(allowEdit);
        isCompleteMatchCheckBox.value(isCompleteMatch);
        isCompleteMatchCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        return thirdPartyAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>draw_v2</Name>
				<Source><![CDATA[
    private void draw_v2(FormGroupControl _groupControl)
    {
        FormGroupControl thirdPartyAttributes = this.draw_v1(_groupControl);

        isMandatoryCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'IsMandatoryCheckBox');
        isMandatoryCheckBox.label("@Retail:MandatoryFlag");
        isMandatoryCheckBox.allowEdit(allowEdit);
        isMandatoryCheckBox.value(isMandatory);
        isMandatoryCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);

        isHiddenCheckBox = thirdPartyAttributes.addControl(FormControlType::CheckBox, 'isHiddenCheckBox');
        isHiddenCheckBox.label("@Retail:HiddenFlag");
        isHiddenCheckBox.allowEdit(allowEdit);
        isHiddenCheckBox.value(isHidden);
        isHiddenCheckBox.registerOverrideMethod(identifierStr(modified), identifierStr(modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    private static str generateXML(int _version,
        boolean _isSearchable,
        boolean _isRetrievable,
        boolean _isQueryable,
        boolean _isRefinable,
        boolean _isSortable,
        boolean _isMultiValue,
        boolean _isTokenNormalization,
        boolean _isCompleteMatch,
        boolean _isMandatory = false,
        boolean _isHidden = false)
    {
        XmlDocument xmlDoc = XmlDocument::newBlank();
        XmlElement xmlRoot = xmlDoc.createElement('ProductProperty');

        xmlRoot.setAttribute(#IsSearchable, strFmt('%1', _isSearchable));
        xmlRoot.setAttribute(#IsRetrievable, strFmt('%1', _isRetrievable));
        xmlRoot.setAttribute(#IsQueryable, strFmt('%1', _isQueryable));
        xmlRoot.setAttribute(#IsRefinable, strFmt('%1', _isRefinable));
        xmlRoot.setAttribute(#IsSortable, strFmt('%1', _isSortable));
        xmlRoot.setAttribute(IsMultiValueConst, strFmt('%1', _isMultiValue));
        xmlRoot.setAttribute(#IsTokenNormalization, strFmt('%1', _isTokenNormalization));
        xmlRoot.setAttribute(#IsCompleteMatch, strFmt('%1', _isCompleteMatch));

        if (_version == #CurrentMetadataVersion)
        {
            xmlRoot.setAttribute(IsMandatoryConst, strFmt('%1', _isMandatory));
            xmlRoot.setAttribute(IsHiddenConst, strFmt('%1', _isHidden));
        }

        xmlDoc.appendChild(xmlRoot);

        return xmlRoot.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        RetailProdAttributeCatalogMetadata prodAttribCatalogMetadata;

        if (catalogRefRecId && tmpRetailProductAttributeMetadata.Attribute)
        {
            select firstOnly prodAttribCatalogMetadata where prodAttribCatalogMetadata.CatalogRefRecId == catalogRefRecId
                && prodAttribCatalogMetadata.Attribute == tmpRetailProductAttributeMetadata.Attribute;

            if (prodAttribCatalogMetadata.RecId > 0)
            {
                // Deserialize metadata if found
                this.deserialize(prodAttribCatalogMetadata.Metadata, prodAttribCatalogMetadata.MetadataVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributeDataTypeDateTimeOrRichType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks attribute data type and returns a boolean value.
    /// </summary>
    /// <param name = "_retailAttributeMetadata">
    ///     A global attribute metadata table buffer.
    /// </param>
    /// <returns>
    ///     true if <c>AttributeDataType</c> enum value is DateTime; Otherwise, false.
    /// </returns>
    protected boolean isAttributeDataTypeDateTimeOrRichType(RetailAttributeMetadata _retailAttributeMetadata)
    {
        return (_retailAttributeMetadata.RecId &&
            (AttributeDataTypeDiscriminator::checkAttributeDataTypeDateTime(EcoResAttributeType::findByAttribute(_retailAttributeMetadata.Attribute).DataType) ||
            RetailAttributeHelper::isRichAttributeType(EcoResAttribute::find(_retailAttributeMetadata.Attribute).AttributeType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRefinable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function is used to expose value for isRefinable.
    /// </summary>
    /// <returns>
    /// true if refinable is marked in metadata XML, otherwise false.
    /// </returns>
    public boolean isRefinable()
    {
        return isRefinable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override <c>modified</c> method of a <c>FormCheckBoxControl</c> control.
    /// </summary>
    /// <param name="_control">
    /// Form checkbox control.
    /// </param>
    /// <returns>
    /// A boolean indicates the modified result.
    /// </returns>
    public boolean modified(FormCheckBoxControl _control)
    {
        boolean canModify = true;

        if (isSearchableCheckBox.equal(_control))
        {
            isSearchable = isSearchableCheckBox.checked();
        }
        else if (isRetrievableCheckBox.equal(_control))
        {
            isRetrievable = isRetrievableCheckBox.checked();
        }
        else if (isQueryableCheckBox.equal(_control))
        {
            isQueryable = isQueryableCheckBox.checked();
        }
        else if (isRefinableCheckBox.equal(_control))
        {
            if (((tmpRetailProductAttributeMetadata && !RetailAttributeFilter::findByAttribute(tmpRetailProductAttributeMetadata.Attribute))
                 || (retailAttributeMetadata && !RetailAttributeFilter::findByAttribute(retailAttributeMetadata.Attribute)))
                && isRefinableCheckBox.checked())
            {
                if (tmpRetailProductAttributeMetadata.AttributeName)
                {
               
                    // if the attribute does not have any filter but user want to enable isRefinable check box, display a warning message and disallow doing so
                    warning(strFmt("@Retail:MissingFilterSettingLabel", isRefinableCheckBox.label(), tmpRetailProductAttributeMetadata.AttributeName));
                }
                else
                {
                    EcoResAttribute ecoResAttribute = EcoResAttribute::find(retailAttributeMetadata.Attribute);

                    // if the attribute does not have any filter but user want to enable isRefinable check box, display a warning message and disallow doing so
                    warning(strFmt("@Retail:MissingFilterSettingLabel", isRefinableCheckBox.label(), EcoResAttribute.Name));
                }
                canModify = false;
            }
            else
            {
                isRefinable = isRefinableCheckBox.checked();
            }
        }
        else if (isSortableCheckBox.equal(_control))
        {
            isSortable = isSortableCheckBox.checked();
        }
        else if (isMultiValueCheckBox.equal(_control))
        {
            isMultiValue = isMultiValueCheckBox.checked();
        }
        else if (isTokenNormalizationCheckBox.equal(_control))
        {
            isTokenNormalization = isTokenNormalizationCheckBox.checked();
        }
        else if (isCompleteMatchCheckBox.equal(_control))
        {
            isCompleteMatch = isCompleteMatchCheckBox.checked();
        }
        else if (isMandatoryCheckBox.equal(_control))
        {
            isMandatory = isMandatoryCheckBox.checked();
        }
        else if (isHiddenCheckBox.equal(_control))
        {
            isHidden = isHiddenCheckBox.checked();
        }

        this.save();

        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialzes the metadata.
    /// </summary>
    /// <param name="_metadataId">
    /// The value of <c>RefRecId</c> ; optional.
    /// </param>
    public void new(RefRecId _metadataId = 0)
    {
        metadataId = _metadataId;
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the caller object.
    /// </summary>
    /// <param name = "_object">The caller object to be set.</param>
    /// <returns>The current caller object.</returns>
    public Object parmCallerObject(Object _object)
    {
        callerObject = _object;
        return callerObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatalogRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the catalog recId.
    /// </summary>
    /// <param name = "_value">The catalog RecId to be set.</param>
    /// <returns>The current catalog RecId.</returns>
    public CatalogRefRecId parmCatalogRefRecId(CatalogRefRecId _value = 0)
    {
        if (!prmisdefault(_value))
        {
            catalogRefRecId = _value;
            this.initialize();
        }

        return catalogRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMetadataId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the metadata Id.
    /// </summary>
    /// <param name = "_value">The metadata id to be set.</param>
    /// <returns>The current metadata id.</returns>
    public RefRecId parmMetadataId(RefRecId _value = 0)
    {
        if (!prmisdefault(_value))
        {
            metadataId = _value;
            this.initialize();
        }

        return metadataId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpRetailProductAttributeMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TmpRetailProductAttributeMetadata</c> table buffer.
    /// </summary>
    /// <param name = "_tmpRetailProductAttributeMetadata">The table buffer to set.</param>
    /// <returns>The current table buffer for <c>TmpRetailProductAttributeMetadata</c> table.</returns>
    public TmpRetailProductAttributeMetadata parmTmpRetailProductAttributeMetadata(TmpRetailProductAttributeMetadata _tmpRetailProductAttributeMetadata)
    {
        tmpRetailProductAttributeMetadata = _tmpRetailProductAttributeMetadata;
        return tmpRetailProductAttributeMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseXML_v1</Name>
				<Source><![CDATA[
    private void parseXML_v1(str _metadata)
    {
        #define.True('true')

        XmlDocument xmlDoc = new XmlDocument();
        XmlElement propertyElmt;
        str attributeValue;

        if (!xmlDoc.loadXml(_metadata))
        {
            // Failed to load metadata
            // Use default
            xmlDoc.loadXml(this.defaultMetadata(RetailProductAttributeRelationType::Catalog));
        }

        propertyElmt = xmlDoc.documentElement();

        attributeValue = propertyElmt.getAttribute(#IsSearchable);
        isSearchable = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsRetrievable);
        isRetrievable = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsQueryable);
        isQueryable = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsRefinable);
        isRefinable = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsSortable);
        isSortable = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(IsMultiValueConst);
        isMultiValue = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsTokenNormalization);
        isTokenNormalization = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(#IsCompleteMatch);
        isCompleteMatch = attributeValue == #True;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseXML_v2</Name>
				<Source><![CDATA[
    private void parseXML_v2(str _metadata)
    {
        #define.True('true')

        this.parseXML_v1(_metadata);
        XmlDocument xmlDoc = new XmlDocument();
        XmlElement propertyElmt;
        str attributeValue;

        if (!xmlDoc.loadXml(_metadata))
        {
            // Failed to load metadata
            // Use default
            xmlDoc.loadXml(this.defaultMetadata(RetailProductAttributeRelationType::Catalog));
        }

        propertyElmt = xmlDoc.documentElement();

        attributeValue = propertyElmt.getAttribute(IsMandatoryConst);
        isMandatory = attributeValue == #True;

        attributeValue = propertyElmt.getAttribute(IsHiddenConst);
        isHidden = attributeValue == #True;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate product attribute metadata.
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// The catalog to publish.
    /// </param>
    public void populateMetadata(CatalogRefRecId _catalogRefRecId)
    {
        RetailInternalOrgUpdateChannel updateChannel;
        RetailCatalogInternalOrg catalogInternalOrgs;

        while select catalogInternalOrgs
            where catalogInternalOrgs.Catalog == _catalogRefRecId
        {
            RetailChannelTable channel = RetailChannelTable::findByOperatingUnitId(catalogInternalOrgs.InternalOrganization);

            if (channel)
            {
                updateChannel = RetailInternalOrgUpdateChannel::newFromChannel(channel.RecId);

                ttsBegin;
                updateChannel.populateMetadata();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStandardProductAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate standard product attributes.
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// The catalog to publish.
    /// </param>
    private void populateStandardProductAttributes(RefRecId _catalogRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save metadata.
    /// </summary>
    public void save()
    {
        RetailProdAttributeCatalogMetadata catalogMetadata;

        ttsBegin;

        if (catalogRefRecId && tmpRetailProductAttributeMetadata.Attribute)
        {
            // insert
            RetailProdAttributeCatalogMetadata::addUpdate(
                    catalogRefRecId,
                    tmpRetailProductAttributeMetadata.Attribute,
                    tmpRetailProductAttributeMetadata.IsRequired,
                    tmpRetailProductAttributeMetadata.AttributeRelationType,
                    tmpRetailProductAttributeMetadata.Metadata,
                    tmpRetailProductAttributeMetadata.MetadataVersion
                    );

            // update
            catalogMetadata = RetailProdAttributeCatalogMetadata::findByIds(catalogRefRecId, tmpRetailProductAttributeMetadata.Attribute, true);
            if (catalogMetadata)
            {
                catalogMetadata.Metadata = this.serialize(catalogMetadata.MetadataVersion);
                catalogMetadata.update();
            }

            // update temporary table.
            if (callerObject.name() == formStr(RetailCatalogMapAttributes))
            {
                callerObject.updateTmpRetailProductAttributeMetadata(tmpRetailProductAttributeMetadata.Attribute);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a serialized string based on metadata values.
    /// </summary>
    /// <param name="_version">
    /// The version number of the metadata.
    /// </param>
    /// <returns>
    /// Metadata string.
    /// </returns>
    protected str serialize(int _version)
    {
        return RetailCatalogProdAttrMetadataHandler::generateXML(
                    _version, isSearchable, isRetrievable, isQueryable, isRefinable, isSortable, isMultiValue, isTokenNormalization, isCompleteMatch, isMandatory, isHidden);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>