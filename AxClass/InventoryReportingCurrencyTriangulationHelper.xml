<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryReportingCurrencyTriangulationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventoryReportingCurrencyTriangulationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>LedgerVoucherTransObject</c> class.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// The ledger posting reference to use for defaulting.
    /// </param>
    /// <param name="_postingType">
    /// The posting type of the general journal entry.
    /// </param>
    /// <param name="_ledgerDimensionId">
    /// The dimension attribute value combination of the general journal entry.
    /// </param>
    /// <param name="_standardCurrencyCode">
    /// The currency code of the general journal entry.
    /// </param>
    /// <param name="_transactionCurrencyAmount">
    /// The amount in the transaction currency.
    /// </param>
    /// <param name="_currencyExchHelper">
    /// The accounting currency amount and secondary currency amount exchange rates.
    /// </param>
    /// <param name="_reconciledEvent">
    /// The associated reconciled <c>CostEvent</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>LedgerVoucherTransObject</c> class.
    /// </returns>
    public static LedgerVoucherTransObject createLedgerVoucherTransObject(
        LedgerVoucherObject     _ledgerVoucherObject,
        LedgerPostingType       _postingType,
        LedgerDimensionAccount  _ledgerDimensionId,
        CurrencyCode            _standardCurrencyCode,
        Money                   _transactionCurrencyAmount,
        CurrencyExchangeHelper  _currencyExchHelper,
        CostEvent               _reconciledEvent = null)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;

        if (!InventoryReportingCurrencyTriangulationFeature::instance().isEnabled())
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerVoucherObject,
                _postingType,
                _ledgerDimensionId,
                _standardCurrencyCode,
                _transactionCurrencyAmount,
                _currencyExchHelper);

            return ledgerVoucherTransObject;
        }

        // This is for reversing purpose
        if (_reconciledEvent != null && _reconciledEvent.parmIsPosted())
        {
            CurrencyExchangeHelper reversalCurrencyExchangeHelper = InventoryReportingCurrencyTriangulationHelper::getReversalCurrencyExchangeHelperFromGL(
                        _currencyExchHelper,
                        LedgerPostingType::None,
                        _reconciledEvent.parmVoucher(),
                        _reconciledEvent.parmDataAreaId(),
                        _reconciledEvent.parmTransDate(),
                        _standardCurrencyCode);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        _ledgerVoucherObject,
                        _postingType,
                        _ledgerDimensionId,
                        _standardCurrencyCode,
                        _transactionCurrencyAmount,
                        reversalCurrencyExchangeHelper);

            return ledgerVoucherTransObject;
        }

        // For fixed rate
        if (_ledgerVoucherObject.parmFixedRateCurrencyExchangeHelper() != null)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        _ledgerVoucherObject,
                        _postingType,
                        _ledgerDimensionId,
                        _standardCurrencyCode,
                        _transactionCurrencyAmount,
                        _ledgerVoucherObject.parmFixedRateCurrencyExchangeHelper());
        }
        else
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        _ledgerVoucherObject,
                        _postingType,
                        _ledgerDimensionId,
                        _standardCurrencyCode,
                        _transactionCurrencyAmount,
                        _currencyExchHelper);

            CurrencyCode transactionCurrencyCode = _ledgerVoucherObject.parmTransactionCurrencyCode();

            if (transactionCurrencyCode && _standardCurrencyCode != _ledgerVoucherObject.parmTransactionCurrencyCode())
            {
                // Convert Accounting to Transaction, then Transaction to Reporting
                ledgerVoucherTransObject.parmReportingCurrencyAmount(
                    InventoryReportingCurrencyTriangulationHelper::convertAccountingToTransactionToReportingAmount(
                        _currencyExchHelper,
                        transactionCurrencyCode,
                        _transactionCurrencyAmount));
            }
        }

        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversalCurrencyExchangeHelperFromGL</Name>
				<Source><![CDATA[
    public static CurrencyExchangeHelper getReversalCurrencyExchangeHelperFromGL(
        CurrencyExchangeHelper  _currencyExchHelper,
        LedgerPostingType       _postingType,
        Voucher                 _voucher,
        DataAreaId              _dataAreaId,
        TransDate               _transDate,
        CurrencyCode            _transactionCurrencyCode)
    {
        if (InventoryReportingCurrencyTriangulationFeature::instance().IsEnabled())
        {
            GeneralJournalAccountEntry  generalJournalAccountEntry;
            GeneralJournalEntry         generalJournalEntry;

            select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                    where (!_postingType             || generalJournalAccountEntry.PostingType  == _postingType)
                       && (!_transactionCurrencyCode || generalJournalAccountEntry.TransactionCurrencyCode == _transactionCurrencyCode)
                       && generalJournalAccountEntry.AccountingCurrencyAmount   != 0
                    exists join generalJournalEntry
                        where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                           && generalJournalEntry.Ledger                     == Ledger::current()
                           && generalJournalEntry.SubledgerVoucher           == _voucher
                           && generalJournalEntry.SubledgerVoucherDataAreaId == _dataAreaId
                           && generalJournalEntry.AccountingDate             == _transDate;

            if (generalJournalAccountEntry)
            {
                if (generalJournalAccountEntry.getAccountingExchangeRate() != 0)
                {
                    _currencyExchHelper.parmExchangeRate1(generalJournalAccountEntry.getAccountingExchangeRate());
                }

                if (generalJournalAccountEntry.getReportingExchangeRate() != 0)
                {
                    _currencyExchHelper.parmReportingExchangeRate1(generalJournalAccountEntry.getReportingExchangeRate());
                }
            }
            else
            {
                SubledgerJournalEntry subledgerJournalEntry;
                SubledgerJournalAccountEntry subledgerJournalAccountEntry;
                AccountingEvent accountingEvent;

                select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
                    where (!_postingType             || subledgerJournalAccountEntry.PostingType  == _postingType)
                       && (!_transactionCurrencyCode || subledgerJournalAccountEntry.TransactionCurrency == _transactionCurrencyCode)
                    exists join  subledgerJournalEntry
                    where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                        && subledgerJournalEntry.Ledger             == Ledger::current()
                        && subledgerJournalEntry.Voucher            == _voucher
                        && subledgerJournalEntry.VoucherDataAreaId  == _dataAreaId
                        exists join accountingEvent
                        where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                           && accountingEvent.AccountingDate == _transDate;

                if (subledgerJournalAccountEntry.AccountingCurrencyAmount != 0)
                {
                    _currencyExchHelper.parmExchangeRate1(CurrencyExchange::calculateExchangeRate(subledgerJournalAccountEntry.TransactionCurrencyAmount, subledgerJournalAccountEntry.AccountingCurrencyAmount));
                }

                if (subledgerJournalAccountEntry.ReportingCurrencyAmount != 0)
                {
                    _currencyExchHelper.parmReportingExchangeRate1(CurrencyExchange::calculateExchangeRate(subledgerJournalAccountEntry.TransactionCurrencyAmount, subledgerJournalAccountEntry.ReportingCurrencyAmount));
                }
            }
        }

        return _currencyExchHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFixedRateCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    internal static CurrencyExchangeHelper createFixedRateCurrencyExchangeHelper(LedgerVoucher _ledgerVoucher, CustExchRate _exchRate, ExchRate _reportingCurrencyExchangeRate)
    {
        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current(curext())), ledgerVoucherObject.parmAccountingDate());
        currencyExchangeHelper.parmReportingExchangeRate1(_reportingCurrencyExchangeRate / _exchRate * 100);

        return currencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMSTDiffLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    public static LedgerVoucherTransObject createMSTDiffLedgerVoucherTransObject(
        LedgerVoucherObject     _ledgerVoucherObject,
        CurrencyExchangeHelper  _currencyExchangeHelper,
        LedgerDimensionAccount  _defaultDimension,
        CurrencyCode            _currencyCode,
        AmountMSTSecondary      _reportingCurrencyAmountDiff)
    {
        LedgerPostingType conversionReportingType = LedgerPostingType::MSTDiffSecond;

        LedgerDimensionAccount roundingDiffAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                    LedgerSystemAccounts::getDefaultAccount(conversionReportingType),
                    _defaultDimension);

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    _ledgerVoucherObject,
                    conversionReportingType,
                    roundingDiffAccount,
                    _currencyCode,
                    0,
                    _currencyExchangeHelper);

        ledgerVoucherTransObject.parmReportingCurrencyAmount(_reportingCurrencyAmountDiff);
        ledgerVoucherTransObject.parmSkipDimensionValidation(true);

        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAccountingToTransactionToReportingAmount</Name>
				<Source><![CDATA[
    internal static AmountCur convertAccountingToTransactionToReportingAmount(CurrencyExchangeHelper _currencyExchangeHelper, CurrencyCode _transactionCurrencyCode, Money _transactionCurrencyAmount)
    {
        // Convert Accounting to Transaction, then Transaction to Reporting
        AmountCur temporaryTransactionAmount = _currencyExchangeHelper.calculateAccountingToTransaction(_transactionCurrencyCode, _transactionCurrencyAmount, true);
        return _currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(_transactionCurrencyCode, temporaryTransactionAmount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>