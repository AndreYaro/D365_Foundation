<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegParametersEngine_InventReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTax25RegParametersEngine_InventReceipt extends RTax25RegParametersEngine_Ledger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
public void lookup(FormStringControl _lookupCtrl)
    {
        Args                 args;
        ;

        registerParameters = registerParametersDs.cursor();

        switch (registerParameters.ParameterCode)
        {
            case 1: // Batch separator
                break;

            case 2: // Collapse the register lines by item and date
                args    = new Args(formstr(SysLookup));
                args.parm(int2str(enumnum(ItemType)));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
                break;

            case 3: // Extra number of threads in batch calculation
                break;

            case 4: // Do not calculate inventory on start and end date
                args    = new Args(formstr(SysLookup));
                args.parm(int2str(enumnum(NoYes)));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
                break;

            case 5: // Define sources
                args    = new Args(formstr(SysLookup));
                args.parm(int2str(enumnum(NoYes)));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
                break;

            default :
                throw error("@SYS3461");
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
public boolean validateWrite()
    {
        Range           line;
        boolean         ret = true;

        registerParameters = registerParametersDs.cursor();

        if (! registerParameters.Parameter)
            return true;

        switch (registerParameters.ParameterCode)
        {
            case 1:
                break;
            case 2:
                ret = this.checkType(registerParameters.Parameter, enumnum(ItemType));
                break;
            case 3:
                line = strltrim(strrtrim(registerParameters.Parameter));
                if (strrem(line, '0123456789'))
                    ret = checkFailed("@SYS75090");
                break;
            case 4:
                ret = this.checkType(registerParameters.Parameter, enumnum(NoYes));
                break;
            case 5:
                ret = this.checkType(registerParameters.Parameter, enumnum(NoYes));
                break;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>checkType</Name>
				<Source><![CDATA[
    private boolean checkType(NotesLine _parameter, int _enumNum)
    {
        Range           line;
        SysDictEnum     dictEnum = new SysDictEnum(_enumNum);
        boolean         ret      = true;
        container       contain;
        Counter         containLen, i = 1;
        ;

        contain     = RTax25RegParametersEngine::parameters2Con(_parameter);
        containLen  = conlen(contain);
        do
        {
            line = this.deleteCommas(strltrim(strrtrim(conpeek(contain,i))));
            if (line && line != dictEnum.value2Name(dictEnum.name2Value(line)))
            {
                ret = checkFailed("@SYS68284");
                break;
            }
            i++;
        }
        while (i <= containLen);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>deleteCommas</Name>
				<Source><![CDATA[
    private Range deleteCommas(Range _parameter)
    {
        Counter pos;
        Range   parm = _parameter;
        ;
        do
        {
            pos = strscan(parm, '"', 1, strlen(parm));
            if (pos)
                parm = strdel(parm, pos, 1);
        }
        while (pos);

        return parm;
    }
]]></Source>
			</Method>
			<Method>
				<Name>lookupEnabled</Name>
				<Source><![CDATA[
    public boolean lookupEnabled()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        RTax25RegisterHideSetup hide;
        int                     i, fieldId;
        container               inventFields = [5, 7, 8, 17, 18];  // the fields will be hided
        boolean                 paramValue = registerParameters.Parameter ?
                                             new DictEnum(enumnum(NoYes)).name2Value(registerParameters.Parameter) :
                                             false;

        super();

        registerParameters = registerParametersDs.cursor();

        if (registerParameters.ParameterCode != 4)
            return;

        ttsbegin;
        for (i = 1; i <= conlen(inventFields); i++)
        {
            fieldId = conpeek(inventFields, i);
            select forupdate hide
                where hide.RegisterId == registerParameters.RegisterId &&
                      hide.TableTrans == NoneTableTrans::Table         &&
                      hide.FieldId    == fieldId;

            hide.Hided = paramValue;

            if (hide.RecId)
            {
                hide.doUpdate();
            }
            else if (paramValue)
            {
                hide.RegisterId = registerParameters.RegisterId;
                hide.TableTrans = NoneTableTrans::Table;
                hide.FieldId    = fieldId;
                hide.doInsert();
            }
        }
        ttscommit;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>