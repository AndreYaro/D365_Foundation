<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineExportFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureEditLinesEngineExportFacture_RU extends FactureEditLinesEngine_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
        protected LogisticsPostalAddress addressDefaultSec()
    {
        return LogisticsLocationEntity::findPostalAddress(CustTable::find(customerControl.text()), LogisticsLocationRoleType::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
        protected boolean checkJour(CustVendInvoiceJour _jour, boolean _proforma = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        return TaxTable::find(_trans.TaxCode).isExportVAT_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
        protected boolean contragentControlOK()
    {
        return customerControl.text() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
        public void contragentInit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
        public void contragentInitDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
        public NumberSequenceCode extFactureIdNumSeqCode()
    {
        NumberSequenceCode ret;

        if (this.extFactureIdNumSeqGroup())
        {
            ret = NumberSequenceTable::find(
                        NumberSequenceGroupRef::findNaturalKey(correctControl.value()                                         ?
                                                               CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceDatatype :
                                                               CustParameters::numRefFactureExternalId_RU().NumberSequenceDatatype,
                                                               NumberSeqScopeFactory::createDefaultScope().getId(),
                                                               this.extFactureIdNumSeqGroup()).NumberSequenceId).NumberSequence;
        }

        if (! ret)
        {
            ret = correctControl.value()                                             ?
                  CustParameters::numRefCorrectFactureExternalId_RU().numberSequenceTable().NumberSequence :
                  CustParameters::numRefFactureExternalId_RU().numberSequenceTable().NumberSequence;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
        public FactureType_RU factureType()
    {
        return FactureType_RU::Facture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
        protected void findJourByTrans(Common _trans)
    {
        CustVendInvoiceTrans localCustVendInvoiceTrans = _trans;
        ;

        tmpJour = FactureJour_RU::find(localCustVendInvoiceTrans.FactureId, localCustVendInvoiceTrans.FactureModule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
        protected void findTransByJour(Common _jour)
    {
        FactureJour_RU localFactureJour = _jour as FactureJour_RU;
        ;

        select tmpTrans
            where tmpTrans.FactureId        == localFactureJour.FactureId   &&
                  tmpTrans.FactureModule    == localFactureJour.Module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJourWithUpdate</Name>
				<Source><![CDATA[
        protected void insertJourWithUpdate(CustVendInvoiceJour _jour)
    {
        if (! jourSet.elements())
        {
            firstSourceId = _jour.FactureId;
        }
        jourSet.add(this.decodeTableRecId(_jour.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
        protected tableId jourTableId()
    {
        return tablenum(FactureJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
        protected FormDataSource mainDataSource()
    {
        return custInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
        protected QueryRun mainQueryRun()
    {
        return custInvoiceJourDS.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FactureJourCreate_RU _factureCreate)
    {
        super(_factureCreate);

        tmpJour     = new DictTable(this.jourTableId()).makeRecord();
        tmpTrans    = new DictTable(this.transTableId()).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
        protected CustVendAc offAccount()
    {
        return this.contragent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
        protected OffReportType_RU offReportType()
    {
        return creditNoteControl.value()               ?
               OffReportType_RU::CustFactureCreditNote :
               OffReportType_RU::CustFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
        protected void researchDS()
    {
        ;
        FactureEditLinesEngine_RU::dsResearch(custInvoiceTransDS);
        FactureEditLinesEngine_RU::dsResearch(markupDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
        public void setVisibleContragents()
    {
        /*
        customerControl.visible(true);
        vendorControl.visible(false);
        employeeControl.visible(false);
        factureCustomerControl.visible(false);
        factureCustomerControl.mandatory(false);
        factureVendorControl.visible(false);
        factureVendorControl.mandatory(false);

        taxCorrectionContragentTypeControl.visible(false);
        taxCorrectionContragentTypeControl.selection(FactureTaxCorrectionContragentType_RU::Customer);
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
        public void setVisibleControls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
        public void setVisibleTabs()
    {
        /*
        custTabControl.visible(true);
        vendTabControl.visible(false);
        emplTabControl.visible(false);
        ledgTabControl.visible(false);
        addrTabPageControl.visible(isTableUserEnabled(tablenum(Address), AccessType::View));
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
        final protected str transHeaderName()
    {
        return "@GLS104583";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
        final protected str transName(CustVendInvoiceTrans _trans)
    {
        return "";
        /*
        return factureCreate                                                   ?
               strfmt("@GLS104573",
                      _trans.InvoiceNum,
                      _trans.ItemId,
                      _trans.Name_RU,
                      factureCreate.lookupTrans([ _trans.TableId, _trans.RecId ])) :
               "";
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected tableId transTableId()
    {
        return tablenum(FactureTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
        protected FormTreeControl treeControl()
    {
        return custTreeControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>