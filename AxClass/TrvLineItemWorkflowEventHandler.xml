<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvLineItemWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvLineItemWorkflowEventHandler implements
    WorkflowStartedEventHandler,
    WorkflowCompletedEventHandler,
    WorkflowCanceledEventHandler,
    WorkflowElementReturnedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseLineItemStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Create);

        TrvWorkflowExpProviderCache::clearExpProviderLogsForLine(_workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                                 _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::clearPolicyJustifications(_workflowEventArgs.parmWorkflowContext(),
                                                        _workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                        TrvPolicyViolationJustificationTypeEnum::TrvExpLine);

        // clear workflow logs and policy violation logs when the expense lines are recalled
        TrvWorkflowUtilities::clearWorkflowLogs(_workflowEventArgs.parmWorkflowContext().parmRecId(), tablenum(TrvExpTrans));
        TrvWorkflowUtilities::clearPolicyViolations(_workflowEventArgs.parmWorkflowContext().parmRecId(), tablenum(TrvExpTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseLineItemStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Approved);
        TrvWorkflowUtilities::generateExpMobileWorkflowNotification(TrvExpMobileNotificationEventType::WorkflowCompleted, tableNum(TrvExpTrans), _workflowEventArgs.parmWorkflowContext().parmRecId());

        TrvWorkflowExpProviderCache::clearExpProviderLogsForLine(_workflowEventArgs.parmWorkflowContext().parmRecId(),
                                                                 _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::updateViolationsLog(_workflowEventArgs.parmWorkflowContext().parmRecId(), TrvWorkflowAction::Approve, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        TrvWorkflowUtilities::setExpenseLineItemStatus(_workflowElementEventArgs.parmWorkflowContext(), TrvAppStatus::Returned);

        TrvWorkflowExpProviderCache::clearExpProviderLogsForLine(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                                 _workflowElementEventArgs.parmWorkflowContext().parmWorkflowCorrelationId());

        TrvWorkflowUtilities::clearPolicyJustifications(_workflowElementEventArgs.parmWorkflowContext(),
                                                        _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                        TrvPolicyViolationJustificationTypeEnum::TrvExpLine);

        TrvWorkflowUtilities::updateViolationsLog(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TrvWorkflowAction::Return, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        TrvWorkflowUtilities::setExpenseLineItemStatus(_workflowEventArgs.parmWorkflowContext(), TrvAppStatus::Pending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>