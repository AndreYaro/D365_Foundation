<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymCancelLedgerAcctType_Deposit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymCancelLedgerAcctType_Deposit</c> provides functionality specific to bank deposits.
/// </summary>
class BankPaymCancelLedgerAcctType_Deposit extends BankPaymCancelLedgerAcctType
{
    BankDeposit bankDepositToCancel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public void init(Common _common, BankAccountTrans _bankAccountTransToCancel)
    {
        debug::assert (_common.TableId == bankDepositToCancel.TableId);

        bankDepositToCancel = _common;
        bankAccountTransToCancel = _bankAccountTransToCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCashGeneralJournalAccount</Name>
				<Source><![CDATA[
        public RecId retrieveCashGeneralJournalAccount()
    {
        return BankPaymCancelLedgerAcctType::findGenJourAcctEntryToCancel(bankDepositToCancel.Voucher,
            bankDepositToCancel.TransDate,
            bankDepositToCancel.DataAreaId,
            LedgerPostingType::Bank,
            bankDepositToCancel.PaymReference,
            bankDepositToCancel.BankTransAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveOffsetToCancelGeneralJournal</Name>
				<Source><![CDATA[
        public RecId retrieveOffsetToCancelGeneralJournal()
    {
        return BankPaymCancelLedgerAcctType::findGenJourAcctEntryToCancel(bankDepositToCancel.Voucher,
            bankDepositToCancel.TransDate,
            bankDepositToCancel.DataAreaId,
            LedgerPostingType::LedgerJournal);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>