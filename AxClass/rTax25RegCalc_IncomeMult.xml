<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_IncomeMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_IncomeMult extends RTax25RegCalc_LedgerMultiply implements BatchRetryable
{
    RTax25Query queryAssetDeprBonusRecovery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    protected void createBody()
    {
        if (stdDocuments.amount())
        {
            regQuery.addBodyRecord(stdDocuments.profitTableRecId(),
                                    [stdDocuments.transDate(),
                                    RTax25ProfitTable::find(stdDocuments.profitTableRecId()).Description,
                                    stdDocuments.itemName() ? stdDocuments.itemName():
                                    (stdDocuments.assetId() ? stdDocuments.assetId() : stdDocuments.txt()),
                                    stdDocuments.amount()],
                                    stdDocuments.tableId(),
                                    stdDocuments.recId(),
                                    RTax25RegisterProfit::find(registerId, stdDocuments.profitTableRecId()).PaymentCondition,
                                    -startCount);
            startCount++;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createBodyAssetDeprBonusRecovery</Name>
				<Source><![CDATA[
    #define.FieldNum1(1)
    #define.FieldNum2(2)
    #define.FieldNum3(3)
    #define.FieldNum4(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createBodyAssetDeprBonusRecovery(RTax25RegisterTransMap _sourceTrans)
    {
        TaxCode taxCode = RTax25ProfitTable::find(_sourceTrans.rTax25ProfitTable).taxCode();

        startCount--;
        regQuery.addBodyRecord(_sourceTrans.rTax25ProfitTable,
                               [queryAssetDeprBonusRecovery.getField(#FieldNum1),
                                queryAssetDeprBonusRecovery.getField(#FieldNum2),
                                queryAssetDeprBonusRecovery.getField(#FieldNum3),
                                queryAssetDeprBonusRecovery.getField(#FieldNum4)],
                               _sourceTrans.TableId,
                               _sourceTrans.RecId,
                               _sourceTrans.LineDescription,
                               startCount,
                               _sourceTrans.ProfitAmount);
    }
]]></Source>
			</Method>
			<Method>
				<Name>footerContainer</Name>
				<Source><![CDATA[
    protected container footerContainer()
    {
        return [dateNull(),"","", lastProfitTableRecId ? profitAmount : totalAmount];
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRunFinal</Name>
				<Source><![CDATA[
    protected boolean initRunFinal()
    {
        RTax25RegisterJournalTrans  childJournal;
        boolean                     ret = super();

        childJournal = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::AssetDeprBonusRecovery, registerJournalTrans);

        queryAssetDeprBonusRecovery = RTax25Query::newParameters(RTax25RegisterType::AssetDeprBonusRecovery, childJournal, true);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>runFinal</Name>
				<Source><![CDATA[
    protected void runFinal()
    {
        RTax25RegisterTransMap bonusRegTrans;

        if (queryAssetDeprBonusRecovery.first())
        {
            startCount = int642int(queryAssetDeprBonusRecovery.getTotalRecCount());
        }

        if (startCount)
        {
            if (! isInBatch)
                this.progressInit("", startCount);

            do
            {
                bonusRegTrans = queryAssetDeprBonusRecovery.getRecord();
                if (! isInBatch)
                {
                    progress.setText(strfmt("@GLS104191", bonusRegTrans.RTax25ProfitTable));
                    progress.incCount();
                }
                this.createBodyAssetDeprBonusRecovery(bonusRegTrans);
            }
            while (queryAssetDeprBonusRecovery.next());

            regQuery.insertDatabase();
            regQuery.initRegBuffer();
        }

        super();
    }
]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_Income trans = _trans;

        totalAmount     +=  trans.Amount;
        profitAmount    +=  trans.Amount;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>