<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPeriodRecalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerPeriodRecalculation</c> class updates the <c>FiscalCalendarPeriod</c> field in
/// <c>GeneralJournalEntry</c> records.
/// </summary>
class LedgerPeriodRecalculation extends RunBaseBatch implements BatchRetryable
{
    boolean throwOnError;

    #DEFINE.CurrentVersion(3)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        throwOnError = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        Array ledgerFiscalPeriodRecalculations = LedgerFiscalPeriodRecalculationFactory::getLedgerFiscalPeriodRecalculation();

        if (ledgerFiscalPeriodRecalculations == null)
        {
            return;
        }

        LedgerFiscalPeriodRecalculation ledgerFiscalPeriodRecalculation;
        for (int instanceCount = 1; instanceCount <= ledgerFiscalPeriodRecalculations.lastIndex(); instanceCount++)
        {
            ledgerFiscalPeriodRecalculation = ledgerFiscalPeriodRecalculations.value(instanceCount);

            try
            {
                ledgerFiscalPeriodRecalculation.runRecalculation();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean calc;

        #DEFINE.Version1(1)
        #LOCALMACRO.CurrentList
            calc
        #ENDMACRO

        switch (version)
        {
            case #Version1 :
                [version, #CurrentList] = packedClass;
                break;

            case #CurrentVersion :
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LedgerPeriodRecalculation</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>LedgerPeriodRecalculation</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  LedgerPeriodRecalculation
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>LedgerPeriodRecalculation</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>LedgerPeriodRecalculation</c> class so that it
    ///    returns an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>LedgerPeriodRecalculation</c> class that you want to customize or
    ///    extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///
    ///  This procedure helps make sure that your customizations are maintained if the base version of the
    ///  <c>
    ///  LedgerPeriodRecalculation
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    ///  .
    /// </remarks>
    public static LedgerPeriodRecalculation construct()
    {
        LedgerPeriodRecalculation  ledgerPeriodRecalculation;

        ledgerPeriodRecalculation = new LedgerPeriodRecalculation();

        return ledgerPeriodRecalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS313979";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerPeriodRecalculation ledgerPeriodRecalculation = LedgerPeriodRecalculation::construct();

        if (ledgerPeriodRecalculation.prompt())
        {
            ledgerPeriodRecalculation.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Ledger period recalculation can run in a batch session.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>