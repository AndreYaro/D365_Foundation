<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMComponentLotBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class ProdAsBuiltBOMComponentLotBuilder
{
    protected ProdBom                       componentLot;
    protected ProdAsBuiltBOMProductContext  componentContext;
    private InventQty                       componentLotConsumptionQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setProductContext</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotBuilder setProductContext(ItemId _itemId)
    {
        if (!componentContext)
        {
            componentContext = ProdAsBuiltBOMProductContext::construct(_itemId);
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductContext</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductContext getProductContext()
    {
        return componentContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentLot</Name>
				<Source><![CDATA[
    protected ProdAsBuiltBOMComponentLotBuilder setComponentLot(ProdBom _componentLot)
    {
        componentLot = _componentLot;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentLot</Name>
				<Source><![CDATA[
    internal ProdBom componentLot()
    {
        return componentLot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumComponentLotConsumptionQty</Name>
				<Source><![CDATA[
    internal InventQty sumComponentLotConsumptionQty(boolean _rereadComponentLotAssociations = false, ProdAsBuiltBOMMatchId _matchId = '')
    {
        if (_rereadComponentLotAssociations)
        {
            componentLotConsumptionQty = (select sum(InventConsumptionQty) 
                                            from ProdAsBuiltBOMComponentLotAssociation
                                            where ProdAsBuiltBOMComponentLotAssociation.ReferenceId   == componentLot.ProdId
                                               && ProdAsBuiltBOMComponentLotAssociation.InventTransId == componentLot.InventTransId
                                               && ProdAsBuiltBOMComponentLotAssociation.ItemId        == componentLot.ItemId
                                               && (!_matchId || ProdAsBuiltBOMComponentLotAssociation.MatchId == _matchId))
                                            .InventConsumptionQty;
        }

        return componentLotConsumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMComponentLotBuilder construct()
    {
        return new ProdAsBuiltBOMComponentLotBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilder</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMComponentLotBuilder createBuilder(ProdBom _componentLot)
    {
        return ProdAsBuiltBOMComponentLotBuilder::construct()
                        .setProductContext(_componentLot.ItemId)
                        .setComponentLot(_componentLot);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>