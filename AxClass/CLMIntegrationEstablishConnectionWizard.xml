<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationEstablishConnectionWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CLMIntegrationEstablishConnectionWizard</c> class is used by wizard form <c>CLMIntegrationEstablishConnectionWizard</c> for establishing connection with the CLM.
/// </summary>
internal class CLMIntegrationEstablishConnectionWizard extends SysWizard
{
    private CLMIntegrationServiceInstance serviceInstance;
    private TenantID tenantID;
    private CLMIntegrationServiceInstanceBaseURL baseURL;
    private CLMIntegrationAuthenticationType authenticationType;
    private CLMIntegrationAuthorizationURL authorizationURL;
    private CLMIntegrationAuthorizationHeaderPrefix authorizationHeaderPrefix;
    private CLMIntegrationAuthorizationClientID clientID;
    private CLMIntegrationAuthorizationClientSecret clientSecret;
    private SysUserId integrationUserID;
    private boolean closeOK;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmServiceInstance</Name>
				<Source><![CDATA[
    internal CLMIntegrationServiceInstance parmServiceInstance(CLMIntegrationServiceInstance _serviceInstance = serviceInstance)
    {
        serviceInstance = _serviceInstance;

        return serviceInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTenantID</Name>
				<Source><![CDATA[
    internal TenantID parmTenantID(TenantID _tenantID = tenantID)
    {
        tenantID = _tenantID;

        return tenantID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseURL</Name>
				<Source><![CDATA[
    internal CLMIntegrationServiceInstanceBaseURL parmBaseURL(CLMIntegrationServiceInstanceBaseURL _baseURL = baseURL)
    {
        baseURL = _baseURL;

        return baseURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthenticationType</Name>
				<Source><![CDATA[
    internal CLMIntegrationAuthenticationType parmAuthenticationType(CLMIntegrationAuthenticationType _authenticationType = authenticationType)
    {
        authenticationType = _authenticationType;

        return authenticationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationURL</Name>
				<Source><![CDATA[
    internal CLMIntegrationAuthorizationURL parmAuthorizationURL(CLMIntegrationAuthorizationURL _authorizationURL = authorizationURL)
    {
        authorizationURL = _authorizationURL;

        return authorizationURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationHeaderPrefix</Name>
				<Source><![CDATA[
    internal CLMIntegrationAuthorizationHeaderPrefix parmAuthorizationHeaderPrefix(CLMIntegrationAuthorizationHeaderPrefix _authorizationHeaderPrefix = authorizationHeaderPrefix)
    {
        authorizationHeaderPrefix = _authorizationHeaderPrefix;

        return authorizationHeaderPrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClientID</Name>
				<Source><![CDATA[
    internal CLMIntegrationAuthorizationClientID parmClientID(CLMIntegrationAuthorizationClientID _clientID = clientID)
    {
        clientID = _clientID;

        return clientID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClientSecret</Name>
				<Source><![CDATA[
    internal CLMIntegrationAuthorizationClientSecret parmClientSecret(CLMIntegrationAuthorizationClientSecret _clientSecret = clientSecret)
    {
        clientSecret = _clientSecret;

        return clientSecret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntegrationUserID</Name>
				<Source><![CDATA[
    internal SysUserId parmIntegrationUserID(SysUserId _integrationUserID = integrationUserID)
    {
        integrationUserID = _integrationUserID;

        return integrationUserID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultValues</Name>
				<Source><![CDATA[
    internal void initDefaultValues(CLMIntegrationServiceInstance _serviceInstance)
    {
        this.parmServiceInstance(_serviceInstance);
        this.parmTenantID(xInfo::licenseName());
        this.parmBaseURL(CLMIntegrationUtilities::getClientUrl());
        this.parmAuthenticationType(CLMIntegrationAuthenticationType::OAuth2);
        this.parmAuthorizationURL(CLMIntegrationUtilities::getAzureADAuthorityUri(this.parmTenantID()));
        this.parmAuthorizationHeaderPrefix('Bearer');
        this.parmClientID('');
        this.parmClientSecret('');
        this.parmIntegrationUserID('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret = super();

        if (!this.parmBaseURL())
        {
            ret = checkFailed(strFmt("@SYS84753", "@CLMIntegration:ServiceInstanceBaseURL"));
        }

        if (!this.parmAuthorizationURL())
        {
            ret = checkFailed(strFmt("@SYS84753", "@CLMIntegration:AuthorizationURL"));
        }

        if (!this.parmClientID())
        {
            ret = checkFailed(strFmt("@SYS84753", "@CLMIntegration:AuthorizationClientID"));
        }

        if (!this.parmClientSecret())
        {
            ret = checkFailed(strFmt("@SYS84753", "@CLMIntegration:AuthorizationClientSecret"));
        }

        if (!this.parmIntegrationUserID())
        {
            ret = checkFailed(strFmt("@SYS84753", "@SYS4517"));
        }

        if (!CLMIntegrationServiceOperation::findByBusinessOperation(CLMIntegrationBusinessOperation::InitiateConnection))
        {
            ret = checkFailed("@CLMIntegration:WizardConnectionInitiationServiceNotConfigured");
        }

        closeOK = ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    internal boolean closeOK()
    {
        return closeOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formstr(CLMIntegrationEstablishConnectionWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CLMIntegrationEstablishConnectionWizard construct()
    {
        return new CLMIntegrationEstablishConnectionWizard();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>