<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classstr(SalesInvoiceDP))]
public final class SalesInvoiceDP_ApplicationSuite_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPrepaidAmountsProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prepayment amounts.
    /// </summary>
    /// <param name = "_custInvoiceJour">Invoice journal to set prepaid amounts.</param>
    protected void setPrepaidAmountsProforma(CustInvoiceJour _custInvoiceJour)
    {
        next setPrepaidAmountsProforma(_custInvoiceJour);

        SalesTable salesTable = _custInvoiceJour.salesTable();
        prepaymentCustTransProforma = this.getPrepaymentCustTransProforma(salesTable);

        if (prepaymentCustTransProforma.AmountCur)
        {
            cachedPrepaidAmount = abs(prepaymentCustTransProforma.AmountCur);
            cachedPrepaidAmountEuro = custInvoiceJour.amountMST2Euro(abs(prepaymentCustTransProforma.AmountMST));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    protected void populateSalesInvoiceLocalizationTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateSalesInvoiceLocalizationTmp(
            _custInvoiceJour,
            _custInvoiceTrans,
            _taxSpec,
            _custPaymSchedLine,
            _prepaymentCustTrans,
            _prepaymentTaxTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
            && _taxSpec
            && !_taxSpec.taxCode())
        {
            TaxCode reportingTaxCode = _taxSpec.reportingTaxCode();

            salesInvoiceLocalizationTmp.TaxCode = reportingTaxCode;
            salesInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(
                tableNum(TaxTable),
                TaxTable::find(reportingTaxCode).RecId,
                this.parmCompanyInfo().LanguageId).Txt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceTmp</Name>
				<Source><![CDATA[
    protected void populateSalesInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateSalesInvoiceTmp(
            _custInvoiceJour,
            _custInvoiceTrans,
            _taxSpec,
            _custPaymSchedLine,
            _prepaymentCustTrans,
            _prepaymentTaxTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoIT])
            && _taxSpec
            && !_taxSpec.taxCode())
        {
            TaxCode reportingTaxCode = _taxSpec.reportingTaxCode();

            salesInvoiceTmp.TaxCode = reportingTaxCode;

            if (salesInvoiceTmp.TaxExemptDescription == '')
            {
                salesInvoiceTmp.TaxExemptDescription = LanguageTxt::find(
                    tableNum(TaxTable),
                    TaxTable::find(reportingTaxCode).RecId,
                    _taxSpec.parmLanguageId()).Txt;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void populateSalesInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        next populateSalesInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);

        if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
        {
            if(_custInvoiceJour.QRCode_SA)
            {
                salesInvoiceHeaderFooterTmp.QRCode_SA = GenerateQRCode_SA::generateQRCodeFromBase64(_custInvoiceJour.QRCode_SA);
            }
        }
        else if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            salesInvoiceHeaderFooterTmp.QRCode_SA = CustInvoiceQRCodeCreator_SA::create(_custInvoiceJour, _companyInfo);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]) && BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled() &&
            _custInvoiceJour.custInvoiceJour_W() && _custInvoiceJour.custInvoiceJour_W().QRCode_W)
        {
            str decodeBase64String = CustGenerateQRCode_W::decodeBase64String(_custInvoiceJour.custInvoiceJour_W().QRCode_W);
            salesInvoiceHeaderFooterTmp.QRCode_W = CustGenerateQRCode_W::generateQRCodeFromBase64(decodeBase64String);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>