<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqProcessExternThread</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqProcessExternThread</c> class represents a helper thread that can help in a master
///    scheduling run.
/// </summary>
class ReqProcessExternThread extends RunBaseBatch implements BatchRetryable
{
    ReqProcessId            processId;
    private boolean         throwOnError;

    #Define.WAITFORPROCESSSTATUSUPDATE(15)

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        processId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInstanceOfReqProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a copy of the object of the main process that is inherited by the <c>ReqCalc</c> class by
    ///    unpacking the saved values from the <c>ReqProcessList</c> class.
    /// </summary>
    /// <param name="_processList">
    ///    A record that contains the parameters for the scheduling process.
    /// </param>
    /// <returns>
    ///    A new instance of a derivative of the <c>ReqCalc</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified class ID does not correspond to a <c>ReqCalcForecastItemTable</c> table or a
    ///    <c>ReqCalcScheduleItemTable</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The unpacking of the parameters of the helpers failed.
    /// </exception>
    public ReqCalc createInstanceOfReqProcess(ReqProcessList _processList)
    {
        ReqCalc reqCalc;

        switch (_processList.ClassId)
        {
            case classnum(ReqCalcForecastItemTable) :
                reqCalc = ReqCalcForecastItemTable::newStandard();
                break;

            case classnum(ReqCalcScheduleItemTable) :
                reqCalc = ReqCalcScheduleItemTable::newStandard();
                break;

            case classnum(ReqCalcParallelFirming) :
                reqCalc = ReqCalcParallelFirming::newStandard();
                break;

            default : throw error("@SYS107505");
        }

        reqCalc.parmThisIsChildThread(true);

        if (!reqCalc.unpackThreadData(_processList.Parameters))
            throw error("@SYS107540");

        return reqCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startCalculation</Name>
				<Source><![CDATA[
    private void startCalculation(ReqProcessList _processList)
    {        
        try
        {
            this.initAndRunReqCalc(_processList);
        }
        catch (Exception::Error)
        {
            if (throwOnError)
            {
                throw error(strfmt("@SYS107534", _processList.ProcessId));
            }
            
            error(strfmt("@SYS107534", _processList.ProcessId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndRunReqCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>reqCalc</c> object and runs the scheduling process.
    /// </summary>
    /// <param name="_processList">
    ///    The scheduling process record with which to help.
    /// </param>
    [SuppressBPWarning('BPUpgradeCodeRunBaseRunCalled', 'The current stack frame is already inside the new session.')]
    private void initAndRunReqCalc(ReqProcessList _processList)
    {
        ReqCalc reqCalc = this.createInstanceOfReqProcess(_processList);
        reqCalc.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        //the current call stack is inside batch task, therefore run method should be called instead of runOperation
        reqCalc.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.batchInfo().parmRetriesOnFailure(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion,#CurrentList];
        packed = this.appendVariableToPack(packed, varStr(throwOnError), throwOnError);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        // It has to be a XppEventHandlerCalledWhen::Post type, because otherwise the assignment to setReturnValue will do nothing
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        
        // The SysPackExtensions::pack method uses the return value as the source of the container but the unpack uses the args, so need to set both
        prePostArgs.setReturnValue(_pack);

        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(ReqProcessExternThread) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowOnError</Name>
				<Source><![CDATA[
    internal boolean parmThrowOnError(boolean _throwOnError = throwOnError)
    {
        throwOnError = _throwOnError;
        return throwOnError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
    public ReqProcessId parmProcessId(ReqProcessId _processId = processId)
    {
        processId = _processId;
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for a main scheduling process to reach the Update status and then helps processing.
    /// </summary>
    public void run()
    {
        ReqProcessList      reqProcessList;
        utcDateTime         startTime = DateTimeUtil::getSystemDateTime();

        //Keep looping until the main process reaches the update stage or the timer ends
        while (true)
        {
            reqProcessList = ReqProcessList::find(processId, false);

            if (reqProcessList.Status >= ReqProcessStatus::Initialising)
            {
                //Start calculating
                this.startCalculation(reqProcessList);
                break;
            }
            else
            {
                if (!reqProcessList ||
                    (DateTimeUtil::getSystemDateTime() > DateTimeUtil::addMinutes(startTime, #WaitForProcessStatusUpdate)))
                {
                    info("@SYS107537");
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret     = true;
        Version         version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                throwOnError = this.extractPackedVariable(_packedClass, varStr(throwOnError));
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqProcessExternThread construct()
    {
        return new ReqProcessExternThread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Description used for dialog header.
    /// </summary>
    /// <returns>
    /// Class description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS107466";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new helper to assist in the given master scheduling process.
    /// </summary>
    /// <param name="_processId">
    ///    The ID of the master scheduling process to help.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqProcessExternThread</c> class.
    /// </returns>
    public static ReqProcessExternThread newProcessId(ReqProcessId _processId)
    {
        ReqProcessExternThread   reqProcessExternThread = ReqProcessExternThread::construct();

        reqProcessExternThread.parmProcessId(_processId);

        return reqProcessExternThread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>