<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionGraphForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for ReqActionGraph form.
/// </summary>
class ReqActionGraphForm
{
    private ReqActionGraphModel reqActionGraphModelBase;
    private ReqActionGraphModel reqActionGraphModelFiltered;

    private boolean showOnlyRelated     = true;
    private boolean showOnlyActionable  = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVisibleReqTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the provided ReqTrans is visible in the current filtered model and if not provides an alternative.
    /// </summary>
    /// <param name = "_reqTransRecId">The RecId of the desired ReqTrans record to be visible.</param>
    /// <returns>The RecId of a ReqTrans record to be selected.</returns>
    public RefRecId findVisibleReqTransRecId(RefRecId _reqTransRecId)
    {
        RefRecId resolvedRecId = 0;

        if (reqActionGraphModelFiltered.reqTransRecIdExists(_reqTransRecId))
        {
            ReqActionGraphNode node = reqActionGraphModelFiltered.getNode(_reqTransRecId);
            if (showOnlyActionable && !node.isActionable())
            {
                MapEnumerator parentRelationsEnumerator = node.getParentRelations();
                while (parentRelationsEnumerator.moveNext())
                {
                    ReqActionGraphRelation relation = parentRelationsEnumerator.currentValue();
                    ReqActionGraphNode parentNode = relation.getFromActionGraphNode();
                    if (parentNode.isActionable())
                    {
                        // Use the parent instead
                        resolvedRecId = parentNode.getReqTrans().RecId;
                        break;
                    }
                }
            }
            else
            {
                resolvedRecId = _reqTransRecId;
            }
        }

        return resolvedRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSelectReqTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if can select provided ReqTrans (by id).
    /// </summary>
    /// <param name = "_reqTransRecId">The RecId of a ReqTrans record to check.</param>
    /// <returns>true if record can be selected; otherwise, false.</returns>
    public boolean canSelectReqTransRecId(RefRecId _reqTransRecId)
    {
        return reqActionGraphModelFiltered.reqTransRecIdExists(_reqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of actions.
    /// </summary>
    /// <returns>
    /// Number of actions.
    /// </returns>
    public ReqNumberOfActions numberOfActions()
    {
        return reqActionGraphModelBase.numberOfActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfVisibleActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of visible actions.
    /// </summary>
    /// <returns>
    /// Number of actions.
    /// </returns>
    public ReqNumberOfActions numberOfVisibleActions()
    {
        ReqNumberOfActions counter = 0;
        var nodesEnumerator = reqActionGraphModelFiltered.getNodes();
        while (nodesEnumerator.moveNext())
        {
            ReqActionGraphNode node = nodesEnumerator.currentValue();

            if (!showOnlyActionable || node.isActionable())
            {
                counter++;
            }
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionGraphData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts for options and applies the action for a single requirement transaction.
    /// </summary>
    /// <returns>
    /// Serializable contract with nodes and edges definitions which ReqActionGraph control expects.
    /// </returns>
    public ReqActionGraphDataContract getActionGraphData()
    {
        return ReqActionGraphModelTraverser::constructFromModel(reqActionGraphModelFiltered, showOnlyActionable, showOnlyRelated).constructActionGraphDataContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToSingleNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts for options and applies the action for a single requirement transaction.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The record identifier of the transaction to apply the action for.
    /// </param>
    /// <returns>
    /// true if the action should be applied; false otherwise.
    /// </returns>
    /// <remarks>
    /// After applying the graph is refreshed from the top nodes.
    /// </remarks>
    public boolean applyToSingleNode(RefRecId _reqTransRecId)
    {
        boolean         ret = false;

        ReqActionApply  reqActionApply = this.constructReqActionApply();
        Set             reqTransApplied;
        SetEnumerator   enumerator;

        if (reqActionApply.prompt())
        {
            ttsbegin;

            // Apply the action
            reqTransApplied = reqActionApply.applyActionForReqTransRecId(_reqTransRecId);

            if (reqTransApplied.elements() > 0)
            {
                ret = true;

                enumerator = reqTransApplied.getEnumerator();
                while (enumerator.moveNext())
                {
                    reqActionGraphModelBase.registerActionApplied(enumerator.current());
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyReqTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an action of provided requirement transaction can be applied.
    /// </summary>
    /// <param name="_reqTransTmp">
    /// The requirement transaction temp record to verify.
    /// </param>
    /// <returns>
    /// true if the requirement transaction can be applied; otherwise, false.
    /// </returns>
    public boolean canApplyReqTransTmp(ReqTrans _reqTransTmp)
    {
        return _reqTransTmp.Direction == InventDirection::Receipt
            && !reqActionGraphModelBase.isActionApplied(reqActionGraphModelFiltered.tmpRecIdToReqTransRecId(_reqTransTmp.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes action graph model based on provided requirement transaction record.
    /// </summary>
    /// <param name="_callerReqTrans">
    /// Root requirement transaction record.
    /// </param>
    public void initializeBaseModel(ReqTrans _callerReqTrans)
    {
        this.buildGraphFromReqTrans(_callerReqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFilteredActionGraphModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs filtered action graph model based on provided currently selected requirement transaction record.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// Selected requirement transaction record.
    /// </param>
    public void constructFilteredActionGraphModel(RefRecId _reqTransRecId)
    {
        reqActionGraphModelFiltered = ReqActionGraphModelTraverser::constructFromModel(reqActionGraphModelBase, showOnlyActionable, showOnlyRelated).constructFilteredActionGraphModel(_reqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all nodes and edges of the graph.
    /// </summary>
    public void clear()
    {
        reqActionGraphModelBase = ReqActionGraphModel::construct();
        reqActionGraphModelFiltered = ReqActionGraphModel::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowOnlyActionable</Name>
				<Source><![CDATA[
    public boolean parmShowOnlyActionable(boolean _showOnlyActionable = showOnlyActionable)
    {
        showOnlyActionable = _showOnlyActionable;
        return showOnlyActionable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowOnlyRelated</Name>
				<Source><![CDATA[
    public boolean parmShowOnlyRelated(boolean _showOnlyRelated = showOnlyRelated)
    {
        showOnlyRelated = _showOnlyRelated;
        return showOnlyRelated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructReqActionApply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the class used for applying actions.
    /// </summary>
    /// <returns>
    /// An instance of the class used for applying actions.
    /// </returns>
    protected ReqActionApply constructReqActionApply()
    {
        return ReqActionApply::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransRecIdToTmpRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a requirement transaction identifier to the identifier of a temporary requirement transaction.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The requirement transaction identifier.
    /// </param>
    /// <returns>
    /// The identifier of a temporary requirement transaction.
    /// </returns>
    public RefRecId reqTransRecIdToTmpRecId(RefRecId _reqTransRecId)
    {
        return reqActionGraphModelFiltered.reqTransRecIdToTmpRecId(_reqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record buffer that contains temporary requirement transaction records for all nodes in the graph.
    /// </summary>
    /// <returns>
    /// A temporary requirement transaction record buffer.
    /// </returns>
    public ReqTrans getReqTransTmp()
    {
        return reqActionGraphModelFiltered.getReqTransTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpRecIdToReqTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a temporary requirement transaction identifier to the identifier of a requirement transaction.
    /// </summary>
    /// <param name="_tmpReqTransRecId">
    /// The temporary requirement transaction identifier.
    /// </param>
    /// <returns>
    /// The identifier of a requirement transaction.
    /// </returns>
    public RefRecId tmpRecIdToReqTransRecId(RefRecId _tmpReqTransRecId)
    {
        return reqActionGraphModelFiltered.tmpRecIdToReqTransRecId(_tmpReqTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqActionGraphForm construct()
    {
        ReqActionGraphForm reqActionGraphForm = new ReqActionGraphForm();

        reqActionGraphForm.clear();

        return reqActionGraphForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGraphFromReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the internal node and edge collections of the graph, based on a requirement transaction as starting point.
    /// </summary>
    /// <param name="_reqTrans">
    /// The requirement transaction to start from.
    /// </param>
    /// <returns>
    /// true if the requirement transaction is not already represented in the graph; otherwise, false.
    /// </returns>
    private boolean buildGraphFromReqTrans(ReqTrans _reqTrans)
    {
        if (reqActionGraphModelBase.reqTransExists(_reqTrans))
        {
            return false;
        }

        System.Collections.Stack stack = new System.Collections.Stack(Types::Int64);

        this.addToBaseModel(stack, _reqTrans);

        while (stack.Count != 0)
        {
            RecId reqTransId = stack.pop();
            ReqTrans reqTrans = ReqTrans::findRecId(reqTransId);

            this.addDerivedTransactions(stack, reqTrans);
            this.addParentTransactions(stack, reqTrans);
            this.addPeggedReceiptTransactions(stack, reqTrans);
            this.addPeggedIssueTransactions(stack, reqTrans);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDerivedTransactions</Name>
				<Source><![CDATA[
    private void addDerivedTransactions(System.Collections.Stack _stack, ReqTrans _reqTrans)
    {
        ReqTrans reqTransDerived = _reqTrans.selectDerived();
        while (reqTransDerived.RecId)
        {
            if (reqTransDerived.ActionType != ActionType::None)
            {
                this.addToBaseModel(_stack, reqTransDerived);
                reqActionGraphModelBase.addRelation(_reqTrans, reqTransDerived);
            }

            next reqTransDerived;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParentTransactions</Name>
				<Source><![CDATA[
    private void addParentTransactions(System.Collections.Stack _stack, ReqTrans _reqTrans)
    {
        if (_reqTrans.RefType != _reqTrans.parentReqRefType())
        {
            ReqTrans reqTransParent = _reqTrans.selectParent();
            while (reqTransParent.RecId)
            {
                if (reqTransParent.ActionType != ActionType::None)
                {
                    this.addToBaseModel(_stack, reqTransParent);
                    reqActionGraphModelBase.addRelation(reqTransParent, _reqTrans);
                }

                next reqTransParent;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeggedReceiptTransactions</Name>
				<Source><![CDATA[
    private void addPeggedReceiptTransactions(System.Collections.Stack _stack, ReqTrans _reqTrans)
    {
        ReqTrans reqTransRelated;
        ReqTransCov reqTransCov;

        while select reqTransRelated
            join Qty from reqTransCov
            where  reqTransRelated.RecId      != _reqTrans.RecId
                && reqTransRelated.ActionType != ActionType::None
                && reqTransCov.IssueRecId     == reqTransRelated.RecId
                && reqTransCov.ReceiptRecId   == _reqTrans.RecId
                && _reqTrans.Direction        == InventDirection::Receipt
        {
            this.addToBaseModel(_stack, reqTransRelated);
            reqActionGraphModelBase.addRelation(reqTransRelated, _reqTrans, ReqGraphEdgeType::Relation, reqTransCov.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeggedIssueTransactions</Name>
				<Source><![CDATA[
    private void addPeggedIssueTransactions(System.Collections.Stack _stack, ReqTrans _reqTrans)
    {
        ReqTrans reqTransRelated;
        ReqTransCov reqTransCov;

        while select reqTransRelated
            join Qty from reqTransCov
            where  reqTransRelated.RecId      != _reqTrans.RecId
                && reqTransRelated.ActionType != ActionType::None
                && reqTransCov.ReceiptRecId   == reqTransRelated.RecId
                && reqTransCov.IssueRecId     == _reqTrans.RecId
                && _reqTrans.Direction        == InventDirection::Issue
        {
            this.addToBaseModel(_stack, reqTransRelated);
            reqActionGraphModelBase.addRelation(_reqTrans, reqTransRelated, ReqGraphEdgeType::Relation, reqTransCov.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBaseModel</Name>
				<Source><![CDATA[
    private void addToBaseModel(System.Collections.Stack _stack, ReqTrans _reqTrans)
    {
        if (reqActionGraphModelBase.reqTransExists(_reqTrans))
        {
            return;
        }

        reqActionGraphModelBase.addReqTrans(_reqTrans);
        _stack.push(_reqTrans.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>