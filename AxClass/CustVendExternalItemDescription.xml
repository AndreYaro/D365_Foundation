<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExternalItemDescription</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  CustVendExternalItemDescription
{
    ItemId                  itemId;
    InventDim               inventDim;
    CustVendAC              custVendAccountId;

    private CustVendItemGroupId custVendItemGroupId;
    private boolean             isCustVendItemGroupIdAssigned;

    ExternalItemId          externalItemId;
    ExternalItemFreeTxt     externalItemFreeTxt;
    CustVendExternalItem    custVendExternalItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignCustVendItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns an external item description group to replace the group otherwise looked up from the account.
    /// </summary>
    /// <param name = "_custVendItemGroupId">An external item description group ID.</param>
    final public void assignCustVendItemGroupId(CustVendItemGroupId _custVendItemGroupId)
    {
        custVendItemGroupId             = _custVendItemGroupId;
        isCustVendItemGroupIdAssigned   = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendItemGroupId</Name>
				<Source><![CDATA[
    private CustVendItemGroupId parmCustVendItemGroupId()
    {
        if (isCustVendItemGroupIdAssigned)
        {
            return custVendItemGroupId;
        }

        return this.custVendItemGroupId();            
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an external item description group from the account.
    /// </summary>
    /// <returns>The external item description group ID.</returns>
    protected CustVendItemGroupId custVendItemGroupId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemFreeTxt</Name>
				<Source><![CDATA[
    public ExternalItemFreeTxt  externalItemFreeTxt()
    {
        return externalItemFreeTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    public ExternalItemId  externalItemId()
    {
        return externalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalDescription</Name>
				<Source><![CDATA[
    public boolean findExternalDescription()
    {
        boolean                     found;
        container                   cacheKey;
        container                   cacheValueExistsCheck;
        boolean                     continueProcessing;
        SysGlobalObjectCache        sysGlobalObjectCacheExistCheck = new SysGlobalObjectCache();

        cacheKey = [custVendAccountId, this.parmCustVendItemGroupId(), this.moduleType(), curExt()];

        //Check for existence
        cacheValueExistsCheck = sysGlobalObjectCacheExistCheck.find(CustVendExternalItemDescription::cacheScopeExistsCheck(), cacheKey);

        //We have not checked this combination before
        if (cacheValueExistsCheck == conNull())
        {
            if (CustVendExternalItem::existsForCustVendRelation(custVendAccountId, this.parmCustVendItemGroupId(), this.moduleType()))
            {
                // at least 1 record available for the customer/vendor group or customer/vendor
                continueProcessing = true;
            }
            else
            {
                // no record available for the customer/vendor group or customer/vendor
                continueProcessing = false;
            }
            sysGlobalObjectCacheExistCheck.insert(CustVendExternalItemDescription::cacheScopeExistsCheck(), cacheKey, [continueProcessing]);
        }
        else
        {
            [continueProcessing] = cacheValueExistsCheck;
        }

        if (continueProcessing)
        {
            [found, externalItemId, externalItemFreeTxt, custVendExternalItem] =
                    CustVendExternalItemDescription::findExternalItemDescription(this.moduleType(), itemId, inventDim,
                                                                                 custVendAccountId,this.parmCustVendItemGroupId());
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    abstract protected ModuleCustVend moduleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(ItemId        _itemId,
              InventDim     _inventDim,
              CustVendAC    _custVendAccountId)
    {
        itemId              = _itemId;
        inventDim           = _inventDim;
        custVendAccountId   = _custVendAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendExternalItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>CustVendExternalItem</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>CustVendExternalItem</c> record; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///    The <c>findExternalDescription</c> method must be called before retrieving the record.
    /// </remarks>
    public CustVendExternalItem parmCustVendExternalItem()
    {
        return custVendExternalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScopeExistsCheck</Name>
				<Source><![CDATA[
    private static str cacheScopeExistsCheck()
    {
        #define.globalObjectCacheScope('CustVendExternalItemDescriptionExistsCheck')
        return #globalObjectCacheScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct_RU</Name>
				<Source><![CDATA[
    public static CustVendExternalItemDescription construct_RU(ModuleCustVend _module,
                                                               ItemId         _itemId,
                                                               InventDim      _inventDim,
                                                               CustVendAC     _custVendId)
    {
        CustVendExternalItemDescription ret;

        if (_module == ModuleCustVend::Cust)
        {
            ret = new CustExternalItemDescription(_itemId, _inventDim, _custVendId);
        }
        else
        {
            ret = new VendExternalItemDescription(_itemId, _inventDim, _custVendId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalItemDescription</Name>
				<Source><![CDATA[
    public static container findExternalItemDescription(
        ModuleCustVend      _moduleType,
        ItemId              _itemId,
        InventDim           _inventDim,
        CustVendAC          _custVendAccountId,
        CustVendItemGroupId _custVendItemGroupId)
    {
        CustVendExternalItem                custVendExternalItem;
        ExternalItemId                      externalItemId;
        ExternalItemFreeTxt                 externalItemFreeTxt;
        boolean                             found = false;
        ModuleInventPurchSalesVendCustGroup moduleTypeAccount;
        ModuleInventPurchSalesVendCustGroup moduleTypeGroup;
        InventDimParm                       inventDimParm;
        InventDim                           inventDim;

        switch (_moduleType)
        {
            case ModuleCustVend::Cust:
                moduleTypeAccount   = ModuleInventPurchSalesVendCustGroup::Cust;
                moduleTypeGroup     = ModuleInventPurchSalesVendCustGroup::CustGroup;
                break;
            case ModuleCustVend::Vend:
                moduleTypeAccount   = ModuleInventPurchSalesVendCustGroup::Vend;
                moduleTypeGroup     = ModuleInventPurchSalesVendCustGroup::VendGroup;
                break;
        }

        inventDim.data(_inventDim);
        inventDimParm = EcoResProductDimGroupSetup::newItemId(_itemId).inventDimParmActiveDimensions();
        inventDim.clearNotSelectedDim(inventDimParm);
        inventDim = InventDim::findDim(inventDim);

        custVendExternalItem = CustVendExternalItem::find(moduleTypeAccount, _itemId, inventDim.InventDimId, _custVendAccountId);

        if (!custVendExternalItem)
        {
            custVendExternalItem = CustVendExternalItem::find(moduleTypeGroup, _itemId, inventDim.InventDimId, _custVendItemGroupId);
        }

        if (!custVendExternalItem && inventDim.InventDimId != InventDim::inventDimIdBlank())
        {
            custVendExternalItem = CustVendExternalItem::find(moduleTypeAccount, _itemId, InventDim::inventDimIdBlank(), _custVendAccountId);

            if (!custVendExternalItem)
            {
                custVendExternalItem = CustVendExternalItem::find(moduleTypeGroup, _itemId, InventDim::inventDimIdBlank(), _custVendItemGroupId);
            }
        }

        if (custVendExternalItem)
        {
            externalItemId      = custVendExternalItem.ExternalItemId;
            externalItemFreeTxt = custVendExternalItem.ExternalItemTxt;
            found               = true;
        }

        return [found, externalItemId, externalItemFreeTxt, custVendExternalItem];
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushExistsCheckCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Flushes the external item description cache.
    /// </summary>
    public static void flushExistsCheckCache()
    {
        SysGlobalObjectCache sysGlobalObjectCacheExistCheck = new SysGlobalObjectCache();
        sysGlobalObjectCacheExistCheck.clear(CustVendExternalItemDescription::cacheScopeExistsCheck());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalItemName_RU</Name>
				<Source><![CDATA[
    #define.lnBreak("\n")
    #define.fldName("ItemId")
    public static ExternalItemFreeTxt getExternalItemName_RU(Common         _source,
                                                             ModuleCustVend _module,
                                                             CustVendAC     _custVendId)
    {
        ExternalItemFreeTxt             itemName;
        InventDimCombination            inventDimCombination;
        ExternalItemFreeTxt             externalItemTxt;
        CustVendExternalItemDescription externalItemDesc;
        EcoResProductName               productVariantName;
        fieldId                         nameFieldId;

        nameFieldId = fieldName2id(_source.TableId, fieldStr(CustInvoiceTrans, Name));

        if (!nameFieldId)
        {
            nameFieldId = fieldName2id(_source.TableId, fieldStr(FactureTrans_RU, ItemName));
        }

        if (nameFieldId)
        {
            itemName = _source.(nameFieldId);
        }

        externalItemDesc = CustVendExternalItemDescription::construct_RU(_module,
                                                                         _source.(fieldName2id(_source.TableId, #fldName)),
                                                                         _source.inventDim(),
                                                                         _custVendId);

        if (! externalItemDesc.findExternalDescription())
        {
            return itemName;
        }

        externalItemTxt = externalItemDesc.externalItemFreeTxt() ?
                          externalItemDesc.externalItemFreeTxt() :
                          externalItemDesc.externalItemId();

        if (! externalItemTxt)
        {
            return itemName;
        }

        switch ((_module == ModuleCustVend::Cust ?
                CustFormletterParameters::find().ItemNum :
                VendFormletterParameters::find().ItemNum))
        {
            case OurYourBoth::Our:
                break;

            case OurYourBoth::Your:
                inventDimCombination = InventDimCombination::findByInventDim(_source.(fieldName2id(_source.TableId, #fldName)), _source.inventDim());

                if (inventDimCombination.RecId)
                {
                    productVariantName = inventDimCombination.defaultProductName();
                }

                itemName = productVariantName ?
                            externalItemTxt + ' / ' + productVariantName :
                            externalItemTxt;
                break;

            case OurYourBoth::Both:
                itemName += #lnBreak + externalItemTxt;
                break;
        }

        return itemName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>