<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListTransferByTaxId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListTransferByTaxId</c> class represents the functionality of EU sales list transfer by multiple tax id.
/// </summary>
public class EUSalesListTransferByTaxId extends EUSalesListTransfer
{
    private LogisticsAddressCountryRegionISOCode taxRegistrationAddressISOCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EUSalesListTransferByTaxId construct()
    {
        return new EUSalesListTransferByTaxId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMultiLineJournal</Name>
				<Source><![CDATA[
    protected internal container processMultiLineJournal(container _amounts, ModuleSalesPurch _moduleSalesPurch = ModuleSalesPurch::Sales)
    {
        AmountMST itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur;
        TaxTrans taxTransLocal;
        TaxDocumentRowTransaction taxDocRowTrans;
        TaxDocumentRowTransaction_W taxDocRowTrans_w;
        TaxItemGroupHeading taxItemGroupHeading;
        TaxGroupData taxGroupData;
        TaxTable taxTable;
        TaxOnItem taxOnItem;
        RecId previousSourceRecId;
        TaxOrigin previousTaxOrigin;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        Voucher voucher;
        TransDate transDate;

        // find old voucher number in table ledgerJournalVoucherChanged
        select firstOnly FromVoucher, FromDate, RecId from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == taxTrans.Voucher;

        voucher = ledgerJournalVoucherChanged ? ledgerJournalVoucherChanged.FromVoucher : taxTrans.Voucher;
        transDate = ledgerJournalVoucherChanged ? ledgerJournalVoucherChanged.FromDate : taxTrans.TransDate;

        [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur] = _amounts;

        while select TaxBaseAmount, TaxBaseAmountCur, Voucher, TransDate, TaxGroup, TaxItemGroup, SourceRecId, TaxOrigin, SourceTableId from taxTransLocal
            order by taxTransLocal.SourceRecId, taxTransLocal.TaxOrigin
            where taxTransLocal.Voucher == voucher
               && taxTransLocal.TransDate == transDate
               && taxTransLocal.TaxID == taxTrans.TaxID
        {
            if (previousSourceRecId != taxTransLocal.SourceRecId || previousTaxOrigin != taxTransLocal.TaxOrigin)
            {
                select RecId, euSalesListType  from taxItemGroupHeading
                    where taxItemGroupHeading.TaxItemGroup == taxTransLocal.TaxItemGroup
                join TaxCode from taxOnItem
                    where taxOnItem.TaxItemGroup == taxItemGroupHeading.TaxItemGroup
                join TaxCode, NotEUSalesList from taxTable
                    where taxTable.TaxCode == taxOnItem.TaxCode
                        && taxTable.NotEUSalesList == 0
                join TaxGroup, TaxCode from taxGroupData
                    where taxGroupData.TaxCode == taxTable.TaxCode
                        && taxGroupData.TaxGroup == taxTransLocal.TaxGroup;

                if (taxItemGroupHeading.RecId)
                {
                    taxTransLocal.TaxBaseAmountCur = _moduleSalesPurch == ModuleSalesPurch::Sales? -taxTransLocal.TaxBaseAmountCur : taxTransLocal.TaxBaseAmountCur;
                    [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur] = this.getTaxTransAmounts(
                        [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur],
                        taxTransLocal,
                        taxItemGroupHeading.euSalesListType,
                        taxTransLocal.TaxBaseAmountCur,
                        _moduleSalesPurch);
                }
                previousSourceRecId = taxTransLocal.SourceRecId;
                previousTaxOrigin = taxTransLocal.TaxOrigin;
            }
        }

        return [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransAmounts</Name>
				<Source><![CDATA[
    protected internal container getTaxTransAmounts(
        container _amounts, 
        TaxTrans _taxTrans, 
        EUSalesListType _euSalesListType, 
        Amount _amount, 
        ModuleSalesPurch _moduleSalesPurch)
    {
        AmountCur itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur;
        [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur] = _amounts;

        if (_taxTrans.SourceTableId != tableNum(MarkupTrans)
            ||  markupTrans::findRecId(_taxTrans.SourceRecId).isMarkupOfTypeCustVend()
            || markupTrans::findRecId(_taxTrans.SourceRecId).markupTypeItem())
        {
            _taxTrans.TaxBaseAmountCur = _moduleSalesPurch == ModuleSalesPurch::Sales? -_taxTrans.TaxBaseAmountCur : _taxTrans.TaxBaseAmountCur;

            [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur] = this.categorizeAmountMST(
                [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur],
                _euSalesListType,
                _amount,
                _moduleSalesPurch);
        }

        return [itemAmountCur, serviceAmountCur, investmentAmountCur, notAssignedAmountCur];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTransAmounts</Name>
				<Source><![CDATA[
    protected internal container getCustInvoiceTransAmounts(container _amounts, CustInvoiceTrans _custInvoiceTrans, EUSalesListType _euSalesListType, Amount _amount)
    {
        AmountMST itemAmountMST, serviceAmountMST, investmentAmountMST, notAssignedAmountMST;
        [itemAmountMST, serviceAmountMST, investmentAmountMST, notAssignedAmountMST] = _amounts;

        [itemAmountMST, serviceAmountMST, investmentAmountMST, notAssignedAmountMST] = this.processMultiLineJournal(
            [itemAmountMST, serviceAmountMST, investmentAmountMST, notAssignedAmountMST]);

        multiLineHandled = true;

        return [itemAmountMST, serviceAmountMST, investmentAmountMST, notAssignedAmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCountryRegionId</Name>
				<Source><![CDATA[
    protected LogisticsAddressCountryRegionId resolveCountryRegionId(LogisticsAddressCountryRegionId _defaultCountryRegionId, TaxRegistrationRecId _partyTaxId)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_partyTaxId);
        TaxRegistrationTypeApplicabilityRule applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(taxRegistration.TaxRegistrationTypeApplicabilityRule);

        return applicabilityRule.CountryRegionId ? applicabilityRule.CountryRegionId : _defaultCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveVATNum</Name>
				<Source><![CDATA[
    protected VATNum resolveVATNum(VATNum _defaultVatNum, TaxRegistrationRecId _partyTaxId)
    {
        VATNum vatNum = TaxRegistration::find(_partyTaxId).RegistrationNumber;

        return vatNum ? vatNum : _defaultVatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionId</Name>
				<Source><![CDATA[
    protected LogisticsAddressCountryRegionId getCountryRegionId()
    {
        #ISOCountryRegionCodes
        LogisticsAddressCountryRegionId countryRegionId;

        if (this.taxRegistrationAddressISOCode() == #isoBE)
        {
            countryRegionId = LogisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress).CountryRegionId;
        }
        else
        {
            countryRegionId = custInvoiceJour.ReturnItemNum ? LogisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress).CountryRegionId
                                                            : LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress).CountryRegionId;
        }

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransForCustSettlement</Name>
				<Source><![CDATA[
    protected void findTaxTransForCustSettlement(Voucher _voucher, TransDate _transDate)
    {
        taxTrans = this.findTaxTransByVoucherDate(_voucher, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxTransForVendSettlement</Name>
				<Source><![CDATA[
    protected boolean existsTaxTransForVendSettlement(Voucher _voucher, TransDate _transDate)
    {
        taxTrans = this.findTaxTransByVoucherDate(_voucher, _transDate);

        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransByVoucherDate</Name>
				<Source><![CDATA[
    private TaxTrans findTaxTransByVoucherDate(Voucher _voucher, TransDate _transDate)
    {
        TaxTrans taxTransLocal;

        select firstonly taxTransLocal
            where taxTransLocal.Voucher == _voucher
               && taxTransLocal.TransDate == _transDate
               && taxTransLocal.TaxID == taxRegistrationRecId;

        return taxTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegistrationAddressISOCode</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionISOCode taxRegistrationAddressISOCode()
    {
        if (!taxRegistrationAddressISOCode && taxRegistrationRecId)
        {
            TaxRegistration taxRegistration = TaxRegistration::find(taxRegistrationRecId);
            TaxRegistrationTypeApplicabilityRule applicabilityRule = TaxRegistrationTypeApplicabilityRule::find(taxRegistration.TaxRegistrationTypeApplicabilityRule);
            taxRegistrationAddressISOCode = LogisticsAddressCountryRegion::find(applicabilityRule.CountryRegionId).ISOcode;
        }
        return taxRegistrationAddressISOCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>