<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsStorageLoadUnitBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSStorageLoadUnitBuilder</c> class encapsulates logic for building up the load units
/// required for the space usage analysis report.
/// </summary>
public class WmsStorageLoadUnitBuilder
{
    WMSSpaceUtilSetupOptions    setupOptions;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustStorageLoadUnitName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the specified storage load unit name.
    /// </summary>
    /// <param name="_currStorageLoadUnitName">
    /// The storage load unit name to adjust.
    /// </param>
    /// <param name="_inventLocationId">
    /// A <c>InventLocationId</c> value.
    /// </param>
    /// <param name="_storeZoneId">
    /// A <c>WMSStoreZoneId</c> value.
    /// </param>
    /// <param name="_isHeader">
    /// A Boolean value that indicates whether the current adjustment should be done for the header.
    /// </param>
    /// <returns>
    /// An adjusted name for the storage load unit.
    /// </returns>
    protected Name adjustStorageLoadUnitName(Name _currStorageLoadUnitName, InventLocationId _inventLocationId, WMSStoreZoneId _storeZoneId, boolean _isHeader = false)
    {
        if (setupOptions.parmStorageLoadUnitType() == WMSSpaceUtilStorageLoadUnitType::WarehouseZone)
        {
            if (_isHeader)
            {
                _currStorageLoadUnitName += strFmt(" %1 - %2", _inventLocationId, _storeZoneId);
            }
            else
            {
                _currStorageLoadUnitName += strFmt(":%1", _storeZoneId);
            }
        }
        else
        {
            _currStorageLoadUnitName += strFmt(" %1:%2", _inventLocationId, _storeZoneId);
        }

        return _currStorageLoadUnitName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStorageLoadUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates storage load units.
    /// </summary>
    public void buildStorageLoadUnits()
    {
        WMSStorageLoadUnit  storageLoadUnit;

        select firstonly RecId, StorageLoadUnitType from storageLoadUnit
            where storageLoadUnit.wmsReportSetup == setupOptions.parmReportSetupRecId();

        if (storageLoadUnit.RecId && storageLoadUnit.StorageLoadUnitType != setupOptions.parmStorageLoadUnitType())
        {
            this.deleteExistingUnits();
        }

        if (setupOptions.parmStorageLoadUnitType() == WMSSpaceUtilStorageLoadUnitType::Warehouse)
        {
            this.buildUnitsFromWarehouses();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName())); // buildUnitsFromZones is obsolete.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUnitsFromWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates storage load units that consist of warehouses.
    /// </summary>
    protected void buildUnitsFromWarehouses()
    {
        WMSStorageLoadUnit              storageLoadUnit;
        WMSStorageLoadUnitMember        storageLoadUnitMember;
        WMSStorageLoadUnit              storageLoadUnitOrigin;
        WMSStorageLoadUnitMember        storageLoadUnitMemberOrigin;

        InventLocation                  inventLocation;
        NoYes                           isPersisted = NoYes::Yes;
        WMSSpaceUtilStorageLoadUnitType storageLoadUnitType = setupOptions.parmStorageLoadUnitType();
        RefRecId                        reportSetup = setupOptions.parmReportSetupRecId();

        // remove obsolete units and members
        // there is cascade delete action on WMSStorageLoadUnitMember so no need to delete manually
        delete_from storageLoadUnit
            where storageLoadUnit.wmsReportSetup == reportSetup
            notexists join inventLocation
                where inventLocation.InventLocationId == storageLoadUnit.Name;

        // create new added units
        insert_recordset storageLoadUnit(Name, InventSiteId, IsPersisted, storageLoadUnitType, WMSReportSetup)
            select InventLocationId, InventSiteId, isPersisted, storageLoadUnitType, reportSetup
                from inventLocation
                    where inventLocation.WHSEnabled == NoYes::No
            notexists join storageLoadUnitOrigin
                where storageLoadUnitOrigin.Name                == inventLocation.InventLocationId
                      && storageLoadUnitOrigin.wmsReportSetup   == reportSetup;

        insert_recordset storageLoadUnitMember(WMSStorageLoadUnit, InventLocationID)
            select RecId, Name
                from storageLoadUnit
                where storageLoadUnit.wmsReportSetup == reportSetup
            notexists join storageLoadUnitMemberOrigin
                where storageLoadUnitMemberOrigin.wmsStorageLoadUnit == storageLoadUnit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all existing storage load unit and storage load unit members.
    /// </summary>
    protected void deleteExistingUnits()
    {
        WMSStorageLoadUnit          storageLoadUnit;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        // there is cascade delete action on WMSStorageLoadUnitMember so no need to delete manually
        delete_from storageLoadUnit
            where storageLoadUnit.wmsReportSetup == reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepPersistentUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all storage load unit data to keep persisted units, removes obsolete units and create new
    /// one.
    /// </summary>
    protected void keepPersistentUnits()
    {
        WMSStorageLoadUnit              storageLoadUnit;
        WMSStorageLoadUnit              storageLoadUnitOrigin;
        WMSStorageLoadUnitMember        storageLoadUnitMember;
        WMSSpaceUtilStorageLoadUnitType storageLoadUnitType = setupOptions.parmStorageLoadUnitType();
        RefRecId                        reportSetup = setupOptions.parmReportSetupRecId();

        delete_from storageLoadUnitOrigin
            where storageLoadUnitOrigin.IsPersisted         == NoYes::Yes
                  && storageLoadUnitOrigin.wmsReportSetup   == reportSetup
        notexists join storageLoadUnit
            where storageLoadUnit.Name              == storageLoadUnitOrigin.Name
                  && storageLoadUnit.IsPersisted    == NoYes::No
                  && storageLoadUnit.wmsReportSetup == reportSetup;

        // create new added units
        update_recordset storageLoadUnit
            setting IsPersisted = NoYes::Yes, StorageLoadUnitType = storageLoadUnitType
            where storageLoadUnit.IsPersisted       == NoYes::No
                  && storageLoadUnit.wmsReportSetup == reportSetup
            notexists join storageLoadUnitOrigin
                where storageLoadUnitOrigin.Name                == storageLoadUnit.Name
                      && storageLoadUnitOrigin.IsPersisted      == NoYes::Yes
                      && storageLoadUnitOrigin.wmsReportSetup   == reportSetup;

        // remove all un-persisted units and their members
        delete_from storageLoadUnitMember
            exists join storageLoadUnitOrigin
                where storageLoadUnitOrigin.RecId               == storageLoadUnitMember.wmsStorageLoadUnit
                      && storageLoadUnitOrigin.IsPersisted      == NoYes::No
                      && storageLoadUnitOrigin.wmsReportSetup   == reportSetup;

        delete_from storageLoadUnit
            where storageLoadUnit.IsPersisted       == NoYes::No
                  && storageLoadUnit.wmsReportSetup == reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupOptions</Name>
				<Source><![CDATA[
        public WMSSpaceUtilSetupOptions parmSetupOptions(WMSSpaceUtilSetupOptions _setupOptions = setupOptions)
    {
        setupOptions = _setupOptions;

        return setupOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAllUnitsByWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits all storage load units by warehouse.
    /// </summary>
    /// <remarks>
    /// Only one storage load unit can belong to the only one warehouse.
    /// </remarks>
    protected void splitAllUnitsByWarehouse()
    {
        WMSStorageLoadUnitMember    storageLoadUnitMember;
        WMSStorageLoadUnitMember    storageLoadUnitMemberOrigin;
        RecId                       currStorageLoadUnitRecId = 0;
        WMSStorageLoadUnit          storageLoadUnitNew;
        WMSStorageLoadUnit          storageLoadUnit;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        ttsbegin;

        while select storageLoadUnitMember
            group by wmsStorageLoadUnit, InventLocationID
                exists join storageLoadUnit
                    where storageLoadUnit.RecId == storageLoadUnitMember.wmsStorageLoadUnit
                        && storageLoadUnit.IsPersisted == NoYes::No
                        && storageLoadUnit.wmsReportSetup == reportSetup
        {
            if (currStorageLoadUnitRecId == storageLoadUnitMember.wmsStorageLoadUnit)
            {
                storageLoadUnitNew  = WMSStorageLoadUnit::createStorageLoadUnit(strFmt('%1_temp', WMSStorageLoadUnit::find(storageLoadUnitMember.wmsStorageLoadUnit).Name), reportSetup);

                update_recordset storageLoadUnitMemberOrigin
                    setting wmsStorageLoadUnit = storageLoadUnitNew.RecId
                    where storageLoadUnitMemberOrigin.wmsStorageLoadUnit == storageLoadUnitMember.wmsStorageLoadUnit
                        && storageLoadUnitMemberOrigin.InventLocationID == storageLoadUnitMember.InventLocationID;
            }
            else
            {
                currStorageLoadUnitRecId = storageLoadUnitMember.wmsStorageLoadUnit;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllUnitNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all storage load unit names to reflect the storage load unit structure.
    /// </summary>
    protected void updateAllUnitNames()
    {
        WMSStorageLoadUnitMember    storageLoadUnitMember;
        RecId                       storageLoadUnitRecId = 0;
        Name                        currStorageLoadUnitName;
        InventLocation              inventLocation;
        InventSiteId                currInventSiteId;
        WMSStorageLoadUnit          storageLoadUnit;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        while select * from storageLoadUnitMember
        order by storageLoadUnitMember.wmsStorageLoadUnit
            join InventSiteId from inventLocation
            where inventLocation.InventLocationId == storageLoadUnitMember.InventLocationID
        exists join storageLoadUnit
            where storageLoadUnit.RecId == storageLoadUnitMember.wmsStorageLoadUnit
                && storageLoadUnit.IsPersisted == NoYes::No
                && storageLoadUnit.wmsReportSetup == reportSetup
        {
            if (storageLoadUnitRecId == storageLoadUnitMember.wmsStorageLoadUnit)
            {
               currStorageLoadUnitName = this.adjustStorageLoadUnitName(currStorageLoadUnitName, storageLoadUnitMember.InventLocationID, storageLoadUnitMember.StoreZoneId);
            }
            else
            {
                if (storageLoadUnitRecId != 0)
                {
                    WMSStorageLoadUnit::updateStorageLoadUnitNameAndSite(storageLoadUnitRecId, currStorageLoadUnitName, currInventSiteId, reportSetup);
                    currStorageLoadUnitName = '';
                }

                storageLoadUnitRecId    = storageLoadUnitMember.wmsStorageLoadUnit;
                currInventSiteId        = inventLocation.InventSiteId;
                currStorageLoadUnitName = this.adjustStorageLoadUnitName(currStorageLoadUnitName, storageLoadUnitMember.InventLocationID, storageLoadUnitMember.StoreZoneId, true);
            }
        }

        if (storageLoadUnitRecId != 0 && currStorageLoadUnitName)
        {
            WMSStorageLoadUnit::updateStorageLoadUnitNameAndSite(storageLoadUnitRecId, currStorageLoadUnitName, currInventSiteId, reportSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSStorageLoadUnitBuilder construct()
    {
        return new WMSStorageLoadUnitBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>