<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkOperationDeferredProcessingThresholdRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class encapsulates the rules that are applied to determine if the deferred work processing threshold is reached.
/// </summary>
public abstract class WHSWorkOperationDeferredProcessingThresholdRule
{
    protected WHSWorkOperationProcessingRule workOperationProcessingRule;
    protected WHSWorkTable work;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(
        WHSWorkTable                    _work,
        WHSWorkOperationProcessingRule  _workOperationProcessingRule)
    {
        work = _work;
        workOperationProcessingRule = _workOperationProcessingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDeferredWorkProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if deferred work processing can be used.
    /// </summary>
    /// <returns>true if deferred processing should be used based on the threshold; otherwise, false. </returns>
    public boolean useDeferredWorkProcessing()
    {
        if (!this.isWorkOperationProcessingRuleConfiguredForDeferredProcessing())
        {
            return false;
        }

        // if we are configured for deferred processing without a threshold we interpret it as no threshold 
        if (!workOperationProcessingRule.DeferredProcessingThreshold)
        {
            return true;
        }

        return this.isThresholdReached();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkOperationProcessingRuleConfiguredForDeferredProcessing</Name>
				<Source><![CDATA[
    private boolean isWorkOperationProcessingRuleConfiguredForDeferredProcessing()
    {
        return (workOperationProcessingRule.ProcessingMethod == WHSWorkProcessingMethod::Deferred);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdReached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the threshold that determines if deferred processing is used is reached.
    /// </summary>
    /// <returns>true if the threshold is reached; otherwise, false.</returns>
    protected abstract boolean isThresholdReached()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>WHSWorkOperationDeferredProcessingThresholdRule</c> class based on a <c>WHSWorkTransType</c> value.
    /// </summary>
    /// <param name = "_work">A <c>WHSWorkTable</c> work record.</param>
    /// <param name = "_workOperationProcessingRule">A work processing rule.</param>
    /// <returns>An instance of the <c>WHSWorkOperationDeferredProcessingThresholdRule</c> class.</returns>
    public static WHSWorkOperationDeferredProcessingThresholdRule newFromParameters(
        WHSWorkTable                    _work,
        WHSWorkOperationProcessingRule  _workOperationProcessingRule)
    {
        var attribute = new WhsWorkOperationDeferredProcessingAttribute(_work.WorkTransType, _workOperationProcessingRule.Operation);
        var instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkOperationDeferredProcessingThresholdRule), attribute) as WHSWorkOperationDeferredProcessingThresholdRule;
        
        if (!instance)
        {
            instance = WHSWorkOperationDeferredProcessingDefaultThresholdRule::construct();
        }

        instance.init(_work, _workOperationProcessingRule);

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>