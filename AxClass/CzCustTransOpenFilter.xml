<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustTransOpenFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CzCustTransOpenFilter extends CzCustVendTransOpenFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dlgSalesPurchId = dialog.addFieldValue(extendedTypeStr(SalesId), salesId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFilterStr</Name>
				<Source><![CDATA[
    protected void findFilterStr()
    {
        CustInvoiceJour                 custInvoiceJour;
        CustTrans                       custTrans;
        CustTransOpen                   custTransOpen;
        CzCustAdvanceInvoiceLink        custAdvanceInvoiceLink;
        CzCustAdvanceInvoiceTable       custAdvanceInvoiceTable;
        ;

        // Sales order invoice trans
        while select TableId from custInvoiceJour
            where custInvoiceJour.SalesId == salesId
            join TableId from custTrans
                where custTrans.Invoice       == custInvoiceJour.InvoiceId      &&
                      custTrans.AccountNum    == custInvoiceJour.InvoiceAccount &&
                      custTrans.TransDate     == custInvoiceJour.InvoiceDate
            join RecId from custTransOpen
                where custTransOpen.RefRecId  == custTrans.RecId
        {
            filterStr += (filterStr ? ',' : '') + int642str(custTransOpen.RecId);
        }

        // Prepayments linked to advanced invoice
        while select crosscompany custAdvanceInvoiceLink
            where custAdvanceInvoiceLink.InvoiceCompany == curext()
        {
            select firstonly custAdvanceInvoiceTable
                where custAdvanceInvoiceTable.RecId     == custAdvanceInvoiceLink.AdvanceInvoiceRecId
                   && custAdvanceInvoiceTable.SalesId   == salesId;

            if (custAdvanceInvoiceTable)
            {
                changecompany(custAdvanceInvoiceLink.PaymentCompany)
                {
                    custTransOpen = null;
                    custTrans = null;
                    while select custTransOpen
                        exists join custTrans
                        where custTransOpen.RefRecId  == custTrans.RecId
                           && custTrans.Voucher       == custAdvanceInvoiceLink.Voucher
                           && custTrans.TransDate     == custAdvanceInvoiceLink.TransDate
                    {
                        filterStr += (filterStr ? ',' : '') + int642str(custTransOpen.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_lookup</Name>
				<Source><![CDATA[
    public void fld1_1_lookup()
    {
        SysTableLookup          tableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        ;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(SalesTable));
        queryBuildDataSource.addSortField(fieldnum(SalesTable, SalesId));

        queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(SalesTable, InvoiceAccount));
        queryBuildRange.value(custVendAccount);
        queryBuildRange.status(RangeStatus::Hidden);

        tableLookup = SysTableLookup::newParameters(tablenum(SalesTable), dlgSalesPurchId.control());
        tableLookup.addLookupfield(fieldnum(SalesTable, SalesId));
        tableLookup.addLookupfield(fieldnum(SalesTable, SalesName));
        tableLookup.addLookupfield(fieldnum(SalesTable, InvoiceAccount));
        tableLookup.addLookupfield(fieldnum(SalesTable, SalesStatus));
        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
    ;
        salesId = dlgSalesPurchId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        SalesTable salesTable;

        if (!salesId)
            return checkFailed("@GLS111731");

        if (!calledFrom)
        {
            salesTable = SalesTable::find(salesId);
            if (!salesTable)
                return checkFailed(strfmt("@GLS111732", salesId));

            if (salesTable.InvoiceAccount != custVendAccount)
                return checkFailed(strfmt("@GLS111733", salesId, salesTable.InvoiceAccount, custVendAccount));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CzCustTransOpenFilter construct()
    {
        return new CzCustTransOpenFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS111726";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    public static CzCustTransOpenFilter newFromCommon(Common _record)
    {
        SalesId                 salesId;
        CustAccount             custAccount;
        CzCustTransOpenFilter   custTransOpenFilter = CzCustTransOpenFilter::construct();
        CustTable               custTable;
        SalesTable              salesTable;
        LedgerJournalTrans      ledgerJournalTrans;
    ;
        switch (_record.TableId)
        {
            case tablenum(CustTable):
                custTable = _record;
                custAccount = custTable.AccountNum;
                break;

            case tablenum(SalesTable):
                salesTable  = _record;
                custAccount = salesTable.InvoiceAccount;
                salesId     = salesTable.SalesId;
                break;

            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans  = _record;
                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    custAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension);
                }
                else
                    if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                    {
                        custAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension);
                    }
                break;
        }

        custTransOpenFilter.parmCustVendAccount(custAccount);
        custTransOpenFilter.parmSalesId(salesId);

        return custTransOpenFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>