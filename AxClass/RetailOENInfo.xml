<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
/// <summary>
/// Retrieves the retail event notification information.
/// </summary>
abstract class RetailOENInfo extends RetailENInfo
{
    SalesTable              salesOrder;
    RetailExternalGiftCard  retailExternalGiftCard;
    Map                     parameterMap;
    LanguageId              languageId;

    SysEmailMessageTable    emailMessage;
    private RetailEventNotificationSettingLine notificationSettingLine;

    const str LanguageIdNotFoundMessageId = 'Langauge_Id_Not_Found';
    const str EmailMessageNotFoundMessageId = 'Email_Message_Not_Found';
    const str SalesOrderNotFoundMessageId = 'Sales_Order_Not_Found';

    // Variables for sales order summary
    #define.CustomerName('customername')
    #define.CustomerEmail('customeremailaddress')
    #define.SalesId('salesid')
    #define.DeliveryAddress('deliveryaddress')
    #define.DeliveryName('deliveryname')
    #define.CustomerAddress('customeraddress')
    #define.DeliveryDate('deliverydate')
    #define.ShipDate('shipdate')
    #define.modeofdelivery('modeofdelivery')
    #define.Charges('charges')
    #define.Tax('tax')
    #define.Total('total')
    #define.OrderNetAmount('ordernetamount')
    #define.Discount('discount')
    #define.StoreAddress('storeaddress')
    #define.StoreHourFrom('storeopenfrom')
    #define.StoreHourTo('storeopento')
    #define.StoreName('storename')
    #define.OrderConfirmationId('orderconfirmationid')

    // variables for sales order detail
    #define.ProductName('lineproductname')
    #define.ProductDescription('lineproductdescription')
    #define.ProductId('productid')
    #define.ProductRecId('lineproductrecid')
    #define.LineItemId('lineitemid')
    #define.ProductVariantId('lineproductvariantid')
    #define.ProductVariantInfo('lineproductvariantinfo')
    #define.Quantity('linequantity')
    #define.QuantityWithoutUnit('linequantity_withoutunit')
    #define.QuantityPicked('linequantitypicked')
    #define.QuantityPickedWithoutUnit('linequantitypicked_withoutunit')
    #define.QuantityPacked('linequantitypacked')
    #define.QuantityPackedWithoutUnit('linequantitypacked_withoutunit')
    #define.QuantityShipped('linequantityshipped')
    #define.QuantityShippedWithoutUnit('linequantityshipped_withoutunit')
    #define.Price('lineprice')
    #define.NetAmount('linenetamount')
    #define.LineDiscount('linediscount')
    #define.LineShipDate('lineshipdate')
    #define.LineDeliveryDate('linedeliverydate')
    #define.LineDeliveryMode('linedeliverymode')
    #define.LineDeliveryAddress('linedeliveryaddress')
    #define.LinePickupDate('linepickupdate')
    #define.LinePickupTimeSlot('linepickuptimeslot')

    #define.SaleslineTableBegin('<!--%tablebegin.salesline% -->')
    #define.SaleslineTableBeginNew('<!--%tablebegin.salesline%-->')
    #define.SaleslineTableEnd('<!--%tableend.salesline%-->')

    // Gift card related placeholders.
    #define.GiftCardNumber('giftcardnumber')
    #define.GiftCardBalance('availablebalance')
    #define.GiftCardMessage('giftcardmessage')
    #define.GiftCardPin('giftcardpin')
    #define.GiftCardExpiration('giftcardexpiration')
    #define.GiftCardRecipientName('giftcardrecipientname')
    #define.GiftCardBuyerName('giftcardbuyername')

    #define.LineUnit('lineunit')
    #define.UpcomingInventAvailDate('upcominginventavaildate')

    const str customerAccountPaymentAccountNumber = 'customeraccountpayment_accountnumber';
    const str customerAccountPaymentAmount = 'customeraccountpayment_amount';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateDetailInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the detail information.
    /// </summary>
    /// <param name="messageTemplate">
    /// String containing a message template.
    /// </param>
    /// <returns>
    /// A string message according to the template.
    /// </returns>
    protected str generateDetailInfo(str messageTemplate)
    {
        str messageBody = messageTemplate;

        int salesLineTableStart = strScan(messageBody, #SaleslineTableBegin, 1, strLen(messageBody));
        int salesLineTableStartNew = strScan(messageBody, #SaleslineTableBeginNew, 1, strLen(messageBody));

        int salesLineTableStartLength = salesLineTableStartNew ? strLen(#SaleslineTableBeginNew) : strLen(#SaleslineTableBegin);
        int salesLineTableStartResult = salesLineTableStartNew ? salesLineTableStartNew : salesLineTableStart;

        int salesLineTableEndLength = strLen(#SaleslineTableEnd);
        int salesLineTableEnd = strScan(messageBody, #SalesLineTableEnd, 1, strLen(messageBody)) + salesLineTableEndLength;

        if ((salesLineTableStartResult && salesLineTableEnd) && (salesLineTableEnd - salesLineTableStartResult) > SalesLineTableStartLength + salesLineTableEndLength)
        {
            str salesLineTableTemplate = subStr(messageBody,
                                            salesLineTableStartResult + SalesLineTableStartLength,
                                            salesLineTableEnd - salesLineTableStartResult - SalesLineTableStartLength - salesLineTableEndLength);

            messageBody = subStr(messageBody, 1, salesLineTableStartResult - 1) + this.generateSaleslineTable(saleslineTableTemplate) + subStr(messageBody, saleslineTableEnd, strLen(messageBody));
        }
        else
        {
            eventSource.WriteSalesLinesTableTagsNotFound(salesOrder.RecId, notificationSetting.EventNotificationType);
        }

        return messageBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str saleslineTableTemplate)
    {
        SalesLine       salesLine;
        str             result;
        Map             saleslineMap;
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;

        while select salesLine
                where salesLine.SalesId == salesOrder.SalesId
            outer join firstOnly GiftCardGiftMessage from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            outer join firstOnly Amount, CardNumber from retailGiftCardTransactions
                where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
        {
            saleslineMap = this.createSalesLineMap(salesLine, retailGiftCardTransactions, mcrSalesLine);
            result += SysEmailMessage::stringExpand(saleslineTableTemplate, saleslineMap);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Map</c> based on the the sales lines and optional gift card transaction.
    /// </summary>
    /// <param name = "salesLine">Salesline.</param>
    /// <param name = "retailGiftCardTransactions">Retail gift card transactions.</param>
    /// <param name = "mcrSalesLine">MCR sales line.</param>    
    /// <returns>Sales line map object.</returns>    
    protected Map createSalesLineMap(SalesLine salesLine, RetailGiftCardTransactions retailGiftCardTransactions,MCRSalesLine mcrSalesLine)
    {
        Map saleslineMap = new Map(Types::String,Types::String);

        EcoResProductRecId productMasterRecId = InventTable::find(salesLine.ItemId).Product;
        saleslineMap.insert(#ProductName, EcoResProductTranslation::getNameOrDefaultName(productMasterRecId, languageId));
        saleslineMap.insert(#ProductDescription, EcoResProductTranslation::getDescriptionOrDefaultDescription(productMasterRecId, languageId));

        InventDim inventDim = InventDim::find(salesLine.InventDimId);
        var productRecId = RetailTransactionServiceInventory::getProductRecordIdByDimensions
            (new Map(Types::String, Types::Int64), salesLine.ItemId, salesLine.DataAreaId, inventDim.InventcolorId, inventDim.ConfigId, inventDim.InventSizeId, inventDim.InventStyleId);
        saleslineMap.insert(#ProductId, int642Str(productRecId));
        saleslineMap.insert(#ProductRecId, int642Str(productRecId));
        saleslineMap.insert(#LineItemId, salesLine.ItemId);
        saleslineMap.insert(#ProductVariantId, salesLine.RetailVariantId);

        if (RetailEnableLineProductVariantInfoPlaceHolderFlight::instance().isEnabled())
        {
            saleslineMap.insert(#ProductVariantInfo, RetailProductPropertyManager::getRetailVariantDescription(salesLine.ItemId, salesLine.RetailVariantId, languageId));
        }

        // Sales line quantities, with and without unit.
        Qty qty = SalesLine.SalesQty;
        CurrencySymbol currencySymbol = RetailENInfo::getCurrencySymbol(salesLine);
        Qty qtyPicked = this.getSalesLineQtyPicked(salesLine);
        Qty qtyPacked = this.getSalesLineQtyPacked(salesLine);
        Qty qtyShipped = this.getSalesLineQtyShipped(salesLine);

        saleslineMap.insert(#Quantity, RetailENInfo::formatQtyData(qty, languageId, salesLine.SalesUnit));
        saleslineMap.insert(#QuantityPicked, RetailENInfo::formatQtyData(qtyPicked, languageId, salesLine.SalesUnit));
        saleslineMap.insert(#QuantityPacked, RetailENInfo::formatQtyData(qtyPacked, languageId, salesLine.SalesUnit));
        saleslineMap.insert(#QuantityShipped, RetailENInfo::formatQtyData(qtyShipped, languageId, salesLine.SalesUnit));
        saleslineMap.insert(#QuantityWithoutUnit, RetailENInfo::formatQtyData(qty, languageId, ''));
        saleslineMap.insert(#QuantityPickedWithoutUnit, RetailENInfo::formatQtyData(qtyPicked, languageId, ''));
        saleslineMap.insert(#QuantityPackedWithoutUnit, RetailENInfo::formatQtyData(qtyPacked, languageId, ''));
        saleslineMap.insert(#QuantityShippedWithoutUnit, RetailENInfo::formatQtyData(qtyShipped, languageId, ''));

        saleslineMap.insert(#Price, RetailENInfo::formatNumericDataInternal(salesLine.SalesPrice, languageId, currencySymbol));
        saleslineMap.insert(#LineDiscount, RetailENInfo::formatNumericDataInternal(salesLine.LineDisc, languageId, currencySymbol));
        saleslineMap.insert(#NetAmount, RetailENInfo::formatNumericDataInternal(salesLine.LineAmount, languageId, currencySymbol));

        saleslineMap.insert(#LineDeliveryDate, RetailENInfo::formatDatetimeData(salesLine.deliveryDate(), languageId));
        saleslineMap.insert(#LineShipDate, RetailENInfo::formatDatetimeData(salesLine.ShippingDateRequested, languageId));
        saleslineMap.insert(#LinePickupDate, RetailENInfo::formatDatetimeData(salesLine.ShippingDateRequested, languageId));
        saleslineMap.insert(#LineDeliveryMode, dlvMode::find(salesLine.DlvMode).Txt);
        saleslineMap.insert(#LineDeliveryAddress, salesLine.deliveryAddress().Address);
        saleslineMap.insert(#LineUnit, salesLine.SalesUnit);

        if (retailGiftCardTransactions)
        {
            saleslineMap.insert(#GiftCardBalance, num2Str(retailGiftCardTransactions.Amount, 0, 17, 1, 3));
            saleslineMap.insert(#GiftCardNumber, retailGiftCardTransactions.CardNumber);
        }

        if (mcrSalesLine)
        {
            saleslineMap.insert(#UpcomingInventAvailDate, MCRRetailOENInfo_FTCNotice::getUpcomingInventAvailDate(salesLine));

            if (retailExternalGiftCard)
            {
                saleslineMap.insert(#GiftCardNumber, retailExternalGiftCard.CardNumber);
                saleslineMap.insert(#GiftCardPin, retailExternalGiftCard.Pin);
                saleslineMap.insert(#GiftCardExpiration, retailExternalGiftCard.Expiration);
                saleslineMap.insert(#GiftCardBalance, RetailENInfo::formatNumericDataInternal(salesLine.LineAmount, languageId, currencySymbol));
            }
            else
            {
                saleslineMap.insert(#GiftCardNumber, mcrSalesLine.GiftCardNumber);
            }

            saleslineMap.insert(#GiftCardRecipientName, mcrSalesLine.GiftCardRecipientName);
            saleslineMap.insert(#GiftCardBuyerName, mcrSalesLine.GiftCardBuyerName);

            saleslineMap.insert(#GiftCardMessage, mcrSalesLine.GiftCardGiftMessage);
        }

        RetailSalesLine retailSalesLine = RetailSalesLine::findBySalesLine(salesLine.RecId);
        saleslineMap = this.updateSalesLineMapForRetailSalesLine(saleslineMap, retailSalesLine);

        return saleslineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emailid, the method will first check if <c>RetailEventNotificationSettingLine</c> exists, if not exists, fallback to super().
    /// </summary>
    /// <returns>
    /// Emailid of SysEmailId type.
    /// </returns>
    protected SysEmailId getEmailId()
    {
        return this.notificationSettingLine ? notificationSettingLine.EmailId : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNotificationSettingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init <c>RetailEventNotificationSettingLine</c>.
    /// </summary>
    protected void initNotificationSettingLine()
    {
        DlvModeId deliveryModeId = this.getDistinctDeliveryModeId();

        if (deliveryModeId)
        {
            select firstonly notificationSettingLine
                where notificationSettingLine.EventNotificationSetting == notificationSetting.RecId
                && notificationSettingLine.DeliveryModeCode == deliveryModeId
                && notificationSettingLine.Active;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctDeliveryModeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get distinct delivery mode id.
    /// </summary>
    /// <returns>
    /// Delivery mode id if all sales line share same delivery mode id. Otherwise, return null.
    /// </returns>
    protected DlvModeId getDistinctDeliveryModeId()
    {
        DlvModeId deliveryModeId;
        SalesLine salesLine;

        while
            select DlvMode from salesLine
                group by salesLine.DlvMode
                where salesLine.SalesId == salesOrder.SalesId
        {
            if (deliveryModeId)
            {
                deliveryModeId = null;
                break;
            }
            else
            {
                deliveryModeId = salesLine.DlvMode;
            }
        }
        
        return deliveryModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message subject.
    /// </summary>
    /// <returns>
    /// String containing actual subject, message etc.
    /// </returns>
    protected str getMessageSubject()
    {
        str     emailSubjectTemplate = emailMessage.Subject;

        return SysEmailMessage::stringExpand(emailSubjectTemplate, parameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the toaddress.
    /// </summary>
    /// <returns>
    /// Email of type SysEmailAddress of <c>SalesTable</c> table.
    /// </returns>
    protected SysEmailAddress getToAddr()
    {
        return salesOrder.Email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map and inserts the values.
    /// </summary>
    protected void initParameterMap()
    {
        SysEmailTable   table;

        RetailStoreTable    store;

        if (FeatureStateProvider::isFeatureEnabled(RetailEventNotificationPerDeliveryModeFeature::instance())
            && this.isNotificationEnabled()
            && RetailEventNotificationAction::isSettingLineSupportedForNotificationType(this.EventNotificationType()))
        {
            this.initNotificationSettingLine();
        }

        if (this.parmSalesOrder())
        {
            languageId = CustTable::find(this.parmSalesOrder().CustAccount).languageId();

            if (RetailUseChannelLanguageIdForOrderEventNotificationsFeatureExposure::isEnabled())
            {
                RetailChannelTable channel = RetailChannelTable::findByRecId(salesOrder.retailSalesTable().RetailChannel);

                // Update language for signed in customer if the language does not match the one saved with the customer details.
                if (salesOrder.languageId != '' && salesOrder.LanguageId != languageId
                    && channel.RecId != 0 && channel.ChannelType == RetailChannelType::SharePointOnlineStore)
                {
                    languageId = salesOrder.LanguageId;
                }
            }

            table = SysEmailTable::find(this.getEmailId());

            if (!languageId)
            {
                languageId = CompanyInfo::languageId();

                if (!languageId)
                {
                    ApplicationEventSource::EventWriteRetailOrderNotificationInformation(LanguageIdNotFoundMessageId, '', con2Str(xSession::xppCallStack()));
                }
            }

            emailMessage = SysEmailMessageTable::find(this.getEmailId(), languageId);

            if (!emailMessage)
            {
                // Message not found for this language.
                languageId = table.DefaultLanguage;
                emailMessage = SysEmailMessageTable::find(this.getEmailId(), languageId);

                if (!emailMessage)
                {
                    ApplicationEventSource::EventWriteRetailOrderNotificationInformation(EmailMessageNotFoundMessageId, '', con2Str(xSession::xppCallStack()));
                }
            }

            parameterMap = new Map(Types::String,Types::String);

            parameterMap.insert(#CustomerName, salesOrder.SalesName);
            parameterMap.insert(#CustomerEmail, salesOrder.Email);
            parameterMap.insert(#SalesId, salesOrder.SalesId);
            parameterMap.insert(#DeliveryAddress, salesOrder.deliveryAddressing());
            parameterMap.insert(#DeliveryName, this.getDeliveryName(salesOrder));
            parameterMap.insert(#CustomerAddress, CustTable::find(salesOrder.CustAccount).address());
            parameterMap.insert(#DeliveryDate, RetailENInfo::formatDatetimeData(salesOrder.deliveryDateDisplay(), languageId));
            parameterMap.insert(#ShipDate, RetailENInfo::formatDatetimeData(salesOrder.ShippingDateRequested, languageId));
            parameterMap.insert(#ModeOfDelivery, dlvMode::find(salesOrder.DlvMode).Txt);
            parameterMap.insert(#orderconfirmationid, salesOrder.retailSalesTable().ChannelReferenceId);

            store = RetailStoreTable::findRecId(RetailSalesTable::findSalesTable(this.parmSalesOrder()).RetailChannel);
            if (store)
            {
                parameterMap.insert(#StoreAddress, InventLocation::find(store.inventLocation).address());
                parameterMap.insert(#StoreHourFrom, time2str(store.openFrom, TimeSeparator::Colon, TimeFormat::AMPM));
                parameterMap.insert(#StoreHourTo, time2str(store.openTo, TimeSeparator::Colon, TimeFormat::AMPM));
                parameterMap.insert(#StoreName, store.name());
            }

            AmountCur       totalAmount;
            AmountCur       totalTaxAmount;
            AmountCur       totalDiscount;
            AmountCur       totalCharge;
            CurrencySymbol currencySymbol;

            try
            {
                SalesTotals salesTotals = salesTotals::construct(salesOrder, SalesUpdate::All);
                salesTotals.calc();

                // Sales totals does not include taxes, discounts, charges and balance that has already been invoiced.
                CustInvoiceJour custInvoiceJour;
                select sum(SumLineDisc), sum(SumTax), sum(SumMarkup), sum(InvoiceAmount) from custInvoiceJour
                    where custInvoiceJour.SalesId == salesOrder.SalesId
                    && custInvoiceJour.RefNum == RefNum::SalesOrder;

                totalCharge     = salesTotals.totalMarkup() + custInvoiceJour.SumMarkup;
                totalAmount     = salesTotals.totalAmount() + custInvoiceJour.InvoiceAmount;
                totalTaxAmount  = salesTotals.totalTaxAmount() + custInvoiceJour.SumTax;
                totalDiscount   = salesTotals.totalLineDisc() + custInvoiceJour.SumLineDisc;
                currencySymbol = RetailENInfo::getCurrencySymbol(salesOrder);
            }
            catch
            {
                totalCharge     = 0;
                totalAmount     = 0;
                totalTaxAmount  = 0;
                totalDiscount   = 0;
            }

            parameterMap.insert(#Charges, RetailENInfo::formatNumericDataInternal(totalCharge, languageId, currencySymbol));
            parameterMap.insert(#Tax, RetailENInfo::formatNumericDataInternal(totalTaxAmount, languageId, currencySymbol));
            parameterMap.insert(#Total, RetailENInfo::formatNumericDataInternal(totalAmount, languageId, currencySymbol));
            parameterMap.insert(#Discount, RetailENInfo::formatNumericDataInternal(totalDiscount, languageId, currencySymbol));
            parameterMap.insert(#OrderNetAmount, RetailENInfo::formatNumericDataInternal(totalAmount - totalTaxAmount - totalCharge, languageId, currencySymbol));

            str customerAccountForPayment = '';
            str customerAccountAmount = '';

            if (RetailTransactionPaymentsHelper::isCallCenterOrCommercePaymentsEnabledOrder(salesOrder))
            {
                MCRCustPaymTable mcrCustPaymTable;

                select firstonly Amount, CustAccount from mcrCustPaymTable
                    where mcrCustPaymTable.RefTableId == tableNum(SalesTable)
                    && mcrCustPaymTable.RefRecId == salesOrder.RecId
                    && mcrCustPaymTable.CustPaymType == MCRCustPaymType::OnAccount;

                customerAccountForPayment = mcrCustPaymTable.CustAccount;

                customerAccountAmount = RetailENInfo::formatNumericDataInternal(mcrCustPaymTable.Amount, languageId, currencySymbol);
            }
            else
            {
                RetailTransactionTable retailTransactionTable = RetailOENInfo::getRetailTransactionTableForSalesOrder(salesOrder);

                if (retailTransactionTable.RecId)
                {
                    RetailOperationId customerAccountOperationId = RetailPosOperationHelper::payCustomerAccountOperation();

                    RetailTransactionPaymentTrans retailTransactionPaymentTrans;

                    while select retailTransactionPaymentTrans
                        where retailTransactionPaymentTrans.Channel == retailTransactionTable.Channel
                        && retailTransactionPaymentTrans.store == retailTransactionTable.store
                        && retailTransactionPaymentTrans.terminal == retailTransactionTable.terminal
                        && retailTransactionPaymentTrans.transactionId == retailTransactionTable.transactionId
                    {
                        if (retailTransactionPaymentTrans.getPaymentOperation() == customerAccountOperationId)
                        {
                            customerAccountForPayment = retailTransactionPaymentTrans.cardOrAccount;

                            customerAccountAmount = RetailENInfo::formatNumericDataInternal(retailTransactionPaymentTrans.amountTendered, languageId, currencySymbol);
                            break;
                        }
                    }
                }
            }

            parameterMap.insert(customerAccountPaymentAccountNumber, customerAccountForPayment);
            parameterMap.insert(customerAccountPaymentAmount, customerAccountAmount);
        }
        else
        {
            ApplicationEventSource::EventWriteRetailOrderNotificationInformation(SalesOrderNotFoundMessageId, '', con2Str(xSession::xppCallStack()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSalesOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order information.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean IsSalesOrderInfo()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOrder</Name>
				<Source><![CDATA[
    public SalesTable parmSalesOrder(SalesTable _salesOrder = salesOrder)
    {
        salesOrder = _salesOrder;

        return salesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRetailExternalGiftCard</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RetailExternalGiftCard paramRetailExternalGiftCard(RetailExternalGiftCard _retailExternalGiftCard = retailExternalGiftCard)
    {
        retailExternalGiftCard = _retailExternalGiftCard;
        return retailExternalGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales line quantity packed.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line used for getting the packed quantity.
    /// </param>
    /// <returns>
    /// The quantity packed.
    /// </returns>
    protected SalesQty getSalesLineQtyPacked(SalesLine _salesLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales line quantity picked.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line used for getting the picked quantity.
    /// </param>
    /// <returns>
    /// The quantity picked.
    /// </returns>
    protected SalesQty getSalesLineQtyPicked(SalesLine _salesLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales line quantity shipped.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line used for getting the shipped quantity.
    /// </param>
    /// <returns>
    /// The quantity shipped.
    /// </returns>
    protected SalesQty getSalesLineQtyShipped(SalesLine _salesLine)
    {
        return 0;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parseEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the email template.
    /// </summary>
    /// <returns>
    /// String which replaces e-mail related placeholders with the actual subject, message etc or throws an error message.
    /// </returns>
    protected str parseEmailTemplate()
    {
        if (!emailMessage)
        {
            throw error(strfmt("@SYS74260", languageId));
        }

        return SysEmailMessage::stringExpand(this.generateDetailInfo(this.getEmailTemplate()), parameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the email template.
    /// </summary>
    /// <returns>The email template.</returns>
    protected str getEmailTemplate()
    {
        // Support email notifications with XSLT email templates
        if (emailMessage.LayoutType == SysEmailLayoutType::DynamicLayout)
        {
            return emailMessage.XSLTMail;
        }
        return emailMessage.Mail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveENProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the event notification profile Id.
    /// </summary>
    /// <param name="refRecId">
    /// Reference for RecId.
    /// </param>
    /// <returns>
    /// EventNotificationProfileId for <c>RetailChannelTable</c> table.
    /// </returns>
    protected RetailEventNotificationProfileId resolveENProfileId(RefRecId refRecId)
    {
        RetailChannelTable      channel;

        this.resolveSalesOrder(refRecId);

        channel = RetailChannelTable::findByRecId(salesOrder.retailSalesTable().RetailChannel);

        return channel.EventNotificationProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves sales order.
    /// </summary>
    /// <param name="refRecId">
    /// Reference RecID.
    /// </param>
    public abstract void resolveSalesOrder(RefRecId refRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotificationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether notification is enabled.
    /// </summary>
    /// <returns>
    /// Boolean true if action is successful; else false.
    /// </returns>
    public boolean isNotificationEnabled()
    {
        // Here we have extra condition for order events.
        // Initially this is to prevent triggering some notifications for return orders. Customer can customize this behavior, though.
        return super() && RetailOENInfo::isSalesTypeSupportedForNotificationType(salesOrder.SalesType, this.EventNotificationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesTypeSupportedForNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a sales type and notification type, determine whether the notification type supports the sales type.
    /// </summary>
    /// <param name="_salesType">The sales type.</param>
    /// <param name="_notificationType">The notification type.</param>
    /// <returns>True if the notification type supports the sales type; otherwise, false.</returns>
    [Replaceable]
    protected static boolean isSalesTypeSupportedForNotificationType(SalesType _salesType, RetailEventNotificationType _notificationType)
    {
        switch (_salesType)
        {
            case SalesType::Sales:
                return true;
            default:
                // This is primarily to prevent return orders from triggering specific notification.
                return (_notificationType != RetailEventNotificationType::OrderCreation
                        && _notificationType != RetailEventNotificationType::OrderConfirmation
                        && _notificationType != RetailEventNotificationType::PickingComplete
                        && _notificationType != RetailEventNotificationType::PackingComplete
                        && _notificationType != RetailEventNotificationType::OrderReadyForPickup
                        && _notificationType != RetailEventNotificationType::Shipment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrShouldSendNotificationForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the notification and resolves the sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// Object of <c>_salesTable</c>.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false.
    /// </returns>
    public static boolean mcrShouldSendNotificationForSalesOrder(SalesTable _salesTable)
    {
        RefRecId                retailChannel;
        RetailMCRChannelTable   retailMCRChannelTable;

        if (_salesTable)
        {
            retailChannel = _salesTable.retailSalesTable().RetailChannel;
            retailMCRChannelTable = RetailMCRChannelTable::findRecId(retailChannel);

            return retailMCRChannelTable.MCREnableOrderCompletion
                        || retailMCRChannelTable.MCREnableDirectedSelling
                        || retailMCRChannelTable.MCREnableOrderPriceControl;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShouldSendNotificationForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the notification and resolves the sales order.
    /// </summary>
    /// <param name="soTable">
    /// Object of <c>SalesTable</c>.
    /// </param>
    /// <returns>
    /// Boolean value true if action is successful; else false.
    /// </returns>
    public static boolean ShouldSendNotificationForSalesOrder(SalesTable soTable)
    {
        if (!RetailSendOrderNotificationsForCashAndCarry::instance().isEnabled())
        {
            return soTable && soTable.isRetailSale() && !soTable.isRetailCashAndCarrySales();
        }
        else
        {
            return soTable && soTable.isRetailSale();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailTransactionTableForSalesOrder</Name>
				<Source><![CDATA[
    private static RetailTransactionTable getRetailTransactionTableForSalesOrder(SalesTable salesTable)
    {
        // Get the most recent retail transaction table record for this sales id.
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(RetailTransactionTable));
        qbds.addSelectionField(fieldNum(RetailTransactionTable, recId));
        qbds.addSelectionField(fieldNum(RetailTransactionTable, transactionId));
        qbds.addSelectionField(fieldNum(RetailTransactionTable, channel));
        qbds.addSelectionField(fieldNum(RetailTransactionTable, store));
        qbds.addSelectionField(fieldNum(RetailTransactionTable, terminal));

        qbds.addRange(fieldNum(RetailTransactionTable, salesOrderId)).value(queryValue(salesTable.SalesId));

        qbds.addSortField(fieldNum(RetailTransactionTable, TransDate), SortOrder::Descending);
        qbds.addSortField(fieldNum(RetailTransactionTable, TransTime), SortOrder::Descending);

        QueryRun qr = new QueryRun(query);
        
        qr.next();
        RetailTransactionTable retailTransactionTable = qr.get(tableNum(RetailTransactionTable));

        return retailTransactionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineMapForRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds retail sales line information to sales line map.
    /// </summary>
    /// <param name = "salesLineMap">Sales line map object to update.</param>
    /// <param name = "retailSalesLine">Retail sales line.</param>
    /// <returns>Updated sales line map object.</returns>
    private Map updateSalesLineMapForRetailSalesLine(Map salesLineMap, RetailSalesLine retailSalesLine)
    {
        if (retailSalesLine)
        {
            salesLineMap.insert(#LinePickupTimeSlot, time2str(retailSalesLine.PickupStartTime, TimeSeparator::Colon, TimeFormat::AMPM)
                + '-' + time2str(retailSalesLine.PickupEndTime, TimeSeparator::Colon, TimeFormat::AMPM));
        }

        return salesLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryName</Name>
				<Source><![CDATA[
    private str getDeliveryName(SalesTable _salesOrder)
    {
        str deliveryName = '';
        var address = _salesOrder.deliveryAddress();
        if (address)
        {
            var location = LogisticsLocation::find(address.Location);
            if (location)
            {
                deliveryName = location.Description;
            }
        }
        return deliveryName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>