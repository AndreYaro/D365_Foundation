<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceSoftReserveBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceSoftReserveBatchJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceSoftReserveBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceSoftReserveBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceSoftReserveBatchJobTask dataCollectionTask = new InventInventoryDataServiceSoftReserveBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runProcessSoftReserveQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessSoftReserveQueue</Name>
				<Source><![CDATA[
    public void runProcessSoftReserveQueue()
    {
        boolean isSoftReservationEnabled = InventInventoryDataServiceSoftReservationHelper::isSoftReserveEnabled();
        if (!isSoftReservationEnabled)
        {
            return;
        }

        InventInventoryDataServiceSoftReserveQueueTemp softReserveQueueTemp;
        List softReserveList = new List(Types::Class);
        Map softReserveMap = new Map(Types::String, Types::Class);

        while select softReserveQueueTemp
            where softReserveQueueTemp.RecId >= minRecId
            && softReserveQueueTemp.RecId <= maxRecId
        {
            InventDim inventDim = InventDim::findInLegalEntity(softReserveQueueTemp.InventDimId, softReserveQueueTemp.DataAreaId);
            var request = InventOnHandSoftReserveEvent::transformSoftReserveQueueTemp(inventDim, softReserveQueueTemp, shouldSyncDim9, shouldSyncDim10);
            softReserveList.addEnd(request);
            softReserveMap.add(softReserveQueueTemp.EventId, request);
        }

        if (!softReserveList.empty())
        {
            this.postSoftReserveList(softReserveList, softReserveMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSoftReserveList</Name>
				<Source><![CDATA[
    protected void postSoftReserveList(List softReserveList, Map softReserveMap)
    {
        var activity = logger.getInventoryDataServiceActivity();

        using (var activityContext = activity.getActivityContext_PostRecords('PostBulkSoftReserveEvents'))
        {
            InventInventoryDataServiceSoftReserveQueueTemp softReserveQueueTemp;
            var correlationId = '';
            try
            {
                var response = InventInventoryDataServiceSoftReservationHelper::postSoftReservationRequests(softReserveList, softReserveMap, true);
                correlationId = response.parmCorrelationId();

                ttsbegin;
                // Use a separate parameter
                InventInventoryDataServiceParameters::addSuccessfullyPostedCountReserv(response.parmSuccess().elements());
                ttscommit;

                if (!response.parmFailure().empty())
                {
                    str failedEventIdsAndErrorMessages = '';

                    ttsbegin;
                    while select forupdate softReserveQueueTemp
                        where softReserveQueueTemp.RecId >= minRecId
                        && softReserveQueueTemp.RecId <= maxRecId
                    {
                        var eventId = softReserveQueueTemp.EventId;
                        if (softReserveMap.exists(eventId))
                        {
                            InventOnHandSoftReserveEvent request = softReserveMap.lookup(eventId);

                            if (request.parmStatus() == InventInventoryDataServiceSoftReserveResponseStatus::Failed)
                            {
                                if (softReserveQueueTemp.RetryCount < InventInventoryDataServiceSoftReservationHelper::maxRetryCount)
                                {
                                    softReserveQueueTemp.PostFailed = true;
                                }

                                softReserveQueueTemp.RetryCount++;
                                failedEventIdsAndErrorMessages += eventId + ': ';
                                failedEventIdsAndErrorMessages += request.parmResponseMessage() + '; ';
                                softReserveQueueTemp.update();
                            }
                        }
                    }
                    ttscommit;

                    NoYes postSuccessed = failedEventIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                    activity.logPostSoftReserveEventInfo(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedEventIdsAndErrorMessages);
                }
            }
            catch
            {
                ttsbegin;
                update_recordset softReserveQueueTemp
                    setting PostFailed = true
                    where softReserveQueueTemp.RecId >= minRecId &&
                            softReserveQueueTemp.RecId <= maxRecId;
                        
                ttscommit;

                activity.logPostSoftReserveEventInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>