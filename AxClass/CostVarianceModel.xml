<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostVarianceModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostVarianceChartModel</c> class models a variance chart for statements.
/// </summary>
public abstract class CostVarianceModel
{
    CostStatementModel              statementModel;
    Query                           query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view model and updates the chart data.
    /// </summary>
    /// <param name = "_statementModel">
    /// An instance of the <c>CostStatementModel</c> class.
    /// </param>
    public void initialize(CostStatementModel _statementModel)
    {
        query = new Query();

        statementModel = _statementModel;

        this.buildQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for populating the chart data.
    /// </summary>
    private void buildQuery()
    {
        var qbdsCostStatementCache = query.addDataSource(tableNum(CostStatementCache));
        qbdsCostStatementCache.addSelectionField(fieldNum(CostStatementCache, Amount), SelectionField::Sum);
        qbdsCostStatementCache.addGroupByField(fieldNum(CostStatementCache, StatementLineCategoryLevel3));
        qbdsCostStatementCache.addRange(fieldNum(CostStatementCache, TransDate)).value(queryRange(statementModel.getFromDate(), statementModel.getToDate()));

        this.applyStatementRelatedRangeFilters(qbdsCostStatementCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyStatementRelatedRangeFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply statement specific range filters to the query.
    /// </summary>
    /// <param name = "_qbds">
    /// An instance of <c>QueryBuildDataSource</c> for a query with <c>CostStatementCache</c> as the datasource.
    /// </param>
    protected abstract void applyStatementRelatedRangeFilters(QueryBuildDataSource _qbds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves variance data to be displayed in the chart.
    /// </summary>
    /// <returns>
    /// The <c>CostVarianceChartTmp</c> table buffer containing the chart data.
    /// </returns>
    public CostVarianceChartTmp getChartData()
    {
        CostVarianceChartTmp chartData;
        var viewId = tableNum(CostStatementCache);
        var queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            CostStatementCache record = queryRun.get(viewId);
            this.insertRecord(chartData, record);
        }

        return chartData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record in the <c>CostVarianceChartTmp</c> table based on the <c>CostStatementCache</c> buffer.
    /// </summary>
    /// <param name = "_varianceData">
    /// The <c>CostVarianceChartTmp</c> table buffer.
    /// </param>
    /// <param name = "_viewRecord">
    /// The <c>CostStatementCache</c> buffer containing the source data.
    /// </param>
    protected abstract void insertRecord(CostVarianceChartTmp _varianceData, CostStatementCache _viewRecord)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>