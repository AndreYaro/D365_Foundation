<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmMailingFileCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmMailingFileCreate extends smmCreateMailing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method of the
    /// class.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description; for example, when you need
    /// internal variables to build the description text. The static description method of the
    /// <c>RunBase</c> class can be used to obtain the description of a class because you do not have to
    /// create an instance of the class to call it. However, this method speeds up displaying the
    /// description in a grid.
    /// </remarks>
    public ClassDescription caption()
    {
        return smmMailingFileCreate::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>QueryRun</c>class.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog box, and if a select menu item is added to a
    /// dialog box. Do not instantiate the instance of the <c>QueryRun</c> class when the method is called.
    /// This should be done in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should
    /// be used in the <c>init</c> method if this is used, or in this method only when it is not
    /// instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        if (! mailingQR)
        {
            mailingQR = new QueryRun(querystr(smmMailingQuery));
        }

        return mailingQR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        smmMailingFileCreate::processOnServer(mailingQR.pack(), updateStatus, filename, userDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus(smmMailings _smmMailings)
    {
        smmMailingHistory   smmMailingHistory;
        smmMailings         smmMailings;

        // Select mailing record for update
        smmMailings = smmMailings::find(_smmMailings.KeyId, true);

        // If mailing is not a regular letter, update status to sent
        if (smmMailings.Status != smmMailingStatus::Regular)
        {
            smmMailings.Status  = smmMailingStatus::Sent;
        }

        // Update sent date
        smmMailings.ActualDate = userDate;
        smmMailings.update();

        // Update mailing history table
        smmMailingHistory.KeyId          = _smmMailings.KeyId;
        smmMailingHistory.ActualDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        smmMailingHistory.TimeHour24     = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        smmMailingHistory.RespWorker     = smmUtility::getCurrentContactWorker();

        if (smmMailingHistory.validateWrite(true))
        {
            smmMailingHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static smmMailingFileCreate construct()
    {
        return new smmMailingFileCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Mailing file
        return "@SYS80054";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    //Must be client because of file check
    public static void main(Args args)
    {
        smmMailingFileCreate smmMailingFileCreate = smmMailingFileCreate::construct();

        smmMailingFileCreate.getLast();

        if (smmMailingFileCreate.prompt())
        {
            if (args && args.object())
            {
                smmMailingFileCreate.setQueryRun(args.object());
            }

            smmMailingFileCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    static void processOnServer(container packedQuery, boolean updateStatus, Filename filename, date userDate)
    {
        #file
        #OCCRetryCount
        smmMailings             smmMailings;
        DirPartyTable           dirPartyTable;
        ContactPerson           contactPerson;
        Name                    companyName;
        smmMailingFileCreate    smmMailingFileCreate;
        QueryRun                mailingQR = new QueryRun(packedQuery);
        Set                     contactList;

        try
        {
            ttsbegin;

            smmMailingFileCreate = new smmMailingFileCreate();
            smmMailingFileCreate.parmFileName(filename);
            smmMailingFileCreate.parmUpdateStatus(updateStatus);
            smmMailingFileCreate.parmUserDate(userDate);

            // Creating mailing file
            smmMailingFileCreate.progressInit("@SYS80639", SysQuery::countLoops(mailingQR), #AviUpdate);

            // Create a header line in the file
            smmMailingFileCreate.writeHeader();

            contactList = new Set(Types::String);

            while (mailingQR.next())
            {
                if (mailingQR.changed(tablenum(smmMailings)))
                {
                    smmMailings     = mailingQR.get(tablenum(smmMailings));
                }

                contactPerson       = mailingQR.get(tablenum(ContactPerson));

                if (mailingQR.changed(tablenum(DirPartyTable)))
                {
                    dirPartyTable         = mailingQR.get(tablenum(DirPartyTable));
                    companyName           = dirPartyTable.Name;
                }

                if (mailingQR.changed(tablenum(ContactPerson)))
                {
                    if (! contactList.in(contactPerson.ContactPersonId))
                    {
                        // Write current line to file
                        smmMailingFileCreate.writeLine(smmMailings.Party,
                                                       companyName,
                                                       contactPerson);

                        // Is update checkbox is marked
                        if (updateStatus)
                        {
                            // Update sent status on mailing and add to mailing history
                            smmMailingFileCreate.updateStatus(smmMailings);
                        }

                        contactList.add(contactPerson.ContactPersonId);
                    }
                }
            }

            // Save the file with a client bound method
            smmCreateMailing::saveFileToClient(filename,smmMailingFileCreate.fileListPack());

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            mailingQR.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    mailingQR.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>