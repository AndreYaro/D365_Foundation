<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidKeyVaultParametersTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSealedBidKeyVaultParametersHandler</c> class handles the
/// <c>KeyVaultParameters</c> table for the Sealed bidding feature.
/// </summary>
internal final class PurchRFQSealedBidKeyVaultParametersTableHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEnableForSealedBidding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Key Vault can be enabled for sealed Bidding.
    /// </summary>
    /// <param name ="_recId">RecId of the <c>KeyVaultParameters</c> table.</param>
    /// <returns>True if the Key Vault can be enabled for sealed Bidding; otherwise false.</returns>
    [Hookable(false)]
    internal final static boolean canEnableForSealedBidding(KeyVaultRef _recId)
    {
        KeyVaultParameters keyVaultParameters;

        select firstonly RecId from keyVaultParameters
            where keyVaultParameters.RecId != _recId
                && keyVaultParameters.EnabledForSealedBidding == NoYes::Yes;

        return keyVaultParameters.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEnabledForSealedBidding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a Key vault record enabled for the seaed bidding.
    /// </summary>
    /// <param name ="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>The record in the <c>KeyVaultParameters</c> table; otherwise, an empty record.</returns>
    [Hookable(false)]
    internal final static KeyVaultParameters findByEnabledForSealedBidding(boolean _forUpdate = false)
    {
        KeyVaultParameters keyVaultParameters;

        keyVaultParameters.selectForUpdate(_forupdate);

        select firstonly keyVaultParameters
            where keyVaultParameters.EnabledForSealedBidding == NoYes::Yes;

        return keyVaultParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSealedBid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sealed bid exists with reference to the key vault.
    /// </summary>
    /// <param name ="_recId">RecId of the <c>KeyVaultParameters</c> table.</param>
    /// <returns>True if the sealed bid exists with reference to the key vault; otherwise false.</returns>
    [Hookable(false)]
    internal final static boolean existSealedBid(KeyVaultRef _recId)
    {
        boolean ret;

        if (_recId)
        {
            PurchRFQSealedBidKeyVaultCertificateTableRelation purchRFQSealedReplySecret;
            KeyVaultCertificateTable keyVaultCertificate;
            PurchRFQCaseTable purchRFQCaseTable;
            PurchRFQTable purchRFQTable;
            PurchRFQReplyTable purchRFQReplyTable;

            select firstonly RecId from keyVaultCertificate
                exists join purchRFQSealedReplySecret
                    where purchRFQSealedReplySecret.KeyVaultCertificateTable == keyVaultCertificate.RecId
                       && keyVaultCertificate.KeyVaultRef == _recId
                exists join purchRFQReplyTable
                    where purchRFQReplyTable.RecId == purchRFQSealedReplySecret.PurchRFQReplyTable
                exists join purchRFQTable
                    where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                exists join purchRFQCaseTable
                    where purchRFQCaseTable.RFQCaseId == purchRFQTable.RFQCaseId
                       && purchRFQCaseTable.IsSealed  == NoYes::Yes;

            if (keyVaultCertificate.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnableForSealedBidding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sealed bid exists with reference to the key vault.
    /// </summary>
    /// <param name = "_keyVaultParameters">The <c>KeyVaultParameters</c> record.</param>
    /// <returns>True if the sealed bid exists with reference to the key vault; otherwise false.</returns>
    [Hookable(false)]
    internal final static boolean validateEnableForSealedBidding(KeyVaultParameters _keyVaultParameters)
    {
        boolean ret = true;

        if (_keyVaultParameters.EnabledForSealedBidding)
        {
            KeyVaultParameters keyVault = PurchRFQSealedBidKeyVaultParametersTableHandler::findByEnabledForSealedBidding();

            if (keyVault.RecId && keyVault.RecId != _keyVaultParameters.RecId)
            {
                ret = checkFailed("@SCM:KeyVaultEnabledForSealedBiddingAlreadyExists");
            }
        }
        else if (_keyVaultParameters.RecId
                && _keyVaultParameters.orig().EnabledForSealedBidding
                && !_keyVaultParameters.EnabledForSealedBidding
                && PurchRFQSealedBidKeyVaultParametersTableHandler::existSealedBid(_keyVaultParameters.RecId))
        {
            ret = checkFailed("@SCM:KeyVaultWarningForDisallowKeyVaultWithSealedBidInProgress");
        }

        if (_keyVaultParameters.RecId
            && _keyVaultParameters.orig().Url != _keyVaultParameters.Url
            && PurchRFQSealedBidKeyVaultParametersTableHandler::existSealedBid(_keyVaultParameters.RecId))
        {
            ret = checkFailed("@SCM:KeyVaultWarningForUpdateKeyVaultURLWithSealedBidInProgress");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeyVaultParameters_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnInitialized event of the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The <c>KeyVaultParameters</c> form being extended.</param>
    /// <param name = "_e">The args for the event.</param>
    [FormEventHandler(formStr(KeyVaultParameters), FormEventType::Initialized),
     Hookable(false)]
    public static void KeyVaultParameters_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        PurchRFQSealedBidFlightingManager::initSealedBiddingSpecificControl(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Parameters_ClientSecretKey_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnValidating event of the Parameters_ClientSecretKey control on the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The FormControlObject on the <c>KeyVaultParameters</c> form.</param>
    /// <param name = "_e">The args for the event.</param
    [FormControlEventHandler(formControlStr(KeyVaultParameters, Parameters_ClientSecretKey), FormControlEventType::Validating),
     Hookable(false)]
    public static void Parameters_ClientSecretKey_OnValidating(FormControl _sender, FormControlEventArgs _e)
    {
        KeyVaultParameters keyVaultParameters =  _sender.dataSourceObject().cursor() as KeyVaultParameters;
            
        if (!PurchRFQSealedBidKeyVaultParametersTableHandler::validateKeyVaultParametersUpdate(keyVaultParameters))
        {
            FormControlCancelEventArgs cancelEvent = _e as FormControlCancelEventArgs;
            cancelEvent.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeyVaultParametersUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static boolean validateKeyVaultParametersUpdate(KeyVaultParameters _keyVaultParameters)
    {
        boolean ret = true;

        KeyVaultParameters keyVaultParametersOrig =  _keyVaultParameters.orig();

        if ((_keyVaultParameters.RecId
                    && ((!_keyVaultParameters.EnabledForSealedBidding && keyVaultParametersOrig.EnabledForSealedBidding)
                        || (_keyVaultParameters.EnabledForSealedBidding
                            && (_keyVaultParameters.Url != keyVaultParametersOrig.Url
                            || _keyVaultParameters.AppClientId != keyVaultParametersOrig.AppClientId
                            || _keyVaultParameters.ClientSecretKey != keyVaultParametersOrig.ClientSecretKey))))
                    && Box::yesNo("@SCM:PurchRFQSealedBidKeyVaultParametersUpdateForSealedBidConfirmationMessage"
                                  , DialogButton::No, "@SYS12529") == DialogButton::No)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AppClientId_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnValidating event of the AppClientId control on the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The FormDataObject on the <c>KeyVaultParameters</c> form.</param>
    /// <param name = "_e">The args for the event.</param
    [FormDataFieldEventHandler(formDataFieldStr(KeyVaultParameters, KeyVaultParameters, AppClientId), FormDataFieldEventType::Validating),
     Hookable(false)]
    public static void AppClientId_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        KeyVaultParameters keyVaultParameters =  _sender.datasource().cursor() as KeyVaultParameters;

        if (!PurchRFQSealedBidKeyVaultParametersTableHandler::validateKeyVaultParametersUpdate(keyVaultParameters))
        {
            FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;
            cancelEvent.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Url_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnValidating event of the Url control on the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The FormDataObject on the <c>KeyVaultParameters</c> form.</param>
    /// <param name = "_e">The args for the event.</param
    [FormDataFieldEventHandler(formDataFieldStr(KeyVaultParameters, KeyVaultParameters, Url), FormDataFieldEventType::Validating),
     Hookable(false)]
    public static void Url_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        KeyVaultParameters keyVaultParameters =  _sender.datasource().cursor() as KeyVaultParameters;

        if (!PurchRFQSealedBidKeyVaultParametersTableHandler::validateKeyVaultParametersUpdate(keyVaultParameters))
        {
            FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;
            cancelEvent.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnabledForSealedBidding_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnValidating event of the EnabledForSealedBidding control on the <c>KeyVaultParameters</c> form.
    /// </summary>
    /// <param name = "_sender">The FormDataObject on the <c>KeyVaultParameters</c> form.</param>
    /// <param name = "_e">The args for the event.</param
    [FormDataFieldEventHandler(formDataFieldStr(KeyVaultParameters, KeyVaultParameters, EnabledForSealedBidding), FormDataFieldEventType::Validating),
     Hookable(false)]
    public static void EnabledForSealedBidding_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        KeyVaultParameters keyVaultParameters =  _sender.datasource().cursor() as KeyVaultParameters;
        
        if (!PurchRFQSealedBidKeyVaultParametersTableHandler::validateKeyVaultParametersUpdate(keyVaultParameters))
        {
            FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;
            cancelEvent.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>KeyVaultParameters_OnPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes Key element from the KeyVaultCertificateControl control
    /// if the sealed bidding feature is not enabled.
    /// </summary>
    /// <param name = "_sender">A form.</param>
    /// <param name = "_e">Form event arguments.</param>
    [FormEventHandler(formStr(KeyVaultParameters), FormEventType::PostRun),
     Hookable(false)]
    public static void KeyVaultParameters_OnPostRun(xFormRun _sender, FormEventArgs _e)
    {
        if (!PurchRFQSealedBidFlightingManager::isPreviewEnabled())
        {
            FormComboBoxControl localGrid_KeyVaultCertificateTypeControl = _sender.design().controlName(formControlStr(KeyVaultParameters, Grid_KeyVaultCertificateType)) as FormComboBoxControl;

            PurchRFQSealedBidKeyVaultParametersTableHandler::removeKeyValue(localGrid_KeyVaultCertificateTypeControl);
            
            localGrid_KeyVaultCertificateTypeControl.OnEnter += eventhandler(PurchRFQSealedBidKeyVaultParametersTableHandler::enterKeyVaultParametersFormControlEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterKeyVaultParametersFormControlEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes Key when entering the form control.
    /// </summary>
    /// <param name = "_sender">A <c>KeyVaultCertificateType</c> associated form control.</param>
    /// <param name = "_e">Arguments for the event.</param>
    [Hookable(false)]
    public static void enterKeyVaultParametersFormControlEventHandler(FormControl _sender, FormControlEventArgs _e)
    {
        PurchRFQSealedBidKeyVaultParametersTableHandler::removeKeyValue(_sender as FormComboBoxControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeKeyValue</Name>
				<Source><![CDATA[
    private static void removeKeyValue(FormComboBoxControl _localGrid_KeyVaultCertificateTypeControl)
    {
        if (_localGrid_KeyVaultCertificateTypeControl)
        {
            _localGrid_KeyVaultCertificateTypeControl.delete(enum2Str(KeyVaultCertificateType::Key));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>