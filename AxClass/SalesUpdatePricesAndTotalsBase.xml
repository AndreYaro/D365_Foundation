<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesUpdatePricesAndTotalsBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesUpdatePricesAndTotalsBase</c> class provides base implementation of price and totals calculation for sales documents and ability to push price data to CDS.
/// </summary>
internal abstract class SalesUpdatePricesAndTotalsBase
{
    private static const int LinesPerMessageDefault = 50;
    private static const str RecordStringDelimiter = '|';
    
    private SalesTotalsCalculateInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdatePrices</Name>
				<Source><![CDATA[
    protected abstract boolean canUpdatePrices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsToSync</Name>
				<Source><![CDATA[
    protected abstract List recordsToSync()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityRecord</Name>
				<Source><![CDATA[
    protected abstract Common getEntityRecord()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBundleMessageToQueue</Name>
				<Source><![CDATA[
    protected abstract void addBundleMessageToQueue(List _recordsToSync)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCalculate</Name>
				<Source><![CDATA[
    protected void doCalculate()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().doCalculate())
        {
            if (this.canUpdatePrices())
            {
                Common entityRecord = this.getEntityRecord();
                if (entityRecord)
                {
                    List recordsToSync;

                    using (SalesUpdatePriceAndTotalsSkipSyncContext context = SalesUpdatePriceAndTotalsSkipSyncContext::construct())
                    {
                        recordsToSync = SalesCDSUpdatePriceBase::newFromRecord(entityRecord).updatePrices();
                    }

                    if (recordsToSync.elements() < this.getLineBundleSizeLimit()
                        || !TradeCDSQuotationUpdatePricesAndTotalsBundledFlight::instance().isEnabled()
                        || !SalesParameters::find().MessageProcessorCalculateSalesPricesAndTotalsAsync)
                    {
                        this.forceSyncRecordsToCDS(recordsToSync);
                    }
                    else
                    {
                        this.scheduleForceSyncRecordsToCDS(recordsToSync);
                    }
                }
            }
            else if (this.recordsToSync())
            {
                this.forceSyncRecordsToCDS(this.recordsToSync());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForceSyncRecordsToCDS</Name>
				<Source><![CDATA[
    private void scheduleForceSyncRecordsToCDS(List _recordsToSync)
    {
        int linesPerMessage = this.getLineBundleSizeLimit();
        List recordsToSyncBundle = new List(Types::String);
        int recordsToSyncBundleCount = 0;

        ListEnumerator listEnum = _recordsToSync.getEnumerator();

        while (listEnum.moveNext())
        {
            if (recordsToSyncBundleCount >= linesPerMessage)
            {
                this.addBundleMessageToQueue(recordsToSyncBundle);

                recordsToSyncBundle = new List(Types::String);
                recordsToSyncBundleCount = 0;
            }

            recordsToSyncBundle.addEnd(this.convertRecordContainerToString(listEnum.current()));
            recordsToSyncBundleCount++;
        }

        if (recordsToSyncBundle.elements())
        {
            this.addBundleMessageToQueue(recordsToSyncBundle);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceSyncRecordsToCDS</Name>
				<Source><![CDATA[
    private void forceSyncRecordsToCDS(List _recordsToSync)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().forceSyncRecordsToCDS())
        {
            List recordsToSyncByStr = this.getRecordsToSync(_recordsToSync);
            DualWriteSyncHelper::forceSyncRecordsToCDS(recordsToSyncByStr);

            activityContext.addCustomProperty('RecordsToSyncCount', int2Str(recordsToSyncByStr.elements()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToSync</Name>
				<Source><![CDATA[
    private List getRecordsToSync(List _recordsToSync)
    {
        List recordsToSyncByRecord = new List(Types::Record);

        if (_recordsToSync)
        {
            ListEnumerator listEnum = _recordsToSync.getEnumerator();
            while (listEnum.moveNext())
            {
                RecId recId;
                TableId entityTableId;

                if (typeOf(listEnum.current()) == Types::String)
                {
                    [entityTableId, recId] = this.convertRecordStringToContainer(listEnum.current());
                }
                else
                {
                    [entityTableId, recId] = listEnum.current();
                }

                Common entityRecord = this.getEntityRecordByTableId(entityTableId, recId);
                if (entityRecord)
                {
                    recordsToSyncByRecord.addEnd(entityRecord);
                }
            }
        }

        return recordsToSyncByRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityRecordByTableId</Name>
				<Source><![CDATA[
    private Common getEntityRecordByTableId(TableId _entityTableId, RecId _recId)
    {
        if (!_entityTableId || !_recId)
        {
            return null;
        }

        Query query = new Query();
        query.firstOnly1(true);
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(_entityTableId);
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(Common, RecId));
        queryBuildRange.value(queryValue(_recId));
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            return queryRun.get(_entityTableId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineBundleSizeLimit</Name>
				<Source><![CDATA[
    private int getLineBundleSizeLimit()
    {
        int linesPerMessage = SalesParameters::find().MessageProcessorCalculateSalesPricesAndTotalsLinesPerMessage;

        return linesPerMessage > 0 ? linesPerMessage : LinesPerMessageDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRecordContainerToString</Name>
				<Source><![CDATA[
    private str convertRecordContainerToString(container _recordContainer)
    {
        RecId recId;
        TableId entityTableId;

        [entityTableId, recId] = _recordContainer;

        return strfmt('%1%2%3', entityTableId, RecordStringDelimiter, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRecordStringToContainer</Name>
				<Source><![CDATA[
    private container convertRecordStringToContainer(str _recordStr)
    {
        return str2con(_recordStr, RecordStringDelimiter, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal SalesTotalsCalculateInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesTotalsCalculateInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>