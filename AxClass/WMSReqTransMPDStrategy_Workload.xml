<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsReqTransMPDStrategy_Workload</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSReqTransMPDStrategy_Workload</c> class implements the workload utilization specific
/// strategy pattern.
/// </summary>
class wmsReqTransMPDStrategy_Workload extends WMSReqTransMPDStrategy
{
    WMSSpaceUtilizationRun      lastReportRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query used by the <c>WMSReqTransMovementsPerDayDP</c> table to find data.
    /// </summary>
    /// <returns>
    /// Query object.
    /// </returns>
    public Query buildQuery()
    {
        QueryBuildDataSource                dsReqTrans;
        QueryBuildDataSource                dsPlanVersion;
        QueryBuildDataSource                dsInventDim;
        QueryBuildDataSource                dsInventTable;
        InventFallbackWarehouse             fallBackWarehouse = InventFallbackWarehouse::find(localContract.parmInventSiteId());
        Query                               query;
        QueryBuildRange                     qbr;

        query = super();

        dsReqTrans  = query.dataSourceTable(tableNum(ReqTrans));

        dsPlanVersion = dsReqTrans.addDataSource(tableNum(ReqPlanVersion));
        dsPlanVersion.joinMode(JoinMode::ExistsJoin);
        dsPlanVersion.addRange(fieldNum(ReqPlanVersion, ReqPlanId)).value(queryValue(lastReportRun.PlanId));
        dsPlanVersion.addRange(fieldNum(ReqPlanVersion, Active)).value(queryValue(NoYes::Yes));
        dsPlanVersion.addLink(fieldNum(ReqTrans, PlanVersion), fieldNum(ReqPlanVersion, RecId));

        dsInventDim = query.dataSourceTable(tableNum(InventDim));
        dsInventDim.addRange(fieldNum(InventDim, InventSiteId)).value(localContract.parmInventSiteId());
        qbr = dsInventDim.addRange(fieldNum(InventDim, InventLocationId));

        // If current warehouse is a fallback warehouse for the site we should also accept empty InventLocationId
        if (fallBackWarehouse
            && fallBackWarehouse.InventLocationId == localContract.parmWarehouseId())
        {
            qbr.value(strFmt('((%1.%2 == "%3") || (%1.%2 == %4))',
                        dsInventDim.name(),
                        fieldStr(InventDim, InventLocationId),
                        queryValue(localContract.parmWarehouseId()),
                        queryValue("")));
        }
        else
        {
            qbr.value(queryValue(localContract.parmWarehouseId()));
        }

        dsInventTable = dsReqTrans.addDataSource(tableNum(InventTable));
        dsInventTable.joinMode(JoinMode::InnerJoin);
        dsInventTable.fetchMode(QueryFetchMode::One2One);
        dsInventTable.addLink(fieldNum(ReqTrans, ItemId), fieldNum(InventTable, ItemId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs object initialization.
    /// </summary>
    public void initialize()
    {
        super();

        if (!localContract.parmWarehouseId())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        lastReportRun = WMSSpaceUtilizationRun::lastRun(localContract.parmWMSReportSetup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields of the <c>WMSMovementsPerDayTmp</c> table.
    /// </summary>
    /// <param name="_wmsMovementsPerDayTmp">
    /// The <c>WMSMovementsPerDayTmp</c> table to populate.
    /// </param>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> table to use as reference.
    /// </param>
    /// <returns>
    /// true if succeeded; otherwise, false.
    /// </returns>
    public boolean populateFields(WMSMovementsPerDayTmp _wmsMovementsPerDayTmp,
                                  InventTable           _inventTable)
    {
        boolean result = false;

        switch (localContract.parmWMSStorageLoadUnitType())
        {
            case WMSStorageLoadUnitType::Pallet:
                if (_inventTable.StandardPalletQuantity > 0)
                {
                    _wmsMovementsPerDayTmp.UtilizationPct = abs(roundUp(_wmsMovementsPerDayTmp.Qty / _inventTable.StandardPalletQuantity, 1));
                    result = true;
                }
                break;

            case WMSStorageLoadUnitType::Volume:
                if (_inventTable.grossVolume() > 0)
                {
                    _wmsMovementsPerDayTmp.UtilizationPct = abs(_wmsMovementsPerDayTmp.Qty * _inventTable.grossVolume());
                    result = true;
                }
                break;

            case WMSStorageLoadUnitType::Weight:
                if (_inventTable.grossWeight() > 0)
                {
                    _wmsMovementsPerDayTmp.UtilizationPct = abs(_wmsMovementsPerDayTmp.Qty * _inventTable.grossWeight());
                    result = true;
                }
                break;

            default:
                _wmsMovementsPerDayTmp.clear();
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>