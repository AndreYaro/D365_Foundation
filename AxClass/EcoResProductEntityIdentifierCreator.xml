<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifierCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The product entity identifier creator class.
/// </summary>
public abstract class EcoResProductEntityIdentifierCreator
{
    protected EcoResProduct                     product;
    protected EcoResProductEntityIdentifierCode identifierCode;
    protected EcoResProductRecId                inventTableProduct;
    private   Map                               itemIdToSalesUnitIdMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product and identifier code values.
    /// </summary>
    /// <param name = "_product">The product record.</param>
    /// <param name = "_identifierCode">The identifier code record.</param>
    public void init(EcoResProduct _product, EcoResProductEntityIdentifierCode _identifierCode)
    {
        this.setProduct(_product);
        identifierCode = _identifierCode;
        
        itemIdToSalesUnitIdMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunIdentifierCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to run the identifier creation.
    /// </summary>
    /// <returns>True if it is possible to run the identifier creation; otherwise false.</returns>
    protected boolean canRunIdentifierCreation()
    {
        return (product && identifierCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the identifiers for the given product and identifier code, if it possible to run the creation.
    /// </summary>
    public void create()
    {
        if (this.canRunIdentifierCreation())
        {
            this.createIdentifiers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdentifiers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the identifiers for the given product and identifier code.
    /// </summary>
    protected abstract void createIdentifiers()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduct</Name>
				<Source><![CDATA[
    private void setProduct(EcoResProduct _product)
    {
        EcoResProductSubtype productSubtype = _product.productSubtype();

        /*
            A product entity is either the product or the product variant, but not the product master. Hence we do not want to create records in the product entity
            identifier table for the product master.
        */
        switch (productSubtype)
        {
            case EcoResProductSubtype::Product:
                inventTableProduct = _product.RecId;
                product = _product;
                break;
            case EcoResProductSubtype::ProductVariant:
                EcoResDistinctProductVariant productVariant = _product as EcoResDistinctProductVariant;
                inventTableProduct = productVariant.ProductMaster;
                product = _product;
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdentifiersFromData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the identifiers based on the provided maps.
    /// </summary>
    /// <param name = "_identifierToLegalEntityMap">The identifier to legal entity values map.</param>
    /// <param name = "_identifierToSalesUnitIdMap">The identifier to sales unit id values map.</param>
    /// <param name = "_identifierToQuantityMap">The identifier to quantity values map.</param>
    protected void createIdentifiersFromData(
                            Map _identifierToLegalEntityMap, 
                            Map _identifierToSalesUnitIdMap = null,
                            Map _identifierToQuantityMap = null)
    {
        MapEnumerator identifierNameToDataAreaIdMapEnumerator = _identifierToLegalEntityMap.getEnumerator();

        while (identifierNameToDataAreaIdMapEnumerator.moveNext())
        {
            EcoResProductEntityIdentifierName identifierName = identifierNameToDataAreaIdMapEnumerator.currentKey();

            UnitOfMeasureSymbol unitId = this.getValueFromMap(_identifierToSalesUnitIdMap, identifierName);

            InventQty quantity = this.getValueFromMap(_identifierToQuantityMap, identifierName);

            DataAreaId legalEntity = identifierNameToDataAreaIdMapEnumerator.currentValue();

            EcoResProductEntityIdentifierScope scope = EcoResProductEntityIdentifierScope::findOrCreate(identifierCode.RecId, legalEntity);

            EcoResProductEntityIdentifier::findOrCreate(
                                                identifierName,
                                                product.RecId,
                                                scope.RecId,
                                                unitId,
                                                quantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromMap</Name>
				<Source><![CDATA[
    private anytype getValueFromMap(Map _map, str _key)
    {
        anytype value;

        if (_map && _key && _map.exists(_key))
        {
            value = _map.lookup(_key);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map, so that if one identifier name is related to multiple different values the inserted value
    /// in the map is an empty string.
    /// </summary>
    /// <param name = "_identifierName">The identifier name.</param>
    /// <param name = "_value">The mapped value of the identifier.</param>
    /// <param name = "_map">The map to be updated.</param>
    /// <returns>The updated map.</returns>
    /// <remarks>This is needed in scenarios, such as the legal entity of the identifier scope. If the same identifier name
    /// is defined for the same code type in multiple legal entities, we only want to create one identifier record and not register the 
    /// information about the legal entity.</remarks>
    protected Map updateMap(str _identifierName, anytype _value, Map _map)
    {
        if (_identifierName)
        {
            anytype valueToInsert = _value;

            if (_map.exists(_identifierName) && _map.lookup(_identifierName) != _value)
            {
                valueToInsert = '';
            }

            _map.insert(_identifierName, valueToInsert);
        }

        return _map;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>