<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjRetainerInvoicing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The purpose of this class is to create cash advance based on project budget.
/// </summary>
class PSAProjRetainerInvoicing
{
    protected ProjId m_sProjId;
    protected PSATmpProjProposalTrans m_tTmpProjProposalTrans;
    protected ProjCategoryId m_sCategoryId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRevisedAmount</Name>
				<Source><![CDATA[
    public AmountCur calcRevisedAmount(ProjBudgetLine _projBudgetLine)
    {
        AmountCur           revisedAmount;
        ProjForecastCost    projForecastCost;
        ProjForecastEmpl    projForecastEmpl;
        ProjForecastRevenue projForecastRevenue;
        ProjForecastOnAcc   projForecastOnAcc;
        ForecastSales       forecastSales;

        switch (_projBudgetLine.ProjTransType)
        {
            case ProjTransType::Cost:
                while select Qty, SalesPrice from projForecastCost
                    where projForecastCost.ProjId == _projBudgetLine.ProjId
                        && projForecastCost.CategoryId == _projBudgetLine.CategoryId
                        && projForecastCost.ActivityNumber == _projBudgetLine.ActivityNumber
                        && projForecastCost.ProjForecastBudgetType == ProjForecastBudgetType::Amendment
                {
                    revisedAmount += (projForecastCost.Qty * projForecastCost.SalesPrice);
                }
                break;

            case ProjTransType::Hour:
                while select Qty, SalesPrice from projForecastEmpl
                    where projForecastEmpl.ProjId == _projBudgetLine.ProjId
                        && projForecastEmpl.CategoryId == _projBudgetLine.CategoryId
                        && projForecastEmpl.ActivityNumber == _projBudgetLine.ActivityNumber
                        && projForecastEmpl.ProjForecastBudgetType == ProjForecastBudgetType::Amendment
                {
                    revisedAmount += (projForecastEmpl.Qty * projForecastEmpl.SalesPrice);
                }
                break;

            case ProjTransType::Revenue:
                while select Qty, SalesPrice from projForecastRevenue
                    where projForecastRevenue.ProjId == _projBudgetLine.ProjId
                        && projForecastRevenue.CategoryId == _projBudgetLine.CategoryId
                        && projForecastRevenue.ActivityNumber == _projBudgetLine.ActivityNumber
                        && projForecastRevenue.ProjForecastBudgetType == ProjForecastBudgetType::Amendment
                {
                    revisedAmount += (projForecastRevenue.Qty * projForecastRevenue.SalesPrice);
                }
                break;

            case ProjTransType::Item:
                while select SalesQty, SalesPrice from forecastSales
                    where forecastSales.ProjId == _projBudgetLine.ProjId
                        && forecastSales.ProjCategoryId == _projBudgetLine.CategoryId
                        && forecastSales.ActivityNumber == _projBudgetLine.ActivityNumber
                        && forecastSales.ProjForecastBudgetType == ProjForecastBudgetType::Amendment
                {
                    revisedAmount += (forecastSales.SalesQty * forecastSales.SalesPrice);
                }
                break;

            case ProjTransType::OnAccount:
                while select Qty, SalesPrice from projForecastOnAcc
                    where projForecastOnAcc.ProjId == _projBudgetLine.ProjId
                        && projForecastOnAcc.ProjForecastBudgetType == ProjForecastBudgetType::Amendment
                {
                    revisedAmount += (projForecastOnAcc.Qty * projForecastOnAcc.SalesPrice);
                }
                break;
        }

        return revisedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjProposalTransIsExists</Name>
				<Source><![CDATA[
    private boolean checkProjProposalTransIsExists(PSAProjBudgetTrans _budgetTransTableBuffer)
    {
        select firstonly m_tTmpProjProposalTrans
            where m_tTmpProjProposalTrans.RefRecIdTrans == _budgetTransTableBuffer.RecId
               && m_tTmpProjProposalTrans.RefTableId == _budgetTransTableBuffer.TableId;

        return m_tTmpProjProposalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    private void createTrans(PSAProjBudgetTrans _budgetTransTableBuffer, AmountCur _remainingBudget)
    {
        if (this.checkProjProposalTransIsExists(_budgetTransTableBuffer))
        {
            return;
        }
        m_tTmpProjProposalTrans.clear();
        this.initBudgetTransWithRemainingBudget(_budgetTransTableBuffer, _remainingBudget);
        m_tTmpProjProposalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetTransWithRemainingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes remaining budget to <c>PSATmpProjProposalTrans</c> table buffer.
    /// </summary>
    /// <param name = "_budgetTransTableBuffer">
    /// The <c>PSAProjBudgetTrans</c> table buffer.
    /// </param>
    /// <param name = "_remainingBudget">
    /// The remaining budget amount.
    /// </param>
    [Wrappable(true)]
    final protected void initBudgetTransWithRemainingBudget(PSAProjBudgetTrans _budgetTransTableBuffer, AmountCur _remainingBudget)
    {
        m_tTmpProjProposalTrans.projId = _budgetTransTableBuffer.ProjId;
        m_tTmpProjProposalTrans.OriginalBudget = _budgetTransTableBuffer.SalesPrice;
        m_tTmpProjProposalTrans.RevisedBudget = _remainingBudget;
        m_tTmpProjProposalTrans.TotalBudget = (_budgetTransTableBuffer.SalesPrice + _remainingBudget);
        m_tTmpProjProposalTrans.PercentInvoiceNow = 0;
        m_tTmpProjProposalTrans.RefRecIdTrans = _budgetTransTableBuffer.RecId;
        m_tTmpProjProposalTrans.RefTableId = _budgetTransTableBuffer.TableId;
        m_tTmpProjProposalTrans.PreBilledAmount = this.preBilledAmount(m_tTmpProjProposalTrans);
        m_tTmpProjProposalTrans.Selected = m_tTmpProjProposalTrans.PreBilledAmount ? NoYes::Yes : NoYes::No;

        m_tTmpProjProposalTrans.TransType = this.getProjProposalTransType(_budgetTransTableBuffer);

        if (m_tTmpProjProposalTrans.TransType != ProjTransType::OnAccount)
        {
            m_tTmpProjProposalTrans.categoryId = _budgetTransTableBuffer.CategoryId;
            m_tTmpProjProposalTrans.ActivityNumber = _budgetTransTableBuffer.ActivityNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjProposalTransType</Name>
				<Source><![CDATA[
    private ProjTransType getProjProposalTransType(PSAProjBudgetTrans _budgetTransTableBuffer)
    {
        ProjTransType projTransType;
        switch (_budgetTransTableBuffer.TableId)
        {
            case tablenum(ProjForecastCost):
                projTransType = ProjTransType::Cost;
                break;

            case tablenum(ProjForecastEmpl):
                projTransType = ProjTransType::Hour;
                break;

            case tablenum(ProjForecastRevenue):
                projTransType = ProjTransType::Revenue;
                break;

            case tablenum(ForecastSales):
                projTransType = ProjTransType::Item;
                break;

            case tablenum(projForecastOnAcc):
                projTransType = ProjTransType::OnAccount;
                break;
        }
        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    void parmCategoryId(ProjCategoryId _sCategoryId)
    {
        m_sCategoryId = _sCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    void parmProjId(ProjId _sProjId)
    {
        m_sProjId = _sProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpProjProposal</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmTmpProjProposal(PSATmpProjProposalTrans _tTmpProjProposalTrans = m_tTmpProjProposalTrans)
    {
        m_tTmpProjProposalTrans = _tTmpProjProposalTrans;
        return m_tTmpProjProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preBilledAmount</Name>
				<Source><![CDATA[
    public AmountCur preBilledAmount(PSATmpProjProposalTrans _tProposalTrans)
    {
        ProjInvoiceOnAcc    tProjInvoiceOnAcc;
        ProjOnAccTrans      tProjOnAccTrans;

        if (!_tProposalTrans.RefTableId)
        {
            return 0;
        }

        select sum(AmountMST) from tProjInvoiceOnAcc
            where tProjInvoiceOnAcc.PSARefTableIdBudgetTrans == _tProposalTrans.RefTableId
               && tProjInvoiceOnAcc.PSARefRecIdBudgetTrans   == _tProposalTrans.RefRecIdTrans
                join TransId from tProjOnAccTrans
                    where tProjOnAccTrans.TransId            == tProjInvoiceOnAcc.TransId
                       && (tProjOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment
                       || tProjOnAccTrans.TransactionOrigin  == ProjOrigin::Milestone);

        return tProjInvoiceOnAcc.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        if (this.shouldCreateCashAdvanceForBudgetCategory())
        {
            this.createCashAdvanceForBudgetCategory();
        }

        if (this.shouldCreateCashAdvanceOnAccount())
        {
            this.createCashAdvanceOnAccount();
        }

        if (this.shouldCreateCashAdvanceForPrepayment())
        {
            this.createCashAdvanceForPrepayment();
        }

        if (this.shouldCreateCashAdvanceForMilestone())
        {
            this.createCashAdvanceForMilestone();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateCashAdvanceForBudgetCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check on whether to create cash advances for budget category.
    /// </summary>
    /// <returns>
    /// Returns a boolean that states whether to create cash advances for budget category.
    /// </returns>
    /// <remarks>This method is added for extension purpose.</remarks>
    protected boolean shouldCreateCashAdvanceForBudgetCategory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateCashAdvanceOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check on whether to create cash advances for on account.
    /// </summary>
    /// <returns>
    /// Returns a boolean that states whether to create cash advances for on account.
    /// </returns>
    /// <remarks>This method is added for extension purpose.</remarks>
    protected boolean shouldCreateCashAdvanceOnAccount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateCashAdvanceForPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check on whether to create cash advances for prepayment.
    /// </summary>
    /// <returns>
    /// Returns a boolean that states whether to create cash advances for prepayment.
    /// </returns>
    /// <remarks>This method is added for extension purpose.</remarks>
    protected boolean shouldCreateCashAdvanceForPrepayment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateCashAdvanceForMilestone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check on whether to create cash advances for milestone.
    /// </summary>
    /// <returns>
    /// Returns a boolean that states whether to create cash advances for milestone.
    /// </returns>
    /// <remarks>This method is added for extension purpose.</remarks>
    protected boolean shouldCreateCashAdvanceForMilestone()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashAdvanceForBudgetCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create cash advances for budget category.
    /// </summary>
    protected void createCashAdvanceForBudgetCategory()
    {
        ProjTable           projTable;
        ProjBudgetLine      projBudgetLine;

        while select RecId from projTable
            where projTable.ProjId LIKE m_sProjId
                && projTable.Type == ProjType::TimeMaterial
            join ProjId, CategoryId, ActivityNumber, ProjTransType, RecId from projBudgetLine
                where projBudgetLine.ProjId == projTable.ProjId
                    && projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue
                    && projBudgetLine.ProjTransType != ProjTransType::OnAccount
        {
            this.createTransForProjTransType(projBudgetLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashAdvanceOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cash advances for on account.
    /// </summary>
    protected void createCashAdvanceOnAccount()
    {
        ProjTable           projTable;
        ProjBudgetLine      projBudgetLine;
      
        while select RecId from projTable
            where projTable.ProjId LIKE m_sProjId
                && projTable.Type == ProjType::FixedPrice
            join ProjId, ProjBudgetLineType, ProjTransType from projBudgetLine
                where projBudgetLine.ProjId == projTable.ProjId
                    && projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue
                    && projBudgetLine.ProjTransType == ProjTransType::OnAccount
            
        {
            ProjForecastOnAcc projForecastOnAcc = ProjForecastOnAcc::findProjectBudgetForecast(projBudgetLine.ProjId,ProjForecastBudgetType::OriginalBudget);
            if (projForecastOnAcc)
            {
                this.createTrans(projForecastOnAcc, this.calcRevisedAmount(projBudgetLine));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashAdvanceForPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create cash advances for prepayment.
    /// </summary>
    protected void createCashAdvanceForPrepayment()
    {
        ProjInvoiceOnAcc    projInvoiceOnAcc;
        ProjOnAccTrans      projOnAccTrans;
        ProjTable           projTable;

        while select RecId from projTable
            where projTable.ProjId LIKE m_sProjId
                join AmountMST from projInvoiceOnAcc
                    where projInvoiceOnAcc.PSAIsOnAccount == NoYes::Yes
                        && !projInvoiceOnAcc.PSARefRecIdBudgetTrans
                        && projInvoiceOnAcc.ProjId == projTable.ProjId
                        join ProjId, Description from projOnAccTrans
                            where projOnAccTrans.TransId            == projInvoiceOnAcc.TransId
                              && projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment
        {
            this.createCustomTransaction(projOnAccTrans, projInvoiceOnAcc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashAdvanceForMilestone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create cash advances for milestone.
    /// </summary>
    protected void createCashAdvanceForMilestone()
    {
        ProjInvoiceOnAcc    projInvoiceOnAcc;
        ProjOnAccTrans      projOnAccTrans;
        ProjTable           projTable;

        while select RecId from projTable
            where projTable.ProjId LIKE m_sProjId
                join AmountMST from projInvoiceOnAcc
                    where projInvoiceOnAcc.PSAIsOnAccount == NoYes::Yes
                        && !projInvoiceOnAcc.PSARefRecIdBudgetTrans
                        && projInvoiceOnAcc.ProjId == projTable.ProjId
                        join ProjId, Description from projOnAccTrans
                            where projOnAccTrans.TransId            == projInvoiceOnAcc.TransId
                              && projOnAccTrans.TransactionOrigin == ProjOrigin::Milestone
        {
            this.createCustomTransaction(projOnAccTrans, projInvoiceOnAcc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustomTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates custom transactions.
    /// </summary>
    /// <param name = "_projOnAccTrans">A <c>ProjOnAccTrans</c> table buffer</param>
    /// <param name = "_projInvoiceOnAcc">A <c>ProjInvoiceOnAcc</c> table buffer</param>
    protected void createCustomTransaction(ProjOnAccTrans _projOnAccTrans, ProjInvoiceOnAcc _projInvoiceOnAcc)
    {
        m_tTmpProjProposalTrans.clear();
        m_tTmpProjProposalTrans.Selected        = NoYes::Yes;
        m_tTmpProjProposalTrans.ProjId          = _projOnAccTrans.ProjId;
        m_tTmpProjProposalTrans.Txt             = _projOnAccTrans.Description;
        m_tTmpProjProposalTrans.PreBilledAmount = _projInvoiceOnAcc.AmountMST;
        m_tTmpProjProposalTrans.TransType       = ProjTransType::OnAccount;
        m_tTmpProjProposalTrans.RefTableId      = _projInvoiceOnAcc.TableId;
        m_tTmpProjProposalTrans.RefRecId        = _projInvoiceOnAcc.RecId;
        m_tTmpProjProposalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransForProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transactions based on project transaction type.
    /// </summary>
    ///  <param name = "_projBudgetLine">Project budget line.</param>
    private void createTransForProjTransType(ProjBudgetLine _projBudgetLine)
    {
        if (_projBudgetLine.ProjTransType == ProjTransType::Cost)
        {
            ProjForecastCost projForecastCost = ProjForecastCost::findProjectBudgetForecast(_projBudgetLine.ProjId, _projBudgetLine.CategoryId, _projBudgetLine.ActivityNumber, ProjForecastBudgetType::OriginalBudget);
            if (projForecastCost)
            {
                this.createTrans(projForecastCost, this.calcRevisedAmount(_projBudgetLine));
            }
        }
        else if (_projBudgetLine.ProjTransType == ProjTransType::Hour)
        {
            ProjForecastEmpl projForecastEmpl = ProjForecastEmpl::findProjectBudgetForecast(_projBudgetLine.ProjId, _projBudgetLine.CategoryId, _projBudgetLine.ActivityNumber, ProjForecastBudgetType::OriginalBudget);
            if (projForecastEmpl)
            {
                this.createTrans(projForecastEmpl, this.calcRevisedAmount(_projBudgetLine));
            }
        }
        else if (_projBudgetLine.ProjTransType == ProjTransType::Revenue)
        {
            ProjForecastRevenue projForecastRevenue = this.findProjForecastForRevenue(_projBudgetLine);
            if (projForecastRevenue)
            {
                this.createTrans(projForecastRevenue, this.calcRevisedAmount(_projBudgetLine));
            }
        }
        else if (_projBudgetLine.ProjTransType == ProjTransType::Item)
        {
            ForecastSales forecastSales = ForecastSales::findProjectBudgetForecast(_projBudgetLine.ProjId, _projBudgetLine.CategoryId, _projBudgetLine.ActivityNumber, ProjForecastBudgetType::OriginalBudget);
            if (!forecastSales)
            {
                forecastSales = ForecastSales::findProjectBudgetForecast(_projBudgetLine.ProjId, _projBudgetLine.CategoryId, _projBudgetLine.ActivityNumber, ProjForecastBudgetType::Amendment);
            }
            this.createTrans(forecastSales, this.calcRevisedAmount(_projBudgetLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjForecastForRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the associated forecast.
    /// </summary>
    /// <param name = "_projBudgetLine">A <c>ProjBudgetLine</c> table buffer</param>
    /// <returns>The associated forecast.</returns>
    protected ProjForecastRevenue findProjForecastForRevenue(ProjBudgetLine _projBudgetLine)
    {
        return ProjForecastRevenue::findProjectBudgetForecast(_projBudgetLine.ProjId, _projBudgetLine.CategoryId, ProjForecastBudgetType::OriginalBudget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PSAProjRetainerInvoicing construct(ProjId _sProjId, PSATmpProjProposalTrans _tPSATmpProjProposalTrans, ProjCategoryId _sCategoryId = '')
    {
        PSAProjRetainerInvoicing oPSAProjRetainerInvoicing = new PSAProjRetainerInvoicing();

        oPSAProjRetainerInvoicing.parmProjId(_sProjId);
        oPSAProjRetainerInvoicing.parmTmpProjProposal(_tPSATmpProjProposalTrans);
        oPSAProjRetainerInvoicing.parmCategoryId(_sCategoryId);

        return oPSAProjRetainerInvoicing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>