<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym_CNAB_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>CustOutPaym_CNAB_BR</c> provides common functionality for Brazilian Customer Payment CNAB formats.
/// </summary>
class CustOutPaym_CNAB_BR extends CustOutPaym
{
    str              record;
    Counter          numAmount;
    Counter          numTextRec;
    Counter          numRecords;
    AmountCur        sumAmount;
    BankAccountTable bankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompanyDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the EPCompanyDocument_BR field on the record in the <c>LedgerJournalTransPayment_BR</c> table.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// JournalNum of the transaction
    /// </param>
    /// <param name="_paymMode">
    /// PaymentMode of the transaction
    /// </param>
    void createCompanyDocument(LedgerJournalId _ledgerJournalId,
                                PaymMode _paymMode)
    {
        LedgerJournalTrans           ledgerJournalTransloc;
        LedgerJournalTransPayment_BR ledgerJournalTransPayment_BR;
        BankRemittanceFileId         bankRemittanceFileId = '';

        while select forupdate ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum            == _ledgerJournalId
                && ledgerJournalTransloc.PaymMode             == _paymMode
                && ledgerJournalTransloc.AccountType          == LedgerJournalACType::Cust
                && (ledgerJournalTransloc.PaymentStatus       == CustVendPaymStatus::None
                || ledgerJournalTransloc.PaymentStatus        == CustVendPaymStatus::Rejected
                || (ledgerJournalTransloc.PaymentStatus       == CustVendPaymStatus::Sent
                && ledgerJournalTransloc.BankRemittanceFileId == bankRemittanceFileId))
        {
            if (ledgerJournalTransloc.PaymentStatus != CustVendPaymStatus::Sent )
            {
                ledgerJournalTransPayment_BR = ledgerJournalTransloc.getPaymentExtension_BR();
                ledgerJournalTransPayment_BR.EPCompanyDocument_BR   = ledgerJournalTransPayment_BR.setcompanydocument_BR(ledgerJournalTransloc);
                ledgerJournalTransloc.packExtensionTable(ledgerJournalTransPayment_BR);
                ledgerJournalTransloc.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustEPRemitInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record in <c>CustEPRemitInfo_BR</c> table.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// JournalNum of the transaction
    /// </param>
    void createCustEPRemitInfo(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans      ledgerJournalTransLoc;
        CustEPRemitInfo_BR      custEPRemitInfoLoc;
        CustVendPaymJournalFee  custVendPaymJournalFee;

        while select RecId from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == _ledgerJournalId
        {
            if (!CustEPRemitInfo_BR::find(ledgerJournalTransLoc.RecId))
            {
                select custVendPaymJournalFee
                    where custVendPaymJournalFee.FeeTransRecId == ledgerJournalTransLoc.RecId;

                if (!custVendPaymJournalFee)
                {
                    custEPRemitInfoLoc.LedgerJournalTrans = ledgerJournalTransLoc.RecId;
                    custEPRemitInfoLoc.insert();
                    custEPRemitInfoLoc.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c> class.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    classId custVendOutPaymRecordRootClassId()
    {
        return classnum(CustOutPaymRecord_CNAB_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustEPRemitInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes record in <c>CustEPRemitInfo_BR</c> table.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// JournalNum of the transaction
    /// </param>
    void deleteCustEPRemitInfo(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans ledgerJournalTransLoc;
        CustEPRemitInfo_BR custEPRemitInfoLoc;

        while select RecId from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == _ledgerJournalId
        {
            custEPRemitInfoLoc = CustEPRemitInfo_BR::find(ledgerJournalTransLoc.RecId);
            if (custEPRemitInfoLoc
                && custEPRemitInfoLoc.BankFolder == ''
                && custEPRemitInfoLoc.DocumentType == ''
                && custEPRemitInfoLoc.Instruction_1 == ''
                && custEPRemitInfoLoc.Instruction_2 == '')
            {
                delete_from custEPRemitInfoLoc
                    where custEPRemitInfoLoc.LedgerJournalTrans == ledgerJournalTransLoc.RecId;

                custEPRemitInfoLoc.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates payment line to export.
    /// </summary>
    /// <remarks>
    /// Generates payment line based on the query in configurator definition.
    /// </remarks>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans              ledgerJournalTrans;
        CustOutPaymRecord               custOutPaymRecord;
        boolean                         ok = true;
        boolean                         hasData = false;
        CustTransEPRemit_BR             custTransEPRemitLoc;
        CustEPRemitInfo_BR              custEPRemitInfoLoc;
        SpecTrans                       specTransLoc;
        ElectronicPaymentRemitExport_BR epRemitExport_BR = ElectronicPaymentRemitExport_BR::construct();

        try
        {
            ttsbegin;

            setprefix("@SYS17561");

            queryRun.reset();

            if (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));
                if (ledgerJournalTrans)
                {
                    this.createCompanyDocument(ledgerJournalTrans.JournalNum, ledgerJournalTrans.PaymMode);
                }
                queryRun.reset();
            }

            epRemitExport_BR.parmCodePage(System.Text.Encoding::ASCII.WindowsCodePage);

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                {
                    continue;
                }

                custOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                        ledgerJournalTrans.PaymSpec,
                                                                        this,
                                                                        this.custPaym(ledgerJournalTrans));
                custOutPaymRecord.parmFile(file);

                setprefix(strfmt("@SYS66048",
                                    ledgerJournalTrans.TransDate,
                                    ledgerJournalTrans.Voucher,
                                    ledgerJournalTrans.parmAccount()));

                if (custOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                {
                    hasData = true;
                    custOutPaymRecord.output();
                    outPaymRecordList.addEnd(custOutPaymRecord);
                    select specTransLoc
                        where   specTransLoc.SpecRecId == ledgerJournalTrans.RecId &&
                                specTransLoc.SpecTableId == tablename2id(tablestr(LedgerJournalTrans));

                    changecompany(specTransLoc.RefCompany)
                    {
                        select custTransEPRemitLoc
                            where custTransEPRemitLoc.CustTransOpenRefRecId == specTransLoc.RefRecId;

                        custEPRemitInfoLoc = CustEPRemitInfo_BR::find(ledgerJournalTrans.RecId);
                        if (specTransLoc && custTransEPRemitLoc)
                        {
                            select forupdate custTransEPRemitLoc
                                where custTransEPRemitLoc.CustTransOpenRefRecId == specTransLoc.RefRecId;

                            custTransEPRemitLoc.RemitDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            custTransEPRemitLoc.AccountNum        = ledgerJournalTrans.parmAccount();
                            custTransEPRemitLoc.BankAccountID     = bankAccountTable.AccountID;
                            custTransEPRemitLoc.DocumentType      = custEPRemitInfoLoc.DocumentType;
                            custTransEPRemitLoc.Instruction_1     = custEPRemitInfoLoc.Instruction_1;
                            custTransEPRemitLoc.Instruction_2     = custEPRemitInfoLoc.Instruction_2;
                            custTransEPRemitLoc.BankFolder        = custEPRemitInfoLoc.BankFolder;
                            custTransEPRemitLoc.JournalNum        = ledgerJournalTrans.JournalNum;
                            custTransEPRemitLoc.DueDate           = CustTransOpen::find(specTransLoc.RefRecId).DueDate;
                            custTransEPRemitLoc.ConfLayoutGroupId = CustPaymModeTable::find(ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR;
                            custTransEPRemitLoc.update();
                            custTransEPRemitLoc.reread();
                        }
                        else if (specTransLoc && !custTransEPRemitLoc)
                        {
                            custTransEPRemitLoc.CustTransOpenRefRecId = specTransLoc.RefRecId;
                            custTransEPRemitLoc.AccountNum            = ledgerJournalTrans.parmAccount();
                            custTransEPRemitLoc.RemitDate             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            custTransEPRemitLoc.BankAccountID         = bankAccountTable.AccountID;
                            custTransEPRemitLoc.DocumentType          = custEPRemitInfoLoc.DocumentType;
                            custTransEPRemitLoc.Instruction_1         = custEPRemitInfoLoc.Instruction_1;
                            custTransEPRemitLoc.Instruction_2         = custEPRemitInfoLoc.Instruction_2;
                            custTransEPRemitLoc.BankFolder            = custEPRemitInfoLoc.BankFolder;
                            custTransEPRemitLoc.JournalNum            = ledgerJournalTrans.JournalNum;
                            custTransEPRemitLoc.DueDate               = CustTransOpen::find(specTransLoc.RefRecId).DueDate;
                            custTransEPRemitLoc.ConfLayoutGroupId     = CustPaymModeTable::find(ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR;
                            custTransEPRemitLoc.insert();
                            custTransEPRemitLoc.reread();
                        }
                    }
                    epRemitExport_BR.epRemitParms(this.parmLedgerJournalId(), ledgerJournalTrans.PaymMode, filename, queryRun.query(), ledgerJournalTrans.OffsetLedgerDimension);
                    this.updateLedgerJournalTrans(ledgerJournalTrans, custOutPaymRecord, true);
                    this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                }
                else
                {
                    ok = false;
                }
            }

            if (!hasData)
            {
                info("@SYS62195");
            }

            if (!ok)
            {
                file = null;
                throw error("@SYS18447");
            }
            else if (hasData)
            {
                info(strfmt("@GLS969", filename));
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    /// This method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. However, they can
    /// serve as parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return "@GLS423";
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the file.
    /// </summary>
    void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    ledgerJournalTrans parmLedgerJournalTrans()
    {
        return LedgerJournalTrans::find(this.parmLedgerJournalId(), this.parmLedgerJournalTrans().Voucher, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSectionStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the record section in the file.
    /// </summary>
    void recordSectionStart()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums up the line amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The <c>AmountMST</c> value indicating the amount added to the totalamount.
    /// </param>
    void total(AmountMST _amountMST)
    {
        sumAmount += _amountMST;

        numAmount++;
        numRecords++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (!filename)
        {
            ok = checkFailed("@GLS221430");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userInteraction</Name>
				<Source><![CDATA[
    public CustVendOutPaymUserInteraction userInteraction(Args _args = null)
    {
        if (_args)
        {
            _args.parmEnum(UserInteractive::No);
        }

        var ret = super(_args);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>