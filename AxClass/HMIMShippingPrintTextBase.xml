<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShippingPrintTextBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class HMIMShippingPrintTextBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldTypeForPrintField</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public HMIMPrintFieldType getFieldTypeForPrintField(HMIMPrintField _printField)
    {
        switch (_printField)
        {
            // Special fields and legacy fields
            case HMIMPrintField::FieldSeparator:
            case HMIMPrintField::FixedText:
            case HMIMPrintField::ProperShipName:
            case HMIMPrintField::LimitedQty:
            case HMIMPrintField::Flashpoint:
            case HMIMPrintField::AirPacking:
            case HMIMPrintField::Class:
            case HMIMPrintField::Division:
            case HMIMPrintField::Identification:
            case HMIMPrintField::TechnicalName:
            case HMIMPrintField::PackDescription:
            case HMIMPrintField::LabelCode:
            case HMIMPrintField::PackGroup:
            case HMIMPrintField::TunnelCode:
            case HMIMPrintField::TransportCategory:
            case HMIMPrintField::StowageCode:
                throw error(Error::wrongUseOfFunction(funcName()));

            // True/False fields
            case HMIMPrintField::EnvironmentalHazard:
            case HMIMPrintField::MarinePollutant:
                return HMIMPrintFieldType::TrueFalse;

            // Simple text fields (description only, no code)                

            // Code and description fields:
            case HMIMPrintField::EMSCode:
                return HMIMPrintFieldType::CodeAndDescription;
        }

        return this.getFieldTypeForCustomPrintField(_printField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldTypeForCustomPrintField</Name>
				<Source><![CDATA[
    [Replaceable]
    public HMIMPrintFieldType getFieldTypeForCustomPrintField(HMIMPrintField _printField)
    {
        return HMIMPrintFieldType::Unknown;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateShippingPrintTxt</Name>
				<Source><![CDATA[
    protected final Description255 generateShippingPrintTxt(HMIMShippingPrintTextSource _material, Description255 _materialDescription, LanguageId _languageId)
    {
        HMIMRegPrintSetup           regPrintSetup;
        HMIMRegPrintSetup           regPrintSetupFieldSeparator;                
        System.Text.StringBuilder   printStringBuilder = new System.Text.StringBuilder();                

        // Loop through all the fields in the print setup to format the shipping text.
        while select regPrintSetup
            order by regPrintSetup.SequenceNumber
               where regPrintSetup.RegCode == _material.regCode()
        {
            if (printStringBuilder.Length > 0 && !regPrintSetup.PrintWithPrevious)
            {
                if (!regPrintSetupFieldSeparator)
                {
                    select firstonly PrintAfter from regPrintSetupFieldSeparator
                    where regPrintSetupFieldSeparator.RegCode == regPrintSetup.RegCode &&
                      regPrintSetupFieldSeparator.PrintField == HMIMPrintField::fieldSeparator;
                }

                printStringBuilder.Append(regPrintSetupFieldSeparator.PrintAfter);
            }

            this.appendPrintTxtByPrintField(printStringBuilder, regPrintSetup, _material, _materialDescription, _languageId);
        }

        return printStringBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPrintTxtByPrintField</Name>
				<Source><![CDATA[
    private void appendPrintTxtByPrintField(System.Text.StringBuilder   _stringBuilder,
                                            HMIMRegPrintSetup           _regPrintSetup,
                                            HMIMShippingPrintTextSource _material,
                                            Description255              _materialDescription,
                                            LanguageId                  _languageId)
    {
        // This switch statement handles special cases (field separators, fixed text) and legacy fields, as existing replaceable methods must be called.
        // No new fields should be added to this list, instead change the getFieldTypeForPrintField here and appropriate methods in HMIMShippingPrintTextSource

        switch (_regPrintSetup.PrintField)
        {            
            case HMIMPrintField::FieldSeparator:
                return;

            case HMIMPrintField::FixedText:
                this.appendFixedTxt(_stringBuilder, _regPrintSetup);
                return;

            case HMIMPrintField::Identification:
                this.appendIdentificationTxt(_stringBuilder, _regPrintSetup, _material, _languageId);
                return;

            case HMIMPrintField::ProperShipName:
                this.appendProperShipNameTxt(_stringBuilder, _regPrintSetup, _materialDescription);
                return;

            case HMIMPrintField::TechnicalName:
                this.appendTechnicalNameTxt(_stringBuilder, _regPrintSetup, _material, _languageId);
                return;

            case HMIMPrintField::Class:
                this.appendClassTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::Division:
                this.appendDivisionTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::LabelCode:
                this.appendLabelCodeTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::PackGroup:
                this.appendPackGroupTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::TunnelCode:
                this.appendTunnelCodeTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::TransportCategory:
                this.appendTransportCategoryTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::StowageCode:
                this.appendStowageCodeTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::LimitedQty:
                this.appendLimitedQtyTxt(_stringBuilder, _regPrintSetup, _material);
                return;
            
            case HMIMPrintField::PackDescription:
                this.appendPackDescriptionTxt(_stringBuilder, _regPrintSetup, _material, _languageId);
                return;
            
            case HMIMPrintField::AirPacking:
                this.appendAirPackingTxt(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintField::Flashpoint:
                this.appendFlashpointTxt(_stringBuilder, _regPrintSetup, _material.flashpoint());
                return;
        }

        switch (this.getFieldTypeForPrintField(_regPrintSetup.PrintField))
        {
            case HMIMPrintFieldType::TrueFalse:
                this.appendTxtForTrueFalsePrintField(_stringBuilder, _regPrintSetup, _material);
                return;

            case HMIMPrintFieldType::SimpleText:
                this.appendSimpleTextForPrintField(_stringBuilder, _regPrintSetup, _material, _languageId);
                return;

            case HMIMPrintFieldType::CodeAndDescription:
                this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, _languageId);
                return;
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintTxtByPrintFieldForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultPrintTxtByPrintFieldForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material, Description255 _materialDescription)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTxtForTrueFalsePrintField</Name>
				<Source><![CDATA[
    private void appendTxtForTrueFalsePrintField(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _printTextSource)
    {
        if (_printTextSource.isPrintFieldSet(_regPrintSetup.PrintField))
        {
            _stringBuilder.Append(_regPrintSetup.PrintBefore);
            _stringBuilder.Append(_regPrintSetup.PrintFixedText);
            _stringBuilder.Append(_regPrintSetup.PrintAfter);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendSimpleTextForPrintField</Name>
				<Source><![CDATA[
    private void appendSimpleTextForPrintField(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _printTextSource, LanguageId _languageId)
    {
        Description255 fieldDescription = _printTextSource.getDescriptionForPrintField(_regPrintSetup.PrintField, _languageId);

        if (fieldDescription)
        {
            _stringBuilder.Append(_regPrintSetup.PrintBefore);
            _stringBuilder.Append(_regPrintSetup.PrintFixedText);
            _stringBuilder.Append(_regPrintSetup.PrintAfter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendCodeAndDescriptionForPrintField</Name>
				<Source><![CDATA[
    private boolean appendCodeAndDescriptionForPrintField(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _printTextSource, LanguageId _languageId)
    {
        Description255 fieldCode = _printTextSource.getCodeForPrintField(_regPrintSetup.PrintField);
        Description255 fieldDescription;

        boolean handled = true;

        if (fieldCode)
        {
            if (_regPrintSetup.PrintCode == HMIMPrintCode::Description || _regPrintSetup.PrintCode == HMIMPrintCode::CodeDescription)
            {
                fieldDescription = _printTextSource.getDescriptionForPrintField(_regPrintSetup.PrintField, _languageId);
            }

            switch (_regPrintSetup.PrintCode)
            {
                case HMIMPrintCode::Code:
                    _stringBuilder.Append(_regPrintSetup.PrintBefore);
                    _stringBuilder.Append(fieldCode);
                    _stringBuilder.Append(_regPrintSetup.PrintAfter);
                    break;

                case HMIMPrintCode::Description:
                    _stringBuilder.Append(_regPrintSetup.PrintBefore);
                    _stringBuilder.Append(fieldDescription);
                    _stringBuilder.Append(_regPrintSetup.PrintAfter);                    
                    break;

                case HMIMPrintCode::CodeDescription:
                    _stringBuilder.Append(_regPrintSetup.PrintBefore);
                    _stringBuilder.Append(fieldCode);
                    _stringBuilder.Append(' ');
                    _stringBuilder.Append(fieldDescription);
                    _stringBuilder.Append(_regPrintSetup.PrintAfter);
                    break;

                default:
                    handled = this.appendTextForCustomPrintCodeForPrintField(_stringBuilder, _regPrintSetup, _printTextSource, _languageId);
            }
        }

        return handled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTextForCustomPrintCodeForPrintField</Name>
				<Source><![CDATA[
    [Replaceable]
    public boolean appendTextForCustomPrintCodeForPrintField(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _printTextSource, LanguageId _languageId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendFixedTxt</Name>
				<Source><![CDATA[
    private void appendFixedTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup)
    {        
        if (_regPrintSetup.PrintFixedText)
        {
            _stringBuilder.Append(_regPrintSetup.PrintBefore);
            _stringBuilder.Append(_regPrintSetup.PrintFixedText);
            _stringBuilder.Append(_regPrintSetup.PrintAfter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLimitedQtyTxt</Name>
				<Source><![CDATA[
    private void appendLimitedQtyTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        Description255 limitedQtyTxt;

        if (_material.limitedQty())
        {
            limitedQtyTxt = _regPrintSetup.PrintBefore +
                            _regPrintSetup.PrintFixedText +
                            _regPrintSetup.PrintAfter;
        }
        
        _stringBuilder.Append(limitedQtyTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendProperShipNameTxt</Name>
				<Source><![CDATA[
    private void appendProperShipNameTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, Description255 _materialDescription)
    {
        Description255 properShipNameTxt;

        if (_materialDescription)
            {
            properShipNameTxt = _regPrintSetup.PrintBefore +
                                _materialDescription +
                                _regPrintSetup.PrintAfter;
        }

        _stringBuilder.Append(properShipNameTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendIdentificationTxt</Name>
				<Source><![CDATA[
    private void appendIdentificationTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material, LanguageId _languageId)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultIdentificationTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultIdentificationTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTechnicalNameTxt</Name>
				<Source><![CDATA[
    private void appendTechnicalNameTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material, LanguageId _languageId)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTechnicalNameTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultTechnicalNameTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendClassTxt</Name>
				<Source><![CDATA[
    private void appendClassTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultClassTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultClassTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendDivisionTxt</Name>
				<Source><![CDATA[
    private void appendDivisionTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDivisionTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultDivisionTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLabelCodeTxt</Name>
				<Source><![CDATA[
    private void appendLabelCodeTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLabelCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultLabelCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPackGroupTxt</Name>
				<Source><![CDATA[
    private void appendPackGroupTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPackGroupTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultPackGroupTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTunnelCodeTxt</Name>
				<Source><![CDATA[
    private void appendTunnelCodeTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTunnelCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultTunnelCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendTransportCategoryTxt</Name>
				<Source><![CDATA[
    private void appendTransportCategoryTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransportCategoryTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultTransportCategoryTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendStowageCodeTxt</Name>
				<Source><![CDATA[
    private void appendStowageCodeTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultStowageCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultStowageCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendPackDescriptionTxt</Name>
				<Source><![CDATA[
    private void appendPackDescriptionTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material, LanguageId _languageId)
    {
        this.appendCodeAndDescriptionForPrintField(_stringBuilder, _regPrintSetup, _material, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPackDescriptionTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultPackDescriptionTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendAirPackingTxt</Name>
				<Source><![CDATA[
    private void appendAirPackingTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        Description255 airPackingTxt;

        switch (_material.airType())
        {
            case HMIMAirType::NotSpecified:
                break;

            case HMIMAirType::CargoOnly:
                airPackingTxt = this.getAirPackingCargoOnlyTxt(_regPrintSetup, _material);
                break;

            case HMIMAirType::PassengerCargo:
                airPackingTxt = this.getAirPackingPassengerCargoTxt(_regPrintSetup, _material);
                break;

            default:
                airPackingTxt = '';
        }

        _stringBuilder.Append(airPackingTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultAirPackingTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAirPackingCargoOnlyTxt</Name>
				<Source><![CDATA[
    private Description255 getAirPackingCargoOnlyTxt(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        Description255 airPackingCargoOnlyTxt;

        if (_material.packInstCodeCargo())
        {
            switch (_regPrintSetup.PrintCode)
            {
                case HMIMPrintCode::Code:
                    airPackingCargoOnlyTxt = _regPrintSetup.PrintBefore +
                                             _material.packInstCodeCargo() +
                                             _regPrintSetup.PrintAfter;
                    break;

                case HMIMPrintCode::Description:
                    airPackingCargoOnlyTxt = _regPrintSetup.PrintBefore +
                                             HMIMPackingInstruction::find(_material.packInstCodeCargo()).Description +
                                             _regPrintSetup.PrintAfter;
                    break;

                case HMIMPrintCode::CodeDescription:
                    airPackingCargoOnlyTxt = _regPrintSetup.PrintBefore +
                                             _material.packInstCodeCargo() + ' ' +
                                             HMIMPackingInstruction::find(_material.packInstCodeCargo()).Description +
                                             _regPrintSetup.PrintAfter;
                    break;

                default:
                    airPackingCargoOnlyTxt = '';
            }
        }

        return airPackingCargoOnlyTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingCargoOnlyTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultAirPackingCargoOnlyTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAirPackingPassengerCargoTxt</Name>
				<Source><![CDATA[
    private Description255 getAirPackingPassengerCargoTxt(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        Description255 airPackingPassengerCargoTxt;

        if (_material.packInstCodePassenger())
        {
            switch (_regPrintSetup.PrintCode)
            {
                case HMIMPrintCode::Code:
                    airPackingPassengerCargoTxt = _regPrintSetup.PrintBefore +
                                                  _material.packInstCodePassenger() +
                                                  _regPrintSetup.PrintAfter;
                    break;

                case HMIMPrintCode::Description:
                    airPackingPassengerCargoTxt = _regPrintSetup.PrintBefore +
                                                  HMIMPackingInstruction::find(_material.packInstCodePassenger()).Description +
                                                  _regPrintSetup.PrintAfter;
                    break;

                case HMIMPrintCode::CodeDescription:
                    airPackingPassengerCargoTxt = _regPrintSetup.PrintBefore +
                                                  _material.packInstCodePassenger() + ' ' +
                                                  HMIMPackingInstruction::find(_material.packInstCodePassenger()).Description +
                                                  _regPrintSetup.PrintAfter;
                    break;

                default:
                    airPackingPassengerCargoTxt = '';
            }
        }

        return airPackingPassengerCargoTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingPassengerCargoTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextSource instead', true, 27\10\2023)]
    protected abstract Description255 getDefaultAirPackingPassengerCargoTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendFlashpointTxt</Name>
				<Source><![CDATA[
    private void appendFlashpointTxt(System.Text.StringBuilder _stringBuilder, HMIMRegPrintSetup _regPrintSetup, HMIMFlashpoint _flashpointTxt)
    {
        Description255 flashpointTxt;

        if (_flashpointTxt)
        {
            flashpointTxt = _regPrintSetup.PrintBefore +
                            _flashpointTxt +
                            _regPrintSetup.PrintAfter;
        }

        _stringBuilder.Append(flashpointTxt);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>