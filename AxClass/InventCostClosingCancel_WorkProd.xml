<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingCancel_WorkProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostClosingCancel_WorkProd</c> class represents the work item for a single production
///    order.
/// </summary>
/// <remarks>
///    For each production order, where adjustments have been created during the inventory closing, a
///    separate instance of this class will be created to trigger the cancellation of the adjustments.
/// </remarks>

class InventCostClosingCancel_WorkProd extends InventCostClosingCancel implements BatchRetryable
{
    ProdId  prodId;
    private List prodIdList;
    private container packedProdIdList;

    #DEFINE.CurrentVersion(3)
    #DEFINE.Version2(2)

    #LOCALMACRO.CurrentList
        #CurrentListV2,
        packedProdIdList
    #ENDMACRO

    #LOCALMACRO.CurrentListV2
        prodId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the <see cref="T:inventCostProdCancel" /> to cancel the adjustments for a production order
    /// </summary>
    protected void execute()
    {

        // Check if I am allowed to proceed
        if (this.checkStatus())
        {
            if (prodIdList && prodIdList.elements() > 0 && InventCostClosingCancelBundleProdFlight::instance().isEnabled())
            {
                ListEnumerator prodIdListEnumerator = prodIdList.getEnumerator();
                while (prodIdListEnumerator.moveNext())
                {
                    prodId = prodIdListEnumerator.current();
                    setPrefix(strFmt("@SYS26199", prodId));
                    inventCostProdCancel::cancelFromProdIdInventCostClosingCancel(prodId, inventClosing, cancelClosing);
                    this.writeInfoLog(LogType::Prod, prodId);
                }
            }
            else
            {
                setPrefix(strFmt("@SYS26199", prodId));
                inventCostProdCancel::cancelFromProdIdInventCostClosingCancel(prodId, inventClosing, cancelClosing);
                this.writeInfoLog(LogType::Prod, prodId);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    ///    This class must always run with the currently passed values, therefore no last values should be
    ///    retrieved from the <see cref="T:SysLastValue" />.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for a batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = strFmt("@SYS117105", prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdIdList</Name>
				<Source><![CDATA[
    public List parmProdIdList(List _prodIdList = prodIdList)
    {
        prodIdList = _prodIdList;
        return prodIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        if (prodIdList && prodIdList.elements() > 0)
        {
            packedProdIdList = prodIdList.pack();
        }
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);
        container base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                if (packedProdIdList && conLen(packedProdIdList) > 0)
                {
                    prodIdList = List::create(packedProdIdList);
                }
                return super(base);
            
            case #Version2:
                [version, #CurrentListV2, base] = _packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public InventCostClosingCancel_WorkProd construct()
    {
        return new InventCostClosingCancel_WorkProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS117103";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>