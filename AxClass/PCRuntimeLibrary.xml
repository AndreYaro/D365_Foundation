<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeLibrary</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PcRuntimeLibrary
{
    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCalculateDateForItemLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the delivery date calculation is possible by checking the type of the specified
    /// item line.
    /// </summary>
    /// <param name="_itemLine">
    /// The item line for which to evaluate the chance of a delivery date calculation.
    /// </param>
    /// <returns>
    /// true if the delivery date calculation is possible on the specified item line; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The item line types that can use a delivery date calculation are sales lines and sales basket lines.
    /// </remarks>
    public static boolean canCalculateDateForItemLine(Common _itemLine)
    {
        boolean ret;

        switch (_itemLine.TableId)
        {
            case tableNum(SalesLine)                :
            case tableNum(SalesBasketLine)          :
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculatePriceForItemLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the price calculation is possible by checking the product builder parameters and
    /// the type of the specified item line.
    /// </summary>
    /// <param name="_itemLine">
    /// The item line to check for the chance of price calculation.
    /// </param>
    /// <returns>
    /// true if sales price calculation is enabled in the product builder parameters and the calculation is
    /// possible on the specified item line; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The item line types that can use a price calculation are sales lines, sales quotation lines, sales
    /// basket lines, and sales quotation basket lines.
    /// </remarks>
    public static boolean canCalculatePriceForItemLine(Common _itemLine)
    {
        boolean         ret = false;

        switch (_itemLine.TableId)
        {
            case tableNum(SalesLine)                :
            case tableNum(SalesQuotationLine)       :
            case tableNum(SalesBasketLine)          :
            case tableNum(SalesQuotationBasketLine) :
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the values from the specified configuration instance.
    /// </summary>
    /// <param name="_configuration">
    ///    The product configuration session in which to store the values of the configuration.
    /// </param>
    public static void clearConfiguration(PCProductConfiguration _configuration)
    {
        #PC
        PCComponentInstanceRootComponent    rootInstance;
        PCComponentInstanceSubComponent     subInstance;
        PCComponentInstance                 instance;

        ttsbegin;
        //delete actions are set from rootInstance to componentInstance
        select  firstonly forupdate RecId from rootInstance
        join    RecId from instance
        where   instance.ProductConfiguration   ==  _configuration.RecId
        &&      rootInstance.ComponentInstance  ==  instance.RecId;

        if (rootInstance)
        {
            rootInstance.delete();
        }

        //delete actions are set from subInstance to componentInstance
        while   select forupdate RecId from subInstance
        join    RecId from instance
        where   instance.ProductConfiguration       ==  _configuration.RecId
        &&      subInstance.ChildComponentInstance  ==  instance.RecId
        {
            subInstance.delete();
        }

        delete_from instance where instance.ProductConfiguration == _configuration.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configuratorFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the form used for configuration.
    /// </summary>
    /// <returns>
    /// A form name.
    /// </returns>
    public static FormName configuratorFormName()
    {
        return PCRuntimeLibrary::getConfiguratorFormName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVariantConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new variant configuration and a new distinct product variant for the specified generic
    ///    product model.
    /// </summary>
    /// <param name="_ecoResProductMaster">
    ///    The product master that is associated with the distinct product variants.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item that was released from the generic product model.
    /// </param>
    /// <param name="_lineInventDimId">
    ///    The ID of the inventory dimension that is attached to the item line that contains the item.
    /// </param>
    /// <returns>
    ///    A container that has the ID of the new variant that was created, the ID of the inventory dimension
    ///    that was created, and the name of the configuration that was created.
    /// </returns>
    public static container createNewVariantConfiguration(
                                                                EcoResProductMaster         _ecoResProductMaster,
                                                                ItemId                      _itemId,
                                                                InventDimId                 _lineInventDimId)
    {
        PCVariantConfiguration              variantConfiguration;
        InventDimId                         inventDimId;
        PCConstraintBasedConfigurationName  configurationName;
        RefRecId                            distinctProductVariantRecId;

        ttsbegin;

        [configurationName, inventDimId, distinctProductVariantRecId] = PCRuntimeLibrary::createVariantForItem(_itemId, InventDim::find(_lineInventDimId), _ecoResProductMaster);

        //create the reference to the distinctProductVariant
        variantConfiguration.DistinctProductVariant = distinctProductVariantRecId;
        variantConfiguration.insert();

        ttscommit;

        return [variantConfiguration.RecId, inventDimId, configurationName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVariantForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new product variant for the specified product master.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item that was released from the generic product model.
    /// </param>
    /// <param name="_baseInventDim">
    ///    The inventory dimension that serves as a base for the construction of the new dimension.
    /// </param>
    /// <param name="_ecoResProductMaster">
    ///    The product master that is associated with the distinct product variants.
    /// </param>
    /// <param name="_configurationName">
    ///    The configuration name to attempt to use again; optional.
    /// </param>
    /// <returns>
    ///    A container that contains the ID of the new variant, the ID of the inventory dimension, and the
    ///    name of the configuration.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function was called without the correct parameters.
    /// </exception>
    public static container createVariantForItem(
        ItemId                              _itemId,                //the item id
        InventDim                           _baseInventDim,         //starting point for our new dimension
        EcoResProductMaster                 _ecoResProductMaster,   //the product master of the item
        PCConstraintBasedConfigurationName  _configurationName = '') //the configuration to assign
    {
        InventDim                           inventDim;
        NumberSeq                           configNumSeq;
        PCConstraintBasedConfigurationName  configurationName;
        RefRecId                            distinctProductVariantRecId;
        container                           dimensions;
        boolean                             mustGetNewNumber = true;
        EcoResProductName                   productName;

        if (!_itemId || !_ecoResProductMaster ) //InventDim may not be committed yet
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_configurationName)
        {
            dimensions = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(_configurationName);

            //check if this configuration already exists for the item
            if (!EcoResProductVariantManager::existDistinctProductVariant(_ecoResProductMaster.RecId, dimensions))
            {
                //we can reuse the given value, it doesn't exist yet
                configurationName = _configurationName;
                mustGetNewNumber  = false;
            }
        }

        if (mustGetNewNumber)
        {
            configNumSeq        =   NumberSeq::newGetNum(EcoResProductParameters::numRefConstraintBasedConfigurationName());
            configurationName   =   configNumSeq.num();
        }
        else
        {
            configurationName   = _configurationName;
        }

        //create the inventory dimension record
        inventDim.initFromInventDim(_baseInventDim);
        inventDim.ConfigId      =   configurationName;
        inventDim               =   InventDim::findOrCreate(inventDim);

        if (EcoResProductMasterManagerMethodSignatureChangeFlight::instance().isEnabled())
        {
            EcoResProductMasterManager::addNewProductDimensionValue(
                _ecoResProductMaster.RecId,
                EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                inventDim.ConfigId,
                '',
                '');
        }
        else
        {
            EcoResProductMasterManager::addProductDimensionValue(
                _ecoResProductMaster.RecId,
                EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                inventDim.ConfigId,
                '',
                '');
        }

        dimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);

        distinctProductVariantRecId = EcoResProductVariantManager::createProductVariant(
            _ecoResProductMaster.RecId,
            _ecoResProductMaster.SearchName + inventDim.ConfigId,
            dimensions);

        productName = EcoResProductTranslation::findByProductLanguage(_ecoResProductMaster.RecId, SystemParameters::getSystemLanguageId()).Name;

        if (productName)
        {
            EcoResProductTranslation::createOrUpdateTranslation(distinctProductVariantRecId, productName, '');
        }

        EcoResProductReleaseManagerBase::releaseProduct(distinctProductVariantRecId, CompanyInfo::findDataArea(curext()).RecId);

        return [configurationName, inventDim.InventDimId, distinctProductVariantRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlReader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>XMLReader</c> class.
    /// </summary>
    /// <param name="_xmlString">
    ///    The XML representation of the product model to use in creating an instance of the <c>XMLReader</c>
    ///    class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>XMLReader</c> class.
    /// </returns>
    public static XmlReader createXmlReader(str _xmlString)
    {
        XmlReaderSettings   xmlReaderSettings;
        XmlReader           xmlReader;

        xmlReaderSettings = new XmlReaderSettings();
        xmlReader = XmlReader::newXml(_xmlString, xmlReaderSettings);

        return xmlReader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlWriter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>XMLWriter</c> class.
    /// </summary>
    /// <returns>
    ///    The new instance of the <c>XMLWriter</c> class.
    /// </returns>
    public static XmlWriter createXmlWriter()
    {
        XmlWriterSettings   xmlWriterSettings;
        XmlWriter           xmlWriter;
        xmlWriterSettings = new XmlWriterSettings();
        xmlWriter = XmlWriter::newXml(xmlWriterSettings);

        return xmlWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuGenerateNoYes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string with several tabs that are defined by the <paramref name="_treeLevel" /> parameter.
    /// </summary>
    /// <returns>
    /// A string that contains zero or more tabs.
    /// </returns>
    public static NoYes docuGenerateNoYes()
    {
        return EcoResProductParameters::find().pcDocuTypeId != '' ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuRefTabStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string with several tabs that are defined by the <paramref name="_treeLevel" /> parameter.
    /// </summary>
    /// <param name="_treeLevel">
    /// An integer that indicates the level in the tree structure.
    /// </param>
    /// <returns>
    /// A string that contains zero or more tabs.
    /// </returns>
    public static str docuRefTabStr(int _treeLevel)
    {
        int i;
        str ret = '';
        #PC

        for (i = 0; i < _treeLevel; i++)
        {
            ret += #docuRefTab;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentByConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the configuration summary generated for the specified product configuration.
    /// </summary>
    /// <param name="_configuration">
    ///    The product configuration that contains the configuration summary.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>DocuRef</c> table; otherwise, an empty record.
    /// </returns>
    public static DocuRef findDocumentByConfiguration(PCProductConfiguration _configuration, boolean _forUpdate =false)
    {
        DocuRef documentReference;
        int64   refTableId;

        if (!_configuration)
        {
            return documentReference;
        }

        if (_configuration.getInstanceRelationType() == tableStr(PCTemplateConfiguration))
        {
            refTableId = tableNum(PCTemplateConfiguration);
        }
        else
        {
            refTableId = tableNum(PCVariantConfiguration);
        }

        documentReference.selectForUpdate(_forUpdate);

        select  firstonly documentReference
        where   documentReference.RefRecId == _configuration.RecId
        &&      documentReference.Restriction  == DocuRestriction::External
        &&      documentReference.RefTableId == refTableId;

        return documentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientNumberFormatInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number format information about the client.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>System.Globalization.NumberFormatInfo</c> class.
    /// </returns>
    public static System.Globalization.NumberFormatInfo getClientNumberFormatInfo()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();
        return System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfiguratorFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the form used for configuration.
    /// </summary>
    /// <returns>
    /// A form name.
    /// </returns>
    protected static FormName getConfiguratorFormName()
    {
        return formStr(PCRuntimeConfigurator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModelXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the XML representation of the specified product model that is compatible with the product
    ///    configuration.
    /// </summary>
    /// <param name="_model">
    ///    The product model from which to extract the generated XML.
    /// </param>
    /// <param name="_configuration">
    ///    The instance of the configuration that will be loaded with the current configuration; optional.
    /// </param>
    /// <param name="_priceMethod">
    ///    The method used to calculate the unit price, defaults to cost; optional.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    /// <returns>
    ///    A string that contains the generated XML representation of the specified product model.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified model is not valid.
    /// </exception>
    public static str getModelXML(
        PCProductConfigurationModel     _model,
        PCProductConfiguration          _configuration = null,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct())
    {
        using (var activityContext = PCInstrumentationLogger::createLogger(classStr(PCRuntimeLibrary)).preRuntime().generateXml())
        {
            PCXmlSessionWriterModel     sessionWriterModel  = PCXmlSessionWriterModel::construct();
            str                         xml;

            if (!_model)
            {
                throw error(Error::missingRecord(funcName()));
            }

            _runtimePriceModelInstance.parmPriceMethod(_priceMethod);
        
            xml = sessionWriterModel.writeModel(_model, _configuration, _runtimePriceModelInstance.parmPriceMethod(), _runtimePriceModelInstance);

            return xml;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubModelXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the XML representation of the specified product model component that is compatible with
    ///    the product configuration.
    /// </summary>
    /// <param name="_subComponent">
    /// Identifies the subcomponent in the <c>PCClass</c> table.
    /// </param>
    /// <param name="_priceMethod">
    ///    The method used to calculate the unit price, defaults to cost; optional.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    /// <returns>
    ///    A string that contains the generated XML representation of the specified product model.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified model component is not valid.
    /// </exception>
    public static str getSubModelXML(
        PCClass                         _subComponent,
        PCPriceMethod                   _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance     _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct())
    {
        PCXmlSessionWriterModel sessionWriterModel  = PCXmlSessionWriterModel::construct();
        PCXmlWriter             writer = PCXmlWriter::construct();
        str                     xml;

        if (!_subComponent)
        {
            throw error(Error::missingRecord(funcName()));
        }

        _runtimePriceModelInstance.parmPriceMethod(_priceMethod);

        sessionWriterModel.writeSubComponent(_subComponent, writer, _runtimePriceModelInstance);

        xml = writer.writeToString();

        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValidTemplateLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the condition map from the runtime component contains values of true for both BOM
    ///    and route operation lines.
    /// </summary>
    /// <param name="_conditionsMap">
    ///    The map that contains the solver results for the conditions.
    /// </param>
    /// <returns>
    ///    A container with:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The Boolean value of true if there are BOM lines to generate.</description>
    ///       </item>
    ///       <item>
    ///          <description>The Boolean value of true if there are route operation lines to generate.</description>
    ///       </item>
    ///    </list>
    /// </returns>
    public static container hasValidTemplateLines(Map _conditionsMap)
    {
        PCTemplateComponent templateComponent;
        int64               templateComponentRecId;
        int64               componentInstanceRecId;
        MapEnumerator       enumerator;
        boolean             hasValidBomLines        = false;
        boolean             hasValidRouteOprLines   = false;

        if ((_conditionsMap == null) || _conditionsMap.empty())
        {
            return [hasValidBomLines, hasValidRouteOprLines];
        }

        //the idea is to traverse the conditions map and see if we should produce a bom / route
        enumerator = _conditionsMap.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentValue() ==  NoYes::Yes)
            {
                [templateComponentRecId, componentInstanceRecId] = enumerator.currentKey();
                templateComponent = PCTemplateComponent::find(templateComponentRecId);
                if (templateComponent.isBOMTemplateComponent())
                {
                    hasValidBomLines = true;
                }
                else    
                {
                    hasValidRouteOprLines = true;
                }

                //we just need any justification to actually create a bom/route so the first "true" is enough
                if (hasValidBomLines && hasValidRouteOprLines)
                {
                    break;
                }
            }
        }

        return [hasValidBomLines, hasValidRouteOprLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record of the <c>DocuRef</c> table to contain a note with a configuration summary.
    /// </summary>
    /// <param name="_noteGeneration">
    /// The buffer of the record to initialize.
    /// </param>
    /// <param name="_sourceLine">
    /// The source line.
    /// </param>
    /// <param name="_notes">
    /// The string representation of the selections made by the user.
    /// </param>
    public static void initializeDocument(DocuRef  _noteGeneration, Common _sourceLine, str _notes)
    {
        EcoResProductParameters productParameter = EcoResProductParameters::find();

        _noteGeneration.Name         = "@SYS302331";
        _noteGeneration.Notes        = _notes;
        _noteGeneration.RefRecId     = _sourceLine.RecId;
        _noteGeneration.RefTableId   = _sourceLine.TableId;
        _noteGeneration.Restriction  = DocuRestriction::External;
        _noteGeneration.TypeId       = productParameter.pcDocuTypeId;
        _noteGeneration.RefCompanyId = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the configuration key for Product
    ///    Configuration is enabled.
    /// </summary>
    /// <returns>
    ///    true if the configuration key are enabled; otherwise, false.
    /// </returns>
    public static boolean isConfigurationKeyEnabled()
    {
        return (isConfigurationkeyEnabled(configurationKeyNum(PC)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConstraintBasedConfigurable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified item is configurable by constraint-based product configuration.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item to validate.
    /// </param>
    /// <returns>
    ///    true if the item is compatible with constraint-based configuration; otherwise, false.
    /// </returns>
    public static boolean isConstraintBasedConfigurable(ItemId _itemId)
    {
        return InventTable::find(_itemId).isConstraintBasedConfigurable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProductModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the configuration form to configure the product configuration model.
    /// </summary>
    /// <param name="_model">
    /// The product model to execute.
    /// </param>
    /// <param name="_modelXML">
    /// The XML representation of the product model to execute.
    /// </param>
    /// <param name="_configuration">
    /// The configuration to load in the product model configuration; optional.
    /// </param>
    /// <param name="_runtimeMode">
    /// The runtime mode of the runtime configurator; optional.
    /// </param>
    /// <param name="_caller">
    /// The form that is calling the configuration.
    /// </param>
    /// <param name="_doRun">
    /// A Boolean value that indicates whether to launch the form immediately.
    /// </param>
    /// <param name="_modal">
    /// A Boolean value that indicates whether to launch the form as modal.
    /// </param>
    /// <returns>
    /// The <c>FormRun</c> object of the generated form.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The specified model is not valid.
    /// </exception>
    public static FormRun runProductModel(
                            PCProductConfigurationModel _model,
                            str                     _modelXML, //avoinds roundtripping back to the server
                            PCProductConfiguration  _configuration  = null,
                            PCRuntimeMode           _runtimeMode    = PCRuntimeMode::Test,
                            Object                  _caller = null,
                            boolean                 _doRun = true,
                            boolean                 _modal = true)
    {
        Args        args = new Args();
        FormRun     formRun;

        if (!_model)
        {
            throw error(Error::missingRecord(funcName()));
        }
        else
        {
            args.record(_model);
        }

        args.parmEnumType(enumNum(PCRuntimeMode));
        args.parmEnum(_runtimeMode);
        args.lookupRecord(_configuration);
        args.parm(_modelXML);

        if (_caller)
        {
            args.caller(_caller);
        }
        args.name(PCRuntimeLibrary::getConfiguratorFormName());
        formRun = classfactory.formRunClass(args);

        if (_doRun)
        {
            formRun.run();
            if (_modal)
            {
                formRun.wait();
            }
            else
            {
                formRun.detach();
            }
        }

        return  formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified product model with the provided set of values can generate a valid BOM
    ///    and a route.
    /// </summary>
    /// <param name="_productConfigurationModel">
    ///    The product model to test.
    /// </param>
    /// <param name="_boundValues">
    ///    The XML string that contains the set of the bound values.
    /// </param>
    /// <returns>
    ///    true if the generation of the product model succeeded; otherwise, false.
    /// </returns>
    public static boolean validateGeneration(
        PCProductConfigurationModel _productConfigurationModel,
        str                         _boundValues)
    {
        BOMId                           generatedBOMId;
        RouteId                         generatedRouteId;
        boolean                         ret                         = true;
        Map                             componentInstanceToDimMap   = new Map(Types::Int64, Types::String);
        InventDim                       inventDim                   = InventDim::find(InventDim::inventDimIdBlank());
        PCProductModelVersion           version;
        PCProductModelVersionApprover   versionApprover;
        PCVariantConfiguration          variantConfiguration;
        str                             boundValues;
        EcoResDistinctProductVariant    distinctProductVariant;
        InventTable                     inventTable;

        PCBackEndConfiguration              backEndConfiguration = PCBackEndConfiguration::construct();
        ProdTable                           dummyProdTable;
        PCValidationNumberSequence          validationNumberSequence      = PCValidationNumberSequence::construct();
        const str                           pcTest = 'PCTest';

        // validate that the setup for numberSequence is correct
        if (!validationNumberSequence.validateSetup())
        {
            // the error messages are already included in the infolog
            throw Exception::Error;
        }

        try
        {
            ttsbegin;
            // create a temporary approved version
            version = PCProductModelVersion::findActiveVersionByProductModel(_productConfigurationModel.RecId);

            select firstonly distinctProductVariant
                where distinctProductVariant.ProductMaster == version.ProductMaster;

            inventTable = InventTable::findByProduct(version.ProductMaster);

            if (!version || !distinctProductVariant || !inventTable)
            {
                throw error('@SCM:PCTestModelWithoutVersionError');
            }

            variantConfiguration.DistinctProductVariant = distinctProductVariant.RecId;
            variantConfiguration.insert();

            // initialize dummy source line
            dummyProdTable.ProdId           = pcTest;
            dummyProdTable.InventDimId      = pcTest;
            dummyProdTable.InventTransId    = pcTest;
            dummyProdTable.ItemId           = inventTable.ItemId;

            backEndConfiguration.setup(
                                    variantConfiguration,
                                    version,
                                    dummyProdTable.ItemId /* as item id */,
                                    _productConfigurationModel.Name /* as configuration name */,
                                    inventDim,
                                    inventDim,
                                    0.0 /* price */,
                                    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                    null,
                                    false,
                                    _boundValues,
                                    dummyProdTable,
                                    _productConfigurationModel);

            backEndConfiguration.setupAdaptor();

            backEndConfiguration.execute();

            generatedBOMId      = backEndConfiguration.getGeneratedBOMId();
            generatedRouteId    = backEndConfiguration.getGeneratedRouteId();

            if (generatedBOMId)
            {
                ret = BOMHierarchyCheck::checkBOM(generatedBOMId, true, true, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), true);
                NumberSeq::release(BOMTable::numberSeq().parmNumberSequenceCode(), generatedBOMId);
            }
            if (generatedRouteId)
            {
                NumberSeq::release(RouteTable::numberSeq().parmNumberSequenceCode(), generatedRouteId);
            }
            ttsabort;
        }
        catch
        {
            ttsabort;
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSeqSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the number sequences are correctly setup to run a product configuration.
    /// </summary>
    /// <returns>
    ///    true if the number sequence setup is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should only be called when the user is running a variant configuration and may have to
    ///    produce a unique configuration, a BOM, and a route.
    /// </remarks>
    public static boolean validateNumberSeqSetup()
    {
        boolean ret = true;
        boolean validateNumSeq(NumberSequenceReference _numberSequenceReference)
        {
            NumberSequenceTable      numberSequenceTable = NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId);
            if (!numberSequenceTable)
            {
                warning(strFmt("@SYS53911", _numberSequenceReference.referenceLabel(),_numberSequenceReference.referenceModuleLabel()));
                return false;
            }
            if (numberSequenceTable.Manual)
            {
                warning(strFmt("@SYS131762", _numberSequenceReference.referenceLabel()));
                return false;
            }
            return true;
        }

        //note that all number sequences are evaluated, so the user
        //gets all the places where he needs to update the number seq setup
        setPrefix("@SYS25067");

        //BOM id
        ret = validateNumSeq(BOMParameters::numRefBOMId());
        //InventDim id
        ret = validateNumSeq(InventParameters::numRefInventDimId()) && ret;
        //RouteId
        ret = validateNumSeq(RouteParameters::numRefRouteId()) && ret;
        //PC configuration ID
        ret = validateNumSeq(EcoResProductParameters::numRefConstraintBasedConfigurationName()) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXmlAXLabelElement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes a single label element to the specified XML writer.
    /// </summary>
    /// <param name="writer">
    ///    The XML writer to which to write.
    /// </param>
    /// <param name="id">
    ///    The ID of the label to write.
    /// </param>
    /// <param name="value">
    ///    The value of the label to write.
    /// </param>
    private static void writeXmlAXLabelElement(XmlWriter writer, str id, str value)
    {
        writer.writeStartElement(#AXLabel);
        writer.writeAttributeString(#AXLabelID, id);
        writer.writeAttributeString(#AXLabelValue,value);
        writer.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLAXLabelSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the label values to the XML that is passed to the manage host control.
    /// </summary>
    /// <returns>
    ///    An XML formatted string of the labels to use in the managed control.
    /// </returns>
    public static str writeXMLAXLabelSection()
    {
        XmlWriter writer = PCRuntimeLibrary::createXmlWriter();

        writer.writeStartElement(#AXLabelSection);

        // Add AX labels for the WPF runtime control:
        PCRuntimeLibrary::writeXmlAXLabelElement(writer, 'SYS310288', "@SYS310288");
        PCRuntimeLibrary::writeXmlAXLabelElement(writer, 'SYS310824', "@SYS310824");

        writer.writeEndElement();

        writer.close();

        return writer.writeToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>