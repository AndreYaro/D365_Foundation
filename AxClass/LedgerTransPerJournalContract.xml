<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPerJournalContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>LedgerTransPerJournal</c> SSRS report
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>LedgerTransPerJournal</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationGroup('Date', "@SYS7402", '1'),
    SysOperationGroup('Printout', "@SYS12608", '2'),
    SysOperationContractProcessing(classStr(LedgerTransPerJournalUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class LedgerTransPerJournalContract implements SysOperationValidatable
{
    boolean onlyLedger;
    boolean showFullLedgerAccount;
    boolean showDimensions;
    private TransDate fromDate;
    private TransDate toDate;

    // The following parameters are not shown to the user.
    str hiddenSysVersion;
    DirPartyName userName;
    boolean displayDescription;
    private boolean journalContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDisplayDescription</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(DisplayDescription))
    ]
    public boolean parmDisplayDescription(boolean _displayDescription = displayDescription)
    {
        displayDescription = _displayDescription;
        return displayDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter From date.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the data contract parameter From date; optional.
    /// </param>
    /// <returns>
    /// The current value of data contract parameter From date.
    /// </returns>
    [
        DataMember('FromDate'),
        SysOperationLabel(literalstr("@SYS5209")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter To date.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the data contract parameter To date; optional.
    /// </param>
    /// <returns>
    /// The current value of data contract parameter To date.
    /// </returns>
    [
        DataMember('ToDate'),
        SysOperationLabel(literalstr("@SYS14656")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter OnlyLedger.
    /// </summary>
    /// <param name="_onlyLedger">
    /// The new value of the data contract parameter OnlyLedger; optional.
    /// </param>
    /// <returns>
    ///  The current value of data contract parameter OnlyLedger
    /// </returns>
    [
        DataMemberAttribute('OnlyLedger'),
        SysOperationLabelAttribute(literalstr("@SYS4000558")),
        SysOperationHelpTextAttribute(literalstr("@SYS77888")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public boolean parmOnlyLedger(boolean _onlyLedger = onlyLedger)
    {
        onlyLedger = _onlyLedger;
        return onlyLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter ShowDimensions.
    /// </summary>
    /// <param name="_showDimensions">
    /// The new value of the data contract parameter ShowDimensions; optional.
    /// </param>
    /// <returns>
    ///  The current value of data contract parameter ShowDimensions
    /// </returns>
    [
        DataMemberAttribute('ShowDimensions'),
        SysOperationLabelAttribute(literalstr("@SYS138491")),
        SysOperationHelpTextAttribute(literalstr("@SYS327423")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public boolean parmShowDimensions(boolean _showDimensions = showDimensions)
    {
        showDimensions = _showDimensions;
        return showDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFullLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the data contract parameter ShowFullLedgerAccount.
    /// </summary>
    /// <param name="_showFullLedgerAccount">
    /// The new value of the data contract parameter ShowFullLedgerAccount; optional.
    /// </param>
    /// <returns>
    ///  The current value of data contract parameter ShowFullLedgerAccount
    /// </returns>
    [
        DataMemberAttribute('ShowFullLedgerAccount'),
        SysOperationLabelAttribute(literalstr("@SYS8343")),
        SysOperationHelpTextAttribute(literalstr("@SYS327424")),
        SysOperationGroupMemberAttribute('Printout'),
        SysOperationDisplayOrderAttribute('5')
    ]
    public boolean parmShowFullLedgerAccount(boolean _showFullLedgerAccount = showFullLedgerAccount)
    {
        showFullLedgerAccount = _showFullLedgerAccount;
        return showFullLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>HiddenSysVersion</c> parameter of the data contract.
    /// </summary>
    /// <param name="_sysVersion">
    ///    The new value of the <c>SysVersion</c> parameter of the data contract; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>HiddenSysVersion</c> parameter of the data contract.
    /// </returns>
    [DataMemberAttribute(identifierStr(SysVersion))]
    public Description255 parmSysVersion(Description255 _sysVersion = hiddenSysVersion)
    {
        hiddenSysVersion = _sysVersion;
        return hiddenSysVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(UserName))
    ]

    public DirPartyName parmUserName(DirPartyName _userName = userName)
    {
        userName = _userName;
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the Journal context parameter of the data contract.
    /// </summary>
    /// <param name="_journalContext">
    /// The new value of the Journal context parameter of the data contract; optional.
    /// </param>
    /// <returns>
    /// The current value of the Journal context parameter of the data contract.
    /// </returns>
    /// <remarks>
    /// The journal context parameter provides context from the report contract to the report controller
    /// whether or not the contract is bound to a specific Journal. This hidden parameter instructs the
    /// report dialog to display the From date and the To date parameters if the report contract does not contain
    /// a Journal record context.
    /// </remarks>
    [DataMember('JournalContext'), SysOperationControlVisibility(false)]
    public boolean parmJournalContext(boolean _journalContext = journalContext)
    {
        journalContext = _journalContext;
        return journalContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report contract parameters.
    /// </summary>
    /// <returns>True if the report parameter values are valid, otherwise, false.</returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (journalContext == false)
        {
            isValid = LedgerReportFromAndToDateValidator::validateReportFromAndToDate(
                this.fromDate,
                this.toDate);
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>