<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlClusterId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlBatchId</c> class is responsible for handling the batch ID controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#ClusterId)]
public class WhsControlClusterId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSWorkClusterTable workClusterTable;

        if (mode == WHSWorkExecuteMode::ClusterPutaway)
        {
            workClusterTable = WHSWorkClusterTable::findClusterReadyForPutaway(this.parmData());
    
            if (workClusterTable.RecId              == 0
                ||  workClusterTable.ClusterType    != WHSClusterType::Putaway
                ||  (workClusterTable.LockedUser    == ''
                        &&   workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Closed
                        &&   workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Passed))
            {
                return this.fail("@WAX:InvalidCluster");
            }

            if (this.isWorkClusterTableLocked(workClusterTable))
            {
                return this.fail("@WAX3748");
            }
        }
        else
        {
            workClusterTable = WHSWorkClusterTable::find(this.parmData());

            if (workClusterTable
                &&  workClusterTable.ClusterType != WHSClusterType::Picking)
            {
                return this.fail("@WAX:InvalidCluster");
            }

            if (this.isWorkClusterTableLocked(workClusterTable))
            {
                return this.fail("@WAX3748");
            }

            if (this.isClusteredWorkBlocked(workClusterTable, pass.lookup(#UserId)))
            {
                return this.fail("@WAX3748");
            }
        }

        if (workClusterTable
            && !this.validateUserWarehouse(workClusterTable.ClusterId, pass.lookup(#InventLocationId)))
        {
            return this.fail("@WAX1239");
        }

        fieldValues.insert(#ClusterId, this.parmData());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkClusterTableLocked</Name>
				<Source><![CDATA[
    private boolean isWorkClusterTableLocked(WHSWorkClusterTable _clusterTable)
    {
        WHSWorkClusterTable workClusterTable;

        select firstonly RecId from workClusterTable
            where workClusterTable.ClusterId == _clusterTable.ClusterId
                && workClusterTable.ClusterType == _clusterTable.ClusterType
                && workClusterTable.LockedUser != ''
                && workClusterTable.LockedUser != pass.lookup(#UserId);

        return workClusterTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClusteredWorkBlocked</Name>
				<Source><![CDATA[
    private boolean isClusteredWorkBlocked(WHSWorkClusterTable _clusterTable, UserId _userId)
    {
        if (!_clusterTable)
        {
            return false;
        }

        WHSWorkClusterLine workClusterLine;
        WHSWorkTable       workTable;
        WHSWorkLine        workLine;

        select firstonly RecId from workClusterLine
        where workClusterLine.ClusterId == _clusterTable.ClusterId
        exists join workTable
            where  workTable.WorkId     == workClusterLine.WorkId
            && workTable.WorkStatus != WHSWorkStatus::Cancelled
            && workTable.LockedUser != ''
            && workTable.LockedUser != _userId
        exists join workLine
            where  workLine.WorkId == workTable.WorkId
            && workLine.Skipped    == true
            && (workLine.QtyRemain != 0 && workLine.QtyRemain != workLine.QtyWork);

        if (workClusterLine.RecId)
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserWarehouse</Name>
				<Source><![CDATA[
    private boolean validateUserWarehouse(WHSClusterId _clusterId, InventLocationId _inventLocationId)
    {
        WHSWorkClusterLine clusterLine;
        WHSWorkTable       workTable;

        select firstonly InventLocationId from workTable
            exists join clusterLine
                where clusterLine.ClusterId == _clusterId &&
                      clusterLine.WorkId == workTable.WorkId;

        return workTable.InventLocationId == _inventLocationId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>