<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlConfigurationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides access to budget control configuration information.
/// </summary>
[ExportAttribute("Dynamics.AX.Application.SourceDocumentIBudgetControlConfigurationProvider")]
[ExportMetadataAttribute("SourceDocumentIBudgetControlConfigurationProvider", "DefaultBudgetConfigurationProvider")]
class BudgetControlConfigurationProvider implements SourceDocumentIBudgetControlConfigurationProvider, SourceDocumentIBudgetControlDocumentEnablementProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isLedgerBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control is enabled for the specified legal entity.
    /// </summary>
    /// <param name="LegalEntityRecId">
    /// The record ID of the legal entity record.
    /// </param>
    /// <returns>
    /// true if budget control is enabled for the specified legal entity; otherwise, false.
    /// </returns>
    public boolean isLedgerBudgetControlEnabled(LegalEntityRecId _legalEntityRecId)
    {
        boolean isBudgetConfiguredForPrimaryLedger;

        LedgerRecId primaryLedgerRecId = Ledger::primaryLedger(_legalEntityRecId);
        isBudgetConfiguredForPrimaryLedger = Ledger::isLedgerBudgetControlEnabled(primaryLedgerRecId);

        return isBudgetConfiguredForPrimaryLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceIntegratorEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget control is enabled for the specified budget control source integrator.
    /// </summary>
    /// <param name="LegalEntityRecId">
    /// The record ID of the legal entity record.
    /// </param>
    /// <param name="_budgetControlSourceIntegrator">
    /// The budget control source integrator to check.
    /// </param>
    /// <returns>
    /// true if budget control is enabled; otherwise, false.
    /// </returns>
    public boolean isSourceIntegratorEnabled(LegalEntityRecId _legalEntityId, BudgetControlSourceIntegrator _budgetControlSourceIntegrator)
    {
        boolean isSourceIntegratorEnabled;

        LedgerRecId primaryLedgerRecId = Ledger::primaryLedger(_legalEntityId);
        isSourceIntegratorEnabled = BudgetControlConfiguration::isSourceIntegratorEnabled(primaryLedgerRecId, _budgetControlSourceIntegrator);

        return isSourceIntegratorEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBudgetCheckOnEntryForSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified budget control source integrator does a budget check on entry.
    /// </summary>
    /// <param name="LegalEntityRecId">
    /// The record ID of the legal entity record.
    /// </param>
    /// <param name="_budgetControlSourceIntegrator">
    /// The budget control source integrator for which the budget check is needed.
    /// </param>
    /// <returns>
    /// true if a budget check on entry is needed; otherwise, false.
    /// </returns>
    public boolean doBudgetCheckOnEntryForSourceIntegrator(LegalEntityRecId _legalEntityId, BudgetControlSourceIntegrator _budgetControlSourceIntegrator)
    {
        LedgerRecId primaryLedgerRecId = Ledger::primaryLedger(_legalEntityId);

        return BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(primaryLedgerRecId, _budgetControlSourceIntegrator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocLineImplToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line implementation to check budget funds availability and reserve
    /// budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// The source document line implementation.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_caller">
    /// An Object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A Boolean value that indicates whether the budget check is initiated by a specific user action;
    /// optional.
    /// </param>
    /// <param name="_user">
    /// The user who is submitting the source document line to check budget; optional.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean that indicates whether the budget reservation for the source document line is
    /// carryforward reservation.
    /// </param>
    /// <param name="_suppressErrorWarningMessages">
    /// A Boolean that indicates whether any error or warning messages should be suppressed for the budget
    /// funds available check.
    /// </param>
    public void submitSourceDocLineImplToCheckBudget(
        SourceDocumentLineImplementation _sourceDocumentLineImplementation,
        boolean _isDraftReservation,
        SourceDocumentProcessorCaller _caller,
        boolean _isOnDemandBudgetCheck = false,
        userId _user = curuserid(),
        boolean _isCarryforwardReservation = false,
        boolean _suppressErrorWarningMessages = false)
    {
        BudgetControlSourceDocumentProcessor::submitSourceDocLineImplToCheckBudget(
                            _sourceDocumentLineImplementation,
                            _isDraftReservation,
                            _caller,
                            _isOnDemandBudgetCheck,
                            _user,
                            _isCarryforwardReservation,
                            _suppressErrorWarningMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentLineToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to check the budget funds availability and reserve budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_caller">
    /// An object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A Boolean value that indicates whether the budget check is initiated by a specific user action;
    /// optional.
    /// </param>
    /// <param name="_user">
    /// The user who is submitting the source document line to check budget; optional.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean that indicates whether the budget reservation for the source document line is a
    /// carryforward reservation.
    /// </param>
    /// <param name="_suppressErrorWarningMessages">
    /// A Boolean that indicates whether any error or warning messages should be suppressed for the budget
    /// funds available check.
    /// </param>
    public void submitSourceDocumentLineToCheckBudget(
        SourceDocumentLine _sourceDocumentLine,
        boolean _isDraftReservation,
        SourceDocumentProcessorCaller _caller,
        boolean _isOnDemandBudgetCheck = false,
        userId _user = curuserid(),
        boolean _isCarryforwardReservation = false,
        boolean _suppressErrorWarningMessages = false)
    {
        BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                        _sourceDocumentLine,
                        _isDraftReservation,
                        _caller,
                        _isOnDemandBudgetCheck,
                        _user,
                        _isCarryforwardReservation,
                        _suppressErrorWarningMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocLineToReturnRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to return its remaining budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line.
    /// </param>
    /// <param name="_returnDate">
    /// The date to account for the return.
    /// </param>
    /// <param name="_caller">
    /// An Object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_user">
    /// The user that is submitting the source document line to return budget; optional.
    /// </param>
    public void submitSourceDocLineToReturnRemaining(
        SourceDocumentLine _sourceDocumentLine,
        date _returnDate,
        SourceDocumentProcessorCaller _caller,
        userId _user = curuserid())
    {
        BudgetControlSourceDocumentProcessor::submitSourceDocLineToReturnRemaining(
                            _sourceDocumentLine,
                            _returnDate,
                            _caller,
                            _user);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isDocumentEnabled(LegalEntityRecId _legalEntityId, BudgetControlSourceIntegrator _budgetControlSourceIntegrator, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean isDocumentEnabled = true;

        if (_sourceDocumentLineItem)
        {
            SourceDocumentHeaderRecId sourceDocumentHeaderRecId = _sourceDocumentLineItem.parmSourceDocumentHeaderRecId();
            if (sourceDocumentHeaderRecId)
            {
                str cacheScope = funcName();
                container cacheKey = [_legalEntityId, sourceDocumentHeaderRecId];

                if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
                {
                    // Cache only at the transaction level. Anything more aggressive won't take changes into
                    // account that could affect the result of the filtering query.
                    isDocumentEnabled = SysTransactionScopeCache::get(cacheScope, cacheKey);
                }
                else
                {
                    isDocumentEnabled = this.isDocumentFoundWithQuery(_legalEntityId, _budgetControlSourceIntegrator, sourceDocumentHeaderRecId);
                    SysTransactionScopeCache::set(cacheScope, cacheKey, isDocumentEnabled);
                }
            }
        }

        return isDocumentEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentFoundWithQuery</Name>
				<Source><![CDATA[
    private boolean isDocumentFoundWithQuery(LegalEntityRecId _legalEntityId, BudgetControlSourceIntegrator _budgetControlSourceIntegrator, SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        boolean isDocumentEnabled = true;

        Query query = BudgetControlConfiguration::getSourceIntegratorQuery(Ledger::primaryLedger(_legalEntityId), _budgetControlSourceIntegrator);
        if (query)
        {
            BudgetControlIIntegratorFilterable filterable = BudgetControlIntegratorFilterableFactory::getInstance(_budgetControlSourceIntegrator);
            BudgetControlISourceDocumentIntegratorFilterable sourceDocumentFilterable = filterable as BudgetControlISourceDocumentIntegratorFilterable;

            if (filterable && sourceDocumentFilterable)
            {
                QueryBuildDataSource sourceDocumentDataSource = query.dataSourceTable(filterable.getTableId());

                if (sourceDocumentDataSource && SysDictTable::isTableMapped(tableNum(SourceDocumentHeaderImplementation), sourceDocumentDataSource.table()))
                {
                    sourceDocumentDataSource.firstOnly(true);

                    QueryBuildRange range = SysQuery::findOrCreateRange(sourceDocumentDataSource, sourceDocumentFilterable.getSourceDocumentHeaderFieldId());
                    range.value(SysQueryRangeUtil::value(_sourceDocumentHeaderRecId));

                    QueryRun qr = new QueryRun(query);

                    if (!qr.next())
                    {
                        isDocumentEnabled = false;

                        BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlConfigurationProvider))
                            .processing().documentIsNotEnabled(_legalEntityId, _sourceDocumentHeaderRecId);
                    }
                }
            }
        }

        return isDocumentEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>