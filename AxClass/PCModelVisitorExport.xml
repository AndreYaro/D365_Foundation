<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcModelVisitorExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Visits a configuration model and creates export xml for it.
/// </summary>
class PcModelVisitorExport extends PCModelVisitor
{
    XmlWriter   writer, attributeTypeWriter, componentWriter, completeWriter, tableConstraintWriter;
    Set         encounteredAttributeTypes, encounteredComponents, encounteredTableConstraints;

    // map of xml writers, each component has a dedicated xml writer
    Map         componentWriters;

    RecId       currentAttributeTypeRecId, currentComponentRecId, currentTableConstraintDefintionRecId;

    PCStack     componentStack;

    private boolean isPriceModelSelectionCriteriaIncludedInImportExport;

    str         xml;
    #PCExportImport
    #PC

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentComponentWriter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current component XML writer.
    /// </summary>
    /// <returns>
    /// The current component XML writer.
    /// </returns>
    protected XmlWriter currentComponentWriter()
    {
        return componentWriters.lookup(componentStack.pull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNamesForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets field names for a <c>PCTemplateAttributeBinding</c> record.
    /// </summary>
    /// <param name="_fieldBinding">
    /// A <c>PCTemplateAttributeBinding</c> record.
    /// </param>
    /// <returns>
    /// A container of the field names.
    /// </returns>
    protected container getFieldNamesForTemplate(PCTemplateAttributeBinding _fieldBinding)
    {
        PCTemplate          template;
        PCTemplateAttribute templatefield;

        TableName tableName;
        FieldName fieldName;

        select firstonly ReferencedTableId from template
        join ReferencedFieldId from templatefield
        where   templatefield.Template  == template.RecId
        &&      templatefield.RecId     == _fieldBinding.TemplateAttribute;

        tableName = tableId2name(template.ReferencedTableId);
        fieldName = fieldId2name(template.ReferencedTableId, templatefield.ReferencedFieldId);

        return [tableName, fieldName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlForModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets XML for exporting a product configuration model.
    /// </summary>
    /// <returns>
    /// An XML formatted string.
    /// </returns>
    public str getXmlForModel()
    {
        completeWriter.writeStartElement(#Export);
        completeWriter.writeAttributeString(#Version, int2str(#CurrentVersion));
        completeWriter.writeRaw(this.writeXmlForAttributeTypes());
        completeWriter.writeRaw(this.writeXmlForTableConstraintDefinitions());
        completeWriter.writeRaw(this.writeXmlForComponents());
        completeWriter.writeRaw(this.writeXmlForModelDefinition());
        completeWriter.writeEndElement();
        completeWriter.close();

        return completeWriter.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlWriterForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>XmlWriter</c> instance of a specific table given a table ID.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <returns>
    /// An <c>XmlWriter</c> instance.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An unacceptable table ID is passed as parameter.
    /// </exception>
    protected XmlWriter getXmlWriterForTable(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(PCProductConfigurationModel) :
            case tableNum(PCProductConfigurationModelTranslation) :
            case tableNum(PCConfigurationControl) :
            case tableNum(PCComponentControl) :
            case tableNum(PCComponentControlSubComponent) :
            case tableNum(PCComponentAttributeGroup) :
            case tableNum(PCComponentAttributeGroupTranslation) :
            case tableNum(PCComponentAttributeGroupCategoryAttr) :
            case tableNum(PCPriceModel) :
            case tableNum(PCPriceModelSelectionCriteria) :
            case tableNum(PCClassPriceCalculation) :
            case tableNum(PCPriceElement) :
            case tableNum(PCPriceBasePrice) :
            case tableNum(PCPriceExpressionRule) :
            case tableNum(PCPriceExpressionValue) :

                return writer;

            case tableNum(PCClass) :
            case tableNum(EcoResCategoryTranslation) :
            case tableNum(PCConfigurationNomenclature) :
            case tableNum(PCComponentConfigurationNomenclature) :
            case tableNum(EcoResNomenclatureSegmentAttributeValue) :
            case tableNum(EcoResNomenclatureSegmentTextConstant) :
            case tableNum(EcoResNomenclatureSegmentNumberSequence) :
            case tableNum(EcoResAttribute) :
            case tableNum(EcoResAttributeTranslation) :
            case tableNum(EcoResAttributeDefaultValue) :
            case tableNum(PCSubComponent) :
            case tableNum(PCSubComponentControl):
            case tableNum(PCSubComponentTranslation) :
            case tableNum(EcoResComponentControl) :
            case tableNum(PCExpressionConstraint) :
            case tableNum(PCTemplateComponent) :
            case tableNum(PCTemplateConstant) :
            case tableNum(PCTemplateCategoryAttribute) :
            case tableNum(WrkCtrPCRouteOperationActivity) :
            case tableNum(PCTableConstraint) :
            case tableNum(PCComponentConstraint):
            case tableNum(PCCalculation):
            case tableNum(PCTableConstraintColumnCategoryAttribute) :

                return componentWriters.lookup(componentStack.pull());

            case tableNum(EcoResAttributeType) :
            case tableNum(EcoResEnumerationAttributeTypeValue) :
            case tableNum(EcoResTextValue) :
            case tableNum(EcoResIntValue) :
            case tableNum(EcoResTextValueTranslation) :
            case tableNum(EcoResBoundedAttributeTypeValue) :

                return attributeTypeWriter;

            case tableNum(PCGlobalTableConstraintDefinition) :
            case tableNum(PCDatabaseRelationConstraintDefinition) :
            case tableNum(PCTableConstraintDatabaseColumnDef) :
            case tableNum(PCTableConstraintGlobalColumnDef) :
            case tableNum(PCTableConstraintRow) :
            case tableNum(PCTableConstraintCell) :

                return tableConstraintWriter;

            default :
                return this.getXmlWriterForTableDefault(_tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlWriterForTableDefault</Name>
				<Source><![CDATA[
    [Replaceable]
    protected XmlWriter getXmlWriterForTableDefault(TableId _tableId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        isPriceModelSelectionCriteriaIncludedInImportExport = PCPriceModelSelectionCriteria::isImportExportEnabled();;

        writer                      = PCRuntimeLibrary::createXmlWriter();
        attributeTypeWriter         = PCRuntimeLibrary::createXmlWriter();
        componentWriter             = PCRuntimeLibrary::createXmlWriter();
        tableConstraintWriter       = PCRuntimeLibrary::createXmlWriter();
        completeWriter              = PCRuntimeLibrary::createXmlWriter();

        encounteredAttributeTypes   = new Set(Types::Int64);
        encounteredComponents       = new Set(Types::Int64);
        encounteredTableConstraints = new Set(Types::Int64);

        componentWriters            = new Map(Types::Int64, Types::Class);
        componentStack              = PCStack::construct();
        currentComponentRecId       = 0;

        attributeTypeWriter.writeStartElement(#AttributeTypes);
        tableConstraintWriter.writeStartElement(#TableConstraintDefinitions);
        componentWriter.writeStartElement(#Components);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttribute</Name>
				<Source><![CDATA[
    protected void visitAttribute(EcoResAttribute _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttribute, Name)), _record.Name);
            this.writeFieldValue(_record, #solverName, PCSolverVariable::findByAttribute(_record.RecId).Name);
            this.writeFieldValue(_record, #attributeType, EcoResAttributeType::find(_record.AttributeType).Name);
            this.writeFieldValueInt(_record, fieldId2name(tableNum(PCSolverVariable), fieldNum(PCSolverVariable, IncludeInReuse)), PCSolverVariable::findByAttribute(_record.RecId).IncludeInReuse);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributeDefaultValue</Name>
				<Source><![CDATA[
    protected void visitAttributeDefaultValue(EcoResAttributeDefaultValue _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, #DefaultValue, EcoResTextValue::find(_record.Value).TextValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributeModifier</Name>
				<Source><![CDATA[
    protected void visitAttributeModifier(EcoResComponentControl _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResComponentControl, Modifier)), _record.Modifier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an attribute path and writes it as XML.
    /// </summary>
    /// <param name="_pathEnumerator">
    /// An enumerator value of the path.
    /// </param>
    /// <remarks>
    /// The path should be a list of <c>PCSubComponent</c> records followed by a
    /// <c>EcoResCategoryAttribute</c> record.
    /// </remarks>
    protected void visitAttributePath(ListEnumerator _pathEnumerator)
    {
        XmlWriter currentWriter;
        Common common = _pathEnumerator.current();
        PCSubComponent subComponent;
        EcoResCategoryAttribute categoryAttribute;

        if (common.RecId)
        {
            currentWriter = this.getXmlWriterForTable(tableNum(PCTableConstraintColumnCategoryAttribute));
            if (common is PCSubComponent)
            {
                //write subcomponent name
                subComponent = common as PCSubComponent;
                currentWriter.writeStartElement(#SubComponent);
                currentWriter.writeAttributeString(fieldId2name(tableNum(PCSubComponent), fieldNum(PCSubComponent, Name)), subComponent.Name);
                // Call recursively for the rest of the path
                if (_pathEnumerator.moveNext())
                {
                    this.visitAttributePath(_pathEnumerator);
                }
                currentWriter.writeEndElement();
            }
            else if  (common is EcoResCategoryAttribute)
            {
                //write attribute name
                categoryAttribute = common as EcoResCategoryAttribute;
                currentWriter.writeStartElement(#Attribute);
                currentWriter.writeAttributeString(fieldId2name(tableNum(EcoResAttribute), fieldNum(EcoResAttribute, Name)), categoryAttribute.getAttributeName());
                currentWriter.writeEndElement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributeTranslation</Name>
				<Source><![CDATA[
    protected void visitAttributeTranslation(EcoResAttributeTranslation _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeTranslation, FriendlyName)), _record.FriendlyName);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeTranslation, Description)), _record.Description);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeTranslation, Language)), _record.Language);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributeType</Name>
				<Source><![CDATA[
    protected void visitAttributeType(EcoResAttributeType _record)
    {
        currentAttributeTypeRecId = _record.RecId;

        // check if xml has already been added for the attribute type
        if ( !encounteredAttributeTypes.in(_record.RecId) )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeType, Name)), _record.Name);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeType, DataType)), _record.DataType);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResAttributeType, IsEnumeration)), _record.IsEnumeration);
            this.writeFieldValueInt(_record, #HasBounds, _record.hasBounds());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write XML for a calculation.
    /// </summary>
    /// <param name="_record">
    /// The calculation.
    /// </param>
    protected void visitCalculation(PCCalculation _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCCalculation, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCCalculation, Description)), _record.Description);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCCalculation, TargetAttribute)), _record.TargetAttribute);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCCalculation, Expression)), _record.Expression);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitCategoryTranslation</Name>
				<Source><![CDATA[
    protected void visitCategoryTranslation(EcoResCategoryTranslation _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResCategoryTranslation, FriendlyName)), _record.FriendlyName);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResCategoryTranslation, Description)), _record.Description);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResCategoryTranslation, LanguageId)), _record.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitClass</Name>
				<Source><![CDATA[
    protected void visitClass(PCClass _record)
    {
        XmlWriter xmlWriter;

        currentComponentRecId = _record.RecId;

        // add the component to the stack
        componentStack.push(_record.RecId);

        if ( this.writeComponent() )
        {
            // add a new writer for the component
            xmlWriter = PCRuntimeLibrary::createXmlWriter();
            componentWriters.insert(_record.RecId, xmlWriter);

            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCClass, Name)), _record.Name);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCClass, ReuseEnabled)), _record.ReuseEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitClassPriceCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a price component.
    /// </summary>
    /// <param name="_record">
    /// A price component.
    /// </param>
    protected void visitClassPriceCalculation(PCClassPriceCalculation _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, #Component, PCClass::find(_record.ComponentClass).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentAttributeGroup</Name>
				<Source><![CDATA[
    protected void visitComponentAttributeGroup(PCComponentAttributeGroup _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCComponentAttributeGroup, uiOrder)), _record.uiOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentAttributeGroupCategoryAttr</Name>
				<Source><![CDATA[
    protected void visitComponentAttributeGroupCategoryAttr(PCComponentAttributeGroupCategoryAttr _record)
    {
        EcoResCategoryAttribute categoryAttribute = EcoResCategoryAttribute::find(_record.CategoryAttribute);

        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentAttributeGroupCategoryAttr, CategoryAttribute)), categoryAttribute.getAttributeName());
        this.writeFieldValue(_record, #Component, PCClass::find(categoryAttribute.Category).Name);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCComponentAttributeGroupCategoryAttr, UIOrder)), _record.UIOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentAttributeGroupTranslation</Name>
				<Source><![CDATA[
    protected void visitComponentAttributeGroupTranslation(PCComponentAttributeGroupTranslation _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentAttributeGroupTranslation, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentAttributeGroupTranslation, Language)), _record.Language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentConstraint</Name>
				<Source><![CDATA[
    protected void visitComponentConstraint(PCComponentConstraint _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentConstraint, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentConstraint, Description)), _record.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentControl</Name>
				<Source><![CDATA[
    protected void visitComponentControl(PCComponentControl _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCComponentControl, UIOrder)), _record.UIOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentControlSubComponent</Name>
				<Source><![CDATA[
    protected void visitComponentControlSubComponent(PCComponentControlSubComponent _record)
    {
        PCSubComponent subComponent = PCSubComponent::find(_record.SubComponent);

        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCComponentControlSubComponent, SubComponent)), subComponent.Name);
        // exporting the name of the component as this is required to identify the sub component during import
        this.writeFieldValue(_record, #Component, PCClass::find(subComponent.ParentComponentClass).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitConfigurationControl</Name>
				<Source><![CDATA[
    protected void visitConfigurationControl(PCConfigurationControl _record)
    {
        this.writeTable(_record.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes visiting the element.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An unrecognized table is passed as a parameter.
    /// </exception>
    public void visitEnd(Common _record)
    {
        boolean   writeEndElement = false;

        XmlWriter tmpWriter;

        super(_record);

        if (_record is PCProductConfigurationModel
            || _record is PCProductConfigurationModelTranslation
            || _record is PCConfigurationControl
            || _record is PCComponentControl
            || _record is PCComponentControlSubComponent
            || _record is PCComponentAttributeGroup
            || _record is PCComponentAttributeGroupTranslation
            || _record is PCComponentAttributeGroupCategoryAttr
            || _record is PCPriceModel
            || _record is PCPriceModelSelectionCriteria
            || _record is PCClassPriceCalculation
            || _record is PCPriceElement
            || _record is PCPriceExpressionRule
            || _record is PCPriceExpressionValue)
        {
            writeEndElement = true;
        }

        else if (_record is PCClass)
        {
            writeEndElement = this.writeComponent();

            if ( writeEndElement )
            {
                encounteredComponents.add(_record.RecId);

                // write end element before popping the components rec ID of the stack
                tmpWriter = this.getXmlWriterForTable(_record.TableId);

                tmpWriter.writeEndElement();
                tmpWriter.close();

                // finish writing the component by adding its xml to the components section xml-writer
                componentWriter.writeRaw(tmpWriter.writeToString());
            }

            // remove the component from the stack
            componentStack.pop();

            // get the rec ID of the parent component from the stack
            currentComponentRecId = componentStack.pull();
        }

        else if (_record is EcoResCategoryTranslation
               || _record is PCConfigurationNomenclature
               || _record is PCComponentConfigurationNomenclature
               || _record is EcoResNomenclatureSegmentAttributeValue
               || _record is EcoResNomenclatureSegmentTextConstant
               || _record is EcoResNomenclatureSegmentNumberSequence
               || _record is EcoResAttribute
               || _record is EcoResAttributeTranslation
               || _record is EcoResAttributeDefaultValue
               || _record is PCSubComponent
               || _record is PCSubComponentControl
               || _record is PCSubComponentTranslation
               || _record is EcoResComponentControl
               || _record is PCExpressionConstraint
               || _record is PCTemplateComponent
               || _record is PCTemplateConstant
               || _record is PCTemplateCategoryAttribute
               || _record is WrkCtrPCRouteOperationActivity
               || _record is PCTableConstraint
               || _record is PCComponentConstraint
               || _record is PCCalculation
               || _record is PCTableConstraintColumnCategoryAttribute)
        {
            writeEndElement = this.writeComponent();
        }
        else if (_record is EcoResAttributeType)
        {
            writeEndElement = this.writeAttributeType();

            if ( writeEndElement )
            {
                encounteredAttributeTypes.add(_record.RecId);
                // reset
                currentAttributeTypeRecId = 0;
            }
        }
        else if (_record is EcoResEnumerationAttributeTypeValue
           || _record is EcoResTextValueTranslation
           || _record is EcoResBoundedAttributeTypeValue)
        {
            writeEndElement = this.writeAttributeType();
        }
        else  if (_record is EcoResTextValue || _record is EcoResIntValue)
        {
            // Written as an attribute for EcoResEnumerationAttributeTypeValue.
        }
        else if (_record is PCGlobalTableConstraintDefinition
           || _record is PCDatabaseRelationConstraintDefinition)
        {
            writeEndElement = this.writeTableConstraintDefinition();

            if ( writeEndElement )
            {
                encounteredTableConstraints.add(_record.RecId);
                // reset
                currentTableConstraintDefintionRecId = 0;
            }
        }
        else if (_record is PCTableConstraintDatabaseColumnDef
           || _record is PCTableConstraintGlobalColumnDef
           || _record is PCTableConstraintRow
           || _record is PCTableConstraintCell)
        {
            writeEndElement = this.writeTableConstraintDefinition();
        }
        else
        {
            writeEndElement = this.writeEndElementDefault(_record);
        }

        if (writeEndElement && (_record.TableId != tableNum(PCClass)))
        {
            this.getXmlWriterForTable(_record.TableId).writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndElementDefault</Name>
				<Source><![CDATA[
    [Replaceable]
    protected boolean writeEndElementDefault(Common _record)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnumerationTextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an <c>EcoResTextValue</c> record.
    /// </summary>
    /// <param name="_record">
    /// The <c>EcoResTextValue</c> to visit.
    /// </param>
    /// <remarks>
    /// The method outputs the text as an attribute of a tag already created in the
    /// <c>visitEnumerationValue</c> method.
    /// </remarks>
    protected void visitEnumerationTextValue(EcoResTextValue _record)
    {
        PCSolverTextValue   solverValue;

        // check if xml has already been added for the attribute type
        if ( this.writeAttributeType() )
        {
            // find the solver value
            // the value is fetched here to reduce the amount of code
            solverValue = PCSolverTextValue::findByTextValue(_record.RecId);

            // verify value has been found
            if (solverValue.RecId == 0)
            {
                throw error(strfmt("@SCM:SolverValueMissed", EcoResAttributeType::find(currentAttributeTypeRecId).Name, _record.TextValue));
            }

            this.writeFieldValue(_record, #EnumerationValue, _record.TextValue);
            this.writeFieldValue(_record, #SolverValue, solverValue.Value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnumerationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an <c>EcoResEnumerationAttributeTypeValue</c> record.
    /// </summary>
    /// <param name="_record">
    /// The <c>EcoResEnumerationAttributeTypeValue</c> to visit.
    /// </param>
    /// <remarks>
    /// The enumeration text is exported via the <c>visitEnumerationTextValue</c> method.
    /// </remarks>
    protected void visitEnumerationValue(EcoResEnumerationAttributeTypeValue _record)
    {
        // check if xml has already been added for the attribute type
        if ( this.writeAttributeType() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResEnumerationAttributeTypeValue, OrdinalNumber)), _record.OrdinalNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitEnumerationValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an <c>EcoResTextValueTranslation</c> record.
    /// </summary>
    /// <param name="_record">
    /// The <c>EcoResTextValueTranslation</c> to visit.
    /// </param>
    protected void visitEnumerationValueTranslation(EcoResTextValueTranslation _record)
    {
        // check if xml has already been added for the attribute type
        if ( this.writeAttributeType() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResTextValueTranslation, TextValue)), _record.TextValue);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResTextValueTranslation, Language)), _record.Language);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitExpressionConstraint</Name>
				<Source><![CDATA[
    protected void visitExpressionConstraint(PCExpressionConstraint _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCExpressionConstraint, Expression)), _record.Expression);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitIntegerBounds</Name>
				<Source><![CDATA[
    protected void visitIntegerBounds(EcoResBoundedAttributeTypeValue _record)
    {
        EcoResIntValue lowerBound = EcoResIntValue::find(_record.LowerBound);
        EcoResIntValue upperBound = EcoResIntValue::find(_record.UpperBound);

        // check if xml has already been added for the attribute type
        if ( this.writeAttributeType() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, #IntegerLowerBound, lowerBound.IntValue);
            this.writeFieldValueInt(_record, #IntegerUpperBound, upperBound.IntValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitPriceBasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a base price.
    /// </summary>
    /// <param name="_record">
    /// A base price.
    /// </param>
    protected void visitPriceBasePrice(PCPriceBasePrice _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceBasePrice, Name)), _record.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitPriceExpressionRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a price expression rule.
    /// </summary>
    /// <param name="_record">
    /// A price expression rule.
    /// </param>
    protected void visitPriceExpressionRule(PCPriceExpressionRule _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceExpressionRule, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceExpressionRule, Condition)), _record.Condition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitPriceExpressionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a price expression value.
    /// </summary>
    /// <param name="_record">
    /// A price expression value.
    /// </param>
    protected void visitPriceExpressionValue(PCPriceExpressionValue _record)
    {
        PCPriceModelCurrency priceModelCurrency;

        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceExpressionValue, PriceExpression)), _record.PriceExpression);

        select firstOnly Currency from priceModelCurrency
            where priceModelCurrency.RecId == _record.PriceModelCurrency;

        this.writeFieldValue(_record, #Currency, priceModelCurrency.Currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitPriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a price model.
    /// </summary>
    /// <param name="_record">
    /// A price model.
    /// </param>
    protected void visitPriceModel(PCPriceModel _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModel, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModel, Description)), _record.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitPriceModelSelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a price model criteria.
    /// </summary>
    /// <param name = "_record">The price model criteria.</param>
    protected void visitPriceModelSelectionCriteria(PCPriceModelSelectionCriteria _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, Description)), _record.Description);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, priceModel)), PCPriceModel::find(_record.priceModel).Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, OrderlineTypeSelectionCriteria)), PCOrderlineTypeSelectionCriteria::find(_record.OrderlineTypeSelectionCriteria).Name);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, SearchSequence)), _record.SearchSequence);
        this.writeFieldValueDate(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, ValidFromDate)), _record.ValidFromDate);
        this.writeFieldValueDate(_record, fieldId2name(_record.TableId, fieldNum(PCPriceModelSelectionCriteria, ValidToDate)), _record.ValidToDate);
        this.writeCriteriaQuery(this.getXmlWriterForTable(tableNum(PCPriceModelSelectionCriteria)), _record.packedQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitProductConfigurationModel</Name>
				<Source><![CDATA[
    protected void visitProductConfigurationModel(PCProductConfigurationModel _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModel, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModel, RootComponentClass)), PCClass::find(_record.RootComponentClass).Name);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModel, SolverStrategy)), _record.SolverStrategy);
        this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModel, Columns)), _record.Columns);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitProductConfigurationModelTrans</Name>
				<Source><![CDATA[
    protected void visitProductConfigurationModelTrans(PCProductConfigurationModelTranslation _record)
    {
        this.writeTable(_record.TableId);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModelTranslation, Name)), _record.Name);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModelTranslation, Description)), _record.Description);
        this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCProductConfigurationModelTranslation, Language)), _record.Language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRouteOperationActivity</Name>
				<Source><![CDATA[
    protected void visitRouteOperationActivity(WrkCtrPCRouteOperationActivity _record)
    {
        WrkCtrActivityRequirementSet    activityRequirementSet;
        WrkCtrActivityRequirement       activityRequirement;

        WrkCtrActivityCapabilityRequirement     activityCapabilityRequirement;
        WrkCtrActivityCertificateRequirement    activityCertificateRequirement;
        WrkCtrActivityCourseRequirement         activityCourseRequirement;
        WrkCtrActivityResourceRequirement       activityResourceRequirement;
        WrkCtrActivityResourceGroupRequirement  activityResourceGroupRequirement;
        WrkCtrActivitySkillRequirement          activitySkillRequirement;
        WrkCtrActivityResourceTypeRequirement   activityResourceTypeRequirement;
        WrkCtrActivityPersonTitleRequirement    activityPersonTitleRequirement;

        Common requirement;

        XmlWriter currentWriter;

        if ( this.writeComponent() )
        {
            currentWriter = this.currentComponentWriter();

            this.writeTable(_record.TableId);

            select firstOnly activityRequirementSet
            where activityRequirementSet.Activity == _record.Activity;

            this.writeFieldValue(_record, fieldid2name(activityRequirementSet.TableId, fieldnum(WrkCtrActivityRequirementSet, Description)), activityRequirementSet.Description);
            this.writeFieldValueInt(_record, fieldid2name(activityRequirementSet.TableId, fieldnum(WrkCtrActivityRequirementSet, Quantity)), activityRequirementSet.Quantity);
            this.writeFieldValueReal(_record, fieldid2name(activityRequirementSet.TableId, fieldnum(WrkCtrActivityRequirementSet, LoadPercent)), activityRequirementSet.LoadPercent);

            while select activityRequirement
            where activityRequirement.ActivityRequirementSet == activityRequirementSet.RecId
            {
                requirement = activityRequirement.subtype();

                currentWriter.writeStartElement(tableId2name(requirement.TableId));

                this.writeFieldValueInt(_record, fieldid2name(activityRequirement.TableId, fieldnum(WrkCtrActivityRequirement, UsedForJobScheduling)), activityRequirement.UsedForJobScheduling);
                this.writeFieldValueInt(_record, fieldid2name(activityRequirement.TableId, fieldnum(WrkCtrActivityRequirement, UsedForOperationScheduling)), activityRequirement.UsedForOperationScheduling);

                switch (activityRequirement.RelationshipType)
                {
                    case WrkCtrActivityRequirementType::Capability:
                        activityCapabilityRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityCapabilityRequirement.TableId, fieldnum(WrkCtrActivityCapabilityRequirement, Capability)), WrkCtrCapability::find(activityCapabilityRequirement.Capability).Name);
                        break;
                    case WrkCtrActivityRequirementType::Certificate:
                        activityCertificateRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityCertificateRequirement.TableId, fieldnum(WrkCtrActivityCertificateRequirement, CertificateType)), HcmCertificateType::find(activityCertificateRequirement.CertificateType).CertificateTypeId);
                        break;
                    case WrkCtrActivityRequirementType::Course:
                        activityCourseRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityCourseRequirement.TableId, fieldnum(WrkCtrActivityCourseRequirement, HRMCourseId)), activityCourseRequirement.HRMCourseId);
                        break;
                    case WrkCtrActivityRequirementType::Resource:
                        activityResourceRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityResourceRequirement.TableId, fieldnum(WrkCtrActivityResourceRequirement, WrkCtrId)), activityResourceRequirement.WrkCtrId);
                        this.writeFieldValue(_record, fieldid2name(activityResourceRequirement.TableId, fieldnum(WrkCtrActivityResourceRequirement, ResourceDataAreaId)), activityResourceRequirement.ResourceDataAreaId);
                        break;
                    case WrkCtrActivityRequirementType::ResourceGroup:
                        activityResourceGroupRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityResourceGroupRequirement.TableId, fieldnum(WrkCtrActivityResourceGroupRequirement, ResourceGroup)), WrkCtrResourceGroup::find(activityResourceGroupRequirement.ResourceGroup).WrkCtrId);
                        break;
                    case WrkCtrActivityRequirementType::Skill:
                        activitySkillRequirement = requirement;
                        break;
                    case WrkCtrActivityRequirementType::ResourceType:
                        activityResourceTypeRequirement = requirement;
                        this.writeFieldValueInt(_record, fieldid2name(activityResourceTypeRequirement.TableId, fieldnum(WrkCtrActivityResourceTypeRequirement, ResourceType)), enum2int(activityResourceTypeRequirement.ResourceType));
                        break;
                    case WrkCtrActivityRequirementType::PersonTitle:
                        activityPersonTitleRequirement = requirement;
                        this.writeFieldValue(_record, fieldid2name(activityPersonTitleRequirement.TableId, fieldnum(WrkCtrActivityPersonTitleRequirement, Title)), HcmTitle::find(activityPersonTitleRequirement.Title).TitleId);
                        break;
                }

                currentWriter.writeEndElement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts visiting the element.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An unrecognized table is passed as parameter.
    /// </exception>
    public void visitStart(Common _record)
    {
        super(_record);

        if (_record is PCPriceModel)
        {
            this.visitPriceModel(_record);
        }
        else if (isPriceModelSelectionCriteriaIncludedInImportExport 
            &&_record is PCPriceModelSelectionCriteria)
        {
            this.visitPriceModelSelectionCriteria(_record);
        }
        else if (_record is PCClassPriceCalculation)
        {
            this.visitClassPriceCalculation(_record);
        }
        else if (_record is PCPriceBasePrice)
        {
            this.visitPriceBasePrice(_record as PCPriceBasePrice);
        }
        else if (_record is PCPriceExpressionRule)
        {
            this.visitPriceExpressionRule(_record as PCPriceExpressionRule);
        }
        else if (_record is PCPriceExpressionValue)
        {
            this.visitPriceExpressionValue(_record);
        }
        else if (_record is PCProductConfigurationModel)
        {
            this.visitProductConfigurationModel(_record);
        }
        else if (_record is PCProductConfigurationModelTranslation)
        {
            this.visitProductConfigurationModelTrans(_record);
        }
        else if (_record is PCClass)
        {
            this.visitClass(_record);
        }
        else if (_record is EcoResCategoryTranslation)
        {
            this.visitCategoryTranslation(_record);
        }
        else if (_record is EcoResAttribute)
        {
            this.visitAttribute(_record);
        }
        else if (_record is EcoResAttributeTranslation)
        {
            this.visitAttributeTranslation(_record);
        }
        else if (_record is EcoResAttributeDefaultValue)
        {
            this.visitAttributeDefaultValue(_record);
        }
        else if (_record is EcoResAttributeType)
        {
            this.visitAttributeType(_record);
        }
        else if (_record is EcoResEnumerationAttributeTypeValue)
        {
            this.visitEnumerationValue(_record);
        }
        else if (_record is EcoResTextValue)
        {
            this.visitEnumerationTextValue(_record);
        }
        else if (_record is EcoResIntValue)
        {
            this.visitIntegerSetIntValue(_record);
        }
        else if (_record is EcoResTextValueTranslation)
        {
            this.visitEnumerationValueTranslation(_record);
        }
        else if (_record is EcoResBoundedAttributeTypeValue)
        {
            this.visitIntegerBounds(_record);
        }
        else if (_record is PCSubComponent)
        {
            this.visitSubComponent(_record);
        }
        else if (_record is PCSubComponentControl)
        {
            this.visitSubComponentControl(_record);
        }
        else if (_record is PCSubComponentTranslation)
        {
            this.visitSubComponentTranslation(_record);
        }
        else if (_record is EcoResComponentControl)
        {
            this.visitAttributeModifier(_record);
        }
        else if (_record is PCExpressionConstraint)
        {
            this.visitExpressionConstraint(_record);
        }
        else if (_record is PCTemplateComponent)
        {
            this.visitTemplateComponent(_record);
        }
        else if (_record is WrkCtrPCRouteOperationActivity)
        {
            this.visitRouteOperationActivity(_record);
        }
        else if (_record is PCTemplateConstant)
        {
            this.visitTemplateConstant(_record);
        }
        else if (_record is PCTemplateCategoryAttribute)
        {
            this.visitTemplateCategoryAttribute(_record);
        }
        else if (_record is PCTableConstraint)
        {
            this.visitTableConstraint(_record);
        }
        else if (_record is PCComponentConstraint)
        {
            this.visitComponentConstraint(_record);
        }
        else if (_record is PCCalculation)
        {
            this.visitCalculation(_record);
        }
        else if (_record is PCGlobalTableConstraintDefinition)
        {
            this.visitTableConstraintUserDefined(_record);
        }
        else if (_record is PCDatabaseRelationConstraintDefinition)
        {
            this.visitTableConstraintSystemDefined(_record);
        }
        else if (_record is PCTableConstraintColumnCategoryAttribute)
        {
            this.visitTableConstraintBinding(_record);
        }
        else if (_record is PCTableConstraintDatabaseColumnDef)
        {
            this.visitTableConstraintColumnSystem(_record);
        }
        else if (_record is PCTableConstraintGlobalColumnDef)
        {
            this.visitTableConstraintColumnUser(_record);
        }
        else if (_record is PCTableConstraintRow)
        {
            this.visitTableConstraintRow(_record);
        }
        else if (_record is PCTableConstraintCell)
        {
            this.visitTableConstraintCell(_record);
        }
        else if (_record is PCConfigurationControl)
        {
            this.visitConfigurationControl(_record);
        }
        else if (_record is PCComponentControl)
        {
            this.visitComponentControl(_record);
        }
        else if (_record is PCComponentControlSubComponent)
        {
            this.visitComponentControlSubComponent(_record);
        }
        else if (_record is PCComponentAttributeGroup)
        {
            this.visitComponentAttributeGroup(_record);
        }
        else if (_record is PCComponentAttributeGroupTranslation)
        {
            this.visitComponentAttributeGroupTranslation(_record);
        }
        else if (_record is PCComponentAttributeGroupCategoryAttr)
        {
            this.visitComponentAttributeGroupCategoryAttr(_record);
        }
        else if (_record is PCConfigurationNomenclature)
        {
            this.visitConfigurationNomenclature(_record);
        }
        else if (_record is PCComponentConfigurationNomenclature)
        {
            this.visitComponentConfigurationNomenclature(_record);
        }
        else if (_record is EcoResNomenclatureSegmentAttributeValue)
        {
            this.visitNomenclatureSegmentAttributeValue(_record);
        }
        else if (_record is EcoResNomenclatureSegmentTextConstant)
        {
            this.visitNomenclatureSegmentTextConstant(_record);
        }
        else if (_record is EcoResNomenclatureSegmentNumberSequence)
        {
            this.visitNomenclatureSegmentNumberSequence(_record);
        }
        else
        {
            this.visitStartDefault(_record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitStartDefault</Name>
				<Source><![CDATA[
    [Replaceable]
    protected void visitStartDefault(Common _record)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitConfigurationNomenclature</Name>
				<Source><![CDATA[
    protected void visitConfigurationNomenclature(PCConfigurationNomenclature _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCConfigurationNomenclature, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCConfigurationNomenclature, Description)), _record.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponentConfigurationNomenclature</Name>
				<Source><![CDATA[
    protected void visitComponentConfigurationNomenclature(PCComponentConfigurationNomenclature _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCComponentConfigurationNomenclature, NomenclatureRole)), enum2int(_record.NomenclatureRole));
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCComponentConfigurationNomenclature, IsActive)), _record.IsActive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitNomenclatureSegmentAttributeValue</Name>
				<Source><![CDATA[
    protected void visitNomenclatureSegmentAttributeValue(EcoResNomenclatureSegmentAttributeValue _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentAttributeValue, SegmentNumber)), _record.SegmentNumber);

            if (PCImportExportNomenclatureSegmentAttributeNameFlight::instance().isEnabled())
            {
                this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentAttributeValue, AttributeSegmentType)), enum2int(_record.AttributeSegmentType));
            }

            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentAttributeValue, Attribute)), EcoResAttribute::find(_record.Attribute).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitNomenclatureSegmentTextConstant</Name>
				<Source><![CDATA[
    protected void visitNomenclatureSegmentTextConstant(EcoResNomenclatureSegmentTextConstant _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentTextConstant, SegmentNumber)), _record.SegmentNumber);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentTextConstant, Text)), _record.Text);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitNomenclatureSegmentNumberSequence</Name>
				<Source><![CDATA[
    protected void visitNomenclatureSegmentNumberSequence(EcoResNomenclatureSegmentNumberSequence _record)
    {
        if ( this.writeComponent() )
        {
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_record.NumberSequence);

            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentNumberSequence, SegmentNumber)), _record.SegmentNumber);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(EcoResNomenclatureSegmentNumberSequence, NumberSequence)), numberSequenceTable.NumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponent</Name>
				<Source><![CDATA[
    protected void visitSubComponent(PCSubComponent _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponent, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponent, SolverName)), _record.SolverName);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponent, Type)), _record.Type);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponent, ChildComponentClass)), PCClass::find(_record.ChildComponentClass).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits a <c>PCSubComponentControl</c> record.
    /// </summary>
    /// <param name="_record">
    /// A <c>PCSubComponentControl</c> record.
    /// </param>
    protected void visitSubComponentControl(PCSubComponentControl _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponentControl, Modifier)), _record.Modifier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentTranslation</Name>
				<Source><![CDATA[
    protected void visitSubComponentTranslation(PCSubComponentTranslation _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponentTranslation, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponentTranslation, Description)), _record.Description);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCSubComponentTranslation, Language)), _record.Language);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraint</Name>
				<Source><![CDATA[
    protected void visitTableConstraint(PCTableConstraint _record)
    {
        if (this.writeComponent())
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, tableStr(PCTableConstraintDefinition), PCTableConstraintDefinition::find(_record.TableConstraintDefintion).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintBinding</Name>
				<Source><![CDATA[
    protected void visitTableConstraintBinding(PCTableConstraintColumnCategoryAttribute _record)
    {
        ListEnumerator pathEnumerator;

        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, #TableConstraintColumn, PCTableConstraintColumnDefinition::find(_record.TableConstraintColumnDefinition).Name);
            pathEnumerator = PCAttributePathFacade::getPath(_record).getEnumerator();
            if (pathEnumerator.moveNext())
            {
                this.visitAttributePath(pathEnumerator);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintCell</Name>
				<Source><![CDATA[
    protected void visitTableConstraintCell(PCTableConstraintCell _record)
    {
        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCTableConstraintCell, Value)), EcoResValue::find(_record.Value).pcGetStringValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintColumnSystem</Name>
				<Source><![CDATA[
    protected void visitTableConstraintColumnSystem(PCTableConstraintDatabaseColumnDef _record)
    {
        PCDatabaseRelationConstraintDefinition tableConstraintDefinition = PCDatabaseRelationConstraintDefinition::find(_record.TableConstraintDefinition);

        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCTableConstraintDatabaseColumnDef, Name)), _record.Name);
            this.writeFieldValue(_record, #AttributeType, EcoResAttributeType::find(_record.AttributeType).Name);
            this.writeFieldValue(_record, #Field, fieldId2name(tableConstraintDefinition.ReferencedTableId, _record.ReferencedFieldId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintColumnUser</Name>
				<Source><![CDATA[
    protected void visitTableConstraintColumnUser(PCTableConstraintGlobalColumnDef _record)
    {
        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCTableConstraintDatabaseColumnDef, Name)), _record.Name);
            this.writeFieldValue(_record, #AttributeType, EcoResAttributeType::find(_record.AttributeType).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintRow</Name>
				<Source><![CDATA[
    protected void visitTableConstraintRow(PCTableConstraintRow _record)
    {
        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintSystemDefined</Name>
				<Source><![CDATA[
    protected void visitTableConstraintSystemDefined(PCDatabaseRelationConstraintDefinition _record)
    {
        currentTableConstraintDefintionRecId = _record.RecId;

        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCDatabaseRelationConstraintDefinition, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCDatabaseRelationConstraintDefinition, Description)), _record.Description);
            this.writeFieldValue(_record, #Table, tableId2name(_record.ReferencedTableId));
            this.writeQuery(this.getXmlWriterForTable(tableNum(PCDatabaseRelationConstraintDefinition)), _record.Query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTableConstraintUserDefined</Name>
				<Source><![CDATA[
    protected void visitTableConstraintUserDefined(PCGlobalTableConstraintDefinition _record)
    {
        currentTableConstraintDefintionRecId = _record.RecId;

        if ( this.writeTableConstraintDefinition() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCGlobalTableConstraintDefinition, Name)), _record.Name);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCGlobalTableConstraintDefinition, Description)), _record.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTemplateCategoryAttribute</Name>
				<Source><![CDATA[
    protected void visitTemplateCategoryAttribute(PCTemplateCategoryAttribute _record)
    {
        TableName tableName;
        FieldName fieldName;

        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);

            [tableName, fieldName]  = this.getFieldNamesForTemplate(_record);
            this.writeFieldValue(_record, #Table, tableName);
            this.writeFieldValue(_record, #Field, fieldName);
            this.writeFieldValue(_record, #Attribute, EcoResCategoryAttribute::find(_record.CategoryAttribute).getAttributeName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTemplateComponent</Name>
				<Source><![CDATA[
    protected void visitTemplateComponent(PCTemplateComponent _record)
    {
        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCTemplateComponent, Name)), _record.Name);
            this.writeFieldValueInt(_record, fieldId2name(_record.TableId, fieldNum(PCTemplateComponent, Requirement)), enum2int(_record.Requirement));
            this.writeFieldValue(_record, fieldId2name(_record.TableId, fieldNum(PCTemplateComponent, Description)), _record.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitIntegerSetIntValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an <c>EcoResTextValue</c> record.
    /// </summary>
    /// <param name="_record">
    /// The <c>EcoResTextValue</c> to visit.
    /// </param>
    /// <remarks>
    /// The method outputs the text as an attribute of a tag already created in the
    /// <c>visitEnumerationValue</c> method.
    /// </remarks>
    protected void visitIntegerSetIntValue(EcoResIntValue _record)
    {
        // check if xml has already been added for the attribute type
        if ( this.writeAttributeType() )
        {
            this.writeFieldValue(_record, #Value, int2str(_record.IntValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTemplateConstant</Name>
				<Source><![CDATA[
    protected void visitTemplateConstant(PCTemplateConstant _record)
    {
        TableName   tableName;
        FieldName   fieldName;
        EcoResValue value = EcoResValue::find(_record.ConstantValue);

        if ( this.writeComponent() )
        {
            this.writeTable(_record.TableId);

            [tableName, fieldName]  = this.getFieldNamesForTemplate(_record);
            this.writeFieldValue(_record, #Table, tableName);
            this.writeFieldValue(_record, #Field, fieldName);
            this.writeFieldValue(_record, #Value, value.pcGetStringValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAttributeType</Name>
				<Source><![CDATA[
    protected boolean writeAttributeType()
    {
        return !encounteredAttributeTypes.in(currentAttributeTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeComponent</Name>
				<Source><![CDATA[
    protected boolean writeComponent()
    {
        return !encounteredComponents.in(currentComponentRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFieldValue</Name>
				<Source><![CDATA[
    protected void writeFieldValue(Common _record, FieldName _fieldName, str _value)
    {
        this.getXmlWriterForTable(_record.TableId).writeAttributeString(_fieldName, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFieldValueInt</Name>
				<Source><![CDATA[
    protected void writeFieldValueInt(Common _record, FieldName _fieldName, int _value)
    {
        this.writeFieldValue(_record, _fieldName, int2str(_value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFieldValueReal</Name>
				<Source><![CDATA[
    protected void writeFieldValueReal(Common _record, FieldName _fieldName, real _value)
    {
        this.writeFieldValue(_record, _fieldName, num2str(_value, 1, 2, 1, 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFieldValueDate</Name>
				<Source><![CDATA[
    protected void writeFieldValueDate(Common _record, FieldName _fieldName, date _value)
    {
        const int DateSequence = 123;
        this.writeFieldValue(_record, _fieldName, date2Str(_value, DateSequence, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a query that is packed in a container.
    /// </summary>
    /// <param name="_xmlWriter">
    /// The <c>XmlWriter</c> in which to write.
    /// </param>
    /// <param name="_packedQuery">
    /// The packed query to export.
    /// </param>
    /// <remarks>
    /// The query is base64 encoded.
    /// </remarks>
    protected void writeQuery(XmlWriter _xmlWriter, container _packedQuery)
    {
        this.writeQueryField(_xmlWriter, _packedQuery, #Query);

    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCriteriaQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a selection criteria query that is packed in a container.
    /// </summary>
    /// <param name="_xmlWriter">
    /// The <c>XmlWriter</c> in which to write.
    /// </param>
    /// <param name="_packedQuery">
    /// The packed query to export.
    /// </param>
    /// <remarks>
    /// The query is base64 encoded.
    /// </remarks>
    protected void writeCriteriaQuery(XmlWriter _xmlWriter, container _packedQuery)
    {
        this.writeQueryField(_xmlWriter, _packedQuery, #CriteriaQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeQueryField</Name>
				<Source><![CDATA[
    private void writeQueryField(XmlWriter _xmlWriter, container _packedQuery, str _stringElement)
    {
        BinData binData;
        if (_packedQuery)
        {
            binData = new BinData();
            binData.setData(_packedQuery);

            _xmlWriter.writeStartElement(_stringElement);
            _xmlWriter.writeString(binData.base64Encode());
            _xmlWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTable</Name>
				<Source><![CDATA[
    protected void writeTable(TableId _tableId)
    {
        this.getXmlWriterForTable(_tableId).writeStartElement(tableId2name(_tableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTableConstraintDefinition</Name>
				<Source><![CDATA[
    protected boolean writeTableConstraintDefinition()
    {
        return !encounteredTableConstraints.in(currentTableConstraintDefintionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXmlForAttributeTypes</Name>
				<Source><![CDATA[
    protected str writeXmlForAttributeTypes()
    {
        attributeTypeWriter.writeEndElement();
        attributeTypeWriter.close();
        return attributeTypeWriter.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXmlForComponents</Name>
				<Source><![CDATA[
    protected str writeXmlForComponents()
    {
        componentWriter.writeEndElement();
        componentWriter.close();
        return componentWriter.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXmlForModelDefinition</Name>
				<Source><![CDATA[
    protected str writeXmlForModelDefinition()
    {
        writer.close();
        return writer.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXmlForTableConstraintDefinitions</Name>
				<Source><![CDATA[
    protected str writeXmlForTableConstraintDefinitions()
    {
        tableConstraintWriter.writeEndElement();
        tableConstraintWriter.close();
        return tableConstraintWriter.writeToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCModelVisitor construct()
    {
        return new PCModelVisitorExport();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>