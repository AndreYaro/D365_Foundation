<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCdxDataPackageSerializationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCdxDataPackageSerializationHelper</c> class is for writing data from AX table into data file.
/// IMPORTANT: records from each table must be written back-to-back.
/// Once a record from a new table is provided, the writer will not allow adding data from previously used tables (an exception will be thrown).
/// </summary>
class RetailCdxDataPackageSerializationHelper
{
    private RecId                       channelSchemaRecId;
    private RetailCdxDataPackageWriter  packageWriter;
    private RetailCdxDataFileWriter     fileWriter, fileRemovalWriter;
    private TableId                     currentTable, currentRemovalTable;
    private Set                         tablesAdded, tableRemovalsAdded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>RetailCdxDataPackageSerializationHelper</c> object for creating a serialized data package of table records.
    /// </summary>
    /// <param name = "_channelSchemaRecId">The ChannelSchemaTable RecId denoting the subjob mapping to use.</param>
    public void new (RecId _channelSchemaRecId)
    {
        RetailConnChannelSchema connChannelSchema;

        channelSchemaRecId  = _channelSchemaRecId;
        select firstonly RecId from connChannelSchema where connChannelSchema.recId == _channelSchemaRecId;

        // If there is no associated channel schema
        if (!connChannelSchema)
        {
            throw Global::error(strFmt("@Retail:ChannelSchemaWasNotFound", _channelSchemaRecId));
        }

        packageWriter       = new RetailCdxDataPackageWriter();
        packageWriter.beginSession();
        tablesAdded         = new Set(Types::Int64);
        tableRemovalsAdded  = new Set(Types::Int64);
        fileWriter          = null;
        fileRemovalWriter   = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified record to the data package.
    /// </summary>
    /// <param name = "recordCursor">The record to add to the data package.</param>
    public void writeRecord(Common recordCursor)
    {
        if (fileWriter && recordCursor.TableId != currentTable)
        {
            this.finishWritingCurrentTable();
        }

        if (!fileWriter)
        {
            currentTable = recordCursor.TableId;
            fileWriter = this.getChannelSpecificWriter(tableId2Name(recordCursor.TableId));
            tablesAdded.add(recordCursor.TableId);
        }

        fileWriter.writeRecord(recordCursor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRemovalRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified record to be removed to the data package.
    /// </summary>
    /// <param name = "_tableId">The table identifier.</param>
    /// <param name = "_recordId">The record to be removed.</param>
    public void writeRemovalRecord(TableId _tableId, RefRecId _recordId)
    {
        // Indicates a new removal record identifier with different table identifier is requested.
        // Close the current file, and create a new removal file.
        // It is okay if user writes e.g. TableId A, then TableId B, then back to TableId A.
        // In this case we'll create 3 files (TableId_A_guidX.csv, TableId_B_guidY.csv, TableId_A_guidZ.csv)
        if (fileRemovalWriter && _tableId != currentRemovalTable)
        {
            this.finishWritingCurrentTableRemoval();
        }

        if (!fileRemovalWriter)
        {
            // create the file removal instance if not instantiated.
            currentRemovalTable = _tableId;
            fileRemovalWriter = this.getChannelSpecificWriterRemoval(tableId2Name(_tableId));
            tableRemovalsAdded.add(_tableId);
        }

        fileRemovalWriter.writeRemovalRecord(_tableId, _recordId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBase64EncodedDataPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the current package writer session and returns the generated CDX data file in a base64 string.
    /// IMPORTANT: this must be called when done with this class.
    /// </summary>
    /// <returns>
    /// A base64 encoded CDX data package.
    /// </returns>
    public str getBase64EncodedDataPackage()
    {
        if (fileWriter)
        {
            this.finishWritingCurrentTable();
        }

        if (fileRemovalWriter)
        {
            this.finishWritingCurrentTableRemoval();
        }

        packageWriter.endSession();
        return packageWriter.getFileAsBase64String();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up any allocated resources in this class.
    /// IMPORTANT: this must be called when done with this class (it is best to call this in a finally block).
    /// </summary>
    public void cleanUp()
    {
        if (fileWriter)
        {
            this.cleanUpFileWriter();
        }

        if (fileRemovalWriter)
        {
            this.cleanUpFileWriterRemoval();
        }

        if (packageWriter)
        {
            packageWriter.cleanUp();
            packageWriter = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelSpecificWriter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures fileWriter to write to a specific table of the channel this instance was constructed for.
    /// </summary>
    /// <param name = "_sourceTableName">Source AX table name.</param>
    /// <returns>
    /// A file writer initialized to write the specified table's data in a format targeting the specified channel schema.
    /// </returns>
    private RetailCdxDataFileWriter getChannelSpecificWriter(TableName _sourceTableName)
    {
        #RetailCDX
        RetailConnSchedulerSubjobTable      subJobTable;
        RetailConnSchedulerSubjobFieldList  subJobFields;

        select firstonly AXTableName, ChannelTableName, subJobId from subJobTable
            where subJobTable.AxTableName == _sourceTableName && subJobTable.RetailConnChannelSchema == channelSchemaRecId;

        // If there is no associated channel schema
        if (!subJobTable)
        {
            throw Global::error(strFmt("@Retail:RemoteEntityCouldNotRetrieved", _sourceTableName));
        }

        Set extensionTableNames = this.getExtensionTables(subJobTable.subJobId);

        fileWriter = packageWriter.constructDataFileWriter(subJobTable.AXTableName, subJobTable.ChannelTableName, '', extensionTableNames);

        while select fromFieldName, toFieldName from subJobFields where subJobFields.subjobId == subJobTable.subJobId
        {
            fileWriter.addColumn(subJobFields.fromFieldName, subJobFields.toFieldName);
        }

        if (!RetailConnReplicationUtilities::isGlobalTable(_sourceTableName))
        {
            fileWriter.addColumn(#DataAreaIdAXSideName, #DataAreaIdChannelSideName);
        }

        return fileWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelSpecificWriterRemoval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures fileRemovalWriter to write to a specific table of the channel this instance was constructed for.
    /// </summary>
    /// <param name = "_sourceTableName">Source AX table name.</param>
    /// <returns>
    /// A file removal writer initialized to write specified record identifiers to be removed
    /// in a format targeting the specified channel schema.
    /// </returns>
    private RetailCdxDataFileWriter getChannelSpecificWriterRemoval(TableName _sourceTableName)
    {
        #RetailCDX
        RetailConnSchedulerSubjobTable      subJobTable;

        select firstonly AXTableName, ChannelTableName, subJobId from subJobTable
            where subJobTable.AxTableName == _sourceTableName && subJobTable.RetailConnChannelSchema == channelSchemaRecId;
        fileRemovalWriter = packageWriter.constructDataFileWriter(subJobTable.AXTableName, subJobTable.ChannelTableName);

        // On file removal we only need RECID column so we can harcode this column value.
        fileRemovalWriter.addColumn('RecId', 'RECID');

        return fileRemovalWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishWritingCurrentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the current table's data file to the package.
    /// Also cleans up any resources the current file writer is using and nulls out the reference.
    /// </summary>
    private void finishWritingCurrentTable()
    {
        packageWriter.addDataFile(fileWriter);
        this.cleanUpFileWriter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishWritingCurrentTableRemoval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the current file removal data file to the package.
    /// Also cleans up any resource the current file removal writer is using and nulls out the reference.
    /// </summary>
    private void finishWritingCurrentTableRemoval()
    {
        packageWriter.addRecordRemovalDataFile(fileRemovalWriter);
        this.cleanUpFileWriterRemoval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpFileWriterRemoval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up any resources the current file writer is using and nulls out the reference.
    /// </summary>
    private void cleanUpFileWriterRemoval()
    {
        fileRemovalWriter.cleanUp();
        fileRemovalWriter = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpFileWriter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up any resources the current file writer is using and nulls out the reference.
    /// IMPORTANT: this must be called when done with the current file writer.
    /// </summary>
    private void cleanUpFileWriter()
    {
        fileWriter.cleanUp();
        fileWriter = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets extension tables associated with a particular sub job.
    /// </summary>
    /// <param name = "_subJobId">The sub job identifier.</param>
    /// <returns>A set of extension tables.</returns>
    private Set getExtensionTables(RetailConnSubJobId _subJobId)
    {
        #RetailCDX
        RetailConnLocationDesignTable parentDesignTable;
        RetailConnLocationDesignTable extensionDesignTable;
        Set extensionTableNames = new Set(Types::String);

        RetailConnSchedulerSubjobTable subJob = RetailConnSchedulerSubjobTable::find(_subJobId);
            
        while select locationTableName from extensionDesignTable
            exists join parentDesignTable
            where parentDesignTable.locationTableName == subJob.ChannelTableName &&
                parentDesignTable.RetailConnChannelSchema == subJob.RetailConnChannelSchema &&
                extensionDesignTable.ParentTable == parentDesignTable.RecId
        {
            extensionTableNames.add(extensionDesignTable.locationTableName);
        }

        return extensionTableNames;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>