<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjComputeFundingLimitActualAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to compute an amount from the posted transactions base on the attributes
/// of a specified funding limit.
/// </summary>
internal final class ProjComputeFundingLimitActualAmount
{
    private ProjPostedTransTable projPostedTransTable;
    private ProjFundingLimit projFundingLimit;
    private NoYes skipClosedProjects = NoYes::Yes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipClosedProjects</Name>
				<Source><![CDATA[
    public NoYes parmSkipClosedProjects(NoYes _skipClosedProjects = skipClosedProjects)
    {
        skipClosedProjects = _skipClosedProjects;

        return skipClosedProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingLimitHasActiveProject</Name>
				<Source><![CDATA[
    private boolean fundingLimitHasActiveProject(ProjFundingLimit _fundingLimit)
    {
        boolean hasActiveProject = false;
        
        // Validate processing funding limits for all projects or only open project.
        //
        // For funding limits which don't specify a project, if any associated project to the
        // contract is no completed the limit will be processed
        if (_fundingLimit.ProjId != '')
        {
            ProjTable projTable = ProjTable::find(_fundingLimit.ProjId);
            if (projTable
                && projTable.Status != ProjStatus::Completed
                && projTable.Status != ProjStatus::Created)
            {
                hasActiveProject = true;
            }
        }
        else
        {
            ProjRecId projectRecId = (select firstonly RecId from projTable
                    where projTable.ProjInvoiceProjId == _fundingLimit.ContractId
                        && projTable.Status != ProjStatus::Completed
                        && projTable.Status != ProjStatus::Created).RecId;
            if (projectRecId != 0)
            {
                // Active projects found
                hasActiveProject = true;
            }
        }

        return hasActiveProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInContractCurrency</Name>
				<Source><![CDATA[
    private Amount getAmountInContractCurrency(AmountCur _transactionAmount, ProjTrans _projTrans, CurrencyCode _contractCurrencyId)
    {
        if (!_projTrans)
        {
            throw error("@SYS23264");
        }
        CurrencyCode transactionCurrencyId = _projTrans.currencyIdSales();

        // Function has been called with an illegal value
        if (transactionCurrencyId == '' || _contractCurrencyId == '')
        {
            throw error("@SYS23264");
        }

        Amount returnValue;
        // Do not convert if the currency codes are the same or the amount is  0.0
        if (transactionCurrencyId == _contractCurrencyId || _transactionAmount == 0.0)
        {
            returnValue = _transactionAmount;
        }
		else
        {
            // This method will use both Fixed Exchange Rate for the Contract or GL Exchange Rates.
            returnValue = ProjFundingEngine::curAmount2AmountOfContract(_projTrans.ProjId(), _transactionAmount, transactionCurrencyId, _projTrans.ledgerTransDate());
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAmountInCalculation</Name>
				<Source><![CDATA[
	private boolean includeAmountInCalculation(ProjTrans _projTrans, ProjTransType _transactionType)
    {
        boolean returnValue = true;

		// Test Line Property
		ProjLineProperty projLineProperty = ProjLineProperty::find(_projTrans.linePropertyId());
        if (!projLineProperty)
        {
			// Line property is required for transactions with the exception of OnAcc which does not call method
            returnValue = false;
		}
        if (returnValue && projLineProperty.ToBeInvoiced == NoYes::No) 
		{
			returnValue = false;
		}

		// Test funding source
        if (returnValue)
        {
			ProjFundingSource projFundingSource = ProjFundingSource::find(_projTrans.FundingSource());
			if (!projFundingSource)
			{
				returnValue = false;
			}

            if (returnValue && !projFundingSource.canIncludeForSpentCalculation())
			{
				returnValue = false;
			}
        }

		// Test Contract/Project
        if (returnValue)
        {
            ProjTable projTableLocal = ProjTable::find(_projTrans.ProjId());
            if (!projTableLocal)
            {
				// This should not happen unless there is data corruption.
				returnValue = false;
            }

            if (returnValue)
            {
                if (projTableLocal.ProjInvoiceProjId == '')
                {
                    returnValue = false;
                }
   
                if (returnValue && (projTableLocal.Type == ProjType::FixedPrice
                    || projTableLocal.Type == ProjType::Investment
                    || projTableLocal.Type == ProjType::Internal
                    || projTableLocal.Type == ProjType::None))
                {
                    returnValue = false;
                }
            }

            if (returnValue && !ProjInvoiceTable::isBillingRuleInvoiceable(projTableLocal.ProjId, _projTrans.categoryId(), _projTrans.psaContractLineNum(), _transactionType))
            {
                returnValue = false;
            }
        }
	 
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingLimit</Name>
				<Source><![CDATA[
    private ProjFundingLimit parmFundingLimit(ProjFundingLimit _projFundingLimit = projFundingLimit)
	{
        projFundingLimit = _projFundingLimit;

        return projFundingLimit;
	}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjComputeFundingLimitActualAmount construct(ProjFundingLimit _projFundingLimit)
    {
        ProjComputeFundingLimitActualAmount projComputeFundingLimitActualAmount = new ProjComputeFundingLimitActualAmount();
        projComputeFundingLimitActualAmount.parmFundingLimit(_projFundingLimit);

        return projComputeFundingLimitActualAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAndWhereClause</Name>
				<Source><![CDATA[
    private void addAndWhereClause(SysDaQueryObject _thisQuery, SysDaQueryExpression _whereClause)
    {
        if (_thisQuery.whereClause())
        {
            _thisQuery.whereClause(_thisQuery.whereClause().and(_whereClause));
        }
        else
        {
            _thisQuery.whereClause(_whereClause);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjPostedTransQuery</Name>
				<Source><![CDATA[
    private void buildProjPostedTransQuery(ProjFundingLimit _fundingLimit, SysDaQueryObject _projPostedTransTableQuery)
    {
		//
		// Add Activity Range
		//
		// Activities (WBS Tasks) are unique to a project. If specified there is no need to add the project ranges
		// 
		if (_fundingLimit.ActivityNumber != '')
		{
			this.addAndWhereClause(_projPostedTransTableQuery,
						new SysDaEqualsExpression(
							new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, ActivityNumber)),
							new SysDaValueExpression(_fundingLimit.ActivityNumber)));
		}
		else
        {
            // Filter by project
            if (_fundingLimit.ProjId)
            {
                this.addAndWhereClause(_projPostedTransTableQuery,
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, ProjId)),
                                new SysDaValueExpression(_fundingLimit.ProjId)));
            }
            else
            {
				// Include all projects associated to the contract
                ProjTable projTable;
                SysDaQueryObject projTableQuery = new SysDaQueryObject(projTable);
                this.addAndWhereClause(projTableQuery,
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(projTable, fieldStr(ProjTable, ProjInvoiceProjId)),
                                new SysDaValueExpression(_fundingLimit.ContractId)));

                _projPostedTransTableQuery.joinClause(SysDaJoinKind::InnerJoin, projTableQuery);
                this.addAndWhereClause(_projPostedTransTableQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, ProjId)),
                            new SysDaFieldExpression(projTable, fieldStr(ProjTable, ProjId))));

            }
        }

        // Add Category Group Id if no CategoryId exists
        if (_fundingLimit.CategoryGroupId != '' && _fundingLimit.CategoryId == '')
        {
            ProjCategory projCategory;
            SysDaQueryObject projCategoryQuery = new SysDaQueryObject(projCategory);
			this.addAndWhereClause(projCategoryQuery,
								new SysDaEqualsExpression(
									new SysDaFieldExpression(ProjCategory, fieldStr(ProjCategory, CategoryGroupId)),
									new SysDaValueExpression(_fundingLimit.CategoryGroupId)));

			// This test is needed when more than one join is at the same level. Without using .joined() query the first query will be corrupted.
            if ( _projPostedTransTableQuery.joinedQuery())
            {
				_projPostedTransTableQuery.joinedQuery().joinClause(SysDaJoinKind::InnerJoin, projCategoryQuery);
            }
			else
            {
                _projPostedTransTableQuery.joinClause(SysDaJoinKind::InnerJoin, projCategoryQuery);
            }

            this.addAndWhereClause(_projPostedTransTableQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, CategoryId)),
                        new SysDaFieldExpression(projCategory, fieldStr(ProjCategory, CategoryId))));

        }

        // Filter by category ID
        if (_fundingLimit.CategoryId != '')
        {
            this.addAndWhereClause(_projPostedTransTableQuery,
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, CategoryId)),
                    new SysDaValueExpression(_fundingLimit.CategoryId)));
        }

        // Filter by resource
        if (_fundingLimit.Resource)
        {
            this.addAndWhereClause(_projPostedTransTableQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, Resource)),
                        new SysDaValueExpression(_fundingLimit.Resource)));
        }

        // Filter by Item
        if (_fundingLimit.ItemId)
        {
            this.addAndWhereClause(_projPostedTransTableQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, ItemId)),
                        new SysDaValueExpression(_fundingLimit.ItemId)));
        }

	}

]]></Source>
			</Method>
			<Method>
				<Name>computeHourAmount</Name>
				<Source><![CDATA[
    private AmountCur computeHourAmount(ProjFundingLimit _projFundingLimit, CurrencyCode _contractCurrencyId)
    {
        ProjEmplTransSale projEmplTransSale;
        SysDaQueryObject projEmplTransSaleQuery = new SysDaQueryObject(ProjEmplTransSale);
        this.addAndWhereClause(projEmplTransSaleQuery,
                        new SysDaNotEqualsExpression(
                            new SysDaFieldExpression(ProjEmplTransSale, fieldStr(ProjEmplTransSale, TransStatus)),
							new SysDaValueExpression(ProjTransStatus::Adjusted)));

        if (_projFundingLimit.FundingSource)
        {
            this.addAndWhereClause(projEmplTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(ProjEmplTransSale, fieldStr(ProjEmplTransSale, FundingSource)),
                            new SysDaValueExpression(_projFundingLimit.FundingSource)));
        }

        SysDaQueryObject projPostTransTableJoin = new SysDaQueryObject(ProjPostedTransTable);
        projEmplTransSaleQuery.joinClause(SysDaJoinKind::InnerJoin, projPostTransTableJoin);
        this.addAndWhereClause(projEmplTransSaleQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(ProjEmplTransSale, fieldStr(ProjEmplTransSale, TransId)),
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, TransId))));
        this.buildProjPostedTransQuery(_projFundingLimit, projPostTransTableJoin);

        SysDaSearchObject searchObject = new SysDaSearchObject(projEmplTransSaleQuery);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        AmountCur totalAmount = 0.00;
        while (searchStatement.findNext(searchObject))
        {
			// Create a ProjTrans object from the query data
            ProjEmplTrans projEmplTrans = ProjEmplTrans::find(projEmplTransSale.TransId);
            ProjEmplTransSale projEmplTransSaleLocal = ProjEmplTransSale::findByTransIdFundingSourceId(projEmplTransSale.TransId, projEmplTransSale.FundingSource);
            ProjTrans projTrans = new ProjTransEmplTransSale(ProjEmplTrans, projEmplTransSaleLocal);
            if (!projTrans)
            {
				//Error creating the projTrans object
                throw error("@SYS23264");
            }

            if (this.includeAmountInCalculation(projTrans, ProjTransType::Hour))
            {
                //
                // Lock currency may not be enabled on the contract. Need to handle case whereas
                // the transactions sales currency may not be in contract currency. This call will
                // handle the case where the contract currency and transaction currency are the same.
                //
                totalAmount += this.getAmountInContractCurrency(projEmplTransSale.LineAmount, projTrans, _contractCurrencyId);
            }
		}

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeExpenseAmount</Name>
				<Source><![CDATA[
    private AmountCur computeExpenseAmount(ProjFundingLimit _projFundingLimit, CurrencyCode _contractCurrencyId)
    {
        ProjCostTransSale projCostTransSale;
        SysDaQueryObject projCostTransSaleQuery = new SysDaQueryObject(ProjCostTransSale);
        if (_projFundingLimit.FundingSource)
        {
            this.addAndWhereClause(projCostTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projCostTransSale, fieldStr(ProjCostTransSale, FundingSource)),
                            new SysDaValueExpression(_projFundingLimit.FundingSource)));
        }

        SysDaQueryObject projPostTransTableJoin = new SysDaQueryObject(ProjPostedTransTable);
        projCostTransSaleQuery.joinClause(SysDaJoinKind::InnerJoin, projPostTransTableJoin);
        this.addAndWhereClause(projCostTransSaleQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projCostTransSale, fieldStr(ProjCostTransSale, TransId)),
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, TransId))));
        this.buildProjPostedTransQuery(_projFundingLimit, projPostTransTableJoin);

        SysDaSearchObject searchObject = new SysDaSearchObject(projCostTransSaleQuery);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        AmountCur totalAmount = 0.00;
        while (searchStatement.findNext(searchObject))
        {
            // Create a ProjTrans object from the query data
            ProjCostTrans projCostTrans = ProjCostTrans::find(projCostTransSale.TransId);
            ProjCostTransSale projCostTransSaleLocal = ProjCostTransSale::findByTransIdFundingSourceId(projCostTransSale.TransId, projCostTransSale.FundingSource);
            ProjTrans projTrans = new ProjTransCostTransSale(ProjCostTrans, projCostTransSaleLocal);
            if (!projTrans)
            {
                //Error creating the projTrans object
                throw error("@SYS23264");
            }

            // Include amount in actual
            if (this.includeAmountInCalculation(projTrans, ProjTransType::Cost))
            {
                //
                // Lock currency may not be enabled on the contract. Need to handle case whereas
                // the transactions sales currency may not be in contract currency. This call will
                // handle the case where the contract currency and transaction currency are the same.
                //
                totalAmount += this.getAmountInContractCurrency(projCostTransSale.LineAmount, projTrans, _contractCurrencyId);
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeRevenueAmount</Name>
				<Source><![CDATA[
    private AmountCur computeRevenueAmount(ProjFundingLimit _projFundingLimit, CurrencyCode _contractCurrencyId)
    {
        ProjRevenueTransSale projRevenueTransSale;
        SysDaQueryObject projRevenueTransSaleQuery = new SysDaQueryObject(ProjRevenueTransSale);
        if (_projFundingLimit.FundingSource)
        {
            this.addAndWhereClause(projRevenueTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projRevenueTransSale, fieldStr(projRevenueTransSale, FundingSource)),
                            new SysDaValueExpression(_projFundingLimit.FundingSource)));
        }

        SysDaQueryObject projPostTransTableJoin = new SysDaQueryObject(ProjPostedTransTable);
        projRevenueTransSaleQuery.joinClause(SysDaJoinKind::InnerJoin, projPostTransTableJoin);
        this.addAndWhereClause(projRevenueTransSaleQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projRevenueTransSale, fieldStr(projRevenueTransSale, TransId)),
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, TransId))));
        this.buildProjPostedTransQuery(_projFundingLimit, projPostTransTableJoin);

        SysDaSearchObject searchObject = new SysDaSearchObject(projRevenueTransSaleQuery);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        AmountCur totalAmount = 0.00;
        while (searchStatement.findNext(searchObject))
        {
            // Create a ProjTrans object from the query data
            ProjRevenueTrans projRevenueTrans = ProjRevenueTrans::find(projRevenueTransSale.TransId);
            ProjRevenueTransSale projRevenueTransSaleLocal = ProjRevenueTransSale::findByTransIdFundingSourceId(projRevenueTransSale.TransId, projRevenueTransSale.FundingSource);
            ProjTrans projTrans = new ProjTransRevenueTransSale(ProjRevenueTrans, projRevenueTransSaleLocal);
            if (!projTrans)
            {
                //Error creating the projTrans object
                throw error("@SYS23264");
            }

            // Include amount in actual
            if (this.includeAmountInCalculation(projTrans, ProjTransType::Revenue))
            {
                //
                // Lock currency may not be enabled on the contract. Need to handle case whereas
                // the transactions sales currency may not be in contract currency. This call will
                // handle the case where the contract currency and transaction currency are the same.
                //
                totalAmount += this.getAmountInContractCurrency(projRevenueTransSale.LineAmount, projTrans, _contractCurrencyId);
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeItemAmount</Name>
				<Source><![CDATA[
    private AmountCur computeItemAmount(ProjFundingLimit _projFundingLimit, CurrencyCode _contractCurrencyId)
    {
        ProjItemTransSale projItemTransSale;
        SysDaQueryObject projItemTransSaleQuery = new SysDaQueryObject(ProjItemTransSale);
        if (_projFundingLimit.FundingSource)
        {
            this.addAndWhereClause(projItemTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projItemTransSale, fieldStr(ProjItemTransSale, FundingSource)),
                            new SysDaValueExpression(_projFundingLimit.FundingSource)));
        }

        SysDaQueryObject projPostTransTableJoin = new SysDaQueryObject(ProjPostedTransTable);
        projItemTransSaleQuery.joinClause(SysDaJoinKind::InnerJoin, projPostTransTableJoin);
        this.addAndWhereClause(projItemTransSaleQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projItemTransSale, fieldStr(ProjItemTransSale, ProjTransId)),
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, TransId))));
        this.buildProjPostedTransQuery(_projFundingLimit, projPostTransTableJoin);

        SysDaSearchObject searchObject = new SysDaSearchObject(projItemTransSaleQuery);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        AmountCur totalAmount = 0.00;
        while (searchStatement.findNext(searchObject))
        {
            // Create a ProjTrans object from the query data
            ProjItemTrans projItemTrans = ProjItemTrans::find(projItemTransSale.ProjTransId);
            ProjItemTransSale projItemTransSaleLocal = ProjItemTransSale::findByTransIdFundingSourceId(projItemTransSale.ProjTransId, projItemTransSale.FundingSource);
            ProjTrans projTrans = new ProjTransItemTransSale(ProjItemTrans, projItemTransSaleLocal);
            if (!projTrans)
            {
                //Error creating the projTrans object
                throw error("@SYS23264");
            }

            // Include amount in actual
            if (this.includeAmountInCalculation(projTrans, ProjTransType::Item))
            {
                //
                // Lock currency may not be enabled on the contract. Need to handle case whereas
                // the transactions sales currency may not be in contract currency. This call will
				// handle the case where the contract currency and transaction currency are the same.
                //
                totalAmount += this.getAmountInContractCurrency(projItemTransSale.LineAmount, projTrans, _contractCurrencyId);
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeOnAccAmount</Name>
				<Source><![CDATA[
    private AmountCur computeOnAccAmount(ProjFundingLimit _projFundingLimit, CurrencyCode _contractCurrencyId)
    {
        ProjOnAccTransSale projOnAccTransSale;
        SysDaQueryObject projOnAccTransSaleQuery = new SysDaQueryObject(projOnAccTransSale);
        this.addAndWhereClause(projOnAccTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projOnAccTransSale, fieldStr(projOnAccTransSale, TransStatus)),
            new SysDaValueExpression(ProjTransStatus::Invoiced)));

        if (_projFundingLimit.FundingSource)
        {
            this.addAndWhereClause(projOnAccTransSaleQuery,
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(projOnAccTransSale, fieldStr(projOnAccTransSale, FundingSource)),
                            new SysDaValueExpression(_projFundingLimit.FundingSource)));
        }

        SysDaQueryObject projPostTransTableJoin = new SysDaQueryObject(ProjPostedTransTable);
        projOnAccTransSaleQuery.joinClause(SysDaJoinKind::InnerJoin, projPostTransTableJoin);
        this.addAndWhereClause(projOnAccTransSaleQuery,
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(projOnAccTransSale, fieldStr(projOnAccTransSale, TransId)),
                        new SysDaFieldExpression(projPostedTransTable, fieldStr(ProjPostedTransTable, TransId))));
        this.buildProjPostedTransQuery(_projFundingLimit, projPostTransTableJoin);

        SysDaSearchObject searchObject = new SysDaSearchObject(projOnAccTransSaleQuery);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        AmountCur totalAmount = 0.00;
        while (searchStatement.findNext(searchObject))
        {
            // Create a ProjTrans object from the query data
            ProjOnAccTrans projOnAccTrans = ProjOnAccTrans::find(projOnAccTransSale.TransId);
            ProjOnAccTransSale projOnAccTransSaleLocal = ProjOnAccTransSale::findFirstByTransIdAndFundingSource(projOnAccTransSale.TransId, projOnAccTransSale.FundingSource);
            ProjTrans projTrans = new ProjTransOnAccTransSale(ProjOnAccTrans, projOnAccTransSaleLocal);
            if (!projTrans)
            {
                //Error creating the projTrans object
                throw error("@SYS23264");
            }

            // Include amount in actual evaluation
			// Filter out Cash Advances (Prepayment and Deduction records)
            if (ProjTrans.psaIsOnAccount() == NoYes::No)
            {
                //
                // Lock currency may not be enabled on the contract. Need to handle case whereas
                // the transactions sales currency may not be in contract currency. This call will
                // handle the case where the contract currency and transaction currency are the same.
                //
                totalAmount += this.getAmountInContractCurrency(projOnAccTransSale.Amount, projTrans, _contractCurrencyId);
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public AmountCur run()
    {
        boolean processFundingLimit = true;
        AmountCur totalAmountSpent = 0.00;

        ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjComputeFundingLimitActualAmount));
        using (var activityContext = logger.projOpsFinActivity().projComputeFundingLimitActualContext())
        {
            // If the funding source is not invoiceable, the spent amount will not be updated by actuals
            if (projFundingLimit.FundingSource)
            {
				// This should not happen through the UI, but is not checked at the database level
				ProjFundingSource projFundingSource = ProjFundingSource::find(projFundingLimit.FundingSource);
                if (!projFundingSource.canIncludeForSpentCalculation())
				{
					processFundingLimit = false;
				}
            }

            //
            // Add short circuit for investment, internal, ProjOp integrated
            // These are validated at the UI and validatWrite, but validate in the database.
            //
            if (processFundingLimit && projFundingLimit.ProjId != '')
            {
                ProjTable projTable = ProjTable::find(projFundingLimit.ProjId);
                if (projTable.Type == ProjType::Investment
                    || projTable.Type == ProjType::Internal
                    || projTable.Type == ProjType::None)
                {
                    processFundingLimit = false;
                }
            }

            // Validate processing funding limits for all projects or only open project.
            //
            // For funding limits which don't specify a project, if any associated project to the
            // contract is not completed the limit will be processed. The funding limit has active projects method
            // call handles both scenarios
            if (skipClosedProjects == NoYes::Yes
                && this.fundingLimitHasActiveProject(projFundingLimit) == false)
            {
                processFundingLimit = false;
            }

            if (processFundingLimit)
            {
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projFundingLimit.ContractId);

                //
                // Compute Actuals
                //
                // Category Group and Category Id are linked to a transaction type, when specified use this information to save computation time.
                // Item Id is onlv valid for item calculations, use Item Id = '' to save computation time when item is specified.
                //
                if ((projFundingLimit.ValidFor == ProjAllTrxType::All || projFundingLimit.ValidFor == ProjAllTrxType::Hours)
                    && projFundingLimit.ItemId == ''
                    && this.isCategoryIdOfTransType(projFundingLimit.CategoryId, ProjAllTrxType::Hours)
                    && this.isCategoryGroupIdOfTransType(projFundingLimit.CategoryGroupId, ProjAllTrxType::Hours))
                {
                    totalAmountSpent += this.computeHourAmount(projFundingLimit, projInvoiceTable.CurrencyId);
                }

                if ((projFundingLimit.ValidFor == ProjAllTrxType::All || projFundingLimit.ValidFor == ProjAllTrxType::Expenses)
                    && projFundingLimit.ItemId == ''
                    && this.isCategoryIdOfTransType(projFundingLimit.CategoryId, ProjAllTrxType::Expenses)
                    && this.isCategoryGroupIdOfTransType(projFundingLimit.CategoryGroupId, ProjAllTrxType::Expenses))
                {
                    totalAmountSpent += this.computeExpenseAmount(projFundingLimit, projInvoiceTable.CurrencyId);
                }

                if ((projFundingLimit.ValidFor == ProjAllTrxType::All || projFundingLimit.ValidFor == ProjAllTrxType::Fees)
                    && projFundingLimit.ItemId == ''
                    && this.isCategoryIdOfTransType(projFundingLimit.CategoryId, ProjAllTrxType::Fees)
                    && this.isCategoryGroupIdOfTransType(projFundingLimit.CategoryGroupId, ProjAllTrxType::Fees))
                {
                    totalAmountSpent += this.computeRevenueAmount(projFundingLimit, projInvoiceTable.CurrencyId);
                }

                if ((projFundingLimit.ValidFor == ProjAllTrxType::All || projFundingLimit.ValidFor == ProjAllTrxType::Items)
                    && this.isCategoryIdOfTransType(projFundingLimit.CategoryId, ProjAllTrxType::Items)
                    && this.isCategoryGroupIdOfTransType(projFundingLimit.CategoryGroupId, ProjAllTrxType::Items))
                {
                    totalAmountSpent += this.computeItemAmount(projFundingLimit, projInvoiceTable.CurrencyId);
                }

                // No need to validate category or category group as they cannot be specified on an On-Account Transaction
                if (projFundingLimit.ValidFor == ProjAllTrxType::All || projFundingLimit.ValidFor == ProjAllTrxType::Revenues)
                {
                    totalAmountSpent += this.computeOnAccAmount(projFundingLimit, projInvoiceTable.CurrencyId);
                }
            }

            logger.logInformation(strFmt('Contract Id: %1, Funding limit: %2, Limit allocated: %3, Computed amount: %4',
				projFundingLimit.ContractId, 
				projFundingLimit.RecId,
                projFundingLimit.LimitSpent,
                totalAmountSpent));
		}	

        // if we recalculated the amount it is returned otherwise the existing value is returned
        return (processFundingLimit ? totalAmountSpent : projFundingLimit.LimitSpent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryIdOfTransType</Name>
				<Source><![CDATA[
	private boolean isCategoryIdOfTransType(ProjCategoryId _categoryId, ProjAllTrxType _TransType)
    {
        boolean returnValue = true;

        if (_categoryId != '' && _TransType != ProjAllTrxType::All)
        {
            ProjCategory projCategory = ProjCategory::find(_categoryId);
            switch(_TransType)
            {
                case ProjAllTrxType::Hours :
                    if (projCategory.CategoryType != ProjCategoryType::Hour)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Expenses :
                    if (projCategory.CategoryType != ProjCategoryType::Cost)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Items :
                    if (projCategory.CategoryType != ProjCategoryType::Item)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Fees :
                    if (projCategory.CategoryType != ProjCategoryType::Revenue)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Revenues :
					// No action as category is not valid on an OnAccount transaction
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryGroupIdOfTransType</Name>
				<Source><![CDATA[
    private boolean isCategoryGroupIdOfTransType(ProjCategoryGroupId _categoryGroupId, ProjAllTrxType _TransType)
    {
        boolean returnValue = true;

        if (_categoryGroupId != '' && _TransType != ProjAllTrxType::All)
        {
            ProjCategoryGroup projCategoryGroup = ProjCategoryGroup::find(_categoryGroupId);
            switch(_TransType)
            {
                case ProjAllTrxType::Hours :
                    if (ProjCategoryGroup.CategoryType != ProjCategoryType::Hour)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Expenses :
                    if (ProjCategoryGroup.CategoryType != ProjCategoryType::Cost)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Items :
                    if (ProjCategoryGroup.CategoryType != ProjCategoryType::Item)
                    {
                        returnValue = false;
                    }
                    break;

                case ProjAllTrxType::Fees :
                    if (ProjCategoryGroup.CategoryType != ProjCategoryType::Revenue)
                    {
                        returnValue = false;
                    }
                    break;
 
                case ProjAllTrxType::Revenues :
					// No action as category is not valid on an OnAccount transaction
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>