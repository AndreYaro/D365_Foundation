<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExportNumberController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCExportNumberController</c> class is the controller helper class for
///    <c>BankLCNumber</c> field of the <c>BankLCExport</c> table.
/// </summary>
public class BankLCExportNumberController extends BankLCNumberController
{
    BankLCExportStatus bankLCExportStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query for a lookup.
    /// </summary>
    /// <returns>
    ///    The new query.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query = new Query();

        if (this.parmReturnAsBankLC())
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLC));
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLCExport), tablenum(BankLC));
            queryBuildDataSource.joinMode(JoinMode::InnerJoin);
            queryBuildDataSource.relations(true);
        }
        else
        {
            queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tablenum(BankLCExport));
        }

        if (!isAllBankLCAllowed)
        {
            queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BankLCExport, ExportStatus));
            queryBuildRange.value(queryValue(bankLCExportStatus));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSysTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>SysTableLookup</c> class.
    /// </summary>
    /// <param name="_control">
    ///    The form control to use to perform the lookup.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>SysTableLookup</c> class.
    /// </returns>
    protected SysTableLookup createSysTableLookup(FormStringControl _control)
    {
        SysTableLookup sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tablenum(BankLCExport), _control);
        sysTableLookup.addLookupfield(fieldnum(BankLCExport, BankLCNumber), true);
        sysTableLookup.addLookupfield(fieldnum(BankLCExport, SalesTable));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJumpRefForms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reference jumper form.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of the letter of credit record to jump.
    /// </param>
    /// <returns>
    ///    The created form arguments.
    /// </returns>
    protected Args getJumpRefForms(BankLCRefRecId _bankLCRefRecId)
    {
        Args args;

        args = new Args(formstr(BankLCExport));

        args.menuItemName(menuItemDisplayStr(BankLCExport));

        if (_bankLCRefRecId != 0)
        {
            args.caller(this);
            args.record(BankLCExport::find(_bankLCRefRecId).getSalesTable());
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>TableId</c> value of the subtable of the <c>BankLC</c> table.
    /// </summary>
    /// <returns>
    ///    The table ID of the subtable.
    /// </returns>
    protected TableId getSubTable()
    {
        return tablenum(BankLCExport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankLCExportNumberController</c> class.
    /// </summary>
    /// <param name="_isReturnAsBankLC">
    ///    A Boolean value that indicates whether the lookup record should be returned as the super type of
    ///    the letter of credit.
    /// </param>
    /// <param name="_isAllBankLCAllowed">
    ///    A Boolean value that indicates whether to show all letter of credit records in the selection list.
    /// </param>
    protected void new(
        boolean _isReturnAsBankLC   = false,
        boolean _isAllBankLCAllowed = false)
    {
        super(_isReturnAsBankLC, _isAllBankLCAllowed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCExportStatus</Name>
				<Source><![CDATA[
    public BankLCExportStatus parmBankLCExportStatus(BankLCExportStatus _bankLCExportStatus = bankLCExportStatus)
    {
        bankLCExportStatus = _bankLCExportStatus;
        return bankLCExportStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the resolving reference.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    The form control to request the resolve reference.
    /// </param>
    /// <returns>
    ///    The selected record.
    /// </returns>
    public Common resolveReference(FormReferenceGroupControl _formReferenceControl)
    {
        Common ret;
        BankLCExport bankLCExportLocal;

        ret = super(_formReferenceControl);

        if (ret)
        {
            bankLCExportLocal = BankLCExport::find(ret.RecId);
            if (!this.parmAllBankLCAllowed())
            {
                if (bankLCExportLocal.ExportStatus != bankLCExportStatus)
                {
                    bankLCExportLocal.clear();
                    ret.clear();
                }
            }

            if (!this.parmReturnAsBankLC())
            {
                ret = bankLCExportLocal;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BankLCExportNumberController</c> class.
    /// </summary>
    /// <param name="_isReturnAsBankLC">
    ///    A Booolean value that indicates whether the lookup record should be returned as the super type of
    ///    the letter of credit.
    /// </param>
    /// <param name="_isAllBankLCAllowed">
    ///    A Boolean value that indicates whether to show all letter of credit records in the selection list.
    /// </param>
    /// <param name="_bankLCExportStatus">
    ///    The status of the letter of credit records to show in the selection list.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BankLCExportNumberController</c> class.
    /// </returns>
    public static BankLCExportNumberController construct(
        boolean             _isReturnAsBankLC   = false,
        boolean             _isAllBankLCAllowed = false,
        BankLCExportStatus  _bankLCExportStatus = BankLCExportStatusType::Issued)
    {
        BankLCExportNumberController bankLCExportNumberController;

        bankLCExportNumberController = new BankLCExportNumberController(_isReturnAsBankLC, _isAllBankLCAllowed);
        bankLCExportNumberController.parmBankLCExportStatus(_bankLCExportStatus);

        return bankLCExportNumberController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>