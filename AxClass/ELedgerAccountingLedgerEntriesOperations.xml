<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingLedgerEntriesOperations</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
/// <summary>
/// The <c>ELedgerAccountingLedgerEntriesOperations</c> class provides invoicing, payment and bank
/// transaction data used within the 'Polizas' nodes of the ledger entries report.
/// </summary>
public class ELedgerAccountingLedgerEntriesOperations
{
    #ELedgerAccStatement_MX

    EledgerAccountingLedgerEntriesView  ledgerEntriesView;

    ArrayList                           bankOperations;
    ArrayList                           domesticOperations;
    ArrayList                           domesticOperationsOther;
    ArrayList                           otherPaymentOperations;
    ArrayList                           transferOperations;
    ArrayList                           thirdPartyOperations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the ELedgerAccountingLedgerEntriesOperations class.
    /// </summary>
    /// <param name = "_ledgerEntriesView">A EledgerAccountingLedgerEntriesView buffer.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(EledgerAccountingLedgerEntriesView _ledgerEntriesView)
    {
        ledgerEntriesView = _ledgerEntriesView;

        bankOperations = new ArrayList();
        domesticOperations = new ArrayList();
        domesticOperationsOther = new ArrayList();
        otherPaymentOperations = new ArrayList();
        transferOperations = new ArrayList();
        thirdPartyOperations = new ArrayList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the lists of the operations related to the current subledger voucher detailed posting.
    /// </summary>
    /// <param name = "_ledgerEntriesView">The general journal account entry information.</param>
    /// <returns>The object containing the populated operations lists.</returns>
    public static ELedgerAccountingLedgerEntriesOperations processAllOperations(EledgerAccountingLedgerEntriesView _ledgerEntriesView)
    {
        ELedgerAccountingLedgerEntriesOperations ledgerEntriesOperations = new ELedgerAccountingLedgerEntriesOperations(_ledgerEntriesView);

        ledgerEntriesOperations.createOperations();

        return ledgerEntriesOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOperations</Name>
				<Source><![CDATA[
    private void createOperations()
    {
        switch (ledgerEntriesView.PostingType)
        {
            case LedgerPostingType::CustBalance:
                this.createCustTransactions();
                break;

            case LedgerPostingType::VendBalance:
                this.createVendTransactions();
                break;

            case LedgerPostingType::Bank:
                this.createBankTransactions();
                break;

            case LedgerPostingType::LedgerJournal:
                this.createBankOperations();

                if (bankOperations.Count == 0)
                {
                    this.createOtherPaymentTransaction();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTransactions</Name>
				<Source><![CDATA[
    private void createCustTransactions()
    {
        CustTrans                   custTrans, custTransOrig;
        CustTable                   custTable;
        CustSettlement              custSettlement;

        LedgerJournalTrans          ledgerJournalTrans;

        select firstonly CustTrans
            where custTrans.Voucher == ledgerEntriesView.SubledgerVoucher
               && custTrans.TransDate == ledgerEntriesView.AccountingDate
            join Rfc_MX,
                 CompanyType_MX
                 from custTable
                    where custTable.AccountNum == custTrans.AccountNum
            outer join RecId,
                       AccountType,
                       OffsetAccountType,
                       ReverseEntry
                 from ledgerJournalTrans
                    where ledgerJournalTrans.CustTransId == custTrans.RecId;

        if (custTrans.RecId)
        {
            if (!custTrans.Prepayment &&
                custTrans.isPayment() &&
                ledgerJournalTrans.isPaymentJournal_MX())
            {
                while select crossCompany custTransOrig
                        exists join custSettlement
                        where custSettlement.TransCompany == custTransOrig.dataAreaId
                           && custSettlement.TransRecId == custTransOrig.RecId
                           && custSettlement.OffsetRecid == custTrans.RecId
                {
                    this.createCustTransaction(custTable, custTransOrig);
                }
            }
            else
            {
                this.createCustTransaction(custTable, custTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTransaction</Name>
				<Source><![CDATA[
    private void createCustTransaction(CustTable _custTable, custTrans _custTrans)
    {
        EInvoiceJour_MX eInvoice = this.getEInvoice(_custTrans);

        if (eInvoice.cfdiuuid)
        {
            this.createDomesticOperation(_custTrans, eInvoice.cfdiuuid, _custTable.Rfc_MX);
        }

        else if (_custTrans.DocumentNum || _custTrans.Invoice)
        {
            this.createDomesticOperationOther(_custTrans, _custTable.rfc_MX, eInvoice.Series);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTransactions</Name>
				<Source><![CDATA[
    private void createVendTransactions()
    {
        VendTrans                   vendTrans, vendTransOrig;
        VendTable                   vendTable;

        VendInvoiceJour             vendInvoiceJour;
        VendSettlement              vendSettlement;

        LedgerJournalTrans          ledgerJournalTrans;

        select firstonly vendtrans
            where vendTrans.Voucher == ledgerEntriesView.SubledgerVoucher
               && vendTrans.TransDate == ledgerEntriesView.AccountingDate
            join Party,
                 RFC_MX,
                 CompanyType_MX,
                 ForeignTaxRegistration_MX
                 from vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            outer join RecId,
                       CFDIUUID_MX,
                       InvoiceSeries_MX
                       from vendinvoicejour
                where vendInvoiceJour.InvoiceId == vendTrans.Invoice
                   && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                   && vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
            outer join RecId,
                       CFDIUUID_MX,
                       InvoiceSeries_MX,
                       AccountType,
                       OffsetAccountType,
                       ReverseEntry
                       from ledgerJournalTrans
                where ledgerJournalTrans.VendTransId == vendTrans.RecId;

        if (vendTrans.RecId)
        {
            if (!vendTrans.Prepayment &&
                    !vendInvoiceJour &&
                    ledgerJournalTrans.isPaymentJournal_MX())
            {
                while select crossCompany vendTransOrig
                        join vendSettlement
                        where vendTransOrig.RecId == vendSettlement.TransRecId
                           && vendTransOrig.dataAreaId == vendSettlement.TransCompany
                           && vendSettlement.OffsetRecid == vendTrans.RecId
                        outer join RecId,
                                   CFDIUUID_MX
                                   from vendinvoicejour
                            where vendInvoiceJour.InvoiceId == vendTransOrig.Invoice
                               && vendInvoiceJour.InvoiceDate == vendTransOrig.TransDate
                               && vendInvoiceJour.LedgerVoucher == vendTransOrig.Voucher
                        outer join RecId,
                                   CFDIUUID_MX
                                   from ledgerJournalTrans
                            where ledgerJournalTrans.VendTransId == vendTransOrig.RecId
                {
                    this.createVendTransaction(vendTable, vendTransOrig, vendInvoiceJour, ledgerJournalTrans);
                }
            }
            else
            {
                this.createVendTransaction(vendTable, vendTrans, vendInvoiceJour, ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankTransactions</Name>
				<Source><![CDATA[
    private void createBankTransactions()
    {
        this.createBankOperations();

        if (bankOperations.Count == 0)
        {
            this.createTransferTransactions();

            if (transferOperations.Count == 0)
            {
                this.createOtherPaymentTransaction();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferTransactions</Name>
				<Source><![CDATA[
    private void createTransferTransactions()
    {
        this.createVendPaymentTransferTransaction();

        if (transferOperations.Count == 0)
        {
            this.createCustPaymentTransferTransaction();
        }

        if (transferOperations.Count == 0)
        {
            this.createBankTransferTransaction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankTransferTransaction</Name>
				<Source><![CDATA[
    private void createBankTransferTransaction()
    {
        BankAccountTrans    bankAccountTrans, offsetBankAccountTrans;
        BankAccountTable    bank, offsetBank;

        select RegistrationNum,
               AccountNum,
               Name,
               Location,
               BankGroupId
                    from bank
        join RegistrationNum,
             AccountNum,
             Name,
             RFC_MX,
             Location,
             BankGroupId
                    from offsetBank
            exists join bankAccountTrans
                    where bankAccountTrans.AccountId == bank.AccountID   &&
                          bankAccountTrans.Voucher   == ledgerEntriesView.SubledgerVoucher &&
                          bankAccountTrans.TransDate == ledgerEntriesView.AccountingDate &&
                          bankAccountTrans.AmountMST < 0
            exists join offsetBankAccountTrans
                    where offsetBankAccountTrans.AccountId == offsetBank.AccountID &&
                          offsetBankAccountTrans.Voucher   == ledgerEntriesView.SubledgerVoucher &&
                          offsetBankAccountTrans.TransDate == ledgerEntriesView.AccountingDate &&
                          offsetBankAccountTrans.AmountMST > 0;

        if (bank.AccountNum && offsetBank.AccountNum)
        {
            this.createBankTransferOperation(bank, offsetBank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankTransferOperation</Name>
				<Source><![CDATA[
    private void createBankTransferOperation(BankAccountTable           _bank,
                                             BankAccountTable           _offsetBank)
    {
        ELedgerAccountingLedgerEntriesTransTransferOperationTmp         transferOperationTmp;

        transferOperationTmp.BankAccount =  _bank.AccountNum;
        transferOperationTmp.DomesticName = _bank.RegistrationNum;

        if (!_bank.BankAccountMap::isDomestic())
        {
            transferOperationTmp.ThirdPartyName = _bank.Name;
        }

        transferOperationTmp.OffsetBankAccount = _offsetBank.AccountNum;
        transferOperationTmp.OffsetDomesticName = _offsetBank.RegistrationNum;

        if (!_offsetBank.BankAccountMap::isDomestic())
        {
            transferOperationTmp.OffsetThirdPartyName = _offsetBank.Name;
        }

        transferOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);
        transferOperationTmp.TransDate = ledgerEntriesView.AccountingDate;
        transferOperationTmp.VendName = _offsetBank.Name;
        transferOperationTmp.Rfc = _offsetBank.rfc_MX;

        if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
        {
            transferOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
            transferOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                                    ledgerEntriesView.TransactionCurrencyAmount,
                                                                    ledgerEntriesView.AccountingCurrencyAmount);
        }

        transferOperations.Add(transferOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOtherPaymentTransaction</Name>
				<Source><![CDATA[
    private void createOtherPaymentTransaction()
    {
        this.createOtherVendPaymentTransaction();

        if (otherPaymentOperations.Count == 0)
        {
            this.createOtherCustPaymentTransaction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOtherCustPaymentTransaction</Name>
				<Source><![CDATA[
    private void createOtherCustPaymentTransaction()
    {
        CustTrans custTrans;
        CustTable custTable;
        CustPaymModeTable custPaymModeTable;
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly Rfc_MX from custTable
            join PaymentType_MX from custPaymModeTable
                where custPaymModeTable.PaymentType_MX != PaymentType_MX::Check 
                    && custPaymModeTable.PaymentType_MX != PaymentType_MX::Transfer
            exists join custTrans
                where custTrans.AccountNum == custTable.AccountNum 
                    && custTrans.PaymMode == custPaymModeTable.PaymMode
                    && custTrans.Voucher == ledgerEntriesView.SubledgerVoucher
                    && custTrans.TransDate == ledgerEntriesView.AccountingDate
            exists join ledgerJournalTrans
                where ledgerJournalTrans.CustTransId == custTrans.RecId;

        if (custPaymModeTable.PaymentType_MX)
        {
            this.createOtherPaymentOperation(custPaymModeTable.PaymentType_MX,
                                             CompanyInfo::find().Name,
                                             custTable.Rfc_MX);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOtherVendPaymentTransaction</Name>
				<Source><![CDATA[
    private void createOtherVendPaymentTransaction()
    {
        VendTrans vendTrans;
        VendTable vendTable;
        VendPaymModeTable vendPaymModeTable;
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly CompanyType_MX, Party, Rfc_MX from vendTable
            join PaymentType_MX from vendPaymModeTable
                where vendPaymModeTable.PaymentType_MX != PaymentType_MX::Check
                    && vendPaymModeTable.PaymentType_MX != PaymentType_MX::Transfer
            exists join vendTrans
                where vendTrans.AccountNum == vendTable.AccountNum
                    && vendTrans.PaymMode == vendPaymModeTable.PaymMode
                    && vendTrans.Voucher == ledgerEntriesView.SubledgerVoucher
                    && vendTrans.TransDate == ledgerEntriesView.AccountingDate
            exists join ledgerJournalTrans
                where ledgerJournalTrans.VendTransId == vendTrans.RecId;

        if (vendPaymModeTable.PaymentType_MX)
        {
            this.createOtherPaymentOperation(vendPaymModeTable.PaymentType_MX,
                                             vendTable.Name(),
                                             vendTable.Rfc_MX);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOtherPaymentOperation</Name>
				<Source><![CDATA[
    private void createOtherPaymentOperation(PaymentType_MX                 _paymType,
                                             Name                           _name,
                                             RFC_MX                         _rfc)
    {
        ELedgerAccountingLedgerEntriesTransOtherPaymOperationTmp    otherPaymOperationTmp;

        if (_rfc)
        {
            otherPaymOperationTmp.PaymentType = num2str0(enum2int(_paymType), 2, 0, 1, 0);
            otherPaymOperationTmp.AccountingDate = ledgerEntriesView.AccountingDate;
            otherPaymOperationTmp.VendName = _name;
            otherPaymOperationTmp.Rfc = _rfc;
            otherPaymOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);

            if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
            {
                otherPaymOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
                otherPaymOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                                            ledgerEntriesView.TransactionCurrencyAmount,
                                                                            ledgerEntriesView.AccountingCurrencyAmount);
            }

            otherPaymentOperations.Add(otherPaymOperationTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustPaymentTransferTransaction</Name>
				<Source><![CDATA[
    private void createCustPaymentTransferTransaction()
    {
        Voucher offsetVoucher;
        TransDate offsetTransDate;

        GeneralJournalEntry bridgedEntry = this.getBridgedPosting();

        if (bridgedEntry.RecId)
        {
            offsetVoucher   = bridgedEntry.SubledgerVoucher;
            offsetTransDate = bridgedEntry.AccountingDate;
        }
        else
        {
            offsetVoucher   = ledgerEntriesView.SubledgerVoucher;
            offsetTransDate = ledgerEntriesView.AccountingDate;
        }

        BankAccountTrans bankAccountTrans;
        BankAccountTable offsetBank;
        CustTrans custTrans;
        CustTable custTable;
        CustBankAccount custBankAccount;

        select firstOnly AccountNum, RegistrationNum, Name, Location, BankGroupId from offsetBank
            join AccountNum, RegistrationNum, Name, Location, BankGroupId from custBankAccount
            join RFC_MX, Party, CompanyType_MX from custTable
                where custTable.AccountNum == custBankAccount.CustAccount
            exists join bankaccountTrans
                where bankaccounttrans.AccountId == offsetBank.AccountID
                    && bankaccounttrans.Voucher == ledgerEntriesView.SubledgerVoucher
                    && bankAccountTrans.TransDate == ledgerEntriesView.AccountingDate
            exists join custTrans
                where custTrans.ThirdPartyBankAccountId == custBankAccount.AccountID
                    && custTrans.Voucher == offsetVoucher
                    && custTrans.TransDate == offsetTransDate;

        if (offsetBank.AccountNum)
        {
            this.createCustPaymentTransferOperation(offsetBank,
                                                    custBankAccount,
                                                    custTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendPaymentTransferTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates vendor payment transfer.
    /// </summary>
    private void createVendPaymentTransferTransaction()
    {
        BankAccountTrans            bankAccountTrans;
        BankAccountTable            offsetBank;

        GeneralJournalEntry         bridgedEntry;
        LedgerJournalTrans          ledgerJournalTrans;
        VendPaymModeTable           vendPaymModeTable;
        VendTable                   vendTable;

        VendBankAccount             vendBankAccount;

        Voucher                     offsetVoucher;
        TransDate                   offsetTransDate;

        bridgedEntry = this.getBridgedPosting();

        if (bridgedEntry.RecId)
        {
            offsetVoucher   = bridgedEntry.SubledgerVoucher;
            offsetTransDate = bridgedEntry.AccountingDate;
        }
        else
        {
            offsetVoucher   = ledgerEntriesView.SubledgerVoucher;
            offsetTransDate = ledgerEntriesView.AccountingDate;
        }

        select AccountNum,
               RegistrationNum,
               Name,
               Location,
               BankGroupId
            from offsetBank
            join AccountNum,
                 RegistrationNum,
                 Name,
                 Location,
                 BankGroupId
                from vendBankAccount
                join RFC_MX,
                     Party,
                     CompanyType_MX
                    from vendTable
                    where vendTable.AccountNum == vendBankAccount.VendAccount
            exists join bankaccountTrans where bankaccounttrans.AccountId == offsetBank.AccountID
                                            && bankaccounttrans.Voucher == ledgerEntriesView.SubledgerVoucher
                                            && bankAccountTrans.TransDate == ledgerEntriesView.AccountingDate
            exists join ledgerjournaltrans
                    where (ledgerjournaltrans.CustVendBankAccountId == vendBankAccount.AccountID) &&
                           ledgerjournaltrans.Voucher == offsetVoucher &&
                           ledgerjournaltrans.TransDate == offsetTransDate &&
                           ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            notexists join vendpaymModeTable where vendPaymmodetable.PaymMode == ledgerjournaltrans.PaymMode && this.checkPaymentType(vendPaymModeTable);
                                                   

        if (offsetBank.AccountNum)
        {
            this.createVendPaymentTransferOperation(offsetBank,
                                                    vendBankAccount,
                                                    vendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for the payment type on <c>VendPaymmodetable</c>.
    /// </summary>
    /// <param name = "_vendPaymModeTable">
    ///     A <c>VendPaymModeTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if payment type is check or promissory note; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkPaymentType(VendPaymModeTable _vendPaymModeTable)
    {
        return (_vendPaymModeTable.PaymentType == PaymentType::Check || _vendPaymModeTable.PaymentType == PaymentType::PromissoryNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustPaymentTransferOperation</Name>
				<Source><![CDATA[
    private void createCustPaymentTransferOperation(
        BankAccountTable _bank,
        CustBankAccount _custBankAccount,
        CustTable _custTable)
    {
        ELedgerAccountingLedgerEntriesTransTransferOperationTmp transferOperationTmp;

        transferOperationTmp.BankAccount = _custBankAccount.AccountNum;
        transferOperationTmp.DomesticName = _custBankAccount.RegistrationNum;

        if (!_custBankAccount.BankAccountMap::isDomestic())
        {
            transferOperationTmp.ThirdPartyName = _custBankAccount.Name;
        }

        transferOperationTmp.OffsetBankAccount = _bank.AccountNum;
        transferOperationTmp.OffsetDomesticName = _bank.RegistrationNum;

        if (!_bank.BankAccountMap::isDomestic())
        {
            transferOperationTmp.OffsetThirdPartyName = _bank.Name;
        }

        transferOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);
        transferOperationTmp.TransDate = ledgerEntriesView.AccountingDate;
        transferOperationTmp.VendName = CompanyInfo::find().Name;
        transferOperationTmp.Rfc = _custTable.rfc_MX;

        if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
        {
            transferOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
            transferOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                                    ledgerEntriesView.TransactionCurrencyAmount,
                                                                    ledgerEntriesView.AccountingCurrencyAmount);
        }

        transferOperations.Add(transferOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendPaymentTransferOperation</Name>
				<Source><![CDATA[
    private void createVendPaymentTransferOperation(BankAccountTable            _bank,
                                                    VendBankAccount             _vendBankAccount,
                                                    VendTable                   _vendTable)
    {
        ELedgerAccountingLedgerEntriesTransTransferOperationTmp     transferOperationTmp;

        transferOperationTmp.BankAccount = _bank.AccountNum;
        transferOperationTmp.DomesticName = _bank.RegistrationNum;

        if (!_bank.BankAccountMap::isDomestic())
        {
            transferOperationTmp.ThirdPartyName = _bank.Name;
        }

        transferOperationTmp.OffsetBankAccount = _vendBankAccount.AccountNum;
        transferOperationTmp.OffsetDomesticName = _vendBankAccount.RegistrationNum;

        if (!_vendBankAccount.BankAccountMap::isDomestic())
        {
            transferOperationTmp.OffsetThirdPartyName = _vendBankAccount.Name;
        }

        transferOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);
        transferOperationTmp.TransDate = ledgerEntriesView.AccountingDate;
        transferOperationTmp.VendName = _vendTable.name();
        transferOperationTmp.Rfc = _vendTable.rfc_MX;

        if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
        {
            transferOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
            transferOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                                    ledgerEntriesView.TransactionCurrencyAmount,
                                                                    ledgerEntriesView.AccountingCurrencyAmount);
        }

        transferOperations.Add(transferOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankOperations</Name>
				<Source><![CDATA[
    private void createBankOperations()
    {
        BankChequeTable             bankChequeTable;
        BankAccountTrans            bankAccountTrans;
        BankAccountTable            bank;
        VendTable                   vendTable;
        CustTable custTable;
        CustTrans custTrans;
        CustPaymModeTable custPaymModeTable;
        CustBankAccount custBankAccount;

        if (ledgerEntriesView.PostingType == LedgerPostingType::Bank)
        {
            select firstonly TransDate, PaymReference, ChequeNum from bankAccountTrans
                where bankAccountTrans.Voucher == ledgerEntriesView.SubledgerVoucher
                    && bankAccountTrans.TransDate == ledgerEntriesView.AccountingDate
                    && (bankAccountTrans.ChequeNum || bankAccountTrans.PaymReference)
                join Name, AccountNum, RegistrationNum, Location from bank
                    where bank.AccountID == bankAccountTrans.AccountID
                outer join ChequeNum, TransDate from bankChequeTable
                    where bankChequeTable.ChequeNum == bankAccountTrans.ChequeNum 
                        && bankChequeTable.AccountID == bankAccountTrans.AccountId
                        && bankChequeTable.RecipientType == BankChequeRecipientType::Vend
                outer join Party, RFC_MX, CompanyType_MX from vendTable
                    where vendTable.AccountNum == bankChequeTable.RecipientAccountNum
                outer join TransDate, PaymReference, PaymMode from custTrans
                    where bankAccountTrans.PaymReference
                        && custTrans.PaymMode
                        && custTrans.PaymReference == bankAccountTrans.PaymReference
                outer join Party, Rfc_MX, CompanyType_MX from custTable
                    where custTable.AccountNum == custTrans.AccountNum
                outer join RecId, PaymMode from custPaymModeTable
                    where custPaymModeTable.PaymMode == custTrans.PaymMode 
                        && custPaymModeTable.PaymentType_MX == PaymentType_MX::Check;

            if (bankChequeTable.ChequeNum)
            {
                this.createVendBankOperation(bankChequeTable, bank, vendTable);
            }
            else if (custTrans.PaymReference && CustPaymModeTable.RecId)
            {
                this.createCustBankOperation(bank, bankAccountTrans.PaymReference, bankAccountTrans.TransDate, custTable);
            }
        }
        else if (ledgerEntriesView.PostingType == LedgerPostingType::LedgerJournal)
        {
            select firstonly TransDate, PaymReference from custTrans
                where custTrans.Voucher == ledgerEntriesView.SubledgerVoucher
                    && custTrans.TransDate == ledgerEntriesView.AccountingDate
                    && custTrans.PaymReference
                join Party, Rfc_MX, CompanyType_MX from custTable
                    where custTable.AccountNum == custTrans.AccountNum
                outer join Name, AccountNum, RegistrationNum, Location from custBankAccount
                    where custBankAccount.AccountID == custTrans.ThirdPartyBankAccountId
                        && custBankAccount.CustAccount == custTrans.AccountNum
                exists join custPaymModeTable
                    where custPaymModeTable.PaymMode == custTrans.PaymMode
                        && custPaymModeTable.PaymentType_MX == PaymentType_MX::Check;

            if (custTrans.PaymReference)
            {
                this.createCustBankOperation(custBankAccount, custTrans.PaymReference, custTrans.TransDate, custTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustBankOperation</Name>
				<Source><![CDATA[
    private void createCustBankOperation(
        BankAccountMap _bank,
        PaymReference _paymReference,
        TransDate _transDate,
        CustTable _custTable)
    {
        ELedgerAccountingLedgerEntriesTransBankOperationTmp bankOperationTmp;

        bankOperationTmp.ChequeNum = _paymReference;
        bankOperationTmp.DomesticName = _bank.RegistrationNum;

        if (!_bank.BankAccountMap::isDomestic())
        {
            bankOperationTmp.ThirdPartyName = _bank.Name;
        }

        bankOperationTmp.BankAccount = _bank.AccountNum;
        bankOperationTmp.TransDate = _transDate;
        bankOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);
        bankOperationTmp.VendName = CompanyInfo::find().Name;
        bankOperationTmp.RFC = _custTable.Rfc_MX;

        if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
        {
            bankOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
            bankOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                             ledgerEntriesView.TransactionCurrencyAmount,
                                                             ledgerEntriesView.AccountingCurrencyAmount);
        }

        bankOperations.Add(bankOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendBankOperation</Name>
				<Source><![CDATA[
    private void createVendBankOperation(
        BankChequeTable _bankChequeTable,
        BankAccountTable _bank,
        VendTable _vendTable)
    {
        ELedgerAccountingLedgerEntriesTransBankOperationTmp     bankOperationTmp;

        bankOperationTmp.ChequeNum = _bankChequeTable.ChequeNum;
        bankOperationTmp.DomesticName = _bank.RegistrationNum;

        if (!_bank.BankAccountMap::isDomestic())
        {
            bankOperationTmp.ThirdPartyName = _bank.Name;
        }

        bankOperationTmp.BankAccount = _bank.AccountNum;
        bankOperationTmp.TransDate = _bankChequeTable.TransDate;
        bankOperationTmp.AmountCur = abs(ledgerEntriesView.TransactionCurrencyAmount);
        bankOperationTmp.VendName = _vendTable.Name();
        bankOperationTmp.RFC = _vendTable.Rfc_MX;

        if (ledgerEntriesView.TransactionCurrencyAmount != ledgerEntriesView.AccountingCurrencyAmount)
        {
            bankOperationTmp.CurrencyCode = ledgerEntriesView.TransactionCurrencyCode;
            bankOperationTmp.ExchangeRate = this.getExchange(ledgerEntriesView.TransactionCurrencyCode,
                                                             ledgerEntriesView.TransactionCurrencyAmount,
                                                             ledgerEntriesView.AccountingCurrencyAmount);
        }

        bankOperations.Add(bankOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTransaction</Name>
				<Source><![CDATA[
    private void createVendTransaction(VendTable               _vendTable,
                                       VendTrans               _vendTrans,
                                       VendInvoiceJour         _vendInvoiceJour,
                                       LedgerJournalTrans      _ledgerJournalTrans)
    {
        if (_vendTable.CompanyType_MX == CompanyType_MX::ForeignCompany)
        {
            this.createThirdPartyOperation(_vendTrans, _vendTable.ForeignTaxRegistration_MX);
        }
        else if (_vendInvoiceJour.CFDIUUID_MX || _ledgerJournalTrans.CFDIUUID_MX)
        {
            var cfdiuuid = _vendInvoiceJour.CFDIUUID_MX ? _vendInvoiceJour.CFDIUUID_MX : _ledgerJournalTrans.CFDIUUID_MX;

            this.createDomesticOperation(_vendTrans, cfdiuuid, _vendTable.rfc_MX);
        }
        else if (_vendTrans.DocumentNum || _vendTrans.Invoice)
        {
            InvoiceSeries_MX    invoiceSeries = #Blank;

            if (_vendInvoiceJour.InvoiceSeries_MX)
            {
                invoiceSeries = _vendInvoiceJour.InvoiceSeries_MX;
            }
            else if (_ledgerJournalTrans.InvoiceSeries_MX)
            {
                invoiceSeries = _ledgerJournalTrans.InvoiceSeries_MX;
            }

            this.createDomesticOperationOther(_vendTrans, _vendTable.rfc_MX, invoiceSeries);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDomesticOperation</Name>
				<Source><![CDATA[
    private void createDomesticOperation(CustVendTrans          _custVendTrans,
                                         EInvoiceCFDIUUID_MX    _cfdiuuid,
                                         RFC_MX                 _rfc)
    {
        ELedgerAccountingLedgerEntriesTransDomOperationTmp  ledgerEntriesTransDomOperationTmp;

        ledgerEntriesTransDomOperationTmp.CFDIUUID = _cfdiuuid;
        ledgerEntriesTransDomOperationTmp.AmountCur = abs(_custVendTrans.AmountCur);
        ledgerEntriesTransDomOperationTmp.RFC = _rfc;

        if (_custVendTrans.amountCur != _custVendTrans.AmountMST)
        {
            ledgerEntriesTransDomOperationTmp.CurrencyCode = _custVendTrans.CurrencyCode;
            ledgerEntriesTransDomOperationTmp.ExchangeRate = this.getExchange(_custVendTrans.CurrencyCode,
                                                                              _custVendTrans.amountCur,
                                                                              _custVendTrans.AmountMST);
        }

        domesticOperations.Add(ledgerEntriesTransDomOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDomesticOperationOther</Name>
				<Source><![CDATA[
    private void createDomesticOperationOther(CustVendTrans       _custVendTrans,
                                              RFC_MX              _rfc,
                                              InvoiceSeries_MX    _serie = #Blank)
    {
        ELedgerAccountingLedgerEntriesTransDomOperationOtherTmp  ledgerEntriesTransDomOperationOtherTmp;

        ledgerEntriesTransDomOperationOtherTmp.Series = _serie;
        ledgerEntriesTransDomOperationOtherTmp.DocumentNum = _custVendTrans.DocumentNum ? _custVendTrans.DocumentNum : _custVendTrans.Invoice;
        ledgerEntriesTransDomOperationOtherTmp.AmountCur = abs(_custVendTrans.AmountCur);
        ledgerEntriesTransDomOperationOtherTmp.RFC = _rfc;

        if (_custVendTrans.amountCur != _custVendTrans.AmountMST)
        {
            if (_custVendTrans.amountCur != _custVendTrans.AmountMST)
            {
                ledgerEntriesTransDomOperationOtherTmp.CurrencyCode = _custVendTrans.CurrencyCode;
                ledgerEntriesTransDomOperationOtherTmp.ExchangeRate = this.getExchange(_custVendTrans.CurrencyCode,
                                                                                       _custVendTrans.amountCur,
                                                                                       _custVendTrans.AmountMST);
            }
        }

        domesticOperationsOther.Add(ledgerEntriesTransDomOperationOtherTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createThirdPartyOperation</Name>
				<Source><![CDATA[
    private void createThirdPartyOperation(CustVendTrans _custVendTrans, ForeignTaxRegistration_MX _taxRegistration)
    {
        ELedgerAccountingLedgerEntriesTransThirdPartyOperationTmp   thirdPartyOperationTmp;

        thirdPartyOperationTmp.DocumentNum = _custVendTrans.DocumentNum ? _custVendTrans.DocumentNum : _custVendTrans.Invoice;
        thirdPartyOperationTmp.TaxRegistration = _taxRegistration;
        thirdPartyOperationTmp.AmountCur = abs(_custVendTrans.AmountCur);

        if (_custVendTrans.amountCur != _custVendTrans.AmountMST)
        {
            if (_custVendTrans.amountCur != _custVendTrans.AmountMST)
            {
                thirdPartyOperationTmp.CurrencyCode = _custVendTrans.CurrencyCode;
                thirdPartyOperationTmp.ExchangeRate = this.getExchange(_custVendTrans.CurrencyCode,
                                                                                         _custVendTrans.amountCur,
                                                                                         _custVendTrans.AmountMST);
            }
        }

        thirdPartyOperations.Add(thirdPartyOperationTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBridgedPosting</Name>
				<Source><![CDATA[
    private GeneralJournalEntry getBridgedPosting()
    {
        GeneralJournalEntry             generalJournalEntry;
        GeneralJournalAccountEntry      generalJournalAccountEntry;

        LedgerJournalTrans              ledgerJournalTrans;

        if (ledgerEntriesView.SubLedgerVoucher && ledgerEntriesView.AccountingDate)
        {
            select generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
                exists join generalJournalAccountEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                exists join ledgerJournalTrans
                    where generalJournalAccountEntry.RecId == ledgerJournalTrans.FurtherPostingRecId
                       && ledgerJournalTrans.Voucher == ledgerEntriesView.SubLedgerVoucher
                       && ledgerJournalTrans.TransDate == ledgerEntriesView.AccountingDate;
        }

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchange</Name>
				<Source><![CDATA[
    private ExchRate getExchange(CurrencyCode _currencyCode, AmountCur _amountCur, AmountMST _amountMST)
    {
        const real ExchangeRateMultiplier = 100;

        return CurrencyExchange::calculateExchangeRate(_amountCur, _amountMST) / ExchangeRateMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <param name="_custTrans">
    /// The <c>CustTrans</c> record to find the related electronic invoice
    /// </param>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    private EInvoiceJour_MX getEInvoice(CustTrans _custTrans)
    {
        EInvoiceJour_MX     eInvoice;

        CustInvoiceJour     custInvoiceJour;
        ProjInvoiceJour     projInvoiceJour;

        switch (_custTrans.TransType)
        {
            case LedgerTransType::Cust:
            case LedgerTransType::Sales:
                select firstonly eInvoice
                    exists join custInvoiceJour
                    where eInvoice.RefTableId == custInvoiceJour.TableId
                       && eInvoice.RefRecId == custInvoiceJour.RecId
                       && custInvoiceJour.InvoiceId == _custTrans.Invoice
                       && custInvoiceJour.InvoiceDate == _custTrans.TransDate
                       && custInvoiceJour.LedgerVoucher == _custTrans.Voucher;
                break;

            case LedgerTransType::Project:
                select eInvoice
                    exists join projInvoiceJour
                    where eInvoice.RefTableId == projInvoiceJour.TableId
                       && eInvoice.RefRecId == projInvoiceJour.RecId
                       && projInvoiceJour.ProjInvoiceId == _custTrans.Invoice
                       && projInvoiceJour.InvoiceDate == _custTrans.TransDate
                       && projInvoiceJour.LedgerVoucher == _custTrans.Voucher;
        }

        return eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransBankOperationTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransBankOperationTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getBankOperations()
    {
        return bankOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDomesticOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransDomOperationTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransDomOperationTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getDomesticOperations()
    {
        return domesticOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDomesticOperationsOthers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransDomOperationOtherTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransDomOperationOtherTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getDomesticOperationsOthers()
    {
        return domesticOperationsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherPaymentOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransOtherPaymOperationTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransOtherPaymOperationTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getOtherPaymentOperations()
    {
        return otherPaymentOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransTransferOperationTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransTransferOperationTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getTransferOperations()
    {
        return transferOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThirdPartyOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>ArrayList</c> of table <c>ELedgerAccountingLedgerEntriesTransThirdPartyOperationTmp</c>.
    /// </summary>
    /// <returns>The record list.</returns>
    [ERTableName(tableStr(ELedgerAccountingLedgerEntriesTransThirdPartyOperationTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ArrayList getThirdPartyOperations()
    {
        return thirdPartyOperations;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>