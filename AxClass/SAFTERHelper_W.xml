<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTERHelper_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SAFTERHelper_W</c> class is the class containing helper methods for GER implementation of SAF-T feature.
/// </summary>
public class SAFTERHelper_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parentMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds parent general ledger account for specified GL account.
    /// </summary>
    /// <param name = "_mainAccountId">General ledger account for which parent must be found.</param>
    /// <returns>General ledger account that is parent for specified account.</returns>
    public static MainAccountNum parentMainAccountNum(MainAccountNum _mainAccountId)
    {
        DimAttributeMainAccount dama;
        DimensionAttributeValue dav;
        DimensionAttributeValueTotallingCriteria davtc;
        RefRecId ledgerChartOfAccountsRecId = LedgerChartOfAccounts::current();
        select firstOnly Value from dama
        where dama.Category == ledgerChartOfAccountsRecId
            && dama.value != _mainAccountId
        exists join dav
            where dav.EntityInstance == dama.Key
        exists join davtc
            where davtc.DimensionAttributeValue == dav.RecId
                && davtc.FromValue <= _mainAccountId
                && davtc.ToValue >= _mainAccountId;

        return dama.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>LedgerDimensionAccount</c> structure into an <c>SAFTDimensionStructure_W</c> list.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// A reference to the <c>LedgerDimensionAccount</c> structure.
    /// </param>
    /// <returns>List of <c>SAFTDimensionStructure_W</c>.</returns>
    [SysClassName(classStr(SAFTDimensionStructure_W))]
    public static List getAnalysis(LedgerDimensionAccount _ledgerDimension)
    {
        DimensionAttributeLevelValueView valueView;
        DimensionAttribute dimAttribute;
        List analysisList = new List(Types::Class);

        while select DisplayValue from valueView
            where valueView.ValueCombinationRecId == _ledgerDimension
        join ReportColumnName, Name from dimAttribute
            where dimAttribute.RecId == valueView.DimensionAttribute
                && (dimAttribute.Type == DimensionAttributeType::ExistingList
                ||  dimAttribute.Type == DimensionAttributeType::CustomList)
        {
            analysisList.addEnd(SAFTDimensionStructure_W::newParameters(dimAttribute.ReportColumnName, dimAttribute.Name, valueView.DisplayValue));
        }
        return analysisList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDocForAccountEntryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds original documents for the <c>GeneralJournalAccountEntry</c> and fills <c>SafTOriginalDocumentStructure_W</c> based on it.
    /// </summary>
    /// <param name="_recId">
    /// The record id of <c>GeneralJournalAccountEntry</c> for which the search for original documents must be performed.
    /// </param>
    /// <returns>The <c>SAFTOriginalDocumentStructure_W</c> containing data related to the <c>GeneralJournalAccountEntry</c> passed.</returns>
    public static SAFTOriginalDocumentStructure_W getOrigDocForAccountEntryRecId(RecId _recId)
    {
        Originaldocuments orgDoc = new Originaldocuments(GeneralJournalAccountEntry::find(_recId));
        orgDoc.findRelations();
        TmpLedgerBase tmpLedgerBase;
        tmpLedgerBase.setTmpData(orgDoc.relations());
        select firstonly IdName, Module from tmpLedgerBase;

        TableName idName = tmpLedgerBase.IdName;
        SysModule module = tmpLedgerBase.Module;

        boolean isFirstSelectedRecord = true;
        str documentIds, docTypes;
        while select id from tmpLedgerBase
            group by id, OriginalDocument
        {
            if (!isFirstSelectedRecord)
            {
                documentIds += ';' + tmpLedgerBase.id;
                docTypes += ';' + enum2Symbol(enumNum(OriginalDocument), tmpLedgerBase.OriginalDocument);
            }
            else
            {
                isFirstSelectedRecord = false;
                documentIds = tmpLedgerBase.id;
                docTypes = enum2Symbol(enumNum(OriginalDocument), tmpLedgerBase.OriginalDocument);
            }
        }

        return SafTOriginalDocumentStructure_W::newParameters(idName, module, documentIds, docTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalDocumentForAccountEntryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds original document for the <c>GeneralJournalAccountEntry</c> and fills <c>SafTOriginalDocumentStructure_W</c> based on it.
    /// </summary>
    /// <param name="_recId">
    /// The record id of <c>GeneralJournalAccountEntry</c> for which the search for original document must be performed.
    /// </param>
    /// <returns>The <c>SAFTOriginalDocumentStructure_W</c> containing data related to the <c>GeneralJournalAccountEntry</c> passed.</returns>
    public static SAFTOriginalDocumentStructure_W getOriginalDocumentForAccountEntryRecId(RecId _recId)
    {
        Originaldocuments orgDoc = new Originaldocuments(GeneralJournalAccountEntry::find(_recId));
        orgDoc.findRelations();
        TmpLedgerBase tmpLedgerBase;
        tmpLedgerBase.setTmpData(orgDoc.relations());
        select firstonly IdName, Module from tmpLedgerBase;

        TableName idName = tmpLedgerBase.IdName;
        SysModule module = tmpLedgerBase.Module;

        str documentId, documentType;
        while select id from tmpLedgerBase
            group by id, OriginalDocument
        {
            documentId = tmpLedgerBase.id;
            documentType = enum2Symbol(enumNum(OriginalDocument), tmpLedgerBase.OriginalDocument);

            if (tmpLedgerBase.OriginalDocument == OriginalDocument::SalesInvoice
                || tmpLedgerBase.OriginalDocument == OriginalDocument::PurchaseInvoice
                || tmpLedgerBase.OriginalDocument == OriginalDocument::ProjectInvoice
                || tmpLedgerBase.OriginalDocument == OriginalDocument::FreeTextInvoice
                || tmpLedgerBase.OriginalDocument == OriginalDocument::CustAdvanceInvoice_W
                || tmpLedgerBase.OriginalDocument == OriginalDocument::SalesComplementaryInvoice)
            {
                break;
            }

        }

        return SafTOriginalDocumentStructure_W::newParameters(idName, module, documentId, documentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqualOrChildSolution</Name>
				<Source><![CDATA[
    internal static boolean isEqualOrChildSolution(ERGUID _parentSolutionGuid, ERGUID _childSolutionGuid)
    {
        boolean ret = false;

        if (_parentSolutionGuid == _childSolutionGuid)
        {
            ret = true;
        }
        else
        {
            ERSolutionTable solutionTable = ERSolutionTable::findByGUID(_childSolutionGuid);

            while (solutionTable.Base != 0 && !ret)
            {
                ERSolutionVersionTable solutionVersionTable = ERSolutionVersionTable::find(solutionTable.Base);
                solutionTable = ERSolutionTable::find(solutionVersionTable.Solution);
                if (solutionTable.GUID == _parentSolutionGuid)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sAFTFormatName_NO</Name>
				<Source><![CDATA[
    internal static Name sAFTFormatName_NO()
    {
        return ERSolutionTable::findByGUID(str2Guid(SAFTConstants_W::ERSAFTFormatSolutionGuidStr_NO)).Name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>