<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCheckRequestCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlCheckRequestCollection</c> class can be used to hold a collection of
/// <c>BudgetControlCheckRequest</c> objects for different budget sources and can also be used to
/// enumerate through those instances in the collection.
/// </summary>
public class BudgetControlCheckRequestCollection implements SysPackable
{
    List checkRequestIdList;
    ListEnumerator checkRequestIdListEnumerator;
    Map budgetSourceIdCheckRequests;
    BudgetControlCheckRequest currentBudgetControlCheckRequest;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetControlCheckRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>BudgetControlCheckRequest</c> object to the collection.
    /// </summary>
    /// <param name="_budgetCheckRequest">
    /// A <c>BudgetControlCheckRequest</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The same budget source cannot be added more than one time to the collection.
    /// </exception>
    public void addBudgetControlCheckRequest(BudgetControlCheckRequest _budgetCheckRequest)
    {
        if (!budgetSourceIdCheckRequests.exists(_budgetCheckRequest.parmBudgetSourceId()))
        {
            // Check request has not yet been added to the list
            checkRequestIdList.addEnd(_budgetCheckRequest.parmBudgetSourceId());
        }

        // Update the check request associated with the budget source
        budgetSourceIdCheckRequests.insert(
            _budgetCheckRequest.parmBudgetSourceId(),
            _budgetCheckRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetControlCheckRequest</c> object that the enumerator currently positions in the
    /// collection.
    /// </summary>
    /// <returns>
    /// A <c>BudgetControlCheckRequest</c> object.
    /// </returns>
    public BudgetControlCheckRequest current()
    {
        return currentBudgetControlCheckRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBudgetSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the <c>BudgetSource</c> record for the current <c>BudgetControlCheckRequest</c>
    /// object in the collection.
    /// </summary>
    /// <returns>
    /// The ID of the <c>BudgetSource</c> record.
    /// </returns>
    public BudgetSourceRecId currentBudgetSourceId()
    {
        BudgetSourceRecId budgetSourceId;

        if (currentBudgetControlCheckRequest)
        {
            budgetSourceId = currentBudgetControlCheckRequest.parmBudgetSourceId();
        }

        return budgetSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of <c>BudgetControlCheckRequest</c> objects that are in the collection.
    /// </summary>
    /// <returns>
    /// The number of <c>BudgetControlCheckRequest</c> object that are in the collection.
    /// </returns>
    public int elements()
    {
        return checkRequestIdList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlCheckRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetControlCheckRequest</c> object for the specified budget source.
    /// </summary>
    /// <param name="_budgetSourceId">
    /// The ID for the budget source.
    /// </param>
    /// <returns>
    /// A <c>BudgetControlCheckRequest</c> object.
    /// </returns>
    public BudgetControlCheckRequest getBudgetControlCheckRequest(BudgetSourceRecId _budgetSourceId)
    {
        BudgetControlCheckRequest checkRequest;

        if (budgetSourceIdCheckRequests.exists(_budgetSourceId))
        {
            checkRequest = budgetSourceIdCheckRequests.lookup(_budgetSourceId);
        }

        return checkRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator of the collection.
    /// </summary>
    /// <remarks>
    /// The enumerator can be used to enumerate through the collection in the order in which the
    /// <c>BudgetControlCheckRequest</c> object is added to the collection.
    /// </remarks>
    public void initializeEnumerator()
    {
        checkRequestIdListEnumerator = checkRequestIdList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to the next <c>BudgetControlCheckRequest</c> object in the collection.
    /// </summary>
    /// <returns>
    /// true if the enumerator successfully advances to the next <c>BudgetControlCheckRequest</c> object in
    /// the collection; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (checkRequestIdListEnumerator)
        {
            hasItem = checkRequestIdListEnumerator.moveNext();
        }
        else
        {
            hasItem = false;
        }

        if (hasItem)
        {
            currentBudgetControlCheckRequest = budgetSourceIdCheckRequests.lookup(checkRequestIdListEnumerator.current());
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        budgetSourceIdCheckRequests = new Map(typeName2Type(extendedTypeStr(BudgetSourceRecId)), Types::Class);
        checkRequestIdList = new List(typeName2Type(extendedTypeStr(BudgetSourceRecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public final container pack()
    {
        // Pack the budget check requests list.
        return [#CurrentVersion, checkRequestIdList.pack(), budgetSourceIdCheckRequests.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the enumerator to the first <c>BudgetControlCheckRequest</c> object in the collection.
    /// </summary>
    public void reset()
    {
        if (checkRequestIdListEnumerator)
        {
            checkRequestIdListEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public final boolean unpack(container _packedBudgetCheckRequests)
    {
        int version = conpeek(_packedBudgetCheckRequests, 1);
        container packedBudgetCheckRequestIds;
        container packedBudgetSourceIdCheckRequests;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedBudgetCheckRequestIds, packedBudgetSourceIdCheckRequests] = _packedBudgetCheckRequests;

                break;

            default:
                return false;
        }

        if (packedBudgetCheckRequestIds != conNull())
        {
            checkRequestIdList = List::create(packedBudgetCheckRequestIds);
        }

        if (packedBudgetSourceIdCheckRequests != conNull())
        {
            budgetSourceIdCheckRequests = Map::create(packedBudgetSourceIdCheckRequests);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BudgetControlCheckRequestCollection construct()
    {
        return new BudgetControlCheckRequestCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlCheckRequestCollection</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetCheckRequests">
    /// The packed instance of the <c>BudgetControlCheckRequestCollection</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlCheckRequestCollection</c> class.
    /// </returns>
    public static BudgetControlCheckRequestCollection create(container _packedBudgetCheckRequests)
    {
        BudgetControlCheckRequestCollection checkRequests = new BudgetControlCheckRequestCollection();

        checkRequests.unpack(_packedBudgetCheckRequests);

        return checkRequests;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>