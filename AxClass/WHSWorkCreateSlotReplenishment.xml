<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateSlotReplenishment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates replenishment work for located slotting demand.
/// </summary>
internal class WHSWorkCreateSlotReplenishment extends WhsWorkCreateReplenishment
{
    private WHSSlotTemplate      slotTemplate;
    private WHSSlotDemandLocated tmpSlotDemandLocated;
    private WHSSlotTemplateLine  slotTemplateLine;
    private NoYes                workBreak;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupDemandRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes demand and located demand records for the slot template.
    /// </summary>
    private void cleanupDemandRecord()
    {
        ttsbegin;

        WHSSlotDemand slotDemand;

        delete_from slotDemand
            where slotDemand.SlotTemplate == slotTemplate.RecId;

        WHSSlotDemandLocated slotDemandLocated;

        delete_from slotDemandLocated
            where slotDemandLocated.SlotTemplate == slotTemplate.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the pick temp line.
    /// </summary>
    [Hookable(false)]
    internal void createTempTable()
    {
        InventDim inventDim = InventDim::find(replenInventDim.InventDimId);
        inventDim.wmsLocationId = '';
        inventDim = InventDim::findOrCreate(inventDim);

        tmpWorkLine.WorkType             = WHSWorkType::Pick;
        tmpWorkLine.OriginType           = WHSOriginType::Replenishment;
        tmpWorkLine.OriginRefId          = slotTemplate.SlotTemplateId;
        tmpWorkLine.WorkCreateId         = workCreateId;
        tmpWorkLine.WorkTransType        = WHSWorkTransType::Replenishment;
        tmpWorkLine.RefTableId           = tableNum(WHSSlotTemplate);
        tmpWorkLine.RefRecId             = slotTemplate.RecId;
        tmpWorkLine.RequestedTypeId      = slotTemplate.SlotTemplateId;
        tmpWorkLine.ItemId               = itemId;
        tmpWorkLine.InventDimId          = inventDim.InventDimId;
        tmpWorkLine.ReplenLocationId     = replenInventDim.wmsLocationId;
        tmpWorkLine.InventTransId        = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        tmpWorkLine.UseWorkForWaveReplen = slotTemplate.UseWorkForWaveReplen;

        this.setGlobals();

        this.createTempLine(tmpWorkLine, replenQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTablePut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the put temp line.
    /// </summary>
    [Hookable(false)]
    internal void createTempTablePut()
    {
        InventDim inventDim = InventDim::find(tmpSlotDemandLocated.InventDimId);
        inventDim.wMSLocationId = tmpSlotDemandLocated.WMSLocationId;
        inventDim.InventLocationId = tmpSlotDemandLocated.InventLocationId;
        inventDim = InventDim::findOrCreate(inventDim);

        tmpWorkLine.WorkType            = WHSWorkType::Put;

        tmpWorkLine.OriginType          = WHSOriginType::Replenishment;
        tmpWorkLine.OriginRefId         = slotTemplate.SlotTemplateId;

        tmpWorkLine.WorkCreateId        = workCreateId;
        tmpWorkLine.WorkTransType       = WHSWorkTransType::Replenishment;
        tmpWorkLine.RefTableId          = tableNum(WHSSlotTemplateLine);
        tmpWorkLine.RefRecId            = slotTemplateLine.RecId;
        tmpWorkLine.RequestedTypeId     = slotTemplate.SlotTemplateId;

        tmpWorkLine.ItemId              = tmpSlotDemandLocated.ItemId;
        tmpWorkLine.InventDimId         = inventDim.inventDimId;

        this.setGlobals();

        // Create Put TmpWorkLine
        this.createTempLine(tmpWorkLine, replenQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        slotTemplate = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(null, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSlotTemplateLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSSlotTemplateLine parmSlotTemplateLine(WHSSlotTemplateLine _slotTemplateLine = slotTemplateLine)
    {
        slotTemplateLine = _slotTemplateLine;

        return slotTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpSlotDemandLocated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSSlotDemandLocated parmTmpSlotDemandLocated(WHSSlotDemandLocated _tmpSlotDemandLocated = tmpSlotDemandLocated)
    {
        tmpSlotDemandLocated = _tmpSlotDemandLocated;

        return tmpSlotDemandLocated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportWorkCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the number of work headers created.
    /// </summary>
    private void reportWorkCreation()
    {
        WHSWorkTable workTable;

        select count(RecId) from workTable
            where workTable.WorkBuildId == workCreateId;

        info(strFmt("@WAX:SlotReplenWorkCreationInfo", workTable.RecId, workCreateId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSlotReplenishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the creation of replenishment work.
    /// </summary>
    [Hookable(false)]
    internal void runSlotReplenishment()
    {
        try
        {
            ttsbegin;

            WHSSlotDemandLock::acquireSlottingLock(this.slotTemplate, this.instrumentationLogger().demandSlottingActivities());

            if (slotTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Group)
            {
                WhsWarehouseGroupLink warehouseGroupLink;

                while select warehouseGroupLink
                    where warehouseGroupLink.WarehouseGroupId == slotTemplate.WarehouseGroupId
                {
                    this.generateSlotReplenishmentWork(warehouseGroupLink.InventLocationId);
                }
            }
            else
            {
                this.generateSlotReplenishmentWork(slotTemplate.InventLocationId);
            }
            
            ttscommit;
        }
        catch
        {
            // Delete all tmpWorkLines for this workCreateId
            WHSTmpWorkLine replenPutTmpWorkLine;

            delete_from replenPutTmpWorkLine
                where replenPutTmpWorkLine.WorkCreateId == workCreateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSlotReplenishmentWork</Name>
				<Source><![CDATA[
    private void generateSlotReplenishmentWork(InventLocationId _warehouseId)
    {
        WHSSlotDemandLocated            slotDemandLocated;
        WHSSlotTemplateLine             tmpSlotTemplateLine;
        WHSWorkCreateSlotReplenishment  workCreate;

        while select slotDemandLocated
            where  slotDemandLocated.SlotTemplate == slotTemplate.RecId
                && slotDemandLocated.InventLocationId == _warehouseId
            join tmpSlotTemplateLine
                where tmpSlotTemplateLine.RecId == slotDemandLocated.SlotTemplateLine
        {
            if (slotDemandLocated.CreateLetUp)
            {
                WHSSlotDemandLocate::letUpByTemplate(slotDemandLocated);
            }

            Qty inventQty = WHSCatchWeightHelper::convertInventQuantity(slotDemandLocated.ItemId,
                                                                        slotDemandLocated.UnitOfMeasureSymbol,
                                                                        slotDemandLocated.LocatedQty,
                                                                        slotDemandLocated.InventDimId);

            workCreate = new WHSWorkCreateSlotReplenishment(slotTemplate, workCreateId);
            workCreate.parmReplenQty(inventQty);
            workCreate.parmTmpSlotDemandLocated(slotDemandLocated);
            workCreate.parmSlotTemplateLine(tmpSlotTemplateLine);
            workCreate.createTempTablePut();
        }

        WHSTmpWorkLine replenPutTmpWorkLine;

        select firstonly replenPutTmpWorkLine
            where replenPutTmpWorkLine.WorkCreateId  == workCreateId
            &&    replenPutTmpWorkLine.WorkType      == WHSWorkType::Put
            &&    replenPutTmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment;

        if (replenPutTmpWorkLine.RecId)
        {
            workCreate = new WHSWorkCreateSlotReplenishment(slotTemplate, workCreateId);
        }

        InventDim replenDim;

        while select itemId, InventQty, WMSLocationId, InventDimId, WorkBreak from replenPutTmpWorkLine
            where replenPutTmpWorkLine.WorkCreateId  == workCreateId
            &&    replenPutTmpWorkLine.WorkType      == WHSWorkType::Put
            &&    replenPutTmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment
            join LocDirHintCode from tmpSlotTemplateLine
                where tmpSlotTemplateLine.RecId == replenPutTmpWorkLine.RefRecId
            join replenDim
                where replenDim.inventDimId == replenPutTmpWorkLine.InventDimId
        {
            replenDim.wmsLocationId = replenPutTmpWorkLine.wmsLocationId;
            InventDim workDim = InventDim::findOrCreate(replenDim);
              
            workCreate.parmReplenQty(replenPutTmpWorkLine.InventQty);
            workCreate.parmReplenItemId(replenPutTmpWorkLine.ItemId);
            workCreate.parmReplenInventDim(InventDim::find(workDim.InventDimId));
            workCreate.parmLocDirHintCode(tmpSlotTemplateLine.LocDirHintCode);

            // Create tmp table (pick replenishment lines)
            workCreate.createTempTable();
        }

        // Delete unneeded replenishment tmpWorkLines that are puts.
        delete_from replenPutTmpWorkLine
            where replenPutTmpWorkLine.WorkCreateId     == workCreateId
            &&    replenPutTmpWorkLine.WorkType         == WHSWorkType::Put
            &&    replenPutTmpWorkLine.WorkTransType    == WHSWorkTransType::Replenishment;

        // Process tmpTable for replenishment
        if (workCreate != null)
        {
            workCreate.processTempTable();
            workCreate.cleanupTempTable();

            workCreate.blockReplenishmentOverflowWorkExceedingCapacity();
        }

        this.reportWorkCreation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected static WHSWorkCreateSlotReplenishment construct(Common _common, WHSWorkCreateId _workCreateId)
    {
        WHSWorkCreateSlotReplenishment workCreateSlotReplenishment = new WHSWorkCreateSlotReplenishment(_common, _workCreateId);

        return workCreateSlotReplenishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSlotTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class <c>WHSWorkCreateSlotReplenishment</c>.
    /// </summary>
    /// <param name = "_common">The <c>WHSSlotTemplate</c> record to use.</param>
    /// <returns>A new instance of the class <c>WHSWorkCreateSlotReplenishment</c>.</returns>
    [Hookable(false)]
    internal static WHSWorkCreateSlotReplenishment newFromSlotTemplate(Common _common)
    {
        return WHSWorkCreateSlotReplenishment::construct(_common, '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>