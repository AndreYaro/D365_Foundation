<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProd_PmfRecycledByproduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BomCalcProd_PmfRecycledByproduct</c> class is responsible for calculating the production estimated cost for a recycled byproduct.
/// </summary>
class BomCalcProd_PmfRecycledByproduct extends BOMCalcProd_PmfByProduct
{
    BOMCalcProdLine                        bomCalcProdLine,
                                           bomCalcProdLineWithUpdatedConsumption;
    PmfRecycledBpConsumptionCalcParameters pmfRecycledBpConsumptionCalcParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructProdBomRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>ProdBom</c> record that should be used for calculations.
    /// </summary>
    /// <returns>
    /// The <c>ProdBOM</c> record.
    /// </returns>
    private ProdBOM constructProdBomRecord()
    {
        ProdBOM ret;

        ret.data(bomCalcProdLine.parmProdBOM());

        // in context of recycled byproduct the operation number should be disregarded to avoid unecessary variances
        ret.OprNum = 0;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecycledBpConsumptionCalc</Name>
				<Source><![CDATA[
    public IPmfRecycledBpConsumptionCalc createRecycledBpConsumptionCalc(BOMCalcLine _bomCalcLine)
    {
        PmfRecycledBpConsumptionCalc_Recycled calc = PmfRecycledBpConsumptionCalc_Recycled::construct();

        calc.parmPmfRecycledBpConsumptionCalcParam(this.parmPmfRecycledBpConsumptionCalcParam());

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviouslyAllocatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds quantity allocated by previous calls.
    /// </summary>
    private void findPreviouslyAllocatedQty()
    {
        PmfCoByProdCalcTrans    prodCalcTransLocal;

        select sum(ConsumpVariable) from prodCalcTransLocal
            where prodCalcTransLocal.PmfIdRefCoByRecId == prodCalcTrans.PmfIdRefCoByRecId
                && prodCalcTransLocal.CollectRefLevel   == prodCalcTrans.CollectRefLevel + 1
                && prodCalcTransLocal.TransRefId        == prodCalcTrans.TransRefId
                && prodCalcTransLocal.IdRefRecId        == bomCalcProdLine.parmProdBOM().RecId;

        this.parmPmfRecycledBpConsumptionCalcParam().parmQtyToBeAddedToConsumption(prodCalcTransLocal.ConsumpVariable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListBOM</Name>
				<Source><![CDATA[
    protected void initListBOM()
    {
        super();

        if (bomCalcProdLine)
        {
            bomCalcProdLineWithUpdatedConsumption = BOMCalcProdLine_PmfCoProduct::newBOMCalcCoProd(this.constructProdBomRecord(),
                                                                                    this,
                                                                                    this.getLineNum(),
                                                                                    this.parmSiteId());

            bomCalcProdLineWithUpdatedConsumption.parmPmfRecycledBpConsumptionCalc(this.createRecycledBpConsumptionCalc(bomCalcProdLineWithUpdatedConsumption));

            listBOM.addEnd(bomCalcProdLineWithUpdatedConsumption);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    public void initProdCalcTrans()
    {
        super();
        this.findPreviouslyAllocatedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTrans</Name>
				<Source><![CDATA[
    public void insertProdCalcTrans()
    {
        this.updateCalcValues();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        pmfRecycledBpConsumptionCalcParameters = PmfRecycledBpConsumptionCalcParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedQty</Name>
				<Source><![CDATA[
    public Qty parmAllocatedQty()
    {
        Qty qty = bomCalcProdLineWithUpdatedConsumption.parmConsumptionInventQty() - this.parmPmfRecycledBpConsumptionCalcParam().parmQtyToBeAddedToConsumption();
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcProdLine</Name>
				<Source><![CDATA[
    public BOMCalcProdLine parmBomCalcProdLine(BOMCalcProdLine _bomCalcProdLine = bomCalcProdLine)
    {
        bomCalcProdLine = _bomCalcProdLine;

        return bomCalcProdLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfRecycledBpConsumptionCalcParam</Name>
				<Source><![CDATA[
    public PmfRecycledBpConsumptionCalcParameters parmPmfRecycledBpConsumptionCalcParam(PmfRecycledBpConsumptionCalcParameters _pmfRecycledBpConsumptionCalcParameters = pmfRecycledBpConsumptionCalcParameters)
    {
        pmfRecycledBpConsumptionCalcParameters = _pmfRecycledBpConsumptionCalcParameters;

        return pmfRecycledBpConsumptionCalcParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcValues</Name>
				<Source><![CDATA[
    public void updateCalcValues()
    {
        PmfCoByProdCalcTrans    prodCalcTransLocal;

        select sum(CostAmount),
               sum(CostMarkup),
               sum(SalesAmount),
               sum(SalesMarkup)
        from prodCalcTransLocal
        where prodCalcTransLocal.PmfIdRefCoByRecId == this.coProduct().RecId
           && prodCalcTransLocal.CollectRefLevel == this.parmProdTable().CollectRefLevel + 1;

        prodCalcTrans.CostAmount        = prodCalcTransLocal.CostAmount;
        prodCalcTrans.CostMarkup        = prodCalcTransLocal.CostMarkup;
        prodCalcTrans.SalesAmount       = prodCalcTransLocal.SalesAmount;
        prodCalcTrans.SalesMarkup       = prodCalcTransLocal.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCostBreakdownAllowed</Name>
				<Source><![CDATA[
    public boolean parmIsCostBreakdownAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BomCalcProd_PmfRecycledByproduct construct()
    {
        return new BomCalcProd_PmfRecycledByproduct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>