<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffUIController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffUIController</c> class controls settlement write off form controls.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffUIController
{
    protected Common originator;
    private boolean isSettlementWriteOffInProgress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initSettleRemainderControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the settle remainder control.
    /// </summary>
    /// <param name = "_settleRemainder">The settle remainder form control.</param>
    internal void initSettleRemainderControl(FormButtonControl _settleRemainder)
    {
        _settleRemainder.visible(this.shouldShowSettleRemainderControl());
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSettlementWriteOffDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>SettlementWriteOffDialog</c> dialog.
    /// </summary>
    /// <param name = "_args">The arguments to pass to the form.</param>
    internal abstract void openSettlementWriteOffDialog(Args _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldShowSettleRemainderControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the settle remainder button should be visible on the form.
    /// </summary>
    /// <returns>True if the button should be visible; otherwise, false.</returns>
    internal abstract boolean shouldShowSettleRemainderControl()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleRemainderControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the control for enabling the write-off remainder checkbox.
    /// </summary>
    /// <param name = "_writeOffRemainder">The form check box control to write-off remainder.</param>
    /// <param name = "_manager">The <c>CustVendOpenTransManager</c> manager.</param>
    internal void updateSettleRemainderControl(FormButtonControl _writeOffRemainder, CustVendOpenTransManager _manager)
    {
        _writeOffRemainder.enabled(this.shouldEnableWriteOffRemainderControl(_manager));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableWriteOffRemainderControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the write-off remainder control can be enabled.
    /// </summary>
    /// <param name = "_manager">The <c>CustVendOpenTransManager</c> manager.</param>
    /// <returns>true if the control can be enabled; otherwise, false.</returns>
    internal protected boolean shouldEnableWriteOffRemainderControl(CustVendOpenTransManager _manager)
    {
        return _manager.parmSpecTransManager().findByFullSettlement().RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSettlementWriteOffInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the state of the settlement write off to in progress or not.
    /// </summary>
    /// <param name = "_isSettlementWriteOffInProgress">Whether the write off process is in progress.</param>
    internal boolean parmIsSettlementWriteOffInProgress(boolean _isSettlementWriteOffInProgress = isSettlementWriteOffInProgress)
    {
        isSettlementWriteOffInProgress = _isSettlementWriteOffInProgress;
        return isSettlementWriteOffInProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the originating record for settlement write off.
    /// </summary>
    /// <param name = "_originator">The originating record.</param>
    /// <returns>The originating record.</returns>
    internal Common parmOriginator(Common _originator)
    {
        originator = _originator;
        return originator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginatorLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount on the originator, if any.
    /// </summary>
    /// <returns>The amount on the originator.</returns>
    internal protected AmountCur getOriginatorLineAmount()
    {
        AmountCur amountCur;

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans = originator as LedgerJournalTrans;
            amountCur = ledgerJournalTrans.amount();
        }

        return AmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>