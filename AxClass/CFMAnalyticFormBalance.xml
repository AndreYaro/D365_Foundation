<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>CFMAnalyticFormBalance</c> contains information about allowed limits for currencies and payment accounts in order to check limits.
/// </summary>
/// <remarks>
/// This class is used on the <c>CFMAnalyticForm</c> form to colour cells with out of limits balances.
/// </remarks>
class CFMAnalyticFormBalance
{
    Map currencyLimit;
    Map accountLimits;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormBalance construct(CFMJournalTable _journalTable)
    {
        CFMAnalyticFormBalance object = new CFMAnalyticFormBalance();

        object.initFromCFMJournalTable(_journalTable);

        return object;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether given amount exceed limits for given payment account.
    /// </summary>
    /// <param name="_accType">
    /// Type of payment account.
    /// </param>
    /// <param name="_accNum">
    /// Identificator of payment account.
    /// </param>
    /// <param name="_amountCur">
    /// Value to check.
    /// </param>
    /// <returns>
    /// true if given value is greater than the limit; otherwise false.
    /// </returns>
    public boolean checkAccountBalance(Str _accType, Str _accNum, AmountCur _amountCur)
    {
        if (_amountCur < 0)
        {
            return false;
        }

        container key = [_accType, _accNum];

        if (!accountLimits.exists(key))
        {
            return true;
        }

        return _amountCur >= accountLimits.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDailyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether given amount exceed daily remain limit for given currency.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency of amount to check.
    /// </param>
    /// <param name="_amountCur">
    /// Amount to check.
    /// </param>
    /// <returns>
    /// true if given value is greater than the limit; otherwise false.
    /// </returns>
    public boolean checkDailyBalance(CurrencyCode _currencyCode, AmountCur _amountCur)
    {
        if (_amountCur < 0)
        {
            return false;
        }

        if (!currencyLimit.exists(_currencyCode))
        {
            return true;
        }

        return _amountCur >= currencyLimit.lookup(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCFMJournalTable</Name>
				<Source><![CDATA[
    private void initFromCFMJournalTable(CFMJournalTable _journalTable)
    {
        currencyLimit = new Map(Types::String, Types::Real);

        CFMCashBalanceControlTable balanceControlTable;

        while select balanceControlTable
            where balanceControlTable.SourceRecId == _journalTable.RecId
               && balanceControlTable.SetupSourceType == CFMJournalName::tableIdToSourceType(_journalTable.TableId)
        {
            currencyLimit.insert(balanceControlTable.DailyBalanceLimitCurrency, balanceControlTable.DailyBalanceLimit);
        }

        accountLimits = new Map(Types::Container, Types::Real);

        BankAccountTable bankAcc;
        CFMJournalPaymAccountList paymAccList;

        while select CFMBankBalanceMinimum, AccountId from bankAcc
        exists join paymAccList
            where paymAccList.SourceRecId == _journalTable.RecId
               && paymAccList.SetupSourceType == CFMJournalName::tableIdToSourceType(_journalTable.TableId)
               && paymAccList.AccountType == CFMPaymentAccountType::Bank
               && paymAccList.AccountNum == bankAcc.AccountId
        {
            accountLimits.insert([queryValue(CFMPaymentAccountType::Bank), queryValue(bankAcc.AccountId)], bankAcc.CFMBankBalanceMinimum);
        }

        accountLimits.insert([queryValue(CFMPaymentAccountType::Bank), queryValue('')], 0);

        if (isConfigurationkeyEnabled(configurationKeyNum(RCash)))
        {
            RCashTable rCashAcc;

            while select CFMCashBalanceMinimum, AccountNum from rCashAcc
            exists join paymAccList
                where paymAccList.SourceRecId == _journalTable.RecId
                   && paymAccList.SetupSourceType == CFMJournalName::tableIdToSourceType(_journalTable.TableId)
                   && paymAccList.AccountType == CFMPaymentAccountType::Cash_RU
                   && paymAccList.AccountNum == rCashAcc.AccountNum
            {
                accountLimits.insert([queryValue(CFMPaymentAccountType::Cash_RU), queryValue(rCashAcc.AccountNum)], rCashAcc.CFMCashBalanceMinimum);
            }

            accountLimits.insert([queryValue(CFMPaymentAccountType::Bank), queryValue('')], 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>