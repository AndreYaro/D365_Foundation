<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisInquiryHelper_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAnalysisInquiryHelper_PSN</c> class is a form helper class that works with the <c>BudgetAnalysisInquiry_PSN</c> form.
/// </summary>
public class BudgetAnalysisInquiryHelper_PSN
{
    #Define.dimensionCountWarningThreshhold(1000)

    // parameters provided by form
    RefRecId                        selectedDimAttributeValue;
    RefRecId                        dimensionHierarchyRecId;
    BudgetModelId                   budgetModel;
    CurrentOperationsTax            postingLayer;
    BudgetAnalysisColumnSet_PSN     columnSet;
    TransDate                       startDate, endDate;
    Name                            filterDimensionAttribute;
    str                             filterDimensionAttributeValue;
    DimensionAttribute              dimAttributeForFilter;
    DimensionHierarchyLevel         dimHierLevelForFilter;

    BudgetAnalysisDimensionNode_PSN budgetAnalysisDimensionNode;

    int                             dimensionSetLevelCount;
    boolean                         isInitializingTreeControl;
    Map                             budgetAnalysisBalanceListCache;
    Map                             mapDimensionAttributeDetailsNames, mapDimensionAttributeSummaryNames;
    Name                            dimensionAttributeNameDetail, dimensionAttributeNameSummary;

    NoYes                           doIncludeClosingEntries;
    boolean                         hasChildNodes;
    TreeItemIdx                     parentItemIdx;

    // Parameter list is packable
    #define.CurrentVersion(3)
    #localmacro.CurrentList
        postingLayer,
        columnSet,
        startDate,
        endDate,
        dimensionSetLevelCount,
        filterDimensionAttribute,
        filterDimensionAttributeValue,
        dimensionHierarchyRecId,
        doIncludeClosingEntries
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetAnalysisBalanceToCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a list of <c>BudgetAnalysisBalance_PSN</c> instances to the cache.
    /// </summary>
    /// <param name="_budgetAnalysisBalances">
    ///    A list of <c>BudgetAnalysisBalance_PSN</c> instances to be cached.
    /// </param>
    protected void addBudgetAnalysisBalanceToCache(List _budgetAnalysisBalances)
    {
        str cacheKey = this.getCacheKey();

        // Insert the budget analysis balance list to add it to the cache or update the existing cache for the cache key.
        budgetAnalysisBalanceListCache.insert(cacheKey, _budgetAnalysisBalances);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionAttributeValueLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object to use for filling and validating a lookup of dimension attrbute values.
    /// </summary>
    /// <param name="_forCount">
    /// A <c>Boolean</c> value that signifies whether the query should be a count.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object with all necessary joins and ranges to lookup dimension attribute values.
    /// </returns>
    public Query buildDimensionAttributeValueLookupQuery(boolean _forCount = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsEntityView, qbdsDimAttrValue, qbdsDimHierLevel, qbdsDimAttrLevelValue;
        QueryBuildDataSource    qbdsDimAttrGroupComb, qbdsMainAccountView, qbdsLevelCountView;

        qbdsEntityView = query.addDataSource(dimAttributeForFilter.BackingEntityType);

        if (_forCount)
        {
            qbdsEntityView.addSelectionField(fieldName2id(dimAttributeForFilter.BackingEntityType, dimAttributeForFilter.BackingEntityKeyFieldName), SelectionField::Count);
        }
        else
        {
            qbdsEntityView.addSelectionField(dimAttributeForFilter.ValueAttribute);
            qbdsEntityView.addSelectionField(dimAttributeForFilter.NameAttribute);
            qbdsEntityView.addSelectionField(dimAttributeForFilter.KeyAttribute);
            qbdsEntityView.addSortField(dimAttributeForFilter.ValueAttribute);
        }

        qbdsDimAttrValue = qbdsEntityView.addDataSource(tableNum(DimensionAttributeValue));
        qbdsDimAttrValue.addLink(dimAttributeForFilter.KeyAttribute, fieldNum(DimensionAttributeValue, EntityInstance));
        qbdsDimAttrValue.joinMode(JoinMode::ExistsJoin);

        qbdsDimHierLevel = qbdsDimAttrValue.addDataSource(tableNum(DimensionHierarchyLevel));
        qbdsDimHierLevel.addLink(fieldNum(DimensionAttributeValue, DimensionAttribute), fieldNum(DimensionHierarchyLevel, DimensionAttribute));
        qbdsDimHierLevel.joinMode(JoinMode::ExistsJoin);
        BudgetAnalysisInquiryHelper_PSN::addDimensionHierarchyLevelRanges(query, dimensionHierarchyRecId, dimHierLevelForFilter.Level);

        qbdsDimAttrLevelValue = qbdsDimAttrValue.addDataSource(tableNum(DimensionAttributeLevelValue));
        qbdsDimAttrLevelValue.addLink(fieldNum(DimensionAttributeValue, RecId), fieldNum(DimensionAttributeLevelValue, DimensionAttributeValue));
        qbdsDimAttrLevelValue.joinMode(JoinMode::ExistsJoin);

        qbdsLevelCountView = qbdsDimAttrLevelValue.addDataSource(tableNum(BudgetAnalysisAttributeLevelCount_PSN));
        qbdsLevelCountView.addLink(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup), fieldNum(BudgetAnalysisAttributeLevelCount_PSN, DimensionAttributeValueGroup));
        qbdsLevelCountView.joinMode(JoinMode::ExistsJoin);
        BudgetAnalysisInquiryHelper_PSN::addLevelCountRange(query, dimensionSetLevelCount);

        qbdsDimAttrGroupComb = qbdsDimAttrLevelValue.addDataSource(tableNum(DimensionAttributeValueGroupCombination));
        qbdsDimAttrGroupComb.addLink(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup), fieldNum(DimensionAttributeValueGroupCombination, DimensionAttributeValueGroup));
        qbdsDimAttrGroupComb.joinMode(JoinMode::ExistsJoin);

        qbdsMainAccountView = qbdsDimAttrGroupComb.addDataSource(tableNum(MainAccountLedgerDimensionView));
        qbdsMainAccountView.addLink(fieldNum(DimensionAttributeValueGroupCombination, DimensionAttributeValueCombination), fieldNum(MainAccountLedgerDimensionView, LedgerDimensionId));
        qbdsMainAccountView.joinMode(JoinMode::ExistsJoin);
        BudgetAnalysisInquiryHelper_PSN::addAccountTypeRange(query, this.parmColumnSet());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a count of the dimension values that will be loaded with the current
    /// settings and warns the user if the count is higher than the defined threshhold.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionNode">
    /// A <c>BudgetAnalysisDimensionNode_PSN</c> object that contains the tree node to count children nodes for.
    /// </param>
    /// <returns>
    /// true if the count is equal to or below the warning threshhold or if the user clicks the <c>Ok</c> button on the warning dialog; otherwise, false.
    /// </returns>
    public boolean checkDimensionCount(BudgetAnalysisDimensionNode_PSN _budgetAnalysisDimensionNode)
    {
        boolean         isCountOk = true;
        int             dimensionCount;
        DialogButton    button;

        dimensionCount = BudgetAnalysisInquiryHelper_PSN::getDimensionAttributeValueCount(_budgetAnalysisDimensionNode.pack(), this.pack());

        if (dimensionCount > #dimensionCountWarningThreshhold)
        {
            button = Box::okCancel(strFmt("@GLS150479", #dimensionCountWarningThreshhold), DialogButton::Ok);
            isCountOk = button == DialogButton::Ok;
        }

        return isCountOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysisBalanceFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list that contains instances of the <c>BudgetPeriodBalance</c> class from the cache.
    /// </summary>
    /// <returns>
    ///    A list containing instances of the <c>BudgetAnalysisBalance</c> class that contains all required budget amounts.
    /// </returns>
    private List getBudgetAnalysisBalanceFromCache()
    {
        List budgetPeriodBalances = new List(Types::Class);

        str cacheKey = this.getCacheKey();

        if (budgetAnalysisBalanceListCache.exists(cacheKey))
        {
            budgetPeriodBalances = budgetAnalysisBalanceListCache.lookup(cacheKey);
        }

        return budgetPeriodBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysisSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the passed on tempDB table buffer with the aggregated <c>AmountMST</c>
    ///    values either by obtaining from cache or calculating them by querying database.
    /// </summary>
    /// <param name="_budgetAnalysisSummaryTmp">
    ///     The <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer to store <c>AmountMST</c> values.
    /// </param>
    /// <param name="_budgetAnalysisSummaryTmpTotals">
    ///     The <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer to store sum of <c>AmountMST</c> values.
    /// </param>
    /// <param name="_getBudgetAnalysisBalanceFromCache">
    ///    A <c>Boolean</c> value which mentions whether the budget analysis balances can be obtained from cache; optional.
    /// </param>
    public void getBudgetAnalysisSummary(BudgetAnalysisSummaryTmp_PSN _budgetAnalysisSummaryTmp,
                                         BudgetAnalysisSummaryTmp_PSN _budgetAnalysisSummaryTmpTotals,
                                         boolean _getBudgetAnalysisBalanceFromCache = true)
    {
        List                            budgetAnalysisBalancesList = new List(Types::Class);
        container                       budgetAnalysisBalancesListCon;
        int                             currentLevel;

        if (_getBudgetAnalysisBalanceFromCache)
        {
            budgetAnalysisBalancesList = this.getBudgetAnalysisBalanceFromCache();
        }
        else
        {
            this.removeBudgetAnalysisBalanceFromCache();
        }

        if (budgetAnalysisBalancesList.elements() <= 0)
        {
            // If the key is not found in the cache, get the packed list of BudgetAnalysisBalance_PSN objects
            budgetAnalysisBalancesListCon = BudgetAnalysisInquiryHelper_PSN::getBudgetAnalysis(this.pack(),
                                                                                                        this.parmBudgetAnalysisDimensionNode().pack(),
                                                                                                        _budgetAnalysisSummaryTmp);

            // The obtained list is added to the cache.
            this.addBudgetAnalysisBalanceToCache(List::create(budgetAnalysisBalancesListCon));

            BudgetAnalysisInquiryHelper_PSN::updateTotals(_budgetAnalysisSummaryTmp,
                                                            _budgetAnalysisSummaryTmpTotals,
                                                            budgetAnalysisBalancesListCon,
                                                            this.parmBudgetAnalysisDimensionNode().pack(),
                                                            this.parmColumnSet(),
                                                            true);
        }
        else
        {
            BudgetAnalysisInquiryHelper_PSN::updateTotals(_budgetAnalysisSummaryTmp,
                                                            _budgetAnalysisSummaryTmpTotals,
                                                            budgetAnalysisBalancesList.pack(),
                                                            this.parmBudgetAnalysisDimensionNode().pack(),
                                                            this.parmColumnSet());
        }

        // update dimension names
        currentLevel = this.parmBudgetAnalysisDimensionNode().parmCurrentLevel();
        dimensionAttributeNameDetail  = mapDimensionAttributeDetailsNames.lookup(currentLevel);
        dimensionAttributeNameSummary = mapDimensionAttributeSummaryNames.lookup(currentLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cache key to access the <c>BudgetAnalysisBalance_PSN</c> objects cache.
    /// </summary>
    /// <returns>
    ///    The cache key to use to access the <c>BudgetAnalysisBalance_PSN</c> objects cache.
    /// </returns>
    /// <remarks>
    ///    CacheKey = {Dimension set + DimensionAttributeValueStr + column set + budget model + posting layer + start date + end date}
    /// </remarks>
    protected str getCacheKey()
    {
        str string;

        string = this.parmBudgetAnalysisDimensionNode().parmDimAttributeValueStr();

        return strFmt('%1|%2|%3|%4|%5|%6',
                    this.parmDimensionHierarchyRecId(),
                    this.parmBudgetAnalysisDimensionNode().parmDimAttributeValueStr(),
                    this.parmColumnSet(),
                    this.parmPostingLayer(),
                    this.parmStartDate(),
                    this.parmEndDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeNameDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the dimension name for the details grid.
    /// </summary>
    /// <returns>
    /// A <c>Name</c> extended data type value representing financial dimension name.
    /// </returns>
    public Name getDimensionAttributeNameDetail()
    {
        return dimensionAttributeNameDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeNameSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the dimension name for the summary grid.
    /// </summary>
    /// <returns>
    /// A <c>Name</c> extended data type value representing financial dimension name.
    /// </returns>
    public Name getDimensionAttributeNameSummary()
    {
        return dimensionAttributeNameSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionSetLevelCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of levels in the currently selected dimension set.
    /// </summary>
    /// <returns>
    /// An <c>Integer</c> value representing the number of levels in the currently selected dimension set.
    /// </returns>
    public int getDimensionSetLevelCount()
    {
        return dimensionSetLevelCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsInitializingTreeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>Boolean</c> value signifying whether the tree control is currently being initialized.
    /// </summary>
    /// <returns>
    /// true if the tree control is currently being initialized; otherwise, false.
    /// </returns>
    public boolean getIsInitializingTreeControl()
    {
        return isInitializingTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionAttributeNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the financial dimension names and inserts into respective <c>Map</c> objects for both grids.
    /// </summary>
    public void initDimensionAttributeNames()
    {
        DimensionHierarchyLevel dimensionHierarchyLevel;
        DimensionAttribute      dimensionAttribute;
        int                     level;
        int                     levelCount = this.getDimensionSetLevelCount();

        mapDimensionAttributeDetailsNames = new Map(Types::Integer, Types::String);
        mapDimensionAttributeSummaryNames = new Map(Types::Integer, Types::String);

        // insert empty strings in order to default to original label
        // when the root node or the leaf node is selected
        mapDimensionAttributeSummaryNames.insert(0, '');
        mapDimensionAttributeDetailsNames.insert(levelCount, '');

        // loop through all levels of the selected finanical dimension set
        for (level = 1; level <= levelCount; level++)
        {
            select firstonly DimensionAttribute from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == dimensionHierarchyRecId
                    && dimensionHierarchyLevel.Level == level;

            if (dimensionHierarchyLevel)
            {
                // get the dimension attribute name for the bottom summary grid
                dimensionAttribute = DimensionAttribute::find(dimensionHierarchyLevel.DimensionAttribute);
                mapDimensionAttributeSummaryNames.insert(level, dimensionAttribute.Name);

                // same attribute name is valid for the main details grid's previous level
                mapDimensionAttributeDetailsNames.insert(level-1, dimensionAttribute.Name);
            }
            else
            {
                Debug::assert(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTreeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed in <c>FormTreeControl</c> with a root node and the first level of dimension attribute nodes.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The <c>FormTreeControl</c> to initialize.
    /// </param>
    public void initTreeControl(FormTreeControl _formTreeControl)
    {
        if (_formTreeControl)
        {
            isInitializingTreeControl = true;

            _formTreeControl.deleteAll();
            this.insertTreeNodes(_formTreeControl, -1);
            _formTreeControl.select(_formTreeControl.getRoot());
            _formTreeControl.expand(_formTreeControl.getRoot());

            isInitializingTreeControl = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTreeNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts nodes into the passed in <c>FormTreeControl</c> that are children of the node with the passed in <c>TreeItemIdx</c> value.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The <c>FormTreeControl</c> to insert nodes into.
    /// </param>
    /// <param name="_parentTreeNodeIdx">
    /// The <c>TreeItemIdx</c> value of the node that is the parent of the nodes to be inserted.
    /// </param>
    /// <remarks>
    /// If _parentTreeNodeIdx is less than zero then a root node will be inserted prior to inserting the first level children.
    /// </remarks>
    /// <returns>
    /// true if selected node has children; otherwise, false.
    /// </returns>
    public boolean insertTreeNodes(FormTreeControl _formTreeControl, TreeItemIdx _parentTreeNodeIdx)
    {
        Map                             childAttributesMap  = new Map(Types::Int64, Types::Container);
        TreeItemIdx                     prevItemIdx;
        BudgetAnalysisDimensionNode_PSN parentNode, childNode;
        container                       childNodeContainer;
        ListEnumerator                  childNodesListEnumerator;
        FormTreeItem                    formTreeItemChild, formTreeItemParent;
        int                             currentLevel;

        if (_parentTreeNodeIdx < 0)
        {
            parentNode  = this.initializeParentNode();
        }
        else
        {
            formTreeItemParent  = _formTreeControl.getItem(_parentTreeNodeIdx);
            parentNode          = formTreeItemParent.data();
        }

        currentLevel = parentNode.parmCurrentLevel() + 1;

        if ((currentLevel <= dimensionSetLevelCount) && (parentNode.parmChildMap().empty()) && (_formTreeControl) && (this.checkDimensionCount(parentNode)))
        {
            childNodeContainer = BudgetAnalysisInquiryHelper_PSN::retrieveDimensionNodes(parentNode.pack(), this.pack());

            if (childNodeContainer != conNull())
            {
                if (_parentTreeNodeIdx < 0)
                {
                    formTreeItemParent = new FormTreeItem();
                    formTreeItemParent.data(parentNode);
                    formTreeItemParent.text(parentNode.getNodeText());
                    parentItemIdx = _formTreeControl.addItem(FormTreeAdd::Root, 0, formTreeItemParent);
                }
                else
                {
                    parentItemIdx = _parentTreeNodeIdx;
                }

                prevItemIdx = parentItemIdx;

                childNodesListEnumerator = List::create(childNodeContainer).getEnumerator();
                while (childNodesListEnumerator.moveNext())
                {
                    childNode = BudgetAnalysisDimensionNode_PSN::create(childNodesListEnumerator.current());

                    formTreeItemChild = new FormTreeItem();
                    formTreeItemChild.text(childNode.getNodeText());
                    formTreeItemChild.data(childNode);
                    formTreeItemChild.children(dimensionSetLevelCount - currentLevel);
                    prevItemIdx = _formTreeControl.addItem(parentItemIdx, prevItemIdx, formTreeItemChild);

                    childAttributesMap.insert(childNode.parmDimAttributeValueRecId(), [childNode.parmDimAttributeValue(), childNode.parmDimAttributeName()]);
                }

                parentNode.parmChildMap(childAttributesMap);
                formTreeItemParent.data(parentNode);
                hasChildNodes = true;
            }
            else
            {
                hasChildNodes = false;
            }
        }
        return hasChildNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the data for the first node in the tree control.
    /// </summary>
    /// <returns>
    /// The created Parent node.
    /// </returns>
    protected BudgetAnalysisDimensionNode_PSN initializeParentNode()
    {
        BudgetAnalysisDimensionNode_PSN parentNode = new BudgetAnalysisDimensionNode_PSN();
        CompanyInfo companyInfo = CompanyInfo::find();

        parentNode.parmDimAttributeValueRecId(-1);
        parentNode.parmCurrentLevel(0);
        parentNode.parmIsLeafNode(false);
        parentNode.parmDimAttributeName(companyInfo.Name);
        parentNode.parmDimAttributeValue(companyInfo.DataArea);

        return parentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of dimension attribute values.
    /// </summary>
    /// <param name="_formStringControl">
    /// The <c>FormStringControl</c> to perform the lookup for.
    /// </param>
    public void lookupDimensionAttributeValue(FormStringControl _formStringControl)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(dimAttributeForFilter.BackingEntityType, _formStringControl);
        Query                   query           = this.buildDimensionAttributeValueLookupQuery();

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(dimAttributeForFilter.ValueAttribute);

        LedgerDimensionTranslationLookupHelper::addLookupTranslation(sysTableLookup, dimAttributeForFilter.RecId);

        sysTableLookup.addSelectionField(dimAttributeForFilter.ValueAttribute);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        budgetAnalysisBalanceListCache = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method packs the <c>BudgetAnalysisBalanceInquiryHelper_PSN</c> class variables.
    /// </summary>
    public final container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetAnalysisDimensionNode</Name>
				<Source><![CDATA[
    public BudgetAnalysisDimensionNode_PSN parmBudgetAnalysisDimensionNode(BudgetAnalysisDimensionNode_PSN _budgetAnalysisDimensionNode = budgetAnalysisDimensionNode)
    {
        budgetAnalysisDimensionNode = _budgetAnalysisDimensionNode;

        return budgetAnalysisDimensionNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModel</Name>
				<Source><![CDATA[
    [SysObsolete('', true, 31\01\2016)]
    public BudgetModelId parmBudgetModel(BudgetModelId _budgetModel = budgetModel)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnSet</Name>
				<Source><![CDATA[
    public BudgetAnalysisColumnSet_PSN parmColumnSet(BudgetAnalysisColumnSet_PSN _columnSet = columnSet)
    {
        columnSet = _columnSet;

        return columnSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionHierarchyRecId</Name>
				<Source><![CDATA[
    public RefRecId parmDimensionHierarchyRecId(RefRecId _dimensionHierarchyRecId = dimensionHierarchyRecId)
    {
        if (!prmisDefault(_dimensionHierarchyRecId))
        {
            dimensionHierarchyRecId = _dimensionHierarchyRecId;

            dimensionSetLevelCount = DimensionHierarchy::getLevelCount(dimensionHierarchyRecId);
        }

        return dimensionHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoIncludeClosingEntries</Name>
				<Source><![CDATA[
    public NoYes parmDoIncludeClosingEntries(NoYes _doIncludeClosingEntries = doIncludeClosingEntries)
    {
        doIncludeClosingEntries = _doIncludeClosingEntries;

        return doIncludeClosingEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterDimensionAttribute</Name>
				<Source><![CDATA[
    public Name parmFilterDimensionAttribute(Name _filterDimensionAttribute = filterDimensionAttribute)
    {
        if (!prmisDefault(_filterDimensionAttribute))
        {
            filterDimensionAttribute = _filterDimensionAttribute;

            dimAttributeForFilter = DimensionAttribute::findByName(filterDimensionAttribute);
            dimHierLevelForFilter = DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(dimensionHierarchyRecId, dimAttributeForFilter.RecId);
        }

        return filterDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterDimensionAttributeValue</Name>
				<Source><![CDATA[
    public Name parmFilterDimensionAttributeValue(Name _filterDimensionAttributeValue = filterDimensionAttributeValue)
    {
        filterDimensionAttributeValue = _filterDimensionAttributeValue;

        return filterDimensionAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;

        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedDimAttributeValue</Name>
				<Source><![CDATA[
    public RefRecId parmSelectedDimAttributeValue(RefRecId _selectedDimAttributeValue = selectedDimAttributeValue)
    {
        selectedDimAttributeValue = _selectedDimAttributeValue;

        return selectedDimAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBudgetAnalysisBalanceFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a list of <c>BudgetAnalysisBalance_PSN</c> instances from the cache.
    /// </summary>
    protected void removeBudgetAnalysisBalanceFromCache()
    {
        budgetAnalysisBalanceListCache.remove(this.getCacheKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatesByInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date and end date parameters based on the passed in date interval.
    /// </summary>
    /// <param name="_dateCode">
    /// The <c>DateCode</c> value of the selected period code.
    /// </param>
    /// <returns>
    ///    true if passed in date interval code is valid; otherwise, fasle.
    /// </returns>
    public boolean setDatesByInterval(DateCode _dateCode)
    {
        LedgerPeriodCode    ledgerPeriodCode;
        boolean             isValid;

        if (strLen(_dateCode) > 0 && LedgerPeriodCode::checkExist(_dateCode))
        {
            ledgerPeriodCode  = LedgerPeriodCode::find(_dateCode);

            startDate = ledgerPeriodCode.fromDate();
            endDate   = ledgerPeriodCode.toDate();
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the container and initializes the class variables of the <c>BudgetAnalysisBalance_PSN</c> object
    ///    that is called.
    /// </summary>
    /// <param name="_packedBudgetAnalysisInquiryHelper">
    ///    A supplied container.
    /// </param>
    /// <returns>
    ///    A Boolean value that shows whether the unpack was success.
    /// </returns>
    public final boolean unpack(container _packedBudgetAnalysisInquiryHelper)
    {
        int version = conPeek(_packedBudgetAnalysisInquiryHelper, 1);

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, #CurrentList] = _packedBudgetAnalysisInquiryHelper;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateRangeOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the passed in <c>FromDate</c> value is less than or equal to the passed
    /// in <c>ToDate</c> value raising the appropriate info log message if not.
    /// </summary>
    /// <param name="_fromDate">
    /// The <c>FromDate</c> value to validate.
    /// </param>
    /// <param name="_toDate">
    /// The <c>ToDate</c> value to validate.
    /// </param>
    /// <returns>
    /// true if the passed in <c>FromDate</c> value is less than or equal to the passed in <c>ToDate</c> value; otherwise false.
    /// </returns>
    public boolean validateDateRangeOrder(FromDate _fromDate, ToDate _toDate)
    {
        boolean isValid = true;

        if (_fromDate > _toDate)
        {
            isValid = checkFailed("@GLS150262");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionAttributeValueFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the passed in value is a valid dimension attribute value.
    /// </summary>
    /// <param name="_dimensionAttributeValue">
    /// A <c>String</c> value
    /// </param>
    /// <returns>
    /// true if the passed in value is valid; otherwise, false.
    /// </returns>
    public boolean validateDimensionAttributeValueFilter(str _dimensionAttributeValue)
    {
        Query       query = this.buildDimensionAttributeValueLookupQuery(true);
        QueryRun    queryRun;

        BudgetAnalysisInquiryHelper_PSN::addDimensionFilterRange(query, this.parmFilterDimensionAttribute(), _dimensionAttributeValue);

        queryRun = new QueryRun(query);
        queryRun.next();

        return queryRun.get(dimAttributeForFilter.BackingEntityType).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed in <c>DimensionSetName</c> value is valid and raises the appropriate info log message if it is not.
    /// </summary>
    /// <param name="_dimensionSetName">
    /// The <c>DimensionSetName</c> value to validate.
    /// </param>
    /// <returns>
    /// true if the passed in <c>DimensionSetName</c> is valid; otherwise false.
    /// </returns>
    public boolean validateDimensionSet(DimensionSetName _dimensionSetName)
    {
        boolean isValid = true;

        if ((strLen(_dimensionSetName) > 0) && (!DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _dimensionSetName)))
        {
            isValid = checkFailed(strFmt("@SYS333565", _dimensionSetName));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAccountTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the passed in <c>Query</c> object to limit its results to revenue or expense main accounts
    /// based onthe passed in <c>BudgetAnalysisColumnSet_PSN</c> value.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_budgetAnalysisColumnSet">
    /// The <c>BudgetAnalysisColumnSet_PSN</c> value that determines which type of main account to add the range for.
    /// </param>
    public static void addAccountTypeRange(Query _query, BudgetAnalysisColumnSet_PSN _budgetAnalysisColumnSet)
    {
        QueryBuildDataSource qbdsMainAccountView = _query.dataSourceTable(tableNum(MainAccountLedgerDimensionView));

        if (qbdsMainAccountView)
        {
            if ((_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::ExpenseBudget)
                || (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward)
                || (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::OperatingResults))
            {
                qbdsMainAccountView.addRange(fieldNum(MainAccountLedgerDimensionView, Type)).value(queryValue(DimensionLedgerAccountType::Expense));
            }

            if ((_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::RevenueBudget)
                || (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::OperatingResults))
            {
                qbdsMainAccountView.addRange(fieldNum(MainAccountLedgerDimensionView, Type)).value(queryValue(DimensionLedgerAccountType::Revenue));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the passed in <c>Query</c> object to limit its results to revenue or expense type budget lines
    /// based on the passed in <c>BudgetAnalysisColumnSet_PSN</c> value.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_budgetAnalysisColumnSet">
    /// The <c>BudgetAnalysisColumnSet_PSN</c> value that determines which type of main account to add the range for.
    /// </param>
    /// <param name="_budgetModelId">
    /// The <c>BudgetModelId</c> value.
    /// </param>
    public static void addBudgetTypeRange(Query _query, BudgetAnalysisColumnSet_PSN _budgetAnalysisColumnSet, BudgetModelId _budgetModel = '')
    {
        QueryBuildDataSource        qbdsBudgetTransactionHeader, qbdsBudgetTransactionLine;
        QueryBuildDataSource        qbdsDimAttrValComb = _query.dataSourceTable(tableNum(DimensionAttributeValueCombination));

        if (qbdsDimAttrValComb)
        {
            qbdsBudgetTransactionLine = qbdsDimAttrValComb.addDataSource(tableNum(BudgetTransactionLine));
            qbdsBudgetTransactionLine.relations(true);
            qbdsBudgetTransactionLine.joinMode(JoinMode::ExistsJoin);

            if (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::ExpenseBudget
                || _budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward
                || _budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::OperatingResults)
            {
                qbdsBudgetTransactionLine.addRange(fieldNum(BudgetTransactionLine, BudgetType)).value(queryValue(BudgetType::Expense));
            }

            if (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::RevenueBudget
                || _budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::OperatingResults)
            {
                qbdsBudgetTransactionLine.addRange(fieldNum(BudgetTransactionLine, BudgetType)).value(queryValue(BudgetType::Revenue));
            }

            qbdsBudgetTransactionHeader = qbdsBudgetTransactionLine.addDataSource(tableNum(BudgetTransactionHeader));
            qbdsBudgetTransactionHeader.relations(true);
            qbdsBudgetTransactionHeader.joinMode(JoinMode::ExistsJoin);
            qbdsBudgetTransactionHeader.addRange(fieldNum(BudgetTransactionHeader, TransactionStatus)).value(queryValue(BudgetTransactionStatus::Completed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCompanyRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the passed in <c>Query</c> object that avoids duplicate accounts for the company.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    public static void addCompanyRange(Query _query)
    {
        QueryBuildDataSource    qbdsDimAttributeMainAccount;

        qbdsDimAttributeMainAccount = _query.dataSourceTable(tableNum(DimAttributeMainAccount));

        if (qbdsDimAttributeMainAccount)
        {
            qbdsDimAttributeMainAccount.addRange(fieldNum(DimAttributeMainAccount, Category)).value(queryValue(LedgerChartOfAccounts::current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionFilterRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the passed in <c>Query</c> object to filter the results to dimension attribute value combinations
    /// that contain the passed in dimension atttribute value.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_dimensionAttributeName">
    /// The name of the dimension attribute to use in the range.
    /// </param>
    /// <param name="_filterValue">
    /// The dimension attribute value to use in the range.
    /// </param>
    static void addDimensionFilterRange(Query _query, Name _dimensionAttributeName, str _filterValue)
    {
        QueryBuildDataSource    qbdsDimensionAttributeLevelValue = _query.dataSourceTable(tableNum(DimensionAttributeLevelValue));
        DimensionAttribute      dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        QueryBuildDataSource    qbdsFilterDataSource;

        if ((qbdsDimensionAttributeLevelValue) && (strLen(_dimensionAttributeName) > 0) && (strLen(_filterValue) > 0))
        {
            dimensionAttribute = DimensionAttribute::findByName(_dimensionAttributeName);
            dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _filterValue);

            qbdsFilterDataSource = qbdsDimensionAttributeLevelValue.addDataSource(tableNum(DimensionAttributeLevelValue));
            qbdsFilterDataSource.addLink(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup), fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup));
            qbdsFilterDataSource.joinMode(JoinMode::ExistsJoin);
            qbdsFilterDataSource.addRange(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValue)).value(queryValue(dimensionAttributeValue.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionHierarchyLevelRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the passed in <c>Query</c> object to limit it to the passed in dimension hierarchy and dimension hierarchy level values.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_dimHierarchyRecID">
    /// A <c>RefRecId</c> value that represents the dimension hierarchy to filter the <c>Query</c> object to.
    /// </param>
    /// <param name="_level">
    /// The level of the dimension hierarchy to filter the <c>Query</c> object to.
    /// </param>
    public static void addDimensionHierarchyLevelRanges(Query _query, RefRecId _dimHierarchyRecID, Level _level)
    {
        QueryBuildDataSource qbdsDimAttributeValue = _query.dataSourceTable(tableNum(DimensionAttributeValue));
        QueryBuildDataSource qbdsDimHierLevel;

        if (qbdsDimAttributeValue)
        {
            qbdsDimHierLevel = qbdsDimAttributeValue.addDataSource(tableNum(DimensionHierarchyLevel), 'DimHier', true);
            qbdsDimHierLevel.addLink(fieldNum(DimensionAttributeValue, DimensionAttribute), fieldNum(DimensionHierarchyLevel, DimensionAttribute));
            qbdsDimHierLevel.joinMode(JoinMode::ExistsJoin);
            qbdsDimHierLevel.fetchMode(QueryFetchMode::One2One);

            qbdsDimHierLevel.addRange(fieldNum(DimensionHierarchyLevel, DimensionHierarchy)).value(queryValue(_dimHierarchyRecID));
            qbdsDimHierLevel.addRange(fieldNum(DimensionHierarchyLevel, Level)).value(queryValue(_level));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEntityInstanceDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a datasource to the passed in <c>Query</c> object that represents the entity instance of the <c>DimensionAttributeValue</c> records being selected.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the datasource to.
    /// </param>
    /// <param name="_backingEntitiyType">
    /// The <c>TableId</c> value of the entity instance table to add to the passed in <c>Query</c> object.
    /// </param>
    /// <param name="_keyAttribute">
    /// The <c>FieldId</c> value of the primary key of the entity instance table to use in creating a link to
    /// the <c>DimensionAttributeValue</c> table in the passed in <c>Query</c> object.
    /// </param>
    /// <param name="_nameAttribute">
    /// The <c>FieldId</c> value of the name field of the entity instance table.
    /// </param>
    /// <param name="_valueAttribute">
    /// The <c>FieldId</c> value of the value field of the entitiy instance table.
    /// </param>
    public static void addEntityInstanceDatasource(Query _query, TableId _backingEntitiyType, FieldId _keyAttribute, FieldId _nameAttribute, FieldId _valueAttribute)
    {
        QueryBuildDataSource qbdsDimAttributeValue = _query.dataSourceTable(tableNum(DimensionAttributeValue));
        QueryBuildDataSource qbdsEntityInstance;

        if (qbdsDimAttributeValue)
        {
            qbdsDimAttributeValue.addAllFields(tableStr(DimensionAttributeValue));

            qbdsEntityInstance = qbdsDimAttributeValue.addDataSource(_backingEntitiyType, 'Entity', true);
            qbdsEntityInstance.fields().dynamic(QueryFieldListDynamic::No);
            qbdsEntityInstance.addSelectionField(_nameAttribute);
            qbdsEntityInstance.addSelectionField(_valueAttribute);
            qbdsEntityInstance.addLink(fieldNum(DimensionAttributeValue, EntityInstance), _keyAttribute);
            qbdsEntityInstance.fetchMode(QueryFetchMode::One2One);
            qbdsEntityInstance.joinMode(JoinMode::InnerJoin);
            qbdsEntityInstance.addOrderByField(_valueAttribute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the passed in <c>Query</c> object to limit the results to only current ledger.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    public static void addLedgerRange(Query _query)
    {
        QueryBuildDataSource    qbdsLedgerStructure, qbdsDimAttrValComb, qbdsDimAttrValGroupComb;

        qbdsDimAttrValGroupComb = _query.dataSourceTable(tableNum(DimensionAttributeValueGroupCombination));

        if (qbdsDimAttrValGroupComb)
        {
            qbdsDimAttrValComb = qbdsDimAttrValGroupComb.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttrValComb.joinMode(JoinMode::ExistsJoin);
            qbdsDimAttrValComb.relations(true);

            qbdsLedgerStructure = qbdsDimAttrValComb.addDataSource(tableNum(LedgerStructure));
            qbdsLedgerStructure.joinMode(JoinMode::ExistsJoin);
            qbdsLedgerStructure.addLink(fieldNum(LedgerStructure, DimensionHierarchy), fieldNum(DimensionAttributeValueCombination, AccountStructure));
            qbdsLedgerStructure.addRange(fieldNum(LedgerStructure, Ledger)).value(queryValue(Ledger::current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLevelCountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the passed in <c>Query</c> object to limit its results to dimension attribute values
    /// that belong to dimension attribute value groups which contain at least a specific number of levels.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_level">
    /// The number of levels to filter the <c>Query</c> to.
    /// </param>
    public static void addLevelCountRange(Query _query, Level _level)
    {
        QueryBuildDataSource    qbdsLevelCount = _query.dataSourceTable(tableNum(BudgetAnalysisAttributeLevelCount_PSN));
        QueryBuildRange         range;

        if (qbdsLevelCount)
        {
            range = qbdsLevelCount.addRange(fieldNum(BudgetAnalysisAttributeLevelCount_PSN, DataAreaId));
            range.value(strFmt('(%1 >= %2)', fieldStr(BudgetAnalysisAttributeLevelCount_PSN, CountOfRecId), queryValue(_level)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParentageRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the passed in <c>Query</c> object to limit the results to only be
    /// dimensions that belong to groups containing the passed in dimension attribute values.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object to add the ranges to.
    /// </param>
    /// <param name="_parentageList">
    /// A <c>List</c> object that contains a list of <c>RecId</c> values from the <c>DimensionAttributeValue</c> table.
    /// </param>
    public static void addParentageRanges(Query _query, List _parentageList)
    {
        ListEnumerator          parentageListEnumerator;
        RefRecId                dimAttributeValueRecId;
        QueryBuildDataSource    qbdsDimAttributeLevelValue, qbdsDimAttrValGrpComb;

        qbdsDimAttrValGrpComb = _query.dataSourceTable(tableNum(DimensionAttributeValueGroupCombination));

        if ((qbdsDimAttrValGrpComb) && (!_parentageList.empty()))
        {
            parentageListEnumerator = _parentageList.getEnumerator();
            while (parentageListEnumerator.moveNext())
            {
                dimAttributeValueRecId = parentageListEnumerator.current();

                qbdsDimAttributeLevelValue = qbdsDimAttrValGrpComb.addDataSource(tableNum(DimensionAttributeLevelValue));
                qbdsDimAttributeLevelValue.joinMode(JoinMode::ExistsJoin);
                qbdsDimAttributeLevelValue.addLink(fieldNum(DimensionAttributeValueGroupCombination, DimensionAttributeValueGroup), fieldNum(DimensionAttributeLevelValue, DimensionAttributeValueGroup));
                qbdsDimAttributeLevelValue.addRange(fieldNum(DimensionAttributeLevelValue, DimensionAttributeValue)).value(queryValue(dimAttributeValueRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetAnalysisInquiryHelper_PSN">
    /// A <c>Container</c> object that contains a packed <c>BudgetAnalysisInquiryHelper_PSN</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetAnalysisInquiryHelper_PSN</c> class.
    /// </returns>
    public static BudgetAnalysisInquiryHelper_PSN create(container _packedBudgetAnalysisInquiryHelper_PSN)
    {
        BudgetAnalysisInquiryHelper_PSN budgetAnalysisInquiryHelper;

        if (_packedBudgetAnalysisInquiryHelper_PSN != conNull())
        {
            budgetAnalysisInquiryHelper = new BudgetAnalysisInquiryHelper_PSN();
            budgetAnalysisInquiryHelper.unpack(_packedBudgetAnalysisInquiryHelper_PSN);
        }

        return budgetAnalysisInquiryHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeValueCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a count of the dimension attribute values that will be returned based on the passed in values.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionNode">
    /// A <c>Container</c> object that contains the <c>BudgetAnalysisDimensionNode_PSN</c> object
    /// of the tree node to count children nodes for.
    /// </param>
    /// <param name="_budgetAnalysisInquiryHelper">
    /// A <c>Container</c> object that contains a <c>BudgetAnalysisInquiryFormHelper_PSN</c> object
    /// that holds parameter values from the form.
    /// </param>
    /// <returns>
    /// A count of dimension attribute values.
    /// </returns>
    static int getDimensionAttributeValueCount(container _budgetAnalysisDimensionNode, container _budgetAnalysisInquiryHelper)
    {
        Query                           query       = new Query(queryStr(BudgetAnalysisDimensionTree_PSN));
        BudgetAnalysisDimensionNode_PSN parentNode  = BudgetAnalysisDimensionNode_PSN::create(_budgetAnalysisDimensionNode);
        BudgetAnalysisInquiryHelper_PSN helperClass = BudgetAnalysisInquiryHelper_PSN::create(_budgetAnalysisInquiryHelper);
        int                             valueCount  = -1;
        DimensionAttributeValue         dimensionAttributeValue;
        QueryRun                        queryRun;
        QueryBuildDataSource            qbdsDimAttributeValue;

        if ((parentNode) && (helperClass))
        {
            qbdsDimAttributeValue = query.dataSourceTable(tableNum(DimensionAttributeValue));
            qbdsDimAttributeValue.fields().clearFieldList();
            qbdsDimAttributeValue.addSelectionField(fieldNum(DimensionAttributeValue, RecId), SelectionField::Count);

            BudgetAnalysisInquiryHelper_PSN::addAccountTypeRange(query, helperClass.parmColumnSet());
            BudgetAnalysisInquiryHelper_PSN::addDimensionHierarchyLevelRanges(query, helperClass.parmDimensionHierarchyRecId(), parentNode.parmCurrentLevel() + 1);
            BudgetAnalysisInquiryHelper_PSN::addLevelCountRange(query, helperClass.getDimensionSetLevelCount());
            BudgetAnalysisInquiryHelper_PSN::addDimensionFilterRange(query, helperClass.parmFilterDimensionAttribute(), helperClass.parmFilterDimensionAttributeValue());

            if (!parentNode.parmParentageList().empty())
            {
                BudgetAnalysisInquiryHelper_PSN::addParentageRanges(query, parentNode.parmParentageList());
            }

            queryRun = new QueryRun(query);
            queryRun.next();

            dimensionAttributeValue = queryRun.get(tableNum(DimensionAttributeValue));
            valueCount = int642int(dimensionAttributeValue.RecId);
        }

        return valueCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the reference form for the specified lookup record.
    /// </summary>
    /// <param name="_lookupRecord">
    ///    The lookup record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that is calling the reference form.
    /// </param>
    public static void jumpRefLookupRecord(
        Common _lookupRecord,
        Object _caller)
    {
        MenuItemNameDisplay formRef;
        MenuFunction        menuFunction;
        Args                args;

        if (_lookupRecord)
        {
            switch (_lookupRecord.TableId)
            {
                case tableNum(CustInvoiceTable):
                    formRef = menuitemDisplayStr(CustFreeInvoice);
                break;

                case tableNum(PurchTable):
                    formRef = menuitemDisplayStr(PurchTable);
                break;

                case tableNum(PurchReqTable):
                    formRef = menuitemDisplayStr(PurchReqTable);
                break;

                case tableNum(TrvExpTrans):
                    formRef = menuitemDisplayStr(TrvExpenses);
                break;

                default:
                    formRef = new DictTable(_lookupRecord.TableId).formRef();
            }

            if (formRef)
            {
                menuFunction = new MenuFunction(formRef, MenuItemType::Display);

                args = new Args();
                args.caller(_caller);
                args.record(_lookupRecord);
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of <c>BudgetAnalysisDimensionNode_PSN</c> for inserting into the tree on the <c>BudgetAnalysisInquiry_PSN</c> form.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionNode">
    /// A <c>Container</c> object that contains the <c>BudgetAnalysisDimensionNode_PSN</c> object
    /// of the tree node to retrieve children nodes for.
    /// </param>
    /// <param name="_budgetAnalysisInquiryHelper">
    /// A <c>Container</c> object that contains a <c>BudgetAnalysisInquiryFormHelper_PSN</c> object
    /// that holds parameter values from the form.
    /// </param>
    /// <returns>
    /// A <c>Container</c> object that is a packed up <c>List</c> object that contains a list of <c>BudgetAnalysisDimensionNode_PSN</c> objects.
    /// </returns>
    static container retrieveDimensionNodes(container _budgetAnalysisDimensionNode, container _budgetAnalysisInquiryHelper)
    {
        Query                               query           = new Query(queryStr(BudgetAnalysisDimensionTree_PSN));
        List                                childNodeList   = new List(Types::Container);
        BudgetAnalysisDimensionNode_PSN     parentNode      = BudgetAnalysisDimensionNode_PSN::create(_budgetAnalysisDimensionNode);
        BudgetAnalysisInquiryHelper_PSN     helperClass     = BudgetAnalysisInquiryHelper_PSN::create(_budgetAnalysisInquiryHelper);
        BudgetAnalysisDimensionNode_PSN     childNode;
        List                                parentageList;
        container                           resultsContainer;
        QueryRun                            queryRun;
        DimensionAttributeValue             dimAttributeValue;
        int                                 currentLevel;
        DimensionAttribute                  dimAttribute;
        DimensionHierarchyLevel             dimHierLevel;
        str                                 dimValue, dimName;
        QueryBuildDataSource                qbdsDimAttrValComb;
        Set                                 childNodeSet = new Set(Types::Int64);
        RefRecId                            mainAccountDimensionAttribute;

        if ((parentNode) && (helperClass))
        {
            currentLevel = parentNode.parmCurrentLevel() + 1;

            select firstonly RecId, BackingEntityType, KeyAttribute, NameAttribute, ValueAttribute
                from dimAttribute
                exists join dimHierLevel
                    where dimHierLevel.DimensionAttribute == dimAttribute.RecId
                        && dimHierLevel.DimensionHierarchy == helperClass.parmDimensionHierarchyRecId()
                        && dimHierLevel.Level == currentLevel;

            query.dataSourceTable(tableNum(DimensionAttributeValue)).addRange(fieldNum(DimensionAttributeValue, DimensionAttribute)).value(queryValue(dimAttribute.RecId));

            BudgetAnalysisInquiryHelper_PSN::addEntityInstanceDatasource(query, dimAttribute.BackingEntityType, dimAttribute.KeyAttribute, dimAttribute.NameAttribute, dimAttribute.ValueAttribute);
            BudgetAnalysisInquiryHelper_PSN::addAccountTypeRange(query, helperClass.parmColumnSet());
            BudgetAnalysisInquiryHelper_PSN::addLevelCountRange(query, helperClass.getDimensionSetLevelCount());
            BudgetAnalysisInquiryHelper_PSN::addDimensionFilterRange(query, helperClass.parmFilterDimensionAttribute(), helperClass.parmFilterDimensionAttributeValue());
            BudgetAnalysisInquiryHelper_PSN::addLedgerRange(query);
            BudgetAnalysisInquiryHelper_PSN::addCompanyRange(query);

            if (!parentNode.parmParentageList().empty())
            {
                BudgetAnalysisInquiryHelper_PSN::addParentageRanges(query, parentNode.parmParentageList());
            }

            mainAccountDimensionAttribute = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                dimAttributeValue = queryRun.get(tableNum(DimensionAttributeValue));

                dimName = dimAttributeValue.getName();
                dimValue = dimAttributeValue.getValue();

                parentageList = List::create(parentNode.parmParentageList().pack());
                parentageList.addEnd(dimAttributeValue.RecId);

                childNode = new BudgetAnalysisDimensionNode_PSN();
                childNode.parmCurrentLevel(currentLevel);
                childNode.parmIsLeafNode(currentLevel == helperClass.getDimensionSetLevelCount());
                childNode.parmDimAttributeValue(dimValue);
                childNode.parmDimAttributeName(dimName);
                childNode.parmDimAttributeValueRecId(dimAttributeValue.RecId);
                childNode.parmParentageList(parentageList);
                childNode.parmDimAttributeValueStr(parentNode.parmDimAttributeValueStr() + dimValue);

                childNodeList.addEnd(childNode.pack());
                childNodeSet.add(dimAttributeValue.RecId);
            }

            if (!DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(helperClass.parmDimensionHierarchyRecId(), mainAccountDimensionAttribute))
            {
                // Disable the MainAccount datasource to retrieve remaining dimensions without main account under the given parentage of the tree node
                query.dataSourceTable(tableNum(MainAccountLedgerDimensionView)).enabled(false);
                qbdsDimAttrValComb = query.dataSourceTable(tableNum(DimensionAttributeValueCombination));

                qbdsDimAttrValComb.addRange(fieldNum(DimensionAttributeValueCombination, MainAccount)).value(queryValue(0));

                BudgetAnalysisInquiryHelper_PSN::addBudgetTypeRange(query, helperClass.parmColumnSet());

                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    dimAttributeValue = queryRun.get(tableNum(DimensionAttributeValue));

                    // some ledger dimensions may exist multiple times with differnt value group combinations without main account
                    // check if that dimension node is not already added in the first iteration with main account type filter
                    if (!childNodeSet.in(dimAttributeValue.RecId))
                    {
                        dimName = dimAttributeValue.getName();
                        dimValue = dimAttributeValue.getValue();

                        parentageList = List::create(parentNode.parmParentageList().pack());
                        parentageList.addEnd(dimAttributeValue.RecId);

                        childNode = new BudgetAnalysisDimensionNode_PSN();
                        childNode.parmCurrentLevel(currentLevel);
                        childNode.parmIsLeafNode(currentLevel == helperClass.getDimensionSetLevelCount());
                        childNode.parmDimAttributeValue(dimValue);
                        childNode.parmDimAttributeName(dimName);
                        childNode.parmDimAttributeValueRecId(dimAttributeValue.RecId);
                        childNode.parmParentageList(parentageList);
                        childNode.parmDimAttributeValueStr(parentNode.parmDimAttributeValueStr() + dimValue);

                        childNodeList.addEnd(childNode.pack());
                    }
                }
            }

            if (!childNodeList.empty())
            {
                resultsContainer = childNodeList.pack();
            }
        }

        return resultsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update totals in the <c>BudgetAnalysisSummaryTmp_PSN</c> temp table buffer and creates summary records if needed.
    /// </summary>
    /// <param name="_budgetAnalysisSummaryTmp">
    /// The <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer to store <c>AmountMST</c> values.
    /// </param>
    /// <param name="_budgetAnalysisSummaryTmpTotals">
    /// The <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer to store sum of <c>AmountMST</c> values.
    /// </param>
    /// <param name="_budgetAnalysisBalancesListCon">
    /// A container with a packed list of the <c>BudgetAnalysisBalance_PSN</c> objects.
    /// </param>
    /// <param name="_budgetAnalysisDimensionNodeCon">
    /// A container with a packed instances of the <c>BudgetAnalysisDimensionNode_PSN</c> class.
    /// </param>
    /// <param name="_budgetAnalysisColumnSet">
    /// A <c>BudgetAnalysisColumnSet_PSN</c> base enumeration value to indicate the selected column set.
    /// </param>
    /// <param name="_skipSummaryTable">
    /// A <c>Boolean</c> value which indicates if the <c>BudgetAnalysisSummaryTmp_PSN</c> buffer for storing summarized values needs to be fill up this time; optional.
    /// </param>
    protected static void updateTotals(BudgetAnalysisSummaryTmp_PSN       _budgetAnalysisSummaryTmp,
                                            BudgetAnalysisSummaryTmp_PSN       _budgetAnalysisSummaryTmpTotals,
                                            container                          _budgetAnalysisBalancesListCon,
                                            container                          _budgetAnalysisDimensionNodeCon,
                                            BudgetAnalysisColumnSet_PSN        _budgetAnalysisColumnSet,
                                            boolean                            _skipSummaryTable = false)
    {
        BudgetAnalysisBalance_PSN       budgetAnalysisBalance;
        BudgetAnalysisDimensionNode_PSN budgetAnalysisDimensionNode;
        ListEnumerator                  budgetAnalysisBalancesListEnumerator;
        RecordInsertList                budgetAnalysisSummaryTmpList;
        List                            budgetAnalysisBalancesList = List::create(_budgetAnalysisBalancesListCon);

        budgetAnalysisDimensionNode = BudgetAnalysisDimensionNode_PSN::create(_budgetAnalysisDimensionNodeCon);

        _budgetAnalysisSummaryTmp.recordLevelSecurity(false);
        _budgetAnalysisSummaryTmpTotals.recordLevelSecurity(false);

        delete_from _budgetAnalysisSummaryTmpTotals;

        if (!_skipSummaryTable)
        {
            delete_from _budgetAnalysisSummaryTmp;

            // fill up the temp summary table
            budgetAnalysisSummaryTmpList = new RecordInsertList(tableNum(BudgetAnalysisSummaryTmp_PSN), false, false, false, false, true, _budgetAnalysisSummaryTmp);
            budgetAnalysisBalancesListEnumerator = budgetAnalysisBalancesList.getEnumerator();
            while (budgetAnalysisBalancesListEnumerator.moveNext())
            {
                budgetAnalysisBalance                               = budgetAnalysisBalancesListEnumerator.current();
                _budgetAnalysisSummaryTmp.DimensionName             = budgetAnalysisBalance.parmDimensionName();
                _budgetAnalysisSummaryTmp.DimensionValue            = budgetAnalysisBalance.parmDimensionValue();
                _budgetAnalysisSummaryTmp.DimensionAttributeValue   = budgetAnalysisBalance.parmDimensionAttributeValueRecId();
                _budgetAnalysisSummaryTmp.RevenueActuals            = budgetAnalysisBalance.parmRevenueActuals();
                _budgetAnalysisSummaryTmp.ExpenseActuals            = budgetAnalysisBalance.parmExpenseActuals();
                _budgetAnalysisSummaryTmp.Encumbrance               = budgetAnalysisBalance.parmEncumbrance();
                _budgetAnalysisSummaryTmp.OriginalBudget            = budgetAnalysisBalance.parmOriginalBudget();
                _budgetAnalysisSummaryTmp.PercentUsed               = budgetAnalysisBalance.parmPercentUsed();
                _budgetAnalysisSummaryTmp.PreEncumbrance            = budgetAnalysisBalance.parmPreEncumbrance();
                _budgetAnalysisSummaryTmp.RemainingBudget           = budgetAnalysisBalance.parmRemainingBudget();
                _budgetAnalysisSummaryTmp.RevisedBudget             = budgetAnalysisBalance.parmRevisedBudget();

                budgetAnalysisSummaryTmpList.add(_budgetAnalysisSummaryTmp);
            }
            budgetAnalysisSummaryTmpList.insertDatabase();
        }

        // caculate summarized totals and fill up the datasource
        // For carry forward the percent used column is used for remaining budget. Include the percent used column in the summary, but zero it out for non carry forward.
        insert_recordset _budgetAnalysisSummaryTmpTotals
            (OriginalBudget, RevisedBudget, ExpenseActuals, RevenueActuals, PreEncumbrance, Encumbrance, RemainingBudget, PercentUsed)
            select sum(OriginalBudget), sum(RevisedBudget), sum(ExpenseActuals), sum(RevenueActuals), sum(PreEncumbrance), sum(Encumbrance), sum(RemainingBudget), sum(PercentUsed) from  _budgetAnalysisSummaryTmp;

        select firstonly forupdate _budgetAnalysisSummaryTmpTotals;

        if (_budgetAnalysisColumnSet != BudgetAnalysisColumnSet_PSN::ExpenseBudgetWithCarryForward)
        {
            _budgetAnalysisSummaryTmpTotals.PercentUsed = 0.00;
        }

        if (_budgetAnalysisSummaryTmpTotals)
        {
            _budgetAnalysisSummaryTmpTotals.DimensionValue = budgetAnalysisDimensionNode.parmDimAttributeValue();
            _budgetAnalysisSummaryTmpTotals.DimensionName  = budgetAnalysisDimensionNode.parmDimAttributeName();

            // calculate the percent column
            if (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::ExpenseBudget && _budgetAnalysisSummaryTmpTotals.RevisedBudget != 0)
            {
                _budgetAnalysisSummaryTmpTotals.PercentUsed = (1 - _budgetAnalysisSummaryTmpTotals.RemainingBudget / _budgetAnalysisSummaryTmpTotals.RevisedBudget) * 100;
            }
            else if (_budgetAnalysisColumnSet == BudgetAnalysisColumnSet_PSN::RevenueBudget && _budgetAnalysisSummaryTmpTotals.RevisedBudget != 0)
            {
                _budgetAnalysisSummaryTmpTotals.PercentUsed = (_budgetAnalysisSummaryTmpTotals.RevenueActuals / _budgetAnalysisSummaryTmpTotals.RevisedBudget * 100);
            }

            _budgetAnalysisSummaryTmpTotals.doUpdate();
        }

        // for leaf node, the summary shouldn't be displayed on the main grid
        if (budgetAnalysisDimensionNode.parmIsLeafNode())
        {
            delete_from _budgetAnalysisSummaryTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a <c>list</c> of the <c>BudgetPeriodBalance</c> objects having aggregated
    ///  <c>AmountMST</c> values by calling <c>BudgetAnalysisInquiryProcessor_PSN</c> server-only class object.
    /// </summary>
    /// <param name="_budgetAnalysisInquiryHelperCon">
    /// A container with a packed instances of the <c>BudgetAnalysisInquiryHelper_PSN</c> class to pass on form parameters.
    /// </param>
    /// <param name="_budgetAnalysisDimensionNodeCon">
    /// A container with a packed instances of the <c>BudgetAnalysisDimensionNode_PSN</c> class.
    /// </param>
    /// <param name="_budgetAnalysisSummaryTmp">
    /// The <c>BudgetAnalysisSummaryTmp_PSN</c> table buffer to store <c>AmountMST</c> values.
    /// </param>
    /// <returns>
    /// A container with a packed <c>list</c> of <c>BudgetAnalysisBalance_PSN</c> class objects.
    /// </returns>
    private static container getBudgetAnalysis(container _budgetAnalysisInquiryHelperCon,
                                                                container _budgetAnalysisDimensionNodeCon,
                                                                BudgetAnalysisSummaryTmp_PSN _budgetAnalysisSummaryTmp)
    {
        BudgetAnalysisInquiryProcessor_PSN  budgetAnalysisInquiryProcessor;

        budgetAnalysisInquiryProcessor = new BudgetAnalysisInquiryProcessor_PSN(_budgetAnalysisInquiryHelperCon);
        budgetAnalysisInquiryProcessor.parmBudgetAnalysisSummaryTmp(_budgetAnalysisSummaryTmp);

        return budgetAnalysisInquiryProcessor.getBudgetAnalysisSummaryFromServer(_budgetAnalysisDimensionNodeCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void jumpRefBudgetReservation(Common _lookupRecord)
    {
        Args args = new Args(formStr(BudgetReservation_PSN));
        args.record(_lookupRecord);

        FormRun formRun = ClassFactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(_lookupRecord);
        formRun.detach();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>