<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PMFSequencingAnalysisEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class perform the main logic for sequencing the planned order from MRP
/// </summary>
public class PMFSequencingAnalysisEngine extends RunBaseBatch implements BatchRetryable
{
    RefRecId                planVersion;
    ReqPlanId               planId;
    Set                     wrkCtrList;
    int                     bucketSize;
    TransDate               maxRange;
    TransDate               minRange;
    boolean                 runSequencing;
    DialogField             planIdField;
    ReqPlanSched            planSched;
    TransDate               bucketFromDate;
    TransDate               bucketToDate;
    int                     bucketNo;
    TransDate               todaysDate;    

    utcDateTime             prevSeqRouteEndDateTime;

    PMFSeqTmpBuffer         pmfSeqTmpBuffer;

    protected WrkCtrTable   currentWrkCtrTable;

    #TimeConstants

    #define.CurrentVersion(7)
    #localMacro.CurrentList
        bucketSize,
        planVersion,
        planId
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// The name of the class for batch process identification
    /// </summary>
    /// <returns>
    /// A string containing the caption of this class.
    /// </returns>
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = "@PSC247";

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearChanges</Name>
				<Source><![CDATA[
    private void clearChanges()
    {
        PMFSeqReqRouteChanges   reqRouteChanges;

        ttsBegin;

        delete_from reqRouteChanges
            where reqRouteChanges.PlanVersion == planVersion;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReservations</Name>
				<Source><![CDATA[
    private void clearReservations()
    {
        PMFSeqWrkCtrCapRes          capRes;

        ttsBegin;

        delete_from capRes
            where capRes.PlanVersion     == planVersion;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpRankList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the list of work centers to be processed and ranks the operations.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTmpRankList()
    {
        ReqRouteSchedulingView  reqRouteSchedulingView;
        WrkCtrTable             wrkCtrTable;
        ReqRoute                reqRoute;
        WrkCtrId                wrkCtrId;

        if (!wrkCtrList)
        {
            wrkCtrList = new Set(Types::String);
        }

        ttsBegin;

        while select PlanVersion, RefId, OprNum, OprPriority, FromDate
            from reqRouteSchedulingView
            order by WrkCtrId, OprNum, FromDate
            where  reqRouteSchedulingView.PlanVersion == planVersion
                && reqRouteSchedulingView.FromDate    <= maxRange
                && reqRouteSchedulingView.FromDate    >= minRange
            join WrkCtrId, PMFSequenceGroupId
                from wrkCtrTable
                where  wrkCtrTable.WrkCtrId           == reqRouteSchedulingView.WrkCtrId
                    && wrkCtrTable.PMFSequenceGroupId != ''
        {
            reqRoute = ReqRoute::find(reqRouteSchedulingView.PlanVersion, reqRouteSchedulingView.RefId, reqRouteSchedulingView.OprNum, reqRouteSchedulingView.OprPriority);
            if (reqRoute.pmfCanBeSequenced(wrkCtrTable.PMFSequenceGroupId))
            {
                if (wrkCtrId != wrkCtrTable.WrkCtrId)
                {
                    wrkCtrList.add(wrkCtrTable.WrkCtrId);
                    wrkCtrId = wrkCtrTable.WrkCtrId;
                }

                pmfSeqTmpBuffer.clear();
                pmfSeqTmpBuffer.RefRecId = reqRoute.RecId;
                pmfSeqTmpBuffer.Rank = this.rankOperation(wrkCtrTable.PMFSequenceGroupId, reqRoute);
                pmfSeqTmpBuffer.SortDate = reqRouteSchedulingView.FromDate;
                pmfSeqTmpBuffer.WrkCtrId = wrkCtrId;
                pmfSeqTmpBuffer.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define the dialog interface for the sequencing analysis
    /// </summary>
    /// <returns>
    /// The instance of the dialog object.
    /// </returns>
    public Object dialog()
    {
        Dialog ret;

        ret = super();
        planIdField = ret.addFieldValue(extendedTypeStr(ReqPlanId), planId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the value set by user during dialog.
    /// </summary>
    /// <returns>
    /// A boolean value, always true
    /// </returns>
    public boolean getFromDialog()
    {
        planId = planIdField.value();

        if (PMFSequencingGetFromDialogFixFlight::instance().isEnabled())
        {
            return super();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqPlanId parmPlanId(ReqPlanId _planId = planId)
    {
        planId = _planId;

        return planId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmPlanVersion(RefRecId _planVersion = planVersion)
    {
        planVersion = _planVersion;

        return planVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rankOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rank of an operation.
    /// </summary>
    /// <param name="_pmfSequenceGroupId">
    /// The sequence group to do the ranking for.
    /// </param>
    /// <param name="_reqRoute">
    /// The operation to be ranked.
    /// </param>
    /// <returns>
    /// The rank of the operation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PMFSeqRanking rankOperation(PMFSequenceGroupId _pmfSequenceGroupId, ReqRoute _reqRoute)
    {
        #define.noOfDigits(4)

        PMFSequenceGroupTrans   sequenceGroupTrans;
        int                     digit           = #noOfDigits;
        str                     strRank;
        str                     strKey;
        int                     rank;
        PMFSequencingModel      sequencingModel = PMFSequencingModel::construct();

        strKey = '';

        while select SequenceNumber, SequenceId
            from sequenceGroupTrans
            order by SequenceNumber
            where sequenceGroupTrans.SequenceGroupId == _pmfSequenceGroupId
        {
            rank    = sequencingModel.rank(_reqRoute, sequenceGroupTrans.SequenceId);
            strRank = int2str(rank);
            strRank = (strrep('0', digit - strlen(strRank))) + strRank;
            strKey += ((strlen(strkey)? '-' :'') + strRank);
        }

        return strKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the sequence of events to perform PDS sequencing process
    /// </summary>
    public void run()
    {
        this.setParameter();

        this.createTmpRankList();

        this.runAnalysis();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an analysis of the planned orders to see if some orders can be resequenced.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void runAnalysis()
    {
        #AviFiles

        SetEnumerator           wrkCtrIdx = wrkCtrList.getEnumerator();
        boolean                 processed = false;

        this.clearChanges();
        this.clearReservations();

        this.progressInit("@PSC247", wrkCtrList.elements(), #AviSearch);

        ttsBegin;
        while (wrkCtrIdx.moveNext())
        {
            this.parmProgress().setText(wrkCtrIdx.current());
            currentWrkCtrTable = WrkCtrTable::find(wrkCtrIdx.current());

            PMFSeqWrkCtrCapRes::extractFromCapRes(minRange, maxRange, planVersion, currentWrkCtrTable.WrkCtrId, pmfSeqTmpBuffer);

            prevSeqRouteEndDateTime = DateTimeUtil::minValue();

            this.setBucketDates(true);

            while (bucketToDate <= maxRange)
            {
                this.sequenceCurrentBucket(currentWrkCtrTable.WrkCtrId);

                this.setBucketDates();
                processed = true;
            }
        }
        ttsCommit;

        PMFSeqWrkCtrCapRes::cleanupExtraReservations(minRange, maxRange, planVersion);

        if (wrkCtrList.elements() > 0 && processed)
        {
            info(strfmt("@PSC281", wrkCtrList.elements()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceCurrentBucket</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sequences operations in the current bucket.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The resource to perform sequencing for.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void sequenceCurrentBucket(WrkCtrIdBase _wrkCtrId)
    {
        ReqRoute                reqRoute;
        PMFSeqReqRouteChanges   reqRouteChangesNotExist;
        PMFSeqReqRouteChanges   reqRouteChanges;
        PMFSeqRanking           prevRanking;

        utcDateTime             startDateTime;
        utcDateTime             endDateTime;
        utcDateTime             timeFenceEndDateTime;
        utcDateTime             origin;

        WrkCtrScheduler_PmfSeq  scheduler;
        boolean                 schedulingSuceeded;

        startDateTime           = DateTimeUtil::newDateTime(bucketFromDate, 0);
        endDateTime             = DateTimeUtil::newDateTime(bucketToDate, #SecondsPerDay - 1);
        timeFenceEndDateTime    = DateTimeUtil::newDateTime(maxRange, #SecondsPerDay - 1);

        if (startDateTime > prevSeqRouteEndDateTime)
        {
            prevSeqRouteEndDateTime = startDateTime;
        }

        prevRanking = '';

        scheduler = WrkCtrScheduler_PmfSeq::construct();

        // Get all un-sequenced orders from this and previous buckets
        while select reqRoute
            join forUpdate pmfSeqTmpBuffer
                order by Rank, SortDate
                where pmfSeqTmpBuffer.RefRecId == reqRoute.RecId
                   && pmfSeqTmpBuffer.SortDate <= bucketToDate
                   && pmfSeqTmpBuffer.WrkCtrId == _wrkCtrId
            notExists join reqRouteChangesNotExist
                where reqRouteChangesNotExist.ReqRouteRecId == pmfSeqTmpBuffer.RefRecId
        {
            if (pmfSeqTmpBuffer.Rank != prevRanking)
            {
                origin = prevSeqRouteEndDateTime;
            }

            reqRouteChanges.clear();
            reqRouteChanges.initFromReqRoute(reqRoute);
            reqRouteChanges.Periods = bucketNo;
            reqRouteChanges.Ranking = pmfSeqTmpBuffer.Rank;

            if (!reqRouteChanges.wasRoutePreviouslySequenced())
            {
                reqRouteChanges.setConstraint();

                // Start scheduling using the time fence as the end date to allow for the case
                // where the operation do not fit completely within the sequencing bucket
                schedulingSuceeded = reqRouteChanges.scheduleNewDate(origin, startDateTime, timeFenceEndDateTime, scheduler);

                if (schedulingSuceeded)
                {
                    if (reqRouteChanges.NewFromDateTime > endDateTime)
                    {
                        // The operation could not be started in the bucket so delete the sequencing result for it again
                        PMFSeqReqRouteChanges::deleteRefId(reqRoute.RefId, reqRoute.PlanVersion);
                        break;
                    }

                    // Save the date to use as basis for the next order
                    // Need to take the maximum date in the case where there are multiple orders with the same rank
                    prevSeqRouteEndDateTime = max(prevSeqRouteEndDateTime, reqRouteChanges.NewToDateTime);
                }
                else
                {
                    // When failing delete from tmp so it will not be scheduled again in next buckets
                    // The user is made aware of this by an infolog inserted by the scheduling engine
                    pmfSeqTmpBuffer.delete();
                }
            }

            prevRanking = pmfSeqTmpBuffer.Rank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBucketDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the next period for which sequencing will be run.
    /// </summary>
    /// <param name="_reset">
    /// true to reset the starting period to today; otherwise, find the next period.
    /// </param>
    public void setBucketDates(boolean _reset = false)
    {
        TransDate   absbucketFromDate;

        if (!bucketFromDate || _reset)
        {
            bucketNo = 1;
            bucketFromDate = todaysDate;
            if (planSched.TimeFenceLockingFixed)
            {
                bucketFromDate = bucketFromDate + planSched.TimeFenceLocking;
            }
        }
        else
        {
            bucketNo++;
            bucketFromDate = bucketToDate + 1;
        }

        absbucketFromDate = _reset ? todaysDate : bucketFromDate;

        if (planSched.PMFSeqBucketType == PMFSeqCalendarPeriod::Period)
        {
            bucketToDate = absbucketFromDate + bucketSize - 1;
        }
        else
        {
            switch (planSched.PMFSeqBucketPeriod)
            {
                case DayWeekMonth::Day:
                    bucketToDate = absbucketFromDate + bucketSize - 1;
                    break;
                case DayWeekMonth::Month:
                    bucketToDate = Global::dateEndMth(absbucketFromDate);
                    break;
                case DayWeekMonth::Week:
                    PreferredLocale preferredLocale = Global::currentUserLanguage();
                    bucketToDate = DateTimeUtil::getEndOfWeekDate(preferredLocale, absbucketFromDate);
                    break;
                case DayWeekMonth::Quarter:
                    bucketToDate = Global::dateEndQtr(absbucketFromDate);
                    break;
            }
        }

        if (bucketFromDate < maxRange && bucketToDate > maxRange)
        {
            bucketToDate = maxRange;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize all parameters that will be used during sequencing.
    /// </summary>
    private void setParameter()
    {
        if (!planVersion)
        {
            planVersion = ReqPlanVersion::findActiveReqPlanId(planId, curext()).RecId;
            planSched   = ReqPlanSched::find(planId);
        }
        else
        {
            planSched   = ReqPlanSched::find(ReqPlanVersion::find(planVersion).ReqPlanId);
        }

        todaysDate = ReqPlanData::newReqPlanId(planSched.ReqPlanIdSched).todaysdate();

        runSequencing   = planSched.PMFSeqCovSequencing && planSched.PMFSeqTimeFenceSequencingFixed && planSched.PMFSeqTimeFenceSequencing;
        bucketSize      = planSched.PMFSeqSequencingBucket;
        minRange        = planSched.TimeFenceLockingFixed ? todaysDate + planSched.TimeFenceLocking : todaysDate;
        maxRange        = todaysDate + planSched.PMFSeqTimeFenceSequencing - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PMFSequencingAnalysisEngine construct()
    {
        return new PMFSequencingAnalysisEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard description for this runbase class.
    /// </summary>
    /// <returns>
    /// The description for this runbase class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str description()
    {
        return "@PSC745";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    public static void main (Args _args)
    {
        PMFSequencingAnalysisEngine engine = new PMFSequencingAnalysisEngine();

        if (engine.prompt())
        {
            engine.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromMRP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the sequencing from within MRP.
    /// </summary>
    /// <param name="_planVersion">
    /// The MRP plan version for which MRP is currently processing.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runFromMRP(RefRecId _planVersion)
    {
        PMFSequencingAnalysisEngine engine = new PMFSequencingAnalysisEngine();

        engine.parmPlanVersion(_planVersion);
        engine.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>