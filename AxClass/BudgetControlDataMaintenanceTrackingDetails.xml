<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceTrackingDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceTrackingDetails</c> class tracks unique information to identify a BudgetControlDataMaintenanceTracking record.
/// </summary>
internal final class BudgetControlDataMaintenanceTrackingDetails
{
    internal Num TrackingNumber;
    internal RefRecId TrackingDocument;
    internal BudgetControlSourceIntegrator SourceIntegrator;
    internal BudgetControldataMaintenanceRecId BudgetControldataMaintenanceRecId;
    internal Description255 ProviderName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceTrackingDetails construct(
        Num _trackingNumber,
        RefRecId _trackingDocument,
        BudgetControlSourceIntegrator _sourceIntegrator,
        BudgetControldataMaintenanceRecId _budgetControldataMaintenanceRecId,
        Description255 _providerName)
    {
        BudgetControlDataMaintenanceTrackingDetails trackingDetails = new BudgetControlDataMaintenanceTrackingDetails();
        trackingDetails.TrackingNumber = _trackingNumber;
        trackingDetails.TrackingDocument = _trackingDocument;
        trackingDetails.SourceIntegrator = _sourceIntegrator;
        trackingDetails.BudgetControldataMaintenanceRecId = _budgetControldataMaintenanceRecId;
        trackingDetails.ProviderName = _providerName;

        return trackingDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSourceDocumentHeader</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceTrackingDetails newFromSourceDocumentHeader(
        SourceDocumentHeaderRecId _sourceDocHeaderRecId,
        BudgetControldataMaintenanceRecId _budgetControldataMaintenanceRecId,
        Description255 _providerName)
    {
        BudgetControlDataMaintenanceTrackingDetails trackingDetails;
        
        try
        {
            SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(_sourceDocHeaderRecId);
            SourceDocumentHeaderImplementation sourceDocumentHeaderImplementation = sourceDocumentHeader.getSourceDocumentImplementation();
            SourceDocument sourceDocument = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader, sourceDocumentHeaderImplementation);

            if (sourceDocument)
            {
                SourceDocumentTypeIBudgetControl budgetSourceSourceDocumentType = sourceDocument.parmSourceDocumentType() as SourceDocumentTypeIBudgetControl;

                BudgetControlSourceIntegrator sourceIntegrator;
                if (budgetSourceSourceDocumentType)
                {
                    sourceIntegrator = budgetSourceSourceDocumentType.parmBudgetControlSourceIntegrator();
                }

                Num trackingNumber = sourceDocument.parmDocumentNumber();
                trackingDetails = BudgetControlDataMaintenanceTrackingDetails::construct(trackingNumber, _sourceDocHeaderRecId, sourceIntegrator, _budgetControldataMaintenanceRecId, _providerName);
            }

            if (trackingDetails == null)
            {
                throw new System.ArgumentNullException("trackingDetails");
            }
        }
        catch
        {
            BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlDataMaintenanceTrackingDetails))
                .dataMaintenance().errorCreatingNewFromSourceDocumentHeader(_sourceDocHeaderRecId, _budgetControldataMaintenanceRecId, _providerName);

            throw;
        }

        return trackingDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal BudgetControlDataMaintenanceTracking find(boolean _forUpdate = false)
    {
        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;

        if (_forUpdate)
        {
            dataMaintenanceTracking.selectForUpdate(_forUpdate);
        }

        select * from dataMaintenanceTracking
            where dataMaintenanceTracking.BudgetControlDataMaintenance == BudgetControldataMaintenanceRecId
                && dataMaintenanceTracking.DataMaintenanceProvider == ProviderName
                && dataMaintenanceTracking.TrackingDocument == TrackingDocument
                && dataMaintenanceTracking.TrackingNumber == TrackingNumber
                && dataMaintenanceTracking.TrackingSourceIntegrator == SourceIntegrator;
        
        return dataMaintenanceTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTrackingDetailsExist</Name>
				<Source><![CDATA[
    internal boolean doTrackingDetailsExist()
    {
        return this.find().RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>