<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CommissionTransTableApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CommissionTrans))]
public final class CommissionTransTableApplicationSuite_IT_Extension
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>personName_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets person name.
    /// </summary>
    /// <returns>The person name.</returns>
    public display DirPartyName personName_IT()
    {
        return DirPerson::find(this.Person).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedAmountMST_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets accrued amount value.
    /// </summary>
    /// <param name = "_ignoreThresholds">Determines if thresholds must be ignored.</param>
    /// <param name = "_paymentVoucherToExclude">The voucher number to exclude.</param>
    /// <returns>The accrued amount value.</returns>
    public display AccruedAmountMST_IT accruedAmountMST_IT(boolean _ignoreThresholds = false, Voucher _paymentVoucherToExclude = '')
    {
        AccruedAmountMST_IT amount;

        if (this.CommissionType_IT == CommissionType_IT::Invoice)
        {
            amount = this.AmountMST;
        }

        if (!amount)
        {
            amount = CurrencyExchangeHelper::amountCur2MST(this.AccruedAmountCur_IT(_ignoreThresholds,_paymentVoucherToExclude), this.CurrencyCode);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    public void initFromProjInvoiceItem(ProjInvoiceItem _projInvoiceItem)
    {
        next initFromProjInvoiceItem(_projInvoiceItem);

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            this.InventTransId_IT = _projInvoiceItem.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    public void initFromCustInvoiceTrans(CustInvoiceTrans _custInvoiceTrans)
    {
        next initFromCustInvoiceTrans(_custInvoiceTrans);

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            this.InventTransId_IT = _custInvoiceTrans.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedAmountCur_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets accrued amount in transaction currency.
    /// </summary>
    /// <param name = "_ignoreThresholds">>Determines if thresholds must be ignored.</param>
    /// <param name = "_paymentVoucherToExclude">The voucher number to exclude.</param>
    /// <returns>The accrued amount in transaction currency.</returns>
    public AmountCur accruedAmountCur_IT(boolean _ignoreThresholds = false, Voucher _paymentVoucherToExclude = '')
    {
        AmountMSt accruedAmount;

        if (this.CommissionType_IT == CommissionType_IT::Invoice)
        {
            accruedAmount = this.AmountCur;
        }

        if (!accruedAmount)
        {
            Query q = SysQuery::queryFromTableRelation(this, tableNum(CommissionAccruing_IT));
            QueryBuildDataSource qbds = q.dataSourceTable(tableNum(CommissionAccruing_IT));
            qbds.addSelectionField(fieldnum(CommissionAccruing_IT, PostedAmount), Selectionfield::Sum);
            qbds.addSelectionField(fieldnum(CommissionAccruing_IT, AmountCur), Selectionfield::Sum);

            if (_paymentVoucherToExclude != '')
            {
                qbds.addRange(fieldnum(CommissionAccruing_IT, PaymentVoucher)).value(queryvalue('!' + _paymentVoucherToExclude));
            }

            QueryRun qr = new QueryRun(q);

            if (qr.next())
            {
                CommissionAccruing_IT accruing = qr.get(tableNum(CommissionAccruing_IT));
                accruedAmount = _ignoreThresholds ? accruing.AmountCur : accruing.PostedAmount;
            }
        }

        return accruedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyThreshold_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount adjustment.
    /// </summary>
    /// <param name = "_accruedAmount">The accrued amount.</param>
    /// <param name = "_mst">Determines if calculation is for master currency.</param>
    /// <returns>The amount adjustment coefficient.</returns>
    public Amount applyThreshold_IT(Amount _accruedAmount, boolean _mst = true)
    {
        real adjustment = 1;
        Amount commissionAmount = _mst ? this.AmountMST : this.AmountCur;

        if (_accruedAmount
            && this.UseThresholds_IT
            && this.CommissionType_IT == CommissionType_IT::Payment)
        {
            Percent currentPercent;

            if (commissionAmount)
            {
                currentPercent = (_accruedAmount/ commissionAmount) * 100;
            }

            if (currentPercent < this.LowerThreshold_IT)
            {
                adjustment = 0;
            }
            else if (currentPercent >= this.UpperThreshold_IT)
            {
                adjustment = commissionAmount / _accruedAmount;
            }
        }

        return _accruedAmount * adjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPercent_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current percent of payed amount.
    /// </summary>
    /// <returns>The current percent of payed amount.</returns>
    public display Percent currentPercent_IT()
    {
        Percent ret;

        if (this.AmountMST)
        {
            ret = (this.AccruedAmountMST_IT(false) / this.AmountMST) * 100;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values from sales line.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    public void initFromSalesLine_IT(SalesLine _salesLine)
    {
        this.currencyCode = _salesLine.currencyCode;
        this.invoiceId = _salesLine.SalesId;
        this.invoiceDate = DateTimeUtil::date(_salesLine.createdDateTime);
        this.itemId = _salesLine.itemId;
        this.DefaultDimension = this.copyDimension(_salesLine.DefaultDimension);
        this.InventTransId_IT = _salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice amount of the invoice reladet to current commission.
    /// </summary>
    /// <param name = "_commissionTrans">The <c>CommissionTrans</c> record.</param>
    /// <returns>The invoice amount.</returns>
    public static display AmountMst invoiceAmount_IT(CommissionTrans _commissionTrans)
    {
        CustInvoiceJour custInvoiceJour;

        select firstonly InvoiceAmountMST from custInvoiceJour
            where custInvoiceJour.InvoiceId == _commissionTrans.InvoiceId
                && custInvoiceJour.InvoiceDate == _commissionTrans.InvoiceDate;

        return custInvoiceJour.InvoiceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedAmountCur_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posted amount.
    /// </summary>
    /// <returns>The posted amount.</returns>
    public AmountCur postedAmountCur_IT()
    {
        Query q = SysQuery::queryFromTableRelation(this, tableNum(CommissionAccruing_IT));
        QueryBuildDataSource qbds = q.dataSourceTable(tableNum(CommissionAccruing_IT));
        qbds.addSelectionField(fieldnum(CommissionAccruing_IT, PostedAmount), Selectionfield::Sum);
        AmountMSt postedAmount;
        QueryRun qr = new QueryRun(q);

        if (qr.next())
        {
            CommissionAccruing_IT accruing = qr.get(tableNum(CommissionAccruing_IT));
            postedAmount = accruing.PostedAmount;
        }

        return postedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the settlement amount.
    /// </summary>
    /// <param name = "_commissionTrans">The <c>CommissionTrans</c> record to get amount for.</param>
    /// <returns>The settlement amount.</returns>
    public static display AmountMST settlementAmount_IT(CommissionTrans _commissionTrans)
    {
        CustInvoiceJour custInvoiceJour;
        CustTrans custTrans;

        select firstonly SettleAmountMST from custTrans
            exists join custInvoiceJour
                where custInvoiceJour.InvoiceId == _commissionTrans.InvoiceId
                    && custInvoiceJour.InvoiceDate == _commissionTrans.InvoiceDate
                    && custTrans.AccountNum == custInvoiceJour.InvoiceAccount
                    && custTrans.TransDate == custInvoiceJour.InvoiceDate
                    && custTrans.Invoice == custInvoiceJour.InvoiceId
                    && custTrans.Voucher == custInvoiceJour.LedgerVoucher;

        return custTrans.SettleAmountMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>