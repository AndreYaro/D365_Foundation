<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionResolve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionResolve</c> class updates conversion to either resolved or not
///    resolved.
/// </summary>
class TradeNonStockedConversionResolve
{
    TradeNonStockedConversionResolveUndo    resolveUndo;
    container   packedCheckLogList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedCheckLogList</Name>
				<Source><![CDATA[
    public container parmPackedCheckLogList(container _packedCheckLogList = packedCheckLogList)
    {
        packedCheckLogList = _packedCheckLogList;
        return packedCheckLogList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversionResolveUndo</Name>
				<Source><![CDATA[
    public TradeNonStockedConversionResolveUndo parmTradeNonStockedConversionResolveUndo(TradeNonStockedConversionResolveUndo _resolveUndo = resolveUndo)
    {
        resolveUndo = _resolveUndo;
        return resolveUndo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current issue must be resolved.
    /// </summary>
    /// <returns>
    /// true if the current issue must be resolved; otherwise, false.
    /// </returns>
    private boolean resolved()
    {
        if (resolveUndo == TradeNonStockedConversionResolveUndo::Resolve)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the resolved status on a selection of the <c>TradeNonStockedConvesionItem</c> records.
    /// </summary>
    public void run()
    {
        ListEnumerator listEnumerator = List::create(this.parmPackedCheckLogList()).getEnumerator();
        TradeNonStockedConversionCheckLog tradeNonStockedConversionCheckLog;

        ttsbegin;
        while (listEnumerator.moveNext())
        {
            tradeNonStockedConversionCheckLog = TradeNonStockedConversionCheckLog::find(listEnumerator.current(), true);
            if (tradeNonStockedConversionCheckLog)
            {
                tradeNonStockedConversionCheckLog.Resolved = this.resolved();
                tradeNonStockedConversionCheckLog.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionResolve construct()
    {
        return new TradeNonStockedConversionResolve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        TradeNonStockedConversionResolve    tradeNonStockedConversionResolve = TradeNonStockedConversionResolve::construct();
        TradeNonStockedConversionCheckLog   tradeNonStockedConversionCheckLog;
        MultiSelectionContext               multiSelectionContext = _args.multiSelectionContext();
        List                                list = new List(typeName2Type(extendedtypestr(recId)));

        tradeNonStockedConversionCheckLog = multiSelectionContext.getFirst();
        while (tradeNonStockedConversionCheckLog)
        {
            list.addEnd(tradeNonStockedConversionCheckLog.RecId);
            tradeNonStockedConversionCheckLog = multiSelectionContext.getNext();
        }

        if (!list.elements())
        {
            list.addEnd(_args.record().RecId);
        }

        tradeNonStockedConversionResolve.parmTradeNonStockedConversionResolveUndo(_args.parmEnum());
        tradeNonStockedConversionResolve.parmPackedCheckLogList(list.pack());
        tradeNonStockedConversionResolve.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>