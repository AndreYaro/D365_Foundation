<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>projHierarchyTreeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles events for <c>HierarchyTree</c> class.
/// </summary>
class projHierarchyTreeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HierarchyTree_Post_validateMove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.validateMove()</c> post event.
    /// </summary>
    /// <param name="_args">
    /// The event arguments.
    /// </param>
    [PostHandlerFor(classStr(HierarchyTree), methodStr(HierarchyTree, validateMove))]
    public static void HierarchyTree_Post_validateMove(XppPrePostArgs _args)
    {
        anytype fromData = _args.getArg('_fromData');
        anytype toData = _args.getArg('_toData');
        Name name = _args.getArg('_name');
        name newName = _args.getArg('_newName');
        HierarchyTree hierarchyTree = _args.getThis();

        if (!HierarchyTreeTable::validateMove(hierarchyTree.parmHierarchyTreeTable().HierarchyId, fromData, toData, hierarchyTree.parmHierarchyType() == HierarchyType::Project))
        {
            throw error(strFmt("@SYS104897", name, newName));
        }

        if (Project::Enabled())
        {
            ActivityRecId activity = smmActivities::findWithRecId(hierarchyTree.parmHierarchyTreeTable().RefRecId).RecId;

            if (ActivityFacade::existsAnyAssignmentForActivity(activity))
            {
                throw error("@PSA11632");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.buildImageList()</c> event.
    /// </summary>
    /// <param name = "_imageList">
    /// The image list.
    /// </param>
    [SubscribesTo(classStr(HierarchyTree), delegatestr(HierarchyTree, buildImageList))]
    public static void buildImageList(Imagelist _imageList)
    {
        #ResApplPSA
        #ResAppl

        if (Project::Enabled())
        {
            _imageList.add(new Image(#PSAImageProduct));
            _imageList.add(new Image(#PSAImageBrand));
            _imageList.add(new Image(#ImageProjTime));
            _imageList.add(new Image(#PSAImageSubtask));
            _imageList.add(new Image(#ImageAxapta));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.deleteEvent()</c> event.
    /// </summary>
    /// <param name = "_args">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(classStr(HierarchyTree), delegatestr(HierarchyTree, deleteEvent))]
    public static void deleteEvent(CaseHierarchyTreeDeleteEventArgs _args)
    {
        if (Project::Enabled())
        {
            HierarchyTreeTable dataSourceHierarchyTreeTable = _args.parmDataSourceHierarchyTreeTable();

            HierarchyTreeTable  hierarchyTreeTableLoc;
                select firstonly RecId from hierarchyTreeTableLoc
                    where hierarchyTreeTableLoc.HierarchyId       == dataSourceHierarchyTreeTable.HierarchyId &&
                        hierarchyTreeTableLoc.ParentElementNumber == dataSourceHierarchyTreeTable.ElementNumber;

            projHierarchyTreeHandler::updateSmmActivitiesDate(dataSourceHierarchyTreeTable);

            _args.parmAllowPromptForDelete(false);
            if (Box::yesNo("@PSA11103", DialogButton::No) == DialogButton::Yes)
            {
                if (_args.parmHierarchyType() == HierarchyType::Project)
                {
                    _args.parmAllowDelete(false);
                    _args.parmCurrentHierarchyTreeTable().deleteActivityHierarchy(dataSourceHierarchyTreeTable.HierarchyId, dataSourceHierarchyTreeTable.ElementNumber);
                    _args.parmTree().delete(_args.parmTreeIndex());
                }
            }
            else
            {
                _args.parmAllowDelete(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideImageListIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.overrideImageListIdx()</c> event.
    /// </summary>
    /// <param name = "_hierarchyTree">
    /// The <c>HierarchyTreeTable</c> record.
    /// </param>
    /// <param name = "_args">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(classStr(HierarchyTree), delegatestr(HierarchyTree, overrideImageListIdx))]
    public static void overrideImageListIdx(HierarchyTreeTable _hierarchyTree, CaseHierarchyTreeImageListIdxEventArgs _args)
    {
        #ResApplPSA

        if (Project::Enabled())
        {
            if (_hierarchyTree.psaTask)
            {
                if (HierarchyTreeTable::findElementNumber(_hierarchyTree.HierarchyId, _hierarchyTree.ParentElementNumber).psaTask)
                {
                    _args.parmImageListIdx(#PSAImageSubtask);
                }
                else
                {
                    _args.parmImageListIdx(#PSAImageBrand);
                }
            }

            if (_hierarchyTree.psaSubproject)
            {
                _args.parmImageListIdx(#PSAImageProduct);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForDynaLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.preDeleteActivity()</c> event.
    /// </summary>
    /// <param name = "_queryBuildDynalink">
    /// The <c>QueryBuildDynaLink</c> object.
    /// </param>
    /// <param name = "_args">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(classStr(HierarchyTree), delegatestr(HierarchyTree, addRangeForDynaLink))]
    public static void addRangeForDynaLink(QueryBuildDynalink _queryBuildDynalink, CaseHierarchyTreeRangeDynaLinkEventArgs _args)
    {
        if (_queryBuildDynalink.field() == fieldNum(HierarchyTreeTable, psaRefRecID)
            || _queryBuildDynalink.field() == fieldNum(HierarchyTreeTable, psaQuotationId))
        {
            _args.parmAddRange(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveItemUpdateSiblingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>HierarchyTree.preDeleteActivity()</c> event.
    /// </summary>
    /// <param name = "_hierarchyTreeTable">
    /// The <c>HierarchyTreeTable</c> record.
    /// </param>
    /// <param name = "_hierarchyTree">
    /// The <c>HierarchyTree</c> object.
    /// </param>
    /// <param name = "_parentData">
    /// Data from the parent tree item.
    /// </param>
    /// <param name = "_dictTable">
    /// The <c>DictTable</c> object for the integrating table.
    /// </param>
    [SubscribesTo(classStr(HierarchyTree), delegatestr(HierarchyTree, moveItemUpdateSiblingNumber))]
    public static void moveItemUpdateSiblingNumber(HierarchyTreeTable _hierarchyTreeTable, HierarchyTree _hierarchyTree, anytype _parentData, DictTable _dictTable)
    {
        if (Project::Enabled() && HierarchyLinkTable::findAssociation(_hierarchyTree.parmHierarchyId(), tableNum(ProjTable)))
        {
            PSASummaryActivity psaSummaryActivity = new PSASummaryActivity();
            HierarchyTreeTable hierarchyTreeTableLoc = _hierarchyTree.getDropCommon(_dictTable, _parentData);
            if (hierarchyTreeTableLoc)
            {
                psaSummaryActivity.treeTraversal(hierarchyTreeTableLoc);
                date startDate = psaSummaryActivity.parmStartDate();
                if (startDate)
                {
                    psaSummaryActivity.treeTraversal(_hierarchyTreeTable, startDate, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSmmActivitiesDate</Name>
				<Source><![CDATA[
    private static void updateSmmActivitiesDate(HierarchyTreeTable _hierarchyTreeTable)
    {
        HierarchyTreeTable  hierarchyTreeTableLoc;
        smmActivities       smmActivities;

        select firstonly RecId from hierarchyTreeTableLoc
            where hierarchyTreeTableLoc.HierarchyId == _hierarchyTreeTable.HierarchyId
               && hierarchyTreeTableLoc.ElementNumber == _hierarchyTreeTable.ParentElementNumber;

        if (hierarchyTreeTableLoc.RefRecId)
        {
            smmActivities = smmActivities::findWithRecId(hierarchyTreeTableLoc.RefRecId);
            smmActivities.updateFromPSAActivitySetup(PSAActivitySetup::findActivityNumber(smmActivities.ActivityNumber));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>