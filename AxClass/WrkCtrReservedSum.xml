<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrReservedSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrReservedSum
{
    TmpWrkCtrReservedSum    tmpWrkCtrReservedSum;
    RecordSortedList        cacheWrkCtrReservedSum;

    NoYes                   limitCapProd;
    NoYes                   limitCapPO;
    NoYes                   limitCapProject;

    NoYes                   operationScheduled;
    NoYes                   jobScheduled;

    boolean                 useBlockRead;

    ReqParameters           reqParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildReservationsOnResourceGroupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for reservation calculation for the <c>WrkCtrGroupId</c>.
    /// </summary>
    /// <param name = "_reqPlanVersionRefRecId">A <c>ReqPlanVersionRefRecId</c> value.</param>
    /// <param name = "_wrkCtrGroupId">A <c>WrkCtrGroupId</c> value.</param>
    /// <param name = "_schedDate">A <c>SchedDate</c> value.</param>
    /// <returns>A <c>Query</c> object for reservation calculation for the resource group.</returns>
    protected Query buildReservationsOnResourceGroupQuery(ReqPlanVersionRefRecId _reqPlanVersionRefRecId, WrkCtrGroupId  _wrkCtrGroupId, SchedDate _schedDate)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsWrkCtrCapRes = query.addDataSource(tableNum(WrkCtrCapRes));
        qbdsWrkCtrCapRes.addGroupByField(fieldNum(WrkCtrCapRes, LoadType));
        qbdsWrkCtrCapRes.addSelectionField(fieldNum(WrkCtrCapRes, WrkCtrSec), SelectionField::Sum);
        qbdsWrkCtrCapRes.addSelectionField(fieldNum(WrkCtrCapRes, LoadType));

        qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, WrkCtrId)).value(queryValue(_wrkCtrGroupId));
        qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, TransDate)).value(queryValue(_schedDate));

        str timeRange = strfmt('((%1.%2 <= %1.%3))',
                                      query.dataSourceTable(tableNum(WrkCtrCapRes)).name(),
                                      fieldStr(WrkCtrCapRes, StartTime),
                                      fieldStr(WrkCtrCapRes, EndTime));
        qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, StartTime)).value(timeRange);

        this.addLoadTypeRangeToBuildReservationsOnResourceGroupQuery(query, qbdsWrkCtrCapRes);

        str refTypeRange = this.buildRefTypeRangeToBuildReservationsOnResourceGroupQuery(query, qbdsWrkCtrCapRes, _reqPlanVersionRefRecId);
        if (refTypeRange)
        {
            qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, RefType)).value(refTypeRange);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadTypeRangeToBuildReservationsOnResourceGroupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the load type range to the query for building reservations on resource group query.
    /// </summary>
    /// <param name = "_query">A <c>Query</c> object.</param>
    /// <param name = "_qbdsWrkCtrCapRes">A <c>QueryBuildDataSource</c> object.</param>
    protected void addLoadTypeRangeToBuildReservationsOnResourceGroupQuery(Query _query, QueryBuildDataSource _qbdsWrkCtrCapRes)
    {
        WrkCtrCapResQueryBuildHelper::addLoadTypeRange(_query, _qbdsWrkCtrCapRes, jobScheduled, operationScheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRefTypeRangeToBuildReservationsOnResourceGroupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the ref type range for the query for building reservations on resource group query.
    /// </summary>
    /// <param name = "_query">A <c>Query</c> object.</param>
    /// <param name = "_qbdsWrkCtrCapRes">A <c>QueryBuildDataSource</c> object.</param>
    /// <param name = "_reqPlanVersionRefRecId">A <c>ReqPlanVersionRefRecId</c> value.</param>
    /// <returns>A <c>str</c> value with the ref type range.</returns>
    protected str buildRefTypeRangeToBuildReservationsOnResourceGroupQuery(Query _query, QueryBuildDataSource _qbdsWrkCtrCapRes, ReqPlanVersionRefRecId _reqPlanVersionRefRecId)
    {
        return (WrkCtrCapResQueryBuildHelper::buildRefTypeRange(_query, _qbdsWrkCtrCapRes, _reqPlanVersionRefRecId, limitCapProd, limitCapProject, limitCapPO));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReservationsOnIndividualResourcesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for reservation calculation for the individual resources.
    /// </summary>
    /// <param name = "_reqPlanVersionRefRecId">A <c>ReqPlanVersionRefRecId</c> value.</param>
    /// <param name = "_wrkCtrGroupId">A <c>WrkCtrGroupId</c> value.</param>
    /// <param name = "_schedDate">A <c>SchedDate</c> value.</param>
    /// <returns>A <c>Query</c> object for reservation calculation for the individual resources.</returns>
    protected Query buildReservationsOnIndividualResourcesQuery(ReqPlanVersionRefRecId _reqPlanVersionRefRecId, WrkCtrGroupId _wrkCtrGroupId, SchedDate _schedDate)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsWrkCtrCapRes = query.addDataSource(tableNum(WrkCtrCapRes));
        qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, TransDate)).value(queryValue(_schedDate));

        QueryBuildDataSource dsWrkCtrResourceGroupResource = qbdsWrkCtrCapRes.addDataSource(tableNum(WrkCtrResourceGroupResource));
        dsWrkCtrResourceGroupResource.joinMode(JoinMode::ExistsJoin);
        dsWrkCtrResourceGroupResource.addLink(fieldNum(WrkCtrCapRes, WrkCtrId), fieldNum(WrkCtrResourceGroupResource, WrkCtrId));
 
        QueryBuildDataSource dsWrkCtrResourceGroup = dsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrResourceGroup));
        dsWrkCtrResourceGroup.joinMode(JoinMode::ExistsJoin);
        dsWrkCtrResourceGroup.addLink(fieldNum(WrkCtrResourceGroupResource, ResourceGroup), fieldNum(WrkCtrResourceGroup, RecId));
        dsWrkCtrResourceGroup.addRange(fieldNum(WrkCtrResourceGroup, WrkCtrId)).value(queryValue(_wrkCtrGroupId));

        qbdsWrkCtrCapRes.addGroupByField(fieldNum(WrkCtrCapRes, LoadType));
        qbdsWrkCtrCapRes.addSelectionField(fieldNum(WrkCtrCapRes, WrkCtrSec), SelectionField::Sum);
        qbdsWrkCtrCapRes.addSelectionField(fieldNum(WrkCtrCapRes, LoadType));

        query.ValidTimeStateAsOfDate(_schedDate);

        str timeRange = strfmt('((%1.%2 <= %1.%3))',
                                      query.dataSourceTable(tableNum(WrkCtrCapRes)).name(),
                                      fieldStr(WrkCtrCapRes, StartTime),
                                      fieldStr(WrkCtrCapRes, EndTime));
        qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, StartTime)).value(timeRange);

        this.addLoadTypeRangeToBuildReservationsOnIndividualResourcesQuery(query, qbdsWrkCtrCapRes);

        str refTypeRange = this.buildRefTypeRangeToBuildReservationsOnIndividualResourcesQuery(query, qbdsWrkCtrCapRes, _reqPlanVersionRefRecId);
        if (refTypeRange)
        {
            qbdsWrkCtrCapRes.addRange(fieldNum(WrkCtrCapRes, RefType)).value(refTypeRange);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadTypeRangeToBuildReservationsOnIndividualResourcesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the load type range to the query for building reservations for the individual resources query.
    /// </summary>
    /// <param name = "_query">A <c>Query</c> object.</param>
    /// <param name = "_qbdsWrkCtrCapRes">A <c>QueryBuildDataSource</c> object.</param>
    protected void addLoadTypeRangeToBuildReservationsOnIndividualResourcesQuery(Query _query, QueryBuildDataSource _qbdsWrkCtrCapRes)
    {
        WrkCtrCapResQueryBuildHelper::addLoadTypeRange(_query, _qbdsWrkCtrCapRes, jobScheduled, operationScheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRefTypeRangeToBuildReservationsOnIndividualResourcesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ref type range to the query for building reservations for the individual resources query.
    /// </summary>
    /// <param name = "_query">A <c>Query</c> object.</param>
    /// <param name = "_qbdsWrkCtrCapRes">A <c>QueryBuildDataSource</c> object.</param>
    /// <param name = "_reqPlanVersionRefRecId">A <c>ReqPlanVersionRefRecId</c> value.</param>
    /// <returns>A <c>str</c> value with the ref type range.</returns>
    protected str buildRefTypeRangeToBuildReservationsOnIndividualResourcesQuery(Query _query, QueryBuildDataSource _qbdsWrkCtrCapRes, ReqPlanVersionRefRecId _reqPlanVersionRefRecId)
    {
        return (WrkCtrCapResQueryBuildHelper::buildRefTypeRange(_query, _qbdsWrkCtrCapRes, _reqPlanVersionRefRecId, limitCapProd, limitCapProject, limitCapPO));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculateReservationSumGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation calculation for the <c>WrkCtrGroupId</c> must be done.
    /// </summary>
    /// <returns>true if the reservation calculation for the <c>WrkCtrGroupId</c> must be done; otherwise, false.</returns>
    protected boolean mustCalculateReservationSumGroupId()
    {
        return ((limitCapProd || limitCapProject || limitCapPO) && (jobScheduled || operationScheduled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReservationSumGroupId</Name>
				<Source><![CDATA[
    container calcReservationSumGroupId(ReqPlanVersionRefRecId _reqPlanVersionRefRecId, WrkCtrGroupId _wrkCtrGroupId, SchedDate _schedDate)
    {
        WrkCtrCapRes                wrkCtrCapRes;
        CapacitySec                 reservedOperation;
        CapacitySec                 reservedJob;
        date                        schedDate = _schedDate;

        if (this.mustCalculateReservationSumGroupId())
        {
            // Select reservations made directly on the resource group
            Query queryReservationsOnResourceGroup = this.buildReservationsOnResourceGroupQuery(_reqPlanVersionRefRecId, _wrkCtrGroupId, _schedDate);
            QueryRun queryRun = new QueryRun(queryReservationsOnResourceGroup);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tableNum(WrkCtrCapRes));

                if (wrkCtrCapRes.LoadType == WrkCtrCapacityType::OperationSched)
                {
                    reservedOperation += wrkCtrCapRes.WrkCtrSec;
                }
                else
                {
                    reservedJob += wrkCtrCapRes.WrkCtrSec;
                }
            }

            // Select reservations made on the individual resources of the group
            Query queryReservationsOnIndividualResources = this.buildReservationsOnIndividualResourcesQuery(_reqPlanVersionRefRecId, _wrkCtrGroupId, _schedDate);
            queryRun = new QueryRun(queryReservationsOnIndividualResources);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tableNum(WrkCtrCapRes));

                if (wrkCtrCapRes.LoadType == WrkCtrCapacityType::OperationSched)
                {
                    reservedOperation += wrkCtrCapRes.WrkCtrSec;
                }
                else
                {
                    reservedJob += wrkCtrCapRes.WrkCtrSec;
                }
            }
        }

        return [reservedOperation,reservedJob];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculateReservationSumWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation calculation for the <c>WrkCtrId</c> must be done.
    /// </summary>
    /// <returns>true if the reservation calculation for the <c>WrkCtrId</c> must be done; otherwise, false.</returns>
    protected boolean mustCalculateReservationSumWrkCtrId()
    {
        return ((limitCapProd || limitCapProject || limitCapPO) && (jobScheduled || operationScheduled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReservationSumWrkCtrId</Name>
				<Source><![CDATA[
    container calcReservationSumWrkCtrId(ReqPlanVersionRefRecId _reqPlanVersionRefRecId, WrkCtrId  _wrkCtrId, SchedDate _schedDate)
    {
        WrkCtrCapRes    wrkCtrCapRes;
        CapacitySec     reservedOperation;
        CapacitySec     reservedJob;

        if (this.mustCalculateReservationSumWrkCtrId())
        {
            Query queryReservationsOnResourceGroup = this.buildReservationsOnResourceGroupQuery(_reqPlanVersionRefRecId, _wrkCtrId, _schedDate);
            QueryRun queryRun = new QueryRun(queryReservationsOnResourceGroup);

            while (queryRun.next())
            {
                wrkCtrCapRes = queryRun.get(tableNum(WrkCtrCapRes));
                if (wrkCtrCapRes.LoadType == WrkCtrCapacityType::OperationSched)
                {
                    reservedOperation += wrkCtrCapRes.WrkCtrSec;
                }
                else
                {
                    reservedJob += wrkCtrCapRes.WrkCtrSec;
                }
            }
        }

        return [reservedOperation, reservedJob];
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    boolean find(RefRecId _reqPlanVersionRefRecId, WrkCtrId  _wrkCtrId, SchedDate _schedDate)
    {
        if (tmpWrkCtrReservedSum.WrkCtrId   == _wrkCtrId && tmpWrkCtrReservedSum.SchedDate  == _schedDate)
        {
            return true;
        }

        tmpWrkCtrReservedSum.PlanVersion = _reqPlanVersionRefRecId;
        tmpWrkCtrReservedSum.WrkCtrId    = _wrkCtrId;
        tmpWrkCtrReservedSum.SchedDate   = _schedDate;

        if (this.isReservationSumCached(tmpWrkCtrReservedSum))
        {
            return true;
        }

        this.updateReservationCapacity(tmpWrkCtrReservedSum);

        this.cacheReservationSum(tmpWrkCtrReservedSum);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates reservation capacity data for <paramref name="_tmpWrkCtrReservedSum" />.
    /// </summary>
    /// <param name = "_tmpWrkCtrReservedSum">A capacity reservation record.</param>
    protected void updateReservationCapacity(TmpWrkCtrReservedSum _tmpWrkCtrReservedSum)
    {
        WrkCtrTable wrkCtrTable = WrkCtrTable::find(_tmpWrkCtrReservedSum.WrkCtrId);

        CapacitySec     reservedOperation;
        CapacitySec     reservedJob;

        if (wrkCtrTable.IsIndividualResource)
        {
            [reservedOperation, reservedJob] = this.calcReservationSumWrkCtrId(_tmpWrkCtrReservedSum.PlanVersion, _tmpWrkCtrReservedSum.WrkCtrId, _tmpWrkCtrReservedSum.SchedDate);
        }
        else
        {
            [reservedOperation, reservedJob] = this.calcReservationSumGroupId(_tmpWrkCtrReservedSum.PlanVersion, _tmpWrkCtrReservedSum.WrkCtrId, _tmpWrkCtrReservedSum.SchedDate);
        }

        _tmpWrkCtrReservedSum.ReservedCapacity          = reservedOperation + reservedJob;
        _tmpWrkCtrReservedSum.ReservedCapacityOperation = reservedOperation;
        _tmpWrkCtrReservedSum.ReservedCapacityJob       = reservedJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheReservationSum</Name>
				<Source><![CDATA[
    private void cacheReservationSum(TmpWrkCtrReservedSum _tmpWrkCtrReservedSum)
    {
        cacheWrkCtrReservedSum.ins(_tmpWrkCtrReservedSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReservationSumCached</Name>
				<Source><![CDATA[
    private boolean isReservationSumCached(TmpWrkCtrReservedSum _tmpWrkCtrReservedSum)
    {
        if (cacheWrkCtrReservedSum.find(_tmpWrkCtrReservedSum))
        {
            return true;
        }
        else if (useBlockRead)
        {
            this.unpack(WrkCtrReservedSum::findBlock(_tmpWrkCtrReservedSum.PlanVersion, _tmpWrkCtrReservedSum.WrkCtrId, _tmpWrkCtrReservedSum.SchedDate));
            if (cacheWrkCtrReservedSum.find(_tmpWrkCtrReservedSum))
                    return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    boolean insert(RefRecId _reqPlanVersionRefRecId,WrkCtrId _wrkCtrId, SchedDate _schedDate, CapacitySec _reserved)
    {
        if (!this.find(_reqPlanVersionRefRecId,_wrkCtrId,_schedDate))
                return false;

        _reserved += tmpWrkCtrReservedSum.ReservedCapacity;

        cacheWrkCtrReservedSum.del(tmpWrkCtrReservedSum);

        tmpWrkCtrReservedSum.PlanVersion                     = _reqPlanVersionRefRecId;

        tmpWrkCtrReservedSum.WrkCtrId           = _wrkCtrId;
        tmpWrkCtrReservedSum.SchedDate          = _schedDate;
        tmpWrkCtrReservedSum.ReservedCapacity   = _reserved;

        return cacheWrkCtrReservedSum.ins(tmpWrkCtrReservedSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute('BPErrorClassNewNotProtected', 'The constructor is invoked directly by the consumers')]
    public void new(NoYes      _limitCapProd,
                        NoYes      _limitCapPO,
                        NoYes      _limitCapProject,
                        NoYes      _operationScheduled          = true,
                        NoYes      _jobScheduled                = true,
                        boolean    _useBlockRead                = false)
    {
        limitCapProd        = _limitCapProd;
        limitCapPO          = _limitCapPO;
        limitCapProject     = _limitCapProject;

        operationScheduled  = _operationScheduled;
        jobScheduled        = _jobScheduled;
        useBlockRead        = _useBlockRead;

        cacheWrkCtrReservedSum = new RecordSortedList(tablenum(TmpWrkCtrReservedSum));
        cacheWrkCtrReservedSum.sortOrder(fieldnum(TmpWrkCtrReservedSum,WrkCtrId),fieldnum(TmpWrkCtrReservedSum,SchedDate));

        reqParameters = ReqParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container               con;
        TmpWrkCtrReservedSum    packWrkCtrReservedSum;

        if (cacheWrkCtrReservedSum.first(packWrkCtrReservedSum))
            do
        {
            con += [packWrkCtrReservedSum];
        }
        while (cacheWrkCtrReservedSum.next(packWrkCtrReservedSum));

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Reserved</Name>
				<Source><![CDATA[
    CapacitySec rec_Reserved()
    {
        return tmpWrkCtrReservedSum.ReservedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ReservedJob</Name>
				<Source><![CDATA[
    CapacitySec rec_ReservedJob()
    {
        return tmpWrkCtrReservedSum.ReservedCapacityJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ReservedOperation</Name>
				<Source><![CDATA[
    CapacitySec rec_ReservedOperation()
    {
        return tmpWrkCtrReservedSum.ReservedCapacityOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    void unpack(container con)
    {
        TmpWrkCtrReservedSum    packWrkCtrReservedSum;
        Integer                 x;

        for (x=1;x<=conlen(con);x++)
        {
            packWrkCtrReservedSum = conpeek(con,x);

            cacheWrkCtrReservedSum.ins(packWrkCtrReservedSum,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBlock</Name>
				<Source><![CDATA[
    static container findBlock(RefRecId _reqPlanVersionRefRecId,WrkCtrId _wrkCtrId,TransDate _transDate)
    {
        #define.readAhead(12)

        WrkCtrReservedSum blockReservedSum = WrkCtrReservedSum::newFindBlock();

        Integer x;

        for (x=0; x <#readAhead; x++)
                blockReservedSum.find(_reqPlanVersionRefRecId,_wrkCtrId,_transDate+x);

        return blockReservedSum.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFindBlock</Name>
				<Source><![CDATA[
    public static WrkCtrReservedSum newFindBlock()
    {
        return new WrkCtrReservedSum(true,true,true,true,true,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static WrkCtrReservedSum newForm()
    {
        return new WrkCtrReservedSum(true,true,true,true,true,true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>