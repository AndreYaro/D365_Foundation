<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalTableData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalTableData</c> class contains all base methods for the <c>JournalTable</c> table as it
///    is not possible to inherit tables directly.
/// </summary>
// This class contains a journalTable buffer and is the main class for all other sub classes.
// The class must be extended if the journal has more total fields than NumOfLines.

class JournalTableData
{
    JournalStatic           journalStatic;
    JournalVoucherList      journalVoucherList;
    JournalErrorVoucherList journalErrorVoucherList;
    JournalErrorTransList   journalErrorTransList;
    JournalVoucherNum       journalVoucherNum;
    JournalTransList        journalTransList;

    JournalTableMap         journalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotal</Name>
				<Source><![CDATA[
    public void addTotal(
        JournalTransMap _journalTrans,
        boolean         _reverse = false)
    {
        journalTable.NumOfLines += _reverse ? -1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockLevel</Name>
				<Source><![CDATA[
    public JournalBlockLevel blockLevel(JournalTableMap _journalTable = journalTable)
    {
        return JournalTableData::journalBlockLevel(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoUnlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the lock on the journal is no longer required.
    /// </summary>
    /// <param name = "_forupdate">The operation being performed on the journal.</param>
    /// <returns>true if the journal can be unlocked; otherwise, false.</returns>
    /// <remarks>If the journal is locked by current user in another session, then the journal unlocked for updating.</remarks>
    public boolean canBeAutoUnlocked(boolean _forupdate)
    {
        if (journalTable.SessionId)
        {
            if (! isSessionActive(journalTable.SessionId, journalTable.SessionLoginDateTime))
            {
                // the session is not active anymore
                return true;
            }

            if (_forupdate &&
                (FeatureStateProvider::isFeatureEnabled(LedgerJournalSystemBlockedFeatureReverseFlight::instance())
                    ? true : !journalTable.SystemBlocked) &&
                journalTable.SessionId != sessionId() &&
                new xSession(journalTable.SessionId).userId() == curUserId())
            {
                // The current user has a lock in a different session and is requesting editing
                return true;
            }
        }

        if (journalTable.Posted && journalTable.SystemBlocked)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalInUseAndCannotBeAutoUnlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is currently being used by another user and cannot be unlocked automatically.
    /// </summary>
    /// <returns>true, if the journal is currently being used by another user and cannot be unlocked automatically; otherwise, false.</returns>
    public boolean isJournalInUseAndCannotBeAutoUnlocked()
    {
        return journalTable.SessionId && journalTable.SessionId != sessionid() && !this.canBeAutoUnlocked(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalIsInUseAndCannotBeAutoUnlockedValidationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the error message that should be displayed if the user is trying to edit a journal that is locked by another user.
    /// </summary>
    /// <returns>The error message that should be displayed if the user is trying to edit a journal that is locked by another user.</returns>
    public str journalIsInUseAndCannotBeAutoUnlockedValidationMessage()
    {
        return strFmt("@SYS18418", journalTable.JournalId, new xSession(journalTable.SessionId).userId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpen</Name>
				<Source><![CDATA[
    public boolean checkOpen()
    {
        if (journalTable.Posted)
        {
            return checkFailed("@SYS21497");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTotalTo</Name>
				<Source><![CDATA[
    public void copyTotalTo(JournalTableMap _toJournalTable)
    {
        _toJournalTable.NumOfLines  = journalTable.NumOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrors</Name>
				<Source><![CDATA[
    public boolean hasErrors()
    {
        return ((select journalError
                    where journalError.RefTableId   == journalTable.TableId &&
                          journalError.JournalId    == journalTable.JournalId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    public boolean hasLines()
    {
        JournalTransMap journalTrans = this.journalStatic().journalTrans();

        select firstonly RecId from journalTrans
            where journalTrans.JournalId == journalTable.JournalId;

        return journalTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUserAccess</Name>
				<Source><![CDATA[
    public boolean hasUserAccess()
    {
        if (!journalTable.BlockUserGroupId)
        {
            return true;
        }

        return JournalStatic::hasUserAccessForGroupId(journalTable.BlockUserGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infolog</Name>
				<Source><![CDATA[
    public void infolog()
    {
        if (this.journalErrorTransList().first())
        {
            do
            {
                JournalError::infolog(this.journalErrorTransList().item());
            }
            while (this.journalErrorTransList().next());
        }

        if (this.journalErrorVoucherList().first())
        {
            do
            {
                JournalError::infolog(this.journalErrorVoucherList().item());
            }
            while (this.journalErrorVoucherList().next());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalName</Name>
				<Source><![CDATA[
    public void initFromJournalName(JournalNameMap _journalName)
    {
        journalTable.BlockUserGroupId   =   _journalName.BlockUserGroupId;
        if (!this.hasUserAccess())
        {
            return;
        }

        journalTable.JournalNameId      =   _journalName.JournalNameId;
        journalTable.Description        =   _journalName.Description;
        journalTable.DeletePostedLines  =   _journalName.DeletePostedLines;
        journalTable.JournalType        =   _journalName.JournalType;

        if (this.journalVoucherNum())
        {
            journalTable.VoucherDraw        =   _journalName.VoucherDraw;
            journalTable.VoucherNumberSeq   =   _journalName.VoucherNumberSeq;
            journalTable.DetailSummary      =   _journalName.DetailSummary;
            journalTable.VoucherChange      =   _journalName.VoucherChange;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotal</Name>
				<Source><![CDATA[
    public void initTotal()
    {
        journalTable.NumOfLines = this.numOfJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfJournalLines</Name>
				<Source><![CDATA[
    private int numOfJournalLines()
    {
        JournalTransMap journalTrans = this.journalStatic().journalTrans();

        select count(RecId) from journalTrans
            where journalTrans.JournalId == journalTable.JournalId;

        return any2int(journalTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalErrorTransList</Name>
				<Source><![CDATA[
    public JournalErrorTransList journalErrorTransList(JournalErrorTransList _journalErrorTransList = journalErrorTransList)
    {
        journalErrorTransList = _journalErrorTransList;

        if (! journalErrorTransList)
        {
            journalErrorTransList = this.journalStatic().newJournalErrorTransList(this);
        }

        return journalErrorTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalErrorVoucherList</Name>
				<Source><![CDATA[
    public JournalErrorVoucherList journalErrorVoucherList(JournalErrorVoucherList _journalErrorVoucherList = journalErrorVoucherList)
    {
        journalErrorVoucherList = _journalErrorVoucherList;

        if (! journalErrorVoucherList)
        {
            journalErrorVoucherList = this.journalStatic().newJournalErrorVoucherList(this);
        }

        return journalErrorVoucherList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalStatic</Name>
				<Source><![CDATA[
    public JournalStatic journalStatic(JournalStatic _journalStatic = journalStatic)
    {
        journalStatic = _journalStatic;

        if (! journalStatic)
        {
            journalStatic = JournalStatic::newTable(journalTable);
        }

        return journalStatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    public JournalTableMap journalTable(JournalTableMap _journalTable = journalTable)
    {
        journalTable = _journalTable;
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransList</Name>
				<Source><![CDATA[
    public JournalTransList journalTransList(JournalTransList _journalTransList = journalTransList)
    {
        journalTransList = _journalTransList;

        if (! journalTransList)
        {
            journalTransList = this.journalStatic().newJournalTransList(this);
        }

        return journalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalVoucherList</Name>
				<Source><![CDATA[
    public JournalVoucherList journalVoucherList(JournalVoucherList _journalVoucherList = journalVoucherList)
    {
        journalVoucherList = _journalVoucherList;

        if (! journalVoucherList)
        {
            journalVoucherList = this.journalStatic().newJournalVoucherList(this);
        }

        return journalVoucherList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalVoucherNum</Name>
				<Source><![CDATA[
    public JournalVoucherNum journalVoucherNum(JournalVoucherNum _journalVoucherNum = journalVoucherNum)
    {
        journalVoucherNum = _journalVoucherNum;

        if (! journalVoucherNum)
        {
            journalVoucherNum = this.journalStatic().newJournalVoucherNum(this);
        }

        return journalVoucherNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the number of lines.
    /// </summary>
    /// <param name="_NumOfLines">
    /// The number of transaction lines that the journal contains.
    /// </param>
    public void mcrSetNumOfLines(int _NumOfLines)
    {
        journalTable.NumOfLines = _NumOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of lines.
    /// </summary>
    /// <returns>The number of transaction lines that the journal contains.</returns>
    public int getNumOfLines()
    {
        return journalTable.NumOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(JournalTableMap _journalTable)
    {
        journalTable    = _journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalId</Name>
				<Source><![CDATA[
    public JournalId nextJournalId()
    {
        return NumberSeq::newGetNum(this.journalStatic().numRefJournalId(),false).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTableSessionInfo</Name>
				<Source><![CDATA[
    protected void setJournalTableSessionInfo(
        boolean					_skipBlocking,
        JournalBlockLevel		_toLevel)
    {
        if (!_skipBlocking)
        {
            if (_toLevel == JournalBlockLevel::System)
            {
                journalTable.SystemBlocked          = true;

                if (!FeatureStateProvider::isFeatureEnabled(LedgerJournalSystemBlockedFeatureReverseFlight::instance()))
                {
                    xSession xSession                   = new xSession(sessionId());
                    
                    journalTable.SessionId              = sessionId();
                    journalTable.SessionLoginDateTime   = xSession.loginDateTime();
                }
                else
                {
                    journalTable.SessionId              = 0;
                    journalTable.SessionLoginDateTime   = utcDateTimeNull();
                }
            }
            else if (_toLevel == JournalBlockLevel::InUse)
            {
                xSession xSession                   = new xSession(sessionId());

                journalTable.SystemBlocked			= false;

                journalTable.SessionId              = sessionId();
                journalTable.SessionLoginDateTime   = xSession.loginDateTime();
            }
            else if (_toLevel == JournalBlockLevel::None)
            {
                journalTable.SystemBlocked			= false;

                journalTable.SessionId              = 0;
                journalTable.SessionLoginDateTime   = utcDateTimeNull();
            }

            // Since all we are updating is the blocked status, use existing values for ModifiedBy
            // so that the current user doesn't get tagged as the last person to modify the record.
            journalTable.overwriteSystemfields(true);
            journalTable.doUpdate();
            journalTable.overwriteSystemfields(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBlock</Name>
				<Source><![CDATA[
    public void updateBlock(
        JournalBlockLevel   _fromLevel,
        JournalBlockLevel   _toLevel,
        boolean             _updateTotal = true,
        boolean             _allowSkippingBlockingOfSystemBlockedJournals = false)
    {
        boolean                 skipBlocking;

        JournalTableData        journalTableData;

        ttsbegin;

        journalTableData = JournalTableData::newTable(journalTable);

        journalTable.selectForUpdate(true);
        journalTable.reread();

        if (!journalTable.RecId)
        {
            // throw an error if the record was deleted since no further processing is valid
            throw error("@SYS77596");
        }

        if (_fromLevel > _toLevel)     // unlock
        {
            if (journalTable.SystemBlocked && _fromLevel < JournalBlockLevel::System)
            {
                skipBlocking = true;
            }
            else
            {
                if (_fromLevel == JournalBlockLevel::InUse)
                {
                    if (journalTable.SessionId)
                    {						
                        if (!isSessionActive(journalTable.SessionId,journalTable.SessionLoginDateTime))
                        {
                            journalTableData.initTotal();
                            _updateTotal = true;
                        }
                        else
                        {
                            int localNumOfLines = this.numOfJournalLines();
                            if (localNumOfLines != 0 && localNumOfLines != journalTable.NumOfLines)
                            {
                                journalTable.NumOfLines = localNumOfLines;
                                _updateTotal = true;
                            }

                            if (!this.hasLines() && JournalTable is LedgerJournalTable)
                            {
                                journalTable.NumOfLines = 0;
                                _updateTotal = true;
                            }
                            else
                            {
                                if (this.isJournalInUseAndCannotBeAutoUnlocked()) // in use by another user
                                {
                                    skipBlocking = true;
                                    _updateTotal = false;
                                }
                            }
                        }
                    }
                    else if (journalTable.SystemBlocked)
                    {
                        _updateTotal = false;
                    }
                    else
                    {
                        journalTableData.initTotal();
                        _updateTotal = true;
                    }
                }
                else // _fromLevel == JournalBlockLevel::System
                if (! journalTable.SystemBlocked)
                {
                    journalTableData.initTotal();
                    _updateTotal = true;
                }

                if (_updateTotal)
                {
                    journalTableData.copyTotalTo(journalTable);
                }
            }
        }
        else if (_fromLevel == _toLevel)
        {
            if (_toLevel == JournalBlockLevel::None)
            {
                journalTableData.initTotal();
                journalTableData.copyTotalTo(journalTable);
            }
            else
            {
                throw error(strFmt("@SYS22828",funcName()));
            }
        }
        else  // lock
        {
            if (journalTable.SystemBlocked && _toLevel < JournalBlockLevel::System && (_allowSkippingBlockingOfSystemBlockedJournals || FormDataUtil::isFormDataSource(journalTable)))
            {
                skipBlocking = true;
            }
            else
            {
                if (_fromLevel == JournalBlockLevel::None)
                {
                    if (this.isJournalInUseAndCannotBeAutoUnlocked())
                    {
                        throw error(this.journalIsInUseAndCannotBeAutoUnlockedValidationMessage());
                    }
                }
                else  // _fromLevel = JournalBlockLevel::InUse
                {
                    if (! journalTable.SessionId) // is not in use
                    {
                        throw error(strFmt("@SYS69036",journalTable.JournalId));
                    }

                    if (_updateTotal)
                    {
                        journalTableData.copyTotalTo(journalTable);
                    }
                }

                if (journalTable.SystemBlocked)
                {
                    throw error(strFmt("@SYS21618",journalTable.JournalId));
                }
            }
        }

        this.setJournalTableSessionInfo(skipBlocking, _toLevel);

        ttscommit;

        // Remove the journalNum cache that was set on \Classes\LedgerJournalTaxDocument\doTaxGroupExistsForDocument,
        // since a different user may edit the tax information on the document
        // while this user is not editing the document. Since the update() will
        // be called when the InUse flag is cleared on the journal header, this
        // will ensure the journal re-checks for taxes on this session the next
        // time it is used
        LedgerJournalTaxDocument::clearCachedTaxExistenceCheck(journalTable.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total number of lines on the journal header record.
    /// </summary>
    public void updateTotal()
    {
        ttsbegin;

        JournalTableMap localJournalTable;
        localJournalTable.data(journalTable);

        JournalTableData journalTableData = JournalTableData::newTable(localJournalTable);

        journalTable.selectForUpdate(true);
        journalTable.reread();

        journalTableData.copyTotalTo(journalTable);
        journalTable.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePre</Name>
				<Source><![CDATA[
    public boolean validateWritePre(boolean _ret = true)
    {
        if (! this.checkOpen())
        {
            _ret = false;
        }

        if (! this.hasUserAccess())
        {
            _ret = false;
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowStatus</Name>
				<Source><![CDATA[
    public boolean validateWorkflowStatus(JournalCheckPostType journalCheckPostType)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static JournalTableData construct(JournalTableMap _journalTable)
    {
        SysTableNameFactoryAttribute attribute = new SysTableNameFactoryAttribute(tableId2Name(_journalTable.TableId));
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_journalTable);

        JournalTableData instance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(JournalTableData), attribute, instantiation);

        if (!instance)
        {
            instance = new JournalTableData(_journalTable);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalBlockLevel</Name>
				<Source><![CDATA[
    public static JournalBlockLevel journalBlockLevel(JournalTableMap _journalTable)
    {
        if (_journalTable.SystemBlocked)
        {
            return JournalBlockLevel::System;
        }

        if (_journalTable.SessionId)
        {
            return JournalBlockLevel::InUse;
        }

        return JournalBlockLevel::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTable</Name>
				<Source><![CDATA[
    public static JournalTableData newTable(JournalTableMap _journalTable)
    {
        return JournalTableData::construct(_journalTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>