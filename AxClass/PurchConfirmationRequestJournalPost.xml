<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchConfirmationRequestJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to post journal when sending a purchase order to a vendor, to request confirmation from the vendor.
/// </summary>
public class PurchConfirmationRequestJournalPost extends PurchPurchOrderJournalPost
{
    PurchConfirmationRequestJour purchConfirmationRequestJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>InventReportDimHistoryTable</c> table.
    /// </summary>
    /// <param name="_purchLine">
    /// A journal line record.
    /// </param>
    protected void addToInventReportDimHistory(Common _purchLine)
    {
        PurchLine               localPurchLine = _purchLine as PurchLine;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain = localPurchLine.QtyOrdered;

        if (purchLine.isStocked())
        {
            if (qtyRemain)
            {
                while select TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId       == localPurchLine.InventTransId
                       && inventTransOrigin.ReferenceCategory   == InventTransType::Purch
                join InventDimId, sum(Qty) from inventTrans
                    group by InventDimId
                    where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                {
                    qtyRemain = this.createInventReportDimHistory(localPurchLine.InventTransId, inventTrans.InventDimId, purchConfirmationRequestJour.DocumentNumber, -inventTrans.Qty, qtyRemain);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
        else
        {
            this.createInventReportDimHistory(
                localPurchLine.InventTransId,
                localPurchLine.InventDimId,
                purchConfirmationRequestJour.DocumentNumber,
                localPurchLine.PurchQty,
                localPurchLine.PurchQty );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether ledger postings can occur.
    /// </summary>
    /// <returns>
    /// true if ledger postings can occur; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returning false for confirmation request to ensure financial postings are not performed.
    /// </remarks>
    protected boolean canPostLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>DocumentStatus</c> enum related to the current posting.
    /// </summary>
    /// <returns>
    /// The <c>DocumentStatus::ConfirmationRequest</c> enum value.
    /// </returns>
    protected DocumentStatus documentStatus()
    {
        return DocumentStatus::ConfirmationRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the posting of a journal line.
    /// </summary>
    /// <remarks>
    /// In parent class this calls Finalize on any related purchase requisition line.
    /// This should not happen until purchase order is confirmed, therefore overriding with empty method body.
    /// </remarks>
    protected void endPostLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <remarks>
    /// Overrides parent class as there is no need for the financially related initializations.
    /// </remarks>
    public void init()
    {
        purchTableVersion = PurchTableVersion::find(purchConfirmationRequestJour.PurchTableVersion);

        // Required from FormletterJournalPost.init()
        this.initRecordLists();
        doCopyDocuRefOnLines = FormletterParmTable::doCopyDocuRefOnLines(this.parmParmTable());

        if (!purchTable)
        {
            purchTable = purchConfirmationRequestJour.purchTable();
        }

        if (this.parmTotals())
        {
            purchTotals = this.parmTotals() as PurchTotals;
        }
        else
        {
            purchTotals = PurchTotals::newPurchTableConfirmation(vendPurchOrderJour.purchTable(), purchParmTable);
            purchTotals.calc();
        }

        this.tax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransactionTxt</c> object.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// A ledger transaction text.
    /// </param>
    /// <returns>
    /// An instance of the <c>TransactionTxt</c> class.
    /// </returns>
    /// <remarks>
    /// This is called from <c>FormletterJournalPost</c> class, <c>init</c> method, which means it will always be
    /// executed. Overriding to avoid a number of unnecessary method calls as this is not needed for confirmation request.
    /// </remarks>
    protected TransactionTxt initTransactionTxt(LedgerTransTxt _ledgerTransTxt)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the journal table.
    /// </summary>
    /// <param name="_journalTable">
    /// The specified record of the <c>PurchConfirmationRequestJour</c> table.
    /// </param>
    /// <returns>
    /// A record buffer from the <c>PurchConfirmationRequestJour</c> table.
    /// </returns>
    public Common parmJournalTable(Common _journalTable = purchConfirmationRequestJour)
    {
        purchConfirmationRequestJour = _journalTable as PurchConfirmationRequestJour;

        return purchConfirmationRequestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal.
    /// </summary>
    /// <param name="_purchTableMarkup">
    /// The specified record of the <c>PurchTable</c> table.
    /// </param>
    /// <remarks>
    /// Override to ensure nothing is posted for confirmation request.
    /// </remarks>
    protected void postMarkupOnJour(PurchTable  _purchTableMarkup)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal line.
    /// </summary>
    /// <remarks>
    /// Override to ensure nothing is posted for confirmation request.
    /// </remarks>
    protected void  postMarkupOnTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal header.
    /// </summary>
    /// <remarks>
    /// Override to ensure nothing is posted for confirmation request.
    /// </remarks>
    protected void  postMarkupTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processedHeaderImplEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// A processed purchase order source document event handler.
    /// </summary>
    /// <param name="_sourceDocumentHeaderImplementation">
    /// The source document header implementation.
    /// </param>
    /// <remarks>
    /// Overriding to ensure nothing is processed for confirmation request.
    /// </remarks>
    public void processedHeaderImplEventHandler(SourceDocumentHeaderImplementation  _sourceDocumentHeaderImplementation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the source document.
    /// </summary>
    /// <remarks>
    /// Overriding to ensure nothing is processed for confirmation request.
    /// </remarks>
    protected void processSourceDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pointer to process document lines.
    /// </summary>
    protected void selectFormletterJournalTrans()
    {
        select purchLine
            where purchLine.PurchId  == purchConfirmationRequestJour.getPurchaseOrderId();

        formletterJournalTrans.data(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction Date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return purchConfirmationRequestJour.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        SetEnumerator se = ordersPosted.getEnumerator();

        ttsbegin;
        while (se.moveNext())
        {
            purchTable = PurchTable::find(se.current(),true);
            if (purchTable)
            {
                this.updatePurchTable();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the document status for the purchase table.
    /// </summary>
    protected void updatePurchTable()
    {
        purchTable.updateDocumentStatus(this.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchConfirmationRequestJournalPost construct()
    {
        return new PurchConfirmationRequestJournalPost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>