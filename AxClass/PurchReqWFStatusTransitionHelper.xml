<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWFStatusTransitionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqWFStatusTransitionHelper</c> class is used for transitioning purchase requisition workflow status.
/// </summary>
///
public class PurchReqWFStatusTransitionHelper
{
    PurchReqRequisitionStatus   toRequisitionStatus;

    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCancelLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a requisition line  can be canceled.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record to cancel.
    /// </param>
    /// <returns>
    /// true if the requisition line can be canceled; otherwise, false.
    /// </returns>
    protected boolean canCancelLine(PurchReqLine _purchReqLine)
    {
        return (_purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved
            || (!_purchReqLine.isConsumption() && _purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Closed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doVersioning</Name>
				<Source><![CDATA[
    private void doVersioning(RecId _purchReqTableRecId)
    {
        VersioningPurchReq  versioningPurchReq;

        versioningPurchReq = VersioningPurchReq::newVersioningPurchReq(_purchReqTableRecId);
        versioningPurchReq.archiveCurrentVersion(_purchReqTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewRequisitionStatusCancelHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the new requisition status for the header when canceling the requisition
    /// </summary>
    /// <param name="_purchReqTable">
    /// The <c>PurchReqTable</c> record to cancel.
    /// </param>
    /// <returns>
    /// A <c>PurchReqRequisitionStatus</c>
    /// </returns>
    protected PurchReqRequisitionStatus getNewRequisitionStatusCancelHeader(PurchReqTable   _purchReqTable)
    {
        if (_purchReqTable.isConsumption())
        {
            return PurchReqTable::existPurchReqLineStatus(_purchReqTable.RecId, PurchReqRequisitionStatus::Closed) ? PurchReqRequisitionStatus::Closed  : PurchReqRequisitionStatus::Cancelled;
        }
        return PurchReqRequisitionStatus::Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchReqRequisitionStatus _toRequisitionStatus)
    {
        toRequisitionStatus = _toRequisitionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqTable</Name>
				<Source><![CDATA[
    private PurchReqTable purchReqTable(RecId _purchReqTableRecId, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchReqTable   purchReqTable = PurchReqTable::find(_purchReqTableRecId, true, _concurrencyModel);

        if (!purchReqTable)
        {
            throw error (strFmt("@SYS319808", _purchReqTableRecId));
        }

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqLine</Name>
				<Source><![CDATA[
    private void updatePurchReqLine(PurchReqLine purchReqLine, boolean _doVersioning)
    {
        using (var activityContext = this.instrumentationLogger().workflowActivities().updatePurchReqLine(purchReqLine, _doVersioning, toRequisitionStatus))
        {
            purchReqLine.RequisitionStatus = toRequisitionStatus;
            purchReqLine.update(_doVersioning);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqLineForRequisition</Name>
				<Source><![CDATA[
    private void updatePurchReqLineForRequisition(RecId _purchReqTableRecId)
    {
        using (var updateLineContext = this.instrumentationLogger().workflowActivities().updatePurchReqLineForRequisition(_purchReqTableRecId))
        {
            PurchReqLine    purchReqLine;

            while select forupdate purchReqLine where purchReqLine.PurchReqTable      == _purchReqTableRecId &&
                                                      purchReqLine.RequisitionStatus  != PurchReqRequisitionStatus::Cancelled
            {
                this.updatePurchReqLine(purchReqLine, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates status in a <c>PurchReqLine</c> record and optionally updates status in the corresponding
    /// <c>PurchReqTable</c> record.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The reference record ID in the <c>PurchReqLine</c> record.
    /// </param>
    /// <param name="_status">
    /// The status in which to be updated.
    /// </param>
    /// <param name="_doVersioning">
    /// Optional parameter that controls whether to run PR versioning when updating a line. Setting this to false
    /// will improve performance when updating a batch of PR lines, but makes the caller responsible for
    /// updating the history when all lines are updated.
    /// </param>
    static void setPurchReqLineStatus(
        RecId                       _purchReqLineRecId,
        PurchReqRequisitionStatus   _status,
        boolean                     _doVersioning = true)
    {
        PurchReqWFStatusTransitionHelper purchReqWFStatusTransitionHelper = new PurchReqWFStatusTransitionHelper(_status);

        ttsbegin;

        PurchReqLine purchReqLine = PurchReqLine::find(_purchReqLineRecId, true);

        boolean isPublicSectorBudgetReservationReferenced = PurchReqWFStatusTransitionHelper::isPurchaseRequsitionLineStatusChangeFromBudgetReservationReference(purchReqLine, _status);

        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper)).workflowActivities().purchReqLineStatus(purchReqLine, _status, _doVersioning, isPublicSectorBudgetReservationReferenced))
        {
            if (    _status == PurchReqRequisitionStatus::Cancelled
                ||  _status == PurchReqRequisitionStatus::Closed
                ||  (_status == PurchReqRequisitionStatus::Approved && purchReqLine.RequisitionStatus  == PurchReqRequisitionStatus::Closed && !purchReqLine.isConsumption())
                ||  _status == PurchReqRequisitionStatus::Rejected
                || isPublicSectorBudgetReservationReferenced
               )
            {
                purchReqWFStatusTransitionHelper.updatePurchReqLine(purchReqLine, false);
                purchReqWFStatusTransitionHelper.updatePurchaseRequsitionHeaderStatus(purchReqLine.PurchReqTable,  _doVersioning);
            }
            else
            {
                purchReqWFStatusTransitionHelper.updatePurchReqLine(purchReqLine, _doVersioning);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqHeaderClosedStatus</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static void setPurchReqHeaderClosedStatus(RecId _purchReqTableRecId)
    {
        PurchReqWFStatusTransitionHelper purchReqWFStatusTransitionHelper = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::Closed);
        purchReqWFStatusTransitionHelper.updatePurchaseRequsitionHeaderStatus(_purchReqTableRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseRequsitionHeaderStatus</Name>
				<Source><![CDATA[
    private void updatePurchaseRequsitionHeaderStatus(RefRecId  _purchReqTableRecId, boolean _doVersioning = true)
    {
        PurchReqTable purchReqTable = this.purchReqTable( _purchReqTableRecId);

        purchReqTable.RequisitionStatus = PurchReqTable::evaluateHeaderStatus(_purchReqTableRecId, toRequisitionStatus);

        using (var updateLineContext = this.instrumentationLogger().workflowActivities().updatePurchaseRequsitionHeaderStatus(_purchReqTableRecId, purchReqTable.RequisitionStatus, toRequisitionStatus))
        {
            if (purchReqTable.RequisitionStatus != purchReqTable.orig().RequisitionStatus)
            {
                purchReqTable.update();
            }

            if (_doVersioning)
            {
                this.doVersioning(purchReqTable.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable2Approved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status in the <c>PurchReqTable</c> and <c>PurchReqLine</c> records.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    /// <param name="_isReset2Approved">
    /// A Boolean value that indicates whether the status is being reset to approved.
    /// </param>
    static void setPurchReqTable2Approved(RecId   _purchReqTableRecId, boolean _isReset2Approved = false)
    {
        PurchReqWFStatusTransitionHelper    purchReqWFStatusTransitionHelper    = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::Approved);
        PurchReqTable                       purchReqTable;
        PurchReqLine                        purchReqLine;
        SourceDocumentLineItem              sourceDocumentLineItem;

        PurchInstrumentationLogger instrumentationLogger = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.workflowActivities().purchaseReqApproved(_purchReqTableRecId, _isReset2Approved))
        {
            ttsbegin;

            purchReqTable = purchReqWFStatusTransitionHelper.purchReqTable(_purchReqTableRecId);

            purchReqTable.RequisitionStatus = PurchReqRequisitionStatus::Approved;

            if (PublicSectorUtils::isBudgetReservationEnabled())
            {
                purchReqTable.checkBudgetReservationBalance();
            }
            
            purchReqTable.update();

            if (!_isReset2Approved)
            {
                purchReqWFStatusTransitionHelper.updatePurchReqLineForRequisition(_purchReqTableRecId);

                using (var updateProjectContext = instrumentationLogger.workflowActivities().updateProjectCommitments())
                {
                    while select forupdate purchReqLine where purchReqLine.PurchReqTable      == _purchReqTableRecId &&
                                                              purchReqLine.RequisitionStatus  != PurchReqRequisitionStatus::Cancelled
                    {
                        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(PurchReqLine::find(purchReqLine.RecId));
                        ProjectCommitmentFacade::updateProjectCommitments(sourceDocumentLineItem, false, ProjectCommitmentFacade::suppressMessages(sourceDocumentLineItem));
                    }
                }

                RequisitionReleaseStrategy::updateManaulDocumentGeneration(_purchReqTableRecId);
                purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);

                if (purchReqTable.RequisitionPurpose == RequisitionPurpose::Consumption)
                {
                    if (PurchReqPurchaseOrderGenerationLoggerFlight::instance().isEnabled())
                    {
                        using (var tableLoggerContext = instrumentationLogger.workflowActivities().purchReqTableLogger(PurchReqTable::find(_purchReqTableRecId)))
                        {
                            while select purchReqLine where purchReqLine.PurchReqTable == _purchReqTableRecId
                            {
                                instrumentationLogger.logInformation(strFmt('%1.RecId:%2 - RequisitionStatus: %3 - IsConsumption: %4 - IsPreEncumbranceRequired: %5 - BuyingLegalEntity: %6',
                                    tableStr(PurchReqLine),
                                    purchReqLine.RecId,
                                    purchReqLine.RequisitionStatus,
                                    purchReqLine.isConsumption(),
                                    purchReqLine.IsPreEncumbranceRequired,
                                    purchReqLine.BuyingLegalEntity));
                            }
                        }
                    }

                    activityContext
                        .addCustomProperty('RequisitionStatus', int2Str(PurchReqTable::find(_purchReqTableRecId).RequisitionStatus));

                    using (var createOrderContext = instrumentationLogger.workflowActivities().purchaseOrderCreation(purchReqTable))
                    {
                        if (purchReqTable.hasBuyingLegalEntityWithBudgetControlEnabledForPurchaseOrder())
                        {
                            PurchReqWFStatusTransitionHelper::runPurchReqPurchaseOrderGenerationAsync(purchReqTable);
                        }
                        else
                        {
                            PurchReqPurchaseOrderGenerationInSync::run(purchReqTable);
                        }
                    }
                }
            }
            else
            {
                purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPurchReqPurchaseOrderGenerationAsync</Name>
				<Source><![CDATA[
    private static void runPurchReqPurchaseOrderGenerationAsync(PurchReqTable _purchReqTable)
    {
        PurchReqPurchaseOrderGenerationAsync::runAsync(_purchReqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable2Cancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status in the <c>PurchReqTable</c> and <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    static void setPurchReqTable2Cancelled(RecId   _purchReqTableRecId)
    {
        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper)).workflowActivities().purchaseReqCancelled(_purchReqTableRecId))
        {
            PurchReqWFStatusTransitionHelper    purchReqWFStatusTransitionHelper    = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::Cancelled);
            PurchReqTable                       purchReqTable;
            PurchReqLine                        purchReqLine;

            ttsbegin;

            purchReqTable                   = purchReqWFStatusTransitionHelper.purchReqTable(_purchReqTableRecId);
            purchReqTable.RequisitionStatus = purchReqWFStatusTransitionHelper.getNewRequisitionStatusCancelHeader(purchReqTable);

            purchReqTable.update();

            while select forupdate purchReqLine where purchReqLine.PurchReqTable == _purchReqTableRecId
            {
                if (purchReqWFStatusTransitionHelper.canCancelLine(purchReqLine))
                {
                    purchReqLine.RequisitionStatus = PurchReqRequisitionStatus::Cancelled;
                    purchReqLine.update(false);
                }
                else
                {
                    warning(strFmt("@SYS333809", purchReqLine.SequenceNumber));
                }
            }

            purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable2Draft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status in the <c>PurchReqTable</c> and <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    static void setPurchReqTable2Draft(RecId   _purchReqTableRecId)
    {
        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper)).workflowActivities().purchaseReqDraft(_purchReqTableRecId))
        {
            PurchReqWFStatusTransitionHelper    purchReqWFStatusTransitionHelper    = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::Draft);
            PurchReqTable                       purchReqTable;

            ttsbegin;

            purchReqTable = purchReqWFStatusTransitionHelper.purchReqTable(_purchReqTableRecId);

            purchReqTable.RequisitionStatus = PurchReqRequisitionStatus::Draft;
            purchReqTable.SubmittedBy       = '';
            purchReqTable.SubmittedDateTime = DateTimeUtil::minValue();

            purchReqTable.update();

            purchReqWFStatusTransitionHelper.updatePurchReqLineForRequisition(_purchReqTableRecId);

            if (PurchReqTableHistory::existsHistory(_purchReqTableRecId))
            {
                purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable2InReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status in the <c>PurchReqTable</c> and <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    /// <returns>
    /// true if the status was updated; otherwise, false.
    /// </returns>
    static boolean setPurchReqTable2InReview(RecId   _purchReqTableRecId)
    {
        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper)).workflowActivities().purchaseReqInReview(_purchReqTableRecId))
        {
            PurchReqWFStatusTransitionHelper    purchReqWFStatusTransitionHelper    = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::InReview);
            PurchReqTable                       purchReqTable;
            PurchReqTable                       purchReqTableLocal;
            boolean                             ret;

            ttsbegin;
            //if user clicks on buttons from multiple forms or clicks the 'submit' button multiple times
            //then only one process will go thru the below line till the ttscommit is called.
            purchReqTable = purchReqWFStatusTransitionHelper.purchReqTable(_purchReqTableRecId, ConcurrencyModel::Pessimistic);

            purchReqTableLocal.skipTTSCheck(true);

            //In case there are simultaneous submissions, select the record again to confirm that the status has not already changed.
            select firstonly purchReqTableLocal where purchReqTableLocal.RecId == _purchReqTableRecId;

            if (purchReqTable.IsWorkflowToBeResubmitted)
            {
                purchReqTable.IsWorkflowToBeResubmitted = false;

                purchReqTable.update();
            }

            if (purchReqTableLocal.RequisitionStatus != PurchReqRequisitionStatus::InReview)
            {
                purchReqWFStatusTransitionHelper.updatePurchReqTableInReview(purchReqTable);
                purchReqWFStatusTransitionHelper.updatePurchReqLineForRequisition(_purchReqTableRecId);
                purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);

                ret = true;
            }

            ttscommit;

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable2Rejected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates status in the <c>PurchReqTable</c> and <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    static void setPurchReqTable2Rejected(RecId   _purchReqTableRecId)
    {
        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchReqWFStatusTransitionHelper)).workflowActivities().purchaseReqRejected(_purchReqTableRecId))
        {
            PurchReqWFStatusTransitionHelper    purchReqWFStatusTransitionHelper    = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::Rejected);
            PurchReqTable                       purchReqTable;

            ttsbegin;

            purchReqTable = purchReqWFStatusTransitionHelper.purchReqTable(_purchReqTableRecId);

            purchReqTable.RequisitionStatus = PurchReqRequisitionStatus::Rejected;

            purchReqTable.update();

            purchReqWFStatusTransitionHelper.updatePurchReqLineForRequisition(_purchReqTableRecId);

            purchReqWFStatusTransitionHelper.doVersioning(_purchReqTableRecId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTableByBudgetReservationReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates status in the <c>PurchReqTable</c>.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The reference record ID of the <c>PurchReqTable</c> record.
    /// </param>
    /// <param name="_doVersioning">
    /// Optional parameter that controls whether to run PR versioning when updating a line. Setting this to false
    /// will improve performance when updating a batch of PR lines, but makes the caller responsible for
    /// updating the history when all lines are updated.
    /// </param>
    public static void setPurchReqTableByBudgetReservationReference(RecId _purchReqTableRecId, boolean _doVersioning = true)
    {
        PurchReqWFStatusTransitionHelper purchReqWFStatusTransitionHelper = new PurchReqWFStatusTransitionHelper(PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN);

        purchReqWFStatusTransitionHelper.updatePurchaseRequsitionHeaderStatus(_purchReqTableRecId, _doVersioning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseRequsitionLineStatusChangeFromBudgetReservationReference</Name>
				<Source><![CDATA[
    private static boolean isPurchaseRequsitionLineStatusChangeFromBudgetReservationReference( PurchReqLine _purchReqLine, PurchReqRequisitionStatus _status)
    {
        boolean isStatusChangeFromBudgetReservationReference;

        isStatusChangeFromBudgetReservationReference = PublicSectorUtils::isBudgetReservationEnabled()
            &&  (_status == PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN)
            ||  (_status == PurchReqRequisitionStatus::Approved
                    && _purchReqLine.RequisitionStatus   == PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN
                    && !_purchReqLine.isConsumption()
                );

        return isStatusChangeFromBudgetReservationReference;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchReqTableInReview</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void updatePurchReqTableInReview(PurchReqTable _purchReqTable)
    {
        _purchReqTable.RequisitionStatus         = PurchReqRequisitionStatus::InReview;
        _purchReqTable.SubmittedBy               = curUserId();
        _purchReqTable.SubmittedDateTime         = DateTimeUtil::utcNow();

        _purchReqTable.performBudgetCheck();

        _purchReqTable.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>