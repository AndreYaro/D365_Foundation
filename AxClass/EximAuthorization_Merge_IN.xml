<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_Merge_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization merge class.
/// </summary>
class EximAuthorization_Merge_IN extends RunBase
{
    container              selectedAuthIds;
    container              selectedAuthRecIds;
    Notes                  notes;
    boolean                merge;
    EximLicenseNum_IN      authorizationNumber;
    EximReferenceNumber_IN refNumber;
    TransDateTime          refDateTime;
    TransDate              exportExpiryDate;
    TransDate              importExpiryDate;
    RefRecId               schemeTableRecId;
    RefRecId               mergedSchemeTableRecId;
    EximAuthorizationId_IN merge2AuthorizationId;
    EximAuthorizationId_IN mergedAuthorizationId;

    #define.currentVersion(1)
    #localmacro.currentList
        schemeTableRecId,
        exportExpiryDate,
        importExpiryDate,
        refNumber,
        refDateTime,
        notes
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object  dialog()
    {
        Args    args = new Args();
        FormRun formRun;

        if (hasMenuItemAccess(menuitemdisplaystr(EximAuthorizationScheme_Merge_IN),  MenuItemType::Display))
        {
            args.name(formstr(EximAuthorizationScheme_Merge_IN));
            args.caller(this);
            formRun = new MenuFunction(menuitemdisplaystr(EximAuthorizationScheme_Merge_IN), MenuItemType::Display).create(args);
            formRun.init();
        }
        else
        {
            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximAuthorizationScheme_Merge_IN)));
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeAuthorizations</Name>
				<Source><![CDATA[
    private void mergeAuthorizations()
    {
        Counter                             iCount;
        RefRecId                            authorizationSchemesTableRecId;
        EximAuthorizationSchemesTable_IN    authorizationSchemesTable;
        EximAuthorizationSchemesTable_IN    authorizationSchemesTableCopy;
        EximAuthorizationSchemesLine_IN     authorizationSchemesLine;
        EximAuthorizationSchemesLine_IN     authorizationSchemesLineCopy;
        EximAuthorizationSchemeReference_IN authorizationSchemeReference;
        EximAuthorizationSchemeReference_IN authorizationSchemeReferenceCopy;
        NumberSeq                           numberSeq;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(schemeTableRecId);

        switch (authorizationSchemesTable.AuthorizationType)
        {
            case EximAuthorizationType_IN::AA:
                numberSeq = NumberSeq::newGetNum(EximParameters_IN::numRefAAAuthorizationId());
                break;

            case EximAuthorizationType_IN::DFIA:
                numberSeq = NumberSeq::newGetNum(EximParameters_IN::numRefDfiaAuthorizationId());
                break;
        }

        authorizationSchemesTableCopy.AuthorizationId           = numberSeq.num();
        authorizationSchemesTableCopy.AuthorizationDateTime     = DateTimeUtil::getSystemDateTime();
        authorizationSchemesTableCopy.AuthorizationBasis        = authorizationSchemesTable.AuthorizationBasis;
        authorizationSchemesTableCopy.EximProductGroupTable     = authorizationSchemesTable.EximProductGroupTable;
        authorizationSchemesTableCopy.EximPorts                 = authorizationSchemesTable.EximPorts;
        authorizationSchemesTableCopy.LicenseNum                = authorizationSchemesTable.LicenseNum;
        authorizationSchemesTableCopy.IssueDate                 = authorizationSchemesTable.IssueDate;
        authorizationSchemesTableCopy.AuthorizationType         = authorizationSchemesTable.AuthorizationType;
        authorizationSchemesTableCopy.Status                    = EximAuthorizationStatus_IN::Approved;
        authorizationSchemesTableCopy.Closed                    = authorizationSchemesTable.Closed;
        authorizationSchemesTableCopy.Transferable              = NoYes::No;
        authorizationSchemesTableCopy.insert();

        mergedSchemeTableRecId = authorizationSchemesTableCopy.RecId;
        mergedAuthorizationId  = authorizationSchemesTableCopy.AuthorizationId;

        authorizationSchemesLineCopy.AuthorizationSchemesTableRecId = mergedSchemeTableRecId;
        authorizationSchemesLineCopy.ImportExpiryDate               = importExpiryDate;
        authorizationSchemesLineCopy.ExportExpiryDate               = exportExpiryDate;

        for (iCount = 1; iCount <= conlen(selectedAuthRecIds); iCount++)
        {
            authorizationSchemesTableRecId = conpeek(selectedAuthRecIds, iCount);

            authorizationSchemesTable.clear();
            authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId, true);

            authorizationSchemesTable.Status = EximAuthorizationStatus_IN::Merged;
            authorizationSchemesTable.Closed = NoYes::Yes;
            authorizationSchemesTable.update();

            select firstonly ImportAssessableValue, ExportAssessableValue
                from authorizationSchemesLine
                where authorizationSchemesLine.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
                   && authorizationSchemesLine.LicenseStatus                  == EximLicenseStatus_IN::Original;

            authorizationSchemesLineCopy.ImportAssessableValue += authorizationSchemesLine.ImportAssessableValue;
            authorizationSchemesLineCopy.ExportAssessableValue += authorizationSchemesLine.ExportAssessableValue;

            if (authorizationSchemesTable.AuthorizationType == EximAuthorizationType_IN::DFIA)
            {
                authorizationSchemesLineCopy.ImportAssessableValue -= EximAuthorization_Split_IN::getSplitValue(authorizationSchemesTableRecId);
            }

            authorizationSchemeReference.clear();
            authorizationSchemeReference.AuthorizationSchemeTableRecId    = authorizationSchemesTable.RecId;
            authorizationSchemeReference.RefAuthorizationSchemeTableRecId = mergedSchemeTableRecId;
            authorizationSchemeReference.ReferenceNumber                  = refNumber;
            authorizationSchemeReference.ReferenceDateTime                = DateTimeUtil::removeTimeZoneOffset(refDateTime, DateTimeUtil::getUserPreferredTimeZone());
            authorizationSchemeReference.Reason                           = notes;
            authorizationSchemeReference.ReferenceType                    = EximMergeSplit_IN::None;
            authorizationSchemeReference.insert();

            authorizationSchemeReferenceCopy.clear();
            authorizationSchemeReferenceCopy.data(authorizationSchemeReference);
            authorizationSchemeReferenceCopy.AuthorizationSchemeTableRecId    = mergedSchemeTableRecId;
            authorizationSchemeReferenceCopy.RefAuthorizationSchemeTableRecId = authorizationSchemesTable.RecId;
            authorizationSchemeReferenceCopy.ReferenceType                    = EximMergeSplit_IN::Merge;
            authorizationSchemeReferenceCopy.insert();
        }

        authorizationSchemesLineCopy.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeExportDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge export details.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void mergeExportDetails()
    {
        Counter                     iCount;
        RefRecid                    authorizationSchemeTableRecId;
        EximExportDetails_IN        exportDetails;
        EximExportDetails_IN        exportDetailsCopy;
        EximExportTrans_IN          exportTrans;
        EximExportTrans_IN          exportTransCopy;
        EximExportDetails_IN        exportDetailsLoc;
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        ;

        for (iCount = 1; iCount <= conlen(selectedAuthRecIds); iCount++)
        {
            authorizationSchemeTableRecId = conpeek(selectedAuthRecIds, iCount);

            insert_recordset exportDetails
                (AuthorizationSchemesTableRecId, ItemId)
            select mergedSchemeTableRecId, ItemId
                from exportDetailsCopy
                    where exportDetailsCopy.AuthorizationSchemesTableRecId == authorizationSchemeTableRecId
            notexists join exportDetailsLoc
                where exportDetailsLoc.ItemId == exportDetailsCopy.ItemId
                    && exportDetailsLoc.AuthorizationSchemesTableRecId == mergedSchemeTableRecId;

            insert_recordset exportTrans
                (AuthorizationSchemesTableRecId, CustomsShippingBillTransRecId, AssessableValue, ExportDetailsRecId)
            select mergedSchemeTableRecId, CustomsShippingBillTransRecId, AssessableValue
                from exportTransCopy
                    where exportTransCopy.AuthorizationSchemesTableRecId == authorizationSchemeTableRecId
                join customsShippingBillTrans
                        where customsShippingBillTrans.RecId == exportTransCopy.CustomsShippingBillTransRecId
                        join RecId
                            from exportDetailsCopy
                                where exportDetailsCopy.ItemId == customsShippingBillTrans.ItemId
                                   && exportDetailsCopy.AuthorizationSchemesTableRecId == mergedSchemeTableRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeImportDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge import details.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void mergeImportDetails()
    {
        Counter              iCount;
        RefRecId             authorizationSchemeTableRecId;
        RecordSortedList     importDetailsList;
        EximImportTrans_IN   importTrans;
        EximImportTrans_IN   importTransCopy;
        EximImportDetails_IN importDetails;
        EximImportDetails_IN importDetailsCopy;
        ;

        importDetailsList = new RecordSortedList(tablenum(EximImportDetails_IN));
        importDetailsList.sortOrder(fieldnum(EximImportDetails_IN, ItemId));

        for (iCount = 1; iCount <= conlen(selectedAuthRecIds); iCount++)
        {
            authorizationSchemeTableRecId = conpeek(selectedAuthRecIds, iCount);

            insert_recordset importTrans
                (AuthorizationSchemesTableRecId, CustomsVendBOETransRecId, AssessableValue)
            select mergedSchemeTableRecId, CustomsVendBOETransRecId, AssessableValue
                from importTransCopy
                    where importTransCopy.AuthorizationSchemesTableRecId == authorizationSchemeTableRecId;

            while select importDetailsCopy
                where importDetailsCopy.AuthorizationSchemesTableRecId == authorizationSchemeTableRecId
            {
                importDetails.data(importDetailsCopy);
                importDetails.AuthorizationSchemesTableRecId = mergedSchemeTableRecId;

                if (importDetailsList.find(importDetails))
                {
                    if (importDetails.Value || importDetailsCopy.Value)
                    {
                        importDetails.Value         += (importDetailsCopy.Value - importDetailsCopy.SplitValue);
                        importDetails.ValueImported += importDetailsCopy.ValueImported;
                        importDetails.Qty            = 0;
                        importDetails.QtyImported    = 0;
                    }
                    else
                    {
                        importDetails.Qty         += UnitOfMeasureConverter::convert((importDetailsCopy.Qty - importDetailsCopy.SplitQty),
                                                                                   UnitOfMeasure::unitOfMeasureIdBySymbol(importDetailsCopy.Unit),
                                                                                   UnitOfMeasure::unitOfMeasureIdBySymbol(importDetails.Unit),
                                                                                   NoYes::Yes,
                                                                                   InventTable::itemProduct(importDetails.ItemId));

                        importDetails.QtyImported += UnitOfMeasureConverter::convert(importDetailsCopy.QtyImported,
                                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(importDetailsCopy.Unit),
                                                                                  UnitOfMeasure::unitOfMeasureIdBySymbol(importDetails.Unit),
                                                                                  NoYes::Yes,
                                                                                  InventTable::itemProduct(importDetails.ItemId));
                    }
                }
                else
                {
                    importDetails.Value -= importDetails.SplitValue;
                    importDetails.Qty   -= importDetails.SplitQty;
                }

                importDetails.SplitValue = 0;
                importDetails.SplitQty   = 0;
                importDetails.SplitPct   = 0;

                importDetailsList.ins(importDetails, true);
            }
        }

        if (importDetailsList.len())
        {
            importDetailsList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSummaryImportableItems</Name>
				<Source><![CDATA[
    private boolean mergeSummaryImportableItems()
    {
        Counter                       iCount;
        boolean                       ret;
        RefRecid                      authorizationSchemeTableRecId;
        RecordSortedList              summaryImportableItemsList;
        EximImportDetails_IN          importDetails;
        EximSummaryImportableItems_IN summaryImportableItems;
        EximSummaryImportableItems_IN summaryImportableItemsLoc;
        EximValue_IN                  valueToMerge;
        EximValue_IN                  allowedValueToMerge;
        Qty                           qtyToMerge;
        Qty                           allowedQtyToMerge;
        ;

        summaryImportableItemsList = new RecordSortedList(tablenum(EximSummaryImportableItems_IN));
        summaryImportableItemsList.sortOrder(fieldnum(EximSummaryImportableItems_IN, ItemId));

        for (iCount = 1; iCount <= conlen(selectedAuthRecIds); iCount++)
        {
            authorizationSchemeTableRecId = conpeek(selectedAuthRecIds, iCount);

            while select summaryImportableItemsLoc
                where summaryImportableItemsLoc.AuthorizationSchemesTableRecId == authorizationSchemeTableRecId
                join SplitValue, SplitQty
                    from importDetails
                        where importDetails.ItemId                         == summaryImportableItemsLoc.ItemId
                           && importDetails.AuthorizationSchemesTableRecId == summaryImportableItemsLoc.AuthorizationSchemesTableRecId
            {
                valueToMerge        = 0;
                allowedValueToMerge = 0;
                qtyToMerge          = 0;
                allowedQtyToMerge   = 0;

                valueToMerge        = summaryImportableItemsLoc.Value ? (summaryImportableItemsLoc.Value - importDetails.SplitValue) : 0;
                allowedValueToMerge = summaryImportableItemsLoc.AllowedValue ? (summaryImportableItemsLoc.AllowedValue - importDetails.SplitValue) : 0;
                qtyToMerge          = summaryImportableItemsLoc.Qty ? (summaryImportableItemsLoc.Qty - importDetails.SplitQty) : 0;
                allowedQtyToMerge   = summaryImportableItemsLoc.AllowedQty ? (summaryImportableItemsLoc.AllowedQty - importDetails.SplitQty) : 0;

                summaryImportableItems.data(summaryImportableItemsLoc);
                summaryImportableItems.AuthorizationSchemesTableRecId = mergedSchemeTableRecId;

                if (summaryImportableItemsList.find(summaryImportableItems))
                {
                    if (summaryImportableItems.Value || summaryImportableItems.AllowedValue
                        || summaryImportableItemsLoc.Value || summaryImportableItemsLoc.AllowedValue)
                    {
                        summaryImportableItems.Value        += valueToMerge;
                        summaryImportableItems.AllowedValue += allowedValueToMerge;
                        summaryImportableItems.Qty           = 0;
                        summaryImportableItems.AllowedQty    = 0;
                    }
                    else
                    {
                        summaryImportableItems.Qty        += UnitOfMeasureConverter::convert(qtyToMerge,
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(summaryImportableItemsLoc.Unit),
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(summaryImportableItems.Unit),
                                                                                            NoYes::Yes,
                                                                                            InventTable::itemProduct(summaryImportableItems.ItemId));

                        summaryImportableItems.AllowedQty += UnitOfMeasureConverter::convert(allowedQtyToMerge,
                                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(summaryImportableItemsLoc.Unit),
                                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(summaryImportableItems.Unit),
                                                                                             NoYes::Yes,
                                                                                             InventTable::itemProduct(summaryImportableItems.ItemId));
                    }
                }
                else
                {
                    summaryImportableItems.Value        = valueToMerge;
                    summaryImportableItems.AllowedValue = allowedValueToMerge;
                    summaryImportableItems.Qty          = qtyToMerge;
                    summaryImportableItems.AllowedQty   = allowedQtyToMerge;
                }

                summaryImportableItemsList.ins(summaryImportableItems, true);
            }
        }

        if (summaryImportableItemsList.len())
        {
            summaryImportableItemsList.insertDatabase();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximLicenseNum_IN parmAuthorizationNumber(EximLicenseNum_IN _authorizationNumber = authorizationNumber)
    {
        authorizationNumber = _authorizationNumber;
        return authorizationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportExpiryDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmExportExpiryDate(TransDate _exportExpiryDate = exportExpiryDate)
    {
        exportExpiryDate = _exportExpiryDate;
        return exportExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportExpiryDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmImportExpiryDate(TransDate _importExpiryDate = importExpiryDate)
    {
        importExpiryDate = _importExpiryDate;
        return importExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMerge2AuthorizationId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximAuthorizationId_IN parmMerge2AuthorizationId(EximAuthorizationId_IN _merge2AuthorizationId = merge2AuthorizationId)
    {
        merge2AuthorizationId = _merge2AuthorizationId;
        return merge2AuthorizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMergeAuthorizations</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmMergeAuthorizations(boolean _merge = merge)
    {
        merge = _merge;
        return merge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Notes parmNotes(Notes _notes = notes)
    {
        ;
        notes = _notes;
        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmReferenceDate(TransDateTime _refDateTime = refDateTime)
    {
        refDateTime = _refDateTime;
        return refDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximReferenceNumber_IN parmReferenceNumber(EximReferenceNumber_IN _refNumber = refNumber)
    {
        refNumber = _refNumber;
        return refNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSchemeTableRecId(RefRecId _schemeTableRecId = schemeTableRecId)
    {
        schemeTableRecId = _schemeTableRecId;
        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedAuthIds</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSelectedAuthIds(container _selectedAuthIds = selectedAuthIds)
    {
        selectedAuthIds = _selectedAuthIds;
        return selectedAuthIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedAuthRecIds</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSelectedAuthRecIds(container _selectedAuthRecIds = selectedAuthRecIds)
    {
        selectedAuthRecIds = _selectedAuthRecIds;
        return selectedAuthRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        container mergeValues;
        ;

        mergeValues = [#currentList, selectedAuthRecIds];

        EximAuthorization_Merge_IN::runOnServer(mergeValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        ;

        switch (version)
        {
            case #currentVersion:
                [version, #currentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.mergeAuthorizations();

            this.mergeSummaryImportableItems();

            this.mergeImportDetails();

            this.mergeExportDetails();

            info(strfmt("@GLS62346", mergedAuthorizationId));
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximAuthorization_Merge_IN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from instance.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
        boolean valid;
        Counter iCount;
        ;

        ret = super(calledFrom);

        if (ret)
        {
            if (!merge2AuthorizationId)
            {
                ret = ret && checkFailed(strfmt("@SYS116347", "@GLS62311"));
            }
            else
            {
                if ((select firstonly eximAuthorizationSchemesTable_IN
                    where eximAuthorizationSchemesTable_IN.AuthorizationId == merge2AuthorizationId).RecId != 0)
                {
                    for (iCount = 1; iCount <= conlen(selectedAuthIds); iCount++)
                    {
                        if (merge2AuthorizationId == conpeek(selectedAuthIds, iCount))
                        {
                            valid = true;
                            break;
                        }
                    }

                    if (!valid)
                    {
                        ret = checkFailed("@GLS62347");
                    }
                }
                else
                {
                    ret = checkFailed(strfmt("@SYS112224", this.parmMerge2AuthorizationId(), "@GLS62311", tablepname(EximAuthorizationSchemesTable_IN)));
                }
            }
        }

        if (ret && !authorizationNumber)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS61498"));
        }

        if (ret && !importExpiryDate)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS61528"));
        }

        if (ret && !exportExpiryDate)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS61537"));
        }

        if (ret && !refNumber)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS22304"));
        }

        if (ret && !refDateTime)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS62362"));
        }

        if (ret && !notes)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS86426"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAuthorizationBeMerged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the authorization can be merged.
    /// </summary>
    /// <param name="_selectedAuthorizations">
    /// The list of the selected authorizations.
    /// </param>
    /// <returns>
    /// If 'True', the authorization can be merged.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canAuthorizationBeMerged(container _selectedAuthorizations)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;
        EximAuthorizationSchemesLine_IN  authorizationSchemesLineLoc;
        RefRecId                         productGroup;
        RefRecId                         portId;
        Counter                          counter;
        boolean                          first = true;
        boolean                          ok    = true;
        ;

        for (counter = 1; counter <= conlen(_selectedAuthorizations); counter++)
        {
            authorizationSchemesTableLoc = EximAuthorizationSchemesTable_IN::find(conpeek(_selectedAuthorizations, counter));

            // validate the authorization scheme table
            ok = (!authorizationSchemesTableLoc.Closed
                    && authorizationSchemesTableLoc.Status == EximAuthorizationStatus_IN::Approved);

            if (ok)
            {
                if (first)
                {
                    productGroup = authorizationSchemesTableLoc.EximProductGroupTable;
                    portId       = authorizationSchemesTableLoc.EximPorts;
                    first        = false;
                }
                else
                {
                    ok = ((productGroup == authorizationSchemesTableLoc.EximProductGroupTable)
                            && (portId == authorizationSchemesTableLoc.EximPorts));
                }

                // validate the authorization scheme line
                if (ok)
                {
                    select reverse firstonly VersionNum, ImportExpiryDate
                        from authorizationSchemesLineLoc
                            order by RecId
                            where authorizationSchemesLineLoc.AuthorizationSchemesTableRecId == authorizationSchemesTableLoc.RecId;

                    if (authorizationSchemesLineLoc.VersionNum != 0
                        || DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > authorizationSchemesLineLoc.ImportExpiryDate)
                    {
                        ok = false;
                    }
                }

                // validate if the license has any import balance
                ok = ok && EximAuthorization_Split_IN::getImportBalance(authorizationSchemesTableLoc.RecId);
            }

            if (!ok)
            {
                break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximAuthorization_Merge_IN construct()
    {
        return new EximAuthorization_Merge_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedAuthIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets selected authorization id.
    /// </summary>
    /// <param name="_formDataSource">
    /// The data source.
    /// </param>
    /// <returns>
    /// The list of the selected authoriztion id.
    /// </returns>
    private static container getSelectedAuthIds(FormDataSource _formDataSource)
    {
        container                        selectedAuthIds = connull();
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        ;

        authorizationSchemesTable = _formDataSource.getFirst(true);

        for (authorizationSchemesTable = _formDataSource.getFirst(true);
             authorizationSchemesTable;
             authorizationSchemesTable = _formDataSource.getNext())
        {
            selectedAuthIds += [authorizationSchemesTable.AuthorizationId];
        }

        return selectedAuthIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedAuthRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets selected authorization record id.
    /// </summary>
    /// <param name="_formDataSource">
    /// The data source.
    /// </param>
    /// <returns>
    /// The list of the selected authoriztion record id.
    /// </returns>
    private static container getSelectedAuthRecIds(FormDataSource _formDataSource)
    {
        container                        selectedAuthRecIds = connull();
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        ;

        for (authorizationSchemesTable = _formDataSource.getFirst(true);
             authorizationSchemesTable;
             authorizationSchemesTable = _formDataSource.getNext())
        {
            selectedAuthRecIds += [authorizationSchemesTable.RecId];
        }

        return selectedAuthRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource             formDataSource;
        EximAuthorization_Merge_IN authorizationMerge;
        ;

        if (!_args
            || !_args.record()
            || _args.dataset() != tablenum(EximAuthorizationSchemesTable_IN))
        {
            throw error("@SYS25407");
        }

        formDataSource     = FormDataUtil::getFormDataSource(_args.record());
        authorizationMerge = EximAuthorization_Merge_IN::construct();

        authorizationMerge.parmSelectedAuthIds(EximAuthorization_Merge_IN::getSelectedAuthIds(formDataSource));
        authorizationMerge.parmSelectedAuthRecIds(EximAuthorization_Merge_IN::getSelectedAuthRecIds(formDataSource));

        if (authorizationMerge.prompt())
        {
            authorizationMerge.runOperation();
        }

        if (formDataSource)
        {
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_mergeValues">
    /// The merge values.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(container _mergeValues)
    {
        EximAuthorization_Merge_IN authorizationMerge;
        container cons;
        ;

        cons = [#currentVersion,
                conpeek(_mergeValues, 1),
                conpeek(_mergeValues, 2),
                conpeek(_mergeValues, 3),
                conpeek(_mergeValues, 4),
                conpeek(_mergeValues, 5),
                conpeek(_mergeValues, 6)];

        if (conlen(_mergeValues))
        {
            authorizationMerge = EximAuthorization_Merge_IN::construct();
            authorizationMerge.unpack(cons);

            authorizationMerge.parmSelectedAuthRecIds(conpeek(_mergeValues, 7));

            authorizationMerge.updateIncentiveScheme();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>