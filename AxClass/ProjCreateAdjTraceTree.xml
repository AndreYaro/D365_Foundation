<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCreateAdjTraceTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Creates an Adjustment Trace Tree containing data of adjusted transactions and their parents and children transactions.
/// </summary>
class ProjCreateAdjTraceTree
{
    FormTreeControl traceTree;
    ProjTransType   transType;
    ProjTransIdBase origTransId;
    str listofFields;
    Map treeData;
    int fieldsNo;
    int lineNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCostTraceTree</Name>
				<Source><![CDATA[
    public void createCostTraceTree(ProjTransIdBase transId, boolean showTree = true)
    {
        container con;

        origTransId = transId;
        ProjCostTrans curProjCostTrans = ProjCostTrans::find(transId);

        // Select all expense transactions from the parents or children of current transaction
        // Parents and children refer to transactions from the history of adjustments that brought to this transaction
        // or transactions obtained by adjusting current transaction
        ProjCostTrans projCostTrans;
        while select projCostTrans
            order by CreatedDateTime
            where projCostTrans.TransIdRef == curProjCostTrans.TransIdRef
        {
            boolean isAdjusted = false;
            listofFields = '';

            ProjCostTrans projCostTransChild;
            select firstonly projCostTransChild
            where projCostTransChild.AdjRefTransId == projCostTrans.TransId;

            if (projCostTransChild)
            {
                isAdjusted = true;
            }

            if (!ProjAdjTreeVisualizationLine::exist(transType))
            {
                // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
                lineNumber = 1;
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, VoucherJournal));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, ProjId));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, Qty));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, TotalCostAmountCur));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, TotalSalesAmountCur));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, LinePropertyId));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, CreatedBy));
                this.defaultCostFieldsRecords(fieldnum(ProjCostTrans, CreatedDateTime));
            }

            int i = 1;
            container conAdd;
            ProjAdjTreeVisualizationLine visLine = ProjAdjTreeVisualizationLine::findByLine(1, transType);
            while (visLine.RecId)
            {
                conAdd = conins(conAdd, i, projCostTrans.(str2int(visLine.FieldNumber)));

                //  Build a list of fields to be displayed in the adjustment trace tree
                DictField dictField = new DictField(tablename2id(tablestr(ProjCostTrans)), str2int(visLine.FieldNumber));
                listofFields += dictField.label();
                listofFields += ' / ';

                i++;
                visLine = ProjAdjTreeVisualizationLine::findByLine(i, transType);
            }

            //  Add information about transactions related to current transaction in the container
            conAdd = conins(conAdd, i,   projCostTrans.TransId);
            conAdd = conins(conAdd, i + 1, projCostTrans.RecId);
            conAdd = conins(conAdd, i + 2, projCostTrans.AdjRefTransId);
            conAdd = conins(conAdd, i + 3, isAdjusted);

            fieldsNo = conlen(conAdd) - 4;
            con += [conAdd];
            conAdd = connull();
        }

        if (showTree)
        {
            this.showTraceTree(con, traceTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmplTraceTree</Name>
				<Source><![CDATA[
    public void createEmplTraceTree(ProjTransIdBase transId, boolean showTree = true)
    {
        container con;

        origTransId = transId;
        ProjEmplTrans curProjEmplTrans = ProjEmplTrans::find(transId);

        // Select all expense transactions from the parents or children of current transaction
        // Parents and children refer to transactions from the history of adjustments that brought to this transaction
        // or transactions obtained by adjusting current transaction
        ProjEmplTrans projEmplTrans;
        while select projEmplTrans
            order by CreatedDateTime
            where projEmplTrans.TransIdRef == curProjEmplTrans.TransIdRef
        {
            boolean  isAdjusted = false;
            listofFields = '';

            ProjEmplTrans projEmplTransChild;
            select firstonly projEmplTransChild
                where projEmplTransChild.AdjRefTransId == projEmplTrans.TransId;

            if (projEmplTransChild)
            {
                isAdjusted = true;
            }

            if (!ProjAdjTreeVisualizationLine::exist(transType))
            {
                // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
                lineNumber = 1;
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, VoucherJournal));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, ProjId));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, Qty));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, TotalCostAmountCur));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, TotalSalesAmountCur));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, LinePropertyId));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, CreatedBy));
                this.defaultHourFieldsRecords(fieldnum(ProjEmplTrans, CreatedDateTime));
            }

            int i = 1;
            container conAdd;
            ProjAdjTreeVisualizationLine visLine = ProjAdjTreeVisualizationLine::findByLine(1, transType);

            while (visLine.RecId)
            {
                conAdd = conins(conAdd, i, projEmplTrans.(str2int(visLine.FieldNumber)));

                //  Build a list of fields to be displayed in the adjustment trace tree
                DictField dictField = new DictField(tablename2id(tablestr(ProjEmplTrans)), str2int(visLine.FieldNumber));
                listofFields += dictField.label();
                listofFields += ' / ';

                i++;
                visLine = ProjAdjTreeVisualizationLine::findByLine(i, transType);
            }

            //  Add information about transactions related to current transaction in the container
            conAdd = conins(conAdd, i,   projEmplTrans.TransId);
            conAdd = conins(conAdd, i+1, projEmplTrans.RecId);
            conAdd = conins(conAdd, i+2, projEmplTrans.AdjRefTransId);
            conAdd = conins(conAdd, i+3, isAdjusted);
            fieldsNo = conlen(conAdd) - 4;
            con += [conAdd];
            conAdd = connull();
        }

        if (showTree)
        {
            this.showTraceTree(con, traceTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldList</Name>
				<Source><![CDATA[
    private void createFieldList(tableId tableId, fieldId fieldId)
    {
        //  Create list of fields to be displayed in the trace tree
        DictField dictField = new DictField(tableId, fieldId);
        listofFields += dictField.label();
        listofFields += ' / ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTraceTree</Name>
				<Source><![CDATA[
    public void createItemTraceTree(ProjTransIdBase transId, boolean showTree = true)
    {
        container con; 

        origTransId = transId;
        ProjItemTrans curProjItemTrans = ProjItemTrans::find(transId);

        // Select all expense transactions from the parents or children of current transaction
        // Parents and children refer to transactions from the history of adjustments that brought to this transaction
        // or transactions obtained by adjusting current transaction
        ProjItemTrans projItemTrans;
        while select projItemTrans
            order by CreatedDateTime
            where projItemTrans.ProjTransIdRef == curProjItemTrans.ProjTransIdRef
        {
            boolean isAdjusted = false;
            listofFields = '';

            ProjItemTrans projItemTransChild;
            select firstonly projItemTransChild
                where projItemTransChild.AdjRefTransId == projItemTrans.ProjTransId;

            if (projItemTransChild)
            {
                isAdjusted = true;
            }

            if (!ProjAdjTreeVisualizationLine::exist(transType))
            {
                // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
                lineNumber = 1;
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, VoucherPackingSlip));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, ProjId));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, Qty));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, TotalCostAmountCur));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, TotalSalesAmountCur));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, LinePropertyId));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, CreatedBy));
                this.defaultItemFieldsRecords(fieldnum(ProjItemTrans, CreatedDateTime));
            }

            int i = 1;
            container conAdd;
            ProjAdjTreeVisualizationLine visLine = ProjAdjTreeVisualizationLine::findByLine(1, transType);

            while (visLine.RecId)
            {
                conAdd = conins(conAdd, i, projItemTrans.(str2int(visLine.FieldNumber)));

                //  Build a list of fields to be displayed in the adjustment trace tree
                DictField dictField = new DictField(tablename2id(tablestr(ProjItemTrans)), str2int(visLine.FieldNumber));
                listofFields += dictField.label();
                listofFields += ' / ';

                i++;
                visLine = ProjAdjTreeVisualizationLine::findByLine(i, transType);
            }

            //  Add information about transactions related to current transaction in the container
            conAdd = conins(conAdd, i,   projItemTrans.ProjTransId);
            conAdd = conins(conAdd, i+1, projItemTrans.RecId);
            conAdd = conins(conAdd, i+2, projItemTrans.AdjRefTransId);
            conAdd = conins(conAdd, i+3, isAdjusted);

            fieldsNo = conlen(conAdd) - 4;
            con += [conAdd];
            conAdd = connull();
        }

        if (showTree)
        {
            this.showTraceTree(con, traceTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRevenueTraceTree</Name>
				<Source><![CDATA[
    public void createRevenueTraceTree(ProjTransIdBase transId, boolean showTree = true)
    {
        container con; 

        origTransId = transId;
        ProjRevenueTrans curProjRevenueTrans = ProjRevenueTrans::find(transId);

        // Select all expense transactions from the parents or children of current transaction
        // Parents and children refer to transactions from the history of adjustments that brought to this transaction
        // or transactions obtained by adjusting current transaction
        ProjRevenueTrans projRevenueTrans;
        while select projRevenueTrans 
            order by CreatedDateTime
            where projRevenueTrans.TransIdRef == curProjRevenueTrans.TransIdRef
        {
            boolean isAdjusted = false;
            listofFields = '';

            ProjRevenueTrans projRevenueTransChild;
            select firstonly projRevenueTransChild
            where projRevenueTransChild.AdjRefTransId == projRevenueTrans.TransId;

            if (projRevenueTransChild)
            {
                isAdjusted = true;
            }

            if (!ProjAdjTreeVisualizationLine::exist(transType))
            {
                // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
                lineNumber = 1;
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, VoucherJournal));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, ProjId));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, Qty));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, TotalSalesAmountCur));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, LinePropertyId));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, CreatedBy));
                this.defaultRevenueFieldsRecords(fieldnum(ProjRevenueTrans, CreatedDateTime));
            }

            int i = 1;
            ProjAdjTreeVisualizationLine visLine = ProjAdjTreeVisualizationLine::findByLine(1, transType);

            container conAdd;
            while (visLine.RecId)
            {
                conAdd = conins(conAdd, i, projRevenueTrans.(str2int(visLine.FieldNumber)));

                //  Build a list of fields to be displayed in the adjustment trace tree
                DictField dictField = new DictField(tablename2id(tablestr(ProjRevenueTrans)), str2int(visLine.FieldNumber));
                listofFields += dictField.label();
                listofFields += ' / ';

                i++;
                visLine = ProjAdjTreeVisualizationLine::findByLine(i, transType);
            }

            //  Add information about transactions related to current transaction in the container
            conAdd = conins(conAdd, i,   projRevenueTrans.TransId);
            conAdd = conins(conAdd, i+1, projRevenueTrans.RecId);
            conAdd = conins(conAdd, i+2, projRevenueTrans.AdjRefTransId);
            conAdd = conins(conAdd, i+3, isAdjusted);

            fieldsNo = conlen(conAdd) - 4;
            con += [conAdd];
            conAdd = connull();
        }

        if (showTree)
        {
            this.showTraceTree(con, traceTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccountTraceTree</Name>
				<Source><![CDATA[
    public void createOnAccountTraceTree(ProjTransIdBase transId, boolean showTree = true)
    {
        container con;

        origTransId = transId;
        ProjOnAccTrans curProjOnAccTrans = ProjOnAccTrans::find(transId);

        // Select all expense transactions from the parents or children of current transaction
        // Parents and children refer to transactions from the history of adjustments that brought to this transaction
        // or transactions obtained by adjusting current transaction
        ProjOnAccTrans projOnAccTrans;
        while select projOnAccTrans order by CreatedDateTime
            where projOnAccTrans.TransIdRef == curProjOnAccTrans.TransIdRef
        {
            boolean isAdjusted = false;
            listofFields = '';

            ProjOnAccTrans projOnAccTransChild;
            select firstonly projOnAccTransChild
                where projOnAccTransChild.AdjRefTransId == projOnAccTrans.TransId;

            if (projOnAccTransChild)
            {
                isAdjusted = true;
            }

            if (!ProjAdjTreeVisualizationLine::exist(transType))
            {
                // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
                lineNumber = 1;
                this.defaultOnAccountFieldsRecords(fieldnum(ProjOnAccTrans, ProjId));
                this.defaultOnAccountFieldsRecords(fieldnum(ProjOnAccTrans, Qty));
                this.defaultOnAccountFieldsRecords(fieldnum(ProjOnAccTrans, TotalSalesAmountCur));
                this.defaultOnAccountFieldsRecords(fieldnum(ProjOnAccTrans, CreatedBy));
                this.defaultOnAccountFieldsRecords(fieldnum(ProjOnAccTrans, CreatedDateTime));
            }

            int i = 1;
            container conAdd;
            ProjAdjTreeVisualizationLine visLine = ProjAdjTreeVisualizationLine::findByLine(1, transType);

            while (visLine.RecId)
            {
                conAdd = conins(conAdd, i, projOnAccTrans.(str2int(visLine.FieldNumber)));

                //  Build a list of fields to be displayed in the adjustment trace tree
                DictField dictField = new DictField(tablename2id(tablestr(ProjOnAccTrans)), str2int(visLine.FieldNumber));
                listofFields += dictField.label();
                listofFields += ' / ';

                i++;
                visLine = ProjAdjTreeVisualizationLine::findByLine(i, transType);
            }

            //  Add information about transactions related to current transaction in the container
            conAdd = conins(conAdd, i,   projOnAccTrans.TransId);
            conAdd = conins(conAdd, i+1, projOnAccTrans.RecId);
            conAdd = conins(conAdd, i+2, projOnAccTrans.AdjRefTransId);
            conAdd = conins(conAdd, i+3, isAdjusted);

            fieldsNo = conlen(conAdd) - 4;
            con += [conAdd];
            conAdd = connull();
        }

        if (showTree)
        {
            this.showTraceTree(con, traceTree);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTraceTree</Name>
				<Source><![CDATA[
    public void createTraceTree(ProjTransIdBase transId)
    {
        switch (transType)
        {
            case ProjTransType::Hour :
                this.createEmplTraceTree(transId);
                break;

            case ProjTransType::Cost :
                this.createCostTraceTree(transId);
                break;

            case ProjTransType::Item :
                this.createItemTraceTree(transId);
                break;

            case ProjTransType::Revenue :
                this.createRevenueTraceTree(transId);
                break;

            case ProjTransType::OnAccount :
                this.createOnAccountTraceTree(transId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostFieldsList</Name>
				<Source><![CDATA[
    private void defaultCostFieldsList()
    {
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, VoucherJournal));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, ProjId));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, Qty));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, TotalCostAmountCur));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, TotalSalesAmountCur));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, LinePropertyId));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, CreatedBy));
        this.createFieldList(tablenum(ProjCostTrans), fieldnum(ProjCostTrans, CreatedDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostFieldsRecords</Name>
				<Source><![CDATA[
    private void defaultCostFieldsRecords(int _fieldNum)
    {
        //
        // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
        // in the adjustment trace tree for expense transactions
        //
        ProjAdjTreeVisualizationLine visLine;
        visLine.Line = lineNumber;
        visLine.FieldNumber = int2str(_fieldNum);
        visLine.TransType = ProjTransType::Cost;
        visLine.insert();

        lineNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldsList</Name>
				<Source><![CDATA[
    private void defaultFieldsList(tableId tableId)
    {
        switch (tableId)
        {
            case tablenum(ProjEmplTrans)    :
                this.defaultHourFieldsList();
                break;

            case tablenum(ProjCostTrans)    :
                this.defaultCostFieldsList();
                break;

            case tablenum(ProjItemTrans)    :
                this.defaultItemFieldsList();
                break;

            case tablenum(ProjRevenueTrans) :
                this.defaultRevenueFieldsList();
                break;

            case tablenum(ProjOnAccTrans) :
                this.defaultOnAccountFieldsList();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHourFieldsList</Name>
				<Source><![CDATA[
    private void defaultHourFieldsList()
    {
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, VoucherJournal));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, ProjId));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, Qty));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, TotalCostAmountCur));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, TotalSalesAmountCur));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, LinePropertyId));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, CreatedBy));
        this.createFieldList(tablenum(ProjEmplTrans), fieldnum(ProjEmplTrans, CreatedDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHourFieldsRecords</Name>
				<Source><![CDATA[
    private void defaultHourFieldsRecords(int _fieldNum)
    {
        //
        // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
        // in the adjustment trace tree for hour transactions
        //
        ProjAdjTreeVisualizationLine visLine;
        visLine.Line = lineNumber;
        visLine.FieldNumber = int2str(_fieldNum);
        visLine.TransType = ProjTransType::Hour;
        visLine.insert();

        lineNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemFieldsList</Name>
				<Source><![CDATA[
    private void defaultItemFieldsList()
    {
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, VoucherPackingSlip));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, ProjId));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, Qty));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, TotalCostAmountCur));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, TotalSalesAmountCur));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, LinePropertyId));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, CreatedBy));
        this.createFieldList(tablenum(ProjItemTrans), fieldnum(ProjItemTrans, CreatedDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemFieldsRecords</Name>
				<Source><![CDATA[
    private void defaultItemFieldsRecords(int _fieldNum)
    {
        //
        // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
        // in the adjustment trace tree for item transactions
        //
        ProjAdjTreeVisualizationLine visLine;
        visLine.Line = lineNumber;
        visLine.FieldNumber = int2str(_fieldNum);
        visLine.TransType = ProjTransType::Item;
        visLine.insert();

        lineNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRevenueFieldsList</Name>
				<Source><![CDATA[
    private void defaultRevenueFieldsList()
    {
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, VoucherJournal));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, ProjId));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, Qty));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, TotalSalesAmountCur));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, LinePropertyId));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, CreatedBy));
        this.createFieldList(tablenum(ProjRevenueTrans), fieldnum(ProjRevenueTrans, CreatedDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRevenueFieldsRecords</Name>
				<Source><![CDATA[
    private void defaultRevenueFieldsRecords(int _fieldNum)
    {
        //
        // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
        // in the adjustment trace tree for fee transactions
        //
        ProjAdjTreeVisualizationLine visLine;
        visLine.Line = lineNumber;
        visLine.FieldNumber = int2str(_fieldNum);
        visLine.TransType = ProjTransType::Revenue;
        visLine.insert();

        lineNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOnAccountFieldsList</Name>
				<Source><![CDATA[
    private void defaultOnAccountFieldsList()
    {
        this.createFieldList(tablenum(ProjOnAccTrans), fieldnum(ProjOnAccTrans, ProjId));
        this.createFieldList(tablenum(ProjOnAccTrans), fieldnum(ProjOnAccTrans, Qty));
        this.createFieldList(tablenum(ProjOnAccTrans), fieldnum(ProjOnAccTrans, TotalSalesAmountCur));
        this.createFieldList(tablenum(ProjOnAccTrans), fieldnum(ProjOnAccTrans, CreatedBy));
        this.createFieldList(tablenum(ProjOnAccTrans), fieldnum(ProjOnAccTrans, CreatedDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOnAccountFieldsRecords</Name>
				<Source><![CDATA[
    private void defaultOnAccountFieldsRecords(int _fieldNum)
    {
        //
        // Create records in ProjAdjTreeVisualizationLine table with default fields to be displayed
        // in the adjustment trace tree for On-Account transactions
        //
        ProjAdjTreeVisualizationLine visLine;
        visLine.Line = lineNumber;
        visLine.FieldNumber = int2str(_fieldNum);
        visLine.TransType = ProjTransType::OnAccount;
        visLine.insert();

        lineNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listofFields</Name>
				<Source><![CDATA[
    public str listofFields()
    {
        return listofFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormTreeControl _formTreeControl, ProjTransType _transType)
    {
        traceTree    = _formTreeControl;
        transType    = _transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTraceTree</Name>
				<Source><![CDATA[
    private void showTraceTree(container con, FormTreeControl _formTreeControl)
    {
        _formTreeControl.deleteAll();

        int nodeId = FormTreeAdd::Root;
        Map treeRecId = new Map(extendedTypeId2Type(extendedtypenum(recId)), Types::Integer);
        treeData  = new Map(Types::String, Types::Integer);

        int i;
        for (i = 1; i <= conlen(con); i++)
        {
            int parentIdx;
            str disp = ''; 

            //  Information needed in the tree item to relate items to each other
            ProjTransIdBase transId     = conpeek(conpeek(con,i), fieldsNo + 1);
            RecId parentRecId = conpeek(conpeek(con,i), fieldsNo + 2);
            ProjTransIdBase relTransId  = conpeek(conpeek(con,i), fieldsNo + 3);
            boolean isAdjusted  = conpeek(conpeek(con,i), fieldsNo + 4);
            int j;
            for (j = 1; j <= fieldsNo; j++)
            {
                // Insert data to be displayed in tree
                if (typeof(conpeek(conpeek(con,i),j)) == Types::UtcDateTime)
                {
                    utcdatetime timeInUserPreferredTimeZone = DateTimeUtil::applyTimeZoneOffset(conpeek(conpeek(con,i),j), DateTimeUtil::getUserPreferredTimeZone());
                    disp += date2str(DateTimeUtil::date(timeInUserPreferredTimeZone), 213, 2, 3, 2, 3, 2, DateFlags::FormatAll);
                    disp += ' ';
                    disp += time2str(DateTimeUtil::time(timeInUserPreferredTimeZone),1,2);
                }
                else
                {
                    disp += conpeek(conpeek(con,i),j);
                }
                disp += ' / ';
            }

            // Checks if tree data is mapped to the obtained transaction
            if (relTransId && treeData.exists(relTransId))
            {
                parentIdx = _formTreeControl.getItem(treeData.lookup(relTransId)).idx();
            }
            else
            {
                parentIdx = 0;
            }

          nodeId = SysFormTreeControl::addTreeItem(_formTreeControl, disp, parentIdx, transId, 0, isAdjusted);

          treeRecId.insert(parentRecId, nodeId);

          treeData.insert(transId, nodeId);
        }

        SysFormTreeControl::expandTree(_formTreeControl, _formTreeControl.getRoot(), conlen(con));
        _formTreeControl.select(_formTreeControl.getItem(treeData.lookup(origTransId)).idx());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>