<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExciseTypeController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxExciseTypeController_IN</c> class is the tax excise type controller.
/// </summary>
class TaxExciseTypeController_IN
{
    FormComboBoxControl         ctrlExciseNone;
    FormComboBoxControl         ctrlExciseManufacture;
    FormComboBoxControl         ctrlExciseTraders;
    FormReferenceGroupControl   ctrlECCNumber;
    FormReferenceGroupControl   ctrlManECCNumber;
    FormReferenceGroupControl   ctrlTraderECCNumber;
    int                         fieldNumDirectSettlement;
    int                         fieldNumDSA;
    int                         fieldNumExciseRecordType;
    int                         fieldNumTariffCodes;
    FormDataSource              taxInfoBoundDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the UI of the tax excise type controller.
    /// </summary>
    /// <param name="_exciseType">
    /// The excise type.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    public void buildUI(
        ExciseType_IN _exciseType,
        ExciseRecordType_IN _exciseRecordType,
        ItemId _itemId,
        TaxDirection _taxDirection = TaxDirection::OutgoingTax)
    {
        this.enableDisableECCNumber(_exciseType);
        this.enableDisableExciseRecordType(_exciseType);
        this.enableDisableDirectSettlement(_exciseType, _exciseRecordType, _taxDirection);
        this.enableDisableDSA(_exciseType, _exciseRecordType, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes visible or invisible of DirectSettlement control for the active event for the data source.
    /// </summary>
    /// <param name="_exciseType">
    /// excise type to make DirectSettlement Enable/Disable.
    /// </param>
    /// <param name="_exciseRecordType">
    /// excise record type to make DirectSettlement Enable/Disable.
    /// </param>
    /// <param name="_taxDirection">
    /// DirectSettlement is only avaiable for Outgoing tax.
    /// </param>
    public void enableDisableDirectSettlement(
        ExciseType_IN _exciseType,
        ExciseRecordType_IN _exciseRecordType,
        TaxDirection _taxDirection = TaxDirection::OutgoingTax)
    {
        taxInfoBoundDataSource.object(fieldNumDirectSettlement).enabled(
            TaxExciseTypeController_IN::isDirectSettlementAllowed(_exciseType, _exciseRecordType, _taxDirection));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes visible or invisible of DSA control for the active event for the data source.
    /// </summary>
    /// <param name="_exciseType">
    /// excise type to make DSA Enable/Disable.
    /// </param>
    /// <param name="_exciseRecordType">
    /// Record type
    /// </param>
    /// <param name="_itemId">
    /// ItemId
    /// </param>
    public void enableDisableDSA(
        ExciseType_IN _exciseType,
        ExciseRecordType_IN _exciseRecordType,
        ItemId _itemId)
    {
        taxInfoBoundDataSource.object(fieldNumDSA).enabled(
            TaxExciseTypeController_IN::isDSAAllowed(_exciseType, _exciseRecordType, _itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableECCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes visible or invisible of ECC number reference groups for the active event for the data source.
    /// </summary>
    /// <param name="_exciseType">
    /// excise type to make particular ECC number reference group to be visible.
    /// </param>
    public void enableDisableECCNumber(ExciseType_IN _exciseType)
    {
        TaxParameters taxParametersLoc = TaxParameters::find();

        switch (_exciseType)
        {
            case ExciseType_IN::None:
                ctrlManECCNumber.visible(false);
                ctrlTraderECCNumber.visible(false);
                ctrlECCNumber.visible(taxParametersLoc.Excise_IN);
                break;

            case ExciseType_IN::Manufacturer:
                ctrlECCNumber.visible(false);
                ctrlTraderECCNumber.visible(false);
                ctrlManECCNumber.visible(taxParametersLoc.Excise_IN);
                break;

            case ExciseType_IN::Trader:
                ctrlECCNumber.visible(false);
                ctrlManECCNumber.visible(false);
                ctrlTraderECCNumber.visible(taxParametersLoc.Excise_IN);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes visible or invisible of Excise record type controls for the active event for the data source.
    /// </summary>
    /// <param name="_exciseType">
    /// excise type to make particular ExciseRecordType to be visible.
    /// </param>
    public void enableDisableExciseRecordType(ExciseType_IN _exciseType)
    {
        TaxParameters taxParametersLoc = TaxParameters::find();

        switch (_exciseType)
        {
            case ExciseType_IN::None:
                ctrlExciseManufacture.visible(false);
                ctrlExciseTraders.visible(false);
                ctrlExciseNone.visible(taxParametersLoc.Excise_IN);
                break;

            case ExciseType_IN::Manufacturer:
                ctrlExciseNone.visible(false);
                ctrlExciseTraders.visible(false);
                ctrlExciseManufacture.visible(taxParametersLoc.Excise_IN);
                break;

            case ExciseType_IN::Trader:
                ctrlExciseNone.visible(false);
                ctrlExciseManufacture.visible(false);
                ctrlExciseTraders.visible(taxParametersLoc.Excise_IN);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRecordType2ExciseManufacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// converts Exciserecordtype enum to ExciseManufacture enum type.
    /// </summary>
    /// <param name="_exciseRecordType">
    /// exciseRecordType value to convert into ExciseManufacture enum type.
    /// </param>
    /// <returns>
    /// ExciseManufacture_IN enum type.
    /// </returns>
    public ExciseManufacture_IN exciseRecordType2ExciseManufacture(ExciseRecordType_IN  _exciseRecordType)
    {
        ExciseManufacture_IN    exciseManufacture;

        switch (_exciseRecordType)
        {
            case ExciseRecordType_IN::None:
                exciseManufacture = ExciseManufacture_IN::None;
                break;
            case ExciseRecordType_IN::RG23A:
                exciseManufacture = ExciseManufacture_IN::RG23A;
                break;
            case ExciseRecordType_IN::RG23C:
                exciseManufacture = ExciseManufacture_IN::RG23C;
                break;
        }
        return exciseManufacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRecordType2ExciseNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// converts Exciserecordtype enum to ExciseNone enum type.
    /// </summary>
    /// <param name="_exciseRecordType">
    /// exciseRecordType value to convert into ExciseNone enum type.
    /// </param>
    /// <returns>
    /// ExciseNone_IN enum type.
    /// </returns>
    public ExciseNone_IN exciseRecordType2ExciseNone(ExciseRecordType_IN  _exciseRecordType)
    {
        ExciseNone_IN  exciseNone;

        switch (_exciseRecordType)
        {
            case ExciseRecordType_IN::None:
                 exciseNone = ExciseNone_IN::None;
                 break;
            case ExciseRecordType_IN::RG23A:
                 exciseNone = ExciseNone_IN::RG23A;
                 break;
            case ExciseRecordType_IN::RG23C:
                 exciseNone = ExciseNone_IN::RG23C;
                 break;
            case ExciseRecordType_IN::RG23D:
                 exciseNone = ExciseNone_IN::RG23D;
                 break;
        }
        return exciseNone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRecordType2ExciseTraders</Name>
				<Source><![CDATA[
    /// <summary>
    /// converts Exciserecordtype enum to ExciseTraders enum type.
    /// </summary>
    /// <param name="_exciseRecordType">
    /// exciseRecordType value to convert into ExciseTraders enum type.
    /// </param>
    /// <returns>
    /// ExciseTraders_IN enum type.
    /// </returns>
    public ExciseTraders_IN exciseRecordType2ExciseTraders(ExciseRecordType_IN  _exciseRecordType)
    {
        ExciseTraders_IN        exciseTraders;

        switch (_exciseRecordType)
        {
            case ExciseRecordType_IN::None:
                exciseTraders = ExciseTraders_IN::None;
                break;
            case ExciseRecordType_IN::RG23D:
                exciseTraders = ExciseTraders_IN::RG23D;
                break;
        }
        return exciseTraders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlECCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlECCNumber</c> class variable.
    /// </summary>
    /// <param name="_ctrlEccNumber">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlECCNumber</c> class variable.
    /// </returns>
    public FormReferenceGroupControl parmCtrlECCNumber(FormReferenceGroupControl _ctrlEccNumber = ctrlEccNumber)
    {
        ctrlEccNumber = _ctrlEccNumber;

        return ctrlEccNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseManufacture</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseManufacture_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseManufacture">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseManufacture</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseManufacture(FormComboBoxControl _ctrlExciseManufacture = ctrlExciseManufacture)
    {
        ctrlExciseManufacture = _ctrlExciseManufacture;

        return ctrlExciseManufacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseNone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseNone_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseNone">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseNone</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseNone(FormComboBoxControl _ctrlExciseNone = ctrlExciseNone)
    {
        ctrlExciseNone = _ctrlExciseNone;

        return ctrlExciseNone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlExciseTraders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlExciseTraders_IN</c> class variable.
    /// </summary>
    /// <param name="_ctrlExciseTraders">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlExciseTraders</c> class variable.
    /// </returns>
    public FormComboBoxControl parmCtrlExciseTraders(FormComboBoxControl _ctrlExciseTraders = ctrlExciseTraders)
    {
        ctrlExciseTraders = _ctrlExciseTraders;

        return ctrlExciseTraders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlManECCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlManECCNumber</c> class variable.
    /// </summary>
    /// <param name="_ctrlManECCNumber">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlManECCNumber</c> class variable.
    /// </returns>
    public FormReferenceGroupControl parmCtrlManECCNumber(FormReferenceGroupControl _ctrlManECCNumber = ctrlManECCNumber)
    {
        ctrlManECCNumber = _ctrlManECCNumber;

        return ctrlManECCNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTraderECCNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ctrlTraderECCNumber</c> class variable.
    /// </summary>
    /// <param name="_ctrlTraderECCNumber">
    ///    The control to point the variable to; optional.
    /// </param>
    /// <returns>
    ///    The <c>ctrlTraderECCNumber</c> class variable.
    /// </returns>
    public FormReferenceGroupControl parmCtrlTraderECCNumber(FormReferenceGroupControl _ctrlTraderECCNumber = ctrlTraderECCNumber)
    {
        ctrlTraderECCNumber = _ctrlTraderECCNumber;

        return ctrlTraderECCNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldNumDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FieldNum</c> of DirectSettlement field.
    /// </summary>
    /// <param name="_fieldNumDirectSettlement">
    ///    The <c>FieldNum</c>
    /// </param>
    /// <returns>
    ///    The <c>FieldNum</c>
    /// </returns>
    public int parmFieldNumDirectSettlement(int _fieldNumDirectSettlement = fieldNumDirectSettlement)
    {
        fieldNumDirectSettlement = _fieldNumDirectSettlement;
        return fieldNumDirectSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldNumDSA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FieldNum</c> of DSA field.
    /// </summary>
    /// <param name="_fieldNumDSA">
    ///    the <c>FieldNum</c>
    /// </param>
    /// <returns>
    ///    the <c>FieldNum</c>
    /// </returns>
    public int parmFieldNumDSA(int _fieldNumDSA = fieldNumDSA)
    {
        fieldNumDSA = _fieldNumDSA;
        return fieldNumDSA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxInfoBoundDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FormDataSource</c> of TaxInfo tab field.
    /// </summary>
    /// <param name="_taxInfoBoundDataSource">
    ///    the datasource
    /// </param>
    /// <returns>
    ///    the datasource
    /// </returns>
    public FormDataSource parmTaxInfoBoundDataSource(FormDataSource _taxInfoBoundDataSource = taxInfoBoundDataSource)
    {
        taxInfoBoundDataSource = _taxInfoBoundDataSource;
        return taxInfoBoundDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the <c>TaxExciseTypeController_IN</c> class.
    /// </summary>
    /// <param name="_exciseRecordTypeControlNone">
    /// The excise record type control.
    /// </param>
    /// <param name="_exciseRecordTypeControlManufacture">
    /// The excise record type control manufacture.
    /// </param>
    /// <param name="_exciseRecordTypeControlTraders">
    /// The excise record type control traders.
    /// </param>
    /// <param name="_exciseEccNumberNone">
    /// The excise ecc number.
    /// </param>
    /// <param name="_exciseEccNumberManufacture">
    /// The excise ecc number manufacture.
    /// </param>
    /// <param name="_exciseEccNumberTraders">
    /// The excise ecc number traders.
    /// </param>
    /// <param name="_taxInfoBoundDataSource">
    /// The tax info bound data source.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxExciseTypeController_IN</c> class.
    /// </returns>
    static public TaxExciseTypeController_IN construct(
        FormComboBoxControl         _exciseRecordTypeControlNone,
        FormComboBoxControl         _exciseRecordTypeControlManufacture,
        FormComboBoxControl         _exciseRecordTypeControlTraders,
        FormReferenceGroupControl   _exciseEccNumberNone,
        FormReferenceGroupControl   _exciseEccNumberManufacture,
        FormReferenceGroupControl   _exciseEccNumberTraders,
        FormDataSource              _taxInfoBoundDataSource)
    {
        TaxExciseTypeController_IN taxFromExciseTypeController = new TaxExciseTypeController_IN();

        taxFromExciseTypeController.parmCtrlExciseNone(_exciseRecordTypeControlNone);
        taxFromExciseTypeController.parmCtrlExciseManufacture(_exciseRecordTypeControlManufacture);
        taxFromExciseTypeController.parmCtrlExciseTraders(_exciseRecordTypeControlTraders);
        taxFromExciseTypeController.parmCtrlECCNumber(_exciseEccNumberNone);
        taxFromExciseTypeController.parmCtrlManECCNumber(_exciseEccNumberManufacture);
        taxFromExciseTypeController.parmCtrlTraderECCNumber(_exciseEccNumberTraders);
        taxFromExciseTypeController.parmTaxInfoBoundDataSource(_taxInfoBoundDataSource);

        return  taxFromExciseTypeController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseManufacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method acts as edit method for the control ExciseManufacture_IN.
    /// </summary>
    /// <param name="_set">
    /// Boolean value to set the value.
    /// </param>
    /// <param name="_exciseManufacture_IN">
    /// ExciseManufacture enum value to displayed.
    /// </param>
    /// <param name="_exciseRecordType_IN">
    /// exciseRecordType value to set.
    /// </param>
    /// <returns>
    /// ExciseRecordType_IN enum type.
    /// </returns>
    static public ExciseRecordType_IN exciseManufacture(
        boolean                 _set,
        ExciseManufacture_IN    _exciseManufacture_IN,
        ExciseRecordType_IN     _exciseRecordType_IN)
    {
        ExciseRecordType_IN     exciseRecordType_IN;

        if (_set)
        {
            switch (_exciseManufacture_IN)
            {
                case ExciseManufacture_IN::None:
                    exciseRecordType_IN = ExciseRecordType_IN::None;
                    break;

                case ExciseManufacture_IN::RG23A:
                    exciseRecordType_IN = ExciseRecordType_IN::RG23A;
                    break;

                case ExciseManufacture_IN::RG23C:
                    exciseRecordType_IN = ExciseRecordType_IN::RG23C;
                    break;
            }
        }

        if (_set && _exciseRecordType_IN != exciseRecordType_IN)
        {
            _exciseRecordType_IN = exciseRecordType_IN;
        }

        return _exciseRecordType_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method acts as edit method for the control ExciseNone_IN.
    /// </summary>
    /// <param name="_set">
    /// Boolean value to set the value.
    /// </param>
    /// <param name="_exciseNone_IN">
    /// ExciseNone_IN enum value to displayed.
    /// </param>
    /// <param name="_exciseRecordType_IN">
    /// exciseRecordType value to set.
    /// </param>
    /// <returns>
    /// ExciseRecordType_IN enum type.
    /// </returns>
    static public ExciseRecordType_IN exciseNone(
        boolean                 _set,
        ExciseNone_IN           _exciseNone_IN,
        ExciseRecordType_IN     _exciseRecordType_IN)
    {
        ExciseRecordType_IN     exciseRecordType_IN;

        if (_set)
        {
            switch (_exciseNone_IN)
            {
                case ExciseNone_IN::None:
                exciseRecordType_IN = ExciseRecordType_IN::None;
                break;

                case ExciseNone_IN::RG23A:
                exciseRecordType_IN = ExciseRecordType_IN::RG23A;
                break;

                case ExciseNone_IN::RG23C:
                exciseRecordType_IN = ExciseRecordType_IN::RG23C;
                break;

                case ExciseNone_IN::RG23D:
                exciseRecordType_IN = ExciseRecordType_IN::RG23D;
                break;
            }
        }

        if (_set && _exciseRecordType_IN != exciseRecordType_IN)
        {
            _exciseRecordType_IN = exciseRecordType_IN;
        }

        return _exciseRecordType_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTraders</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method acts as edit method for the control ExciseRecordType_IN.
    /// </summary>
    /// <param name="_set">
    /// Boolean value to set the value.
    /// </param>
    /// <param name="_exciseTraders_IN">
    /// ExciseTraders_IN enum value to displayed.
    /// </param>
    /// <param name="_exciseRecordType_IN">
    /// exciseRecordType value to set.
    /// </param>
    /// <returns>
    /// ExciseRecordType_IN enum type.
    /// </returns>
    static public ExciseRecordType_IN exciseTraders(
        boolean                 _set,
        ExciseTraders_IN        _exciseTraders_IN,
        ExciseRecordType_IN     _exciseRecordType_IN)
    {
        ExciseRecordType_IN     exciseRecordType_IN;

        if (_set)
        {
            switch (_exciseTraders_IN)
            {
                case ExciseTraders_IN::None:
                    exciseRecordType_IN = ExciseRecordType_IN::None;
                    break;

                case ExciseTraders_IN::RG23D:
                    exciseRecordType_IN = ExciseRecordType_IN::RG23D;
                    break;
            }
        }

        if (_set && _exciseRecordType_IN != exciseRecordType_IN)
        {
            _exciseRecordType_IN = exciseRecordType_IN;
        }

        return _exciseRecordType_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectSettlementAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if direct settlement is allowed.
    /// </summary>
    /// <param name="_exciseType">
    /// The excise type.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <returns>
    /// If 'True', the direct settlement is allowed.
    /// </returns>
    public static boolean isDirectSettlementAllowed(
        ExciseType_IN _exciseType,
        ExciseRecordType_IN _exciseRecordType,
        TaxDirection _taxDirection = TaxDirection::OutgoingTax)
    {
        boolean ret;
        if (_taxDirection == TaxDirection::OutgoingTax)
        {
            switch (_exciseType)
            {
                case ExciseType_IN::Manufacturer:
                    switch (_exciseRecordType)
                    {
                        case ExciseRecordType_IN::None :
                        case ExciseRecordType_IN::RG23A :
                        case ExciseRecordType_IN::RG23C :
                            ret = true;
                            break;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDSAAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if DSA is allowed.
    /// </summary>
    /// <param name="_exciseType">
    /// The excise type.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <returns>
    /// If 'True', the DSA is allowed.
    /// </returns>
    public static boolean isDSAAllowed(
        ExciseType_IN _exciseType,
        ExciseRecordType_IN _exciseRecordType,
        ItemId  _itemId)
    {
        boolean ret;
        ItemType itemType;

        switch (_exciseType)
        {
            case ExciseType_IN::Manufacturer:
                switch (_exciseRecordType)
                {
                    case ExciseRecordType_IN::None :
                        itemType = InventTable::find(_itemId).ItemType;
                        switch (itemType)
                        {
                            case ItemType::Item :
                                ret = true;
                                break;
                        }
                        break;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableTariffCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes visible or invisible of ExciseTariffCodes control for the active event for the data source.
    /// </summary>
    public void enableDisableTariffCodes()
    {
        taxInfoBoundDataSource.object(fieldNumTariffCodes).enabled(TaxParameters::find().Excise_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryTariffCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes mandatory or not of excise tariff codes for the active event for the data source.
    /// </summary>
    public void mandatoryTariffCodes()
    {
        anytype     exciseRecordType;
        anytype     dsa;
        boolean     mandatory;

        if (fieldNumExciseRecordType)
        {
            exciseRecordType = taxInfoBoundDataSource.object(fieldNumExciseRecordType).getValue();
        }

        dsa         = taxInfoBoundDataSource.object(fieldNumDSA).getValue();
        mandatory   =
            (dsa && dsa == NoYes::Yes)
            || (exciseRecordType && exciseRecordType != ExciseRecordType_IN::None);

        taxInfoBoundDataSource.object(fieldNumTariffCodes).mandatory(mandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldNumExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FieldNum</c> of ExciseRecordType field.
    /// </summary>
    /// <param name="_fieldNumExciseRecordType">
    ///    the <c>FieldNum</c>
    /// </param>
    /// <returns>
    ///    the <c>FieldNum</c>
    /// </returns>
    public int parmFieldNumExciseRecordType(int _fieldNumExciseRecordType = fieldNumExciseRecordType)
    {
        fieldNumExciseRecordType = _fieldNumExciseRecordType;
        return fieldNumExciseRecordType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldNumTariffCodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FieldNum</c> of ExciseTariffCodes field.
    /// </summary>
    /// <param name="_fieldNumTariffCodes">
    ///    the <c>FieldNum</c>
    /// </param>
    /// <returns>
    ///    the <c>FieldNum</c>
    /// </returns>
    public int parmFieldNumTariffCodes(int _fieldNumTariffCodes = fieldNumTariffCodes)
    {
        fieldNumTariffCodes = _fieldNumTariffCodes;
        return fieldNumTariffCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCENVATCreditAvailedAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if CENVAT credit availed is allowed.
    /// </summary>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_directSettlement">
    /// The direct settlement.
    /// </param>
    /// <param name="_transQty">
    /// The transaction qty.
    /// </param>
    /// <returns>
    /// If 'True', the CENVAT credit availed is allowed.
    /// </returns>
    public static boolean isCENVATCreditAvailedAllowed(
        ExciseRecordType_IN     _exciseRecordType,
        DirectSettlement_IN     _directSettlement,
        Qty                     _transQty)
    {
        boolean ret;

        ret = (_exciseRecordType == ExciseRecordType_IN::RG23C)
               && (_directSettlement == DirectSettlement_IN::PLA)
               && (_transQty < 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDSAVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if DSA is visible.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_dataAreaId">
    /// The company Id.
    /// </param>
    /// <returns>
    /// If 'True', the DSA is visible.
    /// </returns>
    public static boolean isDSAVisible(ItemId _itemId, DataAreaId _dataAreaId)
    {
        boolean ret = true;

        if (InventTable::getItemType(_itemId) == ItemType::Service
            || InventItemSetupSupplyType::getDefaultOrderType(_itemId, _dataAreaId) != ReqPOType::Production)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>