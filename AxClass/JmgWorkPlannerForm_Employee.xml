<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgWorkPlannerForm_Employee</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgWorkPlannerForm_Employee</c> class handles the Worker level on the work planner form.
/// </summary>
class JmgWorkPlannerForm_Employee extends JmgWorkPlannerForm
{
    Map                 employeeToProfileGroup;
    Map                 employeeStandardProfile;

    JmgGroupCalcId      calculationGroup;
    JmgGroupApproveId   approvalGroup;
    boolean             overlay;
    boolean             showStandardProfile;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCellContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves cell content, which is used to display the value at the specified column and row.
    /// </summary>
    /// <param name="_column">
    ///    The column for which to retrieve the control.
    /// </param>
    /// <param name="_row">
    ///    The row for which to retrieve the control.
    /// </param>
    /// <returns>
    ///    The <c>JmgWorkPlannerCellContent</c> object, which is used to display the value at the specified column and
    ///    row.
    /// </returns>
    public JmgWorkPlannerCellContent getCellContent(int _column, int _row)
    {
        JmgProfileDate  profileDate = this.columnToDate(_column);
        JmgDayId        dayId       = dayofwk(profileDate)-1;
        boolean         isWeekend   = (dayId == JmgDayIdEnum::Saturday || dayId == JmgDayIdEnum::Sunday);

        if (_column     >  this.numberOfColumns() ||
            _row        >  this.numberOfRows()    ||
            profileDate == dateNull())
        {
            return JmgWorkPlannerCellContent::constructFromControl(defaultFormStringControl);
        }

        JmgWorkPlannerCellContent workPlannerCellContent = super(_column, _row);

        if (overlay && (workPlannerCellContent.getControl() == defaultFormStringControl ||
                        workPlannerCellContent.getControl() == weekendFormStringControl))
        {
            JmgProfileId profileId = profileGroupLevel.getProfileAt(_column, profileGroupLevel.labelToRow(employeeToProfileGroup.lookup(this.getRowLabel(_row))));
            if (profileId && editControls.exists(profileId))
            {
                workPlannerCellContent = JmgWorkPlannerCellContent::constructFromValues(editControls.lookup(profileId), profileId);
            }
        }

        if (overlay && (workPlannerCellContent.getControl() == defaultFormStringControl ||
                        workPlannerCellContent.getControl() == weekendFormStringControl))
        {
            JmgProfileId profileId = allLevel.getProfileAt(_column, 1);
            if (profileId && editControls.exists(profileId))
            {
                workPlannerCellContent = JmgWorkPlannerCellContent::constructFromValues(editControls.lookup(profileId), profileId);
            }
        }

        JmgEmployee empl = JmgEmployee::find(HcmWorker::findByPersonnelNumber(this.getRowLabel(_row)).RecId);
        boolean emplNotActiveYet = (empl && empl.ActiveFrom <= profileDate) ? false : true;

        if ((!showWeekend || (!isWeekend && showWeekend)) && showStandardProfile &&
            (workPlannerCellContent.getControl() == defaultFormStringControl  ||
             workPlannerCellContent.getControl() == weekendFormStringControl) || emplNotActiveYet)
        {
            if (!emplNotActiveYet)
            {
                if (employeeStandardProfile.exists(this.getRowLabel(_row)))
                {
                    JmgProfileId profileId = employeeStandardProfile.lookup(this.getRowLabel(_row));
                    workPlannerCellContent = JmgWorkPlannerCellContent::constructFromValues(editControls.lookup(profileId), profileId);
                }
            }
            else
            {
                workPlannerCellContent = JmgWorkPlannerCellContent::constructFromControl(weekendFormStringControl);
            }
        }

        return workPlannerCellContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlannedAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads planned absence for the workers that are displayed on the work planner form.
    /// </summary>
    private void initPlannedAbsence()
    {
        JmgAbsenceCalendar  jmgAbsenceCalendar;
        JmgDate             profileDate;
        JmgDate             myFromDate;
        JmgDate             myToDate;
        update_recordset jmgTmpWorkPlanner
            setting AbsenceJobId = '';

        jmgAbsenceCalendar.recordLevelSecurity(true);
        while select FromDateTime, ToDateTime, Worker, JobId
            from  jmgAbsenceCalendar
            where (jmgAbsenceCalendar.FromDateTime  >= DateTimeUtil::newDateTime(fromDate,0,DateTimeUtil::getUserPreferredTimeZone()) &&
                   jmgAbsenceCalendar.FromDateTime  <= DateTimeUtil::newDateTime(toDate,24*60*60,DateTimeUtil::getUserPreferredTimeZone()))  ||
                  (jmgAbsenceCalendar.ToDateTime    >= DateTimeUtil::newDateTime(fromDate,0,DateTimeUtil::getUserPreferredTimeZone()) &&
                   jmgAbsenceCalendar.ToDateTime    <= DateTimeUtil::newDateTime(toDate,24*60*60,DateTimeUtil::getUserPreferredTimeZone()))  ||
                  (jmgAbsenceCalendar.FromDateTime  <  DateTimeUtil::newDateTime(fromDate,0,DateTimeUtil::getUserPreferredTimeZone()) &&
                   jmgAbsenceCalendar.ToDateTime    >  DateTimeUtil::newDateTime(toDate,24*60*60,DateTimeUtil::getUserPreferredTimeZone()))
        {
            HcmPersonnelNumberId personnelNumber = HcmWorker::find(jmgAbsenceCalendar.Worker).PersonnelNumber;
            HrmDescription absenceCodeDescription = jmgAbsenceCalendar.hrmAbsenceCodeDescription();

            myFromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.FromDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            myToDate   = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.ToDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            for (profileDate = myFromDate; profileDate <= myToDate; profileDate++)
            {
                jmgTmpWorkPlanner = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, profileDate, personnelNumber);
                jmgTmpWorkPlanner.RelationNumber    = personnelNumber;
                jmgTmpWorkPlanner.ProfileDate       = profileDate;
                jmgTmpWorkPlanner.AbsenceJobId      = jmgAbsenceCalendar.JobId;
                jmgTmpWorkPlanner.AbsenceCodeDescription = absenceCodeDescription;
                jmgTmpWorkPlanner.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRowLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the row labels to display on the work plan.
    /// </summary>
    protected void initRowLabels()
    {
        QueryRun                qr;
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    workerDataSource;
        JmgEmployee             jmgEmployee;
        HcmWorker               hcmWorker;
        int                     rowNumber;

        q = new Query();
        qbds = q.addDataSource(tablenum(JmgEmployee));
        qbds.addSortField(fieldnum(JmgEmployee, Worker), SortOrder::Ascending);
        workerDataSource = qbds.addDataSource(tableNum(HcmWorker));
        workerDataSource.relations(true);
        workerDataSource.joinMode(JoinMode::InnerJoin);
        workerDataSource.fetchMode(QueryFetchMode::One2One);
        workerDataSource.fields().dynamic(true);

        if (calculationGroup)
        {
            qbds.addRange(fieldnum(JmgEmployee, CalculateGroupId)).value(calculationGroup);
        }

        if (approvalGroup)
        {
            qbds.addRange(fieldnum(JmgEmployee, ApproveGroupId)).value(approvalGroup);
        }

        rowLabels               = new Map(Types::Integer, Types::String);
        labelToRow              = new Map(Types::String, Types::Integer);
        employeeToProfileGroup  = new Map(Types::String, Types::String);
        employeeStandardProfile = new Map(Types::String, Types::String);
        rowNumber               = 1;
        qr                      = new QueryRun(q);

        while (qr.next())
        {
            jmgEmployee = qr.get(tablenum(JmgEmployee));
            hcmWorker = qr.get(tableNum(hcmWorker));
            if ((jmgEmployee.Active) ||
               (jmgEmployee.ActiveFrom > fromDate && jmgEmployee.ActiveFrom < toDate) ||
               (!jmgEmployee.Active && jmgEmployee.ActiveFrom < fromDate))
            {
                rowLabels.insert(rowNumber, hcmWorker.PersonnelNumber);
                labelToRow.insert(hcmWorker.PersonnelNumber, rowNumber);
                employeeToProfileGroup.insert(hcmWorker.PersonnelNumber, jmgEmployee.ProfileGroupId);
                employeeStandardProfile.insert(hcmWorker.PersonnelNumber, jmgEmployee.DefaultProfileId);

                rowNumber++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the data from the <c>JmgProfileCalendar</c> table, which is displayed on the work planner.
    /// </summary>
    public void loadData()
    {
        super();

        this.initPlannedAbsence();
        this.initRowLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgWorkPlannerForm_Employee</c> class.
    /// </summary>
    /// <param name="_formTableControl">
    ///    The <c>FormTableControl</c> object that is used to display the work plan.
    /// </param>
    /// <param name="_fromDate">
    ///    The start date of the initial date interval that is shown.
    /// </param>
    /// <param name="_toDate">
    ///    The end date of the initial date interval that is shown.
    /// </param>
    /// <param name="_profileTimes">
    ///    A map of calculated profile times.
    /// </param>
    /// <param name="_allLevel">
    ///    A reference to the <c>JmgWorkPlannerForm</c> object, which handles the All level.
    /// </param>
    /// <param name="_profileGroupLevel">
    ///    A reference to the <c>JmgWorkPlannerForm</c> object, which handles the profile group level.
    /// </param>
    /// <param name="_absenceColor">
    ///    The color that is used to display planned absence.
    /// </param>
    /// <param name="_approvalGroup">
    ///    The approval group for which to display workers.
    /// </param>
    /// <param name="_calculationGroup">
    ///    The calculation group for which to display workers.
    /// </param>
    /// <param name="_overlay">
    ///    A Boolean value that specifies whether entries from the profile group and all level is displayed on
    ///    the worker level.
    /// </param>
    /// <param name="_showPlannedAbsence">
    ///    A Boolean value that specifies whether planned absence is shown on the work planner.
    /// </param>
    /// <param name="_showStandardProfile">
    ///    A Boolean value that specifies whether standard profiles are shown in the work planner.
    /// </param>
    /// <param name="_showWeekend">
    ///    A Boolean value that specifies whether the weekend is highlighted in the work planner.
    /// </param>
    void new(FormTableControl   _formTableControl,
             JmgDate            _fromDate,
             JmgDate            _toDate,
             Map                _profileTimes,
             JmgWorkPlannerForm _allLevel,
             JmgWorkPlannerForm _profileGroupLevel,
             JmgColor           _absenceColor,
             JmgGroupApproveId  _approvalGroup,
             JmgGroupCalcId     _calculationGroup,
             boolean            _overlay,
             boolean            _showPlannedAbsence,
             boolean            _showStandardProfile,
             boolean            _showWeekend)
    {
        approvalGroup       = _approvalGroup;
        calculationGroup    = _calculationGroup;
        overlay             = _overlay;
        showPlannedAbsence  = _showPlannedAbsence;
        showStandardProfile = _showStandardProfile;
        showWeekend         = _showWeekend;
        super(_formTableControl, _fromDate, _toDate, _profileTimes, _allLevel, _profileGroupLevel);
        this.parmAbsenceColor(_absenceColor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayColumnUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates time sums when an overlayed column is updated.
    /// </summary>
    /// <param name="_column">
    ///    The column which is updated.
    /// </param>
    /// <param name="_oldProfile">
    ///    The old profile ID.
    /// </param>
    /// <param name="_profileGroupId">
    ///    The profile group ID to which the overlayed column refers.
    /// </param>
    public void overlayColumnUpdated(int _column, JmgProfileId _oldProfile, JmgProfileGroupId _profileGroupId)
    {
        JmgTmpWorkPlanner   t;
        int                 i;
        JmgProfileId        oldProfileId;
        JmgProfileId        newProfileId;
        if (overlay)
        {
            for (i = 1; i <= this.numberOfRows(); i++)
            {
                t = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, this.columnToDate(_column), this.getRowLabel(i));
                if (!t || !t.ProfileId)
                {
                    if (employeeToProfileGroup.lookup(this.getRowLabel(i)) == _profileGroupId)
                    {
                        oldProfileId = _oldProfile;
                        if (!oldProfileId)
                        {
                            oldProfileId = allLevel.getProfileAt(_column, 1);
                        }

                        newProfileId = profileGroupLevel.getProfileAt(_column, profileGroupLevel.labelToRow(employeeToProfileGroup.lookup(this.getRowLabel(i))));
                        if (!newProfileId)
                        {
                            newProfileId   = allLevel.getProfileAt(_column, 1);
                        }

                        this.updateTimeSums(oldProfileId, newProfileId, this.columnToDate(_column), i, oldProfileId ? false : true);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalGroup</Name>
				<Source><![CDATA[
    public JmgGroupApproveId parmApprovalGroup(JmgGroupApproveId _approvalGroup = approvalGroup)
    {
        if (_approvalGroup   != approvalGroup)
        {
            approvalGroup = _approvalGroup;
            this.initRowLabels();
            this.loadData();
        }
        return approvalGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationGroup</Name>
				<Source><![CDATA[
    public JmgGroupCalcId parmCalculationGroup(JmgGroupCalcId _calculationGroup)
    {
        if (_calculationGroup   != calculationGroup)
        {
            calculationGroup = _calculationGroup;
            this.initRowLabels();
            this.loadData();
        }
        return calculationGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverlay</Name>
				<Source><![CDATA[
    public boolean parmOverlay(boolean _overlay = overlay)
    {
        overlay = _overlay;
        this.recalculateSums();
        return overlay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPlannedAbsence</Name>
				<Source><![CDATA[
    public boolean parmShowPlannedAbsence(boolean _showPlannedAbsence = showPlannedAbsence)
    {
        boolean ret = super(_showPlannedAbsence);

        this.initPlannedAbsence();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowStandardProfile</Name>
				<Source><![CDATA[
    public boolean parmShowStandardProfile(boolean _showStandardProfile = showStandardProfile)
    {
        showStandardProfile = _showStandardProfile;
        this.recalculateSums();
        return showStandardProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </summary>
    /// <returns>
    ///    The profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </returns>
    protected JmgProfileCalendarType type()
    {
        JmgProfileCalendarType ret;

        ret = JmgProfileCalendarType::Employee;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeSums</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the time sums when a profile is changed.
    /// </summary>
    /// <param name="_oldProfileId">
    ///    The old profile ID.
    /// </param>
    /// <param name="_newProfileId">
    ///    The new profile ID.
    /// </param>
    /// <param name="_profileDate">
    ///    The profile date where the profile is changed.
    /// </param>
    /// <param name="_row">
    ///    The row where the profile is changed.
    /// </param>
    /// <param name="_recalculation">
    ///    A Boolean value that specifies whether the time sums is updated as part of a recalculation.
    /// </param>
    protected void updateTimeSums(JmgProfileId _oldProfileId, JmgProfileId _newProfileId, JmgProfileDate _profileDate, int _row, boolean _recalculation = false)
    {
        JmgProfileId    oldProfileId;
        JmgProfileId    newProfileId;
        oldProfileId = _oldProfileId;
        newProfileId = _newProfileId;

        if (!oldProfileId && overlay)
        {
            oldProfileId = profileGroupLevel.getProfileAt(this.dateToColumn(_profileDate), profileGroupLevel.labelToRow(employeeToProfileGroup.lookup(this.getRowLabel(_row))));
            if (!oldProfileId)
            {
                oldProfileId = allLevel.getProfileAt(this.dateToColumn(_profileDate), 1);
            }
        }

        if (!oldProfileId && showStandardProfile)
        {
            oldProfileId = employeeStandardProfile.lookup(this.getRowLabel(_row));
        }

        if (!newProfileId && overlay)
        {
            newProfileId = profileGroupLevel.getProfileAt(this.dateToColumn(_profileDate), profileGroupLevel.labelToRow(employeeToProfileGroup.lookup(this.getRowLabel(_row))));
            if (!newProfileId)
            {
                newProfileId = allLevel.getProfileAt(this.dateToColumn(_profileDate), 1);
            }
        }

        if (!newProfileId && showStandardProfile)
        {
            newProfileId = employeeStandardProfile.lookup(this.getRowLabel(_row));
        }

        super(oldProfileId, newProfileId, _profileDate, _row, _recalculation);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>