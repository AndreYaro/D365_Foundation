<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransPartialUnrealizedTaxSettledCalculator_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Country customization extension of the base class.
/// </summary>
class TaxTransPartialUnrealizedTaxSettledCalculator_W extends TaxTransPartialUnrealizedTaxSettledCalculator
{
    #ISOCountryRegionCodes

    boolean isTaxWithholdEnabledTH;
    private boolean isEnableGlobalWHTFeatureAndParam;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransPartialUnrealizedTaxSettledCalculator_W construct()
    {
        TaxTransPartialUnrealizedTaxSettledCalculator_W calculator = new TaxTransPartialUnrealizedTaxSettledCalculator_W();
        calculator.initialize();

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        isTaxWithholdEnabledTH = TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled();
        isEnableGlobalWHTFeatureAndParam = TaxWithholdingGlobalFeature::isFeatureAndParamEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransAndSourceDocumentLine</Name>
				<Source><![CDATA[
    public container getTaxTransAndSourceDocumentLine(InventTransId _inventTransId,
        RefRecId _sourceDocumentLineRecId = 0,
        RefRecId _invoiceLineRecId = 0,
        boolean _isTaxWithholdUK = false)
    {
        TaxTrans            taxTrans;
        VendInvoiceTransRef vendInvoiceTransRef;
        SourceDocumentLine  sourceDocumentLine;

        if ((_isTaxWithholdUK || isTaxWithholdEnabledTH || isEnableGlobalWHTFeatureAndParam)
            && !_sourceDocumentLineRecId
            && !_inventTransId)
        {
            boolean isGlobalWHTEnabled = TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled();
            select firstonly taxTrans
                where taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                    && (isGlobalWHTEnabled && taxTrans.TaxDirection != TaxDirection::UseTax || !isGlobalWHTEnabled)
                join vendInvoiceTransRef
                    where taxTrans.SourceRecId == vendInvoiceTransRef.LedgerJournalTransRecId
                        && vendInvoiceTransRef.VendInvoiceTransRecId == _invoiceLineRecId;         
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#ISOMX]))
        {
            if (_inventTransId && !_sourceDocumentLineRecId)
            {
                select firstonly taxTrans
                    where taxTrans.InventTransId == _inventTransId
                    && (!enableWHTOnCharges || (taxTrans.SourceTableId != tablenum(MarkupTrans)));
            }
            else
            {
                if (TaxGetTaxTransAndSourceDocumentLine_MXFlight::instance().isEnabled())
                {
                    select firstonly taxTrans
                    join sourceDocumentLine
                    where taxTrans.SourceDocumentLine == sourceDocumentLine.RecId
                        && (!enableWHTOnCharges || (taxTrans.SourceTableId != tablenum(MarkupTrans)))
                        && sourceDocumentLine.ParentSourceDocumentLine == _sourceDocumentLineRecId;
                }
                else
                {
                    select firstonly taxTrans
                    join sourceDocumentLine
                    where taxTrans.SourceDocumentLine == _sourceDocumentLineRecId
                        && (!enableWHTOnCharges || (taxTrans.SourceTableId != tablenum(MarkupTrans)))
                        && sourceDocumentLine.RecId == taxTrans.SourceDocumentLine;
                }
            }
        }
        else
        {
            return super(_inventTransId, _sourceDocumentLineRecId, _invoiceLineRecId, _isTaxWithholdUK);
        }

        return [taxTrans, sourceDocumentLine];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTransAndCostAmountPosted</Name>
				<Source><![CDATA[
    public container getCustInvoiceTransAndCostAmountPosted(TaxTrans _taxTrans, boolean _inclTax, SourceDocumentLine _sourceDocumentLine)
    {
        CustInvoiceTrans custInvoiceTransLoc;
        AmountCur costAmountPosted;

        // <GMX>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) &&
                    _taxTrans.Source == TaxModuleType::FreeTxtInvoice)
        {
            custInvoiceTransLoc = CustInvoiceTrans::findBySourceDocumentLine(_sourceDocumentLine.ParentSourceDocumentLine);
            if (_inclTax)
            {
                costAmountPosted = custInvoiceTransLoc.LineAmount + custInvoiceTransLoc.TaxAmount;
            }
            else
            {
                costAmountPosted = custInvoiceTransLoc.LineAmount;
            }
        }
        else
        {
        // </GMX>
            [custInvoiceTransLoc, costAmountPosted] = super(_taxTrans, _inclTax, _sourceDocumentLine);
        // <GMX>
        }
        // </GMX>

        return [custInvoiceTransLoc, costAmountPosted];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostAmountPostedIncludingTax</Name>
				<Source><![CDATA[
    protected AmountCur getCostAmountPostedIncludingTax(CustInvoiceTrans _custInvoiceTransLoc)
    {
        AmountCur costAmountPostedIncludingTax;

        //<GTH>
        if (isTaxWithholdEnabledTH || enableWHTOnCharges)
        {
            costAmountPostedIncludingTax = _custInvoiceTransLoc.lineAmountInclTax();
        }
        else
        {
            //</GTH>
            costAmountPostedIncludingTax = super(_custInvoiceTransLoc);
            //<GTH>
        }
        //</GTH>

        return costAmountPostedIncludingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmountCurForCustomerForNonFinalPayment</Name>
				<Source><![CDATA[
    protected AmountCur calculateTaxAmountCurForCustomerForNonFinalPayment(AmountCur _paymentAmount, CustTrans _custTransLoc, lineAmount _lineAmount, TaxTrans _taxTrans)
    {
        // <GTH>
        if (isTaxWithholdEnabledTH  || isEnableGlobalWHTFeatureAndParam)
        {
            return ((_paymentAmount / _custTransLoc.AmountCur) * _lineAmount) * (_taxTrans.TaxValue / 100);
        }
        else
        {
            // </GTH>
            return super(_paymentAmount, _custTransLoc, _lineAmount, _taxTrans);
            // <GTH>
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOverrideItemTypeConstraintForCustomer</Name>
				<Source><![CDATA[
    protected boolean doOverrideItemTypeConstraintForCustomer()
    {
        return isTaxWithholdEnabledTH
            || isEnableGlobalWHTFeatureAndParam
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE, #isoSA]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransSum</Name>
				<Source><![CDATA[
    public TaxTrans getTaxTransSum(SourceDocumentLineRecId _sourceDocumentLineRecId,
        InventTransId _inventTransId,
        RefRecId _invoiceLineRecId,
        boolean _isTaxWithholdUK)
    {
        TaxTrans            taxTransSum;
        VendInvoiceTransRef vendInvoiceTransRef;

        if ((_isTaxWithholdUK || isTaxWithholdEnabledTH || isEnableGlobalWHTFeatureAndParam)
            && !_sourceDocumentLineRecId
            && !_inventTransId)
        {
            select sum(SourceRegulateAmountCur) from taxTransSum
                    where taxTransSum.SourceTableId == tableNum(LedgerJournalTrans)
                exists join vendInvoiceTransRef
                    where taxTransSum.SourceRecId == vendInvoiceTransRef.LedgerJournalTransRecId
                        && vendInvoiceTransRef.VendInvoiceTransRecId == _invoiceLineRecId;
        }
        else
        {
            taxTransSum = super(_sourceDocumentLineRecId, _inventTransId, _invoiceLineRecId, _isTaxWithholdUK);
        }

        return taxTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransSumFromSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    protected TaxTrans getTaxTransSumFromSourceDocumentLineRecId(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        TaxTrans            taxTransSum;

        // <GMX>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX])
            && !TaxGetTaxTransAndSourceDocumentLine_MXFlight::instance().isEnabled())
        {
            select sum(SourceRegulateAmountCur) from taxTransSum
                where taxTransSum.SourceDocumentLine == _sourceDocumentLineRecId
                    && (!enableWHTOnCharges || (taxTransSum.SourceTableId != tablenum(MarkupTrans)));
        }
        else
        {
            // </GMX>
            taxTransSum = super(_sourceDocumentLineRecId);
            // <GMX>
        }
        // </GMX>

        return taxTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmountCurForVendorForNonFinalPayment</Name>
				<Source><![CDATA[
    protected AmountCur calculateTaxAmountCurForVendorForNonFinalPayment(AmountCur _paymentAmount, VendTrans _vendTransLoc, TaxTrans _taxTransSum)
    {
        AmountCur taxAmountCurLoc;

        // <GTH>
        if (isTaxWithholdEnabledTH || isEnableGlobalWHTFeatureAndParam)
        {
            taxAmountCurLoc = (_paymentAmount / _vendTransLoc.AmountCur) * _taxTransSum.SourceRegulateAmountCur;
        }
        else
        {
            // </GTH>
            taxAmountCurLoc = super(_paymentAmount, _vendTransLoc, _taxTransSum);
            // <GTH>
        }
        // </GTH>

        return taxAmountCurLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOverrideItemTypeConstraintForVendor</Name>
				<Source><![CDATA[
    protected boolean doOverrideItemTypeConstraintForVendor(PurchLine _purchLineLoc)
    {
        boolean doOverride;
        doOverride = (InventTable::find(_purchLineLoc.ItemId).ItemType == ItemType::Item
            && TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled());

        return doOverride;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>