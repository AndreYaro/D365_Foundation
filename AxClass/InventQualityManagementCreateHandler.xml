<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityManagementCreateHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityManagementCreateHandler</c> class handles all quality order creation events.
/// </summary>
final class InventQualityManagementCreateHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTransTypesSupportingInventoryRegistrationDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for initializing the set of <c>InventTransType</c> enums supporting registration.
    /// </summary>
    /// <param name = "_InventTransTypesSupportingRegistration">The set of enums supporting registrations. Event handlers can add to this collection.</param>
    static delegate void inventTransTypesSupportingInventoryRegistrationDelegate(Set _InventTransTypesSupportingRegistration)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransTypesSupportingInventoryRegistration</Name>
				<Source><![CDATA[
    private static Set inventTransTypesSupportingInventoryRegistration()
    {
        Set inventTransTypeSet = new Set(Types::Enum);

        inventTransTypeSet.add(InventTransType::Purch);
        inventTransTypeSet.add(InventTransType::PmfProdCoBy);
        inventTransTypeSet.add(InventTransType::Production);

        InventQualityManagementCreateHandler::inventTransTypesSupportingInventoryRegistrationDelegate(inventTransTypeSet);

        return inventTransTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the inventory registration.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// An inventory transaction origin ID.
    /// </param>
    /// <param name="_inventReceiptForTestRegistrator">
    /// An instance of the <c>InventReceiptForTestRegistrator</c> class.
    /// </param>
    public static void createInventoryRegistration(
        InventTransOriginId             _inventTransOriginId,
        InventReceiptForTestRegistrator _inventReceiptForTestRegistrator)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        // This can happen when all transactions were updated from the statue Registered to the status Received
        if (!_inventReceiptForTestRegistrator || _inventReceiptForTestRegistrator.parmTotalReceiptQuantity() == 0)
        {
            return;
        }

        InventTransOrigin inventTransOrigin = InventTransOrigin::find(_inventTransOriginId);

        var set = InventQualityManagementCreateHandler::inventTransTypesSupportingInventoryRegistration();
        if (!set.in(inventTransOrigin.ReferenceCategory))
        {
            return;
        }

        InventQualityManagementCreate::createOnRegistration(
            inventTransOrigin,
            _inventReceiptForTestRegistrator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPdsInspectionOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates quality orders for the specified batch in all sites where this batch has physical
    /// inventory.
    /// </summary>
    /// <param name="_inventBatch">
    /// The batch for which to generate the orders.
    /// </param>
    public static void createPdsInspectionOrders(InventBatch _inventBatch)
    {
        InventSite      inventSite;
        InventDim       inventDim;

        while select SiteId from inventSite
        {
            InventOnHandQty inventOnhand = InventOnHandQty::newInventBatch(_inventBatch);

            // set the site for the on-hand criteria
            inventDim.InventSiteId  = inventSite.SiteId;
            inventDim.InventBatchId = _inventBatch.InventBatchId;
            inventOnhand.parmInventDim(inventDim);

            InventDimParm inventDimParm = inventOnhand.parmInventDimParm();
            inventDimParm.InventBatchIdFlag  = NoYes::Yes;
            inventDimParm.InventSiteIdFlag   = NoYes::Yes;
            inventOnhand.parmInventDimParm(inventDimParm);

            if (inventOnhand.availPhysical())
            {
                InventQualityManagementCreate::createPerQualityAssociations(
                    _inventBatch,
                    InventTestDocumentStatus::None,
                    InventTestExecution::None,
                    inventOnhand.availPhysical(),
                    inventOnhand.pdsCWAvailPhysical(),
                    inventSite.SiteId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionEndAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the after production end.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> table buffer.
    /// </param>
    public static void createProductionEndAfter(ProdTable _prodTable)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodTable,
            InventTestDocumentStatus::End,
            InventTestExecution::After,
            _prodTable.QtyStUp,
            _prodTable.PdsCWBatchStup);

        InventQualityManagementCreateHandler::createProductionEndCo(_prodTable, InventTestExecution::After);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionEndBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before production end.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> table buffer.
    /// </param>
    public static void createProductionEndBefore(ProdTable _prodTable)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodTable,
            InventTestDocumentStatus::End,
            InventTestExecution::Before,
            _prodTable.QtyStUp,
            _prodTable.PdsCWBatchStup);

        InventQualityManagementCreateHandler::createProductionEndCo(_prodTable, InventTestExecution::Before);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionEndCo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation for co products before or after production end.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> table buffer.
    /// </param>
    /// <param name="_execution">
    /// The test execution time.
    /// </param>
    protected static void createProductionEndCo(
        ProdTable           _prodTable,
        InventTestExecution _execution)
    {
        PmfProdCoBy prodCoBy;

        while select prodCoBy
            where  prodCoBy.ProdId      == _prodTable.ProdId
                && prodCoBy.QtyCoByStUp != 0
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                prodCoBy,
                InventTestDocumentStatus::End,
                _execution,
                prodCoBy.QtyCoByStUp,
                prodCoBy.PdsCWInventStup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionReportFinishedAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after production report as finished.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> table buffer.
    /// </param>
    /// <param name="_qtyGood">
    /// The reported good quantity.
    /// </param>
    /// <param name="_cwQtyGood">
    /// The reported good cw quantity.
    /// </param>
    public static void createProductionReportFinishedAfter(
        ProdTable _prodTable,
        InventQty _qtyGood,
        PdsCWInventQty _cwQtyGood)
    {
        if (   _qtyGood <= 0
            || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodTable,
            InventTestDocumentStatus::ReportFinished,
            InventTestExecution::After,
            _qtyGood,
            _cwQtyGood);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionReportFinishedBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before production report as finished.
    /// </summary>
    /// <param name="_prodTable">
    /// A <c>ProdTable</c> table buffer.
    /// </param>
    /// <param name="_qtyGood">
    /// The reported good quantity.
    /// </param>
    /// <param name="_cwQtyGood">
    /// The reported good catch weight quantity.
    /// </param>
    public static void createProductionReportFinishedBefore(
        ProdTable       _prodTable,
        InventQty       _qtyGood,
        PdsCWInventQty  _cwQtyGood)
    {
        if (   _qtyGood <= 0
            || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodTable,
            InventTestDocumentStatus::ReportFinished,
            InventTestExecution::Before,
            _qtyGood,
            _cwQtyGood);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionReportFinishedCo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation for co-products before or after production report as finished.
    /// </summary>
    /// <param name="_prodJournalProd">
    /// A <c>ProdJournalProd</c> table buffer.
    /// </param>
    /// <param name="_execution">
    /// The test execution time.
    /// </param>
    public static void createProductionReportFinishedCo(
        ProdJournalProd         _prodJournalProd,
        InventTestExecution     _execution)
    {
        if (!InventParameters::find().UseQualityManagement
            || _prodJournalProd.PmfProductType != PmfProductType::Co_Product)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodJournalProd.pmfProdCoBy(),
            InventTestDocumentStatus::ReportFinished,
            _execution,
            _prodJournalProd.QtyGood,
            _prodJournalProd.PdsCWBatchGood);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseProductReceiptAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after purchase product receipt.
    /// </summary>
    /// <param name="_purchParmLine">
    /// A <c>PurchParmLine</c> table buffer.
    /// </param>
    public static void createPurchaseProductReceiptAfter(PurchParmLine _purchParmLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _purchParmLine,
            InventTestDocumentStatus::ProductReceipt,
            InventTestExecution::After,
            _purchParmLine.InventNow,
            _purchParmLine.PdsCWReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseProductReceiptBefore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles order creation before the purchase product receipt.
    /// </summary>
    /// <param name="_formLetter">
    ///    An instance of the <c>PurchFormLetter_PackingSlip</c> class where the event originated.
    /// </param>
    [SysObsolete('Please use the createPurchaseProductReceiptBeforeParms method instead.', false, 31\01\2016)]
    public static void createPurchaseProductReceiptBefore(PurchFormLetter_PackingSlip _formLetter)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreateHandler::purchFormLetterBeforeHelper(_formLetter.parmId(), _formLetter.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseProductReceiptBeforeParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles order creation before the purchase product receipt.
    /// </summary>
    /// <param name="_formLetterParmId">
    ///    The ID of the journal parameter record.
    /// </param>
    /// <param name="_formLetterDocumentStatus">
    ///    The status of the document being posted.
    /// </param>
    public static void createPurchaseProductReceiptBeforeParms(ParmId _formLetterParmId, DocumentStatus _formLetterDocumentStatus)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreateHandler::purchFormLetterBeforeHelper(_formLetterParmId, _formLetterDocumentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the order creation after purchase receipt list.
    /// </summary>
    /// <param name="_purchParmLine">
    /// A <c>PurchParmLine</c> record.
    /// </param>
    public static void createPurchaseReceiptsListAfter(PurchParmLine _purchParmLine)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _purchParmLine.purchLine(),
            InventTestDocumentStatus::ReceiptsList,
            InventTestExecution::After,
            _purchParmLine.InventNow,
            _purchParmLine.PdsCWReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListBefore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles order creation before the purchase receipt list.
    /// </summary>
    /// <param name="_formLetter">
    ///    An instance of the <c>PurchFormLetter_ReceiptsList</c> class where the event originated.
    /// </param>
    [SysObsolete('Please use the createPurchaseReceiptsListBeforeParms method instead.', false, 31\01\2016)]
    public static void createPurchaseReceiptsListBefore(PurchFormLetter_ReceiptsList _formLetter)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreateHandler::purchFormLetterBeforeHelper(_formLetter.parmId(), _formLetter.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListBeforeParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles order creation before the purchase receipt list.
    /// </summary>
    /// <param name="_formLetterParmId">
    ///    The ID of the journal parameter record.
    /// </param>
    /// <param name="_formLetterDocumentStatus">
    ///    The status of the document being posted.
    /// </param>
    public static void createPurchaseReceiptsListBeforeParms(ParmId _formLetterParmId, DocumentStatus _formLetterDocumentStatus)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreateHandler::purchFormLetterBeforeHelper(
            _formLetterParmId,
            _formLetterDocumentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuarantineEndBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before quarantine end.
    /// </summary>
    /// <param name="_inventParmQuarantineOrder">
    /// An <c>inventParmQuarantineOrder</c> table buffer.
    /// </param>
    public static void createQuarantineEndBefore(InventParmQuarantineOrder _inventParmQuarantineOrder)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            InventQuarantineOrder::find(_inventParmQuarantineOrder.QuarantineId),
            InventTestDocumentStatus::End,
            InventTestExecution::Before,
            _inventParmQuarantineOrder.Qty,
            _inventParmQuarantineOrder.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuarantineReportFinishedAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after quarantine report is finished.
    /// </summary>
    /// <param name="_inventParmQuarantineOrder">
    /// A <c>inventParmQuarantineOrder</c> record.
    /// </param>
    public static void createQuarantineReportFinishedAfter(InventParmQuarantineOrder _inventParmQuarantineOrder)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            InventQuarantineOrder::find(_inventParmQuarantineOrder.QuarantineId),
            InventTestDocumentStatus::ReportFinished,
            InventTestExecution::After,
            _inventParmQuarantineOrder.Qty,
            _inventParmQuarantineOrder.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuarantineReportFinishedBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before quarantine report is finished.
    /// </summary>
    /// <param name="_inventParmQuarantineOrder">
    /// A <c>inventParmQuarantineOrder</c> record.
    /// </param>
    public static void createQuarantineReportFinishedBefore(InventParmQuarantineOrder _inventParmQuarantineOrder)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            InventQuarantineOrder::find(_inventParmQuarantineOrder.QuarantineId),
            InventTestDocumentStatus::ReportFinished,
            InventTestExecution::Before,
            _inventParmQuarantineOrder.Qty,
            _inventParmQuarantineOrder.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteOprReportFinishedAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after route operation report is finished.
    /// </summary>
    /// <param name="_prodId">
    /// A <c>ProdId</c> value.
    /// </param>
    /// <param name="_oprNum">
    /// A <c>OprNum</c> value of the route operations that are updated.
    /// </param>
    /// <param name="_onlySecondary">
    /// A Boolean value that indicates whether the route operations are updated.
    /// </param>
    /// <param name="_reverse">
    /// A Boolean value that indicates whether the route operations are updated.
    /// </param>
    public static void createRouteOprReportFinishedAfter(
        ProdId    _prodId,
        OprNum    _oprNum,
        boolean   _onlySecondary,
        boolean   _reverse)
    {
        ProdRoute   prodRoute;

        if (_reverse || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        while select prodRoute
               where prodRoute.ProdId          == _prodId                                                          &&
                    ((prodRoute.OprNum         == _oprNum)                                     || !_oprNum)        &&
                    ((prodRoute.OprPriority    != RouteOprPriority::Primary && _onlySecondary) || !_onlySecondary) &&
                    (prodRoute.OprFinished     == NoYes::No)
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                prodRoute,
                InventTestDocumentStatus::ReportFinished,
                InventTestExecution::After,
                prodRoute.qtyGood(),
                prodRoute.pdsCWQtyGood());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteOprReportFinishedBeforeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before route operation report is finished.
    /// </summary>
    /// <param name="_prodId">
    /// A <c>ProdId</c> value.
    /// </param>
    /// <param name="_fromOprNum">
    /// A <c>OprNum</c> value that gives a lower bound on route operations that are updated.
    /// </param>
    /// <param name="_toOprNum">
    /// A <c>OprNum</c> value that gives an upper bound on route operations that are updated.
    /// </param>
    /// <param name="_onlySecondary">
    /// A Boolean value that indicates whether the route operations are updated.
    /// </param>
    /// <param name="_reverse">
    /// A Boolean value that indicates whether the route operations are updated.
    /// </param>
    public static void createRouteOprReportFinishedBeforeRange(
        ProdId     _prodId,
        OprNum     _fromOprNum,
        OprNum     _toOprNum,
        boolean    _onlySecondary,
        boolean    _reverse)
    {
        ProdRoute   prodRoute;

        if (_reverse || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        while select prodRoute
            where prodRoute.ProdId          ==  _prodId                                                                 &&
                  prodRoute.OprNum          >=  _fromOprNum                                                             &&
                  (prodRoute.OprNum         <=  _toOprNum                                       ||  !_toOprNum)         &&
                  ((prodRoute.OprPriority   !=  RouteOprPriority::Primary   && _onlySecondary)  ||  !_onlySecondary)    &&
                  !prodRoute.OprStartedUp
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                prodRoute,
                InventTestDocumentStatus::ReportFinished,
                InventTestExecution::Before,
                prodRoute.CalcQty,
                prodRoute.pdsCWCalcQty());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteOprReportFinishedBeforeSingle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before route operation report is finished.
    /// </summary>
    /// <param name="_prodRoute">
    /// A <c>ProdRoute</c> record.
    /// </param>
    /// <param name="_origOprStartedUp">
    /// A <c>NoYes</c> value that describes the current state of route operations that are updated.
    /// </param>
    public static void createRouteOprReportFinishedBeforeSingle(ProdRoute _prodRoute, NoYes _origOprStartedUp)
    {
        if (_origOprStartedUp == NoYes::Yes || !InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _prodRoute,
            InventTestDocumentStatus::ReportFinished,
            InventTestExecution::Before,
            _prodRoute.CalcQty,
            _prodRoute.pdsCWCalcQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPackingSlipBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before sales packing slip.
    /// </summary>
    /// <param name="_formLetter">
    /// An instance of the <c>SalesFormLetter_PackingSlip</c> class where the event originated.
    /// </param>
    public static void createSalesPackingSlipBefore(SalesFormLetter_PackingSlip _formLetter)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        if (_formLetter.getSalesFormLetterContract().parmProforma())
        {
            return;
        }

        InventQualityManagementCreateHandler::salesFormLetterBeforeHelper(_formLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPickingListAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after sales picking list.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_salesParmTable">
    /// A <c>SalesParmTable</c> table buffer.
    /// </param>
    [SysObsolete('Use createSalesPickingListAfterPost instead.', false, 31\01\2016)]
    public static void createSalesPickingListAfter(
        SalesLine       _salesLine,
        SalesParmTable  _salesParmTable)
    {
        SalesParmLine   salesParmLine;

        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        select firstonly forupdate salesParmLine
            where   salesParmLine.ParmId            == _salesParmTable.ParmId
                &&  salesParmLine.TableRefId        == _salesParmTable.TableRefId
                &&  salesParmLine.SalesLineRecId    == _salesLine.RecId;

        InventQualityManagementCreate::createPerQualityAssociations(
            _salesLine,
            InventTestDocumentStatus::PickingList,
            InventTestExecution::After,
            salesParmLine.InventNow,
            salesParmLine.PdsCWDeliverNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPickingListAfterPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation after sales picking list.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_qty">
    /// Inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    /// Catch weight quantity.
    /// </param>
    public static void createSalesPickingListAfterPost(
        SalesLine       _salesLine,
        InventQty       _qty,
        PdsCWInventQty  _cwQty)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _salesLine,
            InventTestDocumentStatus::PickingList,
            InventTestExecution::After,
            _qty,
            _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPickingListBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation before sales picking list.
    /// </summary>
    /// <param name="_formLetter">
    /// An instance of the <c>SalesFormLetter_PickingList</c> class where the event originated.
    /// </param>
    public static void createSalesPickingListBefore(SalesFormLetter_PickingList _formLetter)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreateHandler::salesFormLetterBeforeHelper(_formLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesPickingListWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation during work creation for outbound shipping process.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name="_qty">
    /// Inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    /// Catch weight quantity.
    /// </param>
    public static void createSalesPickingListWork(
        SalesLine       _salesLine,
        InventQty       _qty,
        PdsCWInventQty  _cwQty)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _salesLine,
            InventTestDocumentStatus::PickingList,
            InventTestExecution::Before,
            _qty,
            _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchFormLetterBeforeHelper</Name>
				<Source><![CDATA[
    private static void purchFormLetterBeforeHelper(ParmId _parmId, DocumentStatus  _documentStatus)
    {
        PurchParmTable           formletterParmTable;
        ParmId                   parmId               = _parmId;
        DocumentStatus           documentStatus       = _documentStatus;

        InventTestDocumentStatus testDocStatus;

        if (documentStatus == DocumentStatus::PackingSlip)
        {
            testDocStatus = InventTestDocumentStatus::ProductReceipt;
        }
        else if (documentStatus == DocumentStatus::ReceiptsList)
        {
            testDocStatus = InventTestDocumentStatus::ReceiptsList;
        }
        else
        {
            return;
        }

        InventTestAssociationTable purchTestAssociationTable;
        select firstonly RecId from purchTestAssociationTable
            where  purchTestAssociationTable.OrderType     == InventTestReferenceType::Purch
                && purchTestAssociationTable.TestExecution == InventTestExecution::Before;
        if (!purchTestAssociationTable.RecId)
        {
            return;
        }

        while select formletterParmTable
            where formletterParmTable.ParmId        == parmId
               && formletterParmTable.ParmJobStatus == ParmJobStatus::Waiting
        {
            QueryRun queryTransact = new QueryRun(formletterParmTable.queryLine(false));
            while (queryTransact.next() && queryTransact.changed(tableNum(PurchParmLine)))
            {
                PurchParmLine parmLine = queryTransact.get(tableNum(PurchParmLine));
                PurchLine line = parmLine.purchLine();
                InventQualityManagementCreateHandler::generateQualityOrderForExistingAssociation(line, testDocStatus, parmLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQualityOrderForExistingAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates quality orders for existing relevant quality associations.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_testDocumentStatus">The test document status.</param>
    /// <param name = "_parmLine">The purchasing post line record.</param>
    protected static void generateQualityOrderForExistingAssociation(PurchLine _purchLine, InventTestDocumentStatus _testDocumentStatus, PurchParmLine _parmLine)
    {
        PurchLine localPurchLine = InventQualityManagementCreateHandler::passParmLinesInventDimToPurchLine(_purchLine, _testDocumentStatus, _parmLine);

        InventQualityManagementCreate::createPerQualityAssociations(
                    localPurchLine,
                    _testDocumentStatus,
                    InventTestExecution::Before,
                    _parmLine.InventNow,
                    _parmLine.PdsCWReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>passParmLinesInventDimToPurchLine</Name>
				<Source><![CDATA[
    private static PurchLine passParmLinesInventDimToPurchLine(PurchLine _purchLine, InventTestDocumentStatus _testDocumentStatus, PurchParmLine _parmLine)
    {
        PurchLine localPurchLine = _purchLine.data();

        if (_testDocumentStatus == InventTestDocumentStatus::ProductReceipt)
        {
            localPurchLine.InventDimId = _parmLine.InventDimId;
        }

        return localPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesFormLetterBeforeHelper</Name>
				<Source><![CDATA[
    private static void salesFormLetterBeforeHelper(SalesFormLetter _formLetter)
    {
        InventQualityManagementCreateHandler::salesFormLetterBeforeHelperOnServer(_formLetter.parmId(),_formLetter.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesFormLetterBeforeHelperOnServer</Name>
				<Source><![CDATA[
    private static void salesFormLetterBeforeHelperOnServer(
        ParmId                   _parmId,
        DocumentStatus           _documentStatus)
    {
        SalesParmTable           formletterParmTable;
        ParmId                   parmId               = _parmId;
        DocumentStatus           documentStatus       = _documentStatus;
        InventTestDocumentStatus testDocStatus;

        if (documentStatus == DocumentStatus::PackingSlip)
        {
            testDocStatus = InventTestDocumentStatus::PackingSlip;
        }
        else if (documentStatus == DocumentStatus::PickingList)
        {
            testDocStatus = InventTestDocumentStatus::PickingList;
        }
        else
        {
            return;
        }

        while select formletterParmTable
            where formletterParmTable.ParmId        == parmId
               && formletterParmTable.ParmJobStatus == ParmJobStatus::Waiting
        {
            QueryRun queryTransact = new QueryRun(formletterParmTable.querySalesParmLine());
            while (queryTransact.next() && queryTransact.changed(tableNum(SalesParmLine)))
            {
                SalesParmLine parmLine = queryTransact.get(tableNum(SalesParmLine));
                SalesLine line = parmLine.salesLine();
                InventQualityManagementCreate::createPerQualityAssociations(
                    line,
                    testDocStatus,
                    InventTestExecution::Before,
                    parmLine.InventNow,
                    parmLine.PdsCWDeliverNow);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>