<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundShipConfirmController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSOutboundShipConfirmController</c> class acts as a controller
/// for the <c>WHSShipConfirmService</c> service when dealing with outbound
/// ship confirmations.
/// </summary>
public class WHSOutboundShipConfirmController extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromExecutionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSOutboundShipConfirmController</c> class
    /// with the specified execution mode.
    /// </summary>
    /// <param name = "_executionMode">Execution mode</param>
    /// <returns>
    /// A new instance of <c>WHSOutboundShipConfirmController</c> class.
    /// </returns>
    public static WHSOutboundShipConfirmController newFromExecutionMode(SysOperationExecutionMode _executionMode)
    {
        WHSOutboundShipConfirmController controller = new WHSOutboundShipConfirmController(
                classStr(WHSShipConfirmService),
                methodStr(WHSShipConfirmService, shipConfirm),
                _executionMode);

        return controller;

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SysOperationExecutionMode         executionMode = _args.parmEnum();
        WHSOutboundShipConfirmController controller = WHSOutboundShipConfirmController::newFromExecutionMode(executionMode);

        controller.parmDialogCaption("@WAX380");
        controller.parmArgs(_args);

        if (_args.caller() is WHSILoadIdRangeProvider)
        {            
            WHSILoadIdRangeProvider rangeProvider = _args.caller() as WHSILoadIdRangeProvider;
            WHSLoadIdRange loadids = rangeProvider.loadIdRange();

            controller.getDataContractObject().setLoadIdRange(loadids);

            controller.getDataContractObject().parmLoadShippedDatesPacked(WHSOutboundShipConfirmController::getLoadsForShippedDateOverridePacked(loadids));
        }

        controller.getDataContractObject().parmMenuItemName(_args.menuItemName());

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(strFmt('%1_%2', formStr(Dialog), classStr(WHSOutboundShipConfirmController)), _args.menuItemName()))
        {
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadsForShippedDateOverridePacked</Name>
				<Source><![CDATA[
    private static container getLoadsForShippedDateOverridePacked(WHSLoadIdRange _loadIdRange)
    {        
        container loadIds;

        if (TMSParameters::find().OverrideShipConfirmDate)
        {
            List loadIdsList = strSplit(_loadIdRange, ',');
            ListEnumerator enumerator = loadIdsList.getEnumerator();
            while (enumerator.moveNext())
            {
                WHSLoadId loadId = enumerator.current();
                
                if (WHSLoadTable::find(loadId).canUseTMSActions())
                {
                    loadIds += loadId;
                }
            }

            return TMSRouteHelper::getShipDatesForLoads(loadIds).pack();
        }
        
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to control that the operation supports running in a different, non interactive
    /// session than the one from which it was launched from the client.
    /// </summary>
    /// <returns>If true operation will be run synchronously in an non GUI async session</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the query values will be added to the dialog box.
    /// </summary>
    /// <param name = "parameterName">The name of the query parameter in the data contract.</param>
    /// <returns>Always returns true.</returns>
    public boolean showQueryValues(str parameterName)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>