<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStockCardUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStockCardUIBuilder</c> is UI builder class for the
///    <c>InventStockCard</c> report.
/// </summary>
class InventStockCardUIBuilder extends SrsReportDataContractUIBuilder
{
    // Parameters
    DialogField                 detailLevelCtrl;
    DialogField                 fromDateCtrl;
    DialogField                 toDateCtrl;

    // Grouping by
    DialogField                 groupBySite;
    DialogField                 groupByWarehouse;
    DialogField                 groupByLocation;
    DialogField                 groupByItemGroupCtrl;

    // Sorting by
    DialogField                 sortByPhysicalDateAscCtrl;
    DialogField                 sortByFinancialDateAscCtrl;
    DialogField                 sortByBatchCtrl;
    DialogField                 sortBySerialCtrl;

    // Select
    DialogField                 inventItemIdCtrl;
    DialogField                 itemGroupIdCtrl;
    DialogField                 lotIdCtrl;
    DialogField                 inventDimIdCtrl;
    DialogField                 inventConfigIdCtrl;
    DialogField                 inventBatchIdCtrl;
    DialogField                 inventColorIdCtrl;
    DialogField                 inventLocationIdCtrl;
    DialogField                 inventSerialIdCtrl;
    DialogField                 inventSizeIdCtrl;
    DialogField                 inventVersionIdCtrl;
    DialogField                 costingMethodCtrl;
    DialogField                 voucherCtrl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the report parameter form.
    /// </summary>
    public void build()
    {
        #define.ColumsNumberForParms(2)

        FormBuildGroupControl formBuildGroupControl = dialog.curFormGroup();
        formBuildGroupControl.columns(#ColumsNumberForParms);

        super();

        InventStockCardContract rdpContract = this.dataContractObject() as InventStockCardContract;

        // Parameters
        detailLevelCtrl = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmDetailLevel));
        detailLevelCtrl.registerOverrideMethod(
            methodStr(FormComboBoxControl, selectionChange),
            methodStr(InventStockCardUIBuilder, detailLevelModified),
            this);

        fromDateCtrl    = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmFromDate));
        toDateCtrl      = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmToDate));

        TaxThaiGovCertificationHelper::setupTaxMonthYearCtrl(fromDateCtrl.control());
        toDateCtrl.visible(false);

        // Grouping by
        groupBySite             = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmGroupBySite));
        groupByWarehouse        = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmGroupByWarehouse));
        groupByLocation         = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmGroupByLocation));
        groupByItemGroupCtrl    = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmGroupByItemGroup));

        groupByWarehouse.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(InventStockCardUIBuilder, groupByWarehouseModified),
            this);

        groupByLocation.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(InventStockCardUIBuilder, groupByLocationModified),
            this);

        // Sorting by
        sortByPhysicalDateAscCtrl   = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmSortByPhysicalDateAsc));
        sortByFinancialDateAscCtrl  = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmSortByFinancialDateAsc));
        sortByBatchCtrl             = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmSortByBatch));
        sortBySerialCtrl            = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmSortBySerial));

        // Select
        inventItemIdCtrl            = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventItemId));
        itemGroupIdCtrl             = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmItemGroupId));
        lotIdCtrl                   = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmLotId));
        inventDimIdCtrl             = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventDimId));
        inventConfigIdCtrl          = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventConfigId));
        inventBatchIdCtrl           = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventBatchId));
        inventColorIdCtrl           = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventColorId));
        inventLocationIdCtrl        = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventLocationId));
        inventSerialIdCtrl          = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventSerialId));
        inventSizeIdCtrl            = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventSizeId));
        inventVersionIdCtrl        = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmInventVersionId));
        costingMethodCtrl           = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmCostingMethod));
        voucherCtrl                 = this.bindInfo().getDialogField(rdpContract, methodStr(InventStockCardContract, parmVoucher));

        this.setupRangeDialogField(inventItemIdCtrl);
        this.setupRangeDialogField(itemGroupIdCtrl);
        this.setupRangeDialogField(lotIdCtrl);
        this.setupRangeDialogField(inventDimIdCtrl);
        this.setupRangeDialogField(inventConfigIdCtrl);
        this.setupRangeDialogField(inventBatchIdCtrl);
        this.setupRangeDialogField(inventColorIdCtrl);
        this.setupRangeDialogField(inventLocationIdCtrl);
        this.setupRangeDialogField(inventSerialIdCtrl);
        this.setupRangeDialogField(inventSizeIdCtrl);
        this.setupRangeDialogField(inventVersionIdCtrl);
        this.setupRangeDialogField(costingMethodCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailLevelModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI when the detail level is modified.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The control of detail level.
    /// </param>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean detailLevelModified(FormComboBoxControl _formComboBoxControl)
    {
        this.updateCtrlsBasedOnDetailLevel(_formComboBoxControl.selection());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formStringControlRangeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the corresponding lookup of specified control.
    /// </summary>
    /// <param name="_control">
    /// The control which needs to open a lookup.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void formStringControlRangeLookup(FormStringControl _control)
    {
        if (_control.equal(inventItemIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(ItemId));
        }
        else if (_control.equal(itemGroupIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(ItemGroupId));
        }
        else if (_control.equal(lotIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(InventTransId));
        }
        else if (_control.equal(inventDimIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(InventDimId));
        }
        else if (_control.equal(inventConfigIdCtrl.fieldControl()))
        {
            EcoResProductVariantDimValue::lookupSimpleConfigId(_control, 0);
        }
        else if (_control.equal(inventBatchIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(InventBatchId));
        }
        else if (_control.equal(inventSerialIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(InventSerialId));
        }
        else if (_control.equal(inventLocationIdCtrl.fieldControl()))
        {
            _control.performTypeLookup(extendedTypeNum(WMSLocationId));
        }
        else if (_control.equal(inventColorIdCtrl.fieldControl()))
        {
            EcoResProductVariantDimValue::lookupSimpleInventColorId(_control, 0);
        }
        else if (_control.equal(inventSizeIdCtrl.fieldControl()))
        {
            EcoResProductVariantDimValue::lookupSimpleInventSizeId(_control, 0);
        }
        else if (_control.equal(inventVersionIdCtrl.fieldControl()))
        {
            EcoResProductVariantDimValue::lookupSimpleInventVersionId(_control, 0);
        }
        else if (_control.equal(costingMethodCtrl.fieldControl()))
        {
            Args args = new Args(formStr(SysLookup));
            args.parm(int2str(enumNum(InventModel)));

            Object formRun = classfactory.formRunClass(args);
            formRun.init();

            _control.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formStringControlRangeValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// A default validation for <c>FormStringControl</c>.
    /// </summary>
    /// <param name="_control">
    /// The control behind the dialog field.
    /// </param>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean formStringControlRangeValidate(FormStringControl _control)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByLocationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI when the control "Group by location" is modified.
    /// </summary>
    /// <param name="_formCheckBoxControl">
    /// The control of "Group by location".
    /// </param>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean groupByLocationModified(FormCheckBoxControl _formCheckBoxControl)
    {
        if (_formCheckBoxControl.value())
        {
            groupBySite.value(true);
            groupByWarehouse.value(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByWarehouseModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI when the control "Group by warehouse" is modified.
    /// </summary>
    /// <param name="_formCheckBoxControl">
    /// The control of "Group by warehouse".
    /// </param>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean groupByWarehouseModified(FormCheckBoxControl _formCheckBoxControl)
    {
        if (_formCheckBoxControl.value())
        {
            groupBySite.value(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        InventStockCardContract rdpContract = this.dataContractObject() as InventStockCardContract;

        super();

        // Refresh the UI based on current detail level
        this.updateCtrlsBasedOnDetailLevel(rdpContract.parmDetailLevel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupRangeDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the range control.
    /// </summary>
    /// <param name="_dialogField">
    /// The range control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setupRangeDialogField(DialogField _dialogField)
    {
        if (_dialogField.control() is FormBuildStringControl)
        {
            FormBuildStringControl control = _dialogField.control();
            _dialogField.lookupButton(FormLookupButton::Always);
            control.replaceOnLookup(false);
            _dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(InventStockCardUIBuilder, formStringControlRangeLookup), this);
            _dialogField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(InventStockCardUIBuilder, formStringControlRangeValidate), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCtrlsBasedOnDetailLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI when the detail level is modified.
    /// </summary>
    /// <param name="_detailLevel">
    /// The detail level.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateCtrlsBasedOnDetailLevel(DetailSummary _detailLevel)
    {
        boolean isDetail = (_detailLevel == DetailSummary::Detail);

        dialog.formRun().lock();

        groupByItemGroupCtrl.visible(!isDetail);

        sortByPhysicalDateAscCtrl.visible(isDetail);
        sortByFinancialDateAscCtrl.visible(isDetail);
        sortByBatchCtrl.visible(isDetail);
        sortBySerialCtrl.visible(isDetail);

        itemGroupIdCtrl.visible(isDetail);
        lotIdCtrl.visible(isDetail);
        inventDimIdCtrl.visible(isDetail);
        inventConfigIdCtrl.visible(isDetail);
        inventBatchIdCtrl.visible(isDetail);
        inventColorIdCtrl.visible(isDetail);
        inventLocationIdCtrl.visible(isDetail);
        inventSerialIdCtrl.visible(isDetail);
        inventSizeIdCtrl.visible(isDetail);
        inventVersionIdCtrl.visible(isDetail);
        costingMethodCtrl.visible(isDetail);
        voucherCtrl.visible(isDetail);

        dialog.formRun().unLock();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
