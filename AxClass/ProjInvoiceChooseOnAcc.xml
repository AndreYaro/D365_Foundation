<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceChooseOnAcc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceChooseOnAcc extends ProjInvoiceChoose implements BatchRetryable
{
    #define.CurrentVersion(7)

    #localmacro.CurrentList
        queryOnAcc,
        FromDate,
        ToDate,
        InvoiceDate,
        projInvoiceProjId,
        projId,
        queryInvoiceType,
        projTransIdList,
        calledFromTrans
     #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignTables</Name>
				<Source><![CDATA[
    protected void assignTables()
    {
        super();

        if (queryOnAcc)
        {
            this.parmProjOnAccTrans(queryRun.get(tableNum(ProjOnAccTrans)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase  dialogRunbase = super();

        dialogRunbase.addGroup("@SYS90570");
        dialogInvoiceType = dialogRunbase.addFieldValue(enumStr(ProjInvoiceTypeSelection), queryInvoiceType, "@SYS78538", "@SYS78540");

        if (!this.parmCalledFromTrans())
        {
            dialogRunbase.addGroup("@SYS54242");
            dialogFromDate      = dialogRunbase.addFieldValue(extendedTypeStr(TransDate),fromDate,   "@SYS24050","@SYS90467");
            dialogToDate        = dialogRunbase.addFieldValue(extendedTypeStr(TransDate),toDate,     "@SYS80934","@SYS90468");
        }

        invoiceDate = (invoiceDate ? invoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (this.parmProjProposalJour())
        {
            invoiceDate = this.parmProjProposalJour().InvoiceDate;
        }

        dialogRunbase.addGroup("@SYS23410");
        dialogInvoiceDate = dialogRunbase.addFieldValue(extendedTypeStr(InvoiceDate), invoiceDate, "@SYS57610","@SYS90567");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;

        this.parmQueryOnAccTrans(true);

        this.parmQueryInvoiceType(dialogInvoiceType.value());

        if (this.parmCalledFromTrans())
        {
            this.getFromDialogMapTransId();
        }
        else
        {
            this.parmFromDate(dialogFromDate.value());
            this.parmToDate(dialogToDate.value());
        }

        this.parmInvoiceDate(dialogInvoiceDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        QueryBuildRange onAccTransDate;
        QueryBuildRange onAccCurrency;

        projInvoiceDataSource   = queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable));
        projTableDataSource     = queryRun.query().dataSourceTable(tableNum(ProjTable));

        if (queryOnAcc)
        {
            if (! onAccDataSource)
            {
                onAccDataSource = projTableDataSource.addDataSource(tableNum(ProjOnAccTrans));
                onAccDataSource.addLink(fieldNum(ProjTable,ProjId)     ,fieldNum(ProjOnAccTrans,ProjID));
            }

            if (! onAccSaleDataSource)
            {
                onAccSaleDataSource = onAccDataSource.addDataSource(tableNum(ProjOnAccTransSale));
                onAccSaleDataSource.relations(true);
                onAccSaleDataSource.joinMode(JoinMode::ExistsJoin);
            }

            onAccDataSource.addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(queryValue(ProjOrigin::Deduction)));

            this.addOnAccTransSaleRange(onAccSaleDataSource);

            if (fromDate || toDate)
            {
                if (! onAccTransDate)
                {
                    onAccTransDate    = onAccDataSource.addRange(fieldNum(ProjOnAccTrans,TransDate));
                }

                onAccTransDate.status(RangeStatus::Hidden);
                onAccTransDate.value(this.queryFromDate() + '..' + this.queryToDate());
            }

            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(onAccDataSource);
            }

            if (currencyId)
            {
                onAccCurrency  = onAccDataSource.addRange(fieldNum(ProjOnAccTrans,CurrencyId));
                onAccCurrency.value(queryValue(currencyId));
            }
        }
        else
        {
            if (onAccDataSource)
            {
                onAccDataSource.enabled(false);
            }

            if (onAccSaleDataSource)
            {
                onAccSaleDataSource.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalJour _projProposalJour = null)
    {
        projInvoiceType = ProjInvoiceType::OnAccount;

        super(_projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjInvoiceOnAcc));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object. If you change the return value to false, the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version         = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.parmInvoiceDate())
        {
            ret = checkFailed("@SYS33044");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS339984";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>