<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailGiftCardPrepaymentsPost_RU</c> class posts gift card prepayments and redemptions
/// </summary>
class RetailGiftCardPost_RU
{
    DataAreaId                  storeCompany;
    DataAreaId                  giftCardCompany;
    RetailParameters            giftCardCompanyRetailParameters;
    LedgerJournalName           giftCardJournalName;
    LedgerJournalTable          giftCardJournal;
    DimensionDefault            giftCardJournalDimension;
    Set                         processedGiftCards;
    DimensionDynamicAccount     giftCardCustomerDynamicAccount;
    PostingProfile              giftCardPostingProfile;
    PostingProfile              balancePostingProfile;
    PostingProfile              prepaymentPostingProfile;
    CustFactureAutoCreate_RU    prepaymentFactureAutoCreate;
    RetailParameters            retailParameters;
    Voucher                     jourLineVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustGiftCardPrepaymJourLineTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the prepayment gift card journal line tax amounts.
    /// </summary>
    /// <param name="_prepaymentJourTrans">
    /// THe gift card prepayment journal line.
    /// </param>
    /// <param name="_taxAmounts">
    /// The tax amounts.
    /// </param>
    /// <remarks>
    /// Used to set gift card prepaiment journal line tax amounts equal to calculated on fiscal printer.
    /// </remarks>
    private void adjustGiftCardPrepaymJourLineTaxAmounts(LedgerJournalTrans _prepaymentJourTrans, container _taxAmounts)
    {
        MapEnumerator taxAmountsMapEnumerator;

        if (_taxAmounts == conNull())
        {
            return;
        }

        taxAmountsMapEnumerator = Map::create(_taxAmounts).getEnumerator();

        while (taxAmountsMapEnumerator.moveNext())
        {
            if (!TaxUncommitted::existForTaxCodeAndDirection(
                    tableNum(LedgerJournalTrans),
                    _prepaymentJourTrans.RecId,
                    taxAmountsMapEnumerator.currentKey(),
                    TaxDirection::OutgoingTax))
            {
                throw error(strFmt("@SYS4007516", taxAmountsMapEnumerator.currentKey()));
            }

            TaxWorkRegulation::adjustTaxWorkRegulation(
                tableNum(LedgerJournalTrans),
                _prepaymentJourTrans.RecId,
                taxAmountsMapEnumerator.currentKey(),
                TaxDirection::OutgoingTax,
                taxAmountsMapEnumerator.currentValue());
        }

        //_prepaymentJourTrans.update() should be called to update taxUncommited with regulated tax amount.
        _prepaymentJourTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGiftCardJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the gift card journal.
    /// </summary>
    /// <returns>
    /// Created <c>LedgerJournalTable</c> record.
    /// </returns>
    private LedgerJournalTable createGiftCardJournal()
    {
        LedgerJournalTable jourTable;

        jourTable.JournalName = giftCardJournalName.JournalName;
        jourTable.JournalType = LedgerJournalType::CustPayment;
        jourTable.JournalNum = NumberSeq::newGetNum(LedgerParameters::numRefJournalNum()).num();
        jourTable.NumberSequenceTable = giftCardJournalName.NumberSequenceTable;
        jourTable.LedgerJournalInclTax = giftCardJournalName.LedgerJournalInclTax;

        if (giftCardJournalDimension && storeCompany == giftCardCompany)
        {
            jourTable.DefaultDimension = giftCardJournalDimension;
        }

        jourTable.initValue();
        jourTable.defaultRow();

        jourTable.insert();

        return jourTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGiftCardJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the gift card journal line.
    /// </summary>
    /// <param name="_accountCompany">
    /// The account company.
    /// </param>
    /// <param name="_accountType">
    /// The account type.
    /// </param>
    /// <param name="_accountNum">
    /// The account.
    /// </param>
    /// <param name="_currency">
    /// The currency.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_exchRate">
    /// The exchange rate.
    /// </param>
    /// <param name="_prepayment">
    /// The prepayment sign.
    /// </param>
    /// <param name="_postingProifle">
    /// The posting profile.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <param name="_mcrPaymentOrderId">
    /// Id of the order (sales order, free-text invoice, etc.) associated with payment.
    /// </param>
    /// <param name="_mcrPaymentRecId">
    /// Related payment recID.
    /// </param>
    /// <returns>
    /// Created <c>LedgerJournalTrans</c> record.
    /// </returns>
    private LedgerJournalTrans createGiftCardJournalLine(
                    DataAreaID              _accountCompany,
                    LedgerJournalACType     _accountType,
                    DimensionDynamicAccount _accountNum,
                    CurrencyCode            _currency,
                    AmountCur               _amount,
                    TransDate               _date,
                    ExchRate                _exchRate,
                    boolean                 _prepayment = false,
                    PostingProfile          _postingProifle = '',
                    DimensionDefault        _defaultDimension = 0,
                    MCRPaymOrderId          _mcrPaymentOrderId = '',
                    RefRecId                _mcrPaymentRecId = 0)
    {
        if (!giftCardJournal)
        {
            giftCardJournal = this.createGiftCardJournal();
        }

        LedgerJournalTrans jourLine;

        jourLine.JournalNum = giftCardJournal.JournalNum;
        jourLine.Company = _accountCompany;
        jourLine.AccountType = _accountType;
        jourLine.LedgerDimension = _accountNum;
        jourLine.OffsetAccountType = LedgerJournalACType::Ledger;

        if (_prepayment)
        {
            jourLine.TaxGroup = CustParameters::find().TaxGroup_RU;
            jourLine.TaxItemGroup = CustParameters::find().TaxItemGroup_RU;
            jourLine.CustFactureAutoCreate_RU = prepaymentFactureAutoCreate;
        }

        jourLine.CurrencyCode = _currency;

        if (_Amount < 0)
        {
            jourLine.AmountCurDebit = abs(_amount);
        }
        else
        {
            jourLine.AmountCurCredit = _amount;
        }

        jourLine.TransDate = _date;
        jourLine.ExchRate = _exchRate;
        jourLine.Prepayment = _prepayment;
        jourLine.PostingProfile = _postingProifle;
        jourLine.TransactionType = LedgerTransType::Payment;
        jourLine.DefaultDimension = _defaultDimension;
        jourLine.MCRPaymOrderId = _mcrPaymentOrderId;
        jourLine.MCRRefPaymID = _mcrPaymentRecId;

        jourLine.initValue();
        jourLine.defaultRow();

        jourLine.insert();

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGiftCardJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates gift card journal lines for the gift card operation (replenishment or redemption).
    /// </summary>
    /// <param name="_giftCardId">
    /// The gift card number.
    /// </param>
    /// <param name="_custAccount">
    /// The payment customer account.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_currencyCode">
    /// The payment currency code.
    /// </param>
    /// <param name="_amount">
    /// The payment amount.
    /// </param>
    /// <param name="_defaultDimension">
    /// The payment dimension.
    /// </param>
    /// <param name="_transTable">
    /// The retail transaction.
    /// </param>
    /// <param name="_taxAmounts">
    /// The tax amounts.
    /// </param>
    /// <param name="_paymentIsPrepayment">
    /// Process payment as prepayment.
    /// </param>
    /// <param name="_mcrPaymentOrderId">
    /// Id of the order (sales order, free-text invoice, etc.) associated with payment.
    /// </param>
    /// <param name="_mcrPaymentRecId">
    /// Related payment recID.
    /// </param>
    public void createGiftCardJournalLines(
        RetailGiftCardId        _giftCardId,
        CustAccount             _custAccount,
        TransDate               _transDate,
        CurrencyCode            _currencyCode,
        Amount                  _amount,
        DimensionDefault        _defaultDimension,
        RetailTransactionTable  _transTable = null,
        container               _taxAmounts = conNull(),
        boolean                 _paymentIsPrepayment = false,
        MCRPaymOrderId          _mcrPaymentOrderId = '',
        RefRecId                _mcrPaymentRecId = 0)
    {
        DimensionDynamicAccount         custDynamicAccount;
        CustTable                       custTable;
        LedgerJournalTrans              giftCardJourTrans;
        LedgerJournalTrans              balanceJourTrans;

        if (!_amount)
        {
            return;
        }

        custTable = CustTable::find(_custAccount);
        custDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(
            custTable.InvoiceAccount ? custTable.InvoiceAccount : custTable.AccountNum,
            LedgerJournalACType::Cust);

        changeCompany(giftCardCompany)
        {
            giftCardJourTrans = this.createGiftCardJournalLine(
                giftCardCompany,
                LedgerJournalACType::Cust,
                giftCardCustomerDynamicAccount,
                _currencyCode,
                _amount,
                _transDate,
                ExchangeRateHelper::exchRate(_currencyCode),
                _amount > 0,
                giftCardPostingProfile,
                _defaultDimension);

            balanceJourTrans = this.createGiftCardJournalLine(
                storeCompany,
                LedgerJournalACType::Cust,
                custDynamicAccount,
                _currencyCode,
                - _amount,
                _transDate,
                ExchangeRateHelper::exchRate(_currencyCode),
                _paymentIsPrepayment && _amount <= 0,
                _paymentIsPrepayment ? prepaymentPostingProfile : balancePostingProfile,
                _defaultDimension,
                _mcrPaymentOrderId,
                _mcrPaymentRecId);

            jourLineVoucher = balanceJourTrans.Voucher;

            this.adjustGiftCardPrepaymJourLineTaxAmounts(giftCardJourTrans, _taxAmounts);
            RetailGiftCardPayment_RU::addGiftCardPayment(giftCardJourTrans.RecId, _giftCardId, _transTable);
            processedGiftCards.add(_giftCardId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushLedgerJournalTransCache</Name>
				<Source><![CDATA[
    private void flushLedgerJournalTransCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>giftCardJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gift card journal.
    /// </summary>
    /// <returns>
    /// The gift card journal <c>LedgerJournalTable</c> record.
    /// </returns>
    public LedgerJournalTable giftCardJournal()
    {
        return giftCardJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        CustParameters custParametersCurCompany = CustParameters::find();

        retailParameters = RetailParameters::find();

        this.flushLedgerJournalTransCache();

        processedGiftCards    = new Set(Types::String);
        storeCompany          = curext();
        balancePostingProfile = custParametersCurCompany.PostingProfile;
        prepaymentPostingProfile = custParametersCurCompany.PrepaymentPostingProfile;
        giftCardCompany       = retailParameters.GiftCardCompany ? retailParameters.GiftCardCompany : curext();

        if (! xDataArea::exist(giftCardCompany))
            throw error(strFmt("@SYS10666", giftCardCompany));

        changeCompany(giftCardCompany)
        {
            giftCardCompanyRetailParameters = RetailParameters::find();
            giftCardJournalName             = LedgerJournalName::find(giftCardCompanyRetailParameters.DefaultCustPaymentJournalName_RU);

            if (!giftCardJournalName)
                throw error(strFmt("@SYS4002028", "@SYS4002020"));

            if (giftCardJournalName.NewVoucher != NewVoucher::BalanceSheet)
                throw error("@SYS4007521");

            if (!giftCardCompanyRetailParameters.GiftCardPrepaymentCustAccount_RU)
                throw error("@SYS4009654");

            giftCardCustomerDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(
                giftCardCompanyRetailParameters.GiftCardPrepaymentCustAccount_RU,
                LedgerJournalACType::Cust);

            giftCardPostingProfile          = giftCardCompanyRetailParameters.GiftCardPrepaymentPostingProfile_RU ?
                giftCardCompanyRetailParameters.GiftCardPrepaymentPostingProfile_RU :
                CustParameters::find().PrepaymentPostingProfile;

            prepaymentFactureAutoCreate     = CustParameters::find().PrepaymentFactureAutoCreate_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourLineVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets voucher of the created gift card journal line.
    /// </summary>
    /// <returns>
    /// Voucher of the created gift card journal line.
    /// </returns>
    public Voucher jourLineVoucher()
    {
        return jourLineVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiftCardJournalDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmGiftCardJournalDimension(DimensionDefault _giftCardJournalDimension = giftCardJournalDimension)
    {
        giftCardJournalDimension = _giftCardJournalDimension;
        return giftCardJournalDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        this.postGiftCardJournal();
        this.settleGiftCardCustomerTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGiftCardJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the gift card journal.
    /// </summary>
    private void postGiftCardJournal()
    {
        if (!giftCardJournal)
        {
            return;
        }

        changeCompany(giftCardCompany)
        {
            LedgerJournalPost::postJournal(giftCardJournal, NoYes::No, false, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleGiftCardCustomerTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settle prepayment customer transactions related to gift card payments with prepayment customer transactions
    /// related to gift card issue / replenishment / refund prepayments
    /// </summary>
    private void settleGiftCardCustomerTransactions()
    {
        CustTable                       giftCardCustomer;
        SetEnumerator                   se = processedGiftCards.getEnumerator();

        void markGiftCardOpenCustomerTransactions(SpecTransManager _specTransManager, RetailGiftCardId _giftCardId, CustAccount _accountNum)
        {
            CustTrans                       custTransLoc;
            CustTransOpen                   custTransOpenLoc;
            RetailGiftCardPayment_RU        giftCardPaymentLoc;

            while select AmountCur, RecId from custTransOpenLoc
                join currencyCode from custTransLoc
                    where custTransLoc.RecId      == custTransOpenLoc.RefRecId  &&
                          custTransLoc.AccountNum == _accountNum
                    exists join TableId from giftCardPaymentLoc
                        where giftCardPaymentLoc.CustTrans  == custTransLoc.RecId &&
                              giftCardPaymentLoc.GiftCardId == _giftCardId
            {
                _specTransManager.insert(custTransOpenLoc.company(), custTransOpenLoc.TableId, custTransOpenLoc.RecId, custTransOpenLoc.AmountCur, custTransLoc.CurrencyCode);
            }
        }

        if (!processedGiftCards.elements())
        {
            return;
        }

        changeCompany(giftCardCompany)
        {
            giftCardCustomer = CustTable::find(giftCardCompanyRetailParameters.GiftCardPrepaymentCustAccount_RU);

            while (se.moveNext())
            {
                SpecTransExecutionContext specTransExecutionContext = SpecTransExecutionContext::newFromSource(giftCardCustomer);
                SpecTransManager specTransManager = SpecTransManager::newFromSpec(specTransExecutionContext.parmSpecContext());

                // This shouldn't be neccesary, but is being kept for backwards compatability
                specTransManager.deleteAll();

                markGiftCardOpenCustomerTransactions(specTransManager, se.current(), giftCardCustomer.AccountNum);
                CustTrans::settleTransaction(specTransExecutionContext, CustTransSettleTransactionParameters::construct());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailGiftCardPrepaymentPost_RU</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>RetailGiftCardPrepaymentPost_RU</c> class.
    /// </returns>
    public static RetailGiftCardPost_RU construct()
    {
        return new RetailGiftCardPost_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRetailStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailGiftCardPost_RU</c> class for the retail statement posting.
    /// </summary>
    /// <param name="_retailStatement">
    /// The <c>RetailStatementTable</c> retail statement record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>RetailGiftCardPost_RU</c> class.
    /// </returns>
    public static RetailGiftCardPost_RU newFromRetailStatement(RetailStatementTable _retailStatement)
    {
        RetailGiftCardPost_RU retailGiftCardPost;

        retailGiftCardPost = RetailGiftCardPost_RU::construct();
        retailGiftCardPost.parmGiftCardJournalDimension(_retailStatement.DefaultDimension);

        return retailGiftCardPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>