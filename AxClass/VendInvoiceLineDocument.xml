<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceLineDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendInvoiceLineDocument</c> class is the workflow document class for the
///    <c>VendInvoiceInfoLine</c> table.
/// </summary>
/// <remarks>
///    This class is required in order to provide a unique workflow document for vendor invoice lines.
/// </remarks>
[WorkflowDocIsQueueEnabledAttribute(true, "@SYS313555"),
ExpressionHierarchyProviderAttribute(classStr(PurchReqExpressionProvider), tableStr(VendInvoiceInfoLine), fieldStr(VendInvoiceInfoLine,ProcurementCategory))]
class VendInvoiceLineDocument extends WorkflowDocument
{
    VendInvoiceInfoLine vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMatchStatus</Name>
				<Source><![CDATA[
    private NoYes checkMatchStatus(LastMatchVarianceOptions _matchStatus)
    {
        NoYes passFail = NoYes::No;

        if (_matchStatus == LastMatchVarianceOptions::Unknown || _matchStatus == LastMatchVarianceOptions::OK)
        {
            passFail = NoYes::Yes;
        }

        return passFail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the query to use for the document.
    /// </summary>
    /// <returns>
    ///    The name of the query to use for the document.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(VendInvoiceLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    private VendInvoiceInfoLine getVendInvoiceInfoLine(RecId _recId)
    {
        if (!vendInvoiceInfoLine)
        {
            vendInvoiceInfoLine.clear();
            vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_recId);
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable getVendInvoiceInfoTable(RecId _lineRecId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;

        select * from vendInvoiceInfoTable
            exists join vendInvoiceInfoLineLocal
                where vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLineLocal.TableRefId
                    && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLineLocal.ParmId
                    && vendInvoiceInfoLineLocal.RecId == _lineRecId;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetSourceCheckResult</c> value for the vendor invoice line workflow instance.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceCheckResult</c> value.
    /// </returns>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        BudgetSourceCheckResult budgetSourceCheckResult;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            this.getVendInvoiceInfoLine(_recId);

            if (vendInvoiceInfoLine)
            {
                budgetSourceCheckResult = vendInvoiceInfoLine.getBudgetCheckResult();
            }
        }

        return budgetSourceCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckIfLineHasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor invoice header has attachments or not.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// True if the vendor invoice header has an attachment; otherwise, false.
    /// </returns>
    public VendInvoiceHasAttachment parmCheckIfLineHasAttachments(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        VendInvoiceHasAttachment hasAttachments;

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            this.getVendInvoiceInfoLine(_recId);

            if (vendInvoiceInfoLine)
            {
                hasAttachments = vendInvoiceInfoLine.checkIfLineHasAttachments();
            }
        }

        return hasAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateExtendedPrice</Name>
				<Source><![CDATA[
    public VendInvoiceValidateExtendedPrice parmValidateExtendedPrice(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.getVendInvoiceInfoLine(_recId);
        VendInvoiceInfoTable vendInvoiceInfoTable = this.getVendInvoiceInfoTable(_recId);

        return this.checkMatchStatus(vendInvoiceInfoLine.extendedPriceVarianceStatus(vendInvoiceInfoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidatePriceMatch</Name>
				<Source><![CDATA[
    public VendInvoiceValidatePriceMatch parmValidatePriceMatch(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.getVendInvoiceInfoLine(_recId);

        return this.checkMatchStatus(vendInvoiceInfoLine.priceVarianceStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateQuantityMatch</Name>
				<Source><![CDATA[
    public VendInvoiceValidateQuantityMatch parmValidateQuantityMatch(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        this.getVendInvoiceInfoLine(_recId);

        return this.checkMatchStatus(vendInvoiceInfoLine.checkIfQuantityMatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceLineDocument construct()
    {
        return new VendInvoiceLineDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoesVendorInvoiceLineReferenceBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified vendor invoice line references a budget reservation.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the vendor invoice line table.
    /// </param>
    /// <param name="_vendInvoiceInfoLinetableId">
    /// The table ID that corresponds to the vendor invoice line table.
    /// </param>
    /// <param name="_vendInvoiceInfoLineRecId">
    /// The record ID that corresponds to the vendor invoice line table record.
    /// </param>
    /// <returns>
    /// Yes if the current document references a budget reservation; otherwise, no.
    /// </returns>
    public BudgetReservationReferenced_PSN parmDoesVendorInvoiceLineReferenceBudgetReservation(CompanyId _companyId, TableId _vendInvoiceInfoLinetableId, VendInvoiceInfoLineRefRecId _vendInvoiceInfoLineRecId)
    {
        BudgetReservationReferenced_PSN isBudgetReservationReferenced;

        if (_vendInvoiceInfoLinetableId != tableNum(VendInvoiceInfoLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            if (VendInvoiceInfoLine::findRecId(_vendInvoiceInfoLineRecId).BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
            {
                isBudgetReservationReferenced = NoYes::Yes;
            }
            else
            {
                isBudgetReservationReferenced = NoYes::No;
            }
        }

        return isBudgetReservationReferenced;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>