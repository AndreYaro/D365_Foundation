<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_Vacation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_Vacation extends RPayCalculate
{
    RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
    RPayAverageEarnValue           rPayAverageEarnValue;
    RPayDayHour                    payDayHour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_OtherCurrent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_OtherCurrent()
    {
        RPayAmount           amount;
        RPayAverageEarnValue rPayAverageEarnValueLocal;
        ;
        switch (sourceTable.TableId)
        {
            case tableNum(RPayAverageEarnValue):
                if (endmth(rPayAverageEarnValue.PayPeriod) <= endmth(payPeriod) &&
                   rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund)
                {
                    amount = rPayAverageEarnValue.Amount;
                }
                break;

            case tableNum(RPayAverageEarnEmplPeriodTable):
                select sum(Amount) from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable .RecId &&
                          rPayAverageEarnValueLocal.PayPeriod                  <= endmth(payPeriod)                     &&
                          rPayAverageEarnValueLocal.PayAverageSourceType       == RPayAverageSourceType::OtherFund;

                amount = rPayAverageEarnValueLocal.Amount;
                break;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_OtherNext</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_OtherNext()
    {
        RPayAmount           amount;
        RPayAverageEarnValue rPayAverageEarnValueLocal;
        ;
        switch (sourceTable.TableId)
        {
            case tableNum(RPayAverageEarnValue):
                if (endmth(rPayAverageEarnValue.PayPeriod) > endmth(payPeriod) &&
                   rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::OtherFund)
                {
                    amount = rPayAverageEarnValue.Amount;
                }
                break;

            case tableNum(RPayAverageEarnEmplPeriodTable):
                select sum(Amount) from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable .RecId &&
                          rPayAverageEarnValueLocal.PayPeriod                  >   endmth(payPeriod)                     &&
                          rPayAverageEarnValueLocal.PayAverageSourceType       == RPayAverageSourceType::OtherFund;

                amount = rPayAverageEarnValueLocal.Amount;
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_PaymentCurrent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_PaymentCurrent()
    {
        RPayAmount           amount;
        RPayAverageEarnValue rPayAverageEarnValueLocal;
        ;
        switch (sourceTable.TableId)
        {
            case tableNum(RPayAverageEarnValue):
                if (endmth(rPayAverageEarnValue.PayPeriod) <= endmth(payPeriod) &&
                   rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund)
                {
                    amount = rPayAverageEarnValue.Amount;
                }
                break;

            case tableNum(RPayAverageEarnEmplPeriodTable):
                select sum(Amount) from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable .RecId &&
                          rPayAverageEarnValueLocal.PayPeriod                  <= endmth(payPeriod)                     &&
                          rPayAverageEarnValueLocal.PayAverageSourceType       == RPayAverageSourceType::PaymentFund;

                amount = rPayAverageEarnValueLocal.Amount;
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_PaymentNext</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_PaymentNext()
    {
        RPayAmount           amount;
        RPayAverageEarnValue rPayAverageEarnValueLocal;
        ;
        switch (sourceTable.TableId)
        {
            case tableNum(RPayAverageEarnValue):
                if (endmth(rPayAverageEarnValue.PayPeriod) > endmth(payPeriod) &&
                   rPayAverageEarnValue.PayAverageSourceType == RPayAverageSourceType::PaymentFund)
                {
                    amount = rPayAverageEarnValue.Amount;
                }
                break;

            case tableNum(RPayAverageEarnEmplPeriodTable):
                select sum(Amount) from rPayAverageEarnValueLocal
                    where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable .RecId &&
                          rPayAverageEarnValueLocal.PayPeriod                  > endmth(payPeriod)                      &&
                          rPayAverageEarnValueLocal.PayAverageSourceType       == RPayAverageSourceType::PaymentFund;

                amount = rPayAverageEarnValueLocal.Amount;
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_VacationSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_VacationSum()
    {
        RPayAverageEarnValue rPayAverageEarnValueLocal;
        ;
        select sum(Amount) from rPayAverageEarnValueLocal
            where rPayAverageEarnValueLocal.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId;
        return rPayAverageEarnValueLocal.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    protected void calcCommon(RPaySequence _paySequence  = 0,
                              NoYes        _errorMessage = NoYes::No)
    {
        RHRMVacationType                hrmVacationType;
        RPaySequence                    addSequence;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        ;

        rPayAverageEarnEmplPeriodTable = sourceTable;

        if (needCheckModuleCalculate &&
           ! this.canModuleCalculate())
        {
            throw info("@RUP387");
        }

        this.checkPostingProfiles(true);

        if (emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage))
        {
            this.initTransDate(emplTable.EmployeeId);

            if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation)
            {
                select firstonly paySeqTable
                    where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode &&
                          (paySeqTable.Scanning     == _paySequence                 ||
                          (_paySequence ? false : true))
                exists join hrmVacationType
                    where hrmVacationType.VacationTypeId             == rPayAverageEarnEmplPeriodTable.VacationTypeId                    &&
                         ((hrmVacationType.CompensationPaySequence   && hrmVacationType.CompensationPaySequence == paySeqTable.Scanning) ||
                          (! hrmVacationType.CompensationPaySequence && hrmVacationType.PaySequence             == paySeqTable.Scanning));
            }
            else
            {
                select firstonly paySeqTable
                    where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode &&
                          (paySeqTable.Scanning     == _paySequence                 ||
                          (_paySequence ? false : true))
                exists join hrmVacationType
                    where hrmVacationType.VacationTypeId == rPayAverageEarnEmplPeriodTable.VacationTypeId &&
                          hrmVacationType.PaySequence    == paySeqTable.Scanning;
            }

            while select rPayAverageEarnValue
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId
            {
                sourceTable = rPayAverageEarnValue;
                this.calcSequence();
            }

            addSequence =  RPayAverageEarnParameters::find().PayVacationAddSeq;
            if (addSequence)
            {
                sourceTable = rPayAverageEarnEmplPeriodTable;
                paySeqTable = RPaySeqTable::find(addSequence);
                this.calcSequence();
            }
            if ( rPayAverageEarnEmplPeriodTable.SumOnHandBlocked == NoYes::No )
            {
                select sum(Amount) from payTrans
                    where payTrans.SourceTableId == rPayAverageEarnEmplPeriodTable.TableId &&
                          payTrans.SourceRecId   == rPayAverageEarnEmplPeriodTable.RecId;

                ttsbegin;

                averageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::findRecId(rPayAverageEarnEmplPeriodTable.RecId, true);
                rPayAverageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::findRecId(rPayAverageEarnEmplPeriodTable.RecId);
                averageEarnEmplPeriodTable.SumOnHand = payTrans.Amount + this.calc_VacationSum();
                averageEarnEmplPeriodTable.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId   _emplId,
                         RPaySequence _paySequence=0)
    {
        QueryBuildDataSource           qbd;
        QueryBuildRange                qbr;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTableLocal;
        int                            i;
        int                            dsCount = queryRun.query().dataSourceCount();
        ;
        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(_emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans where payTrans.PayPeriod     == payPeriod                    &&
                                       payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                                       payTrans.Emplid        == _emplId                      &&
                                       payTrans.SourceTableId && payTrans.SourceRecId         &&
                                       payTrans.PayPeriod     == payTrans.CorrectedPeriod;

            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
            queryRun.query().dataSourceNo(i).clearRanges();
        }

        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
        qbr.value(queryValue(payPeriod));

        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,CorrectedPeriod));
        qbr.value(queryValue(payPeriod));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,EmplId));
        qbr.value(queryValue(_emplId));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        qbr.value(queryValue(RPayAverageEarnCodeType::Vacation));

        while (queryRun.next())
        {
            rPayAverageEarnEmplPeriodTableLocal = queryRun.get(tableNum(RPayAverageEarnEmplPeriodTable));
            if (rPayAverageEarnEmplPeriodTableLocal.EmplId)
            {
                this.setSourceTable(rPayAverageEarnEmplPeriodTableLocal);
                this.calcCommon(_paySequence,NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbrPeriod,
                             qbrSost,
                             qbrCodeType,
                             qbrCorrectedPeriod;
        int                  current;
        int                  dsCount = queryRun.query().dataSourceCount();
        ;
        qbd = queryRun.query().dataSourceTable(tableNum(RPayAverageEarnEmplPeriodTable));
        if (queryRun.interactive())
        {
             qbrPeriod   = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
             qbrPeriod.status(RangeStatus::Locked);
             qbrSost     = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
             qbrSost.status(RangeStatus::Locked);
             qbrCodeType = qbd.rangeField(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
             qbrCodeType.status(RangeStatus::Hidden);
        }
        else
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
            current = 0;
            qbrPeriod   = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod));
            qbrSost     = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,Included));
            qbrCodeType = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType));
        }

        qbrCorrectedPeriod = qbd.addRange(fieldNum(RPayAverageEarnEmplPeriodTable,CorrectedPeriod));
        qbrCorrectedPeriod.status(RangeStatus::Hidden);
        qbrCorrectedPeriod.value(strFmt("(%1 == %2)", fieldId2name(tableNum(RPayAverageEarnEmplPeriodTable), fieldNum(RPayAverageEarnEmplPeriodTable,CorrectedPeriod)),
                                                      fieldId2name(tableNum(RPayAverageEarnEmplPeriodTable), fieldNum(RPayAverageEarnEmplPeriodTable,PayPeriod))));

        qbrPeriod.value(queryValue(payPeriod));
        qbrSost.value(queryValue(NoYes::Yes));
        qbrCodeType.value(queryValue(RPayAverageEarnCodeType::Vacation));

        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSplittedAdditionalSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RPayAmount calcSplittedAdditionalSum()
    {
        RPayAmount                      sourceAmount,
                                        retAmount,
                                        sourceVacationAmount,
                                        thisVacationAmount,
                                        prevBreakingAmount;
        RPayTrans                       rPayTrans;
        RPayAverageEarnEmplPeriodTable  sourceVacation, prevBreakingVacation;
        TransLink_RU                    transLink;
        RPayAverageEarnValue            averageEarnValue;
        Days                            prevBreakingDays;

        select firstonly DayNumber, AverageEarnCodeType, rPayAverageEarnCode, EmplId, StartDate, RecId, TableId from sourceVacation
            where sourceVacation.AverageEarnCodeType == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType &&
                  sourceVacation.rPayAverageEarnCode == rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode &&
                  sourceVacation.EmplId              == rPayAverageEarnEmplPeriodTable.EmplId &&
                  sourceVacation.StartDate           == rPayAverageEarnEmplPeriodTable.PrevVacationStartDate &&
                  sourceVacation.VacationRecordType  == RPayVacationRecordType::Vacation
            #transLinkNotExistsReversed_RU(transLink, sourceVacation);

        if (sourceVacation)
        {
            select sum(Amount) from rPayTrans
                where rPayTrans.SourceTableId == sourceVacation.TableId &&
                      rPayTrans.SourceRecId   == sourceVacation.RecId &&
                      rPayTrans.Scanning      == paySeqTable.Scanning;

            sourceAmount = rPayTrans.Amount;

            select sum(Amount) from averageEarnValue
                where averageEarnValue.AverageEarnEmplPeriodRecid == sourceVacation.RecId;

            sourceVacationAmount = averageEarnValue.Amount;

            while select DayNumber, TableId, RecId from prevBreakingVacation
                where prevBreakingVacation.AverageEarnCodeType   == sourceVacation.AverageEarnCodeType &&
                      prevBreakingVacation.rPayAverageEarnCode   == sourceVacation.rPayAverageEarnCode &&
                      prevBreakingVacation.EmplId                == sourceVacation.EmplId &&
                      prevBreakingVacation.PrevVacationStartDate == sourceVacation.StartDate &&
                      prevBreakingVacation.VacationRecordType    == RPayVacationRecordType::VacationBreaking &&
                      prevBreakingVacation.StartDate             <  rPayAverageEarnEmplPeriodTable.StartDate
                #transLinkNotExistsReversed_RU(transLink, prevBreakingVacation)
            {
                prevBreakingDays += prevBreakingVacation.DayNumber;

                while select Amount from rPayTrans
                    where rPayTrans.SourceTableId == prevBreakingVacation.TableId &&
                          rPayTrans.SourceRecId   == prevBreakingVacation.RecId &&
                          rPayTrans.Scanning      == paySeqTable.Scanning
                {
                    prevBreakingAmount += CurrencyExchangeHelper::amount(rPayTrans.Amount);
                }
            }

            select sum(Amount) from averageEarnValue
                where averageEarnValue.AverageEarnEmplPeriodRecid == rPayAverageEarnEmplPeriodTable.RecId;

            thisVacationAmount = averageEarnValue.Amount;

            if (prevBreakingDays + rPayAverageEarnEmplPeriodTable.DayNumber < sourceVacation.DayNumber)
            {
                if (sourceVacationAmount)
                {
                    retAmount = thisVacationAmount * sourceAmount / sourceVacationAmount;
                }
            }
            else
            {
                retAmount = (- sourceAmount) - prevBreakingAmount;
            }
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue()
    {
        ;
        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        if (sourceTable.TableId == rPayAverageEarnEmplPeriodTable.TableId &&
            rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationBreaking)
        {
            sumCounter = this.round(this.calcSplittedAdditionalSum());
        }

        super();

        if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Day)
            payTrans.QtyDay  = rPayAverageEarnValue.PayDayHour;
        else
            payTrans.QtyHour = rPayAverageEarnValue.PayDayHour;

        if (sourceTable.TableId == tableNum(RPayAverageEarnValue))
            payTrans.SourceDate = rPayAverageEarnValue.PayPeriod;
        else
            payTrans.SourceDate = payPeriod;

        payTrans.CorrectedPeriod = rPayAverageEarnEmplPeriodTable.CorrectedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        emplTable = RHRMEmplTable::find(_common.(fieldNum(RPayAverageEarnEmplPeriodTable,EmplId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateStart</Name>
				<Source><![CDATA[
    protected TransDate transDateStart(TransDate _transDate = transDate)
    {
        TransDate ret;
        ;

        transDate = rPayAverageEarnEmplPeriodTable.StartDate;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
