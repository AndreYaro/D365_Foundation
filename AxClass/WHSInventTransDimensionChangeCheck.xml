<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransDimensionChangeCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to perform checks when the dimensions on an inventory transactions changes.
/// </summary>
public class WHSInventTransDimensionChangeCheck
{
    private InventTrans     inventTrans;
    private InventDim       toInventDim;
    private boolean         skipOnHandCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInventStatusChange</Name>
				<Source><![CDATA[
    private boolean checkInventStatusChange(InventDim _fromInventDim, InventDim _toInventDim)
    {
        if (_fromInventDim.InventStatusId == _toInventDim.InventStatusId)
        {
            return true;
        }
        
        return (WHSInventStatus::isBlockingStatus(_fromInventDim.InventStatusId) == WHSInventStatus::isBlockingStatus(toInventDim.InventStatusId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnHandChange</Name>
				<Source><![CDATA[
    private boolean checkOnHandChange(
        InventTable _inventTable,
        InventDim   _fromInventDim)
    {
        return WHSInventOnHandDimensionChangeCheck::newCheckWithCatchWeight(_inventTable, _fromInventDim, toInventDim, -inventTrans.Qty, -inventTrans.PdsCWQty).check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the dimensions change can be done.
    /// </summary>
    /// <returns>true if the check passes; otherwise, false.</returns>
    public boolean check()
    {
        boolean ret = true;

        InventTable inventTable = inventTrans.inventTable();

        if (!InventModelGroup::find(inventTable.modelGroupId()).NegativePhysical)
        {
            ttsbegin;

            InventDim fromInventDim = inventTrans.inventDim();

            if (!this.checkInventStatusChange(fromInventDim, toInventDim))
            {
                ret = checkFailed("@WAX3351");
            }
            else if (!this.skipOnHandCheck)
            {
                ret = this.checkOnHandChange(inventTable, fromInventDim);
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInventTransDimensionChangeCheck construct()
    {
        return new WHSInventTransDimensionChangeCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// A new instance of the class.
    /// </summary>
    /// <param name = "_inventTrans">The transaction to check.</param>
    /// <param name = "_toInventDim">The new dimension.</param>
    /// <param name = "_skipOnHandCheck">A boolean determining if the on-hand check should be skipped.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSInventTransDimensionChangeCheck newCheck(
        InventTrans _inventTrans,
        InventDim   _toInventDim, 
        boolean     _skipOnHandCheck)
    {
        WHSInventTransDimensionChangeCheck check = WHSInventTransDimensionChangeCheck::construct();

        check.inventTrans = _inventTrans;
        check.toInventDim = _toInventDim;
        check.skipOnHandCheck = _skipOnHandCheck;

        return check;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>