<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageQuantityCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is responsible for running headcount calculation.
/// </summary>
class RPayAverageQuantityCount extends RunBaseBatch implements BatchRetryable
{
    ReportPeriod_RU         startPeriod, endPeriod;
    ReportPeriod_RU         reportPeriod;
    boolean                     byBranches;
    boolean                 writeLog;
    Filename                logFileName;

    DialogField             dialogStartPeriod, dialogEndPeriod, dialogReportPeriod;
    DialogField             dialogByBranches;
    DialogField             dialogWriteLog, dialogFileName;

    Query                   query;
    QueryRun                queryRun;

    SysOperationProgress    sysOperationProgress;

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        startPeriod,
        endPeriod,
        reportPeriod,
        writeLog,
        logFileName,
        byBranches
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS14598");
        dialogStartPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), startPeriod, "@GLS106049");
        dialogEndPeriod   = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), endPeriod,   "@GLS106050");
        dialogReportPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), reportPeriod,   "@SYS59333");

        dialog.addGroup("@GLS110796");
        dialogWriteLog = dialog.addFieldValue(enumStr(NoYes), writeLog, "@GLS110797");
        dialogFileName = dialog.addFieldValue(extendedTypeStr(FileName), logFileName);
        dialogByBranches = dialog.addFieldValue(enumStr(NoYes), byBranches, "@RUP3471", "@SYP4881292");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            startPeriod = endmth(dialogStartPeriod.value());
            endPeriod   = endmth(dialogEndPeriod.value());
            reportPeriod = dialogReportPeriod.value() ? endmth(dialogReportPeriod.value()) : endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            writeLog    = dialogWriteLog.value();
            logFileName = dialogFileName.value();
            byBranches  = dialogByBranches.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        QueryBuildDataSource    qbds;

        query = new Query();

        qbds = query.addDataSource(tablenum(RPayGroupTable));
        findOrCreateRange_W(qbds, fieldnum(RPayGroupTable, PayGroup));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ReportPeriod_RU currentPeriod;
        int             mthCount;

        for (currentPeriod = startPeriod; currentPeriod <= endPeriod; currentPeriod = endmth(nextmth(currentPeriod)))
        {
            mthCount ++;
        }

        sysOperationProgress = SysOperationProgress::newGeneral(#AviUpdate, "@RUP2182", SysQuery::countTotal(queryRun) * mthCount);

        for (currentPeriod = startPeriod; currentPeriod <= endPeriod; currentPeriod = endmth(nextmth(currentPeriod)))
        {
            sysOperationProgress.setText(strfmt("@SYS191501", "@SYS11451", mthname(mthofyr(currentPeriod))));
            this.runPeriod(currentPeriod, reportPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs headcount calculation for specified calculation period.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calculation period.
    /// </param>
    /// <param name="_reportPeriod">
    /// Reporting period.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void runPeriod(ReportPeriod_RU _payPeriod, ReportPeriod_RU _reportPeriod)
    {
        RPayAverageQuantityCountGroup   averageQuantityCountGroup;
        RPayGroupTable                  rPayGroupTable;
        RPayAverageQty                  averageQty;
        RPayAverageQuantity             rPayAverageQuantity;

        ttsbegin;

        queryRun.reset();
        while (queryRun.next())
        {
            sysOperationProgress.incCount(1);
            rPayGroupTable      = queryRun.get(tablenum(RPayGroupTable));
            rPayAverageQuantity = RPayAverageQuantity::find(rPayGroupTable.PayGroup, _payPeriod);

            if (rPayAverageQuantity)
            {
                info(strfmt("@GLS110800", _payPeriod, rPayGroupTable.PayGroup));
            }
            else
            {
                averageQuantityCountGroup = RPayAverageQuantityCountGroup::constructAverageQuantityCountGroup(
                    _payPeriod,
                    rPayGroupTable.PayGroup,
                    _reportPeriod,
                    byBranches);

                if (writeLog)
                {
                    averageQuantityCountGroup.createLogFile(logFileName);
                }

                averageQty = averageQuantityCountGroup.countQuantity();

                rPayAverageQuantity.clear();
                rPayAverageQuantity.PayGroup     = rPayGroupTable.PayGroup;
                rPayAverageQuantity.PayPeriod    = _payPeriod;
                rPayAverageQuantity.AverageQty   = averageQty;
                rPayAverageQuantity.ReportPeriod = _reportPeriod;
                rPayAverageQuantity.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);
        container   conQueryRun;

        switch (version)
        {
            case #CurrentVersion:

                [version, #CurrentList, conQueryRun] = packedClass;
                queryRun = new QueryRun(conQueryRun);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS110798";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayAverageQuantityCount    rPayAverageQuantityCount = new RPayAverageQuantityCount();

        if (rPayAverageQuantityCount.prompt())
        {
            rPayAverageQuantityCount.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! dialogStartPeriod.value())
            {
                ret = checkFailed("@RUP881");
            }

            if (! dialogEndPeriod.value())
            {
                ret = checkFailed("@RUP882");
            }

            if (endmth(dialogStartPeriod.value()) > endmth(dialogEndPeriod.value()))
            {
                ret = checkFailed("@RUP883");
            }

            if (dialogWriteLog.value() && ! dialogFileName.value())
            {
                ret = checkFailed("@SYS26757");
            }

            if (! RPayTblParameters::find().PresenseTimeGroupCode)
            {
                ret = checkFailed(strfmt("@GLS110801", "@RUP2180", "@RUP414"));
            }

            if ((dialogReportPeriod.value() != dateNull() && endmth(dialogReportPeriod.value()) < endmth(dialogEndPeriod.value())) ||
                (dialogReportPeriod.value() == dateNull() && endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) < endmth(dialogEndPeriod.value())))
            {
                ret = checkFailed(strfmt("@SYP4881291", "@SYS59333", "@GLS106050"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>