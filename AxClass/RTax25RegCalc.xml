<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc extends RunBaseBatch implements BatchRetryable
{
    FromDate                    dateFrom;
    ToDate                      dateTo;

    RTax25RegisterJournalTrans  registerJournalTrans;
    RTax25RegisterId            registerId;
    RTax25RegisterType          registerType;

    RTax25Query                 regQuery;
    RTax25RegType               regType;

    RefRecId                    journalTransRecId;
    Set                         periodSet;
    Batch                       batch;

    RTax25PeriodIterator        rTax25PeriodIterator;
    PreferredLocale             preferredLocale;

    protected const Version     currentVersion = 2;
    protected const date        AmountDiffCancelDate = 01\01\2015;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calc()
    {
        this.preCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = super();
        if (ret == "" && this.regType())
        {
            ret = this.regType().getRegisterTypeStr();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean check()
    {
        boolean ret = true;

        ret = this.checkParameters();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkParameters()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFrom</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate dateFrom(TransDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate dateTo(TransDate _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void delete()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hiddenFields</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public container hiddenFields()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        registerJournalTrans = _registerJournalTrans;
        batch                = _batch;

        if (batch)
        {
            this.parmInBatch(true);
            this.parmCurrentBatch(batch);
        }

        journalTransRecId    = registerJournalTrans.RecId;
        dateFrom        = registerJournalTrans.fromDate();
        dateTo          = registerJournalTrans.toDate();
        periodSet            = new Set(Types::Date);

        if (_registerJournalTrans)
        {
            registerId      = registerJournalTrans.RegisterId;
            registerType    = RTax25RegisterTable::registerId2Type(registerId);
            rTax25PeriodIterator = RTax25PeriodFactory::createIteratorJournal(
                _registerJournalTrans.registerJournalTable());
        }
        else
        {
            registerId = RTax25RegisterTable::registerType2Id(registerType);
        }

        regType         = RTax25RegType::construct(registerType, registerJournalTrans.AssessedTaxRegisterType);
        regQuery        = RTax25Query::newParameters(registerType, registerJournalTrans, true);
        preferredLocale = new Session().preferredLocale();

        this.saveLast();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, journalTransRecId, batch];
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalc</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void preCalc()
    {
        if (! this.check())
            throw error("@GLS104171");

        regQuery.deleteRecords();

        registerJournalTrans.Status = RTax25RegisterStatus::Calculating;
        registerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    public void progressInit(str              _caption,
                             int64            _total,
                             Filename         _animation = #AviUpdate,
                             int              _numOfBars = 1,
                             FormBuildControl embedded = null)
    {
        str localCaption = _caption ? _caption : this.caption();
        super(localCaption,_total,_animation,_numOfBars,embedded);
        progress.setCount(0, _numOfBars);
    }

]]></Source>
			</Method>
			<Method>
				<Name>regType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegType regType()
    {
        return regType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
public void run()
    {
        RTax25RegCalcController rTax25RegCalcController = new RTax25RegCalcController();
        super();
        select firstonly registerJournalTrans
            where registerJournalTrans.RecId == journalTransRecId;
        if (registerJournalTrans.RecId)
        {
            rTax25RegCalcController.rTax25RegisterJournalTable(registerJournalTrans.registerJournalTable());
            rTax25RegCalcController.calcRegister(registerJournalTrans, false, this.parmCurrentBatch());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);

        switch (version)
        {
            case currentVersion:
                [version, journalTransRecId, batch] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc construct(RTax25RegisterType       _registerType,
                                          RAssetAssessedTaxRegType _assessedTaxRegType = RAssetAssessedTaxRegType::None)
    {
        switch (_assessedTaxRegType)
        {
            case RAssetAssessedTaxRegType::AssessedTax          :
                return new RTax25RegCalc_AssessedTax();
            case RAssetAssessedTaxRegType::DepreciatedCostCalc  :
                return new RTax25RegCalc_AssessedDepreciatedCost();
            case RAssetAssessedTaxRegType::TotalDepreciatedCost :
                return new RTax25RegCalc_AssessedTotalDepreciated();
            case RAssetAssessedTaxRegType::TransportTaxCalc :
                return new RTax25RegCalc_TransportTaxCalculation();
            case RAssetAssessedTaxRegType::TransportTax :
                return new RTax25RegCalc_TransportTax();
            case RAssetAssessedTaxRegType::LandTaxCalc :
                return new RTax25RegCalc_LandTaxCalculation();
            case RAssetAssessedTaxRegType::LandTax :
                return new RTax25RegCalc_LandTax();
        }

        switch (_registerType)
        {
            case RTax25RegisterType::PaymentReceipt,
                 RTax25RegisterType::PaymentConsumption,
                 RTax25RegisterType::Income,
                 RTax25RegisterType::NonInventIssue,
                 RTax25RegisterType::NonInventReceipt,
                 RTax25RegisterType::NotInfluenceIncome,
                 RTax25RegisterType::OutlayUnrealOther :
                return new RTax25RegCalc_Ledger();
            case RTax25RegisterType::InventReceipt :
                return new RTax25RegCalc_InventReceipt();
            case RTax25RegisterType::DebtDebitMovement,
                 RTax25RegisterType::DebtDebitMovementRAP,
                 RTax25RegisterType::DebtCreditMovement :
                return new RTax25RegCalc_DebtMovement();
            case RTax25RegisterType::DebtDebitInventory,
                 RTax25RegisterType::DebtDebitInventoryRAP,
                 RTax25RegisterType::DebtCreditInventory :
                return new RTax25RegCalc_DebtInventory();
            case RTax25RegisterType::DebtDebitReservation :
                return new RTax25RegCalc_DebtDebitReservation();
            case RTax25RegisterType::DebtDebitReservationRAP :
                return new RTax25RegCalc_DebtDebitReservationRAP();
            case RTax25RegisterType::DebtDebitReservationDetail :
                return new RTax25RegCalc_DebtDebitReservationDetail();
            case RTax25RegisterType::DebtDebitReservationDetailRAP :
                return new RTax25RegCalc_DebtDebitReserveDetailRAP();
            case RTax25RegisterType::DebtDebitReservMovement :
                return new RTax25RegCalc_DebtDebitReservMovement();
            case RTax25RegisterType::DebtDebitReservMovementRAP :
                return new RTax25RegCalc_DebtDebitReservMovementRAP();
            case RTax25RegisterType::DebtDebitReservMovementDetail :
                return new RTax25RegCalc_DebtDebitReservMovDetail();
            case RTax25RegisterType::DebtDebitReservMovementDetailRAP :
                return new RTax25RegCalc_DebtDebitResMovDetailRAP();
            case RTax25RegisterType::AssetsCost :
                return new RTax25RegCalc_AssetsCost();
            case RTax25RegisterType::AssetsDisposal :
                return new RTax25RegCalc_AssetsDisposal();
            case RTax25RegisterType::TangibleAssetInfo :
                return new RTax25RegCalc_TangibleAssetInfo();
            case RTax25RegisterType::IntangibleAssetInfo :
                return new RTax25RegCalc_IntangibleAssetInfo();
            case RTax25RegisterType::TangibleDepreciation :
                return new RTax25RegCalc_TangibleDepreciation();
            case RTax25RegisterType::IntangibleDepreciation :
                return new RTax25RegCalc_IntangibleDepreciation();
            case RTax25RegisterType::TangibleGroupDepreciation :
                return new RTax25RegCalc_TangibleGroupDepr();
            case RTax25RegisterType::IntangibleGroupDepreciation :
                return new RTax25RegCalc_IntangibleGroupDepr();
            case RTax25RegisterType::StdCurrentExpense :
                return new RTax25RegCalc_StdCurrentExpense();
            case RTax25RegisterType::StdCurrentRate,
                 RTax25RegisterType::StdDeferralsRate :
                return new RTax25RegCalc_StdRate();
            case RTax25RegisterType::Deferrals :
                return new RTax25RegCalc_Deferrals();
            case RTax25RegisterType::Payroll :
                return new RTax25RegCalc_PayRoll();
            case RTax25RegisterType::InventReceiptTotal :
                return new RTax25RegCalc_InventReceiptTotal();
            case RTax25RegisterType::OutlayReal                 :
                return new RTax25RegCalc_OutlayReal();
            case RTax25RegisterType::OutlayRealTax              :
                return new RTax25RegCalc_OutlayRealTax();
            case RTax25RegisterType::OutlayUnreal               :
                return new RTax25RegCalc_OutlayUnreal();
            case RTax25RegisterType::ConstantDifferences         :
                return new RTax25RegCalc_ConstantDifferences();
            case RTax25RegisterType::TemporaryDifferences        :
                return new RTax25RegCalc_TemporaryDifferences();
            case RTax25RegisterType::AmountDifference      :
                return new RTax25RegCalc_AmountDifference();
            case RTax25RegisterType::ExchangeAdj      :
                return new RTax25RegCalc_ExchangeAdj();
            case RTax25RegisterType::TaxExchangeAdj      :
                return new RTax25RegCalc_TaxExchangeAdj();
            case RTax25RegisterType::AssetDeprBonusRecovery :
                return new RTax25RegCalc_AssetDeprBonusRecovery();
            case RTax25RegisterType::TaxRemainGoods :
                return new RTax25RegCalc_TaxRemainGoods();
            case RTax25RegisterType::ProfitAllocation:
                return new RTax25RegCalc_ProfitAllocation();
            case RTax25RegisterType::TemporaryDifferencesByBalance:
                return new RTax25RegCalc_TemporaryDifferencesByBalance();
            case RTax25RegisterType::ConstantDifferencesByBalance:
                return new RTax25RegCalc_ConstantDifferencesByBalance();

            default :
                return RTax25RegCalc::constructDefault(_registerType, _assessedTaxRegType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_rTax25RegisterType">A main register type.</param>
    /// <param name = "_assessedTaxRegisterType">A register type for a profit, land, transport tax.</param>
    /// <returns>An instance of a class <c>RTax25RegCalc</c>.</returns>
    protected static RTax25RegCalc constructDefault(
        RTax25RegisterType _registerType,
        RAssetAssessedTaxRegType _assessedTaxRegType = RAssetAssessedTaxRegType::None)
    {
        return new RTax25RegCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RTax25RegisterJournalTrans  journalTrans;
        RTax25RegCalc               regCalc;
        FormRun                     formRun;

        if (! _args || ! _args.record() ||  _args.dataset() != tableNum(RTax25RegisterJournalTrans))
            throw error("@SYS25516");

        journalTrans = _args.record();
        regCalc = RTax25RegCalc::construct(RTax25RegisterTable::registerId2Type(journalTrans.RegisterId), journalTrans.AssessedTaxRegisterType);
        regCalc.init(journalTrans);
        regCalc.calc();
        regCalc.postCalc();

        if (_args.caller() is FormRun)
        {
            formRun = _args.caller();
            formRun.dataSource(1).reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25RegisterType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterType parmRTax25RegisterType(RTax25RegisterType _registerType = registerType)
    {
        registerType = _registerType;
        return registerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set periodSet()
    {
        return periodSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodStart</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate periodStart()
    {
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs operations after register is calculated.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postCalc()
    {
        regQuery.insertDatabase();
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
        registerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>regQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25Query regQuery()
    {
        return regQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the rTax25RegCalc.calcServer method, ensuring it is executed under Xpp IL.
    /// </summary>
    /// <param name="_pack">
    /// Packed parameters.
    /// </param>
    /// <returns>
    /// true if register was calculated; false; otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean calcIL(container _pack)
    {
        container calcResult;

        calcResult = rTax25RegCalc::calcServer(_pack);
        return conPeek(calcResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServer</Name>
				<Source><![CDATA[
    private static container calcServer(container _pack)
    {
        RecId journalTransRecId;
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        Batch batch;
        RTax25RegCalc rTax25RegCalc;
        boolean ret = true;

        [journalTransRecId, batch] = _pack;

        try
        {
            ttsBegin;

            select firstOnly forUpdate rTax25RegisterJournalTrans
                where rTax25RegisterJournalTrans.RecId == journalTransRecId;

            rTax25RegCalc = RTax25RegCalc::construct(RTax25RegisterTable::registerId2Type(rTax25RegisterJournalTrans.RegisterId),
                                                        rTax25RegisterJournalTrans.AssessedTaxRegisterType);
            rTax25RegCalc.init(rTax25RegisterJournalTrans, batch);

            rTax25RegCalc.calc();
            rTax25RegCalc.postCalc();

            ttsCommit;
        }
        catch
        {
            ret = false;
        }

        return [ret];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRegisterType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc newRegisterType(RTax25RegisterType _rTax25RegisterType)
    {
        RTax25RegCalc rTax25RegCalc = RTax25RegCalc::construct(_rTax25RegisterType);

        rTax25RegCalc.parmRTax25RegisterType(_rTax25RegisterType);
        rTax25RegCalc.init();

        return rTax25RegCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>