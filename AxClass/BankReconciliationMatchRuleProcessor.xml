<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract internal class BankReconciliationMatchRuleProcessor
{
    private const int ProgressCount = 100;

    private static const container PostingActions = [
        BankReconciliationMatchActionType::Voucher,
        BankReconciliationMatchActionType::CustPaym,
        BankReconciliationMatchActionType::VendPaym,
        BankReconciliationMatchActionType::SettleCustInv];

    protected BankReconciliationMatchRule matchRule;
    protected BankReconciliationMatchRule_PostingInfo matchingRulePostingInfo;
    protected BankReconciliationHeader reconciliation;
    protected BankReconciliationStatementOpenTmp reconciliationStatementTmp;
    protected BankReconciliationDocumentOpenTmp reconciliationDocumentTmp;
    protected BankReconciliationDataManager dataManager;

    protected NoYes hasInvoiceSettled = NoYes::No;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankReconciliationMatchRule _matchRule, BankReconciliationStatementOpenTmp _statementTmp, BankReconciliationDocumentOpenTmp _documentTmp, BankReconciliationHeader _reconciliation, BankReconciliationDataManager _dataManager)
    {
        matchRule = _matchRule;
        reconciliationStatementTmp = _statementTmp;
        reconciliationDocumentTmp = _documentTmp;
        reconciliation = _reconciliation;
        dataManager = _dataManager;
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            matchingRulePostingInfo = BankReconciliationMatchRule_PostingInfo::findByMatchRuleAndLegalEntity(_matchRule.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankReconciliationMatchRuleProcessor construct(BankReconciliationMatchRule _matchRule, BankReconciliationStatementOpenTmp _statementTmp, BankReconciliationDocumentOpenTmp _documentTmp, BankReconciliationHeader _reconciliation, BankReconciliationDataManager _dataManager)
    {
        BankReconciliationMatchRuleProcessor processor;
        if (FeatureStateProvider::isFeatureEnabled(BankReconciliationGroupMatchFeature::instance())
            && BankReconciliationMatchRuleProcessor::isGroupMatching(_matchRule))
        {
            processor = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(
                classStr(BankReconciliationMatchRuleProcessor),
                new BankReconciliationMatchTypeAttribute(_matchRule.MatchingType),
                BankReconciliationMatchRuleProcessorInstantiationStrategy::construct(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager));
        }
        else if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())
            && BankReconciliationMatchRuleProcessor::isPostingRuleOrReverseDocumentRule(_matchRule.MatchActionType))
        {
            processor = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(
                classStr(BankReconciliationMatchRuleProcessor),
                new BankReconciliationMatchActionTypeAttribute(_matchRule.MatchActionType),
                BankReconciliationMatchRuleProcessorInstantiationStrategy::construct(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager));
        }

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessMatchingRule</Name>
				<Source><![CDATA[
    private boolean canProcessMatchingRule()
    {
        boolean ret = true;

        if (BankReconciliationMatchRuleProcessor::isPostingRule(matchRule.MatchActionType))
        {
            if (matchingRulePostingInfo.RecId == 0)
            {
                ret = checkFailed(strFmt("@Bank:PostingParameterNotExistForPostingRuleError", matchRule.RuleId));
            }
            else if (matchingRulePostingInfo.getAccountingDate() > reconciliation.CutOffDate)
            {
                ret = checkFailed(strFmt("@Bank:AccountingDateLaterThanCutOffDateWarning",
                    matchRule.RuleId,
                    matchingRulePostingInfo.getAccountingDate(),
                    reconciliation.CutOffDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(SysInstrumentationProgressLogger _progressLogger)
    {
        #Macrolib.AviFiles

        int64 totalDurationMs;
        int64 performMatchActionDurationMs;
        System.Diagnostics.Stopwatch totalConsumeStopWatch = System.Diagnostics.Stopwatch::StartNew();
        System.Diagnostics.Stopwatch perFormMatchActionStopWatch = System.Diagnostics.Stopwatch::StartNew();

        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())
            && !this.canProcessMatchingRule())
        {
            return;
        }

        QueryRun statementQueryRun = this.buildStatementQueryRun();

        if (statementQueryRun)
        {
            SysOperationProgress progress = SysOperationProgress::newGeneral(
                #AviUpdate,
                strFmt("@GLS222313", matchRule.RuleId),
                ProgressCount);

            int64 unmatchedStatements = this.getUnmatchedStatementCount();
            int64 statementsProcessed;

            SysInstrumentationProgressStage stage = _progressLogger.createStage(BankInstrumentationConstants::AdvancedBankReconciliationMatchRule, unmatchedStatements);

            this.preprocess();

            using (SysInstrumentationActivityContext activityContext = _progressLogger.activityContextWithProgressMonitor(stage))
            {
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleRecId, int642Str(matchRule.RecId));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleMatchActionType, enum2Symbol(enumNum(BankReconciliationMatchActionType), matchRule.MatchActionType));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleMatchingType, enum2Symbol(enumNum(BankReconciliationStmtMatchMathingType), matchRule.MatchingType));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleProcessedRecords, int642Str(unmatchedStatements));


                if (!BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
                {
                    ttsbegin;
                }

                BankStmtTmp bankStatementsToUpdate;

                while (statementQueryRun.next())
                {
                    Common tmpStatementLocal = this.getCurrentStatement(statementQueryRun);

                    if (tmpStatementLocal)
                    {
                        this.getSearchedDocumentIdList(tmpStatementLocal);

                        if (this.canPerformMatchAction())
                        {
                            perFormMatchActionStopWatch.Restart();
                            this.performMatchAction(tmpStatementLocal, bankStatementsToUpdate);
                            performMatchActionDurationMs += perFormMatchActionStopWatch.ElapsedMilliseconds;
                        }
                    }

                    progress.incCount();

                    statementsProcessed++;
                    _progressLogger.trackProgress(statementsProcessed);
                }

                if (!BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
                {
                    BankReconciliationAutoMatchUtils::updateBankStatementStatus(bankStatementsToUpdate);

                    ttscommit;
                }

                totalDurationMs = totalConsumeStopWatch.ElapsedMilliseconds;
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleMatchedRecords, int642Str(statementsProcessed));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleTotalDurationMs, int642Str(totalDurationMs));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleMatchDurationMs, int642Str(totalDurationMs - performMatchActionDurationMs));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRulePerformActionDurationMs, int642Str(performMatchActionDurationMs));
                activityContext.addCustomProperty(BankInstrumentationConstants::AdvancedBankReconciliationMatchRuleHasInvoiceSettled, enum2Str(hasInvoiceSettled));

                progress.reset();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>match</Name>
				<Source><![CDATA[
    internal protected boolean match(List _impactedStatementIdList, List _searchedDocumentIdList)
    {
        BankReconciliationMatchingMatchProcessor matchingMatchProcessor = BankReconciliationMatchingMatchProcessor::construct(reconciliation, true, matchRule.RecId);
        matchingMatchProcessor.parmSkipUpdateBankStatement(true);
        if (_impactedStatementIdList.elements() > 0)
        {
            // Add entry for statement lines.
            BankReconciliationStatementOpenTmp tmpStatementLocal;
            tmpStatementLocal.linkPhysicalTableInstance(reconciliationStatementTmp);
            ListEnumerator enumerator = _impactedStatementIdList.getEnumerator();
            while (enumerator.moveNext())
            {
                RecId entryId = enumerator.current();

                select firstOnly BankStmtISOReportEntry from tmpStatementLocal
                    where tmpStatementLocal.RecId == entryId;
                if (tmpStatementLocal)
                {
                    BankReconciliationMatchingEntry matchingEntry = BankReconciliationMatchingEntry::construct(
                        BankReconciliationMatchingEntryType::BankStatement,
                        tmpStatementLocal.BankStmtISOReportEntry);
                    matchingMatchProcessor.addEntry(matchingEntry);
                }
            }
        }

        if (_searchedDocumentIdList.elements() > 0)
        {
            // Add entry for bank documents.
            BankReconciliationDocumentOpenTmp tmpDocumentLocal;
            tmpDocumentLocal.linkPhysicalTableInstance(reconciliationDocumentTmp);
            ListEnumerator enumerator = _searchedDocumentIdList.getEnumerator();
            while (enumerator.moveNext())
            {
                RecId entryId = enumerator.current();

                select firstOnly BankDocumentTableView from tmpDocumentLocal
                    where tmpDocumentLocal.RecId == entryId;
                if (tmpDocumentLocal)
                {
                    BankReconciliationMatchingEntry matchingEntry = BankReconciliationMatchingEntry::construct(
                        BankReconciliationMatchingEntryType::BankDocument,
                        tmpDocumentLocal.BankDocumentTableView);
                    matchingMatchProcessor.addEntry(matchingEntry);
                }
            }
        }

        boolean ret = matchingMatchProcessor.processMatch();

        if (ret)
        {
            dataManager.refreshMatchStatus(
                _impactedStatementIdList,
                _searchedDocumentIdList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the match action type is posting action.
    /// </summary>
    /// <param name="_matchActionType">
    /// The match action type.
    /// </param>
    /// <returns>
    /// true if the match action type is posting action, otherwise false.
    /// </returns>
    internal static boolean isPostingRule(BankReconciliationMatchActionType _matchActionType)
    {
        return conFind(BankReconciliationMatchRuleProcessor::PostingActions, _matchActionType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingRuleOrReverseDocumentRule</Name>
				<Source><![CDATA[
    internal final static boolean isPostingRuleOrReverseDocumentRule(BankReconciliationMatchActionType _matchActionType)
    {
        return BankReconciliationMatchRuleProcessor::isPostingRule(_matchActionType) || _matchActionType == BankReconciliationMatchActionType::TransactionReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeModernBankReconciliationActionsFromQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filter to query range to exclude modern bank reconciliation actions.
    /// </summary>
    /// <param name="_qbds">
    /// The query build data source.
    /// </param>
    /// <remark>
    /// This method can be removed after BankModernReconciliationFeature becomes mandatory.
    /// </remark>
    internal static void excludeModernBankReconciliationActionsFromQueryRange(QueryBuildDataSource _qbds)
    {
        if (_qbds.table() != tableNum(BankReconciliationMatchRule))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        str rangeValue;

        for (int i = 1; i <= conLen(PostingActions); i++)
        {
            rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue,
                strFmt(BankReconciliationRuleParser::MatchActionTypeNotEqual, any2int(conPeek(PostingActions, i))));
        }

        rangeValue = BankReconciliationRuleParser::combineRanges(rangeValue,
            strFmt(BankReconciliationRuleParser::MatchActionTypeNotEqual, any2int(BankReconciliationMatchActionType::TransactionReversal)));

        _qbds.addRange(fieldNum(BankReconciliationMatchRule, MatchActionType)).value(rangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeMarkAsNewActionFromQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filter to query range to exclude mark as new action.
    /// </summary>
    /// <param name="_qbds">
    /// The query build data source.
    /// </param>
    internal static void excludeMarkAsNewActionFromQueryRange(QueryBuildDataSource _qbds)
    {
        if (_qbds.table() != tableNum(BankReconciliationMatchRule))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _qbds.addRange(fieldNum(BankReconciliationMatchRule, MatchActionType)).value(SysQuery::valueNot(BankReconciliationMatchActionType::Adjustment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the match rule is group matching.
    /// </summary>
    /// <param name="_matchRule">
    /// The match rule.
    /// </param>
    /// <returns>
    /// true if the match rule is group matching, otherwise false.
    /// </returns>
    internal static boolean isGroupMatching(BankReconciliationMatchRule _matchRule)
    {
        return _matchRule.MatchActionType == BankReconciliationMatchActionType::Match
            && _matchRule.MatchingType != BankReconciliationStmtMatchMathingType::OneToOne;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentStatement</Name>
				<Source><![CDATA[
    abstract internal protected Common getCurrentStatement(QueryRun _statementQueryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementCount</Name>
				<Source><![CDATA[
    abstract internal protected int64 getUnmatchedStatementCount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    abstract internal protected void preprocess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementQueryRun</Name>
				<Source><![CDATA[
    abstract internal protected QueryRun buildStatementQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformMatchAction</Name>
				<Source><![CDATA[
    abstract internal protected boolean canPerformMatchAction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchedDocumentIdList</Name>
				<Source><![CDATA[
    abstract internal protected void getSearchedDocumentIdList(Common _tmpStatement)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchAction</Name>
				<Source><![CDATA[
    abstract internal protected void performMatchAction(Common _openStatementForMatch, BankStmtTmp _bankStatementsToUpdate)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>