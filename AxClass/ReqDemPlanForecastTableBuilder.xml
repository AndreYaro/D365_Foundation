<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanForecastTableBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanForecastTableBuilder</c> class is responsible
///     for populating the forecast table with adjusted forecast data.
/// </summary>
class ReqDemPlanForecastTableBuilder
{
    ReqDemPlanAllocationKeyFilterTmp    allocationKeyFilterTable;
    ReqDemPlanDataProcessingHelper      dataHelper;
    ReqDemPlanExtensibilityHelper       extensibilityHelper;

    ReqDemPlanTaskLoggerInterface       logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeFillers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs all registered forecast table filler classes to fill the forecast table.
    /// </summary>
    /// <param name="_forecastTable">
    ///     The forecast table buffer.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_forecastVersion">
    ///     The forecast version.
    /// </param>
    /// <param name="_allocationKeyFilters">
    ///     The table buffer that contains current item allocation key filters.
    /// </param>
    /// <returns>
    ///     The total number of processed records.
    /// </returns>
    protected ReqDemPlanTaskProcessedRecordCount executeFillers(
        ReqDemPlanForecast                      _forecastTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        ReqDemPlanForecastVersion               _forecastVersion,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilters)
    {
        List                                processorList;
        ListEnumerator                      processorListEnumerator;
        ReqDemPlanForecastTableFiller       processor;
        ReqDemPlanDataSourceRecId           processorDataSourceId;
        ReqDemPlanTaskProcessedRecordCount  recordsProcessed;
        ReqDemPlanTaskProcessedRecordCount  totalRecordsProcessed;

        processorList = extensibilityHelper.getInstancesWithAttribute(classStr(ReqDemPlanForecastTableFiller), new ReqDemPlanForecastTableFillerAttribute());
        processorListEnumerator = processorList.getEnumerator();

        while (processorListEnumerator.moveNext())
        {
            processor = processorListEnumerator.current();

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::FillForecastTable + processor.GetType().Name,
                strFmt("@DMP1462", processor.description()));

            processorDataSourceId = ReqDemPlanDataSource::registerDataSourceForInstance(processor);

            if (processorDataSourceId != 0)
            {
                recordsProcessed = processor.execute(_forecastTable, _dataContract, _forecastVersion, processorDataSourceId, _allocationKeyFilters);
                totalRecordsProcessed += recordsProcessed;

                logger.incrementTaskRecordsProcessed(recordsProcessed);
                logger.finishTask();
            }
            else
            {
                logger.taskFailed();
            }
        }

        return totalRecordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeProcessors</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs all registered forecast table processor classes to update forecast table.
    /// </summary>
    /// <param name="_forecastTable">
    ///     The forecast table buffer.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_forecastVersion">
    ///     The forecast version.
    /// </param>
    /// <returns>
    ///     The total number of processed records.
    /// </returns>
    protected ReqDemPlanTaskProcessedRecordCount executeProcessors(
        ReqDemPlanForecast                      _forecastTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        ReqDemPlanForecastVersion               _forecastVersion)
    {
        List                                processorList;
        ListEnumerator                      processorListEnumerator;
        ReqDemPlanForecastDataProcessor     processor;
        ReqDemPlanTaskProcessedRecordCount  recordsProcessed;
        ReqDemPlanTaskProcessedRecordCount  totalRecordsProcessed;

        processorList = extensibilityHelper.getInstancesWithAttribute(classStr(ReqDemPlanForecastDataProcessor), new ReqDemPlanForecastDataProcessorAttribute());
        processorListEnumerator = processorList.getEnumerator();

        while (processorListEnumerator.moveNext())
        {
            processor = processorListEnumerator.current();
            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::PostProcessForecastTable + processor.GetType().Name,
                strFmt("@DMP1463", processor.description()));

            recordsProcessed = processor.execute(_forecastTable, _dataContract, _forecastVersion);
            totalRecordsProcessed += recordsProcessed;

            logger.incrementTaskRecordsProcessed(recordsProcessed);
            logger.finishTask();
        }

        return totalRecordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the <c>ReqDemPlanForecast</c> with adjusted forecast data from the <c>ForecastInvent</c> table, with the necessary version.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract to be used.
    /// </param>
    /// <param name="_allocationKeyFilters">
    ///     The table buffer that contains current item allocation key filters.
    /// </param>
    /// <param name="_version">
    ///     The forecasting version.
    /// </param>
    /// <returns>
    ///     The number of processed records.
    /// </returns>
    private ReqDemPlanTaskProcessedRecordCount fill(
        ReqDemPlanExportBaseDataContract        _dataContract,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilters,
        ReqDemPlanForecastVersion               _version = ReqDemPlanForecastVersion::Adjusted)
    {
        ReqDemPlanForecast                      forecast;
        ReqDemPlanTaskProcessedRecordCount      recordsProcessed;

        dataHelper.skipAll(forecast);

        // set current company on the temp table buffer, otherwise it uses the one that's last set on it
        // which is different than the current company
        allocationKeyFilterTable.company(curExt2dataareaid(tableNum(ReqDemPlanAllocationKeyFilterTmp)));

        recordsProcessed = this.executeFillers(forecast, _dataContract, _version, _allocationKeyFilters);

        this.executeProcessors(forecast, _dataContract, _version);

        return recordsProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        // initialize logger instance
        this.parmLogger(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataProcessingHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the ReqDemPlanDataProcessingHelper type.
    /// </summary>
    /// <returns>
    ///     A new instance of the ReqDemPlanDataProcessingHelper type.
    /// </returns>
    protected ReqDemPlanDataProcessingHelper newDataProcessingHelper()
    {
        ReqDemPlanDataProcessingHelper helper;

        helper = new ReqDemPlanDataProcessingHelper();
        helper.parmLogger(logger);

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExtensibilityHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instrance of the ReqDemPlanExtensibilityHelper class.
    /// </summary>
    /// <returns>
    ///     A new instrance of the ReqDemPlanExtensibilityHelper class.
    /// </returns>
    protected ReqDemPlanExtensibilityHelper newExtensibilityHelper()
    {
        return ReqDemPlanExtensibilityHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogger</Name>
				<Source><![CDATA[
    public ReqDemPlanTaskLoggerInterface parmLogger(ReqDemPlanTaskLoggerInterface _logger = logger)
    {
        logger = _logger;

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refill</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recreates the data in the forecast table.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    /// <param name="_parameters">
    ///     The table buffer with master parameters.
    /// </param>
    /// <param name="_version">
    ///     The version of the forecast data collection.
    /// </param>
    /// <returns>
    ///     The total number of created records.
    /// </returns>
    public ReqDemPlanTaskProcessedRecordCount refill(
        ReqDemPlanExportBaseDataContract    _dataContract,
        ReqDemPlanForecastParameters        _parameters         = ReqDemPlanForecastParameters::find(),
        ReqDemPlanForecastVersion           _version            = ReqDemPlanForecastVersion::Adjusted)
    {
        SetEnumerator                       setEnumerator;
        SelectableDataArea                  currCompany;
        ReqDemPlanTaskProcessedRecordCount  filledRecordsCount;
        boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
        int infologLineTry = infologLine();

        try
        {
            filledRecordsCount  = 0;

            var versionSymbol = enum2Symbol(enumNum(ReqDemPlanForecastVersion), _version);

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::CleanupForecastVersion + versionSymbol,
                strFmt("@DMP:TableCleanupForVersion", _version));

            ReqDemPlanForecast::cleanVersion(_version);

            logger.finishTask();

            extensibilityHelper = this.newExtensibilityHelper();

            logger.startMonitoredTask(ReqDemPlanTaskCodes::PrepareAllocationKeyFilter, "@DMP:AllocationKeyFilterPreparation");
            dataHelper = this.newDataProcessingHelper();
            setEnumerator = dataHelper.prepareAllocationKeyFilter(_dataContract.getFilterQuery(), allocationKeyFilterTable).getEnumerator();
            logger.finishTask();

            while (setEnumerator.moveNext())
            {
                ttsbegin;
                currCompany = setEnumerator.current();
                changecompany(currCompany)
                {
                    filledRecordsCount += this.fill(_dataContract, allocationKeyFilterTable, _version);
                }
                ttscommit;
            }
        }
        #ReqDemPlanCatchRetryTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, _dataContract, allocationKeyFilterTable, logger, infologLineTry)

        return filledRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanForecastTableBuilder construct()
    {
        return new ReqDemPlanForecastTableBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>