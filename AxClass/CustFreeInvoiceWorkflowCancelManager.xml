<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustFreeInvoiceWorkflowCancelManager</c> class is used to cancel a free text invoice
///    workflow.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the free
///    text invoice record when the Cancel button has been pressed. The free text invoice is set into a
///    pending cancellation status and this is presented to the user immediately.The default dialog box
///    and cancel functionality from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class CustFreeInvoiceWorkflowCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workflow status to pending cancellation on the free text invoice that is canceled.
    /// </summary>
    /// <param name="_args">
    ///    The record that should be canceled.
    /// </param>
    /// <remarks>
    ///    This method rereads the record from the data source because the status is changed when submitting a
    ///    workflow and these changes may not be refreshed in the client.The workflow state and workflow
    ///    status is set to pending cancellation and the record is updated and refreshed in the client.
    /// </remarks>
    public void updateDocument(Args _args)
    {
        CustInvoiceTable custInvoiceTable;

        if (_args.record() is CustInvoiceTable)
        {
            custInvoiceTable = _args.record() as CustInvoiceTable;
            custInvoiceTable.reread();
        }
        else if (_args.record() is WorkflowTrackingStatusTable)
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = _args.record() as WorkflowTrackingStatusTable;
            workflowTrackingStatusTable.reread();

            if (workflowTrackingStatusTable.ContextTableId == tableNum(CustInvoiceTable))
            {
                custInvoiceTable = CustInvoiceTable::findRecId(workflowTrackingStatusTable.ContextRecId);
            }
        }

        if (custInvoiceTable)
        {
            custInvoiceTable::setWorkflowState(custInvoiceTable.RecId, CustFreeInvoiceWFApprovalState::PendingCancellation);

            FormDataSource custInvoiceTable_ds = FormDataUtil::getFormDataSource(custInvoiceTable);

            if (custInvoiceTable_ds)
            {
                custInvoiceTable_ds.research(true);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustFreeInvoiceWorkflowCancelManager construct()
    {
        return new CustFreeInvoiceWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustFreeInvoiceWorkflowCancelManager workflowCancelManager = CustFreeInvoiceWorkflowCancelManager::construct();

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>