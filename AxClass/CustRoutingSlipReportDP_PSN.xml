<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRoutingSlipReportDP_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustDirectiveRoutingSlipReportDP_PSN</c> class provides data
///    for the <c>CustDirectiveRoutingSlipReport_PSN</c> SQL Server
///    Reporting Services report.
/// </summary>

[SRSReportQueryAttribute(querystr(CustRoutingSlipReport_PSN))]
public class CustRoutingSlipReportDP_PSN  extends SRSReportDataProviderBase
{
    CustInvoiceTable                custInvoiceTable;
    CustInvoiceLine                 custInvoiceLine;
    CustDirective_PSN               custDirective_PSN;
    CustRoutingSlip_PSN             custRoutingSlip_PSN;
    CustRoutingSlipReportTmp_PSN    custRoutingSlipReportTmp_PSN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSampleReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the full data from the <c>CustDirectiveRoutingSlipReportTmp_PSN</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustDirectiveRoutingSlipReportTmp_PSN</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustRoutingSlipReportTmp_PSN))]
    public CustRoutingSlipReportTmp_PSN getSampleReportTmp()
    {
        select custRoutingSlipReportTmp_PSN;
        return custRoutingSlipReportTmp_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and inserts data into the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun        queryRun;
        queryRun        = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            custInvoiceTable        = queryRun.get(tablenum(CustInvoiceTable));
            custInvoiceLine         = queryRun.get(tablenum(CustInvoiceLine));
            custDirective_PSN       = queryRun.get(tablenum(CustDirective_PSN));
            custRoutingSlip_PSN     = queryRun.get(tablenum(CustRoutingSlip_PSN));

            custRoutingSlipReportTmp_PSN.InvoiceNumber                  = custInvoiceTable.InvoiceId;
            custRoutingSlipReportTmp_PSN.CustDirectiveId                = custDirective_PSN.CustDirectiveId;
            custRoutingSlipReportTmp_PSN.Debtor                         = custInvoiceTable.Name;
            custRoutingSlipReportTmp_PSN.CustDirectiveBudgetaryAccount  = custDirective_PSN.CustDirectiveBudgetaryAccount;
            custRoutingSlipReportTmp_PSN.LedgerDimension                = DimensionAttributeValueCombination::find(custInvoiceLine.LedgerDimension).DisplayValue;
            custRoutingSlipReportTmp_PSN.PreTaxAmount                   = custInvoiceLine.AmountCur;
            custRoutingSlipReportTmp_PSN.VAT                            = abs(CustVendDirective_PSN::getDistributedAmountInBudgetingCurrency(custInvoiceLine.SourceDocumentLine, DistributionlinesToSum_PSN::DeductibleTaxes, true));
            custRoutingSlipReportTmp_PSN.DueAmount                      = custRoutingSlipReportTmp_PSN.PreTaxAmount + custRoutingSlipReportTmp_PSN.VAT;
            custRoutingSlipReportTmp_PSN.FiscalYear                     = year(FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), DateTimeUtil::date(DateTimeUtil::getSystemDateTime())).StartDate);
            custRoutingSlipReportTmp_PSN.CustRoutingSlipId              = custRoutingSlip_PSN.CustRoutingSlipId;
            custRoutingSlipReportTmp_PSN.DirectorApprovalStatus         = custDirective_PSN.DirectorApprovalStatus;
            custRoutingSlipReportTmp_PSN.DirectorUserId                 = custDirective_PSN.DirectorUserId;
            custRoutingSlipReportTmp_PSN.DirectorApprovalDate           = custDirective_PSN.DirectorApprovalDate;
            custRoutingSlipReportTmp_PSN.insert();
            custRoutingSlipReportTmp_PSN.clear();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
