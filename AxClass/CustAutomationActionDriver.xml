<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationActionDriver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAutomationActionDriver</c> class is the entry point to spawning the correct action type for customer process automations.
/// </summary>
internal final class CustAutomationActionDriver
{
    private CustAutomationProcessStepCountTable custAutomationProcessStepCountTableTmp;
    private NoYes isCollectionProcessAutomationStepTrackEnabled = CustAutomationParameters::find().EnableCollectionProcessAutomationStepTrack;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(CustAutomationContract _contract)
    {
        #OCCRetryCount

        CustAutomationInvoice invoice;
        invoice.readPast(true);
        System.Exception exception;
        CustAutomationIAction custAutomationIAction;
        boolean exceptionThrown;
        RefRecId invoiceRecId;

        custAutomationProcessStepCountTableTmp.setTmp();

        do
        {
            try
            {
                invoice.clear();
                exceptionThrown = false;

                ttsbegin;

                select firstonly pessimisticlock * from invoice
                    where invoice.StrategyName == _contract.parmCustAutomationStrategy().StrategyName
                        && invoice.Status == CustAutomationInvoiceStatus::Pending
                        && invoice.ExecutionId == _contract.parmExecutionId();

                if (invoice.RecId)
                {
                    invoiceRecId = invoice.RecId;

                    invoice.setStatus(CustAutomationInvoiceStatus::InProgress);

                    custAutomationIAction = CustAutomationActionFactory::constructForAction(invoice.ActionType);
                    _contract.parmCustAutomationInvoice(invoice);
                    custAutomationIAction.executeAction(_contract);

                    invoice.setStatus(CustAutomationInvoiceStatus::Completed);

                    if (isCollectionProcessAutomationStepTrackEnabled)
                    {
                        this.insertProcessStepCountInTmpTable(_contract, invoice);
                    }
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    exceptionThrown = true;
                    continue;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        exceptionThrown = true;
                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    exceptionThrown = true;
                    continue;
                }
            }
            catch (exception)
            {
                exceptionThrown = true;
                this.logErrorMessage(_contract, exception, custAutomationIAction);
            }
            finally
            {
                if (exceptionThrown)
                {
                    // Previous transaction was closed if an error occurred.
                    ttsbegin;
                    CustAutomationInvoice::updateStatus(CustAutomationInvoiceStatus::Error, invoiceRecId);
                }
            }

            ttscommit;
        }
        while (invoice.RecId != 0);

        if (isCollectionProcessAutomationStepTrackEnabled)
        {
            this.updateCustAutomationProcessStepCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logErrorMessage</Name>
				<Source><![CDATA[
    private void logErrorMessage(CustAutomationContract _contract, System.Exception _exception, CustAutomationIAction _custAutomationIAction)
    {
        CustAutomationOccurrenceErrorLog::logErrorForOccurrence(
            _contract,
            _custAutomationIAction.errorMessage(_contract.parmCustAutomationInvoice().AccountNum),
            _exception.Message,
            tableNum(CustTable),
            CustTable::find(_contract.parmCustAutomationInvoice().AccountNum).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProcessStepCountInTmpTable</Name>
				<Source><![CDATA[
    private void insertProcessStepCountInTmpTable(CustAutomationContract _contract, CustAutomationInvoice _invoice)
    {
        if (_invoice.CustAutomationProcessSentCount != _invoice.CustAutomationProcessCount)
        {
            // For CollectionLetter action type, CustAutomationProcessCount should not be updated in case collection letter was not created
            if (_invoice.ActionType == CustAutomationActionType::CollectionLetter && _contract.parmCustCollectionLetterCreated() != NoYes::Yes)
            {
                return;
            }

            if (_invoice.Status == CustAutomationInvoiceStatus::Completed)
            {
                CustTrans custTrans;

                select firstonly RecId from custTrans
                    where custTrans.AccountNum == _invoice.AccountNum
                        && custTrans.Invoice == _invoice.Invoice
                    outer join RecId from custAutomationProcessStepCountTableTmp
                        where custAutomationProcessStepCountTableTmp.CustTransRecId == custTrans.RecId;

                if (!custAutomationProcessStepCountTableTmp.RecId)
                {
                    custAutomationProcessStepCountTableTmp.clear();
                    custAutomationProcessStepCountTableTmp.CustTransRecId = custTrans.RecId;
                    custAutomationProcessStepCountTableTmp.CustAutomationProcessCount = _invoice.CustAutomationProcessSentCount;
                    custAutomationProcessStepCountTableTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAutomationProcessStepCount</Name>
				<Source><![CDATA[
    private void updateCustAutomationProcessStepCount()
    {
        CustTrans custTrans;
        CustAutomationProcessStepCountTable custAutomationProcessStepCountTable;
        
        ttsbegin;
        
        update_recordset custAutomationProcessStepCountTable
            setting CustAutomationProcessCount = custAutomationProcessStepCountTableTmp.CustAutomationProcessCount
            join custAutomationProcessStepCountTableTmp
                where custAutomationProcessStepCountTable.CustTransRecId == custAutomationProcessStepCountTableTmp.CustTransRecId;
        
        insert_recordset custAutomationProcessStepCountTable ( CustTransRecId, CustAutomationProcessCount )
            select CustTransRecId, CustAutomationProcessCount from custAutomationProcessStepCountTableTmp
                notexists join custAutomationProcessStepCountTable
                    where custAutomationProcessStepCountTable.CustTransRecId == custAutomationProcessStepCountTableTmp.CustTransRecId;
        
        delete_from custAutomationProcessStepCountTable
            exists join custTrans
                where custTrans.RecId == custAutomationProcessStepCountTable.CustTransRecId
                    && (custTrans.Closed != dateNull() || custTrans.CustAutomationExclude == NoYes::Yes);
        
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>