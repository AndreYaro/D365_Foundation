<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RestoredVATSumType_TransOper_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RestoredVATSumType_TransOper_RU extends RestoredVATSumType_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>keyFields</Name>
				<Source><![CDATA[
        public container keyFields()
    {
        return [ fieldnum(RestoredVATLogTransOper_RU, TransDate),
                 fieldnum(RestoredVATLogTransOper_RU, ProcessLogTransRecId) ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Common _common, Map _mapParentSumTypes)
    {
        RestoredVATLogTransOper_RU restoredVATLogTransOper = _common;
        ;

        parentRecord = RestoredVATLogTrans_RU::find(restoredVATLogTransOper.TransDate,
                                                    restoredVATLogTransOper.ProcessLogTransRecId,
                                                    true);

        super(_common, _mapParentSumTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInclude</Name>
				<Source><![CDATA[
        private void updateInclude(Common _updatedRecord = common)
    {
        TaxAmountVAT_RU             taxAmount;
        TaxAmountVAT_RU             taxAmountAsset;
        RestoredVATLogTransOper_RU  oper        = _updatedRecord;
        RestoredVATLogTrans_RU      logTrans    = parentSumType.record();
        int                         sign        = oper.Include - oper.orig().Include;
        ;

        if (oper.Asset)
        {
            taxAmount       = 0;
            taxAmountAsset  = oper.TaxAmount + oper.TaxAmountNotLiable + oper.TaxAmountWrittenOff;
        }
        else
        {
            taxAmount       = oper.TaxAmount + oper.TaxAmountNotLiable;
            taxAmountAsset  = 0;
        }

        switch (oper.taxType())
        {
            case TaxType_W::VAT :
                if (oper.LineType == RestoredVATLineType_RU::Direct)
                {
                    logTrans.TaxStandardDirect   += sign * taxAmount;
                }
                else
                {
                    logTrans.TaxStandardIndirect += sign * taxAmount;
                }
                logTrans.TaxStandardAsset += sign * taxAmountAsset;
                break;

            case TaxType_W::VATReduced :
                if (oper.LineType == RestoredVATLineType_RU::Direct)
                {
                    logTrans.TaxReducedDirect   += sign * taxAmount;
                }
                else
                {
                    logTrans.TaxReducedIndirect += sign * taxAmount;
                }
                logTrans.TaxReducedAsset += sign * taxAmountAsset;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSum</Name>
				<Source><![CDATA[
        public void updateSum(Common _updatedRecord = common)
    {
        TaxAmountVAT_RU             taxAmount;
        TaxAmountVAT_RU             taxAmountAsset;
        RestoredVATLogTransOper_RU  oper        = _updatedRecord;
        RestoredVATLogTransOper_RU  orig        = _updatedRecord.orig();
        RestoredVATLogTransOper_RU  oper_Orig;
        RestoredVATLogTrans_RU      logTrans    = parentSumType.record();
        ;

        if (commonPrev)
        {
            oper_Orig = commonPrev;
        }
        else
        {
            oper_Orig = orig;
        }

        if (oper.Include == orig.Include && ! oper.Include)
        {
            return;
        }

        TaxAmountVAT_RU taxAmountOrig = oper_Orig.TaxAmount + oper_Orig.TaxAmountNotLiable + (oper_Orig.Asset ? oper_Orig.TaxAmountWrittenOff : 0);

        if (oper.Asset)
        {
            taxAmount       = 0;
            taxAmountAsset  = oper.TaxAmount + oper.TaxAmountNotLiable + oper.TaxAmountWrittenOff - taxAmountOrig;
        }
        else
        {
            taxAmount       = oper.TaxAmount + oper.TaxAmountNotLiable - taxAmountOrig;
            taxAmountAsset  = 0;
        }

        if (taxAmountOrig)
        {
            oper.AmountLiableToVAT = oper_Orig.AmountLiableToVAT * (1 + (taxAmount + taxAmountAsset) / taxAmountOrig);
        }

        switch (oper.taxType())
        {
            case TaxType_W::VAT :
                if (oper.LineType == RestoredVATLineType_RU::Direct)
                {
                    logTrans.TaxStandardDirect   += taxAmount;
                }
                else
                {
                    logTrans.TaxStandardIndirect += taxAmount;
                }
                logTrans.TaxStandardAsset += taxAmountAsset;
                break;

            case TaxType_W::VATReduced :
                if (oper.LineType == RestoredVATLineType_RU::Direct)
                {
                    logTrans.TaxReducedDirect   += taxAmount;
                }
                else
                {
                    logTrans.TaxReducedIndirect += taxAmount;
                }
                logTrans.TaxReducedAsset += taxAmountAsset;
                break;
        }

        super();

        if (oper.Include != oper_Orig.Include)
        {
            this.updateInclude(_updatedRecord);

            super();
        }

        commonPrev = oper.data();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
