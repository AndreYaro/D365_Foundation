<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirectTaxInquiryReportController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller <c>DirectTaxInquiryReportController_IN</c> class for <c>DirectTaxInquiryReport_IN</c> report.
/// </summary>
class DirectTaxInquiryReportController_IN extends SRSReportRunController implements BatchRetryable
{
    TmpDirectTaxInquiryTable_IN tmpDirectTaxInquiryTable_IN;
    RecId                       tmpTableDataRecId;
    container                   fieldValues;
    str                         headerNote;
    str                         footerNote;
    str                         reportTitle;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterNameByIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getting selected parameter value based on index.
    /// </summary>
    /// <param name="_parameterIndex">
    /// <c>_parameterIndex</c> to which it is assigned to.
    /// </param>
    /// <returns>
    /// Parameter name based on index.
    /// </returns>
    public str getParameterNameByIndex(int _parameterIndex)
    {
        #define.FieldName('ParamSort')

        return (#FieldName + int2str(_parameterIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        this.setParameters(this.parmArgs().record(), this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabelsCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will set field captions.
    /// </summary>
    /// <param name="_fieldValues">
    /// <c>_fieldValues</c> to which it is assigned to.
    /// </param>
    /// <param name="_headerNote">
    /// <c>_headerNote</c> to which it is assigned to.
    /// </param>
    /// <param name="_footerNote">
    /// <c>_footerNote</c> to which it is assigned to.
    /// </param>
    /// <param name="_reporTitle">
    /// <c>_reporTitle</c> to which it is assigned to.
    /// </param>
    public void setLabelsCaption(
        container _fieldValues,
        str       _headerNote,
        str       _footerNote,
        str       _reporTitle)
    {
        fieldValues = _fieldValues;
        headerNote  = _headerNote;
        footerNote  = _footerNote;
        reportTitle = _reporTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters values and processes the report business logic.
    /// </summary>
    /// <param name="_tmpDirectTaxInquiryTable_IN">
    /// An instance of <c>TmpDirectTaxInquiryTable_IN</c> temporary table.
    /// </param>
    /// <param name="_contract">
    /// An instance of contract <c>SrsTmpTblMarshallerContract</c> class.
    /// </param>
    public void setParameters(
        TmpDirectTaxInquiryTable_IN _tmpDirectTaxInquiryTable_IN,
        SrsTmpTblMarshallerContract _contract)
    {
        SrsReportRunPermission      permission;
        int                         idx;
        SrsReportRdlDataContract    rdlContract;

        #define.HeaderNote('HeaderNote')
        #define.FooterNote('FooterNote')
        #define.ReportTitle('ReportName')

        rdlContract = this.parmReportContract().parmRdlContract();

        rdlContract.setValue(#HeaderNote, headerNote);
        rdlContract.setvalue(#FooterNote, footerNote);
        rdlContract.setvalue(#ReportTitle, reportTitle);

        for (idx = 1; idx <= conlen(fieldValues); idx++)
        {
           rdlContract.setvalue(this.getParameterNameByIndex(idx), conpeek(fieldValues, idx));
        }

        // Storing the temp table data using SRSTmpTblMarshaller
        permission = new SrsReportRunPermission();
        permission.assert();

        tmpTableDataRecId = SRSTmpTblMarshaller::SendTmpTblToDataProvider(_tmpDirectTaxInquiryTable_IN);
        delete_from tmpDirectTaxInquiryTable_IN;
        CodeAccessPermission::revertAssert();

        _contract.parmTmpTableDataRecId(tmpTableDataRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00115, funcName());

        DirectTaxInquiryReportController_IN controller = _args.parmObject();

        if (controller != null)
        {
            controller.parmReportName(ssrsReportStr(DirectTaxInquiryReport_IN, Report));
            controller.parmArgs(_args);
            controller.parmShowDialog(false);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>