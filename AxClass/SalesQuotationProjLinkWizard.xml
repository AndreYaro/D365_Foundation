<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationProjLinkWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationProjLinkWizard extends SysWizard
{
    ProjTable               projTable;
    ProjWIPTable            projWIPTable;
    SalesQuotationTable     salesQuotationTable;

    NoYes                               transferActivityInfo;
    boolean                             answer;
    boolean                             createProjectEstimation;
    Hierarchy                           srcHierarchy;
    Map                                 activityNumberMapping;
    ForecastModelId         modelId;

    #DEFINE.FIRSTPAGE(1)
    #DEFINE.LINKTOPROJECT(2)
    #DEFINE.LINKTOEXISTINGPROJECT(3)
    #DEFINE.LINKTONEWPROJECT(4)
    #DEFINE.TRANSFERTOFORECAST(5)
    #DEFINE.TRANSFERITEMREQ(6)
    #DEFINE.LASTPAGE(7)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemDisplayStr(SalesQuotationProjLinkWizard), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countForecastTransactions</Name>
				<Source><![CDATA[
    NumberOfRecords countForecastTransactions(QuotationProjTransType    _quotationProjTransType, boolean _itemReq = false)
    {
        SalesQuotationLine  salesQuotationLine;
        NumberOfRecords     no;

        if (_quotationProjTransType == QuotationProjTransType::Item && _itemReq)
        {
            select count(RecId) from salesQuotationLine
                where salesQuotationLine.QuotationId   == this.parmSalesQuotationTable().QuotationId
                   && salesQuotationLine.ProjTransType == QuotationProjTransType::Item
                   && salesQuotationLine.Transferred2ItemReq == NoYes::No;

            no = salesQuotationLine.RecId;
        }
        else
        {
            select count(RecId) from salesQuotationLine
                where salesQuotationLine.QuotationId   == this.parmSalesQuotationTable().QuotationId
                    && salesQuotationLine.ProjTransType == _quotationProjTransType
                    && salesQuotationLine.Transferred2Forecast == NoYes::No;

            no = salesQuotationLine.RecId;
        }

        return no;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countTotal</Name>
				<Source><![CDATA[
    NumberOfRecords countTotal()
    {
        NumberOfRecords ret;

        if (formRun.linkToNewProject())
        {
            ret++;
        }

        if (formRun.transferToProject())
        {
            ret += this.countForecastTransactions(QuotationProjTransType::Hour);
            ret += this.countForecastTransactions(QuotationProjTransType::Expense);
            ret += this.countForecastTransactions(QuotationProjTransType::Item);
            ret += this.countForecastTransactions(QuotationProjTransType::Fee);
        }

        if (formRun.transferToProjectItemReq())
        {
            ret += this.countForecastTransactions(QuotationProjTransType::Item, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProject</Name>
				<Source><![CDATA[
    void createProject()
    {
        // <GIN>
        #ISOcountryRegionCodes
        // </GIN>

        ttsbegin;

        ProjTable newProjTable;
        newProjTable.initValue();

        newProjTable.Type                   = formRun.newProjType();
        newProjTable.type().initProjTable(newProjTable);

        newProjTable.ProjId = formRun.newProjId();

        newProjTable.ProjGroupId = formRun.newProjGroupId();
        ProjGroup projGroup = ProjGroup::find(newProjTable.ProjGroupId);
        newProjTable.initFromProjGroup(projGroup);

        newProjTable.Name                   = formRun.newProjName();

        newProjTable.ProjInvoiceProjId      = formRun.newProjInvoiceProjId();
        newProjTable.initFromInvoice(ProjInvoiceTable::find(newProjTable.ProjInvoiceProjId));

        newProjTable.CustAccount = formRun.newCustAccount();
        CustTable custTable      = CustTable::find(newProjTable.CustAccount);
        newProjTable.Email       = custTable.email();
        newProjTable.copyAdrFromQuotation(salesQuotationTable);

        if (!newProjTable.DeliveryLocation)
        {
            newProjTable.initFromCustTable(custTable);
        }

        newProjTable.ProjPriceGroup = salesQuotationTable.PriceGroupId;

        ProjCompletePrincip projCompletePrincip = ProjRevRecHelper::getCompletePrincipleForProjTable(newProjTable, false, true);
        
        if (formRun.createNewEstimateProject())
        {
            if (projCompletePrincip != ProjCompletePrincip::NoWIP)
            {
                projWIPTable.insert();
            }
        }

        if (projCompletePrincip != ProjCompletePrincip::NoWIP)
        {
            newProjTable.WIPProject = projWIPTable.ProjId;
        }

        //Transfer the  dimensions to the new project.
        newProjTable.DefaultDimension = salesQuotationTable.DefaultDimension;

        // Transfer the tax group to the new project.
        if (salesQuotationTable.TaxGroup)
        {
            newProjTable.TaxGroupId = salesQuotationTable.TaxGroup;
        }

        newProjTable.psaSchedCalendarId = formRun.newSchedCalendarId();
        newProjTable.PSASchedIgnoreCalendar = salesQuotationTable.PSASchedIgnoreCalendar;
        if (salesQuotationTable.psaEstProjStartDate)
        {
            newProjTable.psaSchedStartDate  = salesQuotationTable.psaEstProjStartDate;
            newProjTable.ProjectedStartDate = newProjTable.psaSchedStartDate;
        }

        if (salesQuotationTable.psaEstProjEndDate)
        {
            newProjTable.psaSchedEndDate    = salesQuotationTable.psaEstProjEndDate;
            newProjTable.ProjectedEndDate   = newProjTable.psaSchedEndDate;
        }
        newProjTable.psaSchedDuration       = salesQuotationTable.psaEstdProjDuration;

        if (newProjTable.validateWrite())
        {
            newProjTable.insert();

            this.parmProjTable(newProjTable);
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdparameters_IN::checkTaxParameters())
        {
            ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(newProjTable.ProjInvoiceProjId);
            TransTaxInformationHelper::copyTransTaxInformation(projInvoiceTable, newProjTable);
        }

        // Form tracking
        if (TaxIntegrationUtils::isFormTrackingEnabled_IN())
        {
            TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();
            if (transitDocManager.existsAnyTransitDocType() &&
                transitDocManager.existTransitRuleForTransType(tableNum(SalesQuotationTable)))
            {
                transitDocManager.transit(salesQuotationTable, newProjTable);
            }
        }
        // </GIN>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formStr(SalesQuotationProjLinkWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkConfirmationToProject</Name>
				<Source><![CDATA[
    void linkConfirmationToProject(ProjId              _projId,
                            ProjInvoiceProjId   _projInvoiceProjId)
    {
        CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;

        ttsbegin;
        select custQuotationConfirmSalesLink where custQuotationConfirmSalesLink.OrigQuotationId == salesQuotationTable.QuotationId;

        if (custQuotationConfirmSalesLink)
        {
            CustQuotationConfirmJour custQuotationConfirmJour = CustQuotationConfirmJour::findFromSalesQuotationQuotation(custQuotationConfirmSalesLink.QuotationConfirmId,true);
            if (custQuotationConfirmJour)
            {
                custQuotationConfirmJour.ProjIdRef           = _projId;
                custQuotationConfirmJour.ProjInvoiceProjId   = _projInvoiceProjId;

                custQuotationConfirmJour.doUpdate();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateProjectReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the project reference on <c>SalesQuotationTable</c> needs to be updated.
    /// </summary>
    /// <returns>
    /// true, if the <c>ProjRefId</c> field on <c>SalesQuotationTable</c> is empty; otherwise, false.
    /// </returns>
    protected boolean shouldUpdateProjectReference()
    {
        return !salesQuotationTable.ProjIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkQuotationToProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates project reference on <c>SalesQuotationTable</c> table buffer.
    /// </summary>
    /// <param name = "_projId">
    /// <c>ProjId</c> value to be updated on <c>SalesQuotationTable</c>.
    /// </param>
    /// <param name = "_projInvoiceProjId">
    /// <c>ProjInvoiceProjId</c> value to be updated on <c>SalesQuotationTable</c>.
    /// </param>
    void linkQuotationToProject(ProjId              _projId,
                            ProjInvoiceProjId   _projInvoiceProjId)
    {
        // Check if Project Id is just recently assigned in the wizard.
        if (this.shouldUpdateProjectReference())
        {
            ttsbegin;

            // If this quotation is marked for LG, transfer its bank docuemtn type and LG (if exists) to the new project.
            if (salesQuotationTable.isMarkedForBankLG())
            {
                ProjTable projTableLocal = ProjTable::find(_projId, true);

                // The "_projId" can be new project or exist project. LG is transferred only when it is NOT linked to LG.
                if (!projTableLocal.BankLGDocumentMap::isLinkedToGuarantee())
                {
                // Transfer Letter of Guarantee to project
                salesQuotationTable.BankLGDocumentMap::transferGuarantee(projTableLocal);

                    // Transfer bank document type
                    if (!projTableLocal.isMarkedForBankLG())
                    {
                        projTableLocal.BankDocumentType = salesQuotationTable.BankDocumentType;
                        projTableLocal.update();
                    }

                    salesQuotationTable.BankDocumentType = BankLGDocumentType::None;
                }
            }

            salesQuotationTable.initProjQuotationFromProject(_projId);

            salesQuotationTable.ProjIdRef           = _projId;
            salesQuotationTable.ProjInvoiceProjId   = _projInvoiceProjId;

            salesQuotationTable.doUpdate();

            if (Box::YesNo("@Proj:CopyDimensionsToQuotationLineDialog", DialogButton::Yes, "@SYS133410") == DialogButton::Yes)
            {
                SalesQuotationLine salesQuotationLineLoc;
                update_recordset salesQuotationLineLoc
                    setting DefaultDimension = salesQuotationTable.DefaultDimension
                    where salesQuotationLineLoc.QuotationId == salesQuotationTable.QuotationId;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRunValidationForEstimationProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the validation for estimation projects to be run.
    /// </summary>
    /// <returns>
    /// true, if the validation to create new estimation project needs to be run; otherwise, false.
    /// </returns>
    protected boolean shouldRunValidationForEstimationProject()
    {
        return formRun.createNewEstimateProject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDataForCreatingNewEstimationProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>ProjWIPTable</c> table buffer for creating a new estimation project. 
    /// </summary>
    /// <returns>
    /// true, if <c>ProjWIPTable</c> table buffer has all necessary value to create estimation projects; otherwise, false.
    /// </returns>
    protected boolean validateDataForCreatingNewEstimationProject()
    {
        boolean ret = true;

        if (projWIPTable.ControlId == '')
        {
            ret = checkFailed("@SYS4004702");
        }

        if (projWIPTable.PeriodId == '')
        {
            ret = checkFailed("@SYS4004703");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    void next()
    {
        // If 'Create estimate project' has been checked,
        // validate if an estimate project can be created with the values provided before moving to the next tab?
        if (this.curTab() == #LINKTONEWPROJECT && formRun.createNewEstimateProject())
        {
            ProjControlId controlId;
            ProjPeriodId periodId;

            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                ProjRevenueProfile projRevProfile = ProjRevRecHelper::getProfileForRevRecProject(ProjTable::find(formRun.newProjId()), ProjContractBillingMethod::FixedPrice);

                controlId = projRevProfile.CostTemplate;
                periodId = projRevProfile.PeriodId;
            }
            else
            {
                ProjGroup projGroup = ProjGroup::find(formRun.newProjGroupId());
                controlId = projGroup.ControlId;
                periodId = projGroup.PeriodId;
            }
            
            projWIPTable.clear();
            projWIPTable.ProjId = formRun.newProjId();
            projWIPTable.ControlId = controlId;
            projWIPTable.PeriodId = periodId;
            projWIPTable.Description = formRun.newProjName();

            if (!projWIPTable.validateWrite(false))
            {
                return;
            }
        }

        if (salesQuotationTable.ProjIdRef)
        {
            this.skipTab(#LINKTONEWPROJECT,      true);
        }
        else
        {
            this.skipTab(#LINKTOEXISTINGPROJECT, (formRun.linkToNewProject()));
            this.skipTab(#LINKTONEWPROJECT,      (formRun.linkToExistingProject()));
        }

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)) || salesQuotationTable.TransferredToForecast)
        {
            this.skipTab(#TRANSFERTOFORECAST, true);
        }

        if (!formRun.checkTransferItemsToItemReq() || !isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            this.skipTab(#TRANSFERITEMREQ, true);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            switch (this.curTab())
            {
                case #LINKTONEWPROJECT:

                    if (this.shouldRunValidationForEstimationProject())
                    {
                        formRun.parmOK(this.validateDataForCreatingNewEstimationProject());

                        if (formRun.parmOK())
                        {
                            super();
                        }
                    }
                    else
                    {
                        super();
                    }
                    break;

                default :
                    super();
                    break;
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumberMapping</Name>
				<Source><![CDATA[
    Map parmActivityNumberMapping(Map _activityNumberMapping = activityNumberMapping)
    {
        activityNumberMapping = _activityNumberMapping;

        return activityNumberMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnswer</Name>
				<Source><![CDATA[
    boolean parmAnswer(boolean _answer = answer)
    {
        answer = _answer;

        return answer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateProjectEstimation</Name>
				<Source><![CDATA[
    boolean parmCreateProjectEstimation(boolean _createProjectEstimation = createProjectEstimation)
    {
        createProjectEstimation = _createProjectEstimation;

        return createProjectEstimation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelId</Name>
				<Source><![CDATA[
    ForecastModelId parmModelId(ForecastModelId _modelId = modelId ? modelId : ProjParameters::find().ModelId)
    {           
        modelId = _modelId;

        return modelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    ProjTable parmProjTable(ProjTable   _projTable  = projTable)
    {
        projTable = _projTable;

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    SalesQuotationTable parmSalesQuotationTable(SalesQuotationTable    _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferActivityInfo</Name>
				<Source><![CDATA[
    NoYes parmTransferActivityInfo(NoYes _transferActivityInfo = transferActivityInfo)
    {
        transferActivityInfo = _transferActivityInfo;

        return transferActivityInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCheckExistABS</Name>
				<Source><![CDATA[
    public boolean psaCheckExistABS()
    {
        boolean            ret;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;
        PSAActivityEstimates psaActivityEstimates;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select HierarchyId, Name from srcHierarchy
            join HierarchyId, ParentElementNumber from hierarchyTreeTable
                where srcHierarchy.HierarchyId == hierarchyTreeTable.HierarchyId
            join HierarchyId, RefRecId, RefTableId from hierarchyLinkTable
                where hierarchyTreeTable.HierarchyId == hierarchyLinkTable.HierarchyId
                   && hierarchyTreeTable.ParentElementNumber
                   && hierarchyLinkTable.RefRecId == this.parmSalesQuotationTable().RecId
                   && hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable);

            if (!srcHierarchy)
            {
                HierarchyLinkTable   hierarchyLink;

                select firstonly ProjPlanHierarchyId from psaActivityEstimates
                exists join HierarchyId from hierarchyLink
                    where psaActivityEstimates.ProjPlanHierarchyId == hierarchyLink.HierarchyId &&
                          hierarchyLink.RefTableId == tableNum(SalesQuotationTable) &&
                          hierarchyLink.RefRecId == this.parmSalesQuotationTable().RecId;

                srcHierarchy.HierarchyId = psaActivityEstimates.ProjPlanHierarchyId;
            }
        }

        if (srcHierarchy.HierarchyId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCheckExistSoftCommitment</Name>
				<Source><![CDATA[
    public boolean psaCheckExistSoftCommitment()
    {
        return ResReservationFacade::checkExistSoftCommitmentForQuotation(this.parmSalesQuotationTable().QuotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaReleaseSoftCommitments</Name>
				<Source><![CDATA[
    public void psaReleaseSoftCommitments()
    {
        ResReservationFacade::releaseSoftCommitmentsForQuotation(this.parmSalesQuotationTable().QuotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaTransferActivityResourcesAndAssignments</Name>
				<Source><![CDATA[
    public void psaTransferActivityResourcesAndAssignments()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.psaTransferActivityResources();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaTransferActivityResources</Name>
				<Source><![CDATA[
    private void psaTransferActivityResources()
    {
        #TimeConstants

        ResProjTeamController projectTeamController = ResProjTeamController::getInstanceFromProjId(this.parmProjTable().ProjId);

        PSAProjSchedRole quotationActivityResource;
        QuotationId quotationId = this.parmSalesQuotationTable().QuotationId;

        Map activitiesMap = this.buildQuotationToProjectActivitiesyMap();

        while select quotationActivityResource
            where quotationActivityResource.QuotationId == quotationId
        {
            ActivityResourceRecid projectActivityResource = projectTeamController.add(
                                                                  quotationActivityResource.ResourceCategory,
                                                                  quotationActivityResource.PSARoleStartDate,
                                                                  quotationActivityResource.PSARoleEndDate,
                                                                  quotationActivityResource.Resource);

            this.psaTransferActivityResourceAssignments(quotationActivityResource.RecId, projectActivityResource, activitiesMap);

            if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
            {
                // Update ResRollup cache table for this activity resource assignment records.
                ResActivityResourceDetailView resourceDetilView;

                select ActivityResourceId from resourceDetilView
                    where resourceDetilView.ActivityResource == projectActivityResource;

                if (resourceDetilView)
                {
                    ResRollUpWriter::updateRollUpForSpecificActivityResourceId(
                        resourceDetilView.ActivityResourceId,
                        DateTimeUtil::newDateTime(quotationActivityResource.PSARoleStartDate, 0),
                        DateTimeUtil::newDateTime(quotationActivityResource.PSARoleEndDate, #LastSecondOfTheDay));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuotationToProjectActivitiesyMap</Name>
				<Source><![CDATA[
    private Map buildQuotationToProjectActivitiesyMap()
    {
        Map activitiesMap = new Map(Types::Int64, Types::Int64);

        ProjPlanVersion projPlanVerionQuote;
        ProjPlanVersion projPlanVerionProject;

        HierarchyTreeTable treeTableQuote;
        HierarchyTreeTable treeTableProject;

        HierarchyIdBase quoteHierarchyId = HierarchyLinkTable::findHierarchyId(this.parmSalesQuotationTable());

        ProjPlanVersionDetail latestDraftVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::Draft);
        HierarchyIdBase projHierarchyId = latestDraftVersionDetail.HierarchyId;

        ProjPlanVersionDetail oldPublishVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::PublishedOld);
        
        ProjHierarchyTaskId taskIdOffset;

        if (oldPublishVersionDetail)
        {
            taskIdOffset = ProjPlanVersion::getMaxTaskId(oldPublishVersionDetail.HierarchyId, false) - ProjPlanVersionDetail::rootTaskId();
        }

        while select treeTableQuote
            join projPlanVerionQuote
            join projPlanVerionProject
            join treeTableProject
                where treeTableQuote.RecId == projPlanVerionQuote.HierarchyTreeTableRefRecId
                    && treeTableProject.RecId == projPlanVerionProject.HierarchyTreeTableRefRecId
                    && (projPlanVerionQuote.HierarchyTaskId + taskIdOffset) == projPlanVerionProject.HierarchyTaskId
                    && projPlanVerionQuote.ParentHierarchyTaskId != 0
                    && projPlanVerionQuote.HierarchyId      == quoteHierarchyId
                    && projPlanVerionProject.HierarchyId    == projHierarchyId
        {
            activitiesMap.insert(treeTableQuote.RefRecId, treeTableProject.RefRecId);
        }

        return activitiesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuotationToProjectActivitiesNumberMap</Name>
				<Source><![CDATA[
    private void buildQuotationToProjectActivitiesNumberMap()
    {
        activityNumberMapping = new Map(Types::String, Types::String);

        ProjPlanVersion projPlanVerionQuote;
        ProjPlanVersion projPlanVerionProject;

        HierarchyTreeTable treeTableQuote;
        HierarchyTreeTable treeTableProject;

        HierarchyIdBase quoteHierarchyId = HierarchyLinkTable::findHierarchyId(this.parmSalesQuotationTable());

        ProjPlanVersionDetail latestDraftVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::Draft);
        HierarchyIdBase projHierarchyId = latestDraftVersionDetail.HierarchyId;

        ProjPlanVersionDetail oldPublishVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::PublishedOld);
        
        ProjHierarchyTaskId taskIdOffset;

        if (oldPublishVersionDetail)
        {
            taskIdOffset = ProjPlanVersion::getMaxTaskId(oldPublishVersionDetail.HierarchyId, false) - ProjPlanVersionDetail::rootTaskId();
        }

        while select RecId, RefRecId from treeTableQuote
            join HierarchyId, HierarchyTaskId, HierarchyTreeTableRefRecId from projPlanVerionQuote
            join HierarchyId, HierarchyTaskId, HierarchyTreeTableRefRecId from projPlanVerionProject
            join RecId, RefRecId from treeTableProject
                where treeTableQuote.RecId == projPlanVerionQuote.HierarchyTreeTableRefRecId
                    && treeTableProject.RecId == projPlanVerionProject.HierarchyTreeTableRefRecId
                    && (projPlanVerionQuote.HierarchyTaskId + taskIdOffset) == projPlanVerionProject.HierarchyTaskId
                    && projPlanVerionQuote.ParentHierarchyTaskId != 0
                    && projPlanVerionQuote.HierarchyId      == quoteHierarchyId
                    && projPlanVerionProject.HierarchyId    == projHierarchyId
        {
            smmActivities quoteActivity = smmActivities::findWithRecId(treeTableQuote.RefRecId);
            smmActivities ProjectActivity = smmActivities::findWithRecId(treeTableProject.RefRecId);
            activityNumberMapping.insert(quoteActivity.ActivityNumber, ProjectActivity.ActivityNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaTransferActivityResourceAssignments</Name>
				<Source><![CDATA[
    private void psaTransferActivityResourceAssignments(ActivityResourceRecid _quotationActivityResource, ActivityResourceRecid _projectActivityResource, Map _activitiesMap)
    {
        ResBooking   quotationBooking;
        ResBooking   projectBooking;

        ResUtil::skipDatabaseLogAndEvent(projectBooking);

        ActivityRecId rootProjActivity = ProjWBS::getRootActivityRecId(this.parmProjTable().ProjId);

        // Add project booking records from quotation records for the specified quotation activity resource.
        insert_recordset projectBooking(ActivityResource, Activity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
            select _projectActivityResource, rootProjActivity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear
            from quotationBooking
            where quotationBooking.ActivityResource == _quotationActivityResource;

        ResAssignment   quotationAssignment;
        ResAssignment   projectAssignment;

        ResUtil::skipDatabaseLogAndEvent(projectAssignment);

        MapEnumerator activitiesMapEnum = _activitiesMap.getEnumerator();

        // Add project assignment records from quotation records for the specified quotation activity resource by task activities.
        while (activitiesMapEnum.moveNext())
        {
            ActivityRecId currentQuotationActivity = activitiesMapEnum.currentKey();
            ActivityRecId currentProjectActivity = activitiesMapEnum.currentValue();
            
            insert_recordset projectAssignment(ActivityResource, Activity, CommitType,
                    Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
                select _projectActivityResource, currentProjectActivity, CommitType,
                    Start, End, Hour, Day, Week, Month, Quarter, HalfYear
                from quotationAssignment
                where quotationAssignment.ActivityResource == _quotationActivityResource
                    && quotationAssignment.Activity == currentQuotationActivity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaTransferQuotationABSToProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy quotation WBS to project WBS.
    /// </summary>
    /// <param name = "_projTable">This parameter will be used if the class variable <c>projTable</c> is not specified.</param>
    public void psaTransferQuotationABSToProject(ProjTable _projTable)
    {
        ProjTable destProjTable = projTable;
        if (!destProjTable && _projTable)
        {
            destProjTable = _projTable;
        }

        if (destProjTable)
        {
            ProjPlanVersionDetail latestDraftVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::Draft);
            ProjVersionId latestDraftVersionId = latestDraftVersionDetail.VersionId;
            ProjVersionId latestPublishedVersionId = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::PublishedCurrent).VersionId;
        
            HierarchyIdBase destHierarchyId = latestDraftVersionDetail.HierarchyId;
            boolean revertToDraft = true;

            // If the current WBS is in published state, then create a draft version first to allow the update of WBS. Then after WBS is transferred from quotation,
            // The WBS will be kept in published state.
            if (latestPublishedVersionId > latestDraftVersionId)
            {
                ProjPlanVersionsManager::createDraftFromPublishedVersion(projTable.ProjId, latestPublishedVersionId);
                latestDraftVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId, false, false, ProjPlanVersionType::Draft);
                latestDraftVersionId = latestDraftVersionDetail.VersionId;
                destHierarchyId = latestDraftVersionDetail.HierarchyId;
                revertToDraft = false;
            }
        
            // If destination hierarchy ID is not defined or the latest draft version is 0 or less, then this is a data corruption scenario.
            // In this case, no quotation WBS will be copied to project.
            if (destHierarchyId && latestDraftVersionId > 0)
            {
                ProjHierarchyTaskId rootHierarchyTaskId = ProjPlanVersion::getRootTask(destHierarchyId).HierarchyTaskId;
                ProjPlanVersionsManager::preImportHierarchy(srcHierarchy.HierarchyId, destHierarchyId, rootHierarchyTaskId);
                ProjPlanVersionsManager::importHierarchy(srcHierarchy.HierarchyId, destHierarchyId, rootHierarchyTaskId, false);

                // Publish this WBS so that it will add the tasks records to HierarchyTreeTable and smmActivities tables.
                ProjPlanVersionsManager::publishVersion(projTable.ProjId, latestDraftVersionId);

                if (revertToDraft)
                {
                    // After transferring from quotation to project, the WBS version will always be draft.
                    ProjPlanVersionsManager::createDraftFromPublishedVersion(projTable.ProjId, latestDraftVersionId);
                }

                // Transfer resource assignment info to project
                if (this.psaCheckExistSoftCommitment())
                {
                    this.psaTransferActivityResourcesAndAssignments();
                }

                // Update the project scheduling information.
                this.updateProjScheduleInfo(destHierarchyId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        formRun.endUpdate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTab</Name>
				<Source><![CDATA[
    void setTab(SysWizardCmd sysWizardCmd)
    {
        if (sysWizardCmd == SysWizardCmd::Next)
        {
            switch (this.curTab())
            {
                case #FIRSTPAGE                 :
                    break;

                case #LINKTOPROJECT             :
                    break;

                case #LINKTOEXISTINGPROJECT     :
                    break;

                case #LINKTONEWPROJECT          :
                    break;

                case #TRANSFERTOFORECAST        :
                    break;

                case #TRANSFERITEMREQ           :
                    break;

                case #LASTPAGE:
                    break;
            }
        }

        super(sysWizardCmd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferForecastToProject</Name>
				<Source><![CDATA[
    void transferForecastToProject()
    {
        SalesQuotationTransferToProject     salesQuotationTransferToProject = new SalesQuotationTransferToProject();

        this.initTransferForecastToProject(salesQuotationTransferToProject);
        salesQuotationTransferToProject.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferForecastToProject</Name>
				<Source><![CDATA[
    protected void initTransferForecastToProject(SalesQuotationTransferToProject _salesQuotationTransferToProject)
    {
        _salesQuotationTransferToProject.parmProjTable(this.parmProjTable());
        _salesQuotationTransferToProject.parmSalesQuotationTable(this.parmSalesQuotationTable());
        _salesQuotationTransferToProject.parmModelId(this.parmModelId());
        _salesQuotationTransferToProject.parmTransferActivityInfo(this.parmTransferActivityInfo());

        if (!activityNumberMapping)
        {
            this.buildQuotationToProjectActivitiesNumberMap();
        }

        _salesQuotationTransferToProject.parmActivityNumberMapping(this.parmActivityNumberMapping());

        _salesQuotationTransferToProject.initParameters(true,    // transfer hours to forecast
													    true,    // transfer expenses to forecast
													    true,    // transfer fee to forecast
													    true,    // items to forecast
													    false);  // item requirement
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferItemReq</Name>
				<Source><![CDATA[
    void transferItemReq()
    {
        SalesQuotationTransferToProject salesQuotationTransferToProject = new SalesQuotationTransferToProject();

        this.initTransferItemReq(salesQuotationTransferToProject);
        salesQuotationTransferToProject.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferItemReq</Name>
				<Source><![CDATA[
    protected void initTransferItemReq(SalesQuotationTransferToProject _salesQuotationTransferToProject)
    {
        _salesQuotationTransferToProject.parmProjTable(this.parmProjTable());
        _salesQuotationTransferToProject.parmSalesQuotationTable(this.parmSalesQuotationTable());
        _salesQuotationTransferToProject.parmModelId(this.parmModelId());

        if (!activityNumberMapping)
        {
            this.buildQuotationToProjectActivitiesNumberMap();
        }
        _salesQuotationTransferToProject.parmTransferActivityInfo(this.parmTransferActivityInfo());
        _salesQuotationTransferToProject.parmActivityNumberMapping(this.parmActivityNumberMapping());

        _salesQuotationTransferToProject.initParameters(false,    // transfer hours to forecast
													    false,    // transfer expenses to forecast
													    false,    // transfer fee to forecast
													    false,    // items to forecast
													    true);    // item requirement
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the project role for a given project ID.
    /// </summary>
    /// <param name="projId">
    /// The project ID related to the roles to be updated.
    /// </param>
    /// <remarks>
    /// If the project role does not exit, a default role will be created.
    /// </remarks>
    public void updateProjectRole(ProjId projId)
    {
        PSAProjSchedRole            psaProjRole;
        //---update the start/end date on project role
        ttsBegin;
        while select forUpdate psaProjRole
            where psaProjRole.ProjId == projId
        {
            psaProjRole.PSARoleStartDate = ActivityResourceFacade::getEarliestReservationDate(psaProjRole.RecId);
            psaProjRole.PSARoleEndDate   = ActivityResourceFacade::getLatestReservationDate(psaProjRole.RecId);

            psaProjRole.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjScheduleInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the project schedule information for a given hierarchy ID.
    /// </summary>
    /// <param name="hierarchyId">
    /// The hierarchy ID related to the project schedule entries to be updated.
    /// </param>
    public void updateProjScheduleInfo(HierarchyIdBase hierarchyId)
    {
        smmActivityNumber activityNumber = HierarchyTreeTable::findRootLevelNode(hierarchyId).activityNumber();

        PSAActivitySetup psaActivitySetup = PSAActivitySetup::findActivityNumber(activityNumber);

        if (psaActivitySetup)
        {
            ProjTable locProjTable = ProjTable::find(projTable.ProjId, true);

            ttsBegin;
            locProjTable.PSASchedEffort += psaActivitySetup.effort;
            locProjTable.PSASchedScheduled = ProjActivityCapacity::getProjStatus(locProjTable.ProjId);

            if (psaActivitySetup.PSASchedStart < locProjTable.PSASchedStartDate)
            {
                locProjTable.PSASchedStartDate = psaActivitySetup.PSASchedStart;
            }

            if (psaActivitySetup.PSASchedEnd > locProjTable.PSASchedEndDate)
            {
                locProjTable.PSASchedEndDate = psaActivitySetup.PSASchedEnd;
            }

            locProjTable.PSASchedDuration = WorkCalendarCalculator::calcDuration(locProjTable.PSASchedStartDate, locProjTable.PSASchedEndDate, locProjTable.PSASchedCalendarId);

            locProjTable.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferredToProject</Name>
				<Source><![CDATA[
    void updateTransferredToProject(boolean _transferredToForecast, boolean _transferredItemReq)
    {
        if (_transferredToForecast)
        {
            salesQuotationTable.TransferredToForecast = NoYes::Yes;
            salesQuotationTable.ModelId               = this.parmModelId();
        }

        if (_transferredItemReq)
        {
            salesQuotationTable.TransferredToItemReq = NoYes::Yes;
        }

        ttsBegin;

        salesQuotationTable.doUpdate();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNewProjId</Name>
				<Source><![CDATA[
    static boolean checkNewProjId(ProjId    _projIdNew)
    {
        boolean    ret = true;
        ProjId     projHier = _projIdNew;

        if (ProjTable::exist(_projIdNew))
        {
            ret = checkFailed(strFmt("@SYS19470",_projIdNew));
        }

        if (ret)
        {
            while (projHier)
            {
                projHier    = subStr(projHier,1,strLen(projHier)-1);
                if (ProjTable::exist(projHier))
                {
                    ret = checkFailed (strFmt("@SYS53140",projHier));
                }
            }
        }

        if (ret && ProjTable::like(_projIdNew+'*'))
        {
            ret = checkFailed (strFmt("@SYS53140",ProjTable::findLike(_projIdNew+'*').ProjId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SalesQuotationProjLinkWizard    wizard              = new SalesQuotationProjLinkWizard();

        if (args && args.record())
        {
            switch (args.record().TableId)
            {
                case tableNum(SalesQuotationTable)      :
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(args.record().RecId, true);
                    wizard.parmSalesQuotationTable(salesQuotationTable);
                    break;

                default                                 :
                    throw error("@SYS84622");
            }
        }
        else
        {
            throw error("@SYS84622");
        }

        if (wizard.prompt())
        {
            wizard.run();

            if (FormDataUtil::getFormDataSource(args.record()))
            {
                FormDataSource salesQuotationTableDatasource = FormDataUtil::getFormDataSource(args.record());
                salesQuotationTableDatasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>