<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollW2ReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollW2ReconciliationDP</c> class is the Report Data Provider class for the <c>PayrollW2Reconciliation</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PayrollW2Reconciliation)),
    SRSReportParameterAttribute(classStr(PayrollW2ReconciliationContract))
]
class PayrollW2ReconciliationDP extends SRSReportDataProviderPreProcessTempDB
{
    PayrollW2ReconciliationTmp      payrollW2ReconciliationTmp;
    PayrollW2ReconciliationTmp      payrollW2ReconciliationTmpFICA;
    PayrollTaxTransactionHistoryUnion   taxTransactionHistory;
    PayrollTaxCode                  taxCode;
    PayrollPayStatementTaxLine      payrollPayStatementTaxLine;
    HcmPersonIdentificationNumber   personIdentificationNumber;
    HcmWorker                       hcmWorker;
    DirPartyTable                   dirPartyTable;
    DirPersonName                   dirPersonName;
    date                            startDate;
    date                            endDate;
    PayrollTaxYear                  w2Year;
    boolean                         includeSocialSecurityNumber;
    PayrollTaxCodeId                federalIncomeTaxCode;
    PayrollTaxCodeId                ficaIncomeTaxCode;
    PayrollPayStatementTotals       payStatementTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPayrollW2ReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>PayrollW2ReconciliationTmp</c> temp table.
    /// </summary>
    /// <returns>
    /// Data from table <c>PayrollW2ReconciliationTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PayrollW2ReconciliationTmp))
    ]
    public PayrollW2ReconciliationTmp getPayrollW2ReconciliationTmp()
    {
        select payrollW2ReconciliationTmp;

        return payrollW2ReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts data into the temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        DirPartyName personName;
        PayrollTaxExternalReporting externalReporting;
        PayrollTaxEngineTaxCodeForSymmetry taxCodeForSymmetry;

        if (dirPersonName.MiddleName)
        {
            personName = dirPersonName.FirstName + " " + subStr(dirPersonName.MiddleName, 1, 1) + " " + dirPersonName.LastName;
        }
        else
        {
            personName = dirPersonName.FirstName + " " + dirPersonName.LastName;
        }

        payrollW2ReconciliationTmp.clear();

        payrollW2ReconciliationTmp.Worker = hcmWorker.RecId;
        payrollW2ReconciliationTmp.PersonnelNumber = hcmWorker.PersonnelNumber;
        payrollW2ReconciliationTmp.IdentificationNumber = personIdentificationNumber.IdentificationNumber;

        payrollW2ReconciliationTmp.Name = personName;
        payrollW2ReconciliationTmp.GrossWages = taxTransactionHistory.GrossWages;
        payrollW2ReconciliationTmp.GrossSubjectWages = taxTransactionHistory.GrossSubjectWages;
        payrollW2ReconciliationTmp.SubjectWages = taxTransactionHistory.SubjectWages;

        if (taxCode.Type != PayrollTaxCodeType::FIT
            && taxCode.Type != PayrollTaxCodeType::FICA
            && taxCode.Type != PayrollTaxCodeType::MEDI
            && taxCode.Type != PayrollTaxCodeType::MEDI2
            && taxCode.Type != PayrollTaxCodeType::SIT)
        {
            select firstonly validTimeState(endDate) W2Box20Label, W2Box20Other from externalReporting where externalReporting.PayrollTaxCode == taxCode.RecId;

            switch (externalReporting.W2Box20Label)
            {
                case PayrollW2Box20Label::Other:
                    payrollW2ReconciliationTmp.TaxCodeDescription = strFmt("%1 (%2)", taxCode.Description, externalReporting.W2Box20Other);
                    break;

                case PayrollW2Box20Label::PAPoliticalSubDivision:
                    payrollW2ReconciliationTmp.TaxCodeDescription = strFmt("%1 (%2)", taxCode.Description, subStr(taxTransactionHistory.PoliticalSubDivisionId, 1, 2));
                    break;

                case PayrollW2Box20Label::TaxCodeDescription:
                    payrollW2ReconciliationTmp.TaxCodeDescription = taxCode.Description;
                    break;

                case PayrollW2Box20Label::None:
                case PayrollW2Box20Label::NotSelected:
                default:
                    // If no box 20 label is set, this tax should not be written to the temp table
                    return;
            }
        }
        else
        {
            if (taxCode.Type == PayrollTaxCodeType::SIT)
            {
                taxCodeForSymmetry = PayrollTaxEngineTaxCode::findByPayrollTaxCode(TaxCode.RecId);

                if (PayrollTaxEngineUtil::hasNoStateIncomeTax(str2int(subStr(taxCodeForSymmetry.Code, 1, 2))))
                {
                    // Do not write SIT tax code for states without SIT taxes to the temp table
                    return;
                }
            }

            // For FIT, FICA, MEDI, MEDI2, and SIT taxes, the tax description should simply be displayed
            payrollW2ReconciliationTmp.TaxCodeDescription = taxCode.Description;
        }

        payrollW2ReconciliationTmp.TaxCode = taxCode.Code;
        payrollW2ReconciliationTmp.CalculatedTaxAmount = payStatementTotals.calcTaxCodeTotalForDateRangeStatus(
                                                                                0, // pay statement to exclude
                                                                                taxCode.RecId,
                                                                                hcmWorker.RecId,
                                                                                startDate,
                                                                                endDate,
                                                                                PayrollPaymentStatus::PaymentIssued,
                                                                                false);

        payrollW2ReconciliationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                               query;
        QueryRun                            queryRun;
        QueryBuildRange                     dateRange;
        PayrollW2ReconciliationContract     contract = this.parmDataContract() as PayrollW2ReconciliationContract;
        TransDate                           reportDate;
        HcmIdentificationTypeRecId          identificationTypeRecId = HcmSharedParameters::find().ssnIdentificationType;

        this.setUserConnection(payrollW2ReconciliationTmp);

        includeSocialSecurityNumber = contract.parmIncludeSocialSecurityNumber();
        w2Year = contract.parmW2Year();

        reportDate = mkDate(1,1,w2Year);
        startDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), reportDate);
        endDate = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), reportDate);

        query = this.parmQuery();

        dateRange = query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).findRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate));
        dateRange.value(SysQuery::value(startDate) + '..' + SysQuery::value(endDate));

        queryRun = new QueryRun(query);

        payStatementTotals = new PayrollPayStatementTotals();

        while (queryRun.next())
        {
            taxTransactionHistory = queryRun.get(tableNum(PayrollTaxTransactionHistoryUnion)) as PayrollTaxTransactionHistoryUnion;
            taxCode = queryRun.get(tableNum(PayrollTaxCode)) as PayrollTaxCode;
            dirPersonName = queryRun.get(tableNum(DirPersonName)) as DirPersonName;
            hcmWorker = queryRun.get(tableNum(HcmWorker)) as HcmWorker;

            // The PayStatement field is a count in this query
            if (taxTransactionHistory.PayStatement > 0)
            {
                // The worker has issued pay statements that are not reversed or manually added tax lines
                if (includeSocialSecurityNumber)
                {
                    personIdentificationNumber = HcmPersonIdentificationNumber::findByPersonAndType(hcmWorker.Person, identificationTypeRecId);
                }

                this.insertIntoTempTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        UserConnection connection = this.parmUserConnection();

        if (connection)
        {
            _common.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>