<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgStampJournalCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgStampJournalCalculate</c> class calculates the registrations for workers.
/// </summary>
public final class JmgStampJournalCalculate
{
    JmgStampJournalTable    jmgStampJournalTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJmgStampJournalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final JmgStampJournalTable parmJmgStampJournalTable(JmgStampJournalTable _jmgStampJournalTable = jmgStampJournalTable)
    {
        JmgStampJournalTable = _jmgStampJournalTable;
        return JmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>JmgStampJournalCalculate</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>JmgStampJournalCalculate</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalCalculate construct()
    {
        return new JmgStampJournalCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JmgStampJournalCalculate</c> class.
    /// </summary>
    /// <param name = "_jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>JmgStampJournalCalculate</c> class instance.
    /// </returns>
    [Hookable(false)]
    public static JmgStampJournalCalculate newFromJournalTable(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgStampJournalCalculate jmgStampJournal = JmgStampJournalCalculate::construct();

        jmgStampJournal.parmJmgStampJournalTable(_jmgStampJournalTable);
        return jmgStampJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from a <c>JmgStampJournalApprove</c> object.
    /// </summary>
    /// <param name = "_approve">
    /// A <c>JmgStampJournalApprove</c> object.
    /// </param>
    public void initializeFromApprove(JmgStampJournalApprove _approve)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal should be approved.
    /// </summary>
    /// <returns>
    /// true if the journal should be approved; otherwise, false.
    /// </returns>
    protected boolean mustApprove()
    {
        return !jmgStampJournalTable.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLogBookQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>Query</c> object for selecting <c>JmgStampJournalTrans</c> records.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> object.
    /// </returns>
    protected Query buildLogBookQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceJournalTrans = query.addDataSource(tableNum(JmgStampJournalTrans));

        queryBuildDataSourceJournalTrans.update(true);
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, Worker)).value(queryValue(jmgStampJournalTable.Worker));
        queryBuildDataSourceJournalTrans.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryValue(jmgStampJournalTable.ProfileDate));

        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, Worker));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, ProfileDate));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, StartDate));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, StartTime));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, StopDate));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, StopTime));
        queryBuildDataSourceJournalTrans.addOrderByField(fieldNum(JmgStampJournalTrans, JourRegType));

        queryBuildDataSourceJournalTrans.indexIsHint(true);
        queryBuildDataSourceJournalTrans.addSortIndex(indexNum(JmgStampJournalTrans, EmplProfDateIdx));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInitStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgStampJournalTrans</c> record before calculation.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record which is the parent of the current record.
    /// </param>
    protected void calcInitStamp(JmgStampJournalTrans _jmgStampJournalTrans, JmgStampJournalTable _jmgStampJournalTable = null)
    {
        _jmgStampJournalTrans.calcInitStamp(_jmgStampJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCheckStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>JmgStampJournalTrans</c> record is ready for calculation.
    /// </summary>
    /// <param name="_jmgProfiles">
    /// The <c>JmgProfiles</c> object that is running the calculation.
    /// </param>
    /// <param name="_chkStampErr">
    /// A Boolean value that specifies whether an error has been detected on a previous registration.
    /// </param>
    /// <returns>
    /// true if the <c>JmgStampJournalTrans</c> record is ready for calculation and no previous error has
    /// been detected; otherwise, false.
    /// </returns>
    protected boolean calcCheckStamp(JmgStampJournalTrans _jmgStampJournalTrans, JmgProfiles _jmgProfiles, boolean _chkStampErr = false)
    {
        return _jmgStampJournalTrans.calcCheckStamp(_jmgProfiles, _chkStampErr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnterTimeGapsAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to enter time gaps absence.
    /// </summary>
    /// <returns>
    /// true if needs to enter time gaps absence; otherwise false.
    /// </returns>
    protected boolean mustEnterTimeGapsAbsence()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterTimeGapsAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds time gaps in the internal event table.
    /// </summary>
    /// <param name="_jmgProfiles">
    /// The <c>JmgProfiles</c> object that is running the calculation.
    /// </param>
    protected void enterTimeGapsAbsence(JmgProfiles _jmgProfiles)
    {
        if (this.mustEnterTimeGapsAbsence())
        {
            _jmgProfiles.enterTimeGapsAbsence(jmgStampJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJmgProfiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgProfiles</c> object.
    /// </summary>
    /// <param name="isSimulation">
    /// A Boolean value that specifies whether a simulated calculation must be performed.
    /// </param>
    /// <param name="simEndDate">
    /// The end date of a simulated calculation.
    /// </param>
    /// <param name="simEndTime">
    /// The end time of a simulated calculation.
    /// </param>
    /// <returns>
    /// The <c>JmgProfiles</c> object.
    /// </returns>
    protected JmgProfiles initializeJmgProfiles(
        boolean     _isSimulation    = false,
        StartDate   _simEndDate      = dateNull(),
        JmgSeconds  _simEndTime      = 0)
    {
        return new JmgProfiles(false, _isSimulation, _simEndDate, _simEndTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatuses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal tables status fields.
    /// </summary>
    /// <param name = "_jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record buffer.
    /// </param>
    /// <param name = "_jmgProfiles">
    /// A <c>JmgProfiles</c> object.
    /// </param>
    protected void updateStatuses(
        JmgStampJournalTable _jmgStampJournalTable,
        JmgProfiles _jmgProfiles)
    {
        JmgStampJournalTrans jmgStampJournalTrans;

        _jmgProfiles.bundleSlizeTime(jmgStampJournalTable);
        _jmgProfiles.slizeProfileFlexMinus(jmgStampJournalTable);
        _jmgProfiles.sumerizeCalc(jmgStampJournalTable);

        if (! _jmgProfiles.simulationMode())
        {
            this.populateStatuses(_jmgStampJournalTable, NoYes::Yes, NoYes::No, NoYes::No);
        }
        else
        {
            this.populateStatuses(_jmgStampJournalTable, NoYes::No, NoYes::No, NoYes::No, "@SYS38458", 0);
        }

        // Delete absence records and system waiting records with no time on them.
        delete_from jmgStampJournalTrans
                where jmgStampJournalTrans.Worker       == _jmgStampJournalTable.Worker                                                      &&
                      jmgStampJournalTrans.ProfileDate  == _jmgStampJournalTable.ProfileDate                                                 &&
                      (jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::Absence                                      ||
                       jmgStampJournalTrans.JobId       == JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect))    &&
                      jmgStampJournalTrans.Seconds      == 0;

        while select forUpdate jmgStampJournalTrans
                where jmgStampJournalTrans.Worker       == _jmgStampJournalTable.Worker                                                      &&
                      jmgStampJournalTrans.ProfileDate  == _jmgStampJournalTable.ProfileDate                                                 &&
                      jmgStampJournalTrans.JourRegType  == JmgJourRegTypeEnum::MrpProcess
        {
            if (!jmgStampJournalTrans.OriginalTransaction)
            {
                if (JmgStampJournalTransProdTransferFlight::instance().isEnabled()
                    && jmgStampJournalTrans.isTransactionNewLog())
                {
                    // it is supposed production time has not been posted, so it should be processed as a new to avoid incorrect reverse
                    jmgStampJournalTrans.updateOriginalTransaction();
                    JmgCalcApproveForm::construct().transactionInserted(jmgStampJournalTrans);
                }
                else
                {
                    jmgStampJournalTrans.updateOriginalTransaction();
                    JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStatuses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the status fields on the journal table.
    /// </summary>
    /// <param name = "_jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record buffer.
    /// </param>
    /// <param name = "_calculated">
    /// A Boolean value that specifies the new calculation value.
    /// </param>
    /// <param name = "_approved">
    /// A Boolean value that specifies the new approved value.
    /// </param>
    /// <param name = "_transferred">
    /// A Boolean value that specifies the new transferred value.
    /// </param>
    /// <param name = "_error">
    /// A <c>Log</c> value.
    /// </param>
    /// <param name = "_calculatedByWorker">
    /// An <c>HcmWorkerRecId</c> value.
    /// </param>
    protected void populateStatuses(
        JmgStampJournalTable    _jmgStampJournalTable,
        NoYes                   _calculated,
        NoYes                   _approved,
        NoYes                   _transferred,
        Log                     _error = "",
        JmgWorkerRecId          _calculatedByWorker = HcmWorker::userId2Worker(curUserId()))
    {
        _jmgStampJournalTable.Calculated         = _calculated;
        _jmgStampJournalTable.Approved           = _approved;
        _jmgStampJournalTable.Transferred        = _transferred;
        _jmgStampJournalTable.CalculatedByWorker = _calculatedByWorker;
        _jmgStampJournalTable.setError(_error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registrations that are associated to the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="isSimulation">
    /// A Boolean value that specifies whether a simulated calculation must be performed.
    /// </param>
    /// <param name="simEndDate">
    /// The end date of a simulated calculation.
    /// </param>
    /// <param name="simEndTime">
    /// The end time of a simulated calculation.
    /// </param>
    /// <remarks>
    /// A simulated calculation performs a calculation as though the worker stopped working at the
    /// specified date and time.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to calculate registrations on a future profile date.
    /// </exception>
    public void run(
        boolean     _isSimulation    = false,
        StartDate   _simEndDate      = dateNull(),
        JmgSeconds  _simEndTime      = 0)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgProfiles             jmgProfiles;

        boolean                 chkStampErr;
        boolean                 chkProfileErr;
        boolean                 chkEventCodeErr;
        boolean                 chkEventCodeComboErr;
        Log                     eventCodeComboErr;

        jmgProfiles = this.initializeJmgProfiles(_isSimulation, _simEndDate, _simEndTime);
        if (!this.mustApprove())
        {
            return;
        }

        if (jmgStampJournalTable.ProfileDate > JmgProfileSeconds::getSysDate())
        {
            throw error("@SYS41405");
        }

        JmgParameters::checkSFCSetupOK();

        ttsbegin;

        setPrefix(#PreFixField(jmgStampJournalTable, Worker));

        if (!JmgProfileDay::find(jmgStampJournalTable.Profile, JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate)).standardTimeSecondsDay())
        {
            jmgStampJournalTable.deleteTransactionsGeneratedByCalculationAndBeforeLastCheckout();
            this.updateAbsenceTime();
        }

        jmgStampJournalTable.resetValues();

        jmgProfiles.loadEventCodes(jmgStampJournalTable);

        jmgProfiles.getProfile(jmgStampJournalTable.Profile,JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate), jmgStampJournalTable);

        jmgProfiles.initStampJournalTable(jmgStampJournalTable);

        chkProfileErr       = (jmgProfiles.isFlexProfile() && (jmgStampJournalTable.FlexProfile == NoYes::No));

        chkStampErr         = false;

        if (jmgStampJournalTable.Locked == NoYes::Yes)
        {
            jmgStampJournalTable.setError(strFmt("@SYS21617",strFmt("@SYS53184",HcmWorker::find(jmgStampJournalTable.Worker).PersonnelNumber, date2StrUsr(jmgStampJournalTable.ProfileDate, DateFlags::FormatAll))));
            jmgStampJournalTable.update();
            ttscommit;
            return;
        }

        QueryRun queryRun = new QueryRun(this.buildLogBookQuery());
        while (queryRun.next())
        {
            jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));

            setPrefix(#PreFixField(jmgStampJournalTrans, JobId));
            
            this.calcInitStamp(jmgStampJournalTrans, jmgStampJournalTable);

            chkStampErr = this.calcCheckStamp(jmgStampJournalTrans, jmgProfiles,chkStampErr);

            if (!chkStampErr)
            {
                if (jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::SignIn)
                {
                    jmgProfiles.setTmpJobIdAbs(jmgStampJournalTrans.JobIDAbs, jmgStampJournalTrans);
                }

                jmgProfiles.chkTimeGaps(jmgStampJournalTable, jmgStampJournalTrans);

                if (jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::SignOut)
                {
                    jmgProfiles.setTmpJobIdAbs(jmgStampJournalTrans.JobIDAbs, jmgStampJournalTrans);
                }
            }

            jmgProfiles.setSignInOutTransId(jmgStampJournalTrans);

            jmgStampJournalTrans.update();
            JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);

            if (! ((jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::Absence)         ||
                  ((jmgStampJournalTrans.JourRegType    == JmgJourRegTypeEnum::BreakReg) &&
                   !JmgBreakRegistrationsFlight::instance().isEnabled())   ||
                   ((jmgStampJournalTrans.JourRegType   == JmgJourRegTypeEnum::IndActivity) &&
                    (jmgStampJournalTrans.JobId         == JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect)))))
            {
                jmgProfiles.bundleAddStack(jmgStampJournalTrans);
            }

            if (jmgStampJournalTrans.Log)
            {
                chkStampErr = true;
            }

            jmgProfiles.setTmpvariables(jmgStampJournalTrans);
        }

        jmgProfiles.loadBreaks(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate);

        if (!jmgProfiles.signOutStatus())
        {
            jmgProfiles.setClockInOutErr(true);
        }

        if (!(jmgProfiles.chkError(chkStampErr,chkProfileErr)))
        {
            chkEventCodeErr = ! JmgEventCtrl::isEventCodeApproved(jmgStampJournalTable.Worker,jmgStampJournalTable.ProfileDate);
        }

        // Check the switch codes.
        [chkEventCodeComboErr, eventCodeComboErr] = this.validateSwitchCodes();
        chkEventCodeComboErr    = !chkEventCodeComboErr;
        chkEventCodeErr         = chkEventCodeErr || chkEventCodeComboErr;

        jmgProfiles.handleNormTime(jmgStampJournalTable);

        this.enterTimeGapsAbsence(jmgProfiles);

        if (jmgProfiles.chkError(chkStampErr,chkProfileErr,chkEventCodeErr))
        {
            jmgStampJournalTable.Calculated     = NoYes::No;
            jmgStampJournalTable.Approved       = NoYes::No;
            jmgStampJournalTable.Transferred    = NoYes::No;
            jmgStampJournalTable.CalculatedByWorker = 0;
            JmgStampJournalCalculateErrorLogParameters errorLogParameters = this.instantiateJmgStampJournalCalculateErrorLogParameters(chkProfileErr, chkStampErr, chkEventCodeComboErr, eventCodeComboErr, chkEventCodeErr, jmgProfiles);
            jmgStampJournalTable.setError(this.errorLog(errorLogParameters));
        }
        else
        {
            this.updateStatuses(jmgStampJournalTable, jmgProfiles);
        }

        JmgPieceRateCalc::calcPieceRateFromStampTable(jmgStampJournalTable);

        jmgStampJournalTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateJmgStampJournalCalculateErrorLogParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>JmgStampJournalCalculateErrorLogParameters</c> parameter class instance.
    /// </summary>
    /// <param name = "_chkProfileErr">A boolean value of profil error.</param>
    /// <param name = "_chkStampErr">A boolean value of stamp error.</param>
    /// <param name = "_chkEventCodeComboErr">A boolean value of event code combo error.</param>
    /// <param name = "_eventCodeComboErr">A log of event code error.</param>
    /// <param name = "_chkEventCodeErr">A boolean value of event code error.</param>
    /// <param name = "_jmgProfiles">The instance of <c>JmgProfiles</c> class.</param>
    /// <returns>The instance of the <c>JmgStampJournalCalculateErrorLogParameters</c> class.</returns>
    private JmgStampJournalCalculateErrorLogParameters instantiateJmgStampJournalCalculateErrorLogParameters(
        boolean     _chkProfileErr,
        boolean     _chkStampErr,
        boolean     _chkEventCodeComboErr,
        Log         _eventCodeComboErr,
        boolean     _chkEventCodeErr,
        JmgProfiles _jmgProfiles)
    {
        JmgStampJournalCalculateErrorLogParameters errorLogParameters = JmgStampJournalCalculateErrorLogParameters::construct();

        errorLogParameters.parmCheckProfileError(_chkProfileErr);
        errorLogParameters.parmCheckStampError(_chkStampErr);
        errorLogParameters.parmCheckEventCodeComboError(_chkEventCodeComboErr);
        errorLogParameters.parmEventCodeComboError(_eventCodeComboErr);
        errorLogParameters.parmCheckEventCodeError(_chkEventCodeErr);
        errorLogParameters.parmJmgProfiles(_jmgProfiles);

        return errorLogParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates an error log.
    /// </summary>
    /// <param name = "_errorLogParameters">
    /// An instance of the <c>JmgStampJournalCalculateErrorLogParameters</c> class.
    /// </param>
    /// <returns>
    /// The error log value.
    /// </returns>
    protected Log errorLog(JmgStampJournalCalculateErrorLogParameters _errorLogParameters)
    {
        return _errorLogParameters.parmCheckProfileError()                       ? "@SYS38614" :
               _errorLogParameters.parmCheckStampError()                         ? (jmgStampJournalTable.Log != '' ? jmgStampJournalTable.Log : "@SYS38456") :
               _errorLogParameters.parmCheckEventCodeComboError()                ? _errorLogParameters.parmEventCodeComboError() :
               _errorLogParameters.parmCheckEventCodeError()                     ? "@SYS39351" :
               _errorLogParameters.parmJmgProfiles().chkChronologyErr()          ? "@SYS38452" :
               _errorLogParameters.parmJmgProfiles().chkTransIdErr()             ? "@SYS38453" :
               _errorLogParameters.parmJmgProfiles().chkAbsenceOrFlexConfigErr() ? strFmt("@SCM:AbsenceOrFlexConfigError", "@SCM:AutoInsertFlexLabel", "@SCM:AbsenceJobIDFieldLabel", "@SYS38421") :
               _errorLogParameters.parmJmgProfiles().chkAbsenceErr()             ? "@SYS38457" :
               _errorLogParameters.parmJmgProfiles().chkClockInOutErr()          ? (_errorLogParameters.parmJmgProfiles().signInStatus() ? "@SYS39090" : "@SYS39095") :  "@SYS38456";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSwitchCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that switch code registrations are correctly approved.
    /// </summary>
    /// <returns>
    /// A container that has a Boolean value and a log text.
    /// </returns>
    /// <remarks>
    /// The Boolean value is set to true if the switch code registrations are validated successfully;
    /// otherwise, false.
    /// </remarks>
    public container validateSwitchCodes()
    {
        Array eventCodes;
        JmgEventCtrl jmgEventCtrl;
        int i;
        int j;
        JmgEventCode currentEventCode;
        eventCodes = new Array(Types::String);
        while select EventCode from jmgEventCtrl
            where jmgEventCtrl.Worker == jmgStampJournalTable.Worker &&
                  jmgEventCtrl.ProfileDate == jmgStampJournalTable.ProfileDate
        {
            eventCodes.value(eventCodes.lastIndex() + 1, jmgEventCtrl.EventCode);
        }

        for (i = 1; i <= eventCodes.lastIndex(); i++)
        {
            currentEventCode = eventCodes.value(i);
            for (j = 1; j <= eventCodes.lastIndex(); j++)
            {
                if (j != i && !JmgIllegalEventCodeCombination::combinationAllowed(currentEventCode, eventCodes.value(j)))
                {
                    return [false, strFmt("@SYS39756", currentEventCode, eventCodes.value(j))];
                }
            }
        }
        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAbsenceTime</Name>
				<Source><![CDATA[
    public void updateAbsenceTime()
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampJournalTrans    jmgStampJournalTransNonAbsence;
        JmgStampJournalTable    jmgStampJournalTableLocal;
        
        // If there are not other entries other than Absence entry, then fetch the Absence record.
        select firstOnly forUpdate jmgStampJournalTrans
                where jmgStampJournalTrans.ProfileDate  == jmgStampJournalTable.ProfileDate
                    && jmgStampJournalTrans.Worker      == jmgStampJournalTable.Worker
                    && jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::Absence
                notexists join jmgStampJournalTransNonAbsence
                    where jmgStampJournalTransNonAbsence.ProfileDate    == jmgStampJournalTable.ProfileDate
                        && jmgStampJournalTransNonAbsence.Worker        == jmgStampJournalTable.Worker
                        && jmgStampJournalTransNonAbsence.JourRegType   != JmgJourRegTypeEnum::Absence;
        
        if (jmgStampJournalTrans)
        {
            jmgProfileDay jmgProfileDay = JmgProfileDay::find(jmgStampJournalTable.Profile, JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate));
            JmgProfileOverride jmgProfileOverride = JmgProfileOverride::find(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate);
        
            JmgSeconds normSeconds = (jmgProfileOverride.NormSec > 0) ? jmgProfileOverride.NormSec : jmgProfileDay.NormSec;
        
            if (normSeconds)
            {
                int64 timeDifference = DateTimeUtil::getDifference(
                                        DateTimeUtil::newDateTime(jmgStampJournalTrans.StopDate, jmgStampJournalTrans.StopTime),
                                        DateTimeUtil::newDateTime(jmgStampJournalTrans.StartDate, jmgStampJournalTrans.StartTime));
        
                // Check if the time period specified is greater than Overtime/Flexlimit property value.
                if (timeDifference > normSeconds)
                {
                    JmgProfiles jmgProfiles = new JmgProfiles(false);
                    jmgProfiles.getProfile(jmgStampJournalTable.Profile, JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate), jmgStampJournalTable);
                    jmgProfiles.initStampJournalTable(jmgStampJournalTableLocal);
        
                    if (jmgStampJournalTableLocal.ProfileStartDate != dateNull())
                    {
                        jmgStampJournalTrans.StartDate  = jmgStampJournalTableLocal.ProfileStartDate;
                        jmgStampJournalTrans.StartTime  = jmgStampJournalTableLocal.ProfileStart;
                    }
                    else
                    {
                        utcDateTime startDateTime = DateTimeUtil::newDateTime(jmgStampJournalTable.ProfileDate, 0);
                        jmgStampJournalTrans.StartDate  = DateTimeUtil::date(startDateTime);
                        jmgStampJournalTrans.StartTime  = DateTimeUtil::time(startDateTime);
                    }
        
                    utcDateTime endDateTime = DateTimeUtil::newDateTime(jmgStampJournalTrans.StartDate,
                                                                (jmgStampJournalTrans.StartTime + normSeconds));
                    jmgStampJournalTrans.StopDate   = DateTimeUtil::date(endDateTime);
                    jmgStampJournalTrans.StopTime   = DateTimeUtil::time(endDateTime);
        
                    jmgStampJournalTrans.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>