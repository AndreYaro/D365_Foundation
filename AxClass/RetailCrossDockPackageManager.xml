<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCrossDockPackageManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCrossDockPackageManager</c> class exposes the API for executing actions related to packages in a cross-dock environment.
/// </summary>
/// <remarks>
/// This class enables to check if the cross-dock quantities conform to the requirements of a package
/// and exposes methods to cross dock at a package level and query for how much cross docking per package
/// exists.
/// </remarks>
class RetailCrossDockPackageManager
{
    //Any amount smaller than this amount is same and 0 for SQL
    #define.SignificanceThreshold(0.00000000000000005)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateItemXDockQtyMatchesPackXDockQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the quantities for the individual items are in alignment with the proportion defined in the package.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <remarks>
    /// This check is necessary to perform before opening the package view for cross-docking.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If there is a mismatch in the proportions of items in their defined package versus the cross docked quantity.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void validateItemXDockQtyMatchesPackXDockQty(RetailBuyersPushId _pushId)
    {
        RetailBuyersPushLine    pushLine;
        PurchLine               purchLine;
        RetailPackagePurch      retailPackagePurch;
        RetailPackageLines      retailPackageLines;
        InventDim               inventDim, inventDimPurchLine;
        InventDimParm           inventDimParm;

        inventDimParm.initProductDimensionsAllGroups();

        // Cross docking qtys for items matches the package cross-docking qty
        select firstonly ItemId, UserSpecifiedQty from pushLine
            where pushLine.BuyersPushId == _pushId
                && pushLine.UserSpecified == NoYes::Yes
            join PurchId, rboPackageLineNum, RetailPackageId, PurchUnit from purchLine
                where purchLine.RecId == pushLine.RefRecId
            join TableId from inventDimPurchLine
                where inventDimPurchLine.InventDimId == purchLine.InventDimId
            join AllocatedCrossDockQty from retailPackagePurch
                where retailPackagePurch.PurchId == purchLine.PurchId
                    && retailPackagePurch.PackageId == purchLine.RetailPackageId
                    && retailPackagePurch.LineNum == purchLine.rboPackageLineNum
            join Qty from retailPackageLines
                where retailPackageLines.PackageId == purchLine.RetailPackageId
                    && retailPackageLines.ItemId == pushLine.ItemId
                    && retailPackageLines.PurchUnit == purchLine.PurchUnit
                    && ((retailPackagePurch.AllocatedCrossDockQty == 0 && retailPackageLines.Qty != 0)
                        || (retailPackagePurch.AllocatedCrossDockQty != 0 && retailPackageLines.Qty != pushLine.UserSpecifiedQty / retailPackagePurch.AllocatedCrossDockQty))
            #InventDimExistsJoin(retailPackageLines.InventDimId, inventDim, inventDimPurchLine, inventDimParm);

        if (pushLine.ItemId)
        {
            throw error(strFmt("@WAX736",
                strFmt("@SYP4986010", pushLine.UserSpecifiedQty, pushLine.ItemId, retailPackagePurch.AllocatedCrossDockQty * retailPackageLines.Qty, purchLine.RetailPackageId),
                "@SYP4986017"));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePurchLinesForSamePackHaveSameLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all purchase lines created from the same package have the same location.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <remarks>
    /// This check is necessary to perform before opening the package view for cross-docking.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If there are lines in the purchase order that belong to the same package but have
    /// different sites and warehouse IDs.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void validatePurchLinesForSamePackHaveSameLoc(RetailBuyersPushId _pushId)
    {
        RetailBuyersPushTable   pushTable;
        PurchLine               purchLine;
        InventDim               inventDim;
        RetailPackageTable      retailPackageTable;

        RetailPackageId         currentPackage;
        InventSiteId            currentSiteId;
        InventLocationId        currentLocationId;

        while select RetailPackageId, InventDimId from purchLine
            order by RetailPackageId
            join InventSiteId, InventLocationId from inventDim
                where inventDim.InventDimId == purchLine.InventDimId
            exists join pushTable
                where pushTable.BuyersPushId == _pushId
                    && pushTable.PurchId == purchLine.PurchId
            exists join retailPackageTable
                where retailPackageTable.PackageId == purchLine.RetailPackageId
        {
            if (currentPackage != purchLine.RetailPackageId)
            {
                currentPackage = purchLine.RetailPackageId;
                currentSiteId = inventDim.InventSiteId;
                currentLocationId = inventDim.InventLocationId;
            }
            else
            {
                if (inventDim.InventSiteId != currentSiteId
                    || inventDim.InventLocationId != currentLocationId)
                {
                    throw error(strFmt("@WAX736",
                                       strFmt("@SYP4986013", purchLine.RetailPackageId, "@SYS103211", "@SYS6437"),
                                       "@SYP4986017"));
                }
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateStoreQtySumsToItemQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the quantities cross docked to individual stores matches the quantities defined in the parent push line.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <remarks>
    /// This check is necessary to perform before opening the package view for cross-docking.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the summation of the store quantities do not match.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void validateStoreQtySumsToItemQty(RetailBuyersPushId _pushId)
    {
        RetailBuyersPushLine        pushLine;
        RetailBuyersPushLineQty     pushLineQty;

        // Cross docking qtys for items sum up correctly on the store lines
        while select ItemId, LineNum, UserSpecifiedQty from pushLine
            where pushLine.BuyersPushId == _pushId
                && pushLine.UserSpecified == NoYes::Yes
        {
            select sum(Qty) from pushLineQty
                where pushLineQty.BuyersPushId == _pushId
                    && pushLineQty.LineNum == pushLine.LineNum;

            if (pushLine.UserSpecifiedQty != pushLineQty.Qty)
            {
                throw error(strFmt("@WAX736",
                            strFmt("@SYP4986009", pushLine.UserSpecifiedQty, pushLine.ItemId, pushLineQty.Qty),
                            "@SYP4986017"));
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateStoreXDockQtyMatchesPackXDockQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that teh cross docking qtys for items for each store matches the package proportions.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <remarks>
    /// This check is necessary to perform before opening the package view for cross-docking.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If there is mismatch in the package proportions for the cross docked quantities in the stores.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void validateStoreXDockQtyMatchesPackXDockQty(RetailBuyersPushId _pushId)
    {
        RetailBuyersPushTable   pushTable;
        RetailPackagePurch      retailPackagePurch;

        PurchLine               purchLine, purchLineSum;
        real                    totalPackageQty;
        Map                     purchPackageProportion;

        RetailBuyersPushLineQty pushLineQty, pushLineQtySum;

        RetailBuyersPushLine    pushLine;

        // The approach here is that the quantities for items are summed up on all purchase lines
        // and then the ratio of each line quantity to the sum is taken. This ratio should match
        // the ratio in the push lines.

        // get the set of purchase lines per package to check for
        while select sum(PurchQty) from purchLineSum
            group by PurchId, RetailPackageId, rboPackageLineNum
            where purchLineSum.PurchQty != 0
            exists join retailPackagePurch
                where purchLineSum.PurchId == retailPackagePurch.PurchId
                    && purchLineSum.RetailPackageId == retailPackagePurch.PackageId
                    && purchLineSum.rboPackageLineNum == retailPackagePurch.LineNum
            exists join pushTable
                where pushTable.BuyersPushId == _pushId
                    && pushTable.PurchId == retailPackagePurch.PurchId
        {
            totalPackageQty = purchLineSum.PurchQty;
            purchPackageProportion = new Map(Types::Int64, Types::Real);

            // iterate over each purchase line and calculate proportions
            while select RecId, PurchQty from purchLine
                where purchLine.PurchId == purchLineSum.PurchId
                    && purchLine.RetailPackageId == purchLineSum.RetailPackageId
                    && purchLine.rboPackageLineNum == purchLineSum.rboPackageLineNum
            {
                purchPackageProportion.insert(purchLine.RecId, purchLine.PurchQty / totalPackageQty);
            }

            // group by store for the above package
            while select sum(Qty), InventLocationId, WarehouseDataAreaId from pushLineQtySum
                group by InventLocationId, WarehouseDataAreaId
                where pushLineQtySum.BuyersPushId == _pushId
                join RefRecId from pushLine
                    where pushLine.LineNum == pushLineQtySum.LineNum
                        && pushLine.BuyersPushId == pushLineQtySum.BuyersPushId
                        && pushLine.UserSpecified == NoYes::Yes
                exists join purchLine
                    where purchLine.PurchId == purchLineSum.PurchId
                        && purchLine.RetailPackageId == purchLineSum.RetailPackageId
                        && purchLine.rboPackageLineNum == purchLineSum.rboPackageLineNum
                        && purchLine.RecId == pushLine.RefRecId
            {
                if (abs(pushLineQtySum.Qty) <= #SignificanceThreshold)
                {
                    continue;
                }

                // calculate the proportion being cross docked to each store
                while select Qty from pushLineQty
                    where pushLineQty.BuyersPushId == _pushId
                        && pushLineQty.InventLocationId == pushLineQtySum.InventLocationId
                        && pushLineQty.WarehouseDataAreaId == pushLineQtySum.WarehouseDataAreaId
                    join RefRecId from pushLine
                        where pushLine.LineNum == pushLineQty.LineNum
                            && pushLine.BuyersPushId == _pushId
                            && pushLine.UserSpecified == NoYes::Yes
                    join RecId from purchLine
                        where purchLine.PurchId == purchLineSum.PurchId
                            && purchLine.RetailPackageId == purchLineSum.RetailPackageId
                            && purchLine.rboPackageLineNum == purchLineSum.rboPackageLineNum
                            && purchLine.RecId == pushLine.RefRecId
                {
                    // match the cross docked quantity against the package proportion.
                    if (abs(purchPackageProportion.lookup(purchLine.RecId) - (pushLineQty.Qty / pushLineQtySum.Qty) > #SignificanceThreshold))
                    {
                        throw error(strFmt("@WAX736",
                                    strFmt("@SYP4986019", purchLineSum.RetailPackageId),
                                    "@SYP4986017"));
                    }
                }
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateUOMOnLineMatchesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the unit of measure for the push line is the same as that in the purchase line.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If there is a mismatch between the defined Unit of Measure between the push line and the purchase line.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void validateUOMOnLineMatchesPurchLine(RetailBuyersPushId _pushId)
    {
        RetailBuyersPushLine    pushLine;
        PurchLine               purchLine;
        RetailPackageTable      retailPackageTable;

        // The unit of measure for each buyers push line should correspond to that of the purchase line
        select firstonly ItemId from pushLine
            where pushLine.BuyersPushId == _pushId
            join RetailPackageId from purchLine
                where purchLine.RecId == pushLine.RefRecId
                    && purchLine.PurchUnit != pushLine.UnitID
                exists join retailPackageTable
                    where retailPackageTable.PackageId == purchLine.RetailPackageId;

        if (pushLine.ItemId)
        {
            throw error(strFmt("@WAX736",
                        strFmt("@SYP4986020", pushLine.ItemId, purchLine.RetailPackageId, tableStr(RetailBuyersPushLine), tableStr(PurchLine)),
                       "@SYP4986017"));
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RetailCrossDockPackageManager construct()
    {
        return new RetailCrossDockPackageManager();
    }
]]></Source>
			</Method>
			<Method>
				<Name>crossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cross docks a given package to a given store for a given quantity.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <param name="_packPurch">
    /// The package line associated with the purchase.
    /// </param>
    /// <param name="_locationId">
    /// The location ID.
    /// </param>
    /// <param name="_whsAreaId">
    /// The legal entity where this location is placed.
    /// </param>
    /// <param name="_packQtyChange">
    /// The additional quantity to cross dock.
    /// </param>
    /// <returns>
    /// true if the cross dock was successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean crossDock(
        RetailBuyersPushId                   _pushId,
        RetailPackagePurch                   _packPurch,
        InventLocationId                     _locationId,
        DataAreaId                           _whsAreaId,
        RetailAllocatedCrossDockPackageQty   _packQtyChange)
    {
        RetailPackagePurch      packPurch;
        RetailBuyersPushLine    pushLine;
        PurchLine               purchLine;
        RetailPackageLines      packageLine;
        RetailBuyersPushLineQty pushLineQty;
        InventDim               inventDim, inventDimPurchLine;
        InventDimParm           inventDimParm;
        boolean                 foundAnyLines = false;

        if (_packQtyChange == 0)
        {
            return false;
        }

        inventDimParm.initProductDimensionsAllGroups();

        // make check for qty
        while select pushLineQty
            where pushLineQty.BuyersPushId == _pushId
                && pushLineQty.InventLocationId == _locationId
                && pushLineQty.WarehouseDataAreaId == _whsAreaId
            join RefRecId from pushLine
                where pushLine.BuyersPushId == pushLineQty.BuyersPushId
                    && pushLine.LineNum == pushLineQty.LineNum
            join ItemId, PurchUnit from purchLine
                where purchLine.PurchId == _packPurch.PurchId
                    && purchLine.RetailPackageId == _packPurch.PackageId
                    && purchLine.rboPackageLineNum == _packPurch.LineNum
                    && purchLine.RecId == pushLine.RefRecId
            join TableId from inventDimPurchLine
                where inventDimPurchLine.InventDimId == purchLine.InventDimId
            join Qty from packageLine
                where packageLine.PackageId     == _packPurch.PackageId
                    && packageLine.ItemId       == purchLine.ItemId
                    && packageLine.PurchUnit    == purchLine.PurchUnit
            #InventDimExistsJoin(packageLine.InventDimId, inventDim, inventDimPurchLine, inventDimParm)
        {
            foundAnyLines = true;
            pushLineQty.Qty = pushLineQty.Qty + (packageLine.Qty * _packQtyChange);
            if (!pushLineQty.validateField(fieldNum(RetailBuyersPushLineQty, Qty)))
            {
                return false;
            }
        }

        //If the above join did not qualify any lines something is wrong and we need to bail out. The situation can occur for some rare cases like the below
        // - The master data setup allows deletion of lines from a package so if a line from a package is deleted we cannot cross dock the packages
        // - Two users can have opened the form for the same order at the same time and one can have deleted the cross dock while the other is working on it
        if (!foundAnyLines)
        {
            throw error(strFmt("@WAX736",
                               strFmt("@SYP4986019", _packPurch.PackageId),
                               "@SYP4986017"));
        }

        ttsbegin;

        // Update the RetailPackagePurch table
        update_recordset packPurch
            setting AllocatedCrossDockQty = _packPurch.AllocatedCrossDockQty + _packQtyChange
            where packPurch.PurchId == _packPurch.PurchId
                && packPurch.PackageId == _packPurch.PackageId
                && packPurch.LineNum == _packPurch.LineNum;

        // Update the Buyers push line
        update_recordset pushLine
            setting UserSpecified = NoYes::Yes,
                UserSpecifiedQty = pushLine.UserSpecifiedQty + (packageLine.Qty * _packQtyChange)
            where pushLine.BuyersPushId == _pushId
            join ItemId, PurchUnit from purchLine
                where purchLine.PurchId == _packPurch.PurchId
                    && purchLine.RetailPackageId == _packPurch.PackageId
                    && purchLine.rboPackageLineNum == _packPurch.LineNum
                    && purchLine.RecId == pushLine.RefRecId
            join RecId from inventDimPurchLine
                where inventDimPurchLine.InventDimId == purchLine.InventDimId
            join Qty from packageLine
                where packageLine.PackageId == _packPurch.PackageId
                    && packageLine.ItemId == purchLine.ItemId
                    && packageLine.PurchUnit == purchLine.PurchUnit
            #InventDimExistsJoin(packageLine.InventDimId, inventDim, inventDimPurchLine, inventDimParm);

        // Update the Buyers push line qty
        update_recordset pushLineQty
            setting Qty = pushLineQty.Qty + (packageLine.Qty * _packQtyChange)
            where pushLineQty.BuyersPushId == _pushId
                && pushLineQty.InventLocationId == _locationId
                && pushLineQty.WarehouseDataAreaId == _whsAreaId
            join TableId from pushLine
                where pushLine.BuyersPushId == pushLineQty.BuyersPushId
                    && pushLine.LineNum == pushLineQty.LineNum
            join ItemId, PurchUnit from purchLine
                where purchLine.PurchId == _packPurch.PurchId
                    && purchLine.RetailPackageId == _packPurch.PackageId
                    && purchLine.rboPackageLineNum == _packPurch.LineNum
                    && purchLine.RecId == pushLine.RefRecId
            join RecId from inventDimPurchLine
                where inventDimPurchLine.InventDimId == purchLine.InventDimId
            join firstonly Qty from packageLine
                where packageLine.PackageId == _packPurch.PackageId
                    && packageLine.ItemId == purchLine.ItemId
                    && packageLine.PurchUnit == purchLine.PurchUnit
            #InventDimExistsJoin(packageLine.InventDimId, inventDim, inventDimPurchLine, inventDimParm);

        ttscommit;
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getCrossDockedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity of the package that has been cross docked, for a given location.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    /// <param name="_packPurch">
    /// The package line associated with the purchase.
    /// </param>
    /// <param name="_locationId">
    /// The location ID.
    /// </param>
    /// <param name="_whsAreaId">
    /// The legal entity where this location is placed.
    /// </param>
    /// <returns>
    /// The quantity of the package that has been cross docked.
    /// </returns>
    /// <remarks>
    /// The underlying assumption is that the cross docking quantities are distributed at package level correctly.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RetailAllocatedCrossDockPackageQty getCrossDockedQty(
        RetailBuyersPushId    _pushId,
        RetailPackagePurch    _packPurch,
        InventLocationId      _locationId,
        DataAreaId            _whsAreaId)
    {
        PurchLine                   purchLine;
        RetailBuyersPushLine        pushLine;
        RetailBuyersPushLineQty     pushLineQty;

        select firstonly RecId from purchLine
            where purchLine.PurchId == _packPurch.PurchId
                && purchLine.RetailPackageId == _packPurch.PackageId
                && purchLine.rboPackageLineNum == _packPurch.LineNum
            join LineNum, UserSpecifiedQty from pushLine
                where pushLine.RefRecId == purchLine.RecId
            join Qty from pushLineQty
                where pushLineQty.BuyersPushId == _pushId
                    && pushLineQty.LineNum == pushLine.LineNum
                    && pushLineQty.InventLocationId == _locationId
                    && pushLineQty.WarehouseDataAreaId == _whsAreaId;

        // The proportion of any item on a store can be determined and the package qty can be calculated therefrom.
        return pushLine.UserSpecifiedQty == 0 ? 0 : real2int((pushLineQty.Qty * _packPurch.AllocatedCrossDockQty) / pushLine.UserSpecifiedQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateAtPackageLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the user is prevented from opening the package view in case the quantities do not conform to packages.
    /// </summary>
    /// <param name="_pushId">
    /// The ID of the <c>RetailBuyersPushTable</c> table for which this check needs to be made.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void validateAtPackageLevel(RetailBuyersPushId _pushId)
    {
        RetailCrossDockPackageManager validator = RetailCrossDockPackageManager::construct();

        validator.validatePurchLinesForSamePackHaveSameLoc(_pushId);

        validator.validateUOMOnLineMatchesPurchLine(_pushId);

        validator.validateItemXDockQtyMatchesPackXDockQty(_pushId);

        validator.validateStoreQtySumsToItemQty(_pushId);

        validator.validateStoreXDockQtyMatchesPackXDockQty(_pushId);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>