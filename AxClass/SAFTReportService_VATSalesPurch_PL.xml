<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_VATSalesPurch_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
/// <summary>
/// The service class that runs SAF-T VAT Sales Purch (PL) report.
/// </summary>
public class SAFTReportService_VATSalesPurch_PL extends SAFTReportService_Base_W
{
    private SAFTReportContract_VATSalesPurch_PL dataContract;
    private Query userModifiedQuery;
    private Query userModifiedAggregateFiscalDocumentsQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts file generation in GER.
    /// </summary>
    /// <param name = "_dataContract">A data contract containing user inputs.</param>
    public void run(SAFTReportContract_VATSalesPurch_PL _dataContract)
    {
        dataContract = _dataContract;
        this.applyParametersToQuery();
        this.runReport(dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyParametersToQuery</Name>
				<Source><![CDATA[
    private void applyParametersToQuery()
    {
        userModifiedQuery = this.updateQuery(dataContract.parmQuery());
        userModifiedAggregateFiscalDocumentsQuery = this.updateQuery(dataContract.parmAggregateFiscalDocumentsQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private Query updateQuery(Query _dataContractQuery)
    {
        Query ret = _dataContractQuery;
        if (ret)
        {
            var qbds = ret.dataSourceTable(tableNum(TaxTrans_W));
            findOrCreateRange_W(qbds, fieldNum(TaxTrans_W, VatDueDate_W), queryRange(dataContract.parmDateFrom(), dataContract.parmDateTo()));

            qbds = ret.dataSourceTable(tableNum(TaxTrans));
            findOrCreateRange_W(qbds, fieldNum(TaxTrans, Source), SysQuery::valueNot(queryValue(TaxModuleType::Tax)));

            if (TaxIntegrationTaxServiceParameters::find().IsMultipleTaxIdVATDeclarationEnabled)
            {
                findOrCreateRange_W(qbds, fieldNum(TaxTrans, TaxPeriod), dataContract.parmTaxPeriod());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatMappingRecId</Name>
				<Source><![CDATA[
    protected ERFormatMappingId getERFormatMappingRecId()
    {
        ERFormatMappingId erFormatMappingId;

        if (dataContract.parmElectronicMessageRecId())
        {
            erFormatMappingId = dataContract.parmERFormatMappingId();
        }
        else
        {
            TaxParameters taxParameters;
            select firstonly SAFTVATSalesPurchERFormatMapping_PL from taxParameters;
            erFormatMappingId = taxParameters.SAFTVATSalesPurchERFormatMapping_PL;
        }

        return erFormatMappingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        SAFTTaxTransByReportingCodeVDEK_PL taxTransByReportingCodeVDEK_PL;
        _databaseContext.addTemporaryTable(taxTransByReportingCodeVDEK_PL);
   
        _databaseContext.addTemporaryTable(this.getDataServiceReportData(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataServiceReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for SAFT tax reports.
    /// </summary>
    /// <returns>The set of tax transactions associated with sales tax reporting codes.</returns>
    public Common getDataServiceReportData()
    {
        SAFTReportTaxCollectionServiceVDEK_W dataService = new SAFTReportTaxCollectionServiceVDEK_W(userModifiedQuery);
        dataService.parmDateFrom(dataContract.parmDateFrom());
        dataService.parmDateTo(dataContract.parmDateTo());
        dataService.parmAggregateFiscalDocumentsQuery(userModifiedAggregateFiscalDocumentsQuery);
        dataService.parmAggregateFiscalDocuments(dataContract.parmAggregateFiscalDocuments());
        dataService.parmReportRetailPOSInvoices(dataContract.parmReportRetailPOSInvoices());
        dataService.parmReportFiscalDocumentConvertedToInvoice(dataContract.parmReportFiscalDocumentConvertedToInvoice());
        dataService.parmReportFiscalDocumentWithThreshold(dataContract.parmReportFiscalDocumentWithThreshold());
        dataService.parmReceiptThreshold(dataContract.parmReceiptThreshold());
        dataService.parmConsiderVATReportDateCodes(dataContract.parmConsiderVATReportDateCodes());
        dataService.parmReportSchemaVersion(dataContract.parmReportSchemaVersion());
        dataService.parmReportInAccountingCurrency(dataContract.parmReportInAccountingCurrency());
        dataService.run();

        return dataService.getReportData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>