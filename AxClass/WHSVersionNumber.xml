<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSVersionNumber</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CLRVersion = System.Version;

internal final class WHSVersionNumber
{
    private CLRVersion version = null;
    private str versionString;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ToString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str ToString()
    {
        return versionString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isValid()
    {
        return version != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>greaterOrEqual</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public UnknownNoYes greaterOrEqual(WHSVersionNumber _other)
    {
        if (!WHSVersionNumber::bothValid(this, _other))
        {
            return UnknownNoYes::Unknown;
        }

        return version.CompareTo(_other.version) >= 0 ? UnknownNoYes::Yes : UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>greater</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public UnknownNoYes greater(WHSVersionNumber _other)
    {
        if (!WHSVersionNumber::bothValid(this, _other))
        {
            return UnknownNoYes::Unknown;
        }

        return version.CompareTo(_other.version) > 0 ? UnknownNoYes::Yes : UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSVersionNumber construct(str _versionString)
    {
        var version = new WHSVersionNumber(_versionString);
        if (!version.isValid())
        {
            WHSVersionNumber::logInvalidVersion(staticMethodStr(WHSVersionNumber, construct), _versionString);
        }

        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFlightNameVersion</Name>
				<Source><![CDATA[
    internal str toFlightNameVersion()
    {
        if (!this.isValid())
        {
            // We should always check if version is valid before trying to use it in flight.
            // We cannot throw from this class so instead we log telemetry and return a string that is unlikely to be used in flight by mistake.
            
            WHSVersionNumber::logInvalidVersion(methodStr(WHSVersionNumber, toFlightNameVersion), versionString);
            return '_invalid_version';
        }

        return strFmt('%1_%2_%3_%4', version.Major, version.Minor, version.Build, version.Revision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(str _versionString)
    {
        versionString = _versionString;
        CLRVersion::TryParse(_versionString, byref version); // version = null if parsing fails

        if (version == null
            && _versionString
            && strFind(_versionString, '.', 1, strLen(_versionString)) == 0)
        {
            // System.Version requires at least major.minor to be present in the string
            str fixedVersionString = _versionString + '.0';
            CLRVersion::TryParse(fixedVersionString, byref version);
        }

        if (version != null
            && (version.Build == -1 || version.Revision == -1))
        {
            // Replace unknown Build and Revision so that '2.1.0.0' == '2.1'
            version = new CLRVersion(
                version.Major,
                version.Minor,
                version.Build == -1 ? 0 : version.Build,
                version.Revision == -1 ? 0 : version.Revision);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bothValid</Name>
				<Source><![CDATA[
    private static boolean bothValid(WHSVersionNumber _first, WHSVersionNumber _second)
    {
        return _first.isValid() && _second.isValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInvalidVersion</Name>
				<Source><![CDATA[
    private static void logInvalidVersion(str _methodName, str _versionString)
    {
        WHSInstrumentationLogger::createLogger(classStr(WHSVersionNumber)).logError(_methodName + ': invalid version string ' + _versionString);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>