<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCheckReceiptCostPricePcsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCheckReceiptCostPricePcsDP</c> class is the Report Data Provider class for the
///    <c>InventCheckReceiptCostPricePcs</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventCheckReceiptCostPricePcs)),
    SRSReportParameterAttribute(classStr(InventCheckReceiptCostPcsContract))
]
public class InventCheckReceiptCostPricePcsDP extends SrsReportDataProviderPreProcessTempDB
{
    InventCheckReceiptCostPricePcsTmp   inventCheckReceiptCostPricePcsTmp;
    InventTable                         inventTable;
    InventTrans                         inventTrans;
    InventTransOrigin                   inventTransOrigin;
    CostPricePcsMaxValue                receiptCostPricePcsMax;
    CostPrice                           inventCostPricePcs;
    CostPrice                           medianCostPricePcs;
    RecordSortedList                    cacheReceipt;
    str                                 outlierCauseItem;
    str                                 outlierCause;

    TransDate                           toDate;
    boolean                             ignoreProduction;
    CostPriceBase                       costPriceBase;
    Percent                             maxDeviationPercent;
    Amount                              minDeviation;

    #define.EmptyString('')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBaseCostPricePcs</Name>
				<Source><![CDATA[
    private real findBaseCostPricePcs(InventDim _inventDim)
    {
        real baseCostPricePcs = 0;

        if (costPriceBase != CostPriceBase::Median)
        {
            inventCostPricePcs = _inventDim ? inventTable.costPcsPrice(_inventDim.InventDimId, _inventDim) :
                                              inventTable.costPcsPrice();            
            baseCostPricePcs = inventCostPricePcs;
        }
        
        if (costPriceBase == CostPriceBase::Median ||
           (costPriceBase == CostPriceBase::CostPriceOrMedian && !inventCostPricePcs))
        {
            this.calcMedian();
            baseCostPricePcs = medianCostPricePcs;
        }
        
        return baseCostPricePcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMedian</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the running average cost of items.
    /// </summary>
    private void calcMedian()
    {
        InventTrans inventTransLocal;
        int         i;
        real        prevValue;

        medianCostPricePcs  = 0;

         // finding the median
        if (cacheReceipt.first(inventTransLocal))
        do
        {
            i++;

            if (i == cacheReceipt.len()/2 + 0.5)
            {
                medianCostPricePcs = inventTransLocal.CostAmountStd;   //costAmountStd contains the costpricepcs
                break;
            }

            if (i > cacheReceipt.len()/2 )
            {
                medianCostPricePcs = CurrencyExchangeHelper::amount((inventTransLocal.CostAmountStd + prevValue) / 2);
                break;
            }

            prevValue = inventTransLocal.CostAmountStd;
        }
        while (cacheReceipt.next(inventTransLocal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item receipts details.
    /// </summary>
    /// <param name="_inventDim">
    /// Table buffer of <c>InventDim></c> table.
    /// </param>
    private void findReceipt(InventDim _inventDim)
    {
        InventTransOrigin   receiptOrigin;
        InventTrans         inventTransReceipts;
        InventDimParm       inventDimParm;
        InventDim           inventDim;

        cacheReceipt = new RecordSortedList(tableNum(InventTrans));
        cacheReceipt.sortOrder(fieldNum(InventTrans,CostAmountStd),fieldNum(InventTrans,InventTransOrigin));  // the costPricePcs is put into this field in order to sort

        if (! _inventDim)
        {
            while select forceplaceholders TableId from receiptOrigin
                group by inventTransReceipts.InventTransOrigin, inventTransReceipts.Voucher, inventTransReceipts.DateFinancial // the fields DateFinancial is used in the report
                where receiptOrigin.ItemId            == inventTable.ItemId                                  &&
                      receiptOrigin.ReferenceCategory != InventTransType::InventTransfer                     &&
                      receiptOrigin.ReferenceCategory != InventTransType::TransferOrderShip                  &&
                      receiptOrigin.ReferenceCategory != InventTransType::TransferOrderReceive               &&
                      receiptOrigin.ReferenceCategory != InventTransType::WMSTransport                       &&
                      receiptOrigin.ReferenceCategory != InventTransType::QuarantineOrder                    &&
                     (receiptOrigin.ReferenceCategory != InventTransType::Production || ! ignoreProduction)
                join sum(Qty), sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTransReceipts
                    where inventTransReceipts.InventTransOrigin    == receiptOrigin.RecId                               &&
                          inventTransReceipts.ValueOpen            == InventTransOpen::Yes                              &&
                          inventTransReceipts.StatusIssue          == StatusIssue::None                                 &&
                          inventTransReceipts.StatusReceipt        == StatusReceipt::Purchased                          &&
                         (inventTransReceipts.DateFinancial        <= toDate                    || ! toDate)            &&
                          inventTransReceipts.PackingSlipReturned  == NoYes::No                                         &&
                          inventTransReceipts.Qty                  >  0
            {
                if (inventTransReceipts.Qty)
                {
                    inventTransReceipts.CostAmountStd = (inventTransReceipts.CostAmountPosted + inventTransReceipts.CostAmountAdjustment)/inventTransReceipts.Qty;
                    cacheReceipt.ins(inventTransReceipts);
                }
            }
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDim);

            while select forceplaceholders TableId from receiptOrigin
                group by inventTransReceipts.InventTransOrigin, inventTransReceipts.Voucher, inventTransReceipts.DateFinancial, inventDim.InventSiteId // the fields DateFinancial is used in the report
                where receiptOrigin.ItemId            == inventTable.ItemId                                  &&
                      receiptOrigin.ReferenceCategory != InventTransType::InventTransfer                     &&
                      receiptOrigin.ReferenceCategory != InventTransType::TransferOrderShip                  &&
                      receiptOrigin.ReferenceCategory != InventTransType::TransferOrderReceive               &&
                      receiptOrigin.ReferenceCategory != InventTransType::WMSTransport                       &&
                      receiptOrigin.ReferenceCategory != InventTransType::QuarantineOrder                    &&
                     (receiptOrigin.ReferenceCategory != InventTransType::Production || ! ignoreProduction)
                join sum(Qty), sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTransReceipts
                    where inventTransReceipts.InventTransOrigin    == receiptOrigin.RecId                               &&
						  inventTransReceipts.ValueOpen            == InventTransOpen::Yes                              &&
                          inventTransReceipts.StatusIssue          == StatusIssue::None                                 &&
                          inventTransReceipts.StatusReceipt        == StatusReceipt::Purchased                          &&
                         (inventTransReceipts.DateFinancial        <= toDate                           || ! toDate)     &&
                          inventTransReceipts.PackingSlipReturned  == NoYes::No                                         &&
                          inventTransReceipts.Qty                  >  0
                #inventDimJoin(inventTransReceipts.inventDimId,inventDim,_inventDim,inventDimParm)
            {
                if (inventTransReceipts.Qty)
                {
                    inventTransReceipts.InventDimId = inventDim::findOrCreate(inventDim).InventDimId;
                    inventTransReceipts.CostAmountStd = (inventTransReceipts.CostAmountPosted + inventTransReceipts.CostAmountAdjustment)/inventTransReceipts.Qty;
                    cacheReceipt.ins(inventTransReceipts);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventCheckReceiptCostPricePcsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>InventCheckReceiptCostPricePcsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>InventCheckReceiptCostPricePcsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventCheckReceiptCostPricePcsTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventCheckReceiptCostPricePcsTmp getInventCheckReceiptCostPricePcsTmp()
    {
        select inventCheckReceiptCostPricePcsTmp;
        return inventCheckReceiptCostPricePcsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts selected records in temporary table.
    /// </summary>
    /// <param name="_inventDim">
    /// Table buffer of <c>InventDim></c> table.
    /// </param>
    private void insertIntoTempTable(
        InventDim _inventDim
        )
    {
        inventCheckReceiptCostPricePcsTmp.clear();

        inventCheckReceiptCostPricePcsTmp.ItemId                = inventTable.ItemId;
        inventCheckReceiptCostPricePcsTmp.ItemName              = inventTable.itemName();

        if (_inventDim)
        {
            inventCheckReceiptCostPricePcsTmp.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
        }

        inventCheckReceiptCostPricePcsTmp.InventCostPrice       = inventCostPricePcs;
        inventCheckReceiptCostPricePcsTmp.InventUnitId          = inventTable.inventUnitId();
        inventCheckReceiptCostPricePcsTmp.MedianCostPrice       = medianCostPricePcs;
        inventCheckReceiptCostPricePcsTmp.OutlierCauseItem      = outlierCauseItem;

        inventCheckReceiptCostPricePcsTmp.DateFinancial         = inventTrans.DateFinancial;
        inventCheckReceiptCostPricePcsTmp.ReferenceCategory     = inventTransOrigin.ReferenceCategory;
        inventCheckReceiptCostPricePcsTmp.ReferenceId           = inventTransOrigin.ReferenceId;
        inventCheckReceiptCostPricePcsTmp.InventTransId         = inventTransOrigin.InventTransId;
        inventCheckReceiptCostPricePcsTmp.UnitCostPrice         = inventTrans.CostAmountStd;
        inventCheckReceiptCostPricePcsTmp.OutlierCause          = outlierCause;

        inventCheckReceiptCostPricePcsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>investigateItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item transactions details.
    /// </summary>
    /// <param name="_inventDim">
    /// Table buffer of <c>InventDim></c> table.
    /// </param>
    private void investigateItem(InventDim _inventDim = null)
    {
        real    baseCostPricePcs;
        boolean itemPrinted;

        inventCostPricePcs = 0;
        medianCostPricePcs = 0;
        outlierCauseItem = #EmptyString;

        this.findReceipt(_inventDim);

        if (cacheReceipt.len() == 0)  // no transactions in the period.
        {
            return;
        }

        if (!inventTable.ItemDimCostPrice)
        {
            baseCostPricePcs = this.findBaseCostPricePcs(_inventDim);
        }

        // investigate transactions
        if (cacheReceipt.first(inventTrans))
        {
            if (inventTable.ItemDimCostPrice)
            {
                InventDim inventDim = _inventDim.data();
                inventDim.InventSiteId = inventTrans.inventDim().InventSiteId;
                baseCostPricePcs = this.findBaseCostPricePcs(InventDim::findOrCreate(inventDim));
                if (medianCostPricePcs)
                {
                    // Need to point to the first record since the pointer is moved to the last one when calculate medianCostPricePcs.
                    cacheReceipt.first(inventTrans);
                }
            }

            do
            {
                boolean foundOutlier = false;
                outlierCause = #EmptyString;
                real deviation = 0;

                if (!itemPrinted && baseCostPricePcs < 0 )
                {
                    outlierCauseItem = "@SYS53174";
                    itemPrinted = true;
                }

                if (inventTrans.CostAmountStd < 0)
                {
                    foundOutlier = true;
                    outlierCause = "@SYS53174";
                }

                if (! foundOutlier && receiptCostPricePcsMax > 0 && inventTrans.CostAmountStd > receiptCostPricePcsMax)
                {
                    foundOutlier = true;
                    outlierCause = strFmt("@SYS96879", inventTrans.CostAmountStd, receiptCostPricePcsMax);
                }

                if (! foundOutlier && baseCostPricePcs >= 0)
                {
                    if (! minDeviation || abs(inventTrans.CostAmountStd - baseCostPricePcs) > minDeviation)       // the unit cost price is placed in CostAmountStd
                    {
                        if (baseCostPricePcs)
                        {
                            deviation = abs(inventTrans.CostAmountStd - baseCostPricePcs)*100 / baseCostPricePcs;
                            if (deviation && deviation > maxDeviationPercent)
                            {
                                foundOutlier = true;
                                outlierCause = strFmt("@SYS96878", deviation, strFmt('%1%2', maxDeviationPercent, '%'));
                            }
                        }
                        else
                        {
                            foundOutlier = true;
                            outlierCause = "@SYS96886";
                        }
                    }
                }

                if (foundOutlier)
                {
                    inventTransOrigin = InventTransOrigin::find(inventTrans.InventTransOrigin);
                    if (inventTransOrigin)
                    {
                        this.insertIntoTempTable(_inventDim);
                        itemPrinted = false;
                    }

                    if (itemPrinted)
                    {
                        this.insertIntoTempTable(_inventDim);
                    }
                }
            }
            while (cacheReceipt.next(inventTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges and range value.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object that contains the query.
    /// </param>
    /// <returns>
    /// The modified query object
    /// </returns>
    private Query modifyQuery(Query _query)
    {
        QueryBuildDataSource inventTransDS = _query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventTrans));

        if (toDate)
        {
            inventTransDS.addRange(fieldNum(InventTrans,DateFinancial)).value('..'+queryValue(toDate));
        }

        inventTransDS.addRange(fieldNum(InventTrans,StatusIssue)).value(queryValue(StatusIssue::None));
        inventTransDS.addRange(fieldNum(InventTrans,StatusReceipt)).value(queryValue(StatusReceipt::Purchased));
        inventTransDS.addRange(fieldNum(InventTrans,ValueOpen)).value(queryValue(InventTransOpen::Yes));
        inventTransDS.addRange(fieldNum(InventTrans,PackingSlipReturned)).value(queryValue(NoYes::No));
        inventTransDS.joinMode(JoinMode::ExistsJoin);
        inventTransDS.relations(true);

        QueryBuildDataSource inventModelGroupItemDS = _query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventModelGroupItem));
        inventModelGroupItemDS.joinMode(JoinMode::ExistsJoin);
        inventModelGroupItemDS.relations(true);

        QueryBuildDataSource inventModelGroupDS = inventModelGroupItemDS.addDataSource(tableNum(InventModelGroup));
        inventModelGroupDS.addRange(fieldNum(InventModelGroup,InventModel)).value(InventModelType::queryValueIsSettled());
        inventModelGroupDS.joinMode(JoinMode::ExistsJoin);
        inventModelGroupDS.relations(true);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Calls sub methods to insert data in to the temporary table.
    /// </remarks>
    public void processReport()
    {
        InventDimCombination    inventDimCombination;
        InventDim               inventDimFromInventDimCombination;
        InventDim               inventDim;
        InventDimParm           inventDimParm;
        InventCheckReceiptCostPcsContract contract =  this.parmDataContract() as InventCheckReceiptCostPcsContract;

        toDate                  = contract.parmToDate();
        costPriceBase           = contract.parmCostPriceBase();
        ignoreProduction        = contract.parmIgnoreProduction();
        maxDeviationPercent     = contract.parmMaxDeviationPercent();
        minDeviation            = contract.parmMinDeviation();

        receiptCostPricePcsMax  = InventParameters::find().CostPricePcsMaxValue;
        inventDimParm.initProductDimensionsAllGroups();

        Query query = this.modifyQuery(this.parmQuery());

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            inventTable         = queryRun.get(tableNum(InventTable));

            if (inventTable.ItemDimCostPrice)
            {
                while select RecId from inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                    join inventDimFromInventDimCombination
                        where inventDimFromInventDimCombination.InventDimId == inventDimCombination.InventDimId
                {
                    inventDim.clear();
                    inventDim.InventDimFieldsMap::initProductDimensionsFrom(inventDimFromInventDimCombination);
                    inventDim = InventDim::findOrCreate(inventDim);
                    this.investigateItem(inventDim);
                    inventDim = null;
                }
            }
            else
            {
                this.investigateItem(inventDim);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>