<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverDrillThroughAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverDrillThroughAction</c> class performs detailing of original transactions for amounts in turnover statements.
/// </summary>
class RLedgerTurnoverDrillThroughAction
{
    const int balanceDebitStart = 1;
    const int balanceCreditStart = 2;
    const int turnoverDebit = 3;
    const int turnoverCredit = 4;
    const int balanceDebitEnd = 5;
    const int balanceCreditEnd = 6;
    const str appModuleParamName = "@SYS9941";

    Query                       query;
    int                         amountType;
    RLedgerTurnoverSheet        reportTable;
    RLedgerTurnoverSheetLine    reportLine;
    RLedgerTurnoverTypeable     ledgerSheetType;

    container                   paramValues;
    container                   paramNames;
    TmpRecIdFilter              tmpRecIdFilter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getKeyData</Name>
				<Source><![CDATA[
    private container getKeyData(RLedgerTurnoverSheetLine _reportLine = reportLine)
    {
        RLedgerTurnoverSheetLine line;
        RLedgerTurnoverKeyData   lineKeyData;
        container                keyData;

        while select keyData from lineKeyData
            where lineKeyData.RLedgerTurnoverSheetLine == _reportLine.RecId
        {
            keyData += lineKeyData.KeyData;
        }

        if (! keyData)
        {
            while select line
                where line.RefRecId         == _reportLine.RefRecId &&
                      line.ParentLineNum    == _reportLine.LineNum  &&
                      line.LineType         == RLedgerTurnoverSheetLineType::Body
            {
                keyData += this.getKeyData(line);
            }
        }

        return keyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of <c>RLedgerTurnoverDrillThroughAction</c> class.
    /// </summary>
    /// <param name="_reportLine">
    ///   Snapshot line to be used in drillthrough.
    /// </param>
    /// <param name="_amountType">
    ///   An amount type:
    /// <item>
    /// <description>Balance debit start - 1.</description>
    /// </item>
    /// <item>
    /// <description>Balance credit start - 2.</description>
    /// </item>
    /// <item>
    /// <description>Turnover debit - 3.</description>
    /// </item>
    /// <item>
    /// <description>Turnover credit - 4.</description>
    /// </item>
    /// <item>
    /// <description>Balance debit end - 5.</description>
    /// </item>
    /// <item>
    /// <description>Balance credit end - 6.</description>
    /// </item>
    /// </param>
    protected void new(RLedgerTurnoverSheetLine _reportLine, int _amountType)
    {
        reportTable = _reportLine.reportTable();
        reportLine  = _reportLine;
        amountType  = _amountType;
        paramNames  = reportTable.GroupKey;

        query = new Query(reportTable.PackedQuery);

        ledgerSheetType = RLedgerTurnoverType::newInterface(reportTable.ReportType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramValues</Name>
				<Source><![CDATA[
    private container paramValues(RLedgerTurnoverSheetLine _line)
    {
        const str emptyParameter = '---';
        container ret = [_line.Parameter[_line.Level] != emptyParameter ? _line.Parameter[_line.Level] : ''];

        if (_line.ParentLineNum != 0)
        {
            ret = this.paramValues(RLedgerTurnoverSheetLine::findLineNum(_line.RefRecId, _line.ParentLineNum)) + ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        int                 idx;
        boolean             showOrigin;

        //disabling drill-through feature for balances
        if (amountType != turnoverDebit && amountType != turnoverCredit)
        {
            return;
        }

        if (reportTable.ShowOrigin &&
            reportTable.ReportType == RLedgerTurnoverSheetType::LedgerDimension)
        {
            idx = conFind(paramNames, appModuleParamName);
            if (idx)
            {
                paramValues = this.paramValues(reportLine);
                if (conLen(paramValues)       >= idx                            &&
                    conPeek(paramValues, idx) != enum2str(SysModule::Ledger)    &&
                    (reportLine.LineType == RLedgerTurnoverSheetLineType::Trans ||
                     DimensionAttribute::findByName(conPeek(paramNames, reportLine.Level)).BackingEntityTableId == tableNum(AgreementHeaderExt_RU)))
                {
                    showOrigin = true;
                }
            }
        }

        this.setPeriodDebitCredit();
        this.setQueryRanges();

        if (! showOrigin)
        {
            ledgerSheetType.drillThroughAction(query, amountType, tmpRecIdFilter);
        }
        else
        {
            this.runModuleInquery(conPeek(paramValues, idx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runModuleInquery</Name>
				<Source><![CDATA[
    private void runModuleInquery(str _module)
    {
        FormRun                         formRun;
        GeneralJournalAccountEntry      accountEntry;
        LedgerTransModule               ledgerTransModule;
        Set                             setEntry;
        QueryBuildDataSource            queryDataSource;
        TmpRecIdFilter                  tmpRecIdFilterCopy;
        QueryRun                        queryRun = new QueryRun(query);

        ledgerTransModule = LedgerTransModule::construct();
        ledgerTransModule.parmExcludeGeneralLedger(true);
        ledgerTransModule.parmAccumulateTrans(true);
        ledgerTransModule.parmExcludeAsset(true);
        ledgerTransModule.parmExcludeBank(true);
        ledgerTransModule.parmExcludeCustomer(true);
        ledgerTransModule.parmExcludeEmployee_RU(true);
        ledgerTransModule.parmExcludeInventory(true);
        ledgerTransModule.parmExcludeProduction(true);
        ledgerTransModule.parmExcludeProject(true);
        ledgerTransModule.parmExcludeRCash_RU(true);
        ledgerTransModule.parmExcludeTax(true);
        ledgerTransModule.parmExcludeVendor(true);

        switch (_module)
        {
            case enum2str(SysModule::FixedAssets) :
                ledgerTransModule.parmExcludeAsset(false);
                break;
            case enum2str(SysModule::Bank) :
                ledgerTransModule.parmExcludeBank(false);
                break;
            case enum2str(SysModule::Cust) :
                ledgerTransModule.parmExcludeCustomer(false);
                break;
            case enum2str(SysModule::Employee_RU) :
                ledgerTransModule.parmExcludeEmployee_RU(false);
                break;
            case enum2str(SysModule::Invent) :
                ledgerTransModule.parmExcludeInventory(false);
                break;
            case enum2str(SysModule::Prod) :
                ledgerTransModule.parmExcludeProduction(false);
                break;
            case enum2str(SysModule::Project) :
                ledgerTransModule.parmExcludeProject(false);
                break;
            case enum2str(SysModule::RCash) :
                ledgerTransModule.parmExcludeRCash_RU(false);
                break;
            case enum2str(SysModule::Tax) :
                ledgerTransModule.parmExcludeGeneralLedger(false);
                ledgerTransModule.parmExcludeTax(false);
                break;
            case enum2str(SysModule::Vend) :
                ledgerTransModule.parmExcludeVendor(false);
                break;
        }

        setEntry = new Set(Types::Int64);

        if (tmpRecIdFilter)
        {
            while select tmpRecIdFilter
            {
                buf2Buf(tmpRecIdFilter, tmpRecIdFilterCopy);
                tmpRecIdFilterCopy.insert();
            }
            ledgerTransModule.parmTmpRecIdFilter_RU(tmpRecIdFilterCopy);

            queryDataSource = queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry));
            queryDataSource = queryDataSource.addDataSource(tableNum(TmpRecIdFilter));
            queryDataSource.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(TmpRecIdFilter, RefRecId));
            queryDataSource.fetchMode(QueryFetchMode::One2One);
            queryDataSource.joinMode(JoinMode::ExistsJoin);
            queryRun.setCursor(tmpRecIdFilter);
        }

        while (queryRun.next())
        {
            accountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
            if (! setEntry.in(accountEntry.GeneralJournalEntry))
            {
                ledgerTransModule.createTransModule(accountEntry.GeneralJournalEntry);
                setEntry.add(accountEntry.GeneralJournalEntry);
            }
        }

        formRun = classFactory.formRunClass(new Args(formStr(LedgerTransBase)));
        formRun.init();
        formRun.dataSource(1).cursor().setTmpData(ledgerTransModule.transModule());
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDebitCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets period and amount filters on the query.
    /// </summary>
    protected void setPeriodDebitCredit()
    {
        TableId                 tableId;
        FieldId                 fieldId;
        Range                   range;
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbds_W;
        FieldName               fieldAmount     = fieldid2name(ledgerSheetType.transTableId(), ledgerSheetType.fieldAmount(reportTable.CurrencyType));
        FieldName               fieldCorrection;
        str                     debitExpr;
        str                     creditExpr;
        TableId                 tableIdCorrection;
        FieldId                 fieldIdCorrection;
        const str tableIdField = 'TableId';

        [tableIdCorrection, fieldIdCorrection]  = ledgerSheetType.fieldCorrection(reportTable.CurrencyType);

        fieldCorrection = fieldid2name(tableIdCorrection, fieldIdCorrection);

        debitExpr       = '((%1.' + fieldAmount + ' > 0) && (%2.' + fieldCorrection + ' == 0)) || ((%1.'
                                  + fieldAmount + ' < 0) && (%2.' + fieldCorrection + ' == 1))';

        creditExpr      = '((%1.' + fieldAmount + ' < 0) && (%2.' + fieldCorrection + ' == 0)) || ((%1.'
                                  + fieldAmount + ' > 0) && (%2.' + fieldCorrection + ' == 1))';

        if (ledgerSheetType.fieldTransDate())
        {
            [tableId, fieldId] = ledgerSheetType.fieldTransDate();

            qbds = query.dataSourceTable(tableId);
            if (qbds)
            {
                switch (amountType)
                {
                    case balanceDebitStart, balanceCreditStart :
                        range = queryRange(datenull(), reportTable.FromDate - 1);
                        break;
                    case turnoverDebit, turnoverCredit :
                        range = queryRange(reportTable.FromDate, reportTable.ToDate);
                        break;
                    case balanceDebitEnd, balanceCreditEnd :
                        range = queryRange(datenull(), reportTable.ToDate);
                        break;
                }

                findOrCreateRange_W(qbds, fieldId, range);
            }
        }

        tableId = ledgerSheetType.transTableId();

        qbds = query.dataSourceTable(tableId);

        if (tableIdCorrection != tableId)
        {
            qbds_W = query.dataSourceTable(tableIdCorrection);
        }

        if (qbds)
        {
            switch (amountType)
            {
                case balanceDebitStart :
                case balanceDebitEnd :
                    if (reportTable.ReportType == RLedgerTurnoverSheetType::LedgerDimension)
                    {
                        break;
                    }
                    if (reportLine.LineType == RLedgerTurnoverSheetLineType::Trans)
                    {
                        if (! conFind(reportTable.GroupKeyExp, true))
                        {
                            break;
                        }
                    }
                    else if (! conPeek(reportTable.GroupKeyExp, reportLine.Level))
                    {
                        break;
                    }
                case turnoverDebit :
                    qbr = findOrCreateRange_W(qbds,
                                              fieldname2id(tableId, tableIdField),
                                              strFmt(debitExpr, qbds.name(), tableIdCorrection == tableId ? qbds.name() : qbds_W.name()));
                    break;
                case balanceCreditStart :
                case balanceCreditEnd :
                    if (reportTable.ReportType == RLedgerTurnoverSheetType::LedgerDimension)
                    {
                        break;
                    }
                    if (reportLine.LineType == RLedgerTurnoverSheetLineType::Trans)
                    {
                        if (! conFind(reportTable.GroupKeyExp, true))
                        {
                            break;
                        }
                    }
                    else if (! conPeek(reportTable.GroupKeyExp, reportLine.Level))
                    {
                        break;
                    }
                case turnoverCredit :
                    qbr = findOrCreateRange_W(qbds,
                                              fieldname2id(tableId, tableIdField),
                                              strFmt(creditExpr, qbds.name(), tableIdCorrection == tableId ? qbds.name() : qbds_W.name()));
                    break;
            }

            if (qbr)
            {
                qbr.status(RangeStatus::Hidden);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets context filters on the query.
    /// </summary>
    protected void setQueryRanges()
    {
        int                             idx;
        QueryBuildDataSource            qbds;
        FieldId                         fieldId;
        FieldId                         fieldIdRecId;
        str                             value;
        container                       keyData = this.getKeyData();
        const str recIdField = 'RecId';

        if (keyData)
        {
            qbds = query.dataSourceTable(ledgerSheetType.transTableId());

            fieldIdRecId = fieldname2id(ledgerSheetType.transTableId(), recIdField);

            for (idx = 1; idx <= conlen(keyData); idx++)
            {
                [fieldId, value] = conpeek(keyData, idx);

                if (fieldId == fieldIdRecId)
                {
                    tmpRecIdFilter.RefRecId     = str2int64(value);
                    tmpRecIdFilter.RefTableId   = ledgerSheetType.transTableId();
                    tmpRecIdFilter.insert();
                }
                else
                {
                    qbds.addRange(fieldId).value(value);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a drill-through action for a particular amount in the report.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the report line being clicked.
    /// </param>
    /// <param name="_amountType">
    /// The integer code of the amount type.
    /// </param>
    static void drillThrough(RecId _recId, int _amountType)
    {
        RLedgerTurnoverSheetLine          reportLine;
        RLedgerTurnoverDrillThroughAction drillThroughAction;

        reportLine = RLedgerTurnoverSheetLine::findRecId(_recId);

        if (reportLine)
        {
            drillThroughAction = new RLedgerTurnoverDrillThroughAction(reportLine, _amountType);
            drillThroughAction.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>