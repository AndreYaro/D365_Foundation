<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_FinancialLiteTransCreatorValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventUpd_FinancialLiteTransCreatorValidator</c> contains validation logic for <c>InventUpd_FinancialLiteTransCreator</c> class.
/// </summary>
internal class InventUpd_FinancialLiteTransCreatorValidator
{
    private InventMovement movement;
    private DateInvent     dateInvent;
    private InventQty      updQty;
    private boolean        allowNegativePhysical;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(InventMovement  _inventMovement, DateInvent _dateInvent, InventQty _updQty)
    {
        movement = _inventMovement;
        dateInvent = _dateInvent;
        updQty = _updQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventUpd_FinancialLiteTransCreatorValidator construct(InventMovement  _inventMovement, DateInvent _dateInvent, InventQty _updQty)
    {
        return new InventUpd_FinancialLiteTransCreatorValidator(_inventMovement, _dateInvent, _updQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performValidations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform necessary validations before creating new inventory transactions by <c>InventUpd_FinancialLiteTransCreator</c>
    /// </summary>
    internal boolean performValidations()
    {
        InventUpd_Estimated inventUpdEstimated = InventUpd_Estimated::newInventMovement(movement);
        boolean ok = inventUpdEstimated.validateUpdateMovement();

        if (!movement.validateLocationBlocking(movement.inventdim()))
        {
            ok = false;
        }

        if (!movement.checkUpdateStandard(dateInvent))
        {
            ok = false;
        }

        if (!movement.checkCountingLocks(movement.inventdim()))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseFinancialLiteTransInventCreatorForMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if <c>InventUpd_FinancialLiteTransCreator</c> can be used for provided <c>InventMovement</c> instance.
    /// </summary>
    /// <param name = "_inventMovement">Movement for which validation should be performed.</param>
    /// <returns>True, if <c>InventUpd_FinancialLiteTransCreator</c> can be used, false otherwise.</returns>
    internal static boolean canUseFinancialLiteTransInventCreatorForMovement(InventMovement _inventMovement)
    {
        boolean canUseApi = InventUpd_FinancialLiteTransCreatorValidator::isMovementTypeValid(_inventMovement);

        if (!canUseApi || _inventMovement.pdsCWItem())
        {
            return false;
        }
        
        if (_inventMovement.mustBeCostControlled() && _inventMovement.canCommittedCostBeReversed())
        {
            return false;
        }

        if (_inventMovement.mustBeRegistered() || _inventMovement.mustBePicked())
        {
            return false;
        }

        if (_inventMovement.mustDoAutoLossProfitEstimate() && !_inventMovement.parmMustDoAutoLossProfitForbid())
        {
            return false;
        }

        return canUseApi;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMovementTypeValid</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean isMovementTypeValid(InventMovement _inventMovement)
    {
        // for containers we are validationg only WHSInventMov_ContainerFrom movement
        // as assumption is that if for one WHSInventTrans WHSInventMov_ContainerFrom is valid        
        // then WHSInventMov_ContainerTo should also be valid
        // (valid here means, that InventUpd_FinancialLiteTransCreator could be used)
        return _inventMovement is WHSInventMov_ContainerFrom;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>