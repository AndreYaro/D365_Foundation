<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CommissionApplicationSuite_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class adjusts the base <c>Commission</c> class logic in order to enable commission settlement on payments instesd of invoice according to feature setup.
/// </summary>
[ExtensionOf(classStr(Commission))]
public final class CommissionApplicationSuite_IT_Extension
{
    public real correctionFactor_IT;
    public real lineAmountRatio_IT;
    public ItemId itemId_IT;
    public CustGroupId custTableGroupId_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustInsertCommissionTrans</Name>
				<Source><![CDATA[
    protected boolean mustInsertCommissionTrans()
    {
        return next mustInsertCommissionTrans() && !FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            CommissionTrans commissionTrans = this.parmCommissionTrans_W();

            if (!salesGroup || this.isCommissionCalculated())
            {
                return;
            }

            ttsbegin;

            CommissionSalesRep commissionSalesRep;

            while select commissionSalesRep
                where commissionSalesRep.GroupId == salesGroup
            {
                CommissionCalc commissionCalc;

                debitAC = this.commissionLedgerDimension();
                creditAccount = this.commissionOffsetLedgerDimension();
                CommissionTrans existingCommissionTrans;

                select firstonly existingCommissionTrans
                    where existingCommissionTrans.InvoiceId == commissionTrans.invoiceId
                        && existingCommissionTrans.Person == commissionSalesRep.Person
                        && existingCommissionTrans.ItemId == itemId_IT
                        && existingCommissionTrans.InventTransId_IT == commissionTrans.InventTransId_IT;

                commissionTrans.Person = commissionSalesRep.Person;
                commissionTrans.AmountCur = 0;

                if (!existingCommissionTrans)
                {
                    commissionTrans.RecId = 0;
                }
                else
                {
                    commissionTrans.data(existingCommissionTrans);
                }

                commissionTrans.selectForUpdate(true);
                commissionTrans.amountCur = existingCommissionTrans.amountCur + this.calcCurrencyAmount_IT(commissionSalesRep, commissionCalc);

                commissionTrans.AmountMST = CurrencyExchangeHelper::mstAmount(commissionTrans.AmountCur, commissionTrans.CurrencyCode, commissionTrans.InvoiceDate, Currency::noYes2UnknownNoYes(triangulation), exchRate, exchrateSecondary);

                if (commissionTrans.AmountMST)
                {
                    this.insertCommissionTrans_IT();

                    if (ledgerVoucher)
                    {
                        this.ledgerVoucherTrans_IT();
                    }

                    this.updateAccruedAmount_IT();
                }
                this.addCommissionAmount(commissionTrans.AmountCur);
            }

            this.updateCommissionCalc();
            this.parmCommissionTrans_W(commissionTrans);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates voucher transactions.
    /// </summary>
    /// <param name = "_debitAC">The debit account.</param>
    /// <param name = "_creditAccount">The credit account.</param>
    /// <param name = "_amountToPost">The amount to post.</param>
    protected void ledgerVoucherTrans_IT(
        ledgerDimensionDefaultAccount _debitAC = debitAC,
        LedgerDimensionDefaultAccount _creditAccount = creditAccount,
        AmountCur _amountToPost = commissionTrans.amountCur)
    {
        if (this is Commission_Sales)
        {
            Commission_Sales commission_Sales = this;
            commission_Sales.ledgerVoucherTrans_IT(_debitAC,_creditAccount,_amountToPost);
        }
        else
        {
            LedgerVoucher ledgerVoucher = this.parmLedgerVoucher();

            TransTxt transTxt = ledgerVoucher.findLedgerVoucherObject().lastTransTxt();

            TransactionTxt transactionTxt = this.parmTransactionTxt_W();
            transactionTxt = TransactionTxt::construct();
            transactionTxt.setLanguage (languageId);
            transactionTxt.setType (LedgerTransTxt::SalesCommission);
            transactionTxt.setVoucher (ledgerVoucher.lastVoucher());
            transactionTxt.setKey1 (DirPerson::find(commissionTrans.Person).NameAlias);

            this.addLedgerVoucherTrans_IT(
            ledgerVoucher,
            LedgerPostingType::SalesCommission,
            LedgerDimensionFacade::serviceCreateLedgerDimension(_debitAC, commissionTrans.DefaultDimension),
            commissionTrans.currencyCode,
            commissionTrans.TableId,
            commissionTrans.RecId,
            _amountToPost,
            transactionTxt.txt());

            this.addLedgerVoucherTrans_IT(
            ledgerVoucher,
            LedgerPostingType::SalesOffsetAccountCommission,
            LedgerDimensionFacade::serviceCreateLedgerDimension(_creditAccount, commissionTrans.DefaultDimension),
            commissionTrans.currencyCode,
            commissionTrans.TableId,
            commissionTrans.RecId,
            -_amountToPost,
            transactionTxt.txt());

            ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);

            this.parmTransactionTxt_W(transactionTxt);
            this.parmLedgerVoucher(ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommission</Name>
				<Source><![CDATA[
    public static Commission newCommission(
        LedgerVoucher _ledgerVoucher,
        CustVendInvoiceJour _custVendInvoiceJour,
        CustVendInvoiceTrans _custVendInvoiceTrans)

    {
        Commission ret = next newCommission(_ledgerVoucher,_custVendInvoiceJour,_custVendInvoiceTrans);

        if (FeatureStateProvider::isFeatureEnabled(CommissionSettlementOnPaymentsFeature::instance()))
        {
            ret = null;

            boolean post;
            ContextPostNewCommission_IT contextPostNewCommission = ContextPostNewCommission_IT::current();

            if (contextPostNewCommission)
            {
                if( contextPostNewCommission.postNewCommission == true)
                {
                    post = true;
                }
                contextPostNewCommission.dispose();
            }

            switch (_custVendInvoiceJour.TableId)
            {
                case tablenum(CustInvoiceJour) :
                    CustInvoiceJour custInvoiceJourLocal = _custVendInvoiceJour;
                    CustInvoiceTrans custInvoiceTransLocal = _custVendInvoiceTrans;

                    if (CustInvoiceJourLocal
                        && CustInvoiceJourLocal.CommissionType_IT == CommissionType_IT::Payment
                        && post)
                    {
                        ret = Commission_Settlement_IT::newCommission(_ledgerVoucher, custInvoiceJourLocal, custInvoiceTransLocal);
                    }
                    else
                    {
                        ret = Commission_Sales::newCommission(_ledgerVoucher, _custVendInvoiceJour, _custVendInvoiceTrans);
                    }

                    break;

                case tablenum(ProjProposalJour):
                    ret = Commission_Project::newCommision(_ledgerVoucher, _custVendInvoiceJour, _custVendInvoiceTrans);
                    break;
            }

            if (!ret)
            {
                throw error("@SYS18626");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommissionTrans_W</Name>
				<Source><![CDATA[
    public CommissionTrans parmCommissionTrans_W( CommissionTrans _commissionTrans = this.commissionTrans)
    {
        this.commissionTrans = _commissionTrans;
        return this.commissionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionTxt_W</Name>
				<Source><![CDATA[
    public TransactionTxt parmTransactionTxt_W( TransactionTxt _transactionTxt = transactionTxt)
    {
        this.transactionTxt = _transactionTxt;
        return this.transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the commission amount value.
    /// </summary>
    /// <param name = "_commissionSalesRep">The <c>CommissionSalesRep</c> record.</param>
    /// <param name = "_commissionCalc">The <c>CommissionCalc</c> record.</param>
    /// <returns>The commission amount value.</returns>
    public AmountCur calcCurrencyAmount_IT(CommissionSalesRep _commissionSalesRep, CommissionCalc _commissionCalc)
    {
        AmountCur currencyAmount;
        CommissionTrans commissionTrans = this.parmCommissionTrans_W();
        AmountCur base;

        while select CommissionBasis, DiscLevel, CommissionBase, SearchAgain from _commissionCalc
            where ((_commissionCalc.ItemCode == TableGroupAll::Table && _commissionCalc.ItemRelation == itemId_IT )
                    || (_commissionCalc.ItemCode == TableGroupAll::GroupId && _commissionCalc.ItemRelation == itemGroup)
                    || (_commissionCalc.ItemCode == TableGroupAll::All && _commissionCalc.ItemRelation == ''))
                && ((_commissionCalc.CustomerCode == TableGroupAll::Table && _commissionCalc.CustomerRelation == orderAccount)
                    || (_commissionCalc.CustomerCode == TableGroupAll::GroupId && _commissionCalc.CustomerRelation == custGroup)
                    || (_commissionCalc.CustomerCode == TableGroupAll::All && _commissionCalc.CustomerRelation == ''))
                && ((_commissionCalc.SalesRepCode == CommissionSalesRepCode::GroupId && _commissionCalc.SalesRepRelation == salesGroup)
                    || (_commissionCalc.SalesRepCode == CommissionSalesRepCode::All && _commissionCalc.SalesRepRelation == ''))
                && _commissionCalc.FromDate <= commissionTrans.InvoiceDate
                && (_commissionCalc.ToDate >= commissionTrans.InvoiceDate
                    || _commissionCalc.ToDate == dateNull())
        {
            switch (_commissionCalc.discLevel)
            {
                case DiscLevel::BeforeLineDisc:
                    base = PriceDisc::calcGrossAmount(salesPrice, priceUnit, qty, qty, markup, commissionTrans.CurrencyCode, lineAmount);

                    if (lineAmountRatio_IT)
                    {
                        base = base * lineAmountRatio_IT;
                    }

                    break;

                case DiscLevel::AfterLineDisc :
                    base = lineAmount;
                    break;

                case DiscLevel::AfterEndDisc :
                    if (endDisc)
                    {
                        base = CurrencyExchangeHelper::amount(lineAmount * endFactor, commissionTrans.currencyCode);
                    }
                    else
                    {
                        base = lineAmount;
                    }
                    break;

                default:
                    break;
            }

            if (_commissionCalc.commissionBasis == RevenueContributionMargin::ContributionMargin)
            {
                    base -= CurrencyExchangeHelper::curAmount(
                        costValue,
                        commissionTrans.currencyCode,
                        commissionTrans.invoiceDate,
                        Currency::noYes2UnknownNoYes(triangulation),
                        exchRate,
                        exchrateSecondary);
            }

            this.setThresholds_IT(_commissionSalesRep, _commissionCalc);
            base = this.limitBaseAmount_IT(base);
            base = CurrencyExchangeHelper::amount(base * _commissionSalesRep.proportion / 100, commissionTrans.currencyCode);
            currencyAmount += CurrencyExchangeHelper::amount(base * _commissionCalc.commissionBase / 100, commissionTrans.currencyCode);

            if (!_commissionCalc.searchAgain)
            {
                break;
            }
        }

        return currencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommissionTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates commission transaction
    /// </summary>
    public void insertCommissionTrans_IT()
    {
        if (this is Commission_SalesOrder_IT)
        {
            Commission_SalesOrder_IT commission_SalesOrder = this;
            commission_SalesOrder.insertCommissionTrans();
        }
        else
        {
            CommissionTrans commissionTrans = this.parmCommissionTrans_W();

            if (commissionTrans.validateWrite())
            {
                commissionTrans.write();
            }

            this.parmCommissionTrans_W(commissionTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitBaseAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the base amount in order to prevent non-credit note related negative amount.
    /// </summary>
    /// <param name = "_base">The amount to check.</param>
    /// <returns>The adjusted amount.</returns>
    public AmountCur limitBaseAmount_IT(AmountCur _base)
    {
        AmountCur base;

        if (qty < 0)
        {
            base = min(_base, 0); // allow negative commission if creditnote, returned item
        }
        else
        {
            base = max(_base, 0); // do not allow negative commission transactions caused by discount
        }

        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThresholds_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the thresholds.
    /// </summary>
    /// <param name = "_commissionSalesRep">The <c>CommissionSalesRep</c> record.</param>
    /// <param name = "_commissionCalc">The <c>CommissionCalc</c> record.</param>
    public void setThresholds_IT(CommissionSalesRep _commissionSalesRep, CommissionCalc _commissionCalc)
    {
        if (this is Commission_Sales)
        {
            Commission_Sales commission_Sales = this;
            commission_Sales.setThresholds_IT(_commissionSalesRep, _commissionCalc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccruedAmount_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accrued amount.
    /// </summary>
    protected void updateAccruedAmount_IT()
    {
        if ( this is Commission_Sales)
        {
            Commission_Sales Commission_Sales = this;
            Commission_Sales.updateAccruedAmount_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerVoucherTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ledger voucher transactions.
    /// </summary>
    /// <param name = "_ledgerVoucher">The <c>LedgerVoucher</c> object.</param>
    /// <param name = "_postingType">The posting type.</param>
    /// <param name = "_account">The ledger dimension account.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_tableId">The source table Id.</param>
    /// <param name = "_recId">The source record Id.</param>
    /// <param name = "_amountToPost">The amount to post</param>
    /// <param name = "_txt">The transaction text.</param>
    /// <param name = "_isSummaryLedgerDetailLevel">Determines if ledger detail level is summary.</param>
    public void addLedgerVoucherTrans_IT(
        LedgerVoucher _ledgerVoucher,
        LedgerPostingType _postingType,
        LedgerDimensionAccount _account,
        CurrencyCode _currencyCode,
        TableId _tableId,
        RecId _recId,
        AmountCur _amountToPost,
        TransTxt _txt,
        boolean _isSummaryLedgerDetailLevel = false)
    {
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
        exchangeRateHelper.parmExchangeRate1(exchRate);
        exchangeRateHelper.parmExchangeRate2(exchrateSecondary);

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerVoucher.findLedgerVoucherObject(),
                _postingType,
                _account,
                 _currencyCode,
                _amountToPost,
                exchangeRateHelper);

        ledgerVoucherTransObject.parmSourceTableId(_tableId);
        ledgerVoucherTransObject.parmSourceRecId(_recId);
        ledgerVoucherTransObject.parmTransTxt(_txt);

        if (_isSummaryLedgerDetailLevel)
        {
            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
        }

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>