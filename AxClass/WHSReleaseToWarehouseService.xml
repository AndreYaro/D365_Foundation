<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReleaseToWarehouseService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReleaseToWarehouseService</c> class exposes services for releasing transfer orders to warehouse.
/// </summary>
public class WHSReleaseToWarehouseService extends WHSReleaseToWarehouseServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSOrderNum orderId(Common _order)
    {
        InventTransferTable inventTransferTable = _order as InventTransferTable;
        return inventTransferTable.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderInventLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected InventLocation orderInventLocation(Common _order)
    {
        InventTransferTable inventTransferTable = _order as InventTransferTable;
        return inventTransferTable.fromInventLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReleasedOrdersLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setReleasedOrdersLog(WHSInstrumentationReleaseToWarehousePerformanceTask _perfTask, int _processedOrders)
    {
        _perfTask.setReleasedTransferOrders(_processedOrders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotReleaseMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str cannotReleaseMessage(Common _order)
    {
        return WHSWarehouseRelease::cannotReleaseTransferMessage(_order);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Common retrieveOrder(QueryRun _queryRun)
    {
        InventTransferTable transferTable = _queryRun.get(tableNum(InventTransferTable));
        return transferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanReleaseOrderPreProcess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean checkCanReleaseOrderPreProcess(Common	_order, boolean	_allowPartiallyReleased)
    {
        return this.checkCanReleaseTransferOrderPreProcess(_order, _allowPartiallyReleased);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanReleaseTransferOrderPreProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified transfer order can be released to warehouse before the release is done.
    /// </summary>
    /// <param name="_transferTable">
    /// The transfer order.
    /// </param>
    /// <param name="_allowPartiallyReleased">
    /// Boolean value which is used to specify whether remaining quantities for partially released transfer orders
    /// should be released to warehouse
    /// </param>
    /// <returns>
    /// true if the transfer order can be released to warehouse; otherwise, false.
    /// </returns>
    protected boolean checkCanReleaseTransferOrderPreProcess(
        InventTransferTable	_transferTable,
        boolean				_allowPartiallyReleased)
    {
        boolean result = WHSFulfillmentRateValidator::checkFulfillmentRateForTransfer(_transferTable);

        if (result && !_allowPartiallyReleased && _transferTable.isPartiallyReleased())
        {
            result = checkFailed("@SYP4881421");
            error(strFmt("@WAX:TransferOrderNotReleased_Label", _transferTable.TransferId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoReleaseTransferOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases transfer orders to warehouse.
    /// </summary>
    /// <param name="_contract">
    /// Parameters of the release to warehouse operation.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the specified contract is not valid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if called in transaction scope.
    /// </exception>
    public void autoReleaseTransferOrders(WHSTransferAutoRTWContract _contract)
    {
        using (WHSInstrumentationReleaseToWarehousePerformanceTask perfTask = WHSInstrumentationReleaseToWarehousePerformanceTask::newFromAction('autoReleaseTransferOrders'))
        {
            errorsFound = false;

            if (!_contract.validate())
            {
                throw error("@SYS78886");
            }

            this.autoReleaseOrderToWarehouse(
                perfTask,
                "@SYP4860549",
                "@SYP4860552",
                _contract.parmQuery(),
                _contract.parmWHSReleaseQuantitySpecification(),
                _contract.parmAllowPartiallyReleased(),
                _contract.parmGroupIntoMultipleReleases());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalOrdersReleaseQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query finalOrdersReleaseQuery(Query _query)
    {
        Query query = _query;
        QueryBuildDataSource  dsTransferLines = query.dataSourceTable(tableNum(InventTransferTable)).addDataSource(tableNum(InventTransferLine));
        dsTransferLines.relations(true);
        dsTransferLines.joinMode(JoinMode::ExistsJoin);
        dsTransferLines.addRange(fieldNum(InventTransferLine, QtyRemainShip)).value('>0');

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveTransferLine</Name>
				<Source><![CDATA[
    private void reserveTransferLine(InventTransferLine _transferLine)
    {
        InventMovement  movement = InventMovement::construct(_transferLine);
        InventQty       reserveQty;
        PdsCWQty        reserveCWQty;
        boolean         needsQuantityReserved;

        if (PdsGlobal::pdsIsCWItem(_transferLine.ItemId))
        {
            reserveCWQty = _transferLine.PdsCWQtyRemainShip - movement.transIdSum().pdsCWReservPhysical() - movement.transIdSum().pdsCWPhysical();

            if (reserveCWQty > 0)
            {
                reserveQty = WhsInvent::defaultCatchWeightReserveQuantity(_transferLine.ItemId, reserveCWQty);
                needsQuantityReserved = true;
            }
        }
        else
        {
            reserveQty = _transferLine.QtyRemainShip - movement.transIdSum().reservPhysical() - movement.transIdSum().physicalInvent();
            needsQuantityReserved = reserveQty != 0;
        }

        if (needsQuantityReserved)
        {
            // We allow reducing reservation quantities to avoid making precise calculations of how much needs to be reserved.
            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(movement,
                                                                            -reserveQty, /* _mayBeReduced */
                                                                            true,
                                                                            false,
                                                                            false,
                                                                            -reserveCWQty);
            reservation.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void reserveOrder(Common _order)
    {
        this.reserveTransferOrder(_order);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveTransferOrder</Name>
				<Source><![CDATA[
    private void reserveTransferOrder(InventTransferTable _transferOrder)
    {
        InventTransferLine transferLine;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        // Because of potential for automatic weight adjustments, transfer line must be selected for update for catch weight items.
        while select forupdate transferLine
            where transferLine.TransferId == _transferOrder.TransferId
                && transferLine.QtyRemainShip > 0
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == transferLine.InventTransId
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::None
                    && (inventTrans.StatusIssue == StatusIssue::OnOrder || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
        {
            this.reserveTransferLine(transferLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReleaseToWarehouse</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean createTmpReleaseToWarehouse(
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        Common _order,
        WHSWarehouseReleaseProcessingResult _processingResult,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification = WHSReleaseQuantitySpecification::ReservedPhysically)
    {
        return WHSReleaseToWarehouseService::createTransferTmpReleaseToWarehouseRecords(_releaseToWarehouseId, _releaseToWarehouse, _order, _processingResult, _releaseQuantitySpecification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferTmpReleaseToWarehouseRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and validate temporary release to warehouse records for a transfer order.
    /// </summary>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse number for the transfer order.
    /// </param>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> buffer to use when creating records.
    /// </param>
    /// <param name="_transferTable">
    /// The transfer order header record to be released.
    /// </param>
    /// <param name="_processingResult">
    /// The class that stores processing details.
    /// </param>
    /// <param name="_releaseQuantitySpecification">
    /// The release quantity specification; optional.
    /// </param>
    /// <returns>
    /// true if lines were created that can be released; otherwise, false.
    /// </returns>
    public static boolean createTransferTmpReleaseToWarehouseRecords(
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        InventTransferTable _transferTable,
        WHSWarehouseReleaseProcessingResult _processingResult,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification = WHSReleaseQuantitySpecification::ReservedPhysically)
    {
        WHSReleaseToWarehouseService releaseToWarehouseService = new WHSReleaseToWarehouseService();
        return releaseToWarehouseService.createTmpReleaseToWarehouseRecords(
            WHSModule::Transfer,
            _transferTable.TransferId,
            InventTransType::TransferOrderShip,
            _processingResult,
            _releaseToWarehouseId,
            _releaseToWarehouse,
            _releaseQuantitySpecification,
            "@WAX2356");
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransSumDimEnumerator</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSInventTransSumDimEnumerator inventTransSumDimEnumerator(WHSOrderNum _orderNum)
    {
        return new WHSInventTransSumDimQuery()
            .forIssueOfTransferId(_orderNum)
            .fromWHSEnabledWarehouse()
            .onlyTMSItems()
            .forNotWMSOrder(WMSOrderStatus::New, WMSOrderStatus::InExpedition)
            .getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyUnprocessedOutputOrders</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean anyUnprocessedOutputOrders(WHSOrderNum _orderNum)
    {
        return WHSReleaseToWarehouseService::anyUnprocessedOutputOrdersForTransferOrder(InventTransferTable::find(_orderNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyUnprocessedOutputOrdersForTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the particular transfer line which was unprocessed due to some issues as a part of batch release
    /// for transfer orders. If found then it implies that a picking list was created and warehouse management processes are blocked.
    /// If in real, picking list is not yet registered then should be continued using warehouse management processes to process unprocessed orders.
    /// </summary>
    /// <param name="_inventTransferTable">
    /// The transfer order.
    /// </param>
    /// <returns>
    /// true if the current transfer line is unprocessed because of some validation issues; otherwise false
    /// </returns>
    public static boolean anyUnprocessedOutputOrdersForTransferOrder(InventTransferTable _inventTransferTable)
    {
        WHSInventTransSumDimEnumerator inventTransSumDimEnuWMSOrderNewInExpedition = new WHSInventTransSumDimQuery().forIssueOfTransferId(_inventTransferTable.TransferId)
                                                                    .fromWHSEnabledWarehouse()
                                                                    .onlyTMSItems()
                                                                    .forWMSOrder(WMSOrderStatus::New, WMSOrderStatus::InExpedition)
                                                                    .getEnumerator();

        return (inventTransSumDimEnuWMSOrderNewInExpedition.moveNext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReleaseToWarehouseIdGlobal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void setReleaseToWarehouseIdGlobal(boolean _shipConsolidationPolicyExist, NoYes _shouldGroupIntoMultipleReleases = NoYes::No)
    {
        if (!_shouldGroupIntoMultipleReleases
            && _shipConsolidationPolicyExist)
        {
            releaseToWarehouseIdGlobal = WHSTmpReleaseToWarehouse::getNextReleaseToWarehouseId();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>