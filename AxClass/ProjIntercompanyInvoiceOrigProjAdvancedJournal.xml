<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyInvoiceOrigProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps the values from a project advanced journal line to be used when generating an
/// invoice against the borrowing legal entity.
/// </summary>
class ProjIntercompanyInvoiceOrigProjAdvancedJournal implements ProjIntercompanyInvoiceOrigTrans
{
    ProjAdvancedJournalLine projAdvancedJournalLine;
    private ProjAdvancedJournalLine projAdvancedJournalLineCostForProjOps;
    AmountCur indirectComponentInvoiceAmount;
    AmountCur finalSalesPrice;
    protected boolean projOpsIntegEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the activity number of the project advanced journal line.
    /// </summary>
    /// <returns>
    /// The activity number of the project advanced journal line.
    /// </returns>
    public ProjActivityNumber getActivityNumber()
    {
        return projAdvancedJournalLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total line amount to be invoiced to the other legal entity.
    /// </summary>
    /// <returns>
    /// The line amount to be invoiced to the other legal entity.
    /// </returns>
    public AmountCur getAmountCur()
    {
        return projAdvancedJournalLine.ExtendedPrice + indirectComponentInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the transaction, which is the one that the borrowing legal entity will be invoiced.
    /// </summary>
    /// <returns>
    /// The currency code that the transaction should be invoiced.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return projAdvancedJournalLine.PriceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code in which the cost is incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The currency code in which the cost is incurred in the lending company.
    /// </returns>
    public CurrencyCode getCostCurrency()
    {
        // For proj ops integrated case, if this is an intercompany journal line then we need to get the cost price from Resourcing Unit actual.
        if (projOpsIntegEnabled && !projAdvancedJournalLine.UnitCost && projAdvancedJournalLine.DataAreaId != projAdvancedJournalLine.ProjDataAreaId)
        {
            if (!projAdvancedJournalLineCostForProjOps)
            {
                projAdvancedJournalLineCostForProjOps = this.getCostJournalLineForProjOps();
            }
            return projAdvancedJournalLineCostForProjOps.CostCurrency;
        }
        
        return projAdvancedJournalLine.CostCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price of the transaction incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The cost price of the transaction incurred in the lending company.
    /// </returns>
    public Amount getCostPrice()
    {
        // For proj ops integrated case, if this is an intercompany journal line then we need to get the cost price from Resourcing Unit actual.
        if (projOpsIntegEnabled && !projAdvancedJournalLine.UnitCost && projAdvancedJournalLine.DataAreaId != projAdvancedJournalLine.ProjDataAreaId)
        {
            if (!projAdvancedJournalLineCostForProjOps)
            {
                projAdvancedJournalLineCostForProjOps = this.getCostJournalLineForProjOps();
            }
            return projAdvancedJournalLineCostForProjOps.UnitCost;
        }
        return projAdvancedJournalLine.UnitCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostJournalLineForProjOps</Name>
				<Source><![CDATA[
    private ProjAdvancedJournalLine getCostJournalLineForProjOps()
    {
        ProjAdvancedJournalLine advJourLine;
        ProjCDSActualsImport interOrgSalesImport = ProjCDSActualsImport::findByAdvancedJournalLine(projAdvancedJournalLine.RecId);
        guid costActualId = ProjCDSTransactionRelationshipImport::findOpposingTransactionId(interOrgSalesImport.ActualId, ProjCDSConstants::TransactionRoleString_InterOrgSales, ProjCDSConstants::TransactionRoleString_ResourcingUnitCost);
        if (costActualId)
        {
            ProjCDSActualsImport costImport = ProjCDSActualsImport::findByActualId(costActualId);
            if (costImport && costImport.ProjAdvancedJournalLine)
            {
                advJourLine = ProjAdvancedJournalLine::find(costImport.ProjAdvancedJournalLine);
            }
        }
        return advJourLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the lending legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the lending legal entity.
    /// </returns>
    public DataAreaId getDataAreaId()
    {
        return projAdvancedJournalLine.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default dimension set of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public LedgerDefaultDimensionValueSet getDefaultDimension()
    {
        return projAdvancedJournalLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public Description getDescription()
    {
        return projAdvancedJournalLine.Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency in which the sales price to the end customer is expressed in.
    /// </summary>
    /// <returns>
    /// The currency in which the sales price to the end customer is expressed in.
    /// </returns>
    public CurrencyCode getFinalSalesCurrencyCode()
    {
        return projAdvancedJournalLine.PriceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price that the final customer will be charged for this item.
    /// </summary>
    /// <returns>
    /// The sales price that the final customer will be charged for this item.
    /// </returns>
    public AmountCur getFinalSalesPrice()
    {
        if (!finalSalesPrice)
        {
            // Save off value so that it is not repeatedly calculated
            finalSalesPrice = projAdvancedJournalLine.calculateFinalSalesPrice();
        }

        return finalSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice indirect component amount.
    /// </summary>
    /// <returns>
    /// The invoice indirect component amount of the transaction.
    /// </returns>
    public Amount getIndirectCost()
    {
        return indirectComponentInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID of the transaction.
    /// </summary>
    /// <returns>
    /// The line property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId getLinePropertyId()
    {
        return projAdvancedJournalLine.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    /// The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId getProjectCategoryId()
    {
        return projAdvancedJournalLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the borrowing legal entity.
    /// </returns>
    public DataAreaId getProjectDataAreaId()
    {
        return projAdvancedJournalLine.ProjDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the related project in the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The ID of the related project in the borrowing legal entity.
    /// </returns>
    /// <remarks>
    /// This is the project where the costs will be incurred at the borrowing legal entity side.
    /// </remarks>
    public ProjId getProjectId()
    {
        return projAdvancedJournalLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of items in this transaction.
    /// </summary>
    /// <returns>
    /// The number of items in this transactions.
    /// </returns>
    public Qty getQuantity()
    {
        return projAdvancedJournalLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the project advanced journal line.
    /// </summary>
    /// <returns>
    /// The record ID of the intercompany transaction.
    /// </returns>
    public RefRecId getRecId()
    {
        return projAdvancedJournalLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price that the other legal entity is expected to pay for the expense.
    /// </summary>
    /// <returns>
    /// The sales price that the other legal entity is expected to pay for the expense.
    /// </returns>
    public Amount getSalesPrice()
    {
        // Value provided by PSA, not calculated via ProjHourSalesPrice class.
        return projAdvancedJournalLine.UnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line associated with the transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the source document line associated with the transaction.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLine()
    {
        return projAdvancedJournalLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item sales tax group that will be used in the invoice line for this transaction.
    /// </summary>
    /// <returns>
    /// The item sales tax group that will be used in the invoice line for this transaction.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        if (projOpsIntegEnabled && projAdvancedJournalLine.ProjectSalesTaxItemGroup)
        {
            return projAdvancedJournalLine.ProjectSalesTaxItemGroup;
        }
        ProjCategoryId categoryId = ProjIntercompanyParameters::getValidCategory(this.getProjectCategoryId(), this.getProjectDataAreaId(), this.getTransType());
        ProjCategory category = ProjCategory::find(categoryId);

        return category.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
        if (projOpsIntegEnabled)
        {
            return projAdvancedJournalLine.ProjectSalesTaxGroup;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
        return projAdvancedJournalLine.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of the transaction.
    /// </summary>
    /// <returns>
    /// The origin of the transaction.
    /// </returns>
    public ProjTransactionOrigin getTransOrigin()
    {
        return ProjOrigin::ProjAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the project transaction.
    /// </summary>
    /// <returns>
    /// The type of the project transaction.
    /// </returns>
    public ProjTransType getTransType()
    {
        return projAdvancedJournalLine.TransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the symbol of the unit of measure in which the quantity of this item is expressed.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure in which the quantity of this item is expressed.
    /// </returns>
    public UnitOfMeasureSymbol getUnitOfMeasureSymbol()
    {
        UnitOfMeasureCodeSymbol unitOfMeasureCodeSymbol;

        switch (this.getTransType())
        {
            case (ProjTransType::Hour):
                unitOfMeasureCodeSymbol = UnitOfMeasureCodeSymbol::Hours;
                break;

            case (ProjTransType::Cost):
                unitOfMeasureCodeSymbol = UnitOfMeasureCodeSymbol::Pieces;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));

        }

        UnitOfMeasure unitOfMeasure = UnitOfMeasure::findByInternalCode(unitOfMeasureCodeSymbol);
        if (!unitOfMeasure)
        {
            throw error(strFmt("@SYS4005066", unitOfMeasureCodeSymbol));
        }

        return unitOfMeasure.Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit price of the resource being invoiced.
    /// </summary>
    /// <returns>
    /// The unit price of the resource being invoiced, including indirect costs.
    /// </returns>
    public AmountCur getUnitPrice()
    {
        if (indirectComponentInvoiceAmount)
        {
            // Calculate unit price including indirect cost
            return (this.getAmountCur() / this.getQuantity());
        }
        else
        {
            return projAdvancedJournalLine.UnitPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the worker related to this transaction.
    /// </returns>
    public HcmWorkerRecId getWorker()
    {
        return ResourceFacade::getWorker(projAdvancedJournalLine.ResourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    public Name getResourceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        projAdvancedJournalLine = _projAdvancedJournalLine.data();
        projOpsIntegEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        indirectComponentInvoiceAmount = ProjIntercompanyInvoiceOrigProjAdvancedJournal::getIndirectComponentInvoiceAmount(ProjAdvancedJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyInvoiceOrigProjAdvancedJournal</c>.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    /// The <c>ProjAdvancedJournalLine</c> to be used in the invoicing process.
    /// </param>
    /// <returns>
    /// A new instance of <c>ProjIntercompanyInvoiceOrigProjAdvancedJournal</c>.
    /// </returns>
    public static ProjIntercompanyInvoiceOrigProjAdvancedJournal construct(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        return new ProjIntercompanyInvoiceOrigProjAdvancedJournal(_projAdvancedJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the billing status of the transaction being invoiced.
    /// </summary>
    /// <param name="_billed">
    /// true if the transaction was included in some intercompany invoice; false if it should be available to be invoiced.
    /// </param>
    public void setBilled(boolean _billed)
    {
        ProjAdvancedJournalLine updateLine;

        if (_billed && ProjIntercompanyInvoiceCreateValidateIsBilledFlight::instance().isEnabled())
        {
            updateLine = ProjAdvancedJournalLine::find(projAdvancedJournalLine.RecId, true);

            if (updateLine.IntercompanyBilled)
            {
                // Selected intercompany transaction was already marked as billed and cannot be included in intercompany invoice.
                throw error("@Proj:IntercompanyTransactionAlreadyBilled");
            }

            updateLine.IntercompanyBilled = _billed;
            updateLine.update();
        }
        else
        {
            update_recordSet updateLine
                setting intercompanyBilled = _billed
                where updateLine.RecId == projAdvancedJournalLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction in a form.
    /// </summary>
    /// <remarks>
    /// Used for auditing purposes.
    /// </remarks>
    public void showTrans()
    {
        Args args;

        args = new Args();
        args.record(projAdvancedJournalLine.getProjAdvancedJournal());
        args.lookupRecord(projAdvancedJournalLine);
        args.menuItemType(MenuItemType::Display);
        new MenuFunction(MenuItemDisplayStr(projAdvancedJournalLine), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectComponentInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect cost component amount associated with a project advanced journal line that is
    /// to be invoiced.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    /// <c>ProjAdvancedJournalLine</c> record to retrieve the indirect component information for.
    /// </param>
    /// <returns>
    /// The invoice indirect cost amount in the project advanced journal line currency.
    /// </returns>
    public static AmountCur getIndirectComponentInvoiceAmount(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        PSAIndirectComponentTrans   indirectComponentInvoice;

        if (_projAdvancedJournalLine.TransType == ProjTransType::Hour)
        {
            select sum (Amount) from  indirectComponentInvoice
                where indirectComponentInvoice.TransId == _projAdvancedJournalLine.ProjTransId
                && indirectComponentInvoice.IndirectComponentType == PSAIndirectComponentType::Invoice;
        }

        return indirectComponentInvoice.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>