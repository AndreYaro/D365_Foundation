<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreatePackedContainerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreatePackedContainerBase</c> class is a base class for classes used to create work after closing the container.
/// </summary>
public abstract class WHSWorkCreatePackedContainerBase extends WHSWorkCreate
{
    protected WHSContainerTable   containerTable;
    protected WHSWorkCreateId     workCreateId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    public void createTempTable()
    {
        ttsbegin;

        tmpWorkLine.clear();

        tmpWorkLine.WorkType        = WHSWorkType::Pick;
        tmpWorkLine.WorkCreateId    = workCreateId;
        tmpWorkLine.WorkTransType   = WHSWorkTransType::PackedContainerPicking;

        this.initTmpWorkLineForContainer();

        tmpWorkLine.setLineNum();

        tmpWorkLine.insert();

        this.setGlobals();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkCreatePackedContainerBase construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSContainerTable localContainerTable = _common as WHSContainerTable;

        WHSWorkCreatePackedContainerBase workCreate;

        if (localContainerTable.ContainerGroupingLicensePlateId)
        {
            workCreate = WHSWorkCreatePackedContainerGroup::construct(_common, _workCreateId);
        }
        else
        {
            workCreate = WHSWorkCreatePackedContainer::construct(_common, _workCreateId);
        }

        return workCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineForContainer</Name>
				<Source><![CDATA[
    protected abstract void initTmpWorkLineForContainer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineAndGetFirstContainerLine</Name>
				<Source><![CDATA[
    protected WHSContainerLine initTmpWorkLineAndGetFirstContainerLine()
    {
        WHSContainerLine    firstContainerLine;
        WHSLoadLine         firstContainerLoadLine;
        WHSShipmentTable    firstContainerShipmentTable;

        select firstonly firstContainerLine
            where firstContainerLine.ContainerId == containerTable.ContainerId
            join firstContainerLoadLine
                where firstContainerLoadLine.RecId == firstContainerLine.LoadLine
            join firstContainerShipmentTable
                where firstContainerShipmentTable.ShipmentId == containerTable.ShipmentId;

        InventDim firstContainerLineInventDim = firstContainerLine.inventDim();

        this.initTmpWorkLineFromContainerLineInventDim(firstContainerLineInventDim);
        this.initTmpWorkLineFromLoadLine(firstContainerLoadLine);
        this.initTmpWorkLineFromShipment(firstContainerShipmentTable);
        this.initTmpWorkLineFromWarehouseLocation(firstContainerLineInventDim.wmsLocation());

        return firstContainerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkTemplateTable</Name>
				<Source><![CDATA[
    private WHSWorkTemplateTable findWorkTemplateTable()
    {
        WHSWorkTemplateTable workTemplateTable = WHSWorkTemplateTable::find(workTemplateCode, tmpWorkLine.WorkTransType);

        if (workTemplateTable)
        {
            this.validateWorkTemplate(workTemplateTable);
        }
        else
        {
            QueryRun                queryRun;
            WHSWorkTemplateTable    localWorkTemplateTable;

            while select localWorkTemplateTable
            order by localWorkTemplateTable.WorkTemplatePriority
            where localWorkTemplateTable.WorkTransType       == WHSWorkTransType::PackedContainerPicking
                && localWorkTemplateTable.WorkTemplateValid  == NoYes::Yes
            {
                queryRun = this.addRangesToWorkTemplateQuery(localWorkTemplateTable);

                if (queryRun.next())
                {
                    return localWorkTemplateTable;
                }
                else
                {
                    WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                                    this.parmWorkCreateId(),
                                                    strFmt("@WAX1740", localWorkTemplateTable.WorkTemplateCode),
                                                    true,
                                                    tmpWorkLine);
                }
            }
        }

        return workTemplateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTempTable</Name>
				<Source><![CDATA[
    public WHSWorkBuildId processTempTable()
    {
        WHSWorkTemplateTable workTemplateTable = this.findWorkTemplateTable();

        if (!workTemplateTable)
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                                    this.parmWorkCreateId(),
                                                    strFmt("@WAX:ValidWorkTemplateNeedsToBeSetOrContainerClosingProfileNeedsUpdate",
                                                    WHSWorkTransType::PackedContainerPicking),
                                                    true,
                                                    tmpWorkLine);

            throw this.creationOfWorkFailed();
        }

        ttsbegin;

        WHSWorkId workId = this.createWorkTable(
            workCreateId,
            workTemplateTable,
            tmpWorkLine.LicensePlateId);

        this.validateWorkTableCreated(workId, workTemplateTable.WorkTemplateCode);

        this.updateWorkTable(workId);

        this.updateTmpWorkLineAfterWorkHeaderCreated(workTemplateTable.WorkTemplateCode, workId);

        LineNum         lineNum;
        WHSWorkClassId  workClassId;

        [lineNum, workClassId]  = WHSWorkTemplateTable::getWorkTemplateDetail(
            tmpWorkLine.WorkTemplateCode,
            tmpWorkLine.WorkType,
            tmpWorkLine.WorkTransType);

        WHSWorkLine workLine = this.createWorkLineBasedOnTheTmpWorkLine(lineNum, workClassId);

        this.createWorkLineLoadLineDetails(workLine);

        Qty                 runningQtyWork;
        UnitOfMeasureSymbol highestUOM;

        [runningQtyWork, highestUOM] = WHSInventTable::getHighestUnitQtyByUOMSeqGroup(
            workLine.ItemId,
            workLine.InventQtyWork,
            WHSCatchWeightHelper::inventHandlingUnitId(workLine.ItemId),
            workLine.InventDimId);

        ++lineNum;

        InventDim workLineInventDim = workLine.inventDim();

        this.createRemainingWorkLines(
            workId,
            lineNum,
            workLine.InventDimId,
            workLine.InventTransId,
            workLine.ItemId,
            highestUOM ? highestUOM : workLine.UnitId,
            workLineInventDim.InventBatchId,
            workLineInventDim.InventSerialId,
            workLine.OrderNum,
            workLine.ShipmentId,
            workLine.LoadId,
            runningQtyWork,
            workLine.InventQtyWork,
            tmpWorkLine,
            workLineInventDim.InventLocationId);

        this.createWorkInventTransContainer(workLine);

        WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                            workCreateId,
                                            strFmt("@WAX1752", workTemplateTable.WorkTemplateCode),
                                            false,
                                            tmpWorkLine);

        this.validateWorkIsCreatedForAllTmpWorkLines();

        this.createLaborStandards();

        ttscommit;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    protected abstract void createWorkLineLoadLineDetails(WHSWorkLine _workLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkIsCreatedForAllTmpWorkLines</Name>
				<Source><![CDATA[
    private void validateWorkIsCreatedForAllTmpWorkLines()
    {
        WHSTmpWorkLine locTmpWorkLine;

        select firstonly locTmpWorkLine
            where locTmpWorkLine.WorkCreateId   == workCreateId
                && locTmpWorkLine.WorkTransType == tmpWorkLine.WorkTransType
                && locTmpWorkLine.WorkCreated   == NoYes::No;

        if (locTmpWorkLine.RecId != 0)
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                                                workCreateId,
                                                                "@WAX1969",
                                                                true,
                                                                locTmpWorkLine);

            throw this.creationOfWorkFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creationOfWorkFailed</Name>
				<Source><![CDATA[
    private Exception creationOfWorkFailed()
    {
        Message::AddAction(MessageSeverity::Error, "@WAX4687", "@WAX1710", MessageActionType::DisplayMenuItem, MenuItemMessageActionProvider::createMenuItemActionData(MenuItemType::Display, menuitemDisplayStr(WHSWorkCreateHistory)));

        return Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransContainer</Name>
				<Source><![CDATA[
    protected abstract void createWorkInventTransContainer(WHSWorkLine _workLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransForContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the <c>WHSWorkInventTrans</c> record for the given parameters.
    /// </summary>
    /// <param name="_workLine">
    /// The <c>WHSWorkLine</c> record.
    /// </param>
    /// <param name="_containerLine">
    /// The <c>WHSContainerLine</c> record.
    /// </param>
    /// <param name="_loadLine">
    /// The <c>WHSLoadLine</c> record.
    /// </param>
    protected void createWorkInventTransForContainerLine(
        WHSWorkLine         _workLine,
        WHSContainerLine    _containerLine,
        WHSLoadLine         _loadLine)
    {
        InventDim workInventTransInventDimTo = _containerLine.inventDim();
        workInventTransInventDimTo.clearLocationAndBelowDim(_containerLine.ItemId);

        InventDim workInventTransInventDimFrom = workInventTransInventDimTo.data();
        workInventTransInventDimFrom.wmsLocationId  = _workLine.wmsLocationId;
        workInventTransInventDimFrom                = InventDim::findOrCreate(workInventTransInventDimFrom);

        WHSWorkInventTrans workInventTrans = WHSWorkInventTrans::find(
            _workLine.WorkId,
            _workLine.LineNum,
            _containerLine.ItemId,
            _loadLine.InventTransId,
            workInventTransInventDimFrom.InventDimId,
            true);

        if (workInventTrans)
        {
            workInventTrans.increaseQuantities(_containerLine.Qty, 0);
        }
        else
        {
            workInventTrans.WorkId              = _workLine.WorkId;
            workInventTrans.LineNum             = _workLine.LineNum;
            workInventTrans.ItemId              = _containerLine.ItemId;
            workInventTrans.Qty                 = _containerLine.Qty;
            workInventTrans.InventQtyRemain     = workInventTrans.Qty;
            workInventTrans.InventDimIdFrom     = workInventTransInventDimFrom.InventDimId;
            workInventTrans.InventDimIdTo       = InventDim::findOrCreate(workInventTransInventDimTo).InventDimId;
            workInventTrans.InventTransIdParent = _loadLine.InventTransId;
            workInventTrans.TransDateTime       = DateTimeUtil::utcNow();
            workInventTrans.WorkHasReservation  = NoYes::Yes;
            workInventTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineBasedOnTheTmpWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkLine createWorkLineBasedOnTheTmpWorkLine(LineNum _lineNum, WHSWorkClassId _workClassId)
    {
        WHSWorkLine workLine;

        workLine.LineNum            = _lineNum;
        workLine.WorkClassId        = _workClassId;
        workLine.Mandatory          = NoYes::Yes;
        workLine.WorkId             = tmpWorkLine.WorkId;
        workLine.WorkType           = tmpWorkLine.WorkType;
        workLine.wmsLocationId      = tmpWorkLine.wmsLocationId;
        workLine.SortCode           = tmpWorkLine.SortCode;
        workLine.ZoneId             = tmpWorkLine.ZoneId;
        workLine.InventDimId        = tmpWorkLine.InventDimId;
        workLine.OrderNum           = tmpWorkLine.OrderNum;
        workLine.LoadId             = tmpWorkLine.LoadId;
        workLine.ShipmentId         = tmpWorkLine.ShipmentId;
        workLine.ContainerId        = tmpWorkLine.ContainerId;
        workLine.QtyWork            = tmpWorkLine.HighestQty;
        workLine.QtyRemain          = workLine.QtyWork;
        workLine.InventQtyWork      = workLine.workHandlingQuantity();
        workLine.InventQtyRemain    = workLine.InventQtyWork;

        workLine.insert();

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTemplate</Name>
				<Source><![CDATA[
    private void validateWorkTemplate(WHSWorkTemplateTable _workTemplateTable)
    {
        if (!_workTemplateTable.WorkTemplateValid)
        {
            str errorMessage = strFmt("@WAX:WHSWorkCreateContainerInvalidWorkTemplateError", _workTemplateTable.WorkTemplateCode, _workTemplateTable.WorkTransType);

            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                                                workCreateId,
                                                                errorMessage,
                                                                true,
                                                                tmpWorkLine);

            throw error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTable</Name>
				<Source><![CDATA[
    protected abstract void updateWorkTable(WHSWorkId _workId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLaborStandards</Name>
				<Source><![CDATA[
    private void createLaborStandards()
    {
        WHSLaborStandards laborStandards = new WHSLaborStandards(workCreateId);
        laborStandards.computeEstimatedTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTableCreated</Name>
				<Source><![CDATA[
    private void validateWorkTableCreated(WHSWorkId _workId, WHSWorkTemplateCode _workTemplateCode)
    {
        if (!_workId)
        {
            str errorMessage = strFmt("@WAX1740", _workTemplateCode);

            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                                                                workCreateId,
                                                                errorMessage,
                                                                true,
                                                                tmpWorkLine);

            throw error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromContainerTable</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromContainerTable()
    {
        tmpWorkLine.ContainerId     = containerTable.ContainerId;
        tmpWorkLine.LicensePlateId  = containerTable.ContainerId;
        tmpWorkLine.ShipmentId      = containerTable.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromContainerLineInventDim</Name>
				<Source><![CDATA[
    private void initTmpWorkLineFromContainerLineInventDim(InventDim _containerLineInventDim)
    {
        tmpWorkLine.InventLocationId    = _containerLineInventDim.InventLocationId;
        tmpWorkLine.StartLocationId     = _containerLineInventDim.wMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromLoadLine</Name>
				<Source><![CDATA[
    private void initTmpWorkLineFromLoadLine(WHSLoadLine _loadLine)
    {
        tmpWorkLine.OriginType  = WHSOriginType::Load;
        tmpWorkLine.OriginRefId = _loadLine.LoadId;
        tmpWorkLine.RefTableId  = tableNum(WHSLoadTable);
        tmpWorkLine.RefRecId    = WHSLoadTable::find(_loadLine.LoadId).RecId;
        tmpWorkLine.OrderNum    = _loadLine.OrderNum;
        tmpWorkLine.LoadId      = _loadLine.LoadId;

        if (WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled())
        {
            if (_loadLine.InventTransType == InventTransType::TransferOrderShip)
            {
                InventTransferLine transferOrderLine = _loadLine.getOrderCommonFromLoadLine() as InventTransferLine;
                tmpWorkLine.ToWarehouse = transferOrderLine.inventDimReceive().InventLocationId;
            }
            else
            {
                tmpWorkLine.CustVendAC  = _loadLine.displayCustAccount();
            }
        }
        else
        {
            if (_loadLine.InventTransType == InventTransType::Sales)
            {
                tmpWorkLine.CustVendAC  = _loadLine.displayCustAccount();
            }
            else if (_loadLine.InventTransType == InventTransType::TransferOrderShip)
            {
                InventTransferLine transferOrderLine = _loadLine.getOrderCommonFromLoadLine() as InventTransferLine;
                tmpWorkLine.ToWarehouse = transferOrderLine.inventDimReceive().InventLocationId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromShipment</Name>
				<Source><![CDATA[
    private void initTmpWorkLineFromShipment(WHSShipmentTable _shipment)
    {
        tmpWorkLine.CarrierCode         = _shipment.CarrierCode;
        tmpWorkLine.CarrierServiceCode  = _shipment.CarrierServiceCode;
        tmpWorkLine.ModeCode            = _shipment.ModeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromWarehouseLocation</Name>
				<Source><![CDATA[
    private void initTmpWorkLineFromWarehouseLocation(WMSLocation _location)
    {
        tmpWorkLine.wmsLocationId   = _location.wMSLocationId;
        tmpWorkLine.SortCode        = _location.SortCode;
        tmpWorkLine.ZoneId          = _location.ZoneId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpWorkLineAfterWorkHeaderCreated</Name>
				<Source><![CDATA[
    private void updateTmpWorkLineAfterWorkHeaderCreated(WHSWorkTemplateCode _workTemplateCode, WHSWorkId _workId)
    {
        tmpWorkLine.WorkTemplateCode    = _workTemplateCode;
        tmpWorkLine.WorkCreated         = NoYes::Yes;
        tmpWorkLine.WorkId              = _workId;
        tmpWorkLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWorkLineFromContainerLines</Name>
				<Source><![CDATA[
    protected void initTmpWorkLineFromContainerLines(WHSContainerLine _firstContainerLine)
    {
        InventDim tmpWorkLineInventDim;

        tmpWorkLineInventDim.initFromInventDim(_firstContainerLine.inventDim());
        tmpWorkLineInventDim.clearLocationAndBelowDim(_firstContainerLine.ItemId);

        WHSContainerLine containerLine;

        while select ItemId, Qty, UnitId, InventDimId from containerLine
            where containerLine.ContainerId == containerTable.ContainerId
        {
            tmpWorkLine.InventQty += containerLine.getInventoryHandlingQuantity();

            InventDim containerLineInventDim = containerLine.inventDim();
            containerLineInventDim.clearLocationAndBelowDim(containerLine.ItemId);

            tmpWorkLineInventDim.clearMismatchingDimensions(containerLineInventDim);
        }

        tmpWorkLine.HighestQty  = tmpWorkLine.InventQty;
        tmpWorkLine.InventDimId = InventDim::findOrCreate(tmpWorkLineInventDim).inventDimId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>