<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReport_Invoice_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesReport_Invoice_RU extends SalesPurchReport_Invoice_RU implements BatchRetryable
{
    boolean writeLine;

    AmountCur       totalAmountDeviation;
    TaxAmountCur    totalVATAmountDeviation;
    AmountCur       totalAmountWithVATDeviation;
    Qty             totalQtyDeviation;
    TaxPackagingQty totalPackagingQtyDeviation;
    Weight          totalGrossWeightDeviation;
    Weight          totalNetWeightDeviation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLineAmountToHeader</Name>
				<Source><![CDATA[
        protected void addLineAmountToHeader(AmountCur       _totalAmount,
                                         TaxAmountCur    _totalVATAmount,
                                         AmountCur       _totalAmountWithVAT,
                                         Qty             _totalQty,
                                         TaxPackagingQty _totalPackagingQty,
                                         Weight          _totalGrossWeight,
                                         Weight          _totalNetWeight,
                                         Volume          _totalVolume = 0)
    {
        CustInvoiceJour tmpJour = invoiceJour;

        super(_totalAmount,
              _totalVATAmount,
              _totalAmountWithVAT,
              _totalQty,
              _totalPackagingQty,
              _totalGrossWeight,
              _totalNetWeight,
              _totalVolume);

        if (tmpJour.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::M_15 &&
            !SysDictClass::isEqualOrSuperclass(classidget(this), classNum(SalesReport_WMSBOL_RU)))
        {
            totalAmountDeviation        += _totalAmount;
            totalVATAmountDeviation     += _totalVATAmount;
            totalAmountWithVATDeviation += _totalAmountWithVAT;
            totalQtyDeviation           += _totalQty;
            totalPackagingQtyDeviation  += _totalPackagingQty;
            totalGrossWeightDeviation   += _totalGrossWeight;
            totalNetWeightDeviation     += _totalNetWeight;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
        protected boolean checkJournal(CustVendInvoiceJour  _jour)
    {
        CustInvoiceJour jour = _jour;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
        protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
        protected TableId getTableId()
    {
        return tableNum(CustTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrency</Name>
				<Source><![CDATA[
        protected void initCurrency()
    {
        if (invoiceJour.CustVendInvoiceJour::getPrintStandardCurrency_RU())
        {
            header.CurrencyCode = Ledger::accountingCurrency();
            exchRate            = invoiceJour.ExchRate;
            printInMST          = true;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the weight of the category based item.
    /// </summary>
    /// <returns>
    ///     The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        ItemGrossWeight   ret;
        CustInvoiceTrans  custInvoiceTransLocal = invoiceTrans;

        if (dynamicData.Category)
        {
            ret = custInvoiceTransLocal.Weight / (custInvoiceTransLocal.Qty ? custInvoiceTransLocal.Qty : 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineWeight</Name>
				<Source><![CDATA[
/// <summary>
    ///     Initializes weights.
    /// </summary>
    /// <param name="_inventQty">
    ///     A quantity of the item in inventory unit.
    /// </param>
    /// <param name="_inventTable">
    ///     The inventory item record from which to initialize.
    /// </param>
    protected void initLineWeight(InventQty _inventQty, InventTable _inventTable)
    {
        CustInvoiceTrans  custInvoiceTransLocal = invoiceTrans;

        if (!_inventTable)
        {
            dynamicData.ItemGrossWeight = this.initLineCategoryWeight();
            dynamicData.ItemNetWeight   = dynamicData.ItemGrossWeight;
            dynamicData.GrossWeight     = abs(custInvoiceTransLocal.Weight);
        }
        else
        {
            super(_inventQty, _inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
        protected void insertHeader()
    {
        this.addAmountToHeader(- totalAmountDeviation,
                               - totalVATAmountDeviation,
                               - totalAmountWithVATDeviation,
                               - totalQtyDeviation,
                               - totalPackagingQtyDeviation,
                               - totalGrossWeightDeviation,
                               - totalNetWeightDeviation);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInLine</Name>
				<Source><![CDATA[
        protected void markupInLine()
    {
        while select markupTrans
            where markupTrans.TransTableId == invoiceTrans.TableId  &&
                  markupTrans.TransRecId   == invoiceTrans.RecId    &&
                  markupTrans.CustVendPosted_RU != 0.0
        {
            this.prepareMarkupLine(markupTrans);
            this.writeDynamicLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
        writeLine = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
        protected OffReportType_RU offReportType()
    {
        return reverseInvoice == 1 ?
                OffReportType_RU::SalesInvoice :
                OffReportType_RU::SalesInvoiceCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
        protected Description orderDescription()
    {
        return this.lookupLabel(this.documentStatus() == DocumentStatus::FreeTextInvoice?
            literalstr("@SYS23028") :
            literalstr("@SYS7443"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
        protected void prepareDynamicLine()
    {
        CustInvoiceJour tmpJour = invoiceJour;

        super();

        writeLine = (tmpJour.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
        protected void prepareReportHeader()
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        CustInvoiceJour                     custInvoiceJour = invoiceJour;

        header.AttorneyId          = invoiceJour.CustVendInvoiceJour::getAttorneyId_RU();
        header.AttorneyDate        = invoiceJour.CustVendInvoiceJour::getAttorneyDate_RU();
        header.AttorneyIssuedName  = invoiceJour.CustVendInvoiceJour::getAttorneyIssuedName_RU();

        if (invoiceJour.CustVendInvoiceJour::isInventProfileTypeMapped_RU() &&
            invoiceJour.CustVendInvoiceJour::getInventProfileType_RU() == InventProfileType_RU::CommissionPrincipalAgent &&
            invoiceJour.CustVendInvoiceJour::getInventOwnerId_RU() &&
            InventOwner_RU::find(invoiceJour.CustVendInvoiceJour::getInventOwnerId_RU()).AccountType == InventOwnerAccountType_RU::Vend)
        {
            vendor = InventOwner_RU::find(invoiceJour.CustVendInvoiceJour::getInventOwnerId_RU()).vendTable();
            vendorBankAccount      = VendBankAccount::find(vendor.AccountNum, vendor.BankAccount);
            counteragentData       = this.initContragentData(vendor,
                                                             vendorBankAccount,
                                                             vendor.AccountNum);
        }
        else
        {
            CustPaymModeTable custPaymMode = CustPaymModeTable::find(custInvoiceJour.Proforma              ?
                                                                     custInvoiceJour.salesTable().PaymMode :
                                                                     custInvoiceJour.custTrans().PaymMode);
            counteragentData       = this.initCompanyData(custPaymMode.AccountType == LedgerJournalACType::Bank ?
                                                          custPaymMode.parmPaymAccount()                        :
                                                          "");
        }

        header.VendBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.VendOKPO        = counteragentData.parmOKPO();

        counteragentData       = this.initContragentData(customer,
                                                         customerBankAccount,
                                                         invoiceJour.InvoiceAccount);
        header.CustBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.CustOKPO        = counteragentData.parmOKPO();

        SalesAgreementHeaderExt_RU salesAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(invoiceJour.DefaultDimension) as SalesAgreementHeaderExt_RU;
        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

        header.AgreementDocumentTitle = salesAgreementHeader.DocumentTitle;
        header.AgreementDate = salesAgreementHeaderExt.AgreementDate;

        if (custInvoiceJour.BillOfLadingId)
        {
            header.BillOfLadingId   = custInvoiceJour.BillOfLadingId;
            header.BillOfLadingDate = DateTimeUtil::date(
                                        (select CreatedDateTime from WMSBillOfLading
                                               where WMSBillOfLading.billOfLadingId == custInvoiceJour.BillOfLadingId).CreatedDateTime);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
        protected FreeTxt prepareTxtData()
    {
        FreeTxt ret;
        switch (printCopyOriginal)
        {
            case PrintCopyOriginal::Copy :
                ret = this.lookupLabel(literalStr("@GLS104939"));
                break;
            default:
                ret = this.lookupLabel(literalStr("@GLS100934"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
        protected boolean reverseCreditNote()
    {
        return CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
        public void setParameters(
        PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
        CustVendInvoiceJour _invoiceJour       = null,
        RecordSortedList    _journalList       = null)

    {
        if (_invoiceJour)
        {
            super(_printCopyOriginal, _invoiceJour, _journalList);
        }
        else
        {
            super(_printCopyOriginal, new DictTable(tableNum(CustInvoiceJour)).makeRecord(), _journalList);
        }

        invoiceTrans = new DictTable(tableNum(CustInvoiceTrans)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected TableId transTableId()
    {
        return tableNum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDynamicLine</Name>
				<Source><![CDATA[
        protected void writeDynamicLine()
    {
        if (writeLine)
        {
            super();
        }
        else
        {
            lineNum --;
        }

        writeLine = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>