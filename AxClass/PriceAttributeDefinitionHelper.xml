<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceAttributeDefinitionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Given we have 10+ similar price components. There will be quite a lot of duplicated code in <c>PriceAttributeDefinition</c> form.
/// We encapsulated them into this helper so they can be reused.
/// </summary>
internal final class PriceAttributeDefinitionHelper
{
    private FormRun formRun;
    private FormDataSource formDataSource;
    private FormDataSource defaultComponentCodeFormDataSource;

    private PriceComponent priceComponent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(FormRun _formRun, FormDataSource _formDataSource, FormDataSource _defaultComponentCodeFormDataSource, PriceComponent _priceComponent)
    {
        this.formRun = _formRun;
        this.formDataSource = _formDataSource;
        this.defaultComponentCodeFormDataSource = _defaultComponentCodeFormDataSource;
        this.priceComponent = _priceComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assuming following buttons:
    /// Edit, Add, Delete, MoveUp, MoveDown, Publish, Revert.
    /// Names are follwoing convension:
    /// {PriceComponent}Attribute{Action}, e.g. PriceGroupAttributeEdit, ProductDiscountAttributeRevert.
    /// </summary>
    internal void registerEventHandlers()
    {
        // 1. Register button clicked events.
        container buttonNames = ['Edit', 'Add', 'Delete', 'MoveUp', 'MoveDown', 'Publish', 'Revert'];

        str priceComponentName = enum2Symbol(enumNum(PriceComponent), this.priceComponent);

        for (int i = 1, len = conLen(buttonNames); i <= len; i++)
        {
            str action = conPeek(buttonNames, i);
            str controlName = strFmt('%1Attribute%2', priceComponentName, action);
            
            FormControl control = this.formRun.design().controlName(controlName);
            
            str actionName = strFmt('attribute%1', action);
            if (control is FormButtonControl)
            {
                FormButtonControl buttonControl = control;
                buttonControl.registerOverrideMethod(methodStr(FormButtonControl, clicked), actionName, this);
            }
            else if (control is FormCommandButtonControl)
            {
                FormCommandButtonControl commandButtonControl = control;
                commandButtonControl.registerOverrideMethod(methodStr(FormCommandButtonControl, clicked), actionName, this);
            }
            else
            {
                // If control is not a button, throw an error. It's not user facing.
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        // 2. Register FormDataSource events.
        formDataSource.registerOverrideMethod(methodStr(FormDataSource, initValue), methodStr(PriceAttributeDefinitionHelper, initValue), this);
        formDataSource.registerOverrideMethod(methodStr(FormDataSource, active), methodStr(PriceAttributeDefinitionHelper, active), this);
        formDataSource.registerOverrideMethod(methodStr(FormDataSource, write), methodStr(PriceAttributeDefinitionHelper, write), this);
        formDataSource.registerOverrideMethod(methodStr(FormDataSource, executeQuery), methodStr(PriceAttributeDefinitionHelper, executeQuery), this);

        defaultComponentCodeFormDataSource.registerOverrideMethod(methodStr(FormDataSource, executeQuery), methodStr(PriceAttributeDefinitionHelper, defaultComponentCodeExecuteQuery), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEdit</Name>
				<Source><![CDATA[
    internal void setEdit(boolean _edit)
    {
        // Query PriceGroupDefaultComponentCode so we know the latest publish status.
        this.defaultComponentCodeExecuteQuery(defaultComponentCodeFormDataSource);
        
        PriceComponentCode defaultComponentCode = defaultComponentCodeFormDataSource.cursor();
        if (_edit && defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Draft)
        {
            return;
        }

        if (!_edit && defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Published)
        {
            return;
        }

        if (defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Publishing)
        {
            return;
        }


        ttsbegin;

        if (_edit)
        {
            PriceAttributeDefinition::copyDraft(this.priceComponent);
            defaultComponentCode.PublishStatus = PriceAttributePublishStatus::Draft;
            defaultComponentCode.update();
        }
        else
        {
            PriceAttributeDefinition::clearDraft(this.priceComponent);
            defaultComponentCode.PublishStatus = PriceAttributePublishStatus::Published;
            defaultComponentCode.update();
        }
        ttscommit;

        this.executeQuery(formDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeView</Name>
				<Source><![CDATA[
    internal void updateAttributeView()
    {
        PriceAttributeDefinition attributeDefinition = this.formDataSource.cursor();

        switch (attributeDefinition.AttributeType)
        {
            case PriceAttributeType::Predefined:
                formDataSource.object(fieldnum(PriceAttributeDefinition, PredefinedField)).enabled(true);
                formDataSource.object(fieldnum(PriceAttributeDefinition, AttributeSource)).enabled(false);
                formDataSource.object(fieldnum(PriceAttributeDefinition, EcoResAttributeRecId)).enabled(false);
                break;
            case PriceAttributeType::EcoResAttribute:
                formDataSource.object(fieldnum(PriceAttributeDefinition, PredefinedField)).enabled(false);
                formDataSource.object(fieldnum(PriceAttributeDefinition, AttributeSource)).enabled(true);
                formDataSource.object(fieldnum(PriceAttributeDefinition, EcoResAttributeRecId)).enabled(true);
                break;
            case PriceAttributeType::Extension:
                formDataSource.object(fieldnum(PriceAttributeDefinition, PredefinedField)).enabled(false);
                formDataSource.object(fieldnum(PriceAttributeDefinition, AttributeSource)).enabled(false);
                formDataSource.object(fieldnum(PriceAttributeDefinition, EcoResAttributeRecId)).enabled(false);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /* FormDataSource callbacks */

    internal void initValue(FormDataSource _formDataSource)
    {
        _formDataSource.initValue();

        PriceAttributeDefinition definition = _formDataSource.cursor();

        definition.PriceComponent = priceComponent;
        definition.Status = PriceAttributeStatus::Added;
        definition.DisplayOrder = PriceAttributeDefinition::nextDisplayOrder(this.priceComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    internal void active(FormDataSource _formDataSource)
    {
        _formDataSource.active();
        this.updateAttributeView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    internal void write(FormDataSource _formDataSource)
    {
        _formDataSource.write();
        this.updateAttributeView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    internal void executeQuery(FormDataSource _formDataSource)
    {
        // Query default component code so we know the latest publish status.
        this.defaultComponentCodeExecuteQuery(defaultComponentCodeFormDataSource);

        QueryBuildDataSource qbds = _formDataSource.query().dataSourceTable(tableNum(PriceAttributeDefinition));
        qbds.clearRanges();
        qbds.sortClear();

        PriceComponentCode defaultComponentCode = defaultComponentCodeFormDataSource.cursor();
  
        if (defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Published)
        {
            qbds.addRange(fieldNum(PriceAttributeDefinition, PriceComponent)).value(queryValue(priceComponent));
            qbds.addRange(fieldNum(PriceAttributeDefinition, Status)).value(queryValue(PriceAttributeStatus::Published));
            qbds.addOrderByField(fieldNum(PriceAttributeDefinition, DisplayOrder), SortOrder::Ascending);
        }
        else
        {
            qbds.addRange(fieldNum(PriceAttributeDefinition, PriceComponent)).value(queryValue(priceComponent));
            qbds.addRange(fieldNum(PriceAttributeDefinition, Status)).value(queryValue(PriceAttributeStatus::Draft));
            qbds.addRange(fieldNum(PriceAttributeDefinition, Status)).value(queryValue(PriceAttributeStatus::Added));
            qbds.addOrderByField(fieldNum(PriceAttributeDefinition, DisplayOrder), SortOrder::Ascending);
        }

        _formDataSource.executeQuery();

        this.setControlState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultComponentCodeExecuteQuery</Name>
				<Source><![CDATA[
    internal void defaultComponentCodeExecuteQuery(FormDataSource _formDataSource)
    {
        QueryBuildDataSource qbds = _formDataSource.query().dataSourceTable(tableNum(PriceComponentcode));
        qbds.clearRanges();
        qbds.addRange(fieldNum(PriceComponentcode, PriceComponent)).value(queryValue(priceComponent));
        qbds.addRange(fieldNum(PriceComponentcode, IsDefault)).value(queryValue(NoYes::Yes));

        _formDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlState</Name>
				<Source><![CDATA[
    internal void setControlState()
    {
        container buttonNames = ['Edit', 'Add', 'Delete', 'MoveUp', 'MoveDown', 'Publish', 'Revert'];
        str priceComponentName = enum2Symbol(enumNum(PriceComponent), this.priceComponent);
        
        Map buttonState = new Map(Types::String, Types::Enum);

        PriceComponentCode defaultComponentCode = defaultComponentCodeFormDataSource.cursor();

        if (defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Published)
        {
            formDataSource.allowEdit(false);

            buttonState.insert('Edit', NoYes::Yes);
            buttonState.insert('Add', NoYes::Yes);
            buttonState.insert('Delete', NoYes::Yes);
            buttonState.insert('MoveUp', NoYes::Yes);
            buttonState.insert('MoveDown', NoYes::Yes);
            buttonState.insert('Publish', NoYes::No);
            buttonState.insert('Revert', NoYes::No);
        }

        if (defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Publishing)
        {
            formDataSource.allowEdit(false);

            buttonState.insert('Edit', NoYes::No);
            buttonState.insert('Add', NoYes::No);
            buttonState.insert('Delete', NoYes::No);
            buttonState.insert('MoveUp', NoYes::No);
            buttonState.insert('MoveDown', NoYes::No);
            buttonState.insert('Publish', NoYes::No);
            buttonState.insert('Revert', NoYes::No);
        }

        if (defaultComponentCode.PublishStatus == PriceAttributePublishStatus::Draft)
        {
            formDataSource.allowEdit(true);

            buttonState.insert('Edit', NoYes::Yes);
            buttonState.insert('Add', NoYes::Yes);
            buttonState.insert('Delete', NoYes::Yes);
            buttonState.insert('MoveUp', NoYes::Yes);
            buttonState.insert('MoveDown', NoYes::Yes);
            buttonState.insert('Publish', NoYes::Yes);
            buttonState.insert('Revert', NoYes::Yes);
        }

        for (int i = 1, len = conLen(buttonNames); i <= len; i++)
        {
            str action = conPeek(buttonNames, i);
            str controlName = strFmt('%1Attribute%2', priceComponentName, action);
            
            FormControl control = this.formRun.design().controlName(controlName);
            
            control.enabled(buttonState.lookup(action));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeAdd</Name>
				<Source><![CDATA[
    /* Attribute callbacks */

    internal void attributeAdd(FormCommandButtonControl _control)
    {
        this.setEdit(true);
        _control.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeEdit</Name>
				<Source><![CDATA[
    internal void attributeEdit(FormCommandButtonControl _control)
    {
        this.setEdit(true);
        _control.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeDelete</Name>
				<Source><![CDATA[
    internal void attributeDelete(FormCommandButtonControl _control)
    {
        this.setEdit(true);

        PriceAttributeDefinition cursor = formDataSource.cursor();
        if (!cursor)
        {
            _control.clicked(); // For table buffer haven't saved into database. leave to the DeleteRecord command.
        }
        else if (Box::okCancel("@UnifiedPricing:DeletePriceAttribute", DialogButton::Cancel) == DialogButton::Ok)
        {
            cursor.markDelete();
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeMoveUp</Name>
				<Source><![CDATA[
    internal void attributeMoveUp(FormButtonControl _control)
    {
        this.setEdit(true);

        PriceAttributeDefinition cursor = formDataSource.cursor();
        if (cursor && cursor.Status != PriceAttributeStatus::Published)
        {
            cursor.moveUp();
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeMoveDown</Name>
				<Source><![CDATA[
    internal void attributeMoveDown(FormButtonControl _control)
    {
        this.setEdit(true);

        PriceAttributeDefinition cursor = formDataSource.cursor();
        if (cursor && cursor.Status != PriceAttributeStatus::Published)
        {
            cursor.moveDown();
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributePublish</Name>
				<Source><![CDATA[
    internal void attributePublish(FormButtonControl _control)
    {
        PriceAttributeDefinition::publish(this.priceComponent);
        this.executeQuery(formDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeRevert</Name>
				<Source><![CDATA[
    internal void attributeRevert(FormButtonControl _control)
    {
        this.setEdit(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>