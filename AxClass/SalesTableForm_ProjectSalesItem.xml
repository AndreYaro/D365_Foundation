<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableForm_ProjectSalesItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTableForm_ProjectSalesItem extends SalesTableForm
{
    ProjTable   projTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source)
    {
        if (_source.TableId == tableNum(ProjTable))
        {
            projTable = _source;
            _source = null;
        }

        super(_source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the values set in SalesLine buffer.
    /// </summary>
    /// <param name = "_salesLine">Sales line record which needs to be reset.</param>
    public void resetSalesLine(SalesLine _salesLine)
    {
        ProjId tmpProjId = _salesLine.ProjId;
        CurrencyCode currencyCode = _salesLine.CurrencyCode;
        ProjFundingSourceRefId projFundingSource = _salesLine.ProjFundingSource;

        super(_salesLine);

        _salesLine.ProjId = tmpProjId;
        _salesLine.CurrencyCode = currencyCode;
        _salesLine.ProjFundingSource = projFundingSource;

        if (this.mustResettingSalesLineDefaultFromProject(_salesLine))
        {
            _salesLine.projIdChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineFromSalesTableWithFundingSource</Name>
				<Source><![CDATA[
    public void initSalesLineFromSalesTableWithFundingSource(SalesLine _salesLine)
    {
        SalesTable salesOrder = SalesTable::find(_salesLine.SalesId);
        if (!salesOrder || salesOrder.FundingSource != _salesLine.ProjFundingSource)
        {
            ProjTable projTableLocal = ProjTable::find(_salesLine.ProjId);
            SalesLineType_Project salesLineType_Project = _salesLine.type();
            salesOrder = salesLineType_Project.salesTableFromProjTable(projTableLocal);
            _salesLine.initFromSalesTable(salesOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResettingSalesLineDefaultFromProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all project related information must be defaulted from the project,
    /// when the sales order line is reset.
    /// </summary>
    /// <param name = "_salesLine">
    /// A sales order line record which was reset.
    /// </param>
    /// <returns>
    /// true if project related information must be defaulted; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean mustResettingSalesLineDefaultFromProject(SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values to the sales line.
    /// </summary>
    /// <param name = "_salesLine">Sales line record which needs to be initialized.</param>
    public void salesLine_initValue(SalesLine _salesLine)
    {
        SalesLineType_ProjectItemReq::newFromSalesLine(_salesLine).initValue();

        if (projTable)
        {
            _salesLine.ProjId        = projTable.ProjId;
            _salesLine.CurrencyCode  = projTable.currencyId();
            _salesLine.projIdChanged();
            SalesParameters salesParameters = SalesParameters::find();
            _salesLine.DeliveryDateControlType = salesParameters.DeliveryDateControlType;
            if (_salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                SalesCalcAvailableDlvDates::initDateFields(_salesLine);
            }

            _salesLine.LineNum = SalesLine::lastLineNum(_salesLine.SalesId) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInterCompanySalesOrderForItemRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an intercompany sales order for the project item requirement.
    /// </summary>
    public void createInterCompanySalesOrderForItemRequirement()
    {
        SalesTable      salesTableLocal;

        while select salesTableLocal
              where salesTableLocal.ProjId == projTable.ProjId
                  && salesTableLocal.SalesType == SalesType::ItemReq
                  && salesTableLocal.SalesStatus == SalesStatus::Backorder
                  && salesTableLocal.InterCompanyAutoCreateOrders
        {
            if (!salesTableLocal.existInterCompanySales()
                    && SalesTableType::construct(salesTableLocal).interCompanyCreateAllowed()
                    && SalesLine::exist(salesTableLocal.SalesId))
            {
                TradeInterCompany::autoCreateOrder(salesTableLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectDetailsByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the details of the project for the input hiearchy id.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy id of the WBS.</param>
    /// <returns>A container with a related project buffer and true if the WBS is linked to quotation; else false.</returns>
    public static container findProjectDetailsByHierarchyId(HierarchyIdBase _hierarchyId)
    {
        boolean     isHiearchyLinkedToQuotation;
        ProjTable   projTable;

        Common  hierarchyLinkedTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(_hierarchyId);

        switch (hierarchyLinkedTable.TableId)
        {
            case tableNum(ProjTable):
                projTable = hierarchyLinkedTable;
                break;

            case tableNum(SalesQuotationTable):
                SalesQuotationTable quotationTable = hierarchyLinkedTable;
                isHiearchyLinkedToQuotation = true;
                if (quotationTable.ProjIdRef)
                {
                    projTable = projTable::find(quotationTable.ProjIdRef);
                    break;
                }
                break;
        }

        return [projTable, isHiearchyLinkedToQuotation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sales related document types for print management settings.
    /// </summary>
    /// <returns>
    /// The sales related document types for print management settings.
    /// </returns>
    protected List salesDocumentTypes()
    {
        #ISOCountryRegionCodes

        List salesDocs  = new List(Types::Enum);

        salesDocs.addEnd(PrintMgmtDocumentType::SalesOrderPackingSlip);

        return salesDocs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>