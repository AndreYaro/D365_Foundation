<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocListMappingValidator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for validating if all items from two lists can be mapped
/// against each other. In order to support finding the corresponding item at the second list,
/// a mapping structure will be used.
/// </summary>
public class EFDocListMappingValidator_BR
{
    List fromItems, toItems;
    Map  mapping;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allItemsAreMappedBetweenTheLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if all lines of the lists can be mapped against each other
    /// </summary>
    /// <returns>
    /// True if all lines can be mapped, false otherwise
    /// </returns>
    /// <remarks>
    /// This method will rely on a mapping structure that contains the code of the toItem
    /// that correspond to a fromItem name
    /// </remarks>
    public boolean allItemsAreMappedBetweenTheLists()
    {
        if (this.listsAreEmpty())
        {
            return true;
        }

        if (fromItems.elements() != toItems.elements())
        {
            return false;
        }

        return this.allListItemsCanBeMapped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allListItemsCanBeMapped</Name>
				<Source><![CDATA[
    private boolean allListItemsCanBeMapped()
    {
        ItemFreeTxt    mappedSearchedItem;
        ItemFreeTxt    searchedItem;
        ListEnumerator fromListEnumerator  = fromItems.getEnumerator();
        List           toItemsCloned       = new List(Types::String);

        toItemsCloned.appendList(toItems);

        while (fromListEnumerator.moveNext())
        {
            searchedItem = fromListEnumerator.current();

            if (mapping.exists(searchedItem) == false)
            {
                return false;
            }

            mappedSearchedItem = mapping.lookup(searchedItem);

            if (this.removeItem(toItemsCloned, mappedSearchedItem) == false)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listsAreEmpty</Name>
				<Source><![CDATA[
    private boolean listsAreEmpty()
    {
        return fromItems.elements() == 0 && toItems.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes an item from the list received as parameter
    /// </summary>
    /// <param name="_items">
    /// List that should contain the item to be removed.
    /// </param>
    /// <param name="_searchedItem">
    /// Item that should be removed
    /// </param>
    /// <returns>
    /// True if the item has been found and removed, false otherwise
    /// </returns>
    private boolean removeItem(List _items, ItemFreeTxt _searchedItem)
    {
        ListIterator iterator = new ListIterator(_items);

        while (iterator.more())
        {
            if (iterator.value() == _searchedItem)
            {
                iterator.delete();

                return true;
            }

            iterator.next();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list that contains the names of the items in the from items
    /// </summary>
    /// <param name="_fromItems">
    /// Names of the items in the from list
    /// </param>
    protected void setFromItems(List _fromItems)
    {
        fromItems = _fromItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mapping that contains the name of the items in the toList that correspond
    /// to the name of a given item in the fromList
    /// </summary>
    /// <param name="_mapping">
    /// The mapping structure to be set
    /// </param>
    protected void setMapping(Map _mapping)
    {
        mapping = _mapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list that contains the names of the items in the toList
    /// </summary>
    /// <param name="_toItems">
    /// Names of the items in the toItems list
    /// </param>
    protected void setToItems(List _toItems)
    {
        toItems = _toItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the mapping validator class
    /// </summary>
    /// <param name="_fromItems">
    /// List with the names of the items that exist in the fromItems list
    /// </param>
    /// <param name="_toItems">
    /// List with the names of the items that exist in the toItems list
    /// </param>
    /// <param name="_mapping">
    /// Mapping structure that contains the name of the toItem for each fromItem
    /// </param>
    /// <returns>
    /// A new instance of the mapping validator
    /// </returns>
    public static EFDocListMappingValidator_BR construct(List _fromItems, List _toItems, Map _mapping)
    {
        EFDocListMappingValidator_BR validator = new EFDocListMappingValidator_BR();

        validator.setFromItems(_fromItems);
        validator.setToItems(_toItems);
        validator.setMapping(_mapping);

        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>