<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveStop</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransArchiveStop</c> class stops a currently running inventory transactions archiving.
/// </summary>
class InventTransArchiveStop extends RunBase
{
    InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventTransArchiveProcessHistoryTable
     #ENDMACRO
       
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {
            dialog.addText("@SCM:PauseInventTransArchivingV2");
        }
        {
            dialog.addText("@SCM:PauseInventTransArchiving");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransArchiveStop</Name>
				<Source><![CDATA[
    public InventTransArchiveProcessHistoryTable parmInventTransArchiveStop(InventTransArchiveProcessHistoryTable _inventTransArchiveProcessHistoryTable = inventTransArchiveProcessHistoryTable)
    {
        inventTransArchiveProcessHistoryTable = _inventTransArchiveProcessHistoryTable;
        return inventTransArchiveProcessHistoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        setPrefix(InventTransArchiveStop::description());

        try
        {
            ttsbegin;
            if (!this.validate())
            {
                throw error("@SYS18722");
            }

            inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::findBySessionId(inventTransArchiveProcessHistoryTable.SessionId, true);
            inventTransArchiveProcessHistoryTable.StopRunning = NoYes::Yes;
            inventTransArchiveProcessHistoryTable.update();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public  boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        ttsbegin; 
        inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::findBySessionId(inventTransArchiveProcessHistoryTable.SessionId, true);
        ttscommit;

        if (!inventTransArchiveProcessHistoryTable.RecId || inventTransArchiveProcessHistoryTable.IsReverse)
        {
            return checkFailed("@SCM:InventTransArchivingCancelledOrDeletedV2");
        }

        if (inventTransArchiveProcessHistoryTable.InventTransArchiveState >= InventTransArchiveState::Ended)
        {
            return checkFailed(strFmt("@SCM:StatusOfInventTransArchivingV2", inventTransArchiveProcessHistoryTable.InventTransArchiveState));
        }

        if (inventTransArchiveProcessHistoryTable.StopRunning)
        {
            return checkFailed("@SYS78040");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventTransArchiveStop construct()
    {
        return new InventTransArchiveStop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {       
            return "@SCM:InventTransArchivingStopDescriptionV2";
        }

        return "@SCM:InventTransArchivingStopDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventTransArchiveProcessHistoryTable))
        {
            throw error(strFmt("@SYS29104", classStr(InventTransArchiveStop)));
        }

        InventTransArchiveStop inventTransArchiveStop = InventTransArchiveStop::newInventTransArchiveProcessHistoryTable(args.record());

        if (inventTransArchiveStop.prompt())
        {
            inventTransArchiveStop.runOperation();
        }

        if (args && args.caller())
        {
            InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable = args.record();

            if (FormDataUtil::getFormDataSource(inventTransArchiveProcessHistoryTable))
            {
                FormDataUtil::getFormDataSource(inventTransArchiveProcessHistoryTable).reread();
                FormDataUtil::getFormDataSource(inventTransArchiveProcessHistoryTable).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransArchiveProcessHistoryTable</Name>
				<Source><![CDATA[
    static InventTransArchiveStop newInventTransArchiveProcessHistoryTable(InventTransArchiveProcessHistoryTable _inventTransArchiveProcessHistoryTable)
    {
        InventTransArchiveStop inventTransArchiveStop = InventTransArchiveStop::construct();

        inventTransArchiveStop.getLast();
        inventTransArchiveStop.parmInventTransArchiveStop(_inventTransArchiveProcessHistoryTable);
        inventTransArchiveStop.init();

        return inventTransArchiveStop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>