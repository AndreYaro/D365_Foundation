<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanPeggingTreeFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanPeggingTreeFormHelper</c> class encapsulates the logic of the <c>LeanPeggingTree</c>
///    form.
/// </summary>
class LeanPeggingTreeFormHelper implements ButtonStateProvider
{
    ReqPeggingTreeFormControlHelper peggingTreeHelper;

    LeanPeggingTreeDetails          nodeDetails;
    ReqPeggingTreeNodeDetails       reqPeggingTreeNodeDetails;
    Kanban                          kanban;
    InventDim                       inventDim;

    FormRun                         formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the advanced caching.
    /// </summary>
    /// <remarks>
    /// This method must be implemented by the rule helper classes that use the <c>FormButtonManager</c>
    /// class.Implementing code in this method is needed when the rule implementer class must perform
    /// advanced caching.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    /// A String value that identifies the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    /// The method is called by the <c>FormButtonManager</c> class on the rule class that implements the
    /// <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstLevelKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of first-level kanbans that are found under the current node subtree.
    /// </summary>
    /// <returns>
    /// A list of <c>Kanban</c> records
    /// </returns>
    /// <remarks>
    /// The list is used for planning the subtree of the current node.
    /// </remarks>
    public List firstLevelKanbans()
    {
        ReqPeggingTree                  peggingTree = peggingTreeHelper.parmReqPeggingTree();
        ReqPeggingTreeNode              kanbanNode = this.parmNodeDetails().parmFirstKanbanSubNode();

        // if the starting node is the current one - we should plan the current node, otherwise
        ReqPeggingTreeNode startingNode = kanbanNode.parmNodeId() == nodeDetails.parmTreeNode().parmNodeId() ?
                                           kanbanNode
                                           :
                                           peggingTree.getNode(kanbanNode.parmParentNodeId());

        LeanPeggingTreeKanbanCollector kanbanCollector = LeanPeggingTreeKanbanCollector::newStandard(peggingTree, startingNode);
        kanbanCollector.run();

        return kanbanCollector.parmFoundKanbans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the helper class.
    /// </summary>
    public void init()
    {
        // initialize the first level nodes and read them from DB
        peggingTreeHelper.parmReqPeggingTree().run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the event handler that handles updating form details on the selection that is being
    /// changed.
    /// </summary>
    /// <param name="_oldItem">
    /// The old node that was selected.
    /// </param>
    /// <param name="_newItem">
    /// The new node that is  selected.
    /// </param>
    /// <param name="_how">
    /// The way that the selection occurred.
    /// </param>
    public void onSelectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
    {
        ReqPeggingTreeNode      selectedNode = _newItem.data();

        reqPeggingTreeNodeDetails.clearFields();

        nodeDetails = LeanPeggingTreeDetails::newStandard(peggingTreeHelper.parmReqPeggingTree(),
                                                          selectedNode,
                                                          reqPeggingTreeNodeDetails);

        this.refreshCaption(nodeDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTreeNodeExpanding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the event handler for the node expansion event in the <c>FormTreeControl</c> class.
    /// </summary>
    /// <param name="_idx">
    /// The node index.
    /// </param>
    /// <param name="_action">
    /// The expansion action.
    /// </param>
    /// <param name="_data">
    /// The node data.
    /// </param>
    public void onTreeNodeExpanding(int _idx, FormTreeExpand _action, anytype _data)
    {
        peggingTreeHelper.onFormTreeNodeExpanding(_idx, _action, _data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
        public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeDetails</Name>
				<Source><![CDATA[
        public LeanPeggingTreeDetails parmNodeDetails(LeanPeggingTreeDetails _nodeDetails = nodeDetails)
    {
        nodeDetails = _nodeDetails;

        return nodeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeggingTreeHelper</Name>
				<Source><![CDATA[
        public ReqPeggingTreeFormControlHelper parmPeggingTreeHelper(ReqPeggingTreeFormControlHelper _peggingTreeHelper = peggingTreeHelper)
    {
        peggingTreeHelper = _peggingTreeHelper;

        return peggingTreeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the caption of the form.
    /// </summary>
    /// <param name="_details">
    /// The object that contains the details for the refresh.
    /// </param>
    private void refreshCaption(LeanPeggingTreeDetails _details)
    {
        str newCaption = strfmt('%1 %2',
                                enum2str(reqPeggingTreeNodeDetails.SourceDocumentLineType),
                                reqPeggingTreeNodeDetails.SourceDocumentId);

        formRun.design().caption(newCaption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCanPlanSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the rule method for checking whether the current node can be planned.
    /// </summary>
    /// <returns>
    /// true if the current node can be planned; otherwise, false.
    /// </returns>
    public boolean ruleCheckCanPlanSubTree()
    {
        return nodeDetails.parmFirstKanbanSubNode() != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsKanbanAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the rule method for checking whether the current node has an associated kanban.
    /// </summary>
    /// <returns>
    /// true if the node has an associated kanban; otherwise, false.
    /// </returns>
    public boolean ruleCheckIsKanbanAvailable()
    {
        return reqPeggingTreeNodeDetails.Kanban != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources to use in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    /// A <c>Common</c> table buffer that belongs to the first data source instance.
    /// </param>
    /// <param name="datasources2">
    /// A <c>Common</c> table buffer that belongs to the second data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    /// A <c>Common</c> table buffer that belongs to the third data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    /// A <c>Common</c> table buffer that belongs to the fourth data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    /// A <c>Common</c> table buffer that belongs to the fifth data source instance; optional.
    /// </param>
    /// <remarks>
    /// Up to 5 data sources can be specified. If the implementation requires more data sources, additional
    /// custom methods should be implemented on the rule implementer class.The method is called by the form
    /// button manager on the rule class that implements the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        reqPeggingTreeNodeDetails   = datasources1;
        kanban                      = datasources2;
        inventDim                   = datasources3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanPeggingTreeFormHelper construct()
    {
        return new LeanPeggingTreeFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a helper instance.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object that contains the pegging tree.
    /// </param>
    /// <param name="_formTreeControl">
    /// The <c>FormTreeControl</c> object where the pegging tree will be rendered.
    /// </param>
    /// <param name="_firstLevelNodes">
    /// The list that contains the first level of nodes.
    /// </param>
    /// <returns>
    /// An instance of the <c>LeanPeggingTreeFormHelper</c> class.
    /// </returns>
    public static LeanPeggingTreeFormHelper newStandard(FormRun _formRun, FormTreeControl _formTreeControl, List _firstLevelNodes)
    {
        LeanPeggingTreeFormHelper       helper = LeanPeggingTreeFormHelper::construct();
        ReqPeggingTreeFormControlHelper treeHelper =
            ReqPeggingTreeFormControlHelper::newFirstLevelNodes(_formTreeControl, _firstLevelNodes);

        helper.parmPeggingTreeHelper(treeHelper);
        helper.parmFormRun(_formRun);

        return helper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
