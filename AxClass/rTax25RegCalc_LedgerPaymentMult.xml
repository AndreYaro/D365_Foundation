<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_LedgerPaymentMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_LedgerPaymentMult extends RTax25RegCalc_LedgerMultiply implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    public void createBody()
    {
        RTax25RegisterProfit registerProfit = RTax25RegisterProfit::find(registerJournalTrans.RegisterId, stdDocuments.profitTableRecId());
        container            contain;

        if (stdDocuments.amount())
        {
            contain = [stdDocuments.transDate(), stdDocuments.docName() ? stdDocuments.docName() : stdDocuments.txt()];

            if (registerType == RTax25RegisterType::PaymentConsumption)
            {
                contain += registerProfit.Condition ? "" : registerProfit.PaymentCondition;
                contain += registerProfit.Condition ? registerProfit.PaymentCondition :  "" ;
            }
            else
            {
                 contain += RTax25ProfitTable::find(stdDocuments.profitTableRecId()).Description;
            }
            contain += stdDocuments.amount();

            contain += (stdDocuments.currencyCode() && stdDocuments.currencyCode() != Ledger::accountingCurrency(CompanyInfo::current())) ?
                        strfmt("@SYS26868", stdDocuments.amountCur(), stdDocuments.currencyCode()) : "";

            regQuery.addBodyRecord(stdDocuments.profitTableRecId(),
                                   contain,
                                   stdDocuments.tableId(),
                                   stdDocuments.recId(),
                                   registerProfit.PaymentCondition,
                                   -startCount);
            startCount++;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>footerContainer</Name>
				<Source><![CDATA[
    protected container footerContainer()
    {
        return registerType == RTax25RegisterType::PaymentConsumption ? [dateTo, "", "", "", lastProfitTableRecId ? profitAmount : totalAmount, ""] :
                                                                        [dateTo, "", "", lastProfitTableRecId ? profitAmount : totalAmount, ""];
    }
]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_PaymentConsumption  consumption;
        RTax25RegisterTrans_PaymentReceipt      receipt;

        if (registerType == RTax25RegisterType::PaymentConsumption)
        {
            consumption = _trans;
            totalAmount     +=  consumption.Amount;
            profitAmount    +=  consumption.Amount;
        }
        else
        {
            receipt = _trans;
            totalAmount     +=  receipt.Amount;
            profitAmount    +=  receipt.Amount;
        }
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>