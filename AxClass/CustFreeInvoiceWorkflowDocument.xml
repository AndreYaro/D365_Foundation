<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceWorkflowDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustFreeInvoiceWorkflowDocument</c> class is used to provide calculated fields on the workflow condition editor.
/// </summary>
[ExpressionCurrencyProviderAttribute(classstr(CustFreeInvoiceWFExpressionCurProvider))]
[WorkflowDocIsQueueEnabledAttribute(true, "@SYS60858")]
public class CustFreeInvoiceWorkflowDocument extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    queryName getQueryName()
    {
        return queryStr(CustFreeInvoiceWorkflowDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an invoice total amount on workflow condition editor in workflow configuration form.
    /// </summary>
    /// <param name="_companyId">
    /// The company on which the workflow is running.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <returns>
    /// Sum of all invoice line amounts.
    /// </returns>
    public InvoiceTotal parmInvoiceTotal(
        CompanyId _companyId,
        tableId _tableId,
        recId _recId)
    {
        CustInvoiceLine custInvoiceLine;
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable = CustInvoiceTable::findRecId(_recId);

        select sum(AmountCur) from custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId;

        return custInvoiceLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides miscellaneous charges total amount on workflow condition editor in workflow configuration form.
    /// </summary>
    /// <param name="_companyId">
    /// The company on which the workflow is running.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <returns>
    /// The sum of all miscellaneous charges associated with the invoice.
    /// </returns>
    public MarkupValue parmMiscCharges(CompanyId _companyId, tableId _tableId, recId _recId)
    {
        CustInvoiceTable custInvoiceTable;
        MarkupTrans markupTrans;

        custInvoiceTable = CustInvoiceTable::findRecId(_recId);

        select firstonly TransTableId, TransRecId, Value from markupTrans
            where markupTrans.TransTableId == custInvoiceTable.TableId
               && markupTrans.TransRecId == custInvoiceTable.RecId;

        return markupTrans.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustFreeInvoiceWorkflowDocument construct()
    {
        return new CustFreeInvoiceWorkflowDocument();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>