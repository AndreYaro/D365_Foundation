<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvMailHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Support for sending emails to expense users and approvers
/// </summary>
class TrvMailHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSenderEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve email id of the current user from user details.
    /// </summary>
    /// <returns>
    /// Current user email id configured in user information.
    /// </returns>
    public static Email getSenderEmail()
    {
        SysUserInfo sysUserInfo;

        sysUserInfo = SysUserInfo::find(curUserId());
        return sysUserInfo.emailDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    static void sendMail(Email _toMailAdrm, FreeTxt _subject, str _body)
    {
        str                     senderEmail;

        var mailer = SysMailerFactory::getNonInteractiveMailer();

        //get current user's email-id
        if (mailer)
        {
            senderEmail = TrvMailHelper::getSenderEmail();

            // validate the sender email address
            if ((strlen(senderEmail) == 0) ||( !SysEmailDistributor::validateEmail(senderEmail) ) )
            {
                // The email address provided for the sender is invalid.
                error("@SYS152911");
                return;
            }

            // validate the to email address
            if ((strlen(_toMailAdrm) == 0) ||( !SysEmailDistributor::validateEmail(_toMailAdrm) ) )
            {
                // The email address provided for the receiver is invalid.
                error("@SYS152911");
                return;
            }
            else
            {
                var messageBuilder = new SysMailerMessageBuilder();
                str body = _body;
                messageBuilder.setFrom(senderEmail)
                              .setSubject(_subject)
                              .addTo(_toMailAdrm)
                              .setPriority(System.Net.Mail.MailPriority::Normal)
                              .setBody(strReplace(body, '\r\n', '<br>'));

                mailer.sendNonInteractive(messageBuilder.getMessage());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMailV2</Name>
				<Source><![CDATA[
    // This method is meant to replace sendMail method, because the parameter _toMailAdrm
    // with Email EDT truncates any email address which is longer than 80 chars. Due to this
    // truncated string, the validator fails.
    static void sendMailV2(str _toMailAdrm, FreeTxt _subject, str _body)
    {
        str senderEmail;

        var mailer = SysMailerFactory::getNonInteractiveMailer();

        //get current user's email-id
        if (mailer)
        {
            senderEmail = TrvMailHelper::getSenderEmail();

            // validate the sender email address
            if ((strlen(senderEmail) == 0) ||( !SysEmailDistributor::validateEmail(senderEmail) ) )
            {
                // The email address provided for the sender is invalid.
                error("@SYS152911");
                return;
            }

            // validate the to email address
            if ((strlen(_toMailAdrm) == 0) ||( !SysEmailDistributor::validateEmail(_toMailAdrm) ) )
            {
                // The email address provided for the receiver is invalid.
                error("@Expense:ReceiverEmailAddressInvalid");
                return;
            }
            else
            {
                var messageBuilder = new SysMailerMessageBuilder();
                str body = _body;
                messageBuilder.setFrom(senderEmail)
                              .setSubject(_subject)
                              .addTo(_toMailAdrm)
                              .setPriority(System.Net.Mail.MailPriority::Normal)
                              .setBody(strReplace(body, '\r\n', '<br>'));

                mailer.sendNonInteractive(messageBuilder.getMessage());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>