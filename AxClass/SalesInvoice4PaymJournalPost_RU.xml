<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoice4PaymJournalPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoice4PaymJournalPost_RU</c> class is used to post customer invoice for payment.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice4Paym_RU)]
class SalesInvoice4PaymJournalPost_RU extends FormletterJournalPost
{
    SalesLine                   salesLine;
    SalesTable                  salesTable;

    SalesParmTable              salesParmTable;
    SalesParmLine               salesParmLine;

    TaxParameters               taxParameters;

    SalesTotals                 salesTotals;

    CustInvoice4PaymJour_RU     invoice4PaymJour;
    CustInvoice4PaymTrans_RU    invoice4PaymTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
        protected void addToInventReportDimHistory(Common _journalline)
    {
        container dummy()
        {
            return [ _journalline ];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountsMST_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts invoice for payment amounts.
    /// </summary>
    protected void adjustAmountsMST_W()
    {
        AmountAdjustEngineCustInvoice4Paym_W::adjustInvoiceJour(invoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
        protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
        protected DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice4Paym_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines currency exchange rate of the invoice for payment.
    /// </summary>
    /// <returns>
    /// Currency exchange rate of the invoice for payment.
    /// </returns>
    protected ExchRate exchRate_W()
    {
        return invoice4PaymJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSec_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines secondary currency exchange rate of the invoice for payment.
    /// </summary>
    /// <returns>
    /// Secondary currency exchange rate of the invoice for payment.
    /// </returns>
    protected ExchrateSecondary exchRateSec_W()
    {
        return invoice4PaymJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
        protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
        protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public void init()
    {
        taxParameters = TaxParameters::find();
        salesTable    = invoice4PaymJour.salesTable();

        this.initTotals();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
        protected void initRelatedLineTables()
    {
        super();

        salesLine = SalesLine::findInventTransId(invoice4PaymTrans.InventTransId, true);

        select salesParmLine
            where salesParmLine.ParmId          == invoice4PaymJour.ParmId &&
                  salesParmLine.TableRefId      == salesParmTable.TableRefId &&
                  salesParmLine.SalesLineRecId  == salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes totals.
    /// </summary>
    protected void initTotals()
    {
        if (this.parmTotals())
        {
            salesTotals = this.parmTotals() as SalesTotals;
        }
        else
        {
            salesTotals     = SalesTotals::construct(salesParmTable, this.parmSpecQty(), this.parmSumBy(), invoice4PaymJour.ParmId, this.parmSumOrderId(), this.documentStatus());
        }
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.prepareQuantitiesCalculation();

        this.tax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
        protected Common journalLine(Common _journalLine = invoice4PaymTrans)
    {
        invoice4PaymTrans = _journalLine as CustInvoice4PaymTrans_RU;
        return invoice4PaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
        protected tableId journalLineTableId()
    {
        return tablenum(CustInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
        public Common parmJournalTable(Common _journalTable = invoice4PaymJour)
    {
        invoice4PaymJour = _journalTable as CustInvoice4PaymJour_RU;

        return invoice4PaymJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
        public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the markup journal for the <c>SalesTable</c> table.
    /// </summary>
    /// <param name="_salesTableMarkup">
    ///     The <c>SalesTable</c> record.
    /// </param>
    protected void postMarkupOnJour(SalesTable _salesTableMarkup)
    {
        markup.postJournal(1, salesTotals.totalOrderBalance(_salesTableMarkup.RecId),
                          _salesTableMarkup,
                          _salesTableMarkup.DefaultDimension,
                          invoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
        protected void postMarkupOnTrans()
    {
        markup.postJournal(salesParmLine.DeliverNow,
                          salesParmLine.lineAmountExclTax(invoice4PaymJour.Invoice4PaymDate),
                          salesLine,
                          salesLine.DefaultDimension,
                          invoice4PaymTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
        protected void postMarkupTable()
    {
        QueryRun queryRun = new QueryRun(salesParmTable.querySalesTable());
        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(SalesTable)))
            {
                SalesTable salesTableMarkup = queryRun.get(tablenum(SalesTable));
                this.postMarkupOnJour(salesTableMarkup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
        protected boolean postTaxOnProforma()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
        protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
        protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
        protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
        protected TransTxt transactionLogTxt()
    {
        return "@GLS102360";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
        protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::SalesInvoice4Paym_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
        protected TransDate updateDate()
    {
        return invoice4PaymJour.Invoice4PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
        protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();

        ttsbegin;
        while (se.moveNext())
        {
            salesTable = SalesTable::find(se.current(),true);
            if (salesTable)
            {
                salesTable.updateDocumentStatus(this.documentStatus());
                salesTable.updateBackStatus();
                salesTable.updateSalesType();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTaxAmount_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates GEEW tax fields of the invoice for payment lines.
    /// </summary>
    protected void writeTaxAmount_W()
    {
        CustInvoice4PaymTrans_RU trans;

        if (! taxParameters.TaxSpecifyLine)
            return;

        FormletterProformaPrint formletterProformaPrint = FormletterProformaPrint::construct();
        formletterProformaPrint.parmTax             (this.tax());
        formletterProformaPrint.parmExchRate_W      (this.exchRate_W());
        formletterProformaPrint.parmExchRateSec_W   (this.exchRateSec_W());
    //    formletterProformaPrint.writeTmpTaxWorkTrans(invoice4PaymJour.RecId);
        formletterProformaPrint.parmJournalTmpTaxWorkTrans(journalTmpTaxWorkTrans);

        TmpTaxWorkTrans tmpTaxWorkTransLocal;
        tmpTaxWorkTransLocal = formletterProformaPrint.tmpTaxWorkTrans(invoice4PaymJour.RecId);

        while select forupdate trans
            where trans.SalesId                == invoice4PaymJour.SalesId               &&
                  trans.Invoice4PaymId         == invoice4PaymJour.Invoice4PaymId        &&
                  trans.Invoice4PaymDate       == invoice4PaymJour.Invoice4PaymDate
        {
            trans.initFromTaxWorkTrans_RU(
                tmpTaxWorkTransLocal,
                tablenum(SalesLine),
                0,
                trans.InventTransId);
            trans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SalesInvoice4PaymJournalPost_RU construct()
    {
        return new SalesInvoice4PaymJournalPost_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>