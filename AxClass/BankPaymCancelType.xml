<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymCancelType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymCancelType</c> class provides the functionality to cancel a bank account transaction.
/// </summary>
abstract class BankPaymCancelType
{
    BankAccountTrans bankAccountTransToCancel;
    ReasonRefRecID reasonRefID;
    Voucher voucher;
    TransDate cancelDate;
    AmountMST accountingCurrencyAmount;
    AmountMSTSecondary reportingCurrencyAmount;
    AmountCur transactionCurrencyAmount;
    AmountCur bankTransTransactionCurrencyAmount;
    BankTransactionType paymReference;
    TransTxt txt;
    LedgerVoucher ledgerVoucher;
    LedgerVoucherObject ledgerVoucherObject;
    CustVendPaymJournalFee  paymentJournalFee;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCancellingBankTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the cancelling bank account transaction based on a <c>BankAccountTrans</c> record.
    /// </summary>
    /// <returns>
    /// The cancelled <c>BankAccountTrans</c> record.
    /// </returns>
    public BankAccountTrans createCancellingBankTrans()
    {
        BankAccountTrans cancelledBankAccountTrans;

        cancelledBankAccountTrans = this.setCommonFieldsInCancelledBankTrans();

        cancelledBankAccountTrans.insert();
        #ISOCountryRegionCodes
        if (BankAccountTransPLInsertForCancellingPaymentFlight::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            BankAccountTransPL cancelledBankAccountTransPL;
            cancelledBankAccountTransPL.BankAccountTrans = cancelledBankAccountTrans.RecId;
            cancelledBankAccountTransPL.insert();
        }

        return cancelledBankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelBankDocument</Name>
				<Source><![CDATA[
    internal void cancelBankDocument()
    {
        if (this.isCancelBankDocumentSupported())
        {
            this.doCancelBankDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelBankDocumentSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isCancelBankDocumentSupported()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCancelBankDocument</Name>
				<Source><![CDATA[
    private void doCancelBankDocument()
    {
        BankDocumentTable bankDocumentTable = BankDocumentTable::findBySource(bankAccountTransToCancel.SourceTableId, bankAccountTransToCancel.SourceRecId);

        if (bankDocumentTable)
        {
            BankDocumentProcessor::submitBankDocumentTable(bankDocumentTable.getBankDocumentTableMap(), BankDocumentStatusChangeType::Cancel);

            if (BankAccountTable::isAdvancedBankReconciliationEnabled(bankAccountTransToCancel.AccountId)
                && FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance()))
            {
                bankAccountTransToCancel.updateClearedDate(cancelDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancellingOffsetLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new cancelling transaction to the current <c>LedgerVoucher</c> object with the quantity set.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the general journal account entry record to base the new record on.
    /// </param>
    /// <param name="_paymReference">
    /// The payment reference for the transaction to add.
    /// // </param>
    /// <param name="_cancellingSourceRecId">
    /// The record ID of the source of the cancelling fee which new taxes are to relate to.
    /// </param>
    /// <param name="_cancellingSourceTableId">
    /// The table ID of the source of the cancelling fee which new taxes are to relate to.
    /// </param>
    public void createCancellingOffsetLedgerTrans(RefRecId _generalJournalAccountEntryRecId,
        PaymReference _paymReference,
        RefRecId _cancellingSourceRecId = 0,
        RefTableId _cancellingSourceTableId = 0)
    {
        LedgerVoucherTransObject postingTransaction;
        LedgerEntry ledgerEntry;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;

        [generalJournalAccountEntry, ledgerEntryJournal, generalJournalEntry, ledgerEntry] =
            GeneralLedgerExtension::findRelated(_generalJournalAccountEntryRecId);

        postingTransaction = this.populatePostingTransaction(ledgerVoucherObject, generalJournalAccountEntry);

        postingTransaction.parmPaymMode(ledgerEntry.PaymentMode);

        postingTransaction.parmTaxParentReferenceRecId(_cancellingSourceRecId);
        postingTransaction.parmTaxParentReferenceTableId(_cancellingSourceTableId);
        postingTransaction.setTaxTransRelationshipType(TaxTransRelationshipType::TransactionLineAccount);

        postingTransaction.parmPaymentReference(_paymReference);
        postingTransaction.parmSkipDimensionValidation(true);

        ledgerVoucher.addTrans(postingTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancellingPaymentLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new cancelling transaction to the current <c>LedgerVoucher</c> object with the quantity set.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the general journal account entry record to base the new record on.
    /// </param>
    /// <param name="_paymReference">
    /// The payment reference for the transaction to add.
    /// </param>
    public void createCancellingPaymentLedgerTrans(RefRecId _generalJournalAccountEntryRecId,
        PaymReference _paymReference)
    {
        LedgerVoucherTransObject postingTransaction;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        generalJournalAccountEntry = GeneralJournalAccountEntry::find(_generalJournalAccountEntryRecId);

        postingTransaction = this.populatePostingTransaction(ledgerVoucherObject, generalJournalAccountEntry);

        postingTransaction.parmQuantity(-generalJournalAccountEntry.Quantity);

        postingTransaction.parmPaymentReference(_paymReference);

        postingTransaction.parmSkipDimensionValidation(true);

        ledgerVoucher.addTrans(postingTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables to the values provided.
    /// </summary>
    /// <param name="_common">
    /// The table to base the sub class on.
    /// </param>
    /// <param name="_paymentJournalFee">
    /// The payment fee being cancelled.
    /// </param>
    /// <param name="_bankAccountTransToCancel">
    /// The bank account transaction being cancelled.
    /// </param>
    /// <param name="_reasonRefID">
    /// The reson for cancelling the payment.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher class instance containing the voucher information for the cancelled payment.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// The ledger voucher object to add journal entry information to.
    /// </param>
    /// <param name="_accountingCurrencyAmount">
    /// The amount being cancelled in accounting currency.
    /// </param>
    /// <param name="_transactionCurrencyAmount">
    /// The amount being cancelled in transaction currency.
    /// </param>
    /// <param name="_bankTransTransactionCurrencyAmount">
    /// The amount being cancelled in the currency of the bank.
    /// </param>
    /// <param name="_paymReference">
    /// The payment reference to set the journal entry to.
    /// </param>
    /// <param name="_txt">
    /// The txt to set on the journal entry.
    /// </param>
    [SysObsoleteAttribute('Method init has been deprecated. Please use initV2 method instead.', false, 30\6\2020)]
    abstract void init(Common _common,
        CustVendPaymJournalFee  _paymentJournalFee,
        BankAccountTrans _bankAccountTransToCancel,
        ReasonRefRecID _reasonRefID,
        LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject,
        AmountMST _accountingCurrencyAmount,
        AmountCur _transactionCurrencyAmount,
        AmountCur _bankTransTransactionCurrencyAmount,
        BankTransactionType _paymReference,
        TransTxt _txt)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables to the values provided.
    /// </summary>
    /// <param name="_common">
    /// The table to base the sub class on.
    /// </param>
    /// <param name="_paymentJournalFee">
    /// The payment fee being cancelled.
    /// </param>
    /// <param name="_bankAccountTransToCancel">
    /// The bank account transaction being cancelled.
    /// </param>
    /// <param name="_reasonRefID">
    /// The reson for cancelling the payment.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher class instance containing the voucher information for the cancelled payment.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// The ledger voucher object to add journal entry information to.
    /// </param>
    /// <param name="_accountingCurrencyAmount">
    /// The amount being cancelled in accounting currency.
    /// </param>
    /// <param name="_reportingCurrencyAmount">
    /// The amount being cancelled in reporting currency.
    /// </param>
    /// <param name="_transactionCurrencyAmount">
    /// The amount being cancelled in transaction currency.
    /// </param>
    /// <param name="_bankTransTransactionCurrencyAmount">
    /// The amount being cancelled in the currency of the bank.
    /// </param>
    /// <param name="_paymReference">
    /// The payment reference to set the journal entry to.
    /// </param>
    /// <param name="_txt">
    /// The txt to set on the journal entry.
    /// </param>
    protected void initV2(Common _common,
        CustVendPaymJournalFee  _paymentJournalFee,
        BankAccountTrans _bankAccountTransToCancel,
        ReasonRefRecID _reasonRefID,
        LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject,
        AmountMST _accountingCurrencyAmount,
        AmountMSTSecondary _reportingCurrencyAmount,
        AmountCur _transactionCurrencyAmount,
        AmountCur _bankTransTransactionCurrencyAmount,
        BankTransactionType _paymReference,
        TransTxt _txt)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExchangeRateHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an instance of the exchange rate helper based on the sub class type.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> table record with specific values to use in addition to the class values.
    /// </param>
    /// <returns>
    /// An updated instance of the <c>ExchangeRateHelper</c> class.
    /// </returns>
    abstract CurrencyExchangeHelper populateExchangeRateHelper(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePostingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the class with values from the journal entry and voucher object needed to cancel the transaction.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// The voucher object initialized for the transaction being cancelled.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    /// The journal entry containing values to use when cancelling the transaction.
    /// </param>
    /// <returns>
    /// An updated ledger vouched object with the specific values for the cancelling of the transaction.
    /// </returns>
    private LedgerVoucherTransObject populatePostingTransaction(LedgerVoucherObject _ledgerVoucherObject,
        GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        LedgerVoucherTransObject postingTransaction;
        CurrencyExchangeHelper exchangeRateHelper;

        exchangeRateHelper = this.populateExchangeRateHelper(_generalJournalAccountEntry);

        postingTransaction = LedgerVoucherTransObject::newTransactionAmountDefault(
            _ledgerVoucherObject,
            _generalJournalAccountEntry.PostingType,
            this.retrieveLedgerDimensionForTransaction(_generalJournalAccountEntry),
            _generalJournalAccountEntry.TransactionCurrencyCode,
            -_generalJournalAccountEntry.TransactionCurrencyAmount,
            exchangeRateHelper);

        return postingTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLedgerDimensionForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension to use when populating a posting transaction.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The journal entry containing values to use when determining the ledger dimension to return.
    /// </param>
    /// <returns>
    /// The ledger dimension to use for the transaction.
    /// </returns>
    abstract protected LedgerDimensionAccount retrieveLedgerDimensionForTransaction(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonFieldsInCancelledBankTrans</Name>
				<Source><![CDATA[
    private BankAccountTrans setCommonFieldsInCancelledBankTrans()
    {
        BankAccountTrans    cancelledBankAccountTrans;

        cancelledBankAccountTrans = bankAccountTransToCancel.data();

        cancelledBankAccountTrans.TransDate = cancelDate;
        cancelledBankAccountTrans.Cancel = NoYes::Yes;
        cancelledBankAccountTrans.ReasonRefRecID = reasonRefID;
        cancelledBankAccountTrans.Voucher = voucher;

        cancelledBankAccountTrans.AmountMST = -accountingCurrencyAmount;
        cancelledBankAccountTrans.AmountReportingCurrency = -reportingCurrencyAmount;
        cancelledBankAccountTrans.AmountCur = -transactionCurrencyAmount;
        cancelledBankAccountTrans.BankTransAmountCur = -bankTransTransactionCurrencyAmount;
        
        if(bankAccountTransToCancel.PaymReference != '')
        {
            cancelledBankAccountTrans.BankTransType = paymReference;
        }
        
        cancelledBankAccountTrans.Txt = txt;

        cancelledBankAccountTrans = this.setSourceSpecificValues(cancelledBankAccountTrans);

        return cancelledBankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceSpecificValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields in the bank account transaction being created that are only set by this document type.
    /// Some fields are only set when originating from certain document types.
    /// </summary>
    /// <param name="_bankAccountTrans">
    /// The bank account transaction being created.
    /// </param>
    /// <returns>
    /// The bank account transaction updated with the document type specific values.
    /// </returns>
    abstract protected BankAccountTrans setSourceSpecificValues(BankAccountTrans _bankAccountTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankPaymCancelType</c> sub class based on the variables.
    /// </summary>
    /// <param name="_custTrans">
    /// The <c>CustTrans</c> record being cancelled.
    /// </param>
    /// <param name="_bankDeposit">
    /// The <c>BankDeposit</c> record being cancelled.
    /// </param>
    /// <param name="_custVendPaymJournalFee">
    /// The <c>CustVendPaymJournalFee</c> record being cancelled.
    /// </param>
    /// <param name="_bankAccountTransToCancel">
    /// The <c>BankAccountTrans</c> record being cancelled.
    /// </param>
    /// <param name="_reasonRefID">
    /// The record ID of the Reason code specified when initiating cancelling of the payment.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher object needed to create a record for the voucher entry.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// The voucher object needed to create a record for the voucher entry.
    /// </param>
    /// <returns>
    /// An instance of the class.
    /// </returns>
    public static BankPaymCancelType construct(CustTrans _custTrans,
        BankDeposit _bankDeposit,
        CustVendPaymJournalFee _custVendPaymJournalFee,
        BankAccountTrans _bankAccountTransToCancel,
        ReasonRefRecID _reasonRefID,
        LedgerVoucher _ledgerVoucher,
        LedgerVoucherObject _ledgerVoucherObject)
    {
        BankPaymCancelType bankPaymCancelType;

        if (_custVendPaymJournalFee)
        {
            bankPaymCancelType = new BankPaymCancelType_BankFee();

            bankPaymCancelType.initV2(_custTrans,
                _custVendPaymJournalFee,
                _bankAccountTransToCancel,
                ReasonTableRef::checkCreateInCompany( _reasonRefID, _bankAccountTransToCancel.DataAreaId),
                _ledgerVoucher,
                _ledgerVoucherObject,
                _bankAccountTransToCancel.AmountMST,
                _bankAccountTransToCancel.AmountReportingCurrency,
                _bankAccountTransToCancel.AmountCur,
                _bankAccountTransToCancel.BankTransAmountCur,
                BankParameters::find().nsfTransactionType,
                _bankAccountTransToCancel.Txt);

        }
        else if (_bankDeposit)
        {
            bankPaymCancelType = new BankPaymCancelType_Deposit();

            bankPaymCancelType.initV2(_bankDeposit,
                _custVendPaymJournalFee,
                _bankAccountTransToCancel,
                ReasonTableRef::checkCreateInCompany( _reasonRefID, _bankAccountTransToCancel.DataAreaId),
                _ledgerVoucher,
                _ledgerVoucherObject,
                _bankDeposit.AmountMST,
                _bankDeposit.AmountReportingCurrency,
                _bankDeposit.AmountCur,
                _bankDeposit.BankTransAmountCur,
                BankParameters::find().nsfTransactionType,
                strFmt("@SYS53501", _bankDeposit.DepositNum));
        }
        else if (_custTrans)
        {
            bankPaymCancelType = new BankPaymCancelType_CustTrans();

            bankPaymCancelType.initV2(_custTrans,
                _custVendPaymJournalFee,
                _bankAccountTransToCancel,
                ReasonTableRef::checkCreateInCompany( _reasonRefID, _bankAccountTransToCancel.DataAreaId),
                _ledgerVoucher,
                _ledgerVoucherObject,
                _bankAccountTransToCancel.AmountMST,
                _bankAccountTransToCancel.AmountReportingCurrency,
                _bankAccountTransToCancel.AmountCur,
                _bankAccountTransToCancel.BankTransAmountCur,
                BankParameters::find().nsfTransactionType,
                _bankAccountTransToCancel.Txt);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return bankPaymCancelType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>