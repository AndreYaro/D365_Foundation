<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentStateInProcessCustInv</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentStateInProcessCustInvoice</c> class is an in-process source document state for
/// a customer invoice.
/// </summary>
[SourceDocumentClassExtensionAttribute(tableStr(CustInvoiceTable))]
public class SourceDocumentStateInProcessCustInv extends SourceDocumentStateInProcess
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSourceDocumentLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query to obtain SourceDocumentLine and associated CustInvoiceLine table records
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">Source document header record</param>
    /// <returns>
    /// The initialized query
    /// </returns>
    protected Query getSourceDocumentLineQuery(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        QueryBuildDataSource    retrieveSDLQbds;
        QueryBuildDataSource    custInvoiceLineQbds;
        QueryBuildDataSource    custInvoiceTableQbds;
        Query                   query;

        query = super(_sourceDocumentHeaderRecId);

        retrieveSDLQbds = query.dataSourceNo(query.dataSourceCount());
        custInvoiceLineQbds = retrieveSDLQbds.addDataSource(tableNum(CustInvoiceLine));
        custInvoiceLineQbds.joinMode(JoinMode::OuterJoin);
        custInvoiceLineQbds.addLink(fieldNum(CustInvoiceLine, SourceDocumentLine),fieldNum(SourceDocumentLine, RecId));

        custInvoiceTableQbds = custInvoiceLineQbds.addDataSource(tableNum(CustInvoiceTable));
        custInvoiceTableQbds.joinMode(JoinMode::OuterJoin);
        custInvoiceTableQbds.addLink(fieldNum(CustInvoiceLine, ParentRecId), fieldNum(CustInvoiceTable, RecId));

        query.clearOrderBy();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalInformationMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates map holding the CustInvoiceLine and CustInvoiceTable record associated with the specific SourceDocumentLine
    /// </summary>
    /// <param name="_queryRun">
    /// The queryRun object holding the SourceDocumentLineImplementationRecords.
    /// </param>
    /// <returns>
    /// The initialized map.
    /// </returns>
    protected Map initAdditionalInformationMap(QueryRun _queryRun)
    {
        List tableList = new List(Types::Integer);
        tableList.addEnd(tableNum(CustInvoiceTable));

        Map additionalInformation = this.fillMap(_queryRun, tableList);

        return additionalInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSDLImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the CustInvoiceLine record associated with the SourceDocumentLine instance.
    /// </summary>
    /// <param name="_queryRun">
    /// The queryRun object holding the CustInvoiceLine records.
    /// </param>
    /// <returns>
    /// The CustInvoiceLine record
    /// </returns>
    protected SourceDocumentLineImplementation initSDLImplementation(QueryRun _queryRun)
    {
        CustInvoiceLine custInvoiceLine = _queryRun.get(tableNum(CustInvoiceLine));

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessEvent</Name>
				<Source><![CDATA[
    protected BusinessEventsBase getBusinessEvent()
    {
        CustFreeTextInvoicePostedBusinessEvent businessEvent;

        if (targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            businessEvent = CustFreeTextInvoicePostedBusinessEvent::newFromSourceDocumentHeaderRecId(sourceDocumentHeader.RecId);
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLineQueryUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the getSourceDocumentLineQuery() implementation using the SysDa framework
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">Source document header record</param>
    /// <returns>The initialized query.</returns>
    protected SysDaQueryObject getSourceDocumentLineQueryUsingSysDa(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        SysDaQueryObject    ret = super(_sourceDocumentHeaderRecId);

        SourceDocumentLine  sourceDocumentLine = ret.table();

        CustInvoiceLine     custInvoiceLine;
        SysDaQueryObject    sysDaQueryLineObject = new SysDaQueryObject(custInvoiceLine);

        ret.joinClause(SysDaJoinKind::OuterJoin, sysDaQueryLineObject);
        sysDaQueryLineObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(custInvoiceLine, fieldStr(CustInvoiceLine, SourceDocumentLine)),
                new SysDaFieldExpression(sourceDocumentLine, fieldStr(SourceDocumentLine, RecId))));

        CustInvoiceTable    custInvoiceTable;
        SysDaQueryObject    sysDaQueryTableObject = new SysDaQueryObject(custInvoiceTable);

        sysDaQueryLineObject.joinClause(SysDaJoinKind::OuterJoin, sysDaQueryTableObject);
        sysDaQueryTableObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(custInvoiceTable, fieldStr(CustInvoiceTable, RecId)),
                new SysDaFieldExpression(custInvoiceLine, fieldStr(CustInvoiceLine, ParentRecId))));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalInformationMapUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the implementation of initAdditionalInformationMap() using the SysDa framework
    /// </summary>
    /// <param name = "_sdso">SysDaSearchObject instead of QueryRun</param>
    /// <returns>
    /// The initialized map.
    /// </returns>
    protected Map initAdditionalInformationMapUsingSysDa(SysDaSearchObject _sdso)
    {
        List tableList = new List(Types::Integer);
        tableList.addEnd(tableNum(CustInvoiceTable));

        Map additionalInformation = this.fillMapUsingSysDa(_sdso, tableList);

        return additionalInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSDLImplementationUsingSysDa</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the implementation of initSDLImplementation(), using the SysDa framework.
    /// </summary>
    /// <param name = "_sdso">
    /// The SysDa Search object containing the query to search in.
    /// </param>
    /// <returns>
    /// The CustInvoiceLine record as <c>SourceDocumentLineImplementation</c>.
    /// </returns>
    protected SourceDocumentLineImplementation initSDLImplementationUsingSysDa(SysDaSearchObject _sdso)
    {
        CustInvoiceLine custInvoiceLine = this.sysDaGetRecordByTableId(_sdso.query(), tableNum(CustInvoiceLine));

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransition</Name>
				<Source><![CDATA[
    protected boolean doTransition()
    {
        boolean isTransitioned = super();

        if (isTransitioned
            && targetSourceDocumentAccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            this.custInvoiceTransitionedToCompleted(sourceDocument.parmSourceDocumentHeader());
        }

        return isTransitioned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTransitionedToCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for eventing on a <c>SourceDocumentHeader</c> for a free text invoice successfully transitioning to a <c>Completed</c> accounting status.
    /// </summary>
    /// <param name = "_sourceDocumentHeader">
    /// The <c>SourceDocumentHeader</c> that has transitioned to a completed state.
    /// </param>
    [Hookable(true)]
    protected void custInvoiceTransitionedToCompleted(sourceDocumentHeader _sourceDocumentHeader)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>