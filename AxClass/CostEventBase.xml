<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEventBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEventBase</c> is an abstraction for an event.
/// </summary>
abstract public class CostEventBase
{
    CostEventBase       parentEvent;
    Map                 entries;
    List                reconcilingEntries;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an entry to the event.
    /// </summary>
    /// <param name="_entry">
    /// The entry to add.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An entry with the same descriptor exist on the event.
    /// </exception>
    public void addEntry(CostEntryBase _entry)
    {
        _entry.parmEvent(this);

        if (!entries)
        {
            entries = new Map(Types::Class, Types::Class);
        }

        if (entries.exists(_entry.parmDescriptor()))
        {
            throw error("@SCM:EntryWithSameDescriptorAlreadyExists");
        }
        else
        {
            entries.insert(_entry.parmDescriptor(), _entry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReconcilingEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a reconciling entry to the event.
    /// </summary>
    /// <param name="_entry">
    /// The reconciling entry to add.
    /// </param>
    public void addReconcilingEntry(CostEntryBase _entry)
    {
        if (!reconcilingEntries)
        {
            reconcilingEntries = new List(Types::Class);
        }

        reconcilingEntries.addEnd(_entry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified entry.
    /// </summary>
    /// <param name="_descriptor">
    /// The descriptor that identified the entry.
    /// </param>
    /// <returns>
    /// The specified entry if it exists; otherwise, null.
    /// </returns>
    public CostEntryBase findEntry(CostEntryDescriptorBase _descriptor)
    {
        CostEntryBase       entry;

        if (entries && entries.exists(_descriptor))
        {
            entry = entries.lookup(_descriptor);
        }

        return entry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>CostEntryEnumerator</c> with the entries for the event.
    /// </summary>
    /// <returns>
    /// An instance of <c>CostEntryEnumerator</c> with the entries for the event.
    /// </returns>
    public CostEntryEnumerator getEntries()
    {
        if (!entries)
        {
            entries = new Map(Types::Class, Types::Class);
            this.loadEntries();
        }

        return CostEntryEnumerator::construct(entries.valueSet().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReconcilingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>CostEntryEnumerator</c> with the reconciling entries for the event.
    /// </summary>
    /// <returns>
    /// An instance of <c>CostEntryEnumerator</c> with the reconciling entries for the event.
    /// </returns>
    public CostEntryEnumerator getReconcilingEntries()
    {
        if (!reconcilingEntries)
        {
            reconcilingEntries = new List(Types::Class);
            this.loadReconcilingEntries();
        }

        return CostEntryEnumerator::construct(reconcilingEntries.getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the entries associated to the event.
    /// </summary>
    abstract protected void loadEntries()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReconcilingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the reconciling entries associated to the event.
    /// </summary>
    abstract protected void loadReconcilingEntries()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentEvent</Name>
				<Source><![CDATA[
    public CostEventBase parmParentEvent(CostEventBase _parentEvent = parentEvent)
    {
        parentEvent = _parentEvent;

        return parentEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the event.
    /// </summary>
    abstract public void process()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>