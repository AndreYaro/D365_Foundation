<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerBalanceSqlStatementProviderSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class GeneralLedgerBalanceSqlStatementProviderSim_IT extends GeneralLedgerBalanceSqlStatementProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForContract</Name>
				<Source><![CDATA[
    public static GeneralLedgerBalanceSqlStatementProviderSim_IT newForContract(
        GeneralLedgerBalanceSqlStatementContract _contract)
    {
        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = new GeneralLedgerBalanceSqlStatementProviderSim_IT();

        statementProvider.contract = _contract;

        return statementProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateAccountReferencesSimITSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a bundle of GeneralLedgerBalanceReportingDimensionReferenceSim_IT records for linking source ledger accounts to reporting account structures.
    /// </summary>
    /// <param name = "_generalLedgerBalanceRecIdTmp">A <c>GeneralLedgerBalanceRecIdTmp</c> temp table instance containing
    /// GeneralLedgerAccountEntry.LedgerDimension values to process.
    /// </param>
    /// <returns>An instance of GeneralLedgerBalanceSqlStatement.</returns>
    /// <remarks>
    /// Example statement:
    ///
    /// declare @DimensionHierarchyId [bigint] = 22565421704
    /// declare @LedgerRecId [bigint] = 0
    /// declare @Partition [bigint] = 5637144576
    /// ;
    /// INSERT INTO DBO.GeneralLedgerBalanceReportingDimensionReferenceSim_IT (AccountEntryLedgerDimension, FocusDimensionHierarchy, Partition)
    ///     SELECT TOP 250000 RecordId, @DimensionHierarchyId, @Partition
    ///         FROM tempdb."DBO".t29221BatchAuroraV90149_15020516_FBAD41E40EFB47C2927A95868FBC583E OriginalLedgerDimensionTemp
    ///         LEFT JOIN DBO.GeneralLedgerBalanceReportingDimensionReferenceSim_IT GLBDR WITH (READPAST) ON
    ///             OriginalLedgerDimensionTemp.RecordId = GLBDR.AccountEntryLedgerDimension
    ///                 AND GLBDR.Partition = @Partition
    ///                 AND GLBDR.FocusDimensionHierarchy = @DimensionHierarchyId
    ///             WHERE GLBDR.AccountEntryLedgerDimension IS NULL
    /// </remarks>
    internal GeneralLedgerBalanceSqlStatement buildGenerateAccountReferencesSimITSqlStatement(GeneralLedgerBalanceRecIdTmp _generalLedgerBalanceRecIdTmp)
    {
        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(DimensionHierarchyRecIdParameterName, contract.parmDimensionHierarchyRecId());
        sqlParams.add(LedgerRecIdParameterName, contract.parmLedgerRecId());
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().ReportingDimensionBundleSize);
        
        str sqlStatement = strfmt(@";
            INSERT INTO DBO.%1 (%2, %3, %7)
                SELECT TOP (@%9) %4, @%6, @%8
                FROM %5 OriginalLedgerDimensionTemp
                LEFT JOIN DBO.%1 GLBDR WITH (READPAST) ON
                    OriginalLedgerDimensionTemp.%4 = GLBDR.%2
                        AND GLBDR.%7 = @%8
                        AND GLBDR.%3 = @%6
                    WHERE GLBDR.%2 IS NULL
            ",
            /* %1 */ tableStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT),
            /* %2 */ fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension),
            /* %3 */ fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, FocusDimensionHierarchy),
            /* %4 */ fieldStr(GeneralLedgerBalanceRecIdTmp, RecordId),
            /* %5 */ _generalLedgerBalanceRecIdTmp.getPhysicalTableName(),
            /* %6 */ DimensionHierarchyRecIdParameterName,
            /* %7 */ identifierStr(Partition),
            /* %8 */ PartitionParameterName,
            /* %9 */ BundleSizeParameterName);

            GeneralLedgerBalanceSqlStatement statement = GeneralLedgerBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'GenerateAccountReferencesSimIT');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateOriginalAccountToDimensionsMappingSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a bundle of GeneralLedgerBalanceReportingDimensionReferenceSim_IT records to link source ledger accounts to reporting account structures.
    /// </summary>
    /// <returns>An instance of GeneralLedgerBalanceSqlStatement.</returns>
    /// <remarks>
    /// Example statement:
    ///
    /// declare @DimensionHierarchyId [bigint] = 22565421704
    /// declare @Partition [bigint] = 5637144576
    /// declare @Undefined [int] = 0
    ///
    /// UPDATE TOP (250000) GLBDR
    ///     SET ReportingDimension = GLBD.RecId
    ///         FROM DBO.GeneralLedgerBalanceReportingDimensionReferenceSim_IT GLBDR WITH (UPDLOCK READPAST ROWLOCK)
    ///         INNER JOIN DBO.DimensionAttributeValueCombination DAVC ON
    ///             DAVC.RecId = GLBDR.AccountEntryLedgerDimension
    ///                 AND GLBDR.Partition = DAVC.Partition
    ///         INNER JOIN DBO.GeneralLedgerBalanceReportingDimension GLBD ON
    ///             GLBD.Partition = DAVC.Partition
    ///                 AND GLBD.FocusDimensionHierarchy = @DimensionHierarchyId
    ///                 AND DAVC.BUSINESSUNITVALUE = GLBD.DimValue1
    ///         WHERE DAVC.Partition = @Partition
    ///             AND GLBDR.FocusDimensionHierarchy = @DimensionHierarchyId
    ///             AND GLBDR.ReportingDimension = @Undefined
    /// </remarks>
    internal GeneralLedgerBalanceSqlStatement buildUpdateOriginalAccountToDimensionsMappingSqlStatement()
    {
        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(DimensionHierarchyRecIdParameterName, contract.parmDimensionHierarchyRecId());
        sqlParams.add(UndefinedParameterName, 0);
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().ReportingDimensionBundleSize);

        str dimensionsJoinClause = this.getDimensionUpdateWhereClause(contract.parmDimensionHierarchyRecId());

        str sqlStatement = strfmt(@"
            UPDATE TOP (@%14) GLBDR
                SET %1 = GLBD.%2
                FROM DBO.%3 GLBDR WITH (UPDLOCK READPAST ROWLOCK)
                INNER JOIN DBO.%4 DAVC ON
                    DAVC.%5 = GLBDR.%6
                        AND GLBDR.%7 = DAVC.%7
                INNER JOIN DBO.%9 GLBD ON
                    GLBD.%7 = DAVC.%7
                        AND GLBD.%10 = @%11
                        %12
                WHERE DAVC.%7 = @%8
                    AND GLBDR.%10 = @%11
                    AND GLBDR.%1 = @%13
            ",
            /* %1 */ fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, ReportingDimension),
            /* %2 */ fieldStr(GeneralLedgerBalanceReportingDimension, RecId),
            /* %3 */ tableStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT),
            /* %4 */ tableStr(DimensionAttributeValueCombination),
            /* %5 */ fieldStr(DimensionAttributeValueCombination, RecId),
            /* %6 */ fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension),
            /* %7 */ identifierStr(Partition),
            /* %8 */ PartitionParameterName,
            /* %9 */ tableStr(GeneralLedgerBalanceReportingDimension),
            /* %10 */ fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, FocusDimensionHierarchy),
            /* %11 */ DimensionHierarchyRecIdParameterName,
            /* %12 */ dimensionsJoinClause,
            /* %13 */ UndefinedParameterName,
            /* %14 */ BundleSizeParameterName);

            GeneralLedgerBalanceSqlStatement statement = GeneralLedgerBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'UpdateOriginalAccountToDimensionsMappingSimIT');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInitializeUnprocessedTransactionsSimITSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a sql statement to create a chunk of <c>GeneralLedgerBalanceUnprocessedTransactionsSim_IT</c> records
    /// from <c>GeneralJournalEntrySim_IT></c> record ids for balance initialization or rebuild processing.
    /// </summary>
    /// <returns>An instance of GeneralLedgerBalanceSqlStatement.</returns>
    /// <remarks>
    /// Example sql statement:
    ///
    /// declare @LedgerRecId [bigint] = 22565420920
    /// declare @Partition [bigint] = 5637144576
    /// declare @ToDate [datetime] = '2154-12-31 00:00:00'
    ///
    /// INSERT INTO DBO.GeneralLedgerBalanceUnprocessedTransactionsSim_IT (GeneralJournalEntry, Partition)
    ///     SELECT TOP 250000 GJE.RecId, @Partition
    ///         FROM DBO.GeneralJournalEntrySim_IT GJE
    ///         LEFT OUTER JOIN DBO.GeneralLedgerBalanceUnprocessedTransactionsSim_IT existsRecord WITH (READPAST)
    ///             ON existsRecord.GeneralJournalEntry = gje.RecId
    ///                 AND existsRecord.Partition = gje.Partition
    ///             WHERE GJE.Partition = @Partition
    ///                 AND GJE.Ledger = @LedgerRecId   AND GJE.AccountingDate &lt; @ToDate
    ///                 AND existsRecord.RecId IS NULL
    /// </remarks>
    internal GeneralLedgerBalanceSqlStatement buildInitializeUnprocessedTransactionsSimITSqlStatement()
    {
        str dateFromClause = '';
        str dateToClause = '';

        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(LedgerRecIdParameterName, contract.parmLedgerRecId());

        if (contract.parmFromDate() != dateNull())
        {
            dateFromClause = strFmt(' AND GJE.%1 >= @%2', fieldStr(GeneralJournalEntrySim_IT, AccountingDate), FromDateParameterName);
            sqlParams.add(FromDateParameterName, contract.parmFromDate());
        }

        if (contract.parmToDate() != dateNull())
        {
            dateToClause = strFmt(' AND GJE.%1 <= @%2', fieldStr(GeneralJournalEntrySim_IT, AccountingDate), ToDateParameterName);
            sqlParams.add(ToDateParameterName, contract.parmToDate());
        }

        str sqlStatement = strfmt(@"
            INSERT INTO DBO.%1 (%2, %5)
                SELECT TOP %11 GJE.%3, @%6
                FROM DBO.%4 GJE
                LEFT OUTER JOIN DBO.%1 existsRecord WITH (READPAST)
                    ON existsRecord.%2 = gje.%3
                        AND existsRecord.%5 = gje.%5
                    WHERE GJE.%5 = @%6
                        AND GJE.%7 = @%8 %9 %10
                        AND existsRecord.%3 IS NULL
            ",
            /* %1 */ tableStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT),
            /* %2 */ fieldStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT, GeneralJournalEntry),
            /* %3 */ fieldStr(GeneralJournalEntrySim_IT, RecId),
            /* %4 */ tableStr(GeneralJournalEntrySim_IT),
            /* %5 */ identifierStr(Partition),
            /* %6 */ PartitionParameterName,
            /* %7 */ fieldStr(GeneralJournalEntrySim_IT, Ledger),
            /* %8 */ LedgerRecIdParameterName,
            /* %9 */ dateFromClause,
            /* %10 */ dateToClause,
            /* %11 */ contract.parmConfiguration().InitializeUnprocessedTransactionBundleSize);

            GeneralLedgerBalanceSqlStatement statement = GeneralLedgerBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'InitializeUnprocessedTransactionsSimIT');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateUnprocessedTransactionsSimITSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds sql statement to update <c>GeneralLedgerBalanceUnprocessedTransactionsSim_IT</c> queue state for processing
    /// chunk of records into the balance tables.
    /// </summary>
    /// <param name = "_generalLedgerBalanceRecIdTmp">The <c>GeneralLedgerBalanceRecIdTmp</c> table instance
    /// to insert unprocessed <c>GeneralJournalEntrySim_IT</c> records to process.
    /// </param>
    /// <returns>An instance of GeneralLedgerBalanceSqlStatement.</returns>
    /// <remarks>
    /// Example sql statement:
    /// declare @LedgerRecId [bigint] = 22565420920
    /// declare @Partition [bigint] = 5637144576
    /// declare @ProcessAsOf [datetime] = '2023-04-19 11:52:52'
    /// declare @ProcesState [int] = 0
    /// declare @ToDate [datetime] = '2154-12-31 00:00:00'
    /// declare @UpdateToProcesState [int] = 1
    /// DECLARE @UnprocessTransactionsRecordIds TABLE(RecordId BIGINT);
    ///
    /// UPDATE TOP (250000) UPT
    ///     SET State = @UpdateToProcesState
    ///         OUTPUT INSERTED.GeneralJournalEntry INTO @UnprocessTransactionsRecordIds
    ///         FROM DBO.GeneralLedgerBalanceUnprocessedTransactionsSim_IT UPT WITH (UPDLOCK READPAST ROWLOCK)
    ///         INNER JOIN DBO.GeneralJournalEntrySim_IT GJE
    ///             ON GJE.RecId = UPT.GeneralJournalEntry
    ///                 AND GJE.Partition = UPT.Partition
    ///         WHERE UPT.Partition = @Partition
    ///             AND UPT.State = @ProcesState
    ///             AND UPT.CreatedDateTime &lt; @ProcessAsOf
    ///             AND GJE.Ledger = @LedgerRecId   AND GJE.AccountingDate &lt; @ToDate --Ledger, accounting date criteria
    ///
    /// INSERT INTO tempdb."DBO".t29221BatchAuroraV90149_15020516_FBAD41E40EFB47C2927A95868FBC583E (RecordId, Partition)
    ///    SELECT RecordId, @Partition from @UnprocessTransactionsRecordIds
    /// </remarks>
    internal GeneralLedgerBalanceSqlStatement buildUpdateUnprocessedTransactionsSimITSqlStatement(GeneralLedgerBalanceRecIdTmp _generalLedgerBalanceRecIdTmp)
    {
        const str ProcessStateParameterName = 'ProcesState';
        const str ProcessAsOfParameterName = 'ProcessAsOf';
        const str UpdateToProcessStateParameterName = 'UpdateToProcesState';

        str dateFromClause = '';
        str dateToClause = '';

        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(LedgerRecIdParameterName, contract.parmLedgerRecId());
        sqlParams.add(ProcessStateParameterName, enum2int(GeneralLedgerBalanceCalculationState::Pending));
        sqlParams.add(UpdateToProcessStateParameterName, enum2int(GeneralLedgerBalanceCalculationState::InProcess));
        sqlParams.add(ProcessAsOfParameterName, contract.parmProcessAsOfDateTime());
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().UnprocessedTransactionBundleSize);

        if (contract.parmFromDate() != dateNull())
        {
            dateFromClause = strFmt(' AND GJE.%1 >= @%2', fieldStr(GeneralJournalEntry, AccountingDate), FromDateParameterName);
            sqlParams.add(FromDateParameterName, contract.parmFromDate());
        }

        if (contract.parmToDate() != dateNull())
        {
            dateToClause = strFmt(' AND GJE.%1 <= @%2', fieldStr(GeneralJournalEntry, AccountingDate), ToDateParameterName);
            sqlParams.add(ToDateParameterName, contract.parmToDate());
        }

        str sqlStatement = strfmt(@"
            DECLARE @UnprocessTransactionsRecordIds TABLE(%6 BIGINT);

            UPDATE TOP (@%1) UPT
                SET %2 = @%3
                OUTPUT INSERTED.%4 INTO @UnprocessTransactionsRecordIds
                FROM DBO.%7 UPT WITH (UPDLOCK READPAST ROWLOCK)
                INNER JOIN DBO.%8 GJE
                    ON GJE.%9 = UPT.%10
                        AND GJE.%11 = UPT.%11
                WHERE UPT.%11 = @%12
                    AND UPT.%2 = @%13
                    AND UPT.%14 <= @%15
                    AND GJE.%16 = @%17 %18 %19 --Ledger, accounting date criteria

                INSERT INTO %5 (%6, %11)
                    SELECT %6, @%12 from @UnprocessTransactionsRecordIds
            ",
            /* %1 */ BundleSizeParameterName,
            /* %2 */ fieldStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT, State),
            /* %3 */ UpdateToProcessStateParameterName,
            /* %4 */ fieldStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT, GeneralJournalEntry),
            /* %5 */ _generalLedgerBalanceRecIdTmp.getPhysicalTableName(),
            /* %6 */ fieldStr(GeneralLedgerBalanceRecIdTmp, RecordId),
            /* %7 */ tableStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT),
            /* %8 */ tableStr(GeneralJournalEntrySim_IT),
            /* %9 */ fieldStr(GeneralJournalEntrySim_IT, RecId),
            /* %10 */ fieldStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT, GeneralJournalEntry),
            /* %11 */ identifierStr(Partition),
            /* %12 */ PartitionParameterName,
            /* %13 */ ProcessStateParameterName,
            /* %14 */ fieldStr(GeneralLedgerBalanceUnprocessedTransactionsSim_IT, CreatedDateTime),
            /* %15 */ ProcessAsOfParameterName,
            /* %16 */ fieldStr(GeneralJournalEntrySim_IT, Ledger),
            /* %17 */ LedgerRecIdParameterName,
            /* %18 */ dateFromClause,
            /* %19 */ dateToClause);

            GeneralLedgerBalanceSqlStatement statement = GeneralLedgerBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'UpdateUnprocessedTransactionsSimIT');

        return statement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>