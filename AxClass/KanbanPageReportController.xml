<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanPageReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanPageReportController</c> class is a controller class for the <c>KanbanPage</c> report.
/// </summary>
public class KanbanPageReportController extends KanbanReportController implements BatchRetryable
{
    #define.ReportName('KanbanPage.Report')
    #define.defaultToBatchFromElementCount(21)
    List            kanbanList;
    List            cardList;
    WrkCtrIdBase    workCell;
    NoYes           defaultToBatchExecution;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCardList</Name>
				<Source><![CDATA[
        public List parmCardList(List _cardList = cardList)
    {
        cardList = _cardList;
        return cardList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultToBatchExecution</Name>
				<Source><![CDATA[
        public NoYes parmDefaultToBatchExecution(NoYes _defaultToBatchExecution = defaultToBatchExecution)
    {
        defaultToBatchExecution = _defaultToBatchExecution;
        return defaultToBatchExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanList</Name>
				<Source><![CDATA[
        public List parmKanbanList(List _kanbanList = kanbanList)
    {
        kanbanList = _kanbanList;
        return kanbanList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCell</Name>
				<Source><![CDATA[
        public WrkCtrIdBase parmWorkCell(WrkCtrIdBase _workCell = workCell)
    {
        workCell = _workCell;
        return workCell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the printing of kanbans or kanban cards.
    /// </summary>
    /// <param name="_listParameter">
    ///    The list that contains <c>KanbanId</c> values or <c>CardId</c> values of the records to print.
    /// </param>
    /// <param name="_kanbanPrintDataset">
    ///    Defines the dataset to print.
    /// </param>
    /// <param name="_workCell">
    ///    The name of the work cell from which records were selected.
    /// </param>
    /// <param name="_showDialog">
    ///    A Boolean value that specifies whether to open a dialog with printing options.
    /// </param>
    /// <param name="_location">
    ///    Information about where to print the data.
    /// </param>
    /// <returns>
    ///    true if the printing was successful; otherwise, false.
    /// </returns>
    protected boolean preparePrint(
        List                _listParameter,
        KanbanPrintDataset  _kanbanPrintDataset,
        WrkCtrIdBase        _workCell,
        boolean             _showDialog,
        KanbanPrintLocation _location = KanbanPrintLocation::Default)
    {
        boolean     result = _listParameter != null;

        if (   _listParameter
            && _listParameter.elements())
        {
            this.parmReportName(#ReportName);
            this.parmDialogCaption("@SYS302442");
            this.parmShowDialog(_showDialog);
            this.parmDefaultToBatchExecution(   this.isInBatch()
                                             || _listParameter.elements() >= #defaultToBatchFromElementCount);
            this.parmDefaultPrintSettings(KanbanReportController::getPrintDestinationSettings(_location,_workCell));

            switch (_kanbanPrintDataset)
            {
                case KanbanPrintDataset::Kanban:
                    this.parmCardList(null);
                    this.parmKanbanList(_listParameter);
                    break;
                case KanbanPrintDataset::Card:
                    this.parmCardList(_listParameter);
                    this.parmKanbanList(null);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            this.parmWorkCell(_workCell);

            Args newArgs = this.parmArgs();
            if (newArgs == null)
            {
                newArgs = new Args();
            }
            newArgs.menuItemType(MenuItemType::Output);
            newArgs.menuItemName(menuItemOutputStr(KanbanPage));
            this.parmArgs(newArgs);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before a dialog box is shown to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. A common use case is to add or change a query. This
    /// method is called only during interactive scenario before rendering the UI to user.For batch
    /// scenario, we do not invoke this method because there is no user interaction and contract values are
    /// already saved in batch.Do not initialize any instance variables in this code if they are used
    /// during the lifetime of the controller because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        super();

        KanbanPageContract contract = this.parmReportContract().parmRdpContract() as KanbanPageContract;

        if (defaultToBatchExecution == NoYes::Yes)
        {
            this.batchInfo().parmBatchExecute(NoYes::Yes);
        }

        if (!showDialog)
        {
            contract.parmPrintStatus(KanbanCardPrintStatusTypeAll::All);
        }

        contract.parmCardList(cardList);
        contract.parmKanbanList(kanbanList);
        contract.parmWorkCell(workCell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints kanbans or kanban cards depending on the dataset.
    /// </summary>
    /// <param name="_listParameter">
    ///    A list that contains kanban IDs or card IDs of records to be printed.
    /// </param>
    /// <param name="_kanbanPrintDataset">
    ///    A value that defines the dataset to print.
    /// </param>
    /// <param name="_workCell">
    ///    The name of the work cell from which records were selected.
    /// </param>
    /// <param name="_showDialog">
    ///    A value that determines whether a dialog with printing options is opened.
    /// </param>
    /// <param name="_location">
    ///    The information about where data is printed.
    /// </param>
    /// <returns>
    ///    true if the printing was successful; otherwise, false.
    /// </returns>
    public boolean printReport(
        List                _listParameter,
        KanbanPrintDataset  _kanbanPrintDataset,
        WrkCtrIdBase        _workCell,
        boolean             _showDialog,
        KanbanPrintLocation _location = KanbanPrintLocation::Default)
    {
        boolean result = this.preparePrint(_listParameter,_kanbanPrintDataset,_workCell,_showDialog,_location);

        if (result)
        {
            this.print();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanPageReportController construct()
    {
        return new KanbanPageReportController();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
