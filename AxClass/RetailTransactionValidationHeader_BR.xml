<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationHeader_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>RetailTransactionValidationHeader_BR</c> class validates the header of a Retail transaction.
/// </summary>
internal final class RetailTransactionValidationHeader_BR extends RetailTransactionValidationBase
{
    private RetailTransactionTable transactionTable;
    private RetailFiscalDocument_BR fiscalDocument;
    private RetailFiscalDocumentCancel_BR fiscalDocumentCancel;
    private RetailFiscalDocument_BR fiscalDocumentContingency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fiscal document.
    /// </summary>
    /// <returns>True if the fiscal document can be successfully posted; otherwise, false.</returns>
    [
        RetailTransactionValidation(RetailTransactionValidationRuleType::TransactionLevel, "@Brazil_Retail:FiscalDocumentValidationRule"),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::AsyncCustomerOrder),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::AsyncCustomerQuote),
        RetailTransactionValidationNotApplicableTo(RetailTransactionType::PendingSalesOrder)
    ]
    public boolean validateFiscalDocument()
    {
        if (!this.isValidationEnabled())
        {
            return true;
        }

        boolean isValid;

        this.initFiscalDocuments();

        if (fiscalDocumentCancel)
        {
            isValid = fiscalDocument != null;
        }
        else if (this.transactionContainsOnlyGiftCards())
        {
            isValid = true;
        }
        else
        {
            if (fiscalDocument)
            {
                if (this.isFiscalDocumentInFinalStatus())
                {
                    isValid = true;
                }
                else if (this.contingencyShouldExist())
                {
                    if (fiscalDocumentContingency)
                    {
                        isValid = true;
                    }
                }
                else if (this.isAnyFiscalTransSkipped())
                {
                    isValid = true;
                }
            }
            else if (fiscalDocumentContingency)
            {
                isValid = true;
            }
        }

        if (!isValid)
        {
            this.insertValidationErrorForTransaction(RetailTransactionValidationType::FiscalDocumentNotFound_BR, "@Brazil_Retail:CorrespondingFiscalDocumentIsNotFound");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidationEnabled</Name>
				<Source><![CDATA[
    private boolean isValidationEnabled()
    {
        #ISOCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocuments</Name>
				<Source><![CDATA[
    private void initFiscalDocuments()
    {
        RetailTransactionTable retailTransaction = this.getTransactionTable();
        RetailFiscalDocument_BR retailFiscalDocument;

        while select retailFiscalDocument
                where retailFiscalDocument.transactionId == retailTransaction.transactionId
                    && retailFiscalDocument.terminal == retailTransaction.terminal
                    && retailFiscalDocument.store == retailTransaction.store
                    && retailFiscalDocument.Channel == retailTransaction.Channel
        {
            if (retailFiscalDocument.ContingencyMode == EFDocContingMode_BR::Off)
            {
                fiscalDocument = retailFiscalDocument.data();
            }
            else
            {
                fiscalDocumentContingency = retailFiscalDocument.data();
            }
        }

        if (!fiscalDocument)
        {
            fiscalDocumentCancel = RetailFiscalDocumentCancel_BR::findByRetailTransaction(this.getTransactionTable());
            fiscalDocument = RetailFiscalDocument_BR::findByAccessKey(fiscalDocumentCancel.AccessKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTable</Name>
				<Source><![CDATA[
    private RetailTransactionTable getTransactionTable()
    {
        if (!transactionTable)
        {
            transactionTable.Channel = str2Int64(customerOrderInfo.ChannelRecordId);
            transactionTable.Store = customerOrderInfo.StoreId;
            transactionTable.Terminal = customerOrderInfo.TerminalId;
            transactionTable.TransactionId = customerOrderInfo.TransactionId;
            transactionTable.RecId = 1;
        }

        return transactionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailTransactionFiscalTrans</Name>
				<Source><![CDATA[
    private RetailTransactionFiscalTrans getRetailTransactionFiscalTrans()
    {
        RetailTransactionTable retailTransaction = this.getTransactionTable();
        RetailTransactionFiscalTrans retailTransactionFiscalTrans;

        select firstonly RegistrationStatus from retailTransactionFiscalTrans
                where retailTransactionFiscalTrans.transactionId == retailTransaction.transactionId
                    && retailTransactionFiscalTrans.terminal == retailTransaction.terminal
                    && retailTransactionFiscalTrans.store == retailTransaction.store
                    && retailTransactionFiscalTrans.Channel == retailTransaction.Channel
                    && (retailTransactionFiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Postponed
                        || retailTransactionFiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Skipped);

        return retailTransactionFiscalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contingencyShouldExist</Name>
				<Source><![CDATA[
    private boolean contingencyShouldExist()
    {
        RetailTransactionFiscalTrans retailTransactionFiscalTrans = this.getRetailTransactionFiscalTrans();

        return retailTransactionFiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Postponed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyFiscalTransSkipped</Name>
				<Source><![CDATA[
    private boolean isAnyFiscalTransSkipped()
    {
        RetailTransactionFiscalTrans retailTransactionFiscalTrans = this.getRetailTransactionFiscalTrans();

        return retailTransactionFiscalTrans.RegistrationStatus == RetailFiscalIntegrationFiscalTransStatus::Skipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalDocumentInFinalStatus</Name>
				<Source><![CDATA[
    private boolean isFiscalDocumentInFinalStatus()
    {
        return fiscalDocument.Status == FiscalDocumentStatus_BR::Approved
            || fiscalDocument.Status == FiscalDocumentStatus_BR::Denied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionContainsOnlyGiftCards</Name>
				<Source><![CDATA[
    private boolean transactionContainsOnlyGiftCards()
    {
        RetailTransactionTable retailTransaction = this.getTransactionTable();
        RetailTransactionSalesTrans transactionSalesTrans;

        select firstonly RecId from transactionSalesTrans
            where transactionSalesTrans.Channel == retailTransaction.Channel
                    && transactionSalesTrans.Store == retailTransaction.store
                    && transactionSalesTrans.TerminalId == retailTransaction.terminal
                    && transactionSalesTrans.TransactionId == retailTransaction.transactionId
                    && transactionSalesTrans.giftcard == 0;

        return transactionSalesTrans.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>