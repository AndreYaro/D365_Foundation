<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_MB</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class rAssetReport_MB extends RAssetReport
{
    protected QueryRun queryRun;
    protected XMLWordDocument wordDocument;
    protected LedgerJournalTable ledgerJournalTable;
    protected RAssetDocument documentHeader, documentLine;
    protected RAssetTrans rAssetTrans;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected LedgerJournalTrans_RAsset ledgerJournalTransRAsset;

    protected RAssetLocationId assetLocationId;
    protected MainAccountNum mainAccountNum;
    protected DimensionValue analysisCode;

    protected OffSessionId_RU offSessionId;

    protected int curRow;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beforePrompt</Name>
				<Source><![CDATA[
    protected boolean beforePrompt()
    {
        boolean ret = super();

        if (ret
            && ledgerJournalTable.JournalNum)
        {
            this.createDocumentsFromSource();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateRecord</Name>
				<Source><![CDATA[
    public boolean canCreateRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentsFromSource</Name>
				<Source><![CDATA[
    protected void createDocumentsFromSource()
    {
        RAssetDocument rAssetDocumentInsert;
        RAssetDocument rAssetDocumentDelete;
    
        RecordInsertList documentInsert = new RecordInsertList(tableNum(RAssetDocument));
        Map documentMap = new Map(Types::Container, Types::String);

        queryRun = new QueryRun(this.queryCreateDocument());
    
        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            ledgerJournalTransRAsset = queryRun.get(tableNum(LedgerJournalTrans_RAsset));
    
            this.documentDate(ledgerJournalTransRAsset.getTransDate(ledgerJournalTrans));
    
            LedgerJournalTrans ledgerJournalTransStorno;
            LedgerJournalTrans_RAsset ledgerJournalTransRAssetStorno;
            select firstonly StornoRecId from ledgerJournalTransRAssetStorno
                where ledgerJournalTransRAssetStorno.StandardId == ledgerJournalTransRAsset.StandardId
                    && ledgerJournalTransRAssetStorno.AssetId == rAssetTable.AccountNum
                exists join TableId from ledgerJournalTransStorno
                    where ledgerJournalTransStorno.RecId == ledgerJournalTransRAssetStorno.RefRecId
                        && ledgerJournalTransStorno.JournalNum == ledgerJournalTable.JournalNum;
    
            if (ledgerJournalTransRAssetStorno.StornoRecId)
            {
                delete_from rAssetDocumentDelete
                    where rAssetDocumentDelete.Type == this.reportType()
                        && rAssetDocumentDelete.AssetId == rAssetTable.AccountNum
                        && rAssetDocumentDelete.RefTableId == ledgerJournalTable.TableId
                        && rAssetDocumentDelete.RefRecId == ledgerJournalTable.RecId;
    
                continue;
            }
    
            if (RAssetDocument::existByRef(rAssetTable.AccountNum, this.reportType(), ledgerJournalTable))
            {
                continue;
            }
    
            select firstonly rAssetTrans
                order by TransDate desc
                where rAssetTrans.AccountNum == rAssetTable.AccountNum
                    && rAssetTrans.AssetStandardId == ledgerJournalTransRAsset.StandardId
                    && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                    && !rAssetTrans.StornoRecId;
    
            assetLocationId = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, this.documentDate()).NewLocation;
    
            if (documentMap.exists(this.newReportKey()))
            {
                this.documentNumber(documentMap.lookup(this.newReportKey()));
            }
            else
            {
                this.documentNumber('');
                this.findOrCreateMBDocumentNum();
                documentMap.insert(this.newReportKey(), this.documentNumber());
    
                // insert header
                rAssetDocumentInsert.clear();
                rAssetDocumentInsert.Num = this.documentNumber();
                rAssetDocumentInsert.Date = this.documentDate();
                rAssetDocumentInsert.Type = this.reportType();
                rAssetDocumentInsert.StandardId = ledgerJournalTransRAsset.StandardId;
                rAssetDocumentInsert.RefTableId = tableNum(LedgerJournalTable);
                rAssetDocumentInsert.RefRecId = ledgerJournalTable.RecId;
                rAssetDocumentInsert.AssetId = '';
                rAssetDocumentInsert.OffSessionId = RAssetReport_MB::initOfficials(this.reportType());
    
                documentInsert.add(rAssetDocumentInsert);
            }
    
            rAssetDocumentInsert.clear();
            rAssetDocumentInsert.Num = this.documentNumber();
            rAssetDocumentInsert.Date = this.documentDate();
            rAssetDocumentInsert.Type = this.reportType();
            rAssetDocumentInsert.AssetId = rAssetTable.AccountNum;
            rAssetDocumentInsert.StandardId = ledgerJournalTransRAsset.StandardId;
            rAssetDocumentInsert.RefTableId = tableNum(LedgerJournalTable);
            rAssetDocumentInsert.RefRecId = ledgerJournalTable.RecId;
    
            documentInsert.add(rAssetDocumentInsert);
        }
    
        documentInsert.insertDatabase();
        this.documentNumber('');
        this.documentDate(dateNull());
    
        select firstonly RecId from rAssetDocumentInsert
            where rAssetDocumentInsert.Type == this.reportType()
                && rAssetDocumentInsert.RefTableId == ledgerJournalTable.TableId
                && rAssetDocumentInsert.RefRecId == ledgerJournalTable.RecId
                && rAssetDocumentInsert.AssetId != '';
    
        if (!rAssetDocumentInsert.RecId)
        {
            delete_from rAssetDocumentDelete
                where rAssetDocumentDelete.Type == this.reportType()
                    && rAssetDocumentDelete.AssetId == ''
                    && rAssetDocumentDelete.RefTableId == ledgerJournalTable.TableId
                    && rAssetDocumentDelete.RefRecId == ledgerJournalTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        return new Dialog(this.comment(), this, '', new Form(formStr(RAssetReport)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFields</Name>
				<Source><![CDATA[
    public void enableFields(FormDataSource _ds)
    {
        RAssetDocument doc = _ds.cursor();

        super(_ds);

        _ds.object(fieldNum(RAssetDocument, Comment))
            .visible(this.reportType() == RAssetReportType::MB4);

        _ds.object(fieldNum(RAssetDocument, OrderNum))
            .visible(this.reportType() == RAssetReportType::MB8);

        _ds.object(fieldNum(RAssetDocument, OrderNum))
            .mandatory(this.reportType() == RAssetReportType::MB8);

        _ds.object(fieldNum(RAssetDocument, OrderDate))
            .visible(this.reportType() == RAssetReportType::MB8);

        if (this.reportType() == RAssetReportType::MB4
            || this.reportType() == RAssetReportType::MB8)
        {
            _ds.allowDelete(!doc.AssetId);
            _ds.allowCreate(!doc.AssetId);
        }

        if (this.reportType() == RAssetReportType::MB2
            || this.reportType() == RAssetReportType::MB4
            || this.reportType() == RAssetReportType::MB8)
        {
            _ds.object(fieldNum(RAssetDocument, StandardId))
                .visible(true);

            if (doc.RecId)
            {
                _ds.object(fieldNum(RAssetDocument, Date))
                    .allowEdit(false);

                _ds.object(fieldNum(RAssetDocument, StandardId))
                    .allowEdit(false);

                _ds.object(fieldNum(RAssetDocument, Comment))
                    .allowEdit(true);

                _ds.object(fieldNum(RAssetDocument, OrderNum))
                    .allowEdit(true);

                _ds.object(fieldNum(RAssetDocument, OrderDate))
                    .allowEdit(true);

                _ds.allowCreate(false);
            }
            else
            {
                _ds.object(fieldNum(RAssetDocument, Comment))
                    .allowEdit(true);

                _ds.object(fieldNum(RAssetDocument, Date))
                    .allowEdit(true);

                _ds.object(fieldNum(RAssetDocument, StandardId))
                    .allowEdit(true);

                _ds.object(fieldNum(RAssetDocument, OrderNum))
                    .allowEdit(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeReport</Name>
				<Source><![CDATA[
    public void executeReport(Args _args)
    {
        try
        {
            if (this.documentDate()
                && this.documentNumber())
            {
                this.run();
            }
            else
            {
                throw error("@GLS101555");
            }
        }
        catch (Exception::Error)
        {
            error("@GLS101886");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateMBDocumentNum</Name>
				<Source><![CDATA[
    protected void findOrCreateMBDocumentNum()
    {
        if (!this.documentNumber())
        {
            this.documentNumber(NumberSeq::newGetNumFromCode(RAssetDocumentTypeSetup::find(this.reportType()).NumberSequenceCode).num());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficeXMLDocument</Name>
				<Source><![CDATA[
    protected boolean initOfficeXMLDocument()
    {
        boolean ret = true;
        wordDocument = XMLWordDocument::newFromResource(this.templateName());
        if (wordDocument == null)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportHeaderData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data required for report header
    /// </summary>
    /// <remarks>
    /// Analysis dimension value taken from dimension attribute specified at the rAssetParameters
    /// </remarks>
    protected void initReportHeaderData()
    {
        if (!assetLocationId)
        {
            assetLocationId = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,
                RAssetMoveType::Transfer,
                NoYes::No,
                this.documentDate()).NewLocation;
        }

        if (!mainAccountNum)
        {
            DimensionAttributeLevelValueView dimAttrLevelValueView;
            select firstonly LedgerDimension, TransDate from rAssetTrans
                order by TransDate desc
                where rAssetTrans.AccountNum == rAssetTable.AccountNumReference
                    && rAssetTrans.AssetStandardId == documentHeader.StandardId
                    && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                    && !rAssetTrans.StornoRecId
            join DisplayValue from dimAttrLevelValueView
                 where dimAttrLevelValueView.ValueCombinationRecId == rAssetTrans.LedgerDimension
                   && dimAttrLevelValueView.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            mainAccountNum = dimAttrLevelValueView.DisplayValue;
            analysisCode = this.getAnalysisCodeFromLedgerDimension(rAssetTrans.LedgerDimension);
        }

        offSessionId = documentHeader.OffSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument()
    {
        documentPath = this.comment() + "@SYS34952" + this.documentNumber() + "@SYS34953";

        return this.initOfficeXMLDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args args)
    {
        super(args);

        if(args.parmEnum() != RAssetReportType::MB2)
        {
            switch (args.dataset())
            {
                case tableNum(RAssetTable):
                    rAssetTable = args.record();
                    break;

                case tableNum(LedgerJournalTable):
                    ledgerJournalTable = args.record();
                    break;

                default:
                    throw error(Error::missingRecord(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportKey</Name>
				<Source><![CDATA[
    protected abstract container newReportKey()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCreateDocument</Name>
				<Source><![CDATA[
    protected Query queryCreateDocument()
    {
        Query query = new Query();
    
        QueryBuildDataSource qbdsLedgerJournalTable = query.addDataSource(tableNum(LedgerJournalTable));
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, JournalNum)).value(ledgerJournalTable.JournalNum);
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, JournalType)).value(queryValue(LedgerJournalType::Assets_RU));
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, Posted)).value(queryValue(NoYes::Yes));
    
        QueryBuildDataSource qbdsLedgerJournalTrans = qbdsLedgerJournalTable.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.addSortField(fieldNum(LedgerJournalTrans, TransDate));
        qbdsLedgerJournalTrans.orderMode(OrderMode::GroupBy);
        qbdsLedgerJournalTrans.relations(true);
    
        QueryBuildDataSource qbdsLedgerJournalTrans_RAsset = qbdsLedgerJournalTrans.addDataSource(tableNum(LedgerJournalTrans_RAsset));
        qbdsLedgerJournalTrans_RAsset.relations(true);
    
        qbdsLedgerJournalTrans_RAsset.addRange(fieldNum(LedgerJournalTrans_RAsset, TransType)).value(SysQuery::value(RAssetTransType::DisposalSale));
        qbdsLedgerJournalTrans_RAsset.addRange(fieldNum(LedgerJournalTrans_RAsset, TransType)).value(SysQuery::value(RAssetTransType::Disposal));
        qbdsLedgerJournalTrans_RAsset.addRange(fieldNum(LedgerJournalTrans_RAsset, StandardId)).value(rAssetParameters.StandardIdDefault);
    
        qbdsLedgerJournalTrans_RAsset.addSortField(fieldNum(LedgerJournalTrans_RAsset, StandardId));
        qbdsLedgerJournalTrans_RAsset.addSortField(fieldnum(LedgerJournalTrans_RAsset, CorrectedPeriod));
    
        qbdsLedgerJournalTrans_RAsset.orderMode(OrderMode::GroupBy);
    
        QueryBuildDataSource qbdsRassetTable = qbdsLedgerJournalTrans_RAsset.addDataSource(tableNum(RAssetTable));
        qbdsRassetTable.relations(true);
        qbdsRassetTable.addSortField(fieldNum(RAssetTable, AccountNum));
        qbdsRassetTable.orderMode(OrderMode::GroupBy);
    
        qbdsRassetTable.addRange(fieldNum(RAssetTable, AssetType)).value(SysQuery::value(RAssetType::LowCostAssets));
        qbdsRassetTable.addRange(fieldNum(RAssetTable, AssetType)).value(SysQuery::value(RAssetType::Rigging));
        qbdsRassetTable.addRange(fieldNum(RAssetTable, AssetType)).value(SysQuery::value(RAssetType::Cloths));
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryReport</Name>
				<Source><![CDATA[
    protected Query queryReport()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regNumberSumCalc</Name>
				<Source><![CDATA[
    protected RAssetSumCalc regNumberSumCalc(RAssetId _registrationNumber, RAssetStandardId _standardId, TransDate _dateTo = this.documentDate())
    {
        RAssetTable rAssetTableRef;
        Range refRange;

        while select AccountNum from rAssetTableRef
            where rAssetTableRef.AccountNumReference == rAssetTable.AccountNumReference
            && (rAssetTableRef.AssetType == RAssetType::Cloths
                || rAssetTableRef.AssetType == RAssetType::Rigging
                || rAssetTableRef.AssetType == RAssetType::LowCostAssets)
        {
            refRange = queryRangeConcat(refRange, rAssetTableRef.AccountNum);
        }

        RAssetSumCalc_Trans rAssetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(refRange, _standardId, _dateTo);

        return rAssetSumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    public static OffSessionId_RU initOfficials(RAssetReportType _reportType)
    {
        OfficialsServ_RU officialsServ = new OfficialsServ_RU();
        OffSessionId_RU ret;
        OffReportType_RU offReportType;

        switch(_reportType)
        {
            case RAssetReportType::MB8 :
                offReportType = OffReportType_RU::RAssetMB8;
                break;

            default:
                return ret;
        }

        ret = officialsServ.getNewSessionId();
        officialsServ.newId(ret);
        officialsServ.initInventoryRAsset(offReportType);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>