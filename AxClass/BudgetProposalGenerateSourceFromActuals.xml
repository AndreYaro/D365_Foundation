<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProposalGenerateSourceFromActuals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class does all the work necessary to send actuals data to the AI processor.
/// </summary>
internal final class BudgetProposalGenerateSourceFromActuals
{
    private BudgetProposalConfiguration proposalConfig;
    private GeneralJournalEntry glEntry;
    private GeneralJournalAccountEntry glAccountEntry;
    private BudgetProposalLedgerDimensionCache ledgerDimensionCache;
    private FiscalPeriodStart firstDayInFiscalPeriod;
    private FiscalPeriodEnd lastDayInFiscalPeriod;
    private SysInstrumentationProgressLogger progressLoger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetProposalGenerateSourceFromActuals construct()
    {
        return new BudgetProposalGenerateSourceFromActuals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        progressLoger = SysInstrumentationProgressLogger::createLogger(BudgetProposalConstants::SourceNameBudgetProposalGenerateFromActuals, BudgetProposalConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposalConfiguration</Name>
				<Source><![CDATA[
    internal BudgetProposalConfiguration parmProposalConfiguration(BudgetProposalConfiguration _proposalConfig = proposalConfig)
    {
        this.proposalConfig = _proposalConfig;
        return this.proposalConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    internal void generate()
    {
        using (SysInstrumentationActivityContext activityContext = progressLoger.activityContextForStage(BudgetProposalConstants::ActivityNameGenerateFromActuals))
        {
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameStarDate, date2StrXpp(proposalConfig.StartDate));
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameEndDate, date2StrXpp(proposalConfig.EndDate));
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameBudgetAsOfDate, date2StrXpp(proposalConfig.BudgetAsOfDate));
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameLedger, int642Str(proposalConfig.Ledger));
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameProposalConfigRecId, int642Str(proposalConfig.RecId));
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameTimeSeriesId, proposalConfig.TimeSeriesId);
            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameSourceTransactions, enum2Symbol(enumNum(BudgetSourceTransactions), proposalConfig.SourceTransactions));

            this.updateLedgerDimensionCache();

            FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

            FiscalPeriodStart fiscalPeriodStartDate = FiscalCalendars::findFirstDayOfMonth(fiscalCalendarRecId, proposalConfig.StartDate);
            FiscalPeriodEnd fiscalPeriodEndDate = FiscalCalendars::findLastDayOfMonth(fiscalCalendarRecId, proposalConfig.EndDate);

            FiscalCalendarPeriod fiscalCalendarPeriod;

            while select StartDate, EndDate
            from fiscalCalendarPeriod
            group by fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate
            order by fiscalCalendarPeriod.StartDate
            where fiscalCalendarPeriod.FiscalCalendar == fiscalCalendarRecId &&
                fiscalCalendarPeriod.StartDate >= fiscalPeriodStartDate &&
                fiscalCalendarPeriod.EndDate <= fiscalPeriodEndDate &&
                fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            {
                firstDayInFiscalPeriod = fiscalCalendarPeriod.StartDate;
                lastDayInFiscalPeriod = fiscalCalendarPeriod.EndDate;

                SysDaQueryObject sourceQuery = this.createSourceQueryFromGeneralJournal();
                SysDaInsertObject insertObject = this.buildTimeSeriesSourceInsertObject();
                insertObject.query(sourceQuery);
                SysDaInsertStatement insertStatement = new SysDaInsertStatement();
                ttsbegin;
                insertStatement.insert(insertObject);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceQueryFromGeneralJournal</Name>
				<Source><![CDATA[
    private SysDaQueryObject createSourceQueryFromGeneralJournal()
    {
        // Creates the query used to create data for predictive analysis
        SysDaQueryObject sdqoGLAE = this.buildGeneralJournalAccountEntryObject();
        SysDaQueryObject sdqoLedgerDimensionCache = this.buildBudgetProposalLedgerDimensionCacheObject();
        SysDaQueryObject sdqoGLE = this.buildGeneralJournalEntryObject();
        SysDaQueryObject sdqoAccountType = this.buildBudgetProposalSourceAccountTypeObject();

        sdqoGLAE
            .joinClause(SysDaJoinKind::InnerJoin, sdqoLedgerDimensionCache)
            .joinClause(SysDaJoinKind::ExistsJoin, sdqoGLE)
            .joinClause(SysDaJoinKind::ExistsJoin, sdqoAccountType);

        return sdqoGLAE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGeneralJournalAccountEntryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildGeneralJournalAccountEntryObject()
    {
        // The line object aggregates data from BudgetTransactionHeader by LedgerDimension for a date range. It is then
        // reused throughout the process to gather data for each fiscal period in the date range defined in the configuration header
        SysDaQueryObject sdqo = new SysDaQueryObject(glAccountEntry);

        this.addFieldsToQueryObject(sdqo.projection());
        this.addLiteralsToQueryObject(sdqo.projection());

        // Add groupby for sum
        sdqo.groupByClause().add(fieldStr(GeneralJournalAccountEntry, IsCredit));
        
        return(sdqo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToQueryObject</Name>
				<Source><![CDATA[
    private void addFieldsToQueryObject(SysDaSelection _projectionList)
    {
        _projectionList
            .add(fieldStr(GeneralJournalAccountEntry, isCredit))
            .addSum(fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralsToQueryObject</Name>
				<Source><![CDATA[
    private void addLiteralsToQueryObject(SysDaSelection _projectionList)
    {
        _projectionList
            .addValue(this.firstDayInFiscalPeriod)
            .addValue(proposalConfig.Ledger)
            .addValue(proposalConfig.TimeSeriesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGeneralJournalEntryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildGeneralJournalEntryObject()
    {
        glEntry.skipDataMethods(true);
        SysDaQueryObject sdqo = new SysDaQueryObject(glEntry);

        TransDate expressionLastDayInFiscalPeriod = this.getLastDayForCriteria(lastDayInFiscalPeriod);

        sdqo.whereClause(new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(glEntry, fieldStr(GeneralJournalEntry, AccountingDate)),
            new SysDaValueExpression(firstDayInFiscalPeriod))
            .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(glEntry, fieldStr(GeneralJournalEntry, AccountingDate)),
                    new SysDaValueExpression(expressionLastDayInFiscalPeriod)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(glEntry, fieldStr(GeneralJournalEntry, Ledger)),
                    new SysDaValueExpression(proposalConfig.Ledger)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(glEntry, fieldStr(GeneralJournalEntry, PostingLayer)),
                    new SysDaValueExpression(CurrentOperationsTax::Current)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(glEntry, fieldStr(GeneralJournalEntry, RecId)),
                    new SysDaFieldExpression(glAccountEntry, fieldStr(GeneralJournalAccountEntry, GeneralJournalEntry)))));

        sdqo.joinClauseKind(SysDaJoinKind::ExistsJoin);

        return sdqo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDayForCriteria</Name>
				<Source><![CDATA[
    private FiscalPeriodEnd getLastDayForCriteria(FiscalPeriodEnd _expressionLastDayInFiscalPeriod)
    {
        FiscalPeriodEnd expressionDate = _expressionLastDayInFiscalPeriod;

        if (proposalConfig.SourceTransactions == BudgetSourceTransactions::Both && lastDayInFiscalPeriod > proposalConfig.BudgetAsOfDate - 1)
        {
            expressionDate = proposalConfig.BudgetAsOfDate - 1;
        }

        return expressionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetProposalLedgerDimensionCacheObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildBudgetProposalLedgerDimensionCacheObject()
    {
        ledgerDimensionCache.skipDataMethods(true);

        SysDaQueryObject sdqo = new SysDaQueryObject(ledgerDimensionCache);
        sdqo.projection().add(fieldStr(BudgetProposalLedgerDimensionCache, BudgetLedgerDimension));
        sdqo.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(ledgerDimensionCache, fieldStr(BudgetProposalLedgerDimensionCache, LedgerDimension)),
            new SysDaFieldExpression(glAccountEntry, fieldStr(GeneralJournalAccountEntry, LedgerDimension))));
        sdqo.joinClauseKind(SysDaJoinKind::InnerJoin);

        sdqo.groupByClause().add(fieldStr(BudgetProposalLedgerDimensionCache, BudgetLedgerDimension));

        return sdqo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetProposalSourceAccountTypeObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildBudgetProposalSourceAccountTypeObject()
    {
        // Restrict results to the selected Ledger account types
        MainAccount account;
        BudgetProposalSourceAccountType sourceAccountType;

        SysDaQueryObject queryObjectMainAccount = new SysDaQueryObject(account);
        queryObjectMainAccount.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(account, fieldStr(MainAccount, RecId)),
            new SysDaFieldExpression(glAccountEntry, fieldStr(GeneralJournalAccountEntry, MainAccount))));
        
        SysDaQueryObject queryObject = new SysDaQueryObject(sourceAccountType);
        queryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(sourceAccountType, fieldStr(BudgetProposalSourceAccountType, BudgetProposalConfiguration)),
            new SysDaValueExpression(proposalConfig.RecId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(sourceAccountType, fieldStr(BudgetProposalSourceAccountType, LedgerAccountType)),
                new SysDaFieldExpression(account, fieldStr(MainAccount, Type)))));
        queryObject.joinClauseKind(SysDaJoinKind::ExistsJoin);
        queryObjectMainAccount.joinClause(SysDaJoinKind::ExistsJoin, queryObject);
        queryObjectMainAccount.joinClauseKind(SysDaJoinKind::ExistsJoin);
        return queryObjectMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimensionCache</Name>
				<Source><![CDATA[
    private void updateLedgerDimensionCache()
    {
        // To improve performance, the table BudgetProposalLedgerDimensionCache creates a LedgerDimension to LedgerDimensionBudget
        // mapping table to facilitate aggregation of actuals by LedgerDimensionBudget
        SysDaQueryObject sdqo = new SysDaQueryObject(glAccountEntry);
        sdqo.projection().add(fieldStr(GeneralJournalAccountEntry, LedgerDimension));

        // The group by insures we return each distinct LedgerDimension only once
        sdqo.groupByClause().add(fieldStr(GeneralJournalAccountEntry, LedgerDimension));

        // Set the date range to the configuration range to process all LedgerDimension
        this.firstDayInFiscalPeriod = proposalConfig.StartDate;
        this.lastDayInFiscalPeriod = proposalConfig.EndDate;
        SysDaQueryObject queryObject = this.buildGeneralJournalEntryObject();

        // Only create mappings that do not already exist in the table
        SysDaQueryObject qoDimensionMatch = new SysDaQueryObject(ledgerDimensionCache);
        qoDimensionMatch.projection().add(fieldStr(BudgetProposalLedgerDimensionCache, RecId));
        qoDimensionMatch.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(ledgerDimensionCache, fieldStr(BudgetProposalLedgerDimensionCache, LedgerDimension)),
            new SysDaFieldExpression(glAccountEntry, fieldStr(GeneralJournalAccountEntry, LedgerDimension))));
        qoDimensionMatch.joinClauseKind(SysDaJoinKind::NotExistsJoin);

        // Add the join definitions to the primary table in the query
        sdqo.joinClause(SysDaJoinKind::InnerJoin, queryObject)
            .joinClause(SysDaJoinKind::NotExistsJoin, qoDimensionMatch);

        SysDaSearchObject searchObj = new SysDaSearchObject(sdqo);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        RecordInsertList insertList = new RecordInsertList(tableNum(BudgetProposalLedgerDimensionCache));

        while (searchStatement.next(searchObj))
        {
            ledgerDimensionCache.LedgerDimension = glAccountEntry.LedgerDimension;
            ledgerDimensionCache.BudgetLedgerDimension = BudgetTransactionManager::saveBudgetLedgerDimension(glAccountEntry.LedgerDimension);
            
            if (ledgerDimensionCache.BudgetLedgerDimension)
            {
                insertList.add(ledgerDimensionCache);
            }
        }

        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTimeSeriesSourceInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildTimeSeriesSourceInsertObject()
    {
        BudgetTimeSeriesDetail tsDetail;
        tsDetail.skipDataMethods(true);

        SysDaInsertObject insertObject = new SysDaInsertObject(tsDetail);

        insertObject.fields()
            .add(fieldStr(BudgetTimeSeriesDetail, BudgetType))
            .add(fieldStr(BudgetTimeSeriesDetail, TimeSeriesValue))
            .add(fieldStr(BudgetTimeSeriesDetail, TimeSeriesDate))
            .add(fieldStr(BudgetTimeSeriesDetail, Ledger))
            .add(fieldStr(BudgetTimeSeriesDetail, TimeSeriesId))
            .add(fieldStr(BudgetTimeSeriesDetail, TimeSeriesDimension));
        return insertObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>