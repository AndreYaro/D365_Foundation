<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMSortedList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class implements local storage for the bom data as a sorted list.
/// </summary>
public class BOMSortedList
{
    Map             bomLineCountMap;
    Map             bomMap;
    MapEnumerator   me;
    BOM             bom;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds bom to the local storage.
    /// </summary>
    /// <param name="_bom">
    ///     The referred bom.
    /// </param>
    public void addBOM(BOM _bom)
    {
        int sameBOMLineCount = 0;

        if (bomLineCountMap.exists(_bom.RecId))
        {
            sameBOMLineCount = bomLineCountMap.lookup(_bom.RecId) + 1;
        }

        bomLineCountMap.insert(_bom.RecId, sameBOMLineCount);

        container bomCon;
        bomCon += [_bom.BOMId, _bom.LineNum, _bom.RecId, sameBOMLineCount];

        bomMap.insert(bomCon, _bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if current <c>BOMSortedList</c> stores data.
    /// </summary>
    /// <returns>
    ///     True if current instance has data, otherwise false.
    /// </returns>
    public boolean first()
    {
        me = bomMap.getEnumerator();

        if (me.moveNext())
        {
            bom = me.currentValue();
        }
        else
        {
            bom.clear();
        }

        if (bom)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if current <c>BOMSortedList</c> stores multiple data.
    /// </summary>
    /// <returns>
    ///     True if current instance stores multiple data, otherwise false.
    /// </returns>
    public boolean next()
    {
        if (me == null)
        {
            return false;
        }

        if (me.moveNext())
        {
            bom = me.currentValue();
        }
        else
        {
            bom.clear();
        }

        if (bom)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOM</Name>
				<Source><![CDATA[
    public BOM parmBOM(BOM _bom = bom)
    {
        bom = _bom;
        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct an instance of the <c>BOMSortedList</c> class.
    /// </summary>
    /// <returns>
    ///     The new instance of the <c>BOMSortedList</c> class.
    /// </returns>
    public static BOMSortedList construct()
    {
        return new BOMSortedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>BOMSortedList</c> class.
    /// </summary>
    public void new()
    {
        bomLineCountMap = new Map(Types::Int64, Types::Integer);
        bomMap = new Map(Types::Container, Types::Record);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>