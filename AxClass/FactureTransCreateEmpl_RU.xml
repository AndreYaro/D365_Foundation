<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateEmpl_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureTransCreateEmpl_RU extends FactureTransCreate_RU
{
    EmplAdvTable_RU     table;
    EmplAdvLine_RU      line;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _amount)
    {
        int sign =  line.TaxAmount        ?
                   (line.TaxAmount        >  0 ? 1 : -1) :
                   (line.AmountMstExclTax >= 0 ? 1 : -1);

        if (line.FacturedFully_RU)
            return false;

        factureTrans.LineAmount = abs(line.AmountMstExclTax)   * sign;
        factureTrans.TaxAmount  = abs(line.TaxAmountMST)       * sign;
        factureTrans.Qty        = abs(line.Qty)                * sign;

        factureTrans.vat        = (line.TaxAmountVAT_RU == line.TaxAmount) ?
                                  (abs(line.TaxAmountMST)      * sign) :
                                  (abs(CurrencyExchangeHelper::amountCur2MST(line.TaxAmountVAT_RU, line.CurrencyCode, line.ExchRate, table.TransDate)) * sign);

        factureTrans.Excise     = abs(CurrencyExchangeHelper::amountCur2MST(line.TaxAmountExcise_RU, line.CurrencyCode, line.ExchRate, table.TransDate)) * sign;

        factureTrans.LineAmountMST   = factureTrans.LineAmount;
        factureTrans.TaxAmountMST    = factureTrans.TaxAmount;
        factureTrans.VATAmountMST    = factureTrans.VAT;
        factureTrans.ExciseAmountMST = factureTrans.Excise;

        factureTrans.TaxGroup        = line.TaxGroup;
        factureTrans.TaxItemGroup    = line.TaxItemGroup;
        factureTrans.TaxCode         = facture.VATCode(line.TaxGroup, line.TaxItemGroup);

        factureTrans.VATType         = line.TaxVATType_RU;
        factureTrans.VATValue        = line.TaxValueVAT_RU;
        factureTrans.ExciseValue     = 0;

        if (! factureTrans.isTmp())
        {
            line.FacturedFully_RU = NoYes::Yes;
            line.doUpdate();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans()
    {
        boolean ret;

        ret = super();
        if (table.TransDate > factureJour.FactureDate)
        {
            ret = checkFailed("@GLS104978");
        }

        if (CustParameters::taxation_RU(table.TransDate) == CustTaxation_RU::OnPayment &&
            CustParameters::taxation_RU(factureJour.FactureDate) == CustTaxation_RU::OnDelivery)
        {
            ret = checkFailed(strfmt("@GLS110905",
                                     CustTaxation_RU::OnPayment));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        super();

        factureTrans.initFromAdvanceLine(line);

        factureTrans.ExchRate = ExchangeRateHelper::getExchangeRate1_Static(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                        CompanyInfoHelper::standardCurrency(),
                        line.DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    RecId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        line  = EmplAdvLine_RU::findRecId(_recId, ! _facture.getFactureJour().isTmp());
        table = EmplAdvTable_RU::find(line.AdvanceId, ! _facture.getFactureJour().isTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);

        line  = EmplAdvLine_RU::findRecId(_recId, ! facture.getFactureJour().isTmp());
        table = EmplAdvTable_RU::find(line.AdvanceId, ! facture.getFactureJour().isTmp());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
