<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmTransLogManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class smmTransLogManager
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateTransLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a record in <c>smmTransLog</c> table recording the action taken on the specified record.
    /// </summary>
    /// <param name = "_common">The record the action was taken on.</param>
    /// <param name = "_action">The action taken.</param>
    /// <param name = "_employee">Employee who completed the action.</param>
    /// <param name = "_salesUnitId">Optional sales unit Id</param>
    public static void createOrUpdateTransLog(Common          _common,
                                              smmLogAction    _action,
                                              CrmWorkerRecId  _employee = 0,
                                              smmSalesUnitId  _salesUnitId = '')
    {
        const str seperator = ', ';
        const int maxTryCount = 5;

        smmTransLog         smmTransLog = null;
        smmActivities       smmActivities;
        CustTable           custTable;
        CustTrans           custTrans;
        VendTable           vendTable;
        VendTrans           vendTrans;
        smmBusRelTable      smmBusRelTable;
        ContactPerson       contactPerson;
        DocuRef             docuRef;
        SalesTable          salesTable;
        SalesQuotationTable salesQuotationTable;
        smmMailings         smmMailings;
        smmCampaignTable    smmCampaignTable;
        smmTMCallListTable  smmTMCallListTable;
        smmOpportunityTable smmOpportunityTable;
        smmLeadTable        smmLeadTable;
        CaseDetail          caseDetail;
        DirPartyTable       partyTable;
        smmActivityParentLinkTable activityParentLink;
        int tryCount = 0;
        boolean updateLastLogEvent = smmParameters::logUpdate() == smmTransLogUpdateAction::Last;

        if (smmTransLog.isTmp())
        {
            return;
        }

        // Check whether this table is going to be logged or not.
        if (!smmParameters::logAction(_action) || !smmParameters::logTable(_common.TableId))
        {
            return;
        }

        // Validate if party exist for activity
        if (_common.TableId == tableNum(smmActivities) && !smmActivities::validatePartyExist(_common))
        {
            return;
        }

        // Validate if Organization or Person
        if (_common.TableId == tableNum(smmActivityParentLinkTable))
        {
            activityParentLink = _common;

            if (activityParentLink.ParentType != smmActivityParentType::Organization &&
                activityParentLink.ParentType != smmActivityParentType::Person)
            {
                return;
            }
        }

        try
        {
            tryCount ++;
            if (tryCount < maxTryCount)
            {
                ttsbegin;

                // If only last update is to be logged, find the record and update
                if (updateLastLogEvent)
                {
                    smmTransLog = smmTransLog.findRecord(smmLogAction::update, _common.TableId, _common.RecId, true);
                }

                if (!smmTransLog)
                {
                    // These fields are the clustered index, only set if needed.
                    smmTransLog.RefTableId = _common.TableId;
                    smmTransLog.RefRecId   = _common.RecId;
                    smmTransLog.LogAction = _action;
                }

                switch (_common.TableId)
                {
                    case tableNum(smmBusRelTable) :
                        smmBusRelTable                      = _common;
                        smmTransLog.ContactPersonId         = '';
                        smmTransLog.Party                   = smmBusRelTable.Party;
                        partyTable                          = DirPartyTable::findRec(smmBusRelTable.Party);
                        smmTransLog.LogType                 = smmLogType::smmBusRelTable;
                        smmTransLog.RefNum                  = partyTable.PartyNumber;
                        smmTransLog.PrimaryDescription      = partyTable.Name;
                        smmTransLog.SecondaryDescription    = smmBusRelTable.BusRelTypeId;
                        break;

                    case tableNum(smmActivities):
                        smmActivities                       = _common;
                        // Link to Organization party
                        smmTransLog.Party                   =  smmActivityParentLinkTable::findParentLink(smmActivities.ActivityNumber, smmActivityParentType::Organization).RefRecId;
                        // Try person
                        if (!smmTransLog.Party)
                        {
                            smmTransLog.Party               =  smmActivityParentLinkTable::findParentLink(smmActivities.ActivityNumber, smmActivityParentType::Person).RefRecId;
                        }
                        activityParentLink                  = smmActivityParentLinkTable::findPrimaryLink(smmActivities.ActivityNumber);
                        smmTransLog.RefTableId              = activityParentLink.RefTableId;
                        smmTransLog.RefRecId                = activityParentLink.RefRecId;
                        smmTransLog.ContactPersonId         = smmActivities.contactPersonId();
                        smmTransLog.LogType                 = smmLogType::smmActivities;
                        smmTransLog.RefNum                  = smmActivities.ActivityNumber;
                        smmTransLog.PrimaryDescription      = smmActivities.Purpose;
                        smmTransLog.SecondaryDescription    = smmActivities.TypeId;
                        smmTransLog.RefDate                 = smmActivities.startDate();
                        break;

                    case tableNum(smmActivityParentLinkTable):
                        activityParentLink                  = _common;
                        smmTransLog.Party                   =  activityParentLink.RefRecId; // Only called when inserting Org or Person link
                        smmActivities                       = smmActivities::find(activityParentLink.ActivityNumber);
                        activityParentLink                  = smmActivityParentLinkTable::findPrimaryLink(smmActivities.ActivityNumber);
                        smmTransLog.RefTableId              = activityParentLink.RefTableId;
                        smmTransLog.RefRecId                = activityParentLink.RefRecId;
                        smmTransLog.ContactPersonId         = smmActivities.contactPersonId();
                        smmTransLog.LogType                 = smmLogType::smmActivities;
                        smmTransLog.RefNum                  = smmActivities.ActivityNumber;
                        smmTransLog.PrimaryDescription      = smmActivities.Purpose;
                        smmTransLog.SecondaryDescription    = smmActivities.TypeId;
                        smmTransLog.RefDate                 = smmActivities.startDate();
                        break;

                    case tableNum(ContactPerson):
                        contactPerson                       = _common;
                        smmTransLog.ContactPersonId         = contactPerson.ContactPersonId;
                        smmTransLog.Party                   = contactPerson.Party;
                        smmTransLog.LogType                 = smmLogType::ContactPerson;
                        smmTransLog.PrimaryDescription      = contactPerson.personName();
                        smmTransLog.RefNum                  = contactPerson.ContactPersonId;
                        smmTransLog.SecondaryDescription    = contactPerson.Title;
                        break;

                    case tableNum(CustTable):
                        custTable                           = _common;
                        smmTransLog.ContactPersonId         = custTable.ContactPersonId;
                        smmTransLog.Party                   = custTable.Party;
                        smmTransLog.LogType                 = smmLogType::CustTable;
                        smmTransLog.RefNum                  = custTable.AccountNum;
                        smmTransLog.PrimaryDescription      = DirPartyTable::findRec(custTable.Party).Name;
                        break;

                    case tableNum(CustTrans):
                        custTrans                           = _common;
                        smmTransLog.Party                   = CustTable::find(custTrans.AccountNum).Party;
                        smmTransLog.LogType                 = smmLogType::CustTrans;
                        smmTransLog.RefNum                  = custTrans.Voucher;
                        smmTransLog.PrimaryDescription      = custTrans.Txt;
                        break;

                    case tableNum(VendTable) :
                        vendTable                           = _common;
                        smmTransLog.ContactPersonId         = vendTable.ContactPersonId;
                        smmTransLog.Party                   = vendTable.Party;
                        smmTransLog.LogType                 = smmLogType::VendTable;
                        smmTransLog.RefNum                  = vendTable.AccountNum;
                        smmTransLog.PrimaryDescription      = DirPartyTable::findRec(vendTable.Party).Name;
                        break;

                    case tableNum(VendTrans):
                        vendTrans                           = _common;
                        smmTransLog.Party                   = VendTable::find(vendTrans.AccountNum).Party;
                        smmTransLog.LogType                 = smmLogType::VendTrans;
                        smmTransLog.RefNum                  = vendTrans.Voucher;
                        smmTransLog.PrimaryDescription      = vendTrans.Txt;
                        break;

                    case tableNum(SalesTable):
                        salesTable                          = _common;
                        smmTransLog.ContactPersonId         = salesTable.ContactPersonId;
                        smmTransLog.Party                   = CustTable::find(salesTable.CustAccount).Party;
                        smmTransLog.LogType                 = smmLogType::SalesTable;
                        smmTransLog.RefNum                  = salesTable.SalesId;
                        smmTransLog.PrimaryDescription      = enum2str(salesTable.SalesType);
                        smmTransLog.SecondaryDescription    = enum2str(salesTable.SalesStatus);
                        smmTransLog.RefDate                 = salesTable.DeliveryDate;
                        break;

                    case tableNum(SalesQuotationTable):
                        salesQuotationTable                 = _common;
                        smmTransLog.ContactPersonId         = salesQuotationTable.ContactPersonId;
                        smmTransLog.Party                   = salesQuotationTable.party();
                        smmTransLog.LogType                 = smmLogType::SalesQuotationTable;
                        smmTransLog.RefNum                  = salesQuotationTable.QuotationId;
                        smmTransLog.PrimaryDescription      = enum2str(salesQuotationTable.QuotationType);
                        smmTransLog.SecondaryDescription    = enum2str(salesQuotationTable.QuotationStatus);
                        smmTransLog.RefDate                 = salesQuotationTable.ShippingDateRequested;
                        break;

                    case tableNum(DocuRef):
                        docuRef                             = _common;
                        smmTransLog.Party                   = docuRef.Party;
                        smmTransLog.ContactPersonId         = docuRef.ContactPersonId;
                        smmTransLog.RefNum                  = int642str(docuRef.RefRecId);
                        smmTransLog.LogType                 = smmLogType::smmDocuments;
                        smmTransLog.PrimaryDescription      = docuRef.Name;
                        smmTransLog.SecondaryDescription    = docuRef.TypeId;
                        break;

                    case tableNum(smmMailings):
                        smmMailings                         = _common;
                        smmTransLog.Party                   = smmMailings.Party;
                        smmTransLog.ContactPersonId         = smmMailings.ContactPersonId;
                        smmTransLog.LogType                 = smmLogType::smmMailings;
                        smmTransLog.RefNum                  = smmMailings.KeyId;
                        smmTransLog.PrimaryDescription      = smmMailings.CategoryId + seperator + smmMailings.CategoryItemId;
                        smmTransLog.SecondaryDescription    = enum2str(smmMailings.Status);
                        smmTransLog.RefDate                 = smmMailings.MailingDate;
                        break;

                    case tableNum(smmCampaignTable):
                        smmCampaignTable                    = _common;
                        smmTransLog.LogType                 = smmLogType::smmCampaignTable;
                        smmTransLog.RefNum                  = smmCampaignTable.CampaignId;
                        smmTransLog.PrimaryDescription      = enum2str(smmCampaignTable.CampaignStatus);
                        smmTransLog.SecondaryDescription    = smmCampaignTable.CampaignTypeId;
                        smmTransLog.RefDate                 = smmCampaignTable.CampaignDate;
                        smmTransLog.Worker                  = smmCampaignTable.Worker;
                        break;

                    case tableNum(smmTMCallListTable):
                        smmTMCallListTable                  = _common;
                        smmTransLog.Party                   = smmTMCallListTable.Party;
                        smmTransLog.ContactPersonId         = smmTMCallListTable.ContactPersonId;
                        smmTransLog.LogType                 = smmLogType::smmTMCallListTable;
                        smmTransLog.PrimaryDescription      = smmTMCallListTable.CallListId;
                        smmTransLog.SecondaryDescription    = enum2str(smmTMCallListTable.CallStatus);
                        smmTransLog.RefDate                 = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                smmTMCallListTable.CallActualDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                        smmTransLog.Worker                  = smmTMCallListTable.CallActualWorker;
                        break;

                    case tableNum(smmOpportunityTable):
                        smmOpportunityTable                 = _common;
                        smmTransLog.LogType                 = smmLogType::smmOpportunityTable;
                        smmTransLog.RefNum                  = smmOpportunityTable.OpportunityId;
                        smmTransLog.PrimaryDescription      = smmOpportunityTable.Subject;
                        smmTransLog.SecondaryDescription    = enum2str(smmOpportunityTable.Status);
                        smmTransLog.RefDate                 = smmOpportunityTable.OpenedDate;
                        smmTransLog.Party                   = smmOpportunityTable.Party;
                        break;

                    case tableNum(smmLeadTable):
                        smmLeadTable                        = _common;
                        smmTransLog.LogType                 = smmLogType::smmLeadTable;
                        smmTransLog.RefNum                  = smmLeadTable.LeadId;
                        smmTransLog.PrimaryDescription      = smmLeadTable.Subject;
                        smmTransLog.SecondaryDescription    = enum2str(smmLeadTable.Status);
                        smmTransLog.RefDate                 = smmLeadTable.DateOpen;
                        smmTransLog.Worker                  = smmLeadTable.OpenedByWorker;
                        smmTransLog.Party                   = smmLeadTable.Party;
                        break;
                    case tableNum(CaseDetail):
                    case tableNum(CaseDetailBase):
                        CaseDetail                          = _common;
                        smmTransLog.LogType                 = smmLogType::CaseDetail;
                        smmTransLog.RefNum                  = CaseDetail.CaseId;
                        smmTransLog.PrimaryDescription      = CaseDetail.Description;
                        smmTransLog.SecondaryDescription    = enum2str(CaseDetail.Status);
                        smmTransLog.RefDate                 = DateTimeUtil::date(CaseDetail.CreatedDateTime);
                        smmTransLog.Worker                  = DirPersonUserEx::worker(DirPersonUser::find(CaseDetail.CreatedBy));
                        smmTransLog.Party                   = CaseDetail.Party;
                        break;
                }

                smmTransLog.LogDateTime = DateTimeUtil::getSystemDateTime();
                smmTransLog.Worker      = (!_employee) ? smmUtility::getCurrentContactWorker() : _employee;
                smmTransLog.SalesUnitId = (!_salesUnitId) ? smmUtility::getCurrentSalesUnit() : _salesUnitId;

                if (smmTransLog && _action == smmLogAction::update && updateLastLogEvent)
                {
                    if (smmTransLog.validateWrite(true))
                    {
                        smmTransLog.update();
                    }
                }
                else
                {
                    if (smmTransLog.validateWrite(true))
                    {
                        smmTransLog.insert();
                    }
                }

                ttscommit;
            }
        }
        catch (Exception::UpdateConflict)
        {
            retry;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>