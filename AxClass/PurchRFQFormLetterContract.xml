<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQFormLetterContract</c> class will be used as the data contract class for the <c>FormletterService</c> service when posting request for quotes.
/// </summary>
[DataContractAttribute]
abstract class PurchRFQFormLetterContract
extends FormLetterContract
{
    ParmId              callerFormLetterParmId;
    PurchRFQParmTable   purchRFQParmTable;
    PurchRFQTable       purchRFQTable;
    PurchRFQReplyTable  purchRFQReplyTable;
    PurchRFQCaseTable   purchRFQCaseTable;
    boolean             printReplySheet;
    boolean             printPriceAmount;
    boolean             rejectExecuted;
    boolean             multiSelectRequired;

    #define.Version1(1)
    #LOCALMACRO.ParmListPurchRFQV1
        callerFormLetterParmId,
        purchRFQParmTable,
        purchRFQTable,
        purchRFQReplyTable,
        purchRFQCaseTable,
        printReplySheet,
        printPriceAmount,
        rejectExecuted
    #ENDMACRO

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentParmListPurchRFQ
        callerFormLetterParmId,
        purchRFQParmTable,
        purchRFQTable,
        purchRFQReplyTable,
        purchRFQCaseTable,
        printReplySheet,
        printPriceAmount,
        rejectExecuted,
        multiSelectRequired
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormLetterType</Name>
				<Source><![CDATA[
        public FormletterType getFormLetterType()
    {
        return FormletterType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
        public LateSelectionQuery getLateSelectionQuery()
    {
        PurchRFQParmUpdate purchRFQParmUpdateLocal = this.parmParmUpdate() as PurchRFQParmUpdate;

        return purchRFQParmUpdateLocal.LateSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #CurrentParmListPurchRFQ] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormLetterParmId</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public ParmId parmCallerFormLetterParmId(ParmId _callerFormLetterParmId = callerFormLetterParmId)
    {
        callerFormLetterParmId = _callerFormLetterParmId;
        return callerFormLetterParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPriceAmount</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    boolean parmPrintPriceAmount(boolean _printPriceAmount = printPriceAmount)
    {
        printPriceAmount = _printPriceAmount;
        return printPriceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReplySheet</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    boolean parmPrintReplySheet(boolean _printReplySheet = printReplySheet)
    {
        printReplySheet = _printReplySheet;
        return _printReplySheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQCaseTable</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public PurchRFQCaseTable  parmPurchRFQCaseTable(PurchRFQCaseTable  _purchRFQCaseTable = purchRFQCaseTable)
    {
        purchRFQCaseTable = _purchRFQCaseTable;
        return purchRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQReplyTable</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public PurchRFQReplyTable  parmPurchRFQReplyTable(PurchRFQReplyTable  _purchRFQReplyTable = purchRFQReplyTable)
    {
        purchRFQReplyTable = _purchRFQReplyTable;
        return purchRFQReplyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQTable</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public PurchRFQTable  parmPurchRFQTable(PurchRFQTable  _purchRFQTable = purchRFQTable)
    {
        purchRFQTable = _purchRFQTable;
        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRejectExecuted</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public boolean parmRejectExecuted(boolean _rejectExecuted = rejectExecuted)
    {
        rejectExecuted = _rejectExecuted;
        return rejectExecuted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTable2Update</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public Common parmTable2Update(Common _parmTable2Update = purchRFQParmTable)
    {
        purchRFQParmTable = _parmTable2Update as PurchRFQParmTable;
        return purchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiSelectRequired</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public boolean parmMultiSelectRequired(boolean _multiSelectRequired = multiSelectRequired)
    {
        multiSelectRequired = _multiSelectRequired;
        return multiSelectRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        Integer         version = RunBase::getVersion(_packedClass);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #CurrentParmListPurchRFQ, packedBase] = _packedClass;
                return super(packedBase);
            case #Version1:
                [version, #ParmListCommon, #ParmListPurchRFQV1, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchRFQFormLetterContract</c> object from the given container.
    /// </summary>
    /// <param name="_purchRFQFormLetterContractPacked">
    /// A container that contains a packed <c>PurchFormLetterContract</c> object.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchRFQFormLetterContract</c> class.
    /// </returns>
    public static PurchRFQFormLetterContract newFromPackedVersion(container _purchRFQFormLetterContractPacked)
    {
        PurchRFQFormLetterContract  purchRFQFormLetterContract;
        DocumentStatus              documentStatus = conPeek(_purchRFQFormLetterContractPacked, #DocumentStatusPosition);

        switch (documentStatus)
        {
            case  DocumentStatus::RFQ:
                purchRFQFormLetterContract = PurchRFQFormLetterSendContract::construct();
                break;

            case  DocumentStatus::RFQReSend:
                purchRFQFormLetterContract = PurchRFQFormLetterReSendContract::construct();
                break;

            case  DocumentStatus::RFQAccept:
                purchRFQFormLetterContract = PurchRFQFormLetterAcceptContract::construct();
                break;
            case  DocumentStatus::RFQReject:
                purchRFQFormLetterContract = PurchRFQFormLetterRejectContract::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        purchRFQFormLetterContract.unpack(_purchRFQFormLetterContractPacked);

        return purchRFQFormLetterContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>