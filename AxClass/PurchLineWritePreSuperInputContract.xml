<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineWritePreSuperInputContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>PurchLineWritePreSuperInputContract</c> class is used as data contract for the <c>PuchTableForm</c> class.
/// </summary>
class PurchLineWritePreSuperInputContract implements SysPackable
{
    PurchLine           purchLine;
    boolean             purchTableCheckUpdate;
    PurchTable          purchTable;
    container           purchTablePacked;
    container           purchLinePacked;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        purchTableCheckUpdate,
        purchTablePacked,
        purchLinePacked
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        purchTablePacked = buf2Con(purchTable,true);

        if (PurchLine::hasExensionTableEnabled())
        {
            purchLine.SysExtensionSerializerMap::packAll();
        }

        purchLinePacked  = buf2Con(purchLine,true);
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    public PurchLine parmPurchLine (PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public PurchTable parmPurchTable (PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableCheckUpdate</Name>
				<Source><![CDATA[
    public boolean parmPurchTableCheckUpdate (boolean _purchTableCheckUpdate = purchTableCheckUpdate)
    {
        purchTableCheckUpdate = _purchTableCheckUpdate;
        return purchTableCheckUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                con2Buf(purchTablePacked,purchTable);
                con2Buf(purchLinePacked,purchLine);
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchLineWritePreSuperInputContract construct()
    {
        return new PurchLineWritePreSuperInputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>PurchLineWritePreSuperInputContract</c> class based on a container from a prior call to <c>PurchLineWritePreSuperInputContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    ///     A <c>Container</c> holding the packed class.
    /// </param>
    /// <returns>
    ///     An instance of the <c>PurchLineWritePreSuperInputContract</c> class identical to the one that was packed into the <c>container</c>.
    /// </returns>
    static public PurchLineWritePreSuperInputContract create(container _packedClass)
    {
        PurchLineWritePreSuperInputContract purchLineWritePreSuperInputContract = PurchLineWritePreSuperInputContract::construct();
        purchLineWritePreSuperInputContract.unpack(_packedClass);
        return purchLineWritePreSuperInputContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>