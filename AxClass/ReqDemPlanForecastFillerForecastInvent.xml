<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanForecastFillerForecastInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanForecastFillerForecastInvent</c> class reads and filters the adjusted forecast.
/// </summary>
[ReqDemPlanForecastTableFillerAttribute]
public class ReqDemPlanForecastFillerForecastInvent extends ReqDemPlanForecastTableFiller
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public ReqDemPlanStagingTableProcessorDesc description()
    {
        return "@DMP1235";
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
        public int64 execute(
        ReqDemPlanForecast                      _forecastTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _version,
        ReqDemPlanDataSourceRecId               _dataSource,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilterTable)
    {
        ForecastInvent                          forecastInvent;
        InventDim                               inventDim;
        InventDim                               itemAllocationInventDim;
        ForecastItemAllocationLine              itemAllocationLine;
        ForecastSales                           forecastSales;
        int64                                   rowCount;
        boolean reqFillerForecastInventCopyStatusFlightEnabled = ReqFillerForecastInventCopyStatusFlight::instance().isEnabled();

        boolean reqDemFillerForecastNoInventStatusRangeFlightEnabled = ReqDemFillerForecastNoInventStatusRangeFlight::instance().isEnabled();
        
        //standard insert field list
        #localmacro.insertStatementDefaultFields
            Version, DataSource, ModelId, ItemId, ForecastDate, Qty,
            AllocationKey,
            Site, Warehouse, Configuration, Color, Size, Style, ProductVersion
        #endmacro

        #localmacro.insertStatementExtendedFields
            #insertStatementDefaultFields, StatusId
        #endmacro

        //extra insert field for forecast sales
        #localmacro.insertStatementSalesFields
            , CustAccount, CustGroupId
        #endmacro

        //standard section for forecast invent
        #localmacro.forecastInventSection
            select _version, _dataSource, ModelId, ItemId, DateBudget, QtyInvent from forecastInvent
                where forecastInvent.DateBudget >= _dataContract.parmHistoricalStart()
                   && forecastInvent.DateBudget <= _dataContract.parmHistoricalEnd()
            join AllocationId from itemAllocationLine
                where itemAllocationLine.ItemId == forecastInvent.ItemId
        #endmacro

        #localmacro.selectFromInventDimFields
            InventSiteId, InventLocationId, ConfigId, InventColorId, InventSizeId, InventStyleId, InventVersionId
        #endmacro

        #localmacro.selectFromInventDimExtendedFields
            #selectFromInventDimFields, InventStatusId
        #endmacro

        #localmacro.joinInventDimToForecastInvent
            join #selectFromInventDimFields from inventDim
                where inventDim.InventDimId == forecastInvent.InventDimId
        #endmacro

            #localmacro.joinInventDimExtendedToForecastInvent
            join #selectFromInventDimExtendedFields from inventDim
                where inventDim.InventDimId == forecastInvent.InventDimId
        #endmacro

        //join section for non-forecast sales
        #localmacro.nonForecastSalesJoinSection
            notexists join forecastSales
                where forecastInvent.TransRecId             == forecastSales.RecId
                   && forecastInvent.TransTableId           == forecastSales.TableId
        #endmacro

        //join section for forecast sales
        #localmacro.forecastSalesJoinSection
            join CustAccountId, CustGroupId from forecastSales
                where forecastInvent.TransRecId             == forecastSales.RecId
                   && forecastInvent.TransTableId           == forecastSales.TableId
        #endmacro

        //join section for allocation keys

        #localmacro.allocationKeyInventDimSection
            exists join itemAllocationInventDim
                where itemAllocationInventDim.InventDimId   == itemAllocationLine.InventDimId
                   && itemAllocationInventDim.ConfigId      == inventDim.ConfigId
                   && itemAllocationInventDim.InventSizeId  == inventDim.InventSizeId
                   && itemAllocationInventDim.InventColorId == inventDim.InventColorId
                   && itemAllocationInventDim.InventVersionId == inventDim.InventVersionId
                   && itemAllocationInventDim.InventStyleId == inventDim.InventStyleId
        #endmacro

        #localmacro.allocationKeyInventDimExtendedSection
            #allocationKeyInventDimSection
            && itemAllocationInventDim.InventStatusId == inventDim.InventStatusId
        #endmacro

        #localmacro.allocationKeyFilterSection
            exists join _allocationKeyFilterTable
                where _allocationKeyFilterTable.AllocateId  == itemAllocationLine.AllocationId
        #endmacro

        //insert all non-sales forecast invent references
        if (reqDemFillerForecastNoInventStatusRangeFlightEnabled)
        {
            insert_recordset _forecastTable
                (
                    #insertStatementExtendedFields
                )
            #forecastInventSection
            #joinInventDimExtendedToForecastInvent
            #allocationKeyInventDimSection
            #allocationKeyFilterSection
            #nonForecastSalesJoinSection;
        }
        else if (reqFillerForecastInventCopyStatusFlightEnabled)
        {
            insert_recordset _forecastTable
                (
                    #insertStatementExtendedFields
                )
            #forecastInventSection
            #joinInventDimExtendedToForecastInvent
            #allocationKeyInventDimExtendedSection
            #allocationKeyFilterSection
            #nonForecastSalesJoinSection;
        }
        else
        {
              insert_recordset _forecastTable
                (
                    #insertStatementDefaultFields
                )
            #forecastInventSection
            #joinInventDimToForecastInvent
            #allocationKeyInventDimSection
            #allocationKeyFilterSection
            #nonForecastSalesJoinSection;
        }

        rowCount += _forecastTable.RowCount();

        //insert all sales forecast invent references
        if (reqDemFillerForecastNoInventStatusRangeFlightEnabled)
        {
            insert_recordset _forecastTable
                (
                    #insertStatementExtendedFields
                    #insertStatementSalesFields
                )
            #forecastInventSection
            #joinInventDimExtendedToForecastInvent
            #forecastSalesJoinSection
            #allocationKeyInventDimSection
            #allocationKeyFilterSection;
        }
        else if (reqFillerForecastInventCopyStatusFlightEnabled)
        {
            insert_recordset _forecastTable
                (
                    #insertStatementExtendedFields
                    #insertStatementSalesFields
                )
            #forecastInventSection
            #joinInventDimExtendedToForecastInvent
            #forecastSalesJoinSection
            #allocationKeyInventDimExtendedSection
            #allocationKeyFilterSection;
        }
        else
        {
            insert_recordset _forecastTable
                (
                    #insertStatementDefaultFields
                    #insertStatementSalesFields
                )
            #forecastInventSection
            #joinInventDimToForecastInvent
            #forecastSalesJoinSection
            #allocationKeyInventDimSection
            #allocationKeyFilterSection;
        }
        rowCount += _forecastTable.RowCount();

        return rowCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>