<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightConfigurationKeyManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightConfigurationKeyManager</c> class exposes whether the Warehouse management catch weight configuration key is enabled.
/// </summary>
internal final class WHSCatchWeightConfigurationKeyManager
{
    static private WHSCatchWeightConfigurationKeyManager instance;
    private boolean isEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        isEnabled = this.isConfigurationKeyEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSCatchWeightConfigurationKeyManager instance()
    {
        if (!instance)
        {
            instance = new WHSCatchWeightConfigurationKeyManager();
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInstance</Name>
				<Source><![CDATA[
    internal static void clearInstance()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isEnabled()
    {
        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    private boolean isConfigurationKeyEnabled()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(WHSCatchWeight));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInvokeNonCatchWeightEnabledMethod</Name>
				<Source><![CDATA[
    private boolean mustInvokeNonCatchWeightEnabledMethod(str _methodName, boolean _isCWItem, ProductQuantity _qty)
    {
        if (!_isCWItem)
        {
            if (_qty)
            {
                throw error(Error::wrongUseOfFunction(_methodName));
            }
        }

        return !_isCWItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExecuteNonCatchWeightQuantityLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether non catch weight item logic must be executed, based on whether the caller is handling
    /// a non catch weight enabled item.
    /// </summary>
    /// <param name = "_methodName">
    /// Name of the method.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to investigate whether it is catch weight enabled.
    /// </param>
    /// <param name = "_cwQty">
    /// A catch weight quantity.
    /// </param>
    /// <returns>
    /// true if the non catch weight quantity logic must be executed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean mustExecuteNonCatchWeightQuantityLogic(str _methodName, ItemId _itemId, PdsCWQty _cwQty)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        this.logEmptyItemId(_itemId, _methodName);
        this.logCatchWeightItemConflict(_itemId, isCWItem, _methodName);

        return this.mustInvokeNonCatchWeightEnabledMethod(_methodName, isCWItem, _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExecuteNonCatchWeightHandlingWeightLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether non catch weight item enabled logic must be executed, based on whether the caller is handling
    /// a non catch weight enabled item.
    /// </summary>
    /// <param name = "_methodName">
    /// Name of the method.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to investigate whether it is catch weight enabled.
    /// </param>
    /// <param name = "_handlingWeight">
    /// A handling weight.
    /// </param>
    /// <returns>
    /// true if the non catch weight quantity logic must be executed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean mustExecuteNonCatchWeightHandlingWeightLogic(str _methodName, ItemId _itemId, WHSHandlingWeight _handlingWeight)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        this.logEmptyItemId(_itemId, _methodName);
        this.logCatchWeightItemConflict(_itemId, isCWItem, _methodName);

        return this.mustInvokeNonCatchWeightEnabledMethod(_methodName, isCWItem, _handlingWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExecuteNonCatchWeightItemLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether non catch weight item enabled logic must be executed, based on whether the caller is handling
    /// a non catch weight enabled item.
    /// </summary>
    /// <param name = "_methodName">
    /// Name of the method.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to investigate whether it is catch weight enabled.
    /// </param>
    /// <returns>
    /// true if the non catch weight quantity logic must be executed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean mustExecuteNonCatchWeightItemLogic(str _methodName, ItemId _itemId)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        this.logEmptyItemId(_itemId, _methodName);
        this.logCatchWeightItemConflict(_itemId, isCWItem, _methodName);
        
        return this.mustInvokeNonCatchWeightEnabledMethod(_methodName, isCWItem, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokingNonCatchWeightEnabledMethod</Name>
				<Source><![CDATA[
    private void invokingNonCatchWeightEnabledMethod(str _methodName, boolean _isCWItem)
    {
        if (_isCWItem)
        {
            throw error(Error::wrongUseOfFunction(_methodName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executingNonCatchWeightItemLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the start of the execution of non catch weight enabled logic.
    /// </summary>
    /// <param name = "_methodName">
    /// Name of the method.
    /// </param>
    /// <param name = "_itemId">
    /// An item ID to investigate whether it is catch weight enabled.
    /// </param>
    [Hookable(false)]
    internal void executingNonCatchWeightItemLogic(str _methodName, ItemId _itemId)
    {
        this.logEmptyItemId(_itemId, _methodName);
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);
        this.invokingNonCatchWeightEnabledMethod(_methodName, isCWItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executedNonCatchWeightQuantityLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the end of the execution of non catch weight enabled logic.
    /// </summary>
    /// <param name = "_methodName">
    /// Name of the method.
    /// </param>
    /// <param name = "_cwQty">
    /// A returned catch weight quantity.
    /// </param>
    [Hookable(false)]
    internal void executedNonCatchWeightQuantityLogic(str _methodName, PdsCWQty _cwQty)
    {
        if (_cwQty)
        {
            throw error(Error::wrongUseOfFunction(_methodName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEmptyItemId</Name>
				<Source><![CDATA[
    private void logEmptyItemId(ItemId _itemId, str _methodName)
    {
        WHSCatchWeightTelemetryLogger::logEmptyItemId(_methodName, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCatchWeightItemConflict</Name>
				<Source><![CDATA[
    private void logCatchWeightItemConflict(ItemId _itemId, boolean _isCWItem, str _methodName)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightItemConflict(_methodName, _itemId, _isCWItem, this.isEnabled());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>