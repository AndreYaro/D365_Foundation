<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalIntegrationConfigurationValidationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFiscalIntegrationConfigurationValidationHelper</c> class is the hepler class about validating fiscal integration configuration.
/// </summary>
public class RetailFiscalIntegrationConfigurationValidationHelper
{
    RetailFiscalIntegrationConfigurationHelper configurationHepler = new RetailFiscalIntegrationConfigurationHelper();
    str missingRequiredElementValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the configuration structure.
    /// </summary>
    /// <param name = "_fileXml">The xml configuration.</param>
    /// <param name = "_common">The common object.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateStructure(XML _fileXml, Common _common)
    {
        XmlDocument doc = new XmlDocument();

        if (_fileXml)
        {
            doc.loadXml(_filexml);

            // Validate root element.
            XmlElement rootElement = doc.documentElement();

            if (rootElement)
            {
                if (rootElement.name() == RetailFiscalIntegrationConnectorContants::ConfigurationProperties)
                {
                    switch (_common.TableId)
                    {
                        case tableNum(RetailFiscalIntegrationConnectorTable):
                            this.validateConnectorStructure(_fileXml);
                            break;

                        case tableNum(RetailFiscalIntegrationDocumentProviderTable):
                            this.validateDocumentProviderStructure(_fileXml);
                            break;

                        default:
                            throw error(Error::wrongUseOfFunction(funcName()));
                    }

                    if (missingRequiredElementValue)
                    {
                        throw error (strFmt("@RetailFiscalIntegration:MissingRequiredElementValue", missingRequiredElementValue));
                    }
                }
                else
                {
                    throw error ("@RetailFiscalIntegration:IncorrectXMLConfigurationFile");
                }
            }
            else
            {
                throw error ("@RetailFiscalIntegration:IncorrectXMLConfigurationFile");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConnectorStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the connector xml structure.
    /// </summary>
    /// <param name = "_fileXml">The connector xml docuemnt.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateConnectorStructure(Xml _fileXml)
    {
        XmlNodeList propertyNodeList;

        // Valdiate ConnectorGeneralInfo configuration property.
        propertyNodeList = configurationHepler.getFiscalIntegrationPropertyNodeListByNameSpace(_fileXml, RetailFiscalIntegrationConnectorContants::ConnectorGeneralInfo);

        if (propertyNodeList.length() > 0)
        {
            this.checkElementsOfEachProperty(propertyNodeList);
        }
        else
        {
            throw error (strFmt("@RetailFiscalIntegration:MissingRequiredElementValue", RetailFiscalIntegrationConnectorContants::ConnectorGeneralInfo));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentProviderStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the document provider xml structure.
    /// </summary>
    /// <param name = "_fileXml">The document provider xml docuemnt.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateDocumentProviderStructure(Xml _fileXml)
    {
        XmlNodeList propertyNodeList;

        // Valdiate DocumentProviderGeneralInfo configuration property.
        propertyNodeList = configurationHepler.getFiscalIntegrationPropertyNodeListByNameSpace(_fileXml, RetailFiscalIntegrationConnectorContants::DocumentProviderGeneralInfo);

        if (propertyNodeList.length() > 0)
        {
            this.checkElementsOfEachProperty(propertyNodeList);
        }
        else
        {
            throw error (strFmt("@RetailFiscalIntegration:MissingRequiredElementValue", RetailFiscalIntegrationConnectorContants::DocumentProviderGeneralInfo));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkElementsOfEachProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the existance of elements in each property, if miss one of the elements, throw error.
    /// </summary>
    /// <param name = "_propertyNodeList"> The property node list.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkElementsOfEachProperty(XmlNodeList _propertyNodeList)
    {
        if (_propertyNodeList.length() > 0)
        {
            XmlNode node = _propertyNodeList.nextNode();

            while (node)
            {
                XmlElement displayValue;
                XmlElement languageId;
                XmlElement displayName;
                XmlElement description;

                XmlElement namesspace= node.getNamedElement(RetailFiscalIntegrationConnectorContants::Namesspace);
                XmlElement name = node.getNamedElement(RetailFiscalIntegrationConnectorContants::Name);
                XmlElement valueType = node.getNamedElement(RetailFiscalIntegrationConnectorContants::ValueType);
                XmlElement stringValue = node.getNamedElement(RetailFiscalIntegrationConnectorContants::StringValue);
                XmlElement decimalValue = node.getNamedElement(RetailFiscalIntegrationConnectorContants::DecimalValue);
                XmlElement booleanValue = node.getNamedElement(RetailFiscalIntegrationConnectorContants::BooleanValue);
                XmlElement dateValue = node.getNamedElement(RetailFiscalIntegrationConnectorContants::DateValue);
                XmlElement integerValue = node.getNamedElement(RetailFiscalIntegrationConnectorContants::IntegerValue);
                XmlElement isEncrypted = node.getNamedElement(RetailFiscalIntegrationConnectorContants::IsEncrypted);
                XmlElement isPassword = node.getNamedElement(RetailFiscalIntegrationConnectorContants::IsPassword);
                XmlElement isReadOnly = node.getNamedElement(RetailFiscalIntegrationConnectorContants::IsReadOnly);
                XmlElement isHidden = node.getNamedElement(RetailFiscalIntegrationConnectorContants::IsHidden);
                XmlElement displayHeight = node.getNamedElement(RetailFiscalIntegrationConnectorContants::DisplayHeight);
                XmlElement sequenceNumber = node.getNamedElement(RetailFiscalIntegrationConnectorContants::SequenceNumber);
                XmlElement displayProperty = node.getNamedElement(RetailFiscalIntegrationConnectorContants::DisplayProperty);

                if (displayProperty)
                {
                    displayValue = displayProperty.getNamedElement(RetailFiscalIntegrationConnectorContants::DisplayValue);

                    if (displayValue)
                    {
                        languageId = displayValue.getNamedElement(RetailFiscalIntegrationConnectorContants::LanguageId);
                        displayName = displayValue.getNamedElement(RetailFiscalIntegrationConnectorContants::DisplayName);
                        description = displayValue.getNamedElement(RetailFiscalIntegrationConnectorContants::Description);
                    }
                }

                if (!namesspace || !name || !valueType || !stringValue || !decimalValue || !booleanValue || !dateValue || !integerValue
                    || !isEncrypted || !isPassword || !isReadOnly || !isHidden || !displayHeight || !sequenceNumber ||
                    (displayProperty && displayValue && (!languageId || !displayName || !description)))
                {
                    throw error("@RetailFiscalIntegration:IncorrectXMLConfigurationFile");
                }
                else
                {
                    // Check required elements value. Required elements are connector name, document provider name.
                    if (name)
                    {
                        if (name.name() == RetailFiscalIntegrationConnectorContants::Name && stringValue && !stringValue.innerXml())
                        {
                            if (name.innerXml() == RetailFiscalIntegrationConnectorContants::Name)
                            {
                                missingRequiredElementValue = name.innerXml();
                            }
                        }
                    }
                }

                node = _propertyNodeList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrivacyConsent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the privacy consent.
    /// </summary>
    /// <param name = "_fileXml">The xml configuration.</param>
    [Hookable(false)]
    internal void validatePrivacyConsent(XML _fileXml)
    {
        str consentText = RetailFiscalIntegrationPrivacyConsentTextCreator::createConnectorPrivacyConsent(_fileXml);

        if (consentText && !this.promptPrivacyConsentDialog(consentText))
        {
            throw error("@RetailFiscalIntegration:ConfigurationLoadError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptPrivacyConsentDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the privacy consent dialog.
    /// </summary>
    /// <param name = "_privacyConsentText">The privacy consent text.</param>
    /// <returns>True if consent is granted; otherwise, false.</returns>
    private boolean promptPrivacyConsentDialog(str _privacyConsentText)
    {
        Args args = new Args();
        args.name(formstr(SysBoxForm));

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        Object formRunObj = formRun;
        formRunObj.setText("@RetailFiscalIntegration:PrivacyStatementTitle");
        formRunObj.setType(DialogBoxType::InfoBoxOkCancelBox);
        formRunObj.parmDefaultButton(DialogButton::Cancel);

        FormGroupControl groupControl = formRunObj.getGroupControl();
        HtmlViewerControl htmlControl = groupControl.addControlEx(classStr(HtmlViewerControl), 'PrivacyConsentText');
        htmlControl.parmHtml(_privacyConsentText);

        formRunObj.run();
        formRunObj.wait();

        return formRun.closedOk();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>