<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAWorkflowParticipantProviderInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Customized implementation of the <c>WorkflowParticipantProvider</c> interface that resolves
/// user groups to users but it alse inserts new specific roles which can be selected for approval or task
/// </summary>
/// <remarks>
/// The psa specific roles are Department Manager = Employee Supervisor in employee table,
/// Arhitect = PSAArhitect, Sales Manager = Responsible Sales, Project Manager = Responsible,
/// Financial Manager = ResponsibleFinancial in ProjTable
/// This implementation of the <c>WorkflowParticipantProvider</c> interface can be registered
/// as the ParticipantProvider for any workflow task or approval that requires user group
/// resolution.
/// The "aa" prefix appears because the list is automaticaly ordered by id asc and we need those
/// five roles to be allways the in the top
/// </remarks>
/// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class psaWorkflowParticipantProviderInvoice implements WorkflowParticipantProvider
{
    #DEFINE.DepartManager('aaDepart Manager')
    #DEFINE.Arhitect('aaArhitect')
    #DEFINE.ProjectManager('aaProject Manager')
    #DEFINE.SalesManager('aaSales Manager')
    #DEFINE.FinancManager('aaFinancial Manager')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    // Description    : Returns a list of user groups to display in the workflow configuration UI
//                  It creates the PSA specific user roles
public WorkflowParticipantTokenList getParticipantTokens()
{
    UserGroupInfo userGroupInfo;
    WorkflowParticipantTokenList userGroups = WorkflowParticipantTokenList::construct();

    userGroups.add(#DepartManager, "@PSA209");
    userGroups.add(#Arhitect, "@PSA10264");
    userGroups.add(#SalesManager, "@SYS79867");
    userGroups.add(#ProjectManager, "@SYS70488");
    userGroups.add(#FinancManager, "@SYS92681");

    while select Id,Name from userGroupInfo
    {
        userGroups.add(userGroupInfo.Id, userGroupInfo.Name);
    }
    return userGroups;
}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
/// Resolves a user group Id to a list of users
/// </summary>
/// <param name="_context">
/// An instance of the <c>WorkflowContext</c> class
/// </param>
/// <param name="_participantTokenName">
/// User group Id
/// </param>
/// <returns>
/// An instance of a <c>WorkflowUserList</c> containing all enabled users from the user group
/// </returns>
/// <exception cref="Exception::Error">
/// Participant token must be set
/// </exception>
/// <exception cref="Exception::Error">
/// User group could not be found
/// </exception>
public WorkflowUserList resolve(WorkflowContext _context,
                                WorkflowParticipantToken _participantTokenName)
{
    WorkflowUserList    userList = WorkflowUserList::construct();
    UserGroupList       userGroupList;
    UserInfo            userInfo;
    ProjProposalJour    tpsaProjProposalJournal;
    PSAProjProposalProj tpsaProjProposalProj;
    ProjTable           projTable;
    HcmWorkerRecId      hcmWorkerRecId;
    PSAHcmWorkerExtension   tpsaHcmWorkerExtension;

    if (!_participantTokenName)
    {
        throw error("@SYS105453");
    }

    select firstonly ProposalId,RecId,PSAWorkerSubmittedBy from tpsaProjProposalJournal
        where tpsaProjProposalJournal.RecId == _context.parmRecId();

    // Description: obtain the record in order to find the coresponding project
    select firstonly ProjId from tpsaProjProposalProj
        where tpsaProjProposalJournal.ProposalId == tpsaProjProposalProj.ProjProposalId;

    if (tpsaProjProposalJournal.RecId)
    {
        // find the submitedby employee for the coresponding project
        projTable = ProjTable::find(tpsaProjProposalProj.ProjId);
        hcmWorkerRecId = HcmWorker::find(tpsaProjProposalJournal.PSAWorkerSubmittedBy).RecId;

        select firstonly SupervisorWorker from tpsaHcmWorkerExtension
            where tpsaHcmWorkerExtension.SupervisorWorker == hcmWorkerRecId;

        // get Project table information then get the Project Manager
        switch (_participantTokenName)
        {
            case #Arhitect:
                userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerPSAArchitect));
                break;

            case #DepartManager:
                userList.add(DirPersonUserEx::worker2UserId(tpsaHcmWorkerExtension.SupervisorWorker));
                break;

            case #SalesManager:
                userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleSales));
                break;

            case #ProjectManager:
                userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsible));
                break;

            case #FinancManager:
                userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleFinancial));
                break;
        }
    }

    while select UserId from userGroupList
        order by UserId asc
        where userGroupList.GroupId == _participantTokenName
        exists join userInfo
        where userInfo.Id == userGroupList.UserId && userInfo.Enable == true
    {
        userList.add(userGroupList.UserId);
    }

    return userList;
}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PSAWorkflowParticipantProviderInvoice construct()
{
    return new PSAWorkflowParticipantProviderInvoice();
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>