<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondTransList_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerBondTransList_RU
{
    LedgerBondTransObject_RU    bondTransObject;
    Map                         transMap;
    MapIterator                 transIterator;
    LedgerBondId_RU             lastVrefId;

    TransDate                   rangeTransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
        public boolean add(LedgerBondTransObject_RU _bondTransObject)
    {
        boolean ret = true;

        if (! _bondTransObject.vrefId())
        {
            error(error::wrongUseOfFunction(funcName()));
            return false;
        }
        ret = transMap.insert(_bondTransObject.vrefId(), _bondTransObject);
        lastVrefId = _bondTransObject.vrefId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public LedgerBondTransObject_RU find(LedgerBondId_RU _vRefId)
    {
        bondTransObject = _vRefId && transMap.exists(_vRefId) ?
                          transMap.lookup(_vRefId) :
                          nullValueBaseType(Types::Class);

            return bondTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
        public boolean first()
    {
        boolean veryFirst = true;

        transIterator = new MapIterator(transMap);
        do
        {
            if (veryFirst)
            {
                transIterator.begin();
                veryFirst = false;
            }
            else
            {
                transIterator.next();
            }

            bondTransObject = transIterator.more() ?
                transIterator.rangeValue() :
                nullValueBaseType(Types::Class);
        }
        while (rangeTransDate && bondTransObject &&
              bondTransObject.transDate() != rangeTransDate);

        return bondTransObject ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
        public LedgerBondTransObject_RU item()
    {
        return bondTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastVrefId</Name>
				<Source><![CDATA[
        public LedgerBondId_RU lastVrefId()
    {
        return lastVrefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        transMap = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next()
    {
        do
        {
            transIterator.next();

            bondTransObject = transIterator.more() ?
                transIterator.rangeValue() :
                nullValueBaseType(Types::Class);
        } while (rangeTransDate  &&
                bondTransObject &&
                bondTransObject.transDate() != rangeTransDate);

        return bondTransObject ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
        public TransDate parmTransDate(TransDate _rangeTransDate = rangeTransDate)
    {
        rangeTransDate = _rangeTransDate;

        return rangeTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
        public boolean remove(LedgerBondId_RU _vRefId)
    {
        boolean ret = false;

        if (_vRefId && transMap.exists(_vRefId))
        {
            ret = transMap.remove(_vRefId);
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>