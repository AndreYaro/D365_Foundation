<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderUpdatePricesAndTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesOrderUpdatePricesAndTotals</c> class provides calculation of prices and totals for sales orders and ability to push price data to CDS.
/// </summary>
internal final class SalesOrderUpdatePricesAndTotals extends SalesUpdatePricesAndTotalsBase
{
    #OCCRetryCount

    TradeCDSSalesOrderUpdatePricesAndTotalsDataContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    internal void calculate(TradeCDSSalesOrderUpdatePricesAndTotalsDataContract _contract)
    {
        contract = _contract;

        SalesTable salesTable = contract.getSalesTable();

        if (salesTable)
        {
            try
            {
                ttsbegin;
                this.doCalculate();
                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdatePrices</Name>
				<Source><![CDATA[
    protected boolean canUpdatePrices()
    {
        return contract.parmUpdatePrices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsToSync</Name>
				<Source><![CDATA[
    protected List recordsToSync()
    {
        return contract.parmRecordList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityRecord</Name>
				<Source><![CDATA[
    protected Common getEntityRecord()
    {
        SalesOrderHeaderD365SalesEntity salesOrderEntity;

        select firstonly * from salesOrderEntity
            where salesOrderEntity.SalesOrderNumber == contract.parmSalesId();

        return salesOrderEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBundleMessageToQueue</Name>
				<Source><![CDATA[
    protected void addBundleMessageToQueue(List _recordsToSync)
    {
        TradeCDSMessageQueue::calculatePricesAndTotalsForSalesOrder(contract.getSalesTable(), false, _recordsToSync);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SalesOrderUpdatePricesAndTotals construct()
    {
        SalesOrderUpdatePricesAndTotals instance = new SalesOrderUpdatePricesAndTotals();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>