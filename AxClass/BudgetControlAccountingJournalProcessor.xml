<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlAccountingJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlAccountingJournalProcessor</c> class supports the integration of accounting
///    journals with the budget control processor.
/// </summary>
/// <remarks>
///    This class manages interaction with the <c>BudgetControlProcessor</c> class to check budget
///    availability or remove references to accounting journals, vouchers, voucher lines and general
///    journal entry details from budget control.
/// </remarks>
public class BudgetControlAccountingJournalProcessor
{
    LedgerJournalType   ledgerJournalType;
    LedgerJournalId     journalNumber;
    dataAreaId          journalLegalEntityDataArea;
    Voucher             voucherNumber;
    userId              userId;
    boolean             ignoreCheckOnLineItemEntry;
    boolean             showResultMessages;
    recId               ledgerJournalTransRecIdToRemove;
    boolean             isConfirmationBudgetCheck;

    BudgetControlProcessor      processor;
    BudgetControlCheckRequest   budgetCheckRequest;
    BudgetSourceRecId           budgetSourceRecId;

    // Map used to cache whether budget check is required for ledger account legal entities
    // Key: legal entity data area Id (str)
    // Value: whether budget check is required (Integer)
    Map isBudgetCheckRequiredMap;

    // Map used to cache whether the journal is enabled by filtering for ledger account legal entities
    // Key: legal entity data area Id (str)
    // Value: whether the journal is enabled for budget control (boolean)
    private Map isJournalEnabledMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetSourceToRemove</Name>
				<Source><![CDATA[
    private void addBudgetSourceToRemove()
    {
        if (!processor)
        {
            processor = BudgetControlProcessor::Instance();

            // For request to remove, only need to specify whether to show result messages
            processor.parmDoDisplayMessagesFromBudgetCheck(showResultMessages);
        }

        processor.addBudgetSourceToRemoveAtCommit(budgetSourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCheckRequestToProcess</Name>
				<Source><![CDATA[
    private void addCheckRequestToProcess()
    {
        if (!processor)
        {
            processor = BudgetControlProcessor::Instance();

            // For budget check request, must specify whether budget check is for confirmation
            processor.parmDoBudgetCheckForConfirmation(isConfirmationBudgetCheck);
            processor.parmDoDisplayMessagesFromBudgetCheck(showResultMessages);
        }

        processor.addBudgetCheckRequestToProcessAtCommit(budgetCheckRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vouchers of the journal that are referenced by the current instance that must be processed.
    /// </summary>
    protected void addJournalToProcess()
    {
        if (this.isLedgerBudgetCheckRequiredForLedgerJournalTableInternal())
        {
            LedgerJournalTrans ledgerJournalTrans;

            while select JournalNum, Voucher from ledgerJournalTrans
                group by ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher
                where ledgerJournalTrans.JournalNum == journalNumber
            {
                voucherNumber = ledgerJournalTrans.Voucher;
                this.addVoucherToProcess();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the journal line ledger account and amount details to the instance of the
    ///    <c>BudgetControlCheckRequest</c> class for the check of budget funds available.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerDimensionLegalEntityId">
    ///    The ID of the legal entity that is associated with the ledger account.
    /// </param>
    protected void addLedgerDimensionDetail(LedgerJournalTrans _ledgerJournalTrans, RecId _ledgerDimensionLegalEntityId)
    {
        if (_ledgerJournalTrans.LedgerDimension &&
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
            this.isLedgerBudgetCheckRequired(_ledgerJournalTrans.Company))
        {
            TaxAmountCur taxAmountAddedBudgetCheckRequest = this.addLedgerDimensionDetailForIncludedTaxToSubtract(
                                                                _ledgerJournalTrans.RecId,
                                                                _ledgerJournalTrans.LedgerDimension,
                                                                _ledgerDimensionLegalEntityId);

            budgetCheckRequest.addLedgerDimensionDetail(
                BudgetCheckDetail::newBudgetCheckDetail(
                    _ledgerDimensionLegalEntityId,
                    _ledgerJournalTrans.LedgerDimension,
                    _ledgerJournalTrans.amount() - taxAmountAddedBudgetCheckRequest,
                    _ledgerJournalTrans.CurrencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerJournalTransToRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ledger journal transaction of the current instance to be removed and also processes the
    /// voucher if it is required.
    /// </summary>
    protected void addLedgerJournalTransToRemove()
    {
        LedgerJournalTable localLedgerJournalTable;
        boolean checkRemainingJournalLines = false;

        select firstonly Posted from localLedgerJournalTable
            where localLedgerJournalTable.JournalNum == journalNumber;

        if (!localLedgerJournalTable.Posted)
        {
            // The journal line has not been posted.
            budgetSourceRecId = BudgetSourceLedgerJournalTrans::findBudgetSourceByLedgerReference(
                                    curext(),
                                    journalNumber,
                                    voucherNumber).RecId;

            if (budgetSourceRecId != 0)
            {
                if (ledgerJournalTransRecIdToRemove != 0 &&
                    LedgerJournalTrans::existTransMinusThis(journalNumber, voucherNumber, ledgerJournalTransRecIdToRemove))
                {
                    // Recheck budget funds available without the amount for the specified journal line.
                    checkRemainingJournalLines = true;
                }
                else
                {
                    if (BudgetControlCheckRequest::isControlConfigured())
                    {
                        this.addBudgetSourceToRemove();
                    }
                }
            }
            else
            {
                if (LedgerJournalTrans::existTransMinusThis(journalNumber, voucherNumber, ledgerJournalTransRecIdToRemove))
                {
                    // The journal line has never been budget checked.  Check budget for the remaining journal lines sharing the same journal and reference numbers.
                    checkRemainingJournalLines = true;
                }
            }

            if (checkRemainingJournalLines)
            {
                this.addVoucherToProcess();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOffsetLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the journal line of the offset ledger account and amount details to the instance of the
    ///    <c>BudgetSourceManager</c> class for the check for budget funds available.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_offsetLedgerDimensionLegalEntityId">
    ///    The ID of the legal entity that is associated with the offset ledger account.
    /// </param>
    protected void addOffsetLedgerDimensionDetail(LedgerJournalTrans _ledgerJournalTrans, RecId _offsetLedgerDimensionLegalEntityId)
    {
        if (_ledgerJournalTrans.OffsetLedgerDimension &&
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
            this.isLedgerBudgetCheckRequired(_ledgerJournalTrans.getOffsetCompany()))
        {
            TaxAmountCur taxAmountAddedBudgetCheckRequest = this.addLedgerDimensionDetailForIncludedTaxToSubtract(
                                                                _ledgerJournalTrans.RecId,
                                                                _ledgerJournalTrans.OffsetLedgerDimension,
                                                                _offsetLedgerDimensionLegalEntityId);

            budgetCheckRequest.addLedgerDimensionDetail(
                BudgetCheckDetail::newBudgetCheckDetail(
                    _offsetLedgerDimensionLegalEntityId,
                    _ledgerJournalTrans.OffsetLedgerDimension,
                    -_ledgerJournalTrans.amount() - taxAmountAddedBudgetCheckRequest,
                    _ledgerJournalTrans.CurrencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerDimensionDetailForIncludedTaxToSubtract</Name>
				<Source><![CDATA[
    private TaxAmountCur addLedgerDimensionDetailForIncludedTaxToSubtract(RecId _ledgerJournalTransRecId, LedgerDimensionBase _journalLedgerDimension, RecId _ledgerDimensionLegalEntityId)
    {
        TaxAmountCur taxAmountForDifferentDimension;

        boolean isSalesTaxIncludedInAmount = LedgerJournalTable::find(journalNumber).LedgerJournalInclTax && !TaxParameters::find().PurchTaxOnOperations;

        if (isSalesTaxIncludedInAmount)
        {
            // Only when a sale tax amount is included and a value in apply sales tax taxation rules (purchase tax on operations) is false
            // a tax amount would be handled sepearately, if exists, from a net amount in budget check.

            TaxUncommitted taxUncommitted;

            select firstonly LedgerDimension, CurrencyCode from taxUncommitted
                        where taxUncommitted.SourceRecId == _ledgerJournalTransRecId
                            && taxUncommitted.SourceTableId == tableNum(LedgerJournalTrans);

            if (taxUncommitted.LedgerDimension && _journalLedgerDimension != taxUncommitted.LedgerDimension)
            {
                taxAmountForDifferentDimension = TaxUncommitted::getCalculatedTaxAmountForSourceLine(tableNum(LedgerJournalTrans), _ledgerJournalTransRecId, false);

                if (taxAmountForDifferentDimension != 0)
                {
                    // Request a tax amount which is included with a ledger dimension of tax
                    budgetCheckRequest.addLedgerDimensionDetail(
                            BudgetCheckDetail::newBudgetCheckDetail(
                                _ledgerDimensionLegalEntityId,
                                taxUncommitted.LedgerDimension,
                                taxAmountForDifferentDimension,
                                taxUncommitted.CurrencyCode));
                }
            }
        }

        return taxAmountForDifferentDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucherToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the voucher that is referenced by the current instance that must be processed.
    /// </summary>
    protected void addVoucherToProcess()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans firstLedgerJournalTrans;
        CompanyInfo ledgerDimensionLegalEntity;
        CompanyInfo offsetLedgerDimensionLegalEntity;
        CompanyInfo currentLegalEntity = CompanyInfo::findDataArea(curext());

        // Initialize BudgetControlCheckRequest
        budgetCheckRequest = BudgetControlCheckRequest::construct();

        if (BudgetControlCheckRequest::isControlConfigured())
        {
            // Budget control is configured
            boolean doProcessVoucher = ignoreCheckOnLineItemEntry;
            if (!doProcessVoucher)
            {
                // Voucher will be processed if:
                // 1) This is not a line item entry check
                // 2) Or this is a line item entry check, budget checking is required at line item entry, 
                //    and the journal is enabled for either the current or offset companies.
                doProcessVoucher = LedgerJournalTableType::isBudgetCheckRequiredAtLineItemEntry(ledgerJournalType, journalLegalEntityDataArea)
                    && this.isLedgerBudgetCheckRequiredForLedgerJournalTableInternal();
            }

            if (doProcessVoucher)
            {
                while select * from ledgerJournalTrans
                        where ledgerJournalTrans.RecId != ledgerJournalTransRecIdToRemove &&
                            ledgerJournalTrans.JournalNum == journalNumber &&
                            ledgerJournalTrans.Voucher == voucherNumber
                    outer join RecId from ledgerDimensionLegalEntity
                        where ledgerJournalTrans.Company == ledgerDimensionLegalEntity.DataArea
                    outer join RecId from offsetLedgerDimensionLegalEntity
                        where ledgerJournalTrans.OffsetCompany == offsetLedgerDimensionLegalEntity.DataArea
                {
                    // In order to save database round trip to retrieve ledgerJournalTrans's Company and OffsetCompany legal entity RecId
                    // for each loop, we do outer joins to the CompanyInfo table to retrieve them and pass to the addLedgerDimensionDetail and
                    // addOffsetLedgerDimensionDetail methods to add details for budget funds available check.

                    if (!firstLedgerJournalTrans)
                    {
                        firstLedgerJournalTrans.data(ledgerJournalTrans);
                        budgetCheckRequest.parmBudgetControlCategory(BudgetControlCategory::ActualExpenditure);
                        budgetCheckRequest.parmBudgetDate(ledgerJournalTrans.TransDate);
                        budgetCheckRequest.parmTransactionNumber(ledgerJournalTrans.Voucher);
                        budgetCheckRequest.parmUser(userId);
                    }

                    this.addLedgerDimensionDetail(ledgerJournalTrans, ledgerDimensionLegalEntity.RecId);

                    // LedgerJournalTrans.OffsetCompany is tied to LedgerAdvIntercompanyAccounting configuration key.
                    // When LedgerAdvIntercompanyAccounting configuration key is not enabled, the OffsetCompany field would be empty.
                    this.addOffsetLedgerDimensionDetail(ledgerJournalTrans, (ledgerJournalTrans.OffsetCompany == '' ? currentLegalEntity.RecId : offsetLedgerDimensionLegalEntity.RecId));
                }
            }

            if (firstLedgerJournalTrans)
            {
                budgetSourceRecId = BudgetSourceLedgerJournalTrans::findBudgetSourceId(
                                    firstLedgerJournalTrans.RecId,
                                    firstLedgerJournalTrans.company());
            }

            if (budgetSourceRecId || budgetCheckRequest.parmLedgerDimensionDetails().elements() > 0)
            {
                if (!budgetSourceRecId)
                {
                    // Saves budget source for the group of journal lines with the same legal entity, journal and voucher numbers.
                    budgetSourceRecId = BudgetSourceLedgerJournalTrans::saveBudgetSource(firstLedgerJournalTrans);

                    ledgerJournalTrans.skipDataMethods(true);

                    // Update journal lines with the budget source
                    update_recordset ledgerJournalTrans
                        setting BudgetSourceLedgerEntryUnposted = budgetSourceRecId
                        where ledgerJournalTrans.JournalNum == journalNumber &&
                            ledgerJournalTrans.Voucher == voucherNumber;
                }

                budgetCheckRequest.parmBudgetSourceId(budgetSourceRecId);

                if (budgetSourceRecId && budgetCheckRequest.parmLedgerDimensionDetails().elements() == 0)
                {
                    // Add journal line to remove at commit since it no longer has any ledger dimension details
                    this.addBudgetSourceToRemove();
                }
                else
                {
                    this.addCheckRequestToProcess();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucherToRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the voucher of the current instance that must be removed.
    /// </summary>
    protected void addVoucherToRemove()
    {
        LedgerJournalTable localLedgerJournalTable;

        select firstonly Posted from localLedgerJournalTable
            where localLedgerJournalTable.JournalNum == journalNumber;

        if (!localLedgerJournalTable.Posted)
        {
            // The journal line has not been posted.
            budgetSourceRecId = BudgetSourceLedgerJournalTrans::findBudgetSourceByLedgerReference(
                                    curext(),
                                    journalNumber,
                                    voucherNumber).RecId;

            if (budgetSourceRecId != 0)
            {
                if (BudgetControlCheckRequest::isControlConfigured())
                {
                    this.addBudgetSourceToRemove();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForGeneralJournalBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance for the general journal entry details.
    /// </summary>
    /// <param name="_budgetControlGeneralJournalEntry">
    /// The <c>BudgetControlGeneralJournalEntry</c> instance.
    /// </param>
    protected void initializeForGeneralJournalBudgetCheck(
        BudgetControlGeneralJournalEntry _budgetControlGeneralJournalEntry)
    {
        budgetCheckRequest = _budgetControlGeneralJournalEntry.parmBudgetControlCheckRequest();
        showResultMessages = _budgetControlGeneralJournalEntry.parmShowResultMessages();

        // For general journal entry budget check processing, check is always for confirmed
        isConfirmationBudgetCheck = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForJournalBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the journal details.
    /// </summary>
    /// <param name="_ledgerJournalTableRecId">
    /// The record ID of a <c>LedgerJournalTable</c> record.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    /// A Boolean value that indicates whether the budgetary control configuration for performing a budget
    /// check for the journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    protected void initializeForJournalBudgetCheck(
        recId _ledgerJournalTableRecId,
        boolean _ignoreCheckOnLineItemEntry,
        userid _userId,
        boolean _showResultMessages)
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable = LedgerJournalTable::findByRecId(_ledgerJournalTableRecId);

        if (!ledgerJournalTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else if (ledgerJournalTable.Posted)
        {
            throw error(strFmt("@Budget:BudgetControlAccountingJournalProcessor_JournalPosted", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
        }

        ledgerJournalType = ledgerJournalTable.JournalType;
        journalNumber = ledgerJournalTable.JournalNum;
        journalLegalEntityDataArea = ledgerJournalTable.dataAreaId;
        userId = _userId;
        ignoreCheckOnLineItemEntry = _ignoreCheckOnLineItemEntry;
        showResultMessages = _showResultMessages;

        // For journal budget check processing, check is always for draft
        isConfirmationBudgetCheck = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForTransRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the ledger journal transaction details.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    ///    The record ID of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalType">
    ///    The <c>LedgerJournalType</c> enumeration value for the journal to which the journal lines that are
    ///    to be removed from budget control belong.
    /// </param>
    /// <param name="_journalNumber">
    ///    The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    ///    The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    ///    A Boolean value that indicates whether the budgetary control configuration for performing the
    ///    budget check for a journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    protected void initializeForTransRemoveBudget(
        recId _ledgerJournalTransRecId,
        LedgerJournalType _ledgerJournalType,
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _ignoreCheckOnLineItemEntry = false,
        userId _userId = curUserId(),
        boolean _showResultMessages = true)
    {
        ledgerJournalTransRecIdToRemove = _ledgerJournalTransRecId;
        ledgerJournalType = _ledgerJournalType;
        journalNumber = _journalNumber;
        journalLegalEntityDataArea = _journalLegalEntityDataArea;
        voucherNumber = _voucherNumber;
        userId = _userId;
        ignoreCheckOnLineItemEntry = _ignoreCheckOnLineItemEntry;
        showResultMessages = _showResultMessages;

        // For voucher budget check processing, check is always for draft
        isConfirmationBudgetCheck = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForVoucherBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the voucher details.
    /// </summary>
    /// <param name="_ledgerJournalType">
    ///    The <c>LedgerJournalType</c> enumeration value for the journal to which the journal lines that are
    ///    to be checked for budget belong.
    /// </param>
    /// <param name="_journalNumber">
    ///    The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    ///    The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    ///    A Boolean value that indicates whether the budgetary control configuration for performing the
    ///    budget check for a journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    protected void initializeForVoucherBudgetCheck(
        LedgerJournalType _ledgerJournalType,
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _ignoreCheckOnLineItemEntry,
        userId _userId,
        boolean _showResultMessages)
    {
        ledgerJournalType = _ledgerJournalType;
        journalNumber = _journalNumber;
        journalLegalEntityDataArea = _journalLegalEntityDataArea;
        voucherNumber = _voucherNumber;
        userId = _userId;
        ignoreCheckOnLineItemEntry = _ignoreCheckOnLineItemEntry;
        showResultMessages = _showResultMessages;

        // For voucher budget check processing, check is always for draft
        isConfirmationBudgetCheck = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForVoucherRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with the voucher details.
    /// </summary>
    /// <param name="_journalNumber">
    ///    The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    ///    The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    protected void initializeForVoucherRemoveBudget(
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _showResultMessages = true)
    {
        journalNumber = _journalNumber;
        journalLegalEntityDataArea = _journalLegalEntityDataArea;
        voucherNumber = _voucherNumber;
        showResultMessages = _showResultMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerBudgetCheckRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the primary ledger for the ledger account posting requires budgetary control.
    /// </summary>
    /// <param name="_ledgerAccountLegalEntityDataArea">
    ///    The <c>DataAreaId</c> value of the legal entity of the primary ledger for the ledger account
    ///    posting.
    /// </param>
    /// <returns>
    ///    true if the primary ledger for the ledger account posting requires budgetary control; otherwise,
    ///    false.
    /// </returns>
    protected boolean isLedgerBudgetCheckRequired(dataAreaId _ledgerAccountLegalEntityDataArea)
    {
        boolean isBudgetCheckRequiredForLegalEntity;

        if (isBudgetCheckRequiredMap.exists(_ledgerAccountLegalEntityDataArea))
        {
            isBudgetCheckRequiredForLegalEntity = isBudgetCheckRequiredMap.lookup(_ledgerAccountLegalEntityDataArea);
        }
        else
        {
            isBudgetCheckRequiredForLegalEntity = LedgerJournalTableType::isBudgetCheckRequiredForJournalType(ledgerJournalType, _ledgerAccountLegalEntityDataArea);
            isBudgetCheckRequiredForLegalEntity = isBudgetCheckRequiredForLegalEntity && this.isJournalEnabled(_ledgerAccountLegalEntityDataArea);

            isBudgetCheckRequiredMap.insert(_ledgerAccountLegalEntityDataArea, isBudgetCheckRequiredForLegalEntity);
        }

        return isBudgetCheckRequiredForLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    private boolean isJournalEnabled(dataAreaId _ledgerAccountLegalEntityDataArea)
    {
        boolean isJournalEnabled;

        if (isJournalEnabledMap.exists(_ledgerAccountLegalEntityDataArea))
        {
            isJournalEnabled = isJournalEnabledMap.lookup(_ledgerAccountLegalEntityDataArea);
        }
        else
        {
            isJournalEnabled = BudgetSourceLedgerJournalTrans::isJournalEnabled(_ledgerAccountLegalEntityDataArea, journalLegalEntityDataArea, journalNumber, ledgerJournalType);
            isJournalEnabledMap.insert(_ledgerAccountLegalEntityDataArea, isJournalEnabled);
        }

        return isJournalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        isBudgetCheckRequiredMap = new Map(Types::String, Types::Integer);
        isJournalEnabledMap = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BudgetControlAccountingJournalProcessor construct()
    {
        return new BudgetControlAccountingJournalProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitGeneralJournalToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the details of the <c>BudgetControlGeneralJournalEntry</c> instance to be checked for
    /// budget.
    /// </summary>
    /// <param name="_budgetControlGeneralJournalEntry">
    /// The instance of the <c>BudgetControlGeneralJournalEntry</c> class to be checked for budget.
    /// </param>
    public static void submitGeneralJournalToCheckBudget(
        BudgetControlGeneralJournalEntry _budgetControlGeneralJournalEntry)
    {
        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry;

        if (_budgetControlGeneralJournalEntry)
        {
            budgetControlGeneralJournalEntry = BudgetControlGeneralJournalEntry::create(_budgetControlGeneralJournalEntry.pack());

            BudgetControlAccountingJournalProcessor::submitGeneralJournalToCheckBudgetServer(budgetControlGeneralJournalEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitGeneralJournalToCheckBudgetServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the details of the <c>BudgetControlGeneralJournalEntry</c> instance to be checked for
    /// budget.
    /// </summary>
    /// <param name="_budgetControlGeneralJournalEntry">
    /// The instance of the <c>BudgetControlGeneralJournalEntry</c> class to be checked for budget.
    /// </param>
    public static void submitGeneralJournalToCheckBudgetServer(
        BudgetControlGeneralJournalEntry _budgetControlGeneralJournalEntry)
    {
        BudgetControlAccountingJournalProcessor accountingJournalProcessor;

        if (_budgetControlGeneralJournalEntry &&
            _budgetControlGeneralJournalEntry.parmBudgetControlCheckRequest())
        {
            ttsBegin;

            accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();

            accountingJournalProcessor.initializeForGeneralJournalBudgetCheck(_budgetControlGeneralJournalEntry);

            accountingJournalProcessor.addCheckRequestToProcess();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitLedgerJournalTableToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits the ledger journal to be checked for budget.
    /// </summary>
    /// <param name="_ledgerJournalTableRecId">
    ///    The record ID of a <c>LedgerJournalTable</c> record.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    ///    A Boolean value that indicates whether the budgetary control configuration for performing a budget
    ///    check for the journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    public static void submitLedgerJournalTableToCheckBudget(
        recId _ledgerJournalTableRecId,
        boolean _ignoreCheckOnLineItemEntry = false,
        userid _userId = curUserId(),
        boolean _showResultMessages = true)
    {
        if (BudgetControlConfiguration::isControlConfigured())
        {
            BudgetControlAccountingJournalProcessor accountingJournalProcessor;

            ttsBegin;

            accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();

            accountingJournalProcessor.initializeForJournalBudgetCheck(
            _ledgerJournalTableRecId,
            _ignoreCheckOnLineItemEntry,
            _userId,
            _showResultMessages);

            accountingJournalProcessor.addJournalToProcess();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitLedgerJournalTransToRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the ledger journal transaction that must be removed from budget control.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// The record ID of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_ledgerJournalType">
    /// The <c>LedgerJournalType</c> enumeration value for the journal to which the journal lines that must
    /// be removed from budget control belong.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    /// The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    /// A Boolean value that indicates whether the budgetary control configuration for performing the
    /// budget check for a journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    public static void submitLedgerJournalTransToRemoveBudget(
        recId _ledgerJournalTransRecId,
        LedgerJournalType _ledgerJournalType,
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _ignoreCheckOnLineItemEntry = false,
        userId _userId = curUserId(),
        boolean _showResultMessages = true)
    {
        BudgetControlAccountingJournalProcessor accountingJournalProcessor;

        ttsBegin;

        accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();

        accountingJournalProcessor.initializeForTransRemoveBudget(
            _ledgerJournalTransRecId,
            _ledgerJournalType,
            _journalNumber,
            _journalLegalEntityDataArea,
            _voucherNumber,
            _ignoreCheckOnLineItemEntry,
            _userId,
            _showResultMessages);

        accountingJournalProcessor.addLedgerJournalTransToRemove();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitLedgerJournalVoucherToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the ledger journal voucher to be checked for budget.
    /// </summary>
    /// <param name="_ledgerJournalType">
    /// The <c>LedgerJournalType</c> enumeration value for the journal to which the journal lines that must
    /// be checked for budget belong.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    /// The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    /// The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    /// A Boolean value that indicates whether the budgetary control configuration for performing the
    /// budget check for a journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    /// A Boolean value that indicates whether any budget check result error or warning messages should be
    /// displayed in the Infolog; optional.
    /// </param>
    public static void submitLedgerJournalVoucherToCheckBudget(
        LedgerJournalType _ledgerJournalType,
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _ignoreCheckOnLineItemEntry = false,
        userId _userId = curUserId(),
        boolean _showResultMessages = true)
    {
        BudgetControlAccountingJournalProcessor accountingJournalProcessor;

        ttsBegin;

        accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();

        accountingJournalProcessor.initializeForVoucherBudgetCheck(
            _ledgerJournalType,
            _journalNumber,
            _journalLegalEntityDataArea,
            _voucherNumber,
            _ignoreCheckOnLineItemEntry,
            _userId, _showResultMessages);

        accountingJournalProcessor.addVoucherToProcess();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitLedgerJournalVoucherToRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the ledger journal voucher to be removed from budget control.
    /// </summary>
    /// <param name="_journalNumber">
    ///    The journal number that is shared by the journal lines.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The <c>DataAreaId</c> value of the legal entity where the journal is created.
    /// </param>
    /// <param name="_voucherNumber">
    ///    The voucher number that is shared by the journal lines.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    public static void submitLedgerJournalVoucherToRemoveBudget(
        LedgerJournalId _journalNumber,
        dataAreaId _journalLegalEntityDataArea,
        Voucher _voucherNumber,
        boolean _showResultMessages = true)
    {
        BudgetControlAccountingJournalProcessor accountingJournalProcessor;

        ttsBegin;

        accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();

        accountingJournalProcessor.initializeForVoucherRemoveBudget(
            _journalNumber,
            _journalLegalEntityDataArea,
            _voucherNumber,
            _showResultMessages);

        accountingJournalProcessor.addVoucherToRemove();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerBudgetCheckRequiredForLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the ledger journal requires budgetary control.
    /// </summary>
    /// <param name="_ledgerJournalTableRecId">
    ///    The record ID of a <c>LedgerJournalTable</c> record.
    /// </param>
    /// <returns>
    ///    true if the ledger journal requires budgetary control; otherwise, false.
    /// </returns>
    public static boolean isLedgerBudgetCheckRequiredForLedgerJournalTable(LedgerJournalTableRecId _ledgerJournalTableRecId)
    {
        boolean isBudgetCheckRequired;

        if (BudgetControlCheckRequest::isControlConfigured())
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_ledgerJournalTableRecId);
            BudgetControlAccountingJournalProcessor accountingJournalProcessor = BudgetControlAccountingJournalProcessor::construct();
            accountingJournalProcessor.initializeForJournalBudgetCheck(_ledgerJournalTableRecId, false, curUserId(), true);

            isBudgetCheckRequired = accountingJournalProcessor.isLedgerBudgetCheckRequiredForLedgerJournalTableInternal();
        }

        return isBudgetCheckRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerBudgetCheckRequiredForLedgerJournalTableInternal</Name>
				<Source><![CDATA[
    private boolean isLedgerBudgetCheckRequiredForLedgerJournalTableInternal()
    {
        boolean isBudgetCheckRequired = this.isLedgerBudgetCheckRequired(journalLegalEntityDataArea);

        if (!isBudgetCheckRequired)
        {
            LedgerJournalTrans ledgerJournalTrans;
            
            while select Company, OffsetCompany from ledgerJournalTrans
                    group by Company, OffsetCompany
                    where ledgerJournalTrans.JournalNum == journalNumber
            {
                isBudgetCheckRequired = this.isLedgerBudgetCheckRequired(ledgerJournalTrans.Company)
                        || this.isLedgerBudgetCheckRequired(ledgerJournalTrans.OffsetCompany);

                if (isBudgetCheckRequired)
                {
                    break;
                }
            }
        }

        return isBudgetCheckRequired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>