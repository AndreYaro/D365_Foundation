<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownInvoiceToPaymentRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CreditCardBreakDownInvoiceToPaymentRegister
{
    private SalesTable salesTable;
    private CustInvoiceJour custInvoiceJour;
    private MCRCustPaymTable mCRCustPaymTable;
    private CreditCardSalesOrderType creditCardSalesOrderType;
    private ICreditCardBreakDownProcessProvide creditCardBreakDownProcessProvider;
    private CreditCardPaymentInfoContainer salesTableContainer;
    private CreditCardPaymentInfoContainer custInvoiceJourContainer;
    private CreditCardPaymentInfoContainer mCRCustPaymTableContainer;
    private ICreditCardSalesOrderInvoiceToPaymentRecordAccess creditCardSalesOrderInvoiceToPaymentRecordAccessor;
    private CreditCardPaymentOperation creditCardPaymentOperation;

    private CreditCardPaymentBreakDownLogger creditCardPaymentBreakDownLogger;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        SalesTable _salesTable,
        CustInvoiceJour _custInvoiceJour, 
        MCRCustPaymTable _mCRCustPaymTable,
        CreditCardSalesOrderType _creditCardSalesOrderType,
        CreditCardPaymentOperation _creditCardPaymentOperation)
    {
        salesTable = _salesTable;
        custInvoiceJour = _custInvoiceJour;
        mCRCustPaymTable = _mCRCustPaymTable;
        creditCardSalesOrderType = _creditCardSalesOrderType;
        creditCardPaymentOperation = _creditCardPaymentOperation;

        creditCardPaymentBreakDownLogger = CreditCardPaymentBreakDownLogger::createLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardBreakDownInvoiceToPaymentRegister construct(
        SalesTable _salesTable, 
        CustInvoiceJour _custInvoiceJour, 
        MCRCustPaymTable _mCRCustPaymTable, 
        CreditCardSalesOrderType _creditCardSalesOrderType, 
        CreditCardPaymentOperation _creditCardPaymentOperation)
    {
        return new CreditCardBreakDownInvoiceToPaymentRegister(_salesTable, _custInvoiceJour, _mCRCustPaymTable, _creditCardSalesOrderType, _creditCardPaymentOperation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTask</Name>
				<Source><![CDATA[
    internal CreditCardPaymentBreakDownTable registerTask()
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRegisterProcess))
        {
            str isTTSLevelZero = appl.ttsLevel() == 0 ? 'true' : 'false';
            runActivityContext.addCustomProperty(
                CreditCardPaymentBreakDownInstrumentationConstants::IsTTSLevelZero,
                isTTSLevelZero);

            boolean res = this.runCalculation();
            if (res)
            {
                CreditCardPaymentBreakDownTable creditCardPaymentBreakDownTable = this.populateInitialInfo();
                res = this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().registerTask(creditCardPaymentBreakDownTable, CreditCardPaymentStatus::Calculated);
                if (res)
                {
                    creditCardPaymentBreakDownTable.reread();
                    return creditCardPaymentBreakDownTable;
                }
                else
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Fail to register task, RecId %1',
                        any2Str(creditCardPaymentBreakDownTable.RecId)));
                    throw error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", creditCardPaymentBreakDownTable.CreditCardPaymentStatus));
                }
            }
            else
            {
                creditCardPaymentBreakDownLogger.logError('Fail to calculate task');
                throw error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", CreditCardPaymentStatus::Calculated));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardSalesOrderInvoiceToPaymentRecordAccess</Name>
				<Source><![CDATA[
    private ICreditCardSalesOrderInvoiceToPaymentRecordAccess getCreditCardSalesOrderInvoiceToPaymentRecordAccess()
    {
        if (creditCardSalesOrderInvoiceToPaymentRecordAccessor)
        {
            return creditCardSalesOrderInvoiceToPaymentRecordAccessor;
        }
        creditCardSalesOrderInvoiceToPaymentRecordAccessor = CreditCardSalesOrderInvoiceToPaymentRecordAccessorFactory::getCreditCardSalesOrderInvoiceToPaymentRecordAccess();
        return creditCardSalesOrderInvoiceToPaymentRecordAccessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInitialInfo</Name>
				<Source><![CDATA[
    private CreditCardPaymentBreakDownTable populateInitialInfo()
    {
        CreditCardPaymentBreakDownTable creditCardPaymentBreakDownTable;

        creditCardPaymentBreakDownTable.CreditCardSalesOrderType = creditCardSalesOrderType;
        creditCardPaymentBreakDownTable.CreditCardPaymentOperation = creditCardPaymentOperation;
        creditCardPaymentBreakDownTable.SalesTableContainer = salesTableContainer;
        creditCardPaymentBreakDownTable.MCRCustPaymTableContainer = mCRCustPaymTableContainer;
        creditCardPaymentBreakDownTable.CustInvoiceJourContainer = custInvoiceJourContainer;
        creditCardPaymentBreakDownTable.SalesId = salesTable.SalesId;
        creditCardPaymentBreakDownTable.SalesInvoiceId = custInvoiceJour.InvoiceId;
        creditCardPaymentBreakDownTable.Amount = custInvoiceJour.remainAmountToBePaid();
        return creditCardPaymentBreakDownTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalculation</Name>
				<Source><![CDATA[
    private boolean runCalculation()
    {
        creditCardBreakDownProcessProvider = CreditCardBreakDownProcessProviderFactory::getBreakDownProcessProvider(creditCardSalesOrderType);
        ICreditCardBreakDownProcessCalculate creditCardBreakdownProcessCalculator = creditCardBreakDownProcessProvider.getBreakDownCalculateProcessor(salesTable, custInvoiceJour, mCRCustPaymTable);
        boolean res = creditCardBreakdownProcessCalculator.validateTask();
        if (res)
        {
            salesTableContainer = creditCardBreakdownProcessCalculator.getSalesTablePacked();
            custInvoiceJourContainer = creditCardBreakdownProcessCalculator.getInvoiceJournalPacked();
            mCRCustPaymTableContainer = creditCardBreakdownProcessCalculator.getMCRCustPaymTablePacked();
        }
        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>