<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLinePostTaxDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementLinePostTaxDocument</c> is tax document from bank statement line post table.
/// </summary>
internal class BankStatementLinePostTaxDocument extends BankStatementTaxDocument
{
    private BankStatementLinePostTable linePostTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amounts.
    /// </summary>
    /// <param name="_loadTaxUncommited">Indicates whether buffer <c>TaxUncommitted</c> is loaded.</param>
    /// <returns>Calculated amount.</returns>
    public amountCur calcTax(boolean _loadTaxUncommited = false)
    {
        TaxCalculation taxCalculation;
        TaxAmountCur amountCur;

        taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::BankAccountReconcile, this, _loadTaxUncommited, false);

        if (!_loadTaxUncommited)
        {
            amountCur = taxCalculation.calculateTax();
        }
        else
        {
            amountCur = taxCalculation.totalTaxAmount();
        }

        this.tax(taxCalculation);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the first transaction line.
    /// </summary>
    /// <returns>true if the first transaction line was found; otherwise false.</returns>
    public boolean getFirstLine()
    {
        boolean result;

        select * from statementLine
            where statementLine.BankStatementLinePostTable == linePostTable.RecId
                && statementLine.IsNewBankDocument == NoYes::Yes;

        if (statementLine.RecId)
        {
            result = true;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table buffer that represents the journalized document header for the transaction.
    /// </summary>
    /// <returns>The table buffer for the journalized document header.</returns>
    public Common getJournalizedDocument()
    {
        return linePostTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table buffer that represents the source document header for the transaction.
    /// </summary>
    /// <returns>The table buffer for the source document header.</returns>
    public Common getSourceHeader()
    {
        return linePostTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePostTable</Name>
				<Source><![CDATA[
    public BankStatementLinePostTable parmLinePostTable(BankStatementLinePostTable _linePostTable = linePostTable)
    {
        linePostTable = _linePostTable;
        return linePostTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankStatementLinePostTaxDocument</c>.
    /// </summary>
    /// <param name="_linePostTable">The bank statement line post table buffer.</param>
    /// <returns>An instance of <c>BankStatementLinePostTaxDocument</c>.</returns>
    public static BankStatementLinePostTaxDocument construct(BankStatementLinePostTable _linePostTable)
    {
        BankStatementLinePostTaxDocument bankStatementLinePostTaxDocument;

        bankStatementLinePostTaxDocument = new BankStatementLinePostTaxDocument();
        bankStatementLinePostTaxDocument.parmLinePostTable(_linePostTable);
        return bankStatementLinePostTaxDocument;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>