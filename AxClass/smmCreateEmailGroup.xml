<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmCreateEmailGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmCreateEmailGroup extends RunBaseBatch implements BatchRetryable
{
    QueryRun                    qRun;

    DialogField                 dialogEmailGroup;
    DialogField                 dialogEmailCategory;
    DialogField                 dialogEmailAddressee;

    smmEMailGroupId             emailGroup;
    smmEmailCategoryId          emailCategory;
    smmEMailToCopyOrBlindCopy   addressee;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        emailCategory,
        addressee,
        emailGroup
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        // Create email group
        DialogRunbase dialog = new DialogRunbase("@SYS80590", this);

        dialog = this.dialogInternal(dialog);

        // Enter email group Id
        dialog.addGroup("@SYS80591");
        var emailGroupIdDictType = new DictType(extendedTypeNum(smmEMailGroupId));
        dialogEmailGroup         = dialog.addField(emailGroupIdDictType.name(), emailGroupIdDictType.label(), emailGroupIdDictType.help(), true);

        dialogEmailCategory      = dialog.addField(extendedTypeStr(smmEmailCategoryId));

        dialogEmailAddressee     = dialog.addField(enumStr(smmEMailToCopyOrBlindCopy));
        dialogEmailAddressee.value(smmEMailToCopyOrBlindCopy::BCC);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS80590";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        emailGroup    = dialogEmailGroup.value();
        emailCategory = dialogEmailCategory.value();
        addressee     = dialogEmailAddressee.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, (qRun ? qRun.pack() : connull())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        // %1 members added to the email group %2
        info(strfmt("@SYS86736", smmCreateEmailGroup::processOnServer(emailGroup, emailCategory, addressee, qRun.pack()), emailGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRunFromCommon</Name>
				<Source><![CDATA[
    void setQueryRunFromCommon(Common common)
    {
        FormDataSource  dataSource;
        Query           query;
        dataSource = FormDataUtil::getFormDataSource(common);
        if (dataSource)
        {
            qRun = dataSource.queryRun();
            if (qRun)
            {
                query = qRun.query();
                SysQuery::queryAddDynaCursorAsRangeAndValue(query,qRun.query(),1);
                query.dataSourceNo(1).clearDynalinks();
                qRun = new QueryRun(query);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (!qRun && SysQuery::isPackedOk(packedQuery))
                {
                    qRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ok = true;
        int         total;

        if (qRun)
        {
            // Get total number of lines in query
            total = QueryRun::getQueryRowCount(qRun.query(), intMax());
        }
        if (total < 1)
        {
            // No email members
            error("@SYS80693");
            ok = false;
        }

        // Check for duplicate email groups
        if (smmEmailGroups::exist(emailGroup))
        {
            // Group already exists
            error("@SYS80694");
            ok = false;
        }

        // Check for missing email group
        if (!emailGroup)
        {
            // Email group is required
            error("@SYS80695");
            ok = false;
        }

        // Check for missing email category
        if (!emailCategory)
        {
            // Email category is required
            error("@SYS80696");
            ok = false;
        }
        else
        {
            if (!smmEmailCategoryGroup::find(emailCategory))
            {
                // Email category not found
                error("@SYS82018");
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmCreateEmailGroup createEmailGroup = new smmCreateEmailGroup();

        createEmailGroup.setQueryRunFromCommon(args.record());

        if (createEmailGroup.prompt())
        {
            createEmailGroup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    private static Counter processOnServer(smmEMailGroupId emailGroup, smmEmailCategoryId emailCategory, smmEMailToCopyOrBlindCopy   addressee, container packedQuery)
    {
        smmCampaignSelection    smmCampaignSelection;
        smmTMCallListTable      smmTMCallListTable;
        smmEmailGroups          smmEmailGroups;
        smmEmailMembers         smmEmailMembers = null;
        Counter                 numberOfMembersAdded;
        tableId                 tableId;
        QueryRun                qRun;

        ttsbegin;

        qRun = new QueryRun(packedQuery);

        if (qRun)
        {
            tableId = qRun.query().dataSourceNo(1).table();

            // Create new new email group
            smmEmailGroups.GroupId      = emailGroup;
            smmEmailGroups.CategoryId   = emailCategory;
            smmEmailGroups.insert();

            if (tableId == tablenum(smmCampaignSelection))
            {
                // Traverse all campaign targets from the campaign form. Only use targets defined by filter
                while (qRun.next())
                {
                    if (qRun.changed(tablenum(smmCampaignSelection)))
                    {
                        smmCampaignSelection = qRun.get(tablenum(smmCampaignSelection));
                        smmEmailMembers.clear();

                        smmEmailMembers.GroupId                 = smmEmailGroups.GroupId;
                        smmEmailMembers.eMailToCopyOrBlindCopy  = addressee;
                        smmEmailMembers.ContactPersonId         = smmCampaignSelection.ContactPersonId;
                        smmEmailMembers.Party                   = smmCampaignSelection.Party;
                        smmEmailMembers.KeyId                   = smmCampaignSelection.CampaignId;

                        // Check that contact isn't already in the group
                        if (!smmEmailMembers::findDirContact(smmEmailGroups.GroupId, smmEmailMembers.Party, smmEmailMembers.ContactPersonId))
                        {
                            numberOfMembersAdded++;
                            smmEmailMembers.insert();
                        }
                    }
                }
            }
            else
            if (tableId == tablenum(smmTMCallListTable))
            {
                // Traverse all call list targets from the call list form. Only use targets defined by filter
                while (qRun.next())
                {
                    if (qRun.changed(tablenum(smmTMCallListTable)))
                    {
                        smmTMCallListTable = qRun.get(tablenum(smmTMCallListTable));
                        smmEmailMembers.clear();

                        smmEmailMembers.GroupId                 = smmEmailGroups.GroupId;
                        smmEmailMembers.eMailToCopyOrBlindCopy  = addressee;
                        smmEmailMembers.ContactPersonId         = smmTMCallListTable.ContactPersonId;
                        smmEmailMembers.Party                   = smmTMCallListTable.Party;
                        smmEmailMembers.KeyId                   = smmTMCallListTable.CallListId;

                        // Check that contact isn't already in the group
                        if (!smmEmailMembers::findDirContact(smmEmailGroups.GroupId, smmEmailMembers.Party, smmEmailMembers.ContactPersonId))
                        {
                            numberOfMembersAdded++;
                            smmEmailMembers.insert();
                        }
                    }
                }
            }
        }

        ttscommit;

        return numberOfMembersAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>