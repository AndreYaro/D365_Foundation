<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymMoneyTransferSlip_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for BE giro reports.
/// </summary>
public class PaymMoneyTransferSlip_BE extends PaymMoneyTransferSlip
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decodePaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes payment id.
    /// </summary>
    /// <param name = "_messageType">Message type.</param>
    /// <param name = "_message">Message.</param>
    /// <returns>Decoded payment Id.</returns>
    public PaymId decodePaymId(PaymentStub   _messageType, Notes  _message)
    {
        PaymId       paymId;

        switch (_messageType)
        {
            case PaymentStub::BelSMS101:
                if (Bank_BE::checkPaymentId(_message))
                {
                   paymId = substr(strkeep(_message,'0123456789'),1,10);
                }
                break;

            case PaymentStub::BelSMS102:
                if (Bank_BE::checkPaymentId(_message))
                {
                    paymId = substr(strkeep(_message,'0123456789'),1,10);
                }
                break;

            default:
                paymId = _message;
        }

        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodePaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encodes payment id.
    /// </summary>
    /// <param name = "_invoiceId">InvoiceId to encode.</param>
    /// <param name = "_messageType">Message type.</param>
    /// <returns>Encoded payment id.</returns>
    public PaymId encodePaymId(InvoiceId     _invoiceId, PaymentStub   _messageType = paymentStubId)
    {
        PaymId          paymId;
        real            controldigits;

        if (_messageType == PaymentStub::BelSMS101 || _messageType == PaymentStub::BelSMS102)
        {
            paymId         = substr(strkeep(_invoiceId,'0123456789'),1,10);
            controldigits  = str2num(paymId) / 97;
            controldigits  = decround((controldigits - trunc(controldigits))*97,0);

            if (controldigits == 0)
            {
              paymId +='97';
            }
            else if (controldigits > 0 && controldigits < 10)
            {
                paymId += '0' + num2str(controldigits,1,0,1,1);
            }
            else if (controldigits > 9)
            {
                paymId += num2str(controldigits,2,0,1,1);
            }

            while (strlen(paymId) < 12)
            {
               paymId = '0' + paymId;
            }
        }
        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment id for customer invoice journal.
    /// </summary>
    /// <param name = "_custInvoiceJour"><c>CustInvoiceJour</c> record.</param>
    /// <returns>PaymentId.</returns>
    public PaymId initPaymId(CustInvoiceJour _custInvoiceJour)
    {
        paymentStubId =_custInvoiceJour.GiroType;

        return this.paymentIdReport(_custInvoiceJour.InvoiceId, paymentStubId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoicePaymId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the payment ID for a project invoice journal.
    /// </summary>
    /// <param name="_projInvoiceJour">
    ///    A project invoice journal that has an invoice ID to use to calculate the payment ID.
    /// </param>
    /// <returns>
    ///    The payment ID, for a project invoice journal of a corresponding giro.
    /// </returns>
    /// <remarks>
    ///    None.
    /// </remarks>
    public PaymId initProjInvoicePaymId(ProjInvoiceJour _projInvoiceJour)
    {
        paymentStubId = _projInvoiceJour.GiroType;
        return this.paymentIdReport(_projInvoiceJour.ProjInvoiceId, paymentStubId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment ID for given invoice ID.
    /// </summary>
    /// <param name = "_invoiceId">Invoice ID.</param>
    /// <param name = "_messageType">Message type.</param>
    /// <returns>The calculated payment ID.</returns>
    public PaymId paymentIdReport(InvoiceId     _invoiceId, PaymentStub   _messageType = paymentStubId)
    {
        PaymId     paymId;
        ;
        paymId = this.encodePaymId(_invoiceId,_messageType);

        return ('+++'                           +
                substr(paymId,1,3)+ '/'         +
                substr(paymId,4,4)+ '/'         +
                substr(paymId,8,strlen(paymId)) +
                '+++');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>