<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationAccountingDistributionViewExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationAccountingDistributionViewExtension_PSN</c> class handles the accounting distribution view events for budget reservations.
/// </summary>
[
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_ProductOrder), SourceDocumentLine_ProductOrder::PurchaseOrderLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductRequisition), SourceDocument_ProductRequisition::PurchaseRequisition, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceChargeLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceTaxLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsChargeLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_VendorInvoice), SourceDocumentLine_VendorInvoice::VendorInvoiceWithholdingTaxLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_ProductRequisition), SourceDocumentLine_ProductRequisition::PurchaseRequisitionLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_ProductRequisition), SourceDocumentLine_ProductRequisition::PurchaseRequisitionChargeLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_ProductRequisition), SourceDocumentLine_ProductRequisition::PurchaseRequisitionTaxLine, classStr(AccountingDistributionFormView)),
SourceDocumentEnumLiteralExtension(enumStr(BudgetReservation_SourceDocument_PSN), enumLiteralStr(BudgetReservation_SourceDocument_PSN, BudgetReservation))
]
public class BudgetReservationAccountingDistributionViewExtension_PSN extends AccDistViewExtension
{
    AccountingDistributionFormView  accountingDistributionFormView;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>disableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables all form controls on the distribution form.
    /// </summary>
    /// <remarks>
    /// This method is called when the source document is a purchase order, the purchase order line is referencing a budget reservation and
    /// the budget reservations feature is enabled.
    /// </remarks>
    private void disableFields()
    {
        accountingDistributionFormView.parmAllocationMethodControl().enabled(false);
        accountingDistributionFormView.parmAccountingEventTypeControl().enabled(false);
    
        accountingDistributionFormView.parmDistributionQuantityControl().enabled(false);
        accountingDistributionFormView.parmDistributionAmountControl().enabled(false);
        accountingDistributionFormView.parmDistributionPercentControl().enabled(false);
        accountingDistributionFormView.parmQuantityDistributedControl().enabled(false);
        accountingDistributionFormView.parmAmountDistributedControl().enabled(false);
        accountingDistributionFormView.parmPercentDistributedControl().enabled(false);
    
        accountingDistributionFormView.parmDistributionLegalEntityControl().enabled(false);
    
        accountingDistributionFormView.parmReferencedSourceDocumentControl().enabled(false);
        accountingDistributionFormView.parmReferencedSourceDocumentLineControl().enabled(false);
        accountingDistributionFormView.parmReferencedAccDistNumberControl().enabled(false);
        accountingDistributionFormView.parmParentAccountingDistributionControl().enabled(false);
        accountingDistributionFormView.parmParentSourceDocumentLineControl().enabled(false);
        accountingDistributionFormView.parmParentSourceDocLineAmountTypeControl().enabled(false);
    
        accountingDistributionFormView.parmSplitDistributionControl().enabled(false);
        accountingDistributionFormView.parmDeleteDistributionControl().enabled(false);
    
        accountingDistributionFormView.parmResetDistributionControl().enabled(true);
        accountingDistributionFormView.parmCorrectDistributionControl().enabled(false);
        accountingDistributionFormView.parmDistributeEquallyControl().enabled(false);
    
        accountingDistributionFormView.parmReferenceAccDistributionsControl().enabled(false);
        accountingDistributionFormView.parmSplitterXControl().enabled(false);
        accountingDistributionFormView.parmParentAccDistributionsGroupControl().enabled(false);
    
        accountingDistributionFormView.parmCorrectButtonGroupControl().enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if subscribing to the events of the accounting distribution is required.
    /// </summary>
    /// <returns>
    /// True if the budget reservation has been referenced on the source document; otherwise, false.
    /// </returns>    
    protected boolean doSubscribe()
    {
        boolean             doSubscribe;
        RecId               sourceDocumentLineRecId;
        RefTableId          sourceDocumentLineSourceRelationType;
        SourceDocumentLine  parentSourceDocumentLine;
        SourceDocumentLine  callerSourceDocumentLine   = accountingDistributionView.parmCallerSourceDocumentLine();
    
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            if (callerSourceDocumentLine.ParentSourceDocumentLine != 0)
            {
                parentSourceDocumentLine                = SourceDocumentLine::findTopParentSourceDocumentLine(callerSourceDocumentLine.RecId);
                sourceDocumentLineRecId                 = parentSourceDocumentLine.RecId;
                sourceDocumentLineSourceRelationType    = parentSourceDocumentLine.SourceRelationType;
            }
            else
            {
                sourceDocumentLineRecId                 = callerSourceDocumentLine.RecId;
                sourceDocumentLineSourceRelationType    = callerSourceDocumentLine.SourceRelationType;
            }
    
            switch (sourceDocumentLineSourceRelationType)
            {

                case tableNum(PurchLine):
                    doSubscribe = PurchLine::findBySourceDocumentLine(sourceDocumentLineRecId).BudgetReservationLine_PSN != 0;
                    break;

                case tableNum(VendInvoiceInfoLine):
                    VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(sourceDocumentLineRecId);
                    doSubscribe = vendInvoiceInfoLine.BudgetReservationLine_PSN != 0 && BudgetReservationAccountingDistributionViewExtension_PSN::isInvoiceRelievedByGBR(vendInvoiceInfoLine.BudgetReservationLine_PSN);
                    break;

                case tableNum(PurchReqLine):
                    doSubscribe = PurchReqLine::findBySourceDocumentLine(sourceDocumentLineRecId).BudgetReservationLine_PSN != 0;
                    break;

                default:
                    break;
            }
        }

        return doSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDataSourceEditEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallows creates and deletes of the <c>accountingDistributionDataSource</c> if the
    /// purchase order line is referencing a budget reservation line.
    /// </summary>    
    public void enableDataSourceEditEventHandler(boolean _enable = false)
    {
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowCreate(_enable);
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowDelete(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the extension of the accounting distribution view.
    /// </summary>    
    public void initialize()
    {
        accountingDistributionFormView = accountingDistributionView;
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeControlsEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form view controls.
    /// </summary>    
    public void initializeControlsEventHandler()
    {
        // Disable all of the controls.
        this.disableFields();
    
        // Disable adding and deleting of lines on the grid
        this.enableDataSourceEditEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeViewForDistContEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the form state when an accounting distribution is selected.
    /// </summary>    
    public void initializeViewForDistContEventHandler()
    {
        accountingDistributionFormView.parmCorrectDistributionControl().enabled(false);
    
        if (accountingDistributionFormView.parmAccountingDistributionViewModel().parmCanEditActiveAccDistribution())
        {
            accountingDistributionFormView.parmSplitDistributionControl().enabled(false);
            accountingDistributionFormView.parmDeleteDistributionControl().enabled(false);
            this.enableDataSourceEditEventHandler();
            accountingDistributionFormView.parmAccountingDistributionDatasource().insertAtEnd(false);
            this.disableFields();
            this.loadLedgerDimSegmentsEventHandler();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLedgerDimSegmentsEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the load ledger dimension segment event.
    /// </summary>    
    public void loadLedgerDimSegmentsEventHandler()
    {
        accountingDistributionFormView.parmLedgerDimensionControl().enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the events of the accounting distribution view extension.
    /// </summary>    
    protected void subscribe()
    {
        if (this.doSubscribe())
        {
            accountingDistributionView.initializedControls += eventhandler(this.initializeControlsEventHandler);
            accountingDistributionFormView.initializedViewForDistributionControls += eventhandler(this.initializeViewForDistContEventHandler);
            accountingDistributionFormView.loadedLedgerDimensionSegments += eventhandler(this.loadLedgerDimSegmentsEventHandler);
            accountingDistributionFormView.enabledDataSourceEdit += eventhandler(this.enableDataSourceEditEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetReservationAccountingDistributionViewExtension_PSN construct()
    {
        return new BudgetReservationAccountingDistributionViewExtension_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceRelievedByGBR</Name>
				<Source><![CDATA[
    private static boolean isInvoiceRelievedByGBR(BudgetReservationLineRecId_PSN _budgetReservationLine)
    {
        BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(_budgetReservationLine);
        BudgetReservationRelievingDocument_PSN budgetReservationRelievingType = BudgetReservationHeader_PSN::find(budgetReservationLine.BudgetReservationHeader_PSN).getBudgetReservationType_PSN().RelievingDocument;
        
        return (budgetReservationRelievingType == BudgetReservationRelievingDocument_PSN::VendorInvoice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>