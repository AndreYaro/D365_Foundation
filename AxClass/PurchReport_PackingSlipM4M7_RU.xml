<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReport_PackingSlipM4M7_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReport_PackingSlipM4M7_RU extends SalesPurchReport_Invent_RU implements BatchRetryable
{
    PrintoutTypeTable_RU journalPrintoutType;
    PrintoutTable_RU     printoutTableRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustDynamicData</Name>
				<Source><![CDATA[
    protected void adjustDynamicData()
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSubheaderDocumentId</Name>
				<Source><![CDATA[
    private void adjustSubheaderDocumentId()
    {
        PrintoutTable_RU          printoutTable;

        if (subHeader.PrintoutType == PrintoutTypeTable_RU::PurchReceiptTORG1 &&
           (journalPrintoutType    == PrintoutTypeTable_RU::PurchReceiptTORG2 ||
            journalPrintoutType    == PrintoutTypeTable_RU::PurchReceiptTORG3 ))
        {
            select firstonly printoutTable
                where printoutTable.SalesPurchId     == header.SalesPurchId        &&
                      printoutTable.DocumentId       == header.InvoiceId           &&
                      printoutTable.DocumentDate     == header.InvoiceDate         &&
                      printoutTable.JournalType      == subHeader.PrintoutType     &&
                      printoutTable.InventLocationId == subHeader.InventLocationId &&
                      printoutTable.VendPackingSlipVersion == VendPackingSlipVersion::findLatest(invoiceJour.RecId).RecId;

            if (printoutTable)
            {
                subHeader.DocumentId = printoutTable.JournalNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(CustVendInvoiceJour  _jour)
    {
        VendPackingSlipJour jour = _jour;
        RefRecId            vendPackingSlipVersion = VendPackingSlipVersion::findLatest(jour.RecId).RecId;

        switch (jour.ReceiptListDeviationType_RU)
        {
            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG1:
            return PrintoutTable_RU::existPackingSlipJour(
                PrintoutTypeTable_RU::PurchReceiptTORG1,
                jour.PackingSlipId,
                jour.DeliveryDate,
                jour.PurchId,
                vendPackingSlipVersion);

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG2:
                return PrintoutTable_RU::existPackingSlipJour(
                    PrintoutTypeTable_RU::PurchReceiptTORG2,
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    vendPackingSlipVersion);

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG3:
                return PrintoutTable_RU::existPackingSlipJour(
                    PrintoutTypeTable_RU::PurchReceiptTORG3,
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    vendPackingSlipVersion);

            default:
                return PrintoutTable_RU::existPackingSlipJour(
                    (VendPackingSlipTrans::findDeviationQty_RU(jour.RecId) ?
                        PrintoutTypeTable_RU::PurchReceiptM7             :
                        PrintoutTypeTable_RU::PurchReimbSlipM4),
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    vendPackingSlipVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrintoutType</Name>
				<Source><![CDATA[
    protected PrintoutTypeTable_RU defaultPrintoutType()
    {
        return PrintoutTypeTable_RU::PurchReimbSlipM4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    private void doPrint()
    {
        OXMLExcelReport_PackingSlip packingSlipReport;

        Args args = new Args();

        if ((journalPrintoutType == PrintoutTypeTable_RU::PurchReceiptTORG2  ||
             journalPrintoutType == PrintoutTypeTable_RU::PurchReceiptTORG3) &&
             this.isSubHeaderEmpty())
        {
            return ;
        }

        this.adjustSubheaderDocumentId();

        if (printoutTableRange &&
           (printoutTableRange.JournalType != subHeader.PrintoutType ||
            printoutTableRange.JournalNum  != subHeader.DocumentId))
        {
            return;
        }

        args.parmEnumType(enumNum(PrintoutTypeTable_RU));
        args.caller(this);

        args.parmEnum(subHeader.PrintoutType);

        packingSlipReport = OXMLExcelReport_PackingSlip::construct(subHeader.PrintoutType);

        packingSlipReport.parmArgs(args);
        packingSlipReport.parmData(dynamicData, subHeader, header);
        packingSlipReport.parmJournalPrintoutType(journalPrintoutType);

        SRSPrintDestinationSettings printSettings = this.parmPrintDestinationSettings();

        if (packingSlipReport.isPdfConversionEnabled(printSettings))
        {
            packingSlipReport.parmPrintDestinationSettings(printSettings);
        }

        packingSlipReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintTORG1</Name>
				<Source><![CDATA[
    protected void doPrintTORG1()
    {
        if (subHeader.PrintoutType == PrintoutTypeTable_RU::PurchReceiptTORG2 ||
            subHeader.PrintoutType == PrintoutTypeTable_RU::PurchReceiptTORG3)
        {
            subHeader.PrintoutType = PrintoutTypeTable_RU::PurchReceiptTORG1;
            this.doPrint();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintout</Name>
				<Source><![CDATA[
    protected PrintoutTable_RU findPrintout(Common              _invoiceJour,
                                            InventLocationId    _location)
    {
        VendPackingSlipJour     jour     = _invoiceJour;
        VendPackingSlipVersion  version  = VendPackingSlipVersion::findLatest(_invoiceJour.RecId);
        PrintoutTable_RU        tmpPrintout;

        switch (jour.ReceiptListDeviationType_RU)
        {
            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG1:
                tmpPrintout = PrintoutTable_RU::findPackingSlipJour(
                    PrintoutTypeTable_RU::PurchReceiptTORG1,
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    _location,
                    version.RecId);
                break;

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG2:
                tmpPrintout = PrintoutTable_RU::findPackingSlipJour(
                    PrintoutTypeTable_RU::PurchReceiptTORG2,
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    _location,
                    version.RecId);
                break;

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG3:
                tmpPrintout = PrintoutTable_RU::findPackingSlipJour(
                    PrintoutTypeTable_RU::PurchReceiptTORG3,
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    _location,
                    version.RecId);
                break;

            default:
                tmpPrintout = PrintoutTable_RU::findPackingSlipJour(
                    (VendPackingSlipTrans::findDeviationQty_RU(jour.RecId,_location) != 0 ? PrintoutTypeTable_RU::PurchReceiptM7 : PrintoutTypeTable_RU::PurchReimbSlipM4),
                    jour.PackingSlipId,
                    jour.DeliveryDate,
                    jour.PurchId,
                    _location,
                    version.RecId);
        }

        return tmpPrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    protected tableId getTableId()
    {
        return tableNum(VendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes ledger account and analysis code for report header.
    /// </summary>
    protected void initInventPosting()
    {
        VendPackingSlipTrans tmpTrans = invoiceTrans;

        AccDistLedgerDimAmount                  accListLedgerDimAmount;
        AccDistLedgerDimAmountList              accDistLedgerDimAmountList;
        AccDistLedgerDimAmountListEnumerator    accDistLedgerDimAmountListEnumerator;

        accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
        SourceDocumentLineProvider::getAccDistLedgerDimAmountList(tmpTrans.purchLine().SourceDocumentLine, accDistLedgerDimAmountList, false);
        accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();
        while (accDistLedgerDimAmountListEnumerator.moveNext())
        {
            if (dynamicData.InventPostingAccount)
            {
                dynamicData.InventPostingAccount = '';
                break;
            }

            accListLedgerDimAmount = accDistLedgerDimAmountListEnumerator.current();
            dynamicData.InventPostingAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(accListLedgerDimAmount.parmLedgerDimension());
            if (inventParameters.AnalysisDimensionAttribute_RU)
            {
                dynamicData.AnalysisCode = DimensionAttributeValueSetStorage::find(
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accListLedgerDimAmount.parmLedgerDimension())).getDisplayValueByDimensionAttribute(inventParameters.AnalysisDimensionAttribute_RU);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the weight of the category based item.
    /// </summary>
    /// <returns>
    ///     The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        ItemGrossWeight   ret;
        VendPackingSlipTrans  vendPackingSlipTransLocal = invoiceTrans;

        if (dynamicData.Category)
        {
            ret = vendPackingSlipTransLocal.Weight / (vendPackingSlipTransLocal.Qty ? vendPackingSlipTransLocal.Qty : 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinePrice</Name>
				<Source><![CDATA[
    protected Price initLinePrice(Qty                _qty,
                                  AmountCur          _markupItemPosted,
                                  TaxAmountExcise_RU _markupExcise)
    {
        Price     ret;
        PurchLine purchLine;

        if (_qty)
        {
            ret = super(_qty, _markupItemPosted, _markupExcise);
        }
        else
        {
            purchLine = PurchLine::findInventTransId(invoiceTrans.InventTransId);

            if (purchLine.PurchQty)
            {
                ret = purchLine.LineAmount / purchLine.PurchQty;
            }
            else
            {
                ret = purchLine.PurchPrice;
            }

            ret = CurrencyExchangeHelper::price(ret * exchRate / 100);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes weights.
    /// </summary>
    /// <param name="_inventQty">
    ///     A quantity of the item in inventory unit.
    /// </param>
    /// <param name="_inventTable">
    ///     The inventory item record from which to initialize.
    /// </param>
    protected void initLineWeight(InventQty _inventQty, InventTable _inventTable)
    {
        VendPackingSlipTrans  vendPackingSlipTransLocal = invoiceTrans;

        if (!_inventTable)
        {
            dynamicData.ItemGrossWeight = this.initLineCategoryWeight();
            dynamicData.ItemNetWeight   = dynamicData.ItemGrossWeight;
            dynamicData.GrossWeight     = vendPackingSlipTransLocal.Weight;
        }
        else
        {
            super(_inventQty, _inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountType</Name>
				<Source><![CDATA[
    // for 3.0 compatibility
    protected InventAccountType inventAccountType()
    {
        return InventAccountType::PurchReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubHeaderEmpty</Name>
				<Source><![CDATA[
    protected boolean isSubHeaderEmpty()
    {
        TmpSalesPurchReportLine_RU  lines = dynamicData;

        switch (subHeader.PrintoutType)
        {
            case PrintoutTypeTable_RU::PurchReceiptTORG1:
                select firstonly RecId from lines
                    where lines.InventLocationId == subHeader.InventLocationId &&
                          lines.InternalId       == header.InternalId          &&
                          lines.DeviationQty     == 0;

                return lines.RecId == 0;

            case PrintoutTypeTable_RU::PurchReceiptTORG2:
            case PrintoutTypeTable_RU::PurchReceiptTORG3:
                select firstonly RecId from lines
                    where lines.InventLocationId == subHeader.InventLocationId &&
                          lines.InternalId       == header.InternalId          &&
                          lines.DeviationQty     != 0;

                return lines.RecId == 0;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return company.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialog</Name>
				<Source><![CDATA[
    protected SalesPurchDialog_RU newDialog()
    {
        return new SalesPurchDialog_PackingSlipM4M7_RU(journalList, invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return OffReportType_RU::PurchM4M7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
    protected Description orderDescription()
    {
        return this.lookupLabel(literalStr("@SYS9452"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report line
    /// </summary>
    /// <remarks>
    /// Analysis dimension value taken from order line, or, if report posted, it from values taken from inventTransPosting
    /// </remarks>
    protected void prepareDynamicLine()
    {
        VendPackingSlipTrans tmpTrans = invoiceTrans;
        VendPackingSlipJour  tmpJour;

        super();

        dynamicData.DeviationQty    = tmpTrans.DeviationQty_RU;
        if (dynamicData.LineAmount)
        {
            dynamicData.DeviationAmount = CurrencyExchangeHelper::amount(dynamicData.LineAmount * dynamicData.DeviationQty / (dynamicData.Qty ? dynamicData.Qty : 1), header.CurrencyCode);
        }
        else
        {
            dynamicData.DeviationAmount = CurrencyExchangeHelper::amount(dynamicData.Price * dynamicData.DeviationQty, header.CurrencyCode);
        }
        subHeader.TotalDeviationQty += dynamicData.DeviationQty;

        select firstonly ReceiptListDeviationType_RU, PurchId from tmpJour
               where tmpJour.RecId == tmpTrans.VendPackingSlipJour;

        switch (tmpJour.ReceiptListDeviationType_RU)
        {
            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG1:
                subHeader.PrintoutType = PrintoutTypeTable_RU::PurchReceiptTORG1;
                break;

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG2:
               subHeader.PrintoutType = PrintoutTypeTable_RU::PurchReceiptTORG2;
               break;

            case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG3:
                subHeader.PrintoutType = PrintoutTypeTable_RU::PurchReceiptTORG3;
                break;

            default:
            subHeader.PrintoutType       = dynamicData.DeviationQty             ?
                                       PrintoutTypeTable_RU::PurchReceiptM7 :
                                       subHeader.PrintoutType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        PurchAgreementHeader                purchAgreementHeader;

        counteragentData = this.initContragentData(vendor,   vendorBankAccount,   invoiceJour.InvoiceAccount);
        header.VendBankAddress = counteragentData.parmAddress();
        header.VendOKPO        = counteragentData.parmOKPO();
        header.VendName        = counteragentData.parmName();
        header.VendAccount     = vendor.AccountNum;

        counteragentData = this.initContragentData(customer, customerBankAccount, ""); // customer is us
        header.CustBankAddress = counteragentData.parmAddress();
        header.CustOKPO        = counteragentData.parmOKPO();
        header.CustName        = counteragentData.parmName();

        purchAgreementHeader    = PurchAgreementHeader::find(PurchTable::find(invoiceJour.Num).MatchingAgreement);

        header.AgreementDocumentTitle = purchAgreementHeader.DocumentTitle;
        header.AgreementDate          = purchAgreementHeader.agreementDate_RU();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
    protected FreeTxt prepareTxtData()
    {
        return enum2str(printCopyOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData_Sec</Name>
				<Source><![CDATA[
    protected FreeTxt prepareTxtData_Sec()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PrintoutTable_RU filterTable;

        super();

        if (filterQueryRun)
        {
            while (filterQueryRun.next())
            {
                filterTable = filterQueryRun.getNo(1);

                while select header
                    where header.InvoiceId           == filterTable.DocumentId       &&
                          header.InvoiceDate         == filterTable.DocumentDate     &&
                          header.SalesPurchId        == filterTable.SalesPurchId
                join subHeader
                    where subHeader.InternalId       == header.InternalId            &&
                          subHeader.InventLocationId == filterTable.InventLocationId &&
                          subHeader.DocumentId       == filterTable.JournalNum       &&
                          subHeader.PrintoutType     == filterTable.JournalType
                {
                    journalPrintoutType = subHeader.PrintoutType;
                    this.doPrint();
                    this.doPrintTORG1();
                }
            }
        }
        else
        {
            while select header
            join subHeader
                where subHeader.InternalId         == header.InternalId
            {
                journalPrintoutType = subHeader.PrintoutType;
                this.doPrint();
                this.doPrintTORG1();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    public boolean setCaller(Object _object)
    {
        boolean ret;

        ret = super(_object);

        if (! ret)
        {
            if (classIdGet(_object) == classNum(SalesPurchDialog_PackingSlipM4M7_RU))
            {
                filterDialog = _object;
                ret          = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(
        PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
        CustVendInvoiceJour _invoiceJour       = null,
        RecordSortedList    _journalList       = null)
    {
        CustVendInvoiceJour invoiceJourTmp;
        if (_invoiceJour)
        {
            invoiceJourTmp = _invoiceJour;
        }
        else
        {
            invoiceJourTmp = new DictTable(tableNum(VendPackingSlipJour)).makeRecord();
        }
        super(_printCopyOriginal,  invoiceJourTmp, _journalList);

        invoiceTrans = new DictTable(tableNum(VendPackingSlipTrans)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>PrintoutTable_RU</c> record.
    /// </summary>
    /// <param name="_printoutTable">
    ///     A <c>PrintoutTable_RU</c> record to initialize based on.
    /// </param>
    public void setPrintout(PrintoutTable_RU _printoutTable)
    {
        printoutTableRange = _printoutTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected tableId transTableId()
    {
        return tableNum(VendPackingSlipTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendInvoiceJour             custVendInvoiceJour;
        PrintoutTable_RU                printoutTable;
        PurchReport_PackingSlipM4M7_RU  report = new PurchReport_PackingSlipM4M7_RU();

        if (_args)
        {
            if (_args.dataset() == tableNum(PrintoutTable_RU))
            {
                printoutTable = _args.record();
                custVendInvoiceJour = printoutTable.originalDocument();
                report.setPrintout(printoutTable);
            }
            else
            {
                custVendInvoiceJour = _args.record();
            }
            report.setParameters(_args.parmEnum(), custVendInvoiceJour, _args.object());
            report.setCaller(_args.caller());
        }

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>