<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProInvoiceProjectValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
			
/// <summary>
/// Validates project invoice proposals for Chorus Pro integration.
/// </summary>
internal final class BusinessDocChorusProInvoiceProjectValidator extends BusinessDocChorusProInvoiceValidatorBase
{
    private ProjProposalJour projProposalJour;
    private BusinessDocumentElectronicInvoiceFrameworkTable invoicingFramework;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEntityIsFrench</Name>
				<Source><![CDATA[
    private boolean checkEntityIsFrench(RefRecId _fundingSourceRecId, boolean _isEntityFundingSource)
    {
        #ISOCountryRegionCodes
        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        CustTable customerRecord = _isEntityFundingSource ? CustTable::find(projFundingSource.CustAccount) : CustTable::find(projFundingSource.ProjectManager);
        return customerRecord.postalAddress().CountryRegionId == SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoFR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProInvoiceProjectValidator construct(ProjProposalJour _projProposalJour)
    {
        var ret = new BusinessDocChorusProInvoiceProjectValidator();
        ret.projProposalJour = _projProposalJour;
        ret.invoicingFramework = BusinessDocumentElectronicInvoiceFrameworkTable::find(_projProposalJour.ElectronicInvoiceFrameworkType_FR);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicable</Name>
				<Source><![CDATA[
    protected boolean isApplicable()
    {
        boolean ret = super();
        
        if (ret)
        {
            ProjFundingSource fundingSource = ProjFundingSource::find(projProposalJour.FundingSource);
            CustTable fundingSourceCustTable = CustTable::find(fundingSource.CustAccount);
            ret = fundingSourceCustTable.RecId != 0 && fundingSourceCustTable.EInvoice == NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runValidation</Name>
				<Source><![CDATA[
    protected boolean runValidation()
    {
        var ret = this.validateCompany();

        var projectManagerSiretProvider = BusinessDocChorusProProjectManagerSiretProvider::constructFromTableRecord(
            projProposalJour,
            new BusinessDocumentMessageLoggerToInfolog(false));

        var projManagerServiceCode = (BusinessDocChorusProServiceCodeTable_FR::find(projProposalJour.ProjectManagerServiceCodeRef_FR)).ServiceCode;
        
        if (this.checkEntityIsFrench(projProposalJour.FundingSource, false))
        {
            ret = this.validateAccount(
                "@BusinessDocumentSubmissionService:ValidatingProjectManager",
                projectManagerSiretProvider,
                projManagerServiceCode,
                invoicingFramework.ProjectManagerServiceCodeValidationEnabled,
                invoicingFramework.ProjectManagerSiretValidationEnabled)
            && ret;
        }

        var fundingSourceSiretProvider = BusinessDocChorusProProjectFundingSourceSiretProvider::constructFromTableRecord(
            projProposalJour,
            new BusinessDocumentMessageLoggerToInfolog(false));

        var fundingSourceServiceCode = (BusinessDocChorusProServiceCodeTable_FR::find(projProposalJour.FundingSourceServiceCodeRef_FR)).ServiceCode;

        if (this.checkEntityIsFrench(projProposalJour.FundingSource, true))
        {
            
            ret = this.validateAccount(
                "@BusinessDocumentSubmissionService:ValidatingFundingSource",
                fundingSourceSiretProvider,
                fundingSourceServiceCode,
                invoicingFramework.InvoiceAccountServiceCodeValidationEnabled,
                invoicingFramework.InvoiceAccountSiretValidationEnabled)
            && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>