<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostCostingVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DemoDataPostBOMCalc</c> class activates costing versions based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::CostingVersion)]
public class DemoDataPostCostingVersion extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    private void activate(List _versions)
    {
        if (!_versions)
        {
            return;
        }

        ListEnumerator versionsEnumerator = _versions.getEnumerator();

        while (versionsEnumerator.moveNext())
        {
            CostingVersion costingVersion = CostingVersion::find(versionsEnumerator.current());

            if (costingVersion.RecId)
            {
                DemoDataPostDocumentStatus status = DemoDataPostDocumentStatus::Failed;

                DemoDataPostRunDocumentStatus runDocumentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                costingVersion.RecId,
                costingVersion.TableId,
                costingVersion.VersionId);

                try
                {
                    InventItemPriceActivationJob_DemoDataPost inventItemPriceActivationJob = InventItemPriceActivationJob_DemoDataPost::construct();
                    inventItemPriceActivationJob.initParmDefault();
                    inventItemPriceActivationJob.parmFromCostingVersion(costingVersion.VersionId);

                    // V1 implementation: Parameters set without user input
                    inventItemPriceActivationJob.parmPurchasePrice(NoYes::Yes);
                    inventItemPriceActivationJob.parmSalesPrice(NoYes::Yes);
                    inventItemPriceActivationJob.parmCostPrice(NoYes::Yes);

                    inventItemPriceActivationJob.runOperation();

                    status = DemoDataPostDocumentStatus::Success;
                }
                catch
                {
                    Global::exceptionTextFallThrough();
                }
                finally
                {
                    ttsbegin;

                    runDocumentStatus.DocumentStatus = status;
                    runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                    runDocumentStatus.update();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostingVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the set of costing versions to activate.
    /// </summary>
    /// <returns>The set of costing versions to activate.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List findCostingVersions()
    {
        List costVersions = new List(Types::String);
        CostingVersion costingVersion;

        if (demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId >= demoDataPostRunDocument.FromDocumentId
                    && costingVersion.VersionId <= demoDataPostRunDocument.ToDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else if (demoDataPostRunDocument.FromDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId >= demoDataPostRunDocument.FromDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else if (demoDataPostRunDocument.ToDocumentId)
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
                    && costingVersion.VersionId <= demoDataPostRunDocument.ToDocumentId
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }
        else
        {
            while select costingVersion
                where costingVersion.BlockActivation == NoYesCombo::No
            {
                if (costingVersion.costingVersionActivationEnabled())
                {
                    costVersions.addEnd(costingVersion.VersionId);
                }
            }
        }

        return costVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::CostingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        List costVersions = DemoDataPostInventHelper::findCostingVersions(demoDataPostRunDocument);

        this.activate(costVersions);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>