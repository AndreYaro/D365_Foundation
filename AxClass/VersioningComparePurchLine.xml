<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningComparePurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningComparePurchLine</c> class extends the generic functionality in the <c>VersioningComparePurchOrder</c> class and implements the analysis for a Purchase Order line.
/// </summary>
/// <remarks>
/// The main contribution by this class is to define the specific data structure used to compare Purchase Order lines.
/// </remarks>
class VersioningComparePurchLine extends VersioningComparePurchOrder
{
    PurchLine   purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
        public str getCaption()
    {
        return "@SYS343040";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
        protected void initLine(PurchLine _purchLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>VersioningTmpTrans</c> temporary table with the information specific to a
    ///    purchase order.
    /// </summary>
    public void loadData()
    {
        // Comparison structure:

        // PurchLine
        //     PurchLineForeignTradeCategory
        //     AgreementLineReleasedLine
        //     SourceDocumentDistribution
        //     MarkupTrans
        //      SourceDocumentDistribution

        this.loadPurchLine(purchLine, purchTableNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
        public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static VersioningComparePurchLine construct()
    {
        return new VersioningComparePurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLine</Name>
				<Source><![CDATA[
        public static VersioningComparePurchLine newLine(PurchLine _purchLine)
    {
        VersioningComparePurchLine versioningCompare;

        PurchTable              purchTable;
        PurchTableAllVersions       purchTableAllVersions;

        purchTable = _purchLine.purchTable();

        versioningCompare = VersioningComparePurchLine::construct();

        select firstonly purchTableAllVersions
            order by VersionDateTime desc
            where purchTableAllVersions.PurchId == purchTable.PurchId;

        versioningCompare.parmPurchLine(_purchLine);
        versioningCompare.initCallerRecord(purchTableAllVersions, null);

        return versioningCompare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a container with the comparison based on the specified purchase order line.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line that holds the versions.
    /// </param>
    /// <returns>
    /// A container that is a packed instance of the <c>List</c> class that contains the
    /// <c>VersioningTmpTrans</c> records.
    /// </returns>
    public static container packFromLine(PurchLine _purchLine)
    {
        VersioningCompare   versioningCompare = VersioningComparePurchLine::newLine(_purchLine);

        versioningCompare.loadVersioningTmpTrans();

        return versioningCompare.packVersioningTmpTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>