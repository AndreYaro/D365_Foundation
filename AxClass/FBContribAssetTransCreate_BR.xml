<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBContribAssetTransCreate_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for asset transactions related to Pis and Cofins credit
/// </summary>
abstract class FBContribAssetTransCreate_BR
{
    FiscalEstablishment_BR      fiscalEstablishment;
    FBBookingPeriod_BR          bookingPeriod;
    AssetTrans                  assetTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Createas a new asset transaction related to PIS and COFINS credit.
    /// </summary>
    public abstract void create()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContribAssetTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search for an existing contrib asset table.
    /// If it does not exist, create a new one based on asset table related to the current asset trans.
    /// </summary>
    /// <param name="_assetOrigin">
    /// Asset origin.
    /// </param>
    /// <returns>
    /// Contrib asset table.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception is thrown in case the asset table record is not related to the current fiscal establishment.
    /// </exception>
    protected FBContribAssetTable_BR findOrCreateContribAssetTable(FBContribAssetOrigin_BR _assetOrigin)
    {
        AssetTable              assetTable;
        FBContribAssetTable_BR  contribAssetTable;
        AssetTransType          assetTransType;

        switch (assetTrans.TransType)
        {
             // Find fixed asset without any transaction (added manually)
            case AssetTransType::Acquisition:
            case AssetTransType::AcquisitionAdj:
                contribAssetTable = FBContribAssetTable_BR::findByAssetIdAndStatus(assetTrans.AssetId, fiscalEstablishment, FBCIAPAssetStatus_BR::NoAcquisition, true);
                break;
             // Find fixed asset with status open (depreciation transactions are created only for open fixed assets)
            case AssetTransType::Depreciation:
            case AssetTransType::DepreciationAdj:
            case AssetTransType::ExtraordinaryDepreciation:
                contribAssetTable = FBContribAssetTable_BR::findByAssetIdAndStatus(assetTrans.AssetId, fiscalEstablishment, FBCIAPAssetStatus_BR::Open, true);
                break;
            default:
                contribAssetTable = FBContribAssetTable_BR::findByAssetId(assetTrans.AssetId, fiscalEstablishment, true);
                break;
        }

        if (!contribAssetTable)
        {
            assetTable = AssetTable::find(assetTrans.AssetId);

            if (assetTable.FiscalEstablishment_BR != fiscalEstablishment.RecId)
            {
                throw error(strFmt("@SYS4006724", FiscalEstablishment_BR::find(assetTable.FiscalEstablishment_BR).FiscalEstablishmentId));
            }

            setPrefix(strFmt('%1:%2', "@SYS25653", assetTable.AssetId));

            contribAssetTable.initFromAssetTable(assetTable);
            contribAssetTable.AssetOrigin       = _assetOrigin;
            contribAssetTable.DefaultDimension  = this.getCostCenter(assetTrans.DefaultDimension);

            if (assetTrans.PostingProfile && AssetBookTable::find(assetTrans.BookId).postToGeneralLedger())
            {
                assetTransType = (contribAssetTable.AssetAppropriationMethod == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition) ? AssetTransType::Acquisition : AssetTransType::Depreciation;

                contribAssetTable.LedgerDimension = DimensionAttributeValueCombination::find(assetTable.assetLedgerDimension(assetTrans.PostingProfile, assetTransType, assetTrans.BookId)).RecId;
            }

            if (    contribAssetTable.AssetAppropriationMethod  == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
                &&  assetTrans.TransType                        == AssetTransType::Acquisition)
            {
                contribAssetTable.AssetAcquisitionDate = assetTrans.TransDate;
            }

            contribAssetTable.insert();
        }
        else if (contribAssetTable.Status == FBCIAPAssetStatus_BR::NoAcquisition)
        {
            contribAssetTable.Status = FBCIAPAssetStatus_BR::Open;
            contribAssetTable.update();
        }

        return contribAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost center for a given dimension
    /// </summary>
    /// <param name="_defaultDimension">
    /// The dimension RecId
    /// </param>
    /// <returns>
    /// Returns the cost center RecId
    /// </returns>
    protected RecId getCostCenter(RecId _defaultDimension)
    {
        DefaultDimensionView defaultDimensionView;
        DimensionAttribute   dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;

        dimensionAttribute  = DimensionAttribute::find(BrazilParameters::find().CostCenterDimensionAttribute);

        select * from defaultDimensionView
            where defaultDimensionView.DefaultDimension == _defaultDimension
                && defaultDimensionView.DimensionAttributeId == dimensionAttribute.RecId;

        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, defaultDimensionView.DisplayValue);

        return dimensionAttributeValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FBBookingPeriod_BR _bookingPeriod)
    {
        bookingPeriod       = _bookingPeriod;
        fiscalEstablishment = FiscalEstablishment_BR::findById(bookingPeriod.FiscalEstablishmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTrans</Name>
				<Source><![CDATA[
    public AssetTrans parmAssetTrans(AssetTrans _assetTrans = assetTrans)
    {
        assetTrans = _assetTrans;

        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEndOfCreditTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new end of credit transaction for a given <c>FBContribAssetTable_BR</c>
    /// </summary>
    /// <param name="_bookingPeriod">
    /// Booking period related to the end of credit transaction.
    /// </param>
    /// <param name="_contribAssetTable">
    /// The <c>FBContribAssetTable_BR</c> record related to the end of credit transaction.
    /// </param>
    public static void createEndOfCreditTransaction(FBBookingPeriod_BR _bookingPeriod, FBContribAssetTable_BR _contribAssetTable)
    {
        FBContribAssetTrans_BR  contribAssetTrans;

        select RecId from contribAssetTrans
            where   contribAssetTrans.FBContribAssetTable_BR    == _contribAssetTable.RecId
                &&  contribAssetTrans.TransType                 == FBContribAssetTransType_BR::EndOfCredit;

        if (contribAssetTrans.RecId)
        {
            return;
        }

        contribAssetTrans.FBBookingPeriod_BR        = _bookingPeriod.RecId;
        contribAssetTrans.FBContribAssetTable_BR    = _contribAssetTable.RecId;
        contribAssetTrans.TransType                 = FBContribAssetTransType_BR::EndOfCredit;
        contribAssetTrans.TransDate                 = _bookingPeriod.periodTo();

        // Asset table status will be updated to closed
        contribAssetTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseRemainingInstallments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases the number of remaining installments of the contrib asset table.
    /// </summary>
    /// <param name="_contribAssetTable">
    /// Contrib asset table whose remaining installments will be updated.
    /// </param>
    public static void decreaseRemainingInstallments(FBContribAssetTable_BR _contribAssetTable)
    {
        _contribAssetTable.selectForUpdate(true);
        _contribAssetTable.RemainingInstallments--;
        _contribAssetTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInstallmentCreditTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the PIS/COFINS credit transaction for a given asset id in a specific period
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The <c>FBBookingPeriod_BR</c> record
    /// </param>
    /// <param name="_assetId">
    /// The AssetId of the fixed asset
    /// </param>
    public static void deleteInstallmentCreditTransaction(FBBookingPeriod_BR _bookingPeriod, AssetId _assetId)
    {
        FBContribAssetTrans_BR  contribAssetTrans;
        FBContribAssetTable_BR  contribAssetTable;

        delete_from contribAssetTrans
            where   contribAssetTrans.FBBookingPeriod_BR    == _bookingPeriod.RecId
                && (contribAssetTrans.TransType             == FBContribAssetTransType_BR::InstallmentCredit
                 || contribAssetTrans.TransType             == FBContribAssetTransType_BR::EndOfCredit)
            exists join contribAssetTable
                where   contribAssetTable.RecId         == contribAssetTrans.FBContribAssetTable_BR
                    &&  contribAssetTable.AssetTable    == _assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAcquisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FBContribAssetTransCreate_Acquisition_BR</c>
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period of the new transaction
    /// </param>
    /// <param name="_assetTrans">
    /// The asset trans of the new transaction
    /// </param>
    /// <returns>
    /// A new instance of <c>FBContribAssetTransCreate_Acquisition_BR</c>
    /// </returns>
    public static FBContribAssetTransCreate_BR newAcquisition(FBBookingPeriod_BR _bookingPeriod, AssetTrans _assetTrans)
    {
        FBContribAssetTransCreate_Acquisition_BR assetTransAcquisition;

        assetTransAcquisition = new FBContribAssetTransCreate_Acquisition_BR(_bookingPeriod);
        assetTransAcquisition.parmAssetTrans(_assetTrans);

        return assetTransAcquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FBContribAssetTranCreate_Depreciation_BR</c>
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period of the new transaction
    /// </param>
    /// <param name="_assetTrans">
    /// The asset trans of the new transaction
    /// </param>
    /// <returns>
    /// A new instance of <c>FBContribAssetTranCreate_Depreciation_BR</c>
    /// </returns>
    public static FBContribAssetTransCreate_BR newDepreciation(FBBookingPeriod_BR _bookingPeriod, AssetTrans _assetTrans)
    {
        FBContribAssetTranCreate_Depreciation_BR assetTransDepreciation;

        assetTransDepreciation = new FBContribAssetTranCreate_Depreciation_BR(_bookingPeriod);
        assetTransDepreciation.parmAssetTrans(_assetTrans);

        return assetTransDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FBContribAssetTransCreate_Disposal_BR</c>
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period of the new transaction
    /// </param>
    /// <param name="_assetTrans">
    /// The asset trans of the new transaction
    /// </param>
    /// <param name="_contribAssetTable">
    /// The contrib asset table record related to the new transaction
    /// </param>
    /// <returns>
    /// A new instance of <c>FBContribAssetTransCreate_Disposal_BR</c>
    /// </returns>
    public static FBContribAssetTransCreate_BR newDisposal( FBBookingPeriod_BR      _bookingPeriod,
                                                            AssetTrans              _assetTrans,
                                                            FBContribAssetTable_BR  _contribAssetTable)
    {
        FBContribAssetTransCreate_Disposal_BR assetTransDisposal;

        assetTransDisposal = new FBContribAssetTransCreate_Disposal_BR(_bookingPeriod);
        assetTransDisposal.parmAssetTrans(_assetTrans);
        assetTransDisposal.parmContribAssetTable(_contribAssetTable);

        return assetTransDisposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FBContribAssetTransCreate_Recover_BR</c>
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period of the new transaction
    /// </param>
    /// <param name="_contribAssetTable">
    /// The contrib asset table of the new transaction
    /// </param>
    /// <returns>
    /// A new instance of <c>FBContribAssetTransCreate_Recover_BR</c>
    /// </returns>
    public static FBContribAssetTransCreate_BR newRecover(FBBookingPeriod_BR _bookingPeriod, FBContribAssetTable_BR _contribAssetTable)
    {
        FBContribAssetTransCreate_Recover_BR assetTransRecover;

        assetTransRecover = new FBContribAssetTransCreate_Recover_BR(_bookingPeriod);
        assetTransRecover.parmContribAssetTable(_contribAssetTable);

        return assetTransRecover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>FBContribAssetTransCreate_Transfer_BR</c>.
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period of the new transaction.
    /// </param>
    /// <param name="_fiscalDocument">
    /// Fiscal document that represents the asset transfer.
    /// </param>
    /// <param name="_assetId">
    /// Asset that has been transferred.
    /// </param>
    /// <returns>
    /// A new instance of <c>FBContribAssetTransCreate_Transfer_BR</c>
    /// </returns>
    public static FBContribAssetTransCreate_BR newTransfer(FBBookingPeriod_BR _bookingPeriod, FiscalDocument_BR _fiscalDocument, AssetId _assetId)
    {
        FBContribAssetTransCreate_Transfer_BR assetTransTransfer;

        assetTransTransfer = new FBContribAssetTransCreate_Transfer_BR(_bookingPeriod);
        assetTransTransfer.parmAssetId(_assetId);
        assetTransTransfer.parmFiscalDocument(_fiscalDocument);

        return assetTransTransfer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>