<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPurchaseOrderHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>RetailPurchaseOrderHelper</c> handles retail purchase order operations.
/// </summary>
public class RetailPurchaseOrderHelper
{
    private PackingSlipId packingSlipIdForReceivingPurchaseOrder = '';
    private Set purchaseLinesToClose;
    private TransDate transactionDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates new <c>RetailPurchaseOrderHelper</c> class object.
    /// </summary>
    /// <returns>New instance of the class.</returns>
    public static RetailPurchaseOrderHelper construct()
    {
        return new RetailPurchaseOrderHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Receives all registered quantities for a confirmed purchase order.
    /// </summary>
    /// <param name = "_purchId">The purchase order number.</param>
    /// <returns>The operation start result.</returns>
    public SysOperationStartResult receivePurchaseOrder(PurchId _purchId)
    {
        ttsBegin;
        PurchTable purchTable = PurchTable::find(_purchId);

        ParmId purchParmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();

        PurchFormLetter_PackingSlip purchFormLetter_PackingSlip = PurchFormLetter::construct(DocumentStatus::PackingSlip);
        purchFormLetter_PackingSlip.parmLoadFromSysLastValue(false); //don't load any saved values
        purchFormLetter_PackingSlip.parmId(purchParmId);

        if (this.transactionDate)
        {
            purchFormLetter_PackingSlip.transDate(this.transactionDate);
        }
        else
        {
            purchFormLetter_PackingSlip.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        purchFormLetter_PackingSlip.parmDocumentOrigin(DocumentOrigin::Manual);
        purchFormLetter_PackingSlip.parmVersioningUpdateType(VersioningUpdateType::Initial);
        purchFormLetter_PackingSlip.parmSourceTable(purchTable);
        purchFormLetter_PackingSlip.parmShowDialog(false);
        purchFormLetter_PackingSlip.printFormLetter(false);

        purchFormLetter_PackingSlip.initParameters();

        //control what is updated - Recorded equals registered transactions
        PurchFormLetterContract contract = purchFormLetter_PackingSlip.getContract() as PurchFormLetterContract;
        contract.parmSpecQty(PurchUpdate::Recorded);
        contract.parmSpecQtyIsSet(true);

        //create the parmTable and parmLines
        purchFormLetter_PackingSlip.initLinesQuery(true);

        // We need to support packing slip number entered by customers in POS.
        // If customer doesn't enter packing slip number, continue to use an auto number sequence.
        if (this.packingSlipIdForReceivingPurchaseOrder == '')
        {
            // This is the packing slip number, which usually keyed in manually in AX.
            // For automatic posting we need to require a unique number.
            NumberSeq slipNumberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchCORPackingSlipId());
            purchFormLetter_PackingSlip.parmNumber(slipNumberSeq.num());
        }
        else 
        {
            // Use the packing slip number entered by customers in POS.
            purchFormLetter_PackingSlip.parmNumber(this.packingSlipIdForReceivingPurchaseOrder);
            this.packingSlipIdForReceivingPurchaseOrder = '';
        }

        //we need to update the number on the parmTable - this is normally done direcly in the form
        purchFormLetter_PackingSlip.updatePurchParmTableNum(purchFormLetter_PackingSlip.parmNumber());

        // Update the closed flag of each PurchParmLine.
        if (this.purchaseLinesToClose != null && !this.purchaseLinesToClose.empty())
        {
            ParmId parmId = purchFormLetter_PackingSlip.parmId();
            PurchParmLine purchParmLine;

            while select forupdate purchParmLine
                where purchParmLine.ParmId == parmId && purchParmLine.OrigPurchId == _purchId
            {
                // Handles only the line set as closed.
                if (purchParmLine.closed == NoYes::No && purchaseLinesToClose.in(purchParmLine.LineNum))
                {
                    purchParmLine.closed = NoYes::Yes;
                    purchParmLine.modifiedClosed();
                    purchParmLine.update();
                }
            }
        }

        // this is synchronous call, client needs to know operation result.
        SysOperationStartResult result = purchFormLetter_PackingSlip.startOperation();

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingSlipIdForReceivingPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the packing slip id for receivePurchaseOrder method. The packing slip id can be used only once, it will be reset after being used.
    /// This function and member are used to solve the Chain of Command issue for upgrading receivePurchaseOrder function to read packingSlipId.
    /// </summary>
    /// <param name = "_packingSlipId">The packing slip id.</param>
    [Hookable(false), Wrappable(false)]
    public void setPackingSlipIdForReceivingPurchaseOrder(PackingSlipId _packingSlipId)
    {
        this.packingSlipIdForReceivingPurchaseOrder = _packingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCloseLineNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line number of lines to be closed for the purchase order. This is to be used by receivePurchaseOrder method.
    /// </summary>
    /// <param name = "_lineNumbers">Set of line number to be closed.</param>
    [Hookable(false), Wrappable(false)]
    public void setCloseLineNumbers(Set _lineNumbers)
    {
        this.purchaseLinesToClose = _lineNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionDate</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void setTransactionDate(TransDate _transactionDate)
    {
        this.transactionDate = _transactionDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>