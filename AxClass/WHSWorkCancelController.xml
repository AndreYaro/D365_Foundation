<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCancelController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCancelController</c> class acts as a controller
/// for the <c>WHSWorkCancelService</c> service when canceling works.
/// </summary>
internal final class WHSWorkCancelController extends SysOperationServiceController implements BatchRetryable
{
    private NoYesUnchanged runInBatch = NoYesUnchanged::Unchanged;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canGoBatch()
    {
        return runInBatch != NoYesUnchanged::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return runInBatch == NoYesUnchanged::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@WAX610";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromExecutionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSWorkCancelController</c> class
    /// with the specified execution mode.
    /// </summary>
    /// <param name = "_executionMode">The execution mode.</param>
    /// <returns>
    /// A new instance of <c>WHSWorkCancelController</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkCancelController newFromExecutionMode(SysOperationExecutionMode _executionMode)
    {
        WHSWorkCancelController controller = new WHSWorkCancelController(
                classStr(WHSWorkCancelService),
                methodStr(WHSWorkCancelService, execute),
                _executionMode);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateArgsRecord</Name>
				<Source><![CDATA[
    private static void validateArgsRecord(Args _args)
    {
        if (_args.record().TableId != tableNum(WHSWorkTable))
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRunInBatch</Name>
				<Source><![CDATA[
    private void setRunInBatch(Args _args)
    {
        switch (_args.menuItemName())
        {
            case menuItemActionStr(WHSWorkCancelNoBatch):
                this.parmRunInBatch(NoYesUnchanged::No);
                this.parmShowDialog(false);
                break;
            case menuItemActionStr(WHSWorkCancelInBatch):
                this.parmRunInBatch(NoYesUnchanged::Yes);
                this.parmShowDialog(true);
                break;
            default:
                this.parmRunInBatch(NoYesUnchanged::Unchanged);
                this.parmShowDialog(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunInBatch</Name>
				<Source><![CDATA[
    private NoYesUnchanged parmRunInBatch(NoYesUnchanged _runInBatch = runInBatch)
    {
        runInBatch = _runInBatch;

        return runInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void main(Args _args)
    {
        WHSWorkCancelController::validateArgsRecord(_args);

        SysOperationExecutionMode executionMode = _args.parmEnum();
        WHSWorkCancelController   controller = WHSWorkCancelController::newFromExecutionMode(executionMode);

        // Do not allow the operation to be scheduled as a recurrence.
        controller.showBatchRecurrenceButton(false);
        controller.parmLoadFromSysLastValue(false);
        controller.setRunInBatch(_args);

        WHSWorkCancelController::populateControllerDataContract(controller, _args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControllerDataContract</Name>
				<Source><![CDATA[
    private static void populateControllerDataContract(WHSWorkCancelController _controller, Args _args)
    {
        MultiSelectionHelper multiSelect   = MultiSelectionHelper::construct();
        List                 selectedWorkIds = new List(Types::String);

        multiSelect.parmDatasource(FormDataUtil::getFormDataSource(_args.record()));
        WHSWorkTable workTable = multiSelect.getFirst() as WHSWorkTable;

        // We need to show ask a user before start operation only when we are not going to show the dialog;
        // otherwise, the validation result will depend on the parameters from the dialog.
        boolean shouldShowValidationDialogs = WHSValidateReplenWorkBeforeCancelFlight::instance().isEnabled() 
            && !_controller.parmShowDialog();

        while (workTable)
        {
            if (!shouldShowValidationDialogs
                || WHSWorkCancelController::validateWorkRequiringUserDecision(workTable))
            {
                selectedWorkIds.addEnd(workTable.WorkId);
            }

            workTable = multiSelect.getNext();
        }

        WHSWorkCancelDataContract dataContract = _controller.getDataContractObject();
        dataContract.parmSelectedWorkIds(selectedWorkIds);

        if (shouldShowValidationDialogs)
        {
            dataContract.parmCancelReplenishmentWorkWithDependentWork(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkRequiringUserDecision</Name>
				<Source><![CDATA[
    private static boolean validateWorkRequiringUserDecision(WHSWorkTable _workTable)
    {
        return WHSWorkTable::validateCancelWorkActiveDemandLinked(_workTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>