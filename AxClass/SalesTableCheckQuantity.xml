<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableCheckQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesTableCheckQuantity</c> class checks whether sales order lines exist
///    enabling that a specified document can be posted.
/// </summary>
class SalesTableCheckQuantity
{
    SalesTable      salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a specified quantity for a sales order line.
    /// </summary>
    /// <param name="_salesQuantity">
    /// The <c>SalesQuantity</c> object that is used to calculate the quantity.
    /// </param>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> buffer for which to calculate the quantity.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to calculate.
    /// </param>
    /// <returns>
    /// A calculated quantity.
    /// </returns>
    protected SalesQty calculateQuantity(SalesQuantity _salesQuantity, SalesLine _salesLine, SalesUpdate _specQty)
    {
        return _salesQuantity.calcSalesQty(_salesLine, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCheckQuantityDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current <c>SalesLine</c> should be enumerated by the <c>checkQuantity</c> method.
    /// </summary>
    /// <param name = "_documentStatus">The <c>DocumentStatus</c> passed to the <c>checkQuantity</c> method.</param>
    /// <param name = "_salesLine">The current <c>SalesLine</c>.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> expecting a true if the salesLine should be skipped.</param>
    delegate void skipCheckQuantityDelegate(DocumentStatus  _documentStatus, SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified document can be posted by iterating the sales order lines for the
    /// specified sales order.
    /// </summary>
    /// <param name="_documentStatus">
    /// An enumeration value that specifies the document to post.
    /// </param>
    /// <param name="_salesLineEnumerable">
    /// A <c>TradeCommonIEnumerable</c> object that contains the sales order lines.
    /// </param>
    /// <returns>
    /// true if the document can be posted; otherwise, false.
    /// </returns>
    public boolean  checkQuantity(DocumentStatus  _documentStatus, TradeCommonIEnumerable _salesLineEnumerable)
    {
        boolean                 ok = false;

        SalesQuantity salesQuantity = this.constructSalesQuantity(_documentStatus);

        TradeCommonIEnumerator salesLineEnumerator = _salesLineEnumerable.getEnumerator();

        while (salesLineEnumerator.moveNext())
        {
            SalesLine salesLine = salesLineEnumerator.current();

            EventHandlerResult result = EventHandlerResult::newSingleResponse();
            this.skipCheckQuantityDelegate(_documentStatus, salesLine, result);

            if (result.hasResult() && result.result() == true)
            {
                continue;
            }

            if (this.calculateQuantity(salesQuantity, salesLine, SalesUpdate::All))
            {
                ok = true;
                break;
            }

            if (this.calculateQuantity(salesQuantity, salesLine, SalesUpdate::DeliverNow))
            {
                ok = true;
                break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSalesQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesQuantity</c> object that is based on the specified document.
    /// </summary>
    /// <param name="_documentStatus">
    /// The document for which to initialize the <c>SalesQuantity</c> object.
    /// </param>
    /// <returns>
    /// A <c>SalesQuantity</c> object.
    /// </returns>
    protected SalesQuantity constructSalesQuantity(DocumentStatus _documentStatus)
    {
        return SalesQuantity::construct(_documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
        protected SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static SalesTableCheckQuantity construct()
    {
        return new SalesTableCheckQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTableCheckQuantity</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> buffer for which to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTableCheckQuantity</c> class.
    /// </returns>
    public static SalesTableCheckQuantity newFromSalesTable(SalesTable _salesTable)
    {
        SalesTableCheckQuantity salesTableCheckQuantity = SalesTableCheckQuantity::construct();
        salesTableCheckQuantity.parmSalesTable(_salesTable);

        return salesTableCheckQuantity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
