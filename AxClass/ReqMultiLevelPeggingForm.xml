<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqMultiLevelPeggingForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RegMultiLevelPeggingForm</c> class is used for handling intercompany multilevel explosion.
/// </summary>
class ReqMultiLevelPeggingForm extends ReqTransFormExplosion
{
    ReqExplodeType  reqExplodeType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the <c>ReqTrans</c> buffer.
    /// </summary>
    public void clearReqTrans()
    {
        // The buffer is selected cross-company and do not allow bulk-deletes or record selection
        // so this is the only way to clear the contents
        reqTrans_ds.first();
        if (reqTrans_ds.cursor().RecId)
        {
            reqTrans_ds.cursor().doDelete();
        }
        while (reqTrans_ds.next())
        {
            reqTrans_ds.cursor().doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default explosion parameters.
    /// </summary>
    public void initParmDefault()
    {
        super();

        tmpReqExplosionTree.DisplayItemName         = NoYes::Yes;
        tmpReqExplosionTree.DisplayItemId           = NoYes::No;

        tmpReqExplosionTree.DisplayCompany          = NoYes::Yes;
        tmpReqExplosionTree.DisplayPlanId           = NoYes::Yes;
        tmpReqExplosionTree.DisplayProductNumber    = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the design name for the pack and unpack operations.
    /// </summary>
    /// <returns>
    ///    The design name for the pack and unpack operations.
    /// </returns>
    public identifierName lastValueDesignName()
    {
        // The reqExplodeType value is passed as design name to differentiate the setup of Up/Down principles
        return enum2str(reqExplodeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        super(_formRun);

        this.parmInterCompany(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqExplodeType</Name>
				<Source><![CDATA[
    public ReqExplodeType parmReqExplodeType(ReqExplodeType _reqExplodeType = reqExplodeType)
    {
        reqExplodeType = _reqExplodeType;
        return reqExplodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqExplodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the type of explosion that should be performed.
    /// </summary>
    /// <returns>
    /// The type of explosion that should be performed.
    /// </returns>
    protected ReqExplodeType reqExplodeType()
    {
        return reqExplodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransFromTmpReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the non-temporary <c>ReqTrans</c> record that a temporary record represents.
    /// </summary>
    /// <param name="_tmpReqTrans">
    ///    The <c>ReqTrans</c> record to find.
    /// </param>
    /// <returns>
    ///    The non-temporary <c>ReqTrans</c> record.
    /// </returns>
    public ReqTrans reqTransFromTmpReqTrans(reqTrans _tmpReqTrans)
    {
        ReqTrans    reqTransNonTmp;
        RecId       recId;

        if (this.mapTmpRecId2Db() && this.mapTmpRecId2Db().exists(_tmpReqTrans.RecId))
        {
            recId = this.mapTmpRecId2Db().lookup(_tmpReqTrans.RecId);
            if (this.mapReqTrans().exists(recId))
            {
                reqTransNonTmp = this.mapReqTrans().lookup(recId);
            }
        }

        return reqTransNonTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static private ReqMultiLevelPeggingForm construct(FormRun _formRun)
    {
        return new ReqMultiLevelPeggingForm(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the class.
    /// </summary>
    /// <param name="_formRun">
    ///    The <c>form</c> that the class controls.
    /// </param>
    /// <param name="_reqExplodeType">
    ///    The type of explosion to be performed.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    static ReqMultiLevelPeggingForm newFormRun(FormRun _formRun, ReqExplodeType _reqExplodeType)
    {
        ReqMultiLevelPeggingForm reqMultiLevelPeggingForm;

        if (_formRun.args() && _formRun.args().caller() && !_formRun.args().record().RecId)
        {
            throw(error("@SYS82774"));
        }

        reqMultiLevelPeggingForm = ReqMultiLevelPeggingForm::construct(_formRun);
        reqMultiLevelPeggingForm.parmReqExplodeType(_reqExplodeType);

        return reqMultiLevelPeggingForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>