<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceOverviewController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventPriceOverviewController</c> class is the controller class for the
///    <c>InventPriceOverviewReport</c> SSRS report.
/// </summary>
public class InventPriceOverviewController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllowedFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a set of field names of the fields allowed in the order by sequence, before the
    ///    <c>ActivationDate</c> value.
    /// </summary>
    /// <returns>
    ///    The set of unique index field names.
    /// </returns>
    protected Set getAllowedFields()
    {
        Set allowedFields = new Set(Types::String);
        allowedFields.add(fieldStr(InventItemPrices, ItemId));
        allowedFields.add(fieldStr(InventItemPrices, InventDimId));
        allowedFields.add(fieldStr(InventItemPrices, PriceType));

        return allowedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true when the parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean                     isValid = true;
        QueryBuildRange             qbr;

        isValid = super();

        // Query based validations are handled in the controller
        InventPriceOverviewContract inventPriceOverviewContract = this.parmReportContract().parmRdpContract() as InventPriceOverviewContract;
        Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(InventItemPrices), 1);
        if (!inventPriceOverviewContract.parmActivePrices())
        {
            qbr = qbds.findRange(fieldNum(InventItemPrices, VersionId));
            if (qbr)
            {
                isValid = checkFailed(strFmt("@SYS117037", fieldStr(InventItemPrices, VersionId)));
            }
        }

        // If there is an As per date selected, no ActivationDate can be used as a range
        if (inventPriceOverviewContract.parmAsPerDate())
        {
            isValid = this.validateOrderBy(query) && isValid;

            qbr = qbds.findRange(fieldNum(InventItemPrices, ActivationDate));
            if (qbr)
            {
                isValid = checkFailed(strFmt("@SYS117037", fieldStr(InventItemPrices, ActivationDate)));
            }
        }

        // There should be no range on site in the select button
        qbds    = query.dataSourceTable(tableNum(InventDim), 1);
        qbr     = qbds.findRange(fieldNum(InventDim, InventSiteId));
        if (qbr)
        {
            isValid = checkFailed(strFmt("@SYS117037", fieldStr(InventDim, InventSiteId)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the consistency of the order by fields in case the As per date selection was chosen.
    /// </summary>
    /// <param name="_query">
    ///    The query to validate.
    /// </param>
    /// <returns>
    ///    true if the order by field setup is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When choosing "As per date", the results that are returned by the query have to be in a certain
    ///    order so they can be filtered in real-time, that is, without storing them locally. By using a
    ///    <c>RecordSortedList</c> object to filter the records and print only the one with the closest
    ///    <c>ActivationDate</c> value to the "As per date", the query must return the rows sorted descending
    ///    on the <c>ActivationDate</c> value. Choosing only relevant records is also enforced by the
    ///    <c>RecordSortedList</c> object that acts as a group by on the unique index of the table, except for
    ///    the <c>ActivationDate</c>. By doing this the <c>RecordSortedList</c> object will act as a marker or
    ///    flag collection. More details for this is in the fetch method. For more details, check the
    ///    documentation for the <c>RecordSortedList</c> class.In order to be sure that relevant prices are
    ///    returned in the right <c>ActivationDate</c> order, only fields from the unique index of the table
    ///    can appear before <c>ActivationDate</c> in the <c>OrderBy</c> fields list. For a more detailed
    ///    explanation please see the design document.
    /// </remarks>
    protected boolean validateOrderBy(Query _query)
    {
        boolean                 isValid = true;
        int                     currentOrderField = 1;

        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventItemPrices), 1);
        Set allowedFields = this.getAllowedFields();

        // Goes through the list of OrderBy fields until it finds the ActivationDate
        while (currentOrderField <= _query.orderByFieldCount())
        {
            QueryOrderByField queryOrderByField = _query.orderByField(currentOrderField);

            // No field from another table is allowed before the ActivationDate one
            if (queryOrderByField.dataSource().table() != tableNum(InventItemPrices))
            {
                isValid = checkFailed(strFmt("@SYS118205", fieldStr(InventItemPrices, ActivationDate)));
                break;
            }
            else
            {
                // If this is the ActivationDate field check its direction
                if (fieldId2name(tableNum(InventItemPrices), queryOrderByField.fieldID()) == fieldStr(InventItemPrices, ActivationDate))
                {
                    if (queryOrderByField.direction() != SortOrder::Descending)
                    {
                        isValid = checkFailed(strFmt("@SYS118204", fieldStr(InventItemPrices, ActivationDate)));
                    }
                    break;
                }
                // If the current field is not in the unique index of the table, fail
                else
                {
                    if (!allowedFields.in(fieldId2name(tableNum(InventItemPrices), queryOrderByField.fieldID())))
                    {
                        isValid = checkFailed(strFmt("@SYS118205", fieldStr(InventItemPrices, ActivationDate)));
                        break;
                    }
                }
            }

            currentOrderField++;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventPriceOverviewController construct()
    {
        return new InventPriceOverviewController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventPriceOverviewController controller = new InventPriceOverviewController();
        controller.parmReportName(ssrsReportStr(InventPriceOverview, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
