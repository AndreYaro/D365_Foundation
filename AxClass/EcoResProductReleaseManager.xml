<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductReleaseManager</c> class is responsible for releasing products to the valid
///    entities.
/// </summary>
class EcoResProductReleaseManager extends EcoResProductReleaseManagerBase
{
    InventTable     inventTable;

    ItemId          itemId;
    ItemNameAlias   itemNameAlias;
    RetailAttributesGlobalLookup        attributesGlobalLookup;
    RetailAttributesLegalEntityLookup   attributesLegalEntityLookup;
    RetailProductPropertyManager        retailProductPropertyManager;
    UnitOfMeasure                       unitBOM;
    UnitOfMeasure                       unitInvent;
    UnitOfMeasure                       unitSales;
    UnitOfMeasure                       unitPurchase;
    UnitOfMeasure                       unitBaseConversion;

    boolean                             isRetailEnabledAndInUse;

    private EcoResInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDimensionGroupRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates relationship tables to dimension groups.
    /// </summary>
    protected void createDimensionGroupRelations()
    {
        EcoResStorageDimensionGroupProduct  ecoResStorageDimensionGroupProduct  = EcoResStorageDimensionGroupProduct::findByProduct(ecoResProduct.RecId);
        EcoResStorageDimensionGroupItem     ecoResStorageDimensionGroupItem;

        EcoResTrackingDimensionGroupProduct ecoResTrackingDimensionGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(ecoResProduct.RecId);
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;

        ttsbegin;
        if (ecoResStorageDimensionGroupProduct.RecId)
        { // mandatory storage dimension group for the product
            ecoResStorageDimensionGroupItem.ItemDataAreaId          = inventTable.DataAreaId;
            ecoResStorageDimensionGroupItem.ItemId                  = inventTable.ItemId;
            ecoResStorageDimensionGroupItem.StorageDimensionGroup   = ecoResStorageDimensionGroupProduct.StorageDimensionGroup;
            ecoResStorageDimensionGroupItem.insert();
        }

        if (ecoResTrackingDimensionGroupProduct.RecId)
        { // mandatory tracking dimension group for the product
            ecoResTrackingDimensionGroupItem.ItemDataAreaId         = inventTable.DataAreaId;
            ecoResTrackingDimensionGroupItem.ItemId                 = inventTable.ItemId;
            ecoResTrackingDimensionGroupItem.TrackingDimensionGroup = ecoResTrackingDimensionGroupProduct.TrackingDimensionGroup;
            if (ecoResTrackingDimensionGroupItem.validateWrite())
            {
                ecoResTrackingDimensionGroupItem.insert();
            }
            else
            {
                throw error("@SYS18447");
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventItemLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new item location for the product that is being released.
    /// </summary>
    protected void createInventItemLocation()
    {
        InventItemLocation::createDefault(inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventItemSetupSupplyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new item default order type for the product that is released.
    /// </summary>
    protected void createInventItemSetupSupplyType()
    {
        InventItemSetupSupplyType::createDefault(inventTable.ItemId, inventTable.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new item for the product that is released.
    /// </summary>
    protected void createInventTable()
    {
        this.setInventTableFields();
        inventTable.insert(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTableModules</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new inventory modules for the product that is being released.
    /// </summary>
    protected void createInventTableModules()
    {
        InventTableModule   inventTableModule;

        ttsbegin;
        inventTableModule.initValue();
        inventTableModule.ItemId            = inventTable.ItemId;
        inventTableModule.ModuleType        = ModuleInventPurchSales::Invent;
        inventTableModule.insert();

        inventTableModule.initValue();
        inventTableModule.ItemId            = inventTable.ItemId;
        inventTableModule.ModuleType        = ModuleInventPurchSales::Purch;
        inventTableModule.insert();

        inventTableModule.initValue();
        inventTableModule.ItemId            = inventTable.ItemId;
        inventTableModule.ModuleType        = ModuleInventPurchSales::Sales;
        inventTableModule.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWarrantyInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new <c>WarrantyInventTable</c> for the product that is being released.
    /// </summary>
    protected void createWarrantyInventTable()
    {
        if (ecoResProduct.ServiceType == EcoResProductServiceType::Warranty)
        {
            ttsbegin;
            WarrantyInventTable warrantyInventTable;
            warrantyInventTable.initValue();
            warrantyInventTable.ItemId = inventTable.ItemId;
            warrantyInventTable.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductPerCompanyTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates product per company related tables.
    /// </summary>
    protected void createProductPerCompanyTables()
    {
        this.createInventTableModules();

        if (!isRetailEnabledAndInUse)
        {
            this.createInventItemLocation();
        }

        this.createInventItemSetupSupplyType();
        this.createWarrantyInventTable();
        this.createDimensionGroupRelations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the units for purchase, sales, and BOM.
    /// </summary>
    protected void getUnitOfMeasure()
    {
        if (attributesLegalEntityLookup)
        {
            unitBOM             = UnitOfMeasure::find(attributesLegalEntityLookup.UnitBOM);
            unitInvent          = UnitOfMeasure::find(attributesLegalEntityLookup.UnitInvent);
            unitSales           = UnitOfMeasure::find(attributesLegalEntityLookup.UnitSales);
            unitBaseConversion  = UnitOfMeasure::find(attributesLegalEntityLookup.UnitBaseComparison);
            unitPurchase        = UnitOfMeasure::find(attributesLegalEntityLookup.UnitPurchase);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>EcoResProductReleaseManager</c> class.
    /// </summary>
    public void init()
    {
        super();

        isRetailEnabledAndInUse = RetailParameters::isRetailEnabledAndInUse();
        if (isRetailEnabledAndInUse)
        {
            EcoResProductCategory ecoResProductCategory = ecoResProductCategory::findByProductIdCategoryHierarchyRole(ecoResProduct.RecId, EcoResCategoryNamedHierarchyRole::Retail);
            if (ecoResProductCategory)
            {
                select firstOnly attributesLegalEntityLookup
                    where attributesLegalEntityLookup.Category == ecoResProductCategory.Category &&
                    attributesLegalEntityLookup.LegalEntity == legalEntity;

                select firstOnly attributesGlobalLookup
                    where attributesGlobalLookup.Category == ecoResProductCategory.Category;

                this.getUnitOfMeasure();
            }
        }
        changecompany (CompanyInfo::find(false, legalEntity).DataArea)
        {
            this.initItemId();
            this.initItemNameAlias();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTableFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>InventTable</c> record with the parameter values.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The number sequence for the item ID is set to manual and no item ID has been provided.
    /// </exception>
    protected void initInventTableFromParms()
    {
        inventTable.ItemId                  = itemId;
        inventTable.NameAlias               = itemNameAlias;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>itemId</c> parameter.
    /// </summary>
    protected void initItemId()
    {
        if (!itemId)
        {
            NumberSequenceTable numberSequenceTable = InventParameters::numRefItemId().numberSequenceTable();
            //get item id from:
            //1. Product number if number seq for item ID is not set up or manual or return blank value
            if (!numberSequenceTable.RecId || numberSequenceTable.Manual)
            {
                itemId = ecoResProduct.productNumber();
            }
            else //number sequence auto, get a number
            {
                itemId = NumberSeq::newGetNumFromId(numberSequenceTable.RecId).num();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemNameAlias</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>itemNameAlias</c> parameter.
    /// </summary>
    protected void initItemNameAlias()
    {
        if (!itemNameAlias)
        {
            itemNameAlias = ecoResProduct.SearchName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemNameAlias</Name>
				<Source><![CDATA[
    public ItemNameAlias parmItemNameAlias(ItemNameAlias _itemNameAlias = itemNameAlias)
    {
        itemNameAlias = _itemNameAlias;

        return itemNameAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the product to the legal entity.
    /// </summary>
    /// <param name="_isCreation">
    ///    true if the product is being created; otherwise, false.
    /// </param>
    /// <param name="_purchTaxItemGroupId">
    ///    The purchase item tax group id.
    /// </param>
    /// <param name="_salesTaxItemGroupId">
    ///    The sales item tax group id.
    /// </param>
    public void release(boolean _isCreation = false, TaxItemGroup _purchTaxItemGroupId = '', TaxItemGroup _salesTaxItemGroupId = '')
    {
        changecompany (CompanyInfo::find(false, legalEntity).DataArea)
        {
            ttsbegin;

            this.releaseToLegalEntity(_isCreation, _purchTaxItemGroupId, _salesTaxItemGroupId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleaseable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product is releaseable.
    /// </summary>
    /// <returns>true if releaseable; otherwise, false.</returns>
    protected boolean isReleaseable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseToLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the product to a specific legal entity.
    /// </summary>
    /// <param name="_isCreation">
    ///    true if the product is being created; otherwise, false.
    /// </param>
    /// <param name="_purchTaxItemGroupId">
    ///    The purchase item tax group id.
    /// </param>
    /// <param name="_salesTaxItemGroupId">
    ///    The sales item tax group id.
    /// </param>
    protected void releaseToLegalEntity(boolean _isCreation, TaxItemGroup _purchTaxItemGroupId, TaxItemGroup _salesTaxItemGroupId)
    {
        if (this.isReleaseable())
        {
            using (var releaseProductActivityContext = this.logger().productActivities().release())
            {
                this.logger().logProductInformation(legalEntity, ecoResProduct.RecId);

                if (InventTable::exist(this.itemId))
                {
                    error(strFmt("@SCM:DistinctProductAlreadyReleasedError", this.itemId));
                    throw Exception::DuplicateKeyException;
                }

                this.createInventTable();
                this.createProductPerCompanyTables();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields in the <c>InventTable</c> buffer.
    /// </summary>
    protected void setInventTableFields()
    {
        inventTable = null;
        inventTable.initValue();
        inventTable.initFromEcoResProduct(ecoResProduct);
        this.initInventTableFromParms();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that units of measure are compatible.
    /// </summary>
    /// <param name="_unitFrom">
    /// A <c>UnitOfMeasure</c> record that specifies the source unit of measure.
    /// </param>
    /// <param name="_unitTo">
    /// A <c>UnitOfMeasure</c> record that specifies the target unit of measure.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value that indicates whether to show the Infolog.
    /// </param>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    protected boolean validateUnitOfMeasure(UnitOfMeasure _unitFrom, UnitOfMeasure _unitTo, boolean _showInfo = true)
    {
        if (_unitFrom && _unitTo)
        {
            boolean canBeConverted = UnitOfMeasureConverter::canBeConverted(
                                        _unitFrom.RecId,
                                        _unitTo.RecId,
                                        inventTable.Product);

            if (!canBeConverted)
            {
                if (_showInfo)
                    infolog.add(Exception::Error, strFmt("@SYS28690", _unitFrom.Symbol, _unitTo.Symbol));

                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductReleaseManager construct()
    {
        return new EcoResProductReleaseManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductWithLegalEntityData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a distinct product or a product master to a legal entity.
    /// </summary>
    /// <param name="_productRecId">
    ///    The ID of the product to be released.
    /// </param>
    /// <param name="_legalEntityId">
    ///    The legal entity which to release the specified product.
    /// </param>
    /// <param name="_itemId">
    ///    The ID for a new <c>InventTable</c> record.
    /// </param>
    /// <param name="_itemNameAlias">
    ///    The name alias for a new <c>InventTable</c> record.
    /// </param>
    /// <param name="_purchTaxItemGroupId">
    ///    The purchase item tax group id.
    /// </param>
    /// <param name="_salesTaxItemGroupId">
    ///    The sales item tax group id.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The method has been called for a product variant. Only distinct products and product masters can be
    ///    released by this method.
    /// </exception>
    public static void releaseProductWithLegalEntityData(
        EcoResProductRecId  _productRecId,
        RefRecId            _legalEntityId,
        ItemId              _itemId,
        ItemNameAlias       _itemNameAlias,
        TaxItemGroup        _purchTaxItemGroupId = '',
        TaxItemGroup        _salesTaxItemGroupId = '')
    {
        EcoResProduct                   ecoResProductLocal = EcoResProduct::find(_productRecId);

        if (ecoResProductLocal.isDistinctProductVariant())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        EcoResProductReleaseManager productReleaseManager = EcoResProductReleaseManagerBase::newFromProduct(ecoResProductLocal);
        productReleaseManager.parmLegalEntity(_legalEntityId);
        productReleaseManager.parmItemId(_itemId);
        productReleaseManager.parmItemNameAlias(_itemNameAlias);
        productReleaseManager.init();

        productReleaseManager.release(RetailParameters::isRetailEnabledAndInUse(), _purchTaxItemGroupId, _salesTaxItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(EcoResProductReleaseManager));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>