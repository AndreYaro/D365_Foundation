<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgShopFloorServiceClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>JmgJobListFilter</c> class handles the service execution of the shop floor.
/// </summary>
public class JmgShopFloorServiceClass
{
    #define.Delimiter('\n')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clockIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes clock in registration.
    /// </summary>
    /// <param name="_clockInData">
    /// The <c>JmgClockInData</c> instance.
    /// </param>
    /// <returns>
    /// The <c>JmgClockInStatusData</c> instance.
    /// </returns>
    public JmgClockInStatusData clockIn(JmgClockInData _clockInData)
    {
        JmgCheckEmployeeForgotClockOut  checkEmployeeForgotClockOut;
        JmgRegistrationParameters       params;
        JmgClockInStatusData            status = new JmgClockInStatusData();

        JmgJobTable         signInJob;
        HRMAbsenceCode      absenceCode;
        utcdatetime         registrationTime = this.registrationTime(_clockInData.parmClientDateTime());
        JmgEmployee         employee = this.getEmployeeByLogin(_clockInData.parmLogin());

        if (!employee.RecId)
        {
            status.parmStatus(JmgShopFloorServiceStatus::UnknownEmployee);
            return status;
        }

        if (_clockInData.parmIncludeUserInfo())
        {
            this.populateUserInfo(employee, status);
        }

        status.parmStatus(JmgShopFloorServiceStatus::Ok);

        if (JmgParameters::find().UsePINcode && !employee.validatePINCode(_clockInData.parmPin()))
        {
            status.parmStatus(JmgShopFloorServiceStatus::IncorrectPin);
            return status;
        }

        params = new JmgRegistrationParameters();
        signInJob = JmgJobTable::find(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SignIn));

        checkEmployeeForgotClockOut = this.createJmgCheckEmployeeForgotClockOut(employee.Worker);
        if (checkEmployeeForgotClockOut.needAutoClockout())
        {
            if (checkEmployeeForgotClockOut.isUserInputRequired())
            {
                if (!_clockInData.parmClockoutDateTime())
                {
                    status.parmStatus(JmgShopFloorServiceStatus::MissingClockoutDateTime);
                    return status;
                }

                checkEmployeeForgotClockOut.setClockoutTime(DateTimeUtil::date(_clockInData.parmClockoutDateTime()) , DateTimeUtil::time(_clockInData.parmClockoutDateTime()));
            }

            checkEmployeeForgotClockOut.runOperation();
        }

        this.endBreak(_clockInData);

        if (JmgEmployee::signedIn(employee.Worker))
        {
            this.populateHubInfo(status, employee);
            return status;
        }

        if (JmgProfileSpec::promptForAbsence(employee.Worker, registrationTime, true))
        {
            absenceCode = HRMAbsenceCode::find(_clockInData.parmAbsenceCodeId());
            if (!absenceCode.RecId)
            {
                status.parmAbsenceCodes(this.getAbsenceCodes());
                status.parmStatus(JmgShopFloorServiceStatus::MissingAbsenceCode);
                return status;
            }

            params.jobIdAbsence(absenceCode.JmgJobId);
        }

        this.registerJob(employee, signInJob, registrationTime, params);

        this.populateHubInfo(status, employee);
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes clock out registration.
    /// </summary>
    /// <param name="_clockOutData">
    /// The <c>JmgClockOutData</c> instance.
    /// </param>
    /// <returns>
    /// The <c>JmgClockOutStatusData</c> instance.
    /// </returns>
    public JmgClockOutStatusData clockOut(JmgClockOutData _clockOutData)
    {
        JmgRegistrationParameters params;
        JmgJobTable     signOutJob;
        HRMAbsenceCode  absenceCode;
        utcdatetime     registrationTime = this.registrationTime(_clockOutData.parmClientDateTime());
        JmgEmployee     employee         = this.getEmployeeByLogin(_clockOutData.parmLogin());
        JmgClockOutStatusData res = new JmgClockOutStatusData();

        if (!employee.RecId)
        {
            res.parmStatus(JmgShopFloorServiceStatus::UnknownEmployee);
            return res;
        }

        params = new JmgRegistrationParameters();

        signOutJob = JmgJobTable::find(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SignOut));

        if (JmgProfileSpec::promptForAbsence(employee.Worker, registrationTime, false))
        {
            absenceCode = HRMAbsenceCode::find(_clockOutData.parmAbsenceCodeId());
            if (!absenceCode.RecId)
            {
                res.parmStatus(JmgShopFloorServiceStatus::MissingAbsenceCode);
                res.parmAbsenceCodes(this.getAbsenceCodes());
                return res;
            }

            params.jobIdAbsence(absenceCode.JmgJobId);
        }

        this.registerJob(employee, signOutJob, registrationTime, params);

        res.parmStatus(JmgShopFloorServiceStatus::Ok);
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJmgCheckEmployeeForgotClockOut</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record in the <c>JmgCheckEmployeeForgotClockOut</c> table for the specified worker.
    /// </summary>
    /// <param name="_worker">
    ///     The ID of the worker.
    /// </param>
    /// <returns>
    ///     A record in <c>JmgCheckEmployeeForgotClockOut</c> table.
    /// </returns>
    protected JmgCheckEmployeeForgotClockOut createJmgCheckEmployeeForgotClockOut(JmgWorkerRecId _worker)
    {
        return new JmgCheckEmployeeForgotClockOut(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes end break registration.
    /// </summary>
    /// <param name="_registrationData">
    /// The <c>JmgClockInData</c> instance.
    /// </param>
    public void endBreak(JmgClockInData _registrationData)
    {
        JmgTermReg   termReg;
        JmgEmployee  employee = this.getEmployeeByLogin(_registrationData.parmLogin());
        utcdatetime  registrationTime = this.registrationTime(_registrationData.parmClientDateTime());

        select firstonly RecId
            from termReg
            where termReg.RegType   == JmgTermRegType::BrkFlowStart   &&
                  termReg.Worker    == employee.Worker                &&
                  termReg.JobActive == NoYes::Yes;

        if (termReg.RecId)
        {
            this.registerJob(employee, JmgJobTable::find(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StopBreak)), registrationTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsenceCodes</Name>
				<Source><![CDATA[
    private HRMAbsenceCode getAbsenceCodes()
    {
        HRMAbsenceCode  absenceCode;
        JmgJobTable     jmgJobTable;

        select HrmAbsenceCodeId, HrmAbsenceCodeGroupId, Description from absenceCode
            exists join jmgJobTable
            where jmgJobTable.JobId == absenceCode.JmgJobId;

        return absenceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns attachment in base64Encoding.
    /// </summary>
    /// <param name="_refRecId">
    /// <c>RecId</c> object containing the jobId.
    /// </param>
    /// <returns>
    /// Returns string containing attachment in base64Encoding.
    /// </returns>
    public JmgAttachmentData getAttachment(RecId _refRecId)
    {
        DocuRef     docuRef;
        DocuValue   docuValue;
        BinData     binData = new BinData();
        JmgAttachmentData data = new JmgAttachmentData();

        docuRef = DocuRef::findRecId(_refRecId);
        docuValue = DocuValue::find(docuRef.ValueRecId);

        if (docuValue.RecId)
        {
            binData.setData(DocumentManagement::getAttachmentAsContainer(docuRef));
            data.parmFileName(docuValue.fileNameValue());
        }
        else
        {
            binData.setStrData(docuRef.Notes);
        }

        data.parmData(binData.base64Encode());

        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of attachment to a given job and worker.
    /// </summary>
    /// <param name="_registrationData">
    /// The <c>JmgRegistrationData</c> instance.
    /// </param>
    /// <param name="_jobId">
    /// <c>JmgJobId</c> object containing the jobId.
    /// </param>
    /// <returns>
    /// The <c>DocuRef</c> buffer.
    /// </returns>
    public DocuRef getAttachments(JmgRegistrationData _registrationData,  JmgJobId _jobId)
    {
        JmgJobDocuRef   jobDocRef;
        DocuRef         docRef;
        DocuType        docType;
        JmgEmployee     employee = this.getEmployeeByLogin(_registrationData.parmLogin());
        JmgDocumentGroupType    jmgDocType;
        JmgDocumentGroupMember  docMember;

        select Author, Name, Notes, RecId from docRef
        join TypeGroup from docType
            where docRef.RefCompanyId == docType.dataAreaId
               && docRef.TypeId       == docType.TypeId
        join TableId from jobDocRef
        join TableId from docMember
            where docMember.Worker == employee.Worker
        join TableId from jmgDocType
            where docMember.DocumentGroup == jmgDocType.DocumentGroup
               && jmgDocType.DocuType == docRef.TypeId
               && jobDocRef.JobId == _jobId
               && jobDocRef.RefRecId   == docRef.RefRecId
               && jobDocRef.RefTableId == docRef.RefTableId;

        return docRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of legal entities.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> buffer.
    /// </returns>
    public CompanyInfo getCompanies()
    {
        CompanyInfo companyInfo;
        select Name, DataArea from companyInfo
            where companyInfo.OrganizationType == OMInternalOrganizationType::LegalEntity;

        return companyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns legal entity details.
    /// </summary>
    /// <param name="_dataArea">
    /// The <c>SelectableDataArea</c> instance.
    /// </param>
    /// <returns>
    /// The <c>JmgCompanyDetailsData</c> instance.
    /// </returns>
    public JmgCompanyDetailsData getCompanyDetails(SelectableDataArea _dataArea)
    {
        JmgCompanyDetailsData companyDetails = new JmgCompanyDetailsData();
        CompanyImage companyImage;
        CompanyInfo companyInfo;
        BinData binData = new BinData();

        select firstonly crossCompany Image from companyImage
            exists join companyInfo
            where companyInfo.DataArea == _dataArea
               && companyInfo.TableId == companyImage.RefTableId
               && companyInfo.RecId   == companyImage.RefRecId
               && companyImage.HasImage == NoYes::Yes;

        if (companyImage.RecId)
        {
            binData.setData(companyImage.Image);
            companyDetails.parmCompanyLogo(binData.base64Encode());
        }

        return companyDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmployeeByLogin</Name>
				<Source><![CDATA[
    private JmgEmployee getEmployeeByLogin(JmgServiceLogin _login)
    {
        JmgEmployee employee;

        if (_login)
        {
            if (JmgParameters::find().UseBadgeId)
            {
                employee = JmgEmployee::findCardNo(_login);
            }
            else
            {
                employee = JmgEmployee::findPersonnelNumber(_login);
            }
        }

        return employee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIpcList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of indirect activities job.
    /// </summary>
    /// <returns>
    /// JmgIpcView dataset containing the job list of indirect activities.
    /// </returns>
    public JmgIpcView getIpcList()
    {
        JmgIpcView jmgIpcView;

        select Activity, Description, JobId, Type from jmgIpcView;

        return jmgIpcView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of job details based on provided filter
    /// </summary>
    /// <param name="_detailsFilter">
    /// <c>JmgJobDetailsFilter</c> object containing the filters to be used
    /// </param>
    /// <returns>
    /// JmgTmpProdJobDetails temporary table containing the job list details
    /// </returns>
    public JmgTmpProdJobDetails getJobDetails(JmgJobDetailsFilter _detailsFilter)
    {
        JmgProdJobDetailsView jobDetailsView;
        JmgJobInProgressView jmgJobInProgressView;
        JmgTmpProdJobDetails tmpJmgProdJobDetails;
        str tmpstr;

        JmgJobDetailsFilterExecutor filterExecutor = new JmgJobDetailsFilterExecutor(_detailsFilter);
        jobDetailsView = JmgServiceDataProvider::getData(filterExecutor, null, tableNum(JmgProdJobDetailsView), fieldNum(JmgProdJobDetailsView,JobId));

        while select jobDetailsView
            outer join jmgJobInProgressView
                where jmgJobInProgressView.JobId == jobDetailsView.JobId
        {
            if (tmpstr)
            {
                tmpstr += #Delimiter;
            }
            tmpstr += strFmt('%1:%2 %3', jmgJobInProgressView.PersonnelNumber, jmgJobInProgressView.FirstName, jmgJobInProgressView.LastName);

            if (!tmpJmgProdJobDetails.JobId)
            {
                tmpJmgProdJobDetails.JobId              = jobDetailsView.JobId;
                tmpJmgProdJobDetails.CalcQty            = jobDetailsView.CalcQty;
                tmpJmgProdJobDetails.ProductName        = jobDetailsView.ProductName;
                tmpJmgProdJobDetails.ItemId             = jobDetailsView.ItemId;
                tmpJmgProdJobDetails.SumOfStartItems    = jobDetailsView.SumOfStartItems;
                tmpJmgProdJobDetails.SumOfGoodItems     = jobDetailsView.SumOfGoodItems;
                tmpJmgProdJobDetails.RemaningQuantity   = jobDetailsView.RemaningQuantity;
                tmpJmgProdJobDetails.JobFirstStarted    = jobDetailsView.JobFirstStarted;
                tmpJmgProdJobDetails.ProdUnitId         = jobDetailsView.ProdUnitId;
                tmpJmgProdJobDetails.OprId              = jobDetailsView.OprId;
                tmpJmgProdJobDetails.Type               = jobDetailsView.Type;
                tmpJmgProdJobDetails.SchedEnd           = jobDetailsView.SchedEnd;
                tmpJmgProdJobDetails.SchedToTime        = jobDetailsView.SchedToTime;
                tmpJmgProdJobDetails.JobStatus          = jobDetailsView.JobStatus;
                tmpJmgProdJobDetails.OprNum             = jobDetailsView.OprNum;
                tmpJmgProdJobDetails.ProdId             = jobDetailsView.ModuleRefId;
                tmpJmgProdJobDetails.WrkCtrId           = jobDetailsView.WrkCtrId;
                tmpJmgProdJobDetails.Description        = jobDetailsView.Description;
                tmpJmgProdJobDetails.ResourceGroup      = jobDetailsView.ResourceGroup;
                tmpJmgProdJobDetails.OprName            = jobDetailsView.OprName;
                tmpJmgProdJobDetails.ToDate             = jobDetailsView.ToDate;
                tmpJmgProdJobDetails.ToTime             = jobDetailsView.ToTime;
                tmpJmgProdJobDetails.FromDate           = jobDetailsView.FromDate;
                tmpJmgProdJobDetails.FromTime           = jobDetailsView.FromTime;
                tmpJmgProdJobDetails.Locked             = jobDetailsView.Locked;
                tmpJmgProdJobDetails.PriorityResource   = jobDetailsView.PriorityResource;
                tmpJmgProdJobDetails.ProductDimensions  = this.productDimensionsAsString(jobDetailsView);
                tmpJmgProdJobDetails.StorageDimensions  = this.storageDimensionsAsString(jobDetailsView);
                tmpJmgProdJobDetails.TrackingDimensions = this.trackingDimensionsAsString(jobDetailsView);
            }
        }

        if (tmpJmgProdJobDetails.JobId)
        {
            tmpJmgProdJobDetails.WorkerInProgress   = tmpStr;
            tmpJmgProdJobDetails.doInsert();
        }

        return tmpJmgProdJobDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of jobs based on provided filter and paging criteria
    /// </summary>
    /// <param name="_filter">
    /// <c>JmgJobListFilter</c> object containing the filters to be used
    /// </param>
    /// <param name="_pagingSetup">
    /// <c>PagingSetup</c> object containing requested paging information
    /// </param>
    /// <returns>
    /// JmgProdJobListView dataset containing the job list
    /// </returns>
    public JmgProdJobListView getJobs(JmgJobListFilter _filter, JmgPagingSetup _pagingSetup)
    {
        JmgJobListFilterExecutor filterExecutor = new JmgJobListFilterExecutor(_filter);
        return JmgServiceDataProvider::getData(filterExecutor, _pagingSetup, tableNum(JmgProdJobListView), fieldNum(JmgProdJobListView, JobId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of BOM items with dimensions consumed by a given operation.
    /// </summary>
    /// <param name="_jobId">
    /// <c>JmgJobId</c> object containing the jobId.
    /// </param>
    /// <returns>
    /// Returns temporary table JmgTmpJobProdMaterials containing material consumption for the operation.
    /// </returns>
    public JmgTmpJobProdMaterials getMaterials(JmgJobId _jobId)
    {
        ProdBOM                 prodBOM;
        InventDim               inventDim;
        JmgJobTable             jobTable;
        JmgTmpJobProdMaterials  tmpJmgJobProdMaterials;

        jobTable = JmgJobTable::find(_jobId);
        if (jobTable.RecId)
        {
            while select ProdId, OprNum, InventDimId, QtyInventCalc, RemainBOMFinancial, ItemId from prodBOM
                where prodBOM.ProdId == jobTable.ModuleRefId
                   && prodBOM.OprNum == jobTable.OprNum
                outer join inventDim
                where prodBOM.InventDimId == inventDim.InventDimId
            {
                tmpJmgJobProdMaterials.ProdId               = prodBOM.ProdId;
                tmpJmgJobProdMaterials.OprNum               = prodBOM.OprNum;
                tmpJmgJobProdMaterials.ItemId               = prodBOM.ItemId;
                tmpJmgJobProdMaterials.ProductDimensions    = this.productDimensionsStr(inventDim);
                tmpJmgJobProdMaterials.StorageDimensions    = strFmt('%1\n%2\n%3\n%4', inventDim.InventSiteId, inventDim.InventLocationId,
                                        inventDim.wmsLocationId, inventDim.wmsPalletId);
                tmpJmgJobProdMaterials.TrackingDimensions   = inventDim.inventBatchId;
                tmpJmgJobProdMaterials.QtyInventCalc        = prodBOM.QtyInventCalc;
                tmpJmgJobProdMaterials.RemainBOMFinancial   = prodBOM.RemainBOMFinancial;
                tmpJmgJobProdMaterials.AvailablePhysical    = prodBOM.availPhysical();
                tmpJmgJobProdMaterials.insert();
            }
        }

        select tmpJmgJobProdMaterials;
        return tmpJmgJobProdMaterials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a string with all the product dimensions of the specified InventDim record.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record to get product dimension values from.</param>
    /// <returns>A string representation of product dimensions.</returns>
    protected str productDimensionsStr(InventDim _inventDim)
    {
        // taking these separately, not inside the loop below, to support existing consumers who may rely on existing sequence of the fields.
        str productDimensionsStr = strFmt('%1\n%2\n%3\n%4\n%5', 
            _inventDim.ConfigId, 
            _inventDim.InventColorId,
            _inventDim.InventSizeId, 
            _inventDim.InventStyleId,
            _inventDim.InventVersionId);

        InventDimensionEnumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            FieldId inventDimFieldId = productDims.currentInventDimFieldId();

            if (   inventDimFieldId != fieldNum(InventDim, ConfigId)
                && inventDimFieldId != fieldNum(InventDim, InventColorId)
                && inventDimFieldId != fieldNum(InventDim, InventSizeId)
                && inventDimFieldId != fieldNum(InventDim, InventStyleId)
                && inventDimFieldId != fieldNum(InventDim, InventVersionId))
            {
                productDimensionsStr += strFmt('\n%1', _inventDim.(inventDimFieldId));
            }
        }

        return productDimensionsStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of resources, resource groups, Production Units and Site.
    /// </summary>
    /// <returns>
    /// WrkCtrResourceAndGroupView dataset containing the list of resources, groups and Production units.
    /// </returns>
    public WrkCtrResourceAndGroupView getResources()
    {
        WrkCtrResourceAndGroupView wrkCtrResourceAndGroupView;

        select Name, ProdUnitId, SiteId, WrkCtrId, WrkCtrIdGroup, WrkCtrType from wrkCtrResourceAndGroupView;

        return wrkCtrResourceAndGroupView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSFCParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of SFC parameters.
    /// </summary>
    /// <returns>
    /// JmgParameters dataset containing the SFC parameters.
    /// </returns>
    public JmgParameters getSFCParameters()
    {
        JmgParameters jmgParameters;

        select MaxMinutes, AutoSignout, UseBadgeId, UsePINcode, GetRegistrationTimeFrom from jmgParameters;

        return jmgParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateHubInfo</Name>
				<Source><![CDATA[
    private void populateHubInfo(JmgClockInStatusData _status,
                                JmgEmployee _employee,
                                utcdatetime     _viewDateTime       = DateTimeUtil::utcNow())
    {
        JmgTermReg jmgTermReg;
        JmgBulletinBoard messages = JmgBulletinBoard::findPersonalMessages(_employee.Worker, NoYes::No, _viewDateTime);
        JmgBulletinBoard unreadMessages = JmgBulletinBoard::findPersonalMessages(_employee.Worker, NoYes::Yes, _viewDateTime);
        utcdatetime viewDate = DateTimeUtil::newDateTime(DateTimeUtil::date(_viewDateTime), 0);

        select messages;
        _status.parmMessages(messages);

        select unreadMessages;
        _status.parmUnreadMessages(unreadMessages);

        select jmgTermReg
            where jmgTermReg.Worker == _employee.Worker
               && jmgTermReg.RegDateTime >= viewDate;

        _status.parmRegistrations(jmgTermReg);

        this.populateProfileSpec(_status, _employee, _viewDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProfileSpec</Name>
				<Source><![CDATA[
    private void populateProfileSpec(JmgClockInStatusData _status, JmgEmployee _employee, utcdatetime _viewDateTime)
    {
        JmgProfileSpec profileSpec;
        JmgTmpProfileSpec tmpProfileSpec;
        JmgProfileTypeTable profileType;

        JmgProfileId profileId = _employee.profileId(DateTimeUtil::date(_viewDateTime), DateTimeUtil::time(_viewDateTime));
        JmgDayIdEnum dayId = JmgProfiles::date2DayId(DateTimeUtil::date(_viewDateTime));

        while select StartTime, StartDay, EndTime, EndDay, DayId from profileSpec
            join ProfileSpecType from profileType
            where profileSpec.DayId == dayId
               && profileSpec.Profile == profileId
               && (  profileType.ProfileSpecType == JmgProfileSpecTypeEnum::SignOut
                  || profileType.ProfileSpecType == JmgProfileSpecTypeEnum::Break
                  || profileType.ProfileSpecType == JmgProfileSpecTypeEnum::BreakPay)
        {
            tmpProfileSpec.clear();
            tmpProfileSpec.ProfileSpecType = profileType.ProfileSpecType;
            tmpProfileSpec.StartTime = profileSpec.StartTime;
            tmpProfileSpec.StartDay = profileSpec.StartDay;
            tmpProfileSpec.EndTime = profileSpec.EndTime;
            tmpProfileSpec.EndDay = profileSpec.EndDay;
            tmpProfileSpec.DayId = profileSpec.DayId;
            tmpProfileSpec.insert();
        }

        select tmpProfileSpec;
        _status.parmProfileSpec(tmpProfileSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateUserInfo</Name>
				<Source><![CDATA[
    private void populateUserInfo(JmgEmployee _employee, JmgClockInStatusData _status)
    {
        HcmWorker worker = _employee.hcmWorker();
        BinData binData;
        HcmPersonImage personImage = HcmPersonImage::findByPerson(worker.Person);
        _status.parmWorkerName(worker.name());

        if (personImage.RecId)
        {
            binData = new BinData();
            binData.setData(personImage.Image);
            _status.parmUserImage(binData.base64Encode());
        }

        _status.parmLastClockInDateTime(JmgTermReg::getCurSignInUTCTime(_employee.Worker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsAsString</Name>
				<Source><![CDATA[
    private JmgDimensionsString productDimensionsAsString(JmgProdJobDetailsView _jobDetailsView)
    {
        return strFmt('%1\n%2\n%3\n%4\n%5', _jobDetailsView.ConfigId, _jobDetailsView.InventColorId,
                                        _jobDetailsView.InventSizeId, _jobDetailsView.InventStyleId,
                                        _jobDetailsView.InventVersionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerJob</Name>
				<Source><![CDATA[
    private void registerJob(JmgEmployee _employee, JmgJobTable _jobTable, utcdatetime _registrationTime, JmgRegistrationParameters _params = new JmgRegistrationParameters())
    {
        JmgJobBundle bundle = new JmgJobBundle(_employee.Worker, false, false, false);
        bundle.addJob(_jobTable, _params);
        bundle.makeRegistrations(DateTimeUtil::date(_registrationTime), DateTimeUtil::time(_registrationTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerMessageIsRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers that a personal message has been read.
    /// </summary>
    /// <param name="_registrationData">
    /// The <c>JmgRegistrationData</c> instance.
    /// </param>
    /// <param name="_msgId">
    /// The Id of the message that needs to be updated.
    /// </param>
    public void registerMessageIsRead(JmgRegistrationData _registrationData, JmgMsgId _msgId)
    {
        JmgBulletinBoardRecipient jmgBulletinBoardRecipient;
        JmgEmployee  employee = this.getEmployeeByLogin(_registrationData.parmLogin());

        jmgBulletinBoardRecipient = JmgBulletinBoardRecipient::find(employee.Worker, _msgId, true);

        if (jmgBulletinBoardRecipient.RecId)
        {
            ttsbegin;
            jmgBulletinBoardRecipient.MessageRead = NoYes::Yes;
            jmgBulletinBoardRecipient.update();
            ttscommit;
        }
        else
        {
            jmgBulletinBoardRecipient.Worker = employee.Worker;
            jmgBulletinBoardRecipient.MsgId = _msgId;
            jmgBulletinBoardRecipient.MessageRead = NoYes::Yes;
            jmgBulletinBoardRecipient.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the registration time based on the current time in the client or the server time, as specified on the shop floor parameters parameters.
    /// </summary>
    /// <param name="_clientDateTime">
    ///     The current time in the client.
    /// </param>
    /// <returns>
    ///     The effective registration time.
    /// </returns>
    protected utcdatetime registrationTime(utcdatetime _clientDateTime)
    {
        utcDateTime dateTime;
        if (JmgParameters::find().GetRegistrationTimeFrom == JmgGetRegistrationTimeFrom::AOSServer)
        {
            dateTime = DateTimeUtil::utcNow();
        }
        else
        {
            dateTime = _clientDateTime;
        }

        dateTime = DateTimeUtil::applyTimeZoneOffset(dateTime, DateTimeUtil::getUserPreferredTimeZone());

        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Report feedback on jobs.
    /// </summary>
    /// <param name="_registrationData">
    /// The <c>JmgRegistrationData</c> instance.
    /// </param>
    /// <param name="_jobs">
    /// The <c>List</c> of <c>JmgJobFeedbackData</c> instances.
    /// </param>
    [
        AifCollectionTypeAttribute('_jobs', Types::Class, classStr(JmgJobFeedbackData))
    ]
    public void reportFeedback(JmgRegistrationData _registrationData, List _jobs)
    {
        ListEnumerator enumerator = _jobs.getEnumerator();
        JmgJobFeedbackData feedbackData;
        JmgEmployee  employee = this.getEmployeeByLogin(_registrationData.parmLogin());
        utcdatetime  registrationTime = this.registrationTime(_registrationData.parmClientDateTime());
        JmgJobBundle bundle = new JmgJobBundle(employee.Worker, false, false, false);
        JmgRegistrationParameters params;
        JmgPostStandardSystem       jmgPostStandardSystem;
        List                        statusQtyProdJournalCheckPost;
        JmgProdMultiReportFinished  jmgProdMultiReportFinished;

        while (enumerator.moveNext())
        {
            feedbackData = enumerator.current();
            params = bundle.getFeedbackParameters(feedbackData.parmJobId());
            params.errorSpecification(feedbackData.parmErrorSpecification());
            params.goodQuantity(feedbackData.parmGoodQuantity());
            params.reportAsFinished(feedbackData.parmStatus());
            bundle.addJob(JmgJobTable::find(feedbackData.parmJobId()));
        }

        jmgPostStandardSystem = JmgPostStandardSystem::constructJobBundle(bundle, false);

        // Status/quantity.
        statusQtyProdJournalCheckPost = jmgPostStandardSystem.createProdStatusQty();
        // Report as finished
        jmgProdMultiReportFinished = jmgPostStandardSystem.createReportFinishedJournal();

        bundle.setStatusQtyJournalPosting(statusQtyProdJournalCheckPost);
        bundle.setReportFinishedJournalPosting(jmgProdMultiReportFinished);

        bundle.makeFeedbackOnActiveJobs(DateTimeUtil::date(registrationTime), DateTimeUtil::time(registrationTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes start break registration.
    /// </summary>
    /// <param name="_startBreakData">
    /// The <c>JmgStartBreakData</c> instance.
    /// </param>
    public void startBreak(JmgStartBreakData _startBreakData)
    {
        JmgJobTable  jobTable = JmgJobTable::find(_startBreakData.parmJobId());
        JmgEmployee  employee = this.getEmployeeByLogin(_startBreakData.parmLogin());
        utcdatetime  registrationTime = this.registrationTime(_startBreakData.parmClientDateTime());

        if (!jobTable.RecId || jobTable.Type != JmgJobTableType::SFCBreak)
        {
            throw error(strFmt("@SYS39813", _startBreakData.parmJobId()));
        }

        this.registerJob(employee, jobTable, registrationTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start jobs.
    /// </summary>
    /// <param name="_registrationData">
    /// The <c>JmgRegistrationData</c> instance.
    /// </param>
    /// <param name="_jobs">
    /// The <c>List</c> of <c>JmgStartJobData</c> instances.
    /// </param>
    /// <param name="_continueBundle">
    /// Specifies wheter bundle should be continued or not.
    /// </param>
    [
        AifCollectionTypeAttribute('_jobs', Types::Class, classStr(JmgStartJobData))
    ]
    public void startJobs(JmgRegistrationData _registrationData, List _jobs, boolean _continueBundle)
    {
        ListEnumerator enumerator = _jobs.getEnumerator();
        JmgStartJobData startJobData;
        JmgEmployee  employee = this.getEmployeeByLogin(_registrationData.parmLogin());
        utcdatetime  registrationTime = this.registrationTime(_registrationData.parmClientDateTime());
        JmgJobBundle bundle = new JmgJobBundle(employee.Worker, _continueBundle, false, false);
        JmgRegistrationParameters params;
        JmgPostStandardSystem       jmgPostStandardSystem;
        JmgProdMultiStartUp         jmgProdMultiStartUp;

        while (enumerator.moveNext())
        {
            startJobData = enumerator.current();
            params = new JmgRegistrationParameters();
            params.startQuantity(startJobData.parmStartQuantity());
            bundle.addJob(JmgJobTable::find(startJobData.parmJobId()), params);
        }

        if (bundle.bundleType() == JmgJobBundleType::Prod)
        {
            jmgPostStandardSystem = JmgPostStandardSystem::constructJobBundle(bundle, true);
            jmgProdMultiStartUp = jmgPostStandardSystem.createProductionStartUpJournal();
            bundle.setStartUpJournalPosting(jmgProdMultiStartUp);
        }

        bundle.makeRegistrations(DateTimeUtil::date(registrationTime), DateTimeUtil::time(registrationTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>storageDimensionsAsString</Name>
				<Source><![CDATA[
    private JmgDimensionsString storageDimensionsAsString(JmgProdJobDetailsView _jobDetailsView)
    {
        return strFmt('%1\n%2\n%3\n%4', _jobDetailsView.InventSiteId, _jobDetailsView.InventLocationId,
                                        _jobDetailsView.wmsLocationId, _jobDetailsView.wmsPalletId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionsAsString</Name>
				<Source><![CDATA[
    private JmgDimensionsString trackingDimensionsAsString(JmgProdJobDetailsView _jobDetailsView)
    {
        return _jobDetailsView.InventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImagesForProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default images for the list of products.
    /// </summary>
    /// <param name="_productIds">
    /// The <c>List</c> of item ids.
    /// </param>
    /// <returns>
    /// The <c>List</c> of images encoded to base 64 format.
    /// </returns>
    [
        AifCollectionTypeAttribute('_productIds', Types::String),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List getImagesForProducts(List _productIds)
    {
        ListEnumerator enumerator = _productIds.getEnumerator();
        List           res = new List(Types::String);
        InventTable    inventTable;
        str            imageDataStr;

        while (enumerator.moveNext())
        {
            imageDataStr = '';
            inventTable = InventTable::find(enumerator.current());
            if (inventTable)
            {
                imageDataStr = EcoResProductImage::releasedProductImage(inventTable).parmImageData();
            }

            res.addEnd(imageDataStr);
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>