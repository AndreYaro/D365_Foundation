<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarDateCapacityWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Writes daily calendar capcity to corresponding tables.
/// </summary>
class ResCalendarDateCapacityWriter implements ResICalendarDateWriter
{
    #timeconstants

    const int secondsPerHour = #SecondsPerHour;
    const int hoursPerDay    = #hoursPerDay;

    boolean onlyInsert;

    ResICalendarCapacityHourSliceGateway slicesTableGateway;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a daily calendar capcity to corresponding tables.
    /// </summary>
    /// <param name = "_dateUpdateInfo">A date update object that holds capacity slices to be written.</param>
    /// <param name = "_calendar">A calendar to write capacity for.</param>
    public void write(ResCalendarDate _dateUpdateInfo, CalendarRecId _calendar)
    {
        CalendarRecId calendar = _calendar;
        Set dateLineSlices;
        Set existingDateCapacitySlices;

        TransDate transDate = _dateUpdateInfo.parmTransDate();

        ttsbegin;

        if (!onlyInsert)
        {
            existingDateCapacitySlices = slicesTableGateway.loadCapacitySlices(transDate, calendar);
        }
            Set slicesToInsert = this.mergeCapacities(existingDateCapacitySlices, _dateUpdateInfo);

        if (!onlyInsert)
        {
            slicesTableGateway.deleteCapacitySlices(transDate, calendar);
        }

        slicesTableGateway.insertCapacitySlices(_dateUpdateInfo.parmTransDate(), calendar, slicesToInsert);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacitiesFromTheDateObject</Name>
				<Source><![CDATA[
    private ResCalendarCapacityHourSliceCollection getCapacitiesFromTheDateObject(ResCalendarDate _dateObject)
    {
        var collection = ResCalendarCapacityHourSliceCollection::construct();
        var lineEnumerator = _dateObject.lines().getEnumerator();

        while (lineEnumerator.moveNext())
        {
            ResCalendarDateLine dateLine = lineEnumerator.current();
            Set slices = dateLine.getCapacitySlices();
            collection.addSet(slices);
        }

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeCapacities</Name>
				<Source><![CDATA[
    private Set mergeCapacities(Set _dateCapacitySumSlices, ResCalendarDate _dateUpdateInfo)
    {
        var mergeResult = ResCalendarCapacityHourSlice::newSet();
        var dbStoredCapacities = ResCalendarCapacityHourSliceCollection::construct().addSet(_dateCapacitySumSlices);
        var dateUpdateCapacities = this.getCapacitiesFromTheDateObject(_dateUpdateInfo);
        var dateOriginalState = _dateUpdateInfo.parmOriginalState();
        int i = 0;
        ResCalendarCapacityHourSliceCollection originalStateCapacities;
        ResCalendarDate originalState = _dateUpdateInfo.parmOriginalState();

        if (originalState)
        {
            originalStateCapacities = this.getCapacitiesFromTheDateObject(originalState);
        }
        else
        {
            originalStateCapacities = ResCalendarCapacityHourSliceCollection::construct();
        }

        for (i = 0; i < hoursPerDay; i++)
        {
            ResCalendarCapacityHourSlice dbSlice = dbStoredCapacities.getSumSliceForHour(i);
            ResCalendarCapacityHourSlice origSlice = originalStateCapacities.getSumSliceForHour(i);
            ResCalendarCapacityHourSlice updateSlice = dateUpdateCapacities.getSumSliceForHour(i);

            ResCalendarCapacityHourSlice mergedSlice = dbSlice.substractCapacity(origSlice).addCapacity(updateSlice);
            mergeResult.add(mergedSlice);
        }

        return mergeResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        slicesTableGateway = ResCalendarCapacityHourSliceGateway::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the capacity writer.
    /// </summary>
    /// <param name = "_onlyInsert">Enable optimization for the case of the new capacity records created.</param>
    /// <returns>A new instance of the capacity writer.</returns>
    public static ResCalendarDateCapacityWriter construct(boolean _onlyInsert = false)
    {
        var writer = new ResCalendarDateCapacityWriter();
        writer.onlyInsert = _onlyInsert;
        return writer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
