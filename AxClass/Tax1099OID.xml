<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099OID</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tax1099OID extends Tax1099Base implements Tax1099IForm
{
    const Tax1099Box O1 = 'OID-01';
    const Tax1099Box O2 = 'OID-02';
    const Tax1099Box O3 = 'OID-03';
    const Tax1099Box O4 = 'OID-04';
    const Tax1099Box O5 = 'OID-05';
    const Tax1099Box O6 = 'OID-06';
    const Tax1099Box O8 = 'OID-08';
    const Tax1099Box O9 = 'OID-09';
    const Tax1099Box O10 = 'OID-10';
    const Tax1099Box O11 = 'OID-11';
    const Tax1099Box O13 = 'OID-13';  // Not used
    const Tax1099Box O14 = 'OID-14';
    const str ReturnType = 'D';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        /*
        Mapping between Amount Type, Box, and Amount Code (IRS sets these and box and amount code do not always match)

        |  Amount Type                                                                                                      |  Box   |  Amount Code  |
        |-------------------------------------------------------------------------------------------------------------------|--------|---------------|
        | Original issue discount for 2020                                                                                  | OID-01 | 1             |
        | Other periodic interest                                                                                           | OID-02 | 2             |
        | Early withdrawal penalty                                                                                          | OID-03 | 3             |
        | Federal income tax withheld (backup   withholding)                                                                | OID-04 | 4             |
        | Bond premium                                                                                                      | OID-10 | 5             |
        | Original issue discount on U.S. Treasury   obligations (allows both positive and negative amounts to be reported) | OID-08 | 6             |
        | Investment expenses                                                                                               | OID-09 | 7             |
        | Market discount                                                                                                   | OID-05 | A             |
        | Acquisition premium                                                                                               | OID-06 | B             |
        | Tax-Exempt OID                                                                                                    | OID-11 | C             |
        */

        select sum(Amount1), sum(Amount2), sum(Amount3), sum(Amount4), sum(Amount5), sum(Amount6),
               sum(Amount7), sum(AmountA), sum(AmountB), sum(AmountC)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099OID;

        // Amount codes should be in ascending sequence (numerals then alphas)

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // Original Issue Discount for <year>
        }

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // Other Periodic Interest
        }

        if (_localIRSPayerRec.Amount3 > 0)
        {
            tmpAmountCodes += Three; // Early Withdrawal Penalty
        }

        if (_localIRSPayerRec.Amount4 > 0)
        {
            tmpAmountCodes += Four; // Federal Income Tax Withheld (backup withholding)
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // Bond Premium
        }

        if (_localIRSPayerRec.Amount6 > 0)
        {
            tmpAmountCodes += Six; // Original Issue Discount on US Treasury Obligations
        }

        if (_localIRSPayerRec.Amount7 > 0)
        {
            tmpAmountCodes += Seven; // Investment Expenses
        }

        if (_localIRSPayerRec.AmountA > 0)
        {
            tmpAmountCodes += A; // Market Discount
        }

        if (_localIRSPayerRec.AmountB > 0)
        {
            tmpAmountCodes += B; // Acquisition Premium
        }

        if (_localIRSPayerRec.AmountC > 0)
        {
            tmpAmountCodes += C; // Tax-exempt OID
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099OID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        // Second TIN Notice. Field Position: 544
        this.strInsert(_localIRSPayerRec.SecondTIN, 544);

        // Blank. Field Position: 545-546

        // CUSIP Number. Field Position 547-585
        this.strInsert(_localIRSPayerRec.CUSIPDetails, 547);

        // FATCA Filing requirement. Field Position: 586
        if (_localIRSPayerRec.FATCAFilingRequirement == NoYes::Yes)
        {
            this.strInsert('1', 586);
        }

        // Blank. Field Position: 587-662
        // Special Data Entries. Field Position: 663-722 - Used by the different states

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Combined Federal / State Code. Field Position: 747-748
        this.strInsert(_localIRSPayerRec.CombinedFedStateCode, 747);

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        Tax1099StateSummary tax1099StateSummary;
        VendSettlementTax1099 vendSettlementTax1099;
        VendStateTaxID vendStateTaxID;
        CompanyInfo companyInfo = CompanyInfo::find();
        Tax1099IRSPayerRec localTax1099IRSPayerRec;
        int stateCounter;

        // Set output table Federal amounts to actual values
        void showFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
            _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
            _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3;
            _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
            _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
            _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
            _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
            _tax1099IRSPayerRecTmp.AmountA = _tax1099IRSPayerRec.AmountA;
            _tax1099IRSPayerRecTmp.AmountB = _tax1099IRSPayerRec.AmountB;
            _tax1099IRSPayerRecTmp.AmountC = _tax1099IRSPayerRec.AmountC;
        }

        // Set output table Federal amounts to 0
        void hideFederal()
        {
            _tax1099IRSPayerRecTmp.Amount1 = 0.0;
            _tax1099IRSPayerRecTmp.Amount2 = 0.0;
            _tax1099IRSPayerRecTmp.Amount3 = 0.0;
            _tax1099IRSPayerRecTmp.Amount4 = 0.0;
            _tax1099IRSPayerRecTmp.Amount5 = 0.0;
            _tax1099IRSPayerRecTmp.Amount6 = 0.0;
            _tax1099IRSPayerRecTmp.Amount7 = 0.0;
            _tax1099IRSPayerRecTmp.AmountA = 0.0;
            _tax1099IRSPayerRecTmp.AmountB = 0.0;
            _tax1099IRSPayerRecTmp.AmountC = 0.0;
        }

        // Set output table values that are always needed
        void showDefaults()
        {
            _tax1099IRSPayerRecTmp.CompanyName = companyInfo.name();
            _tax1099IRSPayerRecTmp.CompanyAddress = companyInfo.postalAddress().Address;
            _tax1099IRSPayerRecTmp.CompanyPhone = companyInfo.phone();
            _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = companyInfo.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.CUSIPDetails = _tax1099IRSPayerRec.CUSIPDetails;
            _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
            _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
            _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
            _tax1099IRSPayerRecTmp.AddressLine1 = _tax1099IRSPayerRec.address_Line1();
            _tax1099IRSPayerRecTmp.AddressLine2 = _tax1099IRSPayerRec.address_Line2();
            _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
            _tax1099IRSPayerRecTmp.DirectSalesInd = _tax1099IRSPayerRec.DirectSalesInd;
            _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
            _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
            _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
            _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
            _tax1099IRSPayerRecTmp.FATCAFilingRequirementInd = _tax1099IRSPayerRec.FATCAFilingRequirementInd;
            _tax1099IRSPayerRecTmp.Tax1099TaxYear = _tax1099IRSPayerRec.Tax1099TaxYear;
        }

        // Don't insert into output table if we have no values
        void doInsert()
        {
            if (_tax1099IRSPayerRecTmp.Amount1 + _tax1099IRSPayerRecTmp.Amount2 +
                _tax1099IRSPayerRecTmp.Amount3 + _tax1099IRSPayerRecTmp.Amount4 +
                _tax1099IRSPayerRecTmp.Amount5 + abs(_tax1099IRSPayerRecTmp.Amount6) +
                _tax1099IRSPayerRecTmp.Amount7 + _tax1099IRSPayerRecTmp.AmountA + 
                _tax1099IRSPayerRecTmp.AmountB + _tax1099IRSPayerRecTmp.AmountC +
                _tax1099IRSPayerRecTmp.StateTaxWithheld1 + _tax1099IRSPayerRecTmp.StateTaxWithheld2 > 0)
            {
                _tax1099IRSPayerRecTmp.insert();
            }
        }

        ttsbegin;
        // Loop through our temporary table and fill in the Tax1099StateSummary data
        tax1099StateSummary.setTmp();
        select forupdate tax1099StateSummary;

        delete_from localTax1099IRSPayerRec
            where localTax1099IRSPayerRec.Reportable == NoYes::No;

        if (_onlyStateToPrint == '')
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where vendStateTaxID.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099OIDStateIncomeTax(vendStateTaxID.VendAccount, vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        else
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where _tax1099IRSPayerRec.VendAccount == vendStateTaxID.VendAccount &&
                  vendStateTaxID.StateId == _onlyStateToPrint
            {
                tax1099StateSummary.clear();
                tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099OIDStateIncomeTax(vendStateTaxID.VendAccount, vendStateTaxID.StateId, _fromDate, _toDate);

                if (tax1099StateSummary.StateIncomeTax > 0)
                {
                    tax1099StateSummary.VendAccount = vendStateTaxID.VendAccount;
                    tax1099StateSummary.StateId = vendStateTaxID.StateId;
                    tax1099StateSummary.insert();
                }
            }
        }
        ttscommit;

        // Build records using state information if needed
        while select _tax1099IRSPayerRec
        {
            _tax1099IRSPayerRecTmp.clear();
            showDefaults();

            stateCounter = 0;

            while select tax1099StateSummary
                where tax1099StateSummary.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                // Even case checks onlyStateToPrint, figures if we need federal info on the form, adds first state info
                if (stateCounter mod 2 == 0)
                {
                    if (_onlyStateToPrint != '' || stateCounter > 1)
                    {
                        hideFederal();
                    }
                    else
                    {
                        showFederal();
                    }

                    _tax1099IRSPayerRecTmp.StateTaxWithheld1 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId1 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId = tax1099StateSummary.StateId;
                }
                // Odd case adds second state, does insert, and sets up for next pass
                else
                {
                    _tax1099IRSPayerRecTmp.StateTaxWithheld2 = tax1099StateSummary.StateIncomeTax;
                    _tax1099IRSPayerRecTmp.StateTaxId2 = VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    _tax1099IRSPayerRecTmp.StateId2 = tax1099StateSummary.StateId;

                    doInsert();
                    _tax1099IRSPayerRecTmp.clear();
                    showDefaults();
                }

                stateCounter++;
            }

            // No state information means we just do federal
            if (stateCounter == 0 && _onlyStateToPrint == '')
            {
                showFederal();
                doInsert();
            }
            // Had state records, ended on an even, do the final insert
            else if (stateCounter mod 2 == 1)
            {
                doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        Tax1099Amount tax1099Amount = Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Amount;

        switch (Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box)
        {
            case O1:
                if (_localTax1099Summary.SettleTax1099Amount > tax1099Amount)
                {
                    _tax1099IRSPayerRec.Amount1 += _localTax1099Summary.SettleTax1099Amount;
                }
                else
                {
                    throw(error(strFmt("@SYS323408", tax1099Amount)));
                }
                break;

            case O2:
                _tax1099IRSPayerRec.Amount2 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O3:
                _tax1099IRSPayerRec.Amount3 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O4:
                _tax1099IRSPayerRec.Amount4 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O5:
                _tax1099IRSPayerRec.AmountA += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O6:
                _tax1099IRSPayerRec.AmountB += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O8:
                if (_localTax1099Summary.SettleTax1099Amount > tax1099Amount)
                {
                    _tax1099IRSPayerRec.Amount6 += _localTax1099Summary.SettleTax1099Amount;
                }
                else
                {
                    throw(error(strFmt("@SYS323408", tax1099Amount)));
                }
                break;

            case O9:
                _tax1099IRSPayerRec.Amount7 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O10:
                _tax1099IRSPayerRec.Amount5 += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O11:
                _tax1099IRSPayerRec.AmountC += _localTax1099Summary.SettleTax1099Amount;
                break;

            case O14:
                break; // This is the state tax withheld value and is sourced elsewhere

            default:
                _localTax1099Summary.IRSReportable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O1, 'Original Issue discount for period', 10, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O2, 'Other periodic interest', 0, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O3, 'Early withdrawal penalty', 0, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O4, 'Federal income tax withheld', 0, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O5, 'Market Discount', 10, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O6, 'Acquisition premium', 0.01, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O8, 'Original issue discount on U.S. Treasury', 10, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O9, 'Investment expenses', 0, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O10, 'Bond premium', 0.01, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O11, 'Tax-exempt OID', 0.01, Tax1099Type::F1099OID, _forceUpdate);
        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, O14, 'State tax withheld', 0.01, Tax1099Type::F1099OID, _forceUpdate);
        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        switch (_tax1099Fields.Tax1099Box)
        {
            case O1:
                _localIRSPayerRec.Amount1 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O2:
                _localIRSPayerRec.Amount2 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O3:
                _localIRSPayerRec.Amount3 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O4:
                _localIRSPayerRec.Amount4 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O5:
                _localIRSPayerRec.AmountA += _tax1099Summary.SettleTax1099Amount;
                break;

            case O6:
                _localIRSPayerRec.AmountB += _tax1099Summary.SettleTax1099Amount;
                break;

            case O8:
                _localIRSPayerRec.Amount6 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O9:
                _localIRSPayerRec.Amount7 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O10:
                _localIRSPayerRec.Amount5 += _tax1099Summary.SettleTax1099Amount;
                break;

            case O11:
                _localIRSPayerRec.AmountC += _tax1099Summary.SettleTax1099Amount;
                break;

            case O14: // state tax withheld
                _localIRSPayerRec.StateTaxWitheld += _tax1099Summary.SettleTax1099Amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalIssueDiscount</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier originalIssueDiscount()
    {
        return Tax1099FieldIdentifier::construct(O1, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherPeriodicInterest</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier otherPeriodicInterest()
    {
        return Tax1099FieldIdentifier::construct(O2, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>earlyWithdrawalPenalty</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier earlyWithdrawalPenalty()
    {
        return Tax1099FieldIdentifier::construct(O3, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(O4, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marketDiscount</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier marketDiscount()
    {
        return Tax1099FieldIdentifier::construct(O5, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionPremium</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier acquisitionPremium()
    {
        return Tax1099FieldIdentifier::construct(O6, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalIssueDiscountTreasuryObligations</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier originalIssueDiscountTreasuryObligations()
    {
        return Tax1099FieldIdentifier::construct(O8, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>investmentExpenses</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier investmentExpenses()
    {
        return Tax1099FieldIdentifier::construct(O9, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondPremium</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier bondPremium()
    {
        return Tax1099FieldIdentifier::construct(O10, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptOID</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier taxExemptOID()
    {
        return Tax1099FieldIdentifier::construct(O11, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier stateTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(O14, Tax1099Type::F1099OID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>