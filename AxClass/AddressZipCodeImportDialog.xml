<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressZipCodeImportDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AddressZipCodeImportDialog extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase                               dialog;

    DialogField                                 dialogCountryRegion;
    LogisticsAddrZipCodeImportCountryRegion     addressZipCodeImportCountryRegion = LogisticsAddrZipCodeImportCountryRegion::None;

    // <GCN> <GJP>
    DialogField                                 dialogDefinitionGroupName;
    DMFDefinitionGroupName                      definitionGroupName;
    // </GCN> </GJP>

    Filename                                    filename;
    System.IO.Stream                            fileStream;

    // <GCN> <GJP>
    SharedServiceUnitFileID                     fileID;
    // </GCN> </GJP>

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        addressZipCodeImportCountryRegion,
        // <GCN> <GJP>
        definitionGroupName,
        // </GCN> </GJP>
        filename
    #endmacro

    private const str OkButtonName = 'OkButton';
    private const str FileUploadName = 'FileUpload';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of the <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Not all classes can be run two
    ///    times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    ///    have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup      dialogGroup;
        FormBuildControl formBuildControl;
        FileUploadBuild  dialogFileUpload;

        dialog = new DialogRunbase(AddressZipCodeImportDialog::description(), this);

        dialogCountryRegion = dialog.addFieldValue(enumStr(LogisticsAddrZipCodeImportCountryRegion), addressZipCodeImportCountryRegion);

        // <GCN> <GJP>
        dialogCountryRegion.registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(AddressZipCodeImportDialog, countryRegionModified),
            this);

        dialogDefinitionGroupName = dialog.addFieldValue(extendedTypeStr(DMFDefinitionGroupName), definitionGroupName);
        dialogDefinitionGroupName.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AddressZipCodeImportDialog, lookUpDefinitionGroup),
            this);

        if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::China ||
            addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::Japan)
        {
            dialogDefinitionGroupName.enabled(true);
        }
        else
        {
            dialogDefinitionGroupName.value('');
            dialogDefinitionGroupName.enabled(false);
        }
        // </GCN> </GJP>

        dialogGroup = dialog.addGroup(AddressZipCodeImportDialog::description());
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());

        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), FileUploadName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the dialog Ok button until the file upload is complete.
    /// </summary>
    /// <param name="_dialog">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FileUpload fileUpload = this.getFormControl(_dialog, FileUploadName);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, FileUploadName);
        
        FileUploadTemporaryStorageResult uploadResult = fileUpload.getFileUploadResult();

        if (uploadResult.getUploadStatus())
        {
            fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);
            filename = fileUpload.fileName();
            this.setDialogOkButtonEnabled(dialog, true);
        }
        else
        {
            warning(uploadResult.getLogMessage());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        addressZipCodeImportCountryRegion = dialogCountryRegion.value();

        // <GCN> <GJP>
        definitionGroupName = dialogDefinitionGroupName.value();
        // </GCN> </GJP>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the country region is china, the definition group is visible, otherwise, invisible
    /// </summary>
    /// <param name = "_countryRegionControl">country region field.</param>
    /// <returns>whehter the field value has been modified.</returns>
    public boolean countryRegionModified(FormComboBoxControl _countryRegionControl)
    {
        boolean ret = _countryRegionControl.modified();

        // <GCN> <GJP>
        if (_countryRegionControl.valueStr() == enum2Str(LogisticsAddrZipCodeImportCountryRegion::China) ||
            _countryRegionControl.valueStr() == enum2Str(LogisticsAddrZipCodeImportCountryRegion::Japan))
        {
            dialogDefinitionGroupName.enabled(true);
        }
        else
        {
            dialogDefinitionGroupName.value('');
            dialogDefinitionGroupName.enabled(false);
        }
        // </GCN> </GJP>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpDefinitionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Looks up the definition group name.
    /// </summary>
    /// <param name="_control">
    ///     The look up control.
    /// </param>
    public void lookUpDefinitionGroup(FormStringControl _control)
    {
        // <GCN>
        if (dialogCountryRegion.value() == LogisticsAddrZipCodeImportCountryRegion::China)
        {
            DataFileImportExportUtils_W::lookUpDefinitionGroup(_control, tableStr(LogisticsAddressZipcodeChinaEntity));
        }
        // </GCN>
        // <GJP>
        else if (dialogCountryRegion.value() == LogisticsAddrZipCodeImportCountryRegion::Japan)
        {
            DataFileImportExportUtils_W::lookUpDefinitionGroup(_control, tableStr(LogisticsAddressZipcodeJapanEntity));
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        FileUpload fileUploadControl = this.getFormControl(dialog, FileUploadName);

        if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::China ||
            addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::Japan)
            {
                FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();

            if (fileUploadResult != null && fileUploadResult.getUploadStatus())
            {
                fileID = fileUploadResult.getFileId();
            }

            // <GCN>
            if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::China)
            {
                DataFileImportExportUtils_W::importDataFromFileToAX(fileID, definitionGroupName, tableStr(LogisticsAddressZipcodeChinaEntity));
            }
            // </GCN>
            // <GJP>
            else if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::Japan)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00002, funcName());

                DataFileImportExportUtils_W::importDataFromFileToAX(fileID, definitionGroupName, tableStr(LogisticsAddressZipcodeJapanEntity), false);
            }
            // </GJP>
        }
        else
        {
            fileStream = fileUploadControl.getUploadedFile(true);

            AddressZipCodeImport addressZipCodeImport = AddressZipCodeImport::newAddressZipCodeImport(addressZipCodeImportCountryRegion,
                                                                                                  filename,
                                                                                                  fileStream,
                                                                                                  NoYes::No);
            addressZipCodeImport.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    <c>false</c>, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, addressZipCodeImportCountryRegion, definitionGroupName, filename] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::None)
        {
            ret = checkFailed("@SYS74694");
        }

        // <GCN>
        if (addressZipCodeImportCountryRegion == LogisticsAddrZipCodeImportCountryRegion::China && !definitionGroupName)
        {
            ret = checkFailed('@DMF1432');
        }
        // </GCN>

        if (!filename)
        {
            ret = checkFailed("@SYS18624");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AddressZipCodeImportDialog construct()
    {
        return new AddressZipCodeImportDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return ("@SYS23933");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AddressZipCodeImportDialog  addressZipCodeImportDialog;
        addressZipCodeImportDialog = AddressZipCodeImportDialog::construct();

        if (addressZipCodeImportDialog.prompt())
        {
            addressZipCodeImportDialog.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>