<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRMAbsenceCode_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(HRMAbsenceCode))]
public final class HRMAbsenceCode_AppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>JmgActivityCostPrice</c>.
    /// </summary>
    /// <returns>
    /// The associated <c>JmgActivityCostPrice</c>.
    /// </returns>
    /// <remarks>
    /// The cost price is fetched as of current date.
    /// </remarks>
    public display JmgActivityCostPrice getCostPrice()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Jmg)))
        {
            return JmgIpcActivityCostPrice::find(this.HrmAbsenceCodeId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())).CostPrice;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HRMAbsenceCode</c> table.
    /// </summary>
    /// <param name = "_jobId">
    /// A job ID.
    /// </param>
    /// <param name = "_forUpdate">
    /// A boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>
    /// A record found in the <c>HRMAbsenceCode</c> table.
    /// </returns>
    public static HRMAbsenceCode findByJobId(JmgJobId _jobId, boolean _forUpdate = false)
    {
        HRMAbsenceCode hrmAbsenceCode;
        hrmAbsenceCode.selectForUpdate(_forUpdate);

        if (_jobId)
        {
            select firstonly hrmAbsenceCode
                where hrmAbsenceCode.JmgJobId == _jobId;
        }

        return hrmAbsenceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next job ID value.
    /// </summary>
    /// <returns>
    /// The next job ID value calculated from the number sequence if defined; otherwise, an empty string..
    /// </returns>
    public static JmgJobId getNextJobId()
    {
        JmgJobId jobId;

        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(JmgJobId));
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference && numberSequenceTable)
        {
            if (!numberSequenceTable.Manual)
            {
                // Auto-generate application number if number sequence is not set to Manual.
                NumberSeq numberSeq = NumberSeq::newGetNumFromId(
                    numberSequenceTable.RecId,
                    true,
                    true,
                    null,
                    false);

                if (numberSeq)
                {
                    jobId = numberSeq.num();
                }
            }
        }

        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlexEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the absence related job id is flex enabled or not.
    /// </summary>
    /// <returns>
    /// true if the absence code is flex enabled.
    /// </returns>
    /// <remarks>
    /// This method is invoked from the shop floor control.
    /// </remarks>
    public boolean isFlexEnabled()
    {
        HRMAbsenceCode hrmAbsenceCode;
        HRMAbsenceCodeGroup hrmAbsenceCodeGroup;

        select firstOnly JmgAbsenceFlex from hrmAbsenceCodeGroup
            join JmgJobId from hrmAbsenceCode
            where hrmAbsenceCodeGroup.hrmAbsenceCodeGroupId == hrmAbsenceCode.hrmAbsenceCodeGroupId
                && hrmAbsenceCode.JmgJobId == this.jmgJobId;

        return (hrmAbsenceCodeGroup && hrmAbsenceCodeGroup.JmgAbsenceFlex);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>