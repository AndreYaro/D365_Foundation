<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertificateDP_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustEntryCertificateDP_DE</c> class is the report data provider class for <c>CustEntryCertificate_DE</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(CustEntryCertificateContract_DE))]
class CustEntryCertificateDP_DE extends SRSReportDataProviderBase
{
    CustEntryCertificateJour_W          entryCertificateJour;
    CustEntryCertificateHeaderTmp_DE    entryCertificateHeaderTmp_DE;
    CustEntryCertificateDetailsTmp_DE   entryCertificateDetailsTmp_DE;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillDetails</Name>
				<Source><![CDATA[
        private void fillDetails()
    {
        QueryRun                        queryRun;
        CustEntryCertificateTrans_W     entryCertificateTrans;

        queryRun = new queryRun(entryCertificateJour.queryEntryCertificateTrans());

        while (queryRun.next())
        {
            entryCertificateTrans = queryRun.get(tableNum(CustEntryCertificateTrans_W));

            EntryCertificateDetailsTmp_DE.clear();
            EntryCertificateDetailsTmp_DE.ItemId        = entryCertificateTrans.ItemId;
            EntryCertificateDetailsTmp_DE.Name          = entryCertificateTrans.Name;
            EntryCertificateDetailsTmp_DE.Qty           = entryCertificateTrans.Qty;
            EntryCertificateDetailsTmp_DE.SalesUnitTxt  = UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(entryCertificateTrans.SalesUnit),
                                                                entryCertificateJour.reportLanguageId());
            EntryCertificateDetailsTmp_DE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
        private void fillHeader()
    {
        CustTable       custTable = custTable::find(entryCertificateJour.CustAccount);
        CompanyInfo     companyInfo = CompanyInfo::find();

        entryCertificateHeaderTmp_DE.clear();
        entryCertificateHeaderTmp_DE.EntryCertificateId         = entryCertificateJour.EntryCertificateId;
        entryCertificateHeaderTmp_DE.CompanyName                = companyInfo.Name();
        entryCertificateHeaderTmp_DE.CompanyAddress             = companyInfo.postalAddress().Address;
        entryCertificateHeaderTmp_DE.CompanyPhone               = companyInfo.phone();
        entryCertificateHeaderTmp_DE.CompanyTeleFax             = companyInfo.teleFax();
        entryCertificateHeaderTmp_DE.CompanyGiro                = companyInfo.Giro;
        entryCertificateHeaderTmp_DE.CompanyCoRegNum            = companyInfo.CoRegNum;
        entryCertificateHeaderTmp_DE.CompanyEnterpriseNumber    = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, DateTimeUtil::date(entryCertificateJour.createdDateTime));
        entryCertificateHeaderTmp_DE.CompanyLogo                = FormLetter::companyLogo();
        entryCertificateHeaderTmp_DE.ReportTitle                = "@SYS4004149";
        entryCertificateHeaderTmp_DE.DeliveryDocumentDesc       = entryCertificateJour.deliveryDocumentDesc();

        entryCertificateHeaderTmp_DE.CustAddress                = custTable.email() ?
                                                                  strFmt("@SYS330953", strRemoveCr(custTable.name()), strRemoveCr(custTable.address()), custTable.email()) :
                                                                  strFmt("@SYS26868",  strRemoveCr(custTable.name()), strRemoveCr(custTable.address()));

        entryCertificateHeaderTmp_DE.DeliveryAddress            = strRemoveCr(LogisticsPostalAddress::findRecId(entryCertificateJour.DeliveryPostalAddress).Address);
        entryCertificateHeaderTmp_DE.IssueDate                  = DateTimeUtil::date(entryCertificateJour.createdDateTime);

        entryCertificateHeaderTmp_DE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryCertificateDetailsTmp_DE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the temporary <c>EntryCertificateDetailsTmp_DE</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary <c>EntryCertificateDetailsTmp_DE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('EntryCertificateDetailsTmp_DE')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustEntryCertificateDetailsTmp_DE getEntryCertificateDetailsTmp_DE()
    {
        select * from entryCertificateDetailsTmp_DE;
        return entryCertificateDetailsTmp_DE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryCertificateHeaderTmp_DE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the temporary <c>EntryCertificateHeaderTmp_DE</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary <c>EntryCertificateHeaderTmp_DE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('EntryCertificateHeaderTmp_DE')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustEntryCertificateHeaderTmp_DE getEntryCertificateHeaderTmp_DE()
    {
        select * from entryCertificateHeaderTmp_DE;
        return entryCertificateHeaderTmp_DE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        CustEntryCertificateContract_DE contract = this.parmDataContract() as CustEntryCertificateContract_DE;

        entryCertificateJour = CustEntryCertificateJour_W::findRecId(contract.parmRecordId());
        this.fillHeader();
        this.fillDetails();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>