<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_ExpenseJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetTransactionLine_ExpenseJournal</c> class is used to hold the budget transaction
///    information associated with the expense journal.
/// </summary>
class ProjBudgetTransactionLine_ExpenseJournal extends ProjBudgetTransactionLine
{
    LedgerJournalTrans          ledgerJournalTrans;
    LedgerJournalTrans_Project  ledgerJournalTrans_Project;
    CurrencyCode                salesCurrencyCode, costCurrencyCode;
    ExchRate                    exchangeRate;
    ProjCategoryId              projCategoryId;
    ProjId                      projId;
    TransDate                   transDate;
    ProjTransIdBase             projTransId;
    ProjActivityNumber          activityNumber;
    ProjLinePropertyId          linePropertyId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total cost amount of the transaction in the transaction currency.
    /// </summary>
    /// <returns>
    ///    The total cost amount.
    /// </returns>
    public CostAmount costAmount()
    {
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of cost amount.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    public CurrencyCode costAmountCurrencyCode()
    {
        if (ledgerJournalTrans.CurrencyCode != "")
        {
            return ledgerJournalTrans.CurrencyCode;
        }
        else
        {
            return costCurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the exchange rate of the transaction.
    /// </summary>
    /// <returns>
    ///    The exchange rate.
    /// </returns>
    public ExchRate exchangeRate()
    {
        return exchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    private void initValues()
    {
        costAmount                  = CurrencyExchangeHelper::amount(ledgerJournalTrans_Project.Qty * ledgerJournalTrans_Project.CostPrice, ledgerJournalTrans.CurrencyCode);
        salesAmount                 = CurrencyExchangeHelper::amount(ledgerJournalTrans_Project.SalesPrice * ledgerJournalTrans_Project.Qty, ledgerJournalTrans_Project.SalesCurrencyId);
        salesCurrencyCode           = ledgerJournalTrans_Project.SalesCurrencyId;
        costCurrencyCode            = ledgerJournalTrans.CurrencyCode;
        projTransId                 = ledgerJournalTrans_Project.TransId;
        projId                      = ledgerJournalTrans_Project.ProjId;
        projCategoryId              = ledgerJournalTrans_Project.CategoryId;
        transDate                   = ledgerJournalTrans_Project.ProjTransDate;
        quantity                    = ledgerJournalTrans_Project.Qty;
        activityNumber              = ledgerJournalTrans_Project.ActivityNumber;
        linePropertyId              = ledgerJournalTrans_Project.LinePropertyId;
        exchangeRate                = ledgerJournalTrans.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return linePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ProjBudgetTransactionLine_ExpenseJournal</c> class.
    /// </summary>
    /// <param name="_common">
    ///    A <c>LedgerJournalTrans</c> or <c>LedgerJournalTrans_Proj</c> table buffer.
    /// </param>
    public void new(Common _common)
    {
        super();

        if (_common.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = _common as LedgerJournalTrans;
            ledgerJournalTrans_Project  = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId);
        }
        else if (_common.TableId == tableNum(LedgerJournalTrans_Project))
        {
            ledgerJournalTrans_Project = _common as LedgerJournalTrans_Project;
            ledgerJournalTrans = ledgerJournalTrans_Project.ledgerJournalTrans();
        }
        else
        {
            throw error("@SYS95118");
        }

        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        if (!prmisDefault(_ledgerJournalTrans))
        {
            ledgerJournalTrans = _ledgerJournalTrans;
            this.initValues();
        }
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project ID.
    /// </returns>
    public ProjId projId()
    {
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales amount of the transaction after currency conversion.
    /// </summary>
    /// <returns>
    ///    The sales amount.
    /// </returns>
    public SalesAmount salesAmount()
    {
        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of the sales amount.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return salesCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction ID.
    /// </returns>
    public ProjTransIdBase transId()
    {
        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the transaction line.
    /// </summary>
    /// <returns>
    ///    A cost type enumeration value.
    /// </returns>
    public ProjTransType transType()
    {
        return ProjTransType::Cost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>