<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesCalcTax_OnlyLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSalesCalcTax_OnlyLine</c> calculates taxes
/// for a specific line.
/// </summary>
class MCRSalesCalcTax_OnlyLine extends SalesCalcTax_Sales
{
    boolean salesLineReturned;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class variable, salesLineReturned to false.
    /// </summary>
    public void initCursor()
    {
        salesLineReturned = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the curser for the makrup header
    /// </summary>
    /// <param name="tableId">
    /// The ID of the table to be passed to the super.
    /// </param>
    /// <param name="recId">
    /// The Id of the record associated with the passed table.
    /// </param>
    public void initCursorMarkupHeader(TableId tableId, RecId recId)
    {
        super(tableId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRSalesCalcTax_OnlyLine</c> class.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record from which this class is instantiated.
    /// </param>
    /// <param name="_specQty">
    /// The specified quantity for which to calculate tax.
    /// </param>
    public void  new(SalesLine     _salesLine,
              SalesUpdate   _specQty)
    {
        super(_salesLine.salesTable(), _specQty);

        salesLine   = _salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates class to utilize line exist variable.
    /// </summary>
    /// <returns>
    ///     The next sales line record.
    /// </returns>
    public Common nextLine()
    {
        lineExist = false;

        if (salesLineReturned)
            return null;

        if (salesLine)
        {
            this.initCursorMarkup(salesLine.TableId, salesLine.RecId);
            lineExist = true;
        }

        salesLineReturned = true;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        protected TradeTotalsIContract parmContract()
    {
        SalesTable salesTableLocal;
        salesTableLocal = SalesTable::findRecId(this.salesTableRecID());
        return SalesTotalsTransContract::newFromSalesTable(salesTableLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new <c>QueryRun</c> object.
    /// </summary>
    /// <returns>
    /// A new <c>QueryRun</c> object.
    /// </returns>
    public QueryRun queryBuild()
    {
        QueryRun    ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>Common</c> object.
    /// </summary>
    /// <param name="transact">
    /// A <c>QueryRun</c> object.
    /// </param>
    /// <returns>
    /// A <c>Common</c> object.
    /// </returns>
    public Common queryGet(QueryRun transact)
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>