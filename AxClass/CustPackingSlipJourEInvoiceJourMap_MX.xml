<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPackingSlipJourEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPackingSlipJourEInvoiceJourMap_MX extends EInvoiceJourBaseMap_MX
{
    CustPackingSlipJour custPackingSlipJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the line instances that are related to the posted document.
    /// </summary>
    public void init()
    {
        super();

        TransportationDocument transDoc = TransportationDocument::find(eInvoiceJour.TransportationDocument);
        transportationAddressMap = EInvoiceCFDIAddressMap::constructFromPostalAddress(LogisticsPostalAddress::findRecId(transDoc.LoadedPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current CustInvoiceJour
    /// </summary>
    /// <returns>Invoice transaction currency code</returns>
    public CurrencyCode currencyCode()
    {
        return custPackingSlipJour.salesTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it's necessary to create a Complemento node.
    /// </summary>
    /// <returns>
    /// Returns true if it is a Foreign trade; otherwise, false.
    /// </returns>
    public boolean isForeignTrade()
    {
        return eInvoiceJour.CFDIForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it is a temporary export.
    /// </summary>
    /// <returns>
    /// true if it is a temporary export; otherwise, false.
    /// </returns>
    public boolean isTemporaryExport()
    {
        return eInvoiceJour.CFDITemporaryExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the delivery address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the delivery address.</returns>
    protected LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
        return custPackingSlipJour.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the invoice address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the invoice address.</returns>
    protected LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return custPackingSlipJour.InvoicePostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    public SalesEndDiscAmount endDiscMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    public ExchRate exchangeRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance variables.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJour</c> record that is used.
    /// </param>
    protected void initCustPackingSlipJour(CustPackingSlipJour _custPackingSlipJour)
    {
        custPackingSlipJour = _custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account for which packing slip created.
    /// </summary>
    /// <returns>
    /// The customer invoiced account.
    /// </returns>
    /// <remarks>
    /// The customer account that is being invoice is related to the current <c>CustPackingSlipJour</c> record.
    /// </remarks>
    public CustVendAC invoiceAccount()
    {
        return custPackingSlipJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order account for which packing slip created.
    /// </summary>
    /// <returns>
    /// The order invoiced account.
    /// </returns>
    /// <remarks>
    /// The order account that is being invoice is related to the current <c>CustPackingSlipJour</c> record.
    /// </remarks>
    [Hookable(false)]
    public CustVendAC orderAccount()
    {
        return custPackingSlipJour.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery date of the current <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// The transaction date of the current <c>CustPackingSlipJour</c> record.
    /// </returns>
    public date invoiceDate()
    {
        return custPackingSlipJour.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packing slip ID of the current <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// The invoice ID of the current <c>CustPackingSlipJour</c> record.
    /// </returns>
    public InvoiceId invoiceId()
    {
        return custPackingSlipJour.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNumberSeq</Name>
				<Source><![CDATA[
    public NumberSequenceTable invoiceNumberSeq()
    {
        NumberSequenceDatatype numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefPackingSlipId().NumberSequenceDatatype);
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        RefRecId packingSlipNumber;
        SalesTable salesTable;
        NumberSequenceReference localNumberSequenceReferenceNum;
        NumberSequenceTable ret;

        select firstonly NumberSequenceGroup from salesTable
            where salesTable.SalesId == custPackingSlipJour.SalesId;

        if (salesTable.NumberSequenceGroup)
        {
            packingSlipNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, salesTable.NumberSequenceGroup).NumberSequenceId;
    
            if (!packingSlipNumber)
            {
                packingSlipNumber = SalesParameters::numRefPackingSlipId().NumberSequenceId;
            }

            ret = NumberSeq::newGetNumFromId(packingSlipNumber).parmNumTableNum(null);
        }
        else
        {
            localNumberSequenceReferenceNum = SalesParameters::numRefPackingSlipId();
            ret = NumberSeq::newGetNum(localNumberSequenceReferenceNum).parmNumTableNum(null);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer name preset on the current <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// The customer invoiced name.
    /// </returns>
    public SATRegistrationName_MX invoicingName()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original document lines to be mapped.
    /// </summary>
    /// <returns>
    /// A list of records.
    /// </returns>
    /// <remarks>
    /// The list is a list of records of the table that will be mapped in the
    /// <c>EInvoiceTransBaseMap_MX</c> concrete class.
    /// </remarks>
    protected List journalLines()
    {
        CustPackingSlipTrans custPackingSlipTrans;
        List journalLines = new List(Types::Record);
    
        while select custPackingSlipTrans
            order by LineNum
            where custPackingSlipTrans.PackingSlipId    == custPackingSlipJour.PackingSlipId
               && custPackingSlipTrans.SalesId          == custPackingSlipJour.SalesId
               && custPackingSlipTrans.DeliveryDate     == custPackingSlipJour.DeliveryDate
               && custPackingSlipTrans.Qty
        {
            journalLines.addEnd(custPackingSlipTrans);
        }
    
        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the terms of payment description that is used by the posted invoice
    /// </summary>
    /// <returns>
    /// The terms of payment description that is used by the posted invoice.
    /// </returns>
    public Description termOfPaymDesc()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RefNum of the current <c>CustPackingSlipJour</c> record
    /// </summary>
    /// <returns>
    /// Returns the RefNum
    /// </returns>
    public RefNum refNum()
    {
        return custPackingSlipJour.RefNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the current <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// The record ID of the packing slip.
    /// </returns>
    public RefRecId refRecId()
    {
        return custPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the invoice document.
    /// </summary>
    /// <returns>The table ID of the invoice document.</returns>
    public tableId refTableId()
    {
        return custPackingSlipJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales type of the current <c>CustPackingSlipJour</c> record.
    /// </summary>
    /// <returns>
    /// A <c>SalesType</c> enumeration value that represents the sales type of the current
    /// <c>CustPackingSlipJour</c> record.
    /// </returns>
    public SalesType salesType()
    {
        return custPackingSlipJour.SalesType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    public Amount subTotal()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    public AmountCur totalAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    public DiscAmount totalDiscountAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    public DiscAmount totalDiscountAmountMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher number that is used for the current <c>CustPackingSlipJour</c> record
    /// </summary>
    /// <returns>
    /// The packing slip voucher number.
    /// </returns>
    public Voucher voucher()
    {
        return custPackingSlipJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate number.
    /// </summary>
    /// <returns>
    /// Certificate number of the document.
    /// </returns>
    public CertificateNumber_MX certificateNumber()
    {
        return eInvoiceJour.CFDICertificateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign tax registration number of the customer.
    /// </summary>
    /// <returns>
    /// The foreign tax registration number.
    /// </returns>
    public LogisticsAddressCountryRegionId foreignTaxRegistration()
    {
        return eInvoiceJour.ForeignTaxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>residenciaFiscal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the country of the proprietary address.
    /// </summary>
    /// <returns>
    /// ISO code.
    /// </returns>
    public LogisticsAddressCountryRegionISOCode residenciaFiscal()
    {
        return eInvoiceJour.FiscalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipping reason code for the invoice.
    /// </summary>
    /// <returns>
    /// Shipping reason code.
    /// </returns>
    public EInvoiceExtCodeId_MX shippingReason()
    {
        return eInvoiceJour.CFDIShippingReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoiceJourBaseMap_MX</c> class.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJour</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of <c>CustPackingSlipJourEInvoiceJourMap_MX</c>
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  EInvoiceJourBaseMap_MX
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>EInvoiceJourBaseMap_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>EInvoiceJourBaseMap_MX</c> class so that it returns
    ///    an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>EInvoiceJourBaseMap_MX</c> class that you want to customize or
    ///    extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps to ensure that your customizations are maintained if the base version of the
    ///  <c>
    ///  EInvoiceJourBaseMap_MX
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    ///  .
    /// </remarks>
    public static CustPackingSlipJourEInvoiceJourMap_MX construct(CustPackingSlipJour _custPackingSlipJour)
    {
        CustPackingSlipJourEInvoiceJourMap_MX packingSlipMap;
        EInvoiceJour_MX eInvoiceJour = EInvoiceJour_MX::findByRef(_custPackingSlipJour.TableId, _custPackingSlipJour.RecId);

        switch (eInvoiceJour.cfdiVersion)
        {
            case EInvoiceCFDIVersion_MX::V3_3:
            case EInvoiceCFDIVersion_MX::V4:
                packingSlipMap = new CustPackingSlipJourEInvoiceJourMap_MX();
                break;

            default:
                throw error("@SYS341183");
        }

        packingSlipMap.initCustPackingSlipJour(_custPackingSlipJour);

        return packingSlipMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddress</Name>
				<Source><![CDATA[
    internal LogisticsPostalAddress emitentPostalAddress()
    {
        LogisticsPostalAddress postalAddress = this.emitentPostalAddressFromInventSite();

        return postalAddress ? postalAddress : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSiteQuery</Name>
				<Source><![CDATA[
    internal Query initInventSiteQuery()
    {
        Query query = super();

        QueryBuildDataSource qbdsInventDim = query.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource qbdsCustPackingSlipTrans = qbdsInventDim.addDataSource(tableNum(CustPackingSlipTrans));
        qbdsCustPackingSlipTrans.relations(true);
        qbdsCustPackingSlipTrans.joinMode(JoinMode::ExistsJoin);
        qbdsCustPackingSlipTrans.addRange(fieldNum(CustPackingSlipTrans, PackingSlipId)).value(queryValue(custPackingSlipJour.PackingSlipId));
        qbdsCustPackingSlipTrans.addRange(fieldNum(CustPackingSlipTrans, SalesId)).value(queryValue(custPackingSlipJour.SalesId));
        qbdsCustPackingSlipTrans.addRange(fieldNum(CustPackingSlipTrans, DeliveryDate)).value(queryValue(custPackingSlipJour.DeliveryDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of electronic invoice.
    /// </summary>
    /// <returns>
    /// The type of electronic invoice.
    /// </returns>
    public str journalType()
    {
        return EInvoiceJourBaseMap_MX::trasladoSymbol();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCartaPorteUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transportation card must be added.
    /// </summary>
    /// <returns>true if transportation card must be added to CFDI document; otherwise, false </returns>
    public boolean isCartaPorteUsed()
    {
        return eInvoiceJour.TransCardIncluded == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permissionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns permission type associated with transportation note.
    /// </summary>
    /// <returns>Permission type.</returns>
    public EInvoiceExtCodeId_MX permissionType()
    {
        return eInvoiceJour.PermissionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permissionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns permission id associated with transportation note.
    /// </summary>
    /// <returns>Permission id.</returns>
    public TransPermissionID_MX permissionID()
    {
        return eInvoiceJour.PermissionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distanceTraveled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns distance of transportation.
    /// </summary>
    /// <returns>Distance in kilometers.</returns>
    public WHSDistance distanceTraveled()
    {
        return eInvoiceJour.TravelDistance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeTraveled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns time of transportation.
    /// </summary>
    /// <returns>Time in hours.</returns>
    public WHSActualTime timeTraveled()
    {
        return eInvoiceJour.TravelTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insuranceVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns insurance vendor name.
    /// </summary>
    /// <returns>Account name</returns>
    public DirPartyName insuranceVendor()
    {
        return eInvoiceJour.InsuranceVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insurancePolicyNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns insurance policy number.
    /// </summary>
    /// <returns>Policy number</returns>
    public AssetInsurancePolicyNum insurancePolicyNum()
    {
        return eInvoiceJour.InsurancePolicyNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns truck configuration.
    /// </summary>
    /// <returns>Truck configuration.</returns>
    public EInvoiceExtCodeId_MX truckConfig()
    {
        return eInvoiceJour.TruckConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns truck number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber truckSerialNum()
    {
        return eInvoiceJour.TruckSerialNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckModelYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck model year.
    /// </summary>
    /// <returns>Truck model year.</returns>
    public AssetModelYear truckModelYear()
    {
        return eInvoiceJour.TruckYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer1Config</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer configuration.
    /// </summary>
    /// <returns>Trailer configuration.</returns>
    public EInvoiceExtCodeId_MX trailer1Config()
    {
        return eInvoiceJour.TrailerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer1SerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber trailer1SerialNum()
    {
        return eInvoiceJour.TrailerNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer2Config</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer configuration.
    /// </summary>
    /// <returns>Trailer configuration.</returns>
    public EInvoiceExtCodeId_MX trailer2Config()
    {
        return eInvoiceJour.AdditionalTrailerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailer2SerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns trailer number.
    /// </summary>
    /// <returns>Serial number.</returns>
    public AssetSerialNumber trailer2SerialNum()
    {
        return eInvoiceJour.AdditionalTrailerNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker record.
    /// </summary>
    /// <returns><c>HCMWorker</c> record assigned on transportation.</returns>
    public RefRecId worker1()
    {
        return eInvoiceJour.Worker1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker name.
    /// </summary>
    /// <returns>Worker name.</returns>
    public Name worker1Name()
    {
        return eInvoiceJour.Worker1Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker record.
    /// </summary>
    /// <returns><c>HCMWorker</c> record assigned on transportation.</returns>
    public RefRecId worker2()
    {
        return eInvoiceJour.Worker2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker name.
    /// </summary>
    /// <returns>Worker name.</returns>
    public Name worker2Name()
    {
        return eInvoiceJour.Worker2Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1NationalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's national id.
    /// </summary>
    /// <returns>First worker's national id.</returns>
    public HcmIdentificationNumber worker1NationalId()
    {
        return eInvoiceJour.Worker1NationalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1DriverLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's driver license.
    /// </summary>
    /// <returns>First worker's driver license.</returns>
    public HcmIdentificationNumber worker1DriverLicense()
    {
        return eInvoiceJour.Worker1DriverLicense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1ForeignId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's foreign id.
    /// </summary>
    /// <returns>First worker's foreign id.</returns>
    public HcmIdentificationNumber worker1ForeignId()
    {
        return eInvoiceJour.Worker1ForeignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker1CountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns first worker's country region code.
    /// </summary>
    /// <returns>First worker's country region code.</returns>
    public LogisticsAddressCountryRegionId worker1CountryRegion()
    {
        return eInvoiceJour.Worker1CountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2NationalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's national id.
    /// </summary>
    /// <returns>Second worker's national id.</returns>
    public HcmIdentificationNumber worker2NationalId()
    {
        return eInvoiceJour.Worker2NationalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2DriverLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's driver license.
    /// </summary>
    /// <returns>Second worker's driver license.</returns>
    public HcmIdentificationNumber worker2DriverLicense()
    {
        return eInvoiceJour.Worker2DriverLicense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2ForeignId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's foreign id.
    /// </summary>
    /// <returns>Second worker's foreign id.</returns>
    public HcmIdentificationNumber worker2ForeignId()
    {
        return eInvoiceJour.Worker2ForeignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker2CountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns second worker's country region code.
    /// </summary>
    /// <returns>Second worker's country region code.</returns>
    public LogisticsAddressCountryRegionId worker2CountryRegion()
    {
        return eInvoiceJour.Worker2CountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns pick up spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX pickUpSpot()
    {
        return eInvoiceJour.PickUpSpot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickUpMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns pick up mode.
    /// </summary>
    /// <returns>Spot mode.</returns>
    public EInvoiceExtCodeId_MX pickUpMode()
    {
        return eInvoiceJour.PickUpMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffSpot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns drop off spot.
    /// </summary>
    /// <returns>Spot id.</returns>
    public EInvoiceSiteID_MX dropOffSpot()
    {
        return eInvoiceJour.DropOffSpot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns drop off mode.
    /// </summary>
    /// <returns>Spot mode.</returns>
    public EInvoiceExtCodeId_MX dropOffMode()
    {
        return eInvoiceJour.DropOffMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoice quantity.
    /// </summary>
    /// <returns>Quantity.</returns>
    public Qty qty()
    {
        return custPackingSlipJour.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount truckOwner()
    {
        return eInvoiceJour.VehicleOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailerOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount trailerOwner()
    {
        return eInvoiceJour.TrailerOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalTrailerOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Additional trailer owner.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount additionalTrailerOwner()
    {
        return eInvoiceJour.AdditionalTrailerOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truckTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Truck tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount truckTenant()
    {
        return eInvoiceJour.VehicleTenant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trailerTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount trailerTenant()
    {
        return eInvoiceJour.TrailerOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalTrailerTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Additional trailer tenant.
    /// </summary>
    /// <returns>Vendor account.</returns>
    public VendAccount additionalTrailerTenant()
    {
        return eInvoiceJour.AdditionalTrailerTenant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transportation date and time.
    /// </summary>
    /// <returns>Date and time of load.</returns>
    [Hookable(false)]
    public utcdatetime transportationDateTime()
    {
        return DateTimeUtil::applyTimeZoneOffset(TransportationDocument::find(eInvoiceJour.TransportationDocument).LoadedDateTime, this.documentTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the current logistics postal address.
    /// </summary>
    /// <returns>The street of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStreet transportationStreet()
    {
        return transportationAddressMap.parmStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the streetNumber of the posted document.
    /// </summary>
    /// <returns>The streetNumber of the posted document.</returns>
    [Hookable(false)]
    public LogisticsAddressStreetNumber transportationStreetNumber()
    {
        return transportationAddressMap.parmStreetNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the posted document.
    /// </summary>
    /// <returns>The BuildingComplement of the posted document.</returns>
    [Hookable(false)]
    public LogisticsAddressBuildingCompliment transportationBuildingComplement()
    {
        return transportationAddressMap.parmBuildingComplement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation county name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation county name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStateId transportationCounty()
    {
        return transportationAddressMap.parmCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation county name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation county name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountyId transportationCountyId()
    {
        return transportationAddressMap.parmCountyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation city of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation city of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCityName transportationCity()
    {
        return transportationAddressMap.parmCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation city key of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation city key of the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressCityKey transportationCityKey()
    {
        return transportationAddressMap.parmCityKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation state of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation state of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressStatename transportationState()
    {
        return transportationAddressMap.parmState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation country region name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressCountryRegionShortName transportationCountryRegion()
    {
        return transportationAddressMap.parmCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation country region id of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The transportation country region id of the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressCountryRegionId transportationCountryRegionId()
    {
        return transportationAddressMap.parmCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation state ID of the current logistics postal address.
    /// </summary>
    /// <returns>
    /// The transportation state ID that is related to the current logistics postal address.
    /// </returns>
    [Hookable(false)]
    public LogisticsAddressStatename transportationStateId()
    {
        return transportationAddressMap.parmStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation ZIP code of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation ZIP code of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressZipCodeId transportationZipCode()
    {
        return transportationAddressMap.parmZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportationDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transportation district name of the current logistics postal address.
    /// </summary>
    /// <returns>The transportation district name of the current logistics postal address.</returns>
    [Hookable(false)]
    public LogisticsAddressDistrictName transportationDistrictName()
    {
        return transportationAddressMap.parmDistrictName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the code of the weight unit.
    /// </summary>
    /// <returns>Weight unit.</returns>
    public EInvoiceExtCodeId_MX weightUnit()
    {
        return eInvoiceJour.WeightUnit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>