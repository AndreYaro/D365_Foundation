<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostSales_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PackingSlip)]
class InterCompanyPostSales_PackingSlip extends InterCompanyPostSales
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        DocumentStatus  documentStatus;

        if (salesTable.ProjId
        &&  salesTable.SalesType == SalesType::ItemReq)
        {
            documentStatus = DocumentStatus::ProjectPackingSlip;
        }
        else
        {
            documentStatus = DocumentStatus::PackingSlip;
        }

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    public void formLetterUpdate()
    {
        PurchFormLetter_PackingSlip purchFormLetter_PackingSlip = this.fromFormLetter() as PurchFormLetter_PackingSlip;
        SalesFormLetter_PackingSlip salesFormLetter_PackingSlip = this.toFormLetter() as SalesFormLetter_PackingSlip;
        CustPackingSlipJour         custPackingSlipJour;
        TradePackingSlipJourChain   tradePackingSlipJourChain;

        if (purchFormLetter_PackingSlip.isVersioningCorrectionOrCancel())
        {
            select firstonly custPackingSlipJour
            exists join tradePackingSlipJourChain
                where tradePackingSlipJourChain.VendPackingSlipJour == purchFormLetter_PackingSlip.parmCallerTable().RecId
                   && tradePackingSlipJourChain.CustPackingSlipJour == custPackingSlipJour.RecId;

            salesFormLetter_PackingSlip.parmCallerTable(custPackingSlipJour);
            salesFormLetter_PackingSlip.parmAccountingDate(purchFormLetter_PackingSlip.parmAccountingDate());
            salesFormLetter_PackingSlip.parmVersionDateTime(purchFormLetter_PackingSlip.parmVersionDateTime());
        }

        formletterPrintout = interCompanyJour.interCompanyEndpointActionPolicy().PrintSalesPackingslip;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromParmId</Name>
				<Source><![CDATA[
    public ParmId fromParmId()
    {
        if (this.fromFormLetter().isVersioningCorrectionOrCancel())
        {
            return (select firstonly vendPackingSlipVersion
                        order by VersionDateTime desc
                        where vendPackingSlipVersion.VendPackingSlipJour == this.fromFormLetter().parmCallerTable().RecId).ParmId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetterNew</Name>
				<Source><![CDATA[
    public FormLetterServiceController toFormLetterNew()
    {
        toFormLetter = super();

        // Ensure we don't re-use parmId from ICSO for OSO if saved in global cache on company level, as this will break intra-company chain posting where OSO and ICSO are in same company
        toFormLetter.parmId('');

        return toFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForSO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    The sales order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the packing slip that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the packing slip that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForSO(SalesTable _salesTable, Num _docNum, TransDate _transDate)
    {
        InterCompanyPostSales_PackingSlip::interCompanyMarkupAllocation(_salesTable,_docNum,_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the allocation of miscellaneous charges on an intercompany sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    The sales order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the packing slip that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the packing slip that triggers the allocation.
    /// </param>
    internal static void interCompanyMarkupAllocation(salesTable _salesTable, Num _docNum, TransDate _transDate)
    {
        MarkupAllocation                    markupAllocation;
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy = _salesTable.interCompanyEndpointActionPolicy();

        markupAllocation = MarkupAllocation::newMarkupAllocation(_salesTable);
        markupAllocation.parmAllocateAfter(interCompanyEndpointActionPolicy.MarkupAllocateAfter);
        markupAllocation.parmAllocateInventoried(interCompanyEndpointActionPolicy.MarkupInventoriedOnly);
        markupAllocation.parmInterCompanyCompanyId(_salesTable.InterCompanyCompanyId);
        markupAllocation.parmInterCompanyDirectDelivery(_salesTable.InterCompanyDirectDelivery);
        markupAllocation.parmSkipWarning(true);
        markupAllocation.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>