<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymentByDateEventHandler_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles <c>BankPaymentByDate</c> query events to apply localization changes for Japan.
/// </summary>
internal class BankPaymentByDateEventHandler_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BankPaymentByDate_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// This handler method expands the query selection range for Japan to include transactions
    /// with positive amount value if they represent payment fee covered by vendor.
    /// </summary>
    /// <param name = "_args">Event args.</param>
    [PostHandlerFor(queryStr(BankPaymentByDate), queryMethodStr(BankPaymentByDate, init))]
    internal static void BankPaymentByDate_Post_init(XppPrePostArgs _args)
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            Query query = _args.getThis().query();
            
            QueryBuildDataSource dsBankAccountTrans = query.dataSourceTable(tableNum(BankAccountTrans));

            QueryBuildDataSource dsLedgerJournalTrans = query.dataSourceTable(tableNum(LedgerJournalTrans));

            QueryBuildDataSource dirPartyTableDS = query.dataSourceTable(tableNum(DirPartyTable));

            if (dirPartyTableDS != null)
            {
                QueryBuildDataSource dsCustVendPaymJournalFee = dirPartyTableDS.addDataSource(tableNum(CustVendPaymJournalFee));
                dsCustVendPaymJournalFee.joinMode(JoinMode::OuterJoin);
                dsCustVendPaymJournalFee.fetchMode(QueryFetchMode::One2One);
                dsCustVendPaymJournalFee.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(CustVendPaymJournalFee, FeeTransRecId), dsLedgerJournalTrans.name());
                dsCustVendPaymJournalFee.addSelectionField(fieldNum(CustVendPaymJournalFee, TableId));

                QueryBuildRange range = dsBankAccountTrans.rangeField(fieldNum(BankAccountTrans, DataAreaId));
                range.value(strfmt(
                    '((%1.%2 != %3) || ((%1.%4 == %5) && (%1.%6 == %7) && ((%1.%8 < %9) || (%10.%11 == %12))))',
                    dsBankAccountTrans.name(),
                    fieldStr(BankAccountTrans, ChequeNum),
                    queryValue(''),
                    fieldStr(BankAccountTrans, DepositNum),
                    queryValue(''),
                    fieldStr(BankAccountTrans, Cancel),
                    queryValue(enum2int(NoYes::No)),
                    fieldStr(BankAccountTrans, AmountCur),
                    queryValue(0.00),
                    dsCustVendPaymJournalFee.name(),
                    fieldStr(CustVendPaymJournalFee, IsPaymFeeCoveredByVendor_JP),
                    queryValue(enum2int(NoYes::Yes))));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>