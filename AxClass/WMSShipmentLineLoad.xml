<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsShipmentLineLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSShipmentLineLoad</c> class handles the load operation by updating shipment lines to have
///    a status of loaded.
/// </summary>
class WmsShipmentLineLoad implements WMSOrderTransMultiUpdateHandleable
{
    Counter     linesToUpdate;
    Map         wmsOrderTransMoveQtyMap;    //Key: recId, value: qty to be moved
    Map         wmsOrderTransMoveCWQtyMap;  //Key: recId, value: CW qty to be moved
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSplitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits the <c>WMSOrderTrans</c> record if only part of its quantity
    ///    (and its CW quantity when applicable) should be loaded.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSOrderTrans</c> record that should be loaded.
    /// </param>
    /// <remarks>
    ///    The warehouse management order transaction is split only if part of its quantity should be moved.
    /// </remarks>
    protected void checkSplitTrans(WMSOrderTrans _wmsOrderTrans)
    {
        // If this method is updated, the functionality in the method of the same name in
        // the other WMSShipmentLine* classes may also need to be updated.

        InventQty       qtyToMove;
        PdsCWInventQty  cwQtyToMove;

        if (wmsOrderTransMoveQtyMap && wmsOrderTransMoveQtyMap.exists(_wmsOrderTrans.RecId))
        {
            qtyToMove = wmsOrderTransMoveQtyMap.lookup(_wmsOrderTrans.RecId);
            if (qtyToMove && _wmsOrderTrans.Qty > qtyToMove)
            {
                if (wmsOrderTransMoveCWQtyMap && wmsOrderTransMoveCWQtyMap.exists(_wmsOrderTrans.RecId))
                {
                    cwQtyToMove = wmsOrderTransMoveCWQtyMap.lookup(_wmsOrderTrans.RecId);
                    if (cwQtyToMove && _wmsOrderTrans.PdsCWQty > cwQtyToMove)
                    {
                        _wmsOrderTrans.split(_wmsOrderTrans.Qty - qtyToMove,
                                             _wmsOrderTrans.PdsCWQty - cwQtyToMove);
                    }
                }
                else
                {
                    _wmsOrderTrans.split(_wmsOrderTrans.Qty - qtyToMove);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinesToUpdate</Name>
				<Source><![CDATA[
        public Counter parmLinesToUpdate(Counter _linesToUpdate = linesToUpdate)
    {
        linesToUpdate = _linesToUpdate;
        return linesToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsOrderTransMoveCWQtyMap</Name>
				<Source><![CDATA[
        public Map parmWmsOrderTransMoveCWQtyMap(Map _wmsOrderTransMoveCWQtyMap = wmsOrderTransMoveCWQtyMap)
    {
        wmsOrderTransMoveCWQtyMap = _wmsOrderTransMoveCWQtyMap;
        return wmsOrderTransMoveCWQtyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsOrderTransMoveQtyMap</Name>
				<Source><![CDATA[
        public Map parmWmsOrderTransMoveQtyMap(Map _wmsOrderTransMoveQtyMap = wmsOrderTransMoveQtyMap)
    {
        wmsOrderTransMoveQtyMap = _wmsOrderTransMoveQtyMap;
        return wmsOrderTransMoveQtyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWMSOrderTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>WMSorderTrans</c> record based on the selections of the user.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSorderTrans</c> record that should be updated.
    /// </param>
    void updateWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        if (_wmsOrderTrans.canBeLoaded() && wmsOrderTransMoveQtyMap.exists(_wmsOrderTrans.RecId))
        {
            this.checkSplitTrans(_wmsOrderTrans);//split trans if needed

            _wmsOrderTrans.wmsOrderTransType().load();

            linesToUpdate--;

            if (!linesToUpdate)
            {
                _wmsOrderTrans.wmsShipment(true).setStatus(NoYes::No, NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static WMSShipmentLineLoad construct()
    {
        return new WMSShipmentLineLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSelectedLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the load operations for all selected <c>WMSOrderTrans</c> records.
    /// </summary>
    /// <param name="_wmsOrderTransMap">
    ///    A map that has record IDs as keys and containers with an order ID and a record version as the value.
    /// </param>
    /// <param name="_wmsOrderTransMoveQtyMap">
    ///    A map of record IDs as keys and the quantities that should be moved as values.
    /// </param>
    /// <param name="_wmsOrderTransMoveCWQtyMap">
    ///    A map of record IDs as keys and the catch weight quantities that should be moved as values; optional.
    /// </param>
    public static void loadSelectedLines(Map _wmsOrderTransMap,        //Key: recId, value: wmsOrderId : used to hit index on select
                                                Map _wmsOrderTransMoveQtyMap, //Key: recId, value: qty to be loaded
                                                Map _wmsOrderTransMoveCWQtyMap = null)  //Key: recId, value: CW qty to be loaded
    {
        WMSShipmentLineLoad     wmsShipmentLineLoad = WMSShipmentLineLoad::construct();

        if (!_wmsOrderTransMap || !_wmsOrderTransMoveQtyMap)
        {
            return;
        }

        wmsShipmentLineLoad.parmLinesToUpdate(_wmsOrderTransMap.elements());
        wmsShipmentLineLoad.parmWmsOrderTransMoveQtyMap(_wmsOrderTransMoveQtyMap);
        wmsShipmentLineLoad.parmWmsOrderTransMoveCWQtyMap(_wmsOrderTransMoveCWQtyMap);

        WMSOrderTrans::loopWMSOrderTransMulti(_wmsOrderTransMap.pack(),wmsShipmentLineLoad);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates all the shipment lines with the status of staged on the specified shipment to the status of
    ///    loaded.
    /// </summary>
    /// <param name="_wmsShipmentId">
    ///    The shipment ID that is used to filter the shipment lines that should be updated.
    /// </param>
    /// <remarks>
    ///    This method should be used when the whole shipment must be loaded at the same time. The status
    ///    fields on the shipment will be updated also.
    /// </remarks>
    public static void loadShipment(WMSShipmentId _wmsShipmentId)
    {
        WMSOrderTrans   wmsOrderTrans;

        ttsbegin;
        update_recordset wmsOrderTrans
            setting ExpeditionStatus = WMSExpeditionStatus::Loaded
            where wmsOrderTrans.ShipmentId       == _wmsShipmentId
               && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged;

        WMSShipment::find(_wmsShipmentId,true).setStatus(NoYes::No, NoYes::No);
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>