<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateCompleter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMixedLicensePlateCompleter</c> class is responsible for completing the mixed license plate.
/// </summary>
internal final class WHSMixedLicensePlateCompleter
{
    private WHSInstrumentationLogger instrumentationLogger;

    private WHSMixedLicensePlateReceipt mixedLicensePlateReceipt;
    private UserId userId;
    private WHSDispositionCode dispositionCode;
    private WHSRFMenuItemTable mixedLicensePlateRFMenuItem;
    private boolean mustUpdateOutboundLoadLineWorkCreatedQty = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicensePlateIdAndUser</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateCompleter newFromLicensePlateIdAndUser(WHSLicensePlateId _licensePlateId, UserId _userId)
    {
        WHSMixedLicensePlateCompleter completer = new WHSMixedLicensePlateCompleter();
        completer.mixedLicensePlateReceipt = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_licensePlateId, true);
        completer.userId = _userId;

        return completer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    internal WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = dispositionCode)
    {
        dispositionCode = _dispositionCode;

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustUpdateOutboundLoadLineWorkCreatedQty</Name>
				<Source><![CDATA[
    internal boolean parmMustUpdateOutboundLoadLineWorkCreatedQty(boolean _mustUpdateOutboundLoadLineWorkCreatedQty = mustUpdateOutboundLoadLineWorkCreatedQty)
    {
        mustUpdateOutboundLoadLineWorkCreatedQty = _mustUpdateOutboundLoadLineWorkCreatedQty;

        return mustUpdateOutboundLoadLineWorkCreatedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeMixedLicensePlate</Name>
				<Source><![CDATA[
    internal WHSWorkBuildId completeMixedLicensePlate()
    {
        using (var activityContext = this.instrumentationLogger().mixedLicensePlateCompleterActivities().completeMixedLicensePlate())
        {
            this.instrumentationLogger().logRecordInformation(mixedLicensePlateReceipt);

            if (WHSMixedLicensePlateReceiptStatusUpdaterFlight::instance().isEnabled())
            {
                using (var updater = WHSMixedLicensePlateReceiptStatusUpdater::newForMixedLPReceipt(mixedLicensePlateReceipt.RecId))
                {
                    WHSWorkBuildId result = this.completeMixedLicensePlateInternal();
                    updater.setSuccessful();

                    return result;
                }
            }
            else
            {
                return this.completeMixedLicensePlateInternal();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeMixedLicensePlateInternal</Name>
				<Source><![CDATA[
    private WHSWorkBuildId completeMixedLicensePlateInternal()
    {
        boolean mustValidateReturnDetails = this.mustValidateReturnDetails();

        using (var mixedLPLock = mustValidateReturnDetails ? ReqReaderWriterLock::construct() : null)
        {
            if (mustValidateReturnDetails)
            {
                this.acquireReturnDetailLocks(mixedLPLock);
                this.validateReturnLineDetails();
            }

            ttsbegin;

            WHSDispositionCode mixedLPDispositionCode = this.mixedLPDispositionCode();
            WHSMixedLicensePlateReturnsProcessSourceOrderCreator sourceOrderCreator = WHSMixedLicensePlateReturnsProcessSourceOrderCreatorFactory::createWHSMixedLicensePlateReturnOrderCreator(mixedLicensePlateReceipt);
            boolean returnOrderCreated = false;
            if (sourceOrderCreator != null)
            {
                sourceOrderCreator.parmDispositionCode(mixedLPDispositionCode);
                returnOrderCreated = sourceOrderCreator.createSourceOrderAndLines();
            }

            WHSLicensePlate licensePlate = WHSLicensePlate::createLicensePlate(mixedLicensePlateReceipt.LicensePlateId, false, mixedLicensePlateReceipt.ContainerTypeCode);

            WHSWorkCreateMixedLPReceiving workCreateMixedLP = new WHSWorkCreateMixedLPReceiving(licensePlate);
            workCreateMixedLP.parmInventLocationId(mixedLicensePlateReceipt.InventLocationId);
            workCreateMixedLP.parmReceiptId(mixedLicensePlateReceipt.ReceiptId);
            workCreateMixedLP.parmTargetLicensePlateId(licensePlate.LicensePlateId);
            workCreateMixedLP.parmCreatedBy(userId);
            workCreateMixedLP.parmWorkTemplateCode(WHSRFMenuItemTable::find(mixedLicensePlateReceipt.MenuItemName).WorkTemplateCode);
            workCreateMixedLP.parmDispositionCode(mixedLPDispositionCode);
            workCreateMixedLP.parmLoadId(mixedLicensePlateReceipt.LoadId);
            workCreateMixedLP.parmMustUpdateOutboundLoadLineWorkCreatedQty(mustUpdateOutboundLoadLineWorkCreatedQty);

            WHSWorkBuildId workBuildId = workCreateMixedLP.createWork();

            // Mixed LP header was updated in work creation classes
            mixedLicensePlateReceipt.reread();
            mixedLicensePlateReceipt.CurrentUser = userId;
            if (returnOrderCreated && mixedLicensePlateReceipt.SourceOrderStatus == WHSMixedLPSourceOrderStatus::Planned)
            {
                mixedLicensePlateReceipt.SourceOrderStatus = WHSMixedLPSourceOrderStatus::Created;
            }
            mixedLicensePlateReceipt.update();

            boolean completePrintLabelInTransFlightEnabled = WHSCompleteMixedLicensePlatePrintLabelInTransFlight::instance().isEnabled();

            if (!completePrintLabelInTransFlightEnabled)
            {
                ttscommit;
            }

            if (this.mustBuildLicensePlateLabels())
            {
                this.buildLicensePlateLabels(workBuildId);
            }

            if (completePrintLabelInTransFlightEnabled)
            {
                ttscommit;
            }

            return workBuildId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBuildLicensePlateLabels</Name>
				<Source><![CDATA[
    private boolean mustBuildLicensePlateLabels()
    {
        if (!WHSReturnReceivingSkipPrintForScrapFlight::instance().isEnabled())
        {
            return true;
        }

        return WHSDispositionTable::isReturnDispositionCodeSupportingLicensePlateLabelCreation(this.mixedLPDispositionCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabels</Name>
				<Source><![CDATA[
    private void buildLicensePlateLabels(WHSWorkBuildId _workBuildId)
    {
        WHSRFMenuItemTable rfMenuItem = this.mixedLicensePlateRFMenuItem();
        WHSDeferredReceivingPolicy deferredReceivingPolicy = WHSDeferredReceivingPolicy::find(rfMenuItem.DeferredReceivingPolicyId);

        if (deferredReceivingPolicy.RecId != 0 && WHSPrintLabelByCheckingDeferredReceivingInLPCompleterEnabledFlight::instance().isEnabled())
        {
            // Deferred receiving label print settings ignores menuItem.PrintLabel
            if (deferredReceivingPolicy.LabelPrintingOnDeferredReceivingAsyncProcessing != WHSDeferredReceivingPrintLabelProcessEnum::DoNotGenerateLabels)
            {
                using (var noPrintContext = WHSDeferredReceivingSkipPrintContext::construct())
                {
                    if (!WHSDeferredReceivingWorkPolicyLabelGeneratingFlight::instance().isEnabled() || this.isWorkAllowedToBeCreatedBasedOnWorkPolicy(rfMenuItem))
                    {
                        WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(
                                WHSWorkTable::getFirstWorkLineByWorkBuildId(_workBuildId, userId).WorkId,
                                null,
                                rfMenuItem.MenuItemName,
                                userId);

                        if (WHSDeferredLPReceivingFlight::instance().isEnabled())
                        {
                            labelBuild.buildAllLicensePlateLabels(mixedLicensePlateReceipt.LicensePlateId);
                        }
                        else
                        {
                            labelBuild.buildLicensePlateLabels();
                        }
                    }
                    else
                    {
                        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

                        // mixedLicensePlateReceipt for deferred receiving there will be exactly always one mixedLicensePlateReceiptLine.
                        select firstonly mixedLicensePlateReceiptLine
                            where mixedLicensePlateReceiptLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId;
                        WHSWorkExecuteDisplayReceivingOrderProvider orderProvider = WHSWorkExecuteDisplayReceivingOrderProvider::newFromInventTransType(mixedLicensePlateReceiptLine.InventTransType);
                        WHSReceiptOrderLine receiptOrderLine = orderProvider.findInventTransId(mixedLicensePlateReceiptLine.InventTransId);

                        WHSLicensePlateLabelBuildWithoutWorkParameters parameters = new WHSLicensePlateLabelBuildWithoutWorkParameters(receiptOrderLine,
                                                                                                                        mixedLicensePlateReceipt.WorkTransType,
                                                                                                                        receiptOrderLine.Unit,
                                                                                                                        receiptOrderLine.Qty,
                                                                                                                        mixedLicensePlateReceipt.ShipmentId,
                                                                                                                        mixedLicensePlateReceipt.LoadId,
                                                                                                                        mixedLicensePlateReceipt.LicensePlateId,
                                                                                                                        userId);

                        WHSLicensePlateLabelBuildWithoutWork labelBuild = WHSLicensePlateLabelBuildWithoutWork::newFromWorkTransTypeAndParameters(mixedLicensePlateReceipt.WorkTransType, parameters);
                        labelBuild.buildLicensePlateLabels();
                    }
                }
            }
        }
        else if (rfMenuItem.PrintLabel)
        {
            WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(
                WHSWorkTable::getFirstWorkLineByWorkBuildId(_workBuildId, userId).WorkId,
                null,
                rfMenuItem.MenuItemName,
                userId);
            labelBuild.buildLicensePlateLabels();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkAllowedToBeCreatedBasedOnWorkPolicy</Name>
				<Source><![CDATA[
    private boolean isWorkAllowedToBeCreatedBasedOnWorkPolicy(WHSRFMenuItemTable _rfMenuItem)
    {
        return WHSWorkPolicy::isWorkAllowedToBeCreatedForWorkProcess(mixedLicensePlateReceipt.WorkTransType,
                    mixedLicensePlateReceipt.InventLocationId,
                    mixedLicensePlateReceipt.WMSLocationId,
                    WHSWorkProcessMapper::workCreationProcess2WorkProcess(_rfMenuItem.WorkCreationProcess));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLicensePlateRFMenuItem</Name>
				<Source><![CDATA[
    private WHSRFMenuItemTable mixedLicensePlateRFMenuItem()
    {
        if (!mixedLicensePlateRFMenuItem.RecId)
        {
            mixedLicensePlateRFMenuItem = WHSRFMenuItemTable::find(mixedLicensePlateReceipt.MenuItemName);
        }

        return mixedLicensePlateRFMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLPDispositionCode</Name>
				<Source><![CDATA[
    private WHSDispositionCode mixedLPDispositionCode()
    {
        if (dispositionCode)
        {
            return dispositionCode;
        }

        // As mixed license plates don't allow mixed disposition codes, finding the first one is enough.
        // This needs to be done before the call to createReturnOrderAndLines as the planned lines will be deleted in that method.
        WHSMixedLicensePlateReceiptPlannedLine plannedLine = WHSMixedLicensePlateReceiptPlannedLine::findFirstForMixedLicensePlateReceiptRecId(mixedLicensePlateReceipt.RecId);

        return plannedLine.DispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateReturnDetails</Name>
				<Source><![CDATA[
    private boolean mustValidateReturnDetails()
    {
        // Return details must only be validated when mixed license plate was created by using the Return item receiving with Return details process.
        return mixedLicensePlateReceipt.WorkTransType == WHSWorkTransType::ReturnOrder
            && WHSMixedLicensePlateCompleterValidateReturnDetailsFlight::instance().isEnabled()
            && WHSMixedLicensePlateReceiptPlannedLine::existForMixedLicensePlateReceiptRecId(mixedLicensePlateReceipt.RecId)
            && WHSReturnItemReceivingPolicy::find(WHSRFMenuItemTable::find(mixedLicensePlateReceipt.MenuItemName).ReturnItemReceivingPolicyId).ReturnProcess == WHSReturnItemReceivingPolicyReturnProcess::ReturnDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireReturnDetailLocks</Name>
				<Source><![CDATA[
    private void acquireReturnDetailLocks(ReqReaderWriterLock _mixedLPLock)
    {
        WHSReturnLineDetail returnLineDetail;
        WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        while select ReturnID, RecId from returnLineDetail
            exists join returnLineDetailMixedLicensePlateReceiptLine
                where returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail == returnLineDetail.RecId
            exists join mixedLicensePlateReceiptLine
                where mixedLicensePlateReceiptLine.RecId == returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine
                    && mixedLicensePlateReceiptLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId
        {
            if (!_mixedLPLock.tryEnterWriterLock(classStr(WHSMixedLicensePlateCompleter) + int642Str(returnLineDetail.RecId)))
            {
                throw error(strFmt("@WAX:WHSMixedLicensePlateCompleter_ReturnDetailLocksNotAcquired_Error", returnLineDetail.ReturnID));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnLineDetails</Name>
				<Source><![CDATA[
    private void validateReturnLineDetails()
    {
        WHSMixedLicensePlateCompleterReturnDetailsValidator validator = WHSMixedLicensePlateCompleterReturnDetailsValidator::newFromMixedLicensePlateReceipt(mixedLicensePlateReceipt);
        validator.validateReturnLineDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>