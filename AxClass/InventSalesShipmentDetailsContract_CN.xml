<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSalesShipmentDetailsContract_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for SalesShipmentDetails SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the SalesShipmentDetails SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(InventSalesShipmentDetailsUIBuilder_CN), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
class InventSalesShipmentDetailsContract_CN implements SysOperationValidatable, SrsReportRowCountable_CN
{
    TransDate           fromDate;
    TransDate           toDate;
    ItemId              itemId;
    InventLocationId    inventLocationId;
    smmSalesUnitId      salesUnitId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRowsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rows count of the report primary query's result by data contract parameters.
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <returns>
    /// A <c>Container</c> with first element being rows count and second element being a message
    /// that shall be shown if validation fails.
    /// </returns>
    public Container getRowsCount(Query _query)
    {
        Query           query;
        SRSMaxRow_CN    maxRows = SystemParameters::find().SRSMaxRow_CN;

        if (_query && _query.name() == queryStr(InventSalesShipmentDetails_CN))
        {
            query = _query;
        }
        else
        {
           query = new Query(queryStr(InventSalesShipmentDetails_CN));
        }
        query = InventSalesShipmentDetailsDP_CN::initQueryByDataContract(query, this);

        int rowsCount = QueryRun::getQueryRowCount(query, maxRows + 1);

        //The output rows is over the allowed maximum rows of SSRS reports, please increase the value in the System parameters and run the report again.
        return [rowsCount, "@GLS220075"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Period.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate;
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Period.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalStr("@SYS177151")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The new value of the datacontract parameter Warehouse;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Warehouse.
    /// </returns>
    [
        DataMemberAttribute('InventLocationId'),
        SysOperationLabelAttribute(literalStr("@SYS177712")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ItemId.
    /// </summary>
    /// <param name="_itemId">
    /// The new value of the datacontract parameter ItemId;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ItemId.
    /// </returns>
    [
        DataMemberAttribute('ItemId'),
        SysOperationLabelAttribute(literalStr("@SYS180828")),
        SysOperationDisplayOrderAttribute('5')
    ]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter SalesUnit.
    /// </summary>
    /// <param name="_salesUnitId">
    /// The new value of the datacontract parameter SalesUnit;
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter SalesUnit.
    /// </returns>
    [
        DataMemberAttribute('SalesUnitId'),
        SysOperationLabelAttribute(literalStr("@SYS177343")),
        SysOperationDisplayOrderAttribute('3')
    ]
    public UnitOfMeasureSymbol parmSalesUnitId(UnitOfMeasureSymbol _salesUnitId = salesUnitId)
    {
        salesUnitId = _salesUnitId;
        return salesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameters Period.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate;
    /// </param>
    /// <returns>
    /// The currect value of datacontract parameter Period.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalStr("@SYS177152")),
        SysOperationDisplayOrderAttribute('4')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates 'fromDate' and 'toDate' entered by the user in the custom-dialog.
    /// </summary>
    /// <returns>
    /// true if validations pass; false otherwise.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!this.parmFromDate())
        {
            //Please enter a date for the parameter From date.
            ret = checkFailed(strFmt("@GLS64410", "@SYS24050"));
        }
        if (ret && !this.parmToDate())
        {
            //Please enter a date for the parameter To date.
            ret = checkFailed(strFmt("@GLS64410", "@SYS35904"));
        }
        if (ret && this.parmFromDate() > this.parmToDate())
        {
            //From date should not be later than To date.
            ret = checkFailed("@GLS64374");
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
