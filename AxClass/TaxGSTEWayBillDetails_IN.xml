<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTEWayBillDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Operations related to e-way bill details, including:
/// 1) Show e-way bill of transactions
/// 2) Update e-way bill for selected transactions
/// </summary>
class TaxGSTEWayBillDetails_IN
{
    #define.GST("GST")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates e-way bill details for customer transactions, including sales
    /// orders and free text invoices and project transactions.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    private static void createCustTransactions(
        TmpTaxGSTEWayBillDetailsHeader_IN   _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN     _detailsLineBuf)
    {
        CustTrans   custTrans;

        while select Voucher, TransDate, Invoice, AccountNum, TransType from custTrans
            group by TransDate, Voucher, Invoice, AccountNum, TransType
            where ( !_detailsHeader.Account ||
                    custTrans.AccountNum  == _detailsHeader.Account)
                && (!_detailsHeader.TransDateFrom ||
                    custTrans.TransDate >= _detailsHeader.TransDateFrom)
                && (!_detailsHeader.TransDateTo ||
                    custTrans.TransDate <= _detailsHeader.TransDateTo)
        {
            TaxGSTEWayBillDetails_IN::insertCustTransactions(
                custTrans,
                _detailsHeader,
                _detailsLineBuf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEWayBillDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates e-way bill details.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    public server static void createEWayBillDetails(
        TmpTaxGSTEWayBillDetailsHeader_IN  _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN    _detailsLineBuf)
    {
        // Clear the last result
        delete_from _detailsLineBuf;

        switch (_detailsHeader.Role)
        {
            case FormTrackingRole_IN::Warehouse:
                TaxGSTEWayBillDetails_IN::createStockTransferTransactions(
                    _detailsHeader, _detailsLineBuf);
                break;

            case FormTrackingRole_IN::Party:
                switch (_detailsHeader.AccountType)
                {
                    case VendCustType_IN::Vendor:
                        TaxGSTEWayBillDetails_IN::createVendTransactions(
                            _detailsHeader, _detailsLineBuf);
                        break;

                    case VendCustType_IN::Customer:
                        TaxGSTEWayBillDetails_IN::createCustTransactions(
                            _detailsHeader, _detailsLineBuf);
                        break;
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStockTransferTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates e-way bill details for stock transfer transactions.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    private static void createStockTransferTransactions(
        TmpTaxGSTEWayBillDetailsHeader_IN  _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN    _detailsLineBuf)
    {
        InventTransferTable         inventTransferTable;
        InventTransferLine          inventTransferLine;
        InventTransferJour          inventTransferJour;
        InventTransferJourLine      inventTransferJourLine;
        LogisticsPostalAddress      logisticsPostalAddress;
        TransTaxInformation         transTaxInformation;

        while select inventTransferJour
            where (!_detailsHeader.TransDateFrom ||
                    inventTransferJour.TransDate >= _detailsHeader.TransDateFrom)
                && (!_detailsHeader.TransDateTo ||
                    inventTransferJour.TransDate <= _detailsHeader.TransDateTo)
            join TransferId, ToPostalAddress, FromPostalAddress from inventTransferTable
                where inventTransferTable.TransferId            == inventTransferJour.TransferId
                    && ( !_detailsHeader.WarehouseFrom ||
                        inventTransferTable.InventLocationIdFrom == _detailsHeader.WarehouseFrom)
                    && ( !_detailsHeader.WarehouseTo ||
                        inventTransferTable.InventLocationIdTo   == _detailsHeader.WarehouseTo)
                    && inventTransferTable.TransferType_IN      == TransferType_IN::StockTransfer
        {
            ttsBegin;

            _detailsLineBuf.clear();
            _detailsLineBuf.Voucher    = inventTransferJour.VoucherId;
            _detailsLineBuf.Date       = inventTransferJour.TransDate;

            select firstOnly TableId, RecId from inventTransferLine
                where inventTransferLine.TransferId == inventTransferTable.TransferId;

            select sum(NetAmtShip_IN), sum(NetAmtReceive_IN), count(RecId) from inventTransferJourLine
                where inventTransferJourLine.VoucherId      == inventTransferJour.VoucherId
                    && inventTransferJourLine.TransferId    == inventTransferJour.TransferId;

            if (inventTransferJourLine.RecId)
            {
                if (inventTransferJourLine.NetAmtShip_IN)
                {
                    //Ship
                    _detailsLineBuf.AssessableValue    = inventTransferJourLine.NetAmtShip_IN;
                    _detailsLineBuf.NumberOfItems      = int642int(inventTransferJourLine.RecId);

                    transTaxInformation = TransTaxInformationHelper::newHelper().
                                            findTransTaxInformationByRecord(inventTransferLine, TransTaxInformationType_IN::InventTransferTo);
                }
                else
                {
                    //Receive
                    _detailsLineBuf.AssessableValue    = inventTransferJourLine.NetAmtReceive_IN;
                    _detailsLineBuf.NumberOfItems      = int642int(inventTransferJourLine.RecId);
                                      
                    transTaxInformation = TransTaxInformationHelper::newHelper().
                                            findTransTaxInformationByRecord(inventTransferLine, TransTaxInformationType_IN::InventTransferFrom);
                }
                
                _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(transTaxInformation.GSTIN).RegistrationNumber;
                logisticsPostalAddress          = LogisticsLocationEntity::location2PostalAddress(
                                                    transTaxInformation.CompanyLocation, DateTimeUtil::getSystemDateTime(), true);

                if (logisticsPostalAddress.RecId)
                {
                    _detailsLineBuf.State  = logisticsPostalAddress.State;
                    _detailsLineBuf.City   = logisticsPostalAddress.City;
                }

            }

            _detailsLineBuf.SourceTableId = inventTransferJour.TableId;
            _detailsLineBuf.SourceRecId   = inventTransferJour.RecId;

            [_detailsLineBuf.TaxValue, _detailsLineBuf.TaxAmount] = TaxGSTEWayBillDetails_IN::getTaxRateAndAmount(inventTransferJour);
            
            _detailsLineBuf.TransactionAmount = _detailsLineBuf.AssessableValue + _detailsLineBuf.TaxAmount;

            //Init Sub type and Document type for E-Way Bill
            _detailsLineBuf.SubType        = TaxGSTEWayBillSubType_IN::Supply;
            _detailsLineBuf.DocumenType    = TaxGSTEWayBillDetails_IN::getDocumentType(inventTransferJour);

            TaxGSTEWayBillDetails_IN::populateEWayBillInfo(
                _detailsHeader,
                _detailsLineBuf,
                inventTransferJour);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates e-way bill details for vendor transactions, including purchase
    /// orders.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    private static void createVendTransactions(
        TmpTaxGSTEWayBillDetailsHeader_IN  _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN    _detailsLineBuf)
    {
        VendTrans vendTrans;

        while select Voucher, TransDate, Invoice, AccountNum from vendTrans
            group by TransDate, Voucher, Invoice, AccountNum
            where ( !_detailsHeader.Account ||
                    vendTrans.AccountNum  == _detailsHeader.Account)
                && (!_detailsHeader.TransDateFrom ||
                    vendTrans.TransDate >= _detailsHeader.TransDateFrom)
                && (!_detailsHeader.TransDateTo ||
                    vendTrans.TransDate <= _detailsHeader.TransDateTo)
        {
            TaxGSTEWayBillDetails_IN::insertPurchTransactions(
                vendTrans,
                _detailsHeader,
                _detailsLineBuf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document type from <c>TaxDocumentExtension_IN</c>.
    /// </summary>
    /// <param name="_common">
    /// Inquiry for invoice journal(CustInvoiceJour and VendInvoiceJour and ProjInvoiceJour).
    /// </param>
    /// <returns>
    /// Return the type of tax invent reference.
    /// </returns>
    private static GSTReference_IN getDocumentType(Common _common)
    {
        TaxDocumentExtension_IN            taxDocumentExtension;
        TaxDocumentRowTransaction          taxDocRowTransaction;
        TaxDocument                        taxDocument;
        ProjInvoiceJour                    projInvoiceJour;
        ProjProposalJour                   projProposalJour;
        TaxEngineProjOnAcctTransHeader     onAccHeader;
        TaxEngineProjRevenueTransHeader    revenueHeader;
        TaxEngineProjCostTransHeader       costHeader;
        TaxEngineProjItemTransHeader       itemHeader;
        TaxEngineProjEmplTransHeader       emplHeader;
        TaxEngineProjItemSOTransHeader     itemSOHeader;
        TaxEngineProjRevenueSubTransHeader revenueSubHeader;
        
        if (_common.TableId == tableNum(ProjInvoiceJour))
        {
            projInvoiceJour = _common;
            projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
        
            onAccHeader         = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            revenueHeader       = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            costHeader          = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            itemHeader          = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            itemSOHeader        = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            emplHeader          = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            revenueSubHeader    = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
            select firstOnly TaxDocumentGuid from taxDocument
                exists join taxDocRowTransaction
                where taxDocument.OriginSourceTableId == taxDocRowTransaction.TransactionHeaderTableId
                    && taxDocument.OriginSourceRecId  == taxDocRowTransaction.TransactionHeaderRecId
                    && ((taxDocRowTransaction.TransactionHeaderTableId      == onAccHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == onAccHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == revenueHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == revenueHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == costHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == costHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == itemHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == itemHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == itemSOHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == itemSOHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == emplHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == emplHeader.RecId)
                        || (taxDocRowTransaction.TransactionHeaderTableId   == revenueSubHeader.TableId
                            && taxDocRowTransaction.TransactionHeaderRecId  == revenueSubHeader.RecId));
        
            taxDocumentExtension = TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid);
        }
        else
        {
            taxDocument = TaxDocumentUtils::getTaxDocumentBySource(_common.TableId, _common.RecId);

            if (taxDocument)
            {
                taxDocumentExtension = TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid);
            }
        }

        return taxDocumentExtension.TaxInvReferenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateAndAmount</Name>
				<Source><![CDATA[
    private static container getTaxRateAndAmount(Common _trans)
    {
        ITaxDocument                        taxDocumentObj;
        ITaxDocumentLineEnumerator          taxDocumentLineEnumerator;
        ITaxDocumentLine                    taxDocumentLineObj;
        ITaxDocumentComponentLineEnumerator taxDocumentComponentLineEnumerator;
        ITaxDocumentComponentLine           taxDocumentComponentLine;

        TaxAmount taxAmount;
        TaxValue  taxValue;

        taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(_trans.TableId, _trans.RecId);

        if (!taxDocumentObj
            && FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
        {
            taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(_trans.TableId, _trans.RecId);
            taxValue = TaxDocumentTransactionSummaryHelper::sumTaxRateByJournalAndTaxType(_trans.TableId, _trans.RecId, #GST);

            return [taxValue, taxAmount];
        }

        if (taxDocumentObj)
        {
            taxAmount = taxDocumentObj.getTotalTax().value();

            taxDocumentLineEnumerator = taxDocumentObj.lines();
            while (taxDocumentLineEnumerator.moveNext())
            {
                taxDocumentLineObj = taxDocumentLineEnumerator.current();
                if (taxDocumentLineObj)
                {
                    taxDocumentComponentLineEnumerator = taxDocumentLineObj.componentLines(#GST);
                    while (taxDocumentComponentLineEnumerator.moveNext())
                    {
                        taxDocumentComponentLine = taxDocumentComponentLineEnumerator.current();
                        if (taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxRate))
                        {
                            taxValue = taxValue + taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxRate).value().value();
                        }
                    }
                }

                if (taxValue)
                {
                    break;
                }
            }
        }

        return [taxValue, taxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert e-way bill details for customer transactions.
    /// </summary>
    /// <param name="_custTrans">
    /// The customer transaction.
    /// </param>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    private static void insertCustTransactions(
        CustTrans                           _custTrans,
        TmpTaxGSTEWayBillDetailsHeader_IN   _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN     _detailsLineBuf)
    {
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        LogisticsPostalAddress  custLogisticsPostalAddress;
        
        ProjInvoiceJour     projInvoiceJour;
        ProjProposalJour    projProposalJour;
        ProjProposalItem    projProposalItem;
        ProjProposalCost    projProposalCost;
        ProjProposalEmpl    projProposalEmpl;
        ProjProposalRevenue projProposalRevenue;
        ProjProposalOnAcc   projProposalOnAcc;
        
        ProjItemTrans       projItemTrans;
        ProjEmplTrans       projEmplTrans;
        ProjCostTrans       projCostTrans;
        ProjRevenueTrans    projRevenueTrans;
        ProjOnAccTrans      projOnAccTrans;
        
        TaxEngineProjOnAcctTransHeader     onAccHeader;
        TaxEngineProjRevenueTransHeader    revenueHeader;
        TaxEngineProjRevenueSubTransHeader revenueSubHeader;
        TaxEngineProjCostTransHeader       costHeader;
        TaxEngineProjItemTransHeader       itemHeader;
        TaxEngineProjEmplTransHeader       emplHeader;
        TaxEngineProjItemSOTransHeader     itemSOHeader;
        
        ProjItemTransTaxExtensionIN     projItemTransTaxExtensionIN;
        ProjEmplTransTaxExtensionIN     projEmplTransTaxExtensionIN;
        ProjCostTransTaxExtensionIN     projCostTransTaxExtensionIN;
        ProjRevenueTransTaxExtensionIN  projRevenueTransTaxExtensionIN;
        ProjOnAccTransTaxExtensionIN    projOnAccTransTaxExtensionIN;

        SalesLine salesLine;

        CustomsShippingBillJour_IN  customsShippingBillJour;
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustomsExportOrderTable_IN  customsExportOrderTable;

        TransTaxInformation transTaxInformation;
        
        TaxRegistrationNumber_IN    registrationNumber;
        LogisticsAddressCityName    city;
        LogisticsAddressStateId     state;
        TaxValue                    taxValue;
        Integer                     numberOfItems;

        boolean taxInformationUpdated = false;
        boolean skip = false;

        ttsBegin;
        // Project
        if (_custTrans.TransType == LedgerTransType::Project)
        {
            select firstOnly projInvoiceJour
                    where projInvoiceJour.LedgerVoucher == _custTrans.Voucher;
        
            select firstOnly projProposalJour
                    where projProposalJour.ProposalId == projInvoiceJour.ProposalId;
        
            if (projInvoiceJour.RecId)
            {
                _detailsLineBuf.AccountType       = _detailsHeader.AccountType;
                _detailsLineBuf.Account           = _detailsHeader.Account;
                _detailsLineBuf.Voucher           = _custTrans.Voucher;
                _detailsLineBuf.CustInvoiceId     = projInvoiceJour.ProjInvoiceId;
                _detailsLineBuf.Date              = _custTrans.TransDate;
        
                _detailsLineBuf.TransactionAmount = projInvoiceJour.amountMST(projInvoiceJour.InvoiceAmount);
                _detailsLineBuf.SourceTableId     = projInvoiceJour.TableId;
                _detailsLineBuf.SourceRecId       = projInvoiceJour.RecId;
                _detailsLineBuf.AssessableValue   = projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance);
                _detailsLineBuf.TaxAmount         = projInvoiceJour.amountMST(TaxGSTEWayBillDetails_IN::getTaxAmountForProject(projProposalJour));
        
                //Init Sub type for E-Way Bill
                _detailsLineBuf.SubType        = TaxGSTEWayBillSubType_IN::Supply;
                _detailsLineBuf.DocumenType    = TaxGSTEWayBillDetails_IN::getDocumentType(projInvoiceJour);
        
                TaxGSTEWayBillDetails_IN::populateEWayBillInfo(
                        _detailsHeader,
                        _detailsLineBuf,
                        projInvoiceJour);
        
                while select forUpdate _detailsLineBuf
                        where _detailsLineBuf.SourceRecId == projInvoiceJour.RecId &&
                                _detailsLineBuf.SourceTableId == projInvoiceJour.TableId
                {
                    if (taxInformationUpdated)
                    {
                        _detailsLineBuf.RegistrationNumber = registrationNumber;
                        _detailsLineBuf.City               = city;
                        _detailsLineBuf.State              = state;
                        _detailsLineBuf.TaxValue           = taxValue;
                        _detailsLineBuf.NumberOfItems      = numberOfItems;
                        _detailsLineBuf.update();
                        continue;
                    }
        
                    // Number of Items
                    select count(RecId) from projProposalItem
                            where projProposalItem.ProposalId == projInvoiceJour.ProposalId;
        
                    _detailsLineBuf.NumberOfItems = int642int(projProposalItem.RecId);
        
                    // GSTIN/Delivery place/Supply state/Tax rate
                    // Item/SO
                    select firstOnly projProposalItem
                            where projProposalItem.ProposalId == projInvoiceJour.ProposalId;
        
                    if (projProposalItem.RecId)
                    {
                        taxInformationUpdated = true;
                        salesLine = projProposalItem.salesLine();
                        if (salesLine.RecId)
                        {
                            //SO
                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(salesLine);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);
                            
                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;
                            
                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
                            itemSOHeader = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                            _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(itemSOHeader);
                        }
                        else
                        {
                            //Item
                            projItemTrans = projProposalItem.projItemTrans();

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(projItemTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
                            itemHeader = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                            _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(itemHeader);
                        }
        
                        _detailsLineBuf.City = custLogisticsPostalAddress.City;
                        _detailsLineBuf.State = custLogisticsPostalAddress.State;
        
                        _detailsLineBuf.update();
                    }
        
                    // Hour
                    if (!taxInformationUpdated)
                    {
                        select firstOnly projProposalEmpl
                                where projProposalEmpl.ProposalId == projInvoiceJour.ProposalId;
        
                        if (projProposalEmpl.RecId)
                        {
                            taxInformationUpdated = true;
        
                            projEmplTrans = projProposalEmpl.projEmplTrans();

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(projEmplTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
                            emplHeader = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                            _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(emplHeader);
        
                            _detailsLineBuf.update();
                        }
                    }
        
                    // Expense
                    if (!taxInformationUpdated)
                    {
                        select firstOnly projProposalCost
                                where projProposalCost.ProposalId == projInvoiceJour.ProposalId;
        
                        if (projProposalCost.RecId)
                        {
                            taxInformationUpdated = true;
        
                            projCostTrans = projProposalCost.projCostTrans();

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(projCostTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
        
                            costHeader = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                            _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(costHeader);
        
                            _detailsLineBuf.update();
                        }
                    }
        
                    // Fee/SubFee
                    if (!taxInformationUpdated)
                    {
                        select firstOnly projProposalRevenue
                                where projProposalRevenue.ProposalId == projInvoiceJour.ProposalId;
        
                        if (projProposalRevenue.RecId)
                        {
                            taxInformationUpdated = true;
        
                            projRevenueTrans = projProposalRevenue.projRevenueTrans();

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(projRevenueTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
        
                            if (projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription)
                            {
                                // SubFee
                                revenueSubHeader = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                                _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(revenueSubHeader);
                            }
                            else
                            {
                                // Fee
                                revenueHeader = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                                _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(revenueHeader);
                            }
        
                            _detailsLineBuf.update();
                        }
                    }
        
                    // On-Acc
                    if (!taxInformationUpdated)
                    {
                        select firstOnly projProposalOnAcc
                                where projProposalOnAcc.ProposalId == projInvoiceJour.ProposalId;
        
                        if (projProposalOnAcc.RecId)
                        {
                            taxInformationUpdated = true;
        
                            projOnAccTrans = projProposalOnAcc.projOnAccTrans();

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(projOnAccTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;
        
        
                            onAccHeader = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        
                            _detailsLineBuf.TaxValue = TaxGSTEWayBillDetails_IN::getTaxRate(onAccHeader);
        
                            _detailsLineBuf.update();
                        }
                    }
        
                    registrationNumber  = _detailsLineBuf.RegistrationNumber;
                    city                = _detailsLineBuf.City;
                    state               = _detailsLineBuf.State;
                    taxValue            = _detailsLineBuf.TaxValue;
                    numberOfItems       = _detailsLineBuf.NumberOfItems;
                }
            }
        }
        // SO/FTI
        else
        {
            custInvoiceJour = CustInvoiceJour::findFromCustTrans(
                                _custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);

            if (custInvoiceJour.RecId)
            {
                if (_custTrans.TransType == LedgerTransType::Sales && custInvoiceJour.salesTable().CustomsExportOrder_IN == NoYes::Yes)
                {
                    //Export order
                    select firstonly customsShippingBillJour
                        join InvoiceAmount from customsExportOrderTable
                        where customsShippingBillJour.InvoiceId  == customsExportOrderTable.InvoiceId
                            && customsShippingBillJour.SalesId   == customsExportOrderTable.SalesId
                            && customsExportOrderTable.InvoiceId == custInvoiceJour.InvoiceId;

                    if (customsShippingBillJour.RecId)
                    {
                        _detailsLineBuf.AccountType       = _detailsHeader.AccountType;
                        _detailsLineBuf.Account           = _detailsHeader.Account;
                        _detailsLineBuf.Voucher           = _custTrans.Voucher;
                        _detailsLineBuf.CustInvoiceId     = customsShippingBillJour.InvoiceId;
                        _detailsLineBuf.Date              = _custTrans.TransDate;

                        _detailsLineBuf.AssessableValue   = custInvoiceJour.amountMST(customsExportOrderTable.InvoiceAmount);
                        _detailsLineBuf.SourceTableId     = customsShippingBillJour.TableId;
                        _detailsLineBuf.SourceRecId       = customsShippingBillJour.RecId;

                        //Init Sub type and Document type for E-Way Bill
                        _detailsLineBuf.SubType        = TaxGSTEWayBillSubType_IN::Export;
                        _detailsLineBuf.DocumenType    = TaxGSTEWayBillDetails_IN::getDocumentType(customsShippingBillJour);

                        TaxGSTEWayBillDetails_IN::populateEWayBillInfo(
                            _detailsHeader,
                            _detailsLineBuf,
                            customsShippingBillJour);

                        while select forUpdate _detailsLineBuf
                            where _detailsLineBuf.SourceRecId == customsShippingBillJour.RecId &&
                                    _detailsLineBuf.SourceTableId == customsShippingBillJour.TableId
                        {
                            select count(RecId) from customsShippingBillTrans
                                where customsShippingBillTrans.LedgerVoucher == customsShippingBillJour.LedgerVoucher
                                    && customsShippingBillTrans.InvoiceDate   == customsShippingBillJour.InvoiceDate
                                    && customsShippingBillTrans.InvoiceId     == customsShippingBillJour.InvoiceId
                                    && customsShippingBillTrans.SalesId       == customsShippingBillJour.SalesId;

                            _detailsLineBuf.NumberOfItems = int642int(customsShippingBillTrans.RecId);

                            select firstOnly custInvoiceTrans
                                where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                                    && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                                    && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                                    && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

                            transTaxInformation = TransTaxInformationHelper::newHelper().
                                                    findTransTaxInformationByRecord(custInvoiceTrans);

                            custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                            _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                            _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                            _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;

                            select firstOnly RecId, TableId from customsShippingBillTrans
                                where customsShippingBillTrans.LedgerVoucher == customsShippingBillJour.LedgerVoucher
                                    && customsShippingBillTrans.InvoiceDate   == customsShippingBillJour.InvoiceDate
                                    && customsShippingBillTrans.InvoiceId     == customsShippingBillJour.InvoiceId
                                    && customsShippingBillTrans.SalesId       == customsShippingBillJour.SalesId;

                            [_detailsLineBuf.TaxValue, _detailsLineBuf.TaxAmount] = TaxGSTEWayBillDetails_IN::getTaxRateAndAmount(customsShippingBillJour);

                            _detailsLineBuf.TransactionAmount   = custInvoiceJour.amountMST(customsExportOrderTable.InvoiceAmount + _detailsLineBuf.TaxAmount);
                            _detailsLineBuf.TaxAmount           = custInvoiceJour.amountMST(_detailsLineBuf.TaxAmount);

                            _detailsLineBuf.update();
                        }
                    }
                }
                else
                {
                    _detailsLineBuf.AccountType       = _detailsHeader.AccountType;
                    _detailsLineBuf.Account           = _detailsHeader.Account;
                    _detailsLineBuf.Voucher           = _custTrans.Voucher;
                    _detailsLineBuf.CustInvoiceId     = custInvoiceJour.InvoiceId;
                    _detailsLineBuf.Date              = _custTrans.TransDate;

                    _detailsLineBuf.TransactionAmount = custInvoiceJour.InvoiceAmountMST;
                    _detailsLineBuf.SourceTableId     = custInvoiceJour.TableId;
                    _detailsLineBuf.SourceRecId       = custInvoiceJour.RecId;
                    _detailsLineBuf.AssessableValue   = custInvoiceJour.amountMST(custInvoiceJour.SalesBalance);

                    //Init Sub type and Document type for E-Way Bill
                    _detailsLineBuf.SubType        = TaxGSTEWayBillSubType_IN::Supply;
                    _detailsLineBuf.DocumenType    = TaxGSTEWayBillDetails_IN::getDocumentType(custInvoiceJour);

                    TaxGSTEWayBillDetails_IN::populateEWayBillInfo(
                        _detailsHeader,
                        _detailsLineBuf,
                        custInvoiceJour);

                    while select forUpdate _detailsLineBuf
                        where _detailsLineBuf.SourceRecId     == custInvoiceJour.RecId &&
                                _detailsLineBuf.SourceTableId == custInvoiceJour.TableId
                    {
                        select count(RecId) from custInvoiceTrans
                            where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                                && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                                && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                            && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

                        _detailsLineBuf.NumberOfItems = int642int(custInvoiceTrans.RecId);

                        select firstOnly custInvoiceTrans
                            where custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                                && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                                && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                                && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

                        transTaxInformation = TransTaxInformationHelper::newHelper().
                                                findTransTaxInformationByRecord(custInvoiceTrans);

                        custLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);

                        _detailsLineBuf.City   = custLogisticsPostalAddress.City;
                        _detailsLineBuf.State  = custLogisticsPostalAddress.State;

                        _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.CustomerTaxInformation).GSTIN).RegistrationNumber;

                        [_detailsLineBuf.TaxValue, _detailsLineBuf.TaxAmount] = TaxGSTEWayBillDetails_IN::getTaxRateAndAmount(custInvoiceJour);

                        _detailsLineBuf.TaxAmount = custInvoiceJour.amountMST(_detailsLineBuf.TaxAmount);
                        _detailsLineBuf.update();
                    }
                }
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert e-way bill details for purchase orders.
    /// </summary>
    /// <param name="_vendTrans">
    /// The vendor transaction for the purchase order.
    /// </param>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    private static void insertPurchTransactions(
        VendTrans                           _vendTrans,
        TmpTaxGSTEWayBillDetailsHeader_IN   _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN     _detailsLineBuf)
    {
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceTrans        vendInvoiceTrans;
        LogisticsPostalAddress  vendLogisticsPostalAddress;
        TransTaxInformation     transTaxInformation;

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
                            _vendTrans.Invoice, _vendTrans.TransDate, _vendTrans.AccountNum);

        if (vendInvoiceJour.RecId)
        {
            ttsBegin;

            _detailsLineBuf.AccountType    = _detailsHeader.AccountType;
            _detailsLineBuf.Account        = _detailsHeader.Account;
            _detailsLineBuf.Voucher        = _vendTrans.Voucher;
            _detailsLineBuf.VendInvoiceId  = vendInvoiceJour.InvoiceId;
            _detailsLineBuf.Date           = _vendTrans.TransDate;

            _detailsLineBuf.TransactionAmount  = vendInvoiceJour.InvoiceAmountMST;
            _detailsLineBuf.AssessableValue    = vendInvoiceJour.amountMST(vendInvoiceJour.InvoiceAmount - vendInvoiceJour.SumTax);
            _detailsLineBuf.SourceTableId      = vendInvoiceJour.TableId;
            _detailsLineBuf.SourceRecId        = vendInvoiceJour.RecId;

            //Init Sub type and Document type for E-Way Bill
            _detailsLineBuf.SubType        = vendInvoiceJour.purchTable().purchTable_W().CustomsImportOrder_IN ?
                                            TaxGSTEWayBillSubType_IN::Import: TaxGSTEWayBillSubType_IN::Supply;
            _detailsLineBuf.DocumenType    = TaxGSTEWayBillDetails_IN::getDocumentType(vendInvoiceJour);

            TaxGSTEWayBillDetails_IN::populateEWayBillInfo(
                _detailsHeader,
                _detailsLineBuf,
                vendInvoiceJour);

            while select forUpdate _detailsLineBuf
                where _detailsLineBuf.SourceRecId == vendInvoiceJour.RecId &&
                        _detailsLineBuf.SourceTableId == vendInvoiceJour.TableId
            {
                select count(RecId) from vendInvoiceTrans
                    where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
                       && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                       && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                       && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                       && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId;

                _detailsLineBuf.NumberOfItems = int642int(vendInvoiceTrans.RecId);

                select firstOnly vendInvoiceTrans
                    where vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
                       && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                       && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                       && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                       && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId;

                transTaxInformation = TransTaxInformationHelper::newHelper().
                                        findTransTaxInformationByRecord(vendInvoiceTrans);

                vendLogisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(transTaxInformation.VendorLocation, DateTimeUtil::getSystemDateTime(), true);

                _detailsLineBuf.City   = vendLogisticsPostalAddress.City;
                _detailsLineBuf.State  = vendLogisticsPostalAddress.State;

                _detailsLineBuf.RegistrationNumber = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.VendorTaxInformation).GSTIN).RegistrationNumber;

                [_detailsLineBuf.TaxValue, _detailsLineBuf.TaxAmount] = TaxGSTEWayBillDetails_IN::getTaxRateAndAmount(vendInvoiceJour);

                _detailsLineBuf.TaxAmount = vendInvoiceJour.amountMST(_detailsLineBuf.TaxAmount);
                _detailsLineBuf.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateEWayBillInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the e-way bill details for the specified transaction.
    /// </summary>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// The header information.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLineBuf">
    /// The e-way bill detail buffer lines to be populated.
    /// </param>
    /// <param name="_trans">
    /// The transaction of which the form attached will be populated as detail lines.
    /// </param>
    private static void populateEWayBillInfo(
        TmpTaxGSTEWayBillDetailsHeader_IN   _tmpTransitDocumentDetailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN     _tmpTransitDocumentDetailsLineBuf,
        Common                              _trans)
    {
        TransitDocumentManager_IN       manager;
        TransitDocumentEWayBill_IN      eWayBill;
        List                            formList;
        ListEnumerator                  formListEnumerator;

        manager = TransitDocumentManager_IN::newManager();

        eWayBill.Direction = _tmpTransitDocumentDetailsHeader.EWayBillDirection;

        // Find all attached bills of the selected direction
        formList            = manager.findTransitDocuments(_trans, eWayBill);
        formListEnumerator  = formList.getEnumerator();

        while (formListEnumerator.moveNext())
        {
            eWayBill = formListEnumerator.current();

            // Filter by the e-way bill type
            if (_tmpTransitDocumentDetailsHeader.EWayBillType > 0
                 && _tmpTransitDocumentDetailsHeader.EWayBillType != eWayBill.EWayBillTypes)
            {
                continue;
            }

            // Insert a line for each bill attached
            _tmpTransitDocumentDetailsLineBuf.TransitDocumentEWayBill_IN = eWayBill.RecId;
            _tmpTransitDocumentDetailsLineBuf.EWayBillTypes = eWayBill.EWayBillTypes;
            _tmpTransitDocumentDetailsLineBuf.EWayBillNo = eWayBill.EWayBillNo;
            _tmpTransitDocumentDetailsLineBuf.EWayBillDate = eWayBill.EWayBillDate;
            _tmpTransitDocumentDetailsLineBuf.DocumentNo = eWayBill.DocumentNo;
            _tmpTransitDocumentDetailsLineBuf.DocumentDate = eWayBill.DocumentDate;
            _tmpTransitDocumentDetailsLineBuf.VehicleNo = eWayBill.VehicleNo;
            _tmpTransitDocumentDetailsLineBuf.TransportMode = eWayBill.TransportMode;
            _tmpTransitDocumentDetailsLineBuf.Status = eWayBill.Status;
            _tmpTransitDocumentDetailsLineBuf.Distance = eWayBill.Distance;
            _tmpTransitDocumentDetailsLineBuf.TransporterId = eWayBill.TransporterId;
            _tmpTransitDocumentDetailsLineBuf.TransporterName = eWayBill.TransporterName;
            _tmpTransitDocumentDetailsLineBuf.VehicleType = eWayBill.VehicleType;

            _tmpTransitDocumentDetailsLineBuf.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEWayBill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates e-way bill for selected transactions.
    /// </summary>
    /// <param name="_detailsHeader">
    /// Inquiry for e-way bill details.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// Buffer lines of e-way bill details.
    /// </param>
    public static void updateEWayBill(
        TmpTaxGSTEWayBillDetailsHeader_IN  _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN    _detailsLineBuf)
    {
        VendInvoiceJour             vendInvoiceJourLoc;
        CustInvoiceJour             custInvoiceJourLoc;
        CustomsShippingBillJour_IN  customsShippingBillJourLoc;

        InventTransferJour          inventTransferJour;
        ProjInvoiceJour             projInvoiceJour;

        if (_detailsHeader.EWayBillNumber
            || _detailsHeader.EWayBillDate
            || _detailsHeader.DocumentNo
            || _detailsHeader.VehicleNo
            || _detailsHeader.DocumentDate
            || _detailsHeader.Status
            || _detailsHeader.Distance
            || _detailsHeader.TransporterId
            || _detailsHeader.TransporterName
            || _detailsHeader.VehicleType)
        {
            ttsbegin;

            while select _detailsLineBuf
                where _detailsLineBuf.Mark == NoYes::Yes
            {
                switch (_detailsLineBuf.SourceTableId)
                {
                    // Purchase orders
                    case tableNum(VendInvoiceJour):
                        vendInvoiceJourLoc = VendInvoiceJour::findRecId(_detailsLineBuf.SourceRecId);

                        TaxGSTEWayBillDetails_IN::updateEWayBillInfo(
                            _detailsHeader, _detailsLineBuf, vendInvoiceJourLoc);
                        break;

                    // Sales orders && FTI
                    case tableNum(CustInvoiceJour):
                        custInvoiceJourLoc = CustInvoiceJour::findRecId(_detailsLineBuf.SourceRecId);

                        TaxGSTEWayBillDetails_IN::updateEWayBillInfo(
                            _detailsHeader, _detailsLineBuf, custInvoiceJourLoc);
                        break;

                    // Export order
                    case tableNum(CustomsShippingBillJour_IN):
                        customsShippingBillJourLoc = CustomsShippingBillJour_IN::find(_detailsLineBuf.SourceRecId);

                        TaxGSTEWayBillDetails_IN::updateEWayBillInfo(
                            _detailsHeader, _detailsLineBuf, customsShippingBillJourLoc);
                        break;

                    // Stock transfer orders
                    case tableNum(InventTransferJour):
                        select RecId from inventTransferJour
                            where inventTransferJour.RecId == _detailsLineBuf.SourceRecId;

                        TaxGSTEWayBillDetails_IN::updateEWayBillInfo(
                            _detailsHeader, _detailsLineBuf, inventTransferJour);
                        break;
        
                    // Project
                    case tableNum(ProjInvoiceJour):
                        projInvoiceJour = ProjInvoiceJour::findRecId(_detailsLineBuf.SourceRecId);
        
                        TaxGSTEWayBillDetails_IN::updateEWayBillInfo(
                                _detailsHeader, _detailsLineBuf, projInvoiceJour);
                        break;

                    default:
                        break;
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEWayBillInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the e-way bill inforamtion of detail line.
    /// </summary>
    /// <param name="_detailsHeader">
    /// The header information.
    /// </param>
    /// <param name="_detailsLineBuf">
    /// The detail line.
    /// </param>
    /// <param name="_trans">
    /// The transaction.
    /// </param>
    public static void updateEWayBillInfo(
        TmpTaxGSTEWayBillDetailsHeader_IN   _detailsHeader,
        TmpTaxGSTEWayBillDetailsLine_IN     _detailsLineBuf,
        Common                              _trans)
    {
        TransitDocumentManager_IN       manager;
        TransitDocumentEWayBill_IN      formToUpdate;
        TmpTransitDocumentEWayBill_IN   tmpForm;

        manager = TransitDocumentManager_IN::newManager();

        tmpForm.Direction       = _detailsHeader.EWayBillDirection;
        tmpForm.EwayBillTypes   = _detailsLineBuf.EWayBillTypes;
        tmpForm.TransportMode   = _detailsLineBuf.TransportMode;

        if (_detailsHeader.EWayBillNumber)
        {
            tmpForm.EWayBillNo = _detailsHeader.EWayBillNumber;
        }
        else
        {
            tmpForm.EWayBillNo = _detailsLineBuf.EWayBillNo;
        }

        if (_detailsHeader.EWayBillDate)
        {
            tmpForm.EWayBillDate = _detailsHeader.EWayBillDate;
        }
        else
        {
            tmpForm.EWayBillDate = _detailsLineBuf.EWayBillDate;
        }

        if (_detailsHeader.DocumentNo)
        {
            tmpForm.DocumentNo = _detailsHeader.DocumentNo;
        }
        else
        {
            tmpForm.DocumentNo = _detailsLineBuf.DocumentNo;
        }

        if (_detailsHeader.VehicleNo)
        {
            tmpForm.VehicleNo = _detailsHeader.VehicleNo;
        }
        else
        {
            tmpForm.VehicleNo = _detailsLineBuf.VehicleNo;
        }

        if (_detailsHeader.DocumentDate)
        {
            tmpForm.DocumentDate = _detailsHeader.DocumentDate;
        }
        else
        {
            tmpForm.DocumentDate = _detailsLineBuf.DocumentDate;
        }

        if (_detailsHeader.Status)
        {
            if (TaxGSTEWayBillUtil_IN::canUpdateStatus(_detailsLineBuf.Status, _detailsHeader.Status))
            {
                tmpForm.Status = _detailsHeader.Status;
            }
            else
            {
                throw error(strFmt("@TaxGSTEWayBill:EWayBillDetailsUpdateErrorMessage",
                    _detailsLineBuf.Status,
                    _detailsHeader.Status));
            }
        }
        else
        {
            tmpForm.Status = _detailsLineBuf.Status;
        }

        tmpForm.Distance = _detailsHeader.Distance ? _detailsHeader.Distance : _detailsLineBuf.Distance;
        tmpForm.TransporterId = _detailsHeader.TransporterId ? _detailsHeader.TransporterId : _detailsLineBuf.TransporterId;
        tmpForm.TransporterName = _detailsHeader.TransporterName ? _detailsHeader.TransporterName : _detailsLineBuf.TransporterName;
        tmpForm.VehicleType = _detailsHeader.VehicleType ? _detailsHeader.VehicleType : _detailsLineBuf.VehicleType;

        ttsBegin;

        formToUpdate = TransitDocumentEWayBill_IN::findByTmpEWayBill(tmpForm);
        if (!formToUpdate)
        {
            formToUpdate.initFromTmpEWayBill(tmpForm);
            formToUpdate.insert();
        }
        else if (_detailsHeader.Status)
        {
            formToUpdate.updateStatusTo(tmpForm.Status);
        }

        manager.removeTransitDocument(
            _trans, TransitDocumentEWayBill_IN::find(
                _detailsLineBuf.TransitDocumentEWayBill_IN));
        manager.addTransitDocument(_trans, formToUpdate);

        // Update the result line accordingly
        _detailsLineBuf.TransitDocumentEWayBill_IN = formToUpdate.RecId;
        _detailsLineBuf.EWayBillTypes = formToUpdate.EWayBillTypes;
        _detailsLineBuf.EWayBillNo = formToUpdate.EWayBillNo;
        _detailsLineBuf.EWayBillDate = formToUpdate.EWayBillDate;
        _detailsLineBuf.DocumentNo = formToUpdate.DocumentNo;
        _detailsLineBuf.DocumentDate = formToUpdate.DocumentDate;
        _detailsLineBuf.VehicleNo = formToUpdate.VehicleNo;
        _detailsLineBuf.TransportMode = formToUpdate.TransportMode;
        _detailsLineBuf.Status = formToUpdate.Status;
        _detailsLineBuf.Distance = formToUpdate.Distance;
        _detailsLineBuf.TransporterId = formToUpdate.TransporterId;
        _detailsLineBuf.TransporterName = formToUpdate.TransporterName;
        _detailsLineBuf.VehicleType = formToUpdate.VehicleType;
        _detailsLineBuf.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountForProject</Name>
				<Source><![CDATA[
    private static TaxAmount getTaxAmountForProject(ProjProposalJour _projProposalJour)
    {
        TaxEngineProjOnAcctTransHeader     onAccHeader;
        TaxEngineProjRevenueTransHeader    revenueHeader;
        TaxEngineProjCostTransHeader       costHeader;
        TaxEngineProjItemTransHeader       itemHeader;
        TaxEngineProjEmplTransHeader       emplHeader;
        TaxEngineProjItemSOTransHeader     itemSOHeader;
        TaxEngineProjRevenueSubTransHeader revenueSubHeader;

        ITaxDocument    taxDocumentObj;
        TaxAmount       taxAmount;

        onAccHeader         = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        revenueHeader       = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        costHeader          = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        itemHeader          = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        itemSOHeader        = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        emplHeader          = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(_projProposalJour);
        revenueSubHeader    = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(_projProposalJour);

        taxAmount = 0;

        if (onAccHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(onAccHeader.TableId, onAccHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(onAccHeader.TableId, onAccHeader.RecId);
            }
        }

        if (revenueHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(revenueHeader.TableId, revenueHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(revenueHeader.TableId, revenueHeader.RecId);
            }
        }

        if (costHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(costHeader.TableId, costHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(costHeader.TableId, costHeader.RecId);
            }
        }

        if (itemHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(itemHeader.TableId, itemHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(itemHeader.TableId, itemHeader.RecId);
            }
        }

        if (itemSOHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(itemSOHeader.TableId, itemSOHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(itemSOHeader.TableId, itemSOHeader.RecId);
            }
        }

        if (emplHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(emplHeader.TableId, emplHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(emplHeader.TableId, emplHeader.RecId);
            }
        }

        if (revenueSubHeader.RecId)
        {
            taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(revenueSubHeader.TableId, revenueSubHeader.RecId);
            if (taxDocumentObj)
            {
                taxAmount = taxAmount + taxDocumentObj.getTotalTax().value();
            }
            else if (FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
            {
                taxAmount = TaxDocumentTransactionSummaryHelper::sumTaxAmountCurByJournal(revenueSubHeader.TableId, revenueSubHeader.RecId);
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRate</Name>
				<Source><![CDATA[
    private static TaxValue getTaxRate(Common _trans)
    {
        ITaxDocument                        taxDocumentObj;
        ITaxDocumentLineEnumerator          taxDocumentLineEnumerator;
        ITaxDocumentLine                    taxDocumentLineObj;
        ITaxDocumentComponentLineEnumerator taxDocumentComponentLineEnumerator;
        ITaxDocumentComponentLine           taxDocumentComponentLine;

        TaxValue  taxValue;

        taxDocumentObj = TaxBusinessService::getTaxDocumentBySource(_trans.TableId, _trans.RecId);

        if (!taxDocumentObj
            && FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
        {
            taxValue = TaxDocumentTransactionSummaryHelper::sumTaxRateByJournalAndTaxType(_trans.TableId, _trans.RecId, #GST);

            return taxValue;
        }

        if (taxDocumentObj)
        {
            taxDocumentLineEnumerator = taxDocumentObj.lines();
            while (taxDocumentLineEnumerator.moveNext())
            {
                taxDocumentLineObj = taxDocumentLineEnumerator.current();
                if (taxDocumentLineObj)
                {
                    taxDocumentComponentLineEnumerator = taxDocumentLineObj.componentLines(#GST);
                    while (taxDocumentComponentLineEnumerator.moveNext())
                    {
                        taxDocumentComponentLine = taxDocumentComponentLineEnumerator.current();
                        if (taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxRate))
                        {
                            taxValue = taxValue + taxDocumentComponentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxRate).value().value();
                        }
                    }
                }

                if (taxValue)
                {
                    break;
                }
            }
        }

        return taxValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>