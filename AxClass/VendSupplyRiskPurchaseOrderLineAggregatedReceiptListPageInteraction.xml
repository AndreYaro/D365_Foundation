<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The interaction class for the model-driven <c>VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage</c> form.
/// </summary>
public final class VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPageInteraction extends SysListPageInteractionBase
{
    private PurchLine               purchLine;
    private boolean                 isGridPopulated;
    private InventDimCtrl_Frm_Mov   inventDimFormSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    ///    An active <c>PurchLine</c> record.
    /// </returns>
    private PurchLine currentPurchLine()
    {
        return this.listPage().activeRecord(queryDataSourceStr(VendSupplyRiskPurchaseOrderLineAllQuery, PurchLine)) as PurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the list page design when the list page is initialized.
    /// </summary>
    /// <remarks>
    /// This method is called one time by the framework when the list page is initialized.
    /// </remarks>
    public void initialized()
    {
        super();

        switch (this.listPage().listPageArgs().menuItemName())
        {
            case menuitemDisplayStr(VendSupplyRiskPurchaseOrderLineLateConfirmed) :
                this.listPage().caption("@SCM:VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage_LateConfirmed");
                break;

            case menuitemDisplayStr(VendSupplyRiskReceiptNotInFull) :
                this.listPage().caption("@SCM:VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage_NotInFull");
                break;

            case menuitemDisplayStr(VendSupplyRiskReceiptNotOnTime) :
                this.listPage().caption("@SCM:VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage_NotOnTime");
                break;

            case menuitemDisplayStr(VendSupplyRiskOnTimeInFullByProductsPart) :
                this.listPage().caption("@SCM:VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage_InFullByProducts");
                break;

            case menuitemDisplayStr(VendSupplyRiskOnTimeInFullByVendorsPart) :
                this.listPage().caption("@SCM:VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage_InFullByVendors");
                break;
        }

        this.updateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsGridPopulated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the grid is populated and saves the result in a global variable.
    /// </summary>
    private void initIsGridPopulated()
    {
        isGridPopulated = PurchLine.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Interacts with the inventory dimensions form.
    /// </summary>
    /// <returns>
    /// The inventory dimensions set up object.
    /// </returns>
    /// <remarks>
    /// This method is used by inventory dimensions set up logic.
    /// </remarks>
    public Object inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl_Frm_Mov_OrderLine::construct();
            inventDimFormSetup.parmCallingElement(
                    InventDimListPageInteractionAdapter::newFromListPageInteraction(this));
            inventDimFormSetup.parmMovement(InventMovement::construct(purchLine));
            inventDimFormSetup.init();
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current <c>VendSupplyRiskPurchaseOrderLineAggregatedReceipt</c> records and initializes record specific global variables.
    /// </summary>
    /// <remarks>
    /// The framework calls this method every time that a record is selected in the grid on the list page.
    /// </remarks>
    public void selectionChanged()
    {
        PurchLine = this.currentPurchLine();

        this.initIsGridPopulated();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the action pane buttons according active record data.
    /// </summary>
    protected void setButtonEnabled()
    {
        super();

        this.setButtonPurchaseActionPaneTab();
        this.setButtonGeneralActionPaneTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneralActionPaneTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the general pane buttons according to the active record data.
    /// </summary>
    private void setButtonGeneralActionPaneTab()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage, dimensionsDisplayMenuItemButton), isGridPopulated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPurchaseActionPaneTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the purchase pane buttons according to the active record data.
    /// </summary>
    private void setButtonPurchaseActionPaneTab()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage, onHandMenuItemButton), isGridPopulated);
        this.listPage().actionPaneControlEnabled(formControlStr(VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage, lotMenuItemButton), isGridPopulated);
        this.listPage().actionPaneControlEnabled(formControlStr(VendSupplyRiskPurchaseOrderLineAggregatedReceiptListPage, inventoryTransactionsMenuItemButton), isGridPopulated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the design when it is called.
    /// </summary>
    /// <param name="_mode">
    /// The update mode.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An unknown mode is specified.
    /// </exception>
    private void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventMovement movement = InventMovement::construct(purchLine);

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init :
                this.inventDimSetupObject().formActiveSetup(movement.inventDimGroupSetup(), movement);
                this.inventDimSetupObject().formSetControls(true);
                break;

            default : throw error(strFmt("@SYS54195", funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>