<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResConfirmProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Confirm processor to confirm activity reosurce soft resevrvation to hard reservation.
/// </summary>
public class ResConfirmProcessor implements ResIConfirmProcessor
{
    #TimeConstants

    ResIReservationSchedule schedule;
    List                    schedules;
    Set                     activitySet;
    real                    taskRemainingEffortHours;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Schedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule to cancel.
    /// </summary>
    /// <param name = "_schedules">Schedule to be confirmed.</param>
    /// <returns>Instance of <c>ResReservationSchedule</c> class.</returns>
    public List Schedules(List _schedules = schedules)
    {
        schedules = _schedules;
        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskRemainingEffortHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get task remaning effort hours which should be set by getProjectTaskRemainingCapacityInSeconds method.
    /// </summary>
    /// <returns>Task remaining effort hours.</returns>
    public real getTaskRemainingEffortHours()
    {
        return taskRemainingEffortHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmSoftBooking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert soft booking reservation to hard booking.
    /// </summary>
    /// <param name = "_targetActivityResource">Activity resource rec ID.</param>
    /// <param name = "_targetStartTime">Start date time.</param>
    /// <param name = "_targetEndTime">End date time.</param>
    /// <returns>TRUE when the reservation confirmation operation succeeds.</returns>
    protected boolean confirmSoftBooking(ActivityResourceRecId _targetActivityResource,
        utcdatetime _targetStartTime, utcdatetime _targetEndTime)
    {
        ResBooking resBooking;
        utcdatetime minTime = DateTimeUtil::minValue();
        utcdatetime maxTime = DateTimeUtil::maxValue();

        this.skipDatabaseLogAndEvent(resBooking);

        update_recordset resBooking
            setting CommitType = ResCommitType::HardBook
            where resBooking.ActivityResource == _targetActivityResource
                && resBooking.CommitType == ResCommitType::SoftBook
                && (_targetStartTime == minTime || resBooking.Hour >= _targetStartTime)
                && (_targetEndTime == maxTime || resBooking.Hour <= _targetEndTime);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmSoftAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert soft assignment reservation to hard assignment.
    /// </summary>
    /// <param name = "_targetActivityResource">Activity resource rec ID.</param>
    /// <param name = "_targetActivity">Activity rec ID.</param>
    /// <param name = "_targetStartTime">Start date time.</param>
    /// <param name = "_targetEndTime">End date time.</param>
    private void confirmSoftAssignment(ActivityResourceRecId _targetActivityResource, ActivityRecId _targetActivity,
        utcdatetime _targetStartTime, utcdatetime _targetEndTime)
    {
        ResAssignment   resAssignment;
        utcdatetime     minTime = DateTimeUtil::minValue();
        utcdatetime     maxTime = DateTimeUtil::maxValue();

        this.skipDatabaseLogAndEvent(resAssignment);

        update_recordset resAssignment
            setting CommitType = ResCommitType::HardBook
            where resAssignment.ActivityResource == _targetActivityResource
                && resAssignment.Activity == _targetActivity
                && resAssignment.CommitType == ResCommitType::SoftBook
                && (_targetStartTime == minTime || resAssignment.Hour >= _targetStartTime)
                && (_targetEndTime == maxTime || resAssignment.Hour <= _targetEndTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmSoftAssignmentForTheLastHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirm soft assignment for the resource last soft assigned hour if the reserved capacity of that hour
    /// is larger than the task remaining hours.
    /// </summary>
    /// <param name = "_ActivityResource">Activity resource rec ID.</param>
    /// <param name = "_Activity">Activity rec ID.</param>
    /// <param name = "_resAssignment"><c>ResAssignment</c> table buffer.</param>
    /// <param name = "_remainingTaskCapacity">Task remaining capacity.</param>
    private void confirmSoftAssignmentForTheLastHour(ActivityResourceRecId _activityResource,
        ActivityRecId _activity, ResAssignment _resAssignment, real _remainingTaskCapacity)
    {
        ResAssignment resAssignmentForUpdate;

        this.skipDatabaseLogAndEvent(resAssignmentForUpdate);

        real newAssignmentEndTime = _resAssignment.End - abs(_remainingTaskCapacity);
        real newAssignmentStartTime = newAssignmentEndTime;

        // Convert the remaining soft assignment reserved hours to hard reserved.
        update_recordset resAssignmentForUpdate
            setting End = newAssignmentEndTime,
                CommitType = ResCommitType::HardBook
            where resAssignmentForUpdate.ActivityResource == _activityResource
                && resAssignmentForUpdate.Activity == _activity
                && resAssignmentForUpdate.CommitType == ResCommitType::SoftBook
                && resAssignmentForUpdate.Hour == _resAssignment.Hour;

        // Add a new assignment record to split the previous hour and keep it as soft reserved.
        resAssignmentForUpdate.clear();
        resAssignmentForUpdate.ActivityResource = _resAssignment.ActivityResource;
        resAssignmentForUpdate.Activity = _resAssignment.Activity;
        resAssignmentForUpdate.CommitType = ResCommitType::SoftBook;
        resAssignmentForUpdate.Start = newAssignmentStartTime;
        resAssignmentForUpdate.End = _resAssignment.End;
        resAssignmentForUpdate.Hour = _resAssignment.Hour;
        resAssignmentForUpdate.Day = _resAssignment.Day;
        resAssignmentForUpdate.Week = _resAssignment.Week;
        resAssignmentForUpdate.Month = _resAssignment.Month;
        resAssignmentForUpdate.Quarter = _resAssignment.Quarter;
        resAssignmentForUpdate.HalfYear = _resAssignment.HalfYear;
        resAssignmentForUpdate.insert();

        // Convert the remaining soft booking reserved hours to hard reserved if it does not exists
        activityRecId rootActivity = ActivityFacade::getRootProjectActivity(_activity);

        ResBooking existingSoftBooking;
        this.skipDatabaseLogAndEvent(existingSoftBooking);

        select firstonly forupdate existingSoftBooking
            where existingSoftBooking.ActivityResource == _activityResource
            && existingSoftBooking.Activity == rootActivity
            && existingSoftBooking.CommitType == ResCommitType::SoftBook
            && existingSoftBooking.Hour == _resAssignment.Hour;

        ResBooking existingHardBooking;
        this.skipDatabaseLogAndEvent(existingHardBooking);

        select firstonly minof(Start), maxof(End), RecId from existingHardBooking
            where existingHardBooking.ActivityResource == _activityResource
                && existingHardBooking.Activity == rootActivity
                && existingHardBooking.CommitType == ResCommitType::HardBook
                && existingHardBooking.Hour == _resAssignment.Hour;

        if (existingHardBooking.RecId)
        {
            if (existingHardBooking.Start > existingSoftBooking.Start)
            {
                existingHardBooking.Start = existingSoftBooking.Start;
            }

            if (existingHardBooking.End < newAssignmentEndTime)
            {
                existingHardBooking.End = newAssignmentEndTime;
            }

            existingHardBooking.update();
            existingSoftBooking.delete();
        } 
        else
        {
            existingSoftBooking.End = newAssignmentEndTime;
            existingSoftBooking.CommitType = ResCommitType::HardBook;
            existingSoftBooking.update();
        }
        
        // Detect if there are other assignments being soft reserved at this hour and what is the max end seconds is.
        resAssignmentForUpdate.clear();
        select minof(Start), maxof(End), RecId from resAssignmentForUpdate
            where resAssignmentForUpdate.ActivityResource == _activityResource
                && resAssignmentForUpdate.CommitType == ResCommitType::SoftBook
                && resAssignmentForUpdate.Hour == _resAssignment.Hour;

        ResBooking resBookingForUpdate;
        this.skipDatabaseLogAndEvent(resBookingForUpdate);

        // If there are other soft assignments exist, insert a soft booking record back to reflect the min and max of the seconds.
        // add a new record to split the previous hour and keep it as soft reserved
        resBookingForUpdate.clear();
        resBookingForUpdate.ActivityResource = _resAssignment.ActivityResource;
        resBookingForUpdate.Activity = rootActivity;
        resBookingForUpdate.CommitType = ResCommitType::SoftBook;

        if (resAssignmentForUpdate.RecId)
        {
            resBookingForUpdate.Start = resAssignmentForUpdate.Start < newAssignmentStartTime ? resAssignmentForUpdate.Start : newAssignmentStartTime;
            resBookingForUpdate.End = resAssignmentForUpdate.End > _resAssignment.End ? resAssignmentForUpdate.End : _resAssignment.End;
        }
        else
        {
            resBookingForUpdate.Start = newAssignmentStartTime;
            resBookingForUpdate.End = _resAssignment.End;
        }
        resBookingForUpdate.Hour = _resAssignment.Hour;
        resBookingForUpdate.Day = _resAssignment.Day;
        resBookingForUpdate.Week = _resAssignment.Week;
        resBookingForUpdate.Month = _resAssignment.Month;
        resBookingForUpdate.Quarter = _resAssignment.Quarter;
        resBookingForUpdate.HalfYear = _resAssignment.HalfYear;
        resBookingForUpdate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmSoftAssignmentUpToTaskRemainingEffortHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert soft assignment up to task remaining effort hours.
    /// </summary>
    /// <param name = "_activityResource">Activity resource rec ID.</param>
    /// <param name = "_activity">Activity rec ID.</param>
    /// <param name = "_startTime">Start time range.</param>
    /// <param name = "_endTime">End time range.</param>
    /// <param name = "_reservationType">Reservation type which this method is calling for.</param>
    /// <returns>TRUE when the reservation confirmation operation succeeds.</returns>
    protected boolean confirmSoftAssignmentUpToTaskRemainingEffortHours(activityresourcerecid _activityResource,
        ActivityRecId _activity, utcdatetime _startTime, utcdatetime _endTime, ResReservationType _reservationType = ResReservationType::Assignment)
    {
        boolean execute;

        if (_activity)
        {
            ResAssignment resAssignment;

            utcdatetime newEndTime = _endTime;
            utcdatetime currentHour;
            utcdatetime lastHour;
            utcdatetime minTime = DateTimeUtil::minValue();
            utcdatetime maxTime = DateTimeUtil::maxValue();
            real        remainingTaskCapacity = this.getProjectTaskRemainingCapacityInSeconds(_activity);
            real        activityResourceSoftReservedCapacity = ActivityResourceFacade::getAssignedCapacity(
                            _activityResource, ResCommitType::SoftBook,  _activity);

            // execute as long as remaining task is equal or larger than a minute
            if (remainingTaskCapacity >= #secondsPerMinute)
            {
                execute = true;
                ttsbegin;

                // execute this logic only if remainig task capacity is smaller than the activity resource soft assigned capacity
                if (remainingTaskCapacity < activityResourceSoftReservedCapacity)
                {
                    execute = false;

                    while select resAssignment
                        order by resAssignment.Hour
                        where resAssignment.ActivityResource == _activityResource
                            && resAssignment.Activity == _activity
                            && resAssignment.CommitType == ResCommitType::SoftBook
                            && (_startTime == minTime || resAssignment.Hour >= _startTime)
                            && (_endTime == maxTime || resAssignment.Hour <= _endTime)
                    {
                        execute = true;
                        real currentHourCapacity = resAssignment.End - resAssignment.Start;
                        remainingTaskCapacity -= currentHourCapacity;
                        currentHour = resAssignment.Hour;

                        if (remainingTaskCapacity == 0)
                        {
                            break;
                        }
                        else if (remainingTaskCapacity < 0)
                        {
                            this.confirmSoftAssignmentForTheLastHour(_activityResource,
                                _activity, resAssignment, remainingTaskCapacity);
                            break;
                        }

                        newEndTime = currentHour;
                        lastHour = resAssignment.Hour;
                    }
                }

                // convert the rest of the hours to hard resrved
                if (execute)
                {
                    activitySet.add(_activity);
                    
                    this.confirmSoftAssignment(_activityResource, _activity, _startTime, newEndTime);
                    this.confirmSoftBooking(_activityResource, _startTime, newEndTime);

                    // For the case of this method is calling by assignment reservation type, then only the specified WBS task soft assignment should be confirmed to become hard assignment.
                    // In this case, hard booking records should be recreated for the other soft assigned WBS task if exists.
                    if (_reservationType == ResReservationType::Assignment)
                    {
                        ResUtil::addBookingHoursFromAssignmentHours(_activity, _activityResource,
                            _startTime, newEndTime, ResCommitType::SoftBook);
                    }
                }

                if (newEndTime != _endTime)
                {
                    warning(strFmt("@Res:SomeSoftAssignedHoursAreConfirmed", ActivityResourceFacade::getName(_activityResource), ActivityFacade::getProjId(_activity), ActivityFacade::getTaskName(_activity)));
                }

                ttscommit;
            }
            else
            {
                warning(strFmt("@Res:NoSoftAssignedHoursAreConfirmed", ActivityResourceFacade::getName(_activityResource), ActivityFacade::getProjId(_activity), ActivityFacade::getTaskName(_activity)));
            }
        }
        return execute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectTaskRemainingCapacityInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get project task remaining capacity in seconds.
    /// </summary>
    /// <param name = "_targetActivity">Target activity.</param>
    /// <returns>Project task remaining capacity in seconds.</returns>
    private real getProjectTaskRemainingCapacityInSeconds(ActivityRecId _targetActivity)
    {
        PSAActivitySetup psaActivitySetup = PSAActivitySetup::findActivityNumber(
            smmActivities::findWithRecId(_targetActivity).ActivityNumber);

        real taskRemainingEffortInSeconds = psaActivitySetup.Effort * #SecondsPerHour -
            psaActivitySetup.sumSeconds(ResCommitType::HardBook);

        taskRemainingEffortHours = taskRemainingEffortInSeconds / #SecondsPerHour;

        return taskRemainingEffortInSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Confirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the reservation confirmation process.
    /// </summary>
    /// <returns>true if the confirmation operation succeeds; otherwise false.</returns>
    public boolean Confirm()
    {
        boolean result;

        if (schedules.elements())
        {
            ListEnumerator enum = schedules.getEnumerator();
            while (enum.moveNext())
            {
                boolean confirmationResult;
                schedule = enum.current();
                activityresourcerecid activityResource = schedule.ActivityResource();
                ActivityRecId activity = schedule.Activity();
                utcdatetime startTime = schedule.start();
                utcdatetime endTime = schedule.end();
                ResReservationType reservationType = schedule.reservationType();

                // confirm operation should only be executed for engagement type of project
                if (activityResource && this.isProject(activityResource))
                {
                    startTime = max(startTime, this.getStartTimeByActivityResourceAndTaskActivity(activityResource));
                    endTime = min(endTime, this.getEndTimeByActivityResourceAndTaskActivity(activityResource));

                    if (reservationType == ResReservationType::Assignment)
                    {
                        confirmationResult = this.confirmSoftAssignmentUpToTaskRemainingEffortHours(
                            activityResource, activity, startTime, endTime, reservationType);
                    }
                    else
                    {
                        boolean hasAssignmentRecords;
                        confirmationResult = true;

                        // confirm all soft assignment hours for this activity resource.
                        ResAssignment resAssignment;
                        while select activity from resAssignment
                            Group by resAssignment.ActivityResource, resAssignment.Activity
                            where resAssignment.ActivityResource == activityResource
                                && resAssignment.CommitType == ResCommitType::SoftBook
                        {
                            utcdatetime taskStartTime = max(startTime, this.getStartTimeByActivityResourceAndTaskActivity(activityResource, resAssignment.Activity));
                            utcdatetime taksEndTime = min(endTime, this.getEndTimeByActivityResourceAndTaskActivity(activityResource, resAssignment.Activity));

                            hasAssignmentRecords = true;

                            boolean confirmAssignmentResult = this.confirmSoftAssignmentUpToTaskRemainingEffortHours(
                                activityResource, resAssignment.Activity, taskStartTime, taksEndTime, reservationType);

                            confirmationResult = confirmationResult && confirmAssignmentResult;
                        }

                        if (!hasAssignmentRecords)
                        {
                            ActivityRecId rootActivity = ActivityResourceFacade::getRootActivity(activityResource);
                            activitySet.add(rootActivity);
                            confirmationResult = this.confirmSoftBooking(activityResource, startTime, endTime);
                        }
                    }

                    if (confirmationResult)
                    {
                        this.postConfirmationOperations();
                    }
                }
                result = confirmationResult || result;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartTimeByActivityResourceAndTaskActivity</Name>
				<Source><![CDATA[
    private utcdatetime getStartTimeByActivityResourceAndTaskActivity(ActivityResourceRecId _activityResource, ActivityRecId _taskActivity = 0)
    {
        ResReservationUnionView reservationUnionView;
        utcdatetime startTime;

        select minof(Hour), ActivityResource, CommitType from reservationUnionView
            group by ActivityResource, CommitType
            where reservationUnionView.ActivityResource == _activityResource
                && reservationUnionView.CommitType == ResCommitType::SoftBook
                && (!_taskActivity || reservationUnionView.TaskActivity == _taskActivity);

        if (reservationUnionView)
        {
            startTime = reservationUnionView.Hour;
        }

        return startTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndTimeByActivityResourceAndTaskActivity</Name>
				<Source><![CDATA[
    private utcdatetime getEndTimeByActivityResourceAndTaskActivity(ActivityResourceRecId _activityResource, ActivityRecId _taskActivity = 0)
    {
        ResReservationUnionView reservationUnionView;
        utcdatetime endTime;

        select maxof(Hour), ActivityResource, CommitType from reservationUnionView
            group by ActivityResource, CommitType
            where reservationUnionView.ActivityResource == _activityResource
                && reservationUnionView.CommitType == ResCommitType::SoftBook
                && (!_taskActivity || reservationUnionView.TaskActivity == _taskActivity);

        if (reservationUnionView)
        {
            endTime = reservationUnionView.Hour;
        }

        return endTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if this activity resource is assoicated to a project.
    /// </summary>
    /// <param name = "_activityResource">Activity resource rec ID.</param>
    /// <returns>True if it is a project.</returns>
    protected boolean isProject(activityresourcerecid _activityResource)
    {
        ProjId projectId = ActivityResourceFacade::getProjectId(_activityResource);

        return projectId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postConfirmationOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update project status.
    /// </summary>
    /// <remarks>
    /// Invoked everytime when confirmation of particular schedule has been successful.
    /// </remarks>
    protected void postConfirmationOperations()
    {
        if (schedule)
        {
            SetEnumerator activitySetEnum = activitySet.getEnumerator();

            // Update team info and scheduling status according to the activity list
            while (activitySetEnum.moveNext())
            {
                ActivityRecId activity = activitySetEnum.current();

                ResUtil::updateTeamInfo(activity);
                ProjActivityCapacity::updateScheduleStatusByActivity(activity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new object of <c>ResConfirmProcessor</c>
    /// </summary>
    /// <returns>A new object of <c>ResConfirmProcessor</c></returns>
    public static ResConfirmProcessor construct()
    {
        ResConfirmProcessor processor = new ResConfirmProcessor();
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>ResConfirmProcessor</c> class.
    /// </summary>
    protected void new()
    {
        schedules = new List(Types::Class);
        activitySet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specify table buffer.</param>
    protected void skipDatabaseLogAndEvent(Common _table)
    {
        _table.skipDatabaseLog(true);
    _table.skipEvents(true);
    _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>