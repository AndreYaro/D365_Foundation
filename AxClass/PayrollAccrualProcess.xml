<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollAccrualProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollAccrualProcess</c> class provides functions for accrual and usage validation and calculation.
/// </summary>
public class PayrollAccrualProcess
{
    PayrollAccrual                      payrollAccrual;
    PayrollAccrualRate                  payrollAccrualRate;
    PayrollAccrualEarningCode           payrollAccrualEarningCode;
    PayrollWorkerEnrolledAccrual        payrollWorkerEnrolledAccrual;

    PayrollPayStatement                 payStatement;

    PayrollEarningStatement             earningStatement;
    PayrollEarningStatementLine         earningStatementLine;

    PayrollPayPeriod                    payPeriod;

    HcmWorker                           hcmWorker;

    // View
    PayrollAccrualTransactionsView      payrollAccrualTransactionsView;

    boolean                             isDateRangeValid;

    TransDate                           payPeriodEndDate, accrualPlanYearStartDate, accrualPlanYearEndDate, accrualDateBasisDate;

    PayrollAccrualTotalUsedHours        usageBalance;
    PayrollAccrualUsedHours             payPeriodUsedHours;
    PayrollAccrualAccruedHours          payPeriodAccruedHours;
    PayrollAccrualTotalAccruedHours     planYearAccruedHours;
    PayrollAccrualTotalUsedHours        planYearUsedHours;
    PayrollAccrualCarriedOverHours      planYearCarryOverHours;
    PayrollAccrualTotalAccruedHours     totalAccruedHours;
    PayrollAccrualTotalUsedHours        totalUsedHours;
    PayrollAccrualTotalAvailableHours   totalAvailableHours;

    PayrollAccrualEmploymentMonth       workerMonthsOfEmployment;
    HcmWorkerRecId                      hcmWorkerRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAllHoursEligibleForAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of hours eligible for accrual balance for the pay statement lines
    /// having an earning code that has quantity unit equals to hours and have associated <c>PayrollAccrualBasisEarningcode</c>
    /// table records.
    /// </summary>
    /// <returns>
    /// A real value containing the number of hours eligible for accrual balance.
    /// </returns>
    /// <remarks>
    /// This method should be called when the accrual on usage is checked on the accrual plan.
    /// </remarks>
    private PayrollAccrualAccruedHours calculateAllHoursEligibleForAccrual()
    {
        PayrollPayStatementEarningLine  payrollPayStatementEarningLine;
        PayrollPayStatement             payrollPayStatement;
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrualForPayPeriodAccruedHours;
        HcmWorker                       hcmWorkerForPayPeriodAccruedHours;

        PayrollEarningCode              payrollEarningCode;
        PayrollAccrualBasisEarningcode  payrollAccrualBasisEarningcode;
        PayrollAccrual                  payrollAccrualAccuredHours;

        PayrollAccrualAccruedHours      accruedHours;

        if (payrollAccrual.AccrualMethod == PayrollAccrualMethod::Hourly)
        {
            select sum(Quantity) from payrollPayStatementEarningLine
                where payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                join RecId, Worker from payrollPayStatement
                    where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                        && payrollPayStatement.RecId == payStatement.RecId
                exists join RecId from payrollEarningCode
                    where payrollEarningCode.RecId == payrollPayStatementEarningLine.EarningCode
                        && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours
                join RecId from hcmWorkerForPayPeriodAccruedHours
                    where hcmWorkerForPayPeriodAccruedHours.RecId == payrollPayStatement.Worker
                join Worker, Accrual from payrollWorkerEnrolledAccrualForPayPeriodAccruedHours
                    where payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Worker == hcmWorkerForPayPeriodAccruedHours.RecId
                            && payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrual.RecId
                    join RecId from payrollAccrualAccuredHours
                        where payrollAccrualAccuredHours.RecId == payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Accrual
                    exists join RecId, Accrual, EarningCode from payrollAccrualBasisEarningcode
                        where payrollAccrualBasisEarningcode.Accrual == payrollAccrualAccuredHours.RecId
                            && payrollAccrualBasisEarningcode.EarningCode == payrollPayStatementEarningLine.EarningCode
                            && payrollAccrualBasisEarningcode.AccuralType == PayrollAccrualType::EarningCode;

            accruedHours = payrollPayStatementEarningLine.Quantity;
        }
        return accruedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNonUsageHoursEligibleForAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of hours eligible for accrual balance for the pay statement lines having an earning code that has quantity unit equals to hours and
    /// is different from the usage earning code.
    /// </summary>
    /// <returns>
    /// A real value containing the number of hours eligible for accrual balance.
    /// </returns>
    private PayrollAccrualAccruedHours calculateNonUsageHoursEligibleForAccrual()
    {
        PayrollPayStatementEarningLine  payrollPayStatementEarningLine;
        PayrollPayStatement             payrollPayStatement;
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrualForPayPeriodAccruedHours;
        PayrollAccrual                  payrollAccrualForPayPeriodAccruedHours;
        PayrollAccrualEarningCode       payrollAccrualEarningCodeForPayPeriodAccruedHours;

        HcmWorker                       hcmWorkerForPayPeriodAccruedHours;

        PayrollEarningCode              payrollEarningCode;

        PayrollAccrualAccruedHours      accruedHours;

        select sum(Quantity) from payrollPayStatementEarningLine
        where payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
        join RecId, Worker from payrollPayStatement
            where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                && payrollPayStatement.RecId == payStatement.RecId
        exists join RecId from payrollEarningCode
            where payrollEarningCode.RecId == payrollPayStatementEarningLine.EarningCode
                && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours
        join RecId from hcmWorkerForPayPeriodAccruedHours
            where hcmWorkerForPayPeriodAccruedHours.RecId == payrollPayStatement.Worker
        join Worker, Accrual from payrollWorkerEnrolledAccrualForPayPeriodAccruedHours
            where payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Worker == hcmWorkerForPayPeriodAccruedHours.RecId
                && payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrual.RecId
        join RecId from payrollAccrualForPayPeriodAccruedHours
             where payrollAccrualForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Accrual
        notexists join RecId, Accrual, EarningCode from payrollAccrualEarningCodeForPayPeriodAccruedHours
             where payrollAccrualEarningCodeForPayPeriodAccruedHours.Accrual == payrollAccrualForPayPeriodAccruedHours.RecId
                && payrollAccrualEarningCodeForPayPeriodAccruedHours.EarningCode == payrollPayStatementEarningLine.EarningCode;

        accruedHours = payrollPayStatementEarningLine.Quantity;

        return accruedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePayPeriodAccruedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of hours eligible for accrual balance from the pay statement for an accrual enrollment.
    /// </summary>
    /// <returns>
    /// A real value containing the number of hours eligible for accrual balance.
    /// </returns>
    private PayrollAccrualAccruedHours calculatePayPeriodAccruedHours()
    {
        PayrollAccrualAccruedHours      accruedHours;

        //
        // Calculates the number of hours eligible for accrual balance for all pay statement lines
        // having an earning code that has quantity unit equals to hours and have accural basis earning code records.
        //
        switch (payrollAccrual.AccrualMethod)
        {
            case PayrollAccrualMethod::Hourly:
                accruedHours = this.calculateAllHoursEligibleForAccrual() + this.calcAllHoursAccuralBasisEarningGroup();
                break;
            case PayrollAccrualMethod::FlatAmount:
            case PayrollAccrualMethod::WorkerDate:
            case PayrollAccrualMethod::Compensatory:
                accruedHours =  1;
                break;
        }

        return accruedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePayPeriodUsedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the usage balance from the pay statement for an accrual enrollment.
    /// </summary>
    /// <returns>
    /// A real value containing the number of hours used.
    /// </returns>
    private PayrollAccrualUsedHours calculatePayPeriodUsedHours()
    {
        PayrollPayStatementEarningLine  payrollPayStatementEarningLine;
        PayrollPayStatement             payrollPayStatement;
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrualForPayPeriodUsedHours;
        PayrollAccrual                  payrollAccrualPayPeriodUsedHours;
        PayrollAccrualEarningCode       payrollAccrualEarningCodeForPayPeriodUsedHours;
        HcmWorker                       hcmWorkerForPayPeriodUsedHours;

        PayrollEarningCode              payrollEarningCode;

        PayrollAccrualUsedHours         usedHours;

        select sum(Quantity) from payrollPayStatementEarningLine
        where payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
        join RecId, Worker from payrollPayStatement
            where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                && payrollPayStatement.RecId == payStatement.RecId
        exists join RecId from payrollEarningCode
            where payrollEarningCode.RecId == payrollPayStatementEarningLine.EarningCode
                && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours
        join RecId from hcmWorkerForPayPeriodUsedHours
            where hcmWorkerForPayPeriodUsedHours.RecId == payrollPayStatement.Worker
        join Worker, Accrual from payrollWorkerEnrolledAccrualForPayPeriodUsedHours
            where payrollWorkerEnrolledAccrualForPayPeriodUsedHours.Worker == hcmWorkerForPayPeriodUsedHours.RecId
                && payrollWorkerEnrolledAccrualForPayPeriodUsedHours.RecId == payrollWorkerEnrolledAccrual.RecId
        join RecId from payrollAccrualPayPeriodUsedHours
            where payrollAccrualPayPeriodUsedHours.RecId == payrollWorkerEnrolledAccrualForPayPeriodUsedHours.Accrual
        exists join RecId, Accrual, EarningCode from payrollAccrualEarningCodeForPayPeriodUsedHours
            where payrollAccrualEarningCodeForPayPeriodUsedHours.Accrual == payrollAccrualPayPeriodUsedHours.RecId
                && payrollAccrualEarningCodeForPayPeriodUsedHours.EarningCode == payrollPayStatementEarningLine.EarningCode;

        usedHours = payrollPayStatementEarningLine.Quantity;

        return usedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCarryforwardAdjustmentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>PayrollWorkerAccrualAdjustment</c> table while resetting the plan year.
    /// </summary>
    private void createCarryforwardAdjustmentRecord()
    {
        PayrollWorkerAccrualAdjustment  payrollWorkerAccrualAdjustment;

        payrollWorkerAccrualAdjustment.WorkerEnrolledAccrual    = payrollWorkerEnrolledAccrual.RecId;
        payrollWorkerAccrualAdjustment.AdjustmentType           = PayrollAccrualAdjustmentType::CarryForwardBalance;
        payrollWorkerAccrualAdjustment.Description              = "@Payroll:InitialCarryForwardBalance";
        payrollWorkerAccrualAdjustment.TransactionDate          = payrollWorkerEnrolledAccrual.AccrualYearStartDate;

        if (!payrollAccrual.CanCarryForward || accrualDateBasisDate == dateNull())
        {
            // The accrual plan does not allow a carry forward balance; sets the amount to zero.
            payrollWorkerAccrualAdjustment.AdjustedHours = 0;
        }
        else
        {
            //The accrual plan allows for a carry forward balance; sets the
            payrollWorkerAccrualAdjustment.AdjustedHours = min(payrollAccrualRate.CarryForwardLimit, totalAvailableHours);
        }

        payrollWorkerAccrualAdjustment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayStatementAccrualBalanceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>PayrollPayStatementAccrualBalance</c> table.
    /// </summary>
    private void createPayStatementAccrualBalanceRecord()
    {
        PayrollPayStatementAccrualBalance   payStatementAccrualBalance;

        payStatementAccrualBalance.Accrual              = payrollAccrual.RecId;
        payStatementAccrualBalance.PayStatement         = payStatement.RecId;
        payStatementAccrualBalance.AccruedHours         = payPeriodAccruedHours;
        payStatementAccrualBalance.UsedHours            = payPeriodUsedHours;
        payStatementAccrualBalance.TotalAccruedHours    = totalAccruedHours;
        payStatementAccrualBalance.TotalUsedHours       = totalUsedHours;
        payStatementAccrualBalance.TotalAvailableHours  = totalAvailableHours;

        payStatementAccrualBalance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollPayPeriod</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>PayrollPayPeriod</c> table.
    /// </returns>
    private PayrollPayPeriod getPayPeriod()
    {
        if (payStatement.RecId == 0)
        {
            payPeriod = PayrollPayPeriod::find(earningStatement.PayPeriod);
        }
        else
        {
            payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
        }

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlanYearUsageBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the plan year usage balance to validate the earning statement line usage balance.
    /// </summary>
    /// <returns>
    /// A real value containing the total number of hours used.
    /// </returns>
    private PayrollAccrualTotalUsedHours getPlanYearUsageBalance()
    {
        PayrollAccrualCarryForward carryForward;

        if (this.isPlanYearResetRequired())
        {
            totalAvailableHours = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAvailableBalance(payrollWorkerEnrolledAccrual.RecId,
                                                                                                            prevYr(accrualPlanYearStartDate),
                                                                                                            prevYr(accrualPlanYearEndDate));

            // Carry forward amount is set for the next accrual plan year.
            if (!payrollAccrual.CanCarryForward)
            {
                // The accrual does not allow a carry forward balance; set the amount to zero.
                carryForward = 0;
            }
            else
            {
                //
                // The accrual allows for a carry forward balance; set the amount to the minimum of the total available hours and the accrual carry forward
                // maximum limit.
                //
                carryForward = min(payrollAccrualRate.CarryForwardLimit, totalAvailableHours);
            }

            payrollAccrualTransactionsView = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(payrollWorkerEnrolledAccrual.RecId,
                                                                                                                accrualPlanYearStartDate,
                                                                                                                accrualPlanYearEndDate);

            usageBalance = (payrollAccrualTransactionsView.Accrued + carryForward) -
                            (payrollAccrualTransactionsView.Used + payrollAccrualTransactionsView.PendingUsage + earningStatementLine.Quantity);
        }

        else
        {
            payrollAccrualTransactionsView = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(payrollWorkerEnrolledAccrual.RecId,
                                                                                                                accrualPlanYearStartDate,
                                                                                                                accrualPlanYearEndDate);

            usageBalance = (payrollAccrualTransactionsView.Accrued + payrollAccrualTransactionsView.CarryOver) -
                            (payrollAccrualTransactionsView.Used + payrollAccrualTransactionsView.PendingUsage + earningStatementLine.Quantity);
        }

        return usageBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmWorker</c> table.
    /// </summary>
    /// <returns>
    /// A record from the <c>HcmWorker</c> table.
    /// </returns>
    private HcmWorker getWorker()
    {
        if (payStatement.RecId == 0)
        {
            hcmWorker = HcmWorker::find(earningStatement.Worker);
        }
        else
        {
            hcmWorker = HcmWorker::find(payStatement.Worker);
        }

        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerMonthsOfEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of months of employment for a worker as of pay period end date.
    /// </summary>
    /// <returns>
    /// A real value containing the number of months of employment.
    /// </returns>
    private PayrollAccrualEmploymentMonth getWorkerMonthsOfEmployment()
    {
        return HcmDateTimeUtil::monthDifferenceIncludeEndDay(accrualDateBasisDate, payPeriodEndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAccrualBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variable with zero holding the accrual balances for an accrual enrollment.
    /// </summary>
    private void initializeAccrualBalances()
    {
        payPeriodAccruedHours   = 0;
        payPeriodUsedHours      = 0;
        totalAccruedHours       = 0;
        totalUsedHours          = 0;
        totalAvailableHours     = 0;
        planYearAccruedHours    = 0;
        planYearUsedHours       = 0;
        planYearCarryOverHours  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the start date and the end date of the accrual plan year for the pay period.
    /// </summary>
    private void initializeDateRange()
    {
        isDateRangeValid = false;

        if (payrollAccrual.StartingDate <= payPeriodEndDate)
        {
            date accrualYearStartDate = payrollWorkerEnrolledAccrual.AccrualYearStartDate;
            date accrualYearEndDate = payrollWorkerEnrolledAccrual.getAccrualYearEndDate();

            date accrualNextYearStartDate = nextYr(accrualYearStartDate);
            date accrualNextYearEndDate = nextYr(accrualYearEndDate);

            // The starting date of accrual plan is not in the future; sets the date ranges.
            if (accrualYearStartDate == dateNull() || (accrualYearStartDate <= payPeriodEndDate && accrualYearEndDate >= payPeriodEndDate))
            {
                // Sets the date range if the accrual plan is life to date or the pay period end date is in the current accrual plan year.
                accrualPlanYearStartDate = accrualYearStartDate;
                accrualPlanYearEndDate = accrualYearEndDate;
                isDateRangeValid = true;
            }
            else if (accrualYearEndDate < payPeriodEndDate && accrualNextYearEndDate >= payPeriodEndDate)
            {
                //
                // Sets the date range if the pay period spans over two plan years or in a same plan year.
                //
                accrualPlanYearStartDate = accrualNextYearStartDate;
                accrualPlanYearEndDate = accrualNextYearEndDate;
                isDateRangeValid = true;
            }
            else if (accrualYearStartDate > payPeriodEndDate && prevYr(accrualYearStartDate) < payPeriodEndDate)
            {
                //  Sets the date range if the plan year reset has already happened and the pay period is in the previous year.
                accrualPlanYearStartDate = prevYr(accrualYearStartDate);
                accrualPlanYearEndDate = accrualYearStartDate - 1;
                isDateRangeValid = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlanYearResetRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the accrual plan year reset is required to take place while processing accrual for the pay statement.
    /// </summary>
    /// <returns>
    /// true if the accrual plan year reset is required; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The accrual plan year reset is required if the plan year start date is filled in and the pay period is the last pay period in the accrual plan year.
    /// </remarks>
    private boolean isPlanYearResetRequired()
    {
        date accrualYearEndDate = payrollWorkerEnrolledAccrual.getAccrualYearEndDate();
        date accrualNextYearEndDate = nextYr(accrualYearEndDate);

        return (payrollWorkerEnrolledAccrual.AccrualYearStartDate != dateNull()
              && (accrualYearEndDate < payPeriodEndDate && accrualNextYearEndDate > payPeriodEndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates accrual and usage transactions for the specified pay statement and resets the accrual plan year if required.
    /// </summary>
    /// <param name="_payStatementRecId">
    /// The record ID of the <c>PayrollPayStatement</c> table buffer.
    /// </param>
    public void processAccrual(PayrollPayStatementRecId _payStatementRecId)
    {
        PayrollPayStatement     payrollPayStatement;
        HcmWorker               hcmWorkerOnPayStatement;

        // Finds the pay statement header record.
        payStatement = PayrollPayStatement::find(_payStatementRecId);

        earningStatement = null;

        // Checks if an pay statement record exists for the passed in record ID.
        if (payStatement.RecId != 0 && !payStatement.IsReversed)
        {
            // Finds the pay period end date.
            payPeriodEndDate    = this.getPayPeriod().PeriodEndDate;

            // Finds the worker.
            hcmWorkerRecId      = this.getWorker().RecId;

            // This query returns the set of the accrual enrollment records, the specified pay statement is to be processed for.
            while select forupdate Worker, Accrual, AccrualYearStartDate, IsAccrualStopped, IsUsageStopped, AccrualDateBasis, CustomAccuralDate from payrollWorkerEnrolledAccrual
                join RecId from hcmWorkerOnPayStatement
                    where payrollWorkerEnrolledAccrual.Worker == hcmWorkerOnPayStatement.RecId
                join Worker, RecId, PayPeriod from payrollPayStatement
                    where hcmWorkerOnPayStatement.RecId == payrollPayStatement.Worker
                        && payrollPayStatement.RecId == _payStatementRecId
                join RecId, IsIncludedInAccrual, CanCarryForward, StartingDate, AccrualId, AccrualMethod, WorkerAccrualDateMethod, Frequency, CustomAccrualDate from payrollAccrual
                    where payrollWorkerEnrolledAccrual.Accrual == payrollAccrual.RecId
                        && (!payrollWorkerEnrolledAccrual.IsAccrualStopped || !payrollWorkerEnrolledAccrual.IsUsageStopped)
            {
                // Initilizes the balance variables for each enrollment.
                this.initializeAccrualBalances();

                // Determines the start date and end date of the accrual plan year.
                this.initializeDateRange();

                PayrollAccrualUsedHours hoursUsedPriorToNewBenifitYear = 0;

                if (!isDateRangeValid)
                {
                    //
                    // Pay period end is not in the current accrual plan year or the very next accrual plan year and the accrual date is
                    // not is valid date range or pay pay period, so move to the next enrollment record.
                    //
                    continue;
                }

                // Finds the accrual date basis date for the accrual enrollment record.
                accrualDateBasisDate = payrollWorkerEnrolledAccrual.getAccrualDateBasisDate(hcmWorkerRecId, payPeriodEndDate);

                if (accrualDateBasisDate == dateNull())
                {
                    // The accrual date basis date is not specified for the worker so display warning message.
                    warning(strFmt("@Payroll:TheAccrualBalanceTransactionsWereNotCreatedForTheAccrualPlan", payrollAccrual.AccrualId, payStatement.DocumentNumber, hcmWorker.name()));
                }

                // Finds the number of months of employment for the worker.
                workerMonthsOfEmployment = this.getWorkerMonthsOfEmployment();

                // Finds the accrual rate record to get the minimum usage limit for validation.
                payrollAccrualRate = PayrollAccrualRate::findAccrualRateByAccrualEmploymentMonths(payrollAccrual.RecId, workerMonthsOfEmployment);

                // If true resets the accrual plan year.
                if (this.isPlanYearResetRequired())
                {
                    // Gets the total available hours for the previous plan year so that carry forward for the next plan year can be calculated.
                    totalAvailableHours = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAvailableBalance(
                        payrollWorkerEnrolledAccrual.RecId,
                        prevYr(accrualPlanYearStartDate),
                        prevYr(accrualPlanYearEndDate));

                    PayrollAccrualTransactionsView accrualTransactionsPriorToNewBenefitYear = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(
                        payrollWorkerEnrolledAccrual.RecId,
                        prevYr(accrualPlanYearStartDate),
                        prevYr(accrualPlanYearEndDate));

                    hoursUsedPriorToNewBenifitYear = accrualTransactionsPriorToNewBenefitYear.PendingUsage;

                    // Updates the accrual year start date and creates initial carry forward adjustment record.
                    this.resetAccrualPlanYear();
                }

                // Gets all the balances to be used in the calculation below.
                payrollAccrualTransactionsView = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualBalances(payrollWorkerEnrolledAccrual.RecId,
                                                                                                                    accrualPlanYearStartDate,
                                                                                                                    accrualPlanYearEndDate);

                planYearAccruedHours = payrollAccrualTransactionsView.Accrued;

                if (this.validateAccrualPeriodByAccrualMethod())
                {
                    if (accrualDateBasisDate != dateNull())
                    {
                        // Gets the pay period accrued hours for the enrollment.
                        if (!payrollWorkerEnrolledAccrual.IsAccrualStopped)
                        {
                            //
                            // The <c>calculatePayPeriodAccruedHours</c> method returns the number of hours that are eligible for accrual balance. The returned number of hours
                            // is needed to be multipled by the accrual rate.
                            //
                            payPeriodAccruedHours = this.calculatePayPeriodAccruedHours() * this.calculateHourlyRate();
                        }

                        totalAccruedHours = planYearAccruedHours + payPeriodAccruedHours;

                        if (totalAccruedHours > payrollAccrualRate.MaximumLimit)
                        {
                            // This is the value that will be used for the <c>AccruedHours</c> field while creating the balance record.
                            if (planYearAccruedHours >= payrollAccrualRate.MaximumLimit)
                            {
                                // Maximum accrued hours limit was reached.
                                payPeriodAccruedHours = 0;
                            }
                            else
                            {
                                // Pay period accrued hours cannot exceeed maximum accrued hours limit.
                                payPeriodAccruedHours = payrollAccrualRate.MaximumLimit - planYearAccruedHours;
                            }
                        }
                    }
                }

                if (!payrollWorkerEnrolledAccrual.IsUsageStopped)
                {
                    //
                    // Used hours are always calculated as long as the enrolled accrual is not "stopped".
                    //
                    // This is the value that will be used for the <c>UsedHours</c> field while creating the balance record.
                    //
                    payPeriodUsedHours = this.calculatePayPeriodUsedHours();
                }

                // This is the value that will be used for the <c>TotalAccruedHours</c> field while creating the balance record.
                totalAccruedHours = planYearAccruedHours + payPeriodAccruedHours;

                planYearUsedHours = payrollAccrualTransactionsView.Used;

                // This is the value that will be used for the <c>TotalUsedHours</c> field while creating the balance record.
                totalUsedHours = payPeriodUsedHours + planYearUsedHours;

                planYearCarryOverHours = payrollAccrualTransactionsView.CarryOver;

                // This is the value that will be used for the <c>TotalAvailableHours</c> field while creating the balance record.
                totalAvailableHours = totalAccruedHours + planYearCarryOverHours + hoursUsedPriorToNewBenifitYear - totalUsedHours;

                this.createPayStatementAccrualBalanceRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAccrualPlanYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the accrual plan year by updating the <c>AccrualYearStartDate</c> field of the <c>PayrollWorkerEnrolledAccrual</c> table
    /// and creating carry forward adjustment record.
    /// </summary>
    private void resetAccrualPlanYear()
    {
        payrollWorkerEnrolledAccrual.AccrualYearStartDate = nextYr(payrollWorkerEnrolledAccrual.AccrualYearStartDate);
        payrollWorkerEnrolledAccrual.update();

        this.createCarryforwardAdjustmentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the usage according to usage rules when the specified earning statement line is attempted to be released.
    /// </summary>
    /// <param name="_earningStatementLine">
    /// The <c>PayrollEarningStatementLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateUsage(PayrollEarningStatementLine _earningStatementLine)
    {
        PayrollEarningStatement         payrollEarningStatement;
        HcmWorker                       hcmWorkerOnEarning;

        boolean                         isValid, isSelectedLineForUsage;

        // Checks if an earning statement line exists for the passed in record ID.
        if (_earningStatementLine.RecId != 0)
        {
            payStatement = null;

            earningStatementLine = _earningStatementLine;

            if (earningStatement.RecId != earningStatementLine.EarningStatement)
            {
                // Finds the earning statement header record.
                earningStatement = PayrollEarningStatement::find(earningStatementLine.EarningStatement);

                // Finds the pay period end date.
                payPeriodEndDate    = this.getPayPeriod().PeriodEndDate;

                // Finds the worker.
                hcmWorkerRecId      = this.getWorker().RecId;
            }

            // This query returns the set of the accrual enrollment records, the specified earning statement line is to be validated against.
            while select Worker, Accrual, AccrualYearStartDate, AccrualDateBasis, CustomAccuralDate from payrollWorkerEnrolledAccrual
                join RecId from hcmWorkerOnEarning
                    where payrollWorkerEnrolledAccrual.Worker == hcmWorkerOnEarning.RecId
                        && !payrollWorkerEnrolledAccrual.IsUsageStopped
                join Worker, RecId from payrollEarningStatement
                    where hcmWorkerOnEarning.RecId == payrollEarningStatement.Worker
                        && payrollEarningStatement.RecId == earningStatementLine.EarningStatement
                join RecId, CanCarryForward, StartingDate, AccrualId from payrollAccrual
                    where payrollWorkerEnrolledAccrual.Accrual == payrollAccrual.RecId
                join EarningCode, Accrual from payrollAccrualEarningCode
                    where payrollAccrual.RecId == payrollAccrualEarningCode.Accrual
                        && payrollAccrualEarningCode.EarningCode == earningStatementLine.EarningCode
            {
                // Finds the accrual date basis date for the accrual enrollment record.
                accrualDateBasisDate = payrollWorkerEnrolledAccrual.getAccrualDateBasisDate(hcmWorkerRecId, payPeriodEndDate);

                if (accrualDateBasisDate == dateNull())
                {
                    // The accrual date basis date is not specified for the worker so display warning and move to the next enrollment record.
                    warning(strFmt("@Payroll:OnEarningsStatement1ALineThatHasAnEarningsDateOf2AndAnEarnin", earningStatement.DocumentNumber, earningStatementLine.EarningDate, PayrollEarningCode::find(earningStatementLine.EarningCode).EarningCode, payrollAccrual.AccrualId));

                    continue;
                }

                // Determines the start date and end date of the accrual plan year.
                this.initializeDateRange();

                // Pay period end is not in the current accrual plan year or the very next accrual plan year so move to the next enrollment record.
                if (!isDateRangeValid)
                {
                    continue;
                }

                // Finds the number of months of employment for the worker.
                workerMonthsOfEmployment = this.getWorkerMonthsOfEmployment();

                //
                // Indicates if there was an accrual enrollment record found and the earning statement line was validated against it to confirm that the line is for
                // accrual usage.
                //

                isSelectedLineForUsage = true;

                // Finds the accrual rate record to get the minimum usage limit for validation.
                payrollAccrualRate = PayrollAccrualRate::findAccrualRateByAccrualEmploymentMonths(payrollAccrual.RecId, workerMonthsOfEmployment);

                //
                // Validates the plan year usage balance should always be greater than or equal to the minimum usage limit. The minimum usage limit has reached so the
                // earning statement line cannot be released.
                //

                if (payrollAccrualRate.MinimumLimit > this.getPlanYearUsageBalance())
                {
                    isValid = checkFailed(strFmt("@Payroll:AnEarningsLineWithAnEarningsDateOf1AndAnEarningCodeOf2WasNot", _earningStatementLine.EarningDate, PayrollEarningCode::find(_earningStatementLine.EarningCode).EarningCode));
                    break;
                }
                else
                {
                    isValid = true;
                }
            }

            //
            // Returns true so that the earning statement line should be released if it is confirmed that the earning statement line is not for
            // accrual usage.
            //

            if (!isSelectedLineForUsage)
            {
                isValid = true;
            }
        }
        else
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllHoursAccuralBasisEarningGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of hours eligible for accrual balance for the pay statement lines
    /// having an earning code that has quantity unit equals to hours and are associated with an earning group
    /// that is defined in associated <c>PayrollAccrualBasisEarningcode</c> table record.
    /// </summary>
    /// <returns>
    /// A real value containing the number of hours eligible for accrual balance.
    /// </returns>
    /// <remarks>
    /// This method should be called when the accrual on usage is checked on the accrual plan.
    /// </remarks>
    private PayrollAccrualAccruedHours calcAllHoursAccuralBasisEarningGroup()
    {
        PayrollPayStatementEarningLine  payrollPayStatementEarningLine;
        PayrollPayStatement             payrollPayStatement;
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrualForPayPeriodAccruedHours;
        HcmWorker                       hcmWorkerForPayPeriodAccruedHours;
        PayrollEarningCodeGroupCode     payrollEarningCodeGroupCode;
        PayrollEarningCode              payrollEarningCode;
        PayrollAccrualBasisEarningcode  payrollAccrualBasisEarningcode, notExistAccrualBasisEarningcode;
        PayrollAccrual                  payrollAccrualAccuredHours;
        PayrollAccrualAccruedHours      accruedHours;
        Set                             earningCodePayStatEarningLineSet = new Set(Types::Container);

        while select Quantity from payrollPayStatementEarningLine
            where payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
            join RecId from payrollPayStatement
                where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                    && payrollPayStatement.RecId == payStatement.RecId
            join RecId from hcmWorkerForPayPeriodAccruedHours
                where hcmWorkerForPayPeriodAccruedHours.RecId == payrollPayStatement.Worker
            join RecId from payrollWorkerEnrolledAccrualForPayPeriodAccruedHours
                where payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Worker == hcmWorkerForPayPeriodAccruedHours.RecId
                    && payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrual.RecId
            join RecId from payrollAccrualAccuredHours
                where payrollAccrualAccuredHours.RecId == payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Accrual
            join RecId from payrollAccrualBasisEarningcode order by RecId
                where payrollAccrualBasisEarningcode.Accrual == payrollAccrualAccuredHours.RecId
            join RecId from payrollEarningCode
                where payrollEarningCode.RecId == payrollPayStatementEarningLine.EarningCode
                    && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours
            join RecId from payrollEarningCodeGroupCode
                where payrollEarningCodeGroupCode.EarningCode == payrollEarningCode.RecId
                   &&  payrollEarningCodeGroupCode.EarningCodeGroup == payrollAccrualBasisEarningcode.EarningCodeGroup
            notExists join RecId from notExistAccrualBasisEarningcode
                    where notExistAccrualBasisEarningcode.EarningCode  == payrollEarningCode.RecId
                    && notExistAccrualBasisEarningcode.Accrual == payrollAccrualAccuredHours.RecId

        {
            if (!earningCodePayStatEarningLineSet.in([payrollPayStatementEarningLine.RecId, payrollEarningCode.RecId]))
            {
                //
                // Do not aggregate the quantity if the earning code is not part of the earning group and
                // added as seperate record in the <c>PayrollAccrualBasisEarningcode</c> table record. This check
                // will also ensure to aggregate once if the earning code is a part of multiple earning groups and
                // earning groups are part of the <c>PayrollAccrualBasisEarningcode</c> table record.
                //
                accruedHours += payrollPayStatementEarningLine.Quantity;
                earningCodePayStatEarningLineSet.add([payrollPayStatementEarningLine.RecId, payrollEarningCode.RecId]);
            }
        }

        return accruedHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCompensatoryRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Computes rate for the accrual plan that is of compensatory type.
    /// </summary>
    /// <returns>
    /// The rate for the accrual plan that is of compensatory type.
    /// </returns>
    private PayrollAccrualAccruedHours calculateCompensatoryRate()
    {
        PayrollPayStatementEarningLine  payrollPayStatementEarningLine;
        PayrollPayStatement             payrollPayStatement;
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrualForPayPeriodAccruedHours;
        HcmWorker                       hcmWorkerForPayPeriodAccruedHours;

        PayrollEarningCode              payrollEarningCode;
        PayrollAccrualBasisEarningcode  payrollAccrualBasisEarningcode;
        PayrollAccrual                  payrollAccrualAccuredHours;

        PayrollAccrualAccruedHours      accruedRate;

        if (payrollAccrual.AccrualMethod == PayrollAccrualMethod::Compensatory)
        {
            while select AccrualRate, EarningCode from payrollAccrualBasisEarningcode
                    where  payrollAccrualBasisEarningcode.AccuralType == PayrollAccrualType::EarningCode
                join RecId from payrollAccrualAccuredHours
                    where payrollAccrualAccuredHours.RecId == payrollAccrualBasisEarningcode.Accrual
                    && payrollAccrualAccuredHours.RecId == payrollAccrual.RecId
                join Worker, Accrual from payrollWorkerEnrolledAccrualForPayPeriodAccruedHours
                    where payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Accrual == payrollAccrualAccuredHours.RecId
                        && payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrual.RecId
                join RecId from hcmWorkerForPayPeriodAccruedHours
                    where hcmWorkerForPayPeriodAccruedHours.RecId == payrollWorkerEnrolledAccrualForPayPeriodAccruedHours.Worker
                join RecId, Worker from payrollPayStatement
                    where payrollPayStatement.Worker == hcmWorkerForPayPeriodAccruedHours.RecId
                        && payrollPayStatement.RecId == payStatement.RecId
                join RecId,Quantity from payrollPayStatementEarningLine
                    where payrollPayStatementEarningLine.PayStatement == payrollPayStatement.RecId
                    && payrollPayStatementEarningLine.EarningCode == payrollAccrualBasisEarningcode.EarningCode
                    && payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                join RecId from payrollEarningCode
                    where payrollEarningCode.RecId == payrollPayStatementEarningLine.EarningCode
                        && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours
            {
                accruedRate += payrollPayStatementEarningLine.Quantity * payrollAccrualBasisEarningcode.AccrualRate;
            }
        }

        return accruedRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHourlyRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the hourly rate for the benefit accural plan on basis of the accrual method.
    /// </summary>
    /// <returns>
    ///  The hourly rate for the benefit accural plan on basis of the accrual method.
    /// </returns>
    private PayrollAccrualHourlyRate calculateHourlyRate()
    {
        PayrollAccrualHourlyRate accuralHourlyRate;

        switch (payrollAccrual.AccrualMethod)
        {
            case PayrollAccrualMethod::Hourly:
            case PayrollAccrualMethod::FlatAmount:
            case PayrollAccrualMethod::WorkerDate:
                accuralHourlyRate = payrollAccrualRate.HourlyRate;
                break;
            case PayrollAccrualMethod::Compensatory:
                accuralHourlyRate = this.calculateCompensatoryRate();
                break;
            default:
                accuralHourlyRate = 1;
        }

        return accuralHourlyRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccrualGenerationOccuringDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date that is used to determine the benefit accrual plan is eligbile for creation or not.
    /// </summary>
    /// <returns>
    /// The date that is used to determine the generation of the benefit accrual plan.
    /// </returns>
    private TransDate getAccrualGenerationOccuringDate()
    {
        TransDate accuralDate;

        switch (payrollAccrual.WorkerAccrualDateMethod)
        {
            case PayrollWorkerAccrualDateMethod::AnnualPlanStartDate:

                accuralDate = payrollAccrual.StartingDate;

                break;

            case PayrollWorkerAccrualDateMethod::Custom:

                accuralDate = payrollAccrual.CustomAccrualDate;

                break;

            case PayrollWorkerAccrualDateMethod::EmployeeStartDate:

                accuralDate = payrollWorkerEnrolledAccrual.getEmploymentStartDate(hcmWorkerRecId, payPeriodEndDate);

                break;

            case PayrollWorkerAccrualDateMethod::Seniority:

                accuralDate = payrollWorkerEnrolledAccrual.getWorkerSeniorityDate(hcmWorkerRecId, payPeriodEndDate);

                break;
        }

        return accuralDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualPeriodByAccrualMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accrual period with respect to the accural method in benefit accrual plan.
    /// </summary>
    /// <returns>
    /// true, if the accrual period is with in the valid accrual method criteria; otherwise, false.
    /// </returns>
    private boolean validateAccrualPeriodByAccrualMethod()
    {
        boolean isValidBenefitAccuralPlan = true;
        TransDate accuralDate;
        PayrollCalculationFrequency calculationFrequency;

        switch (payrollAccrual.AccrualMethod)
        {
            case PayrollAccrualMethod::FlatAmount:

                isValidBenefitAccuralPlan = payStatement.PaymentType == PayrollPaymentType::Primary;

                calculationFrequency = PayrollCalculationFrequency::find(payrollAccrual.Frequency);

                if (isValidBenefitAccuralPlan
                    && !calculationFrequency.isDefaultCalculationFrequency()
                    && !PayrollCalculationFrequencyPayPeriod::existByCalcFreqAndPayPeriod(payrollAccrual.Frequency, payStatement.PayPeriod))
                {
                    isValidBenefitAccuralPlan = false;
                }

                break;
            case PayrollAccrualMethod::WorkerDate:

                isValidBenefitAccuralPlan = payStatement.PaymentType == PayrollPaymentType::Primary;

                if (isValidBenefitAccuralPlan)
                {
                    accuralDate = this.getAccrualGenerationOccuringDate();

                    accuralDate = mkDate(dayOfMth(accuralDate), mthOfYr(accuralDate), year(payPeriodEndDate));

                    if (!PayrollPayPeriod::isDateInPeriod(accuralDate, payStatement.PayPeriod))
                    {
                        isValidBenefitAccuralPlan = false;
                    }
                }
        }

        return isValidBenefitAccuralPlan;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>