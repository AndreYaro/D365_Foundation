<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPeriodSumDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>LedgerPeriodSum_FR</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerPeriodSum_FR</c> SSRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(LedgerPeriodSumContract_FR))
]
class LedgerPeriodSumDP_FR extends SrsReportDataProviderPreProcessTempDB
{
    FiscalCalendarPeriod   fiscalCalendarPeriod;
    FiscalCalendarYear     fiscalCalendarYear;
    FiscalCalendarRecId    calendarRecId;

    AmountMST              periodTotalDebit;
    AmountMST              periodTotalCredit;

    LedgerPeriodSumTmp_FR  ledgerPeriodSumTmp_FR;
    NumberOfRecords        numRec;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerPeriodSumTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>LedgerPeriodSumTmp_FR</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>LedgerPeriodSumTmp_FR</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerPeriodSumTmp_FR))
    ]
    public LedgerPeriodSumTmp_FR getLedgerPeriodSumTmp_FR()
    {
        select ledgerPeriodSumTmp_FR;
        return ledgerPeriodSumTmp_FR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        StartDate                       startDate;
        EndDate                         endDate;
        Range                           rangeVoucher;
        CurrentOperationsTaxInclAll_FR  postingLayerFilter;
        boolean                         groupBy;

        QueryBuildRange  rangeTransDate;
        QueryBuildRange  rangePeriodType;
        QueryBuildRange  rangeAmountMST;

        QueryBuildDataSource  dsFiscalCalendarPeriod;
        QueryBuildDataSource  qbdsGeneralJournalEntry;
        QueryBuildDataSource  qbdsGeneralJournalAccountEntry;
        QueryBuildDataSource  qbdsSubledgerVoucherGeneralJournalEntry;

        GeneralJournalAccountEntry  generalJournalAccountEntry;
        Query                       query;
        QueryRun                    queryRun;

        LedgerPeriodSumContract_FR  contract = this.parmDataContract() as LedgerPeriodSumContract_FR;

        startDate           = contract.parmStartDate();
        endDate             = contract.parmEndDate();
        rangeVoucher        = contract.parmRangeVoucher();
        postingLayerFilter  = contract.parmPostingLayerFilter();
        query               = new Query();

        qbdsGeneralJournalEntry  = query.addDataSource(tablenum(GeneralJournalEntry));
        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger))
                                    .value(queryValue(Ledger::current()));

        if (postingLayerFilter != CurrentOperationsTaxInclAll_FR::All)
        {
            qbdsGeneralJournalEntry.addRange(fieldnum(GeneralJournalEntry, PostingLayer)).value(queryValue(postingLayerFilter + 0));
        }

        rangeTransDate           = qbdsGeneralJournalEntry.addRange(fieldnum(GeneralJournalEntry, AccountingDate));

        dsFiscalCalendarPeriod = qbdsGeneralJournalEntry.addDataSource(tablenum(FiscalCalendarPeriod));
        dsFiscalCalendarPeriod.fetchMode(QueryFetchMode::One2One);
        dsFiscalCalendarPeriod.addLink(fieldnum(GeneralJournalEntry, FiscalCalendarPeriod), fieldnum(FiscalCalendarPeriod, RecId));
        rangePeriodType = dsFiscalCalendarPeriod.addRange(fieldnum(FiscalCalendarPeriod, Type));

        qbdsGeneralJournalAccountEntry  = qbdsGeneralJournalEntry.addDataSource(tablenum(GeneralJournalAccountEntry));
        qbdsGeneralJournalAccountEntry.fetchMode(QueryFetchMode::One2One);
        qbdsGeneralJournalAccountEntry.addLink(fieldnum(GeneralJournalEntry, RecId), fieldnum(GeneralJournalAccountEntry, GeneralJournalEntry));
        rangeAmountMST                  = qbdsGeneralJournalAccountEntry.addRange(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount));

        if (rangeVoucher)
        {
            qbdsSubledgerVoucherGeneralJournalEntry  = qbdsGeneralJournalEntry.addDataSource(tablenum(SubledgerVoucherGeneralJournalEntry));
            qbdsSubledgerVoucherGeneralJournalEntry.fetchMode(QueryFetchMode::One2One);
            qbdsSubledgerVoucherGeneralJournalEntry.addLink(fieldnum(GeneralJournalEntry, RecId), fieldnum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry));
            qbdsSubledgerVoucherGeneralJournalEntry.addRange(fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(rangeVoucher);
        }

        qbdsGeneralJournalAccountEntry.addSelectionField(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

        calendarRecId  = Ledger::fiscalCalendar(CompanyInfo::current());

        while select fiscalCalendarPeriod order by fiscalCalendarPeriod.StartDate
            where fiscalCalendarPeriod.StartDate >= startDate
                && fiscalCalendarPeriod.EndDate <= endDate
        join fiscalCalendarYear
            where fiscalCalendarYear.FiscalCalendar == calendarRecId
                && fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear
        {
            periodTotalDebit   = 0;
            periodTotalCredit  = 0;

            rangeTransDate.value( queryRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate));
            rangePeriodType.value(queryValue(fiscalCalendarPeriod.Type));

            if (fiscalCalendarPeriod.Type  == FiscalPeriodType::Operating)
            {
                if (!groupBy)
                {
                    qbdsGeneralJournalAccountEntry.orderMode(OrderMode::GroupBy);
                    qbdsGeneralJournalAccountEntry.addSortField(fieldnum(GeneralJournalAccountEntry, IsCredit));

                    groupBy = true;
                }

                rangeAmountMST.value('');

                queryRun  = new QueryRun(query);
                while (queryRun.next())
                {
                    generalJournalAccountEntry  = queryRun.get(tablenum(GeneralJournalAccountEntry));

                    switch (generalJournalAccountEntry.IsCredit)
                    {
                        case NoYes::No:
                            periodTotalDebit  += generalJournalAccountEntry.AccountingCurrencyAmount;
                            break;

                        case NoYes::Yes:
                            periodTotalCredit  -= generalJournalAccountEntry.AccountingCurrencyAmount;
                            break;
                    }
                }
            }
            else // Correct the bug that closing/opening transactions does not have correct crediting flag
            {
                if (groupBy)
                {
                    qbdsGeneralJournalAccountEntry.orderMode(OrderMode::OrderBy);
                    qbdsGeneralJournalAccountEntry.sortClear();

                    groupBy  = false;
                }

                rangeAmountMST.value('0..');

                queryRun  = new QueryRun(query);
                queryRun.next();
                generalJournalAccountEntry  = queryRun.get(tablenum(GeneralJournalAccountEntry));

                periodTotalDebit            += generalJournalAccountEntry.AccountingCurrencyAmount;

                rangeAmountMST.value('..0');

                queryRun                    = new QueryRun(query);
                queryRun.next();

                generalJournalAccountEntry  = queryRun.get(tablenum(GeneralJournalAccountEntry));

                periodTotalCredit           -= generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            ledgerPeriodSumTmp_FR.StartDate          = fiscalCalendarPeriod.StartDate;
            ledgerPeriodSumTmp_FR.EndDate            = fiscalCalendarPeriod.EndDate;
            ledgerPeriodSumTmp_FR.PeriodCode         = fiscalCalendarPeriod.Type;
            ledgerPeriodSumTmp_FR.Status             = fiscalCalendarPeriod.currentLedgerPeriodStatus();
            ledgerPeriodSumTmp_FR.PeriodTotalDebit   = periodTotalDebit;
            ledgerPeriodSumTmp_FR.PeriodTotalCredit  = periodTotalCredit;
            ledgerPeriodSumTmp_FR.insert();
            numRec++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>