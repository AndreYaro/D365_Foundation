<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDeclarationCalcController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>AlcoholDeclarationCalcController_RU</c> class is the controller class which is used to
///   control the declaration journal form, perform some checks and call the calculation functionality.
/// </summary>
class AlcoholDeclarationCalcController_RU extends RunBaseBatch implements BatchRetryable
{
    AlcoholDeclarationJournalTable_RU   journalTable;
    AlcoholDeclarationJournalTrans_RU   journalTrans;

    boolean                             recalcReceiptIssue;
    DialogField                         fieldRecalcReceiptIssue;
    container                           packedRecIdSet;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBranch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the data for one record in <c>AlcoholDeclarationJournalTransBranch_RU</c> table.
    /// </summary>
    /// <param name="_alcoholDeclarationJournalTransBranch">
    ///    <c>AlcoholDeclarationJournalTransBranch_RU</c> record for which the data should be calculated.
    /// </param>
    protected void calcBranch(AlcoholDeclarationJournalTransBranch_RU     _alcoholDeclarationJournalTransBranch)
    {
        AlcoholDeclarationCalc_RU               alcoholDeclarationCalc;

        // we should calculate the branch in the following cases:
        // 1. branch is not calculated
        // or
        // 2. branch is calculated, and recalcReceiptIssue == true and declarationType == wholeSale5 and exist not calculated branches for wholeSale6 or wholeSale7

        if (   _alcoholDeclarationJournalTransBranch.Status == AlcoholDeclarationStatus_RU::NotCalculated
            || (   recalcReceiptIssue == true
                && _alcoholDeclarationJournalTransBranch.AlcoholDeclarationType == AlcoholDeclarationType_RU::Wholesale5
                && (  AlcoholDeclarationJournalTransBranch_RU::find(_alcoholDeclarationJournalTransBranch.JournalId,
                                                                    AlcoholDeclarationType_RU::Wholesale6,
                                                                    _alcoholDeclarationJournalTransBranch.BranchId).Status == AlcoholDeclarationStatus_RU::NotCalculated
                   ||
                      AlcoholDeclarationJournalTransBranch_RU::find(_alcoholDeclarationJournalTransBranch.JournalId,
                                                                    AlcoholDeclarationType_RU::Wholesale7,
                                                                    _alcoholDeclarationJournalTransBranch.BranchId).Status == AlcoholDeclarationStatus_RU::NotCalculated)
               )
           )
        {
            if (this.canBranchBeCalced(_alcoholDeclarationJournalTransBranch))
            {
                ttsbegin;

                alcoholDeclarationCalc = AlcoholDeclarationCalc_RU::construct(AlcoholDeclarationJournalTransBranch_RU::findRecId(_alcoholDeclarationJournalTransBranch.RecId, true));
                alcoholDeclarationCalc.parmRecalcReceiptIssue(recalcReceiptIssue);
                alcoholDeclarationCalc.calc();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBranchBeCalced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the data for the <c>AlcoholDeclarationJournalTransBranch_RU</c> record can be calculated.
    /// </summary>
    /// <param name="_alcoholDeclarationJournalTransBranch">
    ///    <c>AlcoholDeclarationJournalTransBranch_RU</c> to check.
    /// </param>
    /// <returns>
    ///    true if the data can be calculated; false otherwise.
    /// </returns>
    public boolean canBranchBeCalced(AlcoholDeclarationJournalTransBranch_RU  _alcoholDeclarationJournalTransBranch)
    {
        if (_alcoholDeclarationJournalTransBranch.journalTable().isCorrectionJournal())
            return checkFailed("@SYS4002847");
        else
            return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in the <c>AlcoholDeclarationJournalTrans_RU</c> table if there were no records
    ///    for the current <c>AlcoholDeclarationJournalTable_RU</c> table.
    /// </summary>
    /// <returns>
    ///    True if the records already exist or were created; false otherwise.
    /// </returns>
    public boolean createJournalTrans()
    {
        AlcoholDeclarationJournalTrans_RU   journalTransLocal;

        void createJournalTrans(AlcoholDeclarationType_RU    _declarationType)
        {
            journalTransLocal.clear();
            journalTransLocal.initValue();
            journalTransLocal.initFromJournalTable(journalTable);
            journalTransLocal.AlcoholDeclarationType = _declarationType;
            journalTransLocal.insert();
        }

        select firstonly RecId from journalTransLocal
            where journalTransLocal.JournalId == journalTable.JournalId;

        if (journalTransLocal.RecId != 0)
        {
            return true;
        }

        if (Box::yesNo("@SYS4002848", DialogButton::Yes, "@SYS4002849", "@GLS104006") == DialogButton::No)
        {
            return false;
        }

        createJournalTrans(AlcoholDeclarationType_RU::Wholesale5);
        createJournalTrans(AlcoholDeclarationType_RU::Wholesale6);
        createJournalTrans(AlcoholDeclarationType_RU::Wholesale7);
        createJournalTrans(AlcoholDeclarationType_RU::Retail11);
        createJournalTrans(AlcoholDeclarationType_RU::Retail12);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTransBranch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in the <c>AlcoholDeclarationJournalTransBranch_RU</c> table if there were no records
    ///    for the current <c>AlcoholDeclarationJournalTrans_RU</c> table.
    /// </summary>
    /// <returns>
    ///    True if the records already exist or were created; false otherwise.
    /// </returns>
    public boolean createJournalTransBranch()
    {
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranchLocal;
        Branches_RU                                 branches;

        select firstonly RecId from journalTransBranchLocal
             where journalTransBranchLocal.JournalId              == journalTrans.JournalId
                && journalTransBranchLocal.AlcoholDeclarationType == journalTrans.AlcoholDeclarationType;

        if (journalTransBranchLocal.RecId != 0)
        {
            return true;
        }

        if (Box::yesNo("@ApplicationSuite_Localization:AlcoholJournalLinesCreated", DialogButton::Yes, "@ApplicationSuite_Localization:AlcoholCreateJournalLines", "@GLS104006") == DialogButton::No)
        {
            return false;
        }

        while select BranchId from branches
        {
            journalTransBranchLocal.clear();
            journalTransBranchLocal.initValue();
            journalTransBranchLocal.initFromJournalTrans(journalTrans);
            journalTransBranchLocal.BranchId = branches.BranchId;
            journalTransBranchLocal.insert();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///    An object that contains the dialog box.
    /// </returns>
    public Object dialog()
    {
        Dialog          dialog;
        SetEnumerator   se = Set::create(packedRecIdSet).getEnumerator();
        AlcoholDeclarationJournalTransBranch_RU    journalTransBranchLocal;

        dialog = super();

        se.moveNext();
        journalTransBranchLocal = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());

        fieldRecalcReceiptIssue = dialog.addFieldValue(extendedtypestr(NoYesId), false, "@SYS4002850");
        fieldRecalcReceiptIssue.enabled(journalTransBranchLocal.journalTrans().AlcoholDeclarationType == AlcoholDeclarationType_RU::Wholesale5);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers the values of dialogFields into local variables.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (journalTrans.AlcoholDeclarationType == AlcoholDeclarationType_RU::Wholesale5)
        {
            recalcReceiptIssue = fieldRecalcReceiptIssue.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last value from SysLastValue. Overriden so that no record is retrieved.
    /// </summary>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization from <c>Args</c> variable.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object to initialize from.
    /// </param>
    public void initFromArgs(Args   _args)
    {
        NoneOneOfAllSelected                    selection;
        Set                                     set;
        FormDataSource                          formDataSource;
        AlcoholDeclarationJournalTransBranch_RU journalTransBranchCaller, journalTransBranchLocal;
        Object                                  formRunObject;

        if (   ! _args
            ||  _args.dataset()       != tablenum(AlcoholDeclarationJournalTransBranch_RU)
            ||  _args.parmEnumType()  != enumNum(NoneOneOfAllSelected)
            ||  _args.caller().name() != formStr(AlcoholDeclarationJournalTransBranch_RU))
        {
            throw error("@GLS104275");
        }

        selection = _args.parmEnum();
        formDataSource =_args.record().dataSource();
        set = new Set(Types::Int64);

        switch (selection)
        {
            case NoneOneOfAllSelected::None:
                journalTransBranchCaller = _args.record();
                if (journalTransBranchCaller.Status == AlcoholDeclarationStatus_RU::NotCalculated)
                {
                    set.add(journalTransBranchCaller.RecId);
                }
                break;

            case NoneOneOfAllSelected::OneOf:
                formRunObject = _args.caller();
                set = Set::create(formRunObject.getMarkedSet());
                break;

            case NoneOneOfAllSelected::All:
                journalTransBranchCaller = _args.record();
                while select journalTransBranchLocal
                    where journalTransBranchLocal.JournalId              == journalTransBranchCaller.JournalId
                       && journalTransBranchLocal.AlcoholDeclarationType == journalTransBranchCaller.AlcoholDeclarationType
                       && journalTransBranchLocal.Status                 == AlcoholDeclarationStatus_RU::NotCalculated
                {
                    set.add(journalTransBranchLocal.RecId);
                }
                break;

            default:
                throw error("@SYS104799");
        }

        if (set.elements())
        {
            packedRecIdSet = set.pack();
        }
        else
        {
            throw error("@SYP4860065");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, recalcReceiptIssue, packedRecIdSet];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Passes the <c>AlcoholDeclarationJournalTable_RU</c> record to and from class.
    /// </summary>
    /// <param name="_journalTable">
    ///    <c>AlcoholDeclarationJournalTable_RU</c> record to be passed.
    /// </param>
    /// <returns>
    ///    <c>AlcoholDeclarationJournalTable_RU</c> record storing in the class.
    /// </returns>
    public AlcoholDeclarationJournalTable_RU parmJournalTable(AlcoholDeclarationJournalTable_RU _journalTable = journalTable)
    {
        journalTable = _journalTable;
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Passes the <c>AlcoholDeclarationJournalTrans_RU</c> record to and from class.
    /// </summary>
    /// <param name="_journalTrans">
    ///    <c>AlcoholDeclarationJournalTrans_RU</c> record to be passed.
    /// </param>
    /// <returns>
    ///    <c>AlcoholDeclarationJournalTrans_RU</c> record storing in the class.
    /// </returns>
    public AlcoholDeclarationJournalTrans_RU parmJournalTrans(AlcoholDeclarationJournalTrans_RU _journalTrans = journalTrans)
    {
        journalTrans = _journalTrans;
        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Passes the packed set of RecIds of the records which have to be calculated.
    /// </summary>
    /// <param name="_packedRecIdSet">
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </param>
    /// <returns>
    ///    Packed set of RecIds of the records which have to be calculated.
    /// </returns>
    public container parmPackedRecIdSet(container _packedRecIdSet = packedRecIdSet)
    {
        packedRecIdSet = _packedRecIdSet;
        return packedRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        Set                     set;
        SetEnumerator           se;
        int                     i;
        AlcoholDeclarationJournalTransBranch_RU journalTransBranch;

        set = Set::create(packedRecIdSet);
        se = set.getEnumerator();

        this.progressInit("@SYS31242", set.elements(), #AviFormLetter);
        progress.setText("@SYS8577");

        try
        {
            ttsBegin;

            while (se.moveNext())
            {
                i++;
                progress.setCount(i);
                journalTransBranch = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());
                progress.setText(strfmt("@ApplicationSuite_Localization:AlcoholProcessingCalculation", journalTransBranch.BranchId));
                this.calcBranch(journalTransBranch);
            }

            ttsCommit;

            info("@SYS9265");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the last value to SysLastValue. Overriden so that no record is saved.
    /// </summary>
    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version, recalcReceiptIssue, packedRecIdSet] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs check to determine if the alcohol declaration journal can be created.
    /// </summary>
    /// <param name="_alcoholDeclarationJournalTable">
    ///    Alcohol declaration journal table to check.
    /// </param>
    /// <returns>
    ///   true if the journal can be created; false otherwise.
    /// </returns>
    public static boolean canCreateJournal(AlcoholDeclarationJournalTable_RU _alcoholDeclarationJournalTable)
    {
        AlcoholDeclarationJournalTable_RU   alcoholDeclarationJournalTable;
        boolean                             ret;

        ret = AlcoholDeclarationCalcController_RU::nextJournalNotExists(_alcoholDeclarationJournalTable);

        if (ret)
        {
            select firstonly alcoholDeclarationJournalTable
                order by ToDate desc
                where alcoholDeclarationJournalTable.ToDate <  _alcoholDeclarationJournalTable.ToDate;

            if (alcoholDeclarationJournalTable.RecId)
            {
                if (! alcoholDeclarationJournalTable.approved())
                {
                    return checkFailed("@SYS4002851");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Text description of the class which is shown in the dialog.
    /// </summary>
    /// <returns>
    ///   Text description of the class.
    /// </returns>
    public static Name description()
    {
        return "@SYS4002797";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Static method which checks if there are journals fot later period exist.
    /// </summary>
    /// <param name="_alcoholDeclarationJournalTable">
    ///    Alcohol declaration journal table to check.
    /// </param>
    /// <param name="_showMessage">
    ///    Points if to show warning or not.
    /// </param>
    /// <returns>
    ///    true if there are journals for later period; false otherwise.
    /// </returns>
    public static boolean nextJournalNotExists(AlcoholDeclarationJournalTable_RU    _alcoholDeclarationJournalTable,
                                               boolean                              _showMessage = true)
    {
        if ((select firstonly AlcoholDeclarationJournalTable_RU
                 where AlcoholDeclarationJournalTable_RU.ToDate > _alcoholDeclarationJournalTable.ToDate).RecId)
        {
            if (_showMessage)
            {
                return checkFailed("@SYS4002852");
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AlcoholDeclarationCalcController_RU construct()
    {
        return new AlcoholDeclarationCalcController_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        FormDataSource                          formDataSource;
        AlcoholDeclarationCalcController_RU     runClass = AlcoholDeclarationCalcController_RU::construct();

        runClass.getLast();
        runClass.initFromArgs(_args);
        runClass.saveLast();

        if (runClass.prompt())
        {
            runClass.runOperation();

            formDataSource =_args.record().dataSource();

            if (formDataSource)
            {
                formDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>