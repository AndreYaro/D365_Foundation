<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountEnableValidationJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to validate enablement of periodic discount.
/// </summary>
internal final class RetailPeriodicDiscountEnableValidationJob
    extends RunBaseBatch implements BatchRetryable
{
    private RecId discountId;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        discountId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDiscountId</Name>
				<Source><![CDATA[
    internal RecId parmDiscountId(RecId _discountId = discountId)
    {
        discountId = _discountId;
        return discountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public void run()
    {
        RetailPeriodicDiscountEnableValidationJob::validateAndEnableDiscount(this.parmDiscountId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndEnableDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate and enable the discount if validation passes.
    /// </summary>
    /// <param name = "_discountId">RecId of the discount.</param>
    internal static void validateAndEnableDiscount(RecId _discountId)
    {
        RetailPeriodicDiscount discount = RetailPeriodicDiscount::find(_discountId, true);
        Microsoft.Dynamics.Ax.Xpp.XppException xppEx = null;
        boolean existsUnhandledException = true;

        if (discount)
        {
            try
            {
                discount.Status = RetailDisabledEnabled::Enabled; // Change to Enabled to make sure validaiton is triggered.
                boolean ret = discount.validateEnable();

                ttsbegin;
                if (ret)
                {
                    discount.ValidationStatus = RetailPricingValidationStatus::Validated;
                    discount.Status = RetailDisabledEnabled::Enabled;

                }
                else
                {
                    discount.ValidationStatus = RetailPricingValidationStatus::Failed;
                    discount.Status = RetailDisabledEnabled::Disabled;
                }

                discount.update();

                ttscommit;

                existsUnhandledException = false;
            }
            catch (Exception::CLRError)
            {
                System.Exception ex = CLRInterop::getLastException();
                RetailPeriodicDiscountEnableValidationJob::logExceptionAndFailValidation(discount, ex);
                existsUnhandledException = false;
            }
            catch (xppEx)
            {
                RetailPeriodicDiscountEnableValidationJob::logExceptionAndFailValidation(discount, xppEx);
                existsUnhandledException = false;
            }
            finally
            {
                if (existsUnhandledException)
                {
                    RetailPeriodicDiscountEnableValidationJob::logExceptionAndFailValidation(discount, null);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionAndFailValidation</Name>
				<Source><![CDATA[
    private static void logExceptionAndFailValidation(RetailPeriodicDiscount _discount, System.Exception _ex)
    {
        ttsbegin;
        str exMessage = _ex != null ? _ex.Message : "@RetailPricing:GenericExceptionInValidation";
        _discount.reread();
        _discount.promptAndWriteValidationLog(
            RetailPricingValidationMessageSeverity::Error,
            exMessage);
        _discount.ValidationStatus = RetailPricingValidationStatus::Failed;
        _discount.Status = RetailDisabledEnabled::Disabled;
        _discount.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>