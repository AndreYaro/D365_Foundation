<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemJournal extends ProjPost
{
    Common                  buffer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    public boolean checkIntrastatFulfillmentDate_HU()
    {
        LogisticsAddressCountryRegionId country;
        IntrastatParameters             intrastatParameters;
        ProjTable                       projTable;
        InventJournalTrans              inventJournalTrans;
        CustTable                       custTable;
        ProjFundingSource               projFundingSource;

        intrastatParameters = IntrastatParameters::find();

        projTable           = ProjTable::find(projTrans.projId());
        projFundingSource   = ProjFundingSource::findCustAccount(projTable.ProjInvoiceProjId);
        custTable           = CustTable::find(projFundingSource.CustAccount);
        country             = custTable.invoiceAddress().CountryRegionId;

        if (!country || !IntrastatCountryRegionParameters::isCountryRegionStateInEU(custTable.invoiceAddress()))
        {
            return true;
        }

        if (buffer.TableId == tableNum(InventJournalTrans))
        {
            inventJournalTrans = buffer;

            if (intrastatParameters.IntrastatFulfillmentDateEmptyWarning_HU && !inventJournalTrans.IntrastatFulfillmentDate_HU)
            {
                return checkFailed(strFmt("@SYS26332", fieldPName(InventJournalTrans, IntrastatFulfillmentDate_HU)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        ProjStatusType  projStatusType = projTrans.projTable().status();
        boolean                     ok = true;
        InventJournalTrans          inventJournalTrans;
        ProdTable                   prodTable;
        ProdTableProj               prodTableProj;
        ProdBOMTransProj            prodBOMTransProj;

        ok  = super();

        if (ok)
        {
            // Do not allow posting only for Time projType
            if (projTrans.projTable().Type == ProjType::Time)
            {
                ok = ok && checkFailed(strFmt("@SYS53011", projTrans.projTable().Type));
            }

            if (ProjCategory::find(projTrans.categoryId()).CategoryType    != ProjCategoryType::Item)
            {
                ok = ok && checkFailed(strFmt("@SYS54897",projTrans.categoryId()));
            }

            if (!projTrans.salesUnit())
            {
                ok = ok && checkFailed("@SYS73707");
            }

            if (!projTrans.currencyIdSales())
            {
                ok = ok && checkFailed("@SYS73708");
            }

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
                && ! this.checkIntrastatFulfillmentDate_HU())
            {
                ok = false;
            }
            // </GEEHU>

            switch (buffer.TableId)
            {
                case tableNum(InventJournalTrans):
                    inventJournalTrans = buffer;
                    if ((!inventJournalTrans.ActivityNumber) && !inventJournalTrans.checkReqActivity(inventJournalTrans))
                    {
                        ok = ok && checkFailed("@SYS104471");
                    }
                    break;

                case tableNum(ProdTableProj):
                    prodTableProj = buffer;
                    prodTable = ProdTable::find(prodTableProj.ProdId);
                    if ((!prodTable.ActivityNumber) && !prodTable.checkReqActivity())
                    {
                        ok = ok && checkFailed("@SYS104471");
                    }
                    break;

                case tableNum(ProdBOMTransProj):
                    prodBOMTransProj = buffer;
                    if ((!prodBOMTransProj.ActivityNumber) && !prodBOMTransProj.checkReqActivity())
                    {
                        ok = ok && checkFailed("@SYS104471");
                    }
                    break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
                else
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
                }
                else
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    public void initUpdate()
    {
        if (buffer.TableId == tableNum(ProdTableProj))
        {
            projTrans = ProjTrans::newProjTransProdInvent(buffer, this.parmInventTransId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        switch (_buffer.TableId)
        {
            case tableNum(InventJournalTrans):
                buffer = _buffer;
                projTrans = ProjTrans::newInventJournalTrans(buffer);
                break;

            case tableNum(ProdTableProj):
                buffer = _buffer;
                break;

            case tableNum(ProdBOMTransProj):
                buffer = _buffer;
                projTrans = ProjTrans::newProjTransProdBOMTransProj(buffer);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    return LedgerPostingType::ProjStatusAccountItem;
                }
                else
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for project offset cost posting based on the current ledger status of
    /// the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    return LedgerPostingType::ProjOffsetAccountItem;
                }
                else
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility when a user is creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        boolean                     createProjItemTrans = true;
        InventJournalTrans          inventJournalTrans;
        ProdTableProj               prodTableProj;
        ProdBOMTransProj            prodBOMTransProj;

        switch (buffer.TableId)
        {
            case tableNum(InventJournalTrans):
                inventJournalTrans = buffer;
                createProjItemTrans = (inventJournalTrans.JournalType  == InventJournalType::project ? true : false);
                break;

            case tableNum(ProdTableProj):
                prodTableProj = buffer;
                break;

            case tableNum(ProdBOMTransProj):
                prodBOMTransProj = buffer;
                break;
        }

        if (createProjItemTrans)
        {
            ProjItemTrans projItemTrans;
            AmountCur salePrice;

            switch (buffer.TableId)
            {
                case tableNum(InventJournalTrans):
                    projItemTrans = ProjItemTrans::initTransFromInventJournal(inventJournalTrans);
                    salePrice = inventJournalTrans.ProjSalesPrice;
                    break;

                case tableNum(ProdTableProj):
                    projItemTrans = ProjItemTrans::initTransFromProdInvent(prodTableProj, this.parmInventTransId());
                    salePrice = prodTableProj.ProjSalesPrice;
                    break;

                case tableNum(ProdBOMTransProj):
                    projItemTrans = ProjItemTrans::initTransFromProdBOMTransProj(prodBOMTransProj);
                    salePrice = prodBOMTransProj.ProjSalesPrice;
                    break;
            }

            this.populateProjItemTrans(projItemTrans);

            projItemTrans.insert();

            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(buffer, projItemTrans);
            }
            // </GTE>           

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(buffer.TableId, buffer.RecId, projItemTrans.TableId, projItemTrans.RecId);
            }
            // </GEEPL>

            this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
            if (allocationError == NoYes::No)
            {
                MapEnumerator enumerateMap = new MapEnumerator(saleDistributions);
                while (enumerateMap.moveNext())
                {
                    int fundingSourcesCount = fundingSourceList.elements();
                    this.createProjItemTransSale(projItemTrans, salePrice, fundingSourcesCount, enumerateMap);
                }
                ProjPost::postItemReverseTransaction(this);
            }

            // Document handling
            Docu::copy(buffer, projItemTrans);

            this.parmTransIdCost(projItemTrans.ProjTransId);
            this.parmTransIdSales(projItemTrans.ProjTransId);

            if (ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
            {
                this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the new <c>ProjItemTrans</c> table buffer.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// The new <c>ProjItemTrans</c> table buffer to populate.
    /// </param>
    protected void populateProjItemTrans(ProjItemTrans _projItemTrans)
    {
        // Do not default the TaxGroupId and the TaxItemGroupId, as the user can change it on the item line
        // _projItemTrans.TaxGroupId            = ProjParameters::taxGroupInvoice(projItemTrans.ProjId);
        // _projItemTrans.TaxItemGroupId        = ProjParameters::taxItemGroupItem(projItemTrans.CategoryId,projItemTrans.ItemId);
        _projItemTrans.VoucherPackingSlip = ledgerVoucher.lastVoucher();

        if (!_projItemTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        _projItemTrans.ProjAdjustRefId = this.parmAdjustRefId();
        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            _projItemTrans.IsCorrection = this.isTransCorrection();
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProjItemTransSale</c> record.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    /// <param name = "_salePrice">
    /// The sales price.
    /// </param>
    /// <param name = "_fundingSourcesCount">
    /// The number of funding sources.
    /// </param>
    /// <param name = "_enumerateMap">
    /// A <c>MapEnumerator</c> instance for the sales distributions.
    /// </param>
    [Replaceable]
    protected void createProjItemTransSale(ProjItemTrans _projItemTrans, AmountCur _salePrice, int _fundingSourcesCount, MapEnumerator _enumerateMap)
    {
        ProjItemTransSale projItemTransSale = this.populateProjItemTransSale(_projItemTrans, _salePrice, _fundingSourcesCount, _enumerateMap);
        projItemTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a new <c>ProjItemTransSale</c> table buffer.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record.
    /// </param>
    /// <param name = "_salePrice">
    /// The sales price.
    /// </param>
    /// <param name = "_fundingSourcesCount">
    /// The number of funding sources.
    /// </param>
    /// <param name = "_enumerateMap">
    /// A <c>MapEnumerator</c> instance for the sales distributions.
    /// </param>
    protected ProjItemTransSale populateProjItemTransSale(ProjItemTrans _projItemTrans, AmountCur _salePrice, int _fundingSourcesCount, MapEnumerator _enumerateMap)
    {
        ProjItemTransSale projItemTransSale;

        //Create ProjItemTransSale record
        projItemTransSale.FundingSource = _enumerateMap.currentKey();
        projItemTransSale.LineAmount = _enumerateMap.currentValue();
        ProjFundingSource projFundingSource = ProjFundingSource::find(projItemTransSale.FundingSource);
        projItemTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);

        if (_fundingSourcesCount == 1)
        {
            projItemTransSale.SalesPrice = _salePrice;
        }
        //Multiple funding sources in the project contract
        else if (projTrans.transTurnover() != 0)
        {
            projItemTransSale.SalesPrice = CurrencyExchangeHelper::mstamount(_salePrice * projItemTransSale.LineAmount / projTrans.transTurnover(),
                                                                                         this.currencyIdSales(),
                                                                                         DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                         UnknownNoYes::Unknown,
                                                                                         0,
                                                                                         0,
                                                                                         false);
        }
        else
        {
            // Use Qty value of 1
            projItemTransSale.SalesPrice = 0;
        }

        ProjTable projTable = ProjTable::find(_projItemTrans.ProjId);
        if (projTable.wipProject && ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Item))
        {
            if (ProjRevRecHelper::getSalesPriceMatchingPrincipleForProject(projTable.wipProject) != ProjSalesPriceMatchingPrincip::None)
            {
                projItemTransSale.LineAmount = 0;
                projItemTransSale.SalesPrice = 0;
            }
        }

        projItemTransSale.ProjTransId = _projItemTrans.ProjTransId;
        projItemTransSale.LedgerTransdate = this.getLedgerJournalTransDate();
        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
        {
            projItemTransSale.LedgerSalesPosted = true;
            if (projTrans.transTurnoverMST() != 0.0)
            {
                projItemTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projItemTransSale.LineAmount, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
            }
        }

        projItemTransSale.TransStatus = ProjTransStatus::Posted;

        return projItemTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans::splitNeverLedger(this.parmInventTransId(), this.parmAdjustRefId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>