<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BusinessDocumentSubmissionContract</c> class is the contract for <c>BusinessDocumentSubmissionService</c> service class.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessing(classStr(BusinessDocumentSubmissionUIBuilder))
]
public class BusinessDocumentSubmissionContract
{
    private str query;
    private NoYes resubmit;
    private NoYes resubmitFromFailedAction;
    private NoYes batchSubmission;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmResubmit</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@BusinessDocumentSubmissionService:ResubmitDocuments")),
        SysOperationHelpTextAttribute(literalStr("@BusinessDocumentSubmissionService:ResubmitDocumentsService"))
    ]
    public NoYes parmResubmit(NoYes _resubmit = resubmit)
    {
        resubmit = _resubmit;

        return resubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResubmitFromFailedAction</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@BusinessDocumentSubmissionService:ProceedFromFailedAction")),
        SysOperationHelpTextAttribute(literalStr("@BusinessDocumentSubmissionService:ProceedFromFailedActionHelpText"))
    ]
    public NoYes parmResubmitFromFailedAction(NoYes _resubmitFromFailedAction = resubmitFromFailedAction)
    {
        resubmitFromFailedAction = _resubmitFromFailedAction;

        return resubmitFromFailedAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchSubmission</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@BusinessDocumentSubmissionService:SubmitDocumentBatch")),
        SysOperationHelpTextAttribute(literalStr("@BusinessDocumentSubmissionService:BatchSubmissionHelpText"))
    ]
    public NoYes parmBatchSubmission(NoYes _batchSubmission = batchSubmission)
    {
        batchSubmission = _batchSubmission;

        return batchSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        AifQueryTypeAttribute('_query', '')
    ]
    public str parmQuery(str _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and encodes a given query as a base 64 encoded string.
    /// </summary>
    /// <param name = "_query">The query to be encoded as a base 64 encoded string.</param>
    internal void setQuery(Query _query)
    {
        query = SysOperationHelper::base64Encode(_query.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a <c>Query</c> object for the contract query.
    /// </summary>
    /// <returns>A <c>Query</c> object for the contract query.</returns>
    public Query getQuery()
    {
        return new Query(SysOperationHelper::base64Decode(query));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method initializes the contract query.
    /// </summary>
    public void initQuery()
    {
        #ISOCountryRegionCodes

        Query newQuery = new Query();
        BusinessDocumentTypes businessDocumentTypes;
        FieldId batchFieldId;

        if (FeatureStateProvider::isFeatureEnabled(BusinessDocumentBatchSubmissionFeature::instance()))
        {
            batchFieldId = fieldNum(BusinessDocumentTypes, BatchSubmission);
        }
        else
        {
            batchFieldId = fieldNum(BusinessDocumentTypes, CDSIntegration);
        }

        while select TableName from businessDocumentTypes
            group by businessDocumentTypes.TableName
            where businessDocumentTypes.ERModelMappingContext
                || businessDocumentTypes.(batchFieldId) == NoYes::Yes
                && (businessDocumentTypes.LegalEntityId == curExt() || !businessDocumentTypes.LegalEntityId)
        {
            RefTableId tableId = businessDocumentTypes.tableId();

            if (tableId)
            {
                QueryBuildDataSource qbds = newQuery.addDataSource(tableId);
            }
        }

        this.setQuery(newQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>