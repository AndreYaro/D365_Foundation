<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParametersD365SalesFeatureSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesParametersD365SalesFeatureSetup</c> class sets the Dynamics 365 Sales enabled parameters based on enabled features in feature management and usage of integration to Dynamics 365 Sales.
/// </summary>
[SysSetupTable(tableStr(SalesParameters))]
[SysSetupConfig(true, 300)]
internal final class SalesParametersD365SalesFeatureSetup extends SysSetupAsync implements SysSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {
        SalesParametersD365SalesFeatureSetup::setDynamics365SalesEnabledFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDynamics365SalesEnabledFields</Name>
				<Source><![CDATA[
    private static void setDynamics365SalesEnabledFields()
    {
        SalesParameters salesParameters;

        boolean quotationConfiguration = SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity));
        boolean salesConfiguration = SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesOrderHeaderD365SalesEntity));

        boolean isD365SalesQuotationLifecycleFeatureEnabled = SalesQuotationD365SalesFeature::instance().isEnabled();
        boolean isD365SalesProspectIntegrationFeatureEnabled = smmProspectD365SalesFeature::instance().isEnabled();
        boolean isD365SalesDefaultSalesOrderFeatureEnabled = SalesQuotationD365DefaultSalesOrderFeature::instance().isEnabled();
        boolean isD365SalesPriceMasterFeatureEnabled = SalesD365SalesPriceMasterFeature::instance().isEnabled();
        boolean isD365SalesMessageProcessorFeatureEnabled = SalesD365SalesMessageProcessorFeature::instance().isEnabled();
        boolean isD365SalesUpdatePricesAndTotalsFeatureEnabled =  SalesD365SalesUpdatePricesAndTotalsFeature::instance().isEnabled();

        ttsbegin;

        while select forupdate crosscompany salesParameters
        {
            changecompany (salesParameters.DataAreaId)
            {
                salesParameters.IsD365SalesQuotationLifecycleEnabled = quotationConfiguration && isD365SalesQuotationLifecycleFeatureEnabled;
                salesParameters.IsD365SalesProspectIntegrationEnabled = quotationConfiguration && isD365SalesProspectIntegrationFeatureEnabled;
                salesParameters.IsD365SalesDefaultSalesOrderEnabled = quotationConfiguration && isD365SalesDefaultSalesOrderFeatureEnabled;
                salesParameters.IsD365SalesMessageProcessorEnabled = quotationConfiguration && isD365SalesMessageProcessorFeatureEnabled;
                
                salesParameters.IsD365SalesPriceMasterEnabled = (salesConfiguration || quotationConfiguration) && isD365SalesPriceMasterFeatureEnabled;
                salesParameters.IsD365SalesUpdatePricesAndTotalsEnabled = (salesConfiguration || quotationConfiguration) && isD365SalesUpdatePricesAndTotalsFeatureEnabled;

                salesParameters.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesQuotationLifecycleFeature</Name>
				<Source><![CDATA[
    internal static void setSalesQuotationLifecycleFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesQuotationLifecycleEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProspectD365SalesFeature</Name>
				<Source><![CDATA[
    internal static void setProspectD365SalesFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesProspectIntegrationEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceMasterFeature</Name>
				<Source><![CDATA[
    internal static void setPriceMasterFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)) ||
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesOrderHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesPriceMasterEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSalesOrderFeature</Name>
				<Source><![CDATA[
    internal static void setDefaultSalesOrderFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesDefaultSalesOrderEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMessageProcessorFeature</Name>
				<Source><![CDATA[
    internal static void setMessageProcessorFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesMessageProcessorEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdatePricesAndTotalsFeature</Name>
				<Source><![CDATA[
    internal static void setUpdatePricesAndTotalsFeature(boolean _enabled)
    {
        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity)) ||
            SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesOrderHeaderD365SalesEntity)),
            fieldStr(SalesParameters, IsD365SalesUpdatePricesAndTotalsEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAutoSyncLineDataAndTotalsFeature</Name>
				<Source><![CDATA[
    internal static void setAutoSyncLineDataAndTotalsFeature(boolean _enabled)
    {
        boolean isDualWriteEnabled = SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesQuotationHeaderD365SalesEntity))
            || SalesParametersD365SalesFeatureSetup::isDualWriteConfigurationEnabled(dataentityviewstr(SalesOrderHeaderD365SalesEntity));

        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            isDualWriteEnabled,
            fieldStr(SalesParameters, IsD365SalesAutoSyncTotalsToSalesEnabled),
            _enabled);

        SalesParametersD365SalesFeatureSetup::updateD365FeatureState(
            isDualWriteEnabled,
            fieldStr(SalesParameters, IsD365SalesAutoSyncLineDataToSalesEnabled),
            _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateD365FeatureState</Name>
				<Source><![CDATA[
    private static void updateD365FeatureState(boolean _configurationEnabled, fieldName _fieldName, boolean _enabled)
    {
        SalesParameters salesParameters;

        ttsbegin;

        while select forupdate crosscompany salesParameters
        {
            changecompany (salesParameters.DataAreaId)
            {
                salesParameters.setFieldValue(_fieldName, _enabled && _configurationEnabled);
                salesParameters.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDualWriteConfigurationEnabled</Name>
				<Source><![CDATA[
    private static boolean isDualWriteConfigurationEnabled(EntityName _entityName)
    {
        str configuration = DualWriteProjectConfiguration::getProjectConfigSignature(tableName2Id(_entityName));
        
        return !configuration || configuration != dataentityviewstr(SalesQuotationHeaderD365SalesEntity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>