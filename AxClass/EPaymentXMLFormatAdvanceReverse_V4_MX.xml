<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EPaymentXMLFormatAdvanceReverse_V4_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EPaymentXMLFormatAdvanceReverse_V4_MX extends ePaymentXMLFormatAdvanceReverse_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCfdiNameSpace</Name>
				<Source><![CDATA[
    protected str getCfdiNameSpace()
    {
        return 'http://www.sat.gob.mx/cfd/4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComprobanteVersion</Name>
				<Source><![CDATA[
    protected str getComprobanteVersion()
    {
        return '4.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement = super();

        comprobanteElement.setAttribute('Exportacion', '01');

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement createReceptorElement()
    {
        XmlElement receptorElement = super();

        CustTable custTable = CustTable::find(payment.AccountNum);
        Rfc_MX recipientRfc = this.getRecipientRfc();

        receptorElement.setAttribute(
            'DomicilioFiscalReceptor',
            recipientRfc == EPaymentXMLFormat_MX::ForeignerRFC ?
                this.getLugarExpedicion() :
                custTable.postalAddress().ZipCode);

        receptorElement.setAttribute('RegimenFiscalReceptor', custTable.TaxRegimeCode_MX);

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        XmlElement conceptoElement = super(_conceptoSource);
        XMLElement impuestosElement = conceptoElement.getNamedElement('cfdi:Impuestos');
        conceptoElement.setAttribute('ObjetoImp', CFDISharedLogic_MX::getObjetoImpValue(impuestosElement, CustTable::find(payment.AccountNum).CFDISkipIEPSTaxes_MX));

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected void fetchTaxes(Common _taxSource)
    {
        super(_taxSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExportTaxBaseInComprobanteDescendant</Name>
				<Source><![CDATA[
    protected boolean shouldExportTaxBaseInComprobanteDescendant(boolean _isTraslado)
    {
        return _isTraslado;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usoCFDI</Name>
				<Source><![CDATA[
    protected str usoCFDI()
    {
        CustTrans invoiceCustTrans = CustTrans::findByCompany(paymentSettlement.OffsetCompany, paymentSettlement.OffsetRecid);
        
        changecompany(invoiceCustTrans.company())
        {
            ProjInvoiceJour projInvoiceJour;
            CustInvoiceJour custInvoiceJour = invoiceCustTrans.custInvoiceJour_RU();
            EInvoiceJour_MX eInvJour;

            if (custInvoiceJour)
            {
                select firstonly CFDIPurpose from eInvJour
                    where eInvJour.RefTableId == tableNum(CustInvoiceJour)
                        && eInvJour.RefRecId == custInvoiceJour.RecId;
            }
            else
            {
                select firstonly CFDIPurpose from eInvJour
                    where eInvJour.RefTableId == tableNum(ProjInvoiceJour)
                exists join projInvoiceJour
                    where projInvoiceJour.RecId == eInvJour.RefRecId
                       && projInvoiceJour.InvoiceAccount == invoiceCustTrans.AccountNum
                       && projInvoiceJour.InvoiceDate == invoiceCustTrans.TransDate
                       && projInvoiceJour.LedgerVoucher == invoiceCustTrans.Voucher;
            }

            if (eInvJour.CFDIPurpose)
            {
                return eInvJour.CFDIPurpose;
            }
        }

        return "CP01";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>