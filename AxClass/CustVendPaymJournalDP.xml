<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymJournalDP</c> class that supports the <c>CustVendPaymJournal</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustVendPaymJournal)),
    SRSReportParameterAttribute(classstr(CustVendPaymJourDPContract))
]
public class CustVendPaymJournalDP extends SRSReportDataProviderBase
{
    LedgerJournalTrans ledgerJournalTrans;
    CustVendPaymJournalTmp custVendPaymJournaltmp;
    BankAccountTable bankAccountTable;
    SpecTrans specTrans;

    Name accountName;
    VendInvoiceAccount invoiceAccount;
    AccountNum bankAccount;
    NoYes printSpec;
    NoYes printSubSum;
    boolean printSumCur;
    LedgerJournalACType  ledgerTransAccountType;
    AmountMST amountMST;
    boolean start;
    DiscAmount cashDiscAmount;
    str import;
    Query parmQuery;
    int parentId;

    #define.parmCustImport('CustImport')
    #define.parmVendImport('VendImport')
    #define.parmAll('All')
    #define.emptyString('')

    #define.HeaderSection(1)
    #define.DetailSection(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for ledger journal transactions.
    /// </summary>
    /// <returns>
    /// false if there are transactions; otherwise true.
    /// </returns>
    private boolean checkTrans()
    {
        ModuleCustVend moduleCustVend;
        LedgerJournalTable ledgerJournalTable;
        JournalId journalId;

        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

        if (((import == #parmAll) && ledgerJournalTable.Posted == NoYes::Yes) ||
            ((import == #parmAll) && ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::None) ||
            (journalId && ledgerJournalTrans.JournalNum != journalId) ||
            (moduleCustVend == ModuleCustVend::Vend && ledgerJournalTable.JournalType != LedgerJournalType::Payment) ||
            (moduleCustVend == ModuleCustVend::Cust && ledgerJournalTable.JournalType != LedgerJournalType::CustPayment))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendPaymJournaltmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>CustVendPaymJournalTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustVendPaymJournalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(CustVendPaymJournalTmp))]
    public CustVendPaymJournalTmp getCustVendPaymJournaltmp()
    {
        select custVendPaymJournaltmp;
        return custVendPaymJournaltmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendPaymJournaltmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>CustVendPaymJournalTmp</c> table.
    /// </summary>
    private void insertCustVendPaymJournaltmp()
    {
        CustTrans custTrans;
        VendTrans vendTrans;

        custVendPaymJournalTmp.JournalNum = ledgerJournalTrans.JournalNum;
        custVendPaymJournalTmp.TransDate = ledgerJournalTrans.TransDate;
        custVendPaymJournalTmp.Voucher = ledgerJournalTrans.Voucher;
        custVendPaymJournalTmp.AccountID = bankAccountTable.AccountID;
        custVendPaymJournalTmp.Txt = ledgerJournalTrans.Txt;
        custVendPaymJournalTmp.Balance = specTrans.Balance01;
        custVendPaymJournalTmp.PaymentStatus = specTrans.PaymentStatus;
        custVendPaymJournalTmp.CurrencyCode = ledgerJournalTrans.CurrencyCode;
        custVendPaymJournalTmp.Name = bankAccountTable.Name;
        custVendPaymJournalTmp.BankAccountNum = bankAccountTable.AccountNum;
        custVendPaymJournalTmp.AccountNum = ledgerJournalTrans.accountDisplay();
        custVendPaymJournalTmp.AccountName = accountName;
        custVendPaymJournalTmp.InvoiceAccount = invoiceAccount;
        custVendPaymJournalTmp.BankAccountNumber = bankAccount;
        custVendPaymJournalTmp.PaymReference = ledgerJournalTrans.PaymReference;
        custVendPaymJournalTmp.Amount = ledgerJournalTrans.amount();
        custVendPaymJournalTmp.AmountMST = amountMST;
        custVendPaymJournalTmp.BankMainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(bankAccountTable.LedgerDimension);

        // For headers set design section value as 1
        custVendPaymJournalTmp.DesignSection = #HeaderSection;

        if (printSpec)
        {
            if (ledgerTransAccountType == LedgerJournalACType::Cust)
            {
                // Get details of custtrans.
                custTrans = specTrans.custTrans();
                custVendPaymJournalTmp.InvoiceId = custTrans.Invoice;
                custVendPaymJournalTmp.InvoiceCurrencyCode = custTrans.CurrencyCode;
                custVendPaymJournalTmp.CashDiscAmount = cashDiscAmount;
                custVendPaymJournalTmp.Duedate = custTrans.DueDate;
                custVendPaymJournalTmp.TransTxt = custTrans.Txt;

                // For detailed lines set design section value as 2.
                // This enables us to show the details in a seperated nested table
                // in report design.
                custVendPaymJournalTmp.DesignSection = #DetailSection;
                custVendPaymJournalTmp.Amount = 0;
                custVendPaymJournalTmp.AmountMST = 0;
            }

            else if (ledgerTransAccountType == LedgerJournalACType::Vend)
            {
                // Get details of vendTrans.
                vendTrans = specTrans.vendTrans();
                custVendPaymJournalTmp.InvoiceDate = vendTrans.documentInvoiceDate();
                custVendPaymJournalTmp.InvoiceId = vendTrans.Invoice;
                custVendPaymJournalTmp.InvoiceCurrencyCode = vendTrans.CurrencyCode;
                custVendPaymJournalTmp.InvoiceAmountCur = vendTrans.AmountCur;
                custVendPaymJournalTmp.CashDiscAmount = this.vendCashDiscAmount();
                custVendPaymJournalTmp.TransTxt = vendTrans.Txt;
                custVendPaymJournalTmp.Duedate = vendTrans.DueDate;

                // For detailed lines set design section value as 2.
                // This enables us to show the details in a seperated nested table
                // in report design.
                custVendPaymJournalTmp.DesignSection = #DetailSection;
                custVendPaymJournalTmp.Amount = 0;
                custVendPaymJournalTmp.AmountMST = 0;
            }
        }

        // This ParentId field is used to show each custtrans records when printSpec parameter is checked.
        // Since the design has two nested tables, a valid group by field is needed on the inner table
        // in order to place one table inside another table's data row.
        // Grouping by this Parent Id field in the design is always going to give each detail transactions
        // for the headers
        custVendPaymJournalTmp.ParentId = parentId;
        custVendPaymJournalTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transactional values that are based on the input parameters.
    /// </summary>
    private void outputTrans()
    {
        CustTransOpen custTransOpen;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        DueDate dueDate;
        PaymId paymId;
        TransTxt transTxt;
        BankAccountID lastBankAccountId;

        if (start)
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
            start = false;
        }

        else
        {
            if (ledgerJournalTrans.parmOffsetAccount() != lastBankAccountId)
            {
                bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
            }
        }

        lastBankAccountId = ledgerJournalTrans.parmOffsetAccount();
        this.setTransValues();
        ledgerTransAccountType = LedgerJournalACType::Ledger;
        parentId ++;
        this.insertCustVendPaymJournaltmp();

        if (printSpec)
        {
            switch (ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Cust :
                case LedgerJournalACType::Vend :
                        ledgerTransAccountType = ledgerJournalTrans.AccountType;
                        break;
                default :
                        ledgerTransAccountType = LedgerJournalACType::Ledger;
                        break;
            }

            while select crosscompany specTrans
                  where     specTrans.SpecTableId  == ledgerJournalTrans.TableId &&
                            specTrans.SpecRecId    == ledgerJournalTrans.RecId &&
                            specTrans.SpecCompany  == ledgerJournalTrans.company()
            {
                switch (ledgerJournalTrans.AccountType)
                {
                    case LedgerJournalACType::Cust :
                        custTransOpen   = specTrans.custTransOpen();
                        dueDate         = custTransOpen.DueDate;
                        transTxt        = specTrans.custTrans().Txt;
                        cashDiscAmount  = specTrans.getPossibleCashDiscAmount(ledgerJournalTrans.TransDate,
                                            CustPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode));
                        paymId          = #emptyString;
                        break;

                    case LedgerJournalACType::Vend :
                        vendTransOpen   = specTrans.vendTransOpen();
                        vendTrans       = specTrans.vendTrans();
                        dueDate         = vendTransOpen.DueDate;
                        transTxt        = vendTrans.Txt;
                        cashDiscAmount  = specTrans.getPossibleCashDiscAmount(ledgerJournalTrans.TransDate,
                                            VendPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode));
                        paymId          = vendTrans.PaymId;
                        break;

                    default :
                        dueDate         = dateNull();
                        transTxt        = #emptyString;
                        cashDiscAmount  = 0;
                        paymId          = #emptyString;
                        break;
                }

                this.insertCustVendPaymJournaltmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by <c>CustVendPaymJournal</c>
    /// report.
    /// </remarks>
    public void processReport()
    {
        CustVendPaymJourDPContract contract = this.parmDataContract() as CustVendPaymJourDPContract;

        QueryRun queryRun;
        Counter numOfRecord;
        container recordContainer;
        RecId deleteRecId;
        SRSTmpDataStore srsTmpDataStore;

        import = contract.parmImport();
        deleteRecId = contract.parmRecId();

        if (contract.parmSpecification())
        {
            printSpec = NOYES::Yes;
        }

        else
        {
            printSpec = NOYES::No;
        }

        if (contract.parmSumUpCurrencyOrDate())
        {
            printSubSum = NOYES::Yes;
        }

        else
        {
            printSubSum = NOYES::No;
        }
        queryRun = new QueryRun(this.parmQuery());

        start = true;

        if (import == #parmVendImport || import == #parmCustImport)
        {
            ttsBegin;
            select forUpdate srsTmpDataStore
                where srsTmpDataStore.RecId == deleteRecId;
            if (srsTmpDataStore.RecId)
            {
                recordContainer = srsTmpDataStore.Value;
                srsTmpDataStore.delete();
            }
            ttsCommit;
            for (numOfRecord = 1; numOfRecord <= conLen(recordContainer); numOfRecord++)
            {
                ledgerJournalTrans = conPeek(recordContainer,numOfRecord);
                this.outputTrans();
            }
        }

        else
        {
            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                if (this.checkTrans())
                {
                    this.outputTrans();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction values by using the account type.
    /// </summary>
    private void setTransValues()
    {
        VendTable vendTable;
        CustTable custTable;

        accountName = ledgerJournalTrans.accountName();

        amountMST = CurrencyExchangeHelper::amountCur2MST(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.ExchRate, ledgerJournalTrans.TransDate);

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            changecompany(ledgerJournalTrans.Company)
            {
                vendTable = VendTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension());
                invoiceAccount = vendTable.InvoiceAccount;
                bankAccount = VendBankAccount::find(vendTable.AccountNum, ledgerJournalTrans.CustVendBankAccountId).AccountNum;
            }
        }

        else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            changecompany(ledgerJournalTrans.Company)
            {
                custTable = CustTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension());
                invoiceAccount = custTable.InvoiceAccount;
                unchecked (Uncheck::TableSecurityPermission)
                {
                    bankAccount = CustBankAccount::find(custTable.AccountNum, ledgerJournalTrans.CustVendBankAccountId).AccountNum;
                }
            }
        }

        else
        {
            bankAccount = #emptyString;
            invoiceAccount = #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cash discount amount.
    /// </summary>
    /// <returns>
    /// The cash discount amount.
    /// </returns>
    private VendCashDiscAmount vendCashDiscAmount()
    {
        CashDiscAmount localCashDiscAmount;

        changecompany(ledgerJournalTrans.Company)
        {
           localCashDiscAmount = specTrans.getPossibleCashDiscAmount(ledgerJournalTrans.TransDate,
                                    VendPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode));
        }

        return localCashDiscAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>