<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_MB7</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_MB7 implements ERIReportPostProcessingSupported
{
    private FileName fileName;

    protected RAssetInventIssueTable rAssetInventIssueTable;
    protected RAssetInventIssueTrans rAssetInventIssueTrans;
    protected int curRow;
    protected int reportNum;
    protected XMLWordDocument wordDocument;
    protected XMLWordDocumentTable table;

    public const str mb7_1 = 'mb7_1';
    public const str mb7_2 = 'mb7_2';
    public const str mb7_3 = 'mb7_3';
    public const str mb7_4 = 'mb7_4';
    public const str mb7_5 = 'mb7_5';
    public const str mb7_6 = 'mb7_6';
    public const str day = 'day';
    public const str month = 'month';
    public const str year = 'year';
    public const str Table1 = 'Table1';
    public const int firstTableHead = 3;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    private QueryRun buildQueryRun()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsRAssetInventIssueTrans = query.addDataSource(tableNum(RAssetInventIssueTrans));
        qbdsRAssetInventIssueTrans.addSortField(fieldNum(RAssetInventIssueTrans, Location));
        qbdsRAssetInventIssueTrans.addSortField(fieldNum(RAssetInventIssueTrans, EmployeeTable_RU));
        qbdsRAssetInventIssueTrans.orderMode(OrderMode::GroupBy);
        qbdsRAssetInventIssueTrans.addRange(fieldNum(RAssetInventIssueTrans, InventIssueTableRecId))
            .value(queryValue(rAssetInventIssueTable.RecId));

        QueryBuildDataSource qbdsInventDim = qbdsRAssetInventIssueTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.addSortField(fieldNum(InventDim, InventSerialId));
        qbdsInventDim.orderMode(OrderMode::GroupBy);

        QueryBuildDataSource qbdsInventTable = qbdsRAssetInventIssueTrans.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(RAssetInventIssueTrans, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.addRange(fieldNum(InventTable, AssetGroupId_RU))
            .value(SysQuery::valueEmptyString());

        return new QueryRun(query);

    }

]]></Source>
			</Method>
			<Method>
				<Name>closeDocument</Name>
				<Source><![CDATA[
    public void closeDocument()
    {
        this.reportFooter();
        curRow = 0;

        fileName = this.templateName();

        if (AccountingDocumentsERPostProcessingToggle::isEnabled())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            wordDocument.sendFileToBrowser(fileName);
        }

        wordDocument.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocumentWord</Name>
				<Source><![CDATA[
    protected boolean makeDocumentWord()
    {
        boolean ret = true;

        wordDocument = XMLWordDocument::newFromResource(this.templateName());
        if (wordDocument == null)
        {
            ret = false;
        }
        else
        {
            table = wordDocument.findBookmark(Table1)
                .getBookmarkTable();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetInventIssueTable</Name>
				<Source><![CDATA[
    public RAssetInventIssueTable parmRAssetInventIssueTable(RAssetInventIssueTable _rAssetInventIssueTable = rAssetInventIssueTable)
    {
        rAssetInventIssueTable = _rAssetInventIssueTable;
        return rAssetInventIssueTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportBody</Name>
				<Source><![CDATA[
    protected void reportBody()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsRAssetInventIssueTrans = query.addDataSource(tableNum(RAssetInventIssueTrans));
        qbdsRAssetInventIssueTrans.addSortField(fieldNum(RAssetInventIssueTrans, ItemId));
        qbdsRAssetInventIssueTrans.addSortField(fieldNum(RAssetInventIssueTrans, UsingPeriod));
        qbdsRAssetInventIssueTrans.orderMode(OrderMode::GroupBy);

        qbdsRAssetInventIssueTrans.addSelectionField(fieldNum(RAssetInventIssueTrans, Qty), SelectionField::Sum);

        qbdsRAssetInventIssueTrans.addRange(fieldNum(RAssetInventIssueTrans, InventIssueTableRecId))
            .value(queryValue(rAssetInventIssueTable.RecId));

        qbdsRAssetInventIssueTrans.addRange(fieldNum(RAssetInventIssueTrans, Location))
            .value(rAssetInventIssueTrans.Location);

        qbdsRAssetInventIssueTrans.addRange(fieldNum(RAssetInventIssueTrans, EmployeeTable_RU))
            .value(queryValue(rAssetInventIssueTrans.EmployeeTable_RU));

        QueryRun queryRun = new QueryRun(query);
        
        int lineNum = 1;

        while (queryRun.next())
        {
            RAssetInventIssueTrans localRAssetInventIssueTrans = queryRun.get(tableNum(RAssetInventIssueTrans));

            InventTable inventTable = InventTable::find(localRAssetInventIssueTrans.ItemId);
            UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId());
            EmployeeTable_RU employeeTable = EmployeeTable_RU::findByEmployeeId(rAssetInventIssueTrans.EmployeeTable_RU);

            table.duplicateLatestRow();

            table.insertCellValue(curRow + firstTableHead, 0,  lineNum);
            table.insertCellValue(curRow + firstTableHead, 1,  employeeTable.employeeName());

            table.insertCellValue(curRow + firstTableHead, 2,  employeeTable.EmployeeId);

            table.insertCellValue(curRow + firstTableHead, 3,  inventTable.itemName());
            table.insertCellValue(curRow + firstTableHead, 4,  inventTable.ItemId);
            table.insertCellValue(curRow + firstTableHead, 5,  UnitOfMeasure_RU::codeOKEI_RU(unitOfMeasure));
            table.insertCellValue(curRow + firstTableHead, 6,  unitOfMeasure.Symbol);
            table.insertCellValue(curRow + firstTableHead, 7,  localRAssetInventIssueTrans.Qty);
            table.insertCellValue(curRow + firstTableHead, 8,  date2str(rAssetInventIssueTable.TransDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
            table.insertCellValue(curRow + firstTableHead, 9, localRAssetInventIssueTrans.UsingPeriod);

            lineNum++;
            curRow++;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFooter</Name>
				<Source><![CDATA[
    protected void reportFooter()
    {
        table.getLatestRow()
            .remove();

        RNumDateInWordConverter rNumDateInWordConverter = RNumDateInWordConverter::construct();

        wordDocument.insertFieldValue(day,  int2str(dayOfMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
        wordDocument.insertFieldValue(month, rNumDateInWordConverter.date2strMonth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        wordDocument.insertFieldValue(year,  int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportHeader</Name>
				<Source><![CDATA[
    protected void reportHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        wordDocument.insertFieldValue(mb7_1, strFmt('%1/%2', rAssetInventIssueTable.JournalId, reportNum));
        wordDocument.insertFieldValue(mb7_2, companyInfo.name());
        wordDocument.insertFieldValue(mb7_3, RAssetLocation::find(rAssetInventIssueTrans.Location).Name);
        wordDocument.insertFieldValue(mb7_4, date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));
        wordDocument.insertFieldValue(mb7_5, EmployeeTable_RU::findByEmployeeId(rAssetInventIssueTrans.EmployeeTable_RU).worker().primaryDepartmentName());
        wordDocument.insertFieldValue(mb7_6, CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetLocationId location;
        curRow = 0;
        reportNum = 1;

        QueryRun queryRun = this.buildQueryRun();

        while (queryRun.next())
        {
            rAssetInventIssueTrans = queryRun.get(tableNum(RAssetInventIssueTrans));

            if (rAssetInventIssueTrans.Location != location)
            {
                if (wordDocument != null)
                {
                    this.closeDocument();
                }

                if (!this.makeDocumentWord())
                {
                    throw error("@GLS101886");
                }

                this.reportHeader();
                this.reportBody();

                location = rAssetInventIssueTrans.Location;
                
                reportNum++;
            }
            else
            {
                this.reportBody();
            }
        }

        if (wordDocument)
        {
            this.closeDocument();
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetMB7OXML);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return fileName + "@SYS34952" + rAssetInventIssueTable.JournalId + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MB7';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetInventIssueTable rAssetInventIssueTable;

        switch (_args.dataset())
        {
            case tableNum(RAssetInventIssueTable):
                rAssetInventIssueTable = _args.record();
                break;

            default:
                throw error(Error::missingRecord(funcName()));
        }

        RAssetReport_MB7 rAssetReport_MB7 = new RAssetReport_MB7();
        rAssetReport_MB7.parmRAssetInventIssueTable(rAssetInventIssueTable);
        rAssetReport_MB7.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>