<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SigbomVersionApproveProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>SIGBOMVersionApproveProcedure</c> class handles the BOM version approval process.
/// </summary>
class SigbomVersionApproveProcedure extends SIGBOMRouteApproveProcedure
{
    BOMVersion  version;
    BOMTable    table;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendProcedureGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds the necessary controls to the procedure group control.
    /// </summary>
    /// <param name="_fr">
    ///   The <c>formrun</c> object to which the group control belongs.
    /// </param>
    /// <param name="_ctrl">
    ///   The group control to which to add the controls.
    /// </param>
    /// <returns>
    ///   Always returns true.
    /// </returns>
    public boolean extendProcedureGroup(FormRun _fr, FormGroupControl _ctrl)
    {
        #define.ApproveControlName("rtCtrlApproveBOM")

        boolean             ret = super(_fr,_ctrl);

        if (ret)
        {
            _ctrl.caption("@SYS26276");
            if (table.RecId)
            {
                FormCheckBoxControl ctrlApproveBOM = _ctrl.addControl(FormControlType::CheckBox,#ApproveControlName);
                ctrlApproveBOM.label("@SYS29114");
                ctrlApproveBOM.value(NoYes::Yes);
                ctrlApproveBOM.enabled(false);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a list of the signature-controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///   A list of the fields that are required for this BOM-approval procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                 [DatabaseLogType::Update,tableNum(BOMVersion),fieldNum(BOMVersion,Approved)],
                 [DatabaseLogType::Update,tableNum(BOMVersion),fieldNum(BOMVersion,Approver)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the BOM version record is currently approved.
    /// </summary>
    /// <returns>
    ///   True if the record is currently approved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   This method returns the inverse of the current value because the value is switched when it is initialized.
    /// </remarks>
    public boolean isAlreadyApproved()
    {
        return !version.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMTable</Name>
				<Source><![CDATA[
    public BOMTable parmBOMTable(BOMTable _table = table)
    {
        table = _table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersion</Name>
				<Source><![CDATA[
    public BOMVersion parmBOMVersion(BOMVersion _version = version)
    {
        version = _version;
        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtCtrlEmplId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Modified method for the added employee ID control.
    /// </summary>
    /// <param name="_callerControl">
    ///   The calling form control.
    /// </param>
    /// <returns>
    ///   The result of the <c>super</c> method.
    /// </returns>
    public boolean rtCtrlEmplId_modified(FormStringControl _callerControl)
    {
        boolean             ret = super(_callerControl);

        version.Approver = HcmWorker::findByPersonnelNumber(_callerControl.valueStr()).RecId;
        if (table.RecId)
        {
            table.Approver = version.Approver;
        }

        ListEnumerator      iter = docList.getEnumerator();
        SIGBaseDocument     doc;
        while (iter.moveNext())
        {
            doc = iter.current();
            switch (doc.getRefTableId())
            {
                case tableNum(BOMTable):
                    doc.initDatabaseLog(DatabaseLogType::Update,table,table.orig());
                    break;
                case tableNum(BOMVersion):
                    doc.initDatabaseLog(DatabaseLogType::Update,version,version.orig());
                    break;
            }
        }

        Object formRunObject = formRun;
        formRunObject.refreshDocList();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Signs the documents.
    /// </summary>
    public void run()
    {
        BOMVersionApprove   approve;

        super();

        if (signed)
        {
            approve = new BOMVersionApprove();
            approve.parmRecId(version.RecId);
            approve.parmApprover(version.Approver);
            approve.parmRemove(this.isAlreadyApproved());
            approve.init();

            if (table.Approved)
            {
                approve.parmApproveBOM(true);
            }

            try
            {
                approve.runOperation();
            }
            catch
            {
                SIGBaseDocument::clearAllFromCache();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the procedure should be included in the signature setup.
    /// </summary>
    /// <returns>
    ///   Always returns true.
    /// </returns>
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Starts the signature dialog box with the implementing provider.
    /// </summary>
    /// <returns>
    ///   True if the documents of the provider have been signed; otherwise, false.
    /// </returns>
    public boolean sign()
    {
        SIGBaseDocument doc;

        docList = new List(Types::Class);
        version = BOMVersion::findRecId(version.RecId);

        if (version.Approved)
        {
            SIGBOMRouteApproveProcedure::checkIfRemoveOfApprovalIsBlocked(BOMParameters::find().BlockRemoveApproval);
            version.Approved    = NoYes::No;
            version.Approver    = 0;
            version.Active      = NoYes::No;
        }
        else
        {
            version.Approved = NoYes::Yes;
            version.Approver = HcmWorker::userId2Worker(curUserId());

            table = BOMTable::find(version.bomId);

            if (!table.Approved)
            {
                table.Approved = NoYes::Yes;
                table.Approver = version.Approver;
                doc = SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, table);
                docList.addEnd(doc);
            }
            else
            {
                table.clear();
            }
        }

        doc = SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, version);
        docList.addEnd(doc);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Indicates whether the signature for this procedure is required.
    /// </summary>
    /// <returns>
    ///   True if the built-in signature requirement is enabled or one of the fields requires a signature.
    /// </returns>
    /// <remarks>
    ///   This method also checks the BOM table procedure.
    /// </remarks>
    public boolean signatureRequired()
    {
        ClassId classId = classNum(SIGBOMVersionApproveProcedure);
        boolean ret = SIGProcSetup::classIdEnabled(classId)
                      || SIGProcSetupField::classIdFieldsEnabled(classId);
        if (!ret)
        {
            if (table.RecId)
            {
                classId = classNum(SIGBOMTableApproveProcedure);
                ret = SIGProcSetup::classIdEnabled(classId)
                      || SIGProcSetupField::classIdFieldsEnabled(classId);
            }
        }
        if (!ret && this.isAlreadyApproved() && version.orig().Active)
        {
            classId = classNum(SIGBOMVersionActivateProcedure);
            ret = SIGProcSetup::classIdEnabled(classId)
                  || SIGProcSetupField::classIdFieldsEnabled(classId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SIGBOMVersionApproveProcedure construct()
    {
        return new SIGBOMVersionApproveProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS103383";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes a new instance of this class by using a <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_bomVersion">
    ///   The record to use to create the instance.
    /// </param>
    /// <returns>
    ///   The new instance.
    /// </returns>
    public static SIGBOMVersionApproveProcedure newBOMVersion(BOMVersion _bomVersion)
    {
        SIGBOMVersionApproveProcedure  procedure = SIGBOMVersionApproveProcedure::construct();
        procedure.parmBOMVersion(_bomVersion);
        return procedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>