<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjMethod_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InfAdjMethod_MX
{
    FromDate    fromDate;
    ToDate      toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the calculation process for the opening balance and the monthly balance adjustment methods.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>RepomoTmpTable</c> table that is used for opening balance and monthly balance adjustment
    /// methods.
    /// </param>
    /// <returns>
    /// A temporary record that contains the inflation adjustment values for opening and monthly balance
    /// adjustment methods.
    /// </returns>
    /// <remarks>
    /// This method is used by the overridden methods for opening balance and monthly balance adjustment
    /// methods.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// This method does not occur in the child classes.
    /// </exception>
    public Common  calculate(Common _tmpTable)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the functional currency amount.
    /// </summary>
    /// <param name="_startDate">
    /// The from date to consider the transactions.
    /// </param>
    /// <param name="_endDate">
    /// The to date to consider the transactions.
    /// </param>
    /// <param name="_mainAccountRecId">
    /// The record ID of the account for which the transactions are retrieved.
    /// </param>
    /// <param name="_periodType">
    /// The period type that determines the type of transaction.
    /// </param>
    /// <param name="_displayValue">
    /// The display value of the main account that has the combination of dimensions.
    /// </param>
    /// <param name="_considerInfAdj">
    /// A Boolean value that determines whether to consider transactions that match the posting type
    /// <c>LedgerPostingType::InflationAdjustment_MX</c> enumeration value; optional.
    /// </param>
    /// <returns>
    /// The accounting currency amount for an account and date range that considers the type of transaction.
    /// </returns>
    protected AmountMSTDebCred getAccountingCurrencyAmount(
        FromDate                _startDate,
        ToDate                  _endDate,
        RecId                   _mainAccountRecId,
        FiscalPeriodType        _periodType,
        DimensionDisplayValue   _displayValue,
        boolean                 _considerInfAdj = false)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;

        if (_considerInfAdj)
        {
            select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                join RecId, DisplayValue from dimensionAttributeValueCombination
                    group by dimensionAttributeValueCombination.DisplayValue
                    where dimensionAttributeValueCombination.RecId          == generalJournalAccountEntry.LedgerDimension
                       && dimensionAttributeValueCombination.MainAccount    == _mainAccountRecId
                       && dimensionAttributeValueCombination.DisplayValue   == _displayValue
                join RecId from generalJournalEntry
                    where generalJournalAccountEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                       && generalJournalEntry.Ledger                        == Ledger::current()
                       && generalJournalEntry.AccountingDate                >= _startDate
                       && generalJournalEntry.AccountingDate                <= _endDate
                join RecId from fiscalCalendarPeriod
                    where generalJournalEntry.FiscalCalendarPeriod          == fiscalCalendarPeriod.RecId
                       && fiscalCalendarPeriod.Type                         == _periodType;
        }
        else
        {
            select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                where generalJournalAccountEntry.PostingType != LedgerPostingType::InflationAdjustment_MX
                join RecId, DisplayValue from dimensionAttributeValueCombination
                    group by dimensionAttributeValueCombination.DisplayValue
                    where dimensionAttributeValueCombination.RecId          == generalJournalAccountEntry.LedgerDimension
                       && dimensionAttributeValueCombination.MainAccount    == _mainAccountRecId
                       && dimensionAttributeValueCombination.DisplayValue   == _displayValue
                join RecId from generalJournalEntry
                    where generalJournalAccountEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                       && generalJournalEntry.Ledger                        == Ledger::current()
                       && generalJournalEntry.AccountingDate                >= _startDate
                       && generalJournalEntry.AccountingDate                <= _endDate
                join RecId from fiscalCalendarPeriod
                    where generalJournalEntry.FiscalCalendarPeriod          == fiscalCalendarPeriod.RecId
                       && fiscalCalendarPeriod.Type                         == _periodType;
        }
        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInflationRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the INPC rate for a specified month and year.
    /// </summary>
    /// <param name="_month">
    ///    The month for which to retrieve the inflation rate.
    /// </param>
    /// <param name="_year">
    ///    The year for which to retrieve the inflation rate.
    /// </param>
    /// <returns>
    ///    The INPC rate for a particular month and year.
    /// </returns>
    /// <remarks>
    ///    This method is used to retrieve the INPC rate for all adjustment methods, that is opening balance,
    ///    monthly balance, balance, and transaction date.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The inflation rate does not exist for the specified month and year.
    /// </exception>
    public InpcRate_MX getInflationRate(
        int _month,
        int _year)
    {
        InpcRate_MX inflationRate;

        inflationRate = InpcRateTable_MX::findByYearMonth(_year, _month).InflationRate;

        if (inflationRate == 0)
        {
            throw error (strfmt("@SYS312866", mthname(_month), _year));
        }
        else
        {
            return inflationRate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthlyINPC</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method to retrieve the INPC rates between the from and to dates and return as a container.
    /// </summary>
    /// <param name="_fromDate">
    ///     From which date should the INPC rates be retrieved.
    /// </param>
    /// <param name="_toDate">
    ///     Till which date should the INPC rates be retrieved.
    /// </param>
    /// <param name="_monthDiff">
    ///     Difference in months between the from and to dates.
    /// </param>
    /// <returns>
    ///     A container with the list of INPC rates between the from and to dates entered.
    /// </returns>
    /// <remarks>
    ///     Used to retrieve the INPC rates between the from and to dates and returns the list of INPC rates as a container.
    /// </remarks>
    protected container getMonthlyINPC(
        FromDate    _fromDate,
        ToDate      _toDate,
        int         _monthDiff)
    {
        container conMonthlyINPC;
        int       noOfMonths = 1;
        FromDate  startDate;
        ToDate    endDate;

        startDate = _fromDate;
        endDate   = _toDate;

        while (noOfMonths <= _monthDiff)
        {
            conMonthlyINPC = conins(conMonthlyINPC, noOfMonths, this.getInflationRate(mthofyr(startDate), year(startDate)));

            startDate = endDate + 1;
            endDate   = endmth(startDate);

            noOfMonths++;
        }

        return conMonthlyINPC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="fromDate" /> parameter.
    /// </summary>
    /// <param name="_fromDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="fromDate" /> parameter.
    /// </returns>
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <paramref name="toDate" /> parameter.
    /// </summary>
    /// <param name="_toDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="toDate" /> parameter.
    /// </returns>
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the temporary table buffer based on the adjustment method.
    /// </summary>
    /// <param name="_fromDate">
    ///    The date from which to consider the transactions.
    /// </param>
    /// <param name="_toDate">
    ///    The date to which to consider the transactions.
    /// </param>
    /// <returns>
    ///    A temporary table that has adjustment inflation values that are based on the adjustment method.
    /// </returns>
    /// <remarks>
    ///    The <c>fromDate</c> and <c>toDate</c> global variables must be set in the individual child classes
    ///    in the <c>populateTmpTable</c> method to fill the temporary table with the date range.
    /// </remarks>
    abstract public  Common  populateTmpTable(
        FromDate    _fromDate,
        ToDate      _toDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method to construct an object of the child class depending on the adjustment method.
    /// </summary>
    /// <param name="_infAdjMethod">
    ///    Inflation adjustment method to indicate which child class to be constructed.
    /// </param>
    /// <returns>
    ///    An object of the respective child class based on the adjustment method.
    /// </returns>
    /// <remarks>
    ///    Method that constructs an object of the child class depending on the value of the adjustment method.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An error is prompted when the inflation adjustment does not match any of the adjustment methods
    ///    specified.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error is prompted when a value other than inflation adjustment method is used.
    /// </exception>
    static InfAdjMethod_MX construct(AdjustmentMethod_MX _infAdjMethod)
    {
        switch (_infAdjMethod)
        {
            case AdjustmentMethod_MX::OpenBalance     :  return new InfAdjMethod_OpenBalance_MX();
            case AdjustmentMethod_MX::MonthlyBalance  :  return new InfAdjMethod_MonthBalance_MX();
            case AdjustmentMethod_MX::TransactionDate :  return new InfAdjMethod_TransDate_MX();
            case AdjustmentMethod_MX::Balance         :  return new InfAdjMethod_Balance_MX();

            default : throw error(strfmt("@SYS19306",funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>