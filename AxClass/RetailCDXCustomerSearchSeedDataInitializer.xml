<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXCustomerSearchSeedDataInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXCustomerSearchSeedDataInitializer</c> initializes basic configuration for customer search.
/// </summary>
internal class RetailCDXCustomerSearchSeedDataInitializer extends RetailCDXSeedDataBase
{
    private boolean clearPreviousSeedData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(boolean _clearPreviousSeedData = false)
    {
        this.clearPreviousSeedData = _clearPreviousSeedData;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldClearPreviousSeedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to clear the previous CDX seed data configuration.
    /// </summary>
    /// <returns>True if previous seed data configuration should be deleted; false otherwise.</returns>
    internal boolean shouldClearPreviousSeedData()
    {
        return this.clearPreviousSeedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the schema name of customer search.
    /// </summary>
    /// <returns>The schema name of customer search.</returns>
    internal ResourceName getSchemaName()
    {
        return RetailCustomerSearchConstants::CdxSchemaName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullSyncScheduleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the schedule name used for running all download jobs at the same time.
    /// </summary>
    /// <returns>The name of the schedule.</returns>
    protected Name getFullSyncScheduleName()
    {
        return RetailCDXConstants::FullSyncScheduleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullSyncScheduleDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets description of the schedule used that will be used for running all download jobs at the same time.
    /// </summary>
    /// <returns>The description of the schedule.</returns>
    protected Description getFullSyncScheduleDescription()
    {
        return "@REX4520659"; // All jobs
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCDXDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the configuration related to the CDX Data Group.
    /// </summary>
    protected void setupCDXDataGroup()
    {
        ttsbegin;

        // Creates data group for customer search.

        RetailCDXDataGroup customerSearchDataGroup = RetailCDXDataGroup::findByName(RetailCustomerSearchConstants::CdxDataGroupName);

        if (!customerSearchDataGroup)
        {
            RetailConnChannelSchema customerSearchSchema = RetailConnChannelSchema::findByName(RetailCustomerSearchConstants::CdxSchemaName);

            if (!customerSearchSchema)
            {
                throw Global::error(strFmt("@RET4040124", this.resourceSchemaName));
            }

            customerSearchDataGroup.Name          = RetailCustomerSearchConstants::CdxDataGroupName;
            customerSearchDataGroup.Description   = "@Retail:CustomerSearchDataGroupDescription";
            customerSearchDataGroup.ChannelSchema = customerSearchSchema.RecId;
            customerSearchDataGroup.insert();
        }

        // Associates data group with customer search distribution schedule.

        RetailConnSchedule customerSearchSchedule = RetailConnSchedule::find(RetailCustomerSearchConstants::CdxScheduleName);
        RetailCDXScheduleDataGroup customerSearchScheduleDataGroup;

        select RecId from customerSearchScheduleDataGroup
            where customerSearchScheduleDataGroup.DataGroup == customerSearchDataGroup.RecId &&
                  customerSearchScheduleDataGroup.Schedule == customerSearchSchedule.RecId;

        if (!customerSearchScheduleDataGroup)
        {
            customerSearchScheduleDataGroup.DataGroup  = customerSearchDataGroup.RecId;
            customerSearchScheduleDataGroup.Schedule   = customerSearchSchedule.RecId;
            customerSearchScheduleDataGroup.insert();
        }

        // Creates database profile and links it to data group.

        RetailConnDatabaseProfile customerSearchDatabaseProfile = RetailConnDatabaseProfile::find(RetailCustomerSearchConstants::CdxDatabaseProfileName);

        if (!customerSearchDatabaseProfile)
        {
            customerSearchDatabaseProfile.DataGroup = customerSearchDataGroup.RecId;
            customerSearchDatabaseProfile.Name = RetailCustomerSearchConstants::CdxDatabaseProfileName;
            customerSearchDatabaseProfile.insert();
        }

        // Selects a representative channel from each legal entity and associates them to database profile.
        // Representative channels are needed to make sure records from all legal entities will be synced by this CDX schedule job.
        RetailCDXCustomerSearchSeedDataInitializer::populateListOfRepresentativeChannel();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXSDSchemaResource</Name>
				<Source><![CDATA[
    protected ResourceName getXSDSchemaResource()
    {
        return resourceStr(RetailCDXSeedDataAX7_Schema);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCoreCDXSeedDataResource</Name>
				<Source><![CDATA[
    protected ResourceName getCoreCDXSeedDataResource()
    {
        return resourceStr(RetailCDXSeedDataCustomerSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts channel schema in <c>RetailConnChannelSchema</c>.
    /// </summary>
    protected void insertChannelSchema()
    {
        RetailConnChannelSchema::InsertCustomerSearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupRecurringBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set up recurring batch job for CDX schedule job.
    /// </summary>
    protected void setupRecurringBatchJob()
    {
        RetailConnSchedule customerSearchSchedule = RetailConnSchedule::find(RetailCustomerSearchConstants::CdxScheduleName, true);

        // Quick return if customer search schedule job already has a recurring batch job.
        if (customerSearchSchedule.BatchJobId)
        {
            return;
        }

        ttsbegin;

        // Create recurring batch job to run customer search schedule job every 15 minutes. 
        RetailCDXScheduleRunner scheduleRunner = new RetailCDXScheduleRunner();
        scheduleRunner.paramScheduleRecID(customerSearchSchedule.RecId);

        BatchHeader batchHeader = BatchHeader::construct();
        batchHeader.addTask(scheduleRunner);

        SysRecurrenceData recurrence = SysRecurrence::defaultRecurrence();
        recurrence = SysRecurrence::setRecurrenceNoEnd(recurrence);
        recurrence = SysRecurrence::setRecurrenceUnit(recurrence, SysRecurrenceUnit::Minute, 15);

        batchHeader.parmRecurrenceData(recurrence);
        batchHeader.save();

        // Link recurring batch job with customer search schedule job.
        customerSearchSchedule.BatchJobId = batchHeader.parmBatchHeaderId();
        customerSearchSchedule.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCDXSeedDataExtensionResources</Name>
				<Source><![CDATA[
    protected List getCDXSeedDataExtensionResources()
    {
        // Returns empty list because customer search CDX job does not support extension.
        List resources = new List(Types::String);

        return resources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresentativeChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the representative channel for legal entity.
    /// Non call center channels have higher priority than call center channels.
    /// </summary>
    /// <param name = "dataAreaId">The data area identifier.</param>
    /// <returns>The RecId of representative channel.</returns>
    private static RecId getRepresentativeChannel(DataAreaId dataAreaId)
    {
        RetailChannelTable channelTable;

        select firstonly RecId from channelTable
            where channelTable.inventLocationDataAreaId == dataAreaId
                && channelTable.ChannelType != RetailChannelType::MCRCallCenter;

        if (channelTable)
        {
            return channelTable.RecId;
        }

        select firstonly RecId from channelTable
            where channelTable.inventLocationDataAreaId == dataAreaId;

        if (channelTable)
        {
            return channelTable.RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateListOfRepresentativeChannel</Name>
				<Source><![CDATA[
    internal static void populateListOfRepresentativeChannel()
    {
        RetailConnDatabaseProfile customerSearchDatabaseProfile = RetailConnDatabaseProfile::find(RetailCustomerSearchConstants::CdxDatabaseProfileName);

        if (!customerSearchDatabaseProfile)
        {
            return;
        }

        // Selects a representative channel from each legal entity and associates them to database profile.
        // Representative channels are needed to make sure records from all legal entities will be synced by this CDX schedule job.
        RetailChannelTable channelTableGroup, channelTable;
        RetailCDXDataStoreChannel dataStoreChannel;

        while select channelTableGroup group by channelTableGroup.inventLocationDataAreaId
        {
            // Check if the legal entity already has a representative channel associated with database profile.
            select firstonly RecId from dataStoreChannel
                where dataStoreChannel.DatabaseProfile == customerSearchDatabaseProfile.RecId
            exists join channelTable
                where channelTable.RecId == dataStoreChannel.Channel
                && channelTable.inventLocationDataAreaId == channelTableGroup.inventLocationDataAreaId;

            if (dataStoreChannel)
            {
                continue;
            }

            RecId representativeChannelId = RetailCDXCustomerSearchSeedDataInitializer::getRepresentativeChannel(channelTableGroup.inventLocationDataAreaId);

            if (representativeChannelId)
            {
                dataStoreChannel.clear();
                dataStoreChannel.Channel = representativeChannelId;
                dataStoreChannel.DatabaseProfile = customerSearchDatabaseProfile.RecId;
                dataStoreChannel.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>