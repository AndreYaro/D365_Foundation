<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalCheckPost_RU extends LedgerJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bondJournalVoucher</Name>
				<Source><![CDATA[
    public static void bondJournalVoucher(LedgerBondClient_RU _ledgerBondClient, LedgerVoucher _ledgerVoucher)
    {
        _ledgerBondClient.bondLogBySourceRecId(_ledgerVoucher.lastTransDate());
        if (_ledgerBondClient.currentLogLength(_ledgerVoucher.lastTransDate()))
        {
            _ledgerBondClient.bondLog2Log(_ledgerVoucher.lastTransDate(),
                                         _ledgerBondClient.getDebitLog(_ledgerVoucher.lastTransDate()),
                                         _ledgerBondClient.getCreditLog(_ledgerVoucher.lastTransDate()),
                                         _ledgerBondClient.parmSortFields() + [fieldNum(TmpLedgerBondLogTable_RU, SourceTableId), fieldNum(TmpLedgerBondLogTable_RU, SourceRecId)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRestoredVAT</Name>
				<Source><![CDATA[
    public static boolean checkRestoredVAT(LedgerJournalCheckPost _caller,
                                            LedgerJournalTrans _ledgerJournalTrans,
                                            boolean _post = false)
    {
        boolean ret = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            _ledgerJournalTrans.Invoice                                  &&
            RestoredVATLogTable_RU::checkApproved(_ledgerJournalTrans.TransDate))
        {
            ret = checkFailed(RestoredVATLogTable_RU::txtApprovedMsg(_ledgerJournalTrans.TransDate));

            if (_post)
            {
                _caller.insertInVoucherErrorList(_ledgerJournalTrans.Voucher);
            }
            else
            {
                _caller.updateTransInfoLog(_ledgerJournalTrans);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesBookTax</Name>
				<Source><![CDATA[
    public static boolean checkSalesBookTax(LedgerJournalCheckPost _caller,
                                           LedgerJournalTrans _ledgerJournalTrans,
                                           boolean            _post     = false,
                                           CompanyId          _company  = curext())
    {
        boolean         ret = true;
        CustTaxation_RU policy;

        void errorMessage()
        {
            ret = checkFailed(strFmt("@GLS101326",
                                     LedgerJournalTrans::findTmpVoucher(_ledgerJournalTrans.Voucher, _caller.parmTmpVoucherMap()),
                                     _ledgerJournalTrans.TransDate));

            if (_post)
            {
                _caller.insertInVoucherErrorList(_ledgerJournalTrans.Voucher);
            }
            else
            {
                _caller.updateTransInfoLog(_ledgerJournalTrans);
            }
        }

        if (! xDataArea::exist(_company))
        {
            throw error(strFmt("@SYS10666",_company));
        }

        changecompany(_company)
        {
            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust &&
                ! SalesBookTable_RU::canProcessDate(_ledgerJournalTrans.TransDate))
            {
                policy = CustParameters::taxation_RU(_ledgerJournalTrans.TransDate);

                if (policy == CustTaxation_RU::OnPayment || _ledgerJournalTrans.vatOnPayment_RU)
                {
                    if (_ledgerJournalTrans.Prepayment)
                    {
                        errorMessage();
                    }
                }
                else
                {
                    if (_ledgerJournalTrans.Prepayment || _ledgerJournalTrans.Invoice)
                    {
                        errorMessage();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrepaymentAutoFacture_RU</Name>
				<Source><![CDATA[
    public static boolean checkPrepaymentAutoFacture_RU(LedgerJournalCheckPost _caller,
                                                LedgerJournalTrans _ledgerJournalTrans,
                                                boolean            _post     = false)
    {
        boolean         ret = true;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust &&
            _ledgerJournalTrans.Prepayment &&
            _ledgerJournalTrans.CustFactureAutoCreate_RU &&
            _ledgerJournalTrans.UseOriginalDocumentAsFacture_RU &&
            ! _ledgerJournalTrans.DocumentNum)
        {
            ret = checkFailed(strFmt("@SalesPurchBook:AutoFactureCreateDocMustBeFilled", _ledgerJournalTrans.Voucher));

            if (_post)
            {
                _caller.insertInVoucherErrorList(_ledgerJournalTrans.Voucher);
            }
            else
            {
                _caller.updateTransInfoLog(_ledgerJournalTrans);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRPayDeferrals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates payroll deferrals.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> instance.</param>
    public static void createRPayDeferrals(LedgerJournalCheckPost _caller)
    {
        RPayCreateDeferrals createDeferrals;
        LedgerJournalTable LedgerJournalTable = _caller.parmLedgerJournalTable();

        if (ledgerJournalTable.JournalType == LedgerJournalType::Payroll_RU &&
            ledgerJournalTable.ledgerJournalTable_W().ReverseType_RU == JournalReverseType_RU::Main)
        {
            createDeferrals = RPayCreateDeferrals::construct(_caller.parmLedgerVoucher());
            createDeferrals.create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    public static void createTransLink(LedgerJournalCheckPost _caller)
    {
        SubledgerVoucherGeneralJournalEntry ledgerTransJournal;
        LedgerJournalTrans  ledgerJournalTrans;
        VendInvoiceJour     vendInvoiceOrig,
                            vendInvoice;
        VendTrans           vendTrans;
        LedgerTransLink_RU  ledgerTransLink;
        Set                 setVoucherDate = new Set(Types::Container);
        LedgerJournalTable ledgerJournalTable = _caller.parmLedgerJournalTable();

        if (ledgerJournalTable.ledgerJournalTable_W().ReportingDate_RU || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
        {
            while select Voucher, TransDate, CorrectedInvoiceId_RU, CorrectedInvoiceDate_RU from ledgerJournalTrans
                where  ledgerJournalTrans.JournalNum  == _caller.parmJournalNum()
                   && (ledgerJournalTable.JournalType != LedgerJournalType::VendInvoiceRegister
                   ||  ledgerJournalTrans.CorrectedInvoiceId_RU)
            {
                if (setVoucherDate.in([ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate]))
                {
                    continue;
                }

                setVoucherDate.add([ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate]);

                if (ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
                {
                    vendTrans = VendTrans::findVoucherDate(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
                    if (vendTrans.Invoice)
                    {
                        vendInvoice     = vendTrans.vendInvoiceJour_RU();
                        vendInvoiceOrig = VendInvoiceJour::findFromVendTrans(ledgerJournalTrans.CorrectedInvoiceId_RU,
                                                                             ledgerJournalTrans.CorrectedInvoiceDate_RU,
                                                                             vendTrans.AccountNum);

                        ledgerTransLink = LedgerTransLink_RU::newTrans(vendInvoice, vendInvoiceOrig);
                        ledgerTransLink.parmReportingDate(vendInvoice.CorrectedInvoiceDate_RU);
                        ledgerTransLink.parmVoucherField(fieldnum(VendInvoiceJour, LedgerVoucher));
                        ledgerTransLink.parmAccountingDateField(fieldnum(VendInvoiceJour, InvoiceDate));
                        ledgerTransLink.run();
                    }
                }
                else
                {
                    ledgerTransJournal.Voucher   = ledgerJournalTrans.Voucher;
                    ledgerTransJournal.AccountingDate = ledgerJournalTrans.TransDate;

                    ledgerTransLink = LedgerTransLink_RU::newTrans(ledgerTransJournal);
                    ledgerTransLink.parmReportingDate(ledgerJournalTable.ledgerJournalTable_W().ReportingDate_RU);
                    ledgerTransLink.run();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCorrection</Name>
				<Source><![CDATA[
    public static void postCorrection(LedgerJournalTable _ledgerJournalTable)
    {
        if (_ledgerJournalTable.JournalType == LedgerJournalType::Assets_RU ||
            _ledgerJournalTable.JournalType == LedgerJournalType::RDeferrals)
        {
            TransLinkCorrection_RU::postLedgerJournal(_ledgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCashReportPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction date falls in the period for which a cash report has already been
    /// generated.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    ///    The posting messages collection; optional.
    /// </param>
    /// <returns>
    /// false if the transaction date falls in the period for which a cash report has already been
    /// generated and the parameter to disallow that posting is enabled; otherwise, true.
    /// </returns>
    public static boolean validateCashReportPeriod(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        boolean         isJournalValid = true;
        RCashAccount    accountNum = _ledgerJournalTrans.AccountType == LedgerJournalACType::RCash
                                    ? RCashTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).AccountNum
                                    : RCashTable::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).AccountNum;

        if (RCashParameters::find().PeriodClosedPosting_HU
            && RCashReportJour_PL::findAfter(accountNum, _ledgerJournalTrans.TransDate, _ledgerJournalTrans.CurrencyCode, ''))
        {
            if (_ledgerPostingMessageCollection)
            {
                isJournalValid = _ledgerPostingMessageCollection.logCheckFailed(strFmt("@GLS114456", _ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher));
            }
            else
            {
                isJournalValid = checkFailed(strFmt("@GLS114456", _ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher));
            }
        }

        return isJournalValid;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>