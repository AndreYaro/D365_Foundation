<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_CH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_CH extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        return this.validateBankAccountNum(_bankAccountMap.RegistrationNum, _bankAccountMap.BankIBAN, _bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankContractAccount</Name>
				<Source><![CDATA[
    public boolean checkBankContractAccount(BankAccountMap _bankAccountMap)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00010,funcName());

        BankAccount bankContractAccount;

        int accountLen = 9;

        if (_bankAccountMap.RegistrationNum) // Bank
        {
            bankContractAccount = _bankAccountMap.BankContractAccount;
        }

        if (!bankContractAccount)
        {
            return true;
        }

        if (strLen(bankContractAccount) != accountLen)
        {
            return checkFailed(strfmt("@SYS82646", accountLen));
        }
        else
        {
            if (subStr(bankContractAccount, accountLen, 1) != this.mod10(bankContractAccount))
            {
                return checkFailed("@SYS58328");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGiroContractAccount</Name>
				<Source><![CDATA[
    public boolean checkGiroContractAccount(BankAccountMap _bankAccountMap)
    {
        int accountLen9 = 9;
        int accountLen5 = 5;

        GiroContractAccount giroContractAccount = _bankAccountMap.GiroContractAccount;

        if (!giroContractAccount)
        {
            return true;
        }

        if (strLen(giroContractAccount) != accountLen9 && strLen(giroContractAccount) != accountLen5)
        {
            return checkFailed(strfmt("@SYS68097", accountLen5, accountLen9));
        }
        else if (strLen(giroContractAccount) == accountLen9)
        {
            if (subStr(giroContractAccount, accountLen9, 1) != this.mod10(giroContractAccount))
            {
                return checkFailed("@SYS68098");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymId</Name>
				<Source><![CDATA[
    public boolean checkPaymId(PaymId _paymId)
    {
        PaymId paymId = _paymId;

        const str SCORMarker = 'RF';

        if (paymId && VendParameters::find().DisablePaymentIDValidation_CH == NoYes::No)
        {
            // SCOR check
            if (substr(_paymId, 0, 2) == SCORMarker)
            {
                return true;
            }

            int pos1 = strFind(paymId, '>', 1, strLen(paymId));
            if (pos1 > 0)
            {
                int pos2 = strFind(paymId, '+', pos1 + 1, strLen(paymId) - pos1 - 1);
                if (pos2 > 0)
                {
                    paymId = subStr(paymId, pos1 + 1, pos2 - pos1 - 1);
                }
            }

            switch (strlen(paymId))
            {
                case 15:
                    break;

                case 16, 27:
                    if (subStr(paymId, strLen(paymId), 1) != this.mod10(paymId))
                    {
                        return checkFailed("@SYS63350");
                    }
                    break;

                default:
                    return checkFailed("@SYS63349");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mod10</Name>
				<Source><![CDATA[
    public str mod10(str _accountNum)
    {
        int strPos = 1;
        int numerals = 0;

        while (strPos < strLen(_accountNum))
        {
            numerals = str2Int(subStr('0946827135', 1 + ((str2Int(subStr(_accountNum, strPos, 1)) + numerals) mod 10), 1));
            strPos++;
        }

        return num2Str((10 - numerals) mod 10, 0, 0, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mod11</Name>
				<Source><![CDATA[
    public str mod11(str _accountNum)
    {
        int strPos = 0;
        int vector = 2;
        int summ = 0;
        int control;

        while (strPos <= strLen(strKeep(_accountNum, '0123456789')) - 1)
        {
            summ += str2Int(subStr(strKeep(_accountNum, '0123456789'), strLen(strKeep(_accountNum, '0123456789')) - strPos, 1)) * vector;

            strPos++;
            vector++;

            if (vector > 7)
            {
                vector = 2;
            }
        }

        if (11 - summ mod 11 > 10)
        {
            control = 0;
        }
        else
        {
            control = 11 - summ mod 11;
        }

        return int2Str(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountNum</Name>
				<Source><![CDATA[
    protected boolean validateBankAccountNum(BankRegNum _bankRegNum, BankIBAN _bankIBAN, BankAccount _bankAccount)
    {
        BankAccount bankAccount;
        int accountLen = 9;

        if (!_bankRegNum && !_bankIBAN) // Post
        {
            bankAccount = _bankAccount;
        }

        if (!bankAccount)
        {
            return true;
        }

        if (RemoveSwissBankAccountNumLengthValidationFlight::instance().isEnabled())
        {
            if (strLen(bankAccount) == accountLen && subStr(bankAccount,accountLen, 1) != this.mod10(bankAccount))
            {
                return checkFailed("@SYS58328");
            }
        }
        else
        {
            if (strLen(bankAccount) != accountLen)
            {
                return checkFailed(strfmt("@SYS54162", accountLen));
            }
            else
            {
                if (subStr(bankAccount,accountLen, 1) != this.mod10(bankAccount))
                {
                    return checkFailed("@SYS58328");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            //User must have access to BankIBAN
            ret = this.validateBankAccountNum(_bankAccountMap.RegistrationNum, _bankAccountMap.BankIBAN, _bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankQRIBAN_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the integrity of a given QR-IBAN through use of Mod97 format validation.
    /// </summary>
    /// <param name = "_qrIBAN">The international bank account number.</param>
    /// <param name = "_accountId">The account identifier of the bank account.</param>
    /// <returns>true if the QR-IBAN format passes Mod97 validation; otherwise, false.</returns>
    public static boolean checkBankQRIBAN_CH(BankIBAN _qrIBAN, str _accountId)
    {
        boolean ret = Bank::verifyBankIBAN(_qrIBAN, _accountId);

        if (!ret)
        {
            checkFailed(strFmt("@CustVendQRBill:QRIBANValidationMessage", _accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>