<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcRestartResumeNativeToggle</Name>
	<SourceCode>
		<Declaration><![CDATA[
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;

/// <summary>
/// The ReqCalcRestartResumeNativeToggle handles the flighting logic of native restart/resume functionality for
/// a Master Planing batch job. The logic will be turned on in case of AOS failure.
/// This logic is targetting to replace the existing ReqCalcRestartResume class and leverages the batch restartable attribute. 
/// It stores the processId in the ReqProcessList record at the beginning of the MRP run.
/// In case of failure the processId will be recovered and the native restart/resume logic will be be responsible for 
/// restarting or resuming the run, depending on the execution phase it had reached before failure.
/// </summary>
internal final class ReqCalcRestartResumeNativeToggle implements IFeatureLifecycle
{
    private readonly static ReqCalcRestartResumeNativeToggle instance = new ReqCalcRestartResumeNativeToggle();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static ReqCalcRestartResumeNativeToggle instance()
    {
        return ReqCalcRestartResumeNativeToggle::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the stage of the feature in its lifecycle.
    /// </summary>
    /// <returns>A <c>FeatureLifeCycleState</c> value.</returns>
    /// <remarks>
    /// a. Incomplete – feature is disabled by default. It can be only enabled on MS internal environments (think dev boxes, AxToday, TIE, etc.) with a flight. The flight name is the same as the class name (MyFeature)
    /// b. PrivatePreview – feature is enabled by flight. The flight name is the same as the class name (MyFeature)
    /// c. PublicPreview – feature is enabled by default, it can be turned off with the kill switch. The kill switch is flight called ClassName_KillSwitch  (MyFeature_KillSwitch).
    /// d. Released – feature is enabled by default and cannot be disabled
    /// </remarks>
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PublicPreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(ReqCalcRestartResumeNativeToggle::instance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>