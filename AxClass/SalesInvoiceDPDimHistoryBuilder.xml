<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoiceDPDimHistoryBuilder</c> class builds the storage Dimension and the data to be entered to temporary table for the <c>SalesInvoiceDP</c> class.
/// </summary>
class SalesInvoiceDPDimHistoryBuilder extends SalesPurchDimHistoryBuilder
{
    private CustInvoiceJour         custInvoiceJour;
    private CustInvoiceTrans        custInvoiceTrans;
    private boolean                 isProforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    public CustInvoiceJour parmCustInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTrans</Name>
				<Source><![CDATA[
    public CustInvoiceTrans parmCustInvoiceTrans(CustInvoiceTrans _custInvoiceTrans = custInvoiceTrans)
    {
        custInvoiceTrans = _custInvoiceTrans;
        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProforma</Name>
				<Source><![CDATA[
    public boolean parmIsProforma(boolean _isProforma = isProforma)
    {
        isProforma = _isProforma;
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return custInvoiceTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
        return custInvoiceTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    protected Qty lineQuantity()
    {
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForVersion()
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;

        while select Qty from inventReportDimHistory
            index hint TypeTransIdRefIdx
            where inventReportDimHistory.InventTransId == custInvoiceTrans.InventTransId &&
                    inventReportDimHistory.TransRefId == custInvoiceTrans.InvoiceId &&
                    inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::SalesInvoice
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.Qty, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return custInvoiceJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    protected void buildProformaDimensionStringForStockedProduct()
    {
        InventQty qtyRemain = custInvoiceTrans.InventQty;

        if (qtyRemain)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select inventTransOrigin
                order by inventTrans.StatusIssue, inventTrans.InventDimId
                where inventTransOrigin.InventTransId     == custInvoiceTrans.InventTransId &&
                        inventTransOrigin.ReferenceCategory == InventTransType::Sales
                join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                            (inventTrans.StatusIssue == StatusIssue::OnOrder ||
                            inventTrans.StatusIssue == StatusIssue::ReservOrdered ||
                            inventTrans.StatusIssue == StatusIssue::ReservPhysical ||
                            inventTrans.StatusIssue == StatusIssue::Picked ||
                            inventTrans.StatusIssue == StatusIssue::Deducted) &&
                            inventTrans.StatusReceipt == StatusReceipt::None
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (this.mustPrintTransactionQuantity(inventTransOrigin, inventTrans, inventDim))
                {
                    qtyRemain = this.inventDimPrintForTransaction(qtyRemain, inventTrans.Qty, inventDim);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFastPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the document defers the posting.
    /// </summary>
    /// <returns>
    /// true if posting is deferred; otherwise, false.
    ///</returns>
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isFastPrint()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    protected boolean isProforma()
    {
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    protected boolean isStockedProduct()
    {
        return custInvoiceTrans.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoiceDPDimHistoryBuilder construct()
    {
        return new SalesInvoiceDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>