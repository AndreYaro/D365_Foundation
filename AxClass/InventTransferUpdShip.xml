<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpdShip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferUpdShip</c> class handles updates that are specific to shipments of transfer
///    orders.
/// </summary>
class InventTransferUpdShip extends InventTransferUpd
{
    #define.decimalRound(2)
    #ISOCountryRegionCodes
    boolean isCountryRegionIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
    private boolean isShipmentAmountAllocationFlightEnabled = InventTransferOrderShipmentAmountAllocationFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>stockTransferPostTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the tax for the posted transfer line.
    /// </summary>
    /// <param name = "_inventTransLine">The <c>InventTransferLine</c> record.</param>
    /// <param name = "_inventTransferParmLine">The <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_defaultDimension">The default dimension value to be used in transaction.</param>
    public void stockTransferPostTax(
        InventTransferLine     _inventTransLine, 
        InventTransferParmLine _inventTransferParmLine,
        DimensionDefault       _defaultDimension)
    {
        LedgerDimensionDefaultAccount interimInventTransitAccShip = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferInterim_IN));

        if (!interimInventTransitAccShip)
        {
            this.throwInventoryPostingAccountError(
                true,
                _inventTransLine.ItemId,
                InventAccountType::TransferInterim_IN);
        }

        TaxAmountCur                    loadOnInventoryTaxAmount;
        TaxAmountCur                    interimTaxAmount;

        [loadOnInventoryTaxAmount, interimTaxAmount] = this.calculateInterimTaxAmountGTE(
            _inventTransferParmLine,
            InventTransferUpdateType::Shipment);

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::TransferInterim_IN,
                LedgerDimensionFacade::serviceCreateLedgerDimension(interimInventTransitAccShip, _defaultDimension),
                Ledger::accountingCurrency(),
                this.normalize(interimTaxAmount),
                exchangeRateHelper));
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Normalizes the value. If it is transfer order cancellation, the amount can be negative value and no need to call abs for it.
    /// </summary>
    /// <param name = "_amount">The value.</param>
    /// <returns>The value normalized.</returns>
    private real normalize(real _amount)
    {
        if (this.inventTransferParmTable.isShipmentCancellation())
        {
            return _amount;
        }

        return abs(_amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucherTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the dimension account based on the Invent Account Type passed and to get the voucher object.
    /// </summary>
    /// <param name="_inventTransLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferParmLine">
    /// A buffer of <c>InventTransferParmLine</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// A exception will throw if not find any account.
    /// </exception>
    public void addVoucherTrans_IN(InventTransferLine       _inventTransLine,
                                   InventTransferParmLine   _inventTransferParmLine)
    {
        TaxAmount                       taxAmountShip;
        AmountCur                       lineValueShip;
        AmountCur                       retentionTaxAmt;
        AmountCur                       interimInventTransitAmt;
        TaxLedgerAccountSetup_IN        taxLedgerAccountSetupTable;
        TaxLedgerAccountSetup_IN        taxLedgerAccountSetupAll;
        LedgerDimensionDefaultAccount   goodsAccShip;
        LedgerDimensionDefaultAccount   invRetentionAccShip;
        LedgerDimensionDefaultAccount   inventIssueAccShip;
        LedgerDimensionDefaultAccount   unRelProfitAccShip;
        LedgerDimensionDefaultAccount   unRelLossAccShip;
        LedgerDimensionDefaultAccount   interimInventTransitAccShip;
        real                            inventCostPrice;
        VATRetentionTrans_IN            vatRetentionTrans;
        TaxTable                        taxTable;
        TaxValue                        taxVal;
        InventTransferQty               qtyTransfer;
        real                            amountOriginVal;
        real                            priceInclTaxAmt;
        real                            lineAmt;
        CurrencyExchangeHelper          exchangeRateHelper;
        AmountCur                       orginLineValue;
        TransTaxInformation             transTaxInformation;
        InventTransferLine_IN           inventTransferLineIN = _inventTransLine.inventTransferLine_IN();

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_inventTransLine);

        inventTransTable    = InventTransferTable::find(_inventTransLine.TransferId, false);
        inventCostPrice     = _inventTransLine.inventTransferLine_IN().InventCostPriceCalculated;
        if (inventCostPrice == 0)
        {
            inventCostPrice = _inventTransLine.inventSumUnitPrice_IN();
        }

        if (inventCostPrice < 0)
        {
            inventCostPrice = 0;
        }
        
        inventTransLineTax  = InventTransLineTax_IN::construct(_inventTransLine, inventTransferParmTable.TransDate, _inventTransferParmLine);
        inventTransLineTax.setTransferStatus(true);

        taxAmountShip       = CurrencyExchangeHelper::amount(inventTransLineTax.calcOnPost(), inventTransferLineIN.CurrencyCode);
        
        // <GTE>
        TaxAmountCur                    loadOnInventoryTaxAmount;
        TaxAmountCur                    interimTaxAmount;

        [loadOnInventoryTaxAmount, interimTaxAmount] = this.calculateInterimTaxAmountGTE(
            _inventTransferParmLine,
            InventTransferUpdateType::Shipment);
        // </GTE>

        amountOriginVal     = inventTransLineTax.getAmountOrigin(_inventTransLine);
        if (_inventTransLine.checkForUnitID_IN())
        {
            qtyTransfer = _inventTransLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyShipNow);
        }
        else
        {
            qtyTransfer = _inventTransferParmLine.QtyShipNow;
        }

        if (amountOriginVal)
        {
            amountOriginVal  = amountOriginVal / qtyTransfer;
            if (amountOriginVal < (inventTransferLineIN.NetAmount / qtyTransfer))
            {
                lineAmt         = inventTransferLineIN.NetAmount / qtyTransfer;
                priceInclTaxAmt = taxAmountShip / qtyTransfer;
            }
        }
        else
        {
            if (inventTransferLineIN.UnitPrice == 0)
            {
                amountOriginVal = decRound(inventTransferLineIN.NetAmount / qtyTransfer, #decimalRound);
                lineAmt         = amountOriginVal;
            }
            else
            {
                amountOriginVal = inventTransferLineIN.UnitPrice;
                lineAmt         = amountOriginVal;
            }
        }

        unitPrice = lineAmt;

        interimInventTransitAmt = CurrencyExchangeHelper::amount((lineAmt - inventCostPrice) * qtyTransfer, inventTransferLineIN.CurrencyCode);

        lineValueShip       = CurrencyExchangeHelper::amount(inventCostPrice * qtyTransfer, inventTransferLineIN.CurrencyCode);
        orginLineValue      = CurrencyExchangeHelper::amount(amountOriginVal * qtyTransfer, inventTransferLineIN.CurrencyCode);

        goodsAccShip        = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferGoodsTransit_IN));

        unRelProfitAccShip  = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferProfit_IN));

        unRelLossAccShip    = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferLoss_IN));

        inventIssueAccShip  = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferIssue_IN));

        interimInventTransitAccShip = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferInterim_IN));

        taxVal              = vatRetentionTrans.checkFormType(_inventTransLine);

        taxTable            = TaxTable::find(inventTransferLineIN.vatRetentionCode);

        if (taxVal == 0)
        {
            retentionAmt    = decRound((vatRetentionTrans.calcVATAmt(_inventTransLine) / _inventTransLine.QtyTransfer), #decimalRound) * qtyTransfer ;
            retentionTaxAmt = CurrencyExchangeHelper::amount(retentionAmt * inventTransferLineIN.Retention / 100, inventTransferLineIN.CurrencyCode);
            vatRetAmtInq    = retentionTaxAmt;
        }

        taxLedgerAccountSetupTable   =   TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTable.TaxLedgerAccountGroup_IN,
                                                                                          TaxAccountCode_IN::Table,
                                                                                          transTaxInformation.VATTIN);

        invRetentionAccShip     =   TaxLedgerAccounts_IN::findByTaxAccounts(taxLedgerAccountSetupTable.RecId,
                                                                            TaxAccountType_IN::VATRecoverableAccount,
                                                                            taxTable.TaxComponentTable_IN).LedgerDimension;

        if (!invRetentionAccShip)
        {
            taxLedgerAccountSetupAll   =   TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTable.TaxLedgerAccountGroup_IN,
                                                                                           TaxAccountCode_IN::All,
                                                                                           0);

            invRetentionAccShip     =   TaxLedgerAccounts_IN::findByTaxAccounts(taxLedgerAccountSetupAll.RecId,
                                                                                TaxAccountType_IN::VATRecoverableAccount,
                                                                                taxTable.TaxComponentTable_IN).LedgerDimension;
        }

        if ( !goodsAccShip
            || !unRelProfitAccShip
            || !unRelLossAccShip
            || !inventIssueAccShip
            || !interimInventTransitAccShip
            || ( !invRetentionAccShip && retentionTaxAmt > 0))
        {
            this.throwInventoryPostingAccountError(
                !goodsAccShip,
                _inventTransLine.ItemId,
                InventAccountType::TransferGoodsTransit_IN);
            this.throwInventoryPostingAccountError(
                !unRelProfitAccShip,
                _inventTransLine.ItemId,
                InventAccountType::TransferProfit_IN);
            this.throwInventoryPostingAccountError(
                !unRelLossAccShip,
                _inventTransLine.ItemId,
                InventAccountType::TransferLoss_IN);
            this.throwInventoryPostingAccountError(
                !inventIssueAccShip,
                _inventTransLine.ItemId,
                InventAccountType::TransferIssue_IN);
            this.throwInventoryPostingAccountError(
                !interimInventTransitAccShip,
                _inventTransLine.ItemId,
                InventAccountType::TransferInterim_IN);

            this.throwTaxLedgerPostingAccountError(
                !invRetentionAccShip && retentionTaxAmt > 0,
                _inventTransLine.ItemId,
                TaxAccountType_IN::VATRecoverableAccount);
        }

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

        boolean isPostFinancial = InventTable::find(_inventTransLine.ItemId).modelGroup().PostOnhandFinancial;

        // respect isPostFinancial value for India
        mustBeBookedFinancially = isPostFinancial;

        if (goodsAccShip && isPostFinancial)
        {
            invoiceAmount += abs(orginLineValue) + abs(taxAmountShip)+ abs(retentionTaxAmt)
            //<GTE>
            + interimTaxAmount + loadOnInventoryTaxAmount
            //</GTE>
            ;

            ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                            ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::TransferGoodsTransit_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(goodsAccShip, _inventTransferParmLine.DefaultDimension_IN),
                                                            Ledger::accountingCurrency(),
                                                            this.normalize(lineValueShip),
                                                            exchangeRateHelper));
        }

        if (unRelProfitAccShip || unRelLossAccShip)
        {
            if ((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) > 0 )
            {
                ledgerVoucher.addTrans(
                                     LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                 ledgerVoucher.findLedgerVoucherObject(),
                                                                 LedgerPostingType::TransferProfit_IN,
                                                                 LedgerDimensionFacade::serviceCreateLedgerDimension(unRelProfitAccShip, _inventTransferParmLine.DefaultDimension_IN),
                                                                 Ledger::accountingCurrency(),
                                                                 -(CurrencyExchangeHelper::amount((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer, inventTransferLineIN.CurrencyCode)),
                                                                 exchangeRateHelper));
            }
            else
            {
                ledgerVoucher.addTrans(
                                    LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                ledgerVoucher.findLedgerVoucherObject(),
                                                                LedgerPostingType::TransferLoss_IN,
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(unRelLossAccShip, _inventTransferParmLine.DefaultDimension_IN),
                                                                Ledger::accountingCurrency(),
                                                                -(CurrencyExchangeHelper::amount((lineAmt - inventCostPrice + priceInclTaxAmt) * qtyTransfer, inventTransferLineIN.CurrencyCode)),
                                                                exchangeRateHelper));
            }
        }
        if (inventIssueAccShip && isPostFinancial)
        {
            ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                            ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::TransferIssue_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(inventIssueAccShip, _inventTransferParmLine.DefaultDimension_IN),
                                                            Ledger::accountingCurrency(),
                                                            CurrencyExchangeHelper::amount(-(inventCostPrice * qtyTransfer)
                                                            // <GTE>
                                                            + loadOnInventoryTaxAmount,
                                                            // </GTE>
                                                            inventTransferLineIN.CurrencyCode),
                                                            exchangeRateHelper));
        }
        if (invRetentionAccShip)
        {
            retentionAcc = invRetentionAccShip;
            ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newTransactionAmountDefault(
                                                            ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::VAT_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(invRetentionAccShip, _inventTransferParmLine.DefaultDimension_IN),
                                                            Ledger::accountingCurrency(),
                                                            -retentionTaxAmt,
                                                            exchangeRateHelper));
        }
        if (interimInventTransitAccShip)
        {
            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::TransferInterim_IN,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(interimInventTransitAccShip, _inventTransferParmLine.DefaultDimension_IN),
                    Ledger::accountingCurrency(),
                    interimInventTransitAmt + abs(taxAmountShip)+ abs(retentionTaxAmt) - abs(priceInclTaxAmt)*qtyTransfer
                    //<GTE>
                    + this.normalize(interimTaxAmount),
                    //</GTE>
                    exchangeRateHelper));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data that is required for updating the ledger voucher.
    /// </summary>
    /// <remarks>
    /// The data is not committed before the <see cref="M:InventTransferUpd.commitLedger" /> method is
    /// called.
    /// </remarks>
    protected void beginLedger()
    {
        // <GBR>
        if (BrazilParameters::isEnabled() && inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument())
        {
            fiscalDocumentNumber_BR = this.getFiscalDocumentNumber_BR();
        }
        // </GBR>

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyReceivedInventDim_RU</Name>
				<Source><![CDATA[
    //calc received and not returned qty by inventDimID
    private container calcQtyReceivedInventDim_RU(
        InventTransOriginId _inventTransOriginId,
        InventDimId         _inventDimId)
    {
        InventTrans inventTransLoc;

        select sum(Qty), sum(PdsCWQty) from inventTransLoc
        where inventTransLoc.InventTransOrigin == _inventTransOriginId
            &&  inventTransLoc.StatusReceipt   == StatusReceipt::None
            &&  inventTransLoc.StatusIssue     == StatusIssue::Sold
            &&  inventTransLoc.InventDimId     == _inventDimId
            &&  inventTransLoc.InvoiceReturned == NoYes::No;

        return [inventTransLoc.Qty, inventTransLoc.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and validates all lines for the transfer order - update table that is being updated.
    /// </summary>
    /// <returns>
    ///    true if all lines for the transfer order - update table being updated are valid; otherwise, false.
    /// </returns>
    protected boolean checkLines_RU()
    {
        InventTransferParmLine  inventTransferParmLine;
        boolean                 ok = true;

        while select inventTransferParmLine
            where inventTransferParmLine.TransferId == inventTransferParmTable.TransferId
               && inventTransferParmLine.ParmId     == inventTransferParmTable.ParmId
        {
            if (inventTransferParmLine.InventDimIdTo_RU != inventTransferParmLine.inventTransferLine().InventDimIdTo_RU)
            {
                ok = checkFailed("@GLS115696");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventTransferJournalCreated</Name>
				<Source><![CDATA[
    protected void postInventTransferJournalCreated()
    {
        super();

        if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.createCFDIPackingSlip_MX();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIPackingSlip_MX</Name>
				<Source><![CDATA[
    private void createCFDIPackingSlip_MX()
    {
        if (inventTransferParmTable.CFDIEnabled_MX)
        {
            EInvoicePost_MX eInvoicePost = EInvoicePost_MX::construct(inventTransferJour);
            eInvoicePost.parmParmTable(this.parmParmBuffer());
            eInvoicePost.createElectronicInvoiceJour();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        FiscalDocumentPost_BR   fiscalDocumentPost;
        WHSLoadId               loadId;

        InventTransferJour InventTransferJourToCancel;

        this.postTax(true);

        super();

        if (BrazilParameters::isEnabled())
        {
            if (inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument())
            {
                if (InventSkipShipmentStatParmData_BRFlight::instance().isEnabled() ? 
                    inventTransferParmTable.ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU && !inventTransferParmTable.isShipmentCancellation() :
                    inventTransferParmTable.ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU)
                {
                    fiscalDocumentPost = new FiscalDocumentPost_BR(
                        FiscalDocParmDataCreatorInvTransfer_BR::fromInventTransferOrder(inventTransferJour, inventTransferParmTable, inventTransferTable, inventTransferTableFiscalInfo_BR, InventTransferUpdateType::Shipment, inventTransferTotals_BR, fiscalDocumentNumber_BR));

                    fiscalDocumentPost.run();

                    loadId = inventTransferParmTable.getLoadId_BR();
                    if (loadId)
                    {
                        WHSLoadLineFiscalDocument_BR::insertLoadLinesForInventTransferJour(loadId, inventTransferJour, fiscalDocumentPost.getFiscalDocument().RecId);
                    }
                }
                else
                {
                    select firstonly RecId, ReasonTableRef_BR, TransDate from InventTransferJourToCancel
                        where InventTransferJourToCancel.VoucherId == inventTransferParmTable.VoucherShipmentId;

                    FiscalDocumentPost_BR::cancelFiscalDocument(
                        FiscalDocument_BR::findByRef(InventTransferJourToCancel.TableId, InventTransferJourToCancel.RecId),
                        '',
                        InventTransferJourToCancel.TransDate,
                        '',
                        ReasonTableRef::find(InventTransferJourToCancel.ReasonTableRef_BR).ReasonComment);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber_BR</Name>
				<Source><![CDATA[
    private FiscalDocumentNumber_BR getFiscalDocumentNumber_BR()
    {
        NumberSeq                   tmpNumberSeq = new NumberSeq();
        NumberSequenceTable         numberSequenceTableNum;
        Num                         num;
        InventTransferJour          inventTransferJourToCancel;
        FiscalDocument_BR           fiscalDocumentToCancel;

        if (inventTransferParmTable.ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU)
        {
            if (!inventTransferTableFiscalInfo_BR.ShipFiscalDocumentType_BR)
            {
                throw error("@GLS62");
            }

            numberSequenceTableNum = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(inventTransferTableFiscalInfo_BR.ShipFiscalDocumentType_BR);

            tmpNumberSeq.parmNumberSequenceId(numberSequenceTableNum.RecId);
            tmpNumberSeq.parmNumberSequenceCode(numberSequenceTableNum.NumberSequence);
            tmpNumberSeq.parmNumTableNum(numberSequenceTableNum);

            num = tmpNumberSeq.num();
        }
        else
        {
            select RecId from inventTransferJourToCancel
                where inventTransferJourToCancel.VoucherId == inventTransferParmTable.VoucherShipmentId
                join FiscalDocumentNumber from fiscalDocumentToCancel
                where fiscalDocumentToCancel.RefRecId == inventTransferJourToCancel.RecId
                    && fiscalDocumentToCancel.RefTableId == inventTransferJourToCancel.TableId;

            num  = fiscalDocumentToCancel.FiscalDocumentNumber;
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleOverdelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the required <c>InventTrans</c> records to handle over-delivery.
    /// </summary>
    /// <param name="_inventTransferLine">
    ///    The <c>InventTransferLine</c> record for which over-delivery occurs.
    /// </param>
    /// <param name="_inventTransferParmLine">
    ///    The <c>InventTransferParmLine</c> record that is used to update the transfer line.
    /// </param>
    /// <param name="_qtyOverdelivered">
    ///    The quantity that is being over-delivered.
    /// </param>
    /// <param name="_cwQtyOverdelivered">
    ///    The quantity that is being over-delivered in catch weight unit of measure.
    /// </param>
    private void handleOverdelivery(
        InventTransferLine      _inventTransferLine,
        InventTransferParmLine  _inventTransferParmLine,
        InventQty               _qtyOverdelivered
        ,PdsCWInventQty         _cwQtyOverdelivered
        )
    {
        InventUpd_Estimated     estimatedFrom, estimatedTo;
        InventMovement          movementFrom,movementTo;

        _inventTransferLine.QtyRemainShip       += _qtyOverdelivered;
        _inventTransferLine.QtyRemainReceive    += _qtyOverdelivered;

        _inventTransferLine.PdsCWQtyRemainShip      += _cwQtyOverdelivered;
        _inventTransferLine.PdsCWQtyRemainReceive   += _cwQtyOverdelivered;

        //from
        movementFrom = InventMovement::construct(_inventTransferLine);
        movementFrom.setInventDimId(_inventTransferParmLine.InventDimId);
        estimatedFrom = InventUpd_Estimated::newInventMovement(movementFrom);
        estimatedFrom.updateNow();

        //to
        movementTo = InventMovement::construct(_inventTransferLine,InventMovSubType::TransferOrderTo);
        movementTo.setInventDimId(movementTo.inventDimMerged(movementFrom.inventdim()).InventDimId);
        estimatedTo = InventUpd_Estimated::newInventMovement(movementTo);
        estimatedTo.updateNow();

        estimatedFrom.updateReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal <see cref="T:InventTransferTable" /> buffer based on the internal <see
    /// cref="T:InventTransferLine" /> table.
    /// </summary>
    protected void initInventTransferTable()
    {
        super();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            inventTransferTableFiscalInfo_BR = inventTransferTable.inventTransferTableFiscalInfo_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocNumberingCode_LT</Name>
				<Source><![CDATA[
    final public LtDocNumberingCode parmDocNumberingCode_LT(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that sufficient transactions are marked as picked for catch weight items.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// The line being processed.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Insufficient inventory transactions with status Picked.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Cannot change the reservation.
    /// </exception>
    protected void pickCatchWeightItem(InventTransferParmLine _inventTransferParmLine)
    {
        InventTrans                 inventTrans;
        InventDim                   inventDim;
        InventDim                   inventDimTransferParmLine;
        InventDimParm               inventDimParmAll;
        InventDimParm               inventDimParmTransferParmLine;
        InventQty                   cwQtyNotReserved;
        InventQty                   cwQtyNotPicked;
        InventQty                   cwQtyPicked;
        InventQty                   splitWeight;
        InventUpd_Physical          inventUpd_Physical;
        InventDimGroupSetup         dimGroupSetup;
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;
        InventTransIdSum            inventTransIdSum;
        InventTransferLine          inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId, true);
        InventMovement              inventMovement = InventMov_TransferFrom::newFromInventTransferLine(inventTransferLine);

        inventTransIdSum = InventTransIdSum::newTransIdChildType(inventMovement.inventTransOriginId(), inventMovement.transChildType(), inventMovement.transChildRefId());
        cwQtyNotPicked = _inventTransferParmLine.PdsCWQtyShipNow + inventTransIdSum.pdsCWPicked();  // pdsCWPicked returns a negative number
        if (cwQtyNotPicked <= 0)
        {
            // Everything has been picked already
            return;
        }

        if (inventMovement.mustBePicked())
        {
            // Picking requirement, so don't attempt to do picking automatically
            warning("@SCM:InventMovementMustBePicked");
            Info("@SCM:InventOrderPickingGeneralGuide");
            throw error(strFmt("@SYS54028",StatusIssue::Picked));
        }

        dimGroupSetup = inventMovement.inventDimGroupSetup();
        inventDimGroupFieldSetup = dimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSerialId));
        if (!inventDimGroupFieldSetup.isActive()  ||
            !inventDimGroupFieldSetup.isSerialNumberControlEnabled()
            // <GEERU>
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            // </GEERU>
            )
        {
            // Not a full visibility item - must use picking to record weight being shipped.
            warning("@SCM:InventItemNotFullVisibilityMustBePicked");
            Info("@SCM:InventOrderPickingGeneralGuide");
            throw error(strFmt("@SYS54028",StatusIssue::Picked));
        }

        // Physically reserved transactions have weight and can be picked.
        cwQtyNotReserved = cwQtyNotPicked + inventTransIdSum.pdsCWReservPhysical(); // pdsCWReservePhysical returns a negative number
        if (cwQtyNotReserved > 0)
        {
            // Not enough transactions with weight assigned
            if (-inventTransIdSum.pdsCWPicked() - inventTransIdSum.pdsCWReservPhysical()
                - inventTransIdSum.pdsCWReserveOrdered() - inventTransIdSum.pdsCWOnOrder() < _inventTransferParmLine.PdsCWQtyShipNow)
            {
                // Over delivery - must be picked to specify weight through transaction dimensions.
                warning("@SCM:InventItemOverDeliveryMustBePickedToSpecifyWeight");
                Info("@SCM:InventOrderPickingGeneralGuide");
                throw error(strFmt("@SYS54028",StatusIssue::Picked));
            }

            // Try to reserve on dimensions already on transactions
            cwQtyNotReserved = this.reserveCatchWeightItems(inventTransferLine, inventMovement, cwQtyNotReserved);
            if (cwQtyNotReserved > 0)
            {
                warning("@SCM:InventItemMustBePickedToSpecifyDimensionsAndWeight");
                Info("@SCM:InventOrderPickingGeneralGuide");
                throw error(strFmt("@SYS54028",StatusIssue::Picked)); // We need the user to do picking in order to specify dimensions and weight
            }
        }

        // Now pick the remaining needed reserved parts
        inventTransIdSum = InventTransIdSum::newTransIdChildType(inventMovement.inventTransOriginId(), inventMovement.transChildType(), inventMovement.transChildRefId());
        if (-inventTransIdSum.pdsCWReservPhysical() < cwQtyNotPicked)
        {
            throw error("@SYS53948");
        }

        inventDimTransferParmLine  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParmTransferParmLine.initFromInventDim(inventDimTransferParmLine);

        inventUpd_Physical = InventUpd_Financial::newInventTransferLineShip(
            inventMovement,
            ledgerVoucher,
            _inventTransferParmLine,
            0,
            _inventTransferParmLine.QtyShipNow,
            inventDimTransferParmLine,
            inventDimParmTransferParmLine,
            _inventTransferParmLine.PdsCWQtyShipNow).createInventUpd_Physical();

        inventUpd_Physical.initInventTransToIssueList(StatusIssue::ReservPhysical, StatusIssue::ReservPhysical,
                '', inventUpd_Physical.parmInventDim(), inventUpd_Physical.parmInventDimParm(),
                inventMovement.transChildType(), inventMovement.transChildRefId());

        inventDimParmAll.setAllInventDim(); // Pick on exact matching dimensions

        while (cwQtyNotPicked > 0 && inventUpd_Physical.getNextInventTransToIssue(inventTrans))
        {
            if (inventMovement.canInventTransBePhysicalUpdated(inventTrans))
            {
                inventDim = inventTrans.inventDim();
                // Do the pick.
                if (cwQtyNotPicked >= -inventTrans.PdsCWQty)
                {
                    // Pick entire transaction
                    cwQtyPicked = -inventTrans.PdsCWQty;
                    splitWeight = -inventTrans.Qty;
                }
                else
                {
                    // Split weight
                    if (inventTrans.PdsCWQty != 0)
                    {
                        splitWeight = decRound(inventTrans.Qty * cwQtyNotPicked / inventTrans.PdsCWQty, InventTable::inventDecimals(inventTrans.ItemId));
                        cwQtyPicked = cwQtyNotPicked;
                    }
                    else
                    {
                        cwQtyPicked = 0;
                        splitWeight = inventTrans.Qty;
                    }
                }
                InventUpd_Picked::newParameters(inventMovement, inventDim, inventDimParmAll, inventDim, inventDimParmAll, -splitWeight, '', -cwQtyPicked).updateNow();
                cwQtyNotPicked -= cwQtyPicked;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the transfer order taxes.
    /// </summary>
    /// <param name="_post">
    ///    A Boolean value indicating whether the taxes will be posted or not.
    /// </param>
    protected void  postTax(boolean _post)
    {
        super(_post);

        if (BrazilParameters::isEnabled() && inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument())
        {
            TradeCalcTax tradeCalcTax;

            tradeCalcTax = InventTransferCalcTax_BR::construct(inventTransferJour);

            if (tradeCalcTax)
            {
                tradeCalcTax.tax(inventTransferTotals_BR.tax());
                tradeCalcTax.post(ledgerVoucher, _post);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveCatchWeightItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to convert existing <c>OnOrder</c> transactions to physical reservations for full visibility catch weight items.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The line being processed.
    /// </param>
    /// <param name="_inventMovement">
    /// The inventory movement related to the line.
    /// </param>
    /// <param name="_cwQtyToReserve">
    /// The quantity needing to be reserved.
    /// </param>
    /// <returns>
    /// The quantity still not reserved.
    /// </returns>
    protected InventQty reserveCatchWeightItems(
        InventTransferLine      _inventTransferLine,
        InventMov_TransferFrom  _inventMovement,
        PdsCWInventQty          _cwQtyToReserve)
    {
        #Define.SerialControlledQty(1.00)
        InventTrans                 inventTrans;
        InventDim                   inventDim;
        InventDimParm               inventDimParmAll;
        InventSum                   inventSum;
        PdsCWInventQty              cwQtyNotReserved = _cwQtyToReserve;
        InventUpd_Reservation       inventUpd_Reservation;
        InventQty                   extraQty;
        InventTrans                 extraInventTrans;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Try to reserve on existing dimensions - only makes sense if serial number is specified on transaction.
            while select RecId from inventTrans
            order by StatusIssue, InventDimId
            where inventTrans.InventTransOrigin     == _inventMovement.inventTransOriginId()
                &&  inventTrans.StatusIssue         == StatusIssue::OnOrder
                &&  inventTrans.StatusReceipt       == StatusReceipt::None
            join AvailPhysical, #InventDimGroupAllFields, InventDimId from inventSum
                where inventSum.ItemId                  == inventTrans.ItemId
                    &&  inventSum.InventDimId           == inventTrans.InventDimId
                    &&  inventSum.PdsCWAvailPhysical    == #SerialControlledQty
                    &&  inventSum.InventSerialId        != ''
            {
                inventDim.clear();
                inventDim.initFromInventSum(inventSum);
                inventDim.inventDimId = inventSum.inventDimId;

                // we need to increase the remainder on the movement,
                // if we want to reserve more than the original weight
                if (inventSum.AvailPhysical > -_inventMovement.transIdSum().onOrder())
                {
                    extraQty = inventSum.AvailPhysical + _inventMovement.transIdSum().onOrder();
                    _inventMovement.pdsAdjustInventoryQuantity(-extraQty);
                    _inventMovement.pdsUpdateBufferWithAdjustedQuantity();
                    select firstonly forupdate extraInventTrans
                    order by Qty
                    where extraInventTrans.InventTransOrigin    == _inventMovement.inventTransOriginId()
                      &&  extraInventTrans.StatusIssue          == StatusIssue::OnOrder
                      &&  extraInventTrans.StatusReceipt        == StatusReceipt::None
                      &&  extraInventTrans.InventDimId          == _inventMovement.inventDimId()
                      &&  extraInventTrans.Qty                  <= -extraQty;
                    if (!extraInventTrans.RecId)
                    {
                        warning("@SCM:InventCannotFindNewlyCreatedTransaction");
                        throw error(strFmt("@SYS54028",StatusIssue::Picked));   // Cannot find the newly created transaction
                    }
                    // Ensure newly created transaction has same dimensions
                    extraInventTrans.InventDimId = inventDim.InventDimId;
                    extraInventTrans.update();
                    extraInventTrans.updateSumUp();
                }
                inventDimParmAll.setAllInventDim();

                inventUpd_Reservation = InventUpd_Reservation::newParameters(_inventMovement, inventDim, inventDimParmAll, 0, -inventSum.AvailPhysical, false, true, -#SerialControlledQty, true);
                inventUpd_Reservation.updateNow();
                cwQtyNotReserved -= #SerialControlledQty;
                if (cwQtyNotReserved <= 0)
                {
                    break;
                }
            }
        }
        else
        {
            // Try to reserve on existing dimensions - only makes sense if serial number is specified on transaction.
            while select RecId from inventTrans
            order by StatusIssue, InventDimId
            where inventTrans.InventTransOrigin == _inventMovement.inventTransOriginId()
                &&  inventTrans.StatusIssue       == StatusIssue::OnOrder
                &&  inventTrans.StatusReceipt     == StatusReceipt::None
            join inventDim
                where inventDim.InventDimId     == inventTrans.InventDimId
                    &&  inventDim.InventSerialId  != ''
            join AvailPhysical from inventSum
                where inventSum.ItemId              == inventTrans.ItemId
                    &&   inventSum.InventDimId         == inventTrans.InventDimId
                    &&   inventSum.PdsCWAvailPhysical  == #SerialControlledQty
            {
                // we need to increase the remainder on the movement,
                // if we want to reserve more than the original weight
                if (inventSum.AvailPhysical > -_inventMovement.transIdSum().onOrder())
                {
                    extraQty = inventSum.AvailPhysical + _inventMovement.transIdSum().onOrder();
                    _inventMovement.pdsAdjustInventoryQuantity(-extraQty);
                    _inventMovement.pdsUpdateBufferWithAdjustedQuantity();
                    select firstonly forupdate extraInventTrans
                    order by Qty
                    where extraInventTrans.InventTransOrigin    == _inventMovement.inventTransOriginId()
                      &&  extraInventTrans.StatusIssue          == StatusIssue::OnOrder
                      &&  extraInventTrans.StatusReceipt        == StatusReceipt::None
                      &&  extraInventTrans.InventDimId          == _inventMovement.inventDimId()
                      &&  extraInventTrans.Qty                  <= -extraQty;
                    if (!extraInventTrans.RecId)
                    {
                        warning("@SCM:InventCannotFindNewlyCreatedTransaction");
                        throw error(strFmt("@SYS54028",StatusIssue::Picked));   // Cannot find the newly created transaction
                    }
                    // Ensure newly created transaction has same dimensions
                    extraInventTrans.InventDimId = inventDim.InventDimId;
                    extraInventTrans.update();
                    extraInventTrans.updateSumUp();
                }
                inventDimParmAll.setAllInventDim();

                inventUpd_Reservation = InventUpd_Reservation::newParameters(_inventMovement, inventDim, inventDimParmAll, 0, -inventSum.AvailPhysical, false, true, -#SerialControlledQty, true);
                inventUpd_Reservation.updateNow();
                cwQtyNotReserved -= #SerialControlledQty;
                if (cwQtyNotReserved <= 0)
                {
                    break;
                }
            }
        }
        return cwQtyNotReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles initialization and updates, for example, of journals and ledger transactions, that are
    ///    performed during the update.
    /// </summary>
    void run()
    {
        setPrefix(InventTransferMultiShip::description());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightShipNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>ShipNow</c> field value based on the inventory quantity calculated from the inventory transactions.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Not enough transactions in status picked.
    /// </exception>
    protected void setCatchWeightShipNow(InventTransferParmLine _inventTransferParmLine)
    {
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newTransferShip(
            _inventTransferParmLine,
            ledgerVoucher);

        _inventTransferParmLine.QtyShipNow = pdsCatchWeightMovementQtyAdjustment.transferIssueQty(
            InventTransferUpdateType::Shipment,
            _inventTransferParmLine.PdsCWQtyShipNow);

        if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
        {
            warning("@SCM:ItemFullCatchWeightQuantityNotAssigned");
            Info("@SCM:InventOrderPickingGeneralGuide");
            throw error(strFmt("@SYS54028",StatusIssue::Picked));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegNum_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the register number.
    /// </summary>
    /// <param name="_inventTransTable">
    /// A buffer of <c>InventTransferTable</c> table.
    /// </param>
    /// <param name="_inventTransLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    public void setRegNum_IN(InventTransferTable   _inventTransTable,
                             InventTransferLine    _inventTransLine)
    {
        InventTransferLine_IN inventTransferLineIN = _inventTransLine.inventTransferLine_IN();
        inventTransferLineIN.UnitPrice   = 0;
        inventTransferLineIN.NetAmount   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippedNowDimensions</Name>
				<Source><![CDATA[
    private Map shippedNowDimensions(
        InventTransferLine      _inventTransferLine,
        Voucher                 _lastVoucher)
    {
        Map                             resultMap = new Map(Types::String, Types::Container);
        WMSLocation                     wmsLocationReceiptTransitWH;
        boolean                         accountForNonWHSLPControlledTransitLocation = false;

        //if the item is whs enabled we need to determine the wmslocation on the transit warehouse since we will only get the license plate transferred on the transactions if the location is using license plate tracking
        if (WHSInventEnabled::exist(_inventTransferLine.ItemId))
        {
            wmsLocationReceiptTransitWH = _inventTransferLine.defaultWMSLocation(inventTransferTable.InventLocationIdTransit, inventTransferTable, _InventTransferLine.inventDim());

            if (!wmsLocationReceiptTransitWH && inventTransferTable.InventLocationIdTransit && _inventTransferLine.inventDim().LicensePlateId)
            {
                throw error(strFmt("@WAX:WHSMissingDefaultReceiptLocationOnTransitWarehouse", inventTransferTable.InventLocationIdTransit));
            }

            accountForNonWHSLPControlledTransitLocation = !wmsLocationReceiptTransitWH.whsLocationIsLPControlled();
        }

        //handle issues first and then receipts
        this.populateIssueReceiptDimensions(_inventTransferLine, _lastVoucher, resultMap, accountForNonWHSLPControlledTransitLocation, true);
        this.populateIssueReceiptDimensions(_inventTransferLine, _lastVoucher, resultMap, accountForNonWHSLPControlledTransitLocation, false);

        return resultMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferJour_RU</Name>
				<Source><![CDATA[
    protected void updateInventTransferJour_RU()
    {
        WMSBillOfLading wmsBillOfLading;

        super();

        if (inventTransferParmTable.ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU &&
            InventTransferParmUpdate::find(inventTransferParmTable.ParmId).BillOfLading_RU)
        {
            wmsBillOfLading = WMSBillOfLading::constructFromInventTransfer_RU(inventTransferJour, inventTransferParmTable);
            inventTransferJour.BillOfLadingId_RU = wmsBillOfLading.BillOfLadingId;
            inventTransferJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum up the inventory transactions if possible.
    /// </summary>
    protected void sumUpInventoryTransactions()
    {
        InventTransferParmLine inventTransferParmLine;
        InventTransferLine     inventTransferLine;

        super();

        while select InventTransId, InventTransIdTransitFrom, InventTransIdTransitTo from inventTransferLine
        group by InventTransId, InventTransIdTransitFrom, InventTransIdTransitTo
        exists join inventTransferParmLine
            where inventTransferParmLine.ParmId         == inventTransferParmTable.ParmId
                && inventTransferParmLine.TransferId    == inventTransferParmTable.TransferId
                && inventTransferParmLine.InventTransId == inventTransferLine.InventTransId
        {
            InventUpdate::sumUpTransactions(inventTransferLine.InventTransId);
            InventUpdate::sumUpTransactions(inventTransferLine.InventTransIdTransitFrom);
            InventUpdate::sumUpTransactions(inventTransferLine.InventTransIdTransitTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates an <c>InventTransferLine</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    ///    The <c>InventTransferParmLine</c> record that defines the <c>InventTransferLine</c> record to be
    ///    updated.
    /// </param>
    /// <remarks>
    ///    The method should not update the related <c>InventTransferTable</c> record. The record will be
    ///    updated by the caller after all lines are updated.
    /// </remarks>
    protected void updateInventTransferLine(InventTransferParmLine  _inventTransferParmLine)
    {
        InventTransferLine              inventTransferLine;

        InventDimParm                   inventDimParm;
        InventDimParm                   inventDimParmReceipt;

        InventDim                       inventDimLineParm;
        InventDim                       inventDimTo;

        MapEnumerator                   shippedNowDimensions;

        InventMov_TransferFrom          movementFrom;
        InventMov_TransferTransitTo     movementTransitTo;
        InventMov_TransferTransitFrom   movementTransitFrom;
        InventMov_TransferTo            movementTo;

        InventUpd_Financial             inventUpd_Financial_Issue;
        InventUpd_Financial             inventUpd_Financial_Receipt;

        InventUpd_Financial             inventUpd_Financial_Issue_AutoReceive;
        InventUpd_Financial             inventUpd_Financial_Receipt_AutoReceive;

        InventQty                       qtyRemainReceiveTransit;
        Voucher                         lastVoucher;
        CostAmount                      costAmountInventReceiveTransit;
        CostAmount                      costAmountInventReceiveTransitInitial;
        CostAmount                      costAmountInventReceiveTransitRemain;
        InventCostOnhandCache           inventCostOnhandCache;        

        // <GEERU>
        boolean                         countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean                         ruFeature = countryRegion_RU || BrazilParameters::isEnabled();
        CostAmount                      costAmountInventReceiveTransitSecCur;
        CostAmount                      costAmountInventReceiveTransitInitialSecCur;
        CostAmount                      costAmountInventReceiveTransitRemainSecCur;
        // </GEERU>

        boolean                         cwItem = PdsGlobal::pdsIsCWItem(_inventTransferParmLine.ItemId);
        PdsCWInventQty                  cwQtyRemainReceiveTransit;

        // check line

        inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId,true);

        // <GIN>
        if (isCountryRegionIN &&
            inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer &&
            !inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
        {
            InventTransferLine_IN inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

            if (inventTransferLineIN)
            {
                inventTransferLineIN.selectForUpdate(true);
                inventTransferLineIN.InventCostPriceCalculated = _inventTransferParmLine.inventTransferLine().inventSumUnitPrice_IN();
                inventTransferLineIN.update();
            }
        }
        // </GIN>

        if (! inventTransferLine.RecId)
        {
            throw error(strFmt("@SYS78590",_inventTransferParmLine.InventTransId));
        }

        setPrefix(#PreFixField(inventTransferLine,LineNum));

        boolean isTransferOrderShipmentCancellation = inventTransferParmTable.CanceledShipmentJournalRecId != 0;

        // <GEERU>
        if (!ruFeature && !isTransferOrderShipmentCancellation && _inventTransferParmLine.QtyShipNow <= 0)
        // </GEERU>
        {
            throw error("@SYS78529");
        }

        if (cwItem)
        {
            this.pickCatchWeightItem(_inventTransferParmLine);

            if (!(   isTransferOrderShipmentCancellation
                  && _inventTransferParmLine.PdsCWQtyShipNow < 0
                  && _inventTransferParmLine.QtyShipNow != 0))
            {
                this.setCatchWeightShipNow(_inventTransferParmLine);
            }

            inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId, true);
        }

        // init movements
        movementFrom        = this.createInventMovTransferFrom(inventTransferLine);
        movementTransitTo   = this.createInventMovTransferTransitTo(inventTransferLine);
        movementTransitFrom = this.createInventMovTransferTransitFrom(inventTransferLine);
        // <GIN>
        TaxRegistrationNumberRecId_IN vATTIN;
        if (isCountryRegionIN
            && inventTransferLine.inventTransferTable().TransferType_IN == TransferType_IN::StockTransfer)
        {
            movementFrom.parmInventParmID_IN(_inventTransferParmLine.ParmId);
            movementTransitTo.parmInventParmID_IN(_inventTransferParmLine.ParmId);
            vATTIN = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventTransferLine).VATTIN;
        }
        // </GIN>
        // <GEERU>
        if (ruFeature)
        {
            movementFrom.parmStorno_RU(isStorno);
            movementTransitTo.parmStorno_RU(isStorno);
            movementTransitTo.parmForceReturnLotInInventTrans_RU(NoYes::Yes);
            movementTransitFrom.parmStorno_RU(isStorno);
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            mustBeBookedFinancially = movementFrom.mustBeBookedFinancially();
        }
        // </GTE>

        if ((ruFeature || isTransferOrderShipmentCancellation) && _inventTransferParmLine.QtyShipNow == 0)
        {
            throw error("@GLS113812");
        }

        if ((ruFeature || isTransferOrderShipmentCancellation) && _inventTransferParmLine.QtyShipNow < 0)
        {
            if (abs(_inventTransferParmLine.QtyShipNow) > inventTransferLine.QtyShipped)
            {
                throw error(strFmt("@GLS113813", abs(_inventTransferParmLine.QtyShipNow), inventTransferLine.QtyShipped));
            }

            if (inventTransferParmTable.AutoReceiveQty)
            {
                if (abs(_inventTransferParmLine.QtyShipNow) > inventTransferLine.QtyReceived)
                {
                    throw error(strFmt("@GLS113814", abs(_inventTransferParmLine.QtyShipNow), inventTransferLine.QtyReceived));
                }
            }
            else
            {
                if (inventTransferLine.QtyShipped - inventTransferLine.QtyReceived < abs(_inventTransferParmLine.QtyShipNow))
                {
                    throw error(strFmt("@GLS113815", abs(_inventTransferParmLine.QtyShipNow), inventTransferLine.QtyShipped - inventTransferLine.QtyReceived));
                }
            }
        }
        else
        {
            // </GEERU>

            //handle over delivery
            if (    inventTransferLine.QtyRemainShip < _inventTransferParmLine.QtyShipNow
                ||  inventTransferLine.PdsCWQtyRemainShip < _inventTransferParmLine.PdsCWQtyShipNow
                )
            {
                if (
                    (!cwItem || (cwItem && inventTransferLine.PdsCWQtyRemainShip < _inventTransferParmLine.PdsCWQtyShipNow)) &&
                    !InventParameters::find().InventTransferOverDelivery)
                {
                    throw error("@SYS138833");
                }

                this.handleOverdelivery(inventTransferLine,
                                        _inventTransferParmLine,
                                        (_inventTransferParmLine.QtyShipNow - inventTransferLine.QtyRemainShip),
                                        (_inventTransferParmLine.PdsCWQtyShipNow - inventTransferLine.PdsCWQtyRemainShip)
                                        );
            }
            // <GEERU>
        }
        // </GEERU>

        if (inventTransferParmTable.AutoReceiveQty)
        {
            movementTo = this.createInventMovTransferTo(inventTransferLine);
            // <GEERU>
            if (ruFeature)
            {
                movementTo.parmStorno_RU(isStorno);
            }
            // </GEERU>
            _inventTransferParmLine.QtyReceiveNow = _inventTransferParmLine.QtyShipNow;
            _inventTransferParmLine.PdsCWQtyReceiveNow = _inventTransferParmLine.PdsCWQtyShipNow;
        }

        inventDimLineParm  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParm.initFromInventDim(inventDimLineParm);

        //return shipped items partly
        if ((ruFeature || isTransferOrderShipmentCancellation) && _inventTransferParmLine.QtyShipNow < 0)
        {
            movementTransitTo.parmInventParmID(_inventTransferParmLine.ParmId);
            this.updateInventTransferShipRetPartly(_inventTransferParmLine,
                                                      inventTransferLine,
                                                      movementFrom,
                                                      movementTransitTo,
                                                      movementTransitFrom,
                                                      movementTo,
                                                      inventDimLineParm,
                                                      inventDimParm);
        }
        else
        {
            // Physical and financial shipment issue update
            // <GIN>
            if (isCountryRegionIN && !inventTransferTable.StockTransferCostPriceHandlingImprovement_IN && inventTransferLine.checkForUnitID_IN() )
            {
                inventUpd_Financial_Issue = InventUpd_Financial::newInventTransferLineShip(movementFrom,
                                                                                 ledgerVoucher,
                                                                                 _inventTransferParmLine,
                                                                                 0,
                                                                                 inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyShipNow),
                                                                                 inventDimLineParm,
                                                                                 inventDimParm,
                                                                                 _inventTransferParmLine.PdsCWQtyShipNow
                                                                                 );
            }
            else
            {
                // </GIN>

                inventUpd_Financial_Issue = InventUpd_Financial::newInventTransferLineShip(movementFrom,
                                                                                 ledgerVoucher,
                                                                                 _inventTransferParmLine,
                                                                                 0,
                                                                                 _inventTransferParmLine.QtyShipNow,
                                                                                 inventDimLineParm,
                                                                                 inventDimParm,
                                                                                 _inventTransferParmLine.PdsCWQtyShipNow
                                                                                 );
                // <GIN>
            }
            // </GIN>
            inventUpd_Financial_Issue.parmSkipInventTransSumUp(true);
            inventUpd_Financial_Issue.updateNow();
            inventCostOnhandCache = inventUpd_Financial_Issue.parmInventCostOnhandCache();

            costAmountInventReceiveTransitInitial = inventUpd_Financial_Issue.updCostAmountInvent()
                                                // <GTE>
                                                - this.calculateInventoryTaxAmountGTE(_inventTransferParmLine, TaxAccountingPostingProfileDistributionSide::Credit)
                                                // </GTE>
                                                ;
            costAmountInventReceiveTransitRemain  = costAmountInventReceiveTransitInitial;
            // <GEERU>
            if (countryRegion_RU)
            {
                costAmountInventReceiveTransitInitialSecCur = inventUpd_Financial_Issue.updCostAmountInventSecCur_RU();
                costAmountInventReceiveTransitRemainSecCur  = costAmountInventReceiveTransitInitialSecCur;
            }
            // </GEERU>

            qtyRemainReceiveTransit = _inventTransferParmLine.QtyShipNow;
            cwQtyRemainReceiveTransit = _inventTransferParmLine.PdsCWQtyShipNow;
            lastVoucher = ledgerVoucher.lastVoucher();
            inventDimParmReceipt.data(inventDimParm);
            inventDimParmReceipt.InventSiteIdFlag       = NoYes::No;
            inventDimParmReceipt.InventLocationIdFlag   = NoYes::No;

            //loop all the issues and create matching receipts. Issues are grouped based on the dimensions that must be transferred.
            shippedNowDimensions = this.shippedNowDimensions(inventTransferLine, lastVoucher).getEnumerator();
            while (shippedNowDimensions.moveNext())
            {
                InventDim inventDimTransitReceipt = movementTransitTo.inventDimMerged(InventDim::find(shippedNowDimensions.currentKey()));
                InventQty qtyReceiveTransit;
                PdsCWInventQty cwQtyReceiveTransit;

                [qtyReceiveTransit, cwQtyReceiveTransit] = shippedNowDimensions.currentValue();

                this.createEstimatedTransitTransactions(movementTransitTo, movementTransitFrom, inventDimTransitReceipt, qtyReceiveTransit, cwQtyReceiveTransit);
            }

            InventUpd_Reservation::updateReserveRefTransIdOnOrder(movementTransitFrom, true);

            shippedNowDimensions.reset();
            while (shippedNowDimensions.moveNext())
            {
                InventDim inventDimTransitReceipt = movementTransitTo.inventDimMerged(InventDim::find(shippedNowDimensions.currentKey()));
                InventQty qtyReceiveTransit;
                PdsCWInventQty cwQtyReceiveTransit;

                [qtyReceiveTransit, cwQtyReceiveTransit] = shippedNowDimensions.currentValue();

                inventDimParmReceipt.initFromInventDim(inventDimTransitReceipt);

                if (   (!cwItem && qtyRemainReceiveTransit == qtyReceiveTransit)
                    || ( cwItem && cwQtyRemainReceiveTransit == cwQtyReceiveTransit))
                {
                    // To avoid getting hit by rounding errors
                    costAmountInventReceiveTransit = costAmountInventReceiveTransitRemain;
                    // <GEERU>
                    costAmountInventReceiveTransitSecCur = costAmountInventReceiveTransitRemainSecCur;
                    // </GEERU>
                }
                else
                {
                    // Initial check ensures that _inventTransferParmLine.QtyShipNow cannot be 0 (zero)
                    // <GIN>
                    if (isCountryRegionIN && !inventTransferTable.StockTransferCostPriceHandlingImprovement_IN && inventTransferLine.checkForUnitID_IN())
                    {
                        costAmountInventReceiveTransit = CurrencyExchangeHelper::amount(
                            costAmountInventReceiveTransitInitial * qtyReceiveTransit /
                            inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyShipNow));
                    }
                    else
                    {
                        // </GIN>
                        costAmountInventReceiveTransit = CurrencyExchangeHelper::amount(costAmountInventReceiveTransitInitial * qtyReceiveTransit / _inventTransferParmLine.QtyShipNow);
                        // <GIN>
                    }
                    // </GIN>

                    // <GEERU>
                    costAmountInventReceiveTransitSecCur = CurrencyExchangeHelper::amount(costAmountInventReceiveTransitInitialSecCur * qtyReceiveTransit / _inventTransferParmLine.QtyShipNow);
                    // </GEERU>
                }

                costAmountInventReceiveTransitRemain -= costAmountInventReceiveTransit;
                // <GEERU>
                costAmountInventReceiveTransitRemainSecCur -= costAmountInventReceiveTransitSecCur;
                // </GEERU>

                if (!isTransferOrderShipmentCancellation && (qtyReceiveTransit > 0) && isShipmentAmountAllocationFlightEnabled)
                {
                    if (sign(qtyReceiveTransit) * sign(-costAmountInventReceiveTransitRemain) < 0 ||
                        sign(qtyReceiveTransit) * sign(-costAmountInventReceiveTransit) < 0)
                    {
                        // set cost amount to 0 as the shipment cost amount has been totally allocated
                        costAmountInventReceiveTransit = 0;
                    }

                    if (sign(qtyReceiveTransit) * sign(-costAmountInventReceiveTransitRemainSecCur) < 0 ||
                        sign(qtyReceiveTransit) * sign(-costAmountInventReceiveTransitSecCur) < 0)
                    {
                        // set cost amount to 0 as the shipment cost amount has been totally allocated
                        costAmountInventReceiveTransitSecCur = 0;
                    }
                }

                // Physical and financial shipment receipt update based on what is sold
                inventUpd_Financial_Receipt = InventUpd_Financial::newInventTransferLineShip(
                    movementTransitTo,
                    ledgerVoucher,
                    _inventTransferParmLine,
                    -costAmountInventReceiveTransit,
                    qtyReceiveTransit,
                    inventDimTransitReceipt,
                    inventDimParmReceipt
                    ,cwQtyReceiveTransit
                    // <GEERU>
                    , -costAmountInventReceiveTransitSecCur
                    // </GEERU>
                    );
                inventUpd_Financial_Receipt.parmInventCostOnhandCache(inventCostOnhandCache);
                inventUpd_Financial_Receipt.parmSkipInventTransSumUp(true);
                inventUpd_Financial_Receipt.updateNow();
                inventCostOnhandCache = inventUpd_Financial_Receipt.parmInventCostOnhandCache();

                inventTransferLine.QtyShipped += inventUpd_Financial_Receipt.updFinancial();
                qtyRemainReceiveTransit -= inventUpd_Financial_Receipt.updFinancial();
                inventTransferLine.PdsCWQtyShipped += inventUpd_Financial_Receipt.pdsCWUpdFinancial();
                cwQtyRemainReceiveTransit -= inventUpd_Financial_Receipt.pdsCWUpdFinancial();

                if (inventTransferParmTable.AutoReceiveQty)
                {
                    // Physical and financial receive issue update
                    inventUpd_Financial_Issue_AutoReceive = InventUpd_Financial::newInventTransferLineReceive(movementTransitFrom,
                                                                                                              ledgerVoucher,
                                                                                                              0,
                                                                                                              qtyReceiveTransit,
                                                                                                              inventDimTransitReceipt,
                                                                                                              inventDimParmReceipt
                                                                                                              ,cwQtyReceiveTransit
                                                                                                              );
                    inventUpd_Financial_Issue_AutoReceive.parmInventCostOnhandCache(inventCostOnhandCache);
                    this.updateInventUpdFinancialIssueAutoReceive(inventUpd_Financial_Issue_AutoReceive);
                    inventCostOnhandCache = inventUpd_Financial_Issue_AutoReceive.parmInventCostOnhandCache();

                    // Physical and financial receive receipt update
                    InventUpdFinancialReceiptAutoReceiveCreateParameters parameters = InventUpdFinancialReceiptAutoReceiveCreateParameters::construct();
                    parameters.movementTo = movementTo;
                    parameters.inventDimTo = movementTo.inventDimMerged(inventDimTransitReceipt);
                    parameters.inventUpd_Financial_Issue_AutoReceive = inventUpd_Financial_Issue_AutoReceive;
                    parameters.qtyReceiveTransit = qtyReceiveTransit;
                    parameters.cwQtyReceiveTransit = cwQtyReceiveTransit;
                    parameters.inventDimParmReceipt = inventDimParmReceipt;
                    parameters.inventTransferParmLine = _inventTransferParmLine;

                    inventUpd_Financial_Receipt_AutoReceive = this.createInventUpdFinancialReceiptAutoReceive(parameters);
                    inventUpd_Financial_Receipt_AutoReceive.parmInventCostOnhandCache(inventCostOnhandCache);
                    this.updateInventUpdFinancialReceiptAutoReceive(inventUpd_Financial_Receipt_AutoReceive);
                    inventCostOnhandCache = inventUpd_Financial_Receipt_AutoReceive.parmInventCostOnhandCache();

                    inventTransferLine.QtyReceived += inventUpd_Financial_Receipt_AutoReceive.updFinancial();
                    inventTransferLine.PdsCWQtyReceived += inventUpd_Financial_Receipt_AutoReceive.pdsCWUpdFinancial();
                }

                if (   (!cwItem && !qtyRemainReceiveTransit)
                    || ( cwItem && !cwQtyRemainReceiveTransit))
                {
                    break;
                }
            }
            // <GEERU>
        }
        // </GEERU>

        //
        // If there is still something remaining to be received we must fail,
        // since it means that less than what was shipped at From warehouse is received at the Transit warehouse.
        //
        if (   (!cwItem && qtyRemainReceiveTransit)
            || ( cwItem && cwQtyRemainReceiveTransit))
        {
            throw error("@SYS18447");
        }

        // <GIN>
        if (isCountryRegionIN)
        {
            if (inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
            {
                if (inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
                {
                    this.stockTransferPostTax(inventTransferLine, 
                        _inventTransferParmLine, 
                        movementFrom.defaultDimension());
			
                    if (inventTransferParmTable.AutoReceiveQty)
                    {
                        InventTransferUpdReceive inventUpdReceive = InventTransferUpdReceive::construct();
                        inventUpdReceive.stockTransferPostTax(
                            inventTransferLine, 
                            _inventTransferParmLine, 
                            ledgerVoucher, movementTo.defaultDimension());
                    }

                }
                else
                {
                    real itemUnitPrice;
                    InventQty convertedShipNowQty;

                    if (inventTransferLine.checkForUnitID_IN())
                    {
                        convertedShipNowQty = inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyShipNow);
                        movementFrom.parmInventParmID_IN(_inventTransferParmLine.ParmId);
                        inventUpd_Financial_Issue = InventUpd_Financial::newInventTransferLineShip(movementFrom,
                                                                            ledgerVoucher,
                                                                            _inventTransferParmLine,
                                                                            0,
                                                                            convertedShipNowQty,
                                                                            null,
                                                                            null);
                    }

                    InventTransferLine_IN inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
                    this.addVoucherTrans_IN(inventTransferLine, _inventTransferParmLine);

                    if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        if(vatRetAmtInq && !vATTIN)
                        {
                            checkFailed("@GLS60813");
                            throw error("@SYS21533");
                        }
                        inventTransLineTax.setVoucherId(voucherId);
                        inventTransLineTax.parmRetentionAmount(retentionAmt);
                        inventTransLineTax.parmRetentionAcc(retentionAcc);
                        inventTransLineTax.parmRetentionTaxAmount(vatRetAmtInq);
                        inventTransLineTax.parmShipReceive(true);
                        inventTransLineTax.parmUnitPrice(unitPrice);
                        inventTransLineTax.inventPost(ledgerVoucher, true, _inventTransferParmLine, voucherId);
                    }
                    if (inventTransferLineIN.UnitPrice == 0)
                    {
                        itemUnitPrice = decRound(inventTransferLineIN.NetAmount / inventTransferLine.QtyTransfer, #decimalRound);
                    }
                    else
                    {
                        itemUnitPrice = inventTransferLineIN.UnitPrice;
                    }

                    TaxTrans_IN taxTransCopy;
                    update_recordset taxTransCopy
                        setting
                            TransactionAmount = _inventTransferParmLine.QtyShipNow * itemUnitPrice,
                            Quantity          = _inventTransferParmLine.QtyShipNow
                        where taxTransCopy.SourceTableId == tableNum(InventTransferLine) 
                            && taxTransCopy.SourceRecId  == inventTransferLine.RecId;

                    if (inventTransferLine.checkForUnitID_IN())
                    {
                        movementTransitTo.parmInventParmID_IN(_inventTransferParmLine.ParmId);
                        inventUpd_Financial_Receipt = InventUpd_Financial::newInventTransferLineShip(
                            movementTransitTo,
                            ledgerVoucher,
                            _inventTransferParmLine,
                            -inventUpd_Financial_Issue.updCostAmountInvent(),
                            convertedShipNowQty,
                            null,
                            null);
                    }

                    if (inventTransferParmTable.AutoReceiveQty)
                    {
                        InventTransferUpdReceive inventUpdReceive = InventTransferUpdReceive::construct();
                        inventTransLineTax.setTransferStatus(false);
                        inventUpdReceive.addVoucherTrans_IN(inventTransferLine, _inventTransferParmLine, ledgerVoucher);
                        inventTransLineTax.setVoucherId(voucherId);
                        inventTransLineTax.parmShipReceive(true);
                        inventTransLineTax.inventPost(ledgerVoucher, false, _inventTransferParmLine, voucherId);

                        TaxTrans_IN taxTransLoc;
                        select sum(LoadOnInventoryAmount) from taxTransLoc
                            where taxTransLoc.SourceRecId == inventTransferLine.RecId;

                        inventUpd_Financial_Receipt_AutoReceive = InventUpd_Financial::newInventTransferLineReceive(
                            movementTo,
                            ledgerVoucher,
                            inventUpd_Financial_Issue_AutoReceive.updCostAmountInvent(itemUnitPrice * _inventTransferParmLine.QtyReceiveNow) + abs(taxTransLoc.LoadOnInventoryAmount),
                            _inventTransferParmLine.QtyReceiveNow,
                            null,
                            null);
                    }
                }
            }
            else
            {
                this.setRegNum_IN(inventTransferTable, inventTransferLine);
            }
        }
        // </GIN>
        // Update transfer line
        inventTransferLine.QtyShipNow = 0;
        inventTransferLine.PdsCWQtyShipNow = 0;

        InventTransferLineUpdateParameters parameters =  this.setupInventTransferLineUpdateParameters_PostProcessing(inventTransferLine);

        inventTransferLine.update(parameters, NoYes::No);
        // no need to update InventTransferTable record - it is updated by the caller after all lines are updated

        // update jour line
        this.createInventTransferJourLine(_inventTransferParmLine, inventTransferLine, inventDimLineParm, inventDimParm);

        isSomeThingPosted = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimatedTransitTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates estimated transit transactions.
    /// </summary>
    /// <param name = "_movementTransitTo">The destination movement.</param>
    /// <param name = "_movementTransitFrom">The source movement.</param>
    /// <param name = "_inventDimTransitReceipt">The dimension in transit.</param>
    /// <param name = "_qtyReceiveTransit">The quantity.</param>
    /// <param name = "_cwQtyReceiveTransit">The catch weight quantity.</param>
    protected void createEstimatedTransitTransactions(
        InventMov_TransferTransitTo     _movementTransitTo,
        InventMov_TransferTransitFrom   _movementTransitFrom,
        InventDim						_inventDimTransitReceipt,
        InventQty						_qtyReceiveTransit,
        PdsCWInventQty					_cwQtyReceiveTransit)
    {
        // create estimated transactions for the transit receipt and issue
        InventUpd_Estimated estimatedTransitTo = InventUpd_Estimated::newInventMovement(_movementTransitTo);
        estimatedTransitTo.parmPreEstimated(0);
        estimatedTransitTo.parmEstimated(_qtyReceiveTransit);
        estimatedTransitTo.parmCWPreEstimated(0);
        estimatedTransitTo.parmPdsCWEstimated(_cwQtyReceiveTransit);
        estimatedTransitTo.parmSkipUpdateDimensionFieldChange(true);
        estimatedTransitTo.parmInventDim(_inventDimTransitReceipt);
        estimatedTransitTo.parmUseInventDimForNewTransactions(true);
        estimatedTransitTo.parmSkipInventTransSumUp(true);
        estimatedTransitTo.updateNow();

        InventUpd_Estimated estimatedTransitFrom = InventUpd_Estimated::newInventMovement(_movementTransitFrom);
        estimatedTransitFrom.parmPreEstimated(0);
        estimatedTransitFrom.parmEstimated(-_qtyReceiveTransit);
        estimatedTransitFrom.parmCWPreEstimated(0);
        estimatedTransitFrom.parmPdsCWEstimated(-_cwQtyReceiveTransit);
        estimatedTransitFrom.parmInventDim(_inventDimTransitReceipt);
        estimatedTransitFrom.parmUseInventDimForNewTransactions(true);
        estimatedTransitFrom.parmSkipInventTransSumUp(true);
        estimatedTransitFrom.updateNow();

        InventTransOrigin::updateMarking(_movementTransitTo.inventTransOriginId(),   _movementTransitFrom.inventTransOriginId(),  _qtyReceiveTransit,  '', SortOrder::Descending, false ,null, null, _cwQtyReceiveTransit);
        InventTransOrigin::updateMarking(_movementTransitFrom.inventTransOriginId(), _movementTransitTo.inventTransOriginId(),   -_qtyReceiveTransit,  '', SortOrder::Descending, false, null, null, -_cwQtyReceiveTransit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventUpdFinancialReceiptAutoReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventUpd_Financial</c> instance that is used for the Physical and financial receive receipt update of the transfer line.
    /// </summary>
    /// <param name = "_parameters">Parameters used to create the <c>InventUpd_Financial</c> instance.</param>
    /// <returns>The created <c>InventUpd_Financial</c> instance.</returns>
    protected InventUpd_Financial createInventUpdFinancialReceiptAutoReceive(InventUpdFinancialReceiptAutoReceiveCreateParameters _parameters)
    {
        return InventUpd_Financial::newInventTransferLineReceive(_parameters.movementTo,
                                                                ledgerVoucher,
                                                                -_parameters.inventUpd_Financial_Issue_AutoReceive.updCostAmountInvent(),
                                                                _parameters.qtyReceiveTransit,
                                                                _parameters.inventDimTo,
                                                                _parameters.inventDimParmReceipt
                                                                ,_parameters.cwQtyReceiveTransit
                                                                // <GEERU>
                                                                , -_parameters.inventUpd_Financial_Issue_AutoReceive.updCostAmountInventSecCur_RU()
                                                                // </GEERU>
                                                                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventMovTransferFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance that represents inventory transfer movements for the <c>TransferOrderFrom</c> inventory movement subtype.
    /// </summary>
    /// <param name = "_inventTransferLine">An inventory transfer line.</param>
    /// <returns>An instance that represents necessary movements for an inventory transfer.</returns>
    protected InventMov_TransferFrom createInventMovTransferFrom(InventTransferLine _inventTransferLine)
    {
        return InventMov_TransferFrom::newFromInventTransferLine(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventMovTransferTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance that represents inventory transfer movements for the <c>TransferOrderTo</c> inventory movement subtype.
    /// </summary>
    /// <param name = "_inventTransferLine">An inventory transfer line.</param>
    /// <returns>An instance that represents necessary movements for an inventory transfer.</returns>
    protected InventMov_TransferTo createInventMovTransferTo(InventTransferLine _inventTransferLine)
    {
        return InventMov_TransferTo::newFromInventTransferLine(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventMovTransferTransitFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance that represents inventory transfer movements for the <c>TransferOrderTransitFrom</c> inventory movement subtype.
    /// </summary>
    /// <param name = "_inventTransferLine">An inventory transfer line.</param>
    /// <returns>An instance that represents necessary movements for an inventory transfer.</returns>
    protected InventMov_TransferTransitFrom createInventMovTransferTransitFrom(InventTransferLine _inventTransferLine)
    {
        return InventMov_TransferTransitFrom::newFromInventTransferLine(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventMovTransferTransitTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance that represents inventory transfer movements for the <c>TransferOrderTransitTo</c> inventory movement subtype.
    /// </summary>
    /// <param name = "_inventTransferLine">An inventory transfer line.</param>
    /// <returns>An instance that represents necessary movements for an inventory transfer.</returns>
    protected InventMov_TransferTransitTo createInventMovTransferTransitTo(InventTransferLine _inventTransferLine)
    {
        return InventMov_TransferTransitTo::newFromInventTransferLine(_inventTransferLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventUpdFinancialIssueAutoReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transaction.
    /// </summary>
    /// <param name = "_inventUpd_Financial_Issue_AutoReceive">An instance of the <c>InventUpd_Financial</c>.</param>
    protected void updateInventUpdFinancialIssueAutoReceive(InventUpd_Financial _inventUpd_Financial_Issue_AutoReceive)
    {
        _inventUpd_Financial_Issue_AutoReceive.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventUpdFinancialReceiptAutoReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Physical and financial receive receipt of the transfer line.
    /// </summary>
    /// <param name = "_inventUpd_Financial_Receipt_AutoReceive">An instance of the <c>InventUpd_Financial</c>.</param>
    protected void updateInventUpdFinancialReceiptAutoReceive(InventUpd_Financial _inventUpd_Financial_Receipt_AutoReceive)
    {
        _inventUpd_Financial_Receipt_AutoReceive.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferShipRetPartly_RU</Name>
				<Source><![CDATA[
    private void updateInventTransferShipRetPartly_RU(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventMovement          _movementFrom,
        InventMovement          _movementTransitTo,
        InventMovement          _movementTransitFrom,
        InventMovement          _movementTo,
        InventDim               _inventDimFrom,
        InventDimParm           _inventDimParmFrom)
    {
        this.updateInventTransferShipRetPartly(
            _inventTransferParmLine,
            _inventTransferLine,
            _movementFrom,
            _movementTransitTo,
            _movementTransitFrom,
            _movementTo,
            _inventDimFrom,
            _inventDimParmFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferShipIssueRet</Name>
				<Source><![CDATA[
    protected void updateTransferShipIssueRet(
		MapEnumerator			_mapEnumerator,
		InventMovement			_movementFrom,
		InventTransferParmLine	_inventTransferParmLine)
    {
        InventDim           inventDimReceipt;
        InventDim           inventDimIssue;
        InventDimParm       inventDimParmIssue;
        InventUpd_Financial inventUpd_Financial_Issue;

        inventDimReceipt = _mapEnumerator.currentKey();
        inventDimIssue   = _movementFrom.inventDimMerged(inventDimReceipt);

        inventDimParmIssue.initFromInventDim(inventDimIssue);

        inventUpd_Financial_Issue = InventUpd_Financial::newInventTransferLineShip(_movementFrom,
                                                                                    ledgerVoucher,
                                                                                    _inventTransferParmLine,
                                                                                    0,
                                                                                    conPeek(_mapEnumerator.currentValue(), InventQtyConPos),
                                                                                    inventDimIssue,
                                                                                    inventDimParmIssue,
                                                                                    conPeek(_mapEnumerator.currentValue(), PdsCWQtyConPos));
            
        inventUpd_Financial_Issue.parmTransferOrderVoucherMatched(inventTransferParmTable.VoucherShipmentId);

        inventUpd_Financial_Issue.updateNow();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferShipRetPartly</Name>
				<Source><![CDATA[
    private void updateInventTransferShipRetPartly(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventMovement          _movementFrom,
        InventMovement          _movementTransitTo,
        InventMovement          _movementTransitFrom,
        InventMovement          _movementTo,
        InventDim               _inventDimFrom,
        InventDimParm           _inventDimParmFrom)
    {
        InventUpd_Reservation   reservation;
        InventUpd_Estimated     estimatedTransitFrom;

        InventTrans             inventTrans;

        InventDim               inventDimTransitReceipt;
        InventDim               inventDimReceipt;

        InventDimParm           inventDimParmReceipt;
        InventDimParm           inventDimParmTransitReceipt;

        InventQty               qtyReceiveTransit;
        InventQty               qtyRemainReceiveTransit;
        InventQty               qtyReceivedOnDimId;

        PdsCWInventQty          cwQtyReceiveTransit;
        PdsCWInventQty          cwQtyRemainReceiveTransit;
        PdsCWInventQty          cwQtyReceivedOnDimId;

        container               remainQtyCon;
        container               receivedOnDimIdQtyCon;

        Map                     inventDimReceiptMap = new Map(Types::Record, Types::Container);
        Map                     inventDimReturnMap;
        MapEnumerator           mapEnumerator;
        InventTransOriginId     inventTransOriginIdTransitFrom;

        if (inventTransferParmTable.AutoReceiveQty)
        {
            inventDimReturnMap = Map::create(this.updateInventTransferReceiveRetPartly_RU(_inventTransferParmLine,
                                                                                          _inventTransferLine,
                                                                                          _movementTransitFrom,
                                                                                          _movementTo,
                                                                                          _inventDimFrom,
                                                                                          _inventTransferParmLine.QtyShipNow,
                                                                                          _inventTransferParmLine.PdsCWQtyShipNow));
        }

        if (inventDimReturnMap && !inventDimReturnMap.empty())
        {
            mapEnumerator = inventDimReturnMap.getEnumerator();
            mapEnumerator.moveNext();

            qtyRemainReceiveTransit   = conPeek(mapEnumerator.currentValue(), InventQtyConPos);
            cwQtyRemainReceiveTransit = conPeek(mapEnumerator.currentValue(), PdsCWQtyConPos);
            inventDimTransitReceipt = mapEnumerator.currentKey();
        }
        else
        {
            qtyRemainReceiveTransit = _inventTransferParmLine.QtyShipNow;
            cwQtyRemainReceiveTransit = _inventTransferParmLine.PdsCWQtyShipNow;
            inventDimTransitReceipt = _movementTransitTo.inventDimMerged(_inventDimFrom);
        }

        inventDimParmTransitReceipt.initFromInventDim(inventDimTransitReceipt);

        do
        {
            //select transit receipts for return
            while select sum(Qty), sum(PdsCWQty), InventDimId from inventTrans
                group by InventDimId desc //Group opposite of what parmlines are, to avoid selecting already updated receipts
                where inventTrans.InventTransOrigin     == InventTransOriginTransferTransitTo::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                                                       _inventTransferLine.TransferId,
                                                                                                                       _inventTransferLine.LineNum)
                  &&  inventTrans.StatusReceipt         == StatusReceipt::Purchased
                  &&  inventTrans.StatusIssue           == StatusIssue::None
                  &&  inventTrans.InvoiceReturned       == NoYes::No
               #inventDimJoin(inventTrans.inventDimId, inventDimReceipt, inventDimTransitReceipt, inventDimParmTransitReceipt)
            {
                inventDimReceipt = inventTrans.inventDim();
                inventDimParmReceipt.initFromInventDim(inventDimReceipt);

                inventTransOriginIdTransitFrom = InventTransOriginTransferTransitFrom::findInventTransOriginId(_inventTransferLine.DataAreaId,
                                                                                                               _inventTransferLine.TransferId,
                                                                                                               _inventTransferLine.LineNum);

                //define received qty on current inventDimId
                if (_inventTransferLine.QtyReceived)
                {
                    receivedOnDimIdQtyCon = this.calcQtyReceivedInventDim_RU(inventTransOriginIdTransitFrom, inventTrans.InventDimId);
                    qtyReceivedOnDimId = conPeek(receivedOnDimIdQtyCon, InventQtyConPos);
                    cwQtyReceivedOnDimId = conPeek(receivedOnDimIdQtyCon, PdsCWQtyConPos);
                }

                qtyReceiveTransit = -1 * min(abs(qtyRemainReceiveTransit), inventTrans.Qty - abs(qtyReceivedOnDimId));
                cwQtyReceiveTransit = -1 * min(abs(cwQtyRemainReceiveTransit), inventTrans.PdsCWQty - abs(cwQtyReceivedOnDimId));

                //unreserve items on transit location before return update (to make items onhand)
                reservation = InventUpd_Reservation::newParameters(_movementTransitFrom,
                                                                   inventDimReceipt,
                                                                   inventDimParmReceipt,
                                                                   0,
                                                                   -qtyReceiveTransit,
                                                                   false,
                                                                   false,
                                                                   -cwQtyReceiveTransit,
                                                                   true);

                _movementTransitFrom.parmInventParmID(_inventTransferParmLine.ParmId);
                reservation.parmReserveLessPhysicalFirst_RU(true);
                reservation.parmUpdateMarking_RU(true);

                using (var context = InventTransferStornoContext_RU::constructFromVoucherPhysical(inventTransferParmTable.VoucherShipmentId))
                {
                    reservation.updateNow();
                }

                // delete estimated transaction for the transit issue, created during unreservation
                estimatedTransitFrom = InventUpd_Estimated::newInventMovement(_movementTransitFrom);
                estimatedTransitFrom.parmPreEstimated(qtyReceiveTransit);
                estimatedTransitFrom.parmCWPreEstimated(cwQtyReceiveTransit);
                estimatedTransitFrom.parmEstimated(-qtyReceiveTransit);
                estimatedTransitFrom.parmPdsCWEstimated(-cwQtyReceiveTransit);
                estimatedTransitFrom.updateNow();

                //update return receipt special
                remainQtyCon = this.updateReturnIssue_RU(_inventTransferParmLine,
                                                         _inventTransferLine,
                                                         inventDimReceipt,
                                                         inventDimParmReceipt,
                                                         qtyReceiveTransit,
                                                         cwQtyReceiveTransit,
                                                         inventTransOriginIdTransitFrom,
                                                         _movementTransitTo,
                                                         true);

                qtyRemainReceiveTransit   += conPeek(remainQtyCon, InventQtyConPos);
                cwQtyRemainReceiveTransit += conPeek(remainQtyCon, PdsCWQtyConPos);

                inventDimReceiptMap.insert(inventDimReceipt, [qtyReceiveTransit, cwQtyReceiveTransit]);

                if (!qtyRemainReceiveTransit)
                {
                    break;
                }
            }

            if (mapEnumerator && mapEnumerator.moveNext())
            {
                qtyRemainReceiveTransit   = conPeek(mapEnumerator.currentValue(), InventQtyConPos);
                cwQtyRemainReceiveTransit = conPeek(mapEnumerator.currentValue(), PdsCWQtyConPos);
                inventDimTransitReceipt = mapEnumerator.currentKey();
                inventDimParmTransitReceipt.initFromInventDim(inventDimTransitReceipt);
            }
            else
            {
                break;
            }
        }
        while (true);

        if (qtyRemainReceiveTransit)
        {
            throw error("@GLS113808");
        }

        mapEnumerator = inventDimReceiptMap.getEnumerator();

        //return issues sequentially and make reservation by chain
        _movementFrom.returnedSpecialCheckUpdate_RU(UnknownNoYes::Yes);
        _movementFrom.parmInventParmID(_inventTransferParmLine.ParmId);
        while (mapEnumerator.moveNext())
        {
            this.updateTransferShipIssueRet(mapEnumerator, _movementFrom, _inventTransferParmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ok = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled())
        {
            ok = this.checkLines_RU() && ok;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventTransferUpdShip construct()
    {
        InventTransferUpdShip       inventTransferUpdShip = new InventTransferUpdShip();

        return inventTransferUpdShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an instance of the <c>InventTransferUpdShip</c> class by using the <paramref
    ///    name="_inventTransferParmTable" /> passed in as a parameter.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    An <c>InventTransferParmTable</c> table that the object should hold a reference to.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventTransferUpdReceive</c> class by using the <paramref
    ///    name="_inventTransferParmTable" /> assigned.
    /// </returns>
    static InventTransferUpdShip newParmBuffer(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferUpdShip       inventTransferUpdShip;

        _inventTransferParmTable.skipTTSCheck(true);
        _inventTransferParmTable.ParmBuffer::initParmId();
        _inventTransferParmTable.write();

        inventTransferUpdShip = InventTransferUpdShip::construct();
        inventTransferUpdShip.parmParmBuffer(_inventTransferParmTable);

        return inventTransferUpdShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransitReceiptDimQty</Name>
				<Source><![CDATA[
    private void insertTransitReceiptDimQty(
        Map         _resultMap,
        InventDimId _inventDimTransitReceiptId,
        InventTrans _inventTrans)
    {
        PdsCWInventQty                  dimCWQty;
        InventQty                       dimQty;

        if (_resultMap.exists(_inventDimTransitReceiptId))
        {
            [dimQty, dimCWQty] = _resultMap.lookup(_inventDimTransitReceiptId);
        }
        else
        {
            dimQty = 0;
            dimCWQty = 0;
        }

        dimQty -= _inventTrans.Qty;
        dimCWQty -= _inventTrans.PdsCWQty;

        if (dimQty      == 0
        &&  dimCWQty    == 0)
        {
            if (_resultMap.exists(_inventDimTransitReceiptId))
            {
                _resultMap.remove(_inventDimTransitReceiptId);
            }
        }
        else
        {
            _resultMap.insert(_inventDimTransitReceiptId, [dimQty, dimCWQty]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPopulatingIssueReceiptDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to find the total processed inventory transaction quantity and the dimensions the quantity was processed on.
    /// </summary>
    /// <param name = "_inventTransId">Source document line lot Id to find processed quantity for.</param>
    /// <param name = "_statusReceipt">Status receipt filter to limit selected inventory transactions.</param>
    /// <param name = "_statusIssue">Status issue filter to limit selected inventory transactions.</param>
    /// <param name = "_lastVoucher">Ledger voucher to filter inventory transactions to.</param>
    /// <param name = "_inventDimGroupByFields">An <c>InventDimParm</c> record with flags for inventory dimensions to group on.</param>
    /// <returns>The created <c>Query</c> object.</returns>
    protected Query buildQueryForPopulatingIssueReceiptDimensions(
                                                        InventTransId   _inventTransId,
                                                        StatusReceipt   _statusReceipt,
                                                        StatusIssue     _statusIssue,
                                                        Voucher         _lastVoucher,
                                                        InventDimParm   _inventDimGroupByFields)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, TableId));
        qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, InventTransId)).value(queryValue(_inventTransId));

        QueryBuildDataSource qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.relations(true);
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, PdsCWQty), SelectionField::Sum);
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(_statusIssue));
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusReceipt)).value(queryValue(_statusReceipt));
        qbdsInventTrans.addRange(fieldNum(InventTrans, Voucher)).value(queryValue(_lastVoucher));

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        InventDim::queryGroupByInventDimParm(qbdsInventDim, _inventDimGroupByFields);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateIssueReceiptDimensions</Name>
				<Source><![CDATA[
    private void populateIssueReceiptDimensions(
        InventTransferLine  _inventTransferLine,
        Voucher             _lastVoucher,
        Map                 _resultMap,
        boolean             _accountForNonWHSLPControlledTransitLocation,
        boolean             _findIssues)
    {
        StatusIssue     statusIssue;
        StatusReceipt   statusReceipt;
        InventTransId   inventTransId;

        if (_findIssues)
        {
            statusIssue     = statusIssue::Sold;
            statusReceipt   = statusReceipt::None;
            inventTransId   = _inventTransferLine.InventTransId;
        }
        else
        {
            statusReceipt   = StatusReceipt::Purchased;
            statusissue     = statusIssue::None;
            inventTransId   = _inventTransferLine.InventTransIdTransitTo;
        }

        #InventDimDevelop
        
        InventDimParm inventDimParmGroupBy = InventDimParm::allInventDim();
        inventDimParmGroupBy.clearNonTransferTransitReceiptMergeable();
        inventDimParmGroupBy.InventProfileIdFlag_RU = NoYes::Yes;

        if (_accountForNonWHSLPControlledTransitLocation)
        {
            inventDimParmGroupBy.LicensePlateFlag = NoYes::No;
        }

        Query query = this.buildQueryForPopulatingIssueReceiptDimensions(inventTransId, statusReceipt, statusIssue, _lastVoucher, inventDimParmGroupBy);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

            if (inventTrans.Qty != 0 || inventTrans.PdsCWQty != 0)
            {
                InventDim inventDim = InventDim::findOrCreate(queryRun.get(tableNum(InventDim)));

                if (_findIssues)
                {
                    _resultMap.insert(inventDim.inventDimId, [-inventTrans.Qty, -inventTrans.PdsCWQty]);
                }
                else
                {
                    this.insertTransitReceiptDimQty(_resultMap, inventDim.inventDimId, inventTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>