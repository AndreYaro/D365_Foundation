<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UpdateSumTaxForVendInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Update VendInvoiceJour.sumTax when the value is not correct
/// </summary>
class UpdateSumTaxForVendInvoiceJour extends RunBaseBatch implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ApplicationSuite_Localization:UpdateSumTaxForVendInvoiceJour";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        UpdateSumTaxForVendInvoiceJour updateVendInvoiceJour = new UpdateSumTaxForVendInvoiceJour();

        if (updateVendInvoiceJour.prompt())
        {
            updateVendInvoiceJour.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run in new session.
    /// </summary>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.updateVendInvoiceJourSumTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceJourSumTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated vendinVoiceJour.sumTax
    /// </summary>
    protected void updateVendInvoiceJourSumTax()
    {
        this.updateSumTaxByTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumTaxByTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update vendinVoiceJour.sumTax by the sum of TaxTrans.SourceRegulateAmountCur
    /// </summary>
    private void updateSumTaxByTaxTrans()
    {
        VendInvoiceJour    vendInvoiceJour;
        TaxTrans           taxTrans;
        TaxTrans           taxTransSum;
        LedgerJournalTrans ledgerJournalTrans;
        TaxTrans_IN        taxTransIN;

        Voucher            ledgerVoucher;
        TaxAmountCur       sumTax;

        TaxDocumentRowTransaction taxDocumentRowTransaction;
        TaxDocumentComponentTransaction_IN taxDocumentComponentTransaction_IN;
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;

        ttsbegin;

        // When this job query takes long time in production environment
        // can add index on VendInvoiceJour.SumTax to mitigate.
        while select forupdate vendInvoiceJour
            where vendInvoiceJour.SumTax == 0
            exists join RecId from ledgerJournalTrans
                where ledgerJournalTrans.Invoice == vendInvoiceJour.InvoiceId
                    && ledgerJournalTrans.Voucher == vendInvoiceJour.ledgerVoucher
            exists join RecId from taxTrans
                where taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                    && taxTrans.SourceRecId == LedgerJournalTrans.RecId
            exists join RecId from taxTransIN
                where taxTransIN.RefRecId == taxTrans.RecId
                    && taxTransIN.TaxType == TaxType_IN::GST
            exists join taxDocumentRowTransaction
                where taxDocumentRowTransaction.Voucher == vendInvoiceJour.ledgerVoucher
            exists join taxDocumentComponentTransaction
                where taxDocumentComponentTransaction.taxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
            exists join taxDocumentComponentTransaction_IN
                where taxDocumentComponentTransaction_IN.TaxDocumentComponnetTransactionRecId == taxDocumentComponentTransaction.RecId
                    && taxDocumentComponentTransaction_IN.ReverseChargePercentage != 1
        {
            if(!vendInvoiceJour.ledgerVoucher || ledgerVoucher != vendInvoiceJour.ledgerVoucher)
            {
                select sum(SourceRegulateAmountCur) from taxTransSum
                    where taxTransSum.SourceTableId == tableNum(LedgerJournalTrans)
                        && taxTransSum.Voucher == vendInvoiceJour.ledgerVoucher
                    join RecId from ledgerJournalTrans
                        where ledgerJournalTrans.Invoice == vendInvoiceJour.InvoiceId
                            && ledgerJournalTrans.Voucher == vendInvoiceJour.ledgerVoucher
                            && taxTransSum.SourceRecId == LedgerJournalTrans.RecId;

                ledgerVoucher = vendInvoiceJour.ledgerVoucher;
                sumTax =  taxTransSum.SourceRegulateAmountCur;
            }

            vendInvoiceJour.reread();
            vendInvoiceJour.SumTax = sumTax;
            vendInvoiceJour.SalesBalance = vendInvoiceJour.SalesBalance - vendInvoiceJour.SumTax;
            vendInvoiceJour.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>