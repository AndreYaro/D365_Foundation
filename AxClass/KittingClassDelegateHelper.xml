<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KittingClassDelegateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KittingClassDelegateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomCalcItem_constructFrom_delegate</Name>
				<Source><![CDATA[
    static delegate void bomCalcItem_constructFrom_delegate(BOMCalcItem _BOMCalcItem, BOMId _bomId, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOMCalcItem_constructFromBomCalcItem</Name>
				<Source><![CDATA[
    public static BomCalcItem BOMCalcItem_constructFromBomCalcItem(BOMCalcItem _BOMCalcItem)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::bomCalcItem_constructFrom_delegate(_BOMCalcItem, "", resultValue);
        BOMCalcItem bomCalcItem = resultValue.hasResult() ? resultValue.result() as BomCalcItem : null;
        return bomCalcItem != null ? bomCalcItem : BOMCalcItem::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BOMCalcItem_constructFromBomId</Name>
				<Source><![CDATA[
    public static BomCalcItem BOMCalcItem_constructFromBomId(BOMId _bomId)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::bomCalcItem_constructFrom_delegate(null, _bomId, resultValue);
        BOMCalcItem bomCalcItem = resultValue.hasResult() ? resultValue.result() as BomCalcItem : null;
        return bomCalcItem != null ? bomCalcItem : BOMCalcItem::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BomSearch_BOMIsKit_delegate</Name>
				<Source><![CDATA[
    static delegate void BomSearch_BOMIsKit_delegate(BOMTable _bomTable, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>BomSearch_BOMIsKit</Name>
				<Source><![CDATA[
    public static boolean BomSearch_BOMIsKit(BOMTable _bomTable)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::BomSearch_BOMIsKit_delegate(_bomTable, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormletterJournalPost_preparePostJournal_delegate</Name>
				<Source><![CDATA[
    static delegate void FormletterJournalPost_preparePostJournal_delegate(
        FormLetterType _formLetterType, FormLetterContract _formLetterContract, FormLetterJournal _formLetterJournal)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormletterJournalPost_preparePostJournal</Name>
				<Source><![CDATA[
    public static void FormletterJournalPost_preparePostJournal(
        FormLetterType _formLetterType, FormLetterContract _formLetterContract, FormLetterJournal _formLetterJournal)
    {
        KittingClassDelegateHelper::FormletterJournalPost_preparePostJournal_delegate(_formLetterType, _formLetterContract, _formLetterJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_prepareFormLetterContract_delegate</Name>
				<Source><![CDATA[
    static delegate void FormLetterService_prepareFormLetterContract_delegate(Common _parmTable, FormLetterContract _formLetterContract)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_prepareFormLetterContract</Name>
				<Source><![CDATA[
    public static void FormLetterService_prepareFormLetterContract(Common _parmTable, FormLetterContract _formLetterContract)
    {
        KittingClassDelegateHelper::FormLetterService_prepareFormLetterContract_delegate(_parmTable, _formLetterContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_performSetLineNumKits_delegate</Name>
				<Source><![CDATA[
    static delegate void FormLetterService_performSetLineNumKits_delegate(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_performSetLineNumKits</Name>
				<Source><![CDATA[
    public static void FormLetterService_performSetLineNumKits(Common _record)
    {
        KittingClassDelegateHelper::FormLetterService_performSetLineNumKits_delegate(_record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_checkAndPrepareRunService_delegate</Name>
				<Source><![CDATA[
    static delegate void FormLetterService_checkAndPrepareRunService_delegate(FormLetterContract _formLetterContract, TradeLineRefId _tradeLineRefId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormLetterService_checkAndPrepareRunService</Name>
				<Source><![CDATA[
    public static void FormLetterService_checkAndPrepareRunService(FormLetterContract _formLetterContract, TradeLineRefId _tradeLineRefId)
    {
        KittingClassDelegateHelper::FormLetterService_checkAndPrepareRunService_delegate(_formLetterContract, _tradeLineRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjForecastTransferFromQuotation_canTransferToProject_delegate</Name>
				<Source><![CDATA[
    static delegate void ProjForecastTransferFromQuotation_canTransferToProject_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjForecastTransferFromQuotation_canTransferToProject</Name>
				<Source><![CDATA[
    public static boolean ProjForecastTransferFromQuotation_canTransferToProject(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::ProjForecastTransferFromQuotation_canTransferToProject_delegate(_salesQuotationLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchCreateFromSalesOrder_checkTransferred_delegate</Name>
				<Source><![CDATA[
    static delegate void PurchCreateFromSalesOrder_checkTransferred_delegate(TmpPurchLinePrice _tmpPurchLinePrice, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>PurchCreateFromSalesOrder_checkTransferred</Name>
				<Source><![CDATA[
    public static boolean PurchCreateFromSalesOrder_checkTransferred(TmpPurchLinePrice _tmpPurchLinePrice)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::PurchCreateFromSalesOrder_checkTransferred_delegate(_tmpPurchLinePrice, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIKitLineEnumerator_delegate</Name>
				<Source><![CDATA[
    static delegate void createIKitLineEnumerator_delegate(InventTransId _inventTransid, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIKitLineEnumerator</Name>
				<Source><![CDATA[
    public static KittingIKitLineEnumerator createIKitLineEnumerator(InventTransId _inventTransid)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::createIKitLineEnumerator_delegate(_inventTransid, resultValue);
        return resultValue.hasResult() ? resultValue.result() as KittingIKitLineEnumerator : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesFormLetterHandler_delegate</Name>
				<Source><![CDATA[
    static delegate void createISalesFormLetterHandler_delegate(SalesFormLetter _salesFormLetter, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesFormLetterHandler</Name>
				<Source><![CDATA[
    public static KittingISalesFormLetterHandler createISalesFormLetterHandler(SalesFormLetter _salesFormLetter)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::createISalesFormLetterHandler_delegate(_salesFormLetter, resultValue);
        return resultValue.hasResult() ? resultValue.result() as KittingISalesFormLetterHandler : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesPickingListJournalHandler_delegate</Name>
				<Source><![CDATA[
    static delegate void createISalesPickingListJournalHandler_delegate(SalesPickingListJournalCreate  _salesPickingListJournalCreate, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesPickingListJournalHandler</Name>
				<Source><![CDATA[
    public static KittingISalesPickingListJournalHandler createISalesPickingListJournalHandler(SalesPickingListJournalCreate _salesPickingListJournalCreate)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::createISalesPickingListJournalHandler_delegate(_salesPickingListJournalCreate, resultValue);
        return resultValue.hasResult() ? resultValue.result() as KittingISalesPickingListJournalHandler : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesPurchTableToLineUpdate_delegate</Name>
				<Source><![CDATA[
    static delegate void createISalesPurchTableToLineUpdate_delegate(AxInternalBase _axTable, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createISalesPurchTableToLineUpdate</Name>
				<Source><![CDATA[
    public static KittingISalesPurchTableToLineUpdate createISalesPurchTableToLineUpdate(AxInternalBase _axTable)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::createISalesPurchTableToLineUpdate_delegate(_axTable, resultValue);
        return resultValue.hasResult() ? resultValue.result() as KittingISalesPurchTableToLineUpdate : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InterCompanyPost_AddTransForICDirectDelivery_delegate</Name>
				<Source><![CDATA[
    static delegate void InterCompanyPost_AddTransForICDirectDelivery_delegate(InterCompanyPost _interCompanyPost, InterCompanyTrans _interCompanyTrans, EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>InterCompanyPost_AddTransForICDirectDelivery</Name>
				<Source><![CDATA[
    public static boolean InterCompanyPost_AddTransForICDirectDelivery(InterCompanyPost _interCompanyPost, InterCompanyTrans _interCompanyTrans)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        KittingClassDelegateHelper::InterCompanyPost_AddTransForICDirectDelivery_delegate(_interCompanyPost, _interCompanyTrans, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>