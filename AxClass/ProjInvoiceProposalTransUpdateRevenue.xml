<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalTransUpdateRevenue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceProposalTransUpdateRevenue</c> class is the subclass for ProjInvoiceProposalTransUpdate and represents Revenue project transaction.
/// </summary>
/// <remarks>
/// Implements abstract methods of baseclass.
/// </remarks>
public class ProjInvoiceProposalTransUpdateRevenue extends ProjInvoiceProposalTransUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProposalLine</Name>
				<Source><![CDATA[
    public void addProposalLine(ProjProposalJour _projProposalJour, AmountCur _newSalesPrice, ProjId _projId, ProjCategoryId _projCategoryId,TransDate _transDate,TransTxt _transTxt)
    {
        ProjInvoiceChoose projChoose = new ProjInvoiceChooseNormal();

        if (!_projProposalJour)
        {
            throw error("@Proj:ValidProjInvoiceProposal");
        }

        ProjCategory    projCategory;

        select firstonly CategoryType from projCategory
            where projCategory.CategoryId == _projCategoryId
            &&  projCategory.CategoryType == ProjCategoryType::Revenue;

        if (!projCategory)
        {
            throw error("@Proj:CategoryTypeRevenue");
        }
        
        ProjTable projTable = ProjTable::find(_projId);
        if (!ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, ProjTransType::Revenue))
        {
            throw error("@Proj:ProjTypeTimeAndMaterial");
        }

        ProjProposalId projProposalId  = _projProposalJour.ProposalId;

        PSAProjProposalProj psaProjProposalProj;

        select firstonly ContractLineNum from psaProjProposalProj
            where psaProjProposalProj.ProjId == _projId &&
                psaProjProposalProj.ProjProposalId == _projProposalJour.ProposalId;

        //Create a Fee transaction for the project.
        ProjRevenueTrans revTrans = projChoose.createFeeJournal(_projId, _newSalesPrice, _projProposalJour.FundingSource, psaProjProposalProj.ContractLineNum, false, _projCategoryId, _transDate, _transTxt);

        this.setProjProposalProj(revTrans, _projProposalJour, false);

        ProjProposalRevenue projProposalRevenue = ProjProposalRevenue::initProposaleFromTrans(revTrans);
        projProposalRevenue.ProposalId = projProposalId;

        if (projProposalRevenue.validateWrite())
        {
            projProposalRevenue.insert();
        }

        //Set Reference to ProjProposalRevenue and update transaction status.
        ProjRevenueTransSale    projRevenueTransSale;

        select forUpdate projRevenueTransSale
        where projRevenueTransSale.TransId == revTrans.TransId;

        if (projRevenueTransSale)
        {
            ProjProposalRevenueDetail projProposalRevenueDetail = ProjProposalRevenueDetail::initProposaleFromTrans(projRevenueTransSale);
            projProposalRevenueDetail.SaleRefRecId = projRevenueTransSale.RecId;
            projProposalRevenueDetail.ProposalRefRecId = projProposalRevenue.RecId ;

            if (projProposalRevenueDetail.validateWrite())
            {
                projProposalRevenueDetail.insert();
            }

            //Update Transaction status to Invoice Proposal
            ttsBegin;
            projRevenueTransSale.TransStatus = ProjTransStatus::InvoiceProposal;
            projRevenueTransSale.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalProj</Name>
				<Source><![CDATA[
    /// <summary>
	/// Insert record to PSAProjProposalProj table.
	/// </summary>
	/// <param name="_revTrans">
	/// To get required field values from ProjRevenueTrans table.
	/// </param>
	/// <param name="_projProposalJour">
	/// Gets proposal ID from ProjProposalJour table.
	/// </param>
	/// <param name="_isPreBillAlloc">
	/// True if prebilling allocation is present.
	/// </param>
	private void setProjProposalProj(ProjRevenueTrans   _revTrans,
	                                ProjProposalJour    _projProposalJour,
	                                boolean             _isPreBillAlloc)
	{
	    PSAProjProposalProj psaProjProposalProj;
	    
	    if (!ProjProposalJour::psaIsCTLNChecked(_projProposalJour.ProposalId))
        {
	        select psaProjProposalProj
	            where psaProjProposalProj.ProjId           == _revTrans.projId
	                && psaProjProposalProj.ProjProposalId  == _projProposalJour.ProposalId
	                && psaProjProposalProj.IsPreBill       == _isPreBillAlloc;
        }
	    else
        {
	        select psaProjProposalProj
	            where  psaProjProposalProj.ProjId           == _revTrans.projId
	                && psaProjProposalProj.ProjProposalId   == _projProposalJour.ProposalId
	                && psaProjProposalProj.ContractLineNum  == _revTrans.PSAContractLineNum
	                && psaProjProposalProj.IsPreBill        == _isPreBillAlloc;
        }
	
        if (!psaProjProposalProj)
        {
            ProjRevenueTransSale    projRevenueTransSale;

	        select firstOnly FundingSource from projRevenueTransSale
	            where _revTrans.TransId == projRevenueTransSale.TransId;
	
	        ttsBegin;
	        psaProjProposalProj.ProjId          = _revTrans.projId;
	        psaProjProposalProj.ProjProposalId  = _projProposalJour.ProposalId;
	        psaProjProposalProj.ContractLineNum = _revTrans.PSAContractLineNum;
	        psaProjProposalProj.FundingSource   = projRevenueTransSale.FundingSource;
	        psaProjProposalProj.IsPreBill       = _isPreBillAlloc;
	        psaProjProposalProj.insert();
	        ttsCommit;
        }
	
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>