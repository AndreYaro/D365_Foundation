<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepProfileChangeOnGroup_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a class to manage Japan fixed asset depreciation profile change on group level.
/// </summary>
class AssetDepProfileChangeOnGroup_JP
{
    private const str FeatureReference = 'JP-00029';

    AssetDepMethodChangeSettings_JP     changeSettings;
    AssetDepProfileChangeArgs_JP        changeArgs;
    AssetDepProfileChangeOperator_JP    changeOperator;

    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the depreciation profile change to all the fixed assets belonging to the fixed asset group
    /// </summary>
    /// <returns>
    /// true if succeed.
    /// </returns>
    public boolean apply()
    {
        boolean ret = false;

        changeArgs.normalize(changeSettings);
        changeOperator.parmChangeArgs(changeArgs);
        if (changeOperator.validate())
        {
            if (AssetUseParentTransactionDuringChangeDepProfileJPFlight::instance().isEnabled())
            {
                ttsbegin;
            }

            // Apply the depreciation profile change on fixed asset group/value model or depreciation book
            changeOperator.apply();

            switch (changeArgs.parmSourceTableId())
            {
                // Apply the depreciation profile change on value model
                case tableNum(AssetGroupBookSetup):
                    this.applyToAssetGroupBookSetup();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (AssetUseParentTransactionDuringChangeDepProfileJPFlight::instance().isEnabled())
            {
                ttscommit;
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToAssetGroupBookSetup</Name>
				<Source><![CDATA[
    private void applyToAssetGroupBookSetup()
    {
        AssetTable assetTable;
        AssetBook assetBook;
        AssetGroup assetGroup;

        while select assetBook
            where assetBook.BookId == changeArgs.parmAssetBookId()
                && assetBook.Status == AssetStatus::Open
            exists join AssetId from assetTable
                where assetTable.AssetGroup == changeArgs.parmAssetGroupId()
                    && assetTable.AssetId == assetBook.AssetId
            exists join GroupId from assetGroup
                where assetGroup.GroupId == changeArgs.parmAssetGroupId()
                    && assetGroup.AssetType == assetTable.AssetType
        {
            this.applyToAsset(assetBook);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyToAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the depreciation profile change to single fixed asset
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of map <c>AssetDepBookMap_JP</c> which the depreciation profile change will be applied to.
    /// </param>
    public void applyToAsset(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetDepProfileChange_JP        depProfileChange;

        // Only apply the change to the asset whose last depreciation date is smaller than the existing change date
        depProfileChange = AssetDepProfileChange_JP::findByDepProfileId(
            _assetDepBookMap.TableId, _assetDepBookMap.RecId, changeArgs.parmToDepProfileId());
        if (!depProfileChange || depProfileChange.ValidFrom > _assetDepBookMap.LastDepreciationDate)
        {
            changeOperator.parmChangeArgs(this.buildChangeArgsForAsset(_assetDepBookMap));
            if (changeOperator.validate(false))
            {
                changeOperator.apply();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildChangeArgsForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds up change args for single fixed asset
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of map <c>AssetDepBookMap_JP</c> which the depreciation profile change will be applied to.
    /// </param>
    /// <returns>
    /// An instance of class <c>AssetDepProfileChangeArgs_JP</c>.
    /// </returns>
    protected AssetDepProfileChangeArgs_JP buildChangeArgsForAsset(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetDepProfileChangeArgs_JP        assetChangeArgs;
        AssetDepBookTableMap_JP             assetDepBookTableMap;
        AssetDepProfileChange_JP            prevDepProfileChange;
        AssetDepreciationMethod             fromMethod, toMethod;
        AssetTableInterval                  assetTableInterval;
        AssetTransDate                      startDate, prevEndDate;
        AssetTransDate                      lastDepDate, usedFromDate, depStartDate;
        container                           methodChange;

        TableId                             sourceTableId = _assetDepBookMap.TableId;
        RecId                               sourceRecId   = _assetDepBookMap.RecId;

        depStartDate        = _assetDepBookMap.DepreciationStartDate;
        lastDepDate         = _assetDepBookMap.LastDepreciationDate;
        usedFromDate        = _assetDepBookMap.UsedFromDate;
        fromMethod          = changeArgs.parmFromDepProfile().Method;
        toMethod            = changeArgs.parmToDepProfile().Method;
        startDate           = changeArgs.parmStartDate();
        prevEndDate         = changeArgs.parmPrevEndDate();
        methodChange        = [fromMethod, toMethod];

        assetDepBookTableMap = AssetDepBookTableMap_JP::find(changeArgs.parmAssetBookType(), changeArgs.parmAssetBookId());
        assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
            changeArgs.parmFromDepProfile(),
            assetDepBookTableMap.TableId,
            assetDepBookTableMap.RecId);

        // Update the dates according to the first year change limitation
        if (changeSettings.isChangeInFirstYearForbidden(methodChange))
        {
            if (startDate <= assetTableInterval.findLastDayOfYear(usedFromDate))
            {
                startDate = assetTableInterval.findLastDayOfYear(usedFromDate)+1;
            }
        }

        // Adjust the change over start date to the day after the last depreciation date and depreciation run date
        if (startDate <= lastDepDate || startDate < depStartDate)
        {
            startDate = max(lastDepDate+1, depStartDate);
            startDate = assetTableInterval.endPeriod(startDate-1)+1;
        }

        // Do not update previous end date if depreciation transactions exist during the idle period
        prevDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, changeArgs.parmFromDepProfileId());
        if (prevDepProfileChange && prevDepProfileChange.ValidTo < lastDepDate)
        {
            prevEndDate = prevDepProfileChange.ValidTo;
        }
        else if (changeArgs.parmStartDate() == changeArgs.parmPrevEndDate()+1)
        {
            prevEndDate = startDate-1;
        }

        // Copy and update change args
        assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
            changeArgs.parmToDepProfile(),
            assetDepBookTableMap.TableId,
            assetDepBookTableMap.RecId);
        assetChangeArgs = AssetDepProfileChangeArgs_JP::construct(changeArgs);
        assetChangeArgs.parmStartDate(startDate);
        assetChangeArgs.parmPrevEndDate(prevEndDate);
        assetChangeArgs.parmSourceTableId(sourceTableId);
        assetChangeArgs.parmSourceRecId(sourceRecId);
        assetChangeArgs.parmAssetServiceLife(changeArgs.parmAssetServiceLife());
        assetChangeArgs.parmAssetLifeTime(assetTableInterval.yearToPeriod(changeArgs.parmAssetServiceLife(), startDate));
        assetChangeArgs.parmIsUseEquallyDividedFormula(changeArgs.parmIsUseEquallyDividedFormula());

        return assetChangeArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>AssetDepProfileChangeManager_JP</c>
    /// </summary>
    /// <param name="_changeSettings">
    /// Asset depreciation method change settings
    /// </param>
    /// <param name="_changeArgs">
    /// An instance of class <c>AssetDepProfileChangeArgs_JP</c> which includes all depreciation profile change related parameters.
    /// </param>
    public void new(AssetDepMethodChangeSettings_JP _changeSettings, AssetDepProfileChangeArgs_JP _changeArgs)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        changeArgs              = _changeArgs;
        changeSettings          = _changeSettings;
        changeOperator          = new AssetDepProfileChangeOperator_JP(_changeSettings);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>