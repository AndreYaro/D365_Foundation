<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDiffUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class produces a diff of three lists of strings.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysDiffUtil
{
    #define.Delimiter('\n')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new ()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineLCSMaps</Name>
				<Source><![CDATA[
        private static Array combineLCSMaps(Array _combined, Array _theirs, Array _yours)
    {
        Array map = new Array(Types::Container);
        int i, original, theirs, yours, tempA, tempB;

        for (i = 1; i <= _combined.lastIndex(); i++)
        {
            [tempA, tempB] = _combined.value(i);
            [original, theirs] = _theirs.value(tempA);
            [original, yours] = _yours.value(tempB);

            map.value(i, [original, theirs, yours]);
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static SysDiffUtil construct()
    {
        return new SysDiffUtil();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDiff</Name>
				<Source><![CDATA[
        private static List formatDiff(container _diff, SysDiffId _id1, SysDiffId _id2, SysDiffId _same, str _delim)
    {
        List formatted = new List(Types::Container);
        List segmentLines;
        ListEnumerator segmentEnum;
        SysCompareType type;
        SysDiffId id;
        str segment;
        int i, counter;

        for (i = 1; i <= conLen(_diff); i++)
        {
            [type, segment] = conPeek(_diff, i);

            switch (type)
            {
                case SysCompareType::Identical:
                    id = _same;
                    break;
                case SysCompareType::Text1:
                    id = _id1;
                    break;
                case SysCompareType::Text2:
                    id = _id2;
                    break;
            }

            segmentLines = strSplit(segment, _delim);
            segmentEnum = segmentLines.getEnumerator();

            segmentEnum.reset();
            counter = 1;
            while (segmentEnum.moveNext())
            {
                if (counter < segmentLines.elements() || segmentEnum.current() != '')
                {   //we don't want to add the last element since it's an artifact of the split process
                    formatted.addEnd([segmentEnum.current(), id]);
                }
                counter++;
            }
        }

        return formatted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get3DiffFromLCSMap</Name>
				<Source><![CDATA[
        private static List get3DiffFromLCSMap(Array _map, str _original, str _theirs, str _yours)
    {
        List original, theirs, yours, diff;
        ListEnumerator origEnum, theirEnum, yourEnum;
        int prevOrig = 0, prevTheir = 0, prevYour = 0, originIndex, theirIndex, yourIndex, i;

        diff = new List(Types::Container);
        original = strSplit(_original, #Delimiter);
        theirs = strSplit(_theirs, #Delimiter);
        yours = strSplit(_yours, #Delimiter);

        origEnum = original.getEnumerator();
        theirEnum = theirs.getEnumerator();
        yourEnum = yours.getEnumerator();
        origEnum.reset();
        theirEnum.reset();
        yourEnum.reset();

        for (i = 1; i <= _map.lastIndex(); i++)
        {
            [originIndex, theirIndex, yourIndex] = _map.value(i);

            while (prevOrig < originIndex - 1 && origEnum.moveNext())
            {
                diff.addEnd([origEnum.current(), SysDiffId::Base]);
                prevOrig ++;
            }
            origEnum.moveNext();

            while (prevTheir < theirIndex - 1 && theirEnum.moveNext())
            {
                diff.addEnd([theirEnum.current(), SysDiffId::Change]);
                prevTheir ++;
            }
            theirEnum.moveNext();

            while (prevYour < yourIndex - 1 && yourEnum.moveNext())
            {
                diff.addEnd([yourEnum.current(), SysDiffId::Target]);
                prevYour ++;
            }
            yourEnum.moveNext();

            prevOrig = originIndex;
            prevTheir = theirIndex;
            prevYour = yourIndex;

            diff.addEnd([yourEnum.current(), SysDiffId::Same]);
        }

        while (origEnum.moveNext())
        {
            diff.addEnd([origEnum.current(), SysDiffId::Base]);
        }
        while (theirEnum.moveNext())
        {
            diff.addEnd([theirEnum.current(), SysDiffId::Change]);
        }
        while (yourEnum.moveNext())
        {
            diff.addEnd([yourEnum.current(), SysDiffId::Target]);
        }

        return diff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLCS</Name>
				<Source><![CDATA[
        private static List getLCS(List _diff)
    {
        List lcs = new List(Types::String);
        ListEnumerator diffEnum = _diff.getEnumerator();
        str segment;
        SysDiffId id;

        diffEnum.reset();
        while (diffEnum.moveNext())
        {
            [segment, id] = diffEnum.current();
            if (id == SysDiffId::Same)
            {
                lcs.addEnd(segment);
            }
        }

        return lcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLCSMap</Name>
				<Source><![CDATA[
        private static Array getLCSMap(List _diff)
    {
        Array map = new Array(Types::Container);
        ListEnumerator diffEnum = _diff.getEnumerator();
        str segment;
        SysDiffId id;
        int listA = 1, listB = 1, counter = 1;

        diffEnum.reset();
        while (diffEnum.moveNext())
        {
            [segment, id] = diffEnum.current();
            switch (id)
            {
                case SysDiffId::Same:
                    map.value(counter, [listA, listB]);
                    counter ++;
                    listA ++;
                    listB ++;
                    break;
                case SysDiffId::Change:
                    listA ++;
                    break;
                case SysDiffId::Target:
                    listB ++;
                    break;
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quick2Diff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs 2 way text comparison between two strings.
    /// </summary>
    /// <param name="_setA">
    /// First string to be compared.
    /// </param>
    /// <param name="_setB">
    /// Second string to be compared.
    /// </param>
    /// <returns>
    /// Differences formatted in a way <c>SysDiffUtil</c> expects.
    /// </returns>
    /// <remarks>
    /// The format of the diff is a list of containers where the first element of the container is the appropriate SysDiffId and
    /// the second element of the container is the corresponding substring.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List quick2Diff(str _setA, str _setB)
    {
        container compareResult = SysCompareText::run(_setA, _setB);
        return SysDiffUtil::formatDiff(compareResult, SysDiffId::Change, SysDiffId::Target, SysDiffId::Same, '\n');
    }

]]></Source>
			</Method>
			<Method>
				<Name>quick3Diff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs 3 way text comparison between strings.
    /// </summary>
    /// <param name="_original">
    /// Original string.
    /// </param>
    /// <param name="_theirs">
    /// Theirs string.
    /// </param>
    /// <param name="_yours">
    /// Yours string.
    /// </param>
    /// <returns>
    /// Differences formatted in a way <c>SysDiffUtil</c> expects.
    /// </returns>
    /// <remarks>
    /// The format of the diff is a list of containers where the first element of the container is the appropriate SysDiffId and
    /// the second element of the container is the corresponding substring.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List quick3Diff(str _original, str _theirs, str _yours)
    {
        Array theirMap, yourMap, commonMap, combinedMap;
        List theirDiff, yourDiff, commonDiff;
        str theirLCS, yourLCS;

        theirDiff = SysDiffUtil::quick2Diff(_original, _theirs);
        theirMap = SysDiffUtil::getLCSMap(theirDiff);
        yourDiff = SysDiffUtil::quick2Diff(_original, _yours);
        yourMap = SysDiffUtil::getLCSMap(yourDiff);

        theirLCS = strList2str(SysDiffUtil::getLCS(theirDiff), #Delimiter);
        yourLCS = strList2str(SysDiffUtil::getLCS(yourDiff), #Delimiter);

        commonDiff = SysDiffUtil::quick2Diff(theirLCS, yourLCS);
        commonMap = SysDiffUtil::getLCSMap(commonDiff);
        combinedMap = SysDiffUtil::combineLCSMaps(commonMap, theirMap, yourMap);

        return SysDiffUtil::get3DiffFromLCSMap(combinedMap, _original, _theirs, _yours);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>