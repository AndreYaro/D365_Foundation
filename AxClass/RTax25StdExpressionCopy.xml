<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdExpressionCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25StdExpressionCopy extends RunBaseBatch implements BatchRetryable
{
    RTax25StdSeqNum        seqNumFrom, seqNumTo;
    RTax25ProfitTableRecId profitTableRecIdFrom, profitTableRecIdTo;

    DialogField            dialogSeqNumFrom, dialogSeqNumTo;
    DialogField            dialogProfitTableRecIdFrom, dialogProfitTableRecIdTo;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        seqNumFrom,
        seqNumTo,
        profitTableRecIdFrom,
        profitTableRecIdTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    #define.Groups(2)
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.curFormGroup().columns(#Groups);

        dialog.addGroup("@SYS68297");

        dialogSeqNumFrom            = dialog.addFieldValue(extendedtypestr(RTax25StdSeqNum), seqNumFrom);
        dialogProfitTableRecIdFrom  = dialog.addFieldValue(extendedtypestr(RTax25ProfitTableRecId), profitTableRecIdFrom);

        dialog.addGroup("@SYS59059");
        dialogSeqNumTo              = dialog.addFieldValue(extendedtypestr(RTax25StdSeqNum), seqNumTo);
        dialogProfitTableRecIdTo    = dialog.addFieldValue(extendedtypestr(RTax25ProfitTableRecId), profitTableRecIdTo);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        seqNumFrom           = dialogSeqNumFrom.value();
        profitTableRecIdFrom = dialogProfitTableRecIdFrom.value();
        seqNumTo             = dialogSeqNumTo.value();
        profitTableRecIdTo   = dialogProfitTableRecIdTo.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProfitTableRecIdFrom</Name>
				<Source><![CDATA[
    private RefRecId parmProfitTableRecIdFrom(RefRecId _profitTableRecIdFrom = profitTableRecIdFrom)
    {
        profitTableRecIdFrom = _profitTableRecIdFrom;

        return profitTableRecIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProfitTableRecIdTo</Name>
				<Source><![CDATA[
    private RefRecId parmProfitTableRecIdTo(RefRecId _profitTableRecIdTo = profitTableRecIdTo)
    {
        profitTableRecIdTo = _profitTableRecIdTo;

        return profitTableRecIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeqNumFrom</Name>
				<Source><![CDATA[
    private RTax25StdSeqNum parmSeqNumFrom(RTax25StdSeqNum _seqNumFrom = seqNumFrom)
    {
        seqNumFrom = _seqNumFrom;
        return seqNumFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeqNumTo</Name>
				<Source><![CDATA[
    private RTax25StdSeqNum parmSeqNumTo(RTax25StdSeqNum _seqNumTo = seqNumTo)
    {
        seqNumTo = _seqNumTo;
        return seqNumTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RTax25StdExpressionLine     expressionLine;
        RTax25StdExpressionTable    expressionTable;
        RTax25StdLineNum            lineNum;

        if (!this.validate())
            throw error("");

        try
        {
            ttsbegin;

            if (!RTax25StdExpressionTable::exist(seqNumTo, profitTableRecIdTo))
            {
                expressionTable.clear();
                expressionTable.SeqNum = seqNumTo;
                expressionTable.rTax25ProfitTable = profitTableRecIdTo;
                expressionTable.insert();
            }

            select maxof(LineNum) from expressionLine
                where expressionLine.SeqNum            == seqNumTo
                   && expressionLine.rTax25ProfitTable == profitTableRecIdTo;

            lineNum = expressionLine.LineNum;

            while select expressionLine
                order by LineNum
                where expressionLine.SeqNum            == seqNumFrom
                   && expressionLine.rTax25ProfitTable == profitTableRecIdFrom
                   && (expressionLine.LineNum <= lineNum || lineNum == 0)
            {
                lineNum++;

                expressionLine.LineNum           = lineNum;
                expressionLine.SeqNum            = seqNumTo;
                expressionLine.rTax25ProfitTable = profitTableRecIdTo;

                if (expressionLine.LineType == RTax25StdLineType::DeferralsWritingOff &&
                    RTax25StdSeq::find(expressionLine.SeqNum).ChannelType == RTax25StdChannelType::DeferralsFactor)
                {
                    expressionLine.RefIdFrom = RTax25StdSeq::find(expressionLine.SeqNum).ChannelId;
                }

                expressionLine.insert();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version  = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion    :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        ret = RTax25StdSeq::checkExist(seqNumFrom) && ret;
        ret = RTax25StdSeq::checkExist(seqNumTo) && ret;
        ret = profitTableRecIdFrom && ret;
        ret = profitTableRecIdTo && ret;

        if (!profitTableRecIdFrom || !profitTableRecIdTo
         || (profitTableRecIdFrom == profitTableRecIdTo
          && seqNumFrom == seqNumTo))
        {
            ret = checkFailed("@GLS104310");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25StdExpressionCopy construct()
    {
        return new RTax25StdExpressionCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS50804";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTax25StdExpressionTable expressionTable;
        FormDataSource           expressionTableDS;
        RTax25StdExpressionCopy  expressionCopy = RTax25StdExpressionCopy::construct();

        expressionCopy.getLast();

        if (_args && _args.dataset() == tablenum(RTax25StdExpressionTable))
        {
            expressionTable = _args.record();
            expressionCopy.parmSeqNumFrom(expressionTable.SeqNum);
            expressionCopy.parmSeqNumTo(expressionTable.SeqNum);
            expressionCopy.parmProfitTableRecIdFrom(expressionTable.rTax25ProfitTable);
        }

        if (expressionCopy.prompt())
        {
            expressionCopy.runOperation();
        }

        if (_args && _args.dataset() == tablenum(RTax25StdExpressionTable))
        {
            expressionTable = _args.record();
            expressionTableDS = FormDataUtil::getFormDataSource(expressionTable);

            if (expressionTableDS)
            {
                expressionTableDS.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>