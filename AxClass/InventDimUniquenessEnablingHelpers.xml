<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimUniquenessEnablingHelpers</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimUniquenessEnablingHelpers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldType</Name>
				<Source><![CDATA[
    private static Types getFieldType(SysDictField _field)
    {
        return _field.type() != Types::UserType ? _field.type() : _field.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFieldValueBySeed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a value for the specified field based on the specified seed so that values for different seeds are different.
    /// </summary>
    /// <param name = "_tableId">ID of the table.</param>
    /// <param name = "_fieldId">ID of the field.</param>
    /// <param name = "_seed">The seed.</param>
    /// <returns>A value for the specified field.</returns>
    public static anytype generateFieldValueBySeed(TableId _tableId, FieldId _fieldId, int _seed)
    {
        SysDictField _field = new SysDictField(_tableId, _fieldId);
        Types type = InventDimUniquenessEnablingHelpers::getFieldType(_field);

        switch (type)
        {
            case Types::String:
                    return int2Str(_seed);

            case Types::Int64:
            case Types::Integer:
            case Types::Real:
                    return _seed;

            case Types::Enum:
                SysDictEnum dictEnum = new SysDictEnum(_field.enumId());
                return dictEnum.index2Value(_seed);

            case Types::Date:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + _seed;

            case Types::UtcDateTime:
                return DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), _seed);

            default: return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateTwoValuesForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is possible to generate two different values for the specified field.
    /// </summary>
    /// <param name = "_tableId">ID of the table.</param>
    /// <param name = "_fieldId">ID of the field.</param>
    /// <returns>true if it is possible to generate two different values; otherwise, false.</returns>
    public static boolean canGenerateTwoValuesForField(TableId _tableId, FieldId _fieldId)
    {
        SysDictField _field = new SysDictField(_tableId, _fieldId);
        Types type = InventDimUniquenessEnablingHelpers::getFieldType(_field);;

        switch (type)
        {
            case Types::String:
            case Types::Int64:
            case Types::Integer:
            case Types::Date:
            case Types::UtcDateTime:
            case Types::Real:
                return true;

            case Types::Enum:
                SysDictEnum dictEnum = new SysDictEnum(_field.enumId());
                return dictEnum.values() >= 2; // cannot verify uniquensess unless we have at least two enum values

            default: return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>