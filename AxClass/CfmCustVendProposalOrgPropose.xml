<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CfmCustVendProposalOrgPropose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CfmCustVendProposalOrgPropose extends CFMBaseCustVendPaymProposalOrgPropose
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers a <c>LedgerJournalTrans</c> record into a payment proposal for editing.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to be transferred into a payment proposal.
    /// </param>
    public void addLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendPaymProposalCalcPaym custVendPaymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();

        // preset the CustVendTable record to be used as the customer or vendor of the payment proposal records that will be generated
        paymProposal.setPaymCustVendTableFromJournalTrans(_ledgerJournalTrans);

        // set the default offset account type and num so these values are retained in the payment proposal lines being generated
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            paymProposal.parmDefaultOffsetLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            paymProposal.parmDefaultOffsetAccount(_ledgerJournalTrans.parmOffsetAccount());
        }

        paymProposal.parmDefaultOffsetAccountType(_ledgerJournalTrans.OffsetAccountType);

        SpecTrans specTrans;
        CFMPaymentRequestTable paymentRequest;
        
        while select CrossCompany RecId from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
               && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
               && specTrans.SpecRecId == _ledgerJournalTrans.RecId
        join paymentRequest
            where paymentRequest.TableId == specTrans.RefTableId
               && paymentRequest.RecId == specTrans.RefRecId
        {
            custVendPaymProposalCalcPaym.parmPaymentRequest(paymentRequest);
            custVendPaymProposalCalcPaym.calc(null);

            paymProposal.addPaymentRequest(paymentRequest);
        }

        // clear the preset CustVendTable that was used as the customer or vendor for the payment proposal records that were generated
        paymProposal.clearPaymCustVendTable();

        // clear the default offset account type and num so payment offset account type and num may be reset as payments are modified
        paymProposal.parmDefaultOffsetAccountType(LedgerJournalACType::Ledger);
        paymProposal.parmDefaultOffsetAccount('');
        paymProposal.parmDefaultOffsetLedgerDimension(0);

        CustVendPaymProposalLine custVendPaymProposalLine;
        // Insert dummy line to track what journal lines we have loaded but not used
        custVendPaymProposalLine.JournalId = _ledgerJournalTrans.JournalNum;
        custVendPaymProposalLine.LedgerJournalTransRecId = _ledgerJournalTrans.RecId;
        custVendPaymProposalLine.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymProposalLinePR</Name>
				<Source><![CDATA[
    public CustVendPaymProposalLine buildPaymProposalLinePR(
        CFMPaymentRequestTable _paymentRequest,
        TransDate _paymDate,
        CurrencyCode _paymCurrency)
    {
        Set setPaymAttributes;
        SetEnumerator setPaymAttributesEnumerator;
        LedgerJournalAccountAndType ledgerJournalAccountAndType;
        CustVendPaymProposalLine paymProposalLine;
        #ISOCountryRegionCodes

        boolean copyDimension;
        container custVendTaxInfoConMap, custVendTaxInfoCon;
        Map custVendTaxInfoMap;
        MapEnumerator mapEnum;
        container custVendInfo;

        // ensure the payment proposal line buffer is created in the same company as the ledger journal that will contain it
        changecompany(paymProposal.parmLedgerJournalTableCompany())
        {
            paymProposalLine.clear();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                copyDimension = (_paymentRequest.AccountType == CFMAccountType::Cust &&
                                (CustParameters::find().CopyInvoiceDimension_RU ||
                                 CustParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None)) ||
                                (_paymentRequest.AccountType == CFMAccountType::Vend  &&
                                (VendParameters::find().CopyInvoiceDimension_RU ||
                                 VendParameters::find().DimSettlementCtrlType_RU != DimSettlementCtrlType_RU::None));
            }
        }

        changecompany(_paymentRequest.SourceDataAreaId)
        {
            paymProposalLine.JournalId = paymProposal.ledgerJournalId();
            paymProposalLine.AccountType = this.paymentRequestToModuleCustVend(_paymentRequest);

            custVendInfo = paymProposal.resolvePaymCustVend(this.paymentRequestToCustVendTransInfoTmp(_paymentRequest));

            if (conPeek(custVendInfo, 1) == '')
            {
                paymProposalLine.AccountNum = _paymentRequest.InvoiceAccountNum;
                paymProposalLine.AccountNumCompany = _paymentRequest.SourceDataAreaId;
            }
            else
            {
                paymProposalLine.AccountNum = conPeek(custVendInfo, 1);     // AccountNum;
                paymProposalLine.AccountNumCompany = conPeek(custVendInfo, 2);     // CompanyId
            }

            paymProposalLine.CurrencyCode = _paymCurrency;
            paymProposalLine.PaymMode = _paymentRequest.PaymMode;
            paymProposalLine.PaymSpec = _paymentRequest.PaymSpec;
            paymProposalLine.PostingProfile = _paymentRequest.PostingProfile;
            paymProposalLine.ThirdPartyBankAccountID = _paymentRequest.RecepientBankAccountId;
            paymProposalLine.NegInstStatus = CustVendNegInstStatus::Invoiced;
            paymProposalLine.CFMPaymentOrderHash = CFMPaymentRequestPaymentOrder::findByRecId(_paymentRequest.PaymentOrder).Hash;

            if (_paymentRequest.Prepayment)
            {
                paymProposalLine.CFMPrepayment = _paymentRequest.Prepayment;

                custVendTaxInfoConMap = _paymentRequest.custVendTaxGroupBaseAmountMap();

                if (custVendTaxInfoConMap != conNull())
                {
                    custVendTaxInfoMap = Map::create(custVendTaxInfoConMap);
                    mapEnum = custVendTaxInfoMap.getEnumerator();

                    if (mapEnum.moveNext())
                    {
                        custVendTaxInfoCon = mapEnum.currentKey();

                        paymProposalLine.CFMTaxGroup = conPeek(custVendTaxInfoCon, 1);
                        paymProposalLine.CFMTaxItemGroup = conPeek(custVendTaxInfoCon, 2);
                    }
                }
            }

            if (_paymentRequest.AccountType == CFMAccountType::Vend)
            {
                paymProposalLine.RemittanceLocation = VendTable::getDefaultRemittanceLocation(paymProposalLine.AccountNum, paymProposalLine.AccountNumCompany);
            }

            paymProposalLine.CompanyBankAccountIdNegInst = paymProposal.resolveCompanyBankAccountIdNegInst(paymProposalLine);
            paymProposalLine.BankRemittanceType = BankRemittanceType::None;
            paymProposalLine.PaymDate = _paymDate;

            if (_paymentRequest.paymModeTable().PaymSumBy == PaymSumBy::Invoice)
            {
                paymProposalLine.CFMPaymentRequestRecId = _paymentRequest.RecId;
            }

            setPaymAttributes = CustVendPaymModeData::construct(_paymentRequest.paymModeTable()).setOfPaymAttributes();
            setPaymAttributesEnumerator = setPaymAttributes.getEnumerator();

            while (setPaymAttributesEnumerator.moveNext())
            {
                switch (setPaymAttributesEnumerator.current())
                {
                    case PaymAttribute::ThirdPartyBank :

                        paymProposalLine.ThirdPartyBankAccountID = _paymentRequest.RecepientBankAccountId;
                        break;

                    case PaymAttribute::PaymentAccount :
                        ledgerJournalAccountAndType = paymProposalLine.resolvePaymAccountAndType(LedgerJournalACType::Bank, _paymentRequest.PaymentAccountNum);

                        paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();
                        if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                        {
                            paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                        }
                        else
                        {
                            paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                        }
                        break;

                    default :
                        EventHandlerResult eventResult = new EventHandlerResult();
                        this.initCFMPaymProposalLineFromPaymAttributeDelegate(
                                setPaymAttributesEnumerator.current(),
                                setPaymAttributes,
                                paymProposalLine,
                                _paymentRequest,
                                eventResult);

                        if (!eventResult.hasResult())
                        {
                            throw error(Error::wrongUseOfFunction(funcname()));
                        }
                }

                if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                 && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                {
                    paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                }
            }

            if (!paymProposalLine.parmLedgerDimension())
            {
                changecompany(paymProposal.parmLedgerJournalTableCompany())
                {
                    ledgerJournalAccountAndType = paymProposal.resolvePaymAccountAndType(paymProposalLine, LedgerJournalACType::Ledger);

                    paymProposalLine.PaymAccountType = ledgerJournalAccountAndType.parmAccountType();

                    if (paymProposalLine.PaymAccountType == LedgerJournalACType::Ledger)
                    {
                        paymProposalLine.parmLedgerDimension(ledgerJournalAccountAndType.parmLedgerDimension());
                    }
                    else
                    {
                        paymProposalLine.parmPaymAccount(ledgerJournalAccountAndType.parmAccountNum(), ledgerJournalAccountAndType.parmAccountType());
                    }

                    if (paymProposalLine.PaymAccountType == LedgerJournalACType::Bank
                     && !BankAccountTable::isActive(paymProposalLine.parmPaymAccount(), paymProposalLine.PaymDate))
                    {
                        paymProposalLine.parmPaymAccount('', LedgerJournalACType::Bank);
                    }
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (copyDimension)
                {
                    paymProposalLine.DefaultDimension = _paymentRequest.DefaultDimension;
                }
                else
                {
                    paymProposalLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(
                    AgreementHeaderExt_RU::findByDefaultDimension(_paymentRequest.DefaultDimension).RecId,
                    paymProposalLine.DefaultDimension);
                }
            }
        }

        if (! paymProposal.validatePaymentCurrency(paymProposalLine.CurrencyCode, paymProposalLine.AccountNumCompany, _paymentRequest.PaymentDataAreaId))
        {
            paymProposalLine.clear();
        }

        return paymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCFMPaymProposalLineFromPaymAttributeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the buildPaymProposalLinePR method for setting payment attribute related fields.
    /// </summary>
    /// <param name = "_paymAttribute">The payment attribute enum value.</param>
    /// <param name = "_paymAttributes">The set of payment attributes.</param>
    /// <param name = "_paymProposalLine">The payment proposal line.</param>
    /// <param name = "_paymentRequest">A <c>CFMPaymentRequestTable</c> table buffer.</param>
    /// <param name = "_eventResult">The <c>EventHandlerResult</c> instance to be assigned before exiting the method.</param>
    delegate void initCFMPaymProposalLineFromPaymAttributeDelegate(
        paymAttribute _paymAttribute,
        Set _setPaymAttributes,
        CustVendPaymProposalLine _paymProposalLine,
        CFMPaymentRequestTable _paymentRequest,
        EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestToCustVendTransInfoTmp</Name>
				<Source><![CDATA[
    private CustVendTrans paymentRequestToCustVendTransInfoTmp(CFMPaymentRequestTable _paymentRequest)
    {
        CustVendTrans custVendTrans;
        VendTrans vendTrans;
        CustTrans custTrans;

        changecompany(_paymentRequest.SourceDataAreaId)
        {
            switch (this.paymentRequestToModuleCustVend(_paymentRequest))
            {
                case ModuleCustVend::Cust:
                    //BP deviation documented
                    custTrans.setTmp();
                    custTrans.clear();
                    custVendTrans = custTrans;
                    break;

                case ModuleCustVend::Vend:
                    //BP deviation documented
                    vendTrans.setTmp();
                    vendTrans.clear();
                    custVendTrans = vendTrans;
                    break;
            }

            custVendTrans.AccountNum = _paymentRequest.InvoiceAccountNum;
            custVendTrans.PaymMode = _paymentRequest.PaymMode;
            custVendTrans.PaymSpec = _paymentRequest.PaymSpec;
            custVendTrans.CurrencyCode = _paymentRequest.CurrencyCode;
            custVendTrans.doInsert();
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestToModuleCustVend</Name>
				<Source><![CDATA[
    private ModuleCustVend paymentRequestToModuleCustVend(CFMPaymentRequestTable _paymentRequest)
    {
        ModuleCustVend  moduleCustVend;

        switch (_paymentRequest.AccountType)
        {
            case CFMAccountType::Cust :
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case CFMAccountType::Vend :
                moduleCustVend = ModuleCustVend::Vend;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return moduleCustVend;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>