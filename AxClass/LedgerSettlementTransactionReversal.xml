<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plugin for reversing Ledger settlement realized gain/loss transactions.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class LedgerSettlementTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        #isoCountryRegionCodes

        TransactionReversal_Ledger ledgerReversal;
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerReversal = TransactionReversal_Ledger_RU::construct();
        }
        else
        {
            ledgerReversal = TransactionReversal_Ledger::construct();
        }

        ledgerReversal.parmReversalDate(_contract.parmReversalDate());
        ledgerReversal.parmContract(_contract);
        
        // The reversalExecutionDetail.ReferenceRecId for Ledger settlement reversals ties to a specific LedgerTransSettlement record
        LedgerTransSettlement ledgerTransSettlement;
        select ledgerTransSettlement
            where ledgerTransSettlement.RecId == _reversalExecutionDetail.ReferenceRecId;

        boolean isReversed;
        if (ledgerTransSettlement.RecId != 0)
        {
            // Both gain and loss transaction settlements have the same settleID.
            // After processing one of them, in GeneralJournalAccountEntry_Extension::reverseSettlement, all settlements with the same settleId will be removed.
            // To prevent not-yet-processed settlements being removed together, marking settleID with a GUID (not supported ID format).
            str tempSettleId = guid2Str(newGuid());

            LedgerTransSettlement settlementToBeReversed;

            update_recordset settlementToBeReversed
                setting SettleId = tempSettleId
                where settlementToBeReversed.SettleId == ledgerTransSettlement.SettleId
                    && settlementToBeReversed.Voucher == ledgerTransSettlement.Voucher;

            select count(RecId) from settlementToBeReversed
                where settlementToBeReversed.SettleId == tempSettleId &&
                        settlementToBeReversed.TransRecId != ledgerTransSettlement.TransRecId;

            // To avoid unintended "processing" from GeneralJournalAccountEntry_Extension::reverseSettlement
            if (settlementToBeReversed.RecId == 1)
            {
                LedgerTransSettlement dummySettlement;

                dummySettlement.SettleId = tempSettleId;
                dummySettlement.doInsert();
            }

            isReversed = ledgerReversal.reverseTransaction(ledgerTransSettlement);
        }

        return isReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        return (_detail.JournalCategory == LedgerTransType::LedgerSettlement) && (_detail.ReferenceTableId == tableNum(LedgerTransSettlement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemDisplayStr(LedgerTransSettleReverseTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEligibleForReverse</Name>
				<Source><![CDATA[
    internal static boolean validateEligibleForReverse(
        GeneralJournalEntry _generalJournalEntry,
        Common _originatingRecord)
    {
        boolean isValid = true;

        // If reversal validation is currently successful, and the Journal is a Ledger settlements gain/loss transaction, perform reversal validation.
        if (_generalJournalEntry.JournalCategory == LedgerTransType::LedgerSettlement)
        {
            if (_originatingRecord.TableId != tableNum(LedgerTransSettlement))
            {
                isValid = checkFailed(strFmt("@GeneralLedger:LedgerSettlementsTransactionReversalSourceInvokeCheck", "@GeneralLedger:LedgerSettlementsFormLabel"));
            }

            // A Ledger settlements gain/loss transaction will have an audit/history trail record in the LedgerTransSettlement table.
            LedgerTransSettlement ledgerTransSettlement;
            GeneralJournalEntry generalJournalEntry;
            GeneralJournalAccountEntry generalJournalAccountEntry;

            select firstonly ledgerTransSettlement
                join generalJournalAccountEntry
                join generalJournalEntry
                where ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                    && generalJournalEntry.RecId == _generalJournalEntry.RecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;

            if (!ledgerTransSettlement)
            {
              // Ledger settlements transaction must have an associated LedgerTransSettlement record to reverse.
              isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>