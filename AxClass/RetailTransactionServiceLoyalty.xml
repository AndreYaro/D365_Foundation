<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceLoyalty</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceLoyalty</c> implements the loyalty related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceLoyalty
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getElementTextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text value of a named child element.
    /// </summary>
    /// <param name="_parentNode">
    /// The parent element.
    /// </param>
    /// <param name="_elementName">
    /// The child element name.
    /// </param>
    /// <returns>
    /// The text value.
    /// </returns>
    private static str getElementTextValue(XmlElement _parentNode, str _elementName)
    {
        XMLElement element = _parentNode.getNamedElement(_elementName);
        if (element)
        {
            return element.text();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoyaltyCardNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate Loyalty Card Number sequence if Loyalty Card number does not exist.
    /// </summary>
    /// <param name="_cardNumber">
    /// The Loyalty Card Number.
    /// </param>
    /// <returns>
    /// Container containing Card Number, error message, and isSuccess flag.
    /// </returns>
    private static container getLoyaltyCardNumber(RetailLoyaltyCardNumber _cardNumber)
    {
        str message;
        boolean isSuccess = true;
        RetailLoyaltyCardNumber cardNumber;
        NumberSeq num;
        RetailLoyaltyCard retailLoyaltyCard;

        if (_cardNumber != '')
        {
            // Validate whether the card number has been used.
            retailLoyaltyCard = RetailLoyaltyCard::findByCardNumber(_cardNumber);
            if (retailLoyaltyCard)
            {
                isSuccess = false;
                message = strFmt("@REX4160611", _cardNumber);
            }
            else
            {
                cardNumber = _cardNumber;
            }
        }
        else
        {
            // Generate a card number from the number sequence
            num = NumberSeq::newGetNum(RetailParameters::numRefLoyaltyCardNumber());
            num.used();
            cardNumber = num.num();
        }

        return [cardNumber, message, isSuccess];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardRewardPointsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reward point status of the loyalty card(s) including Issued, Used, Expired, and Active points.
    /// </summary>
    /// <param name="channelLocalDateStr">
    /// The channel local date in 213 sequence.
    /// </param>
    /// <param name="_cardNumber">
    /// The loyalty card number.
    /// </param>
    /// <param name="_excludeBlocked">
    /// The flag indicating whether to exclude the card status if the card is blocked.
    /// </param>
    /// <param name="_excludeNoTender">
    /// The flag indicating whether to exclude the card status if the card is no tender or blocked.
    /// </param>
    /// <param name="_includeRelatedCardsForContactTender">
    /// The flag indicating whether to include the status of the related cards if the given card is contact tender.
    /// </param>
    /// <param name="_includeNonRedeemablePoints">
    /// The flag indicating whether to include non-redeemable points status in the result.
    /// </param>
    /// <param name="_includeActivePointsOnly">
    /// The flag indicating whether to return only the active points; otherwise, returns the status of issued, used and expired points as well.
    /// </param>
    /// <param name="_languageId">
    /// The language ID of the reward point description.
    /// </param>
    /// <returns>
    /// The result container contains [isSuccess, Message, PointStatusXML].
    /// A sample of XML is provided in the source code.
    /// </returns>
    public static container GetLoyaltyCardRewardPointsStatus(
        str channelLocalDateStr,
        RetailLoyaltyCardNumber _cardNumber,
        boolean _excludeBlocked,
        boolean _excludeNoTender,
        boolean _includeRelatedCardsForContactTender,
        boolean _includeNonRedeemablePoints,
        boolean _includeActivePointsOnly,
        LanguageIdAll _languageId = SystemParameters::getSystemLanguageId())
    {
        boolean isSuccess = true;
        str message;
        date utcDate = str2Date(channelLocalDateStr, 213);

        List cardNumberList = RetailTransactionServiceLoyalty::GetCardList(_cardNumber, _excludeBlocked, _excludeNoTender, _includeRelatedCardsForContactTender);

        // Get point status in XML
        str statusXML = RetailTransactionServiceLoyalty::GetLoyaltyCardRewardPointsStatusXML(utcDate, cardNumberList, _includeNonRedeemablePoints, _includeActivePointsOnly, false, 0, _languageId);

        // Return
        return [isSuccess, message, statusXML];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardRewardPointsStatusXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get XML formatted loyalty reward points status for a list of loyalty cards.
    /// </summary>
    /// <param name="_utcDate">
    /// The utc date in 213 sequence.
    /// </param>
    /// <param name="_cardNumberList">
    /// The loyalty card number list.
    /// </param>
    /// <param name="_includeNonRedeemablePoints">
    /// The flag indicating whether to include non-redeemable points status in the result.
    /// </param>
    /// <param name="_includeActivePointsOnly">
    /// The flag indicating whether to return only the active points; otherwise, returns the status of issued, used, and expired points.
    /// </param>
    /// <param name="_includeExpiringAndUnvestedPoints">
    /// The flag indicating whether to return the expiring and unvested points.
    /// </param>
    /// <param name="_noOfDaysToExpiry">
    /// The given number of days within which points should be evaluated for expiry.
    /// </param>
    /// <param name="_languageId">
    /// The system's language identifier.
    /// </param>
    /// <returns>
    /// A string representation of the generated XML document of the loyalty card reward point status.
    /// </returns>
    /// <remarks>
    /// A sample of XML is provided in the source code.
    /// </remarks>
    private static str GetLoyaltyCardRewardPointsStatusXML(
        date _utcDate,
        List _cardNumberList,
        boolean _includeNonRedeemablePoints,
        boolean _includeActivePointsOnly,
        boolean _includeExpiringAndUnvestedPoints,
        int64 _noOfDaysToExpiry,
        LanguageIdAll _languageId = SystemParameters::getSystemLanguageId()
        )
    {
        /*
        Sample XML is below. RewardPointType is the int value of RetailLoyaltyRewardPoint.RewardPointType field. 1 is Quantity type. 2 is Amount type.

        <LoyaltyCardRewardPointsStatusList>
            <LoyaltyCardRewardPointsStatus LoyaltyCardNumber="100001">
                <RewardPointStatus RewardPointId = "ShoePoints" RewardPointDescription = "Shoe points" RewardPointType="1" Currency="" Redeemable="True" RedeemRanking="1" Issued="120" Used="30" Expired="10" Active="80"/>
                <RewardPointStatus RewardPointId = "ShoeAmountInUSD" RewardPointDescription = "Shoe spending amount in USD" RewardPointType="2" Currency="USD" Redeemable="False" Issued="1345.23" Used="0" Expired="0" Active="0"/>
            </LoyaltyCardRewardPointsStatus>
            <LoyaltyCardRewardPointsStatus LoyaltyCardNumber="100002">
                <RewardPointStatus RewardPointId = "ShoePoints" RewardPointDescription = "Shoe points" RewardPointType="1" Currency="" Redeemable="True" RedeemRanking="1" Issued="120" Used="30" Expired="10" Active="80"/>
                <RewardPointStatus RewardPointId = "ShoeAmountInUSD" RewardPointDescription = "Shoe spending amount in USD" RewardPointType="2" Currency="USD" Redeemable="False" Issued="1345.23" Used="0" Expired="0" Active="0"/>
            </LoyaltyCardRewardPointsStatus>
        </LoyaltyCardRewardPointsStatusList>
        * */

        ListEnumerator enumerator;
        RetailLoyaltyCardNumber cardNumber;
        RetailLoyaltyCard card;
        RetailLoyaltyRewardPoint rewardPoint;
        RetailLoyaltyRewardPointTranslation rewardPointTranslation;
        RetailLoyaltyRewardPointAmountQty issued, used, expired, active, unvested, expiring;
        RetailLoyaltySchemeRewardPointView schemeRewardPointView;
        RetailLoyaltyScheme scheme;
        RetailLoyaltyCardTier cardTier;

        XmlDocument         xmlDoc;
        XmlElement          xmlRoot, cardStatusElmt, rewardPointStatusElmt;

        // Set language Id if missing
        if (!_languageId)
        {
            _languageId = SystemParameters::getSystemLanguageId();
        }

        // Create xml document and the root element
        xmlDoc = XMLDocument::newBlank();
        xmlRoot = xmlDoc.createElement('LoyaltyCardRewardPointsStatusList');
        xmlDoc.appendChild(xmlRoot);

        if (_cardNumberList != null && _cardNumberList.elements() > 0)
        {
            enumerator = _cardNumberList.getEnumerator();
            while (enumerator.moveNext())
            {
                cardNumber = enumerator.current();
                card = RetailLoyaltyCard::findByCardNumber(cardNumber);

                if (card)
                {
                    // Add a child element for each card
                    cardStatusElmt = xmlDoc.createElement('LoyaltyCardRewardPointsStatus');
                    cardStatusElmt.setAttribute('LoyaltyCardNumber', card.CardNumber);
                    xmlRoot.appendChild(cardStatusElmt);

                    // Get the status of the reward points that are associated to the loyalty card.
                    while select rewardPoint
                        where rewardPoint.Redeemable == NoYes::Yes
                        || _includeNonRedeemablePoints == NoYes::Yes
                        outer join rewardPointTranslation
                        where rewardPointTranslation.RewardPoint == rewardPoint.RecId
                           && rewardPointTranslation.LanguageId == _languageId
                        exists join schemeRewardPointView
                        where schemeRewardPointView.RewardPoint == rewardPoint.RecId
                        exists join scheme
                        where scheme.RecId == schemeRewardPointView.LoyaltyScheme
                        exists join cardTier
                        where cardTier.Affiliation == scheme.Affiliation
                           && cardTier.LoyaltyCard == card.RecId
                    {
                        if (!_includeActivePointsOnly)
                        {
                            issued = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Issued, _utcDate);
                            used = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Used, _utcDate);
                            expired = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Expired, _utcDate);
                        }


                        if (_includeExpiringAndUnvestedPoints)
                        {
                            expiring =  RetailLoyaltyCardRewardPointTrans::calcExpiringPoints(card, rewardPoint.RecId, _noOfDaysToExpiry, _utcDate);
                            unvested = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Unvested, _utcDate);
                        }

                        active = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Active, _utcDate);

                        rewardPointStatusElmt = xmlDoc.createElement('RewardPointStatus');
                        rewardPointStatusElmt.setAttribute('RewardPointId', rewardPoint.RewardPointId);
                        rewardPointStatusElmt.setAttribute('RewardPointDescription', rewardPointTranslation.Description);
                        rewardPointStatusElmt.setAttribute('RewardPointType', int2str(enum2int(rewardPoint.RewardPointType)));
                        rewardPointStatusElmt.setAttribute('Currency', rewardPoint.RewardPointCurrency);
                        rewardPointStatusElmt.setAttribute('Redeemable', rewardPoint.Redeemable == NoYes::Yes ? 'True' : 'False');
                        if (rewardPoint.Redeemable == NoYes::Yes)
                        {
                            rewardPointStatusElmt.setAttribute('RedeemRanking', int2str(rewardPoint.RedeemRanking));
                        }

                        // Reward points are decimals with 4 digits after the dot, format (x.NNNN)
                        rewardPointStatusElmt.setAttribute('Issued', num2str(issued, 0, 4, 1, 0));
                        rewardPointStatusElmt.setAttribute('Used', num2str(used, 0, 4, 1, 0));
                        rewardPointStatusElmt.setAttribute('Expired', num2str(expired, 0, 4, 1, 0));
                        rewardPointStatusElmt.setAttribute('Active', num2str(active, 0, 4, 1, 0));
                        rewardPointStatusElmt.setAttribute('Unvested', num2str(unvested, 0, 4, 1, 0));
                        rewardPointStatusElmt.setAttribute('Expiring', num2str(expiring, 0, 4, 1, 0));
                        cardStatusElmt.appendChild(rewardPointStatusElmt);
                    }
                }
            }
        }

        return xmlDoc.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card transaction
    /// </summary>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <param name="_calculateTotalCount">
    /// The flag indicating whether the result should contains the total number of the transactions.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, xmlResultString].
    /// A sample of the result XML is provided in the source code.
    /// </remarks>
    public static container GetLoyaltyCardTransactions(
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _top = 1,
        int64 _skip = 0,
        boolean _calculateTotalCount = false)
    {
        /// xmlResultString format is like below
        /// <LoyaltyCardRewardPointTransactions TotalTransactionNumber="56">
        ///  <LoyaltyCardRewardPointTransaction TransactionID="trans01" RewardPointAmountQty="5.00" EntryType="1" ExpirationDate="08/28/2013" EntryDate="07/27/2013" EntryTime="13:01:21" ChannelName="Store 1" />
        ///  <LoyaltyCardRewardPointTransaction TransactionID="trans02" RewardPointAmountQty="-5.00" EntryType="2" ExpirationDate="" EntryDate="07/27/2013" EntryTime="13:01:21" ChannelName="Store 1" />
        ///  ...
        /// </LoyaltyCardRewardPointTranactions>

       return RetailTransactionServiceLoyalty::GetLoyaltyCardTransactionsResponse(_cardNumber, _rewardPointId, _top, _skip, _calculateTotalCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardTransactionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card transactions with sales line numbers included.
    /// </summary>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <param name="_calculateTotalCount">
    /// The flag indicating whether the result should contains the total number of the transactions.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, xmlResultString].
    /// A sample of the result XML is provided in the source code.
    /// </remarks>
    public static container GetLoyaltyCardTransactionLines(
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _top = 1,
        int64 _skip = 0,
        boolean _calculateTotalCount = false)
    {
        /// xmlResultString format is like below
        /// <LoyaltyCardRewardPointTransactions TotalTransactionNumber="56">
        ///  <LoyaltyCardRewardPointTransaction TransactionID="trans01" SalesLineNumber="1.00" RewardPointAmountQty="5.00" EntryType="1" ExpirationDate="08/28/2013" EntryDate="07/27/2013" EntryTime="13:01:21" ChannelName="Store 1" />
        ///  <LoyaltyCardRewardPointTransaction TransactionID="trans01" SalesLineNumber="2.00" RewardPointAmountQty="10.00" EntryType="1" ExpirationDate="08/28/2013" EntryDate="07/27/2013" EntryTime="13:01:21" ChannelName="Store 1" />
        ///  <LoyaltyCardRewardPointTransaction TransactionID="trans02" SalesLineNumber="1.00" RewardPointAmountQty="-5.00" EntryType="2" ExpirationDate="" EntryDate="07/27/2013" EntryTime="13:01:21" ChannelName="Store 1" />
        ///  ...
        /// </LoyaltyCardRewardPointTranactions>

        return RetailTransactionServiceLoyalty::GetLoyaltyCardTransactionsResponse(_cardNumber, _rewardPointId, _top, _skip, _calculateTotalCount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardTransactionsResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card transaction
    /// </summary>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <param name="_calculateTotalCount">
    /// The flag indicating whether the result should contain the total number of the transactions.
    /// </param>
    /// <param name="_includeSalesLineNumber">
    /// The flag indicating whether the result should contain the sales line number of the transactions.
    /// </param>
    /// <returns>
    /// A string having XML of loyalty card transactions.
    /// </returns>
    private static container GetLoyaltyCardTransactionsResponse(
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _top = 1,
        int64 _skip = 0,
        boolean _calculateTotalCount = false,
        boolean _includeSalesLineNumber = false)
    {
        boolean isSuccess = false;
        str message;
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;
        XmlElement          xmlElement;

        int64 totalRows = 0;

        //Query defination
        Query transQuery = new Query();
        QueryBuildDataSource transDS, channelTableDS, oMOperatingDS;
        QueryRun transQueryRun;
        QueryBuildRange cardNumberRange;
        QueryBuildRange rewardPointRange;

        //Table defination
        RetailLoyaltyCardRewardPointTrans   loyaltyCardRewardPointTrans;
        RetailLoyaltyRewardPoint            loyaltyRewardPoint;
        OMOperatingUnit oMOperatingUnitlocal;

        RecId rewardPointRecId;

        try
        {
            //Retrive rewardPointRecId
            select RecId
            from loyaltyRewardPoint
                where loyaltyRewardPoint.RewardPointId == _rewardPointId;
            rewardPointRecId = loyaltyRewardPoint.RecId;

            //Get total count
            if (_calculateTotalCount)
            {
                select count(RecId)
                from loyaltyCardRewardPointTrans
                    where loyaltyCardRewardPointTrans.CardNumber == _cardNumber
                        && loyaltyCardRewardPointTrans.RewardPoint == rewardPointRecId;
                totalRows = loyaltyCardRewardPointTrans.RecId;
            }

            //Add a datasource to a query
            transDS = transQuery.addDataSource(tableNum(RetailLoyaltyCardRewardPointTrans));
            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryDate), SortOrder::Descending);
            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryTime), SortOrder::Descending);

            channelTableDS = transDS.addDataSource(tableNum(RetailChannelTable));
            // Set the join mode
            channelTableDS.joinMode(JoinMode::OuterJoin);
            // Add link between parent field and child field
            channelTableDS.addLink(fieldNum(RetailLoyaltyCardRewardPointTrans, Channel), fieldNum(RetailChannelTable, RecId));

            oMOperatingDS = channelTableDS.addDataSource(tableNum(OMOperatingUnit));
            // Set the join mode
            oMOperatingDS.joinMode(JoinMode::OuterJoin);
            // Add link between parent field and child field
            oMOperatingDS.addLink(fieldNum(RetailChannelTable, OMOperatingUnitId), fieldNum(OMOperatingUnit, RecId));

            cardNumberRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, CardNumber));
            cardNumberRange.Value(_cardNumber);
            rewardPointRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RewardPoint));
            rewardPointRange.Value(int642str(rewardPointRecId));

            transQueryRun = new QueryRun(transQuery);
            // Enable position paging for the queryrun object
            transQueryRun.enablePositionPaging(true);

            //Add a range by providing the parameters as starting record number and number of records
            transQueryRun.addPageRange(_skip + 1, _top);
            xmlDoc = XMLDocument::newBlank();

            //Create Root
            xmlRoot = xmlDoc.createElement('LoyaltyCardRewardPointTransactions');
            //Append common information
            xmlRoot.setAttribute('TotalTransactionNumber', int642str(totalRows));

            while (transQueryRun.next())
            {
                xmlElement = xmlDoc.createElement('LoyaltyCardRewardPointTransaction');
                loyaltyCardRewardPointTrans = transQueryRun.get(tableNum(RetailLoyaltyCardRewardPointTrans));
                switch (loyaltyCardRewardPointTrans.LoyaltyTransactionType)
                {
                    case RetailLoyaltyTransactionType::RetailTransaction:
                        xmlElement.setAttribute('TransactionID', loyaltyCardRewardPointTrans.transactionId);
                        if (_includeSalesLineNumber)
                        {
                            xmlElement.setAttribute('SalesLineNumber', RetailTransactionServiceUtilities::realToString(loyaltyCardRewardPointTrans.RetailTransactionSalesTransLineNum));
                        }
                        break;

                    case RetailLoyaltyTransactionType::SalesOrder:
                        xmlElement.setAttribute('TransactionID', loyaltyCardRewardPointTrans.SalesId);
                        if (_includeSalesLineNumber)
                        {
                            xmlElement.setAttribute('SalesLineNumber', RetailTransactionServiceUtilities::realToString(loyaltyCardRewardPointTrans.SalesLineLineNum));
                        }
                        break;

                    case RetailLoyaltyTransactionType::LoyaltyAdjustment:
                        xmlElement.setAttribute('TransactionID', loyaltyCardRewardPointTrans.AdjustmentId);
                        if (_includeSalesLineNumber)
                        {
                            xmlElement.setAttribute('SalesLineNumber', RetailTransactionServiceUtilities::realToString(loyaltyCardRewardPointTrans.RetailTransactionSalesTransLineNum));
                        }
                        break;

                    default:
                        xmlElement.setAttribute('TransactionID', loyaltyCardRewardPointTrans.transactionId);
                        if (_includeSalesLineNumber)
                        {
                            xmlElement.setAttribute('SalesLineNumber', RetailTransactionServiceUtilities::realToString(loyaltyCardRewardPointTrans.RetailTransactionSalesTransLineNum));
                        }
                        break;
                }

                xmlElement.setAttribute('RewardPointAmountQty', num2str(loyaltyCardRewardPointTrans.RewardPointAmountQty,0,2,1,0));
                xmlElement.setAttribute('EntryType', int2str(enum2int(loyaltyCardRewardPointTrans.EntryType)));//1.Earn/2.Redeem
                xmlElement.setAttribute('ExpirationDate', date2str(loyaltyCardRewardPointTrans.ExpirationDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));
                xmlElement.setAttribute('EntryDate', date2str(loyaltyCardRewardPointTrans.EntryDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));
                xmlElement.setAttribute('EntryTime', time2str(loyaltyCardRewardPointTrans.EntryTime, TimeSeparator::Colon, TimeFormat::Hour24));

                oMOperatingUnitlocal = transQueryRun.get(tableNum(OMOperatingUnit));
                xmlElement.setAttribute('ChannelName', oMOperatingUnitlocal.Name);
                xmlRoot.appendChild(xmlElement);
            }
            xmlDoc.appendChild(xmlRoot);
            isSuccess = true;
        }
        catch(Exception::Error)
        {
            message = strFmt("@REX4160816", _cardNumber, _rewardPointId);
            isSuccess = false;
        }

        return [isSuccess, message, xmlDoc.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>IssueLoyaltyCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues a loyalty card, and joins the loyalty programs that are associated to the specificed channel.
    /// If channel recId is not provided, joins all available loyalty programs.
    /// </summary>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_cardTenderType">
    /// The tender type of the loyalty card.
    /// </param>
    /// <param name="_partyRecId">
    /// The record identifier of the party of the card owner.
    /// </param>
    /// <param name="_channelRecId">
    /// The record identifier of the channel where the loyalty card is issued.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, cardContainer, cardTierListContainer].
    /// The cardContainer contains [retailLoyaltyCard.RecId, retailLoyaltyCard.CardNumber, retailLoyaltyCard.CardTenderType, retailLoyaltyCard.Party].
    /// The cardTierListContainer contains a list of cardTierContainer.
    /// The cardTierContainer contains [cardTier.RecId, cardTier.Affiliation, cardTier.LoyaltyCard, cardTier.LoyaltyTier, cardTier.ValidFrom, cardTier.ValidTo].
    /// </remarks>
    public static container IssueLoyaltyCard(
        RetailLoyaltyCardNumber _cardNumber = '',
        RetailLoyaltyTenderType _cardTenderType = RetailLoyaltyTenderTypeBase::AsCardTender,
        DirPartyRecId _partyRecId = 0,
        RefRecid _channelRecId = 0)
    {
        #OccRetryCount

        boolean isSuccess = true;
        str message;
        str errorCode;
        container cardContainer;
        container cardTierContainer;
        container cardTierListContainer = conNull();

        DirPartyTable partyTable;
        RetailLoyaltyCard retailLoyaltyCard;
        RetailAffiliation affiliation;
        RetailLoyaltyScheme loyaltyScheme;
        RetailLoyaltySchemeChannelExploded schemeChannelExploded;
        RetailChannelTable channel;
        RetailLoyaltyCardTier cardTier, newCardTier;
        RetailLoyaltyCardNumber cardNumber;

        try
        {
            if (_partyRecId)
            {
                // Validate the existence of the party
                partyTable = DirPartyTable::findRec(_partyRecId);

                if (!partyTable)
                {
                    isSuccess = false;
                    message = strFmt("@REX4160610", _partyRecId);
                }

                RetailCustTable retailCustTable;
                CustTable custTable;

                select firstonly BlockCustomerForLoyaltyEnrollment from retailCustTable
                join custTable
                    where custTable.AccountNum == retailCustTable.accountNum
                        && custTable.Party == _partyRecId;

                if (retailCustTable.BlockCustomerForLoyaltyEnrollment)
                {
                    isSuccess = false;
                    message = strFmt("@Retail:BlockCustomerForLoyaltyEnrollment");
                }
            }

            if (isSuccess)
            {
                try
                {
                    ttsbegin;
                    [cardNumber, message, isSuccess] = RetailTransactionServiceLoyalty::getLoyaltyCardNumber(_cardNumber);

                    if (!System.String::IsNullOrEmpty(_cardNumber))
                    {
                        eventSource.EventWriteLoyaltyCardNumberProvidedByClient(funcName());
                    }
                    else if (System.String::IsNullOrEmpty(_cardNumber) && cardNumber)
                    {
                        eventSource.EventWriteLoyaltyCardNumberGeneratedUsingNumberSeqGenerator(funcName());
                    }

                    // Loyaly Card Number Generated Successfully
                    if (isSuccess)
                    {
                        // Find OperatingUnit for channel
                        OMOperatingUnit oMOperatingUnit = RetailStoreTable::findOperatingUnit(_channelRecId);

                        // Create the loyalty card
                        utcdatetime dateTimeUTC = DateTimeUtil::utcNow();
                        utcdatetime dateTimeChannel = RetailChannelTable::channelDateTime(_channelRecId);
                        retailLoyaltyCard.CardNumber = cardNumber;
                        retailLoyaltyCard.CardTenderType = _cardTenderType;
                        retailLoyaltyCard.Party = _partyRecId;
                        retailLoyaltyCard.LoyaltyEnrollmentDate = DateTimeUtil::date(dateTimeUTC);
                        retailLoyaltyCard.LoyaltyEnrollmentTime = DateTimeUtil::time(dateTimeUTC);

                        // If no channel ID was provided, save the local enrollment datetime in UTC, otherwise use the channel's timezone.
                        if (!oMOperatingUnit)
                        {
                            retailLoyaltyCard.LoyaltyEnrollmentDateLocal = DateTimeUtil::date(dateTimeUTC);
                            retailLoyaltyCard.LoyaltyEnrollmentTimeLocal = DateTimeUtil::time(dateTimeUTC);
                        }
                        else
                        {
                            retailLoyaltyCard.LoyaltyEnrollmentDateLocal = DateTimeUtil::date(dateTimeChannel);
                            retailLoyaltyCard.LoyaltyEnrollmentTimeLocal = DateTimeUtil::time(dateTimeChannel);
                        }

                        retailLoyaltyCard.OMOperatingUnitId = oMOperatingUnit.RecId;
                        retailLoyaltyCard.insert();

                        cardContainer = [retailLoyaltyCard.RecId, retailLoyaltyCard.CardNumber, enum2int(retailLoyaltyCard.CardTenderType), retailLoyaltyCard.Party,
                            date2str(retailLoyaltyCard.LoyaltyEnrollmentDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2,DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None),
                            retailLoyaltyCard.OMOperatingUnitId, retailLoyaltyCard.LoyaltyEnrollmentTime, date2str(retailLoyaltyCard.LoyaltyEnrollmentDateLocal, 321, DateDay::Digits2, DateSeparator::Hyphen,
                            DateMonth::Digits2,DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None), retailLoyaltyCard.LoyaltyEnrollmentTimeLocal];

                        if (_channelRecId)
                        {
                            // Add the loyalty programs that are associated to the channel
                            while select RecId from affiliation where affiliation.AffiliationType == RetailAffiliationType::Loyalty
                                exists join loyaltyScheme where loyaltyScheme.Affiliation == affiliation.RecId
                                exists join schemeChannelExploded where schemeChannelExploded.LoyaltyScheme == loyaltyScheme.RecId
                                exists join channel where channel.OMOperatingUnitID == schemeChannelExploded.OMOperatingUnit
                                                        && channel.RecId == _channelRecId
                            {
                                cardTier.clear();
                                cardTier.Affiliation = affiliation.RecId;
                                cardTier.LoyaltyCard = retailLoyaltyCard.RecId;
                                cardTier.LoyaltyTier = 0;
                                cardTier.ValidFrom = dateNull();
                                cardTier.ValidTo = maxDate();
                                cardTier.insert();
                            }
                        }
                        else
                        {
                            // Add the card to all loyalty groups with the default tier
                            while select RecId from affiliation where affiliation.AffiliationType == RetailAffiliationType::Loyalty
                            {
                                cardTier.clear();
                                cardTier.Affiliation = affiliation.RecId;
                                cardTier.LoyaltyCard = retailLoyaltyCard.RecId;
                                cardTier.LoyaltyTier = 0;
                                cardTier.ValidFrom = dateNull();
                                cardTier.ValidTo = maxDate();
                                cardTier.insert();
                            }
                        }

                        // Apply loyalty tier rules, maybe the card is immediately eligible for some tiers.
                        RetailLoyaltyManager::EvaluateLoyaltyCardTiers(cardNumber);
                        // Collect card tiers after evaluation.
                        while select newCardTier
                            where newCardTier.LoyaltyCard == retailLoyaltyCard.RecId
                        {
                            cardTierContainer = [newCardTier.RecId, newCardTier.Affiliation, newCardTier.LoyaltyCard, newCardTier.LoyaltyTier,
                                date2str(newCardTier.ValidFrom, 321 ,DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2,DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None),
                                date2str(newCardTier.ValidTo,321 ,DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2,DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None)];
                            cardTierListContainer += [cardTierContainer];
                        }
                    }
                    else
                    {
                        // Loyalty Card Number already in use.
                        errorCode = 'DuplicateLoyaltyCard';
                        throw Exception::Error;
                    }
                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() < #RetryNum)
                    {
                        eventSource.EventWriteIssueLoyaltyCardExceptionWithRetries(funcName(), 'Deadlock', xSession::currentRetryCount(), #RetryNum, true);
                        retry;
                    }
                    else    // Exceeded amount of retries
                    {
                        throw Exception::Deadlock;
                    }
                }
                catch (Exception::DuplicateKeyException)
                {
                    if (xSession::currentRetryCount() < #RetryNum)
                    {
                        eventSource.EventWriteIssueLoyaltyCardExceptionWithRetries(funcName(), 'Duplicate Key', xSession::currentRetryCount(), #RetryNum, true);
                        retry;
                    }
                    else
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                }
            }
        }
        catch
        {
            str axCallStack = con2Str(xSession::xppCallStack()); // Use AX call stack for Exception::Error
            isSuccess = false;
            eventSource.EventWriteLoyaltyCardIssueFailed(message, _partyRecId, enum2Str(_cardTenderType), _channelRecId, axCallStack);
        }

        if (isSuccess)
        {
            eventSource.EventWriteLoyaltyCardIssueSucceeded(_partyRecId, enum2Str(_cardTenderType), _channelRecId, retailLoyaltyCard.RecId);
            return [isSuccess, message, cardContainer, cardTierListContainer];
        }
        else
        {
            str axCallStack = con2Str(xSession::xppCallStack());
            eventSource.EventWriteLoyaltyCardIssueFailed(message, _partyRecId, enum2Str(_cardTenderType), _channelRecId, axCallStack);
            return [isSuccess, message, errorCode];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostLoyaltyCardRewardPointTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts reward points to the <c>PostLoyaltyCardRewardPointTrans</c> table.
    /// </summary>
    /// <param name="_rewardPointTransXmlStr">
    /// The XML string that contains a list of reward point lines.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The XML string has a root node RetailLoyaltyCardRewardPointTransList, which contains
    /// a list of RetailLoyaltyCardRewardPointTrans nodes. Each child node conains the field
    /// values of a <c>PostLoyaltyCardRewardPointTrans</c> record. Refer to the
    /// <c>PostLoyaltyCardRewardPointTrans</c> table for the meaning of each field.
    ///
    /// A sample of XML is provided in the source code.
    /// </remarks>
    public static container PostLoyaltyCardRewardPointTrans(str _rewardPointTransXmlStr)
    {
        /*
        Below is a sample XML. Note, the sequence of date components is 213.
        <RetailLoyaltyCardRewardPointTransList>
            <RetailLoyaltyCardRewardPointTrans>
                 <AdjustmentId>RLA00000001</AdjustmentId>
                 <Affiliation>5637145336</Affiliation>
                 <CardNumber>100001</CardNumber>
                 <Channel>5637144576</Channel>
                 <CustAccount>1101</CustAccount>
                 <CustAccountDataAreaId>DAT</CustAccountDataAreaId>
                 <EntryDate>05/23/2013</EntryDate>
                 <EntryTime>23:01:37</EntryTime>
                 <EntryType>1</EntryType>
                 <ExpirationDate>05/23/2013</ExpirationDate>
                 <LoyaltyTier>5637145333</LoyaltyTier>
                 <LoyaltyTransactionType>1</LoyaltyTransactionType>
                 <LoyaltyTransDataAreaId>DAT</LoyaltyTransDataAreaId>
                 <LoyaltyTransLineNum>1</LoyaltyTransLineNum>
                 <ReceiptId>00010101100001</ReceiptId>
                 <RewardPoint>5637145335</RewardPoint>
                 <RewardPointAmountQty>103.90</RewardPointAmountQty>
                 <SalesId>SO-100001</SalesId>
                 <StaffId>10001</StaffId>
                 <StoreId>S0001</StoreId>
                 <TerminalId>0101</TerminalId>
                 <TransactionId>12743974219</TransactionId>
            </RetailLoyaltyCardRewardPointTrans>
            <RetailLoyaltyCardRewardPointTrans>
            ...
            </RetailLoyaltyCardRewardPointTrans>
        </RetailLoyaltyCardRewardPointTransList>
        * */

        return RetailTransactionServiceLoyalty::PostLoyaltyCardRewardPointXmlToLoyaltyTrans(_rewardPointTransXmlStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostLoyaltyCardRewardPointTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts reward points to the <c>PostLoyaltyCardRewardPointTrans</c> table.
    /// </summary>
    /// <param name="_rewardPointTransXmlStr">
    /// The XML string that contains a list of reward point lines.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The XML string has a root node RetailLoyaltyCardRewardPointTransList, which contains
    /// a list of RetailLoyaltyCardRewardPointTrans nodes. Each child node conains the field
    /// values of a <c>PostLoyaltyCardRewardPointTrans</c> record. Refer to the
    /// <c>PostLoyaltyCardRewardPointTrans</c> table for the meaning of each field.
    ///
    /// A sample of XML is provided in the source code.
    /// </remarks>
    public static container PostLoyaltyCardRewardPointTransLines(str _rewardPointTransXmlStr)
    {
        /*
        Below is a sample XML. Note, the sequence of date components is 213.
        <RetailLoyaltyCardRewardPointTransList>
            <RetailLoyaltyCardRewardPointTrans>
                 <AdjustmentId>RLA00000001</AdjustmentId>
                 <Affiliation>5637145336</Affiliation>
                 <CardNumber>100001</CardNumber>
                 <Channel>5637144576</Channel>
                 <CustAccount>1101</CustAccount>
                 <CustAccountDataAreaId>DAT</CustAccountDataAreaId>
                 <EntryDate>05/23/2013</EntryDate>
                 <EntryTime>23:01:37</EntryTime>
                 <EntryType>1</EntryType>
                 <ExpirationDate>05/23/2013</ExpirationDate>
                 <LoyaltyTier>5637145333</LoyaltyTier>
                 <LoyaltyTransactionType>1</LoyaltyTransactionType>
                 <LoyaltyTransDataAreaId>DAT</LoyaltyTransDataAreaId>
                 <LoyaltyTransLineNum>1</LoyaltyTransLineNum>
                 <ReceiptId>00010101100001</ReceiptId>
                 <RewardPoint>5637145335</RewardPoint>
                 <RewardPointAmountQty>103.90</RewardPointAmountQty>
                 <SalesId>SO-100001</SalesId>
                 <SalesLineLineNum>1.00</SalesLineLineNum>
                 <StaffId>10001</StaffId>
                 <StoreId>S0001</StoreId>
                 <TerminalId>0101</TerminalId>
                 <TransactionId>12743974219</TransactionId>
                 <RetailTransactionSalesTransLineNum>1.00</RetailTransactionSalesTransLineNum>
            </RetailLoyaltyCardRewardPointTrans>
            <RetailLoyaltyCardRewardPointTrans>
            ...
            </RetailLoyaltyCardRewardPointTrans>
        </RetailLoyaltyCardRewardPointTransList>
        * */

        return RetailTransactionServiceLoyalty::PostLoyaltyCardRewardPointXmlToLoyaltyTrans(_rewardPointTransXmlStr, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostLoyaltyCardRewardPointXmlToLoyaltyTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts reward points to the <c>RetailLoyaltyCardRewardPointTrans</c> table.
    /// </summary>
    /// <param name="_rewardPointTransXmlStr">
    /// The XML string that contains a list of reward point lines.
    /// </param>
    /// <param name="_hasSalesLineNumber">
    /// The flag indicating whether the xml contains the sales line number of the transactions.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The XML string has a root node RetailLoyaltyCardRewardPointTransList, which contains
    /// a list of RetailLoyaltyCardRewardPointTrans nodes. Each child node conains the field
    /// values of a <c>RetailLoyaltyCardRewardPointTrans</c> record. Refer to the
    /// <c>RetailLoyaltyCardRewardPointTrans</c> table for the meaning of each field.
    ///
    /// A sample of XML is provided in the source code.
    /// </remarks>
    private static container PostLoyaltyCardRewardPointXmlToLoyaltyTrans(str _rewardPointTransXmlStr, boolean _hasSalesLineNumber = false)
    {
        /*
        Below is a sample XML. Note, the sequence of date components is 213.
        <RetailLoyaltyCardRewardPointTransList>
            <RetailLoyaltyCardRewardPointTrans>
                 <AdjustmentId>RLA00000001</AdjustmentId>
                 <Affiliation>5637145336</Affiliation>
                 <CardNumber>100001</CardNumber>
                 <Channel>5637144576</Channel>
                 <CustAccount>1101</CustAccount>
                 <CustAccountDataAreaId>DAT</CustAccountDataAreaId>
                 <EntryDate>05/23/2013</EntryDate>
                 <EntryTime>23:01:37</EntryTime>
                 <EntryType>1</EntryType>
                 <ExpirationDate>05/23/2013</ExpirationDate>
                 <LoyaltyTier>5637145333</LoyaltyTier>
                 <LoyaltyTransactionType>1</LoyaltyTransactionType>
                 <LoyaltyTransDataAreaId>DAT</LoyaltyTransDataAreaId>
                 <LoyaltyTransLineNum>1</LoyaltyTransLineNum>
                 <ReceiptId>00010101100001</ReceiptId>
                 <RewardPoint>5637145335</RewardPoint>
                 <RewardPointAmountQty>103.90</RewardPointAmountQty>
                 <SalesId>SO-100001</SalesId>
                 <SalesLineLineNum>1.00</SalesLineLineNum>
                 <StaffId>10001</StaffId>
                 <StoreId>S0001</StoreId>
                 <TerminalId>0101</TerminalId>
                 <TransactionId>12743974219</TransactionId>
                 <RetailTransactionSalesTransLineNum>1.00</RetailTransactionSalesTransLineNum>
            </RetailLoyaltyCardRewardPointTrans>
            <RetailLoyaltyCardRewardPointTrans>
            ...
            </RetailLoyaltyCardRewardPointTrans>
        </RetailLoyaltyCardRewardPointTransList>
        * */

        XmlDocument rewardPointTransXmlDoc;
        XmlElement  xmlRoot;
        XmlElement  xmlRecord;
        XmlNodeList xmlRecordList;

        boolean isSuccess;
        str message;
        int i;
        RetailLoyaltyCardRewardPointTrans trans, existingLoyaltyTrans;
        Date expirationDate;
        RetailLoyaltyOtherActivityType retailLoyaltyOtherActivityType;
        str loyaltyOtherActivityTypeId;

        RetailTransactionId transactionId;
        RetailLoyaltyCardNumber cardNumber; 
        LineNum loyaltyTransLineNum;
        RetailLoyaltyRewardPointAmountQty rewardPointAmountQty;

        try
        {
            rewardPointTransXmlDoc = new XmlDocument();
            rewardPointTransXmlDoc.loadXml(_rewardPointTransXmlStr);

            xmlRoot = rewardPointTransXmlDoc.documentElement();
            xmlRecordList = xmlRoot.childNodes();

            if (xmlRecordList)
            {
                try
                {
                    ttsBegin;

                    isSuccess = true;
                    // Try to insert reward point trans. If one fails, all fail.
                    for (i = 0; i < xmlRecordList.length() && isSuccess; i++)
                    {
                        xmlRecord = xmlRecordList.item(i);

                        transactionId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'TransactionId');
                        cardNumber = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'CardNumber');
                        loyaltyTransLineNum = str2num(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'LoyaltyTransLineNum'));
                        rewardPointAmountQty = str2num(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'RewardPointAmountQty'));

                        // Check entry in RetailLoyaltyCardRewardPointTrans exists, to revoke duplicate entry in RetailLoyaltyCardRewardPointTrans.
                        select firstonly transactionId, RecId from existingLoyaltyTrans
                            where existingLoyaltyTrans.transactionId ==  transactionId &&
                            existingLoyaltyTrans.cardnumber == cardNumber &&
                            existingLoyaltyTrans.loyaltytranslinenum == loyaltyTransLineNum &&
                            existingLoyaltyTrans.RewardPointAmountQty == rewardPointAmountQty;

                        if (existingLoyaltyTrans.transactionId)
                        {
                            eventSource.EventWriteRecordAlreadyExistsInRetailLoyaltyCardRewardPointTrans(existingLoyaltyTrans.RecId);
                            continue;
                        }

                        trans.clear();
                        trans.AdjustmentId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'AdjustmentId');
                        trans.Affiliation = str2recId(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'Affiliation'));
                        trans.CardNumber = cardNumber;
                        trans.Channel = str2recId(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'Channel'));
                        trans.CustAccount = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'CustAccount');
                        trans.CustAccountDataAreaId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'CustAccountDataAreaId');
                        trans.EntryDate = str2Date(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'EntryDate'), 213);
                        trans.EntryTime = str2time(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'EntryTime'));
                        trans.EntryType = str2int(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'EntryType'));
                        trans.LoyaltyTier = str2recId(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'LoyaltyTier'));
                        trans.LoyaltyTransactionType = str2int(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'LoyaltyTransactionType'));
                        trans.loyaltyTransDataAreaId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'LoyaltyTransDataAreaId');
                        trans.LoyaltyTransLineNum = loyaltyTransLineNum;
                        trans.ReceiptId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'ReceiptId');
                        trans.RewardPoint = str2recId(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'RewardPoint'));
                        trans.RewardPointAmountQty = rewardPointAmountQty;
                        trans.SalesId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'SalesId');
                        trans.StaffId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'StaffId');
                        trans.storeId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'StoreId');
                        trans.terminalId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'TerminalId');
                        trans.transactionId = transactionId;

                        loyaltyOtherActivityTypeId = RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'LoyaltyOtherActivityTypeId');

                        if (loyaltyOtherActivityTypeId)
                        {
                            trans.NonTransactionalActivityId = numberSeq::newGetNumFromId(RetailParameters::numRefNonTransactionalActivityId().NumberSequenceId).num();
                            trans.LoyaltyOtherActivityTypeId = retailLoyaltyOtherActivityType.findLoyaltyOtherActivityTypeRecId(loyaltyOtherActivityTypeId).RecId;
                        }

                        if (_hasSalesLineNumber)
                        {
                            trans.RetailTransactionSalesTransLineNum = str2num(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'RetailTransactionSalesTransLineNum'));
                            trans.SalesLineLineNum = str2num(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'SalesLineLineNum'));
                        }

                        // When the ExpirationDate is set to the DateTime.MaxValue in .NET, it will be converted into 12/31/1900 in AX.
                        expirationDate = str2Date(RetailTransactionServiceLoyalty::getElementTextValue(xmlRecord, 'ExpirationDate'), 213);
                        if (expirationDate && expirationDate != str2Date('12-31-1900', 213))
                        {
                            trans.ExpirationDate = expirationDate;
                        }
                        else
                        {
                            trans.ExpirationDate = maxDate();
                        }

                        // Post points.
                        [isSuccess, message] = RetailLoyaltyManager::PostLoyaltyCardRewardPointTrans(trans);
                    }

                    if (isSuccess)
                    {
                        ttsCommit;
                    }
                    else
                    {
                        ttsAbort;
                    }
                }
                catch
                {
                    ttsAbort;
                    message = strFmt("@REX4160632", trans.loyaltyTransDataAreaId, trans.transactionId, trans.LoyaltyTransLineNum);
                    eventSource.EventWriteLoyaltyPostException(funcName());
                    isSuccess = false;
                }
            }
        }
        catch
        {
            message = "@REX4160633";
            eventSource.EventWriteLoyaltyLoadOrParseException(funcName());
            isSuccess = false;
        }
        return [isSuccess, message, trans.NonTransactionalActivityId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyCardRewardPointsStatusWithExpiringPoints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reward point status of the loyalty card(s) including Issued, Used, Expired, Active, Unvested and Expiring points.
    /// </summary>
    /// <param name="channelLocalDateStr">
    /// The channel local date in 213 sequence.
    /// </param>
    /// <param name="_cardNumber">
    /// The loyalty card number.
    /// </param>
    /// <param name="_excludeBlocked">
    /// The flag indicating whether to exclude the card status if the card is blocked.
    /// </param>
    /// <param name="_excludeNoTender">
    /// The flag indicating whether to exclude the card status if the card is no tender or blocked.
    /// </param>
    /// <param name="_includeRelatedCardsForContactTender">
    /// The flag indicating whether to include the status of the related cards if the given card is contact tender.
    /// </param>
    /// <param name="_includeNonRedeemablePoints">
    /// The flag indicating whether to include non-redeemable points status in the result.
    /// </param>
    /// <param name="_includeActivePointsOnly">
    /// The flag indicating whether to return only the active points; otherwise, returns the status of issued, used, and expired points.
    /// </param>
    /// <param name="_includeExpiringAndUnvestedPoints">
    /// The flag indicating whether to return the expiring and unvested points.
    /// </param>
    /// <param name="_noOfDaysToExpiry">
    /// The count of days until expiring points will be expired.
    /// </param>
    /// <param name="_languageId">
    /// The language ID of the reward point description.
    /// </param>
    /// <returns>
    /// The result container contains [isSuccess, Message, PointStatusXML].
    /// </returns>
    /// <remarks>
    /// This method is intended for use on POS payment views, and will allow users to view the
    /// loyalty reward points they may use to pay part or all of the balance of a transaction that is in progress.
    /// </remarks>
    public static container GetLoyaltyCardRewardPointsStatusWithExpiringPoints(
        str channelLocalDateStr,
        RetailLoyaltyCardNumber _cardNumber,
        boolean _excludeBlocked,
        boolean _excludeNoTender,
        boolean _includeRelatedCardsForContactTender,
        boolean _includeNonRedeemablePoints,
        boolean _includeActivePointsOnly,
        boolean _includeExpiringAndUnvestedPoints,
        int64 _noOfDaysToExpiry,
        LanguageIdAll _languageId = SystemParameters::getSystemLanguageId()
        )
    {
        boolean isSuccess = true;
        str message;
        date channelLocalDate = str2Date(channelLocalDateStr, 213);

        List cardNumberList = RetailTransactionServiceLoyalty::GetCardList(_cardNumber, _excludeBlocked, _excludeNoTender, _includeRelatedCardsForContactTender);

        // Get point status in XML
        str statusXML = RetailTransactionServiceLoyalty::GetLoyaltyCardRewardPointsStatusXML(channelLocalDate, cardNumberList,
            _includeNonRedeemablePoints, _includeActivePointsOnly, _includeExpiringAndUnvestedPoints, _noOfDaysToExpiry, _languageId);

        // Return
        return [isSuccess, message, statusXML];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCardList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of loyalty cards.
    /// </summary>
    /// <param name="_cardNumber">
    /// The loyalty card number.
    /// </param>
    /// <param name="_excludeBlocked">
    /// The flag indicating whether to exclude the card status if the card is blocked.
    /// </param>
    /// <param name="_excludeNoTender">
    /// The flag indicating whether to exclude the card status if the card is no tender or blocked.
    /// </param>
    /// <param name="_includeRelatedCardsForContactTender">
    /// The flag indicating whether to include the status of the related cards if the given card is contact tender.
    /// </param>
    /// <returns>
    /// The list of loyalty cards.
    /// </returns>
    private static List GetCardList(
        RetailLoyaltyCardNumber _cardNumber,
        boolean _excludeBlocked,
        boolean _excludeNoTender,
        boolean _includeRelatedCardsForContactTender)
    {
        List cardNumberList = new List(Types::String);
        RetailLoyaltyCard loyaltyCard, relatedCard;
        
        // Collect the card number list that need to retrieve point status for
        loyaltyCard = RetailLoyaltyCard::findByCardNumber(_cardNumber);

        // Exclude the card status if the card is blocked or no tender
        if (!(_excludeBlocked && loyaltyCard.CardTenderType == RetailLoyaltyTenderTypeBase::Blocked)
            && !(_excludeNoTender && loyaltyCard.CardTenderType == RetailLoyaltyTenderTypeBase::NoTender))
        {

            // If loyalty card is 'ContactTender' type and is associated with a customer --> Consider all loyalty cards that:
            //      a) Are assigned to same customer.
            //      b) Are not 'Blocked' unless 'Blocked' card are explicitly specified to be included.
            if (_includeRelatedCardsForContactTender
                && loyaltyCard.CardTenderType == RetailLoyaltyTenderTypeBase::AsContactTender
                && loyaltyCard.Party)
            {
                while select CardNumber from relatedCard
                    where relatedCard.Party == loyaltyCard.Party
                    && (relatedCard.CardTenderType != RetailLoyaltyTenderTypeBase::Blocked || !_excludeBlocked)
                {
                    cardNumberList.addEnd(relatedCard.CardNumber);
                }
            }
            else // Consider current card only.
            {
                cardNumberList.addEnd(loyaltyCard.CardNumber);
            }
        }

        return cardNumberList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyRewardPointsExpiringInNDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card reward points expiring in next 'N' days (date and points expiring on that date).
    /// </summary>
    /// <param name="_channelLocalDateStr">
    /// The channel local date in 213 sequence.
    /// </param>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_noOfDaysToExpiry">
    /// The number of days until points are going to expire.
    /// </param>
    /// <param name="_calculateAggregatedPoints">
    /// The flag indicating whether the result should contains the aggregated points.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, xmlResultString].
    /// </remarks>
    public static container GetLoyaltyRewardPointsExpiringInNDays(
        str _channelLocalDateStr,
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _noOfDaysToExpiry,
        boolean _calculateAggregatedPoints = false,
        int64 _top = 1,
        int64 _skip = 0)
    {
        boolean isSuccess = false;
        str message;
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;
        XmlElement          xmlElement;

        Query transQuery = new Query();
        QueryBuildDataSource transDS;
        QueryRun transQueryRun;
        QueryBuildRange cardNumberRange;
        QueryBuildRange rewardPointRange;
        QueryBuildRange dateRange;
        QueryBuildRange remainingPointsRange;

        RetailLoyaltyCardRewardPointTrans loyaltyCardRewardPointTrans;
        RetailLoyaltyRewardPoint loyaltyRewardPoint;

        RecId rewardPointRecId;
        date channelLocalDate = str2Date(_channelLocalDateStr, 213);
        RetailLoyaltyRewardPointAmountQty totalPointsToExpireByNDays = 0;

        try
        {
            // Retrieve rewardPointRecId
            select RecId
            from loyaltyRewardPoint
                where loyaltyRewardPoint.RewardPointId == _rewardPointId;
            rewardPointRecId = loyaltyRewardPoint.RecId;

            // Get total number of points
            if (_calculateAggregatedPoints)
            {
                select sum(Remaining) from loyaltyCardRewardPointTrans
                where ((loyaltyCardRewardPointTrans.RewardPoint == rewardPointRecId)
                        && (loyaltyCardRewardPointTrans.CardNumber == _cardNumber))
                   && (loyaltyCardRewardPointTrans.EntryType == RetailLoyaltyRewardPointEntryType::Earn
                        || loyaltyCardRewardPointTrans.EntryType == RetailLoyaltyRewardPointEntryType::Adjust
                        || loyaltyCardRewardPointTrans.EntryType == RetailLoyaltyRewardPointEntryType::Refund)
                   && (loyaltyCardRewardPointTrans.ExpirationDate
                    && loyaltyCardRewardPointTrans.ExpirationDate >= channelLocalDate && loyaltyCardRewardPointTrans.ExpirationDate <= channelLocalDate + _noOfDaysToExpiry)
                   && loyaltyCardRewardPointTrans.Remaining > 0;

                totalPointsToExpireByNDays = loyaltyCardRewardPointTrans.Remaining;
            }

            // Add a datasource to a query
            transDS = transQuery.addDataSource(tableNum(RetailLoyaltyCardRewardPointTrans));
            transDS.name(tableId2Name(tableNum(RetailLoyaltyCardRewardPointTrans)));

            // Order the datasource by expiration date ascending
            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, ExpirationDate), SortOrder::Ascending);

            // Get only records for which CardNumber equals _cardNumber
            cardNumberRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, CardNumber));
            cardNumberRange.Value(_cardNumber);

            // Get only records for which RewardPoint equals rewardPointRecId
            rewardPointRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RewardPoint));
            rewardPointRange.Value(int642str(rewardPointRecId));

            // Get only records with a RetailLoyaltyRewardPointEntryType of Earn, Refund or Adjust, 
            // as these are the types from which it is possible for points to be redeemed and thus to expire
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Earn));
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Refund));
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Adjust));

            // Get only records within the specified date range starting at channelLocalDate and ending at channelLocalDate + _noOfDaysToExpiry
            dateRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, ExpirationDate));
            dateRange.value(queryRange(channelLocalDate, channelLocalDate + _noOfDaysToExpiry));

            // Get only records with remaining points > 0
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RecId)).value(
                strFmt('(%1.%2 > 0)',
                transDS.name(),
                fieldStr(RetailLoyaltyCardRewardPointTrans, Remaining)));

            // Create query run instance
            transQueryRun = new QueryRun(transQuery);

            // Enable position paging for the queryrun object
            transQueryRun.enablePositionPaging(true);

            // Add a range by providing the parameters as starting record number and number of records
            transQueryRun.addPageRange(_skip + 1, _top);

            // Create XML document to return results of query
            xmlDoc = XMLDocument::newBlank();

            // Create root XML element
            xmlRoot = xmlDoc.createElement('LoyaltyCardRewardPointExpirationTimelines');

            // Append common information
            xmlRoot.setAttribute('TotalPointsToExpire', num2str(totalPointsToExpireByNDays, 0, 2, 1, 0));

            // Loop through the query results and create XML child nodes
            while (transQueryRun.next())
            {
                xmlElement = xmlDoc.createElement('LoyaltyCardRewardPointExpirationTimeline');
                loyaltyCardRewardPointTrans = transQueryRun.get(tableNum(RetailLoyaltyCardRewardPointTrans));

                // Add the query records with Remaining > 0, i.e. with Expiring Points > 0, to the XML element.
                xmlElement.setAttribute('Remaining', num2str(loyaltyCardRewardPointTrans.Remaining, 0, 2, 1, 0));

                // Notes for CRT API:
                // EntryType corresponds to obsolete property LoyaltyRewardPointTimelineEntryType on the LoyaltyRewardPointActivity object.
                // This is the only API for which it should not be null.
                // EntryTypeEnum corresponds to the property LoyaltyRewardPointActivityEntryType on the LoyaltyRewardPointActivity object.
                xmlElement.setAttribute('EntryType', strFmt("@Retail:RetailLoyaltyRewardPointActivityEntryTypeExpiring"));
                xmlElement.setAttribute('EntryTypeEnumValue', int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Expiring)));
                xmlElement.setAttribute('ExpirationDate', date2str(loyaltyCardRewardPointTrans.ExpirationDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));
                xmlRoot.appendChild(xmlElement);
            };
            xmlDoc.appendChild(xmlRoot);
            isSuccess = true;
        }
        catch(Exception::Error)
        {
            message = strFmt("@REX4160816", _cardNumber, _rewardPointId);
            isSuccess = false;
        }

        return [isSuccess, message, xmlDoc.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyRewardPointActivityTimeline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card reward points activity timeline.
    /// </summary>
    /// <param name="_channelLocalDateStr">
    /// The channel local date in 213 sequence.
    /// </param>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, xmlResultString].
    /// A sample of the result XML is provided in the source code.
    /// </remarks>
    public static container GetLoyaltyRewardPointActivityTimeline(
        str _channelLocalDateStr,
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _top = 1,
        int64 _skip = 0)
    {
        boolean isSuccess = false;
        str message;

        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;
        XmlElement          xmlElement;

        Query transQuery = new Query();
        QueryBuildDataSource transDS;
        QueryRun transQueryRun;
        QueryBuildRange cardRange;
        QueryBuildRange pointRange;
        QueryBuildRange startDateRange;

        RetailLoyaltyCardRewardPointTrans loyaltyCardRewardPointTrans;
        RetailLoyaltyRewardPoint loyaltyRewardPoint;
        RetailLoyaltyCard card;
        RetailLoyaltyRewardPointAmountQty pending;

        RecId rewardPointRecId;
        date utcDate = str2Date(_channelLocalDateStr, 213);

        try
        {
            // Retrieve rewardPointRecId.
            select RecId
            from loyaltyRewardPoint
                where loyaltyRewardPoint.RewardPointId == _rewardPointId;
            rewardPointRecId = loyaltyRewardPoint.RecId;

            // Create a query and add a datasource.
            transDS = transQuery.addDataSource(tableNum(RetailLoyaltyCardRewardPointTrans));
            transDS.name(tableId2Name(tableNum(RetailLoyaltyCardRewardPointTrans)));

            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryDate), SortOrder::Descending, 0);
            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, RecId), SortOrder::Descending, 1);

            // Select records where CardNumber = _cardNumber and RewardPoint = rewardPointRecId.
            cardRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, CardNumber));
            cardRange.value(_cardNumber);

            pointRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RewardPoint));
            pointRange.value(int642str(rewardPointRecId));

            // Get only records with vested points (StartDate <= utcDate) by selecting based on the start date.
            startDateRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RecId));
            startDateRange.value(
                strFmt('(%1.%2<=%3)',
                transDS.name(),
                fieldStr(RetailLoyaltyCardRewardPointTrans, StartDate),
                DateTimeUtil::toStr(utcDate)));

            // Create query run instance
            transQueryRun = new QueryRun(transQuery);

            // Enable position paging for the queryrun object
            transQueryRun.enablePositionPaging(true);

            // Add a range by providing the parameters as starting record number and number of records
            transQueryRun.addPageRange(_skip + 1, _top);

            // Create XML document to return results of query
            xmlDoc = XMLDocument::newBlank();

            // Create root XML elements.
            xmlRoot = xmlDoc.createElement('LoyaltyCardActivities');

            // Add pending points to the top of the XML on the first page of results as indicated by _skip = 0.
            // Pending points will be not be added to the XML if they are 0.

            // Retrieve pending points.
            card = RetailLoyaltyCard::findByCardNumber(_cardNumber);
            pending = RetailLoyaltyCardRewardPointTrans::calcPoints(card, rewardPointRecId, RetailLoyaltyPointStatusTypeBase::Unvested, utcDate);
            
            if (_skip == 0 && pending > 0) {

                // Add a pending points activity XML element to the root XML.
                xmlElement = xmlDoc.createElement('LoyaltyCardActivity');

                xmlElement.setAttribute('RewardPointAmountQty', num2str(pending, 0, 2, 1, 0));

                // Notes for CRT API:
                // EntryType corresponds to obsolete property LoyaltyRewardPointTimelineEntryType on the LoyaltyRewardPointActivity object.
                // EntryTypeEnum corresponds to the property LoyaltyRewardPointActivityEntryType on the LoyaltyRewardPointActivity object.
                xmlElement.setAttribute('EntryType', null);
                xmlElement.setAttribute('EntryTypeEnumValue', int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Pending)));
                xmlElement.setAttribute('ActivityDate', date2str(utcDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));

                xmlRoot.appendChild(xmlElement);
            }

            // Add all vested records as child nodes of the element LoyaltyCardActivities.
            while (transQueryRun.next())
            {
                xmlElement = xmlDoc.createElement('LoyaltyCardActivity');
                loyaltyCardRewardPointTrans = transQueryRun.get(tableNum(RetailLoyaltyCardRewardPointTrans));

                xmlElement.setAttribute('RewardPointAmountQty', num2str(loyaltyCardRewardPointTrans.RewardPointAmountQty, 0, 2, 1, 0));

                // Notes for CRT API:
                // EntryType corresponds to obsolete property LoyaltyRewardPointTimelineEntryType on the LoyaltyRewardPointActivity object.
                // EntryTypeEnum corresponds to the property LoyaltyRewardPointActivityEntryType on the LoyaltyRewardPointActivity object.
                xmlElement.setAttribute('EntryType', null);
                xmlElement.setAttribute('EntryTypeEnumValue', RetailTransactionServiceLoyalty::GetActivityEntryTypeEnumAsString(loyaltyCardRewardPointTrans.EntryType));
                xmlElement.setAttribute('ActivityDate', date2str(loyaltyCardRewardPointTrans.EntryDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));

                xmlRoot.appendChild(xmlElement);
            }

            // Append xmlRoot to xmlDoc
            xmlDoc.appendChild(xmlRoot);

            isSuccess = true;
        }
        catch(Exception::Error)
        {
            message = strFmt("@REX4160816", _cardNumber, _rewardPointId);
            isSuccess = false;
        }

        return [isSuccess, message, xmlDoc.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoyaltyRewardPointActivityTimelineForExpiredPoints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get loyalty card reward points activity timeline for expired points.
    /// </summary>
    /// <param name="_channelLocalDateStr">
    /// The channel local date in 213 sequence.
    /// </param>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_rewardPointId">
    /// The reward point Id.
    /// </param>
    /// <param name="_top">
    /// The top count, i.e. the number of transactions to get.
    /// </param>
    /// <param name="_skip">
    /// The skip number, i.e. the number of transactions to skip.
    /// </param>
    /// <returns>
    /// A container having the result.
    /// </returns>
    /// <remarks>
    /// The result container contains [isSuccess, Message, xmlResultString].
    /// A sample of the result XML is provided in the source code.
    /// </remarks>
    public static container GetLoyaltyRewardPointActivityTimelineForExpiredPoints(
        str _channelLocalDateStr,
        RetailLoyaltyCardNumber _cardNumber,
        RetailLoyaltyRewardPointId _rewardPointId,
        int64 _top = 1,
        int64 _skip = 0)
    {
        boolean isSuccess = false;
        str message;
        XmlDocument         xmlDoc;
        XmlElement          xmlRoot;
        XmlElement          xmlElement;

        Query transQuery = new Query();
        QueryBuildDataSource transDS;
        QueryRun transQueryRun;
        QueryBuildRange cardNumberRange;
        QueryBuildRange rewardPointRange;
        QueryBuildRange expirationDateRange, expirationDateRange2;
        QueryBuildRange remainingPointsRange;

        RetailLoyaltyCardRewardPointTrans loyaltyCardRewardPointTrans;
        RetailLoyaltyRewardPoint loyaltyRewardPoint;

        RecId rewardPointRecId;
        date utcDate = str2Date(_channelLocalDateStr, 213);
        date minDate = str2Date("01/01/1900", 213);         // The minumum date for record retrieval.

        try
        {
            // Retrieve rewardPointRecId
            select RecId
            from loyaltyRewardPoint
                where loyaltyRewardPoint.RewardPointId == _rewardPointId;
            rewardPointRecId = loyaltyRewardPoint.RecId;

            // Add a datasource to a query
            transDS = transQuery.addDataSource(tableNum(RetailLoyaltyCardRewardPointTrans));
            transDS.name(tableId2Name(tableNum(RetailLoyaltyCardRewardPointTrans)));

            // Order the datasource by expiration date ascending
            transDS.addOrderByField(fieldNum(RetailLoyaltyCardRewardPointTrans, ExpirationDate), SortOrder::Descending);

            // Get only records for which CardNumber equals _cardNumber
            cardNumberRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, CardNumber));
            cardNumberRange.value(_cardNumber);

            // Get only records for which RewardPoint equals rewardPointRecId
            rewardPointRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RewardPoint));
            rewardPointRange.value(int642str(rewardPointRecId));

            // Get only records with a RetailLoyaltyRewardPointEntryType of Earn, Refund or Adjust,
            // as these are the types from which it is possible for points to be redeemed and thus to expire
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Earn));
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Refund));
            transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, EntryType)).value(queryValue(RetailLoyaltyRewardPointEntryType::Adjust));

            // Get only records with remaining points > 0, as only remaining points can expire.
            remainingPointsRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, Remaining));
            remainingPointsRange.value('>0');

            // Get only records with an expiration date that is today or in the past.
            // Do not get records where the expiration date was not set or is less than 01/01/1900.
            expirationDateRange = transDS.addRange(fieldNum(RetailLoyaltyCardRewardPointTrans, RecId));
            expirationDateRange.value(strFmt('( (%1.%2 <= %3) && (%1.%2 > %4) )',
                        transDS.name(),
                        fieldStr(RetailLoyaltyCardRewardPointTrans, ExpirationDate),
                        date2StrXpp(utcDate),
                        date2StrXpp(minDate)));

            // Create query run instance
            transQueryRun = new QueryRun(transQuery);

            // Enable position paging for the queryrun object
            transQueryRun.enablePositionPaging(true);

            // Add a range by providing the parameters as starting record number and number of records
            transQueryRun.addPageRange(_skip + 1, _top);

            // Create XML document to return results of query
            xmlDoc = XMLDocument::newBlank();

            // Create root XML element
            xmlRoot = xmlDoc.createElement('LoyaltyCardActivities');

            // Loop through the query results and create XML child nodes
            while (transQueryRun.next())
            {
                loyaltyCardRewardPointTrans = transQueryRun.get(tableNum(RetailLoyaltyCardRewardPointTrans));
                // Add the query records with Remaining > 0, i.e. with Expiring Points > 0, to the XML element.
                xmlElement = xmlDoc.createElement('LoyaltyCardActivity');
                xmlElement.setAttribute('RewardPointAmountQty', num2str(loyaltyCardRewardPointTrans.Remaining, 0, 2, 1, 0));

                // Notes for CRT API:
                // EntryType corresponds to obsolete property LoyaltyRewardPointTimelineEntryType on the LoyaltyRewardPointActivity object.
                // EntryTypeEnum corresponds to the property LoyaltyRewardPointActivityEntryType on the LoyaltyRewardPointActivity object.
                xmlElement.setAttribute('EntryType', null);
                xmlElement.setAttribute('EntryTypeEnumValue', int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Expired)));
                xmlElement.setAttribute('ActivityDate', date2str(loyaltyCardRewardPointTrans.ExpirationDate,213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4, DateFlags::None));
                xmlRoot.appendChild(xmlElement);
            }

            xmlDoc.appendChild(xmlRoot);
            isSuccess = true;
        }
        catch(Exception::Error)
        {
            message = strFmt("@REX4160816", _cardNumber, _rewardPointId);
            isSuccess = false;
        }

        return [isSuccess, message, xmlDoc.toString()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetActivityEntryTypeEnumAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get retail loyalty reward point entry type value.
    /// </summary>
    /// <param name="_entryType">
    /// The RetailLoyaltyRewardPointEntryType enum value.
    /// </param>
    /// <returns>
    /// A string value representing the retail loyalty reward point entry type enum value.
    /// </returns>
    private static str GetActivityEntryTypeEnumAsString(RetailLoyaltyRewardPointEntryType _entryType)
    {
        str enumValueString = '';
        
        switch (_entryType)
        {
            case RetailLoyaltyRewardPointEntryType::Earn:
                enumValueString = int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Earned));
                break;
            case RetailLoyaltyRewardPointEntryType::ReturnEarned:
                enumValueString = int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Returned));
                break;
            case RetailLoyaltyRewardPointEntryType::Redeem:
                enumValueString = int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Redeemed));
                break;
            case RetailLoyaltyRewardPointEntryType::Refund:
                enumValueString = int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Refunded));
                break;
            case RetailLoyaltyRewardPointEntryType::Adjust:
                enumValueString = int2Str(enum2int(RetailLoyaltyRewardPointActivityEntryType::Adjusted));
                break;
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return enumValueString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>