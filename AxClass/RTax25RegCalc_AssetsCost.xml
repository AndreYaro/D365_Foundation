<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssetsCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_AssetsCost extends RTax25RegCalc_Assets implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    private void createBody(tableId           _transTableId,
                            recId             _transRecId,
                            RTax25NotesLine   _description = "")
    {
        if (!retHeader)
        {
            this.createHeader();
            this.createHeader(rAssetTable.AccountNum);
            lastAssetId = rAssetTable.AccountNum;
            retHeader = true;
        }
        else if (lastAssetId != rAssetTable.AccountNum)
        {
            this.createHeader(rAssetTable.AccountNum);
            lastAssetId = rAssetTable.AccountNum;
        }

        regQuery.addBodyRecord(0, fieldValue,  _transTableId, _transRecId, _description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
        fieldValue = ["", "", dateNull(), strFmt("@GLS104014", rAssetTable.AccountNum),
                               0.0, 0.0, footerAmount];
        regQuery.addFooterRecord(0, fieldValue, 0, strFmt("@GLS104014", rAssetTable.AccountNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader(RAssetId  _accountNum = "")
    {
        regQuery.addHeaderRecord(0,
                                 conNull(),
                                 0,
                                 _accountNum ? strFmt("@GLS104112", _accountNum) : "@SYS28004");
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    protected void createTotal()
    {
        regQuery.addFooterRecord(0,
                                ["", "", dateNull(), "@SYS9242", 0.0, 0.0, totalAmount],
                                0,
                                "@SYS37297");
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        RAssetTransReportingView    rAssetTrans;
        RAssetScrap             rAssetScrap;
        RAssetPurchTrans        rAssetPurchTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        VendInvoiceTrans        vendInvoiceTrans;
        Markup                  markup;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        CostAmount              costAmount;
        boolean                 ret = false, pret = false, ppret = false;
        AmountMST               mstAmount, mkpAmount, changeAmount;
        PurchId                 purchId;
        RAssetTable             rAssetTableCheck;
    
        LedgerVoucherReportDate_RU  ledgerVoucherReportDate;
    
        //Transaction amount
        #localmacro.createBody
         fieldValue = [(pret ? "" : rAssetTable.Name), (pret ? "" : rAssetTable.AccountNum), rAssetTrans.ReportingDate,
                                  strfmt(rAssetTable.AccountNum), %1 == 1 ? vendInvoiceTrans.Qty :
                                  (ledgerJournalTrans.Qty ? ledgerJournalTrans.Qty : 1.0),
                                  costAmount, costAmount];
         this.createBody(tableNum(RAssetTrans), rAssetTrans.TransRecId);
         pret = true;
        #endmacro
    
        //Markup amount
        #localmacro.createMarkup
         fieldValue = [(pret ? "" : rAssetTable.Name), (pret ? "" : rAssetTable.AccountNum),
                                      rAssetTrans.ReportingDate,
                                      strfmt("@GLS104015", purchId),
                                      1.0, mkpAmount, mkpAmount];
         this.createBody(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId,
                         strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
         pret = true;
        #endmacro
    
        //Purches & depreciation differences amount
        #localmacro.createDiff
         fieldValue = [(pret ? "" : rAssetTable.Name), (pret ? "" : rAssetTable.AccountNum),
                                      rAssetTrans.ReportingDate,
                                      strfmt("@GLS104305", purchId),
                                      1.0,
                                      changeAmount,
                                      changeAmount];
         this.createBody(tableNum(RAssetTrans), rAssetTrans.TransRecId,
                         strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));
        #endmacro
    
        #localmacro.createAll
            #createBody(%1)
    
            if (mkpAmount)
            {
                #createMarkup
            }
            changeAmount = rAssetTrans.AmountMST - (costAmount + mkpAmount);
            costAmount  += mkpAmount;
            ret  = true;
            if (changeAmount) //User errors for acquisition operation
            {
                #createDiff
            }
            costAmount  += changeAmount;
            mstAmount   += costAmount;
        #endmacro
    
        #localMacro.scrap
            costAmount = rAssetScrap.Assembling ? -inventTrans.costValue() : rAssetScrap.BalanceAmount * sign(- inventTrans.Qty);
            fieldValue = [(pret ? "" : rAssetTable.Name), (pret ? "" : rAssetTable.AccountNum),
                         ledgerVoucherReportDate.ReportingDate ? ledgerVoucherReportDate.ReportingDate : inventTrans.DatePhysical,
                         strfmt("@SYS53184","@SYS12836",InventTable::find(rAssetScrap.ItemId).itemName()),
                         - inventTrans.Qty, costAmount, costAmount];
                this.createBody(inventTrans.TableId, inventTrans.RecId, strFmt("@GLS104013", rAssetTable.AccountNum));
                mstAmount += costAmount;
                pret  = true;
                ppret = true;
        #endmacro
    
        fieldValue = conNull();
    
        while select rAssetScrap
            where rAssetScrap.AssetId == rAssetTable.AccountNum &&
                  ! rAssetScrap.StornoRecId
        {
            costAmount = 0;
            while select inventTrans
                where inventTrans.ItemId                == rAssetScrap.ItemId        &&
                      inventTrans.InventDimId           == rAssetScrap.InventDimId   &&
                      inventTrans.Qty                   != 0                         &&
                      inventTrans.PackingSlipReturned   == 0                         &&
                      inventTrans.StatusReceipt         <= StatusReceipt::Purchased  &&
                      inventTrans.DatePhysical          >= dateFrom                  &&
                      inventTrans.DatePhysical          <= dateTo
            join TableId from inventTransOrigin
                where inventTransOrigin.RecId         == inventTrans.InventTransOrigin &&
                      inventTransOrigin.InventTransId == rAssetScrap.InventTransId
            notexists join ledgerVoucherReportDate
                where ledgerVoucherReportDate.AccountingDate == inventTrans.DatePhysical &&
                        ledgerVoucherReportDate.Voucher      == inventTrans.VoucherPhysical
    
            {
                #scrap
            }
    
            rTax25PeriodIterator.first();
    
            do
            {
                while select inventTrans
                    where inventTrans.ItemId                == rAssetScrap.ItemId                           &&
                          inventTrans.InventDimId           == rAssetScrap.InventDimId                      &&
                          inventTrans.Qty                   != 0                                            &&
                          inventTrans.PackingSlipReturned   == 0                                            &&
                          inventTrans.StatusReceipt         <= StatusReceipt::Purchased                     &&
                          inventTrans.DatePhysical          >= rTax25PeriodIterator.fromDateAccounting()    &&
                          inventTrans.DatePhysical          <= rTax25PeriodIterator.toDateAccounting()
                join TableId from inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin &&
                          inventTransOrigin.InventTransId == rAssetScrap.InventTransId
                    join ReportingDate from ledgerVoucherReportDate
                        where ledgerVoucherReportDate.AccountingDate == inventTrans.DatePhysical                    &&
                              ledgerVoucherReportDate.Voucher        == inventTrans.VoucherPhysical                 &&
                              ledgerVoucherReportDate.ReportingDate  >= rTax25PeriodIterator.fromDateReporting()    &&
                              ledgerVoucherReportDate.ReportingDate  <= rTax25PeriodIterator.toDateReporting()
                {
                    #scrap
                }
            }
            while (rTax25PeriodIterator.next());
        }
    
        rTax25PeriodIterator.first();
    
        do
        {
        while select rAssetTrans
            where rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                        rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()  &&
                        rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()    &&
                        rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()   &&
                        rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()     &&
                  (rAssetTrans.AssetTransType == RAssetTransType::Acquisition ||
                   rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj ||
                   rAssetTrans.AssetTransType == RAssetTransType::Revaluation)         &&
                  rAssetTrans.PostingType     != RAssetPostingType::PartialTakeDown    &&
                  rAssetTrans.AssetStandardId == assetStandardId                       &&
                  ! rAssetTrans.StornoRecId
        {
            purchId = rAssetTable.PurchId;
            if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition && purchId && ! ppret)
            {
                while select vendInvoiceTrans
                    where vendInvoiceTrans.PurchID    == purchId                     &&
                          vendInvoiceTrans.InvoiceId  == rAssetTable.VendInvoiceId
                {
                    select AccountNum from rAssetTableCheck
                        where rAssetTableCheck.InventTransId  == vendInvoiceTrans.InventTransId &&
                              rAssetTableCheck.PurchId        == vendInvoiceTrans.PurchID
                    exists join rAssetPurchTrans
                        where rAssetPurchTrans.AssetId        == rAssetTableCheck.AccountNum    &&
                              rAssetPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine;
    
                    if (! rAssetTableCheck.AccountNum)
                        continue;
    
                    costAmount = (vendInvoiceTrans.CurrencyCode ?
                                  CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.LineAmount, vendInvoiceTrans.CurrencyCode, vendInvoiceTrans.exchRate()) :
                                  vendInvoiceTrans.LineAmount);
    
                    markup     = new Markup(vendInvoiceTrans.CurrencyCode);
                    mkpAmount  = markup.calcMarkupAmount_RU(vendInvoiceTrans,
                                                            vendInvoiceTrans.Qty,
                                                            vendInvoiceTrans.LineAmount);
                    mkpAmount  = vendInvoiceTrans.CurrencyCode ?
                                 CurrencyExchangeHelper::amountCur2MST(mkpAmount, vendInvoiceTrans.CurrencyCode, vendInvoiceTrans.exchRate())
                                                         : mkpAmount;
    
    
                    costAmount = vendInvoiceTrans.Qty ? costAmount / (vendInvoiceTrans.Qty) : costAmount;
                    mkpAmount  = vendInvoiceTrans.Qty ? mkpAmount  / (vendInvoiceTrans.Qty) : mkpAmount;
    
                    #createAll(1)
                }
            }
    
            if (!((ppret || ret) && rAssetTrans.AssetTransType == RAssetTransType::Acquisition))
            {
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.Invoice  == rAssetTable.VendInvoiceId
                    join  AssetId from rAssetPurchTrans
                        where rAssetPurchTrans.TableTableId == ledgerJournalTrans.TableId        &&
                              rAssetPurchTrans.TableRecId   == ledgerJournalTrans.RecId          &&
                              rAssetPurchTrans.AssetId      == rAssetTable.AccountNum;
                if (rAssetPurchTrans.AssetId)
                {
                    costAmount = (ledgerJournalTrans.CurrencyCode ?
                                  CurrencyExchangeHelper::amountCur2MST(-ledgerJournalTrans.amount() - ledgerJournalTrans.taxAmountJournal(), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.ExchRate) :
                                  - ledgerJournalTrans.amount() - ledgerJournalTrans.taxAmountJournal());
    
                    markup     = new Markup(ledgerJournalTrans.CurrencyCode);
                    mkpAmount  = markup.calcMarkupAmount_RU(ledgerJournalTrans,
                                                            ledgerJournalTrans.Qty,
                                                            ledgerJournalTrans.amount());
                    mkpAmount  = ledgerJournalTrans.CurrencyCode ?
                                 CurrencyExchangeHelper::amountCur2MST(mkpAmount, ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.ExchRate)
                                                         : mkpAmount;
                    costAmount = ledgerJournalTrans.Qty ? costAmount / (ledgerJournalTrans.Qty) : costAmount;
                    mkpAmount  = ledgerJournalTrans.Qty ? mkpAmount  / (ledgerJournalTrans.Qty) : mkpAmount;
                    #createAll(2)
                }
            }
    
            if (!((ppret || ret) && rAssetTrans.AssetTransType == RAssetTransType::Acquisition))
            {
                if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition      ||
                    rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj   ||
                    rAssetTrans.AssetTransType == RAssetTransType::Revaluation)
                {
                    costAmount = rAssetTrans.AmountMST;
                    fieldValue = [(pret ? "" : rAssetTable.Name), (pret ? "" : rAssetTable.AccountNum),
                                        rAssetTrans.ReportingDate,
                                  rAssetTrans.Txt, 1.0, costAmount, costAmount];
                        this.createBody(tableNum(RAssetTrans), rAssetTrans.TransRecId);
                    mstAmount += costAmount;
                    pret = true;
                }
            }
            }
        }
        while (rTax25PeriodIterator.next());
    
        return mstAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU            correctedPeriodDate;
        RAssetTransCorrectiveView   assetTrans;
        Query                       query = this.createQuery();
        QueryBuildDataSource        qbdsTrans,
                                    qbdsTable = query.dataSourceTable(tableNum(RAssetTable)),
                                    qbdsStandard = query.dataSourceTable(tableNum(RAssetStandards));
    
        qbdsTable.joinMode(JoinMode::ExistsJoin);
        qbdsStandard.firstOnly(true);
        qbdsStandard.sortClear();
        qbdsStandard.addSelectionField(fieldNum(RAssetStandards, TableId));
    
        qbdsTrans = qbdsStandard.addDataSource(tableNum(RAssetTransCorrectiveView));
    
        qbdsTrans.addSelectionField(fieldNum(RAssetTransCorrectiveView, ReportingDate));
    
        qbdsTrans.addSortField(fieldNum(RAssetTransCorrectiveView, ReportingDate), SortOrder::Ascending);
    
        qbdsTrans.addLink(fieldNum(RAssetStandards, AssetId), fieldNum(RAssetTransCorrectiveView, AccountNum));
        qbdsTrans.fetchMode(QueryFetchMode::One2One);
        qbdsTrans.joinMode(JoinMode::InnerJoin);
    
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AssetStandardId)).value(queryValue(assetStandardId));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, PostingType)).value(SysQuery::valueNot(RAssetPostingType::PartialTakeDown));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AssetTransType)).value(queryRange(RAssetTransType::Revaluation, RAssetTransType::AcquisitionAdj));
    
        qr = new QueryRun(query);
    
        if (qr.next())
        {
            assetTrans = qr.get(tableNum(RAssetTransCorrectiveView));
            correctedPeriodDate = dateEndQtr(assetTrans.ReportingDate);
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>