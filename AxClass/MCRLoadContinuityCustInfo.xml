<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRLoadContinuityCustInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRLoadContinuityCustInfo</c> creates
/// continuity orders and loads the continuity order form.
/// </summary>
class MCRLoadContinuityCustInfo
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentEventId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the current <c>MCRContinuityEventId</c>.
    /// </summary>
    /// <param name="_scheduleId">
    /// The <c>MCRContinuityScheduleID</c> related to the schedule for which the
    /// <c>MCRContinuityEventId</c> is needed.
    /// </param>
    /// <returns>
    /// The current <c>MCRContinuityEventId</c>.
    /// </returns>
    /// <remarks>
    /// If the schedule is setup for current event processing, start the loading of the
    /// <c>MCRContinuityCustLine</c> with the current event period.  Otherwise, always start with
    /// event 1. If the <c>MCRContinuityEventId</c> calculated above does not point to a
    /// schedule line, return the next event's Id; if there is no next event, return the
    /// event id calculated above.
    /// </remarks>
    MCRContinuityEventId getCurrentEventId(MCRContinuityScheduleID _scheduleId)
    {
        MCRContinuityScheduleHeader  mcrContinuityScheduleHeader;
        MCRContinuityScheduleLine    mcrContinuityScheduleLine;
        MCRContinuityEventId         mcrContinuityEventId;

        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(_scheduleId);

        if (mcrContinuityScheduleHeader.OrderStart == MCRContinuityOrderStart::CurrentEvent)
        {
            mcrContinuityEventId = mcrContinuityScheduleHeader.CurrentEvent;
        }
        else
        {
            mcrContinuityEventId = 1;
        }

        if (!MCRContinuityScheduleLine::findSchedIdEventId(_scheduleId, mcrContinuityEventId))
        {
            mcrContinuityScheduleLine.ScheduleID = _scheduleId;
            mcrContinuityScheduleLine.EventID = mcrContinuityEventId;
            if (!mcrContinuityScheduleLine.getNextEvent() == 0)
            {
                mcrContinuityEventId = mcrContinuityScheduleLine.getNextEvent();
            }
        }

        return mcrContinuityEventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what the ship date should be based on the payment schedule value,
    /// and return it.
    /// </summary>
    /// <param name="_continuityCustLine">
    /// The <c>MCRContinuityCustLine</c> record to be used to get the shipped date.
    /// </param>
    /// <returns>
    /// The ship date for the payment schedule.
    /// </returns>
    public DlvDate getShipDate(MCRContinuityCustLine  _continuityCustLine)
    {
        DlvDate retDate;

        if (_continuityCustLine.PaymentSchedLine != "")
        {
            retDate =  CustPaymSchedLine::MCRFindShippingRecord(_continuityCustLine.RecId).DueDate;
        }
        if (!retDate || retDate < _continuityCustLine.StartDate)
        {
            retDate = _continuityCustLine.StartDate;
        }

        return retDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates continuity order lines.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> of the sales line.
    /// </param>
    /// <param name="_scheduleId">
    /// The ID of the continuity schedule.
    /// </param>
    /// <param name="_parentItemId">
    /// The item ID of the parent continuity order.
    /// </param>
    public void insertLineData(InventTransId            _inventTransId,
                                MCRContinuityScheduleID _scheduleId,
                                ItemId                  _parentItemId)
    {
        MCRContinuityScheduleLine   mcrContinuityScheduleLine;
        MCRContinuityCustLine       mcrContinuityCustLine;
        MCRInventTable              mcrInventTable;
        MCRContinuityEventId        mcrContinuityEventIDCurrent;
        MCRNumTimesToRepeat         mcrNumTimesToRepeat = 0;
        MCRContinuityEventId        mcrContinuityEventIdStart;
        // EventCounter is used to keep track of what event Id should be used on
        //  the ContinuityCustLine(s).
        int                         eventCounter = 1;
        // NumberOfEventsWritten is used to see if we have reached the 'duration'
        //  field set on the item master.
        int                         numberOfEventsWritten = 0;
        boolean                     hasInvalidDeliveryMode = false;
        MCRContinuityCustLine       mcrContinuityCustLinePrev;
        mcrInventTable              = MCRInventTable::findByItemId(_parentItemId);
        mcrContinuityEventIdStart   = this.getCurrentEventId(_scheduleId);
        mcrContinuityEventIDCurrent = mcrContinuityEventIdStart;

        // loop through all continuity schedule lines and make corresponding continuity customer lines.
        while select mcrContinuityScheduleLine order by EventID asc
               where mcrContinuityScheduleLine.ScheduleID == _scheduleId &&
                     mcrContinuityScheduleLine.EventID    >= mcrContinuityEventIdStart
        {
            if (mcrContinuityEventIDCurrent != mcrContinuityScheduleLine.EventID)
            {
                numberOfEventsWritten += 1 + mcrNumTimesToRepeat;
            }

            if (numberOfEventsWritten < mcrInventTable.ContEventDuration
                 || mcrInventTable.ContEventDuration == 0)
            {
                if (mcrContinuityEventIDCurrent != mcrContinuityScheduleLine.EventID)
                {
                    eventCounter += 1 + mcrNumTimesToRepeat;
                    mcrContinuityEventIDCurrent = mcrContinuityScheduleLine.EventID;
                }

                boolean expandNow;
                [expandNow, mcrNumTimesToRepeat] = this.initMcrContinuityCustLine(mcrContinuityScheduleLine, mcrContinuityCustLine, _inventTransId,
                    eventCounter, mcrContinuityCustLinePrev, mcrNumTimesToRepeat, mcrInventTable, numberOfEventsWritten);

                if (mcrContinuityCustLine.validateWrite())
                {
                    mcrContinuityCustLine.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }

                // Call the payment schedule create method on the MCRContinuityCustLine table.
                if (mcrContinuityCustLine.PaymentSchedLine)
                {
                    MCRContinuityCustLine::createPaymentSched(mcrContinuityCustLine);
                    ttsBegin;
                    MCRContinuityCustLineId mcrContinuityCustLineID = mcrContinuityCustLine.LineID;
                    select forupdate firstonly mcrContinuityCustLine where mcrContinuityCustLine.LineID == mcrContinuityCustLineID;
                    mcrContinuityCustLine.ShipDate = this.GetShipDate(mcrContinuityCustLine);
                    if (mcrContinuityCustLine.validateWrite())
                    {
                        mcrContinuityCustLine.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                    ttsCommit;
                }

                // For lines that repeat, write the repeating lines.
                if (expandNow)
                {
                    this.LoadRepeatingRecordsAtOrderEntry(mcrContinuityCustLine, mcrContinuityScheduleLine, mcrNumTimesToRepeat);
                }

                // Save the last start date for next line calculation.
                mcrContinuityCustLinePrev.data(mcrContinuityCustLine);
            }
        }

        MCRContinuityCustHeader::markEndRecord(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMcrContinuityCustLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes Mcs continuity customer lines.
    /// </summary>
    /// <param name = "_mcrContinuityScheduleLine">
    ///     The <c>MCRContinuityScheduleLine</c> table record to be used in defining the repeating events.
    /// </param>
    /// <param name = "_mcrContinuityCustLine">
    ///     The <c>MCRContinuityCustLine</c> table record with repeating events.
    /// </param>
    /// <param name = "_inventTransId">
    ///     The <c>InventTransId</c> of the sales line.
    /// </param>
    /// <param name = "_eventCounter">
    ///     An integer to count the event occur.
    /// </param>
    /// <param name = "_mcrContinuityCustLinePrev">
    ///     <c>mcrContinuityCustLinePrev</c> table buffer.
    /// </param>
    /// <param name = "_mcrNumTimesToRepeat">
    ///     Records the repetations.
    /// </param>
    /// <param name = "_mcrInventTable">
    ///     MCR Invent table buffer.
    /// </param>
    /// <param name = "_numberOfEventsWritten">
    ///     Holds total number of events
    /// </param>
    /// <returns>
    ///     Container having values to initialize order lines.
    /// </returns>
    [Wrappable(true)]
    protected final container initMcrContinuityCustLine(McrContinuityScheduleLine _mcrContinuityScheduleLine,
        McrContinuityCustLine _mcrContinuityCustLine,
        InventTransId _inventTransId,
        int _eventCounter,
        MCRContinuityCustLine _mcrContinuityCustLinePrev,
        MCRNumTimesToRepeat _mcrNumTimesToRepeat,
        MCRInventTable              _mcrInventTable,
        int                         _numberOfEventsWritten
        )
    {
        MCRContinuityCalcOrderDate  mcrContinuityCalcOrderDate = new MCRContinuityCalcOrderDate();
        SalesLine                   salesLine;
        MCRContinuityCustLineId     mcrContinuityCustLineID;

        _mcrContinuityCustLine.InventTransId     = _inventTransId;
        _mcrContinuityCustLine.ItemId            = _mcrContinuityScheduleLine.ItemID;
        _mcrContinuityCustLine.InventDimId       = _mcrContinuityScheduleLine.InventDimId;

        if (_eventCounter == 1)
        {
            _mcrContinuityCustLine.StartDate     = MCRContinuityCustHeader::find(_mcrContinuityCustLine.InventTransId).StartDate;
        }
        else
        {
            _mcrContinuityCustLine.StartDate     = mcrContinuityCalcOrderDate.GetOrderDate(
                                                            _mcrContinuityScheduleLine, _mcrContinuityCustLinePrev);
        }

        _mcrContinuityCustLine.DeliveryMode      = _mcrContinuityScheduleLine.DlvModeId;
        _mcrContinuityCustLine.EventId           = _eventCounter;
        _mcrContinuityCustLine.ScheduleEventID   = _mcrContinuityScheduleLine.EventID;
        // Do not allow payment schedule on lines for bill up front.
        if (!MCRContinuityScheduleHeader::find(_mcrContinuityScheduleLine.ScheduleID).BillUpfront)
        {
            _mcrContinuityCustLine.PaymentSchedLine = _mcrContinuityScheduleLine.PaymSchedId;
        }
        // Format the price based on the currency of the order that is being processed.
        salesLine = SalesLine::findInventTransId(_inventTransId);
        _mcrContinuityCustLine.Price             = _mcrContinuityScheduleLine.convertPrice(salesLine.CurrencyCode);
        _mcrContinuityCustLine.PriceOverride     = _mcrContinuityScheduleLine.PriceOverridden;

        _mcrContinuityCustLine.QuantityOrdered   = salesLine.SalesQty * _mcrContinuityScheduleLine.SalesQty;
        _mcrContinuityCustLine.SalesQty          = salesLine.SalesQty * _mcrContinuityScheduleLine.SalesQty;
        _mcrContinuityCustLine.SalesQtyUOM       = _mcrContinuityScheduleLine.SalesQtyUOM;
        _mcrContinuityCustLine.ShipDate          = this.GetShipDate(_mcrContinuityCustLine);
        // Reset the number of times to repeat.  It will be set below.
        _mcrContinuityCustLine.NumTimesToRepeat  = 0;
        _mcrNumTimesToRepeat                     = 0;
        boolean expandNow                       = false;

        if (_mcrContinuityScheduleLine.NumTimesToRepeat > 0)
        {
            // Find number of times to repeat up to the duration of the continuity item.
            if (_mcrInventTable.ContEventDuration == 0)
            {
                _mcrNumTimesToRepeat = _mcrContinuityScheduleLine.NumTimesToRepeat;
            }
            else
            {
                _mcrNumTimesToRepeat = (_mcrInventTable.ContEventDuration - _numberOfEventsWritten) - 1;
            }

            expandNow = this.setNumTimeToRepeat(_mcrContinuityScheduleLine, _mcrContinuityCustLine, _mcrNumTimesToRepeat);
        }

        if (_mcrNumTimesToRepeat > 0 && _mcrContinuityScheduleLine.ActionCode != MCRContinuityActionCode::End)
        {
            _mcrContinuityCustLine.ActionCode = _mcrContinuityScheduleLine.ActionCode;
        }
        else
        {
            if (_mcrNumTimesToRepeat <= 0 && _numberOfEventsWritten == _mcrInventTable.ContEventDuration - 1
                        && _mcrInventTable.ContEventDuration != 0)
            {
                _mcrContinuityCustLine.ActionCode = MCRContinuityActionCode::End;
            }
            else
            {
                if (_mcrNumTimesToRepeat > 0 && expandNow && _mcrContinuityScheduleLine.ActionCode == MCRContinuityActionCode::End)
                {
                    _mcrContinuityCustLine.ActionCode = MCRContinuityActionCode::Normal;
                }
                else
                {
                    _mcrContinuityCustLine.ActionCode = _mcrContinuityScheduleLine.ActionCode;
                }
            }
        }
        mcrContinuityCustLineID         = NumberSeq::newGetNum(MCROrderParameters::numRefContinuityCustomerLineID()).num();
        _mcrContinuityCustLine.LineID    = mcrContinuityCustLineID;
        return [expandNow, _mcrNumTimesToRepeat];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumTimeToRepeat</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets number of times to repeat.
    /// </summary>
    /// <param name = "_mcrContinuityScheduleLine">
    ///     The <c>MCRContinuityScheduleLine</c> table record to be used in defining the repeating events.
    /// </param>
    /// <param name = "_mcrContinuityCustLine">
    ///     The <c>MCRContinuityCustLine</c> table record with repeating events.
    /// </param>
    /// <param name = "_mcrNumTimesToRepeat">
    ///     Records the repetitions.
    /// </param>
    /// <returns>
    ///     true if repetition count is zero; otherwise, false.
    /// </returns>
    protected boolean setNumTimeToRepeat(McrContinuityScheduleLine _mcrContinuityScheduleLine, McrContinuityCustLine _mcrContinuityCustLine,
         MCRNumTimesToRepeat _mcrNumTimesToRepeat)
    {
        boolean expandNow;
        int continuityRepeatTreshold;
        continuityRepeatTreshold = MCROrderParameters::find().MCRContinuityRepeatThreshold;

        if (_mcrNumTimesToRepeat > 0)
        {
            if (_mcrNumTimesToRepeat > _mcrContinuityScheduleLine.NumTimesToRepeat)
            {
                _mcrNumTimesToRepeat = _mcrContinuityScheduleLine.NumTimesToRepeat;
            }

            if (_mcrNumTimesToRepeat > continuityRepeatTreshold)
            {
                _mcrContinuityCustLine.NumTimesToRepeat = _mcrNumTimesToRepeat;
                expandNow = false;
            }
            else
            {
                _mcrContinuityCustLine.NumTimesToRepeat = 0;
                expandNow = true;
            }

            if (MCRContinuityScheduleHeader::find(_mcrContinuityScheduleLine.ScheduleID).BillUpfront)
            {
                _mcrContinuityCustLine.NumTimesToRepeat = 0;
                expandNow = true;
            }
        }

        return expandNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRepeatingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the events to the <c>MCRContinuityCustLine</c> table based on
    /// a <c>MCRContinuityCustLine</c> record which will repeat events.
    /// </summary>
    /// <param name="_continuityCustLine">
    /// The <c>MCRContinuityCustLine</c> table record with repeating events.
    /// </param>
    /// <param name="_continuityScheduleLine">
    /// The <c>MCRContinuityScheduleLine</c> table record to be used in defining the repeating events.
    /// </param>
    /// <param name="_numTimesToRepeat">
    /// The number of times the repeating event should repeat.
    /// </param>
    public void loadRepeatingRecords(MCRContinuityCustLine _continuityCustLine,
                        MCRContinuityScheduleLine _continuityScheduleLine,
                        MCRNumTimesToRepeat _numTimesToRepeat)
    {
        MCRContinuityCustLine   mcrContinuityCustLine;
        MCRContinuityCustLine   mcrContinuityCustLinePrev;
        MCRContinuityCustHeader mcrContinuityCustHeader;
        MCRContinuityCustLineId mcrContinuityCustLineID;
        int i;
        MCRContinuityEventId    mcrContinuityEventIdCurrent;
        MCRContinuityEventId    mcrContinuityEventIdRepeat;

        MCRContinuityCalcOrderDate mcrContinuityCalcOrderDate = new MCRContinuityCalcOrderDate();
        mcrContinuityEventIdRepeat = _continuityCustLine.EventId;
        mcrContinuityCustLinePrev = _continuityCustLine;
        mcrContinuityEventIdCurrent = _continuityCustLine.EventId + 1;
        mcrContinuityCustHeader = MCRContinuityCustHeader::find(_continuityCustLine.InventTransId);
        for (i = 1; i <= _numTimesToRepeat; i++)
        {
            mcrContinuityCustLine.data(_continuityCustLine);

            if (i == _numTimesToRepeat
                && _continuityCustLine.ActionCode == MCRContinuityActionCode::End)

            {
                mcrContinuityCustLine.ActionCode = MCRContinuityActionCode::End;
            }
            else
            {
                if (_continuityCustLine.ActionCode != MCRContinuityActionCode::End)
                {
                    mcrContinuityCustLine.ActionCode = _continuityCustLine.ActionCode;
                }
                else
                {
                    mcrContinuityCustLine.ActionCode = MCRContinuityActionCode::Normal;
                }
            }
            mcrContinuityCustLine.EventId = mcrContinuityEventIdCurrent;
            mcrContinuityEventIdCurrent = mcrContinuityEventIdCurrent + 1;
            mcrContinuityCustLine.NumTimesToRepeat = 0;
            mcrContinuityCustLine.StartDate = mcrContinuityCalcOrderDate.GetOrderDate(
                                    _continuityScheduleLine, mcrContinuityCustLinePrev);
            mcrContinuityCustLine.ShipDate = this.GetShipDate(mcrContinuityCustLine);
            // Set Line Id through a sequence number.
            mcrContinuityCustLineID = NumberSeq::newGetNum(MCROrderParameters::numRefContinuityCustomerLineID()).num();
            mcrContinuityCustLine.LineID = mcrContinuityCustLineID;
            mcrContinuityCustLine.insert();

            if (mcrContinuityCustLine.PaymentSchedLine)
            {
                // Call the payment schedule create method on the MCRContinuityCustLine table.
                MCRContinuityCustLine::createPaymentSched(mcrContinuityCustLine);

                // The record that was inserted must be reselected and ship date assigned.  This can not happen
                // in the initial insert, because the payment schedule table needs the continuitycustline rec id.
                ttsBegin;
                select forupdate firstonly mcrContinuityCustLine where mcrContinuityCustLine.LineID == mcrContinuityCustLineID;
                mcrContinuityCustLine.ShipDate = this.GetShipDate(mcrContinuityCustLine);
                mcrContinuityCustLine.update();
                ttsCommit;
            }

            mcrContinuityCustLinePrev.data(mcrContinuityCustLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRepeatingRecordsAtOrderEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the repeating method, if an even should repeat.
    /// </summary>
    /// <param name="_continuityCustLine">
    /// The <c>MCRContinuityCustLine</c> that has the repeating event.
    /// </param>
    /// <param name="_continuityScheduleLine">
    /// The <c>MCRContinuityScheduleLine</c> table record to be used in defining the repeating events.
    /// </param>
    /// <param name="_numTimesToRepeat">
    /// The number of times the repeating event should repeat.
    /// </param>
    void loadRepeatingRecordsAtOrderEntry(MCRContinuityCustLine _continuityCustLine,
                        MCRContinuityScheduleLine _continuityScheduleLine,
                        MCRNumTimesToRepeat _numTimesToRepeat)
    {
        this.LoadRepeatingRecords(_continuityCustLine, _continuityScheduleLine, _numTimesToRepeat);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>