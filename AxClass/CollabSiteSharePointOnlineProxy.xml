<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollabSiteSharePointOnlineProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.SharePoint;

/// <summary>
/// The <c>CollabSiteSharePointOnlineProxy</c> class is a proxy used to interface with
/// SharePoint online collaboration sites.
/// </summary>
[SysObsolete('Project Collaboration Workspace is deprecated.', false, 20\09\2022)]
class CollabSiteSharePointOnlineProxy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSiteExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given <c>CollabSiteURL</c> is valid and exists.
    /// </summary>
    /// <param name="url">
    /// The url of the site to check.
    /// </param>
    /// <returns>
    /// True if the site exists; otherwise, false.
    /// </returns>
    static public boolean checkSiteExists(CollabSiteURL url)
    {
        boolean retVal;

        try
        {
            ISharePointProxy proxy = CollabSiteSharePointOnlineProxy::createSharePointProxy(url);
            if (proxy)
            {
                WebInformation webInfo = SharePointHelper::OpenWeb(proxy);
                retVal = webInfo != null;
            }
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a collaboration site with the given parameters.
    /// </summary>
    /// <param name="_sharePointServerUrl">
    /// The url of the sharepoint root site.
    /// </param>
    /// <param name="_sharePointSiteName">
    /// The url of the site to create.
    /// </param>
    /// <param name="_templateName">
    /// The name of the template to be used in site creation.
    /// </param>
    /// <param name="_title">
    /// The title of the site.
    /// </param>
    /// <param name="_desc">
    /// The site description.
    /// </param>
    /// <param name="_throwError">
    /// A Boolean value that determines whether to throw an error message if an exception is thrown by the SharePoint service.
    /// </param>
    /// <returns>
    /// A <c>guid</c> correpsonding to the site.
    /// </returns>
    static public guid createSite(CollabSiteURL _sharePointServerUrl, str _sharePointSiteName, CollabSiteTemplateName _templateName, CollabSiteTitle _title,
        CollabSiteDescription _desc, boolean _throwError = true)
    {
        guid siteGuid;

        try
        {
            ISharePointProxy proxy = CollabSiteSharePointOnlineProxy::createSharePointProxy(_sharePointServerUrl);
            if (proxy)
            {
                WebInformation webInfo = SharePointHelper::CreateWeb(proxy, _sharePointSiteName, _templateName, _title, _desc);
                if (webInfo)
                {
                    siteGuid = System.Guid::Parse( webInfo.Id);
                }
            }
        }
        catch ( Exception::Internal )
        {
            CollabSiteSharePointOnlineProxy::processCLRInternalException();
        }
        catch ( Exception::CLRError )
        {
            error("@SYS4010026");
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }

        return siteGuid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the collaboration site.
    /// </summary>
    /// <param name="url">
    /// The url of the site to delete.
    /// </param>
    /// <returns>
    /// True if the site was deleted; otherwise, false.
    /// </returns>
    static public boolean deleteSite(CollabSiteURL url)
    {
        boolean retVal;
        System.Reflection.Assembly assembly;
        System.Type classType;
        System.Reflection.MethodInfo methodInfo;
        System.Object[] parameters;

        try
        {
            ISharePointProxy proxy = CollabSiteSharePointOnlineProxy::createSharePointProxy(url);
            if (proxy)
            {
                SPError spError = SharePointHelper::DeleteWeb(proxy);
                if (spError && spError.message)
                {
                    warning(spError.get_message().value);
                }
                else
                {
                    retVal = true;
                }
            }
        }
        catch ( Exception::Internal )
        {
            CollabSiteSharePointOnlineProxy::processCLRInternalException();
        }
        catch ( Exception::CLRError )
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a collaboration site URL.
    /// </summary>
    /// <param name="url">
    /// The URL to validate.
    /// </param>
    /// <returns>
    /// True if the URL is valid; otherwise, false.
    /// </returns>
    public static boolean validateUrl(CollabSiteURL url)
    {
        return CollabSiteSharePointOnlineProxy::checkSiteExists(url);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCLRInternalException</Name>
				<Source><![CDATA[
    public static void processCLRInternalException()
    {
        str  strError;
        CLRObject   exc;
        CLRObject   clrExcMessage;

        exc = CLRInterop::getLastException();
        if ( exc )
        {
            clrExcMessage = exc.get_Message();
            strError = CLRInterop::getAnyTypeForObject( clrExcMessage );

            throw error(strError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCLRErrorException</Name>
				<Source><![CDATA[
    public static void processCLRErrorException()
    {
        str  strError;
        CLRObject   exc;
        CLRObject   innerExc;
        CLRObject   clrExcMessage;

        exc = CLRInterop::getLastException();
        if ( exc )
        {
            clrExcMessage = exc.get_Message();
            strError = CLRInterop::getAnyTypeForObject( clrExcMessage );

            innerExc = exc.get_InnerException();
            while ( innerExc )
            {
                clrExcMessage = innerExc.get_Message();
                strError = strError + '\n' + CLRInterop::getAnyTypeForObject( clrExcMessage );
                innerExc = innerExc.get_InnerException();
            }

            throw error(strError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetExternalIdForCurrentUser</Name>
				<Source><![CDATA[
    public static str GetExternalIdForCurrentUser()
    {
        UserInfo userInfo;

        select firstonly externalId from userInfo where userInfo.id == curUserId();

        return userInfo.externalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSharePointProxy</Name>
				<Source><![CDATA[
    private static ISharePointProxy createSharePointProxy(str _url)
    {
        ProxyConfiguration config = new ProxyConfiguration(_url);
        ISharePointProxy proxy = SharePointHelper::CreateProxyForConfig(config, xUserInfo::getExternalId());
        return proxy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>