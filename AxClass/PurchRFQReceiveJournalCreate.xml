<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQReceiveJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQReceiveJournalCreate extends PurchRFQAcceptJournalCreate
{
    PurchRFQReplyTable          purchRFQReplyTable;
    PurchRFQReplyLine           purchRFQReplyLine;
    PurchRFQParmLine            purchRFQParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to process a RFQ reply line.
    /// </summary>
    /// <param name="_purchRFQLine">
    /// A <c>PurchRFQLine</c> record buffer.
    /// </param>
    /// <returns>
    /// true if the line must be discarded; otherwise false.
    /// </returns>
    protected boolean  checkDiscardLine(Common _purchRFQLine)
    {
        if (purchRFQReplyLine.PurchQty == 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an RFQ journal transaction record.
    /// </summary>
    /// <param name="_purchRFQLine">
    /// The <c>PurchRFQLine</c> record buffer.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The posting was canceled.
    /// </exception>
    protected void createJournalLine(Common _purchRFQLine)
    {
        if (!this.checkLine())
        {
            throw error("@SYS21533"); // Posting has been canceled.
        }

        this.calcLine(purchRFQLine,purchRFQParmLine);

        vendRFQTrans.clear();
        vendRFQTrans.initValue();
        vendRFQTrans.initFromVendRFQJour(vendRFQJour);
        vendRFQTrans.initFromPurchRFQLine(purchRFQLine);
        vendRFQTrans.initFromPurchRFQReplyLine(purchRFQReplyLine);
        if (!vendRFQTrans.ReasonRef)
        {
            vendRFQTrans.ReasonRef = vendRFQJour.ReasonRef;
        }
        vendRFQTrans.Status         = this.purchRFQStatus();
        vendRFQTrans.insert();

        Docu::copy(PurchRFQReplyLine::findRFQLine(_purchRFQLine.RecId), vendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        super();

        boolean hasSealedAttachments = PurchRFQSealedBidFlightingManager::isPreviewEnabled()
                                    && purchRFQTable.BidType == PurchRFQBidType::Sealed
                                    && PurchRFQCaseTable::find(purchRFQTable.RFQCaseId).IsSealed;

        if (!hasSealedAttachments)
        {
            Docu::copy(purchRFQTable.purchRFQReplyTable(), VendRFQJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal lines when updating the sales order, purchase order, or request for quote.
    /// </summary>
    protected void createJournalLines()
    {
        ttsbegin;

        while   select  purchRFQLine
            where   purchRFQLine.rfqId              == purchRFQTable.rfqId
        join    purchRFQReplyLine
            where   purchRFQReplyLine.rfqLineRecId  == purchRFQLine.RecId
        {
            if (!this.checkDiscardLine(purchRFQLine))
            {
                lineNum ++;
                this.createJournalLine(purchRFQLine);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the RFQ total amount from the RFQ lines.
    /// </summary>
    protected void initTotals()
    {
        purchRFQTotals = PurchRFQTotals::construct(this.parmPurchRFQTable().purchRFQReplyTable());
        purchRFQTotals.calc();
        this.parmTax(purchRFQTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQReplyTable</Name>
				<Source><![CDATA[
    public PurchRFQReplyTable parmPurchRFQReplyTable(PurchRFQReplyTable _purchRFQReplyTable = purchRFQReplyTable )
    {
        purchRFQReplyTable = _purchRFQReplyTable;
        return purchRFQReplyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQTable</Name>
				<Source><![CDATA[
    public PurchRFQTable parmPurchRFQTable(PurchRFQTable _purchRFQTable = purchRFQTable)
    {
        purchRFQTable = _purchRFQTable;
        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnsealPurchRFQ</Name>
				<Source><![CDATA[
    public boolean parmUnsealPurchRFQ(boolean _unsealPurchRFQ = unsealPurchRFQ)
    {
        unsealPurchRFQ = _unsealPurchRFQ;
        return unsealPurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the RFQ status for received records.
    /// </summary>
    /// <returns>
    /// An enumeration value that indicates the status of received record.
    /// </returns>
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the RFQ update type for received records.
    /// </summary>
    /// <returns>
    /// An enumeration value that indicates the type of the received records.
    /// </returns>
    protected PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an RFQ receive journal.
    /// </summary>
    /// <remarks>
    /// The receive journal to create in EP when a vendor sends an RFQ for approval to the purchasing agent.
    /// </remarks>
    public void run()
    {
        ttsbegin;

        purchRFQParmTable.initFromPurchRFQTable(purchRFQTable);

        this.initTotals();
        this.initFormletterProvider();

        this.initRecordList();
        if (this.check())
        {
            this.initJournalHeader();
            this.createJournalHeader();
            this.createJournalLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQReceiveJournalCreate construct()
    {
        return new PurchRFQReceiveJournalCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>