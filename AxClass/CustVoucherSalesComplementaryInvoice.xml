<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucherSalesComplementaryInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CustVoucher</c> extension with implementations for sales complementary invoice.
/// </summary>
class CustVoucherSalesComplementaryInvoice extends CustVoucher
{
    SalesComplInvCalcTotals calcTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copySpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>SpecTrans</c> entries should be copied.
    /// </summary>
    /// <returns>
    /// true if <c>SpecTrans</c> should be copied; false otherwise.
    /// </returns>
    protected boolean copySpecTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustInvoiceJour</c> record for the sales complementary vinocie.
    /// </summary>
    /// <param name="_custTrans">
    /// <c>CustVendTrans</c> to be used to generate the journal.
    /// </param>
    protected void createInvoiceJournal(CustVendTrans _custTrans)
    {
        CustPaymSched       custPaymSchedLocal;
        CustVendPaymSched   custVendPaymSchedLocal;
        SalesComplementaryInvoiceHeader complementaryInvoice = common;
        // <GBR>
        CustInvoiceJour_BR custInvoiceJourBR;
        // </GBR>

        if (calcTotals)
        {
            custInvoiceJour.SumTax = calcTotals.sumTax();
        }

        custInvoiceJour.RefNum = RefNum::ComplementaryInvoice;
        custInvoiceJour.DeliveryName = complementaryInvoice.thirdPartyName();
        custInvoiceJour.InvoicingName = CustInvoiceJour.DeliveryName;
        custInvoiceJour.PostingProfile = complementaryInvoice.PostingProfile;

        // <GBR>
        custInvoiceJourBR = custInvoiceJour.custInvoiceJour_BR();
        custInvoiceJourBR.FiscalDocumentType_BR = complementaryInvoice.FiscalDocumentType_BR;
        custInvoiceJourBR.FiscalEstablishment_BR = complementaryInvoice.fiscalEstablishment().RecId;
        custInvoiceJour.packCustInvoiceJour_BR(custInvoiceJourBR);
        // </GBR>

        custInvoiceJour.PaymentSched = complementaryInvoice.PaymSched;

        super(_custTrans);

        select firstOnly custPaymSchedLocal
            where custPaymSchedLocal.ExtTableId   == complementaryInvoice.TableId &&
                  custPaymSchedLocal.ExtRecId     == complementaryInvoice.RecId;

        if (custPaymSchedLocal.RecId)
        {
            custVendPaymSchedLocal = CustVendPaymSched::construct(SysModule::Cust, custInvoiceJour);
            custVendPaymSchedLocal.copyCustVendPaymSched(custPaymSchedLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustInvoiceTrans</c> record for the sales complementary invoice.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// <c>CustVendInvoiceJour</c> that the transaction will be based on.
    /// </param>
    protected void createInvoiceTrans(CustVendInvoiceJour _custVendInvoiceJour)
    {
        CustInvoiceTrans                    custInvoiceTrans;
        CustInvoiceJour                     custInvoiceJourLocal = _custVendInvoiceJour;
        SalesComplementaryInvoiceHeader     complementaryInvoice = common;
        Label                               label = new Label(CompanyInfo::find().LanguageId);

        custInvoiceTrans.initFromCustInvoiceJour(custInvoiceJourLocal);
        custInvoiceTrans.InventDimId = InventDim::inventDimIdBlank();
        custInvoiceTrans.LineHeader = label.extractString(literalStr("@GLS142")) + ' - ' +
                                      label.extractString(literalStr("@SYS24704")) + ' ' + CustInvoiceJour.InvoiceAccount;
        custInvoiceTrans.LineNum = 1;
        custInvoiceTrans.LineAmount = custInvoiceJourLocal.InvoiceAmount;
        custInvoiceTrans.LineAmountMST = custInvoiceJourLocal.InvoiceAmountMST;

        custInvoiceTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the journal for the sales complementary invoice.
    /// </summary>
    /// <param name="_custTrans">
    /// <c>CustVendTrans</c> record that will be initialized.
    /// </param>
    protected void initInvoiceJournal(CustVendTrans _custTrans)
    {
        CustTrans   custTrans = _custTrans;
        PaymTerm    paymTerm;
        SalesComplementaryInvoiceHeader complementaryInvoice = common;

        paymTerm   = complementaryInvoice.payment();

        custTrans.PaymMethod     = paymTerm.PaymMethod;
        custTrans.CashPayment    = paymTerm.Cash;
        custTrans.CashDiscCode   = complementaryInvoice.CashDisc;
        custTrans.DocumentDate   = complementaryInvoice.DocumentDate;
        custTrans.PostingProfile = complementaryInvoice.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesComplInvCalcTotals</c> calc totals instance to be used in
    /// the voucher creation process.
    /// </summary>
    /// <param name="_calcTotals">
    /// An instance of <c>SalesComplInvCalcTotals</c>.
    /// </param>
    public void parmCalcTotals(SalesComplInvCalcTotals _calcTotals)
    {
        calcTotals = _calcTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up information about the sales complementary invoice for projects from a given project invoice.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// A <c>CustVendInvoiceJour</c> Map instance containing the project invoice.
    /// </param>
    public void setInvoiceJournal(CustVendInvoiceJour _projInvoiceJour)
    {
        CustTable custTable = CustTable::find(_projInvoiceJour.InvoiceAccount);
        ;

        languageId  = _projInvoiceJour.LanguageId;
        paymMode    = custTable.PaymMode;
        paymSpec    = custTable.PaymSpec;

        custVendInvoiceJour = _projInvoiceJour;
        triangulation = _projInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>