<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTable2LineUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchTable2LineUpdate extends SalesPurchTableToLineUpdate
{
    NoYes                    updatePricedisc;
    PriceDiscUpdatePriceDisc updatePriceDiscMode;
    DialogButton             copyTaxGroupToMarkupTrans;
    boolean                  updateTaxGroupOnLines;
    AxPurchTable             axPurchTableDirectDelivery;

    private boolean          errorUpdatedHeaderSiteFound;
    protected DialogButton   copyOverrideSalesTaxToMarkupTrans;
    protected boolean        updateOverrideSalesTaxOnLines;
    private boolean isTaxIntegrationEnabledForPurchase = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateLine</Name>
				<Source><![CDATA[
    protected boolean canUpdateLine(Common _sourceLine, boolean _previousErrorsFound = false, AxInternalBase _axTable = null)
    {
        InventMovement  inventMovement;
        boolean         canUpdatePurchLine = true;
        PurchLine       purchLine = _sourceLine as PurchLine;
        boolean         showInventDimCouldNotBeChangedWarning = false;

        if (purchLine.isStocked())
        {
            inventMovement     = InventMovement::construct(_sourceLine);

            canUpdatePurchLine = !_axTable.getModifiedFields().in(fieldNum(PurchTable, InventSiteId))
                                || inventMovement.canChangeConsistentDim(true);

            if (canUpdatePurchLine)
            {
                canUpdatePurchLine = this.validateInventDimCouldBeChanged(_axTable as AxPurchTable, purchLine);
                showInventDimCouldNotBeChangedWarning = !canUpdatePurchLine;
            }
        }
        else
        {
            canUpdatePurchLine = !_axTable.getModifiedFields().in(fieldNum(PurchTable, InventSiteId))
                                || purchLine.receivedInTotal() == 0;
        }

        if (canUpdatePurchLine
            && PurchTable2LineValidateFinDimensionsFlight::instance().isEnabled())
        {
            canUpdatePurchLine = purchLine.checkExistsInvoiceWithBudgetCheckResults();
        }

        if (!canUpdatePurchLine)
        {
            if (!_previousErrorsFound)
            {
                info("@SYS114392");
            }

            if (showInventDimCouldNotBeChangedWarning
                && !errorUpdatedHeaderSiteFound)
            {
                checkFailed("@SYS98272");
                errorUpdatedHeaderSiteFound = true;
            }

            if (purchLine.isCategoryBased())
            {
                info(strFmt("@SYS114393", EcoResCategory::find(purchLine.ProcurementCategory).Name, purchLine.PurchQty));
            }
            else
            {
                info(strFmt("@SYS114393", purchLine.ItemId, purchLine.PurchQty));
            }
        }

        return canUpdatePurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimCouldBeChanged</Name>
				<Source><![CDATA[
    private boolean validateInventDimCouldBeChanged(AxPurchTable _axPurchTable, PurchLine _purchLine)
    {
        boolean canInventDimBeChanged = true;
        Set modifiedPurchTableFields = _axPurchTable.getModifiedFields();

        if ((modifiedPurchTableFields.in(fieldNum(PurchTable, InventSiteId))
            || modifiedPurchTableFields.in(fieldNum(PurchTable, InventLocationId)))
            && !_purchLine.MCRDropShipment
            && _purchLine.InventRefTransId
            && InventTransOrigin::findByInventTransId(_purchLine.InventRefTransId).ReferenceId
            && InventTransOrigin::findByInventTransId(_purchLine.InventTransId))
        {
            canInventDimBeChanged = this.canModifyInventoryDimensions(_axPurchTable, _purchLine);
        }

        return canInventDimBeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyInventoryDimensions</Name>
				<Source><![CDATA[
    private boolean canModifyInventoryDimensions(AxPurchTable _axPurchTable, PurchLine _purchLine)
    {
        InventDim purchLineInventDim = _purchLine.inventDim();
        PurchTable purchTable = _axPurchTable.purchTable();
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_purchLine.ItemId);

        boolean isFinancialInventDimChanged = (purchLineInventDim.InventSiteId != purchTable.InventSiteId
                    && inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSiteId)).isFinancialInventoryEnabled())
                || (purchLineInventDim.InventLocationId != purchTable.InventLocationId
                    && inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventLocationId)).isFinancialInventoryEnabled());

        return !isFinancialInventDimChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxLineObject</Name>
				<Source><![CDATA[
    protected AxInternalBase getAxLineObject(AxInternalBase _axTable, Common _sourceLine)
    {
        AxPurchLine axPurchLine =  AxPurchLine::newPurchLine(_sourceLine);
        AxPurchTable axPurchTable = _axTable as AxPurchTable;
        PurchLine purchLine = _sourceLine as PurchLine;

        if (purchLine.MCRDropShipment
            && axPurchTable
            && (axPurchTable.isFieldModified(fieldNum(PurchTable, InventSiteId))
                || axPurchTable.isFieldModified(fieldNum(PurchTable, InventLocationId))))
        {
            info(strFmt("@SCM:DirectDeliveryPurchLinesInventDimNotUpdateWhenHeaderUpdate", purchLine.LineNumber));

            this.initializeAxPurchTableObjectForDirectDelivery();
            
            axPurchTable = axPurchTableDirectDelivery;
        }

        axPurchLine.axPurchTable(axPurchTable);

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAxPurchTableObjectForDirectDelivery</Name>
				<Source><![CDATA[
    private void initializeAxPurchTableObjectForDirectDelivery()
    {
        if (!axPurchTableDirectDelivery)
        {
            axPurchTableDirectDelivery = this.getAxTableObject(sourceTable);

            if (updateFields)
            {
                ListEnumerator updateFieldsEnumerator = updateFields.getEnumerator();
        
                while (updateFieldsEnumerator.moveNext())
                {
                    SalesPurchTableToLineField salesPurchTableToLineField = updateFieldsEnumerator.current();
        
                    if (salesPurchTableToLineField.parmFieldId() != fieldNum(PurchTable, InventSiteId)
                            && salesPurchTableToLineField.parmFieldId() != fieldNum(PurchTable, InventLocationId)
                            && salesPurchTableToLineField.parmUpdateLines())
                    {
                        this.setFieldAsModified(axPurchTableDirectDelivery, salesPurchTableToLineField.parmFieldId());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxTableObject</Name>
				<Source><![CDATA[
    protected AxInternalBase getAxTableObject(Common _sourceTable)
    {
        return AxPurchTable::newPurchTable(_sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    protected TableId lineTableId()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePricedisc</Name>
				<Source><![CDATA[
    public NoYes parmUpdatePricedisc(NoYes _updatePricedisc = updatePricedisc)
    {
        updatePricedisc = _updatePricedisc;
        return updatePricedisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePriceDiscMode</Name>
				<Source><![CDATA[
    public PriceDiscUpdatePriceDisc parmUpdatePriceDiscMode(PriceDiscUpdatePriceDisc _updatePriceDiscMode = updatePriceDiscMode)
    {
        updatePriceDiscMode = _updatePriceDiscMode;
        return updatePriceDiscMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLine</Name>
				<Source><![CDATA[
    protected QueryRun queryRunLine(boolean _update = false)
    {
        PurchTable  purchTable = sourceTable as PurchTable;

        return new QueryRun(purchTable.queryPurchLine(_update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAsModified</Name>
				<Source><![CDATA[
    protected void setFieldAsModified(AxInternalBase _axTable, FieldId _fieldId)
    {
        AxPurchTable    axPurchTable;
        TableId         realTableId = PurchTable::internalFieldIdToTableId_W(_fieldId);
        FieldId         realFieldId = PurchTable::internalFieldIdToFieldId_W(_fieldId);

        if (realTableId == tableNum(PurchTable))
        {
            switch (_fieldId)
            {
                case fieldNum(PurchTable, InventLocationId):
                    _axTable.setFieldAsModified(fieldNum(PurchTable, InventSiteId));
                    break;

                case fieldNum(PurchTable, TaxGroup):
                    updateTaxGroupOnLines = true;
                    break;

                case fieldNum(PurchTable, OverrideSalesTax):
                    updateOverrideSalesTaxOnLines = true;
                    copyOverrideSalesTaxToMarkupTrans = this.promptCopyOverrideSalesTaxToPurchLineCharges();
                    break;
            }

            _axTable.setFieldAsModified(_fieldId);
        }
        else
        {
            if (_axTable is AxPurchTable)
            {
                axPurchTable = _axTable;

                if (realTableId == tableNum(PurchTable_W))
                {
                    axPurchTable.axPurchTable_W().setFieldAsModified(realFieldId);
                }
                // <GBR>
                else if (realTableId == tableNum(PurchTable_BR))
                {
                    axPurchTable.axPurchTable_BR().setFieldAsModified(realFieldId);
                }
                // </GBR>
                // <GEERU>
                else if (realTableId == tableNum(PurchTable_RU))
                {
                    axPurchTable.axPurchTable_RU().setFieldAsModified(realFieldId);
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected void updateLine(Common _sourceLine, AxInternalBase _axLine, Common _sourceTable)
    {
        this.updatePriceDisc(_sourceLine, _axLine);

        this.updateTaxGroupOnLine(_sourceLine, _sourceTable);

        this.updateOverrideSalesTaxOnLine(_sourceLine, _sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDisc</Name>
				<Source><![CDATA[
    protected void updatePriceDisc(Common _sourceLine, AxInternalBase _axLine)
    {
        container   priceDiscChangePolicyFieldIds;
        int         i;

        if (updatePricedisc)
        {
            switch (updatePriceDiscMode)
            {
                case PriceDiscUpdatePriceDisc::UpdateIndividual,
                     PriceDiscUpdatePriceDisc::KeepManualSystem :

                    priceDiscChangePolicyFieldIds = PriceDiscPolicyCheckPolicy::newFromParm(_sourceLine).getPolicyFields();
                    for (i=1; i<=conLen(priceDiscChangePolicyFieldIds); i++)
                    {
                        _axLine.setFieldAsTouched(conPeek(priceDiscChangePolicyFieldIds, i));
                    }
                    break;

                case PriceDiscUpdatePriceDisc::UpdateAll :
                    PurchLine::resetAxPurchLinePolicies(_axLine);
                    break;
            }
        }

        _sourceLine.salesPurchLineInterface().setPriceDiscFixedPolicy(_sourceLine, _axLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxGroupOnLine</Name>
				<Source><![CDATA[
    protected void updateTaxGroupOnLine(Common _sourceLine, Common _sourceTable)
    {
        PurchLine   purchLine = _sourceLine as PurchLine;
        PurchTable  purchTable = _sourceTable as PurchTable;

        if (updateTaxGroupOnLines)
        {
            MarkupTrans::updateTaxGroup(purchLine.TableId, purchLine.RecId, purchTable.TaxGroup, purchLine.TaxGroup, copyTaxGroupToMarkupTrans, purchLine.isInvoiceMatched());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverrideSalesTaxOnLine</Name>
				<Source><![CDATA[
    private void updateOverrideSalesTaxOnLine(Common _sourceLine, Common _sourceTable)
    {
        if (isTaxIntegrationEnabledForPurchase)
        {
            PurchLine purchLine = _sourceLine as PurchLine;
            PurchTable purchTable = _sourceTable as PurchTable;

            if (updateOverrideSalesTaxOnLines)
            {
                MarkupTrans::updateOverrideSalesTax(
                    purchLine.TableId,
                    purchLine.RecId,
                    purchTable.OverrideSalesTax,
                    copyOverrideSalesTaxToMarkupTrans,
                    purchLine.isInvoiceMatched());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reread purchase line to get the latest value in order to avoid updating conflict error.
    /// </summary>
    /// <param name="_sourceLine">
    /// A table buffer represents purchase line.
    /// </param>
    /// <param name="_sourceTable">
    /// A table buffer represents purchase table.
    /// </param>
    protected void rereadSourceLine(Common _sourceLine, Common _sourceTable)
    {
        PurchTable purchTable = _sourceTable as PurchTable;
        
        // If direct delivery purchase order is confirmed, it will roll back to Approved when first line is updated,
        // causing all lines to be updated with MCRDropShipStatus.
        if (purchTable.MCRDropShipment
            &&  purchTable.DocumentState == VersioningDocumentState::Confirmed)
        {
            _sourceLine.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTable2LineUpdate construct(PurchTable2LineUpdatePrompt _purchTable2LineUpdatePrompt)
    {
        PurchTable2LineUpdate   purchTable2LineUpdate;

        purchTable2LineUpdate = new PurchTable2LineUpdate();
        purchTable2LineUpdate.initUpdateFields(_purchTable2LineUpdatePrompt);
        return purchTable2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToPurchLineCharges</Name>
				<Source><![CDATA[
    private DialogButton promptCopyOverrideSalesTaxToPurchLineCharges()
    {
        DialogButton ret = DialogButton::No;
        PurchTable purchTable = sourceTable as PurchTable;

        if (isTaxIntegrationEnabledForPurchase)
        {
            MarkupTrans markupTrans;
            PurchLine purchLine;
            select firstonly RecId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                join TransTableId, TransRecId, IsDeleted from markupTrans
                    where markupTrans.TransTableId == tableNum(PurchLine)
                        && markupTrans.TransRecId == purchLine.RecId
                        && !markupTrans.IsDeleted;

            if (purchLine.RecId)
            {
                ret = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(tableNum(PurchLine), purchLine.RecId, false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>