<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompensationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCompensationService</c> class is used to apply compensation
/// increases or updates to selected forecast positions.
/// </summary>
public class HcmPositionForecastCompensationService
{
    HcmPositionForecastAssignCostElement positionForecastAssignCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processPositionForecastCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of a compensation increase or update for selected forecast positions.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>HcmPositionForecastCompensationContract</c> class.
    /// </param>
    public void processPositionForecastCompensation(HcmPositionForecastCompensationContract _contract)
    {
        Set                                   positionForecastScenarioSet;
        HcmPositionAssignCostElement_CompGrid positionForecastAssignCostElement;
        container                             positionForecastScenarioContainer = _contract.parmPositionForecastScenarioContainer();
        boolean                               isCompensationRateUpdate = _contract.parmSelectedBudgetPlanProcess() && _contract.parmSelectedBudgetPlanScenario();

        // Check if the process is for a compensation rate table update and if the list of positions to update is not empty.
        if (isCompensationRateUpdate && _contract.parmCompGroupRecId() != 0)
        {
            positionForecastScenarioContainer = HcmPositionForecastScenario::getPosForcstScenarioByProcessScenarioSet(_contract.parmSelectedBudgetPlanProcess(),
                                                                                                                   _contract.parmSelectedBudgetPlanScenario(),
                                                                                                                   _contract.parmCompGroupRecId()).pack();
        }

        positionForecastScenarioSet = Set::create(positionForecastScenarioContainer);

        if (isCompensationRateUpdate && positionForecastScenarioSet.empty())
        {
            // Show the information message for the compensation update when there is no any position needed to be updated.
            info("@SYP4940039");
        }
        else if (positionForecastScenarioSet.empty() == false)
        {
            positionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newAssignCostFromCompIncrease(positionForecastScenarioContainer);

            positionForecastAssignCostElement.parmIsCompensationIncrease(!isCompensationRateUpdate);
            positionForecastAssignCostElement.runForecastPositionCostAssignments();
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
