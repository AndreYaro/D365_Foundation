<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderEntryStatisticsCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesOrderEntryStatisticsCleanUp</c> class is used to delete sales order entry statistics line by transaction date.
/// </summary>
class SalesOrderEntryStatisticsCleanUp extends RunBaseBatch implements BatchRetryable
{
    #ISOCountryRegionCodes
    TransDate   transDateBefore;
    DialogField dialogTransDateBefore;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        transDateBefore
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoSA, GlobalizationConstants::FeatureReferenceSE00003] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrderEntryStatistics</Name>
				<Source><![CDATA[
	/// <summary>
    /// Deletes sales order entry statistics lines which transaction date before selected date.
    /// </summary>
    protected void deleteOrderEntryStatistics()
    {
        SalesOrderEntryStatistics salesOrderEntryStatistics;

        salesOrderEntryStatistics.skipDataMethods(true);
        salesOrderEntryStatistics.skipDeleteActions(true);

        delete_from salesOrderEntryStatistics
            where salesOrderEntryStatistics.TransDate <= transDateBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogTransDateBefore = dialog.addFieldValue(extendedTypeStr(TransDate),transDateBefore,"@SYS75241","@SYS97225");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        transDateBefore = dialogTransDateBefore.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        transDateBefore = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.deleteOrderEntryStatistics();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesOrderEntryStatisticsCleanUp construct()
    {
        SalesOrderEntryStatisticsCleanUp salesOrderEntryStatisticsCleanUp = new SalesOrderEntryStatisticsCleanUp();

        salesOrderEntryStatisticsCleanUp.getLast();
        salesOrderEntryStatisticsCleanUp.init();

        return salesOrderEntryStatisticsCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get class description.
    /// </summary>
    /// <returns>
    /// Order entry statistics clean up.
	/// </returns>
    public static ClassDescription description()
    {
        return "@SYS97226";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SalesOrderEntryStatisticsCleanUp salesOrderEntryStatisticsCleanUp = SalesOrderEntryStatisticsCleanUp::construct();

		if (salesOrderEntryStatisticsCleanUp.prompt())
        {
            salesOrderEntryStatisticsCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>