<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceJournalCreateBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesInvoiceJournalCreateBase</c> class is the base class used to create sales invoice journals.
/// </summary>
abstract class SalesInvoiceJournalCreateBase extends FormletterJournalCreate
{
    #ISOCountryRegionCodes

    CustInvoiceJour custInvoiceJour;
    CustInvoiceTrans custInvoiceTrans;

    SalesParmTable salesParmTable;
    SalesParmUpdate salesParmUpdate;

    VendInvoiceJour vendInvoiceJour;
    VendPackingSlipJour vendPackingSlipJour;
    AddressCountryRegionId vendCountryRegionId;
    protected AddressStateId vendStateId;

    RecordSortedList recordListSalesParmLine;
    NoYes creditNote;
    NoYes foundRemains;
    // <GEERU>
    CustInvoicePrintoutType_RU invoicePrintoutType;
    boolean markupOfTypeCustVendExists;
    boolean extraPrintoutLineExists;
    // </GEERU>

    // <GTH>
    boolean isUnrealizedVATEnabled;
    // Indicates whether realized or unrealized VAT exists in current posting invoice.
    // Value is set when method isSingleTaxType_TH is called.
    boolean isRealizedVAT;
    boolean isDebitNote;
    boolean isNoneFormatWithRealizedVAT;
    // </GTH>

    // <GMY>
    boolean isDebitNote_MY;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a journal and voucher number from the number sequences for the sales invoice.
    /// </summary>
    /// <returns>
    /// A <c>NumberSeq</c> object.
    /// </returns>
    protected NumberSeq allocateNumAndVoucher()
    {
        RefRecId invoiceNumber;
        RefRecId invoiceVoucher;
        NumberSequenceDatatype numberDatatype;
        NumberSequenceDatatype voucherDatatype;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        boolean voucherEqualsNumber;

        NumberSeq tmpNumberSeq;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        InventProfileTypeSetup_RU inventProfileTypeSetup = InventProfileTypeSetup_RU::find(salesParmTable.InventProfileType_RU);
        boolean invoiceVoucherAllowSameAs_RU;
        // </GEERU>
        // <GEEU>
        boolean countryRegion_LTLV = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]);

        // <GMY>
        boolean isIsoMY = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>

        if (countryRegion_LTLV && salesParmTable.DocAutoNumbering_LT)
        {
            invoiceNumber = NumberSequenceTable::findByNaturalKey(LtInvoiceAutoNumberingTable::find(ltDocNumberingCode).NumberSequenceCode, NumberSeqScopeFactory::createDefaultScope().getId()).RecId;
        }
        // </GEEU>

        // <GEERU>
        if (countryRegion_RU && salesParmTable.CorrectionType_RU == FactureCorrectionType_RU::Revision)
        {
            invoiceNumber = SalesParameters::numRefSalesRevisionInvoiceId_RU().NumberSequenceId;
        }
        // </GEERU>

        if (CustParameters::find().EnableChronologicalInvoiceNumbering_W)
        {
            tmpNumberSeq = ChronologicalNumberingSetup_W::getTmpNumberSeq(
                scopeId,
                this.isInvoiceCreditNote(),
                salesParmTable.Transdate,
                this.numberSequenceGroupId(),
                SalesParameters::numRefInvoiceId(),
                SalesParameters::numRefSalesInvoiceVoucher(),
                SalesParameters::numRefSalesCreditNoteId(),
                SalesParameters::numRefSalesCreditNoteVoucher());
        }
        else
        if (this.numberSequenceGroupId()
        // <GEERU>
        || inventProfileTypeSetup.NumberSequenceGroupId
        // </GEERU>
        )
        {
            if (this.isInvoiceCreditNote() || salesParmTable.salesTable().isCreditNote_PL())
            {
                numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesCreditNoteId().NumberSequenceDatatype);
                voucherDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesCreditNoteVoucher().NumberSequenceDatatype);

                // <GEERU>
                if (countryRegion_RU
                    && ! invoiceNumber)
                {
                    switch (this.parmCustInvoicePrintoutType_RU())
                    {
                        case CustInvoicePrintoutType_RU::M_15 :
                            if (! this.parmMarkupOfTypeCustVendExists_RU() &&
                                ! this.parmExtraPrintoutLineExists_RU())
                            {
                                numberDatatype = salesParmTable.Correct_RU ?
                                                 NumberSequenceDatatype::find(SalesParameters::numRefCustCorrectInvoiceId_M15_RU().NumberSequenceDatatype) :
                                                 NumberSequenceDatatype::find(SalesParameters::numRefCustInvoiceId_M15_RU().NumberSequenceDatatype);
                                invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                                if (! invoiceNumber && inventProfileTypeSetup.NumberSequenceGroupId)
                                {
                                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                                }

                                if (! invoiceNumber)
                                {
                                    invoiceNumber = salesParmTable.Correct_RU ?
                                                    SalesParameters::numRefCustCorrectInvoiceId_M15_RU().NumberSequenceId :
                                                    SalesParameters::numRefCustInvoiceId_M15_RU().NumberSequenceId;
                                }
                                break;
                            } 
                        // else use TORG12 number sequences
                        case CustInvoicePrintoutType_RU::TORG_12 :
                            numberDatatype = salesParmTable.Correct_RU ?
                                             NumberSequenceDatatype::find(SalesParameters::numRefSalesCorrectCreditNoteId_RU().NumberSequenceDatatype) :
                                             NumberSequenceDatatype::find(SalesParameters::numRefSalesCreditNoteId().NumberSequenceDatatype);
                            invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                            if (! invoiceNumber && inventProfileTypeSetup.NumberSequenceGroupId)
                            {
                                invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                            }

                            if (! invoiceNumber)
                            {
                                invoiceNumber = salesParmTable.Correct_RU ?
                                                SalesParameters::numRefSalesCorrectCreditNoteId_RU().NumberSequenceId :
                                                SalesParameters::numRefSalesCreditNoteId().NumberSequenceId;
                            }
                            break;
                    }
                }
                else
                {
                    // </GEERU>
                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                    if (!invoiceNumber)
                    {
                        invoiceNumber = SalesParameters::numRefSalesCreditNoteId().NumberSequenceId;
                    }
                    // <GEERU>
                }

                if (countryRegion_RU)
                {
                    voucherDatatype = salesParmTable.Correct_RU ?
                                      NumberSequenceDatatype::find(SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU().NumberSequenceDatatype) :
                                      NumberSequenceDatatype::find(SalesParameters::numRefSalesCreditNoteVoucher().NumberSequenceDatatype);
                }
                // </GEERU>
                /* <SCM>
                if (SalesParameters::numRefSalesCreditNoteVoucher().AllowSameAs)
                </SCM> */
                // <GEERU>
                if (countryRegion_RU && salesParmTable.Correct_RU)
                {
                    invoiceVoucherAllowSameAs_RU = SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU().AllowSameAs;
                }
                else
                {
                    invoiceVoucherAllowSameAs_RU = SalesParameters::numRefSalesCreditNoteVoucher().AllowSameAs;
                }

                if (invoiceVoucherAllowSameAs_RU)
                // </GEERU>
                {
                    voucherEqualsNumber = true;
                    invoiceVoucher = invoiceNumber;
                }
                else
                {
                    invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                    if (!invoiceVoucher)
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            if (inventProfileTypeSetup.NumberSequenceGroupId)
                            {
                                invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                            }

                            if (! invoiceVoucher)
                            {
                                invoiceVoucher = salesParmTable.Correct_RU ?
                                                 SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU().NumberSequenceId :
                                                 SalesParameters::numRefSalesCreditNoteVoucher().NumberSequenceId;
                            }
                        }
                        else
                        {
                            // </GEERU>
                            invoiceVoucher = SalesParameters::numRefSalesCreditNoteVoucher().NumberSequenceId;
                            // <GEERU>
                        }
                        // </GEERU>
                    }
                }
            }
            else
            {
                // <GEERU>
                if (countryRegion_RU
                    && ! invoiceNumber)
                {
                    switch (this.parmCustInvoicePrintoutType_RU())
                    {
                        case CustInvoicePrintoutType_RU::M_15 :
                            if (! this.parmMarkupOfTypeCustVendExists_RU() &&
                                ! this.parmExtraPrintoutLineExists_RU())
                            {
                                numberDatatype = salesParmTable.Correct_RU ?
                                                 NumberSequenceDatatype::find(SalesParameters::numRefCustCorrectInvoiceId_M15_RU().NumberSequenceDatatype) :
                                                 NumberSequenceDatatype::find(SalesParameters::numRefCustInvoiceId_M15_RU().NumberSequenceDatatype);
                                invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                                if (! invoiceNumber && inventProfileTypeSetup.NumberSequenceGroupId)
                                {
                                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                                }

                                if (! invoiceNumber)
                                {
                                    invoiceNumber = salesParmTable.Correct_RU ?
                                                    SalesParameters::numRefCustCorrectInvoiceId_M15_RU().NumberSequenceId :
                                                    SalesParameters::numRefCustInvoiceId_M15_RU().NumberSequenceId;
                                }
                                break;
                            } // else use TORG12 number sequences
                        case CustInvoicePrintoutType_RU::TORG_12 :
                            numberDatatype = salesParmTable.Correct_RU ?
                                             NumberSequenceDatatype::find(SalesParameters::numRefSalesCorrectInvoiceId_RU().NumberSequenceDatatype) :
                                             NumberSequenceDatatype::find(SalesParameters::numRefInvoiceId().NumberSequenceDatatype);
                            invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                            if (! invoiceNumber && inventProfileTypeSetup.NumberSequenceGroupId)
                            {
                                invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                            }

                            if (! invoiceNumber)
                            {
                                invoiceNumber = salesParmTable.Correct_RU ?
                                                SalesParameters::numRefSalesCorrectInvoiceId_RU().NumberSequenceId :
                                                SalesParameters::numRefInvoiceId().NumberSequenceId;
                            }
                            break;
                    }
                }
                else
                {
                    // </GEERU>
                    // <GTH>
                    if (isUnrealizedVATEnabled
                        && isDebitNote)
                    {
                        numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesDebitNoteId().NumberSequenceDatatype);
                        voucherDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesDebitNoteVoucher().NumberSequenceDatatype);
                    }
                    // <GMY>
                    else if (isIsoMY && isDebitNote_MY)
                    {
                        numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesDebitNoteId_MY().NumberSequenceDatatype);
                        voucherDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesDebitNoteVoucher_MY().NumberSequenceDatatype);
                    }
                    // </GMY>
                    else
                    {
                        if (isUnrealizedVATEnabled
                            && isNoneFormatWithRealizedVAT)
                        {
                            // Free text tax invoice sequence will be generated.
                            numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesTaxInvoiceId().NumberSequenceDatatype);
                            voucherDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesTaxInvoiceVoucher().NumberSequenceDatatype);
                        }
                        else
                        {
                            // </GTH>
                            numberDatatype = NumberSequenceDatatype::find(SalesParameters::numRefInvoiceId().NumberSequenceDatatype);
                            voucherDatatype = NumberSequenceDatatype::find(SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceDatatype);
                            // <GTH>
                        }
                    }
                    // </GTH>

                    invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                    if (!invoiceNumber)
                    {
                        invoiceNumber = SalesParameters::numRefInvoiceId().NumberSequenceId;
                    }
                    // <GEERU>
                }

                if (countryRegion_RU)
                {
                    voucherDatatype = NumberSequenceDatatype::find(salesParmTable.Correct_RU ?
                                                                    SalesParameters::numRefSalesCorrectInvoiceId_RU().NumberSequenceDatatype :
                                                                    SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceDatatype);
                }
                // </GEERU>

                /* <SCM>
                if (SalesParameters::numRefSalesInvoiceVoucher().AllowSameAs)
                </SCM> */
                // <GEERU>
                if (countryRegion_RU && salesParmTable.Correct_RU)
                {
                    invoiceVoucherAllowSameAs_RU = SalesParameters::numRefSalesCorrectInvoiceVoucher_RU().AllowSameAs;
                }
                else
                {
                    invoiceVoucherAllowSameAs_RU = SalesParameters::numRefSalesInvoiceVoucher().AllowSameAs;
                }

                if (invoiceVoucherAllowSameAs_RU)
                // </GEERU>
                {
                    voucherEqualsNumber = true;
                    invoiceVoucher = invoiceNumber;
                }
                else
                {
                    invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, this.numberSequenceGroupId()).NumberSequenceId;

                    if (!invoiceVoucher)
                    {
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            if (inventProfileTypeSetup.NumberSequenceGroupId)
                            {
                                invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, inventProfileTypeSetup.NumberSequenceGroupId).NumberSequenceId;
                            }

                            if (! invoiceVoucher)
                            {
                                invoiceVoucher = salesParmTable.Correct_RU ?
                                                    SalesParameters::numRefSalesCorrectInvoiceVoucher_RU().NumberSequenceId :
                                                    SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceId;
                            }
                        }
                        else
                        {
                            // </GEERU>
                            invoiceVoucher = SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceId;
                            // <GEERU>
                        }
                        // </GEERU>
                    }
                }
            }

            tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber, invoiceVoucher, voucherEqualsNumber);
        }
        // <GEERU>
        else if (countryRegion_RU || countryRegion_LTLV)
        {
            if (invoiceNumber)
            {
                if (this.isInvoiceCreditNote())
                {
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber,
                                                                        salesParmTable.Correct_RU ?
                                                                        SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU().NumberSequenceId :
                                                                        SalesParameters::numRefSalesCreditNoteVoucher().NumberSequenceId,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        UnknownNoYes::No);
                } 
                // if credit note
                else
                { 
                    // if not credit note
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber,
                                                                        salesParmTable.Correct_RU ?
                                                                        SalesParameters::numRefSalesCorrectInvoiceVoucher_RU().NumberSequenceId :
                                                                        SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceId,
                                                                        false,
                                                                        false,
                                                                        false,
                                                                        UnknownNoYes::No);
                }
            }
            else
            {
                switch (this.parmCustInvoicePrintoutType_RU())
                {
                    case CustInvoicePrintoutType_RU::M_15 :
                        if (! this.parmMarkupOfTypeCustVendExists_RU() &&
                            ! this.parmExtraPrintoutLineExists_RU())
                        {
                            if (this.isInvoiceCreditNote())
                            {
                                tmpNumberSeq = NumberSeq::newGetNumAndVoucher(salesParmTable.Correct_RU ?
                                                                                SalesParameters::numRefCustCorrectInvoiceId_M15_RU() :
                                                                                SalesParameters::numRefCustInvoiceId_M15_RU(),
                                                                                salesParmTable.Correct_RU ?
                                                                                SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU() :
                                                                                SalesParameters::numRefSalesCreditNoteVoucher(),
                                                                                false,
                                                                                false,
                                                                                UnknownNoYes::No);
                            }
                            else
                            {
                                tmpNumberSeq = NumberSeq::newGetNumAndVoucher(salesParmTable.Correct_RU ?
                                                                                SalesParameters::numRefCustCorrectInvoiceId_M15_RU() :
                                                                                SalesParameters::numRefCustInvoiceId_M15_RU(),
                                                                                salesParmTable.Correct_RU ?
                                                                                SalesParameters::numRefSalesCorrectInvoiceVoucher_RU() :
                                                                                SalesParameters::numRefSalesInvoiceVoucher(),
                                                                                false,
                                                                                false,
                                                                                UnknownNoYes::No);
                            }
                            break;
                        } 
                    // else use TORG12 number sequences
                    case CustInvoicePrintoutType_RU::TORG_12 :
                        if (this.isInvoiceCreditNote())
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(salesParmTable.Correct_RU ?
                                                                            SalesParameters::numRefSalesCorrectCreditNoteId_RU() :
                                                                            SalesParameters::numRefSalesCreditNoteId(),
                                                                            salesParmTable.Correct_RU ?
                                                                            SalesParameters::numRefSalesCorrectCreditNoteVoucher_RU() :
                                                                            SalesParameters::numRefSalesCreditNoteVoucher(),
                                                                            false,
                                                                            false,
                                                                            UnknownNoYes::No);
                        }
                        else
                        {
                            tmpNumberSeq = super();
                        }
                        break;
                }
            }
        }
        else if (!countryRegion_RU)
        {
            // </GEERU>
            /* <SCM>

            else if (this.isInvoiceCreditNote())
            </SCM> */
            // <GEERU>
            if (this.isInvoiceCreditNote() || salesParmTable.salesTable().isCreditNote_PL())
            // </GEERU>
            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(SalesParameters::numRefSalesCreditNoteId(),
                                                        SalesParameters::numRefSalesCreditNoteVoucher());
            else
            {
                // <GTH>
                if (isUnrealizedVATEnabled
                    && isDebitNote)
                {
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucher(
                        SalesParameters::numRefSalesDebitNoteId(),
                        SalesParameters::numRefSalesDebitNoteVoucher());
                }
                // <GMY>
                else if (isIsoMY && isDebitNote_MY)
                {
                    tmpNumberSeq = NumberSeq::newGetNumAndVoucher(
                        SalesParameters::numRefSalesDebitNoteId_MY(),
                        SalesParameters::numRefSalesDebitNoteVoucher_MY());
                }
                // </GMY>
                else
                {
                    if (isUnrealizedVATEnabled
                        && isNoneFormatWithRealizedVAT)
                    {
                        // Free text tax invoice sequence will be generated.
                        tmpNumberSeq = NumberSeq::newGetNumAndVoucher(SalesParameters::numRefSalesTaxInvoiceId(),
                            SalesParameters::numRefSalesTaxInvoiceVoucher());
                    }
                    else
                    {
                        // </GTH>
                        tmpNumberSeq = super();
                        // <GTH>
                    }
                }
                // </GTH>
                // <GEERU>
            }
            // </GEERU>
        }
        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = super();

        if (ret && TradeBLWIParameters::isBLWIFeatureEnabled())
        {
            ret = TradeBLWIParameters::checkBLWI(salesParmTable.salesTable().RecId, TradeBLWITypeOfForm::SalesTable, CustTable::find(salesParmTable.InvoiceAccount));
        }

        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]) && CustParameters::find().EnableChronologicalInvoiceNumbering_W)
            || MultipleTaxIdReportingHelper::isLegalEntityOrTaxInCountryRegion(
                this.parmTax(), [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            using (TaxBookContext context = TaxBookContext::construct())
            {
                context.parmIsLegalEntityOrTaxInIT(MultipleTaxIdReportingHelper::isLegalEntityOrTaxInCountryRegion(
                    this.parmTax(), [#isoIT], MultipleTaxIdScope::VATDeclaration));
                ret = ret && CustInvoiceJour::validateChronologicalDates_FR(salesParmTable);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the journal lineamount excluded tax.
    /// </summary>
    /// <returns>
    ///   The calculated line amount excluded tax.
    /// </returns>
    abstract protected AmountCur calcLineAmountExclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the tax amount for the journal line.
    /// </summary>
    /// <returns>
    ///    The tax amount for the journal line.
    /// </returns>
    abstract protected AmountCur calcLineAmountTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the discount amount excluded tax for the journal line.
    /// </summary>
    /// <returns>
    ///    The discount amount excluded tax for the journal line.
    /// </returns>
    abstract protected DiscAmount calcLineDiscExclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a journal line can be created.
    /// </summary>
    /// <param name="_salesParmLine">
    /// A <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    /// true if a journal line can be created; otherwise, false.
    /// </returns>
    protected boolean checkDiscardLine(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        if (salesParmLine.DeliverNow == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to check if a duplicate invoice number exists.
    /// </summary>
    /// <param name="_num">
    ///     InvoiceId of the unposted transaction that needs to be checked for duplicity.
    /// </param>
    /// <param name="_salesId">
    ///     SalesId of the unposted transaction.
    /// </param>
    /// <param name="_transDate">
    ///     InvoiceDate of the unposted transaction.
    /// </param>
    /// <returns>
    ///     True, if a a posted transcation exists with the same InvoiceId.
    /// </returns>
    final public boolean checkDuplicateNum_W(Num _num, SalesIdBase _salesId, TransDate _transDate)
    {
        boolean ret = super(_num, _salesId, _transDate);

        if (ret && _num)
        {
            ret = CustInvoiceJour::checkDuplicateNum_W(_num, _salesId, _transDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal header for the sales invoice.
    /// </summary>
    protected void createJournalHeader()
    {
        this.setInvoiceType_IT();

        // <GEEU>
        // </GEEU>
        // <GEECZ>
        CustInvoiceJourSymbol custInvoiceJourSymbol;
        // </GEECZ>
        // <GEERU>
        CustInvoiceJourCorrectionType_RU custInvoiceJourCorrType;
        // </GEERU>

        this.setDeliveryFields();

        this.initializeCustomerInvoiceJournal();

        // If customer turns on the feature to disable the generation of Source Document Data from feature management,
        // then sourceDocumentHeader Data won't be created and won't be mapped to CustInvoiceJour.
        // As a temporary solution for bug 842562, creating a dummy source document header without creation actual entry in the table.
        // This temporary solution must be removed after the refactoring of all the code where Source Document Header used as reference for Sales Order.
        if (CustSourceDocumentDataGenerationDisableFeature::isEnabled())
        {
            custInvoiceJour.SourceDocumentHeader = this.createMockUpSourceDocumentHeader();
        }
        else
        {
            SourceDocumentHeader sourceDocumentHeader;
            this.initializeSourceDocumentHeaderForCreate(sourceDocumentHeader);
            custInvoiceJour.SourceDocumentHeader = SourceDocumentHeader::createSourceDocumentHeader(tableNum(CustInvoiceJour), sourceDocumentHeader);
        }

        custInvoiceJour.insert();
        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            custInvoiceJourSymbol.initFromCustInvoiceJourSales(custInvoiceJour);
            if (custInvoiceJourSymbol.CustInvoiceJour)
            {
                custInvoiceJourSymbol.insert();
            }
        }
        // </GEECZ>
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            SalesTable localSalesTable = salesParmTable.salesTable();
            TaxSpecificExchangeRateHelper::copyFromTaxSpecificExchangeRateType(
                localSalesTable.TableId,
                localSalesTable.RecId,
                custInvoiceJour.TableId,
                custInvoiceJour.RecId);
        }
        // <GEEU>
        else if (TaxParameters::isBankExchRateEnabled_W())
        {
            SalesTable localSalesTable = salesParmTable.salesTable();
            SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(localSalesTable.TableId, localSalesTable.RecId);

            if (salesTaxTransactionExchangeRate)
            {
                SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(custInvoiceJour.TableId, custInvoiceJour.RecId, custInvoiceJour.CurrencyCode,
                    salesTaxTransactionExchangeRate.SalesTaxExchangeRate, salesTaxTransactionExchangeRate.DateOfVATRegister);
            }
        }
        // </GEEU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceJourCorrType.CustInvoiceJour = custInvoiceJour.RecId;
            custInvoiceJourCorrType.CorrectionType = SalesParmTable.CorrectionType_RU;
            custInvoiceJourCorrType.insert();
        }
        // </GEERU>

        if (TradeBLWIParameters::isBLWIFeatureEnabled())
        {
            TradeBLWIJournalPurposeCodes::createRecordFromJournal(salesParmTable.salesTable().RecId,
                TradeBLWITypeOfForm::SalesTable,
                custInvoiceJour.RecId,
                TradeBLWITypeOfForm::CustInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustomerInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the customer invoice journal table record.
    /// </summary>
    protected void initializeCustomerInvoiceJournal()
    {
        custInvoiceJour.calcDue();
        custInvoiceJour.calcCashDiscDate();
        custInvoiceJour.Updated = NoYes::Yes;
        
        if (this.shouldInitializeMoneyTransferSlip())
        {
            custInvoiceJour.setPaymId(numberSeq);
        }

        if (this.proforma())
        {
            custInvoiceJour.Proforma = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitializeMoneyTransferSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if payment transfer slip should be initialized.
    /// </summary>
    /// <returns>
    ///     true if ISO code of a legal entity matches any ISO code supplied; otherwise, false.
    /// </returns>
    protected boolean shouldInitializeMoneyTransferSlip()
    {
        return CustConfigurablePaymentIdFeature_CH::isEnabled() || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoDK])
            && numberSeq);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an invoice journal line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> record for which to create the invoice journal line.
    /// </param>
    protected void createJournalLine(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        // <GIN>
        // </GIN>
        // <GEEPL>
        CustInvoiceTrans custInvoiceTransLoc;
        CustInvoiceTrans_W custInvoiceTransLoc_W;
        #isoCountryRegionCodes
        // </GEEPL>
        // <GEERU>
        CustInvoiceTransCorrLink_RU custInvoiceTransCorrLink;
        // </GEERU>

        custInvoiceTrans.clear();

        // Allocate RecId early. Since CustInvoiceTrans is inserted via RecordInsertList,
        // child tables need the RecId so we don't lose the link between it and the TaxServiceTariff table.
        custInvoiceTrans.RecId = systemSequence.reserveValues(1, custInvoiceTrans.TableId);

        this.initInvoiceLineFromSourceLine(_salesParmLine);
        this.initCustInvoiceTrans();

        if (custInvoiceTrans.TaxGroup
            && custInvoiceTrans.TaxItemGroup
            && LedgerParameters::find().TaxImportAlandTax)
        {
            this.requiresTaxBorderNum();
        }

        custInvoiceTrans.Qty = salesParmLine.DeliverNow;
        custInvoiceTrans.InventQty = salesParmLine.InventNow;
        custInvoiceTrans.RemainBefore = salesParmLine.RemainBefore;

        custInvoiceTrans.PdsCWQty = salesParmLine.PdsCWDeliverNow;
        custInvoiceTrans.PdsCWRemain = salesParmLine.PdsCWRemainAfterInvent;

        // <GTE>
        if (salesParmLine.RecId && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            custInvoiceTrans.LineAmount = salesParmLine.amountExcludingTaxGTE();
        }
        else
        {
        // </GTE>
            custInvoiceTrans.LineAmount = this.calcLineAmountExclTax();
        // <GTE>
        }
        // </GTE>
        custInvoiceTrans.LineAmountTax = this.calcLineAmountTax();

        custInvoiceTrans.SumLineDisc = this.calcLineDiscExclTax();
        custInvoiceTrans.PartDelivery = this.isJournalLinePartDelivery();

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            CustInvoiceTrans_W custInvoiceTrans_W = custInvoiceTrans.custInvoiceTrans_W();
            if (this.inventTransIdReturn())
            {
                select pkWiUCode_PL from custInvoiceTransLoc_W
                    exists join custInvoiceTransLoc
                        where custInvoiceTransLoc.RecId == custInvoiceTransLoc_W.CustInvoiceTrans
                            && custInvoiceTransLoc.InventTransId == this.inventTransIdReturn();

                custInvoiceTrans_W.pkWiUCode_PL = custInvoiceTransLoc_W.pkWiUCode_PL;
            }
            else
            {
                // If the Sales order has an Item specified, use the PKWiU code off of the Item (InventTable)
                if (custInvoiceTrans.ItemId)
                {
                    custInvoiceTrans_W.pkWiUCode_PL = InventTable::find(custInvoiceTrans.ItemId).pkWiUCode_PL;
                }
                // If PKWiU code is not specified for item and Sales category has been entered, use the PKWiU code of Sales category hierarchy.
                if (custInvoiceTrans_W.pkWiUCode_PL == '' && custInvoiceTrans.SalesCategory)
                {
                    custInvoiceTrans_W.pkWiUCode_PL = EcoResCategory::find(custInvoiceTrans.SalesCategory).pkWiUCode;
                }
            }
            custInvoiceTrans.packCustInvoiceTrans_W(custInvoiceTrans_W);
        }
        // </GEEPL>
        custInvoiceTrans.LineAmountMST = custInvoiceJour.amountMST(custInvoiceTrans.LineAmount);
        custInvoiceTrans.LineAmountTaxMST = custInvoiceJour.amountMST(custInvoiceTrans.LineAmountTax);
        custInvoiceTrans.SumLineDiscMST = custInvoiceJour.amountMST(custInvoiceTrans.SumLineDisc);
        custInvoiceTrans.StatLineAmountMST = 0 ;
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine salesLine = SalesLine::findRecId(salesParmLine.SalesLineRecId);
            TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
            CustInvoiceTrans_IN custInvoiceTrans_IN = custInvoiceTrans.custInvoiceTrans_IN();
            custInvoiceTrans_IN.AssessableValue_IN = salesParmLine.salesParmLine_IN().AssessableValueTransactionCurrency;
            custInvoiceTrans_IN.ServiceCodeTable_IN = transTaxInformation.ServiceCode;
            custInvoiceTrans.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
        }
        // </GIN>

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
            && !this.proforma())
        {
            CustInvoiceTrans::updateIntrastatFulfillDatePackingSlip_HU(custInvoiceTrans);
        }
        // </GEEHU>

        if (custInvoiceTrans.isCategoryBased())
        {
            this.initFromForeignTradeCategory();
        }

        if (custInvoiceTrans.Remain)
        {
            foundRemains = NoYes::Yes;
        }

        if (custInvoiceTrans.Qty != 0)
        {
            InventPackagingMaterialTrans::createFromSalesParmLine(salesParmLine, custInvoiceJour);
        }

        // If customer turns on the feature to disable the generation of Source Document Data from feature management,
        // then SourceDocumentLine Data won't be created and won't be mapped to CustInvoiceTrans.
        // As a temporary solution for bug 842562, creating a dummy source document line without creation actual entry in the table.
        // This temporary solution must be removed after the refactoring of all the code where Source Document Line used as reference for Sales Order.
        if (CustSourceDocumentDataGenerationDisableFeature::isEnabled())
        {
            custInvoiceTrans.SourceDocumentLine = this.createMockUpSourceDocumentLine();
        }
        else
        {
            // Create a SourceDocumentline record for the invoice line
            custInvoiceTrans.SourceDocumentLine = this.createCustInvTransSourceDocumentLine(custInvoiceJour.SourceDocumentHeader);
        }

        if (BrazilParameters::isEnabled())
        {
            CustInvoiceTrans_BR custInvoiceTrans_BR = custInvoiceTrans.custInvoiceTrans_BR();
            SalesParmLine_BR salesParmLine_BR = salesParmLine.salesParmLine_BR();
            custInvoiceTrans_BR.RespWithholdoingICMSST = salesParmLine_BR.RespWithholdingICMSST;
            custInvoiceTrans_BR.ICMSSTCollectionPaymentMode = salesParmLine_BR.ICMSSTCollectionPaymentMode;
            custInvoiceTrans_BR.ICMSSTCollectionPaymentNumber = salesParmLine_BR.ICMSSTCollectionPaymentNumber;
            custInvoiceTrans_BR.NfeVbcstretVicmsstretTagsReported = salesParmLine_BR.NfeVbcstretVicmsstretTagsReported;
            custInvoiceTrans.packCustInvoiceTrans_BR(custInvoiceTrans_BR);
        }

        this.insertJournalLine(custInvoiceTrans);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            salesParmLine.existsCorrLink_RU())
        {
            custInvoiceTransCorrLink.TransRecId = custInvoiceTrans.RecId;
            custInvoiceTransCorrLink.CorrTransRecId = salesParmLine.salesParmLineCorrLink_RU().CorrTransRecId;

            recordListCorrLinks.add(custInvoiceTransCorrLink);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the form letter type.
    /// </summary>
    /// <returns>
    /// A <c>FormletterType</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>CustInvoiceTrans</c> record.
    /// </summary>
    protected void initCustInvoiceTrans()
    {
        custInvoiceTrans.initValue();

        custInvoiceTrans.SalesId = custInvoiceJour.SalesId;
        custInvoiceTrans.InvoiceId = custInvoiceJour.InvoiceId;
        custInvoiceTrans.InvoiceDate = custInvoiceJour.InvoiceDate;
        custInvoiceTrans.NumberSequenceGroup = custInvoiceJour.NumberSequenceGroup;
        custInvoiceTrans.ParentRecId = custInvoiceJour.RecId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            custInvoiceJour.custInvoiceJour_RU().InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            CustInvoiceTrans_RU custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();
            custInvoiceTrans_RU.InventTransIdTransit_RU = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            custInvoiceTrans_RU.InventTransIdDelivery_RU = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            custInvoiceTrans.packCustInvoiceTrans_RU(custInvoiceTrans_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForeignTradeCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an invoice journal line that has the foreign trade information for the category based
    /// lines.
    /// </summary>
    abstract protected void initFromForeignTradeCategory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceHeaderFromSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an invoice journal header from the source table.
    /// </summary>
    abstract protected void initInvoiceHeaderFromSourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceLineFromSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an invoice journal line from the source line.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> record from which the invoice journal line is created.
    /// </param>
    abstract protected void initInvoiceLineFromSourceLine(SalesParmLine _salesParmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>CustInvoice</c> journal record.
    /// </summary>
    protected void initJournalHeader()
    {
        // <GEERU>
        CustInvoiceJour_RU custInvoiceJour_RU;
        // </GEERU>
        // <GEEU>
        CustInvoiceJour_W custInvoiceJour_W;
        // </GEEU>
        // <GIN>
        SalesLine salesLine;
        // </GIN>
        custInvoiceJour.clear();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            boolean onlyServiceItem = this.onlyServiceItemsToInvoice();

            NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(TaxInvoiceSalesId));
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (onlyServiceItem)
            {
                if (numberSequenceTable.Continuous)
                {
                    custInvoiceJour.initValue();
                }
            }
            else
            {
                if (!numberSequenceTable.Continuous)
                {
                    throw error(strFmt("@SYS26207", numberSequenceTable.NumberSequence));
                }

                custInvoiceJour.initValue();
            }
        }
        else
        {
            custInvoiceJour.initValue();
        }

        custInvoiceJour.InvoiceId = this.getJournalNumber();
        custInvoiceJour.LedgerVoucher = this.getVoucher();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceJour_RU = custInvoiceJour.custInvoiceJour_RU();
            custInvoiceJour_RU.PrintStandardCurrency_RU = salesParmUpdate.PrintInMST_RU;
            custInvoiceJour.packCustInvoiceJour_RU(custInvoiceJour_RU);
        }
        // </GEERU>

        custInvoiceJour.ParmId = salesParmUpdate.ParmId;
        custInvoiceJour.InvoiceDate = this.updateDate();

        this.initInvoiceHeaderFromSourceTable();
        custInvoiceJour.initFromSalesParmTable(salesParmTable);

        //<GMX>
        if (!salesParmUpdate.Proforma && EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled() && !EInvoicePost_MX::checkSourceIsRetailCFDIGlobal(custInvoiceJour))
        {
            EInvoicePost_MX::validateInvoiceDateForCFDI_MX(custInvoiceJour.InvoiceDate);
        }
        //</GMX>

        custInvoiceJour.InterCompanyPosted = this.parmInterCompanyPosted();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceJour_RU = custInvoiceJour.custInvoiceJour_RU();
            custInvoiceJour_RU.CustInvoicePrintoutType_RU = this.parmCustInvoicePrintoutType_RU();
            custInvoiceJour.packCustInvoiceJour_RU(custInvoiceJour_RU);
        }
        // </GEERU>
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            if (salesParmTable.DocAutoNumbering_LT)
            {
                if (!LtInvoiceAutoNumberingTable::checkLastDate(ltDocNumberingCode, this.updateDate(), true))
                {
                    throw error("@SYS18447");
                }

                custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
                custInvoiceJour_W.NumberSequenceCode_W = LtInvoiceAutoNumberingTable::find(ltDocNumberingCode).NumberSequenceCode;
                custInvoiceJour.packCustInvoiceJour_W(custInvoiceJour_W);

                LtInvoiceAutoNumberingTable::updateLastDate(ltDocNumberingCode, this.updateDate());
            }

            custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
            custInvoiceJour.packCustInvoiceJour_W(custInvoiceJour_W);

            if (!this.checkDuplicateNum_W(custInvoiceJour.InvoiceId, custInvoiceJour.SalesId, custInvoiceJour.InvoiceDate))
            {
                throw error(strFmt("@SYS26498", custInvoiceJour.SalesId));
            }
        }
        // </GEEU>
        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && salesParmTable.salesTable().isExcisable_IN())
        {
            TransTaxInformation transTaxInformation;

            select RecId from salesLine
                where salesLine.SalesId == salesParmTable.SalesId;
            SalesLine_IN salesLineLoc = salesLine.salesLine_IN();
            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLine);
            TaxRegistrationNumbers_IN taxRegistrationNumbers = TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(transTaxInformation.TaxInformation).ManECCRegistrationNumberTable);
            ExciseNumSequenceRef_IN exciseNumSequenceRef = ExciseNumSequenceRef_IN::findByRegistrationNumber(taxRegistrationNumbers.RecId, ExciseReference_IN::Excise);
            if (exciseNumSequenceRef.NumberSequenceTable)
            {
                CustInvoiceJour_IN custInvoiceJourLoc = custInvoiceJour.custInvoiceJour_IN();
                custInvoiceJourLoc.ExciseInvoiceId = NumberSeq::newGetNumFromId(exciseNumSequenceRef.NumberSequenceTable).num();
                custInvoiceJour.packCustInvoiceJour_IN(custInvoiceJourLoc);
            }
        }
        // </GIN>

        // <GTH>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]) && custInvoiceJour.InvoiceId)
        {
            // saving the number sequence id to use it later for generating substitution invoice id
            CustInvoiceJourExtensionTH custInvoiceJourExtensionTH = custInvoiceJour.custInvoiceJourExtensionTH();
            if (numberSeq)
            {
                custInvoiceJourExtensionTH.NumberSequenceId = numberSeq.parmNumberSequenceId();
            }
            custInvoiceJour.SysExtensionSerializerMap::packExtensionTable(custInvoiceJourExtensionTH);
        }
        // </GTH>

        // <GFR>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]) && numberSeq)
        {
            // saving the number sequence id to use it later for generating substitution invoice id
            CustInvoiceJour_FR custInvoiceJour_FR = custInvoiceJour.custInvoiceJour_FR();
            custInvoiceJour_FR.NumberSequenceId = numberSeq.parmNumberSequenceId();
            custInvoiceJour.SysExtensionSerializerMap::packExtensionTable(custInvoiceJour_FR);
        }
        // </GFR>

        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxInCountryRegion(
            this.parmTax(), [#isoIT], MultipleTaxIdScope::VATDeclaration) && numberSeq)
        {
            custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
            custInvoiceJour_W.NumberSequenceId_IT = numberSeq.parmNumberSequenceId();
            custInvoiceJour.SysExtensionSerializerMap::packExtensionTable(custInvoiceJour_W);
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            TaxTransactionTaxIDHelper::saveTaxIdToCustVendJour(this.parmTax(), custInvoiceJour);

            if (custInvoiceJour.SalesId)
            {
                TaxIntegrationListCodeUtility::updateListCodeToJournalTable(custInvoiceJour, salesParmTable.salesTable());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the return lot ID from the order line.
    /// </summary>
    /// <returns>
    ///   A return lot ID.
    /// </returns>
    protected InventTransIdReturn inventTransIdReturn()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice that is being created is a credit note.
    /// </summary>
    /// <returns>
    /// true if invoice being created is a credit note; otherwise, false.
    /// </returns>
    abstract protected boolean isInvoiceCreditNote()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalLinePartDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a journal line is a part delivery.
    /// </summary>
    /// <returns>
    /// Always returns <c>NoYes::No</c>.
    /// </returns>
    protected NoYes isJournalLinePartDelivery()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCorrLinksTableId_RU</Name>
				<Source><![CDATA[
    protected TableId journalLineCorrLinksTableId_RU()
    {
        return tableNum(CustInvoiceTransCorrLink_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for a journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the number sequence group ID from the order header.
    /// </summary>
    /// <returns>
    ///   A number sequence group ID.
    /// </returns>
    protected NumberSequenceGroupId numberSequenceGroupId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>NumberSequenceReference</c> object for a journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return salesParmTable.Correct_RU ? SalesParameters::numRefSalesCorrectInvoiceId_RU() : SalesParameters::numRefInvoiceId();
        }
        else
        {
            // </GEERU>
            return SalesParameters::numRefInvoiceId();
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>NumberSequenceReference</c> object for a voucher number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return salesParmTable.Correct_RU ? SalesParameters::numRefSalesCorrectInvoiceVoucher_RU() : SalesParameters::numRefSalesInvoiceVoucher();
        }
        else
        {
            // </GEERU>
            return SalesParameters::numRefSalesInvoiceVoucher();
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyServiceItemsToInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether only products of type service that are invoiced.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    protected boolean onlyServiceItemsToInvoice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicePrintoutType_RU</Name>
				<Source><![CDATA[
    public CustInvoicePrintoutType_RU parmCustInvoicePrintoutType_RU(CustInvoicePrintoutType_RU _printout = invoicePrintoutType)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        invoicePrintoutType = SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) ?
                              _printout :
                              CustInvoicePrintoutType_RU::TORG_12; // Default value

        return invoicePrintoutType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraPrintoutLineExists_RU</Name>
				<Source><![CDATA[
    public boolean parmExtraPrintoutLineExists_RU(boolean _extraPrintoutLineExists = extraPrintoutLineExists)
    {
        extraPrintoutLineExists = _extraPrintoutLineExists;
        return extraPrintoutLineExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupOfTypeCustVendExists_RU</Name>
				<Source><![CDATA[
    public boolean parmMarkupOfTypeCustVendExists_RU(boolean _markupOfTypeCustVendExists = markupOfTypeCustVendExists)
    {
        markupOfTypeCustVendExists = _markupOfTypeCustVendExists;
        return markupOfTypeCustVendExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _parmUpdate as SalesParmUpdate;
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a journal is a proforma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a proforma journal; otherwise, false.
    /// </returns>
    protected boolean proforma()
    {
        return salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables that should have suspended record ID generation.
    /// </summary>
    /// <returns>
    /// A list of table IDs that should have suspended record ID generation.
    /// </returns>
    protected List recIdSuspensionTables()
    {
        List list = super();

        list.addEnd(custInvoiceTrans.TableId);
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresTaxBorderNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for tax codes requiring border number.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///   The customer's tax border number is missing.
    /// </exception>
    protected void requiresTaxBorderNum()
    {
        TaxGroupData taxGroupData;
        TaxOnItem taxOnItem;
        TaxTable taxTable;
        CustTable custTable;

        unchecked (Uncheck::TableSecurityPermission)
        {
            select firstonly custTable
                where custTable.AccountNum == custInvoiceJour.InvoiceAccount;

            if (!custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::CustomsCustomerId))
            {
                // Check for tax code requiring border number
                select firstonly RecId from taxGroupData where taxGroupData.TaxGroup == custInvoiceTrans.TaxGroup
                    exists join taxOnItem where taxOnItem.TaxCode == taxGroupData.TaxCode
                    exists join taxTable where taxOnItem.TaxCode == taxTable.TaxCode &&
                        taxTable.TaxBorderNumReq_FI;

                if (taxGroupData.RecId)
                {
                    throw error("@Tax:MissingCustomsCustomerID");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the delivery fields for an invoice.
    /// </summary>
    /// <remarks>
    /// This method is used t create the journal header.
    /// </remarks>
    abstract protected void setDeliveryFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitDeliveryInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to split on delivery information.
    /// </summary>
    /// <returns>
    /// true if it should split on delivery information; otherwise, false.
    /// </returns>
    protected NoYes splitDeliveryInformation()
    {
        return salesParmUpdate.SplitDeliveryInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        SalesParmLine salesParmLine;
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice date.
    /// </summary>
    /// <returns>
    /// The invoice date.
    /// </returns>
    protected TransDate updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSourceDocumentHeaderForCreate</Name>
				<Source><![CDATA[
    private void initializeSourceDocumentHeaderForCreate(SourceDocumentHeader _sourceDocumentHeader)
    {
        _sourceDocumentHeader.TypeEnumName = enumStr(SourceDocument_CustomerInvoice);
        _sourceDocumentHeader.TypeEnumValue = SourceDocument_CustomerInvoice::CustomerInvoice;
        _sourceDocumentHeader.AccountingStatus = SourceDocumentAccountingStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvTransSourceDocumentLine</Name>
				<Source><![CDATA[
    private SourceDocumentLineRecId createCustInvTransSourceDocumentLine(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        SourceDocumentLine sourceDocumentLine;

        sourceDocumentLine.SourceDocumentHeader = _sourceDocumentHeaderRecId;
        sourceDocumentLine.TypeEnumName = enumStr(SourceDocumentLine_CustomerInvoice);
        sourceDocumentLine.TypeEnumValue = SourceDocumentLine_CustomerInvoice::CustomerInvoiceLine;
        return SourceDocumentLine::createSourceDocumentLine(tableNum(CustInvoiceTrans), sourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceType_IT</Name>
				<Source><![CDATA[
    private void setInvoiceType_IT()
    {
        if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131))
        {
            CustInvoiceJour_W custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();

            if (this.isInvoiceCreditNote())
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00040, funcName());
                custInvoiceJour_W.InvoiceType_IT = InvoiceType_IT::CreditNote;
            }
            else
            {
                custInvoiceJour_W.InvoiceType_IT = InvoiceType_IT::Invoice;
            }

            custInvoiceJour.packCustInvoiceJour_W(custInvoiceJour_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMockUpSourceDocumentHeader</Name>
				<Source><![CDATA[
    private RecId createMockUpSourceDocumentHeader()
    {
        RecId mockSourceDocumentHeader;

        if (!systemSequence)
        {
            systemSequence = new systemSequence();
        }

        try
        {
            systemSequence.suspendRecIds(tableNum(SourceDocumentHeader));
            mockSourceDocumentHeader = systemSequence.reserveValues(1, tableNum(SourceDocumentHeader));
        }
        finally
        {
            if (systemSequence)
            {
                systemSequence.removeRecIdSuspension(tableNum(SourceDocumentHeader));
            }
        }

        if (!mockSourceDocumentHeader)
        {
            throw error('@AccountsReceivable:ZeroRecIdOfSourceDocumentHeader');
        }

        return mockSourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMockUpSourceDocumentLine</Name>
				<Source><![CDATA[
    private RecId createMockUpSourceDocumentLine()
    {
        RecId mockSourceDocumentLine;

        if (!systemSequence)
        {
            systemSequence = new systemSequence();
        }

        try
        {
            systemSequence.suspendRecIds(tableNum(SourceDocumentLine));
            mockSourceDocumentLine = systemSequence.reserveValues(1, tableNum(SourceDocumentLine));
        }
        finally
        {
            if (systemSequence)
            {
                systemSequence.removeRecIdSuspension(tableNum(SourceDocumentLine));
            }
        }

        if (!mockSourceDocumentLine)
        {
            throw error('@AccountsReceivable:ZeroRecIdOfSourceDocumentLine');
        }

        return mockSourceDocumentLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>