<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByCopyFromFormula</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Co/By copy source for copying from a formula.
/// </summary>
public class PmfCoByCopyFromFormula extends PmfCoByCopyFrom
{
    PmfCoBySearch   search;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the id of the production BOM (process Formula) for this copy source.
    /// </summary>
    /// <returns>Production BOMid for this copy source.</returns>
    /// <remarks>
    /// The id comes from the search object.
    /// </remarks>
    public BOMId bomId()
    {
        return search.bomId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method loops thru the co/bys copying them
    /// </summary>
    public void copy()
    {
        setprefix(strfmt("@SYS21834",search.bomId()));

        ttsbegin;

        while (search.next())
        {
            setprefix(strfmt("@SYS24300",search.coBy().ItemId));

            copyTo.copyTo(this,search,copyTo.defaultCoBy());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfFormulaCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the source from information stored in the destination formula Co/By record.
    /// </summary>
    /// <param name="_toCoBy">Destination Co/By record to be written</param>
    /// <param name="_inventDim">InventDim for the destination</param>
    /// <param name="_inventTable">InventTable for the destination</param>
    public void initToPmfFormulaCoBy(
        PmfFormulaCoBy          _toCoBy,
        InventDim               _inventDim,
        InventTable             _inventTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the source from information stored in the destination production Co/By record.
    /// </summary>
    /// <param name="_toCoBy">Destination production Co/By record to be written.</param>
    /// <param name="_copyRef">Specify if the document references should also be copied to the destination.
    /// Defaults to false.</param>
    public void initToPmfProdCoBy(
        PmfProdCoBy         _toCoBy,
        boolean             _copyRef = false)
    {
        PmfProdCoBy     prodCoBy = _toCoBy;

        prodCoBy.initFromCoBy(search.coBy());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_copyTo">Destination object of copy attempt.</param>
    /// <param name="_search">Search run to collect related data to copy.</param>
    protected void new(
        PmfCoByCopyTo   _copyTo,
        PmfCoBySearch   _search)
    {
        search = _search;
        super(_copyTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor for this instance.
    /// </summary>
    /// <param name="_copyTo">Destination copy object that this source will send records to.</param>
    /// <param name="_search">Search object that will be used to retrieve Co/By records.</param>
    /// <returns>Instance of PmfCoByCopyFromProd initialized with the given destination and search
    /// objects.</returns>
    /// <remarks>
    /// Callers should usually use the base class PmfCoByCopyFrom::construct method
    /// instead of calling this one directly.
    /// </remarks>
    public static PmfCoByCopyFromFormula construct(
        PmfCoByCopyTo   _copyTo,
        PmfCoBySearch   _search)
    {
        return new PmfCoByCopyFromFormula(_copyTo, _search);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>