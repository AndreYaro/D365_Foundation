<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEventProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEventProcesser</c> class processes events.
/// </summary>
public class CostEventProcessor
{
    Map             companyMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of events for the current company.
    /// </summary>
    /// <returns>
    /// A list of events for the current company.
    /// </returns>
    private Set getEvents()
    {
        Set             events;
        DataAreaId      dataAreaId = curext();

        if (!companyMap)
        {
            companyMap = new Map(Types::String, Types::Class);
        }

        if (companyMap.exists(dataAreaId))
        {
            events = companyMap.lookup(dataAreaId);
        }
        else
        {
            events = new Set(Types::Class);
            companyMap.insert(dataAreaId, events);
        }

        return events;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an event.
    /// </summary>
    /// <param name="_event">
    /// The event to process.
    /// </param>
    protected void processEvent(CostEventBase _event)
    {
        _event.process();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the events for the current company.
    /// </summary>
    private void processEvents()
    {
        DataAreaId      dataAreaId = curext();

        if (companyMap && companyMap.exists(dataAreaId))
        {
            Set events = companyMap.lookup(dataAreaId);
            if (events)
            {
                Enumerator enumerator = events.getEnumerator();

                while (enumerator.moveNext())
                {
                    CostEventBase event = enumerator.current();
                    this.processEvent(event);
                }
                companyMap.remove(dataAreaId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an event to the processor.
    /// </summary>
    /// <param name="_event">
    /// The event to add.
    /// </param>
    public static void add(CostEventBase _event)
    {
        CostEventProcessor  processor = CostEventProcessor::newFromCache();

        processor.getEvents().add(_event);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostEventProcessor construct()
    {
        return new CostEventProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostProcessor</c> class for the transaction scope.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CostProcessor</c> class for the transaction scope.
    /// </returns>
    private static CostEventProcessor newFromCache()
    {
        CostEventProcessor  processor;

        processor = SysTransactionScopeCache::get(classStr(CostEventProcessor), '', processor);

        if (!processor)
        {
            processor = CostEventProcessor::construct();

            SysTransactionScopeCache::set(classStr(CostEventProcessor), '', processor);
        }

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the events for the current company.
    /// </summary>
    public static void process()
    {
        CostEventProcessor  processor = CostEventProcessor::newFromCache();

        processor.processEvents();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
