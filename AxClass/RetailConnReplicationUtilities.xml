<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnReplicationUtilities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The basic utilities of replication tables are defined.
/// </summary>
class RetailConnReplicationUtilities
{
    RetailConnReplicationTable     fromTable;

    // Following is used as a separator to separate values of the fields composing the primary key of a record.
    #RetailConn // PlusOrMinus is defined here.
    #define.Separator(#PlusOrMinus) // Must use something that cannot be normally entered manually in the UI.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        fromTable = new RetailConnReplicationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseTypeToDRMType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the base datatype enum to DRM type enum.
    /// </summary>
    /// <param name="_baseType">
    /// The base dataype that is to be converted.
    /// </param>
    /// <returns>
    /// A converted DRM type enum.
    /// </returns>
    public static RetailConnFieldTypeEnum baseTypeToDRMType(Types _baseType)
    {
        RetailConnFieldTypeEnum ret;

        switch (_baseType)
        {
            case Types::Enum:
                ret = RetailConnFieldTypeEnum::Option;
                break;

            case Types::Integer:
                ret = RetailConnFieldTypeEnum::Integer;
                break;

            case Types::VarString:
            case Types::String:
                ret = RetailConnFieldTypeEnum::Text;
                break;

            case Types::Date:
                ret = RetailConnFieldTypeEnum::DateType;
                break;

            case Types::Real:
                ret = RetailConnFieldTypeEnum::Decimal;
                break;

            case Types::Container:
                ret = RetailConnFieldTypeEnum::Blob;
                break;

            case Types::UtcDateTime:
                ret = RetailConnFieldTypeEnum::DateTime;
                break;

            case Types::Int64:
                ret = RetailConnFieldTypeEnum::Int64;
                break;

            case Types::Guid:
                ret = RetailConnFieldTypeEnum::Guid;
                break;

            default:
                ret = RetailConnFieldTypeEnum::None;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns true if the company exists otherwise false.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The value of <c>DataArea</c> field of <c>Companyinfo</c> table.
    /// </param>
    /// <returns>
    /// true if the company exists otherwise false.
    /// </returns>
    public static boolean companyExists(DataAreaId _dataAreaId)
    {
        CompanyInfo companyInfo;

        select firstonly companyInfo where companyInfo.DataArea == _dataAreaId;

        if (companyInfo)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a reference key for the table.
    /// </summary>
    /// <param name="_refTableId">
    /// The value of <c>RefTableId</c> field of the table.
    /// </param>
    /// <param name="_refRecId">
    /// The value of reference RecId field of the table.
    /// </param>
    /// <returns>
    /// The reference key value of the table.
    /// </returns>
    public static RetailConnKeyValue createRefKey(RefTableId  _refTableId, RefRecId    _refRecId)
    {
        Common common = new DictTable(_refTableId).makeRecord();
        ;

        select common where common.RecId == _refRecId;

        return RetailConnReplicationUtilities::formatKey(common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the base enum type field to DRM type field.
    /// </summary>
    /// <param name="_dictField">
    /// A dictionary field that holds the field data.
    /// </param>
    /// <returns>
    /// The converted DRM type enum value.
    /// </returns>
    public static RetailConnFieldTypeEnum fieldType(DictField _dictField)
    {
        RetailConnFieldTypeEnum ret = RetailConnFieldTypeEnum::Text;

        if (_dictField)
        {
            ret = RetailConnReplicationUtilities::baseTypeToDRMType(_dictField.baseType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldType2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the field datatype.
    /// </summary>
    /// <param name="_dictField">
    /// The dict field that holds the field data.
    /// </param>
    /// <returns>
    /// The field type value.
    /// </returns>
    public static int fieldType2(DictField _dictField)
    {
        int ret;

        if (_dictField)
        {
            switch (_dictField.baseType())
            {
                case Types::Enum        :   ret = 8;
                                            break;

                case Types::Integer     :   ret = 8;
                                            break;

                case Types::VarString   :
                case Types::String      :   ret = 16;
                                            break;

                case Types::Date        :   ret = 5;
                                            break;

                case Types::Real        :   ret = 6;
                                            break;

                case Types::Container   :   ret = 1;
                                            break;

    //            case Types::DateTime    :   ret = 17;
                case Types::UtcDateTime :   ret = 17;
                                            break;
                case Types::Int64       :   ret = 18;
                                            break;
                case Types::Guid        :   ret = 19;
                                            break;
            }
        }
        else
        {
            ret = 16;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldTypeToSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the sql type value for the field's data type.
    /// </summary>
    /// <param name="_systemType">
    /// The data type of the field.
    /// </param>
    /// <returns>
    /// The sql type of the field.
    /// </returns>
    public static int fieldTypeToSQL(int _systemType)
    {
        int ret;
        //,Option,Boolean,Integer,Short Integer,Text,Code,Date,Time,Decimal,Binary,Blob

        switch (_systemType)
        {
            case 1  :   ret = 8;
                        break;
            case 2  :   ret = 2;
                        break;
            case 3  :   ret = 8;
                        break;
            case 5  :   ret = 16;
                        break;
            case 6  :   ret = 16;
                        break;
            case 7  :   ret = 5;
                        break;
            case 8  :   ret = 12;
                        break;
            case 9  :   ret = 6;
                        break;
            case 10 :   ret = 4;
                        break;
            case 11 :   ret = 1;
                        break;
            case 12 :   ret = 17;
                        break;
            case 13 :   ret = 18;
                        break;
            case 14:    ret = 19;
                        break;
        }

    /*0      35583 : EXIT(8);  // Option
    0      34047 : EXIT(2);  // Boolean
    0      34559 : EXIT(8);  // Integer
    0      11519 : EXIT(16); // Text
    0      35071 : EXIT(16); // Code
    0      11775 : EXIT(5);  // Date
    0      11776 : EXIT(12); // Time
    0      12799 : EXIT(6);  // Decimal
    0      33793 : EXIT(1);  // BLOB
    0      11797 : EXIT(16); // DateFormula*/
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes a table and formats the field's data into a string.
    /// </summary>
    /// <param name="record">
    /// The table current instance.
    /// </param>
    /// <returns>
    /// The formatted string value.
    /// </returns>
    public static str formatKey(Common record)
    {
        DictTable table;
        DictIndex primaryIndex;
        int fieldIndex;
        int fieldId;
        anytype FieldValue = "";
        str result = "";
        int numberOfFieldsInIndex;

        table = new DictTable(record.TableId);

        if (!table)
        {
            return result;
        }

        primaryIndex = new DictIndex(table.id(), table.primaryIndex());

        if (!primaryIndex)
        {
            result = int642str(record.RecId);

            return result;
        }

        numberOfFieldsInIndex = primaryIndex.numberOfFields();

        for (fieldIndex = 1; fieldIndex <= numberOfFieldsInIndex; fieldIndex++)
        {
            if (fieldIndex > 1)
                result += #Separator;

            fieldId = primaryIndex.field(fieldIndex);

            FieldValue = record.(fieldId);

            result += any2str(FieldValue);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAX2009POSDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get DataStore for a given storeNumber that belongs to the AX5POS channel Schema
    /// If there are more than one, the first one is picked
    /// If there are none, a warning is shown and 0 is returned
    /// </summary>
    /// <param name="storeNumber">
    /// StoreNumber (that matches RetailStoreTable.storeNumber)
    /// </param>
    /// <returns>
    /// RecId of matching RetailConnDatabaseProfile or 0 if none was found
    /// </returns>
    /// <remarks>
    /// Shows a UI warning when a matching record is not found
    /// </remarks>
    public static RecId getAX2009POSDataStore(str 10 storeNumber)
    {
        RetailCDXDataStoreChannel dataStoreChannel;
        RetailStoreTable store;
        RetailConnDatabaseProfile dbProfile;
        RetailCDXDataGroup dataGroup;
        RetailConnChannelSchema channelSchema;

        select RecId from store
            where store.StoreNumber == storeNumber
        join RecId from dataStoreChannel            //Get corresponding dataStore-channel mapping
            where dataStoreChannel.Channel == store.RecID
        join RecId from dbProfile                   //Get dataStore (/DataBaseProfile)
            where dbProfile.RecId == dataStoreChannel.DatabaseProfile
        join RecId from dataGroup                   //Get DataGroup to get channel schema
            where dataGroup.RecId == dbProfile.DataGroup
        join schemaType, RecId from channelSchema   //Get channel schema
            where channelSchema.RecId == dataGroup.ChannelSchema
            && channelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX5POS;

        if (!dbProfile)
        {
            //Unable to find Channel Database for AX2009 POS store: %1
            warning(strFmt("@REX4160900", storeNumber));
            return 0;
        }

        //Return the RecId of the first instance of DbProfile
        return dbProfile.recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAXPrimaryIndexColumnNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AX primary index column names.
    /// </summary>
    /// <param name="_tableName">
    /// Table name.
    /// </param>
    /// <returns>
    /// Container that includes primary index column names.
    /// </returns>
    public static container getAXPrimaryIndexColumnNames(TableName _tableName)
    {
        DictTable dt;
        DictIndex di;
        DictField df;
        TableId tid;
        int i;
        container pkAX;
        ;

        tid = tableName2id(_tableName);

        if (!tid)
        {
            throw Global::error(strFmt("@SYS75683", _tableName));
        }

        dt = new DictTable(tableName2id(_tableName));
        di = new DictIndex(tid, dt.primaryIndex());

        if (!di)
        {
            throw Global::error(strFmt("@SYS107156", _tableName));
        }

        for (i = 1; i <= di.numberOfFields(); ++i)
        {
            df = new DictField(tid, di.field(i));
            pkAX += df.name();
        }

        // non-global table must have DataAreaId included in PK
        if (!RetailConnReplicationUtilities::isGlobalTable(_tableName)
          && (conFind(pkAX, 'DataAreaId') <= 0) && (conFind(pkAX, 'RecId') <= 0))
        {
            pkAX += 'DataAreaId';
        }

        // if RecId is part of PK, just use RecID (surrogate key)
        if (conFind(pkAX, 'RecId') > 0)
        {
            return ['RecId'];
        }

        return pkAX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the error string related to the specified error number.
    /// </summary>
    /// <param name="_errorNumber">
    /// An integer value that holds the error number.
    /// </param>
    /// <returns>
    /// The error message.
    /// </returns>
    public static str getErrorString(int _errorNumber)
    {
        str errorMessage = "@RET326";
        str ret;

        switch (_errorNumber)
        {
            case 4096   :   errorMessage = "@RET327";
                            break;

            case 4097   :   errorMessage = "@RET328";
                            break;

            case 4098   :   errorMessage = "@RET329";
                            break;

            case 4099   :   errorMessage = "@RET330";
                            break;

            case 4100   :   errorMessage = "@RET331";
                            break;

            case 4101   :   errorMessage = "@RET332";
                            break;

            case 4102   :   errorMessage = "@RET333";
                            break;

            case 4103   :   errorMessage = "@RET334";
                            break;

            case 8192   :   errorMessage = "@RET335";
                            break;

            case 8193   :   errorMessage = "@RET336";
                            break;

            case 12288  :   errorMessage = "@RET337";
                            break;

            case 12289  :   errorMessage = "@RET338";
                            break;

            case 12290  :   errorMessage = "@RET339";
                            break;

            case 12291  :   errorMessage = "@RET340";
                            break;

            case 12292  :   errorMessage = "@RET341";
                            break;

            case 12293  :   errorMessage = "@RET342";
                            break;

            case 12294  :   errorMessage = "@RET343";
                            break;

            case 12295  :   errorMessage = "@RET344";
                            break;

            case 12296  :   errorMessage = "@RET345";
                            break;

            case 12297  :   errorMessage = "@RET346";
                            break;

            case 16384  :   errorMessage = "@RET347";
                            break;

            case 16385  :   errorMessage = "@RET348";
                            break;

            case 16386  :   errorMessage = "@RET349";
                            break;

            case 32769  :   errorMessage = "@RET260725";
                            break;

            default     :   errorMessage = "@RET350";
        }

        ret = strFmt("%1: %2", _errorNumber, errorMessage);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the varaiables with the ID for the given table and field.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <param name="_fieldName">
    /// Name of a field in the AOT.
    /// </param>
    /// <returns>
    /// ID of the field in the AOT.
    /// </returns>
    public static FieldId getFieldID(TableName _tableName, FieldName _fieldName)
    {
        TableId tid = tableName2id(_tableName);
        FieldId fid = fieldName2id(tid, _fieldName);
        return fid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableID</Name>
				<Source><![CDATA[
    /// <summary>
    /// ID of the table.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <returns>
    /// ID of the table.
    /// </returns>
    public static TableId getTableID(TableName _tableName)
    {
        return tableName2id(_tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIDFromRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets table ID from relation.
    /// </summary>
    /// <param name="tableName">
    /// Table name.
    /// </param>
    /// <param name="relationName">
    /// Relation name.
    /// </param>
    /// <returns>
    /// Table ID.
    /// </returns>
    public static TableId getTableIDFromRelation(TableName tableName, str relationName)
    {
        DictRelation        dr;
        TableId             tid;

        dr = new DictRelation(tableName2id(tableName));
        tid = dr.loadNameRelation(relationName);

        return tid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidTimeStateFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method inistializes the <c>validTimeStateFieldType</c> with the value <c>Date</c> if the type of the dict field is
    /// <c>Date</c> otherwise <c>UTCDateTime</c>.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <returns>
    /// <c>Integer</c> value for the type in the <c>validTimeStateFieldType</c>.
    /// </returns>
    public static int getValidTimeStateFieldType(TableName _tableName)
    {
        DictTable dt = new DictTable(tableName2id(_tableName));
        DictField df;
        ValidTimeStateFieldType validTimeStateFieldType = ValidTimeStateFieldType::None;
        int ret;

        if (dt)
        {
            if (dt.isValidTimeStateTable())
            {
                df = dt.fieldObject(dt.getValidTimeStateValidFromFieldId());
                if (df.baseType() == Types::Date)
                {
                    validTimeStateFieldType = ValidTimeStateFieldType::Date;
                }
                else
                {
                    validTimeStateFieldType = ValidTimeStateFieldType::UtcDateTime;
                }
            }
        }
        else
        {
            throw Global::error(strFmt("@SYS75683", _tableName));
        }

        // in case later the enum ValidTimeStateFieldType gets changed, we can still maintain return value here
        switch (validTimeStateFieldType)
        {
            case ValidTimeStateFieldType::None:
                ret = 0;
                break;

            case ValidTimeStateFieldType::Date:
                ret = 1;
                break;

            case ValidTimeStateFieldType::UtcDateTime:
                ret = 2;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParitionColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the table has partition key field
    /// </summary>
    /// <param name="_tableName">
    /// Name of the table
    /// </param>
    /// <returns>
    /// true if this table contains partition key field, otherwise false
    /// </returns>
    public static boolean hasParitionColumn(TableName _tableName)
    {
        DictTable dt = new DictTable(tableName2id(_tableName));

        if (dt)
        {
            return dt.dataPerPartition();
        }
        else
        {
            throw Global::error(strFmt("@SYS75683", _tableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLinkFieldBlob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the serialized field values from the specified blob into the specified record
    /// </summary>
    /// <param name="_blob">
    /// The blob returned from convertToLinkFieldBlob method
    /// </param>
    /// <param name="_record">
    /// The record to set fields on
    /// </param>

    public static void initFromLinkFieldBlob(container _blob, Common _record)
    {
        FieldId fieldId;
        anytype FieldValue;
        Map fieldValueMap = Map::create(_blob);

        MapEnumerator enum =
            fieldValueMap.getEnumerator();

        while (enum.moveNext())
        {
            fieldId = enum.currentKey();
            FieldValue = enum.currentValue();

            _record.(fieldId) = FieldValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBinaryField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the field is Binary field.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <param name="_fieldName">
    /// Name of a field in the AOT.
    /// </param>
    /// <returns>
    /// true if the field is Binary field otherwise false.
    /// </returns>
    public static boolean isBinaryField(TableName _tableName, FieldName _fieldName)
    {
        DictField dictField;
        TableId tid = tableName2id(_tableName);
        FieldId fid = fieldName2id(tid, _fieldName);

        dictField = new DictField(tid, fid);

        if (dictField.baseType() == Types::Container)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGlobalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the table's data is saved on a per-company basis.
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <returns>
    /// false if the table's data is saved on a per-company basis otherwise false.
    /// </returns>
    public static boolean isGlobalTable(TableName _tableName)
    {
        DictTable dt = new DictTable(tableName2id(_tableName));

        if (dt)
        {
            return !dt.dataPrCompany();
        }
        else
        {
            throw Global::error(strFmt("@SYS75683", _tableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableTempDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the table is TempDB table
    /// </summary>
    /// <param name="_tableName">
    /// Name of a table in the AOT.
    /// </param>
    /// <returns>
    /// true if table is TempDB table, otherwise false
    /// </returns>
    public static boolean isTableTempDB(TableName _tableName)
    {
        Microsoft.Dynamics.AX.Metadata.MetaModel.AxTable table = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTable(_tableName);

        if (!table)
        {
            throw Global::error(strFmt("@SYS75683", _tableName));
        }

        return table.TableType == Microsoft.Dynamics.AX.Metadata.Core.MetaModel.TableType::TempDB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStringResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads string resource.
    /// </summary>
    /// <param name="_resourceName">
    /// Resource name.
    /// </param>
    /// <returns>
    /// Resource data as a string.
    /// </returns>
    public static str loadStringResource(ResourceName _resourceName)
    {
        container resourceData;
        str strResourceData;

        if (!SysResource::checkIfResourceExists(_resourceName))
        {
            // Resource %1 does not exist.
            throw Global::error(strfmt("@SYS12234", _resourceName));
        }

        resourceData = SysResource::getResourceNodeData(SysResource::getResourceNode(_resourceName));

        strResourceData = conPeek(resourceData, 1);

        return strResourceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodReturnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts and returns the DRM type ID of the returnId of the method passed.
    /// </summary>
    /// <param name="_dictMethod">
    /// A dict variable that holds the method data.
    /// </param>
    /// <returns>
    /// The converted DRM type enum.
    /// </returns>
    public static RetailConnFieldTypeEnum methodReturnType(DictMethod _dictMethod)
    {
        RetailConnFieldTypeEnum ret = RetailConnFieldTypeEnum::Text;
        DictType        dictType;
        ;

        if (_dictMethod)
        {
            dictType = new DictType(_dictMethod.returnId());
            if (dictType)
            {
                ret = RetailConnReplicationUtilities::baseTypeToDRMType(dictType.baseType());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the key string and adds the characters into a container.
    /// </summary>
    /// <param name="key">
    /// The string to be parsed.
    /// </param>
    /// <returns>
    /// A container that holds the characters.
    /// </returns>
    public static container parseKey(str key)
    {
        container result;
        str token;
        int length;
        int startIndex = 1;
        int foundIndex;
        ;

        if (key)
        {
            length = strLen(key);

            while (foundIndex <= length)
            {
                foundIndex = strFind(key, #Separator, startIndex, length);

                if (!foundIndex)
                {
                    foundIndex = length + 1;
                }

                token = subStr(key, startIndex, foundIndex - startIndex);
                result += [token];
                startIndex = foundIndex + 1;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePartitionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the specified partition ID matches the partition ID in current user session.
    /// </summary>
    /// <param name="_partitionID">
    /// The partition ID to be verified
    /// </param>
    /// <returns>
    /// True if partition IDs can match, otherwise false
    /// </returns>
    public static boolean validatePartitionID(int64 _partitionID)
    {
        return (_partitionID == getcurrentpartitionrecid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOldChannelInDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any data group is configured for legacy schema and is linked to a schedule.
    /// </summary>
    /// <returns>True, if any data group is configured for legacy schema and is linked to a schedule, otherwise, false.</returns>
    public static boolean isOldChannelInDataGroup()
    {
        RetailCDXDataGroup dataGroup;
        RetailConnChannelSchema channelSchema;
        RetailCDXScheduleDataGroup scheduleDataGroup;

        select firstonly RecId
          from dataGroup
          exists join scheduleDataGroup
            where dataGroup.RecId == scheduleDataGroup.DataGroup
          exists join channelSchema
            where dataGroup.ChannelSchema == channelSchema.RecId
               && (channelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX5POS
                || channelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX61POS
                || channelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX62OnlineChannel
                || channelSchema.SchemaType == RetailConnChannelSchemaTypeEnum::AX62POS);

        if (dataGroup)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFieldInUniqueIndex</Name>
				<Source><![CDATA[
    internal static boolean IsFieldInUniqueIndex(TableName _tableName, FieldName _fieldName)
    {
        boolean uniqueIndexField = false;

        if (_tableName && _fieldName)
        {
            DictTable dictTable = new DictTable(tableName2Id(_tableName));
            if (dictTable)
            {
                int indexCounter = dictTable.indexNext(0);
           
                while (indexCounter)
                {
                    DictIndex dictIndex = dictTable.indexObject(indexCounter);
                    if (!dictIndex.allowDuplicates())
                    {
                        for (int i = 1; i <= dictIndex.numberOfFields(); i++)
                        {
                            DictField dictField = new DictField(dictTable.id(), dictIndex.field(i));
                            if (_fieldName == dictField.name())
                            {
                                uniqueIndexField = true;
                                break;
                            }
                        }
                    }

                    if (uniqueIndexField)
                    {
                        break;
                    }
                    indexCounter = dictTable.indexNext(indexCounter);
                }
            }
        }
        return uniqueIndexField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>