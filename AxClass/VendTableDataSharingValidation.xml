<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTableDataSharingValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Implements data sharing validation for <c>VendTable</c>.
/// </summary>
[ExportMetadataAttribute(classStr(SysDataSharingTableValidation), 'VENDTABLE'), ExportAttribute('Dynamics.AX.DataSharing.SysDataSharingTableValidation')]
public class VendTableDataSharingValidation extends SysDataSharingTableValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tableAdded</Name>
				<Source><![CDATA[
    public void tableAdded(SysDataSharingPolicyRecId _policy, TableId _tableId)
    {
        if (_tableId == tableNum(VendTable))
        {
            if (this.detectMultipleVendorsWithSameParty() > 0)
            {
                warning ("@AccountsPayable:Table_Warning_PartyInUseForMultipleAccounts");
            }

            SysDataSharingTableField tableField;
            SysDataSharingRule rule;

            if (!this.companiesInPolicyHaveSameAccountingCurrency(_policy))
            {
                delete_from tableField
                    exists join rule
                    where rule.DataSharingPolicy == _policy
                           && rule.SharedTableName == tableId2Name(_tableId)
                           && tableField.DataSharingPolicy == _policy
                           && tableField.DataSharingRule == rule.RecId
                           && tableField.TableName == tableId2Name(_tableId)
                           && tableField.FieldName == fieldId2Name(_tableId, fieldNum(VendTable, CreditMax));
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldAdding</Name>
				<Source><![CDATA[
    public boolean tableFieldAdding(SysDataSharingPolicyRecId _policy, TableId _tableId, FieldId _fieldId)
    {
        if (_tableId == tableNum(VendTable)
            && _fieldId == fieldNum(VendTable, CreditMax))
        {
            return this.companiesInPolicyHaveSameAccountingCurrency(_policy);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendTable_onValidatedDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(VendTable), DataEventType::ValidatedDelete)]
    public static void VendTable_onValidatedDelete(Common sender, DataEventArgs e)
    {
        ValidateEventArgs args = e as ValidateEventArgs;

        boolean retValue = args.parmValidateResult();
        
        VendTable vendTable = sender as VendTable;

        retValue = VendTableDataSharingValidation::validateDeleteForDataSharing(vendTable) && retValue;

        args.parmValidateResult(retValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysDataSharing_canActivate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SysDataSharing), staticDelegateStr(SysDataSharing, canActivate))]
    public static void SysDataSharing_canActivate(SysDataSharingPolicyRecId _policyRecId, EventHandlerRejectResult _result)
    {
        if (!VendTableDataSharingValidationCanActivateFlight::instance().isEnabled()
            || SysDataSharingTableValidation::existPolicyWithTableName(_policyRecId, tableId2Name(tableNum(VendTable))))
        {
            VendTableDataSharingValidation validation = new VendTableDataSharingValidation();

            if (validation.detectMultipleVendorsWithSameParty() > 0)
            {
                error ("@AccountsPayable:Table_Warning_PartyInUseForMultipleAccounts");
                _result.reject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the vendor is not used on a purchase order, as an invoice account on 
    /// another vendor, or on a posted vendor transaction.
    /// </summary>
    /// <param name = "_vendTable">The <c>VendTable</c> record being deleted.</param>
    /// <returns>true if the vendor can be deleted; otherwise, false.</returns>
    public static boolean validateDeleteForDataSharing(VendTable _vendTable)
    {
        boolean ret = VendTableDataSharingValidation::validateDeleteForDataSharingVendTableByInvoiceAccount(_vendTable);
        ret = VendTableDataSharingValidation::validateDeleteForDataSharingPurchTable(_vendTable) && ret;
        ret = VendTableDataSharingValidation::validateDeleteForDataSharingVendTrans(_vendTable) && ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companiesInPolicyHaveSameAccountingCurrency</Name>
				<Source><![CDATA[
    private boolean companiesInPolicyHaveSameAccountingCurrency(SysDataSharingPolicyRecId _policy)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganization organization;
        Ledger ledger;
        CurrencyCode accountingCurrency;

        while select RecId from policy
                where policy.RecId == _policy
            join RecId from organization
                where organization.DataSharingPolicy == policy.RecId
            join AccountingCurrency from ledger
            group by ledger.AccountingCurrency
                where ledger.Name == organization.DataSharingCompany
        {
            if (accountingCurrency == '')
            {
                accountingCurrency = ledger.AccountingCurrency;
            }

            if (ledger.AccountingCurrency != accountingCurrency)
            {
                return checkFailed(strFmt("@AccountsPayable:Table_Error_DataSharingCreditLimitCantBeShared", fieldId2Name(tableNum(VendTable), fieldNum(VendTable, CreditMax)), tableId2Name(tableNum(VendTable))));
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingVendTableByInvoiceAccount</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingVendTableByInvoiceAccount(VendTable _vendTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganizationEnabled organization;
        VendTable vendTable;

        if (VendTableDataSharingValidationValidateDeleteFlight::instance().isEnabled())
        {
            policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_vendTable.DataAreaId, tableId2Name(_vendTable.TableId));

            if (policy && policy.IsEnabled)
            {
                select firstonly crosscompany RecId from vendTable
                    where vendTable.InvoiceAccount == _vendTable.AccountNum
                        && vendTable.AccountNum != _vendTable.AccountNum
                        && vendTable.DataAreaId != _vendTable.DataAreaId
                    exists join RecId from organization
                        where organization.DataSharingPolicy == policy.RecId
                            && vendTable.DataAreaId == organization.DataSharingCompany;
            }
        }
        else
        {
            SysDataSharingRuleEnabled rule;

            select firstonly crosscompany RecId from policy
                join RecId from organization
                    where organization.DataSharingPolicy == policy.RecId
                join RecId from rule
                    where rule.DataSharingPolicy == policy.RecId
                       && rule.SharedTableName == tableId2Name(_vendTable.TableId)
                join RecId from vendTable
                    where vendTable.DataAreaId == organization.DataSharingCompany
                       && vendTable.InvoiceAccount == _vendTable.AccountNum;
        }

        boolean ret = true;
        if (vendTable.RecId)
        {
            ret = checkFailed("@SYS67134");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingPurchTable</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingPurchTable(VendTable _vendTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganizationEnabled organization;
        PurchTable purchTable;

        if (VendTableDataSharingValidationValidateDeleteFlight::instance().isEnabled())
        {
            policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_vendTable.DataAreaId, tableId2Name(_vendTable.TableId));

            if (policy && policy.IsEnabled)
            {
                select firstonly crosscompany RecId from purchTable
                    where purchTable.InvoiceAccount == _vendTable.AccountNum
                        && purchTable.DataAreaId != _vendTable.DataAreaId
                    exists join RecId from organization
                        where organization.DataSharingPolicy == policy.RecId
                            && purchTable.DataAreaId == organization.DataSharingCompany;
            }
        }
        else
        {
            SysDataSharingRuleEnabled rule;

            select firstonly crosscompany RecId from policy
                join RecId from organization
                    where organization.DataSharingPolicy == policy.RecId
                join RecId from rule
                    where rule.DataSharingPolicy == policy.RecId
                       && rule.SharedTableName == tableId2Name(_vendTable.TableId)
                join RecId from purchTable
                    where purchTable.DataAreaId == organization.DataSharingCompany
                       && purchTable.InvoiceAccount == _vendTable.AccountNum;
        }
        
        boolean ret = true;
        if (purchTable.RecId)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(PurchTable)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteForDataSharingVendTrans</Name>
				<Source><![CDATA[
    private static boolean validateDeleteForDataSharingVendTrans(VendTable _vendTable)
    {
        SysDataSharingPolicy policy;
        SysDataSharingOrganizationEnabled organization;
        VendTrans vendTrans;

        if (VendTableDataSharingValidationValidateDeleteFlight::instance().isEnabled())
        {
            policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_vendTable.DataAreaId, tableId2Name(_vendTable.TableId));

            if (policy && policy.IsEnabled)
            {
                select firstonly crosscompany RecId from vendTrans
                    where vendTrans.AccountNum == _vendTable.AccountNum
                        && vendTrans.DataAreaId != _vendTable.DataAreaId
                    exists join RecId from organization
                        where organization.DataSharingPolicy == policy.RecId
                            && vendTrans.DataAreaId == organization.DataSharingCompany;
            }
        }
        else
        {
            SysDataSharingRuleEnabled rule;

            select firstonly crosscompany RecId from policy
                join RecId from organization
                    where organization.DataSharingPolicy == policy.RecId
                join RecId from rule
                    where rule.DataSharingPolicy == policy.RecId
                       && rule.SharedTableName == tableId2Name(_vendTable.TableId)
                join RecId from vendTrans
                    where vendTrans.DataAreaId == organization.DataSharingCompany
                       && vendTrans.AccountNum == _vendTable.AccountNum;
        }
        
        boolean ret = true;
        if (vendTrans.RecId)
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(VendTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectMultipleVendorsWithSameParty</Name>
				<Source><![CDATA[
    private int64 detectMultipleVendorsWithSameParty()
    {
        // This query detects situations where Customers have the same party in multiple companies with different AccountNums.
        // Due to an AK on CustTable with Party, this situation will fail data sharing with an ugly error when the data copy runs.
        // This is used to throw a nicer, human readable error.
        str sql = strFmt(@"
            SELECT COUNT(V.ACCOUNTNUM) FROM SYSDATASHARINGPOLICY P
            JOIN SYSDATASHARINGORGANIZATION O ON O.DATASHARINGPOLICY = P.RECID
            JOIN SYSDATASHARINGRULE R ON R.DATASHARINGPOLICY = P.RECID AND R.SHAREDTABLENAME = '%1'
            JOIN VENDTABLE V ON V.DATAAREAID = O.DATASHARINGCOMPANY
            WHERE V.PARTY IN
            (
                SELECT V2.PARTY FROM VENDTABLE V2 WHERE V2.DATAAREAID IN
                (
                    SELECT O2.DATASHARINGCOMPANY FROM SYSDATASHARINGPOLICY P2
                    JOIN SYSDATASHARINGORGANIZATION O2 ON O2.DATASHARINGPOLICY = P2.RECID
                    WHERE P2.RECID = P.RECID
                )
                AND V2.ACCOUNTNUM <> V.ACCOUNTNUM
            )", strUpr(tableId2Name(tableNum(VendTable))));

        ResultSet set = this.executeSqlStatement(sql);

        set.next();

        return set.getInt64(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the specified SQL statement text.
    /// </summary>
    /// <param name="_sqlStatementText">
    ///    The SQL statement text to execute.
    /// </param>
    /// <returns>
    ///    true if the execution was successful; otherwise, false.
    /// </returns>
    private ResultSet executeSqlStatement(str _sqlStatementText)
    {
        ResultSet returnValue;

        str sqlStatementText;

        SqlStatementExecutePermission permission;
        Statement statement;

        sqlStatementText = strLRTrim(_sqlStatementText);

        if (sqlStatementText)
        {
            permission = new SqlStatementExecutePermission(sqlStatementText);

            // Open the code access permission scope.
            permission.assert();

            Connection connection = new Connection();

            statement = connection.createStatement();

            returnValue = statement.executeQuery(sqlStatementText);

            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();

            Statement.close();
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>