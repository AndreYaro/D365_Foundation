<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class translates an exchange task to Ax task,
/// so that information can be sent to or recieved from exchange server.
/// </summary>
class SmmEwsTask implements smmITask, SysIMapiExTask
{
    #smmMSOutlook2002ObjectModelConstants
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationTask       task;
    Microsoft.Dynamics.AX.ExchangeIntegration.Connection            connection;
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder     folder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual effort spent on the task.
    /// </summary>
    /// <returns>
    /// An integer representing the actual effort spent on the task.
    /// </returns>
    public int actualWork()
    {
        int ret;

        if (task.hasActualWork())
        {
            ret = task.actualWork();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task's billing information.
    /// </summary>
    /// <returns>
    /// A string with the task's billing information.
    /// </returns>
    public str billingInformation()
    {
        str ret;

        ret = task.billingInformation();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>body</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets body of current task.
    /// </summary>
    /// <param name="_body">
    /// Body of a task.
    /// </param>
    /// <returns>
    /// Body of a task.
    /// </returns>
    public str body(str _body = '')
    {
        str ret;

        ret = task.body();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the categories assigned to the task.
    /// </summary>
    /// <returns>
    /// A string containing the categories assigned to the task.
    /// </returns>
    public str categories()
    {
        str ret;

        ret = task.categories();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the task.
    /// This is a interface member not needed in exchange integration.
    /// </summary>
    public void close()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the task is complete.
    /// </summary>
    /// <returns>
    /// True if the task is complete; otherwise, false.
    /// </returns>
    public boolean complete()
    {
        boolean ret;

        ret = task.complete();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the completion date of the task.
    /// </summary>
    /// <returns>
    /// A date representing the completion date of the task.
    /// </returns>
    public utcdatetime dateCompleted()
    {
        utcdatetime ret = DateTimeUtil::minValue();

        if (task.hasDateCompleted())
        {
            ret = task.dateCompleted();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the outlook item from outlook.
    /// </summary>
    public void delete()
    {
        task.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the due date for the task.
    /// </summary>
    /// <returns>
    /// A datetime representing the due date for the task.
    /// </returns>
    public utcdatetime dueDate()
    {
        utcdatetime ret = DateTimeUtil::minValue();

        if (task.hasDueDate())
        {
            ret = task.dueDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task's outlook entry id.
    /// </summary>
    /// <returns>
    /// The entry id for the task.
    /// </returns>
    public str entryId()
    {
        str exchangeId = task.entryId();
        str ret;

        //Synchronization is managed with the outlookIds, so the translation is needed
        ret = connection.convertExchangeIdToOutlookId(exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern of current task.
    /// </summary>
    /// <returns>
    /// Recurrence pattern of task.
    /// </returns>
    public smmIRecurrence getRecurrencePattern()
    {
        return new smmEwsRecurrence(task.recurrence());
    }

]]></Source>
			</Method>
			<Method>
				<Name>importance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the importance level of the task.
    /// </summary>
    /// <returns>
    /// An int representing the importance of the task.
    /// The value will be one of the following:
    /// 0 = Low, 1 = Normal, 2 = High
    /// </returns>
    public int importance()
    {
        int ret;

        ret = task.importance();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information if a task is recurring.
    /// </summary>
    /// <returns>
    /// True if task is recurring otherwise false.
    /// </returns>
    public boolean isRecurring()
    {
        boolean ret;

        ret = task.hasRecurrence();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModificationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date and time the task was modified in exchange.
    /// </summary>
    /// <returns>
    /// An utcdatetime with the latest date and time when the task was modified in exchange.
    /// If it's a new task, until saved it will just exist locally and it will return
    /// DateTimeUtil::minValue().
    /// </returns>
    public utcdatetime lastModificationTime()
    {
        utcdatetime ret = task.startDate();
        boolean     isNew;

        isNew = task.isNew();
        // new tasks don't have a lastModificationTime
        // tasks don't exist in Exchange until saved.
        if (! isNew)
        {
            ret = task.lastModificationTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task's mileage.
    /// </summary>
    /// <returns>
    /// A string representing the task's mileage.
    /// </returns>
    public str mileage()
    {
        str ret;

        ret = task.mileage();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an new instance of <c>smmEwsTask</c>.
    /// This class translates the information from and to exchange server in Ax.
    /// </summary>
    /// <param name="_task">
    /// Exchange server task.
    /// </param>
    /// <param name="_connection">
    /// Exchange server connection.
    /// </param>
    public void new(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationTask _task, Microsoft.Dynamics.AX.ExchangeIntegration.Connection _connection)
    {
        task = _task;
        connection = _connection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entry id of the parent folder for current task.
    /// </summary>
    /// <returns>
    /// Entry id of the parent folder for current task.
    /// </returns>
    public str parentFolderId()
    {
        str exchangeId = task.parentId();
        str ret;

        ret = connection.convertExchangeIdToOutlookId(exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the folder for the task.
    /// </summary>
    /// <param name="_folder">
    /// The folder where the task should be stored.
    /// </param>
    /// <returns>
    /// The folder where the task is going to be stored when calling save().
    /// </returns>
    /// <remarks>
    /// The task will only use the folder when created, during the save() method,
    /// to select where the task will be created in the exchange server.
    /// Once created in exchange, the folder can't be changed.
    /// </remarks>
    public Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder parmFolder(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder _folder = folder)
    {
        folder = _folder;

        return folder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the percentage of the task completed at the current date and time.
    /// </summary>
    /// <returns>
    /// An integer representing the percetenge of the task completed at the moment.
    /// </returns>
    public int percentComplete()
    {
        int ret;

        try
        {
            real valueInReal = task.percentComplete();
            ret = real2int(valueInReal);
        }
        catch(Exception::Error)
        {
            smmEwsExceptionHandler::logError(funcName(), Exception::Error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reminder was set for this task.
    /// </summary>
    /// <returns>
    /// True if the task has a reminder set; otherwise, false.
    /// </returns>
    public boolean reminderSet()
    {
        boolean ret;

        ret = task.reminderSet();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date and time at which the reminder should occur for the task.
    /// </summary>
    /// <returns>
    /// A datetime containing the moment when the reminder should occur for this task.
    /// </returns>
    public utcdatetime reminderTime()
    {
        utcdatetime ret = DateTimeUtil::minValue();

        if (this.reminderSet())
        {
            ret = task.reminderTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>role</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the role of the owner in this task.
    /// </summary>
    /// <returns>
    /// Returns string containing the free-form text string associating the owner of a task with a role for the task.
    /// </returns>
    public str role()
    {
        str ret;

        ret = task.role();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the task. This will create the task in exchange.
    /// The task will be created in the folder selected or the default tasks folder
    /// if it was not set.
    /// </summary>
    /// <returns>
    /// True if the task was correctly created in exchange; otherwise, false.
    /// </returns>
    public boolean save()
    {
        boolean ret;

        try
        {
            if (task.isNew())
            {
                if (folder)
                {
                    ret = task.save(folder.entryId());
                }
                else
                {
                    ret = task.save("");
                }
            }
            else
            {
               ret = task.update();
            }
        }
        catch
        {
            error("@SYP4860455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the task. New tasks are created locally and won't appear in exchange until saved.
    /// </summary>
    /// <returns>
    /// The task that was saved.
    /// </returns>
    /// <remarks>
    /// It will result in a call to exchange.
    /// It may fail due to connection problems.
    /// </remarks>
    public smmITask saveItem()
    {
        this.Save();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sensitivity for the task.
    /// </summary>
    /// <returns>
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the task.
    /// The value may be #olConfidential, #olNormal, #olPersonal or #olPrivate.
    /// </returns>
    public int sensitivity()
    {
        int ret;

        ret = task.sensitivity();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActualWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the actual effort spent on the task.
    /// </summary>
    /// <param name="_actualWork">
    /// An integer representing the actual effort spent on the task.
    /// </param>
    public void setActualWork(smmActualWork _actualWork)
    {
        task.actualWork(System.Convert::ToInt32(_actualWork));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's billing information.
    /// </summary>
    /// <param name="_billingInformation">
    /// A string with the task's billing information.
    /// </param>
    public void setBillingInformation(str _billingInformation)
    {
        task.billingInformation(_billingInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's clear-text body.
    /// </summary>
    /// <param name="_body">
    /// A string with the task's body.
    /// </param>
    public void setBody(str _body)
    {
        task.body(_body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the categories assigned to the task.
    /// </summary>
    /// <param name="_categories">
    /// A string containing the categories assigned to the task.
    /// </param>
    public void setCategories(str _categories)
    {
        task.categories(_categories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the companies assigned to the task.
    /// </summary>
    /// <param name="_companies">
    /// A string containing the names of the companies associated with the task.
    /// </param>
    public void setCompanies(str _companies)
    {
        task.companies(_companies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the task is complete.
    /// </summary>
    /// <param name="_complete">
    /// True if the task is complete; otherwise, false.
    /// </param>
    public void setComplete(boolean _complete)
    {
        task.complete(_complete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContactNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the contact names associated with the task.
    /// </summary>
    /// <param name="_contactNames">
    /// A string representing the contact names associated with the task.
    /// </param>
    public void setContactNames(str _contactNames)
    {
        task.contactNames(_contactNames);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the completion date of the task.
    /// </summary>
    /// <param name="_dateCompleted">
    /// A date representing the completion date of the task.
    /// </param>
    public void setDateCompleted(utcdatetime _dateCompleted)
    {
        task.dateCompleted(_dateCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the due date for the task.
    /// </summary>
    /// <param name="_dueDate">
    /// A datetime representing the due date for the task.
    /// </param>
    public void setDueDate(utcdatetime _dueDate)
    {
        task.dueDate(_dueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the importance level of the task.
    /// </summary>
    /// <param name="_importance">
    /// An int representing the importance of the task.
    /// 0 = "NotStarted",  1 = "InProgress", 2 = "Completed", 3= "WaitingOnOthers" or 4 = "Deferred".
    /// </param>
    public void setImportance(int _importance)
    {
        task.importance(_importance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's mileage.
    /// </summary>
    /// <param name="_mileage">
    /// A string representing the task's mileage.
    /// </param>
    public void setMileage(str _mileage)
    {
        task.mileage(_mileage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the owner of the task.
    /// </summary>
    /// <param name="_owner">
    /// A string indicating the owner of the task.
    /// </param>
    public void setOwner(str _owner)
    {
        task.owner(_owner);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPercentComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the percentage of the task completed at the current date and time.
    /// </summary>
    /// <param name="_percentComplete">
    /// An integer representing the percetenge of the task completed at the moment.
    /// </param>
    public void setPercentComplete(smmPercentageCompleted _percentComplete)
    {
        task.percentComplete(real2double(_percentComplete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if a reminder was set for this task.
    /// </summary>
    /// <param name="_reminderSet">
    /// True if the task has a reminder set; otherwise, false.
    /// </param>
    public void setReminderSet(boolean _reminderSet)
    {
        task.reminderSet(_reminderSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date and time at which the reminder should occur for the task.
    /// </summary>
    /// <param name="_reminderTime">
    /// A datetime containing the moment when the reminder should occur for this task.
    /// </param>
    public void setReminderTime(utcdatetime _reminderTime)
    {
        task.reminderTime(_reminderTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the role of the owner in this task.
    /// </summary>
    /// <param name="_role">
    /// A string containing the free-form text string associating the owner of a task with a role for the task.
    /// </param>
    public void setRole(str _role)
    {
        task.role(_role);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sensitivity for the task.
    /// </summary>
    /// <param name="_sensitivity">
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the task.
    /// Possible values: 0 = Normal, 1 = Personal, 2 =Private or 3 = Confidential.
    /// </param>
    public void setSensitivity(int _sensitivity)
    {
        task.sensitivity(_sensitivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date for the task.
    /// </summary>
    /// <param name="_startDate">
    /// The task's start date.
    /// </param>
    public void setStartDate(utcdatetime _startDate)
    {
        task.startDate(_startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status for the task.
    /// </summary>
    /// <param name="_status">
    /// An int representing a member of the taskStatus enumeration.
    /// Possible values: 0= not started, 1 = in progress, 2 = completed, 3 = waitingforothers, 4 = deferred.
    /// </param>
    public void setStatus(int _status)
    {
        task.status(_status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the subject for the task.
    /// </summary>
    /// <param name="_subject">
    /// A string indicating the subject for the task.
    /// </param>
    public void setSubject(str _subject)
    {
        task.subject(_subject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTeamTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the task is a team task.
    /// </summary>
    /// <param name="_teamTask">
    /// True if the task is a team task; otherwise, false.
    /// </param>
    public void setTeamTask(boolean _teamTask)
    {
        task.teamTask(_teamTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total work for the task.
    /// </summary>
    /// <param name="_totalWork">
    /// An integer indicating the total work for the task.
    /// </param>
    public void setTotalWork(smmTotalWork _totalWork)
    {
        task.totalWork(System.Convert::ToInt32(_totalWork));
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date for the task.
    /// </summary>
    /// <returns>
    /// The task's start date and time.
    /// </returns>
    public utcdatetime startDate()
    {
        utcdatetime ret = DateTimeUtil::minValue();

        if (task.hasStartDate())
        {
            ret = task.startDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status for the task.
    /// </summary>
    /// <returns>
    /// An int representing a member of the OITaskStatus enumeration.
    /// Possible values: /// Possible values: 0= not started, 1 = in progress, 2 = completed, 3 = waitingforothers, 4 = deferred.
    /// </returns>
    public int status()
    {
        int ret;

        ret = task.status();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subject for the task.
    /// </summary>
    /// <returns>
    /// A string indicating the task's subject.
    /// </returns>
    public str subject()
    {
        str ret;

        ret = task.subject();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>teamTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the task is a team task.
    /// </summary>
    /// <returns>
    /// True if the task is a team task; otherwise, false.
    /// </returns>
    public boolean teamTask()
    {
        boolean ret;

        ret = task.teamTask();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total work for the task.
    /// </summary>
    /// <returns>
    /// An integer indicating the total work for the task.
    /// </returns>
    public int totalWork()
    {
        int ret;

        ret = task.totalWork();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>