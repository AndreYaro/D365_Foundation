<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBookAddListReportExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class <c>PurchBookAddListReportExcel_RU</c> is used for excel output of purchase book additional list.
/// </summary>
class PurchBookAddListReportExcel_RU extends PurchBookReportExcel_RU implements BatchRetryable
{
    SalesPurchBookRecId_RU  correctedBookRecId;
    container               bookRecIdCon;
    container               correctedBookRecIdCon;
    container               bookRecIdConSales;
    container               correctedSalesBookRecIdCon;
    TransDate               reportDate, startDate;
    int                     addListNumber;

    protected const str incomingTotal   = 'INCOMINGTOTAL';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'Kniga_pokupok_dop';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + this.taxPeriodStr(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case incomingTotal:
                this.fillIncomingTotal();
                break;
            default:
                super(_bookmark);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIncomingTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills Incoming total section with data
    /// </summary>
    protected void fillIncomingTotal()
    {
        this.insertValueToSection('IncomingVATAmount', header.VATAmountAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        CompanyInfo       companyInfo;

        companyInfo = CompanyInfo::find();

        this.insertValueToSection('CompanyName', companyInfo.Name);

        this.insertValueToSection('INNKPP', companyInfo.partyINNasOfDate_RU(toDate) +
                                       (companyInfo.partyKPPasOfDate_RU(toDate) ? ' / ' +
                                        companyInfo.partyKPPasOfDate_RU(toDate) : ""));

        this.insertValueToSection('TaxPeriod', this.taxPeriodStr(fromDate, toDate));
        this.insertValueToSection('ReportDate', header.ReportDate);
        this.insertValueToSection('AddListNumber', header.AddListNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        super();

        this.addSection(incomingTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether starting(incoming) totals should be printed
    /// </summary>
    /// <returns>
    /// Always true for additional list; It return false for ancestor
    /// </returns>
    protected boolean mustPrintIncomingTotals()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                startDate,
                reportDate,
                bookRecIdCon,
                bookRecIdConSales,
                correctedBookRecIdCon,
                correctedSalesBookRecIdCon,
                addListNumber, 
                super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddListNumber</Name>
				<Source><![CDATA[
    public int parmAddListNumber(int _addListNumber = addListNumber)
    {
        addListNumber = _addListNumber;

        return addListNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmBookRecIdCon(container _bookRecIdCon = bookRecIdCon)
    {
        bookRecIdCon = _bookRecIdCon;
        return bookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecIdConSales</Name>
				<Source><![CDATA[
    public container parmBookRecIdConSales(container _bookRecIdConSales = bookRecIdConSales)
    {
        bookRecIdConSales = _bookRecIdConSales;
        return bookRecIdConSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmCorrectedBookRecId(SalesPurchBookRecId_RU _correctedBookRecId = correctedBookRecId)
    {
        correctedBookRecId = _correctedBookRecId;
        return correctedBookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmCorrectedBookRecIdCon(container _correctedbookRecIdCon = correctedBookRecIdCon)
    {
        correctedBookRecIdCon = _correctedbookRecIdCon;
        return correctedbookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedSalesBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmCorrectedSalesBookRecIdCon(container _correctedSalesBookRecIdCon = correctedSalesBookRecIdCon)
    {
        correctedSalesBookRecIdCon = _correctedSalesBookRecIdCon;
        return correctedSalesBookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByFactures</Name>
				<Source><![CDATA[
    public NoYes parmGroupByFactures(NoYes _groupByFactures = groupByFactures)
    {
        groupByFactures = _groupByFactures;
        return groupByFactures;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDate</Name>
				<Source><![CDATA[
    public TransDate parmReportDate(TransDate _reportDate = reportDate)
    {
        reportDate = _reportDate;
        return reportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportToXml</Name>
				<Source><![CDATA[
    public NoYes parmExportToXml(NoYes _exportToXml = exportToXml)
    {
        exportToXml = _exportToXml;
        return exportToXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataAndExportToXml</Name>
				<Source><![CDATA[
    protected void prepareDataAndExportToXml()
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmIsCalledFromXMLExcelReport(true);
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmSalesPurchBookQueryRun(queryRun.pack());
        contract.parmGroupByFactures(groupByFactures);
        contract.parmGroupCorrect(groupCorrect);
        contract.parmStartDate(startDate);
        contract.parmReportDate(reportDate);
        contract.parmBookRecIdCon(bookRecIdCon);
        contract.parmBookRecIdConSales(bookRecIdConSales);
        contract.parmCorrectedBookRecIdCon(correctedBookRecIdCon);
        contract.parmCorrectedSalesBookRecIdCon(correctedSalesBookRecIdCon);
        contract.parmAddListNumber(addListNumber);

        LedgerVATDeclReportPurchBookAdd_RU journalReport = LedgerVATDeclReportPurchBookAdd_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        header = journalReport.getHeader();
        line = journalReport.getLine();

        ERModelDefinitionDatabaseContext dbParameter = new ERModelDefinitionDatabaseContext();
        dbParameter.addTemporaryTable(header);
        dbParameter.addTemporaryTable(line);

        ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
        inputParameter.addParameter(ERPath::combine("model", "ReportCaller"), classStr(PurchBookAddListReportExcel_RU));
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period010_DateFrom"), startDate);
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period020_DateTo"), reportDate);
        inputParameter.addParameter(ERPath::combine("model", "AdditionalSheetHeader/SorcePeriodStartDate"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "AdditionalSheetHeader/SorcePeriodEndDate"), toDate);
        
        if (exportToXml)
        {
            formatMappingId = VendParameters::find().PurchBookAdditionalListFormatMappingID;

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                .withParameter(dbParameter)
                .withParameter(inputParameter)
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints incoming totals for each purchase book corrected by this additional list
    /// </summary>
    protected void printIncomingTotals()
    {
        this.execute(incomingTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tax period description
    /// </summary>
    /// <param name="_fromDate">
    /// Starting date of period
    /// </param>
    /// <param name="_toDate">
    /// Ending date of period
    /// </param>
    /// <returns>
    /// String containing description of period
    /// </returns>
    private TempStr taxPeriodStr(TaxPeriodDate _fromDate, TaxPeriodDate _toDate)
    {
        const int oneMonth = 1;
        const int quarter = 3;
        const int halfYear = 6;
        const int firstHalfYearStartMonth = 1;
        const int secondHalfYearStartMonth = 7;
        const str ru = 'ru';
        const str quarterStr = 'Квартал';
        const str halfYearStr = 'Полугодие';
        
        TempStr     taxPeriodStr;
        LanguageId  origLanguageId;

        if (year(_fromDate) == year(_toDate))
        {
            switch (mthOfYr(_toDate) - mthOfYr(_fromDate) + 1)
            {
                case oneMonth :
                    origLanguageId = infolog.language();
                    infolog.language(ru);
                    taxPeriodStr = strFmt("@SYS76498", mthName(mthOfYr(_toDate)), year(_toDate));
                    infolog.language(origLanguageId);
                    break;

                case quarter  :
                    taxPeriodStr = strFmt("@SYS76498" + quarterStr, date2Qtr(_fromDate), '');
                    break;

                case halfYear :
                switch (mthOfYr(_fromDate))
                    {
                        case firstHalfYearStartMonth :
                            taxPeriodStr = strfmt("@SYS53179" + halfYearStr, 1, year(_toDate));
                            break;
                        case secondHalfYearStartMonth :
                            taxPeriodStr = strfmt("@SYS53179" + halfYearStr, 2, year(_toDate));
                            break;
                    }
                    break;
            }
        }

        return taxPeriodStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(PurchBookAdditionalList_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        boolean     ret = true;
        container   packedSuper;

        switch (version)
        {
            case currentVersion :
                [   version, 
                    startDate,
                    reportDate,
                    bookRecIdCon,
                    bookRecIdConSales,
                    correctedBookRecIdCon,
                    correctedSalesBookRecIdCon,
                    addListNumber, 
                    packedSuper] = _packedClass;
                
                ret = super(packedSuper);
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchBookAddListReportExcel_RU construct()
    {
        return new PurchBookAddListReportExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookLastNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of purchase books to be corrected by additional list
    /// </summary>
    /// <param name="_purchBookRecId">
    /// Purchase book this additional list belongs to
    /// </param>
    /// <param name="_groupByFactures">
    /// Determines whether result queryRun should be grouped by factures
    /// </param>
    /// <returns>
    /// Number of corrected purchase books
    /// </returns>
    #VATTransitionPeriod_RU
    public static Counter getBookLastNum(RecId _purchBookRecId, boolean _groupByFactures)
    {
        Counter     lineCount;
        QueryRun    queryRun;
        boolean     isOldBook;
        ;
        queryRun = new QueryRun(PurchBookTable_RU::createQuery(_purchBookRecId));
        isOldBook = PurchBookTable_RU::find(_purchBookRecId).getToDate() < #BookCorrectionDate ? true : false;
        if (! isOldBook)
        {
            queryRun = PurchBookTable_RU::initQueryRunOnTmp(queryRun, false);
        }

        PurchBookTable_RU::updateQuery(queryRun, _groupByFactures);
        while (queryRun.next())
        {
            lineCount++;
        }
        return lineCount;

    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query range on specified datasource.
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDataSource</c> to be updated.
    /// </param>
    public static void setExtQueryRange(QueryBuildDataSource    _queryBuildDataSource)
    {
        QueryBuildRange    queryRange;

        str purchTransTypeValue = 
        '('                 +
        '('                 +
            '(\%1.'         + fieldstr(PurchBookTrans_RU, CorrectedFactureExternalId)   +
                '== \"\"'   +
            ')'             +
            ' || ((\%1.'    + fieldstr(PurchBookTrans_RU, CorrectionType)               +
                '=='        + int2str(FactureCorrectionType_RU::Unknown)                +
              ') && (\%1.'  + fieldStr(PurchBookTrans_RU, CorrectedPurchBookTable_RU)   +
              ' != 0)'      +
            ')'             +
            ' || (\%1.'     + fieldstr(PurchBookTrans_RU, RevisionType)                 +
                '=='        + int2str(FactureRevisionType_RU::RevisionOriginal)         +
            ')'             +
            ' || (\%1.'     + fieldstr(PurchBookTrans_RU, RevisionType)                 +
                '=='        + int2str(FactureRevisionType_RU::RevisionCorrPurch)        +
            ')'             +
        ')'                 +
        ' && (\%1.'         + fieldstr(PurchBookTrans_RU, RevisionType)                 +
            '!='            + int2str(FactureRevisionType_RU::RevisionCorrSales)        +
        ') '                +
        ')';

        str salesTransTypeValue = 
        '('                 +
        '('                 +
            '(\%1.'         + fieldstr(SalesBookTrans_RU, RevisionType)                 +
                '=='        + int2str(FactureRevisionType_RU::RevisionCorrPurch)        +
            ')'             +
        ')'                 +
        ')';

        switch (_queryBuildDataSource.table())
        {
            case tablenum(PurchBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(PurchBookTrans_RU, RevisionType));
                queryRange.value(strfmt(purchTransTypeValue,_queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;

            case tablenum(SalesBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(SalesBookTrans_RU, RevisionType));
                queryRange.value(strfmt(salesTransTypeValue, _queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query ranges on specified <c>Query</c>
    /// </summary>
    /// <param name="_query">
    /// <c>Query</c> object to be updated.
    /// </param>
    public static void setExtQueryRanges(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = _query.dataSourceTable(tablenum(PurchBookTrans_RU));
        PurchBookAddListReportExcel_RU::setExtQueryRange(queryBuildDataSource);

        queryBuildDataSource = _query.dataSourceTable(tablenum(SalesBookTrans_RU));
        if (queryBuildDataSource)
        {
            PurchBookAddListReportExcel_RU::setExtQueryRange(queryBuildDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>