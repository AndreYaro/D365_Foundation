<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataElementTypeInfo_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a abstract class, initializes data element type info.
/// </summary>
abstract class GBTDataElementTypeInfo_CN
{
    #LedgerGBT_CN

    Map     mapDataTypeInfo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add GBT data element name and its type info
    /// </summary>
    /// <param name="_columnName">
    /// Data element name, also called Column name
    /// </param>
    /// <param name="_typeInfoCon">
    /// Type info container, which expects, for example:
    /// ['xs:string', '', '60'] it's xs:string type and its maxlength is 60
    /// ['xs:string', '8', ''] it's xs:string type and its fixed length is 8
    /// ['xs:double', 'D20.2', ''] it's xs:double type and its format is D20.2, which means integer part is 20, decimal part is 2
    /// ['xs:int', 'I..2', ''] it's xs:integer type and its max integer part is 2
    /// </param>
    /// <remarks>
    /// use the method to add data element type info to this class, later it shall be used to
    /// format all the element type related data value when filling the data to the corresponding dataset
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addDataElement(
        Name        _columnName,
        Container   _typeInfoCon)
    {
        mapDataTypeInfo.insert(_columnName, _typeInfoCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateStrForGBT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts data to string for China GBT 24589.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// String.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str dateStrForGBT(date _date)
    {
        //return the date format str for GBT like: 20120209
        return _date != dateNull()
            ? date2Str(
                _date,
                321,
                DateDay::Digits2,
                DateSeparator::None,
                DateMonth::Digits2,
                DateSeparator::None,
                DateYear::Digits4,
                DateFlags::None)
            : #DateNullString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>format</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats dataset field value.
    /// </summary>
    /// <param name="_tableName">
    /// The data table name.
    /// </param>
    /// <param name="_dcName">
    /// The data column name.
    /// </param>
    /// <param name="_value">
    /// Value which need to be formatted.
    /// </param>
    /// <returns>
    /// String.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str format(Name _tableName, Name _dcName, anytype _value)
    {
        str     ret;
        str     columnName;
        str     xmlType;
        str     lengthOrFormat;
        str     maxLength;

        if (_dcName == '')
        {
            return ret;
        }

        columnName = _dcName;

        if (mapDataTypeInfo.exists(columnName))
        {
            [xmlType, lengthOrFormat, maxLength] = mapDataTypeInfo.lookup(columnName);
        }
        else
        {
            //this shall not hit, since it should have every column name in the map.
            Debug::assert(false);
        }

        switch (xmlType)
        {
            case #GBTXmlStringTypeName:
                ret = this.formatToString(str2int(lengthOrFormat), str2int(maxLength), _value);
                break;

            case #GBTXmlDoubleTypeName:
                ret = this.formatToDouble(_tableName, _dcName, lengthOrFormat, _value);
                break;

            case #GBTXmlIntTypeName:
                ret = this.formatToInt(_tableName, _dcName, lengthOrFormat, _value);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatToDouble</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats value to double type.
    /// </summary>
    /// <param name="_tableName">
    /// The data table name.
    /// </param>
    /// <param name="_dcName">
    /// The data column name.
    /// </param>
    /// <param name="_format">
    /// The format info.
    /// </param>
    /// <param name="_value">
    /// value which need to be formatted.
    /// </param>
    /// <returns>
    /// String.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str formatToDouble(Name _tableName, Name _dcName, str _format, anytype _value)
    {
        int         integerPart;
        int         decimalPart;
        str         tmpstr;
        str         IntegerPartStr;
        str         decimalPartStr;
        Types       type;

        type = typeOf(_value);

        if (type == Types::String && _value == '')
        {
            return #ZeroStr;
        }

        if (type == Types::String)
        {
            if (_value == #DoubleZeroStr)
            {
                _value = #ZeroStr;
            }
            return _value;
        }

        if (_format == '' ||
            !strStartsWith(_format, #DoubleFormatStart) ||
            (type != Types::Real &&
            type != Types::Integer &&
            type != Types::Int64))
        {
            return #ZeroStr;
        }

        //remove D
        tmpstr = strRem(_format, #DoubleFormatStart);
        //parse the format
        [IntegerPartStr,decimalPartStr] = str2con(tmpstr, #DecimalPoint);
        integerPart = str2int(IntegerPartStr);
        decimalPart = str2int(decimalPartStr);
        //convert
        switch (type)
        {
            case Types::Real:
                tmpstr = num2Str(_value, 0, decimalPart, 1, 0);
                break;

            case Types::Integer:
                tmpstr = int2str(_value);
                break;

            case Types::Int64:
                tmpstr = int642str(_value);
                break;
        }
        //process the converted result
        [IntegerPartStr,decimalPartStr] = str2con(tmpstr, #DecimalPoint);

        if (strLen(IntegerPartStr) > integerPart)
        {
            //error, exceed the max integer part
            this.logIntergerConvertError(_tableName, _dcName, _value, integerPart);
            return #ZeroStr;
        }

        return GBTDataElementTypeInfo_CN::trimTrailingZeros(tmpstr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatToInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats value to integer type.
    /// </summary>
    /// <param name="_tableName">
    /// The data table name.
    /// </param>
    /// <param name="_dcName">
    /// The data column name.
    /// </param>
    /// <param name="_format">
    /// The format info.
    /// </param>
    /// <param name="_value">
    /// value which need to be formatted.
    /// </param>
    /// <returns>
    /// String.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str formatToInt(Name _tableName, Name _dcName, str _format, anytype _value)
    {
        int         integerLength;
        str         tmpstr;
        int         intValue;
        int64       int64Value;
        real        realValue;
        str         startPartStr;
        str         integerLengthPartStr;
        Types       type;

        type = typeOf(_value);

        if (type == Types::String && _value == '')
        {
            return #ZeroStr;
        }

        if (type == Types::String)
        {
            return _value;
        }

        if (_format == '' ||
            !strStartsWith(_format, #IntFormatStart) ||
            (type != Types::Integer && type != Types::Int64 && type != Types::Real))
        {
            return #ZeroStr;
        }

        tmpstr = _format;
        //parse the format
        [startPartStr,integerLengthPartStr] = str2con(tmpstr, #Range);
        integerLength = str2int(integerLengthPartStr);

        if (type == Types::Integer)
        {
            intValue = _value;
            tmpstr = int2str(intValue);
        }
        else if (type == Types::Int64)
        {
            int64Value = _value;
            tmpstr = int642str(int64Value);
        }
        else if (type == Types::Real)
        {
            realValue = _value;
            tmpstr = int2str(real2int(realValue));
        }

        //error, exceed the max integer length
        if (strLen(tmpstr) > integerLength)
        {
            this.logIntergerConvertError(_tableName, _dcName, _value, integerLength);
            return #ZeroStr;
        }

        return tmpstr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats value to string type..
    /// </summary>
    /// <param name="_fixedLength">
    /// The fixed string length.
    /// </param>
    /// <param name="_maxLength">
    /// The max string length.
    /// </param>
    /// <param name="_value">
    /// Value which need to be format.
    /// </param>
    /// <returns>
    /// String.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str formatToString(
        int     _fixedLength,
        int     _maxLength,
        anytype _value)
    {
        str     ret;

        int         typeId = typeOf(_value);
        date        tmpDate;
        utcDateTime tmpUtcDateTime;

        //if it is date, then convert it to fixed format
        switch (typeId)
        {
            case Types::Date:
                tmpDate = _value;
                ret = this.dateStrForGBT(tmpDate);
                break;

            case Types::Enum:
                ret = enum2str(_value);
                break;

            case Types::UtcDateTime:
                tmpUtcDateTime = _value;
                tmpDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(tmpUtcDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                ret = this.dateStrForGBT(tmpDate);
                break;

            case Types::Integer:
                ret = int2str(_value);
                break;

            case Types::Int64:
                ret = int642str(_value);
                break;

            default:
                //all other cases, let's convert it to string by default
                ret = strFmt('%1', _value);
                break;
        }

        if (_fixedLength)
        {
            //in case having fixed length restriction
            if (strLen(ret) < _fixedLength)
            {
                //if not reach the fixed length, padding with blank
                ret = strLFix(ret, _fixedLength, #Blank);
            }
            else
            {
                //if exceed the fixed length, then trim it
                ret = subStr(ret, 1, _fixedLength);
            }
        }
        else if (_maxLength)
        {
            //in case having max length restriction
            if (strLen(ret) > _maxLength)
            {
                ret = subStr(ret, 1, _maxLength);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize GBT data element type infomation of CN.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public abstract void init()
    {
        //static info which is from
    }

]]></Source>
			</Method>
			<Method>
				<Name>logIntergerConvertError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a warning message.
    /// </summary>
    /// <param name="_tableName">
    /// The data table name.
    /// </param>
    /// <param name="_dcName">
    /// The data column name.
    /// </param>
    /// <param name="_value">
    /// Value.
    /// </param>
    /// <param name="_integerLength">
    /// The max integer Length.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void logIntergerConvertError(Name _tableName, Name _dcName, anytype _value, int _integerLength)
    {
        //Value %1 have exceeded its allowed max value %2.
        warning(strFmt("@GLS223092", _value, real2int(power(10, _integerLength) - 1), _tableName, _dcName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDataElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// lookup data element.
    /// </summary>
    /// <param name="_columnName">
    /// The column name.
    /// </param>
    /// <returns>
    /// container.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container lookupDataElement(Name _columnName)
    {
        if (mapDataTypeInfo && mapDataTypeInfo.exists(_columnName))
        {
            return mapDataTypeInfo.lookup(_columnName);
        }
        else
        {
            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new()
    {
        mapDataTypeInfo = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container pack()
    {
        return [classIdGet(this), mapDataTypeInfo.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unserializes the current instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </summary>
    /// <param name="_con">
    /// A container that contains the instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void unpack(container _con)
    {
        ClassId     classId;
        container   con;

        if (_con != conNull())
        {
            [classId, con] = _con;
            if (classId == classIdGet(this))
            {
                mapDataTypeInfo = Map::create(con);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </summary>
    /// <param name="_xmlCategory">
    /// The gbt xml category.
    /// </param>
    /// <returns>
    /// The instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static GBTDataElementTypeInfo_CN construct(GBTXmlCategory_CN _xmlCategory)
    {
        GBTDataElementTypeInfo_CN  dataElementTypeInfo;

        switch (_xmlCategory)
        {
            case GBTXmlCategory_CN::GL:
                dataElementTypeInfo = new GBTDataElementTypeInfo_GL_CN();
                break;
            case GBTXmlCategory_CN::Common:
                dataElementTypeInfo = new GBTDataElementTypeInfo_Common_CN();
                break;
            case GBTXmlCategory_CN::ARAP:
                dataElementTypeInfo = new GBTDataElementTypeInfo_ARAP_CN();
                break;
            case GBTXmlCategory_CN::FA:
                dataElementTypeInfo = new GBTDataElementTypeInfo_FA_CN();
                break;
        }

        return dataElementTypeInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </summary>
    /// <param name="_con">
    /// The container of the packed instance.
    /// </param>
    /// <returns>
    /// The instance of the <c>GBTDataElementTypeInfo_CN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static GBTDataElementTypeInfo_CN create(container _con)
    {
        ClassId                     id;
        container                   typeInfo;
        DictClass                   dictClass;
        GBTDataElementTypeInfo_CN   GBTDataElementTypeInfo;

        [id, typeInfo] = _con;
        dictClass = new DictClass(id);
        GBTDataElementTypeInfo = dictClass.makeObject();
        GBTDataElementTypeInfo.unpack(_con);
        return GBTDataElementTypeInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trimTrailingZeros</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trims trailing zeros of numeric string.
    /// </summary>
    /// <param name="_numStr">
    /// The numeric string.
    /// </param>
    /// <returns>
    /// A string that trailing zeros was trimed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str trimTrailingZeros(str _numStr)
    {
        #define.DecimalPoint('.')
        #define.ZeroStr('0')

        int         i;
        str         integerPartStr;
        str         decimalPartStr;
        int         decimalPointPosition;

        decimalPointPosition = strFind(_numStr, #DecimalPoint, 1, strLen(_numStr));

        if (decimalPointPosition > 0)
        {
            integerPartStr = subStr(_numStr, 1, decimalPointPosition - 1);
            decimalPartStr = subStr(_numStr, decimalPointPosition + 1, strLen(_numStr));
        }
        else
        {
            integerPartStr = _numStr;
            decimalPartStr = '';
        }

        i = strLen(decimalPartStr);
        while (i > 0)
        {
            if (subStr(decimalPartStr, strLen(decimalPartStr), 1) == #ZeroStr)
            {
                decimalPartStr = strDel(decimalPartStr, strLen(decimalPartStr), 1);
                i--;
            }
            else
            {
                break;
            }
        }

        return IntegerPartStr + (decimalPartStr != '' ? (#DecimalPoint + decimalPartStr) : '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>