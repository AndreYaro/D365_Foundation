<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The base logic for Czech depreciation methods.
/// </summary>
public abstract class AssetTableMethod_CZ extends AssetTableMethod
{
    protected boolean isTrueUpDepreciationRequired;
    protected AssetDepreciationTime currentPeriod, periodsInCurrentYear;
    protected AssetAmount prevYearlyAmount;
    protected AssetTableInterval deprYearInterval;
    protected boolean theEnd;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAdditional</Name>
				<Source><![CDATA[
    /// <summary>
    /// The additional init method for Czech depreciation methods.
    /// </summary>
    /// <remarks>
    /// Finds the previous amount and current period.
    /// </remarks>
    public void initAdditional()
    {
        if (periodEnd <= deprYearInterval.endPeriod(assetBook.DepreciationStartDate))
        {
            periodsInCurrentYear = deprInterval.numOfPeriodsLeftInYear(assetBook.DepreciationStartDate);
        }
        else
        {
            periodsInCurrentYear = deprInterval.numOfPeriodsLeftInYear(deprYearInterval.startOfPeriod(periodEnd));
        }

        currentPeriod = periodsInCurrentYear - deprInterval.numOfPeriodsLeftInYear(periodEnd);

        if (isTrueUpDepreciationRequired
            && this.parmIsCatchUpDepreciation())
        {
            prevYearlyAmount = 0;
        }
        else
        {
            AssetSumCalc_Trans assetSumCalc;
            if (isReportingCurrencyDepreciation)
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(
                    assetBook.AssetId,
                    assetBook.BookId,
                    deprYearInterval.startOfPeriod(periodEnd),
                    deprYearInterval.endPeriod(periodEnd),
                    AssetSumCalcType::Reporting);
            }
            else
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(
                    assetBook.AssetId,
                    assetBook.BookId,
                    deprYearInterval.startOfPeriod(periodEnd),
                    deprYearInterval.endPeriod(periodEnd));
            }

            prevYearlyAmount = -assetSumCalc.depreciationValueAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// The init method for Czech depreciation methods.
    /// </summary>
    /// <remarks>
    /// Finds the depreciation interval.
    /// </remarks>
    public void init()
    {
        super();

        isTrueUpDepreciationRequired = assetBook.isTrueUpDepreciationRequired();

        restPeriod = 1;

        if (assetBook.depreciationProfile().DepreciationYear == AssetDepreciationYear::Calendar)
        {
            deprYearInterval = new AssetTableInterval_Calendar(AssetAccrual::Yearly);
        }
        else
        {
            AssetBookTable assetBookTable = AssetBookTable::find(assetBook.BookId);
            deprYearInterval = AssetTableInterval_Fiscal::newFiscalCalendar(AssetAccrual::Yearly, assetBookTable.getFiscalCalendar());
        }

        this.initAdditional();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the depreciation date.
    /// </summary>
    protected void setDepDate()
    {
        if (halfDepreciation
            && periodEnd > parmRunDate)
        {
            periodEnd = parmRunDate;
        }

        depreciationDate = periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds if the depreciation has to be calculated for the next period.
    /// </summary>
    /// <returns>
    /// returns true or false accordingly.
    /// </returns>
    /// <remarks>
    /// Checking for depreciation for next period.
    /// </remarks>
    public boolean next()
    {
        if (theEnd
            || parmRunDate <= baseDate
            || (deprInterval.endPeriod(assetBook.LastDepreciationDate) == deprInterval.endPeriod(parmRunDate)
                && periodEnd > parmRunDate
                && halfDepreciation))
        {
            return false;
        }

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::Regular_CZ)
        {
            this.setDepDate();
        }

        currentPeriod++;

        if (currentPeriod > periodsInCurrentYear)
        {
            prevYearlyAmount = 0;

            if (periodEnd <= deprYearInterval.endPeriod(assetBook.DepreciationStartDate))
            {
                periodsInCurrentYear = deprInterval.numOfPeriodsLeftInYear(assetBook.DepreciationStartDate);
            }
            else
            {
                periodsInCurrentYear = deprInterval.numOfPeriodsLeftInYear(deprYearInterval.startOfPeriod(periodEnd));
            }

            currentPeriod = periodsInCurrentYear - deprInterval.numOfPeriodsLeftInYear(periodEnd);
            currentPeriod++;
        }

        currentInterval++;

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::Accelerated_CZ)
        {
            this.setDepDate();
        }

        if (currentInterval > assetBook.LifeTimeRest
            || depreciationDate > parmRunDate
            || periodEnd < periodstart
            || (assetBook.IsTrueUpDepreciation
                && isTrueUpDepreciationRequired
                && this.parmIsCatchUpDepreciation()
                && periodEnd > assetBook.LastDepreciationDate))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>