<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SigRouteTableApproveProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SIGRouteTableApproveProcedure</c> class handles the route table approval process.
/// </summary>
class SigRouteTableApproveProcedure extends SIGBOMRouteApproveProcedure
{
    RouteTable  table;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendProcedureGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the necessary controls to the procedure group control.
    /// </summary>
    /// <param name="_fr">
    ///    The <c>formrun</c> object to which the group control belongs.
    /// </param>
    /// <param name="_ctrl">
    ///    The group control to which to add the controls.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean extendProcedureGroup(FormRun _fr, FormGroupControl _ctrl)
    {
        boolean ret = super(_fr,_ctrl);

        if (ret)
        {
            _ctrl.caption("@SYS29118");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of the signature-controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///    A list of the fields that are required for this BOM-approval procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                 [DatabaseLogType::Update,tablenum(RouteTable),fieldnum(RouteTable,Approved)],
                 [DatabaseLogType::Update,tablenum(RouteTable),fieldnum(RouteTable,Approver)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the route table record is currently approved.
    /// </summary>
    /// <returns>
    ///    true if the record is currently approved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method returns the inverse of the current value because the value is switched when it is initialized.
    /// </remarks>
    public boolean isAlreadyApproved()
    {
        return !table.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteTable</Name>
				<Source><![CDATA[
    public RouteTable parmRouteTable(RouteTable _table = table)
    {
        table = _table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtCtrlEmplId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Modified method for the added employee ID control.
    /// </summary>
    /// <param name="_callerControl">
    ///   The calling form control.
    /// </param>
    /// <returns>
    ///   The return values of the <c>super</c> method.
    /// </returns>
    public boolean rtCtrlEmplId_modified(FormStringControl _callerControl)
    {
        boolean ret = super(_callerControl);
        table.Approver = HcmWorker::findByPersonnelNumber(_callerControl.valueStr()).RecId;

        SIGBaseDocument     doc;
        ListEnumerator      iter = docList.getEnumerator();
        if (iter.moveNext())
        {
            doc = iter.current();
            doc.initDatabaseLog(DatabaseLogType::Update, table, table.orig());
            Object formRunObject = formRun;
            formRunObject.refreshDocList();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the actual signing of the documents.
    /// </summary>
    public void run()
    {
        RouteApprove    approve;

        super();

        if (signed)
        {
            approve = RouteApprove::newRouteTable(RouteTable::find(table.RouteId));
            approve.parmApprover(table.Approver);
            approve.parmRemove(!table.Approved);

            approve.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the procedure should be included in the signature setup.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the signature dialog box with the implementing provider.
    /// </summary>
    /// <returns>
    /// true if the documents of the provider have been signed; otherwise, false.
    /// </returns>
    public boolean sign()
    {
        table = RouteTable::find(table.RouteId);
        if (table.Approved)
        {
            SIGBOMRouteApproveProcedure::checkIfRemoveOfApprovalIsBlocked(RouteParameters::find().BlockRemoveApproval);
            table.Approved = NoYes::No;
            table.Approver = 0;
        }
        else
        {
            table.Approved = NoYes::Yes;
            table.Approver = HcmWorker::userId2Worker(curuserid());
        }

        docList = new List(Types::Class);
        docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, table));

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the signature for this procedure is required.
    /// </summary>
    /// <returns>
    ///    True if the built-in signature requirement is enabled or one of the fields requires a signature.
    /// </returns>
    public boolean signatureRequired()
    {
        classId classId = classnum(SIGRouteTableApproveProcedure);

        return SIGProcSetup::classIdEnabled(classId)
               || SIGProcSetupField::classIdFieldsEnabled(classId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SIGRouteTableApproveProcedure construct()
    {
        return new SIGRouteTableApproveProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS29118";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of this class by using a <c>RouteTable</c> record.
    /// </summary>
    /// <param name="_table">
    ///    The record with which to create the instance.
    /// </param>
    /// <returns>
    ///    The new instance.
    /// </returns>
    public static SIGRouteTableApproveProcedure newRouteTable(RouteTable  _table)
    {
        SIGRouteTableApproveProcedure procedure = SIGRouteTableApproveProcedure::construct();

        procedure.parmRouteTable(_table);

        return procedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>