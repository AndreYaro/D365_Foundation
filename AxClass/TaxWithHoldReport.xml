<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithHoldReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Runs the settlement proces for withholding tax.
/// </summary>
class TaxWithHoldReport extends RunBaseBatch implements BatchRetryable
{
    NoYes                       updateNow;
    NoYes                       printout;

    LedgerVoucher               ledgerVoucher;
    VendVoucher                 vendVoucher;
    VendAccount                 vendAccount;
    NumberSeq                   numberSeq;
    LedgerDimensionAccount      taxWithholdReportDimensionAccount;

    TaxWithholdPeriod           taxWithholdPeriod;
    TaxPeriodDate               fromDate;
    TaxPeriodDate               toDate;
    Voucher                     voucher;
    TransDate                   transactionDate;
    TaxReportPeriod             taxReportPeriod;
    TaxWithholdRepVersion       taxWithholdRepVersion;

    DialogField                 dialogUpdate;
    DialogField                 dialogTaxPeriod;
    DialogField                 dialogFromDate;
    DialogField                 dialogTransDate;
    DialogField                 dialogSettlementAccount;
    DialogField                 dialogVersion;

    Counter                     transactions;
    Counter                     taxTransactions;

    TaxAmount                   taxAmountSales;
    TaxAmount                   totalClearingAmount;

    LedgerDimensionAccount      settlementAccountDimension;

    TaxPeriodHead               taxPeriodHead;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        updateNow,
        taxWithholdPeriod,
        fromDate,
        transactionDate
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether need to update.
    /// </summary>
    /// <returns>
    /// Returns ture if need to update.
    /// </returns>
    boolean checkForUpdate()
    {
        if (updateNow)
        {
            switch (taxWithholdRepVersion)
            {
                case TaxRepVersion::Total :
                case TaxRepVersion::Correct :
                    return checkFailed("@GLS2028");

                case TaxRepVersion::Original :
                    if (taxReportPeriod.TaxWithholdVersion_BR > 0)
                    {
                        return checkFailed("@GLS2029");
                    }
                    break;

                case TaxRepVersion::Latest :
                    if ( taxReportPeriod.TaxWithholdVersion_BR == 0)
                    {
                        return checkFailed("@SYS62062");
                    }
                    break;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@GLS2003", this);

        updateNow = false;

        dialog.caption( "@GLS2003");

        dialogTaxPeriod = dialog.addFieldValue(extendedTypeStr(TaxWithholdPeriod), taxWithholdPeriod);

        dialogFromDate  = dialog.addField(extendedTypeStr(TaxPeriodDate), "@SYS5209", "@SYS12292");

        dialogTransDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@GLS2007");

        dialogVersion   = dialog.addField(extendedTypeStr(TaxWithholdRepVersion), "" ,"@SYS25691");

        dialogUpdate    = dialog.addField(extendedTypeStr(NoYesId), "@SYS98424", "@SYS17200");

        dialogSettlementAccount = dialog.addField(extendedTypeStr(LedgerAccount), "@SYS23812", "@SYS8343");
        dialogSettlementAccount.visible(false);

        dialog.allowUpdateOnSelectCtrl(true);

        this.dialogSelectCtrl();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the from date.
    /// </summary>
    /// <returns>
    /// Returns the from date.
    /// </returns>
    StartDate fromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        updateNow                       = dialogUpdate.value();
        taxWithholdPeriod               = dialogTaxPeriod.value();
        fromDate                        = dialogFromDate.value();
        transactionDate                 = dialogTransDate.value();
        settlementAccountDimension      = dialogSettlementAccount.value();
        taxWithholdRepVersion           = dialogVersion.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts one leger voucher record for given parameters.
    /// </summary>
    /// <param name="_taxledgerDimension">
    /// The tax ledger dimension.
    /// </param>
    /// <param name="_taxWithholdReportDimension">
    /// The report dimension of withholding tax.
    /// </param>
    /// <param name="_dimension">
    /// The department number.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_taxAmount">
    /// The tax amount.
    /// </param>
    /// <param name="_taxAmountMST">
    /// The tax amount MST.
    /// </param>
    /// <param name="_currencyHelper">
    /// An instance of <c> CurrencyExchangeHelper </c>
    /// </param>
    protected void post(  LedgerDimensionAccount    _taxledgerDimension,
                          LedgerDimensionAccount    _taxWithholdReportDimension,
                          Dimension                 _dimension,
                          CurrencyCode              _currencyCode,
                          TaxAmount                 _taxAmount,
                          TaxAmount                 _taxAmountMST,
                          CurrencyExchangeHelper    _currencyHelper)
    {
        if (_taxAmount)
        {
            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::TaxWithhold,
                   _taxledgerDimension,
                   _currencyCode,
                   _taxAmount,
                   _currencyHelper));

            if (vendAccount)
            {
                totalClearingAmount += (_taxAmount * -1);
            }
            else
            {
                ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newTransactionAmountDefault(
                            ledgerVoucher.findLedgerVoucherObject(),
                            LedgerPostingType::TaxWithhold,
                            _taxWithholdReportDimension,
                            _currencyCode,
                           -(_taxAmount),
                            _currencyHelper));
            }

            transactions++;
            taxAmountSales += (_taxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxWithholdSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the settlement of withholding tax.
    /// </summary>
    /// <param name="_vendTable">
    /// An instance of <c> VendTable </c>
    /// </param>
    /// <param name="_taxWithholdAmount">
    /// The withholding tax amount.
    /// </param>
    private void postTaxWithholdSettlement(VendTable _vendTable, TaxWithholdAmount _taxWithholdAmount)
    {
        ExchangeRateHelper          exchangeRateHelper;
        CurrencyExchangeHelper      currencyExchangeHelper;
        TaxWithholdTable            taxWithholdTable;
        DueDate                     dueDate;
        TaxWithholdAmount           taxWithholdAmount;
        VendTrans                   vendTrans;

        if (!_vendTable.AccountNum)
        {
            if (!settlementAccountDimension)
            {
                select firstonly TaxReportLedgerDimension from TaxWithholdTable
                    where TaxWithholdTable.TaxWithholdPeriod_BR == taxWithholdPeriod;

                settlementAccountDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(TaxWithholdTable.TaxReportLedgerDimension);
            }

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

            ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::Tax,
                    settlementAccountDimension,
                    Ledger::accountingCurrency(),
                    _taxWithholdAmount,
                    currencyExchangeHelper));
        }
        else
        {
            dueDate   = taxPeriodHead::taxReportDate(taxWithholdPeriod, toDate);

            taxWithholdAmount = taxWithholdAmount + totalClearingAmount;

            vendVoucher = CustVendVoucher::construct(SysModule::Vend,
                                            _vendTable.AccountNum,
                                            taxWithholdAmount,
                                            _vendTable.Currency,
                                            LedgerTransTxt::TaxReporting,
                                            _vendTable.DefaultDimension,
                                            VendParameters::find().PostingProfile,
                                            LedgerPostingType::Tax,
                                            _vendTable.PaymTermId,
                                            SettlementType::None,
                                            HcmWorker::userId2Worker(curUserId()),
                                            NoYes::Yes,
                                            '',
                                            dateNull(),
                                            0,
                                            dueDate);

            vendVoucher.parmTransTxt("@Tax_WithholdTax:WithholdTaxPayment");
            vendVoucher.parmPaymMode(_vendTable.PaymMode);
            vendVoucher.parmPaymSpec(_vendTable.PaymSpec);
            vendVoucher.parmPaymId(_vendTable.PaymId);

            exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
            Ledger::current(),
                _vendTable.Currency,
                transactionDate);

            vendVoucher.parmExchRate(exchangeRateHelper.getExchangeRate1());
            vendVoucher.parmExchRateSecondary(exchangeRateHelper.getExchangeRate2());

            vendVoucher.post(ledgerVoucher,
                                vendTrans,
                                NoYes::No,
                                UnknownNoYes::Unknown);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>TaxWithHoldReporting</c> menu item to show <c>TaxWithholdReport_BR</c> report
    /// </summary>
    void printout()
    {
        Args    args;

        args = new Args();
        args.parmObject(this);
        args.record(taxReportPeriod);

        TaxWithholdReportPrintOut::printout(taxWithholdPeriod, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingVersionUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record of <c>TaxReportPeriod</c>
    /// </summary>
    void reportingVersionUpdate()
    {
        TaxReportPeriod::taxWithholdVersionSumUp(taxWithholdPeriod,fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00062, funcName());

        #OCCRetryCount
        TaxWithholdTrans         taxWithholdTrans;
        TaxWithholdReportVoucher taxWithholdReportVoucher;

        try
        {
            taxPeriodHead   = TaxPeriodHead::find(taxWithholdPeriod);
            taxReportPeriod = TaxReportPeriod::find(taxWithholdPeriod, fromDate);
            if (!taxReportPeriod)
            {
                throw error("@SYS24993");
            }
            else
            {
                fromDate    = taxReportPeriod.FromDate;
                toDate      = taxReportPeriod.ToDate;
                printout    = NoYes::Yes;

                if (updateNow)
                {
                    if (this.checkForUpdate())
                    {
                        ttsbegin;
                        numberSeq   = NumberSeq::newGetVoucher(TaxParameters::numRefTaxWithHoldReportingVoucher(),false);
                        voucher     = numberSeq.voucher();
                        this.updateNow();
                        if (taxTransactions)
                        {
                            if (!transactions)
                            {
                                while select forupdate Voucher from TaxWithholdTrans
                                    where TaxWithholdTrans.Voucher   == voucher &&
                                          TaxWithholdTrans.TransDate == transactionDate
                                {
                                    TaxWithholdTrans.Voucher = '';
                                    TaxWithholdTrans.update();
                                }
                                numberSeq.abort();
                            }

                            TransactionLog::create(TransactionLogType::TaxReport, voucher);
                        }
                        else
                        {
                            select firstonly forupdate taxWithholdReportVoucher
                                where taxWithholdReportVoucher.TaxWithholdPeriod == taxWithholdPeriod &&
                                      taxWithholdReportVoucher.Voucher   == voucher   &&
                                      taxWithholdReportVoucher.TransDate == transactionDate;

                            taxWithholdReportVoucher.Voucher = '';
                            taxWithholdReportVoucher.update();

                            numberSeq.abort();
                        }
                        ttscommit;
                    }
                    else
                    {
                        printout = NoYes::No;
                    }
                }
                else if (!updateNow &&
                         taxReportPeriod.VersionNum > 0 &&
                         taxWithholdRepVersion == TaxRepVersion::Original)
                {
                    warning("@GLS2019");
                }
            }

            if (printout)
                this.printout();
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts one leger voucher record for given parameters and inserts one tax withhold tansactions.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// A instance of <c> TaxWithholdTrans </c>.
    /// </param>
    /// <param name="_currencyExchangeHelper">
    /// A instance of <c> CurrencyExchangeHelper </c>.
    /// </param>
    void saveAndPost(TaxWithholdTrans       _taxWithholdTrans,
                     CurrencyExchangeHelper _currencyExchangeHelper)
    {
        TaxWithholdTrans        taxTransOffsetTrans;
        AmountCur       taxAmountCur;
        AmountMST       taxAmountMST;
        CurrencyCode    currencyCode;
        Dimension       dimension;
        ;

        if (_taxWithholdTrans.Source_BR == TaxWithholdSource::VendPayment)
        {
            _taxWithholdTrans.TaxWithholdAmount    = _taxWithholdTrans.TaxTaxWithholdAmount * -1;
            _taxWithholdTrans.TaxTaxWithholdAmount = _taxWithholdTrans.TaxTaxWithholdAmount * -1;
        }

        if (_taxWithholdTrans.TaxWithholdCurrency && _taxWithholdTrans.TaxWithholdCurrency != CompanyInfoHelper::standardCurrency())
        {
            currencyCode      = _taxWithholdTrans.TaxWithholdCurrency;
            taxAmountCur      =  CurrencyExchangeHelper::amount(_taxWithholdTrans.TaxTaxWithholdAmount, currencyCode);
        }
        else
        {
            taxAmountCur      =  CurrencyExchangeHelper::amount(_taxWithholdTrans.TaxWithholdAmount);
            currencyCode      = CompanyInfoHelper::standardCurrency();
        }
        taxAmountMST     =  CurrencyExchangeHelper::amount(_taxWithholdTrans.TaxTaxWithholdAmount);

        taxWithholdReportDimensionAccount =
            LedgerDimensionFacade::serviceCreateLedgerDimension(TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode).TaxReportLedgerDimension);

        this.post(LedgerDimensionFacade::serviceCreateLedgerDimension(_taxWithholdTrans.LedgerDimension),
                  taxWithholdReportDimensionAccount,
                  dimension,
                  currencyCode,
                  taxAmountCur * -1,
                  taxAmountMST * -1,
                  _currencyExchangeHelper);

        taxTransOffsetTrans.clear();

        taxTransOffsetTrans.Voucher                 = voucher;
        taxTransOffsetTrans.TransDate               = transactionDate;
        taxTransOffsetTrans.TaxWithholdPeriod_BR    = taxWithholdPeriod;
        taxTransOffsetTrans.CompetenceDate          = transactionDate;
        taxTransOffsetTrans.Source_BR               = TaxWithholdSource::WithholdTax;
        taxTransOffsetTrans.VendAccount             = _taxWithholdTrans.VendAccount;
        taxTransOffsetTrans.TaxWithholdCode         = _taxWithholdTrans.TaxWithholdCode;
        taxTransOffsetTrans.LedgerDimension         = _taxWithholdTrans.LedgerDimension;
        taxTransOffsetTrans.TaxWithholdCurrency     = _taxWithholdTrans.TaxWithholdCurrency;
        taxTransOffsetTrans.WithholdBaseAmount      = _taxWithholdTrans.WithholdBaseAmount * -1;
        taxTransOffsetTrans.TaxTaxWithholdAmount    = _taxWithholdTrans.TaxTaxWithholdAmount * -1;
        taxTransOffsetTrans.TaxWithholdAmount       = _taxWithholdTrans.TaxWithholdAmount * -1;
        taxTransOffsetTrans.TaxWithholdBaseAmount   = _taxWithholdTrans.TaxWithholdBaseAmount * -1;

        taxTransOffsetTrans.TaxRepCounter_BR = TaxReportPeriod::find(_taxWithholdTrans.TaxWithholdPeriod_BR, fromDate).TaxWithholdVersion_BR;

        taxTransOffsetTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOtherAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles the tax amount in diffence round.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <returns>
    /// Returns the tax amount in diffence round.
    /// </returns>
    TaxAmount settleOtherAmounts(DimensionDefault _defaultDimension)
    {
        LedgerDimensionDefaultAccount   pennyDiffDefaultAccount;
        LedgerDimensionAccount          pennyDiffDimAccount;
        LedgerVoucherTransObject        ledgerVoucherTransObject;
        TaxAmount                       taxAmountRoundDiff;
        TaxAuthorityAddress             taxAuthority;
        CurrencyExchangeHelper          currencyExchangeHelper;

        taxAuthority = TaxAuthorityAddress::find(TaxPeriodHead::find(taxWithholdPeriod).TaxAuthority);

        taxAmountRoundDiff = taxAuthority.roundOffTaxAmount(totalClearingAmount) - totalClearingAmount;

        if (taxAmountRoundDiff)
        {
            pennyDiffDefaultAccount = LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::VATRoundOff);

            if (!pennyDiffDefaultAccount)
                throw error (strFmt("@SYS66102", LedgerPostingType::VATRoundOff));

            pennyDiffDimAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(pennyDiffDefaultAccount, _defaultDimension);

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerVoucher.findLedgerVoucherObject(),
                                            LedgerPostingType::VATRoundOff,
                                            pennyDiffDimAccount,
                                            Ledger::accountingCurrency(),
                                           -taxAmountRoundDiff,
                                            currencyExchangeHelper);

            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Detail);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        return taxAmountRoundDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period of withholding tax.
    /// </summary>
    /// <returns>
    /// Returns the period of withholding tax.
    /// </returns>
    TaxWithholdPeriod   taxWithholdPeriod()
    {
        return taxWithholdPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdReported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether reports the withholding tax.
    /// </summary>
    /// <returns>
    /// Return true if need to update.
    /// </returns>
    NoYes taxWithholdReported()
    {
        if (updateNow)
            return NoYes::Yes;

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdReportVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of <c> TaxWithholdReportVoucher </c> table.
    /// </summary>
    /// <returns>
    /// Returns a <c> TaxWithholdReportVoucher </c> table buffer.
    /// </returns>
    TaxWithholdReportVoucher taxWithholdReportVoucher()
    {
        TaxWithholdReportVoucher    taxWithholdReportVoucher;
        ;

        taxWithholdReportVoucher.Voucher                = voucher;
        taxWithholdReportVoucher.TransDate              = transactionDate;
        taxWithholdReportVoucher.TaxWithholdPeriod      = taxWithholdPeriod;
        taxWithholdReportVoucher.FromDate               = fromDate;
        taxWithholdReportVoucher.ToDate                 = toDate;
        taxWithholdReportVoucher.TaxWithholdRepVersion  = taxWithholdRepVersion;
        taxWithholdReportVoucher.TaxRepCounter          = TaxWithholdTable::TaxWithholdVersion(taxWithholdPeriod, fromDate);

        return taxWithholdReportVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdRepVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the version of withholding tax.
    /// </summary>
    /// <returns>
    /// Returns the version of withholding tax
    /// </returns>
    TaxWithholdRepVersion  taxWithholdRepVersion()
    {
        return taxWithholdRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the to date.
    /// </summary>
    /// <returns>
    /// Returns the to date.
    /// </returns>
    EndDate  toDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers withholding tax settlement to a sales tax transaction.
    /// </summary>
    /// <param name="_taxWithholdAmount">
    /// The withholing tax amount.
    /// </param>
    private void transferToTaxTrans(TaxWithholdAmount _taxWithholdAmount)
    {
        TaxTrans        taxTransOffsetTrans;
        TaxWithholdTrans    taxWithholdTrans;
        TaxWithholdTable    taxWithholdTable;

        if (!settlementAccountDimension)
        {
            select firstonly TaxReportLedgerDimension from TaxWithholdTable
                where TaxWithholdTable.TaxWithholdPeriod_BR == taxWithholdPeriod;

            settlementAccountDimension = TaxWithholdTable.TaxReportLedgerDimension;
        }

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::TaxWithhold,
                settlementAccountDimension,
                CompanyInfoHelper::standardCurrency(),
                _taxWithholdAmount,
                0,
                0));

        while select TaxWithholdCurrency,
                     TaxWithholdBaseAmount,
                     TaxWithholdAmount,
                     TaxWithholdCode,
                     TransDate
            from taxWithholdTrans
            where taxWithholdTrans.Voucher      == voucher &&
                  taxWithholdTrans.Source_BR    == TaxWithholdSource::WithholdTax
        {
            taxTransOffsetTrans.clear();

            taxTransOffsetTrans.Voucher                 = voucher;
            taxTransOffsetTrans.TransDate               = transactionDate;
            taxTransOffsetTrans.Source                  = TaxModuleType::Voucher;
            taxTransOffsetTrans.TaxCode                 = taxPeriodHead.TaxCode;
            taxTransOffsetTrans.TaxOrigin               = TaxOrigin::TaxReporting;
            taxTransOffsetTrans.TaxDirection            = TaxDirection::TaxTransaction;
            taxTransOffsetTrans.TaxPeriod               = TaxTable::find(taxTransOffsetTrans.TaxCode).TaxPeriod;
            taxTransOffsetTrans.CurrencyCode            = taxWithholdTrans.TaxWithholdCurrency;
            taxTransOffsetTrans.TaxBaseAmountCur        = taxWithholdTrans.TaxWithholdBaseAmount;
            taxTransOffsetTrans.TaxAmountCur            = taxWithholdTrans.TaxWithholdAmount;
            taxTransOffsetTrans.TaxBaseAmount           = taxWithholdTrans.TaxWithholdBaseAmount;
            taxTransOffsetTrans.TaxAmount               = CurrencyExchangeHelper::amount(taxWithholdTrans.TaxWithholdAmount);
            taxTransOffsetTrans.SourceCurrencyCode      = CompanyInfoHelper::standardCurrency();
            taxTransOffsetTrans.SourceBaseAmountCur     = taxWithholdTrans.TaxWithholdBaseAmount;
            taxTransOffsetTrans.SourceTaxAmountCur      = CurrencyExchangeHelper::amount(taxWithholdTrans.TaxWithholdAmount);
            taxTransOffsetTrans.TaxValue                = TaxWithholdData::find(taxWithholdTrans.TaxWithholdCode,taxWithholdTrans.TransDate,taxWithholdTrans.TaxWithholdBaseAmount).TaxWithholdValue;

            taxTransOffsetTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts the tax transactions.
    /// </summary>
    /// <returns>
    /// Retruns the counter of updated tax transactons.
    /// </returns>
    Counter updateAndPost()
    {
        Counter     versionMax;
        Counter     versionMin;

        versionMax  = TaxWithHoldReport::counterMax(taxWithholdRepVersion,taxWithholdPeriod, fromDate);
        versionMin  = TaxWithHoldReport::counterMin(taxWithholdRepVersion,taxWithholdPeriod, fromDate);

        return this.updateAndPostTaxtrans(fromDate, toDate, versionMin, versionMax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts the tax transactions.
    /// </summary>
    /// <param name="_fromDate">
    /// The form date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_versionMin">
    /// The minimal version number.
    /// </param>
    /// <param name="_versionMax">
    /// The maximal version number.
    /// </param>
    /// <returns>
    /// Retruns the counter of updated tax transactons.
    /// </returns>
    Counter updateAndPostTaxTrans(FromDate _fromDate,
                                  ToDate   _toDate,
                                  Counter  _versionMin,
                                  Counter  _versionMax)
    {
        TaxWithholdTrans        taxWithholdTrans;
        Counter                 transactionsInTax;
        CurrencyExchangeHelper  currencyExchangeHelper;

        while select sum(WithholdBaseAmount),    // SourceWithholdBaseAmount
                     sum(TaxWithholdAmount),     // SourceTaxWithholdAmount
                     sum(TaxWithholdBaseAmount), // TaxWithholdBaseAmountMST
                     sum(TaxTaxWithholdAmount)   // TaxTaxWithholdAmountMST
               from taxWithholdTrans
               group by VendAccount, Source_BR, TaxWithholdCode, TaxWithholdCurrency, TaxWithholdPeriod_BR, Ledgerdimension, DataAreaId
               where taxWithholdTrans.TaxWithholdPeriod_BR      == taxWithholdPeriod                &&
                     taxWithholdTrans.TransDate                 >= _fromDate                        &&
                     taxWithholdTrans.TransDate                 <= _toDate                          &&
                     taxWithholdTrans.TaxRepCounter_BR          >= _versionMin                      &&
                     taxWithholdTrans.TaxRepCounter_br          <= _versionMax                      &&
                     taxWithholdTrans.Source_BR                 != TaxWithholdSource::WithholdTax   &&
                     taxWithholdTrans.Posted                    == NoYes::Yes
        {
            if (taxWithholdTrans.WithholdBaseAmount       ||
                 taxWithholdTrans.TaxWithholdAmount        ||
                 taxWithholdTrans.TaxWithholdBaseAmount   ||
                 taxWithholdTrans.TaxTaxWithholdAmount)
            {
                transactionsInTax++;
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                                Ledger::primaryLedger(CompanyInfo::findDataArea(taxWithholdTrans.DataAreaId).RecId),
                                                _toDate);
                this.saveAndPost(taxWithholdTrans, currencyExchangeHelper);
            }
        }
        return transactionsInTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax transaction.
    /// </summary>
    void updateNow()
    {
        TaxWithholdReportVoucher    taxWithholdReportVoucher;
        TaxWithholdAmount           taxWithholdAmount;
        TransactionTxt              transactionTxt;
        VendTable                   vendTable;

        transactions    = 0;
        taxTransactions = 0;
        vendAccount     = taxAuthorityAddress::find(taxPeriodHead::find(taxWithholdPeriod).TaxAuthority).AccountNum;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::TaxWithholdReport);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(taxWithholdPeriod);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Tax,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucher.addVoucher(
            LedgerVoucherObject::newVoucher(voucher,
                                            transactionDate,
                                            SysModule::Tax,
                                            LedgerTransType::Tax));

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());

        taxTransactions = this.updateAndPost();

        if (vendAccount)
            vendTable = VendTable::find(vendAccount);

        taxWithholdAmount = this.settleOtherAmounts(vendTable.DefaultDimension);
        if (taxTransactions || transactions)
        {
            if (!taxPeriodHead.TaxCode)
            {
                this.postTaxWithholdSettlement(vendTable, taxWithholdAmount);
            }
            else
            {
                this.transferToTaxTrans(totalClearingAmount);
            }
        }
        else
        {
            warning("@GLS2008");
            printout = NoYes::No;
        }
        taxWithholdReportVoucher = this.taxWithholdReportVoucher();
        taxWithholdReportVoucher.insert();

        ledgerVoucher.end();
        this.reportingVersionUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximal version number for given parameters.
    /// </summary>
    /// <param name="_taxWithholdRepVersion">
    /// The withholding tax version.
    /// </param>
    /// <param name="_taxWithholdPeriod">
    /// The withholding tax period.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// Returns the maximal version number for given parameters.
    /// </returns>
    static Counter counterMax(taxWithholdRepVersion  _taxWithholdRepVersion,
                                     TaxWithholdPeriod      _taxWithholdPeriod,
                                     TransDate              _fromDate)
    {
        if  (_taxWithholdRepVersion == TaxRepVersion::Original)
            return 0;
        else
            return TaxwithholdTable::TaxWithholdVersion(_taxWithholdPeriod, _fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimal version number for given parameters.
    /// </summary>
    /// <param name="_taxWithholdRepVersion">
    /// The withholding tax version.
    /// </param>
    /// <param name="_taxPeriod">
    /// The tax period.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// Returns the minimal version number for given parameters.
    /// </returns>
    static Counter counterMin(TaxWithholdRepVersion  _taxWithholdRepVersion,
                                     TaxPeriod      _taxPeriod,
                                     TransDate      _fromDate)
    {
        Integer counter;
        switch (_taxWithholdRepVersion)
        {
            case TaxRepVersion::Original :
            case TaxRepVersion::Total :
                counter= 0;
                break;

            case TaxRepVersion::Correct :
                counter= 1;
                break;

            case TaxRepVersion::Latest :
                counter= TaxwithholdTable::TaxWithholdVersion(_taxPeriod, _fromDate);
                break;

            default :
        }
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxWithholdReport           taxReport;

        taxReport = new TaxWithHoldReport();

        if (taxReport.prompt())
        {
            taxReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of withholding tax version for given parameters.
    /// </summary>
    /// <param name="_taxWithholdRepVersion">
    /// The withholding tax version.
    /// </param>
    /// <param name="_taxWithholdPeriod">
    /// The withholding tax period.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_reported">
    /// Whether reports the withholding tax.
    /// </param>
    /// <returns>
    /// Returns the name of withholding tax versio.
    /// </returns>
    static Name taxVersion(TaxWithholdRepVersion _taxWithholdRepVersion,
                                  TaxWithholdPeriod     _taxWithholdPeriod,
                                  TransDate             _fromDate,
                                  NoYes                 _reported = NoYes::No)
    {
        Name    name;
        Counter latestVersion;

        switch (_taxWithholdRepVersion)
        {
            case TaxRepVersion::Original :
                name = strfmt('%1',0);
                break;

            case TaxRepVersion::Correct :
                name = strfmt('%1..',1);
                break;
            case TaxRepVersion::Latest  :
                latestVersion = TaxWithholdTable::TaxWithholdVersion(_taxWithholdPeriod, _fromDate);
                if (_reported)
                {
                    latestVersion -= 1;
                }
                name = strfmt('%1',latestVersion);
                break;

            case TaxRepVersion::Total :
                name = strfmt('%1..',0);
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// All concrete Runbase classes must implement a method desribing whether the class is designed for running in the Sandbox;
    /// essentially whether they are designed for execution in a new session.
    /// </summary>
    /// <returns>True if this Runbase-extending class is meant to run in a new session; false otherwise.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>