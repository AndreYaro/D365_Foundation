<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesOrderInstrumentationActivities</c> class provides activity contexts to the sales order instrumentation logging.
/// </summary>
internal final class SalesOrderInstrumentationActivities
{
    private const str InsertActivity = 'Insert';
    private const str UpdateActivity = 'Update';
    private const str DeleteActivity = 'Delete';
    private const str InsertEntity = 'InsertEntity';
    private const str UpdateEntity = 'UpdateEntity';
    private const str SyncSalesLineEntityData = 'SyncSalesLineEntityData';
    private const str SkipBusinessLogicActivity = '.SkipBusinessLogic';
    private const str InitDimensionsActivity = 'InitDimensions';
    private const str SalesLineTypeInsertActivity = 'SalesLineTypeInsert';
    private const str SalesLineTypeUpdatingActivity = 'SalesLineTypeUpdating';
    private const str SetReservationActvity = 'SetReservation';
    private const str CreateSourceDocumentLineActivity = 'CreateSourceDocumentLine';
    private const str SalesLinePricingActivity= 'SalesLinePricing';
    private const str SetSalesStatusActivity = 'SetSalesStatus';
    private const str UpdateRAssetActivity = 'UpdateRAsset';
    private const str SynchronizeActivity = 'Synchronize';
    private const str UpdateSalesTableActivity = 'UpdateSalesTable';
    private const str UpdateSalesStatusActivity = 'UpdateSalesStatus';
    private const str SetDropShipmentActivity = 'SetDropShipment';
    private const str InsertRetryActivity = 'InsertRetry';
    private const str MCRInsertActivity = 'MCRInsert';
    private const str DocumentTypeActivity = 'DocumentType';
    private const str InsertAfterBaseTableActivity = 'InsertAfterBaseTableActivity';
    private const str UpdateRegistrationsActivity = 'UpdateRegistrations';
    private const str UpdateReservationActivity = 'UpdateReservation';
    private const str UpdateOwnerActivity = 'UpdateOwner';
    private const str CreateMarkupTransActivity = 'CreateMarkupTrans';
    private const str MarkupMirrorActivity = 'MarkupMirror';
    private const str CalculateBrokerageActivity = 'CalculateBrokerage';
    private const str SetMcrMarginPercentUpdateActivity = 'SetMcrMarginPercentUpdate';
    private const str IntercompanySkipUpdateActivity = 'IntercompanySkipUpdate';
    private const str SyncSalesLineActivity = 'SyncSalesLine';
    private const str SyncPurchLineActivity = 'SyncPurchLineActivity';
    private const str SaveStockPurchaseLineActivity = 'SaveStockPurchaseLineActivity';
    private const str DeleteKanbansActivity = 'DeleteKanbans';
    private const str InterCompanyCalcDiscInternalActivity = 'InterCompanyCalcDiscInternal';
    private const str InterCompanyCalcDiscActivity = 'InterCompanyCalcDisc';
    private const str WHSSalesLineActivity = 'WHSSalesLine';
    private const str WriteRetailSalesLineActivity = 'WriteRetailSalesLineActivity';
    private const str SalesLineTypeInsertedActivity = 'SalesLineTypeInserted';
    private const str SyncPurchTableActivity = 'SyncPurchTable';
    private const str TmsModifiedDlvModeActivity = 'TmsModifiedDlvMode';
    private const str UpdateInvoiceActivity = 'UpdateInvoice';
    private const str PostUpdateActivity = 'PostUpdate';
    private const str MarkCurrentTaxDocumentActivity = 'MarkCurrentTaxDocument';
    private const str UpdateSalesLinesOnUpdateSalesTableActivity = 'UpdateSalesLinesOnUpdateSalesTable';
    private const str CreateMarkupTransOnTypeActivity = 'CreateMarkupTransOnType';
    private const str IntercompanySynchronizeActivity = 'IntercompanySynchronize';
    private const str TransferToOnetimeCustomerActivity = 'TransferToOnetimeCustomer';
    private const str McrSetRetailChannelActivity = 'McrSetRetailChannel';
    private const str InterCompanyCreateJournalActivity = 'InterCompanyCreateJournal';
    private const str RetailEventNotificationActivity = 'RetailEventNotification';
    private const str CalculateCostAmountActivity = 'CalculateCostAmount';
    private const str UnLinkAgreementLineActivity = 'UnLinkAgreementLine';
    private const str UpdateInventoryActivity = 'UpdateInventory';
    private const str RecalculatePricesActivity = 'RecalculatePrices';
    private const str MCRUpdateReturnChargesActivity = 'MCRUpdateReturnCharges';
    private const str SalesOrderEntryActivity = 'SalesOrderEntry';
    private const str UpdateBackStatusActivity = 'UpdateBackStatus';
    private const str UpdateLoadLinesActivity = 'UpdateLoadLines';
    private const str UpdateFromSalesLineActivity = 'UpdateFromSalesLine';
    private const str IntercompanySalesLineUpdateActivity = 'IntercompanySalesLineUpdate';
    private const str MCRPriceHistoryUpdateActivity = 'MCRPriceHistoryUpdate';
    private const str DeleteOrphanSalesLinesActivity = 'DeleteOrphanSalesLinesActivity';
    private const str MpsExcludeSalesLineInsertActivity = 'MpsExcludeSalesLineInsertActivity';
    private const str MpsExcludeSalesLineUpdateActivity = 'MpsExcludeSalesLineUpdateActivity';
    private const str MpsExcludeSalesOrderUpdateActivity = 'MpsExcludeSalesOrderUpdateActivity';
    private const str InitFromPriceDiscActivity = 'InitFromPriceDisc';
    private const str InitFromInventTableActivity = 'InitFromInventTable';
    private const str ModifyInventDimSetActivity = 'ModifyInventDimSet';
    private const str ModifyInventDimSetInventDimIdActivity = 'ModifyInventDimSetInventDimId';
    private const str ModifyInventDimSetTaxActivity = 'ModifyInventDimSetTax';
    private const str ModifyInventDimSetATPActivity = 'ModifyInventDimSetATP';
    private const str ModifyInventDimSetDimensionModifiedActivity = 'ModifyInventDimSetDimensionModified';
    private const str ModifyInventDimSetCalculateCostPriceActivity = 'ModifyInventDimSetCalculateCostPrice';
    private const str ModifyInventDimSetAgreementLineActivity = 'ModifyInventDimSetAgreementLine';
    private const str ModifyInventDimSetCPTStatusActivity = 'ModifyInventDimSetCPTStatus';
    private const str SetPriceAgreementActivity = 'SetPriceAgreement';
    private const str SetPriceDiscActivity = 'SetPriceDisc';
    private const str SetMcrMarginPercentActivity = 'SetMcrMarginPercent';
    private const str InitFromReleasedDistinctProductActivity = 'InitFromReleasedDistinctProduct';
    private const str ModifyFieldSalesQtyActivity = 'ModifyFieldSalesQty';
    private const str ModifyFieldItemIdActivity = 'ModifyFieldItemId';

    internal const str SalesId = 'SalesId';
    internal const str SalesTableRecId = 'SalesTableRecId';
    internal const str SourceDocumentLine = 'SourceDocumentLine';
    internal const str SalesLineRecId = 'SalesLineRecId';
    internal const str DeletedOrphanSalesLines = 'DeletedOrphanSalesLines';
    private const str IsInterCompanyOrderProperty = 'IsInterCompanyOrder';
    private const str IsInterCompanyOrderChainProperty = 'IsInterCompanyOrderChain';
    private const str InterCompanyOriginProperty = 'InterCompanyOrigin';
    private const str HasUIProperty = 'HasUI';
    private const str IsIntegrationProperty = 'IsIntegration';

    private SalesInstrumentationLogger logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SalesInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static SalesOrderInstrumentationActivities newFromLogger(SalesInstrumentationLogger _logger)
    {
        return new SalesOrderInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext activityContext(Common _salesOrderCommon, str _activityName)
    {
        return logger.activityContext(strFmt('%1.%2', tableId2Name(_salesOrderCommon.tableId), _activityName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext insert(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InsertActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext update(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext delete(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, DeleteActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext insertEntityDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return logger.activityContext(strFmt('%1.%2', _dataSourceCtx.name(), InsertEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateEntityDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return logger.activityContext(strFmt('%1.%2', _dataSourceCtx.name(), UpdateEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncSalesLineEntityData</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext syncSalesLineEntityData()
    {
        return logger.activityContext(SyncSalesLineEntityData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateValidation</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext skipUpdateValidation(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateActivity + SkipBusinessLogicActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initDimensions(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InitDimensionsActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineTypeInsert</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext salesLineTypeInsert(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SalesLineTypeInsertActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservation</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setReservation(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetReservationActvity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createSourceDocumentLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, CreateSourceDocumentLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLinePricing</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext salesLinePricing(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SalesLinePricingActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setSalesStatus(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetSalesStatusActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRAsset</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateRAsset(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateRAssetActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext synchronize(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SynchronizeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesTable(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateSalesTableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesStatus</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesStatus(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateSalesStatusActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDropShipment</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setDropShipment(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetDropShipmentActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetry</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext insertRetry(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InsertRetryActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsert</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mcrInsert(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MCRInsertActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext documentType(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, DocumentTypeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAfterBaseTable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext insertAfterBaseTable(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InsertAfterBaseTableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRegistrations</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateRegistrations(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateRegistrationsActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservation</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateReservation(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateReservationActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOwner</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateOwner(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateOwnerActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createMarkupTrans(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, CreateMarkupTransActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupMirror</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext markupMirror(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MarkupMirrorActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBrokerage</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateBrokerage(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, CalculateBrokerageActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMcrMarginPercentUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setMcrMarginPercentUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetMcrMarginPercentUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySkipUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext intercompanySkipUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, IntercompanySkipUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncSalesLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext syncSalesLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SyncSalesLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteKanbans</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext deleteKanbans(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, DeleteKanbansActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalcDiscInternal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext interCompanyCalcDiscInternal(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InterCompanyCalcDiscInternalActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCalcDisc</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext interCompanyCalcDisc(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InterCompanyCalcDiscActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsSalesLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext whsSalesLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, WHSSalesLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRetailSalesLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext writeRetailSalesLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, WriteRetailSalesLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineTypeInserted</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext salesLineTypeInserted(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SalesLineTypeInsertedActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchTable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext syncPurchTable(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SyncPurchTableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsModifiedDlvMode</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext tmsModifiedDlvMode(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, TmsModifiedDlvModeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoice</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateInvoice(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateInvoiceActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext postUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, PostUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocument</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext markCurrentTaxDocument(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MarkCurrentTaxDocumentActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLinesOnUpdateSalesTable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesLinesOnUpdateSalesTable(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateSalesLinesOnUpdateSalesTableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTransOnType</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createMarkupTransOnType(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, CreateMarkupTransOnTypeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySynchronize</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext intercompanySynchronize(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, IntercompanySynchronizeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToOnetimeCustomer</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext transferToOnetimeCustomer(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, TransferToOnetimeCustomerActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetRetailChannel</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mcrSetRetailChannel(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, McrSetRetailChannelActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateJournal</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext interCompanyCreateJournal(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InterCompanyCreateJournalActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailEventNotification</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext retailEventNotification(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, RetailEventNotificationActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineTypeUpdating</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext salesLineTypeUpdating(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SalesLineTypeUpdatingActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostAmount</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateCostAmount(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, CalculateCostAmountActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unLinkAgreementLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext unLinkAgreementLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UnLinkAgreementLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateInventory(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateInventoryActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext syncPurchLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SyncPurchLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveStockPurchaseLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext saveStockPurchaseLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SaveStockPurchaseLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatePrices</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext recalculatePrices(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, RecalculatePricesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateReturnCharges</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mcrUpdateReturnCharges(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MCRUpdateReturnChargesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderEntry</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext salesOrderEntry(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SalesOrderEntryActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBackStatus</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateBackStatus(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateBackStatusActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLines</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateLoadLines(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateLoadLinesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSalesLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateFromSalesLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, UpdateFromSalesLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySalesLineUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext intercompanySalesLineUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, IntercompanySalesLineUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPriceHistoryUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mcrPriceHistoryUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MCRPriceHistoryUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mpsExcludeSalesLineInsert</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mpsExcludeSalesLineInsert(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MpsExcludeSalesLineInsertActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mpsExcludeSalesLineUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mpsExcludeSalesLineUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MpsExcludeSalesLineUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mpsExcludeSalesOrderUpdate</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext mpsExcludeSalesOrderUpdate(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, MpsExcludeSalesOrderUpdateActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanSalesLines</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext deleteOrphanSalesLines()
    {
        return logger.activityContext(DeleteOrphanSalesLinesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initFromPriceDisc(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InitFromPriceDiscActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initFromInventTable(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InitFromInventTableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSet(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetInventDimId</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetInventDimId(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetInventDimIdActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetTax</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetTax(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetTaxActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetATP</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetATP(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetATPActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetDimensionModified</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetDimensionModified(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetDimensionModifiedActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetCalculateCostPrice</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetCalculateCostPrice(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetCalculateCostPriceActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetAgreementLine</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetAgreementLine(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetAgreementLineActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSetCPTStatus</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyInventDimSetCPTStatus(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyInventDimSetCPTStatusActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setPriceAgreement(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetPriceAgreementActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setPriceDisc(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetPriceDiscActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMcrMarginPercent</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext setMcrMarginPercent(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, SetMcrMarginPercentActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReleasedDistinctProduct</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initFromReleasedDistinctProduct(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, InitFromReleasedDistinctProductActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyFieldSalesQty</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyFieldSalesQty(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyFieldSalesQtyActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyFieldItemId</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext modifyFieldItemId(Common _salesOrderCommon)
    {
        return this.activityContext(_salesOrderCommon, ModifyFieldItemIdActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSalesOrder</Name>
				<Source><![CDATA[
    internal void logSalesOrder(SysInstrumentationActivityContext _activityContext, SalesTable _salesTable)
    {
        if (TradeTableInstrumentationFlight::instance().isEnabled())
        {
            boolean isInterCompanyOrderChain = _salesTable.isInterCompanyOrderChain();
            
            _activityContext
                .addCustomProperty(IsInterCompanyOrderProperty, any2Str(isInterCompanyOrderChain))
                .addCustomProperty(IsInterCompanyOrderChainProperty, any2Str(isInterCompanyOrderChain || _salesTable.InterCompanyPurchId || _salesTable.InterCompanyOriginalSalesId))
                .addCustomProperty(HasUIProperty, any2Str(FormDataUtil::isFormDataSource(_salesTable)))
                .addCustomProperty(IsIntegrationProperty, enum2Symbol(enumNum(TradeIntegrationType), _salesTable.IsIntegration));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSalesOrderLine</Name>
				<Source><![CDATA[
    internal void logSalesOrderLine(SysInstrumentationActivityContext _activityContext, SalesTable _salesTable, SalesLine _salesLine)
    {
        if (TradeTableInstrumentationFlight::instance().isEnabled())
        {
            boolean isInterCompanyOrderChain = _salesTable.isInterCompanyOrderChain();
            
            _activityContext
                .addCustomProperty(SalesTableRecId, int642Str(_salesTable.RecId))
                .addCustomProperty(SourceDocumentLine, int642Str(_salesLine.SourceDocumentLine))
                .addCustomProperty(IsInterCompanyOrderProperty, any2Str(_salesLine.InterCompanyInventTransId && isInterCompanyOrderChain))
                .addCustomProperty(IsInterCompanyOrderChainProperty, any2Str(isInterCompanyOrderChain || _salesTable.InterCompanyPurchId || _salesTable.InterCompanyOriginalSalesId))
                .addCustomProperty(InterCompanyOriginProperty, enum2Symbol(enumNum(InterCompanyOrigin), _salesLine.InterCompanyOrigin))
                .addCustomProperty(HasUIProperty, any2Str(FormDataUtil::isFormDataSource(_salesLine)))
                .addCustomProperty(IsIntegrationProperty, enum2Symbol(enumNum(TradeIntegrationType), _salesLine.IsIntegration));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>