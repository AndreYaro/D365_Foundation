<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCExcel</Name>
	<SourceCode>
		<Declaration><![CDATA[
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Style.XmlAccess;

/// <summary>
/// Implements a wrapper for Excel to be used for configuration purposes.
/// </summary>
class PCExcel
{
    OfficeOpenXml.ExcelPackage package;
    OfficeOpenXml.ExcelWorkbook workbook;
    OfficeOpenXml.ExcelWorksheet worksheet;
    OfficeOpenXml.Style.XmlAccess.ExcelNamedStyleXml  headerStyle, lineStyle;

    int rowCounter;

    private const str excelExtension = '.xlsx';
    private const int rowCountStart = 11;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBoldCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds value to the cell with the Bold font.
    /// </summary>
    /// <param name="_rowIndex">
    /// A row index in the spreadsheet.
    /// </param>
    /// <param name="_columnIndex">
    /// A column index in the spreadsheet.
    /// </param>
    /// <param name="_value">
    /// A string value to insert into the cell.
    /// </param>
    public void addBoldCellValue(int _rowIndex, int _columnIndex, str _value)
    {
        OfficeOpenXml.ExcelRange cell = this.populateCellValueStr(_rowIndex, _columnIndex, _value);
        OfficeOpenXml.Style.ExcelStyle style = cell.Style;
        OfficeOpenXml.Style.ExcelFont font = style.Font;
        font.Bold = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCellValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds value to the cell.
    /// </summary>
    /// <param name="_rowIndex">
    /// A row index in the spreadsheet.
    /// </param>
    /// <param name="_columnIndex">
    /// A column index in the spreadsheet.
    /// </param>
    /// <param name="_value">
    /// A string value to insert into the cell.
    /// </param>
    public void addCellValue(int _rowIndex, int _columnIndex, str _value)
    {
        this.populateCellValueStr(_rowIndex, _columnIndex, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds component definition row to the document.
    /// </summary>
    /// <param name="_level">
    /// A component level in the product configuration price model.
    /// </param>
    /// <param name="_componentName">
    /// A component name.
    /// </param>
    public void addComponent(int _level, PCName _componentName)
    {
        OfficeOpenXml.ExcelRow row = worksheet.Row(rowCounter);
        row.StyleName = lineStyle.Name;
        this.addBoldCellValue(rowCounter, _level, _componentName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLeafNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a leaf node of the product configuration price model to the spreadsheet.
    /// </summary>
    /// <param name="_level">
    /// A leaf node level in the product configuration price model.
    /// </param>
    /// <param name="_leafName">
    /// A leaf node name
    /// </param>
    public void addLeafNode(int _level, PCName _leafName)
    {
        OfficeOpenXml.ExcelRange range = worksheet.Cells;
        var cell = range.get_Item(rowCounter, _level);
        cell.Value = _leafName;
        OfficeOpenXml.Style.ExcelStyle style = cell.Style;
        OfficeOpenXml.Style.ExcelFont font = style.Font;
        font.Italic = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds sales price breakdown report header
    /// </summary>
    public void buildHeader()
    {
        str styleName = headerStyle.Name;
        OfficeOpenXml.ExcelRow row;

        for (var i = 1; i <= 8; ++i)
        {
            row = worksheet.Row(i);
            row.StyleName = styleName;
        }

        // Add first line with product name, total price & percentage 100.00
        row = worksheet.Row(10);
        row.StyleName = lineStyle.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStyles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create default Excel styles for sales price breakdown report.
    /// </summary>
    public void createStyles()
    {
        OfficeOpenXml.ExcelStyles styles = workbook.Styles;
        headerStyle = styles.CreateNamedStyle("@SYS4001902");
        OfficeOpenXml.Style.ExcelStyle style = headerStyle.Style;
        OfficeOpenXml.Style.ExcelFont font = style.Font;
        OfficeOpenXml.Style.ExcelColor color = font.Color;
        color.SetColor(System.Drawing.Color::FromArgb(16777215));
        font.Bold = false;

        OfficeOpenXml.Style.ExcelFill fill = style.Fill;
        fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle::Solid;
        color = fill.BackgroundColor;
        color.SetColor(System.Drawing.Color::FromArgb(66, 84, 102));

        lineStyle = styles.CreateNamedStyle("@SYS4001903");
        style = lineStyle.Style;
        font = style.Font;
        font.Bold = false;
        fill = style.Fill;
        fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle::Solid;
        color = fill.BackgroundColor;
        color.SetColor(System.Drawing.Color::FromArgb(214, 220, 228));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempFilePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temporary file path to store sales price breakdown document.
    /// </summary>
    /// <param name="_reference">
    /// An order reference number.
    /// </param>
    /// <returns>
    /// A temporary file path.
    /// </returns>
    public static str getTempFilePath(str _reference)
    {
        return  strFmt('%1(%2)%3', "@SYS4001897", _reference, excelExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize Excel worksheet.
    /// </summary>
    public void init()
    {
        this.initApplication();

        this.createStyles();

        this.buildHeader();

        rowCounter = rowCountStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>SysExcelApplication</c> class.
    /// </summary>
    public void initApplication()
    {
        package = new OfficeOpenXml.ExcelPackage();
        workbook = package.Workbook;
        var worksheets = workbook.Worksheets;
        worksheet = worksheets.Add('@SYS4001904');
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens Excel document from the stream.
    /// </summary>
    /// <param name = "_stream">The stream to open.</param>
    public void openFromStream(System.IO.Stream _stream)
    {
        package = new OfficeOpenXml.ExcelPackage();
        package.Load(_stream);
        workbook = package.Workbook;
        var worksheets = workbook.Worksheets;
        worksheet = worksheets.get_Item(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add new row to worksheet.
    /// </summary>
    public void newRow()
    {
        rowCounter++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCellValueInt</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds value to the cell.
    /// </summary>
    /// <param name="_cellValue">
    /// A value to insert into the cell.
    /// </param>
    /// <param name="_cellValueCount">
    /// A column index position in the row.
    /// </param>
    public void populateCellValueInt(int _cellValue, int _cellValueCount)
    {
        this.populateCellValueStr(rowCounter, _cellValueCount, strFmt("%1", _cellValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCellValueReal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds value to the cell.
    /// </summary>
    /// <param name="_cellValue">
    /// A value to insert into the cell.
    /// </param>
    /// <param name="_cellValueCount">
    /// A column index position in the row.
    /// </param>
    public void populateCellValueReal(real _cellValue, int _cellValueCount)
    {
        this.populateCellValueStr(rowCounter, _cellValueCount, strFmt("%1", _cellValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCellValueRealWithFixedDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds value to the cell.
    /// </summary>
    /// <param name="_cellValue">
    /// A value to insert into the cell.
    /// </param>
    /// <param name="_cellValueCount">
    /// A column index position in the row.
    /// </param>
    /// <param name="_noOfDecimals">
    /// Number of decimals to be applied when populating the cell.
    /// </param>
    public void populateCellValueRealWithFixedDecimals(real _cellValue, int _cellValueCount, int _noOfDecimals)
    {
        str cellValueDisplay = PCExcel::strFmtFixedDecimals(_cellValue, _noOfDecimals);
        this.populateCellValueStr(rowCounter, _cellValueCount, cellValueDisplay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCellValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates value to the cell with the Bold font.
    /// </summary>
    /// <param name="_rowIndex">
    /// A row index in the spreadsheet.
    /// </param>
    /// <param name="_columnIndex">
    /// A column index in the spreadsheet.
    /// </param>
    /// <param name="_value">
    /// A string value to insert into the cell.
    /// </param>
    /// <returns>
    /// A <c>SysExcelCell</c> instance.
    /// </returns>
    protected OfficeOpenXml.ExcelRange populateCellValueStr(int _rowIndex, int _columnIndex, str _value)
    {
        OfficeOpenXml.ExcelRange cells = worksheet.Cells;

        OfficeOpenXml.ExcelRange cell = cells.get_Item(_rowIndex, _columnIndex);
        cell.Value = _value;

        return cell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMemoryStream</Name>
				<Source><![CDATA[
    public System.IO.MemoryStream getMemoryStream()
    {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        package.SaveAs(stream);
        stream.Position = 0;
        return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useColorStyle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses a line style color.
    /// </summary>
    public void useColorStyle()
    {
        OfficeOpenXml.ExcelRow row = worksheet.Row(rowCounter);
        row.StyleName = lineStyle.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCExcel construct()
    {
        return new PCExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>strFmtFixedDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a real value with a fixed number of decimals.
    /// </summary>
    /// <param name="_value">
    /// A value to to be formatted into a stringl.
    /// </param>
    /// <param name="_noOfDecimals">
    /// Number of decimals when generating the resulting string.
    /// </param>
    public static str strFmtFixedDecimals(real _value, int _noOfDecimals)
    {
        return strFmtByLanguage(new Session().PreferredLocale(), strFmt('%1%2%3', '{0:N', _noOfDecimals, '}'), _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>