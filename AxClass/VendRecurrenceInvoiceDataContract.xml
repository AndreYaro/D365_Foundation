<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoiceDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRecurrenceInvoiceDataContract</c> class is the data contract class for the
/// <c>VendRecurrenceInvoiceGenerationService</c> service.
/// </summary>
[DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(VendRecurrenceInvoiceUIBuilder)),
    SysOperationAlwaysInitializeAttribute
]
class VendRecurrenceInvoiceDataContract implements SysOperationValidatable, SysOperationInitializable
{
    TransDate recurrenceInvoiceDate;
    TransDate recurrenceGenerationDate;
    str vendInvoiceTemplateName;
    container queryVendRecurrenceInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        this.parmRecurrenceGenerationDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        queryVendRecurrenceInvoice = new QueryRun(querystr(VendRecurrenceInvoice)).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceTemplateName</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
        SysOperationLabelAttribute(literalstr("@SYS318869")),
        SysOperationHelpTextAttribute(literalstr("@SYS318852")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public str parmVendInvoiceTemplateName(str _vendInvoiceTemplateName = vendInvoiceTemplateName)
    {
        vendInvoiceTemplateName = _vendInvoiceTemplateName;

        return vendInvoiceTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryVendRecurrenceInvoice</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
        AifQueryTypeAttribute('vendRecurrenceInvoice',
        querystr(VendRecurrenceInvoice))
    ]
    public str parmQueryVendRecurrenceInvoice(str vendRecurrenceInvoice=SysOperationHelper::base64Encode(queryVendRecurrenceInvoice))
    {
        queryVendRecurrenceInvoice = SysOperationHelper::base64Decode(vendRecurrenceInvoice);

        return vendRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecurrenceGenerationDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
        SysOperationAlwaysInitializeAttribute,
        SysOperationLabelAttribute(literalstr("@SYS318853")),
        SysOperationHelpTextAttribute(literalstr("@SYS318854")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TransDate parmRecurrenceGenerationDate(TransDate _recurrenceGenerationDate = recurrenceGenerationDate)
    {
        recurrenceGenerationDate = _recurrenceGenerationDate;

        return recurrenceGenerationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecurrenceInvoiceDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
        SysOperationLabelAttribute(literalstr("@SYS57610")),
        SysOperationHelpTextAttribute(literalstr("@SYS318868")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public TransDate parmRecurrenceInvoiceDate(TransDate _recurrenceInvoiceDate = recurrenceInvoiceDate)
    {
        recurrenceInvoiceDate = _recurrenceInvoiceDate;

        return recurrenceInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ok = true;
        RecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (!(this.parmRecurrenceInvoiceDate() && LedgerFiscalCalendar::existDate(fiscalCalendarRecId, recurrenceInvoiceDate)))
        {
            ok = checkFailed("@SYS318910");
        }
        if (this.parmVendInvoiceTemplateName() != '' && !this.validateSelectedTemplates())
        {
            ok = checkFailed("@SYS318901");
        }
        if (!(this.parmRecurrenceGenerationDate() && LedgerFiscalCalendar::existDate(fiscalCalendarRecId, recurrenceGenerationDate)))
        {
            ok = checkFailed("@SYS318902");
        }
        if (this.parmRecurrenceInvoiceDate() > this.parmRecurrenceGenerationDate())
        {
            ok = checkFailed("@AccountsPayable:ErrorVendRecurrenceInvoiceDateValidation");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendRecurrenceInvoiceDataContract construct()
    {
        return new VendRecurrenceInvoiceDataContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedTemplates</Name>
				<Source><![CDATA[
    protected boolean validateSelectedTemplates()
    {
        #Characters

        str selectedTemplates = this.parmVendInvoiceTemplateName();

        List templates = strSplit(selectedTemplates, #SEMICOLON);
        ListEnumerator templateList = templates.getEnumerator();

        while (templateList.moveNext())
        {
            if (VendInvoiceTemplate::findByTemplateName(templateList.current()).RecId == 0)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>