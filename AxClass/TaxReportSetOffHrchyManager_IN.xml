<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportSetOffHrchyManager_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.TaxEngine.Instrumentation;
using Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider;

/// <summary>
/// Encapsulates business logic of change management of tax report hierarchies.
/// </summary>
public class TaxReportSetOffHrchyManager_IN
{
    TaxReportSetOffHierarchySetup_IN    taxReportSetOffHierarchySetup;
    #define.MaxInvalidTaxTransAllowed(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSetoffHierarchySetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the setup for the setoff hierarchy version.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The effective date.
    /// </param>
    /// <param name="_hierarchyVersionRecId">
    /// RecId of the setoff hierarchy version.
    /// </param>
    public void addSetoffHierarchySetup(
        FromDate _effectiveDate,
        TaxReportHierarchyVersionRecId_IN _hierarchyVersionRecId)
    {
        TaxReportPeriod     period;

        ttsBegin;

        period = TaxReportSetoffHrchySetupHelper_IN::findTaxReportPeriods(_effectiveDate);

        if (period.RecId > 0)
        {
            TaxReportSetOffHierarchySetup_IN::saveOrUpdateSetup(period.FromDate, _hierarchyVersionRecId);
        }
        else
        {
            throw Global::error("@SYS4005646");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySetOffHierarchyChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the set off hierarchy changes
    ///
    /// D1              D2              D3              D4
    /// |---------------|---------------|---------------|--------------->
    ///     Version 1       Version 2       Version 3       Version 4
    ///
    /// 1) All related tax transactions will be updated by committing a single X++ transaction
    /// 2) Any invalid tax transaction will cause the X++ transaction to roll back
    /// 3) The X++ transaction will immediately roll back if encountered more than 10 invalid tax transactions
    /// </summary>
    /// <returns>
    /// Failure logs, as a List of string values.
    /// </returns>
    public List applySetOffHierarchyChanges()
    {
        List    failureLogs;

        failureLogs = new List(Types::String);
        System.Diagnostics.Stopwatch stopWatch  = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        ttsBegin;

        // Update tax transactions and collect failure logs
        failureLogs.appendList(
            this.updateTaxTransactions());

        // Overwrite setoff hierarchy configurations
        this.updateActiveConfigurations();

        if (failureLogs.empty())
        {
            ttsCommit;
        }
        else
        {
            ttsAbort;
        }

        stopWatch.Stop();

        str applySetOffHierarchyChangesElapsed = stopWatch.ElapsedMilliseconds.ToString();
        var log = Microsoft.Dynamics.TaxEngine.Instrumentation.TaxEngineEventSource::Get_Log();

        log.TrackMetric(methodStr(TaxReportSetOffHrchyManager_IN, applySetOffHierarchyChanges),
            applySetOffHierarchyChangesElapsed,
            ProductInfoProvider::Provider.ApplicationBuildVersion,
            taxReportSetOffHierarchySetup.TableId,
            taxReportSetOffHierarchySetup.RecId,
            SysCountryRegionCode::countryInfo());

        return failureLogs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTaskList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of <c>TaxReportSetOffHrchyChangeTask_IN</c> objects for
    /// activating a new setoff hierarchy profile.
    /// </summary>
    /// <param name="_forActiveCursor">
    /// Identifies calculation for all records or only for an active record.
    /// </param>
    /// <returns>
    /// A list of <c>TaxReportSetOffHrchyChangeTask_IN</c> objects.
    /// </returns>
    public List buildTaskList(boolean _forActiveCursor = false)
    {
        TaxReportSetOffHierarchySetup_IN    hierarchySetup;
        TaxReportSetOffHierarchySetup_IN    hierarchySetupByClass;
        List                                changeTaskList;
        RefRecId                            curVersion;
        RefRecId                            newVersion;
        date                                fromDate;
        date                                toDate;
        TaxReportHierarchyVersion_IN        hierarchyVersion;
        
        changeTaskList = new List(Types::Class);
        
        while select maxOf(HierarchClassId) from hierarchySetupByClass
            group by HierarchClassId
            where hierarchySetupByClass.TaxReportSetOffHrchySetupHistory == 0
                && (!_forActiveCursor
                    || (hierarchySetupByClass.HierarchClassId == taxReportSetOffHierarchySetup.HierarchClassId
                        && hierarchySetupByClass.EffectiveDate == taxReportSetOffHierarchySetup.EffectiveDate))
        
        {
            fromDate = dateNull();
            toDate = dateNull();
            hierarchyVersion = null;
            newVersion = 0;
            curVersion = 0;
            
            while select hierarchySetup
                order by hierarchySetup.EffectiveDate asc
                where hierarchySetup.TaxReportSetOffHrchySetupHistory == 0
                    && hierarchySetup.HierarchClassId == hierarchySetupByClass.HierarchClassId
                    && (!_forActiveCursor
                    || hierarchySetup.EffectiveDate == taxReportSetOffHierarchySetup.EffectiveDate)
            {
                if (fromDate && hierarchyVersion)
                {
                    // Change context
                    toDate = hierarchySetup.EffectiveDate;
                    if (fromDate < toDate)
                    {
                        // Omit change tasks with same "from" and "to" dates
                        changeTaskList.addEnd(TaxReportSetOffHrchyChangeTask_IN::newTask(hierarchyVersion, fromDate, toDate));
                    }
                    // Reset context
                    fromDate = dateNull();
                    hierarchyVersion = null;
                }
                
                // Context -> current/new hierarchy version
                if (hierarchySetup.IsDraft)
                {
                    newVersion = hierarchySetup.TaxReportHierarchyVersion;
                }
                else
                {
                    curVersion = hierarchySetup.TaxReportHierarchyVersion;
                }
                
                // Change is needed if
                // 1) A new version is configured
                // 2) The new version is different from the current one
                if (newVersion && newVersion != curVersion)
                {
                    // Context -> from date & new version
                    fromDate = hierarchySetup.EffectiveDate;
                    hierarchyVersion = TaxReportHierarchyVersion_IN::find(newVersion);
                }
            }
            if (fromDate && hierarchyVersion)
            {
                changeTaskList.addEnd(TaxReportSetOffHrchyChangeTask_IN::newTask(hierarchyVersion, fromDate));
            }
        }
        return changeTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActiveConfigurations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwrites the system configuration with the user configuration from the form.
    /// </summary>
    private void updateActiveConfigurations()
    {
        TaxReportSetOffHrchySetupHistory_IN     hierarchySetupHistory;
        TaxReportSetOffHierarchySetup_IN        hierarchySetup;
        TaxReportSetOffHierarchySetup_IN        insertSetup;
        RecordInsertList                        insertList;
        
        // Remove original active setoff hierarchies
        delete_from hierarchySetup
            where hierarchySetup.IsDraft == NoYes::No
                && hierarchySetup.EffectiveDate == taxReportSetOffHierarchySetup.EffectiveDate
                && hierarchySetup.HierarchClassId == taxReportSetOffHierarchySetup.HierarchClassId;
        
        // Apply new configurations
        insertList = new RecordInsertList(hierarchySetup.TableId);
        
        while select hierarchySetup
            where hierarchySetup.IsDraft == NoYes::Yes
                && hierarchySetup.TaxReportHierarchyVersion == taxReportSetOffHierarchySetup.TaxReportHierarchyVersion
                && hierarchySetup.EffectiveDate == taxReportSetOffHierarchySetup.EffectiveDate
                && hierarchySetup.TaxReportSetOffHrchySetupHistory == 0 // Not archived
                && hierarchySetup.HierarchClassId == taxReportSetOffHierarchySetup.HierarchClassId
        {
            insertSetup.data(hierarchySetup);
            insertSetup.IsDraft = NoYes::No; // From "draft" to "active"
            insertList.add(insertSetup);
        }
        
        insertList.insertDatabase();
        
        // Archive the history
        hierarchySetupHistory = TaxReportSetOffHrchySetupHistory_IN::createHistory();
        
        insertList = new RecordInsertList(hierarchySetup.TableId);
        
        while select hierarchySetup
            where hierarchySetup.IsDraft == NoYes::Yes
                && hierarchySetup.TaxReportSetOffHrchySetupHistory == 0 // Not archived
                && hierarchySetup.TaxReportHierarchyVersion == taxReportSetOffHierarchySetup.TaxReportHierarchyVersion
                && hierarchySetup.EffectiveDate == taxReportSetOffHierarchySetup.EffectiveDate
                && hierarchySetup.HierarchClassId == taxReportSetOffHierarchySetup.HierarchClassId
        {
            insertSetup.data(hierarchySetup);
            insertSetup.TaxReportSetOffHrchySetupHistory = hierarchySetupHistory.RecId;
            insertList.add(insertSetup);
            
        }
        
        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransactions</Name>
				<Source><![CDATA[
    private List updateTaxTransactions()
    {
        List                                failureLogs;
        List                                taskList;
        ListEnumerator                      taskListEnumerator;
        TaxReportSetOffHrchyChangeTask_IN   changeTask;

        failureLogs = new List(Types::String);
        taskList = this.buildTaskList();

        taskListEnumerator = taskList.getEnumerator();
        while (taskListEnumerator.moveNext())
        {
            changeTask = taskListEnumerator.current();
            failureLogs.appendList(
                changeTask.changeSetOffHierarchy());

            if (failureLogs.elements() > #MaxInvalidTaxTransAllowed)
            {
                break;
            }
        }

        return failureLogs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxReportSetOffHrchyManager_IN construct()
    {
        return new TaxReportSetOffHrchyManager_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportSetOffHierarchySetup</Name>
				<Source><![CDATA[
    public TaxReportSetOffHierarchySetup_IN parmTaxReportSetOffHierarchySetup(TaxReportSetOffHierarchySetup_IN _taxReportSetOffHierarchySetup = taxReportSetOffHierarchySetup)
    {
        taxReportSetOffHierarchySetup = _taxReportSetOffHierarchySetup;
        return taxReportSetOffHierarchySetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>