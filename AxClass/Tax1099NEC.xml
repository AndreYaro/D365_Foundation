<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099NEC</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class Tax1099NEC extends Tax1099Base implements Tax1099IForm
{
    const str ReturnType = 'NE';
    private Tax1099FieldsTmp tax1099FieldsTmp = Tax1099FieldsUpdate2021::construct().createUpdatedTax1099FieldsTmp();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount1), sum(Amount4)
            from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099NEC;

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // Nonemployee compensation
        }

        if (_localIRSPayerRec.Amount4 > 0)
        {
            tmpAmountCodes += Four; // Federal income tax withheld
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099NEC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        // Second TIN Notice. Field Position: 544
        this.strInsert(_localIRSPayerRec.SecondTIN, 544);

        // Blank. Field Position: 545-546

        // Direct Sales Indicator. Field Position: 547
        this.strInsert(_localIRSPayerRec.DirectSalesInd, 547);

        // Blank. Field Position: 548-750

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        Tax1099StateSummary tax1099StateSummary;
        VendStateTaxID vendStateTaxID;
        Counter stateCounter;
        CompanyInfo companyInfo = CompanyInfo::find();

        ttsbegin;
        // Loop through our temporary table and fill in the Tax1099StateSummary data
        tax1099StateSummary.setTmp();
        select forupdate tax1099StateSummary;

        if (_onlyStateToPrint == '')
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where vendStateTaxID.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                this.checkAndInsertTax1099StateSummary(tax1099StateSummary, vendStateTaxID, _fromDate, _toDate);
            }
        }
        else
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where _tax1099IRSPayerRec.VendAccount == vendStateTaxID.VendAccount &&
                    vendStateTaxID.StateId == _onlyStateToPrint
            {
                this.checkAndInsertTax1099StateSummary(tax1099StateSummary, vendStateTaxID, _fromDate, _toDate);
            }
        }
        ttscommit;


        while select _tax1099IRSPayerRec
        {
            stateCounter = 0;

            this.initTax1099IRSPayerRec(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec, companyInfo, _payersRTN);

            // iterate over states
            while select tax1099StateSummary
                where tax1099StateSummary.VendAccount == _tax1099IRSPayerRec.AcctNumForPayee
            {
                if (stateCounter mod 2 == 0)
                {
                    if (stateCounter == 0 && _onlyStateToPrint == '')
                    {
                        this.showFederal(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec);
                    }

                    this.setStateTaxFirstLine(_tax1099IRSPayerRecTmp, tax1099StateSummary);
                    _tax1099IRSPayerRecTmp.stateTaxId1 = _tax1099IRSPayerRecTmp.stateTaxId1 + ' ' + VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                }
                else
                {
                    this.setStateTaxSecondLine(_tax1099IRSPayerRecTmp, tax1099StateSummary);
                    _tax1099IRSPayerRecTmp.stateTaxId2 = _tax1099IRSPayerRecTmp.stateTaxId2 + ' ' + VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
                    
                    this.initTax1099IRSPayerRec(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec, companyInfo, _payersRTN);
                }

                stateCounter ++;
            }

            // No state information means we just do federal
            if (stateCounter == 0 && _onlyStateToPrint == '')
            {
                this.showFederal(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec);
                this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
            }
            // Had state records, ended on an even, do the final insert
            else if (stateCounter mod 2 == 1)
            {
                this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertTax1099StateSummary</Name>
				<Source><![CDATA[
    private void checkAndInsertTax1099StateSummary(Tax1099StateSummary _tax1099StateSummary, VendStateTaxID _vendStateTaxID, TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 vendSettlementTax1099;

        _tax1099StateSummary.clear();
        _tax1099StateSummary.StateIncome = vendSettlementTax1099.get1099NECStateIncome(_vendStateTaxID.VendAccount, _vendStateTaxID.StateId, _fromDate, _toDate);
        _tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099NECStateIncomeTax(_vendStateTaxID.VendAccount, _vendStateTaxID.StateId, _fromDate, _toDate);

        if (_tax1099StateSummary.StateIncome > 0 || _tax1099StateSummary.StateIncomeTax > 0)
        {
            _tax1099StateSummary.VendAccount = _vendStateTaxID.VendAccount;
            _tax1099StateSummary.StateId = _vendStateTaxID.StateId;
            _tax1099StateSummary.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTax1099IRSPayerRec</Name>
				<Source><![CDATA[
    private void insertTax1099IRSPayerRec(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp)
    {
        // Suppress records that have no amounts to report.
        if ((_tax1099IRSPayerRecTmp.Amount1 + _tax1099IRSPayerRecTmp.Amount4 >= 0)
            || _tax1099IRSPayerRecTmp.StateTaxWithheld1 > 0
            || _tax1099IRSPayerRecTmp.StateTaxWithheld2 > 0
            || _tax1099IRSPayerRecTmp.DirectSales)
        {
            _tax1099IRSPayerRecTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        select firstonly tax1099FieldsTmp 
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099NEC
                && tax1099FieldsTmp.Tax1099Box == Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != '';

        if (tax1099FieldsTmp)
        {
            if (tax1099FieldsTmp.Tax1099Box != Tax1099NECConstants::N2)
            {
                _tax1099IRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _localTax1099Summary.SettleTax1099Amount;
            }
            else
            {
                if (_localTax1099Summary.SettleTax1099Amount >= Tax1099NECConstants::N2MinimumAmount)
                {
                    _tax1099IRSPayerRec.DirectSales = 'X';
                }
            }
        }
        else
        {
            _localTax1099Summary.IRSReportable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _recordInsertList, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        while select tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099NEC
                && tax1099FieldsTmp.Tax1099Box != ''
        {
            fieldsModified += this.verifyRecord(_tax1099FieldsIM, _recordInsertList, tax1099FieldsTmp.Tax1099Box, tax1099FieldsTmp.description, tax1099FieldsTmp.Tax1099Amount, tax1099FieldsTmp.Tax1099Type, _forceUpdate);
        }

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        while select tax1099FieldsTmp
             where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099NEC
                && tax1099FieldsTmp.Tax1099Box == _tax1099Fields.Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != ''
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != 'DirectSales'
        {
            _localIRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _tax1099Summary.SettleTax1099Amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonemployeeCompensation</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier nonemployeeCompensation()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:NonemployeeCompensation", Tax1099Type::F1099NEC).Tax1099Box, Tax1099Type::F1099NEC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:FederalIncomeTaxWithheld", Tax1099Type::F1099NEC).Tax1099Box, Tax1099Type::F1099NEC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier stateTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:StateTaxWithheld", Tax1099Type::F1099NEC).Tax1099Box, Tax1099Type::F1099NEC);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>