<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerClosingPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerClosingPost extends RunBaseBatch implements BatchRetryable
{
    LedgerClosingSheet                  ledgerClosingSheet;
    DialogGroup                         dialogGroup;
    TransDate                           postDate;
    AcknowledgementDate                 acknowledgementDate;
    ClosingSheet                        sheet;
    Voucher                             voucher;
    FiscalPeriodType                    periodType;
    CurrentOperationsTax                currentOperationsTax;
    FiscalCalendarPeriodRecId           fiscalCalendarPeriodRecId;
    FiscalCalendarRecId                 fiscalCalendarRecId;

    private const Version CurrentVersion = 2;

    #LOCALMACRO.CurrentList
        postDate,
        sheet,
        fiscalCalendarPeriodRecId,
        acknowledgementDate,
        voucher,
        periodType,
        currentOperationsTax
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcknowledgementDate</Name>
				<Source><![CDATA[
    AcknowledgementDate parmAcknowledgementDate(AcknowledgementDate _acknowledgementDate = acknowledgementDate)
    {
        acknowledgementDate = _acknowledgementDate;

        return acknowledgementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingSheet</Name>
				<Source><![CDATA[
    ClosingSheet parmClosingSheet(ClosingSheet _closingSheet = sheet)
    {
        sheet = _closingSheet;

        return sheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOperationsTax</Name>
				<Source><![CDATA[
    CurrentOperationsTax parmCurrentOperationsTax(CurrentOperationsTax _currentOperationsTax = currentOperationsTax)
    {
        currentOperationsTax = _currentOperationsTax;

        return currentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarPeriodRecId</Name>
				<Source><![CDATA[
    RecId parmFiscalCalendarPeriodRecId(RecId _fiscalCalendarPeriodRecId = fiscalCalendarPeriodRecId)
    {
        fiscalCalendarPeriodRecId = _fiscalCalendarPeriodRecId;

        return fiscalCalendarPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCode</Name>
				<Source><![CDATA[
    FiscalPeriodType parmPeriodCode(FiscalPeriodType _periodType = periodType)
    {
        periodType = _periodType;

        return periodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostDate</Name>
				<Source><![CDATA[
    TransDate parmPostDate(TransDate _postDate = postDate)
    {
        postDate = _postDate;
        return postDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that performs the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        #IsoCountryRegionCodes

        NumberSeq           numberSeq;
        LedgerClosingTrans  ledgerClosingTrans;
        CurrencyCode        currencyCode;
        LedgerPostingController postingController;
        LedgerVoucher postingJournal;
        LedgerVoucherObject postingReference;
        LedgerVoucherTransObject postingTrans;

        // <GEERU>
        LedgerBondClient_RU ledgerBondClient;
        Map                 offsetRecId2VRefIdMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Integer);
        // </GEERU>
        CurrencyExchangeHelper      exchangeRateHelper;
        DimensionBalancingValidator dimensionBalancingValidator;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            dimensionBalancingValidator = dimensionBalancingValidator::construct();
        }

        try
        {
            ttsbegin;

            select forupdate Voucher from ledgerClosingSheet
                where ledgerClosingSheet.Sheet    == sheet &&
                      ledgerClosingSheet.PostDate == postDate;

            numberSeq = NumberSeq::newGetVoucher(LedgerParameters::numRefClosingSheet(),false);
            voucher = numberSeq.voucher();

            if (!voucher)
            {
                throw error("@SYS26396");
            }

            currencyCode = CompanyInfoHelper::standardCurrency();

            postingJournal = LedgerVoucher::newLedgerPost(
                DetailSummary::Detail,
                SysModule::Ledger,
                numberSeq.parmVoucherSequenceCode());

            postingJournal.parmCheckBlockedDimensions(false);

            postingController = LedgerPostingController::newForLedgerPostingJournal(postingJournal);

            postingReference = LedgerVoucherObject::newVoucher(
                voucher,
                postDate,
                SysModule::Ledger,
                LedgerTransType::Transfer,
                NoYes::No,
                currentOperationsTax);

            postingReference.parmAcknowledgementDate(acknowledgementDate);
            postingReference.parmFiscalCalendarPeriod(fiscalCalendarPeriodRecId);

            postingController.addReference(postingReference);
            // <GEERU>
            ledgerBondClient = postingReference.ledgerBondClient_RU();
            // </GEERU>

            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                postingReference.parmAccountingDate());

            while select LedgerDimension, Amount, Txt, OffsetAccountRecId from ledgerClosingTrans
                where ledgerClosingTrans.Sheet == sheet
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    dimensionBalancingValidator.calculateDimensionBalance(ledgerClosingTrans.LedgerDimension, ledgerClosingTrans.Amount);
                }

                postingTrans = LedgerVoucherTransObject::newTransactionAmountDefault(
                    postingReference,
                    LedgerPostingType::Closing,
                    ledgerClosingTrans.LedgerDimension,
                    currencyCode,
                    ledgerClosingTrans.Amount,
                    exchangeRateHelper);

                postingTrans.parmTransTxt(ledgerClosingTrans.Txt);

                postingController.addTrans(postingTrans);

                // <GEERU>
                if (ledgerBondClient)
                {
                    offsetRecId2VRefIdMap.insert(ledgerClosingTrans.OffsetAccountRecId,
                                                 ledgerBondClient.lastVrefId());
                    // If this one corresponds to a previously posted
                    if (offsetRecId2VRefIdMap.exists(ledgerClosingTrans.RecId))
                    {
                        ledgerBondClient.bondVRef2VRef(offsetRecId2VRefIdMap.lookup(ledgerClosingTrans.RecId),
                                                       ledgerBondClient.lastVrefId());
                    }
                }
                // </GEERU>
            }
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if (!dimensionBalancingValidator.checkDimensionBalance())
                {
                    throw Exception::Error;
                }
            }

            postingController.post();

            ledgerClosingSheet.Voucher = voucher;
            ledgerClosingSheet.update();
     
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR, #isoMX]) && periodType == FiscalPeriodType::Closing)
            {
                GeneralJournalEntry gje;
                GeneralJournalAccountEntry_W gjaeW;

                update_recordset gjaeW
                    setting IsAccountingClosing_BR = NoYes::Yes
                join gje
                    where gje.RecId                      == gjaeW.GeneralJournalEntry
                       && gje.SubledgerVoucher           == ledgerClosingSheet.Voucher
                       && gje.SubledgerVoucherDataAreaId == curExt()
                       && gje.AccountingDate             == ledgerClosingSheet.PostDate
                       && gje.Ledger                     == Ledger::current();
            }

            TransactionLog::create(TransactionLogType::LedgerClosing, strfmt("@SYS25761", date2StrUsr(ledgerClosingSheet.PostDate, DateFlags::FormatAll), ledgerClosingSheet.Voucher));

            info("@SYS10273");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            case 1:
                [version, sheet, postDate] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private void updateFiscalCalendarPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;

        Debug::assert(fiscalCalendarPeriodRecId == 0);

        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
            fiscalCalendarRecId,
            postDate,
            periodType);

        if (fiscalCalendarPeriod != null)
        {
            fiscalCalendarPeriodRecId = fiscalCalendarPeriod.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        LedgerClosingSheet                      ledgerClosingSheetLocal;
        LedgerClosingTrans                      ledgerClosingTransLocal;
        TransDate                               periodStart;
        TransDate                               tmpDate;

        if (!postDate)
        {
            return checkFailed("@SYS16668");
        }

        if (voucher)
        {
            return checkFailed("@SYS10273");
        }

        if (! sheet)
        {
            return checkFailed("@SYS18626");
        }

        if (periodType == FiscalPeriodType::Opening)
        {
            return checkFailed("@SYS21644");
        }

        if (periodType == FiscalPeriodType::Closing)
        {
            if (!LedgerFiscalCalendar::existDateInClosingPeriod(fiscalCalendarPeriodRecId, postDate))
            {
                return checkFailed(strfmt("@SYS28945", date2StrUsr(postDate, DateFlags::FormatAll)));
            }
        }

        if (fiscalCalendarPeriodRecId == 0)
        {
            return checkFailed(strfmt("@SYS17614", periodType));
        }

        select firstonly RecId from ledgerClosingSheetLocal
            where ledgerClosingSheetLocal.Sheet    == sheet &&
                  ledgerClosingSheetLocal.PostDate == postDate;

        if (! ledgerClosingSheetLocal)
        {
            return checkFailed("@SYS18626");
        }

        if (ledgerClosingSheetLocal.Voucher)
        {
            return checkFailed("@SYS10273");
        }

        periodStart     = LedgerFiscalCalendar::findOpeningStartDateByDate(fiscalCalendarRecId, ledgerClosingSheetLocal.FromDate);
        tmpDate         = LedgerFiscalCalendar::findOpeningStartDateByDate(fiscalCalendarRecId, ledgerClosingSheetLocal.ToDate);

        if (periodStart != tmpDate)
        {
            return checkFailed(strfmt("@SYS28745",year(periodStart),year(tmpDate)));
        }

        select firstonly RecId from ledgerClosingTransLocal
            where ledgerClosingTransLocal.Sheet == sheet;

        if (!ledgerClosingTransLocal)
        {
            return checkFailed("@SYS28652");
        }

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            select firstonly RecId from ledgerClosingSheetLocal
                where ledgerClosingSheetLocal.Sheet == sheet &&
                      ledgerClosingSheetLocal.AcknowledgementDate <  ledgerClosingSheetLocal.PostDate;
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00010, funcName());
            if (ledgerClosingSheetLocal)
            {
                // Posting date may not exceed competence date.
                return checkFailed("@SYS99223");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4586";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerClosingPost   ledgerClosingPost;
        switch (args.dataset())
        {
            case tablenum(LedgerClosingSheet):
                ledgerClosingPost   = LedgerClosingPost::newLedgerClosingSheet(args.record());
                break;
            case tablenum(LedgerClosingTable):
                ledgerClosingPost   = LedgerClosingPost::newLedgerClosingTable(args.record());
                break;
            default:
                throw error("@SYS18626");
        }

        if (ledgerClosingPost.validate())
        {
            ledgerClosingPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerClosingSheet</Name>
				<Source><![CDATA[
    static LedgerClosingPost newLedgerClosingSheet(LedgerClosingSheet _ledgerClosingSheet)
    {
        LedgerClosingPost ledgerClosingPost;

        ledgerClosingPost = new LedgerClosingPost();
        ledgerClosingPost.getLast();
        ledgerClosingPost.parmClosingSheet(_ledgerClosingSheet.Sheet);
        ledgerClosingPost.parmPostDate(_ledgerClosingSheet.PostDate);
        ledgerClosingPost.parmAcknowledgementDate(_ledgerClosingSheet.AcknowledgementDate);
        ledgerClosingPost.parmVoucher(_ledgerClosingSheet.Voucher);
        ledgerClosingPost.parmPeriodCode(_ledgerClosingSheet.PeriodCode);
        ledgerClosingPost.parmCurrentOperationsTax(_ledgerClosingSheet.CurrentOperationsTax);

        if (_ledgerClosingSheet.FiscalCalendarPeriod == 0)
        {
            ledgerClosingPost.updateFiscalCalendarPeriod();
        }
        else
        {
            ledgerClosingPost.parmFiscalCalendarPeriodRecId(_ledgerClosingSheet.FiscalCalendarPeriod);
        }

        return ledgerClosingPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerClosingTable</Name>
				<Source><![CDATA[
    static LedgerClosingPost newLedgerClosingTable(LedgerClosingTable _ledgerClosingTable)
    {
        LedgerClosingSheet  ledgerClosingSheet;
        LedgerClosingPost   ledgerClosingPost;

        ledgerClosingSheet = LedgerClosingSheet::find(_ledgerClosingTable.Sheet);

        ledgerClosingPost = LedgerClosingPost::newLedgerClosingSheet(ledgerClosingSheet);

        return ledgerClosingPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Ledger closing post can run in a new batch session.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>