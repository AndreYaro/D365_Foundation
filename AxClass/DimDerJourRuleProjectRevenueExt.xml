<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleProjectRevenueExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerJourRuleProjectRevenuExt</c>class recognizes project revenue.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleProjectRevenueExtendedPrice))]
class DimDerJourRuleProjectRevenueExt extends DimensionDerivationRuleExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCategoryIdFromSourceDocLine</Name>
				<Source><![CDATA[
    private ProjCategoryId getCategoryIdFromSourceDocLine(SourceDocumentLineRecId _sourceDocumentLine)

    {
        TSTimesheetTrans                        tsTrans;
        TSTimesheetLineWeek                     tsLineWeek;
        TSTimesheetLine                         tsLine;
        CustInvoiceLine                         custInvoiceLine;
        CustInvoiceLineInterProj                interProjLine;
        TrvExpTrans                             trvExpTrans;
        ProjCategoryId                          projCategoryId;
        ProjectRevenueLine                      projectRevenueLine;
        ProjectRevenueHeader                    projectRevenueHeader;
        Common                                  sourceDocumentLineImplementation;
        AccountingDistribution                  referenceAccountingDistribution;
        Currency                                tsCurrency;
        ProjIntercompanyParameters              intercompanyParams;
        CustInvoiceTable                        custInvoiceTable;

        sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();
        if (sourceDocumentLineImplementation.TableId != tableNum(ProjectRevenueLine))
        {
            throw error("@SYS6144");
        }

        projectRevenueLine = sourceDocumentLineImplementation;
        projectRevenueHeader = projectRevenueLine.getProjectRevenueHeader();

        select firstOnly RecId from referenceAccountingDistribution
            where referenceAccountingDistribution.SourceDocumentHeader == projectRevenueHeader.ReferenceSourceDocumentHeader
            join RecId from tsTrans
            where tsTrans.RecId == projectRevenueLine.RefRecId
            join RecId from tsLineWeek
            where tsLineWeek.RecId == tsTrans.TSTimesheetLineWeek
            join tsLine
            where tsLine.RecId == tsLineWeek.TSTimesheetLine &&
                  tsLine.ProjectDataAreaId != tsLine.dataAreaId
            join RecId from tsCurrency
            where tsCurrency.CurrencyCode ==  tsLine.CurrencyCode &&
                  tsCurrency.RecId == projectRevenueLine.Currency
            exists join intercompanyParams
            where intercompanyParams.BorrowingLegalEntity == tsLine.ProjectDataAreaId &&
                  intercompanyParams.WIPRevenue == true;

        if (tsLine)
        {
            projCategoryId = tsLine.CategoryId;
        }
        else
        {
            AccountingDistribution accountingDistribution = dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution();

            if (accountingDistribution)
            {
                select firstonly ProjCategoryId from interProjLine
                    exists join custInvoiceLine
                        where custInvoiceLine.RecId == interProjLine.CustInvoiceLine
                    exists join custInvoiceTable
                        where custInvoiceTable.RecId == custInvoiceLine.ParentRecId
                            && custInvoiceTable.SourceDocumentHeader == projectRevenueHeader.ReferenceSourceDocumentHeader
                    exists join referenceAccountingDistribution
                        where referenceAccountingDistribution.SourceDocumentLine == interProjLine.OrigTransSourceDocumentLine
                            && referenceAccountingDistribution.RecId == accountingDistribution.ReferenceDistribution
                    exists join intercompanyParams
                        where intercompanyParams.BorrowingLegalEntity == interProjLine.ProjDataArea
                            && intercompanyParams.WIPRevenue == NoYes::Yes;
            }

            if (interProjLine)
            {
                projCategoryId = interProjLine.ProjCategoryId;
            }
            else
            {
                select firstonly RecId from referenceAccountingDistribution
                    where referenceAccountingDistribution.SourceDocumentHeader == projectRevenueHeader.ReferenceSourceDocumentHeader
                    join RecId from trvExpTrans
                    where trvExpTrans.SourceDocumentLine == referenceAccountingDistribution.SourceDocumentLine &&
                            trvExpTrans.InterCompanyLE     != trvExpTrans.ReferenceDataAreaId &&
                            trvExpTrans.ExchangeCode       == referenceAccountingDistribution.TransactionCurrency &&
                            trvExpTrans.ProjId             != ''
                    exists join intercompanyParams
                    where intercompanyParams.BorrowingLegalEntity == trvExpTrans.InterCompanyLE &&
                            intercompanyParams.WIPRevenue           == true;

                projCategoryId = trvExpTrans.InterCompanyCategory;
            }
        }
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates an allocation list that is based on project setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit                     side;
        boolean                         oppositeAccount;
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjTable                       projTable;
        ProjCategory                    projCategory;
        ProjFundingSource               projFundingSource;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;
        SourceDocumentLineItem          sourceDocumentLineItem;
        DimensionDefault                dimensionDefault;
        AccountingDistribution          refAccountingDistribution = dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution();

        side = dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = true;

        projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(refAccountingDistribution.RecId);

        if (!projectAccountingDistribution)
        {
            // Transaction related to a project in another legal entity
            this.populateListIntercompany(_ledgerDimensionAllocationList);
            return;
        }

        changecompany (CompanyInfo::findRecId(refAccountingDistribution.AccountingLegalEntity).DataArea)
        {
            projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
            projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);
            projFundingSource = ProjFundingSource::find(projectAccountingDistribution.ProjFundingSource);

            ProjTaxGroup taxGroup;
            if (refAccountingDistribution.ReferenceDistribution)
            {
                AccountingDistribution parentAccountDistribution = accountingdistribution::find(refAccountingDistribution.referenceDistribution);
                sourceDocumentLineItem parentSourceDocumentlineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(parentAccountDistribution.SourceDocumentLine));

                taxGroup = ProjectSourceDocumentLineItemHelper::getSalesTaxGroup(parentSourceDocumentlineItem);
            }

            using (ProjTaxGroupParameters projTaxGroupParameters = ProjTaxGroupParameters::parmProjTaxGroup(taxGroup))
            {
                ledgerDimensionDefaultAccount = ProjectPosting::accruedRevenueOffsetLedgerDimension(
                                                    projTable,
                                                    projCategory,
                                                    projFundingSource);
            }
        }

        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(refAccountingDistribution.SourceDocumentLine));

        dimensionDefault = sourceDocumentLineItem ? sourceDocumentLineItem.parmDefaultDimension() : refAccountingDistribution.LedgerDimension;

        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, dimensionDefault);

        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                 1,
                                                                                 side,
                                                                                 oppositeAccount);

        _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateListIntercompany</Name>
				<Source><![CDATA[
    private void populateListIntercompany(LedgerDimensionAllocationList _ledgerDimensionAllocationList)

    {
        DebitCredit                     side;
        AccountingDistribution          refAccountingDistribution;
        ProjCategoryId                  projCategoryId;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;

        refAccountingDistribution = dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution();

        ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::SalesOffsetAccount,
                                                                        '',
                                                                        projCategoryId,
                                                                        0);

        side = dimensionDerivationRule.parmAccountingRule().parmSide();

        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
            ledgerDimensionDefaultAccount,
            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(refAccountingDistribution.LedgerDimension));

        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                 refAccountingDistribution.AllocationFactor,
                                                                                 side,
                                                                                 true);
        _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>