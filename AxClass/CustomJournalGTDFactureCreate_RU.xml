<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDFactureCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDFactureCreate_RU extends RunBase
{
    CustomJournalTable_RU   customJournalTable;
    CurrencyCode            customCurrencyCode;
    Voucher                 voucher;
    FactureId_RU            factureId;
    FactureDate_RU          factureDate;
    FactureReportDate_RU    factureReportDate;

    DialogField             dlgFactureDate;
    DialogField             dlgFactureReportDate;

    private const int CurrentVersion = 1;
    private const int retryNum = 5;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean check()
    {
        if ((select factureJour_RU where factureJour_RU.FactureExternalId == this.factureExternalId() && factureJour_RU.Module == FactureModule_RU::Vend).RecId != 0)
        {
            return checkFailed(strfmt("@GLS115299", this.factureExternalId()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createTrans(FactureJourCreateCustom_RU _jourCreate)
    {
        CustomJournalTrans_RU customJournalTrans;

        while select recId from customJournalTrans
            where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
        {
            _jourCreate.appendTrans([tablenum(CustomJournalTrans_RU), customJournalTrans.RecId, 0, FactureLineType_RU::GTDLine], 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomDocument_RU customDocument()
    {
        return CustomDocument_RU::GTD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        dialog = super();

        dialog.caption("@GLS115095");

        dialog.addText(strfmt("@GLS115240", customJournalTable.InventGTDId));

        dlgFactureDate       = dialog.addFieldValue(extendedTypeStr(FactureDate_RU), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        dlgFactureReportDate = dialog.addFieldValue(extendedTypeStr(FactureReportDate_RU), this.factureDate_External());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureDate_External</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FactureDate_External_RU factureDate_External()
    {
        return customJournalTable.gtdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureExternalId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FactureExternalId_RU factureExternalId()
    {
        return customJournalTable.InventGTDId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FactureId_RU factureId()
    {
        return factureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FactureType_RU factureType()
    {
        return FactureType_RU::GTD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        factureDate         = dlgFactureDate.value();
        factureReportDate   = dlgFactureReportDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        customCurrencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion,         
            customJournalTable,
            voucher,
            factureDate,
            factureReportDate
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FactureDate_RU parmFactureDate(FactureDate_RU _factureDate = factureDate)
    {
        factureDate = _factureDate;
        return factureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureReportDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FactureReportDate_RU parmFactureReportDate(FactureReportDate_RU _factureReportDate = factureReportDate)
    {
        factureReportDate = _factureReportDate;
        return factureReportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    common parmJournalTable(Common _journalTable = customJournalTable)
    {
        customJournalTable = _journalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void parmLedgerVoucher(Voucher _voucher)
    {
        voucher = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FactureJourCreateCustom_RU  jourCreate;
        OfficialsServ_RU            offSrv;
        VendAccount                 vendAccount;

        if (! this.check())
            throw error("@GLS110686");

        try
        {
            jourCreate = FactureJourCreateCustom_RU::construct(this.customDocument(), this.parmJournalTable());

            ttsbegin;
            vendAccount = customJournalTable.PartnerCode;
            offSrv = new OfficialsServ_RU();
            offSrv.initTableFacture(FactureModule_RU::Vend, vendAccount, true);
            jourCreate.initParameters(NoYes::Yes,
                                  NoYes::No,
                                  Printout::After,
                                  NoYes::Yes,
                                  this.factureExternalId(),
                                  factureDate,
                                  vendAccount,
                                  customCurrencyCode,
                                  this.factureType(),
                                  '',
                                  '',
                                  offSrv.newId(),
                                  '',
                                  '',
                                  dateNull(),
                                  0,
                                  this.factureDate_External(),
                                  '',
                                  '',
                                  dateNull(),
                                  dateNull(),
                                  FactureCorrectionType_RU::Unknown,
                                  null,
                                  factureReportDate);
            jourCreate.parmLedgerVoucher(voucher);
            this.createTrans(jourCreate);
            jourCreate.runOperation();
            factureId = jourCreate.factureId();
            this.updateJournal();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion :
                [version,         
                    customJournalTable,
                    voucher,
                    factureDate,
                    factureReportDate
                ] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updateJournal()
    {
        if (this.parmJournalTable())
        {
            customJournalTable.selectForUpdate(true);
            customJournalTable.reread();
            customJournalTable.FactureId = factureId;
            customJournalTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomJournalGTDFactureCreate_RU construct(CustomDocument_RU _customDocument)
    {
        switch (_customDocument)
        {
            case CustomDocument_RU::GTD         :
                return new CustomJournalGTDFactureCreate_RU();
            case CustomDocument_RU::Correction  :
                return new CustomJournalCorrectionFactureCreate_RU();
            default :
                return new CustomJournalGTDFactureCreate_RU();
        }

        throw error(strfmt("@SYS19306",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115347";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalGTDFactureCreate_RU    customJournalGTDFactureCreate;
        CustomDocument_RU                   customDocument;

        if (! _args || (_args.dataset() != tablenum(CustomJournalTable_RU) && _args.dataset() != tablenum(CustomCorrectionTable_RU)))
        {
            throw error(strfmt("@SYS25516", CustomJournalGTDFactureCreate_RU::description()));
        }
        if (_args.parmEnumType() != enumnum(CustomDocument_RU))
        {
            throw error(strfmt("@SYS22828", CustomJournalGTDFactureCreate_RU::description()));
        }
        customDocument = _args.parmEnum();
        if (! _args.record())
        {
            throw error("@SYS82774");
        }

        customJournalGTDFactureCreate = CustomJournalGTDFactureCreate_RU::construct(customDocument);
        customJournalGTDFactureCreate.parmJournalTable(_args.record());
        customJournalGTDFactureCreate.saveLast();

        if (customJournalGTDFactureCreate.prompt())
        {
            customJournalGTDFactureCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>