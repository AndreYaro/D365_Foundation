<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCostOutsourcingVendInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCostOutsourcingVendInvoice</c> class encapsulates the logic for creating lean
///    outsourcing cost transactions that are based on vendor invoice lines.
/// </summary>
class LeanCostOutsourcingVendInvoice extends LeanCostOutsourcing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIndirectCostPhysicalPosting</Name>
				<Source><![CDATA[
    protected void addIndirectCostPhysicalPosting(
        LedgerVoucher _ledgerVoucher,
        ProdIndirectTrans _prodIndirectTrans)
    {
        CurrencyCode currencyCode = CompanyInfoHelper::standardCurrency();

        AmountMST indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorption,
                    _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                    currencyCode,
                    -indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                    _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                    currencyCode,
                    indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        _prodIndirectTrans.VoucherEstimation = _ledgerVoucher.lastVoucher();
        _prodIndirectTrans.DateEstimation = _ledgerVoucher.lastTransDate();
        _prodIndirectTrans.Posted = NoYes::Yes;

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutsourcingCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates outsourcing cost transactions for a vendor invoice line.
    /// </summary>
    /// <param name="_systemSequence">
    ///    The system sequence that is used for getting a record ID for the transactions.
    /// </param>
    /// <param name="_newTransactionsList">
    ///    The transactions list for which to add the new transactions.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The invent site ID.
    /// </param>
    /// <remarks>
    ///    Records are not inserted to the database, but are added to the transaction list.Record only the
    ///    delta to the matching packing slip records.Create a new record for the full unmatched remaining
    ///    quantity.
    /// </remarks>
    public void createOutsourcingCost(
        systemSequence _systemSequence,
        RecordInsertList _newTransactionsList,
        InventSiteId _inventSiteId)
    {
        ProdRouteTrans newProdRouteTrans, reversalProdRouteTrans;

        VendInvoicePackingSlipQuantityMatch vipsqMatch;
        VendPackingSlipTrans vpsTrans;
        ProdRouteTransPackingSlipOrigin prtpsOrigin;
        ProdRouteTrans prtMatch;
        Qty newTransactionQty, reversingQty;

        if (quantity == 0)
            return;

        CostAmount transactionAmount = this.getCostAmount();
        CostPrice newQtyPrice = CurrencyExchangeHelper::price(transactionAmount / quantity);

        newTransactionQty = quantity;

        // Create separate new records for matching packing slip records
        // in case the cost price or accounting logic changed.
        while select * from vipsqMatch
            where vipsqMatch.InvoiceSourceDocumentLine == sourceDocumentLineRefRecId
        join RecId from vpsTrans
            where vpsTrans.SourceDocumentLine == vipsqMatch.PackingSlipSourceDocumentLine
        join RecId from prtpsOrigin
            where prtpsOrigin.VendPackingSlipTrans == vpsTrans.RecId
        join prtMatch
            where prtMatch.RecId == prtpsOrigin.ProdRouteTrans
                && prtMatch.QtyGood * sign(newTransactionQty) > 0
        {
            reversingQty = quantity < prtMatch.QtyGood ? quantity : prtMatch.QtyGood;
            Percent percentageOfIndirectCostToReverse = reversingQty / prtMatch.QtyGood;

            if (newQtyPrice != prtMatch.QtyPrice
                || this.isAccountingDifferent(prtMatch))
            {
                reversalProdRouteTrans = this.createDirectOutsourcingCostReversal(prtMatch, reversingQty, _systemSequence);
                this.createAndPostIndirectCostReversal(prtMatch, percentageOfIndirectCostToReverse);
            }
            else
            {
                newTransactionQty -= reversingQty;
            }
        }

        // Create a new transaction in case there were differences or no matching
        // transactions were found.
        if (newTransactionQty != 0)
        {
            newProdRouteTrans = this.createProdRouteTransOutsourcing(_systemSequence,
                    productionFlowReferenceRecId,
                    serviceItemId,
                    serviceInventDimId,
                    defaultDimension,
                    newTransactionQty,
                    newQtyPrice,
                    newTransactionQty * newQtyPrice);
            _newTransactionsList.add(newProdRouteTrans);
            this.createOutsourcingOriginRelation(newProdRouteTrans);
            this.addDirectOutsourcingConsumption(_inventSiteId, newProdRouteTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutsourcingOriginRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship record that corresponds to the outsourcing cost transaction.
    /// </summary>
    /// <param name="_outsourcingProdRouteTrans">
    ///    The outsourcing cost transaction
    /// </param>
    /// <returns>
    ///    The new relationship record
    /// </returns>
    public Common createOutsourcingOriginRelation(
        ProdRouteTrans _outsourcingProdRouteTrans)
    {
        ProdRouteTransVendInvoiceOrigin vendInvoiceRelationRecord;

        ttsbegin;
        vendInvoiceRelationRecord.ProdRouteTrans = _outsourcingProdRouteTrans.RecId;
        vendInvoiceRelationRecord.VendInvoiceInfoLine = originRefRecId;
        vendInvoiceRelationRecord.insert();
        ttscommit;

        return vendInvoiceRelationRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostAmount</Name>
				<Source><![CDATA[
    protected CostAmount getCostAmount()
    {
        CostAmount correctionAmmount = InventCostInputAmount::getInputAmountFromDistributionForAccount(
                    sourceDocumentLineRefRecId,
                    this.getReceiptAccount(),
                    AccountingDistributionReferenceRole::None);

        CostAmount matchingAmount = InventCostInputAmount::getInputAmountFromDistributionForAccount(
                    sourceDocumentLineRefRecId,
                    this.getReceiptAccount(),
                    AccountingDistributionReferenceRole::Matching);

        return correctionAmmount + matchingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecordCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the outsourcing cost is recorded.
    /// </summary>
    /// <returns>
    ///    true if the outsourcing cost is recorded; otherwise, false.
    /// </returns>
    public boolean mustRecordCost()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>