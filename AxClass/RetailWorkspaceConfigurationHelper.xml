<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailWorkspaceConfigurationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail workspace configuration helper class.
/// </summary>
class RetailWorkspaceConfigurationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultOrgHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default hierarchy type for the specified hierarcy purpose.
    /// </summary>
    /// <param name = "hierarchyPurpose">It will be one of the 4 retail Hierarchy purposes (RetailAssortment, RetailPOSPosting, RetailReplenishment, RetailReporting)</param>
    /// <returns>first matching record of OMHierarchyTpe with <c>RecId</c></returns>
    [SysObsolete("This method is deprecated.", false, 31\05\2017)]
    public static OMHierarchyType getDefaultOrgHierarchyType(HierarchyPurpose hierarchyPurpose)
    {
        OMHierarchyType omHierarchyType;
        OMHierarchyPurpose omHierarchyPurpose;

        select firstonly RecId from omHierarchyType
            join HierarchyType, HierarchyPurpose from omHierarchyPurpose
                where omHierarchyPurpose.HierarchyType == omHierarchyType.RecId
                    && omHierarchyPurpose.HierarchyPurpose == hierarchyPurpose;

        return omHierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultOMInternalOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Default Operating unit Id based on Organization Hierarchy...
    /// </summary>
    /// <param name = "omHierarchyType"> This will be first default selected by Organization Purpose's first record and pass on to get Org Id.</param>
    /// <returns>First mathing record of OMInternalOrganization with <c>RecId</c></returns>
    [SysObsolete("This method is deprecated.", false, 31\05\2017)]
    public static OMInternalOrganization getDefaultOMInternalOrganization(OMHierarchyType omHierarchyType)
    {
        OMInternalOrganization omInternalOrganization;
        OMExplodedOrganizationSecurityGraph omExplodedOrganizationSecurityGraph;

        select firstonly Name, RecId, OrganizationType from omInternalOrganization
            join AncestorOrganization, Organization, OMHierarchyType from omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == omInternalOrganization.RecId
                    && omExplodedOrganizationSecurityGraph.OMHierarchyType == omHierarchyType.RecId;

        return omInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultOMHierarchyRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Default <c>OMHierarchyRelationship</c> based on the specified organization hierarchy type.
    /// </summary>
    /// <param name = "omHierarchyType"> This will be first default selected by Organization Purpose's first record and pass on to get the organization ID.</param>
    /// <returns>First matching record of <c>OMHierarchyRelationship</c> with <c>RecId</c></returns>
    [SysObsolete("This method is deprecated.", false, 31\05\2017)]
    public static OMHierarchyRelationship getDefaultOMHierarchyRelationship(OMHierarchyType omHierarchyType)
    {
        OMInternalOrganization omInternalOrganization;
        OMHierarchyRelationship omHierarchyRelationship;
        OMExplodedOrganizationSecurityGraph omExplodedOrganizationSecurityGraph;

        select firstonly ChildOrganization, RecId from omHierarchyRelationship
            exists join Name, RecId, OrganizationType from omInternalOrganization
                where omInternalOrganization.RecId == omHierarchyRelationship.ChildOrganization
            exists join AncestorOrganization, Organization, OMHierarchyType from omExplodedOrganizationSecurityGraph
                where omExplodedOrganizationSecurityGraph.Organization == omInternalOrganization.RecId &&
                      omExplodedOrganizationSecurityGraph.OMHierarchyType == omHierarchyType.RecId;

        return omHierarchyRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Default Category Hierarchy
    /// </summary>
    /// <param name = "categoryHierarchyName">Category Hierarchy Name</param>
    /// <returns>First record of <c>EcoResCategoryHierarchy</c> matching categroyHierarchyName</returns>
    public static EcoResCategoryHierarchy getDefaultCategoryHierarchy(EcoResCategoryNamedHierarchyRole ecoResCategoryNamedHierarchyRole)
    {
        EcoResCategoryHierarchy ecoResCategoryHierarchy;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        select firstonly RecId, Name from ecoResCategoryHierarchy
            join CategoryHierarchy from ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategoryHierarchy.RecId
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == ecoResCategoryNamedHierarchyRole;

        // If there is no matching category hierarchy to category Hierarchy name then get first record by alphabetical order.
        if (!ecoResCategoryHierarchy)
        {
            select firstonly RecId, Name from ecoResCategoryHierarchy
                Order by Name asc;
        }

        return ecoResCategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Default Category
    /// </summary>
    /// <param name = "ecoResCategoryHierarchy">Category Hierarchy from default category hierarchy</param>
    /// <returns>First root record of <c>EcoResCategory</c> matching ecoResCategoryHierarchy</returns>
    [SysObsolete("This method is deprecated.", false, 31\05\2017)]
    public static EcoResCategory getDefaultCategory(EcoResCategoryHierarchy ecoResCategoryHierarchy)
    {
        EcoResCategory ecoResCategory;

        select firstonly RecId, Name from ecoResCategory
            where ecoResCategory.ParentCategory == 0
                && ecoResCategory.CategoryHierarchy == ecoResCategoryHierarchy.RecId;

        return ecoResCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationWithDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Retail Workspace Configuration for user with defaults the first time user comes to workspace.
    /// </summary>
    /// <param name = "workspaceType"> Form need to pass workspace tyep while calling this. </param>
    /// <returns>Return <c>RetailWorkspaceConfiguration</c> record with default filter values for workspace.</returns>
    [SysObsolete("This method is deprecated.", false, 31\05\2017)]
    public static RetailWorkspaceConfiguration getConfigurationWithDefaults(RetailWorkspaceConfigurationType workspaceType)
    {
        RetailWorkspaceConfiguration retailWorkspaceConfiguration;
        OMHierarchyType omHierarchyType;
        OMInternalOrganization omInternalOrganization;
        OMHierarchyRelationship omHierarchyRelationship;
        EcoResCategoryHierarchy ecoResCategoryHierarchy;
        EcoResCategory ecoResCategory;
        str defaultCategoryHierarchyName = "@REX1235";

        retailWorkspaceConfiguration.UserId = curUserId();
        retailWorkspaceConfiguration.WorkspaceType = workspaceType;
        return retailWorkspaceConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy purpose that will be used by the workspace level channel/organization filter.
    /// </summary>
    /// <param name = "_retailWorkspaceConfigurationType">The workspace configuration type.</param>
    public static HierarchyPurpose getHierarchyPurpose(RetailWorkspaceConfigurationType _retailWorkspaceConfigurationType)
    {
        HierarchyPurpose _hierarchyPurpose = HierarchyPurpose::NotSet;
        switch (_retailWorkspaceConfigurationType)
        {
            case RetailWorkspaceConfigurationType::PricingDiscountWorkspace:
            case RetailWorkspaceConfigurationType::CategoryProductManagementWorkspace:
            case RetailWorkspaceConfigurationType::ChannelDeploymentWorkspace:
            case RetailWorkspaceConfigurationType::CatalogManagementWorkspace:
                _hierarchyPurpose = HierarchyPurpose::RetailAssortment;
                break;
            case RetailWorkspaceConfigurationType::ChannelOperationsWorkspace:
                _hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;
                break;
            default:
                EventHandlerResult result = new EventHandlerResult();

                RetailWorkspaceConfigurationHelper::getHierarchyPurposeDelegate(_retailWorkspaceConfigurationType, result);

                if (result.hasResult())
                {
                    _hierarchyPurpose = result.result();
                }

                break;
        }

        return _hierarchyPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyPurposeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to get the hierarchy purpose that will be used by the workspace level organization hierarchy filter (aka channel filter).
    /// </summary>
    /// <param name = "_retailWorkspaceConfigurationType">The workspace configuration type.</param>
    /// <param name = "result">The subscribing method should use this object to return the hierarchy purpose that shud be used by the channel filter.</param>
    static delegate void getHierarchyPurposeDelegate(RetailWorkspaceConfigurationType _retailWorkspaceConfigurationType, EventHandlerResult result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>