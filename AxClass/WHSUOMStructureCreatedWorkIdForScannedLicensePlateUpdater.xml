<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMStructureCreatedWorkIdForScannedLicensePlateUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUOMStructureCreatedWorkIdForScannedLicensePlateUpdater</c> class is responsible for updating the unit of measure structure created work ID for the scanned license plate.
/// </summary>
internal class WHSUOMStructureCreatedWorkIdForScannedLicensePlateUpdater
{
    private WHSLicensePlateId licensePlateId;
    private WHSUserId userId;
    private WHSModule module;
    private InventLocationId currentWarehouseId;
    private WHSLoadId loadId;
    private WHSWorkBuildId workBuildId;
    private WHSWorkId workId;
    private boolean wasLPWorkCreationAttempted;
    private boolean mustAddRegistrationToHistory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSUOMStructureCreatedWorkIdForScannedLicensePlateUpdater construct()
    {
        var instance = new WHSUOMStructureCreatedWorkIdForScannedLicensePlateUpdater();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        licensePlateId = _licensePlateId;

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSModule parmModule(WHSModule _module = module)
    {
        module = _module;

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventLocationId parmCurrentWarehouseId(InventLocationId _currentWarehouseId = currentWarehouseId)
    {
        currentWarehouseId = _currentWarehouseId;

        return currentWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = workBuildId)
    {
        workBuildId = _workBuildId;

        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkId parmWorkId(WHSWorkId _workId = workId)
    {
        workId = _workId;

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWasLPWorkCreationAttempted</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmWasLPWorkCreationAttempted(boolean _wasLPWorkCreationAttempted = wasLPWorkCreationAttempted)
    {
        wasLPWorkCreationAttempted = _wasLPWorkCreationAttempted;

        return wasLPWorkCreationAttempted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustAddRegistrationToHistory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmMustAddRegistrationToHistory(boolean _mustAddRegistrationToHistory = mustAddRegistrationToHistory)
    {
        mustAddRegistrationToHistory = _mustAddRegistrationToHistory;

        return mustAddRegistrationToHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUOMStructureCreatedWorkIdForScannedLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateUOMStructureCreatedWorkIdForScannedLicensePlate()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
                            
        this.updateUOMStructuresForAllItemsForCurrentWarehouse();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUOMStructuresForAllItemsForCurrentWarehouse</Name>
				<Source><![CDATA[
    private void updateUOMStructuresForAllItemsForCurrentWarehouse()
    {
        RecordInsertList recInsertList;

        if (mustAddRegistrationToHistory)
        {
            recInsertList = new RecordInsertList(tableNum(WHSLicensePlateReceivingHistory));
        }

        WHSUOMStructure uomStructure;
        WHSUOMStructureReceipt uomStructureReceipt;

        while select uomStructure
            where uomStructure.LicensePlateId == licensePlateId
                && uomStructure.Module == module
            notexists join uomStructureReceipt
                where uomStructureReceipt.UOMStructure == uomStructure.RecId
        {
            this.updateUOMStructureForAllItemsForCurrentWarehouse(uomStructure, mustAddRegistrationToHistory, recInsertList);
        }

        if (mustAddRegistrationToHistory)
        {
            recInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUOMStructureForAllItemsForCurrentWarehouse</Name>
				<Source><![CDATA[
    private void updateUOMStructureForAllItemsForCurrentWarehouse(
        WHSUOMStructure     _uomStructure,
        boolean             _mustAddRegistrationToHistory,
        RecordInsertList    _registrationHistoryInsertList)
    {
        if (module != WHSModule::Purch
            || WHSUOMStructureReceiptHandler::isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(_uomStructure.plannedWarehouseId(), currentWarehouseId))
        {
            this.registerCreatedWorkId(_uomStructure);

            if (_mustAddRegistrationToHistory)
            {
                _registrationHistoryInsertList.add(WHSLicensePlateReceivingHistory::initFromUOMStructure(_uomStructure, userId, wasLPWorkCreationAttempted));
                
                WHSUOMStructure containersInStructure;
                WHSUOMStructureReceipt uomStructureReceipt;

                while select containersInStructure
                    where containersInStructure.LicensePlateParent == licensePlateId
                        && containersInStructure.Module == module
                        && containersInStructure.LoadId == loadId
                    notexists join uomStructureReceipt
                        where uomStructureReceipt.UOMStructure == containersInStructure.RecId
                {
                    _registrationHistoryInsertList.add(WHSLicensePlateReceivingHistory::initFromUOMStructure(containersInStructure, userId, wasLPWorkCreationAttempted));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCreatedWorkId</Name>
				<Source><![CDATA[
    private void registerCreatedWorkId(WHSUOMStructure _uomStructure)
    {
        WHSUOMStructureReceipt uomStructureReceiptInsert;
        uomStructureReceiptInsert.UOMStructure = _uomStructure.RecId;
        uomStructureReceiptInsert.CreatedWorkId = wasLPWorkCreationAttempted ? workId : workBuildId;
        uomStructureReceiptInsert.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerUOMStructureCreatedWorkIdUpdateSelection</Name>
				<Source><![CDATA[
    private WHSUOMStructure containerUOMStructureCreatedWorkIdUpdateSelection(
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module,
        WHSLoadId           _loadId)
    {
        WHSUOMStructure uomStructure;
        WHSUOMStructureReceipt uomStructureReceipt;

        select uomStructure
            where uomStructure.LicensePlateParent == _licensePlateId
                && uomStructure.Module == _module
                && uomStructure.LoadId == _loadId
            notexists join uomStructureReceipt
                where uomStructureReceipt.UOMStructure == uomStructure.RecId;

        return uomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUOMStructureCreatedWorkId</Name>
				<Source><![CDATA[
    private void updateUOMStructureCreatedWorkId(boolean _whsPurchaseOrderPackingStructuresToggle)
    {
        WHSUOMStructure uomStructure;

        WHSUOMStructureReceipt uomStructureReceipt;

        while select RecId from uomStructure
            where uomStructure.LicensePlateId == licensePlateId
                && uomStructure.Module == module
                && (!_whsPurchaseOrderPackingStructuresToggle || uomStructure.LoadId == loadId)
            notexists join uomStructureReceipt
                where uomStructureReceipt.UOMStructure == uomStructure.RecId
        {
            WHSUOMStructureReceipt uomStructureReceiptInsert;
            uomStructureReceiptInsert.UOMStructure = uomStructure.RecId;
            uomStructureReceiptInsert.CreatedWorkId = wasLPWorkCreationAttempted ? workId : workBuildId;
            uomStructureReceiptInsert.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>