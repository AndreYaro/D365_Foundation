<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RDeferralsSumCalc_TransCorr</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RDeferralsSumCalc_TransCorr extends RDeferralsSumCalc
{
    RTax25PeriodIterator rTax25PeriodIterator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    [Hookable]
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        this.initIterator();

        query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(RDeferralsTransReportingView));

        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        queryBuildDataSource.addSelectionField(fieldnum(RDeferralsTransReportingView, Amount), SelectionField::Sum);

        queryBuildDataSource.addSortField(fieldnum(RDeferralsTransReportingView, TransType));
        queryBuildDataSource.addSortField(fieldnum(RDeferralsTransReportingView, DeferralsBookId));
        queryBuildDataSource.addSortField(fieldnum(RDeferralsTransReportingView, ReportingDate));

        queryBuildDataSource.addRange(fieldnum(RDeferralsTransReportingView, DeferralsId)).value(rangeDeferralsId);
        queryBuildDataSource.addRange(fieldnum(RDeferralsTransReportingView, DeferralsBookId)).value(rangeDeferralsBookId);

        if (dateFrom)
        {
            rTax25PeriodIterator.applyExtendedRange(queryBuildDataSource);
        }
        else
        {
            rTax25PeriodIterator.applyExtendedRange(queryBuildDataSource, true);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        QueryRun                      queryRun;
        RDeferralsTransReportingView  rDeferralsTrans;

        if (calculated || ! rangeDeferralsId)
            return;

        queryRun = new QueryRun(this.buildQuery());

        while (queryRun.next())
        {
            rDeferralsTrans = queryRun.get(tablenum(RDeferralsTransReportingView));
            this.updateSum(rDeferralsTrans.Amount,
                           rDeferralsTrans.TransType);
        }

        super();

    }

]]></Source>
			</Method>
			<Method>
				<Name>initIterator</Name>
				<Source><![CDATA[
    private void initIterator()
    {
        if (!rTax25PeriodIterator)
        {
            if (dateFrom)
            {
                rTax25PeriodIterator = RTax25PeriodFactory::createIteratorDateRange(dateFrom, dateTo);
            }
            else
            {
                rTax25PeriodIterator = RTax25PeriodFactory::createIteratorDateRange(dateTo, dateTo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue()
    {
        super();

        rTax25PeriodIterator = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25PeriodIterator</Name>
				<Source><![CDATA[
    public RTax25PeriodIterator parmRTax25PeriodIterator(RTax25PeriodIterator _rTax25PeriodIterator = rTax25PeriodIterator)
    {
        rTax25PeriodIterator = _rTax25PeriodIterator;
        return rTax25PeriodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDeferralsPeriod</Name>
				<Source><![CDATA[
    public static RDeferralsSumCalc_TransCorr newDeferralsPeriod(
        Range                   _rangeDeferralsId,
        Range                   _rangeDeferralsBookId,
        RDeferralsTransDate     _dateTo   = dateNull(),
        RDeferralsTransDate     _dateFrom = dateNull(),
        RTax25PeriodIterator    _rTax25PeriodIterator = null)
    {
        RDeferralsSumCalc_TransCorr rDeferralsSumCalc_Trans = new RDeferralsSumCalc_TransCorr();

        rDeferralsSumCalc_Trans.parmRangeDeferralsId(_rangeDeferralsId);
        rDeferralsSumCalc_Trans.parmRangeDeferralsBookId(_rangeDeferralsBookId);
        rDeferralsSumCalc_Trans.parmDateFrom(_dateFrom);
        rDeferralsSumCalc_Trans.parmDateTo(_dateTo);
        rDeferralsSumCalc_Trans.parmRTax25PeriodIterator(_rTax25PeriodIterator);

        return rDeferralsSumCalc_Trans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>