<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQCaseTableListPageInteraction extends ListPageInteraction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query object for the interactive listpage.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object.
    /// </param>
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource    purchRFQTableDS, qbdsProjTable, qbdspurchRFQVendLinK;
        Common                  rec;
        ListPage                listPage;
        ProjInvoiceTable        projInvoiceTable;
        ProjWIPTable            projWIPTable;

        super(_query);

        // Initialize QueryBuildDataSource as table PurchRFQCaseTable.
        purchRFQTableDS =_query.dataSourceTable(tableNum(PurchRFQCaseTable));

        listPage = this.listPage();
        rec      = listPage.listPageArgs().externalRecord();

        _query.dataSourceTable(tableNum(PurchRFQVendLink)).enabled(false);

        //Projects.
        if (listPage.listPageArgs().menuItemName() == menuitemDisplayStr(PurchRFQCaseTableListPage_Proj))
        {
            switch (rec.TableId)
            {
                case tableNum(ProjInvoiceTable):
                    projInvoiceTable = rec;
                    qbdsProjTable = purchRFQTableDS.addDataSource(tableNum(ProjTable));
                    qbdsProjTable.relations(true);
                    qbdsProjTable.joinMode(JoinMode::ExistsJoin);
                    qbdsProjTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(queryValue(projInvoiceTable.ProjInvoiceProjId));
                    break;
                case tableNum(ProjWIPTable):
                    projWIPTable = rec;
                    qbdsProjTable = purchRFQTableDS.addDataSource(tableNum(ProjTable));
                    qbdsProjTable.relations(true);
                    qbdsProjTable.joinMode(JoinMode::ExistsJoin);
                    qbdsProjTable.addRange(fieldNum(ProjTable, wipProject)).value(queryValue(projWIPTable.ProjId));
                    break;
                default:
                    purchRFQTableDS.addRange(fieldNum(PurchRFQCaseTable, ProjId)).value(SysQuery::valueNotEmptyString());
                    break;
            }
        }

        if (listPage.listPageArgs().enumTypeParameter() == enumNum(PurchRFQStatus))
        {
            switch (listPage.listPageArgs().enumParameter())
            {
                case PurchRFQStatus::Sent:              // Sent
                    // Grid Field:
                    listPage.listPageFieldVisible(identifierStr(PurchRFQCaseTable_StatusLow),false);
                    listPage.caption("@SYS121446");
                    break;
                case PurchRFQStatus::Created:           // Open
                    // Grid Field:
                    listPage.listPageFieldVisible(identifierStr(PurchRFQCaseTable_StatusLow),false);
                    listPage.caption("@SYS121447");
                    break;
            }
        }

        // Need to select CurrencyCode field explicitly as form's (PurchRFQCaseTableListPage) datasource's OnlyFetchActive property is set to 'Yes'.
        // And fetching CurrencyCode field explicitly helps in get exchange rates while fetching totals for charges, salestax and discounts.
        _query.dataSourceTable(tableNum(PurchRFQCaseTable)).addSelectionField(fieldNum(PurchRFQCaseTable, CurrencyCode));
        _query.dataSourceTable(tableNum(PurchRFQCaseTable)).addSelectionField(fieldNum(PurchRFQCaseTable, IsSealed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSendActionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the send button is enabled for multiple <c>PurchRFQCaseTable</c> records in the
    /// selection.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the status high values are not greater than sent; otherwise, false.
    /// </returns>
    public boolean isSendActionEnabled(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQCaseTable       localPurchRFQCaseTable;
        boolean                 sendButtonIsEnabled = false;
        FormDataSource          purchRFQCaseTable_ds;
        PurchRFQCaseTableType   purchRFQCaseTableType;

        if (FormDataUtil::getFormDataSource(_purchRFQCaseTable))
        {
            purchRFQCaseTable_ds    = FormDataUtil::getFormDataSource(_purchRFQCaseTable);
            localPurchRFQCaseTable  =  purchRFQCaseTable_ds.getFirst(true) ? purchRFQCaseTable_ds.getFirst(true) : purchRFQCaseTable_ds.cursor();

            while (localPurchRFQCaseTable && !sendButtonIsEnabled)
            {
                purchRFQCaseTableType   = localPurchRFQCaseTable.type();
                sendButtonIsEnabled     = purchRFQCaseTableType.mayRFQBeSent();
                localPurchRFQCaseTable  = purchRFQCaseTable_ds.getNext();
            }
        }

        return sendButtonIsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the button attributes when the active record is changed.
    /// </summary>
    public void selectionChanged()
    {
        this.setButtonAccess();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables buttons depending on the displayed information.
    /// </summary>
    /// <remarks>
    /// The implementations are dictated by the task page behavior.
    /// </remarks>
    public void setButtonAccess()
    {
        ListPage            listPage = this.listPage();
        PurchRFQCaseTable   purchRFQCaseTable = listPage.activeRecord(queryDataSourceStr(PurchRfqCaseTableListPage,PurchRFQCaseTable));
        boolean             isfilteredBySent;
        boolean             isFilteredByOpen;
        boolean             gridIsNotEmpty = (purchRFQCaseTable.RecId);
        boolean             rfqIsNotExpired;
        boolean             isRFQAmendmentEnabled;
        boolean             isRFQPublished = PurchRFQPublishTable_PSN::isRFQCasePublised(purchRFQCaseTable.RecId);
    
        isRFQAmendmentEnabled = isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN)) || PurchRFQParameters::find().LockRFQOnSend;

        if  (listPage.listPageArgs().enumTypeParameter() == enumNum(PurchRFQStatus))
        {
            isfilteredBySent = (listPage.listPageArgs().enumParameter() == enum2int(PurchRFQStatus::Sent));
            isFilteredByOpen = (listPage.listPageArgs().enumParameter() == enum2int(PurchRFQStatus::Created));
        }

        rfqIsNotExpired = purchRFQCaseTable.ExpiryDateTime > DateTimeUtil::utcNow();

        //  1. PurchRFQCaseTableForNew New "Request for Quote" @SYS122395
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,RFQMenuItemButton),true);

        //  2. PurchRFQCaseTableForCopyFrom "Request for quote" @SYS102679
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,CopyFromMenuItemButton),
                gridIsNotEmpty
                && purchRFQCaseTable.StatusHigh <= PurchRFQStatus::Sent
                && purchRFQCaseTable.type().createLineAllowed());

        //  4. PurchRFQFormLetterSend_Action
        boolean canSend = this.isSendActionEnabled(purchRFQCaseTable)
                    && !(isRFQAmendmentEnabled && purchRFQCaseTable.isAmended);

		// Set process button enable/disable, visible/invisible properly.
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, SendMenuItemButton), PurchRFQCaseTableForm::isSendVisible());
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,SendMenuItemButton), PurchRFQCaseTableForm::isSendEnabled(canSend));
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, PurchRFQCaseSendPublish_PSN),
            PurchRFQCaseTableForm::isSendAndPublishEnabled(purchRFQCaseTable));

        boolean canBulkSend = PurchRFQCaseTableForm::isSendVisible() && PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled();
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, BulkSendMenuItemButton), canBulkSend);
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, BulkSendMenuItemButton), canBulkSend && PurchRFQCaseTableForm::isSendEnabled(canSend));

        //  5. PurchRFQTotals_Action "Totals" @SYS8311
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,TotalsMenuItemButton),gridIsNotEmpty);

        //  6. MarkupTransHeadingPurch_Action "Misc. charges" @SYS8371
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,ManageMiscChargesMenuItemButton),gridIsNotEmpty);

        //  7. PurchRFQReplyFields "Default request for quote reply fields" @SYS103484
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, PurchRFQConfigReply), gridIsNotEmpty
            && PurchRFQCaseTableListPageInteraction::isRFQCaseFieldsTransferToReplyOrShowLegacyFieldsFeatureEnabled());

        //  8. PurchRFQReplyTable_Action "Request for quote reply" @SYS102695
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,EnterReplyMenuItemButton),
                gridIsNotEmpty &&
                purchRFQCaseTable.StatusHigh > PurchRFQStatus::Created);

        //  9. PurchRFQCompare_Action "Compare" @SYS103899
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,CompareRepliesMenuItemButton),
                gridIsNotEmpty &&
                purchRFQCaseTable.StatusHigh > PurchRFQStatus::Sent);

        // 10. Unseal bids
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, UnsealBids), purchRFQCaseTable.canBidBeUnsealed());
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, UnsealBids), PurchRFQCaseTable.BidType == PurchRFQBidType::Sealed);
        listPage.listPageFieldVisible(formControlStr(PurchRFQCaseTableListPage, PurchRFQPublishedDateTime_PSN), PurchRFQCaseTableForm::isPublishDateTimeVisible());

        // 11. VendRFQJour_Action "Request for Quote Journals" @SYS105899
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,RFQJournalMenuItemButton),gridIsNotEmpty);

        // 12. ReqTransPoPurchListPage "Planned Purchase Orders" @SYS114695
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage,PlannedPOMenuItemButton),gridIsNotEmpty);

        // If PublicSector congiguration key is enabled, then hide the amendment buttons
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, PurchRFQAmendmentCreate), (isRFQAmendmentEnabled && !purchRFQCaseTable.IsAmended));
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, PurchRFQAmendmentCancel), (isRFQAmendmentEnabled && purchRFQCaseTable.IsAmended));
        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, PurchRFQAmendmentFinalize), isRFQAmendmentEnabled);

        if (isRFQAmendmentEnabled)
        {
            boolean isRFQSentAlreadyOrPublished = purchRFQCaseTable.StatusHigh >= PurchRFQStatus::Sent || isRFQPublished;
            boolean enableCreateAmendmentButton = rfqIsNotExpired
                                            && isRFQSentAlreadyOrPublished
                                            && !purchRFQCaseTable.IsAmended;

            boolean enableFinalizeAmendmentButton = rfqIsNotExpired
                                            && isRFQSentAlreadyOrPublished
                                            && purchRFQCaseTable.IsAmended;

            // Amendment buttons Enable/Disable
            listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, PurchRFQAmendmentCreate), enableCreateAmendmentButton);
            listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, PurchRFQAmendmentFinalize), enableFinalizeAmendmentButton);
        }

        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, CancelMenuItemButton), purchRFQCaseTable.canCancelRFQ());

        boolean isRFQNotCanceled = !purchRFQCaseTable.isRFQCanceled();
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, ProcessButtonGroup), isRFQNotCanceled);
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, AmmendmentsButtonGroup), isRFQNotCanceled);
        listPage.actionPaneControlEnabled(formControlStr(PurchRFQCaseTableListPage, PurchRFQConfigReply), isRFQNotCanceled
            && PurchRFQCaseTableListPageInteraction::isRFQCaseFieldsTransferToReplyOrShowLegacyFieldsFeatureEnabled());

        listPage.actionPaneControlVisible(formControlStr(PurchRFQCaseTableListPage, PurchRFQVendViewQuestion), PurchRFQParameters::find().IsVendorQuestionEnabled);

        PurchRFQSealedBidFlightingManager::initSealedBiddingSpecificControl(listPage.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusFilterSettingsForTaskPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the settings for the task page RFQ status filter
    /// </summary>
    /// <returns>
    /// The RFQ status filter.
    /// </returns>
    /// <remarks>
    /// If the list page form executes as primary, the return value is "All".
    /// If the list page form is opened as secondary, the return value is "Sent" for Sent RFQs, or
    /// "Created" for Open RFQs.
    /// </remarks>
    public static PurchRFQStatusFilter getStatusFilterSettingsForTaskPage(Args _args)
    {
        switch (_args.menuItemName())
        {
            case  menuitemDisplayStr(PurchRFQCaseTableListPageSent):
                return PurchRFQStatusFilter::Sent;
            case menuitemDisplayStr(PurchRFQCaseTableListPageOpen):
                return PurchRFQStatusFilter::Created;
            default:
                return PurchRFQStatusFilter::All;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRFQCaseFieldsTransferToReplyOrShowLegacyFieldsFeatureEnabled</Name>
				<Source><![CDATA[
    internal static boolean isRFQCaseFieldsTransferToReplyOrShowLegacyFieldsFeatureEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(PurchRFQShowLegacyFieldFeature::instance())
            || FeatureStateProvider::isFeatureEnabled(PurchRFQCaseFieldsTransferToReplyFeature::instance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>