<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLineValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqLineValidate
{
    PurchReqLine    purchReqLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCategoryAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the <c>Availability</c> category in the <c>EcoResCategory::getProcCategoryAvailability</c>
    ///    API.
    /// </summary>
    /// <returns>
    ///    true if the API returns true; otherwise, false.
    /// </returns>
    public boolean checkCategoryAvailability()
    {
        boolean                     isCategoryAvailable = false;

        isCategoryAvailable = EcoResCategory::getProcCategoryAvailability(purchReqLine.ProcurementCategory,
                                                                          purchReqLine.BuyingLegalEntity,
                                                                          purchReqLine.ReceivingOperatingUnit,
                                                                          purchReqLine.ReceivingOperatingUnit ? ProcCategoryOrganizationOption::BuyingLegalEntityAndCombination : ProcCategoryOrganizationOption::BuyingLegalEntity);

        return isCategoryAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryActivationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the procurement category specified on the line is active.
    /// </summary>
    /// <returns>
    /// true if procurement category is active; otherwise, false.
    /// </returns>
    public boolean checkCategoryActivationStatus()
    {
        return EcoResCategory::find(purchReqLine.ProcurementCategory).IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    boolean checkItemId()
    {
        if (!purchReqLine.ItemId && purchReqLine.LineType == PurchReqLineType::Category)
        {
            return true;
        }

        boolean ok = true;

        if (purchReqLine.InventDimId || !PurchReqLineCheckNotStoppedFlight::instance().isEnabled())
        {
            ok = purchReqLine.inventTable().inventItemPurchSetup(purchReqLine.InventDimId).checkNotStopped(false);
        }

        if (ok
            && purchReqLine.RequisitionPurpose == RequisitionPurpose::Replenishment
            && !InventTable::modelGroupByItemId(purchReqLine.ItemId).isStocked())
        {
            ok = checkFailed("@GLS550000");
        }

        if (ok
            && !purchReqLine.isConsumption()
            && !this.checkReplenishItemIdByPolicy())
        {
            ok = checkFailed("@SYS306980");
        }

        if (ok
            && purchReqLine.isConsumption()
            && !this.checkItemIdByPolicy())
        {
            ok = checkFailed("@SYS306980");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemIdByPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item using catalog policy if exists.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>

    private boolean checkItemIdByPolicy()
    {
        InventTable                             inventTable;
        RefRecId                                catalogRecId;
        CatProcurementCatalogProductSiteAll     catProcurementCatalogProductSiteAll;
        boolean                                 validCategory = true;
        boolean                                 validCatalog = true;

        catalogRecId = PurchReqLine::getCatalogPolicyRuleRecId(purchReqLine.BuyingLegalEntity, purchReqLine.ReceivingOperatingUnit, purchReqLine.RequiredDate);

        if (catalogRecId && CatProcureCatalogTable::findByRecId(catalogRecId).PublishingStatus == ProcureCatalogPublishingStatus::Active)
        {
            // If the catalog is published, restrict to items associated with the catalog.
            select firstonly RecId from inventTable
                exists join catProcurementCatalogProductSiteAll
                where catProcurementCatalogProductSiteAll.ProductRecId  == inventTable.Product
                   && inventTable.ItemId                                == purchReqLine.ItemId
                   && catProcurementCatalogProductSiteAll.Catalog       == catalogRecId;
            validCatalog = inventTable.RecId? true : false;
        }
        //The item needs to be associated with a valid procurement category
        if (validCatalog &&
            !ProcCategoryAccessPolicyParameter::procurementCategoryAllowedByPolicy(
                EcoResProductCategory::findCategoryByProduct(InventTable::find(purchReqLine.ItemId).Product).RecId,
                purchReqLine.BuyingLegalEntity,
                purchReqLine.ReceivingOperatingUnit))
        {
            validCategory = false;
        }
        return validCatalog && validCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReplenishItemIdByPolicy</Name>
				<Source><![CDATA[
    private boolean checkReplenishItemIdByPolicy()
    {
        boolean     ret = true;

        if (!RequisitionRepCatAccessPolicyRuleData::categoryAllowedByPolicy(
                EcoResProductCategory::findCategoryByProduct(InventTable::find(purchReqLine.ItemId).Product,PurchReqTable::categoryHierarchy(purchReqLine.isConsumption(),purchReqLine.BuyingLegalEntity).RecId).RecId,
                purchReqLine.BuyingLegalEntity,
                purchReqLine.ReceivingOperatingUnit))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>PurchReqLine</c> parameter.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>PurchReqLine</c> parameter.
    /// </returns>
    public PurchReqLine parmPurchReqLine(PurchReqLine _purchReqLine = purchReqLine)
    {
        purchReqLine = _purchReqLine;
        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the item ID from the <c>InventTable</c>.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateInventItem()
    {
        DataAreaId      dataAreaId;
        dataAreaId = CompanyInfo::findRecId(purchReqLine.BuyingLegalEntity).DataArea;
        changecompany(dataAreaId)
        {
            return InventTable::find(purchReqLine.ItemId).RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the item.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateItem()
    {
        boolean isValid;

        isValid = true;
        if ( purchReqLine.LineType == PurchReqLineType::Item )
        {
            if ( this.validateInventItem() )
            {
                if ( (purchReqLine.isConsumption() && !this.checkItemIdByPolicy())
                    || (!purchReqLine.isConsumption() && !this.checkReplenishItemIdByPolicy()))

                {
                    isValid = false;
                    error("@SYS306980");
                }
            }
            else
            {
                isValid = false;
                error ("@SYS306981");
            }
        }
        else
        {
            if (!this.checkCategoryAvailability())
            {
                isValid = false;
                error("@SYS306973");
            }
            else if (PurchReqLineCopyValidateCategoryIsActiveFlight::instance().isEnabled()
                && !this.checkCategoryActivationStatus())
            {
                isValid = false;
                error("@SCM:PurchLineInactiveProcurementCategoryAssignedError");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified vendor.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateVendor()
    {
        ProcCategoryPolicyParameter procCategoryPolicyParameter;
        List                    listVendors             = new List(Types::Record);
        boolean                 isCategoryAvailable     = false;
        boolean                 isValidItem             = false;
        boolean                 isVendorFound           = false;
        VendCategoryStatus      vendCategoryStatus      = -1;
        boolean                 isApprovedOrStandard    = false;
        container               con;

        if (purchReqLine.isVendorBlocked())
        {
            return false;
        }

        // catalog Item
        if ( purchReqLine.LineType == PurchReqLineType::Item )
        {
            isVendorFound = true;

            if (this.validateInventItem())
            {
                if (purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Draft && purchReqLine.VendAccount)
                {
                    con = PurchReqLine::findVendors(purchReqLine);

                    if (conFind(con, VendTable::find(purchReqLine.VendAccount).RecId) == 0)
                    {
                        return checkFailed(strFmt("@SCM:VendorNotAllowedPurchReqLine", purchReqLine.VendAccount));
                    }
                }
            }
            else
            {
                throw error("@SYS306981");
            }
        }
        else //Non-catalog item
        {
            isCategoryAvailable         = this.checkCategoryAvailability();

            if (!isCategoryAvailable)
            {
                return true;
            }

            // For approved purchase requisitions, it should be allowed to edit the vendor and the policy does not apply.
            if (purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Approved)
            {
                return true;
            }            

            procCategoryPolicyParameter = purchReqLine.procCategoryPolicyParameter();
            
            if (procCategoryPolicyParameter.RecId != 0 )
            {
                // The reviewer selects the vendor during the review process if policy rule is 'Do not allow vendor selection in this category'.
                if (purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::InReview && procCategoryPolicyParameter.VendorSelection == ProcCategoryVendorSelection::SelectionNotAllowed)
                {
                    return true;
                }

                isVendorFound = PurchReqVendorPolicyValidation::validateCategoryPolicyForVendor(procCategoryPolicyParameter.VendorSelection, purchReqLine.VendAccount, purchReqLine.ProcurementCategory,
                                                                                                purchReqLine.RequiredDate, purchReqLine.BuyingLegalEntity);
            }
            else
            {
                isVendorFound = true;
            }

            if (!isVendorFound)
            {
                return checkFailed("@SYS345136");
            }
        }

        return isVendorFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqLineValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchReqLineValidate</c> class.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    A <c>purchReqLine</c> object to use for initialization.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PurchReqLineValidate</c> class.
    /// </returns>
    public static PurchReqLineValidate newPurchReqLineValidate(PurchReqLine _purchReqLine)
    {
        PurchReqLineValidate purchReqLineValidate = new PurchReqLineValidate();
        purchReqLineValidate.parmPurchReqLine(_purchReqLine);
        return purchReqLineValidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the purchase unit of measure on the purchase requisition line can be converted
    /// </summary>
    /// <returns>
    ///    true if the unit can be converted; otherwise, false.
    /// </returns>
    public boolean validateUnit()
    {
        boolean  ok = true;

        if (purchReqLine.isCatalogItem())
        {
            UnitOfMeasureSymbol purchReqOrigUnitSymbol = purchReqLine.orig().unitOfMeasureSymbolById();
            UnitOfMeasureSymbol unitOfMeasureSymbol    = purchReqOrigUnitSymbol ? purchReqOrigUnitSymbol :
                                                              InventTable::find(purchReqLine.ItemId).inventUnitId();

            if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(purchReqLine.ItemId,
                                                                                              purchReqLine.InventDimId,
                                                                                              unitOfMeasureSymbol,
                                                                                              purchReqLine.unitOfMeasureSymbolById()))
            {
                ok = checkFailed(strFmt("@SYS28690", unitOfMeasureSymbol, purchReqLine.unitOfMeasureSymbolById()));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>