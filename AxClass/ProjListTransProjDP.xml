<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListTransProjDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListTransProjDP</c> class provides data for the <c>ProjListTransProj</c> report and
///    contains the declaration of the global variables.
/// </summary>
/// <remarks>
///    This class provides the methods to fetch the data that is used by the <c>ProjListTransProj</c>
///    report.
/// </remarks>

[   SRSReportQueryAttribute(queryStr(ProjListTransProj)),
    SRSReportParameterAttribute(classstr(ProjListTransProjContract))
]
public class ProjListTransProjDP extends SRSReportDataProviderPreProcessTempDB 
{
    Amount                      cmAmount;
    Percent                     cmPct;

    TmpProjTransList            tmpProjTransList;

    ProjTrans                   projTrans;

    boolean                     firstProject;
    ProjId                      firstProjId;

    ProjId                      projOnAccTransProjId;
    TransDate                   projOnAccTransProjDate;
    TransDate                   projOnAccTransInvoiceDate;
    TransTxt                    projOnAccTransDesc;
    ProjProposalId              projOnAccTransProposalId;
    ProjInvoiceId               projOnAccTransInvoiceId;
    CurrencyCode                projOnAccTransCurrency;
    Amount                      projOnAccTransAmount;
    Amount                      projOnAccTransAmountSum;

    QueryRun                    queryRun;
    ProjTable                   projTable;
    ProjCostTrans               projCostTrans;
    ProjRevenueTrans            projRevenueTrans;
    ProjEmplTrans               projEmplTrans;
    ProjItemTrans               projItemTrans;
    ProjOnAccTrans              projOnAccTrans;

    /// <summary>
    ///    Picks values from the parameters.
    /// </summary>
    /// <returns>
    ///    A Boolean value to filter the data.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProjTransAllowed</Name>
				<Source><![CDATA[
    public boolean checkProjTransAllowed()
    {
        ProjListTransProjContract contract = this.parmDataContract() as ProjListTransProjContract;

        if (projTrans.invoiced())
        {
            if (contract.parmProjisInvoiced())
            {
                return true;
            }
        }
        else if (projTrans.canBeInvoiced(true))
        {
            if (contract.parmProjChargeable())
            {
                return true;
            }
        }
        else if (contract.parmProjnonChargeable())
        {
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required report data from the temporary table.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>

    [SRSReportDataSetAttribute('TmpProjTransList')]
    public TmpProjTransList getTmpProjTransList()
    {
        select tmpProjTransList;
        return tmpProjTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>

    public void insertProjTransList()
    {
        tmpProjTransList.clear();
        tmpProjTransList.VoucherInvoice = projTrans.voucherInvoice();
        tmpProjTransList.VoucherJournal = projTrans.voucherOriginal();
        tmpProjTransList.LinePropertyId = projTrans.linePropertyId();
        tmpProjTransList.ActivityNumber = projTrans.activityNumber();
        tmpProjTransList.CategoryId     = projTrans.categoryId();
        tmpProjTransList.CostPrice      = projTrans.costPrice();
        tmpProjTransList.CurrencyId     = projTrans.currencyIdSales();
        tmpProjTransList.DefaultDimension      = projTrans.defaultDimension();
        tmpProjTransList.SalesAmount    = projTrans.transTurnoverMST();
        tmpProjTransList.CostAmount     = projTrans.transCostMST();
        tmpProjTransList.ProjIdOrig     = projTrans.projId();
        tmpProjTransList.ProjId         = firstProjId;
        tmpProjTransList.Qty            = projTrans.qty();
        tmpProjTransList.SalesPrice     = projTrans.salesPrice();
        tmpProjTransList.TransDate      = projTrans.transDate();
        tmpProjTransList.Txt            = projTrans.txt();
        tmpProjTransList.TransType      = projTrans.transType();
        tmpProjTransList.ProjId         = firstProjId;
        tmpProjTransList.Type           = ProjCategory::find(projTrans.categoryId()).CategoryType;
        tmpProjTransList.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute the data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        queryRun = new QueryRun(this.parmQuery());

        this.setDatesOnQuery();

        while (queryRun.next())
        {
            projTrans = null;

            if (SysReportRun::changed(queryRun,tablenum(ProjTable)))
            {
                projTable = queryRun.get(tablenum(ProjTable));

                if (projTable.level() == 1)
                {
                    firstProject = true;
                }

                if (firstProject)
                {
                    firstProjId  = projTable.ProjId;
                    firstProject = false;
                }
            }

            if (SysReportRun::changed(queryRun,tablenum(ProjCostTrans)))
            {
                projCostTrans   = queryRun.get(tablenum(ProjCostTrans));
                projTrans       = ProjTrans::newProjCostTrans(projCostTrans);
            }

            if (SysReportRun::changed(queryRun,tablenum(ProjRevenueTrans)))
            {
                projRevenueTrans = queryRun.get(tablenum(ProjRevenueTrans));
                projTrans        = ProjTrans::newProjRevenueTrans(projRevenueTrans);
            }

            if (SysReportRun::changed(queryRun,tablenum(ProjEmplTrans)))
            {
                projEmplTrans   = queryRun.get(tablenum(ProjEmplTrans));
                projTrans       = ProjTrans::newProjEmplTrans(projEmplTrans);
            }

            if (SysReportRun::changed(queryRun,tablenum(ProjItemTrans)))
            {
                projItemTrans   = queryRun.get(tablenum(ProjItemTrans));
                projTrans       = ProjTrans::newProjItemTrans(projItemTrans);
            }

            if (SysReportRun::changed(queryRun,tablenum(ProjOnAccTrans)))
            {
                projOnAccTrans  = queryRun.get(tablenum(ProjOnAccTrans));
                projTrans       = ProjTrans::newProjOnAccTrans(projOnAccTrans);
            }

            if (projTrans && this.checkProjTransAllowed())
            {
                this.insertProjTransList();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatesOnQuery</Name>
				<Source><![CDATA[
    private void setDatesOnQuery()
    {
        Query query = this.queryRun.query();  

        ProjListTransProjContract contract = this.parmDataContract() as ProjListTransProjContract;

        if (contract.parmFromDate() != dateNull()) // from date is set as mandatory from the report dialog
        {
            TransDate fromDate = contract.parmFromDate();
            TransDate toDate = contract.parmToDate();

            QueryBuildDataSource qbdsEmplTrans = query.dataSourceTable(tableNum(ProjEmplTrans));
            qbdsEmplTrans.addRange(fieldNum(ProjEmplTrans, TransDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));

            QueryBuildDataSource qbdsCostTrans = query.dataSourceTable(tableNum(ProjCostTrans));
            qbdsCostTrans.addRange(fieldNum(ProjCostTrans, TransDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));

            QueryBuildDataSource qbdsRevenueTrans = query.dataSourceTable(tableNum(ProjRevenueTrans));
            qbdsRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));

            QueryBuildDataSource qbdsItemTrans = query.dataSourceTable(tableNum(ProjItemTrans));
            qbdsItemTrans.addRange(fieldNum(ProjItemTrans, TransDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));

            QueryBuildDataSource qbdsOnAccTrans = query.dataSourceTable(tableNum(ProjOnAccTrans));
            qbdsOnAccTrans.addRange(fieldNum(ProjOnAccTrans, TransDate)).value(SysQueryRangeUtil::dateRange(fromDate, toDate));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>