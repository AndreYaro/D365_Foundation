<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupEnd</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventDimLPCleanupEnd extends RunBase
{
    private InventDimLPCleanupJob cleanupJob;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanupJob
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimLPCleanupEnd</Name>
				<Source><![CDATA[
    public InventDimLPCleanupJob parmInventDimLPCleanupEnd(InventDimLPCleanupJob _cleanupJob = cleanupJob)
    {
        cleanupJob = _cleanupJob;
        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        setPrefix(InventDimLPCleanupEnd::description());

        try
        {
            if (!this.validate())
            {
                throw error("@SYS319214");
            }

            ttsbegin;
            // Won't update StopRunning to No.
            cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId, true);

            boolean needUpdateRefTable = cleanupJob.UpdateRefTable == NoYes::No
                                      && InventDimLPCleanupChangeTmp::hasRecords()
                                      && InventDimLPCleanupBundleUpdateRefTablesFlight::instance().isEnabled()
                                      && InventDimLPCleanupSeparateUpdateRefTableFlight::instance().isEnabled();
            if (needUpdateRefTable)
            {
                cleanupJob.Status = InventDimLPCleanupStatus::ReadyForUpdateRefTable;
            }
            else
            {
                cleanupJob.UpdateRefTable = NoYes::Yes;
                cleanupJob.Status = InventDimLPCleanupStatus::Complete;
            }

            cleanupJob.update();

            InventDimLPCleanupTask inventDimLPCleanupTask;
            delete_from inventDimLPCleanupTask 
                where inventDimLPCleanupTask.SessionId == cleanupJob.SessionId;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId);

        if (!cleanupJob.RecId)
        {
            return checkFailed("@SCM:InventDimLPCleanupCancelledOrDeleted");
        }

        if (cleanupJob.Status == InventDimLPCleanupStatus::ReadyForUpdateRefTable
         || cleanupJob.Status == InventDimLPCleanupStatus::UpdateRefTableInProgress
         || cleanupJob.Status == InventDimLPCleanupStatus::Complete)
        {
            return checkFailed(strFmt("@SCM:StatusOfInventDimLPCleanup", cleanupJob.Status));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupEnd construct()
    {
        return new InventDimLPCleanupEnd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventDimLPCleanupEndDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventDimLPCleanupJob))
        {
            throw error(strFmt("@SYS29104", classStr(InventDimLPCleanupEnd)));
        }

        InventDimLPCleanupEnd inventDimLPCleanupEnd = InventDimLPCleanupEnd::newInventDimLPCleanupJob(args.record());

        if (Box::YesNo("@SCM:InventDimLPCleanupEndWarning", DialogButton::No) == DialogButton::Yes)
        {
            inventDimLPCleanupEnd.runOperation();
        }

        if (args && args.caller())
        {
            InventDimLPCleanupJob cleanupJob = args.record();

            if (FormDataUtil::getFormDataSource(cleanupJob))
            {
                FormDataUtil::getFormDataSource(cleanupJob).reread();
                FormDataUtil::getFormDataSource(cleanupJob).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupEnd newInventDimLPCleanupJob(InventDimLPCleanupJob _cleanupJob)
    {
        InventDimLPCleanupEnd inventDimLPCleanupEnd = InventDimLPCleanupEnd::construct();

        inventDimLPCleanupEnd.getLast();
        inventDimLPCleanupEnd.parmInventDimLPCleanupEnd(_cleanupJob);
        inventDimLPCleanupEnd.init();

        return inventDimLPCleanupEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>