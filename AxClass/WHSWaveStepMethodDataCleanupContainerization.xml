<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepMethodDataCleanupContainerization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveStepMethodDataCleanupContainerization</c> implements the wave data cleanup logic for the
/// containerization wave step method.
/// </summary>
[WHSWaveStepMethodDataCleanupAttribute(methodStr(WhsPostEngineBase, containerization))]
internal final class WHSWaveStepMethodDataCleanupContainerization extends WHSWaveStepMethodDataCleanup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupWaveStepTrackingData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupWaveStepTrackingData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupSuccessfulRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupSuccessfulRun()
    {
        super();

        // If the shipment was reversed as work creation failed, remove any left-over containers.
        this.removeContainersForFailedShipments(this.parmWaveExecutionId(), this.parmWaveId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeContainersForFailedShipments</Name>
				<Source><![CDATA[
    private void removeContainersForFailedShipments(WHSWaveExecutionId _waveExecutionId, WHSWaveId _waveId)
    {
        if (!_waveExecutionId || !_waveId)
        {
            return;
        }

        ttsbegin;

        WHSContainerTable containerTable;
        WHSWaveFailedShipment failedShipmentTable;
        WhsWorkTable workTable;                  
                     
        while select failedShipmentTable
            where failedShipmentTable.WaveId == _waveId
            join ContainerId from containerTable
                order by ContainerLevel desc
                where containerTable.ShipmentId == failedShipmentTable.ShipmentId &&
                      containerTable.WaveExecutionID == _waveExecutionId &&                  
                      containerTable.ContainerBuildId != ''
            notexists join workTable
                where workTable.ContainerId == containerTable.ContainerId
        {
            this.deleteContainer(failedShipmentTable.ShipmentId, containerTable.ContainerId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveStepCommittedData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void cleanupWaveStepCommittedData()
    {
         // If work was successfully created and wave processing failed, then work will be cancelled
         // and containers should be cleaned-up by work cancellation.
            
         this.removeAllContainersForWaveExecutionId(this.parmWaveExecutionId());
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllContainersForWaveExecutionId</Name>
				<Source><![CDATA[
    private void removeAllContainersForWaveExecutionId(WHSWaveExecutionId _waveExecutionId)
    {
        if (!_waveExecutionId)
        {
            return;
        }

        ttsbegin;

        WHSContainerTable containerTable;

        while select ContainerId, ShipmentId from containerTable
            order by ContainerLevel desc
            where containerTable.WaveExecutionID == _waveExecutionId
                && containerTable.ContainerBuildId != ''
        {
            this.deleteContainer(containerTable.ShipmentId, containerTable.ContainerId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteContainer</Name>
				<Source><![CDATA[
    private void deleteContainer(WHSShipmentId _shipmentId, WHSContainerId _containerId)
    {
        WHSContainerLine containerLine;
        WHSContainerTable containerDeleteTable;

        // Prevent calling into additional logic because it will try to clean up the container.
        containerLine.skipDataMethods(true);
        containerLine.skipEvents(true);
        containerDeleteTable.skipDataMethods(true);
        containerDeleteTable.skipEvents(true);
            
        delete_from containerLine
            where containerLine.ContainerId == _containerId
                && containerLine.ShipmentId == _shipmentId;

        containerDeleteTable = WHSContainerTable::find(_shipmentId, _containerId, true);
        containerDeleteTable.doDelete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>