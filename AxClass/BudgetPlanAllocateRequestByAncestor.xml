<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateRequestByAncestor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateRequestByAncestor</c> class is used to capture the information
/// that is required to allocate budget plans by ancestor budget plans.
/// </summary>
public class BudgetPlanAllocateRequestByAncestor extends BudgetPlanAllocateRequestByPlan
{
    BudgetPlanHeaderRecId targetBudgetPlanHeaderRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetPlanAllocateType</Name>
				<Source><![CDATA[
    public BudgetPlanAllocateType getBudgetPlanAllocateType()
    {
        return BudgetPlanAllocateType::AllocateByAncestor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanHeaderRecId</Name>
				<Source><![CDATA[
    public BudgetPlanHeaderRecId parmTargetBudgetPlanHeaderRecId(BudgetPlanHeaderRecId _targetBudgetPlanHeaderRecId = targetBudgetPlanHeaderRecId)
    {
        targetBudgetPlanHeaderRecId = _targetBudgetPlanHeaderRecId;

        return targetBudgetPlanHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanAllocateRequestByAncestor construct()
    {
        return new BudgetPlanAllocateRequestByAncestor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanLineRecIds</Name>
				<Source><![CDATA[
    public static Set getBudgetPlanLineRecIds(
        BudgetPlanHeaderRecId   _sourceBudgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _sourceBudgetPlanScenarioRecId)
    {
        Set              selectedPlanLines = new Set(typeName2Type(extendedTypeStr(BudgetPlanLineRecId)));
        BudgetPlanLine   budgetPlanLine;

        while select RecId from budgetPlanLine
            where budgetPlanLine.BudgetPlanScenario == _sourceBudgetPlanScenarioRecId
                && budgetPlanLine.BudgetPlanHeader == _sourceBudgetPlanHeaderRecId
        {
            selectedPlanLines.add(budgetPlanLine.RecId);
        }

        return selectedPlanLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTopLevelOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the top level organization in the organization hierarchy.
    /// </summary>
    /// <param name = "_organizationHierarchyType">
    /// The value of the hierarchy type associated with the budget planning process for the processed document.
    /// </param>
    /// <returns>
    /// The value of the <c>Organization</c> field of the <c>omExplodedOrganizationSecurityGraph</c> table.
    /// </returns>
    public static BudgetingOrganizationRecId findTopLevelOrganization(OrganizationHierarchyTypeRecId _organizationHierarchyType)
    {
        OMHierarchyRelationship omHierarchyRelationship;

        select ChildOrganization from omHierarchyRelationship
            where omHierarchyRelationship.HierarchyType == _organizationHierarchyType
                && omHierarchyRelationship.ParentOrganization == 0;

        return omHierarchyRelationship.ChildOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceBudgetPlanHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the ancestor plan used as a source plan in the allocation process.
    /// </summary>
    /// <param name = "_ancestorLevel">
    /// The value of the Ancestor level.
    /// </param>
    /// <param name = "_targetBudgetPlanHeaderRecId">
    /// The record ID of the target <c>BudgetPlanHeader</c> buffer.
    /// </param>
    /// <returns>
    /// The record ID of the ancestor <c>BudgetPlanHeader</c> buffer.
    /// </returns>
    public static BudgetPlanHeaderRecId getSourceBudgetPlanHeaderRecId(
        BudgetPlanAncestorLevel _ancestorLevel,
        BudgetPlanHeaderRecId   _targetBudgetPlanHeaderRecId)
    {
        Set                                 parentOrganizationsSet = new Set(Types::Int64);
        BudgetPlanHeader                    targetBudgetPlanHeader = BudgetPlanHeader::find(_targetBudgetPlanHeaderRecId);
        OrganizationHierarchyTypeRecId      omHierarchyTypeRecId   = BudgetPlanningProcess::find(targetBudgetPlanHeader.BudgetPlanningProcess).OrganizationHierarchyType;

        BudgetingOrganizationRecId          topLevelOrganization = BudgetPlanAllocateRequestByAncestor::findTopLevelOrganization(omHierarchyTypeRecId);
        OMExplodedOrganizationSecurityGraph omExplodedOrganizationSecurityGraph;

        while select Organization from omExplodedOrganizationSecurityGraph
            where omExplodedOrganizationSecurityGraph.AncestorOrganization == topLevelOrganization
                && omExplodedOrganizationSecurityGraph.Distance == _ancestorLevel
                && omExplodedOrganizationSecurityGraph.OMHierarchyType == omHierarchyTypeRecId
        {
            parentOrganizationsSet.add(omExplodedOrganizationSecurityGraph.Organization);
        }

        BudgetPlanHeaderRecId parentBudgetPlanHeaderRecId;

        BudgetPlanHeader sourceBudgetPlanHeader;

        parentBudgetPlanHeaderRecId = targetBudgetPlanHeader.ParentBudgetPlanHeader;

        while (parentBudgetPlanHeaderRecId)
        {
            select BudgetingOrganization, ParentBudgetPlanHeader from sourceBudgetPlanHeader
                where sourceBudgetPlanHeader.RecId == parentBudgetPlanHeaderRecId;

            if (parentOrganizationsSet.in(sourceBudgetPlanHeader.BudgetingOrganization))
            {
                break;
            }

            parentBudgetPlanHeaderRecId = sourceBudgetPlanHeader.ParentBudgetPlanHeader;
        }
        return parentBudgetPlanHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean isValid;

        isValid = super();

        if (isValid && !parentBudgetPlanHeaderRecId)
        {
            // Return false when source budget plan is not found
            throw error("@Budget:NoSourceBudgetPlanForAllocation");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>