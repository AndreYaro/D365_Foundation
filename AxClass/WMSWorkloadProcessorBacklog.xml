<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSWorkloadProcessorBacklog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The WMSWorkloadProcessorBacklog class processes the master plan backlog transactions and creates
/// forecast data for the work load report, based on the backlog data.
/// </summary>
class WMSWorkloadProcessorBacklog extends WMSWorkloadProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeSupplySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_itemId">
    /// A <c>ItemID</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> record.
    /// </param>
    /// <param name="_status">
    /// A <c>WMSReqTransMovementStatus</c> value.
    /// </param>
    /// <returns>
    /// An instance of <c>ReqSupplyDemandScheduleModel</c> class.
    /// </returns>
    public ReqSupplyDemandScheduleModel executeSupplySchedule(WMSWorkLoadUnit _workLoadUnit, ItemId _itemId, InventDim _inventDim, WMSReqTransMovementStatus _status)
    {
        ReqSupplyDemandScheduleModel    reqSupplyDemandScheduleModel = this.initSupplySchedule(_itemId, _inventDim);
        InventDimParm                   inventDimParm;

        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        inventDimParm.InventLocationIdFlag = NoYes::Yes;

        reqSupplyDemandScheduleModel.parmMovementStatus(_status);
        reqSupplyDemandScheduleModel.parmProcessOnlyBacklogPeriod(true);
        reqSupplyDemandScheduleModel.parmInventDimParm(inventDimParm);
        reqSupplyDemandScheduleModel.parmInboundTransTypes(_workLoadUnit.getInboundTransTypes());
        reqSupplyDemandScheduleModel.parmOutboundTransTypes(_workLoadUnit.getOutboundTransTypes());

        reqSupplyDemandScheduleModel.calcPeriods();

        return reqSupplyDemandScheduleModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForecastForWorkUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates work load unit forecast based on the input from the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_reqSupplyDemandScheduleModel">
    /// An instance of <c>ReqSupplyDemandScheduleModel</c> class.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    protected void updateForecastForWorkUnit(WMSWorkLoadUnit _workLoadUnit, ReqSupplyDemandScheduleModel _reqSupplyDemandScheduleModel, WMSReportServiceItemProvider _reportServiceItemProvider)
    {
        this.populateWorkloadUnitFromModel(_workLoadUnit, _reqSupplyDemandScheduleModel, _reportServiceItemProvider, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSWorkloadProcessorBacklog construct()
    {
        return new WMSWorkloadProcessorBacklog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>WMSWorkloadProcessorPlannedForecast</c> class, based on the work load report data.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The master plan reference.
    /// </param>
    /// <param name="_fromDate">
    /// The specified from date.
    /// </param>
    /// <param name="_toDate">
    /// The specified to date.
    /// </param>
    /// <param name="_periodTemplateName">
    /// The specified period template name.
    /// </param>
    /// <returns>
    /// An new instance of <c>WMSWorkloadProcessorPlannedForecast</c> class.
    /// </returns>
    public static WMSWorkloadProcessorBacklog newFromReportSetup(ReqPlanId _reqPlanId, TransDate _fromDate, TransDate _toDate, PeriodTemplateName _periodTemplateName)
    {
        WMSWorkloadProcessorBacklog  workloadProcessorBacklog = WMSWorkloadProcessorBacklog::construct();

        workloadProcessorBacklog.parmReqPlanId(_reqPlanId);
        workloadProcessorBacklog.parmFromDate(_fromDate);
        workloadProcessorBacklog.parmToDate(_toDate);
        workloadProcessorBacklog.parmPeriodTemplateName(_periodTemplateName);

        return workloadProcessorBacklog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>