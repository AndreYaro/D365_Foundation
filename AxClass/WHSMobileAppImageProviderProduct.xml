<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppImageProviderProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppImageProviderProduct</c> class is the image provider for the product image.
/// </summary>
[WHSMobileAppImageType(WHSMobileAppImageType::Product)]
public class WHSMobileAppImageProviderProduct extends WHSMobileAppImageProvider
{
    private ImageReference imageRef = ImageReference::constructForAotResource(resourceStr(CatNoImageAvailable48x48));
    private ItemId         itemId;
    private const char  DimKeyValueSeparator     = ':';


    #Properties
    #WHSRF
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getKeyValueFromString</Name>
				<Source><![CDATA[
    private container getKeyValueFromString(str _targetString, char _separator)
    {
        ListEnumerator le = this.splitString(_targetString, _separator);
        le.moveNext();
        str key = le.current();
        le.moveNext();
        str value = le.current();
        return [key, value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitString</Name>
				<Source><![CDATA[
    private ListEnumerator splitString(str _targetString, char _separator)
    {
        List strlist = strSplit(_targetString, _separator);
        return strlist.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimCombination</Name>
				<Source><![CDATA[
    private InventDimCombination getInventDimCombination(str _imageIdentifier)
    {
        container inventDims = str2con(_imageIdentifier, WHSMobileAppAttachedImageDetails::InventDimSeparator);
        InventDim inventDim;

        for (int i = 1; i <= conLen(inventDims);i ++)
        {
            str fieldName, fieldValue;
            [fieldName, fieldValue] = this.getKeyValueFromString(conPeek(inventDims, i), DimKeyValueSeparator);
            if (fieldName == #ItemId)
            {
                this.itemId = fieldValue;
            }
            else
            {
                inventDim.setFieldValue(fieldName, fieldValue);
            }
        }
        return InventDimCombination::findByInventDim(this.itemId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageExists</Name>
				<Source><![CDATA[
    public boolean imageExists()
    {
        WHSMobileAppAttachedImageDetails currImageDetails = this.parmImageDetails();
        boolean imageExists;
        changecompany(currImageDetails.parmDataAreaId())
        {
            imageExists = this.productImageExists(this.getInventDimCombination(imageDetails.parmImageIdentifier()));
        }
        return imageExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    public WHSMobileAppImage getImage()
    {
        WHSMobileAppAttachedImageDetails currImageDetails = this.parmImageDetails();
        changecompany(currImageDetails.parmDataAreaId())
        {
            return this.getProductImage(this.getInventDimCombination(imageDetails.parmImageIdentifier()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageExists</Name>
				<Source><![CDATA[
    private boolean productImageExists(InventDimCombination _inventDimCombination)
    {
        if (_inventDimCombination.RecId)
        {
            boolean imageExists =  this.releasedProductVariantImageExists(_inventDimCombination);
            if (imageExists || !WhsMobileAppExistVariantImageCheckskAlsoDefaultProductFlight::instance().isEnabled())
            {
                return imageExists;
            }
        }
        
        return this.releasedProductImageExists(InventTable::find(this.itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductImage</Name>
				<Source><![CDATA[
    private WHSMobileAppImage getProductImage(InventDimCombination _inventDimCombination)
    {
        ImageReference productImage;
        if (_inventDimCombination.RecId)
        {
            productImage = this.getReleasedProductVariantImage(_inventDimCombination);
        }

        if (!productImage || this.isDummyImage(productImage))
        {
            productImage = this.getReleasedProductImage(InventTable::find(this.itemId));
        }
        
        WHSMobileAppImage mobileAppImage = new WHSMobileAppImage();
        if (productImage)
        {
            mobileAppImage.image(productImage.parmImageData());
            this.setImageType(productImage, mobileAppImage);
        }

        return mobileAppImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductVariantImageExists</Name>
				<Source><![CDATA[
    private boolean releasedProductVariantImageExists(InventDimCombination _inventDimCombination)
    {
        return EcoResProductImage::releasedProductVariantImageExists(_inventDimCombination, this.parmImageSize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductImageExists</Name>
				<Source><![CDATA[
    private boolean releasedProductImageExists(InventTable _inventTable)
    {
        return EcoResProductImage::releasedProductImageExists(_inventTable, this.parmImageSize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReleasedProductVariantImage</Name>
				<Source><![CDATA[
    private ImageReference getReleasedProductVariantImage(InventDimCombination _inventDimCombination)
    {
        return EcoResProductImage::releasedProductVariantImage(_inventDimCombination, this.parmImageSize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReleasedProductImage</Name>
				<Source><![CDATA[
    private ImageReference getReleasedProductImage(InventTable _inventTable)
    {
        return EcoResProductImage::releasedProductImage(_inventTable, this.parmImageSize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDummyImage</Name>
				<Source><![CDATA[
    private boolean isDummyImage(ImageReference _imageReference)
    {
        return this.imageRef.parmImageData() == _imageReference.parmImageData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImageType</Name>
				<Source><![CDATA[
    private void setImageType(ImageReference _imageReference, WHSMobileAppImage _mobileAppImage)
    {
        switch (_imageReference.parmImageType())
        {
            case #PropertyURL,
                 'AOTResource':
                _mobileAppImage.type(this.getProvidedImageTypeSymbol(WHSMobileAppProvidedImageType::URL));
                break;
            case 'Base64':
                _mobileAppImage.type(this.getProvidedImageTypeSymbol(WHSMobileAppProvidedImageType::Image));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>