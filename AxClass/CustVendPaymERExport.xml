<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymERExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class for export payment via Electronic reporting.
/// </summary>
class CustVendPaymERExport implements ERIFormatPostProcessingTask
{
    #ISOCountryRegionCodes

    RecId erBinding;
    LedgerJournalId ledgerJournalId;
    CompanyBankAccountId bankAccountID;
    str erFileName;
    Query query;
    boolean showDialog;

    ERIFileDestination fileDestination;

    Map inputParameters = new Map(Types::String, Types::AnyType);
    CustVendPaymModeTable custVendPaymModeTable;
    boolean postERExportDataUpdateRequiredForCustomerRemittance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>trackSequenceOnPaymMode</Name>
				<Source><![CDATA[
    private void trackSequenceOnPaymMode()
    {
        #OCCRetryCount
        if (!custVendPaymModeTable.RecId)
        {
            return;
        }
        try
        {
            ttsbegin;
            if (custVendPaymModeTable.TableId == tableNum(CustPaymModeTable))
            {
                custVendPaymModeTable = CustPaymModeTable::find(custVendPaymModeTable.PaymMode, true, ConcurrencyModel::Pessimistic);
            }
            else
            {
                custVendPaymModeTable = VendPaymModeTable::find(custVendPaymModeTable.PaymMode, true, ConcurrencyModel::Pessimistic);
            }
            custVendPaymModeTable.CustVendPaymModeTable::incLastSequenceNum();
            ttscommit;
        }
        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInputParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Electronic reporting input parameter.
    /// </summary>
    /// <param name = "_name">Parameter name.</param>
    /// <param name = "_value">Parameter value.</param>
    public void addInputParameter(str _name, anytype _value)
    {
        inputParameters.insert(_name, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowParamsDialog</Name>
				<Source><![CDATA[
    public boolean parmShowParamsDialog(boolean _showDialog)
    {
        showDialog = _showDialog;

        return showDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter indicating show prompt dialog
    /// </summary>
    /// <param name = "_showDialog">Show prompt dialog</param>
    /// <returns>Show prompt dialog</returns>
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        return this.parmShowParamsDialog(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileDestination</Name>
				<Source><![CDATA[
    public ERIFileDestination parmFileDestination(ERIFileDestination _fileDestination)
    {
        fileDestination = _fileDestination;

        return fileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERBinding</Name>
				<Source><![CDATA[
    public RecId parmERBinding(RecId _erBinding = erBinding)
    {
        erBinding = _erBinding;

        return erBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountID</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmBankAccountID(CompanyBankAccountId _bankAccountID = bankAccountID)
    {
        bankAccountID = _bankAccountID;

        return bankAccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERFileName</Name>
				<Source><![CDATA[
    public str parmERFileName(str _erFileName = erFileName)
    {
        erFileName = _erFileName;

        return erFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        if (!prmisDefault(_query))
        {
            query = new Query(_query.pack());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable parmCustVendPaymModeTable(CustVendPaymModeTable _custVendPaymModeTable)
    {
        custVendPaymModeTable = _custVendPaymModeTable;

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostERExportDataUpdateRequiredForCustomerRemittance</Name>
				<Source><![CDATA[
    public boolean parmPostERExportDataUpdateRequiredForCustomerRemittance(boolean _postERExportDataUpdateRequiredForCustomerRemittance)
    {
        postERExportDataUpdateRequiredForCustomerRemittance = _postERExportDataUpdateRequiredForCustomerRemittance;

        return postERExportDataUpdateRequiredForCustomerRemittance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    private ERIModelDefinitionParamsAction createParameters()
    {
        this.modifyLedgerJournalTransQuery();

        ERIModelDefinitionParamsUIAction parameters = new ERModelDefinitionDatabaseContext()
            .addQuery(tableNum(LedgerJournalTrans), query)
            .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext())
            .addValue(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountID), bankAccountID)
            .addValue(tableNum(CustPaymModeTable), fieldNum(CustPaymModeTable, LastSequenceNumber), custVendPaymModeTable.LastSequenceNumber);

        if (!inputParameters.empty())
        {
            MapEnumerator paramsEnumarator = inputParameters.getEnumerator();
            ERModelDefinitionInputParametersAction inputParamsAction = new ERModelDefinitionInputParametersAction();
            while (paramsEnumarator.moveNext())
            {
                inputParamsAction.addParameter(paramsEnumarator.currentKey(), paramsEnumarator.currentValue());
            }
            parameters = new ERModelDefinitionParamsUIActionComposite()
                .add(parameters)
                .add(inputParamsAction);
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyLedgerJournalTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply additional filters to the transactions.
    /// </summary>
    protected void modifyLedgerJournalTransQuery()
    {
        QueryBuildDataSource dsLedgerJournalTrans = query.dataSourceTable(tableNum(LedgerJournalTrans));

        findOrCreateRange_W(dsLedgerJournalTrans, fieldNum(LedgerJournalTrans, PaymMode), queryValue(custVendPaymModeTable.PaymMode));

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);
        if (ledgerJournalTable.JournalType != LedgerJournalType::CustPaymRemittance && ledgerJournalTable.JournalType != LedgerJournalType::VendPaymRemittance)
        {
            if (bankAccountID)
            {
                QueryBuildDataSource dsDimensionCombination = dsLedgerJournalTrans.addDataSource(tableNum(DimensionAttributeValueCombination));
                dsDimensionCombination.addLink(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
                dsDimensionCombination.joinMode(JoinMode::ExistsJoin);

                if ((select DimensionAttributeValueCombination
                        where DimensionAttributeValueCombination.RecId == custVendPaymModeTable.PaymentLedgerDimension
                            && DimensionAttributeValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                            && DimensionAttributeValueCombination.DisplayValue == bankAccountID).RecId != 0)
                {
                    dsDimensionCombination.addRange(fieldNum(DimensionAttributeValueCombination, RecId)).value(
                        strFmt('((%1.%2 != %3) || ((%4.%5 == %6) && (%4.%7 == "%8")))',
                            dsLedgerJournalTrans.name(),
                            fieldStr(LedgerJournalTrans, OffsetAccountType),
                            enum2int(LedgerJournalACType::Bank),
                            dsDimensionCombination.name(),
                            fieldStr(DimensionAttributeValueCombination, LedgerDimensionType),
                            enum2int(LedgerDimensionType::Account),
                            fieldStr(DimensionAttributeValueCombination, DisplayValue),
                            bankAccountID));
                }
                else
                {
                    dsDimensionCombination
                        .addRange(fieldNum(DimensionAttributeValueCombination, LedgerDimensionType))
                        .value(queryValue(LedgerDimensionType::Account));
                    dsDimensionCombination
                        .addRange(fieldNum(DimensionAttributeValueCombination, DisplayValue))
                        .value(queryValue(bankAccountID));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs payment export via Electronic reporting.
    /// </summary>
    public void run()
    {
        setPrefix("@CashManagement:PaymentProcess");
        try
        {
            this.trackSequenceOnPaymMode();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoLT, #isoLV, #isoEE]))
            {
                this.initDocumentNum();
            }

            this.createFormatMappingRun()
                .withParameter(this.createParameters())
                .withFileDestination(fileDestination)
                .withPostProcessingTask(this)
                .withRunInBatchMode(isRunningOnBatch())
                .run();
        }
        catch
        {
            if (VendPaymERGenerateElectronicPaymNumFlight::instance().isEnabled() && VendPaymGenerateElectronicPaymNumInERFlight::instance().isEnabled())
            {
                this.reverseElectronicPaymentNumberForPaymentLines();
            }
            error("@CashManagement:PaymentsNotGenerated");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentNum</Name>
				<Source><![CDATA[
    private void initDocumentNum()
    {
        NumberSeq numberSeq;
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo(curExt());

        if (isoCode == #isoLT)
        {
            if (custVendPaymModeTable.NumberSequenceTable_LT)
            {
                numberSeq = NumberSeq::newGetNumFromId(custVendPaymModeTable.NumberSequenceTable_LT);
            }
        }
        else if (isoCode == #isoLV)
        {
            BankAccountTable bankAccountTable;

            select firstonly PaymOrderNumSeqId_W
                from bankAccountTable
                where bankAccountTable.AccountId == bankAccountID;

            if (!bankAccountTable.PaymOrderNumSeqId_W)
            {
                throw error(strFmt("@AccountsPayable:ErrorPaymentOrderNumerationIsEmpty"));
            }

            numberSeq = NumberSeq::newGetNumFromCode(bankAccountTable.PaymOrderNumSeqId_W);
        }

        Query emptyDocNumQuery = new Query (query);
        QueryBuildDataSource qbds = emptyDocNumQuery.dataSourceTable(tableNum(LedgerJournalTrans));

        findOrCreateRange_W(qbds, fieldNum(LedgerJournalTrans, DocumentNum), SysQuery::valueEmptyString());

        QueryRun queryRun = new QueryRun(emptyDocNumQuery);

        ttsbegin;

        while (queryRun.next())
        {
            LedgerJournalTrans ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            ledgerJournalTrans.DocumentNum = this.getDocumentNum(ledgerJournalTrans, isoCode, numberSeq);
            ledgerJournalTrans.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document number according to logistics address country/region code.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger journal transaction to take voucher number from.</param>
    /// <param name = "_isoCode">ISO country/region code.</param>
    /// <param name = "_numberSeq">Number sequence to ger new number from.</param>
    /// <returns>
    /// New number from number sequence if ISO code is LT or LV, Voucher number if ISO code is EE.
    /// </returns>
    protected DocumentNum getDocumentNum(
        LedgerJournalTrans _ledgerJournalTrans,
        LogisticsAddressCountryRegionISOCode _isoCode,
        NumberSeq _numberSeq)
    {
        DocumentNum documentNum;

        switch (_isoCode)
        {
            case #isoLT:
            case #isoLV:
                if (_numberSeq != null)
                {
                    documentNum = _numberSeq.num();
                }
                break;

            case #isoEE:
                documentNum = _ledgerJournalTrans.Voucher;
                break;

            default:
                break;
        }

        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentStatusToSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment status to "Sent" for payments returned by query.
    /// </summary>
    protected void updatePaymentStatusToSent()
    {
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        while (queryRun.next())
        {
            LedgerJournalTrans ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            this.updateLedgerJournalTransPaymentStatusToSent(ledgerJournalTrans);
        }

        if (!ledgerJournalId)
        {
            CustEinvoiceIntegrationTrans custEinvoiceIntegrationTrans;

            update_recordset custEinvoiceIntegrationTrans
                setting Sent = NoYes::Yes
                where custEinvoiceIntegrationTrans.Sent == NoYes::No
                    && custEinvoiceIntegrationTrans.Posted == NoYes::No
                    && custEinvoiceIntegrationTrans.Accepted == NoYes::Yes;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransPaymentStatusToSent</Name>
				<Source><![CDATA[
    protected void updateLedgerJournalTransPaymentStatusToSent(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
        _ledgerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentLines</Name>
				<Source><![CDATA[
    protected void updatePaymentLines()
    {
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        while (queryRun.next())
        {
            this.updatePaymentLine(queryRun.get(tableNum(LedgerJournalTrans)));
        }

        if (!ledgerJournalId)
        {
            CustEinvoiceIntegrationTrans custEinvoiceIntegrationTrans;

            update_recordset custEinvoiceIntegrationTrans
                setting Sent = NoYes::Yes
                where custEinvoiceIntegrationTrans.Sent == NoYes::No
                    && custEinvoiceIntegrationTrans.Posted == NoYes::No
                    && custEinvoiceIntegrationTrans.Accepted == NoYes::Yes;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentLine</Name>
				<Source><![CDATA[
    protected void updatePaymentLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.updateLedgerJournalTransPaymentStatusToSent(_ledgerJournalTrans);

        if (VendPaymGenerateElectronicPaymNumInERFlight::instance().isEnabled() && _ledgerJournalTrans.ElectronicPaymentNumber)
        {
            this.updatePaymRefAsElectronicPaymNumber(_ledgerJournalTrans);
        }
        else
        {
            this.updateElectronicPaymentNumber(_ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymRefAsElectronicPaymNumber</Name>
				<Source><![CDATA[
    private void updatePaymRefAsElectronicPaymNumber(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType journalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;
        if (this.shouldUpdateElectronicPaymentNumber(_ledgerJournalTrans, journalType))
        {
            _ledgerJournalTrans.PaymReference = _ledgerJournalTrans.ElectronicPaymentNumber;
            _ledgerJournalTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateElectronicPaymentNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void updateElectronicPaymentNumber(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType journalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;
        if (this.shouldUpdateElectronicPaymentNumber(_ledgerJournalTrans, journalType))
        {
            NumberSequenceReference numberSequenceReference = journalType == LedgerJournalType::Payment ?
                VendParameters::numRefElectronicPaymentReference() :
                PayrollParameters::numRefElectronicPaymentReference();
            if (numberSequenceReference.numberSequenceTable().Manual == NoYes::Yes && _ledgerJournalTrans.ElectronicPaymentNumber)
            {
                _ledgerJournalTrans.PaymReference = _ledgerJournalTrans.ElectronicPaymentNumber;
            }
            else if (numberSequenceReference.numberSequenceTable().Manual == NoYes::No && !_ledgerJournalTrans.ElectronicPaymentNumber)
            {
                VendorElectronicPaymentReference newPaymentReference = NumberSeq::newGetNum(numberSequenceReference).num();
                if (newPaymentReference)
                {
                    _ledgerJournalTrans.ElectronicPaymentNumber = newPaymentReference;
                    _ledgerJournalTrans.PaymReference = newPaymentReference;
                }
            }
            _ledgerJournalTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseElectronicPaymentNumberForPaymentLines</Name>
				<Source><![CDATA[
    private void reverseElectronicPaymentNumberForPaymentLines()
    {
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        while (queryRun.next())
        {
            boolean validated = this.reverseElectronicPaymentNumber(queryRun.get(tableNum(LedgerJournalTrans)));
            if (!validated)
            {
                break;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseElectronicPaymentNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean reverseElectronicPaymentNumber(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType journalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;
        if (this.shouldUpdateElectronicPaymentNumber(_ledgerJournalTrans, journalType))
        {
            NumberSequenceReference numberSequenceReference = journalType == LedgerJournalType::Payment ?
                VendParameters::numRefElectronicPaymentReference() :
                PayrollParameters::numRefElectronicPaymentReference();

            if (numberSequenceReference.numberSequenceTable().Manual == NoYes::No && _ledgerJournalTrans.ElectronicPaymentNumber)
            {
                _ledgerJournalTrans.ElectronicPaymentNumber = '';
            }
            _ledgerJournalTrans.doUpdate();

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateElectronicPaymentNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean shouldUpdateElectronicPaymentNumber(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalType _journalType)
    {
        return VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).PaymentType == PaymentType::ElectronicPayment
            && ((_journalType == LedgerJournalType::Payment && VendParameters::find().EnableElectronicPaymentNumber == NoYes::Yes)
                || (_journalType == LedgerJournalType::PayrollDisbursement && PayrollParameters::find().EnableElectronicPaymentNumber == NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllCustDirectDebitMandates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all customer direct debit mandates.
    /// </summary>
    protected void updateAllCustDirectDebitMandates()
    {
        LedgerJournalTrans ledgerJournalTrans;
        CustVendProcessedPayment custVendProcessedPayment;
        CompanyInfo companyInfo;
        CustBankAccount custBankAccount;
        BankAccountTable bankAccountTable = BankAccountTable::find(bankAccountID);

        while select crosscompany ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalId
                && ledgerJournalTrans.DirectDebitMandate != 0
        join companyInfo
            where companyInfo.DataArea == ledgerJournalTrans.dataAreaId
        join custBankAccount
            where custBankAccount.RecId == ledgerJournalTrans.CustBankAccount
        exists join TableId from custVendProcessedPayment
            where custVendProcessedPayment.JournalNum == ledgerJournalTrans.JournalNum
                && custVendProcessedPayment.RefRecId == ledgerJournalTrans.RecId
        {
            changecompany (ledgerJournalTrans.Company)
            {
                this.updateSingleCustDirectDebitMandate(ledgerJournalTrans, ledgerJournalTrans.DirectDebitMandate, custBankAccount, companyInfo, bankAccountTable);
            }
        }

        SpecTrans specTrans;
        CustTransOpen custTransOpen;
        CustTrans custTrans;
        CustTrans custTransInvoice;
        CustSettlement custSettlementInvoice;
        CustTrans custTransBillOfExchange;

        while select crossCompany ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalId
        join TableId from custVendProcessedPayment
            where custVendProcessedPayment.JournalNum == ledgerJournalTrans.JournalNum
                && custVendProcessedPayment.RefRecId == ledgerJournalTrans.RecId
        join companyInfo
            where companyInfo.DataArea == ledgerJournalTrans.dataAreaId
        join custBankAccount
            where custBankAccount.RecId == ledgerJournalTrans.CustBankAccount
        join TableId, RefCompany from specTrans
            where specTrans.SpecCompany == ledgerJournalTrans.dataAreaId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecTableId == ledgerJournalTrans.TableId
        join RefRecId from custTransOpen
            where custTransOpen.RecId == specTrans.RefRecId
                && custTransOpen.TableId == specTrans.RefTableId
                && custTransOpen.dataAreaId == specTrans.RefCompany
        join custTrans
            where custTrans.RecId == custTransOpen.RefRecId
        {
            if (custTrans.BillOfExchangeID)
            {
                while select crosscompany custTransInvoice
                join TableId, TransCompany from custSettlementInvoice
                    where custSettlementInvoice.OffsetCompany == custTransInvoice.dataAreaId
                        && custSettlementInvoice.OffsetRecid  == custTransInvoice.RecId
                join dataAreaId from custTransBillOfExchange
                    where custTransBillOfExchange.dataAreaId == custSettlementInvoice.TransCompany
                        && custTransBillOfExchange.RecId == custSettlementInvoice.TransRecId
                        && custTransBillOfExchange.BillOfExchangeID == custTrans.BillOfExchangeID
                        && custTransBillOfExchange.Voucher == custTrans.Voucher
                {
                    changecompany(custSettlementInvoice.TransCompany)
                    {
                        this.updateSingleCustDirectDebitMandate(ledgerJournalTrans, custTransInvoice.DirectDebitMandate, custBankAccount, companyInfo, bankAccountTable, custTrans);
                    }
                }
            }
            else
            {
                changecompany (specTrans.RefCompany)
                {
                    this.updateSingleCustDirectDebitMandate(ledgerJournalTrans, custTrans.DirectDebitMandate, custBankAccount, companyInfo, bankAccountTable, custTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleCustDirectDebitMandate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates single customer direct debit mandate.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger journal transaction used for udate.</param>
    /// <param name = "_mandateRecId">Customer direct debit mandate record Id.</param>
    /// <param name = "_custBankAccount">Customer bank account used for udate.</param>
    /// <param name = "_companyInfo">Company info used for udate.</param>
    /// <param name = "_bankAccountTable">Company bank account used for udate.</param>
    /// <param name = "_custTrans"><c>CustTrans</c> record used for mandate validation.</param>
    protected void updateSingleCustDirectDebitMandate(
        LedgerJournalTrans _ledgerJournalTrans,
        CustDirectDebitMandateRecId _mandateRecId,
        CustBankAccount _custBankAccount,
        CompanyInfo _companyInfo,
        BankAccountTable _bankAccountTable,
        CustTrans _custTrans = null)
    {
        if (!this.allowUpdateSingleCustDirectDebitMandate(_ledgerJournalTrans, _mandateRecId))
        {
            return;
        }

        ttsbegin;

        CustDirectDebitMandate::validateMandate(_mandateRecId, false, true, true, _custTrans);
        CustDirectDebitMandate custDirectDebitMandateLoc = CustDirectDebitMandate::find(_mandateRecId, true);

        if (custDirectDebitMandateLoc.RecId)
        {
            // Update the expiration date of the mandate and increment the usage count
            custDirectDebitMandateLoc.ExpirationDate = custDirectDebitMandateLoc.calculateExpirationDate(_ledgerJournalTrans.TransDate);
            custDirectDebitMandateLoc.increaseUsageCount();
            custDirectDebitMandateLoc.increaseLastLogNum();
            custDirectDebitMandateLoc.update();

            CustDirectDebitMandateLog custDirectDebitMandateLogLoc;
            custDirectDebitMandateLogLoc.Mandate = custDirectDebitMandateLoc.RecId;
            custDirectDebitMandateLogLoc.State   = CustDirectDebitMandateState::Generated;
            custDirectDebitMandateLogLoc.Voucher = _ledgerJournalTrans.Voucher;
            custDirectDebitMandateLogLoc.LogNum  = custDirectDebitMandateLoc.LastLogNum;
            custDirectDebitMandateLogLoc.insert();

            CustDirectDebitMandateLogHelper custDirectDebitMandateLogHelper = CustDirectDebitMandateLogHelper::newMandateLog(custDirectDebitMandateLogLoc.RecId);
            custDirectDebitMandateLogHelper.logLegalEntityName(_companyInfo.Name);
            custDirectDebitMandateLogHelper.logBankAccountDirectDebitId(_bankAccountTable.DebitDirectId);
            custDirectDebitMandateLogHelper.logBankAccountSwift(_bankAccountTable.SWIFTNo);
            custDirectDebitMandateLogHelper.logCustomerBankAccountSwift(_custBankAccount.SWIFTNo);

            unchecked (Uncheck::TableSecurityPermission)
            {
                custDirectDebitMandateLogHelper.logCustomerBankAccountIBAN(_custBankAccount.BankIBAN);
            }

            custDirectDebitMandateLogHelper.save();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateSingleCustDirectDebitMandate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the update for single customer direct debit mandate is allowed.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger journal transaction used for udate.</param>
    /// <param name = "_mandateRecId">Customer direct debit mandate record Id.</param>
    /// <returns>True if customer direct debit mandate record Id is present, otherwise false.</returns>
    protected boolean allowUpdateSingleCustDirectDebitMandate(LedgerJournalTrans _ledgerJournalTrans, CustDirectDebitMandateRecId _mandateRecId)
    {
        return _mandateRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerRemittanceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates customer remitance data.
    /// </summary>
    protected void updateCustomerRemittanceData()
    {
        QueryRun queryRun = new QueryRun(query);

        CustPaymRemittancePostERExport custPaymRemittancePostERExport = new CustPaymRemittancePostERExport();

        while (queryRun.next())
        {
            LedgerJournalTrans ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            custPaymRemittancePostERExport.postERExportUpdateData(
                ledgerJournalId,
                ledgerJournalTrans,
                erFileName,
                erBinding,
                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendProcessedPaymentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data for processed payments.
    /// </summary>
    protected void insertCustVendProcessedPaymentData()
    {
        // since we cannot create an update_recordset based on an existing query (with user selected ranges etc)
        // and we assume that most of the time no updates are done
        // we loop for updates only (not inserts, since those will be handled in an insert_recordset)
        // to speed things up
        Query updateQuery = new Query(query);

        updateQuery.clearAllFields();

        QueryBuildDataSource qbdsTrans = updateQuery.dataSourceTable(tableNum(LedgerJournalTrans));
        
        qbdsTrans.fields().dynamic(QueryFieldListDynamic::No);
        qbdsTrans.fields().clearFieldList();
        qbdsTrans.addSelectionField(fieldNum(LedgerJournalTrans, RecId));

        QueryBuildDataSource qbdsPayment = qbdsTrans.addDataSource(tableNum(CustVendProcessedPayment));
        qbdsPayment.fields().dynamic(QueryFieldListDynamic::No);
        qbdsPayment.fields().clearFieldList();

        qbdsPayment.joinMode(JoinMode::ExistsJoin);
        qbdsPayment.addLink(fieldNum(LedgerJournalTrans, JournalNum), fieldNum(CustVendProcessedPayment, JournalNum));
        qbdsPayment.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(CustVendProcessedPayment, RefRecId));

        QueryRun queryRun = new QueryRun(updateQuery);

        while (queryRun.next())
        {
            LedgerJournalTrans ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            CustVendProcessedPayment::logPaymentJournalLine(ledgerJournalId, ledgerJournalTrans.RecId);
        }

        // insert new processed payment data by using insert_recordset for the ones that do not exist yet,
        // so that we keep the ranges selected by the user
        // remove all fields except the fields we use in the insert statement
        Query insertQuery = new Query(query);

        insertQuery.clearAllFields();

        qbdsTrans = insertQuery.dataSourceTable(tableNum(LedgerJournalTrans));

        qbdsTrans.fields().dynamic(QueryFieldListDynamic::No);
        qbdsTrans.fields().clearFieldList();
        qbdsTrans.addSelectionField(fieldNum(LedgerJournalTrans, JournalNum));
        qbdsTrans.addSelectionField(fieldNum(LedgerJournalTrans, RecId));
        qbdsTrans.addSelectionField(fieldNum(LedgerJournalTrans, Voucher));

        qbdsPayment = qbdsTrans.addDataSource(tableNum(CustVendProcessedPayment));
        qbdsPayment.fields().dynamic(QueryFieldListDynamic::No);
        qbdsPayment.fields().clearFieldList();

        qbdsPayment.joinMode(JoinMode::NoExistsJoin);
        qbdsPayment.addLink(fieldNum(LedgerJournalTrans, JournalNum), fieldNum(CustVendProcessedPayment, JournalNum));
        qbdsPayment.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(CustVendProcessedPayment, RefRecId));

        Map mapping = new Map(Types::String, Types::Container);

        mapping.insert(fieldStr(CustVendProcessedPayment, JournalNum),[qbdsTrans.uniqueId(), fieldStr(LedgerJournalTrans, JournalNum)]);
        mapping.insert(fieldStr(CustVendProcessedPayment, RefRecId),[qbdsTrans.uniqueId(), fieldStr(LedgerJournalTrans, RecId)]);
        mapping.insert(fieldStr(CustVendProcessedPayment, OrigVoucher),[qbdsTrans.uniqueId(), fieldStr(LedgerJournalTrans, Voucher)]);

        CustVendProcessedPayment custVendProcessedPayment;

        Query::insert_recordset(custVendProcessedPayment, mapping, insertQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment status
    /// </summary>
    public void execute()
    {
        ttsbegin;

        if (CustPaymRemittancePostERExport::isERFormatMappingForCustomerBillOfExchangeRemittance(custVendPaymModeTable))
        {
            if (postERExportDataUpdateRequiredForCustomerRemittance)
            {
                this.updateCustomerRemittanceData();
            }
        }
        else
        {
            this.insertCustVendProcessedPaymentData();

            if (VendPaymERGenerateElectronicPaymNumFlight::instance().isEnabled())
            {
                this.updatePaymentLines();
            }
            else
            {
                this.updatePaymentStatusToSent();
            }
            this.updateAllCustDirectDebitMandates();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPacking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the object valid for packing.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean isValidForPacking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForPartiallyPacking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whether object is partially valid for packing.
    /// </summary>
    /// <returns>True if partially valid for packing; otherwise, return false.</returns>
    public boolean isValidForPartiallyPacking()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [erBinding,
            ledgerJournalId,
            bankAccountID,
            query.pack(),
            custVendPaymModeTable.TableId,
            custVendPaymModeTable.PaymMode,
            postERExportDataUpdateRequiredForCustomerRemittance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        TableId custVendPaymModeTableId;
        PaymMode custVendPaymMode;
        container packedQuery;

        [erBinding,
            ledgerJournalId,
            bankAccountID,
            packedQuery,
            custVendPaymModeTableId,
            custVendPaymMode,
            postERExportDataUpdateRequiredForCustomerRemittance] = packedClass;

        this.parmQuery(new Query(packedQuery));

        switch (custVendPaymModeTableId)
        {
            case tableNum(CustPaymModeTable):
                custVendPaymModeTable = CustPaymModeTable::find(custVendPaymMode);
                break;

            case tableNum(VendPaymModeTable):
                custVendPaymModeTable = VendPaymModeTable::find(custVendPaymMode);
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatMappingRunCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created ER format mapping run by parameters delegate
    /// </summary>
    /// <param name = "_sender">Sender object</param>
    /// <param name = "_parameters"><c>CustVendPaymERExportCreateFormatRunParameters</c> object</param>
    delegate void formatMappingRunCreated(Object _sender, CustVendPaymERExportCreateFormatRunParameters _parameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntegrationPoint</Name>
				<Source><![CDATA[
    protected ERIIntegrationPoint getIntegrationPoint()
    {
        Common paymModeTable = custVendPaymModeTable.data();
        if (paymModeTable.TableId == tableNum(CustPaymModeTable))
        {
            CustPaymModeTable custPaymModeTable = paymModeTable;
            if (custPaymModeTable.ExportRefund)
            {
                return new ERIntegrationPointFactory().WithTableRecordsIntegrationPoint(tableStr(CustTable)).ToIntegrationPoint();
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormatMappingRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ER format mapping run
    /// </summary>
    /// <returns>The instantiated <c>ERIFormatMappingRun</c> object</returns>
    private ERIFormatMappingRun createFormatMappingRun()
    {
        CustVendPaymERExportCreateFormatRunParameters parameters = CustVendPaymERExportCreateFormatRunParameters::newFromCustVendPaymERExport(this);
        
        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(parameters.parmFormatMappingId(), parameters.parmFileName(), parameters.parmShowPromptDialog());

        formatMappingRun.withIntegrationPoint(this.getIntegrationPoint());

        parameters.parmFormatMappingRun(formatMappingRun);

        this.formatMappingRunCreated(this, parameters);

        return formatMappingRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>