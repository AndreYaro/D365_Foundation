<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPTOReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to manage mixed license plate receiving for transfer orders.
/// </summary>
public abstract class WHSWorkExecuteDisplayMixedLPTOReceiving extends WHSWorkExecuteDisplayMixedLPReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransType</Name>
				<Source><![CDATA[
    protected InventTransType getInventTransType()
    {
        return InventTransType::TransferOrderReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected Common getOrderLine()
    {
        InventTransferLine inventTransferLine = InventTransferLine::find(pass.lookupStr(#TONum), pass.lookupNum(#TOLineNum));

        if (!inventTransferLine)
        {
            throw error(strFmt("@WAX:Error_TransferOrderLineNotFound", pass.lookupStr(#TONum), pass.lookupNum(#TOLineNum)));
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOrderNumValue</Name>
				<Source><![CDATA[
    protected boolean noOrderNumValue()
    {
        return (!pass.hasValue(#TONum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNum</Name>
				<Source><![CDATA[
    [SysObsolete('Use setOrderNumFromWorkLine instead', false, 20\07\2023)]
    protected void setOrderNum(InventTransId _inventTransId)
    {
        // Pass must have correct TONum for executing work.
        pass.insert(#TONum, InventTransferLine::findTransIdReceive(_inventTransId).TransferId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDeliveryMixedLP</Name>
				<Source><![CDATA[
    protected boolean checkOverDeliveryMixedLP(WHSMixedLicensePlateReceiptLine _mixedLPLines)
    {
        InventTransferLine transferLine = InventTransferLine::findTransIdShip(_mixedLPLines.InventTransId);

        if (pass.lookupNum(#NewQty) + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId) - _mixedLPLines.InventQty > transferLine.QtyRemainReceive)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    protected InventDim getInventDim(Common _common)
    {
        InventTransferLine inventTransferLine = _common;

        return inventTransferLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMixedLicensePlate</Name>
				<Source><![CDATA[
    protected void validateExistingMixedLicensePlate(WHSMixedLicensePlateReceipt _mixedLP)
    {
        if (_mixedLP.WorkTransType != WHSWorkTransType::TransferReceipt)
        {
            throw error("@WAX:MixedLPDiffWorkTransTypeError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentQtyUOM</Name>
				<Source><![CDATA[
    protected container setCurrentQtyUOM(
        container _con,
        Common	  _common)
    {
        InventTransferLine transferLine = _common;
        boolean isCWItem = this.isCatchWeightItem(_common);

        if (UnitOfMeasure::unitOfMeasureIdBySymbol(pass.lookup(#SelectedValueUOM)))
        {
            if (isCWItem)
            {
                pass.insert(#CurrentQty, EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(pass.parmItemId(),
                                                                                        (transferLine) ? transferLine.InventDimId : '',
                                                                                        pass.lookupNum(#Qty),
                                                                                        pass.parmSelectedValueUOM(),
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId()),
                                                                                        NoYes::No,
                                                                                        NoYes::Yes));
            }
            else
            {
                pass.insert(#CurrentQty, InventTableModule::unitConvert(pass.lookup(#ItemId),
                                                                        ModuleInventPurchSales::Invent,
                                                                        pass.lookup(#SelectedValueUOM),
                                                                        pass.lookupNum(#Qty),
                                                                        transferLine.InventDimId));
            }
        }

        pass.insert(#CurrentUOM, WHSCatchWeightHelper::inventHandlingUnitId(pass.lookup(#ItemId)));

        boolean	  overDeliveryBreak;
        container ret = _con;

        if (!pass.hasValue(#DimQty)
            &&  pass.lookupNum(#CurrentQty) + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId) > (isCWItem ? transferLine.PdsCWQtyRemainReceive : transferLine.QtyRemainReceive))
        {
            ret = conIns(ret, 1, conPeek(this.addErrorLabel(conNull(), "@WAX1172", WHSRFColorText::Error), 1));
            overDeliveryBreak = true;
        }

        return [ret, overDeliveryBreak];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptAtWarehouse</Name>
				<Source><![CDATA[
    protected void checkReceiptAtWarehouse(
        Common				_common,
        InventLocationId	_inventLocationId)
    {
        InventTransferLine transferLine = _common;
        InventLocationId   actualReceiptWarehouse = transferLine.inventDimReceive().InventLocationId;

        if (actualReceiptWarehouse != _inventLocationId
        && !InventSite::allowReceiptAtOtherWarehouse(actualReceiptWarehouse, _inventLocationId))
        {
            throw error("@WAX1239");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLPReceiptLine</Name>
				<Source><![CDATA[
    protected void createLPReceiptLine(
        Common			_common,
        InventDimId		_inventDimId,
        MenuItemName	_menuItemName)
    {
        InventTransferLine	inventTransferLine = _common;

        // Create record in received table.
        WHSMixedLicensePlateReceiptLine::mixedLPReceiveLine(_inventDimId,
                                                     inventTransferLine.InventTransId,
                                                     pass.parmCurrentQty(),
                                                     pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) ? pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                                                                    : pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume),
                                                     pass.lookup(#ReceiptId),
                                                     pass.lookup(#UserId),
                                                     _menuItemName,
                                                     pass.lookupStr(#LoadId),
                                                     pass.lookupStr(#ShipmentId),
                                                     pass.lookupStr(#ContainerType),
                                                     WHSWorkTransType::TransferReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfo</Name>
				<Source><![CDATA[
    protected container buildLPInfo(WHSLicensePlateId _licensePlateId)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        InventTransferLine              transferLine;
        container                       ret;
        int                             i;
        boolean                         callBuildLPInfoLine = WHSBuildLPInfoControlFlight::instance().isEnabled();

        while select InventTransId, LineNum, InventQty, CapturedWeight, InventDimId from mixedLPLines
            order by LineNum
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_licensePlateId).RecId
                join TransferId, ItemId, QtyTransfer, PdsCWQtyTransfer from  transferLine
                    where transferLine.InventTransId == mixedLPLines.InventTransId
        {
            if (callBuildLPInfoLine)
            {
                ret = this.buildLPInfoLine(ret, mixedLPLines, transferLine, i);
            }
            else
            {
                boolean isCWItem = this.isCatchWeightItem(transferLine);
            
                str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                        strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                        strFmt("@WAX3192", "@WAX3858", transferLine.TransferId),
                        strFmt("@WAX3192", "@WAX1240", transferLine.ItemId),
                        strFmt("@WAX3192", "@WAX:TOLineQty", isCWItem ? transferLine.PdsCWQtyTransfer : transferLine.QtyTransfer),
                        strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                        isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(transferLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                        strFmt("@WAX3192", "@SYS153282", InventTableModule::find(transferLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

                str trackingInfo;
            
                if (InventTable::find(transferLine.ItemId).productDimensionGroup())
                {
                    trackingInfo = this.getProductDimensionList(transferLine.ItemId, mixedLPLines.InventDimId);
                    lpInfo = lpInfo + trackingInfo;
                }

                using (var context = WHSWorkExecuteDisplayMixedLPLineContext::newFromMixedLPLine(mixedLPLines))
                {
                    if (this.captureTrackingDimensions(transferLine.ItemId))
                    {
                        trackingInfo = this.getTrackingInfoList(transferLine.ItemId, mixedLPLines.InventDimId);
                        lpInfo = lpInfo + trackingInfo;
                    }
                }

                ret += [this.buildControl(#RFLabel, int2str(i), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
            mixedLPHasLines = true;
            i++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfoLine</Name>
				<Source><![CDATA[
    protected container buildLPInfoLine(container _con, WHSMixedLicensePlateReceiptLine _mixedLPLines, InventTransferLine _transferLine, int _controlNum)
    {
        container ret = _con;

        boolean isCWItem = this.isCatchWeightItem(_transferLine);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                        strFmt("@WAX3192", "@SYS70473", _mixedLPLines.LineNum),
                        strFmt("@WAX3192", "@WAX3858", _transferLine.TransferId),
                        strFmt("@WAX3192", "@WAX1240", _transferLine.ItemId),
                        strFmt("@WAX3192", "@WAX:TOLineQty", isCWItem ? _transferLine.PdsCWQtyTransfer : _transferLine.QtyTransfer),
                        strFmt("@WAX3192", "@WAX:LPQty", _mixedLPLines.InventQty),
                        isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(_transferLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", _mixedLPLines.CapturedWeight)) : '',
                        strFmt("@WAX3192", "@SYS153282", InventTableModule::find(_transferLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        str trackingInfo;
            
        if (InventTable::find(_transferLine.ItemId).productDimensionGroup())
        {
            trackingInfo = this.getProductDimensionList(_transferLine.ItemId, _mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        using (var context = WHSWorkExecuteDisplayMixedLPLineContext::newFromMixedLPLine(_mixedLPLines))
        {
            if (this.captureTrackingDimensions(_transferLine.ItemId))
            {
                trackingInfo = this.getTrackingInfoList(_transferLine.ItemId, _mixedLPLines.InventDimId);
                lpInfo = lpInfo + trackingInfo;
            }
        }

        ret += [this.buildControl(#RFLabel, int2str(_controlNum), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModifyItemQtyStr</Name>
				<Source><![CDATA[
    protected str buildModifyItemQtyStr(
        WHSLicensePlateId _licensePlateId,
        Line              _mixedLineNum)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        InventTransferLine              transferLine;

        select firstOnly InventTransId, InventQty, CapturedWeight, LineNum, InventDimId from mixedLPLines
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(pass.lookup(#LicensePlateId)).RecId
            &&    mixedLPLines.LineNum               == str2int(pass.lookup(#MixedLPLineNum))
            join TransferId, ItemId, QtyTransfer, PdsCWQtyTransfer from transferLine
                where transferLine.InventTransId == mixedLPLines.InventTransId;

        boolean isCWItem = this.isCatchWeightItem(transferLine);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                        strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                        strFmt("@WAX3192", "@WAX3858", transferLine.TransferId),
                        strFmt("@WAX3192", "@WAX1240", transferLine.ItemId),
                        strFmt("@WAX3192", "@WAX:TOLineQty", isCWItem ? transferLine.PdsCWQtyTransfer : transferLine.QtyTransfer),
                        strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                        isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(transferLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                        strFmt("@WAX3192", "@SYS153282", InventTableModule::find(transferLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        using (var context = WHSWorkExecuteDisplayMixedLPLineContext::newFromMixedLPLine(mixedLPLines))
        {
            if (this.captureTrackingDimensions(transferLine.ItemId))
            {
                str trackingInfo = this.getTrackingInfoList(transferLine.ItemId, mixedLPLines.InventDimId);
                lpInfo = lpInfo + trackingInfo;
            }
        }

        return lpInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassWithSavedValues</Name>
				<Source><![CDATA[
    protected WhsrfPassthrough resetPassWithSavedValues(container _con)
    {
        InventTransferId saveTransferId = pass.lookup(#TONum);

        pass = this.resetPassthrough(_con, false);

        pass.insert(#TONum, saveTransferId);

        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightItem(Common _common)
    {
        InventTransferLine inventTransferLine = _common as InventTransferLine;

        return PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTaggedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight tag enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight tag enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightTaggedItem(Common _common)
    {
        InventTransferLine inventTransferLine = _common as InventTransferLine;

        return WHSInventTable::isCatchWeightTagTracked(inventTransferLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCaptureSerialOnReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given item needs to have serial numbers specified during receiving.
    /// </summary>
    /// <param name="_itemId">
    /// The item currently being received via the RF device.
    /// </param>
    /// <returns>
    /// true, if the serial number needs to be captured on receipt; otherwise false.
    /// </returns>
    /// <remarks>
    /// For transfer orders the serial must be captured on receipt if serial numbers are present on receipt transactions (synced from issue transactions). If not (no serial active or blank issue), do not capture serials.
    /// This behavior is aligned with WHSWorkExecuteDisplayTOReceiving.
    /// </remarks>
    protected boolean mustCaptureSerialOnReceipt(ItemId _itemId)
    {        
        InventTransferLine inventTransferLine;
        WHSMixedLicensePlateReceiptLine lpReceiptLine = WHSWorkExecuteDisplayMixedLPLineContext::currentMixedLPLine();

        if (lpReceiptLine)
        {
            inventTransferLine = InventTransferLine::findTransIdShip(lpReceiptLine.InventTransId);
        }
        else
        {
            inventTransferLine = this.getOrderLine();
        }
        
        return WHSInventTransferLine::existsReceiptTransWithSerial(inventTransferLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>