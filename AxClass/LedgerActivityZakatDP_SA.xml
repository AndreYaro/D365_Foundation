<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerActivityZakatDP_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerActivityZakatDP_SA</c> class is the RDP class that supports the
///    <c>LedgerActivityZakat_SA</c> report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>LedgerActivityZakat_SA</c> report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(LedgerActivityZakatContract_SA))
]
public class LedgerActivityZakatDP_SA extends SrsReportDataProviderPreProcessTempDB
{
    // source of report data
    GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
    GeneralJournalAccountEntry              generalJournalAccountEntry;

    // temporary data store
    LedgerActivityZakatTmp_SA               ledgerActivityZakatTmp;

    // Report parameters
    LedgerItemTypeZakat_SA                  itemType;
    LedgerFiscalYearZakat_SA                fiscalYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    private AmountCur amountCur()
    {
        AmountCur amountCur = GeneralJournalAccountEntryZakat_SA::getTotalAmountFromAccountNum(itemType, fiscalYear, generalJournalAccountEntry.RecId);

        if (itemType == LedgerItemTypeZakat_SA::OtherChargedItems ||
            itemType == LedgerItemTypeZakat_SA::OtherAddedItems ||
            itemType == LedgerItemTypeZakat_SA::PresettingExpenses)
        {
            amountCur += GeneralJournalAccountEntryZakat_SA::findOpeningBalance(generalJournalAccountEntry.RecId, fiscalYear, generalJournalAccountEntryZakat.ItemCode);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerActivityZakatTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>LedgerActivityZakatTmp_SA</c> table and returns the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('LedgerActivityZakatTmp')]
    public LedgerActivityZakatTmp_SA getLedgerActivityZakatTmp()
    {
        select * from ledgerActivityZakatTmp;
        return ledgerActivityZakatTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerActivityTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method inserts data into the temporary table.
    /// </summary>
    public void insertLedgerActivityTmp()
    {
        // write the relevant field data to the temporary data store
        ledgerActivityZakatTmp.Name = LedgerDimensionFacade::getMainAccountFromLedgerDimension(generalJournalAccountEntry.LedgerDimension).localizedName();
        ledgerActivityZakatTmp.Amount = this.amountCur();
        ledgerActivityZakatTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by
    ///    <c>LedgerActivityZakat_SA</c> report.
    /// </remarks>
    public void processReport()
    {
        LedgerItemCodeZakat_SA ledgerItemCode;

        // access the Report Data Contract information
        LedgerActivityZakatContract_SA contract = this.parmDataContract() as LedgerActivityZakatContract_SA;

        // retrieve the contract control parameters
        itemType = contract.parmItemType();
        fiscalYear = contract.parmFiscalYear();

        // create the data set based on the control parameters
        while select generalJournalAccountEntryZakat
            where generalJournalAccountEntryZakat.FiscalYr == fiscalYear
            join RecId, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntryZakat.GeneralJournalAccountEntry
            join ItemCode from ledgerItemCode
                where ledgerItemCode.ItemCode == generalJournalAccountEntryZakat.ItemCode &&
                    ledgerItemCode.ItemType == itemType
        {
            // insert a record into the temporary table buffer
            this.insertLedgerActivityTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>