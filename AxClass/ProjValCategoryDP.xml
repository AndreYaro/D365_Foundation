<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValCategoryDP</c> class is the report data provider class for the <c>ProjValCategory</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjValCategory)),
    SRSReportParameterAttribute(classStr(ProjValProjCategoryContract))
]
public class ProjValCategoryDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjValCategory             valCategory;

    ProjOptionTM                projTM;
    ProjOptionFixedPrice        projFixedPrice;
    ProjOptionInternal          projInternal;
    ProjOptionInvestment        projInvestment;
    ProjOptionTime              projTime;

    NoYes                       projTMBillingMethod;
    NoYes                       projFixedPriceBillingMethod;

    ProjOptionHours             categoryHour;
    ProjOptionItem              categoryItem;
    ProjOptionCost              categoryCost;
    ProjOptionRevenue           categoryRevenue;

    ProjValCategory             projValCategoryEnum;

    QueryBuildDataSource        qb_MainTable;
    QueryRun                    queryRun;

    ProjValProjectTmp           projValProjectTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existContractLine</Name>
				<Source><![CDATA[
    private boolean existContractLine(ProjInvoiceProjId _contractId)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsPSAContractLineItems = query.addDataSource(tableNum(PSAContractLineItems));
        PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
            qbdsPSAContractLineItems,
            projTMBillingMethod,
            projFixedPriceBillingMethod);
        PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
            qbdsPSAContractLineItems,
            categoryHour,
            categoryCost,
            categoryRevenue,
            categoryItem,
            false);
        qbdsPSAContractLineItems.addRange(fieldNum(PSAContractLineItems, ProjInvoiceProjId)).value(queryValue(_contractId));

        QueryRun qRun = new QueryRun(query);
        qRun.next();
        PSAContractLineItems psaContractLineItmes = qRun.get(tableNum(PSAContractLineItems));

        return psaContractLineItmes.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the parameter values and assign them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjValProjCategoryContract contract = this.parmDataContract() as ProjValProjCategoryContract;

        projTM = contract.parmTimeMaterial();
        projFixedPrice = contract.parmFixedPrice();
        projInvestment = contract.parmInvestment();
        projInternal = contract.parmInternalCost();
        projTime = contract.parmTime();

        projTMBillingMethod = contract.parmTimeMaterialBillingMethod();
        projFixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        categoryHour = contract.parmHour();
        categoryCost = contract.parmExpenses();
        categoryItem = contract.parmItem();
        categoryRevenue = contract.parmRevenue();

        projValCategoryEnum = contract.parmValCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjValProjectTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjValProjectTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjValProjectTmp')]
    public ProjValProjectTmp getProjValProjectTmp()
    {
        select * from projValProjectTmp;
        return projValProjectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ranges of a query.
    /// </summary>
    void initQuery()
    {
        int     occurrence;

        qb_MainTable    = queryRun.query().dataSourceTable(tableNum(ProjCategory));

        for (occurrence=1;occurrence<=4;occurrence++)
        {
            qb_MainTable.clearRange(fieldNum(ProjCategory,CategoryType),1);
        }

        if (categoryCost)
        {
            qb_MainTable.addRange(fieldNum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (categoryHour)
        {
            qb_MainTable.addRange(fieldNum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (categoryItem)
        {
            qb_MainTable.addRange(fieldNum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (categoryRevenue)
        {
            qb_MainTable.addRange(fieldNum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Revenue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values into a temporary table.
    /// </summary>
    /// <param name="_projTable">
    ///    A table buffer for the <c>ProjTable</c> table.
    /// </param>
    /// <param name="_projCategory">
    ///    A table buffer for the <c>ProjCategory</c> table.
    /// </param>
    /// <param name="_resource">
    ///    A table buffer for the <c>ResourceView</c> table.
    /// </param>
    private void insertProjValProjectTmp(ProjTable  _projTable, ProjCategory _projCategory, ResourceView _resource)
    {
        projValProjectTmp.clear();
        projValProjectTmp.ProjId = _projTable.ProjId;
        projValProjectTmp.Name = _projTable.Name;
        projValProjectTmp.CategoryId = _projCategory.CategoryId;
        projValProjectTmp.CategoryName = _projCategory.Name;
        projValProjectTmp.Resource = _resource.RecId;
        projValProjectTmp.ResourceId = _resource.ResourceId;
        projValProjectTmp.ResourceName = _resource.Name;
        projValProjectTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write report business logic. This method will be called by SSRS at runtime.
    ///    The method should be used to compute data and populate the data tables that will be returned to
    ///    SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjCategory                qr_ProjCategory;

        ProjTable                   projTable;
        ResourceView                resource;

        ProjValEmplCategorySetUp    projValEmplCategorySetUp1, projValEmplCategorySetUp2, projValEmplCategorySetUp3;
        ProjValProjCategorySetUp    projValProjCategorySetUp1, projValProjCategorySetUp2, projValProjCategorySetUp3;
        ProjValEmplProjSetup        projValEmplProjSetup1, projValEmplProjSetup2, projValEmplProjSetup3, projValEmplProjSetup4;
        PSAContractLineItems        psaContractLineItems;

        ProjCategoryId              prev_Id;

        projTable.recordLevelSecurity(true);
        resource.recordLevelSecurity(true);

        projValEmplCategorySetUp1.recordLevelSecurity(true);
        projValEmplCategorySetUp2.recordLevelSecurity(true);
        projValEmplCategorySetUp3.recordLevelSecurity(true);

        projValProjCategorySetUp1.recordLevelSecurity(true);
        projValProjCategorySetUp2.recordLevelSecurity(true);
        projValProjCategorySetUp3.recordLevelSecurity(true);

        projValEmplProjSetup1.recordLevelSecurity(true);
        projValEmplProjSetup2.recordLevelSecurity(true);
        projValEmplProjSetup3.recordLevelSecurity(true);
        projValEmplProjSetup4.recordLevelSecurity(true);

        this.getParameterValues();
        queryRun = new QueryRun(this.parmQuery());
        this.initQuery();
        boolean projMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        while (queryRun.next())
        {
            switch (projValCategoryEnum)
            {
                case ProjValCategory::Project:
                    qr_ProjCategory    = queryRun.get(tableNum(ProjCategory));

                    while select projValProjCategorySetUp1
                    where (projValProjCategorySetUp1.CategoryId == qr_ProjCategory.CategoryId) &&
                          (projValProjCategorySetUp1.ProjId || projValProjCategorySetUp1.GroupId)
                        join projValProjCategorySetUp2
                            where (projValProjCategorySetUp2.ProjId) &&
                                (
                                 ((projValProjCategorySetUp2.ProjId   == projValProjCategorySetUp1.ProjId)) ||
                                 ((projValProjCategorySetUp2.GroupId) && (projValProjCategorySetUp2.GroupId  == projValProjCategorySetUp1.GroupId))
                                )
                    join projTable group by ProjId, Name, ProjInvoiceProjId
                        where (projTable.ProjId == projValProjCategorySetUp2.ProjId) 
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || this.existContractLine(projTable.ProjInvoiceProjId))
                        {
                            if (qr_ProjCategory.CategoryId != prev_Id)
                            {
                                prev_Id = qr_ProjCategory.CategoryId;
                            }
                            this.insertProjValProjectTmp(projTable, qr_ProjCategory, resource);
                        }
                    }
                    break;

                case ProjValCategory::Employee:
                    qr_ProjCategory    = queryRun.get(tableNum(ProjCategory));

                    while select projValEmplCategorySetUp1
                    where (projValEmplCategorySetUp1.CategoryId == qr_ProjCategory.CategoryId) &&
                          (projValEmplCategorySetUp1.Resource || projValEmplCategorySetUp1.GroupId)
                    join projValEmplCategorySetUp2
                        where (projValEmplCategorySetUp2.Resource) &&
                            (
                             ((projValEmplCategorySetUp1.Resource)  && (projValEmplCategorySetUp2.Resource  == projValEmplCategorySetUp1.Resource)) ||
                             ((projValEmplCategorySetUp2.GroupId) && (projValEmplCategorySetUp2.GroupId == projValEmplCategorySetUp1.GroupId))
                            )
                    join resource group by RecId, Name, ResourceId
                        where resource.RecId == projValEmplCategorySetUp2.Resource
                    {
                        if (qr_ProjCategory.CategoryId != prev_Id)
                        {
                            prev_Id = qr_ProjCategory.CategoryId;
                        }
                        this.insertProjValProjectTmp(projTable, qr_ProjCategory, resource);
                    }
                    break;

                case ProjValCategory::ProjEmpl :
                    qr_ProjCategory    = queryRun.get(tableNum(ProjCategory));

                    while select projValProjCategorySetUp1
                    where (projValProjCategorySetUp1.CategoryId  == qr_ProjCategory.CategoryId)
                    join projValProjCategorySetUp2
                        where ((projValProjCategorySetUp2.GroupId    == projValProjCategorySetUp1.GroupId)    && projValProjCategorySetUp2.ProjId && projValProjCategorySetUp2.GroupId) ||
                              ((projValProjCategorySetUp2.CategoryId == projValProjCategorySetUp1.CategoryId) && projValProjCategorySetUp2.ProjId)
                    join projTable
                        group by ProjId, Name, ProjInvoiceProjId
                        where projTable.ProjId == projValProjCategorySetUp2.ProjId &&
                            ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    join projValEmplCategorySetUp1
                        where (projValEmplCategorySetUp1.CategoryId == qr_ProjCategory.CategoryId)
                    join projValEmplCategorySetUp2
                        where ((projValEmplCategorySetUp2.GroupId    == projValEmplCategorySetUp1.GroupId)      && projValEmplCategorySetUp2.Resource && projValEmplCategorySetUp2.GroupId) ||
                              ((projValEmplCategorySetUp2.CategoryId == projValEmplCategorySetUp1.CategoryId)   && projValEmplCategorySetUp2.Resource)
                    join resource
                        group by RecId, Name, ResourceId
                        where resource.RecId  == projValEmplCategorySetUp2.Resource
                    join RecId from projValEmplProjSetup3
                        where (projValEmplProjSetup3.Projid == projTable.ProjId)
                    join RecId from projValEmplProjSetup4
                        where ((projValEmplProjSetup4.GroupId  == projValEmplProjSetup3.GroupId)  && (projValEmplProjSetup4.Resource == resource.RecId) && projValEmplProjSetup4.GroupId) ||
                              ((projValEmplProjSetup4.Projid   == projValEmplProjSetup3.Projid)   && (projValEmplProjSetup4.Resource == resource.RecId))
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || this.existContractLine(projTable.ProjInvoiceProjId))
                        {
                            if (qr_ProjCategory.CategoryId != prev_Id)
                            {
                                prev_Id = qr_ProjCategory.CategoryId;
                            }

                            this.insertProjValProjectTmp(projTable, qr_ProjCategory, resource);
                        }
                    }
                    break;

                case ProjValCategory::EmplProj :
                    qr_ProjCategory    = queryRun.get(tableNum(ProjCategory));

                    while select projValProjCategorySetUp1
                    where (projValProjCategorySetUp1.CategoryId  == qr_ProjCategory.CategoryId)
                    join projValProjCategorySetUp2
                        where ((projValProjCategorySetUp2.GroupId    == projValProjCategorySetUp1.GroupId)    && projValProjCategorySetUp2.ProjId && projValProjCategorySetUp2.GroupId) ||
                              ((projValProjCategorySetUp2.CategoryId == projValProjCategorySetUp1.CategoryId) && projValProjCategorySetUp2.ProjId)
                    join projValEmplCategorySetUp1
                        where (projValEmplCategorySetUp1.CategoryId == qr_ProjCategory.CategoryId)
                    join projValEmplCategorySetUp2
                        where ((projValEmplCategorySetUp2.GroupId    == projValEmplCategorySetUp1.GroupId)      && projValEmplCategorySetUp2.Resource && projValEmplCategorySetUp2.GroupId) ||
                              ((projValEmplCategorySetUp2.CategoryId == projValEmplCategorySetUp1.CategoryId)   && projValEmplCategorySetUp2.Resource)
                    join projTable
                        group by ProjId, Name, ProjInvoiceProjId
                        where projTable.ProjId == projValProjCategorySetUp2.ProjId
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    join projValEmplProjSetup3
                        where (projValEmplProjSetup3.Projid == projTable.ProjId)
                    join resource
                        group by RecId, Name, ResourceId
                        where resource.RecId  == projValEmplCategorySetUp2.Resource
                    join projValEmplProjSetup4
                        where ((projValEmplProjSetup4.GroupId  == projValEmplProjSetup3.GroupId)  && (projValEmplProjSetup4.Resource == resource.RecId) && projValEmplProjSetup4.GroupId) ||
                              ((projValEmplProjSetup4.Projid   == projValEmplProjSetup3.Projid)   && (projValEmplProjSetup4.Resource == resource.RecId))
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || this.existContractLine(projTable.ProjInvoiceProjId))
                        {
                            if (qr_ProjCategory.CategoryId != prev_Id)
                            {
                                prev_Id = qr_ProjCategory.CategoryId;
                            }

                            this.insertProjValProjectTmp(projTable, qr_ProjCategory, resource);
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>