<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectOperationsIntegrationFeatureHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjProjectOperationsIntegrationFeatureHelper</c> is a helper class for the 'Project Operations Integration' feature company specific enablement.
/// </summary>
public final class ProjProjectOperationsIntegrationFeatureHelper
{
    private static ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjProjectOperationsIntegrationFeatureHelper));
    private static ProjOpsIntegrationInstrumentationActivites activity = logger.projOpsIntegrationActivity();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the feature is enabled for given company.
    /// </summary>
    /// <param name = "_dataAreaId">Company data area ID, optional, default to current company when not specified.</param>
    /// <returns>
    /// true if the feature is enabled for the company; otherwise false.
    /// </returns>
    [Hookable(false)]
    public static boolean isFeatureEnabled(DataAreaId _dataAreaId = curExt())
    {
        boolean ret;
        ProjParameters projParameters;

        SysInstrumentationActivityContext activityContext;
        boolean isProjOpsIntegrationInstrumentationFlightEnabled = ProjOpsIntegrationInstrumentationFlight::instance().isEnabled();

        if (isProjOpsIntegrationInstrumentationFlightEnabled)
        {
            activityContext = activity.featureStatusContext();
        }

        try
        {
            if (activityContext != null)
            {
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::Company, any2Str(_dataAreaId));
            }

            if (ProjProjectOperationsFeatureStateCacheFlight::instance().isEnabled())
            {
                container cacheKey = [strUpr(_dataAreaId)];
                container cachedResult = ProjCache::getValue(ProjCacheScope::ProjectOperationsIntegrationFeatureStatus, cacheKey);

                if (cachedResult == conNull() || conLen(cachedResult) == 0)
                {
                    projParameters = ProjProjectOperationsIntegrationFeatureHelper::getFeatureStateParameterForLE(_dataAreaId);
                    
                    if (projParameters)
                    {
                        // only update cache when ProjParameters is found.
                        ret = projParameters.ProjectOperationsIntegrationFeatureStatus == NoYes::Yes;
                        cachedResult = [ret];
                        ProjCache::insertValue(ProjCacheScope::ProjectOperationsIntegrationFeatureStatus, cacheKey, cachedResult);
                        if (activityContext != null)
                        {
                            logger.logInformation(strFmt("cachedResult is Null or Empty. Value inserted in cache for LE %1 = %2", _dataAreaId, any2Str(ret)));
                        }
                    }
                    else
                    {
                        ret = false;
                        if (activityContext != null)
                        {
                            logger.logInformation(strFmt("ProjParameters was not found or cannot be accessed for LE %1", _dataAreaId));
                        }
                    }
                }
                else
                {
                    ret = conpeek(cachedResult, 1);
                    if (activityContext != null)
                    {
                        logger.logInformation(strFmt("cachedResult for LE %1 = %2", _dataAreaId, any2Str(ret)));
                    }
                }
            }
            else
            {
                projParameters = ProjProjectOperationsIntegrationFeatureHelper::getFeatureStateParameterForLE(_dataAreaId);
                ret = projParameters && projParameters.ProjectOperationsIntegrationFeatureStatus == NoYes::Yes;
            }
        }
        finally
        {
            if (activityContext != null)
            {
                activityContext.Dispose();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureStateParameterForLE</Name>
				<Source><![CDATA[
    private static ProjParameters getFeatureStateParameterForLE(DataAreaId _dataAreaId = curExt())
    {
        ProjParameters projParameters;

        SysInstrumentationActivityContext activityContext;
        boolean isProjOpsIntegrationInstrumentationFlightEnabled = ProjOpsIntegrationInstrumentationFlight::instance().isEnabled();

        if (isProjOpsIntegrationInstrumentationFlightEnabled)
        {
            activityContext = activity.featureStatusContext();
        }

        try
        {
            unchecked (Uncheck::TableSecurityPermission)
            {
                select firstonly crossCompany ProjectOperationsIntegrationFeatureStatus from projParameters
                    where projParameters.DataAreaId == _dataAreaId;
            }
            boolean projOpsIntegrationFeatureStatus = projParameters.ProjectOperationsIntegrationFeatureStatus == NoYes::Yes;

            if (projOpsIntegrationFeatureStatus && !ProjStatusTypeRule::exist(ProjStatus::Created, ProjType::None, ProjStatusRule::AllowUse))
            {
                ProjStatusTypeRule::enableRulesForNoneTypeProj();
            }

            if (activityContext != null)
            {
                logger.logInformation(strFmt("ProjParameters.ProjectOperationsIntegrationFeatureStatus for LE %1 = %2", _dataAreaId, any2Str(projOpsIntegrationFeatureStatus)));
            }
        }
        finally
        {
            if (activityContext != null)
            {
                activityContext.Dispose();
            }
        }

        return projParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFeatureStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates feature enablement on the current company.
    /// </summary>
    /// <param name = "_featureStatus">Feature status to set.</param>
    public static void setFeatureStatus(ProjProjectOperationsIntegrationStatusToggle _featureStatus)
    {
        ttsbegin;
        ProjParameters projParameters = ProjParameters::find(true);
        projParameters.ProjectOperationsIntegrationFeatureStatus = _featureStatus;
        projParameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjectOrContractFromCE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any CE integrated project or contract exists.
    /// </summary>
    /// <returns>
    /// true if any CE project or contract exists; otherwise, false.
    /// </returns>
    public static boolean existProjectOrContractFromCE()
    {
        boolean ret = false;

        ProjDataSource projDataSource;
        select firstonly RecId from projDataSource
            where projDataSource.SourceId == ProjCDSConstants::PSADataSourceId;

        if (projDataSource.RecId)
        {
            ProjTable projTable;
            select firstonly RecId from projTable
                where projTable.ProjDataSource == projDataSource.RecId;

            ret = projTable.RecId != 0;

            if (!ret)
            {
                ProjInvoiceTable projInvoiceTable;
                select firstonly RecId from projInvoiceTable
                    where projInvoiceTable.ProjDataSource == projDataSource.RecId;

                ret = projInvoiceTable.RecId != 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseOrderEnabledWithProjOps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>ProjOpsSubcontractPurchaseOrderFeature</c> or <c>ProjOpsProjectPurchaseOrderFeature</c> is enabled with Project Operations integration for a company.
    /// </summary>
    /// <param name = "_projOpsEnabled">
    /// Boolean indicating whether project operations has been enabled; optional. The enablement of the project operations integration is explicitly checked if a value was not provided.
    /// </param>
    /// <returns>
    /// true if <c>ProjOpsSubcontractPurchaseOrderFeature</c> or <c>ProjOpsProjectPurchaseOrderFeature</c> is enabled with Project Operations integration; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isPurchaseOrderEnabledWithProjOps(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        return _projOpsEnabled && (Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ProjOpsSubcontractPurchaseOrderFeature::instance()) || Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ProjOpsProjectPurchaseOrderFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjOpsProjectPurchaseOrderFeatureEnabledForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>ProjOpsProjectPurchaseOrderFeature</c> is enabled with Project Operations integration for a company.
    /// </summary>
    /// <param name = "_projOpsEnabled">
    /// Boolean indicating whether project operations has been enabled; optional. The enablement of the project operations integration is explicitly checked if a value was not provided.
    /// </param>
    /// <returns>
    /// true if <c>ProjOpsProjectPurchaseOrderFeature</c> is enabled with Project Operations integration; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isProjOpsProjectPurchaseOrderFeatureEnabledForCompany(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        return _projOpsEnabled && Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ProjOpsProjectPurchaseOrderFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcurementIntegrationEnabledWithProjOps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>ProjProjectOperationsProcurementIntegrationFeature</c> is enabled with Project Operations integration for a company.
    /// </summary>
    /// <param name = "_projOpsEnabled">
    /// Boolean indicating whether project operations has been enabled; optional. The enablement of the project operations integration is explicitly checked if a value was not provided.
    /// </param>
    /// <returns>
    /// true if <c>ProjProjectOperationsProcurementIntegrationFeature</c> is enabled with Project Operations integration; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isProcurementIntegrationEnabledWithProjOps(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        return _projOpsEnabled && Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ProjProjectOperationsProcurementIntegrationFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcurementCategoriesEnabledWithProjOps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>ProjOpsEnableProcurementCategoriesFeature</c> is enabled with Project Operations integration for a company.
    /// </summary>
    /// <param name = "_projOpsEnabled">
    /// Boolean indicating whether project operations has been enabled; optional. The enablement of the project operations integration is explicitly checked if a value was not provided.
    /// </param>
    /// <returns>
    /// true if <c>ProjOpsEnableProcurementCategoriesFeature</c> is enabled with Project Operations integration; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isProcurementCategoriesEnabledWithProjOps(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        return _projOpsEnabled && Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(ProjOpsEnableProcurementCategoriesFeature::instance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>