<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceCalcTax_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInvoiceCalcTax_Table
extends CustInvoiceCalcTax
{
    QueryRun queryTransact;
    CustInvoiceTable custInvoiceTable;

    #ISOCountryRegionCodes
    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    AmountCur baseAmount(
        boolean _rounded = true
    )
    {
        AmountCur amountCur = this.transLineAmount();

        if (this.endDisc())
            amountCur -= amountCur * this.endDisc() / 100;

        return -this.baseAmountExclTax_W(-amountCur, _rounded, this.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountExclTax_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the line amount exclusive of any taxes.
    /// </summary>
    /// <param name="_amountCur">
    /// The line extended amount.
    /// </param>
    /// <param name="_rounded">
    /// True if amount is to be rounded, optional.
    /// </param>
    /// <param name="_tax">
    /// An instance of class <c>Tax</c> optional.
    /// </param>
    /// <returns>
    /// The line amount exclusive of any taxes.
    /// </returns>
    public AmountCur baseAmountExclTax_W(AmountCur _amountCur, boolean _rounded = true, Tax _tax = null)
    {
        return custInvoiceLine.amountExclTax_W(_amountCur, _rounded, _tax, false, custInvoiceTable.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountInclTax_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the line amount inclusive of any taxes.
    /// </summary>
    /// <returns>
    /// The line amount inclusive of any taxes.
    /// </returns>
    public AmountCur baseAmountInclTax_W()
    {
        AmountCur amountCur = this.transLineAmount();

        if (this.endDisc())
            amountCur -= amountCur * this.endDisc() / 100;

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmountCur calcTax(AmountCur _balance)
    {
        TaxCalculation taxCalculation;
        TaxAmountCur amountCur;
        boolean loadTaxUncommitted;
        CustInvoiceJour custInvoiceJour;

        balance = _balance;

        TaxUncommitted taxUncommited;

        select firstonly ExchRate from taxUncommited
            where taxUncommited.HeadingRecId == custInvoiceTable.RecId &&
                  taxUncommited.HeadingTableId == tableNum(CustInvoiceTable);

        if (taxUncommited.ExchRate && taxUncommited.ExchRate != decRound(this.exchRate(custInvoiceTable.InvoiceDate), numOfDec(taxUncommited.ExchRate)))
        {
            // Delete taxes so that they can be recreated with new exchange rates
            TaxUncommitted::deleteForDocumentHeader(tableNum(CustInvoiceTable), custInvoiceTable.RecId);
        }
        else
        {
            loadTaxUncommitted = TaxUncommitted::existByDocumentId(tableNum(CustInvoiceTable), custInvoiceTable.RecId);
        }

        taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::FreeTextInvoice, this, loadTaxUncommitted, false);

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            taxCalculation.parmVatRegData_W(this.vatRegData_W());
        }
        // </GEEU>

        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            select firstOnly LedgerVoucher from custInvoiceJour
            where custInvoiceJour.InvoiceId == custInvoiceTable.InvoiceId &&
                  custInvoiceJour.InvoiceDate == custInvoiceTable.InvoiceDate &&
                  custInvoiceJour.NumberSequenceGroup == custInvoiceTable.NumberSequenceGroup;

            if (!TaxTrans::exist(custInvoiceJour.LedgerVoucher, custInvoiceTable.InvoiceDate, this.transTransId()))
            {
                if (!loadTaxUncommitted && this.canRecalculateTax())
                {
                    amountCur = taxCalculation.calculateTax();
                }
                else
                {
                    amountCur = taxCalculation.totalTaxAmount();
                }
            }
            else
            {
                amountCur = Tax::taxTotal(custInvoiceJour.LedgerVoucher, custInvoiceTable.InvoiceDate);
            }
        }

        this.tax(taxCalculation);

        return -amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withhold tax for Free text invoice.
    /// </summary>
    /// <param name="_balance">
    /// The LineAmount.
    /// </param>
    /// <returns>
    /// Returns calculated withhold tax for Free text invoice.
    /// </returns>
    TaxAmountCur calcWithholdTax_IN(AmountCur _balance)
    {
        TaxWithholdCalculation_IN taxWithholdCalculation;
        TaxAmountCur taxWithholdAmountCur;
        boolean loadTaxWithholdUncommitted;
        Voucher ledgerVoucher;

        balance = _balance;

        loadTaxWithholdUncommitted = TaxWithholdUncommitted_IN::existByDocumentId(tableNum(CustInvoiceTable), custInvoiceTable.RecId);

        taxWithholdCalculation = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(TaxSourceType::FreeTextInvoice, this, loadTaxWithholdUncommitted, false);

        ledgerVoucher = custInvoiceTable.custInvoiceJour().LedgerVoucher;

        if (!TaxWithholdTrans_IN::exist(ledgerVoucher, custInvoiceTable.InvoiceDate))
        {
            if (!loadTaxWithholdUncommitted)
            {
                taxWithholdAmountCur = -taxWithholdCalculation.calculateTax();
            }
            else
            {
                taxWithholdAmountCur = -taxWithholdCalculation.totalTaxWithholdAmount();
            }
        }
        else
        {
            taxWithholdAmountCur = TaxWithholdTrans_IN::taxWithholdAmountForVoucherAndTransDate(ledgerVoucher, custInvoiceTable.InvoiceDate);
        }

        this.taxWithholdCalcFreeInvoice_IN(taxWithholdCalculation);

        return -taxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableRecID</Name>
				<Source><![CDATA[
    RecId custInvoiceTableRecID()
    {
        return custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableTableID</Name>
				<Source><![CDATA[
    TableId custInvoiceTableTableID()
    {
        return custInvoiceTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return custInvoiceTable.DocumentDate ? custInvoiceTable.DocumentDate : this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        CustInvoiceLine custInvoiceLineLocal;
        boolean taxGroupsExist;
        MarkupTrans markupTransLine;

        taxGroupsExist = true;

        select firstonly RecId from custInvoiceLineLocal
            where custInvoiceLineLocal.ParentRecId == custInvoiceTable.RecId
                && custInvoiceLineLocal.TaxGroup != ''
                && custInvoiceLineLocal.TaxItemGroup != '';

        if (!custInvoiceLineLocal)
        {
            if (!MarkupTrans::doTaxGroupExistsForMarkup(custInvoiceTable.TableId, custInvoiceTable.RecId))
            {
                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    select firstonly RecId from markupTransLine
                        where markupTransLine.TaxGroup != ''
                            && markupTransLine.TaxItemGroup != ''
                            && !markupTransLine.IsDeleted
                    exists join custInvoiceLineLocal
                        where custInvoiceLineLocal.ParentRecId == custInvoiceTable.RecId
                            && custInvoiceLineLocal.TableId == markupTransLine.TransTableId
                            && custInvoiceLineLocal.RecId == markupTransLine.TransRecId;

                    if (!markupTransLine)
                    {
                        taxGroupsExist = false;
                    }
                }
                else
                {
                    taxGroupsExist = false;
                }
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct endDisc()
    {
        return custInvoiceTable.discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            return custInvoiceTable.getExchRate(custInvoiceTable.getExchangeRateDate(_date));
        }
        else
        {
        // </GEEU>
            return custInvoiceTable.getExchRate(_date);
        // <GEEU>
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            return custInvoiceTable.getExchRateSecondary(custInvoiceTable.getExchangeRateDate(_date));
        }
        else
        {
        // </GEEU>
            return custInvoiceTable.getExchRateSecondary(_date);
        // <GEEU>
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRate</Name>
				<Source><![CDATA[
    CustExchRate reportingCurrencyExchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        date exchangeRateDate = _date;
        CustExchRate reportingCurrencyExchRate;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            exchangeRateDate = custInvoiceTable.getExchangeRateDate(_date);
        }
        reportingCurrencyExchRate = exchangeRateDate ? custInvoiceTable.getReportingCurrencyExchRate(exchangeRateDate) : 0;
        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary reportingCurrencyExchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        date exchangeRateDate = _date;
        CustExchRate reportingCurrencyExchRateSecondary;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            exchangeRateDate = custInvoiceTable.getExchangeRateDate(_date);
        }
        reportingCurrencyExchRateSecondary = exchangeRateDate ? custInvoiceTable.getReportingCurrencyExchRateSecondary(exchangeRateDate) : 0;
        return reportingCurrencyExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountPercent</Name>
				<Source><![CDATA[
    public DiscPct getCashDiscountPercent()
    {
        #ISOCountryRegionCodes
        DiscPct ret;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            ret = custInvoiceTable.CashDiscPercent;
        }
        else
        {
            ret = CashDisc::find(custInvoiceTable.CashDiscCode).Percent;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosted</Name>
				<Source><![CDATA[
    //Returns the posted flag for the current Invoice
    boolean getPosted()
    {
        return custInvoiceTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    //Returns the voucher number for the current invoice
    Voucher getVoucher()
    {
        CustTrans custTrans;
        select firstonly Voucher from custTrans
            where custTrans.Invoice == custInvoiceTable.InvoiceId &&
                custTrans.TransDate == custInvoiceTable.InvoiceDate ;
        return custTrans.Voucher ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherDate</Name>
				<Source><![CDATA[
    InvoiceDate getVoucherDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the invoice is tax include in price.
    /// </summary>
    /// <returns>
    /// Returns whether the invoice is tax include in price.
    /// </returns>
    public InclTax inclTax()
    {
        return custInvoiceTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDimension()
    {
        // This method was abstracted to TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerDimensionOfMarkup.
        // Please maintain the code logic in the abstracted method,
        // and call the abstracted method from here.

        if (custInvoiceLine)
        {
            return custInvoiceLine.DefaultDimension;
        }

        return custInvoiceTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source)
    {
        super(_source);

        custInvoiceTable = _source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        custInvoiceLine = null;

        while (queryTransact.next())
        {
            custInvoiceLine = this.queryGet(queryTransact);

            if (custInvoiceLine)
            {
                this.initCursorMarkup(custInvoiceLine.TableId, custInvoiceLine.RecId);
                break;
            }
        }

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionAccount operationAccount()
    {
        return custInvoiceLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionAccount operationAccountMarkup()
    {
        // This method was abstracted to TaxIntegrationCustInvoiceCalcTaxCommon::getOperationLedgerDimensionOfMarkup.
        // Please maintain the code logic in the abstracted method,
        // and call the abstracted method from here.

        LedgerDimensionAccount ledgerDimensionAccount;
        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item:
                if (custInvoiceLine)
                    ledgerDimensionAccount = custInvoiceLine.LedgerDimension;
                break;

            case MarkupType::LedgerAccount:
                ledgerDimensionAccount = markupTrans.markupTable().parmVendorLedgerDimension();
                break;

            case MarkupType::CustVend:
                ledgerDimensionAccount = markupTrans.markupTable().parmCustomerLedgerDimension();
                break;
        }

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        // This method was abstracted to TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerPostingTypeOfCustInvoiceLine.
        // Please maintain the code logic in the abstracted method,
        // and call the abstracted method from here.
        return LedgerPostingType::CustRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        // This method was abstracted to TaxIntegrationCustInvoiceCalcTaxCommon::getLedgerPostingTypeOfMarkup.
        // Please maintain the code logic in the abstracted method,
        // and call the abstracted method from here.
        LedgerPostingType ledgerPostingType;
        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item:
                if (custInvoiceLine)
                    ledgerPostingType = this.operationPosting();
                break;

            case MarkupType::LedgerAccount:
                ledgerPostingType = markupTrans.markupTable().VendPosting;
                break;

            case MarkupType::CustVend:
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTable</Name>
				<Source><![CDATA[
    CustInvoiceTable parmCustInvoiceTable(CustInvoiceTable _custInvoiceTable = custInvoiceTable)
    {
        custInvoiceTable = _custInvoiceTable;
        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    QueryRun queryBuild()
    {
        Query query = new Query();
        QueryRun queryRun;

        query.addDataSource(tableNum(CustInvoiceLine));
        query.dataSourceTable(tableNum(CustInvoiceLine)).addRange(fieldNum(CustInvoiceLine, ParentRecId)).value(queryValue(custInvoiceTable.RecId));

        queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    CustInvoiceLine queryGet(QueryRun _queryRun)
    {
        CustInvoiceLine queryCustInvoiceLine;

        if (_queryRun.changed(tableNum(CustInvoiceLine)))
            queryCustInvoiceLine = _queryRun.get(tableNum(CustInvoiceLine));

        return queryCustInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return custInvoiceLine.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return custInvoiceLine.UnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty transQty()
    {
        return custInvoiceLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return custInvoiceLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return custInvoiceLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            return custInvoiceTable.euroTriangulation(custInvoiceTable.getExchangeRateDate(_date));
        }
        else
        {
        // </GEEU>
            return custInvoiceTable.euroTriangulation(_date);
        // <GEEU>
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container which holds various tax related data.
    /// </summary>
    /// <returns>
    /// A container which holds various tax related data.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W vatDate;
        DocumentDate documentDate;
        PlCustVendName custVendName;
        VATNum vatNum;
        Addressing addressing;
        CustTable custTable;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        CzPostponeVAT postponeVAT;

        vatDate = custInvoiceTable.VatDueDate_W;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            documentDate = custInvoiceTable.DocumentDate;
            // <GEECZ>
            postponeVAT = custInvoiceTable.PostponeVAT && custInvoiceTable.showAmountMST() < 0;
            // </GEECZ>
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxPeriodPaymentCode = custInvoiceTable.TaxPeriodPaymentCode_PL;
            custTable = CustTable::find(custInvoiceTable.InvoiceAccount);
            custVendName = custTable.name();
            addressing = custTable.address();
            if (custInvoiceTable.VATNum)
            {
                vatNum = custInvoiceTable.VATNum;
            }
            else
            {
                vatNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, documentDate);
            }
        }

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 postponeVAT,
                 NoYes::No ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        boolean ret = true;

        if (custInvoiceTable.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(custInvoiceTable.SourceDocumentHeader);
        }

        if(TaxUncommitted::traceRecalculateTaxForFinalizedSourceDocument(ret))
        {
            str callStacking = TaxUncommitted::callStackInfo();
            taxEventSourceLog.RecalculateTaxForFinalizedSourceDocument(tableId2Name(tableNum(CustInvoiceTable)), custInvoiceTable.SourceDocumentHeader, callStacking);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is intercompany customer invoice.
    /// </summary>
    /// <returns>
    /// True if it is intercompany customer invoice, otherwise false
    /// </returns>
    internal boolean isProjIntercompany()
    {
        return custInvoiceTable.ProjIntercompany ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>