<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAggregatedWIPFlowModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostAggregatedInventoryFlowModel</c> class provides WIP cost flow data on aggregated level.
/// </summary>
class CostAggregatedWIPFlowModel extends CostAggregatedFlowModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostAggregatedWIPFlowModel construct()
    {
        return new CostAggregatedWIPFlowModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostStatementType</Name>
				<Source><![CDATA[
    protected CostStatementType parmCostStatementType()
    {
        return CostStatementType::WIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapQuery</Name>
				<Source><![CDATA[
    protected InventAgingICommand getMapQuery(QueryRun _queryRun)
    {
        return CostWIPStatementCmdMapQuery::newFromQueryRun(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCmdAggregate</Name>
				<Source><![CDATA[
    protected CostStatementCmdAggregate getCmdAggregate(InventAgingICommand _mapQuery, CostSelectPeriodState _period)
    {
        var aggregator = CostWIPStatementCmdAggregate::newFromParameters(_mapQuery);
        aggregator.parmFromDate(_period.parmFromDate());
        aggregator.parmToDate(_period.parmToDate());
        return aggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBalances</Name>
				<Source><![CDATA[
    protected void addBalances(CostStatementCmdAggregate _aggregator)
    {
        var wipCmdAggregator = _aggregator as CostWIPStatementCmdAggregate;

        if (!wipCmdAggregator)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var monthName = this.getLabelForDateRange(wipCmdAggregator.parmFromDate(), wipCmdAggregator.parmToDate());

        this.addBalance("@SCM:CostStatementBeginningBalance",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmBeginningBalance());
        this.addBalance("@SCM:CostStatementConsumedMaterialCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedMaterialCost());
        this.addBalance("@SCM:CostStatementConsumedManufacturingCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedManufacturingCost());
        this.addBalance("@SCM:CostStatementConsumedOutsourcingCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedOutsourcingCost());
        this.addBalance("@SCM:CostStatementConsumedIndirectCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmConsumedIndirectCost());
        this.addBalance("@SCM:CostStatementManufacturedCost",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmManufacturedCost());
        this.addBalance("@SCM:CostStatementVariances",
                        periodChangeLines,
                        monthName,
                        wipCmdAggregator.parmVariances());

        this.addBalance("@SCM:CostStatementEndingBalance",
                        endingBalanceLines,
                        monthName,
                        wipCmdAggregator.parmEndingBalance());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>