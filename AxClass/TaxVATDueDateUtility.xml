<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATDueDateUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxVATDueDateUtility</c> class is for VAT due date process.
/// </summary>
public class TaxVATDueDateUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isVATDueDateBasedOnPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT due date is related to posting date or not.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <returns>true if VAT due date is related to posting date; otherwise, false.</returns>
    static public boolean isVATDueDateBasedOnPostingDate(TaxGroupHeading _taxGroupHeading)
    {
        return (_taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::PostingDate
                || TaxVATDueDateUtility::isVATDueDatePostingDateCustomized(_taxGroupHeading));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATDueDateBasedOnDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT due date is related to document date or not.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <returns>true if VAT due date is related to document date; otherwise, false.</returns>
    static public boolean isVATDueDateBasedOnDocumentDate(TaxGroupHeading _taxGroupHeading)
    {
        return (_taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::DocumentDate
                || TaxVATDueDateUtility::isVATDueDateDocumentDateCustomized(_taxGroupHeading));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATDueDatePostingDateCustomized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT due date should be calculated based on posting date or not.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <returns>true if VAT due date is customized based on posting date; otherwise, false.</returns>
    static internal boolean isVATDueDatePostingDateCustomized(TaxGroupHeading _taxGroupHeading)
    {
        return (TaxVATDueDateCustomizeFeatureExposure::isEnabled()
                &&_taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::Customized
                && _taxGroupHeading.FillVATDueDateBasedOn == FillVATDueDateBasedOn::PostingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATDueDateDocumentDateCustomized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT due date should be calculated based on document date or not.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <returns>true if VAT due date is customized based on document date; otherwise, false.</returns>
    static internal boolean isVATDueDateDocumentDateCustomized(TaxGroupHeading _taxGroupHeading)
    {
        return (TaxVATDueDateCustomizeFeatureExposure::isEnabled()
                &&_taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::Customized
                && _taxGroupHeading.FillVATDueDateBasedOn == FillVATDueDateBasedOn::DocumentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateCustomized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the VAT due date when "Date of VAT register filling" is chosen as "Customize".
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <param name = "_postingDate">The posting date.</param>
    /// <param name = "_documentDate">The document date.</param>
    /// <returns>VAT due date calculated.</returns>
    static public VatDueDate_W calculateVATDueDateCustomized(TaxGroupHeading _taxGroupHeading, date _postingDate, date _documentDate)
    {
        VatDueDate_W vatDueDate_W;
        date dateBasedOn;
        if (TaxVATDueDateCustomizeFeatureExposure::isEnabled()
            && _taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::Customized)
        {
            switch (_taxGroupHeading.FillVATDueDateBasedOn)
            {
                case FillVATDueDateBasedOn::PostingDate :
                    dateBasedOn = _postingDate;
                    break;
                case FillVATDueDateBasedOn::DocumentDate :
                    dateBasedOn = _documentDate;
                    break;
            }
            vatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateCustomizedBasedOnPeriod(_taxGroupHeading, dateBasedOn);
        }
        return vatDueDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateBasedOnPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the VAT due date based on posting date.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <param name = "_postingDate">Posting date.</param>
    /// <returns>The VAT due date.</returns>
    static public VatDueDate_W calculateVATDueDateBasedOnPostingDate(TaxGroupHeading _taxGroupHeading, date _postingDate)
    {
        return TaxVATDueDateUtility::calculateVATDueDate(_taxGroupHeading, _postingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateBasedOnDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the VAT due date based on document date.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <param name = "_documentDate">Document date.</param>
    /// <returns>The VAT due date.</returns>
    static public VatDueDate_W calculateVATDueDateBasedOnDocumentDate(TaxGroupHeading _taxGroupHeading, date _documentDate)
    {
        return TaxVATDueDateUtility::calculateVATDueDate(_taxGroupHeading, _documentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the VAT due date.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <param name = "_dateBasedOn">The date that VAT due date should be calculated based on.</param>
    /// <returns>The VAT due date.</returns>
    static internal VatDueDate_W calculateVATDueDate(TaxGroupHeading _taxGroupHeading, date _dateBasedOn)
    {
        VatDueDate_W  vatDueDate;
        if (TaxVATDueDateCustomizeFeatureExposure::isEnabled()
            && _taxGroupHeading.FillVATDueDate_W == FillVATDueDate_W::Customized)
        {
            vatDueDate = TaxVATDueDateUtility::calculateVATDueDateCustomizedBasedOnPeriod(_taxGroupHeading, _dateBasedOn);
        }
        else
        {
            vatDueDate = _dateBasedOn;
        }
        return vatDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateCustomizedBasedOnPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the VAT due date for the given based on date.
    /// </summary>
    /// <param name = "_taxGroupHeading">The tax group heading.</param>
    /// <param name = "_dateBasedOn">The date that VAT due date should be calculated based on.</param>
    /// <returns>VAT due date calculated.</returns>
    static protected VatDueDate_W calculateVATDueDateCustomizedBasedOnPeriod(TaxGroupHeading _taxGroupHeading, date _dateBasedOn)
    {
        VatDueDate_W vatDueDate_W;
        if (_dateBasedOn)
        {
            utcdatetime dateBasedOnUTC = DateTimeUtil::newDateTime(_dateBasedOn, 0);
            utcdatetime vatDueDateUTC;
            switch (_taxGroupHeading.FillVATDueDatePeriod)
            {
                case FillVATDueDatePeriod::Day :
                    vatDueDateUTC = DateTimeUtil::addDays(dateBasedOnUTC, _taxGroupHeading.FillVATDueDatePeriodNumber);
                    break;
                case FillVATDueDatePeriod::Month :
                    vatDueDateUTC = DateTimeUtil::addMonths(dateBasedOnUTC, _taxGroupHeading.FillVATDueDatePeriodNumber);
                    break;
                case FillVATDueDatePeriod::Year :
                    vatDueDateUTC = DateTimeUtil::addYears(dateBasedOnUTC, _taxGroupHeading.FillVATDueDatePeriodNumber);
                    break;
            }
            vatDueDate_W = DateTimeUtil::date(vatDueDateUTC);
        }
        return vatDueDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineVATDueDateForVendDocumentTableMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines VAT due date for <c>VendDocumentTableMap</c> based on the VAT due date filling rule.
    /// </summary>
    /// <param name = "_vendDocumentTableMap">The table to set the VAT due date.</param>
    /// <param name = "_purchTable">The <c>PurchTable</c> that the _vendDocumentTableMap linked to.</param>
    /// <returns>VAT due date determined.</returns>
    public static VatDueDate_W determineVATDueDateForVendDocumentTableMap(VendDocumentTableMap _vendDocumentTableMap, PurchTable _purchTable)
    {
        VatDueDate_W vatDueDate;
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(tableNum(purchTable), _purchTable.RecId);
            if (!vatDueDate)
            {
                vatDueDate = TaxVATDueDateUtility::calculateVATDueDateManually(_vendDocumentTableMap, _purchTable);
            }
        }
        else
        {
            if (SalesTaxTransactionExchangeRate::findBySourceRecord(tableNum(purchTable), _purchTable.RecId))
            {
                vatDueDate = SalesTaxTransactionExchangeRate::findBySourceRecord(tableNum(purchTable), _purchTable.RecId).DateOfVATRegister;
            }
            else
            {
                vatDueDate = TaxVATDueDateUtility::calculateVATDueDateManually(_vendDocumentTableMap, _purchTable);
            }
        }

        return vatDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateManually</Name>
				<Source><![CDATA[
    private static VatDueDate_W calculateVATDueDateManually(VendDocumentTableMap _vendDocumentTableMap, PurchTable _purchTable)
    {
        VatDueDate_W vatDueDate;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        if (_vendDocumentTableMap is VendInvoiceInfoTable)
        {
            vendInvoiceInfoTable = _vendDocumentTableMap;
        }
        TaxGroup taxGroup = (vendInvoiceInfoTable.TaxGroup) ? vendInvoiceInfoTable.TaxGroup : _purchTable.TaxGroup;
        TaxGroupHeading taxGroupHeading = TaxGroupHeading::find(taxGroup);

        if (TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(taxGroupHeading))
        {
            vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(taxGroupHeading, _vendDocumentTableMap.TransDate);
        }
        else if (TaxVATDueDateUtility::isVATDueDateBasedOnDocumentDate(taxGroupHeading))
        {
            vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(taxGroupHeading, _vendDocumentTableMap.DocumentDate);
        }

        return vatDueDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>