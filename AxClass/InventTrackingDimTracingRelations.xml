<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingRelations</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingDimTracingRelations</c> class holds relation information for tracking dimension tracing transactions.
/// </summary>
class InventTrackingDimTracingRelations
{
    Map     inventDimTrackingInventTransNodeMap;
    Set     firstLevelNodes;
    Set     rootNodesSet;           // Set of nodes to use as root nodes - no sorting
    List    rootNodesList;          // Sorted list of nodes to use as root nodes
    Map     inventTransDTOMap;      // Map with all InventTransDTO objects used in any node
    Map     inventTransOriginDTOMap;   // Map with all InventTransOriginDTO objects used in any node

    // Current on hand for the top node i.e. the criteria
    InventQty                           currentOnHand;
    PdsCWInventQty                      currentOnHandCW;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        currentOnHand,
        currentOnHandCW
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBackwardRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified inventory transaction as a backward child node of the specified tracing node.
    /// </summary>
    /// <param name="_currentTransaction">
    ///    The tracing node.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the inventory transaction; optional.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The new tracing node for the inventory transaction..
    /// </returns>
    public InventDimTrackingInventTransNode addBackwardRelation(
        InventDimTrackingInventTransNode    _currentTransaction,
        InventTransOrigin                   _inventTransOrigin,
        InventTrans                         _inventTrans)
    {
        InventDimTrackingInventTransNode    relatedTransaction = this.inventTransNode(_inventTrans, _inventTransOrigin);

        _currentTransaction.parmBackwardNodesSet().add(relatedTransaction.tracingNodeKey());
        relatedTransaction.parmForwardNodesSet().add(_currentTransaction.tracingNodeKey());

        return relatedTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFirstLevelInventTransNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an inventory transaction as a first level node relative to the search criteria.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the inventory transaction.
    /// </param>
    /// <returns>
    ///    The new tracing node for the inventory transaction..
    /// </returns>
    public InventDimTrackingInventTransNode addFirstLevelInventTransNode(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin)
    {
        InventTransTrackingTransaction inventTransTrackingTransaction = InventTransTrackingTransaction::newFromInventTransAndInventTransOrigin(_inventTrans, _inventTransOrigin);
        return this.addFirstLevelNode(inventTransTrackingTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFirstLevelNode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimTrackingInventTransNode addFirstLevelNode(
        InventTrackingTransaction _trackingTransaction)
    {
        str                                 nodeKey = _trackingTransaction.tracingNodeKey();
        InventDimTrackingInventTransNode    inventDimTrackingInventTransNode;

        if (inventDimTrackingInventTransNodeMap.exists(nodeKey))
        {
            inventDimTrackingInventTransNode = inventDimTrackingInventTransNodeMap.lookup(nodeKey);
        }
        else
        {
            inventDimTrackingInventTransNode = _trackingTransaction.addTrackingNode(this);
        }

        firstLevelNodes.add(nodeKey);
        return inventDimTrackingInventTransNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForwardRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified inventory transaction as a forward child node of the specified tracing node.
    /// </summary>
    /// <param name="_currentTransaction">
    ///    The tracing node.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the inventory transaction; optional.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The new tracing node for the inventory transaction..
    /// </returns>
    public InventDimTrackingInventTransNode addForwardRelation(
        InventDimTrackingInventTransNode    _currentTransaction,
        InventTransOrigin                   _inventTransOrigin,
        InventTrans                         _inventTrans)
    {
        InventDimTrackingInventTransNode    relatedTransaction = this.inventTransNode(_inventTrans, _inventTransOrigin);

        _currentTransaction.parmForwardNodesSet().add(relatedTransaction.tracingNodeKey());
        relatedTransaction.parmBackwardNodesSet().add(_currentTransaction.tracingNodeKey());

        return relatedTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified inventory transaction as a transaction node.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the inventory transaction; optional.
    /// </param>
    /// <returns>
    ///    A transaction node.
    /// </returns>
    internal protected InventDimTrackingInventTransNode addInventTransNode(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin)
    {
        if (!_inventTrans.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        str nodeKey = InventTrackingDimTracingRelations::tracingNodeKey(_inventTrans.TableId, _inventTrans.RecId);

        InventTrackingDimTracingInventTransDTO inventTransDTO = this.inventTransDTO(_inventTrans);
        InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO = this.inventTransOriginDTO(_inventTrans.InventTransOrigin, _inventTransOrigin);

        InventDimTrackingInventTransNode inventDimTrackingInventTransNode = InventDimTrackingInventTransNode::newFromInventTransDTO(inventTransDTO, inventTransOriginDTO);
        inventDimTrackingInventTransNodeMap.insert(nodeKey, inventDimTrackingInventTransNode);

        return inventDimTrackingInventTransNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransDTO</Name>
				<Source><![CDATA[
    private InventTrackingDimTracingInventTransDTO inventTransDTO(InventTrans _inventTrans)
    {
        InventTrackingDimTracingInventTransDTO inventTransDTO;

        if (_inventTrans)
        {
            if (inventTransDTOMap.exists(_inventTrans.RecId))
            {
                inventTransDTO = inventTransDTOMap.lookup(_inventTrans.RecId);
            }
            else
            {
                inventTransDTO = InventTrackingDimTracingInventTransDTO::newFromInventTrans(_inventTrans);
                inventTransDTOMap.insert(_inventTrans.RecId, inventTransDTO);
            }
        }

        return inventTransDTO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginDTO</Name>
				<Source><![CDATA[
    private InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO(InventTransOriginId _inventTransOriginRecId, InventTransOrigin _inventTransOrigin = null)
    {
        InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO;

        if (_inventTransOriginRecId)
        {
            if (inventTransOriginDTOMap.exists(_inventTransOriginRecId))
            {
                inventTransOriginDTO = inventTransOriginDTOMap.lookup(_inventTransOriginRecId);
            }
            else 
            {
                InventTransOrigin inventTransOrigin = _inventTransOrigin ? _inventTransOrigin : InventTransOrigin::find(_inventTransOriginRecId);
                inventTransOriginDTO = InventTrackingDimTracingInventTransOriginDTO::newFromInventTransOrigin(inventTransOrigin);
                inventTransOriginDTOMap.insert(inventTransOrigin.RecId, inventTransOriginDTO);
            }
        }

        return inventTransOriginDTO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRootNodesList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensure that all nodes are either reachable from a root node or add it as a root node.
    /// </summary>
    /// <param name="_traceDirection">
    ///    The trace direction used in search.
    /// </param>
    protected void buildRootNodesList(ForwardBackward _traceDirection)
    {
        Set                                 nodesReachable = new Set(Types::String);
        SetEnumerator                       rootNodeEnumerator = rootNodesSet.getEnumerator();
        boolean                             cont = true;

        while (rootNodeEnumerator.moveNext())
        {
            // Add nodes reachable from this root node
            this.fillReachableNodes(this.nodeFromKey(rootNodeEnumerator.current()), _traceDirection, nodesReachable);
        }

        while (cont)
        {
            Set allNodesSet = inventDimTrackingInventTransNodeMap.domainSet();
            if (nodesReachable.elements() < allNodesSet.elements())
            {
                // Not all nodes are reachable - find the earlist unreachable node and add to set of root nodes
                Set unreachableNodesSet = Set::difference(allNodesSet, nodesReachable);
                // Sort the unreachable nodes
                List unreachableNodesList = this.nodeSet2List(unreachableNodesSet);
                int unreachableNodeCount = unreachableNodesList.elements();
                if (unreachableNodeCount > 0)
                {
                    ListEnumerator unreachableNodesListEnumerator = unreachableNodesList.getEnumerator();
                    if (_traceDirection == ForwardBackward::Forward)
                    {
                        // Move to the first element in the list
                        unreachableNodesListEnumerator.moveNext();
                    }
                    else
                    {
                        // Move to the last element in the list
                        while (unreachableNodeCount > 0)
                        {
                            unreachableNodesListEnumerator.moveNext();
                            unreachableNodeCount--;
                        }
                    }
                    InventDimTrackingInventTransNode node = this.nodeFromKey(unreachableNodesListEnumerator.current());
                    this.markAsRootNode(node);
                    // Add nodes reachable from this root node
                    this.fillReachableNodes(node, _traceDirection, nodesReachable);
                }
                else
                {
                    // Shouldn't happen, but ensuring that outer loop terminates.
                    cont = false;
                }
            }
            else
            {
                // All nodes are now reachable.
                cont = false;
            }
        }

        rootNodesList = this.nodeSet2List(rootNodesSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>childNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a sorted list of child nodes for the specified transaction node.
    /// </summary>
    /// <param name="_inventDimTrackingInventTransNode">
    ///    The transaction node.
    /// </param>
    /// <param name="_direction">
    ///    The direction in which child nodes are to be found.
    /// </param>
    /// <returns>
    ///    A list.
    /// </returns>
    public List childNodes(
        InventDimTrackingInventTransNode    _inventDimTrackingInventTransNode,
        ForwardBackward                     _direction)
    {
        Set             childNodes;

        switch (_direction)
        {
            case ForwardBackward::Forward:
                childNodes = _inventDimTrackingInventTransNode.parmForwardNodesSet();
                break;
            case ForwardBackward::Backward:
                childNodes = _inventDimTrackingInventTransNode.parmBackwardNodesSet();
                break;
        }

        return this.nodeSet2List(childNodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReachableNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fill the specified set with all nodes reachable from the specified node when searching in the given direction.
    /// </summary>
    /// <param name="_currentNode">
    ///    The starting node.
    /// </param>
    /// <param name="_traceDirection">
    ///    The trace direction used in search.
    /// </param>
    /// <param name="_alreadyVisitedNodes">
    ///    The set of nodes not to be searched as they have been handled already.
    /// </param>
    protected void fillReachableNodes(
        InventDimTrackingInventTransNode    _currentNode,
        ForwardBackward                     _traceDirection,
        Set                                 _alreadyVisitedNodes)
    {
        if (_alreadyVisitedNodes.in(_currentNode.tracingNodeKey()))
        {
            return;
        }

        // Mark the current node as visited
        _alreadyVisitedNodes.add(_currentNode.tracingNodeKey());

        // Find all nodes immediately reachable from current node
        List childNodes = this.childNodes(_currentNode, _traceDirection);
        if (childNodes)
        {
            // Find all nodes reachable from the child nodes
            ListEnumerator childNodesEnumerator = childNodes.getEnumerator();
            while (childNodesEnumerator.moveNext())
            {
                this.fillReachableNodes(this.nodeFromKey(childNodesEnumerator.current()), _traceDirection, _alreadyVisitedNodes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables.
    /// </summary>
    protected void init()
    {
        inventDimTrackingInventTransNodeMap     = new Map(Types::String, Types::Class);
        firstLevelNodes                         = new Set(Types::String);
        rootNodesSet                            = new Set(Types::String);
        inventTransDTOMap                       = new Map(Types::Int64, Types::Class);
        inventTransOriginDTOMap                 = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTrackingInventTransNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the set of <c>InventDimTrackingInventTransNode</c> objects.
    /// </summary>
    /// <returns>
    ///    A <c>Set</c> containing the <c>InventDimTrackingInventTransNode</c> objects.
    /// </returns>
    public Set inventDimTrackingInventTransNodes()
    {
        return inventDimTrackingInventTransNodeMap.valueSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates a transction tracing node for the specified inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record related to the inventory transaction; optional.
    /// </param>
    /// <returns>
    ///    A tracing node.
    /// </returns>
    public InventDimTrackingInventTransNode inventTransNode(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin)
    {
        if (!_inventTrans.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
                
        InventTransTrackingTransaction inventTransTrackingTransaction = 
            InventTransTrackingTransaction::newFromInventTransAndInventTransOrigin(_inventTrans, _inventTransOrigin);

        return this.transactionNode(inventTransTrackingTransaction);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionNode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimTrackingInventTransNode transactionNode(InventTrackingTransaction _trackingTransaction)
    {
        str nodeKey = _trackingTransaction.tracingNodeKey();

        if (inventDimTrackingInventTransNodeMap.exists(nodeKey))
        {
            return inventDimTrackingInventTransNodeMap.lookup(nodeKey);
        }

        return _trackingTransaction.addTrackingNode(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsRootNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the specified transaction node as a root node.
    /// </summary>
    /// <param name="_currentTransaction">
    ///    The transaction node to mark.
    /// </param>
    public void markAsRootNode(
        InventDimTrackingInventTransNode    _currentTransaction)
    {
        rootNodesSet.add(_currentTransaction.tracingNodeKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeFromKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the tracing node identified by the specified string.
    /// </summary>
    /// <param name="_transactionKey">
    ///    The string identifying the tracing node.
    /// </param>
    /// <returns>
    ///    A tracing node.
    /// </returns>
    /// <remarks>
    ///    The identifying string should be calculated using the tracingNodeKey method.
    /// </remarks>
    public InventDimTrackingInventTransNode nodeFromKey(str _transactionKey)
    {
        if (inventDimTrackingInventTransNodeMap.exists(_transactionKey))
        {
            return inventDimTrackingInventTransNodeMap.lookup(_transactionKey);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeSet2List</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts the transactions in the specified Set chronologically and returns the results in a list.
    /// </summary>
    /// <param name="_nodeSet">
    ///    The transactions to sort
    /// </param>
    /// <returns>
    ///    A list.
    /// </returns>
    protected List nodeSet2List(Set _nodeSet)
    {
        List nodeList = new List(Types::String);

        if (_nodeSet && _nodeSet.elements() > 0)
        {
            Set sortedInventTransRecIdSet = new Set(Types::Container);

            boolean includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

            SetEnumerator nodeSetEnumerator = _nodeSet.getEnumerator();
            while (nodeSetEnumerator.moveNext())
            {
                InventDimTrackingInventTransNode node = this.nodeFromKey(nodeSetEnumerator.current());

                if (includeWarehouseSpecificInventoryTransactions)
                {
                    node.addNodeContainerToSet(sortedInventTransRecIdSet);
                }
                else
                {
                    InventTrackingDimTracingInventTransDTO inventTransDTO = node.parmInventTransDTO();
                    InventTrackingDimTracingInventTransOriginDTO inventTransOriginDTO = node.parmInventTransOriginDTO();
                    // The set object automatically sorts its contents and the purpose of this code is to ensure that the inventory transactions are sorted by ItemId, StockQtyChangeDate, Originator, RecId
                    sortedInventTransRecIdSet.add([inventTransOriginDTO.itemId(), inventTransDTO.stockQtyChangeDate(), inventTransOriginDTO.recId(), inventTransDTO.recId()]);
                }
            }

            if (includeWarehouseSpecificInventoryTransactions)
            {
                SetEnumerator inventTransRecIdEnumerator = sortedInventTransRecIdSet.getEnumerator();
                while (inventTransRecIdEnumerator.moveNext())
                {
                    const int NodeTypePosition = 3;
                    container currentInventTransFieldsContainer = inventTransRecIdEnumerator.current();

                    InventTrackingTransactionType nodeType = conPeek(currentInventTransFieldsContainer, NodeTypePosition);

                    if (nodeType == InventTrackingTransactionType::WHSInventoryTransaction)
                    {
                        const int nodeKeyPosition = 6;

                        nodeList.addEnd(conPeek(currentInventTransFieldsContainer, nodeKeyPosition));
                    }
                    else
                    {
                        const int InventTransRecIdPosition = 5;
                        nodeList.addEnd(InventTrackingDimTracingRelations::tracingNodeKey(tableNum(InventTrans), conPeek(currentInventTransFieldsContainer, InventTransRecIdPosition)));
                    }
                }
            }
            else
            {
                SetEnumerator inventTransRecIdEnumerator = sortedInventTransRecIdSet.getEnumerator();
                while (inventTransRecIdEnumerator.moveNext())
                {
                    const int InventTransRecIdPosition = 4;
                    container currentInventTransFieldsContainer = inventTransRecIdEnumerator.current();
                    nodeList.addEnd(InventTrackingDimTracingRelations::tracingNodeKey(tableNum(InventTrans), conPeek(currentInventTransFieldsContainer, InventTransRecIdPosition)));
                }
            }
        }
        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        SysRecordMapSerializer mapSerializer = SysRecordMapSerializer::construct();

        return [#CurrentVersion, #CurrentList,
            inventDimTrackingInventTransNodeMap.pack(),
            firstLevelNodes.pack(),
            rootNodesSet.pack(),
            inventTransDTOMap.pack(),
            inventTransOriginDTOMap.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOnHand</Name>
				<Source><![CDATA[
    public InventQty parmCurrentOnHand(InventQty _currentOnHand = currentOnHand)
    {
        currentOnHand = _currentOnHand;

        return currentOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOnHandCW</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmCurrentOnHandCW(InventQty _currentOnHandCW = currentOnHandCW)
    {
        currentOnHandCW = _currentOnHandCW;

        return currentOnHandCW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstLevelNodes</Name>
				<Source><![CDATA[
    public Set parmFirstLevelNodes(Set _firstLevelNodes = firstLevelNodes)
    {
        firstLevelNodes = _firstLevelNodes;

        return firstLevelNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransDTOMap</Name>
				<Source><![CDATA[
    public Map parmInventTransDTOMap(Map _inventTransDTOMap = inventTransDTOMap)
    {
        inventTransDTOMap = _inventTransDTOMap;

        return inventTransDTOMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginDTOMap</Name>
				<Source><![CDATA[
    public Map parmInventTransOriginDTOMap(Map _inventTransOriginDTOMap = inventTransOriginDTOMap)
    {
        inventTransOriginDTOMap = _inventTransOriginDTOMap;

        return inventTransOriginDTOMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a sorted list of root nodes.
    /// </summary>
    /// <param name="_traceDirection">
    ///    The trace direction used in search.
    /// </param>
    /// <returns>
    ///    A list.
    /// </returns>
    public List rootNodes(ForwardBackward _traceDirection)
    {
        if (!rootNodesList)
        {
            this.buildRootNodesList(_traceDirection);
        }
        return rootNodesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer                             version     = conPeek(_packedClass,1);
        container                           packedInventDimTrackingInventTransNodeMap;
        container                           packedFirstLevelNodes;
        container                           packedRootNodesSet;
        container                           packedInventTransDTOMap;
        container                           packedInventTransOriginDTOMap;

        SysRecordMapSerializer              mapSerializer = SysRecordMapSerializer::construct();

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedInventDimTrackingInventTransNodeMap, packedFirstLevelNodes, packedRootNodesSet, packedInventTransDTOMap, packedInventTransOriginDTOMap] = _packedClass;
                inventDimTrackingInventTransNodeMap = Map::create(packedInventDimTrackingInventTransNodeMap);
                firstLevelNodes = Set::create(packedFirstLevelNodes);
                rootNodesSet = Set::create(packedRootNodesSet);

                inventTransDTOMap = Map::create(packedInventTransDTOMap);
                inventTransOriginDTOMap = Map::create(packedInventTransOriginDTOMap);
                SetEnumerator nodeSetEnumerator = this.inventDimTrackingInventTransNodes().getEnumerator();
                while (nodeSetEnumerator.moveNext())
                {
                    InventDimTrackingInventTransNode node = nodeSetEnumerator.current();
                    node.initFromInventTransDTOMap(inventTransDTOMap);
                    node.initFromInventTransOriginDTOMap(inventTransOriginDTOMap);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingDimTracingRelations construct()
    {
        return new InventTrackingDimTracingRelations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingDimTracingRelations</c> class and initialize it based on a packed version of the class data.
    /// </summary>
    /// <param name="_packedValues">
    ///    The packed version of the class data.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingDimTracingRelations</c> class.
    /// </returns>
    public static InventTrackingDimTracingRelations create(container _packedValues)
    {
        InventTrackingDimTracingRelations   inventTrackingDimTracingRelations = InventTrackingDimTracingRelations::construct();

        inventTrackingDimTracingRelations.unpack(_packedValues);
        return inventTrackingDimTracingRelations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tracingNodeKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generate a unique key for the specified record used for caching purposes.
    /// </summary>
    /// <param name="_tableId">
    ///    The <c>TableID</c> of the record.
    /// </param>
    /// <param name="_refRecId">
    ///    The <c>RecID</c> of the record.
    /// </param>
    /// <returns>
    ///    A string.
    /// </returns>
    static public str tracingNodeKey(
        TableId                 _tableId,
        RefRecId                _refRecId)
    {
        Debug::assert(_refRecId != 0);

        return strFmt('%1#%2', _tableId, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBackwardRelationBetweenNodes</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void  addBackwardRelationBetweenNodes(
        InventDimTrackingInventTransNode    _currentTransaction,
        InventDimTrackingInventTransNode    _relatedTransaction
        )
    {
        _currentTransaction.parmBackwardNodesSet().add(_relatedTransaction.tracingNodeKey());
        _relatedTransaction.parmForwardNodesSet().add(_currentTransaction.tracingNodeKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForwardRelationBetweenNodes</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addForwardRelationBetweenNodes(
        InventDimTrackingInventTransNode    _currentTransaction,
        InventDimTrackingInventTransNode    _relatedTransaction)
    {
        _currentTransaction.parmForwardNodesSet().add(_relatedTransaction.tracingNodeKey());
        _relatedTransaction.parmBackwardNodesSet().add(_currentTransaction.tracingNodeKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWHSInventoryTransactionNode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimTrackingInventTransNode addWHSInventoryTransactionNode(
        InventTrackingDimTracingWHSInventoryTransactionDTO _whsInventoryTransactionDTO, str _nodeKey)
    {
        InventDimTrackingInventTransNode inventDimTrackingInventTransNode = InventDimTrackingWHSInventoryTransactionNode::newFromWHSInventoryTransDTO(_whsInventoryTransactionDTO);

        inventDimTrackingInventTransNodeMap.insert(_nodeKey, inventDimTrackingInventTransNode);

        return inventDimTrackingInventTransNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>