<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBZReportTaxSummarizer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBZReportTaxSummarizer_BR</c> class helps summarizing all taxes related to a Z report.
/// </summary>
public class FBZReportTaxSummarizer_BR
{
    RetailZReport_BR    retailZReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existsTaxType</Name>
				<Source><![CDATA[
/// <summary>
    ///     Determines whether there exists at least one tax transaction of the specified type for the Z Report.
    /// </summary>
    /// <param name="_taxType">
    ///     The enum <c>TaxType_BR</c> representing the type of the tax transaction.
    /// </param>
    /// <returns>
    ///     True if there exists at least one tax transacion of the specified type; false otherwise.
    /// </returns>
    public boolean existsTaxType(TaxType_BR _taxType)
    {
        boolean                             ret;

        if (_taxType == TaxType_BR::ICMS)
        {
            ret = this.getZReportTotalizerTaxTrans().RecId;
        }
        else
        {
            ret = this.getFiscalReceiptTaxTransByTaxType(_taxType).RecId;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTaxAmount</Name>
				<Source><![CDATA[
/// <summary>
    ///     Gets the Z Report tax amount for the specified tax type.
    /// </summary>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> representing the type of the tax.
    /// </param>
    /// <returns>
    ///     The tax amount of the specified tax type occuring in the Z Report.
    /// </returns>
    public TaxAmount getDocumentTaxAmount(TaxType_BR _taxType)
    {
        TaxAmount   taxAmount;

        if (_taxType == TaxType_BR::ICMS)
        {
            taxAmount = this.getZReportTotalizerTaxTrans().taxAmount;
        }
        else
        {
            taxAmount = this.getFiscalReceiptTaxTransByTaxType(_taxType).taxAmount;
        }

        return taxAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTaxBaseAmount</Name>
				<Source><![CDATA[
/// <summary>
    ///     Gets the Z Report tax base amount for the specified tax type.
    /// </summary>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> representing the type of the tax.
    /// </param>
    /// <returns>
    ///     The tax base amount of the specified tax type occuring in the Z Report.
    /// </returns>
    public TaxBaseCur getDocumentTaxBaseAmount(TaxType_BR _taxType)
    {
        TaxBaseCur                          taxBaseAmount;

        if (_taxType == TaxType_BR::ICMS)
        {
            taxBaseAmount = this.getZReportTotalizerTaxTrans().TaxBaseAmount;
        }
        else
        {
            taxBaseAmount = this.getFiscalReceiptTaxTransByTaxType(_taxType).TaxBaseAmount;
        }

        return taxBaseAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>FBZReportTaxSummarizer_BR</c> class.
    /// </summary>
    /// <param name="_retailZReport">
    ///     A <c>RetailZReport_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    public void new(RetailZReport_BR _retailZReport)
    {
        retailZReport  = _retailZReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of class <c>FBZReportTaxSummarizer_BR</c>.
    /// </summary>
    /// <param name="_retailZReport">
    ///     A <c>RetailZReport_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBFiscalReceiptTaxSummarizer_BR</c> class.
    /// </returns>
    public static FBZReportTaxSummarizer_BR construct(RetailZReport_BR _retailZReport)
    {
        FBZReportTaxSummarizer_BR zReportTaxSummarizer = new FBZReportTaxSummarizer_BR(_retailZReport);

        return zReportTaxSummarizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalReceiptTaxTransByTaxType</Name>
				<Source><![CDATA[
    private RetailFiscalReceiptTaxTrans_BR getFiscalReceiptTaxTransByTaxType(TaxType_BR _taxType)
    {
        RetailFiscalReceipt_BR              retailFiscalReceipt;
        RetailFiscalReceiptLine_BR          retailFiscalReceiptLine;
        RetailFiscalReceiptTaxTrans_BR      retailFiscalReceiptTaxTrans;

        select count(RecId), sum(TaxBaseAmount), sum(TaxAmount)
            from retailFiscalReceiptTaxTrans
            exists join retailFiscalReceiptLine
            where  retailFiscalReceiptTaxTrans.StoreId                  == retailFiscalReceiptLine.StoreId
                    && retailFiscalReceiptTaxTrans.TerminalId           == retailFiscalReceiptLine.TerminalId
                    && retailFiscalReceiptTaxTrans.TransactionId        == retailFiscalReceiptLine.TransactionId
                    && retailFiscalReceiptTaxTrans.LineNum              == retailFiscalReceiptLine.LineNum
                    && retailFiscalReceiptTaxTrans.TaxType              == _taxType
            exists join retailFiscalReceipt
            where  retailFiscalReceiptLine.StoreId                      == retailFiscalReceipt.StoreId
                    && retailFiscalReceiptLine.TerminalId               == retailFiscalReceipt.TerminalId
                    && retailFiscalReceiptLine.TransactionId            == retailFiscalReceipt.TransactionId
                    && retailFiscalReceipt.FiscalPrinterSerialNumber    == retailZReport.FiscalPrinterSerialNumber
                    && retailFiscalReceipt.ZReportNumber                == retailZReport.ZReportNumber
                    && retailFiscalReceipt.AdditionalFiscalMemoryIndex  == retailZReport.AdditionalFiscalMemoryIndex;

        return retailFiscalReceiptTaxTrans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getZReportTotalizerTaxTrans</Name>
				<Source><![CDATA[
    private RetailZReportTotalizerTaxTrans_BR getZReportTotalizerTaxTrans()
    {
        RetailZReportTotalizerTaxTrans_BR   retailZReportTotalizerTaxTrans;
        RetailZReportTotalizer_BR           retailZReportTotalizer;

        select count(RecId), sum(TaxBaseAmount), sum(TaxAmount)
            from retailZReportTotalizerTaxTrans
            exists join retailZReportTotalizer
                where retailZReportTotalizer.ZReportNumber                      == retailZReport.ZReportNumber
                && retailZReportTotalizer.FiscalPrinterSerialNumber             == retailZReport.FiscalPrinterSerialNumber
                && retailZReportTotalizer.AdditionalFiscalMemoryIndex           == retailZReport.AdditionalFiscalMemoryIndex
                && retailZReportTotalizerTaxTrans.ZReportNumber                 == retailZReportTotalizer.ZReportNumber
                && retailZReportTotalizerTaxTrans.FiscalPrinterSerialNumber     == retailZReportTotalizer.FiscalPrinterSerialNumber
                && retailZReportTotalizerTaxTrans.AdditionalFiscalMemoryIndex   == retailZReportTotalizer.AdditionalFiscalMemoryIndex
                && retailZReportTotalizerTaxTrans.TotalizerName                 == retailZReportTotalizer.TotalizerName
                && retailZReportTotalizerTaxTrans.TaxType                       == TaxType_BR::ICMS;

        return retailZReportTotalizerTaxTrans;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>