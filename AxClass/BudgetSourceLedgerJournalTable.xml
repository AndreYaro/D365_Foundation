<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceLedgerJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceLedgerJournalTable</c> class is responsible for the data management of a
///    collection of <c>BudgetSource</c> records that are related to the <c>LedgerJournalTrans</c> records
///    that belong to the specified <c>LedgerJournalTable</c> record.
/// </summary>
public class BudgetSourceLedgerJournalTable extends BudgetSourceCollectionIntegrator
{
    LedgerJournalTable ledgerJournalTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBudgetSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a set of ID values for the <c>BudgetSource</c> records that are associated with the
    ///    <c>LedgerJournalTrans</c> records that belong to the same specified <c>LedgerJournalTable</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    A set of ID values for the associated <c>BudgetSource</c> records.
    /// </returns>
    public Set findBudgetSourceIds()
    {
        BudgetSource budgetSource;
        Set budgetSourceIds = new Set(typeName2Type(extendedtypestr(recId)));
        RecId legalEntity = CompanyInfo::findDataArea(curext()).RecId;

        // Adding ranges for all the alternate key fields of budget source table
        // for performance reason.
        while select RecId from budgetSource
            where  (budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry &&
                    budgetSource.BudgetTransactionLine == 0 &&
                    budgetSource.SourceDocumentLine == 0 &&
                    budgetSource.LedgerEntryGeneralJournalEntry == 0 &&
                    budgetSource.LedgerEntryJournalNumber == ledgerJournalTable.JournalNum &&
                    budgetSource.LedgerEntryJournalLegalEntity == legalEntity)
        {
            budgetSourceIds.add(budgetSource.RecId);
        }

        return budgetSourceIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> value that is associated with the specified <c>Common</c> record.
    /// </summary>
    /// <param name="_doCheckLedgerBudgetControlEnabled">
    /// A Boolean value that indicates whether to check that budget control is enabled on the primary
    /// ledger of the current legal entity before trying to get the <c>BudgetCheckResult</c> value;
    /// optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value of the <c>BudgetSource</c> record that is associated with the
    /// <c>Common</c> record.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult(boolean _doCheckLedgerBudgetControlEnabled = true)
    {
        BudgetCheckResult budgetCheckResult;

        budgetCheckResult = BudgetSourceLedgerJournalTable::findBudgetCheckResult(ledgerJournalTable.RecId);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable = ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;

        commonId = ledgerJournalTable.RecId;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBudgetSourceByDraftLedgerReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether a <c>BudgetSource</c> record exists
    /// for the specified draft legal entity data area and journal batch number.
    /// </summary>
    /// <param name="_journalBatchNumberLegalEntityDataArea">
    /// The legal entity data area.
    /// </param>
    /// <param name="_journalBatchNumber">
    /// The journal batch number.
    /// </param>
    /// <returns>
    /// true if a <c>BudgetSource</c> record exists for the specified draft legal
    /// entity data area and journal batch number; otherwise, false.
    /// </returns>
    public static boolean existsBudgetSourceByDraftLedgerReference(
        DataAreaId _journalBatchNumberLegalEntityDataArea,
        LedgerJournalId _journalBatchNumber)
    {
        BudgetSource budgetSource;

        // Adding ranges for all the alternate key fields of budget source table
        // in a specified order for performance reason.
        select firstOnly RecId from budgetSource
            where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                && budgetSource.BudgetTransactionLine == 0
                && budgetSource.SourceDocumentLine == 0
                && budgetSource.LedgerEntryGeneralJournalEntry == 0
                && budgetSource.LedgerEntryJournalNumber == _journalBatchNumber
                && budgetSource.LedgerEntryJournalLegalEntity == CompanyInfo::current(_journalBatchNumberLegalEntityDataArea);

        return budgetSource != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetCheckResult</c> enumeration value that is calculated for the
    /// <c>LedgerJournalTable</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTableId">
    /// The record ID of the <c>LedgerJournalTable</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> enumeration value that is calculated for the <c>LedgerJournalTable</c>
    /// record.
    /// </returns>
    /// <remarks>
    /// If one journal voucher fails budget check, the whole journal is considered as budget check
    /// failed.If no journal voucher fails budget check, but one passed with warnings, the whole journal is
    /// considered as budget check passed with warnings. If all journal vouchers pass budget check, the
    /// whole journal is considered as budget check passed. If all journal vouchers do not require budget
    /// check, the whole journal is considered as budget check not required.
    /// </remarks>
    public static BudgetCheckResult findBudgetCheckResult(RecId _ledgerJournalTableId)
    {
        BudgetSource budgetSource;
        LedgerJournalTrans draftLedgerJournalTrans;
        LedgerJournalTable draftLedgerJournalTable;
        LedgerJournalTable postedLedgerJournalTable;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntryJournal ledgerEntryJournal;

        // Least successful budget check result has the highest value on the BudgetCheckResult enumeration.

        // Calculate budget check result for the journal if it is in draft status.
        select maxof(CheckResult) from budgetSource
            where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                && budgetSource.LedgerEntryJournalLegalEntity == CompanyInfo::current()
                && budgetSource.BudgetTransactionLine == 0
                && budgetSource.SourceDocumentLine == 0
                && budgetSource.LedgerEntryGeneralJournalEntry == 0
            exists join draftLedgerJournalTrans
                where draftLedgerJournalTrans.JournalNum == budgetSource.LedgerEntryJournalNumber
                    && draftLedgerJournalTrans.Voucher == budgetSource.LedgerEntryJournalReferenceNumber
            exists join draftLedgerJournalTable
                where draftLedgerJournalTable.JournalNum == draftLedgerJournalTrans.JournalNum
                    && draftLedgerJournalTable.RecId == _ledgerJournalTableId;

        if (!budgetSource)
        {
            // Calculate budget check result for the journal if it is in posted status.
            select maxof(CheckResult) from budgetSource
                where budgetSource.BudgetSourceType == BudgetSourceType::LedgerJournalEntry
                    && budgetSource.BudgetTransactionLine == 0
                    && budgetSource.SourceDocumentLine == 0
                    && budgetSource.LedgerEntryGeneralJournalEntry == 0
                exists join generalJournalEntry
                    where generalJournalEntry.BudgetSourceLedgerEntryPosted == budgetSource.RecId
                exists join ledgerEntryJournal
                    where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                exists join postedLedgerJournalTable
                    where postedLedgerJournalTable.JournalNum == ledgerEntryJournal.JournalNumber
                        && postedLedgerJournalTable.RecId == _ledgerJournalTableId;
        }

        return budgetSource.CheckResult == 0 ? BudgetCheckResult::NoCheck : budgetSource.CheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetSourceLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetSourceLedgerJournalTable</c> class based on the specified
    ///    <c>LedgerJournalTable</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    The <c>LedgerJournalTable</c> record to use.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceLedgerJournalTable</c> class.
    /// </returns>
    public static BudgetSourceLedgerJournalTable newBudgetSourceLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        BudgetSourceLedgerJournalTable budgetSourceLedgerJournalTable = new BudgetSourceLedgerJournalTable();
        budgetSourceLedgerJournalTable.parmLedgerJournalTable(_ledgerJournalTable);

        return budgetSourceLedgerJournalTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>