<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventItemSearchResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class used to return data from the <c>InventInventItemSearch</c> search functionality.
/// </summary>
public class InventInventItemSearchResult
{
    ItemId              itemId;
    InventDimId         inventDimId;
    UnitOfMeasureSymbol unitOfMeasureSymbol;
    Qty                 qty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitOfMeasureSymbol(UnitOfMeasureSymbol _unitOfMeasureSymbol = unitOfMeasureSymbol)
    {
        unitOfMeasureSymbol = _unitOfMeasureSymbol;

        return unitOfMeasureSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventInventItemSearchResult construct()
    {
        return new InventInventItemSearchResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct a <c>InventInventItemSearchResult</c> object based on the passed in data.
    /// </summary>
    /// <param name="_itemId">
    ///     <c>ItemId</c> value representing the discovered Item as part of the search process.
    /// </param>
    /// <returns>
    ///     A <c>InventInventItemSearchResult</c> object initialized with the <c>ItemId</c> found as part of the search process.
    /// </returns>
    public static InventInventItemSearchResult newFromItemId(
        ItemId _itemId)
    {
        InventInventItemSearchResult  result = new InventInventItemSearchResult();

        result.parmItemId(_itemId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct a <c>InventInventItemSearchResult</c> object based on the passed in data.
    /// </summary>
    /// <param name="_itemId">
    ///     <c>ItemId</c> value representing the discovered Item as part of the search process.
    /// </param>
    /// <param name="_inventDim">
    ///     <c>InventDim</c> record found as part of the search process (usually only applicable to variants).
    /// </param>
    /// <param name="_unitOfMeasureSymbol">
    ///     Unit of Measure symbol found as part of the search process (only applicable to variants).
    /// </param>
    /// <param name="_qty">
    ///     The quantity amount found as part of the search process (currently only used with barcodes).
    /// </param>
    /// <returns>
    ///     A <c>InventInventItemSearchResult</c> object initialized with the data found as part of the search process.
    /// </returns>
    public static InventInventItemSearchResult newFromParams(
        ItemId              _itemId,
        InventDim           _inventDim,
        UnitOfMeasureSymbol _unitOfMeasureSymbol,
        Qty                 _qty = 0)
    {
        InventInventItemSearchResult result = new InventInventItemSearchResult();

        result.parmItemId(_itemId);
        result.parmUnitOfMeasureSymbol(_unitOfMeasureSymbol);

        if (_inventDim != null)
        {
            InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(_itemId, _inventDim);

            if (inventDimCombination)
            {
                result.parmInventDimId(inventDimCombination.InventDimId);
            }
        }

        if (_qty)
        {
            result.parmQty(_qty);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
