<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseDetailEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>CaseDetail</c> form.
/// </summary>
class CaseDetailEventHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormReferenceGroupControl departmentControl;
    FormStringControl caseLogGrid_M_editSourceLinkedIdControl;
    FormStringControl smmEncyclopediaItems_ItemIdControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(CaseDetailEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        departmentControl = element.design().controlName(formControlStr(CaseDetail, CaseDetailBase_Department)) as FormReferenceGroupControl;
        caseLogGrid_M_editSourceLinkedIdControl = element.design().controlName(formControlStr(CaseDetail, CaseLogGrid_M_editSourceLinkedId)) as FormStringControl;
        smmEncyclopediaItems_ItemIdControl = element.design().controlName(formControlStr(CaseDetail, smmEncyclopediaItems_ItemId)) as FormStringControl;

        // Register overrides
        departmentControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(CaseDetailEventHandler, onDepartmentLookupReference), this);
        departmentControl.registerOverrideMethod(methodStr(FormReferenceControl, resolveReference), methodStr(CaseDetailEventHandler, onDepartmentResolveReference), this);

        caseLogGrid_M_editSourceLinkedIdControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(CaseDetailEventHandler, onEditSourceLinkedIdJumpRef), this);
        caseLogGrid_M_editSourceLinkedIdControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(CaseDetailEventHandler, onEditSourceLinkedIdLookup), this);

        smmEncyclopediaItems_ItemIdControl.registerOverrideMethod(methodStr(FormStringControl, jumpRef), methodStr(CaseDetailEventHandler, onItemIdJumpRef), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDepartmentLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Department field's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDepartmentLookupReference(FormReferenceControl _sender)
    {
        return OMOperatingUnitEx::operatingUnitLookup(_sender, OMOperatingUnitType::OMDepartment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDepartmentResolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Department field's resolveReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onDepartmentResolveReference(FormReferenceControl _sender)
    {
        return OMOperatingUnitEx::operatingUnitResolve(_sender, OMOperatingUnitType::OMDepartment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// OnInitializing method for the CaseDetail.Extension form extension.
    /// </summary>
    /// <param name="_sender">The <c>CaseDetail</c> form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(CaseDetail), FormEventType::Initializing)]
    public static void CaseDetail_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        CaseDetailEventHandler extensionInstance = new CaseDetailEventHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitialized event handler for the CaseDetail.Extension form extension.
    /// </summary>
    /// <param name="_sender">The <c>CaseDetail</c> form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(CaseDetail), FormEventType::Initialized)]
    public static void CaseDetail_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun formRun = _sender as FormRun;
        CaseDetailEventHandler extensionInstance = formRun.getExtensionInstance(classStr(CaseDetailEventHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>CaseDetail</c> form's <c>init</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, init))]
    public static void CaseDetail_Post_init(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        DictClass dictClass = new DictClass(classIdGet(formRun));

        if (CaseDetailEventHandler::hasMultipleCases(formRun))
        {
            dictClass.callObject(formMethodStr(CaseDetail, switchToGrid), formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleCases</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there are multiple cases exist for a customer.
    /// </summary>
    /// <param name="_formRun">The <c>FormRun</c> instance.</param>
    /// <returns>
    /// Returns true if there are multiple cases exist for the customer,
    /// otherwise return false.
    /// </returns>
    /// <remarks>
    /// There are multiple cases exist for a customer if there are multiple selected
    /// cases from the caller AND more than one of these cases' party field matche with the customer's party field.
    /// </remarks>
    public static boolean hasMultipleCases(FormRun _formRun)
    {
        CustTable custTableLocal;
        CustCollectionsCaseDetail custCollectionsCaseDetail;
        Object caller = _formRun.args().caller();

        if (caller && formHasMethod(caller, identifierStr(parmSelectedCase)))
        {
            custCollectionsCaseDetail = caller.parmSelectedCase();
        }
        if (caller && formHasMethod(caller, identifierStr(getSelectedCustAccountNum)))
        {
            select custTableLocal where custTableLocal.AccountNum == caller.getSelectedCustAccountNum();
        }

        select count(RecId) from custCollectionsCaseDetail where custCollectionsCaseDetail.Party == custTableLocal.Party;
        return  (custCollectionsCaseDetail.RecId>1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_createProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>CaseDetail</c> form's <c>createProjId</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, createProjId))]
    public static void CaseDetail_Post_createProjId(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        DictClass dictClass = new DictClass(classIdGet(formRun));
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        CaseDetail caseDetailBase_CaseDetail = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase_CaseDetail)).cursor() as CaseDetail;

        if (caseDetailBase.RecId && caseDetailBase.getInstanceRelationType() == tableStr(CaseDetail))
        {
            caseDetailBase_CaseDetail.ProjId = _args.getArg('_createProjId');
            caseDetailBase_CaseDetail.write();

            caseDetailBase_CaseDetail.dataSource().refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_refreshHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>CaseDetail</c> form's <c>refreshHeader</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, refreshHeader))]
    public static void CaseDetail_Post_refreshHeader(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();

        CaseDetailEventHandler::setButtonControlsMain_SLA(formRun);
        CaseDetailEventHandler::setButtonControlsEngineeringChange(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_setButtonControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets button controls
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, setButtonControls))]
    public static void CaseDetail_Post_setButtonControls(XppPrePostArgs _args)
    {
        boolean enableDetails;
        FormRun formRun = _args.getThis();
        FormDataSource formDataSource = _args.getArg('_fds');
        FormDataSource caseLog_ds = formRun.dataSource(formdatasourcestr(CaseDetail, CaseLog)) as formDataSource;
        FormDataSource caseAssociation_ds = formRun.dataSource(formdatasourcestr(CaseDetail, CaseAssociation)) as formDataSource;

        switch (formDataSource.name())
        {
            case caseLog_ds.name() :
                CaseLog caseLog = caseLog_ds.cursor() as CaseLog;
                formRun.design().controlName(formControlStr(CaseDetail, caseLogDetailsButton)).enabled(
                    caseLog.RecId != 0
                    && caseLog.SourceTypeId != ""
                    && formRun.design().controlName(formControlStr(CaseDetail, caseLogGrid_M_editSourceLinkedId)).valueStr() != '');
                break;

            case caseAssociation_ds.name() :
                CaseAssociation caseAssociation = caseAssociation_ds.cursor() as CaseAssociation;
                enableDetails = (caseAssociation.RecId != 0);

                if (enableDetails && (caseAssociation.EntityType == CaseEntityType::SalesTable || caseAssociation.EntityType == CaseEntityType::PurchTable))
                {
                    // crosscompany lookup for SOs & POs are not supported
                    enableDetails = (caseAssociation.linkedCompany() == curext());
                }

                formRun.design().controlName(formControlStr(CaseDetail, associationDetailsButton)).enabled(enableDetails);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonControlsMain_SLA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the service level agreement buttons based on the log status.
    /// </summary>
    /// <param name = "_formRun">An instance of the form being extended.</param>
    public static void setButtonControlsMain_SLA(FormRun _formRun)
    {
        boolean enable = false;
        SMAServiceLevelAgreementLogTable logTable;
        DictClass dictClass = new DictClass(classIdGet(_formRun));
        CaseDetailBase caseDetailBase = _formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        CaseDetail caseDetailBase_CaseDetail = _formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase_CaseDetail)).cursor() as CaseDetail;

        if (caseDetailBase.getInstanceRelationType() == tableStr(CaseDetail))
        {
            _formRun.design().controlName(formControlStr(CaseDetail, sla_Log)).enabled(caseDetailBase_CaseDetail.ServiceLevelAgreementId != '');
            _formRun.design().controlName(formControlStr(CaseDetail, sla_Start)).enabled(
                caseDetailBase_CaseDetail.ServiceLevelAgreementId != '' && caseDetailBase_CaseDetail.ServiceLevelAgreementStatus != SMALogStatus::Open);
            _formRun.design().controlName(formControlStr(CaseDetail, sla_Stop)).enabled(
                caseDetailBase_CaseDetail.ServiceLevelAgreementId != '' && caseDetailBase_CaseDetail.ServiceLevelAgreementStatus != SMALogStatus::Closed);
            _formRun.design().controlName(formControlStr(CaseDetail, sla_Cancel)).enabled(
                caseDetailBase_CaseDetail.ServiceLevelAgreementId != '' && caseDetailBase_CaseDetail.ServiceLevelAgreementStatus != SMALogStatus::Cancel);

            logTable = SMAServiceLevelAgreementLogTable::find(SMAServiceLevelAgreementLogType::Case, caseDetailBase_CaseDetail.RecId);

            if (caseDetailBase_CaseDetail.Status == CaseStatus::Planned && !logTable)
            {
                enable = true;
            }

            _formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase_CaseDetail)).object(fieldNum(CaseDetail, ServiceLevelAgreementId)).allowEdit(enable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonControlsEngineeringChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the Approve and activate change button if case is of type product change,
    /// case state is 'In progress' and electronic signature is not enabled.
    /// </summary>
    /// <param name = "_formRun">An instance of the form being extended.</param>
    public static void setButtonControlsEngineeringChange(FormRun _formRun)
    {
        CaseAssociation engChgCaseAssociation;
        DictClass dictClass = new DictClass(classIdGet(_formRun));
        CaseDetailBase caseDetailBase = _formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        boolean isEngChgCase    = (caseDetailBase.caseCategory().CategoryType == CaseCategoryType::EngineeringChange);
        boolean isRulesEnabled  = EngChgCaseCategoryValidationRules::rulesEnabledForCaseCategory(caseDetailBase.caseCategory().RecId);
        boolean isBOMAndRouteApprovalEnabled;

        isBOMAndRouteApprovalEnabled = isConfigurationKeyEnabled(configurationkeynum(BOMApprove))
            && isConfigurationKeyEnabled(configurationkeynum(RouteApprove));

        select firstOnly engChgCaseAssociation where engChgCaseAssociation.CaseRecId == caseDetailBase.RecId;

        _formRun.design().controlName(formControlStr(CaseDetail, engChgCaseManageApproval)).enabled(
            isEngChgCase
            && isBOMAndRouteApprovalEnabled
            && engChgCaseAssociation
            && caseDetailBase.Status == CaseStatus::InProcess
            && !EngChgCaseBOMRouteApprovalHelper::electronicSignatureUsed());

        _formRun.design().controlName(formControlStr(CaseDetail, engChgCaseCheckCompleteness)).enabled(
            isEngChgCase
            && isRulesEnabled
            && engChgCaseAssociation
            && (caseDetailBase.Status == CaseStatus::Planned
            || caseDetailBase.Status == CaseStatus::InProcess));

        _formRun.design().controlName(formControlStr(CaseDetail, EngineeringChangeGroup)).visible(isEngChgCase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_setButtonControlsMain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for <c>CaseDetail</c> form's <c>setButtonControlsMain</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, setButtonControlsMain))]
    public static void CaseDetail_Post_setButtonControlsMain(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        CaseDetail caseDetailBase_CaseDetail = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase_CaseDetail)).cursor() as CaseDetail;

        CaseDetailEventHandler::setButtonControlsMain_SLA(formRun);

        // Added another check to skip non case types.
        if (caseDetailBase.getInstanceRelationType() == tableStr(CaseDetail))
        {
            // Non-collection
            formRun.design().controlName(formControlStr(CaseDetail, projectGroup_ProjId)).visible(caseDetailBase_CaseDetail.RecId != 0);
            formRun.design().controlName(formControlStr(CaseDetail, sla_Log)).visible(caseDetailBase_CaseDetail.RecId != 0);
            formRun.design().controlName(formControlStr(CaseDetail, connectToProject)).visible(caseDetailBase_CaseDetail.RecId != 0);
            formRun.design().controlName(formControlStr(CaseDetail, createProject)).visible(caseDetailBase_CaseDetail.RecId != 0);
            formRun.design().controlName(formControlStr(CaseDetail, detailsTabPage)).visible(caseDetailBase_CaseDetail.RecId != 0);
        }

        CaseDetailEventHandler::setButtonControlsEngineeringChange(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetail_Post_showMoreInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for <c>CaseDetail</c> form's <c>showMoreInformation</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(CaseDetail), formMethodStr(CaseDetail, showMoreInformation))]
    public static void CaseDetail_Post_showMoreInformation(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        DictClass dictClass = new DictClass(classIdGet(formRun));
        CaseAssociation caseAssociation = formRun.dataSource(formdatasourcestr(CaseDetail, CaseAssociation)).cursor() as CaseAssociation;

        boolean showTrvExpTable         = (caseAssociation.EntityType == CaseEntityType::TrvExpTable);
        boolean showTrvExpTrans         = (caseAssociation.EntityType == CaseEntityType::TrvExpTrans);
        boolean showsmmLeadTable        = (caseAssociation.EntityType == CaseEntityType::Lead);
        boolean showsmmOpportunityTable = (caseAssociation.EntityType == CaseEntityType::Opportunity);
        boolean showInventTable         = (caseAssociation.EntityType == CaseEntityType::Item);
        boolean showServiceOrderTable   = (caseAssociation.EntityType == CaseEntityType::ServiceOrder);
        boolean showPurchLine           = (caseAssociation.EntityType == CaseEntityType::PurchLine);
        boolean showPurchTable          = (caseAssociation.EntityType == CaseEntityType::PurchTable);
        boolean showSalesTable          = (caseAssociation.EntityType == CaseEntityType::SalesTable);
        boolean showProjTable           = (caseAssociation.EntityType == CaseEntityType::Project);
        boolean showsmmBusRelTable      = (caseAssociation.EntityType == CaseEntityType::BusinessRelation);
        boolean showVendTable           = (caseAssociation.EntityType == CaseEntityType::Vendor);
        boolean showCustTable           = (caseAssociation.EntityType == CaseEntityType::Customer);
        boolean showCustTrans           = (caseAssociation.EntityType == CaseEntityType::CustTrans);
        boolean showVendInvoiceJour     = (caseAssociation.EntityType == CaseEntityType::VendorInvoice);
        boolean showVendInvoiceTrans    = (caseAssociation.EntityType == CaseEntityType::VendorInvoiceline);
        boolean showReturnOrder         = (caseAssociation.EntityType == CaseEntityType::ReturnOrder);
        boolean showCase                = (caseAssociation.EntityType == CaseEntityType::Case);
        boolean showBOM                 = (caseAssociation.EntityType == CaseEntityType::BOM);
        boolean showRoute               = (caseAssociation.EntityType == CaseEntityType::Route);
        boolean showProduct             = (caseAssociation.EntityType == CaseEntityType::Product);
        boolean showQualityOrder        = (caseAssociation.EntityType == CaseEntityType::QualityOrder);
        boolean showProductionOrder     = (caseAssociation.EntityType == CaseEntityType::ProductionOrder);
        boolean showMoreInformationGroup = (showTrvExpTable || showTrvExpTrans || showsmmLeadTable ||
                                            showsmmOpportunityTable ||  showInventTable || showServiceOrderTable ||
                                            showPurchLine || showPurchTable || showSalesTable ||
                                            showProjTable || showsmmBusRelTable || showVendTable || showCustTable ||
                                            showCustTrans || showVendInvoiceJour || showVendInvoiceTrans || showReturnOrder || showCase
                                            || showBOM || showRoute || showProduct || showQualityOrder || showProductionOrder);

        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_TrvExpTable)).visible(showTrvExpTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_TrvExpTrans)).visible(showTrvExpTrans);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_Lead)).visible(showsmmLeadTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_Opportunity)).visible(showsmmOpportunityTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_InventTable)).visible(showInventTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_SMAServiceOrderTable)).visible(showServiceOrderTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_PurchLine)).visible(showPurchLine);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_PurchTable)).visible(showPurchTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_SalesTable)).visible(showSalesTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_ProjTable)).visible(showProjTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_smmBusRelTable)).visible(showsmmBusRelTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_VendTable)).visible(showVendTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_CustTable)).visible(showCustTable);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_CustTrans)).visible(showCustTrans);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_VendInvoiceJour)).visible(showVendInvoiceJour);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_VendInvoiceTrans)).visible(showVendInvoiceTrans);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_ReturnOrder)).visible(showReturnOrder);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_Case)).visible(showCase);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_BOMTable)).visible(showBOM);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_RouteTable)).visible(showRoute);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_EcoResProduct)).visible(showProduct);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_ProductionOrder)).visible(showProductionOrder);
        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_QualityOrder)).visible(showQualityOrder);

        formRun.design().controlName(formControlStr(CaseDetail, caseMoreInformation_None)).visible(!showMoreInformationGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for CaseDetailBase.onQueryExecuting event.
    /// </summary>
    /// <param name="_sender">The CaseDetailBase data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, CaseDetailBase), FormDataSourceEventType::QueryExecuting)]
    public static void CaseDetailBase_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun();
        DictClass dictClass = new DictClass(classIdGet(formRun));
        CaseDetailForm caseDetailForm = dictClass.callObject(formMethodStr(CaseDetail, parmCaseDetailForm), formRun);

        if (caseDetailForm.parmCategoryType() == CaseCategoryType::Audit
                || caseDetailForm.parmCategoryType() == CaseCategoryType::EngineeringChange)
        {
            // Making the inner join with CaseCategoryHierarchyDetail table, so that only product change and audit cases will be shown
            QueryBuildDataSource qbdsCaseCategoryHierarchyDetail = _sender.query().dataSourceTable(tableNum(CaseCategoryHierarchyDetail));
            qbdsCaseCategoryHierarchyDetail.joinMode(JoinMode::InnerJoin);

            QueryBuildDataSource qbds = _sender.query().dataSourceTable(tableNum(CaseDetailBase));
            CaseCategoryHierarchyDetail ccHierarchyDetail;

            while select RecId from ccHierarchyDetail
                where ccHierarchyDetail.CategoryType == caseDetailForm.parmCategoryType()
            {
                qbds.addRange(fieldNum(CaseDetailBase, CategoryRecId)).value(queryValue(ccHierarchyDetail.RecId));
            }
        }

        if (caseDetailForm.parmFilterType() == CaseListFilter::MyOverdueCases)
        {
            QueryBuildDataSource qbds = _sender.queryBuildDataSource();
            SysQuery::findOrCreateRange(qbds, fieldNum(CaseDetail, ServiceLevelAgreementStatus)).value(enum2Str(SMALogStatus::None));
            SysQuery::findOrCreateRange(qbds, fieldNum(CaseDetail, SLALatestCompletionDateTime)).value(SysQueryRangeUtil::lessThanUtcNow());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailBase_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for CaseDetailBase.OnActivated event.
    /// </summary>
    /// <param name="_sender">The CaseDetailBase data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, CaseDetailBase), FormDataSourceEventType::Activated)]
    public static void CaseDetailBase_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, CaseCategoryHierarchyDetail)).cursor() as CaseCategoryHierarchyDetail;
        boolean showChangeButton = (caseCategoryHierarchyDetail.CategoryType == CaseCategoryType::Audit);
        FormDataSource tmpSmmKACaseRelation = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, TmpSmmKACaseRelation)) as FormDataSource;
        FormRun formRun = _sender.formRun();

        tmpSmmKACaseRelation.executeQuery();

        if (formRun.design().controlName(formControlStr(CaseDetail, associationChangeButton)).visible() != showChangeButton)
        {
            formRun.design().controlName(formControlStr(CaseDetail, associationChangeButton)).visible(showChangeButton);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseAssociation_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for CaseAssociation datasources OnSelectionChanged event.
    /// </summary>
    /// <param name="_sender">The CaseAssociation datasource of the form.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, CaseAssociation), FormDataSourceEventType::SelectionChanged)]
    public static void CaseAssociation_OnSelectionChanged(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        CaseAssociation caseAssociation = _sender.cursor() as caseAssociation;

        if (caseAssociation.EntityType == CaseEntityType::Item)
        {
            formRun.design().controlName(formControlStr(CaseDetail, engChgCaseWhereUsedAnalysisButton)).visible(true);
        }
        else
        {
            formRun.design().controlName(formControlStr(CaseDetail, engChgCaseWhereUsedAnalysisButton)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseLogDetailsButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for CaseLogDetailsButton control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The CaseLogDetailsButton control of the form.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, CaseLogDetailsButton), FormControlEventType::Clicked)]
    public static void CaseLogDetailsButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        TableId tableId;
        FormRun formRun = _sender.formRun();
        CaseLog caseLog = formRun.dataSource(formDataSourceStr(CaseDetail, CaseLog)).cursor();

        if (caseLog.SourceTypeId)
        {
            tableId = smmSourceType::type2TableId(smmSourceTypeTable::find(caseLog.SourceTypeId).Type);

            if (tableId != tableNum(smmSourceTypeOptions))
            {
                smmUtility::peformJumpRef(tableId, caseLog.SourceRefRecId, formStr(CaseDetail));
            }
            else
            {
                smmUtility::peformJumpRef(tableNum(smmSourceTypeTable), smmSourceTypeTable::find(caseLog.SourceTypeId).RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmResponsibilitiesEmplTable_OnRefreshed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the smmResponsibilitiesEmplTable.OnRefreshed event.
    /// </summary>
    /// <param name="_sender">The smmResponsibilitiesEmplTable data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, smmResponsibilitiesEmplTable), FormDataSourceEventType::Refreshed)]
    public static void smmResponsibilitiesEmplTable_OnRefreshed(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));

        dictClass.callObject(formMethodStr(CaseDetail, setButtonControls), formRun, _sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmResponsibilitiesEmplTable_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the smmResponsibilitiesEmplTable.OnQueryExecuted event.
    /// </summary>
    /// <param name="_sender">The smmResponsibilitiesEmplTable data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, smmResponsibilitiesEmplTable), FormDataSourceEventType::QueryExecuted)]
    public static void smmResponsibilitiesEmplTable_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;

        dictClass.callObject(formMethodStr(CaseDetail, setButtonControls), formRun, _sender);
        _sender.allowCreate(caseDetailBase.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmResponsibilitiesEmplTable_OnCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the smmResponsibilitiesEmplTable.OnCreating event.
    /// </summary>
    /// <param name="_sender">The smmResponsibilitiesEmplTable data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, smmResponsibilitiesEmplTable), FormDataSourceEventType::Creating)]
    public static void smmResponsibilitiesEmplTable_OnCreating(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        FormUtility::openMenuItemForm(menuitemDisplayStr(smmResponsibilities), caseDetailBase, formRun, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmResponsibilitiesEmplTable_OnCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the smmResponsibilitiesEmplTable.OnCreated event.
    /// </summary>
    /// <param name="_sender">The smmResponsibilitiesEmplTable data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, smmResponsibilitiesEmplTable), FormDataSourceEventType::Created)]
    public static void smmResponsibilitiesEmplTable_OnCreated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmResponsibilitiesEmplTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the smmResponsibilitiesEmplTable.OnInitialized event.
    /// </summary>
    /// <param name="_sender">The smmResponsibilitiesEmplTable data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, smmResponsibilitiesEmplTable), FormDataSourceEventType::Initialized)]
    public static void smmResponsibilitiesEmplTable_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));

        CaseDetailForm caseDetailForm = dictClass.callObject(formMethodStr(CaseDetail, parmCaseDetailForm), formRun);
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        caseDetailForm.datasourceInitResponsibilitiesEmpl(_sender, caseDetailBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnKADelete_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the btnKADelete.OnClicked event.
    /// </summary>
    /// <param name = "_sender">The remove button on the Knowledge Article tab of the <c>CaseDetail</c> form extension.</param>
    /// <param name = "_e">The args for the event.</param>
    [FormControlEventHandler(FormControlStr(CaseDetail, btnKADelete), FormControlEventType::Clicked)]
    public static void btnKADelete_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormControl parent = _sender.parentControl();

        if (parent != null)
        {
            FormDataSource dataSource = parent.dataSourceObject();

            if (dataSource != null)
            {
                TmpSmmKACaseRelation record = dataSource.cursor() as TmpSmmKACaseRelation;
                smmKASource source = record.Relation;
                RefRecId recId  = record.RelationRecId;
        
                // We need to call delete in order to get validation and warning popups.
                dataSource.delete();
        
                // If validation was successful and user clicked "Yes" in the popup we will continue.
                if (source == smmKASource::Case)
                {
                    smmKACaseRelation::deleteCaseRelation(recId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.OnActivated event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::Activated)]
    public static void TmpSmmKACaseRelation_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormDataObject tried = _sender.object(fieldNum(TmpSmmKACaseRelation, Tried)) as FormDataObject;
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.cursor() as TmpSmmKACaseRelation;
        FormRun formRun = _sender.formRun() as FormRun;

        tried.enabled(!tmpSmmKACaseRelation.Success);

        formRun.design().controlName(formControlStr(CaseDetail, kaButtonGroup)).enabled(tmpSmmKACaseRelation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.OnWriting event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::Writing)]
    public static void TmpSmmKACaseRelation_OnWriting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.cursor() as TmpSmmKACaseRelation;
        CaseDetailBase caseDetailBase = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;

        if (!tmpSmmKACaseRelation.RecId)
        {
            CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, CaseCategoryHierarchyDetail)).cursor() as CaseCategoryHierarchyDetail;

            if (Box::yesNo(strFmt("@SYS134749", tmpSmmKACaseRelation.ItemName, caseCategoryHierarchyDetail.CaseCategory), DialogButton::Yes))
            {
                smmKACategoryRelation::createNew(tmpSmmKACaseRelation.ItemId, caseDetailBase.CategoryRecId);
            }
            else
            {
                smmKACaseRelation::createNew(tmpSmmKACaseRelation.ItemId, caseDetailBase.RecId);
            }
        }
        else
        {
            smmKACaseActivity::updateActivity(tmpSmmKACaseRelation.ItemId, caseDetailBase.RecId, tmpSmmKACaseRelation.Tried, tmpSmmKACaseRelation.Success);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.OnWritten event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::Written)]
    public static void TmpSmmKACaseRelation_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.OnQueryExecuting event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::QueryExecuting)]
    public static void TmpSmmKACaseRelation_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.cursor() as TmpSmmKACaseRelation;
        CaseDetailBase caseDetailBase = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        tmpSmmKACaseRelation.setTmpData(CaseDetailForm::createTmpKATable(caseDetailBase));
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.OnQueryExecuted event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::QueryExecuted)]
    public static void TmpSmmKACaseRelation_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.cursor() as TmpSmmKACaseRelation;
        FormRun formRun = _sender.formRun() as FormRun;

        formRun.design().controlName(formControlStr(CaseDetail, kaButtonGroup)).enabled(tmpSmmKACaseRelation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ItemId_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.ItemId field's Validated event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation.ItemId field.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(CaseDetail, TmpSmmKACaseRelation, ItemId), FormDataFieldEventType::Validated)]
    public static void ItemId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun formRun = _sender.datasource().formRun() as formRun;
        FormStringControl smmEncyclopediaItems_ItemId = formRun.design().controlName(formControlStr(CaseDetail, smmEncyclopediaItems_ItemId));
        smmEncyclopediaItems encyclopediaTable = smmEncyclopediaItems::find(smmEncyclopediaItems_ItemId.valueStr());
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;

        if (smmKACategoryRelation::existId(encyclopediaTable.ItemId, caseDetailBase.CategoryRecId))
        {
            //This article is already associated to the category.
            checkFailed("@SYS135138");
        }

        if (smmKACaseRelation::existId(encyclopediaTable.ItemId, caseDetailBase.RecId))
        {
            //This article is already associated to the case.
            checkFailed("@SYS135139");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Success_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation.Success field's OnModified event.
    /// </summary>
    /// <param name="_sender">The TmpSmmKACaseRelation.Success field.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(CaseDetail, TmpSmmKACaseRelation, Success), FormDataFieldEventType::Modified)]
    public static void Success_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormDataObject tried = _sender.datasource().object(fieldNum(TmpSmmKACaseRelation, Tried)) as FormDataObject;
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.datasource().cursor() as TmpSmmKACaseRelation;

        tried.enabled(!tmpSmmKACaseRelation.Success);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TmpSmmKACaseRelation_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the TmpSmmKACaseRelation form data source's OnSelectionChanged event.
    /// </summary>
    /// <param name="sender">The form datasource.</param>
    /// <param name="e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, TmpSmmKACaseRelation), FormDataSourceEventType::SelectionChanged)]
    public static void TmpSmmKACaseRelation_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun() as FormRun;
        FormDataSource docuRefKA_ds = formRun.dataSource(formdatasourcestr(CaseDetail, DocuRefKA));
        docuRefKA_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefKA_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the DocuRefKA.OnQueryExecuting event.
    /// </summary>
    /// <param name="_sender">The DocuRefKA data source.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseDetail, DocuRefKA), FormDataSourceEventType::QueryExecuting)]
    public static void DocuRefKA_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        QueryBuildDataSource queryBDS;
        TmpSmmKACaseRelation tmpSmmKACaseRelation = _sender.formRun().dataSource(formdatasourcestr(CaseDetail, TmpSmmKACaseRelation)).cursor() as TmpSmmKACaseRelation;
        smmEncyclopediaItems smmEncyclopediaItems = smmEncyclopediaItems::find(tmpSmmKACaseRelation.ItemId);

        queryBDS = _sender.query().dataSourceTable(tableNum(DocuRef));
        queryBDS.clearRanges();
        queryBDS.addRange(fieldNum(DocuRef,RefTableId)).value(queryValue(smmEncyclopediaItems.TableId));
        queryBDS.addRange(fieldNum(DocuRef,RefRecId)).value(queryValue(smmEncyclopediaItems.RecId));
        queryBDS.addRange(fieldNum(DocuRef,RefCompanyId)).value(queryValue(smmEncyclopediaItems.DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SLA_Start_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the SLA_Start control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The SLA_Start control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, SLA_Start), FormControlEventType::Clicked)]
    public static void SLA_Start_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));

        dictClass.callObject(formMethodStr(CaseDetail, refreshHeader), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SLA_Stop_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the SLA_Stop control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The SLA_Stop control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, SLA_Stop), FormControlEventType::Clicked)]
    public static void SLA_Stop_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));

        dictClass.callObject(formMethodStr(CaseDetail, refreshHeader), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SLA_Cancel_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the SLA_Cancel control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The SLA_Cancel control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, SLA_Cancel), FormControlEventType::Clicked)]
    public static void SLA_Cancel_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as formRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));

        dictClass.callObject(formMethodStr(CaseDetail, refreshHeader), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EngChgCaseCheckCompleteness_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the EngChgCaseCheckCompleteness control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The EngChgCaseCheckCompleteness control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, EngChgCaseCheckCompleteness), FormControlEventType::Clicked)]
    public static void EngChgCaseCheckCompleteness_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;

        EngChgCaseValidator engChgCaseValidator = EngChgCaseValidator::newValidatorAndLoadValidationRules(caseDetailBase.RecId);
        engChgCaseValidator.runCaseCheckCompletenessRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConnectToProject_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the ConnectToProject control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The ConnectToProject control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, ConnectToProject), FormControlEventType::Clicked)]
    public static void ConnectToProject_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormDataSource caseAssociation_ds = formRun.dataSource(formdatasourcestr(CaseDetail, CaseAssociation)) as FormDataSource;
        FormDataSource caseDetailBase_ds = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase));

        caseAssociation_ds.executeQuery();
        caseDetailBase_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEditSourceLinkedIdJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the CaseLogGrid_M_editSourceLinkedId control's jumpRef.
    /// </summary>
    /// <param name = "_sender">The control initiating the jumpref.</param>
    private void onEditSourceLinkedIdJumpRef(FormStringControl _sender)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormButtonControl caseLogDetailsButton = formRun.design().controlName(formControlStr(CaseDetail, caseLogDetailsButton)) as FormButtonControl;

        caseLogDetailsButton.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEditSourceLinkedIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the CaseLogGrid_M_editSourceLinkedId control's lookup.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onEditSourceLinkedIdLookup(FormStringControl _sender)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        CaseLog caseLog =  formRun.dataSource(formdatasourcestr(CaseDetail, CaseLog)).cursor() as CaseLog;

        smmSourceType::lookupSourceId(_sender, caseLog.SourceTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>KAMenuItemDetail_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the KAMenuItemDetail control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The KAMenuItemDetail control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, KAMenuItemDetail), FormControlEventType::Clicked)]
    public static void KAMenuItemDetail_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        DictClass dictClass = new DictClass(classIdGet(formRun));
        TmpSmmKACaseRelation tmpSmmKACaseRelation = formRun.dataSource(formdatasourcestr(CaseDetail, TmpSmmKACaseRelation)).cursor() as TmpSmmKACaseRelation;
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;

        dictClass.callObject(formMethodStr(CaseDetail, parmKASource), formRun, tmpSmmKACaseRelation.Relation);
        dictClass.callObject(formMethodStr(CaseDetail, parmKASourceRecID), formRun, tmpSmmKACaseRelation.RelationRecId);
        dictClass.callObject(formMethodStr(CaseDetail, parmCaseRecId), formRun, caseDetailBase.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocumentOpen_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the DocumentOpen control's OnClicked event.
    /// </summary>
    /// <param name="_sender">The DocumentOpen control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, DocumentOpen), FormControlEventType::Clicked)]
    public static void DocumentOpen_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        TmpSmmKACaseRelation tmpSmmKACaseRelation = formRun.dataSource(formdatasourcestr(CaseDetail, TmpSmmKACaseRelation)).cursor() as TmpSmmKACaseRelation;

        smmEncyclopediaItems smmEncyclopediaItems = smmEncyclopediaItems::find(tmpSmmKACaseRelation.ItemId);

        switch (smmEncyclopediaItems.Type)
        {
            case smmEncyclopediaItemType::File :
                break;

            // Is the selected item is an URl
            case smmEncyclopediaItemType::Link :
                // Open the HTML page
                new Browser().Navigate(smmEncyclopediaItems.ItemURL);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemIdJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the smmEncyclopediaItems_ItemId control's jumpRef.
    /// </summary>
    /// <param name = "_sender">The control initiating the jumpref.</param>
    private void onItemIdJumpRef(FormStringControl _sender)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        FormMenuButtonControl kaMenuItemDetail = formRun.design().controlName(formControlStr(CaseDetail, KAMenuItemDetail)) as FormMenuButtonControl;

        if (kaMenuItemDetail)
        {
            kaMenuItemDetail.clicked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EngChgCaseWhereUsedAnalysisButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform where-used analysis.
    /// </summary>
    /// <param name="_sender">The button control.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CaseDetail, EngChgCaseWhereUsedAnalysisButton), FormControlEventType::Clicked)]
    public static void EngChgCaseWhereUsedAnalysisButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun() as FormRun;
        CaseDetailBase caseDetailBase = formRun.dataSource(formdatasourcestr(CaseDetail, CaseDetailBase)).cursor() as CaseDetailBase;
        CaseAssociation caseAssociation = formRun.dataSource(formdatasourcestr(CaseDetail, CaseAssociation)).cursor() as CaseAssociation;

        CaseDetailEventHandler::performWhereUsedAnalysis(caseDetailBase, caseAssociation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performWhereUsedAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs opening of the <c>EngChgCaseWhereUsedAnalysis</c> form on the basis of the link record.
    /// </summary>
    /// <param name="_caseDetailBase">
    /// The case detail record.
    /// </param>
    /// <param name="_linkTable">
    /// The case association table record.
    /// </param>
    private static void performWhereUsedAnalysis(CaseDetailBase _caseDetailBase, CaseAssociation _linkTable)
    {
        str             menuItemName;
        MenuFunction    menuFunction;
        Args            args = new Args();

        if (_caseDetailBase)
        {
            if (_linkTable && _linkTable.EntityType == CaseEntityType::Item)
            {
                menuItemName = menuitemdisplaystr(EngChgCaseWhereUsedAnalysis);
                args.parmEnumeration(CaseEntityType::Item);
            }

            if (menuItemName)
            {
                menuFunction = new MenuFunction(menuItemName, MenuItemType::Display);

                if (!menuFunction || !menuFunction.checkAccessRights())
                {
                    // Access rights are not sufficient to use this function.
                    throw error("@SYS81158");
                }

                args.record(_caseDetailBase);
                // args.parm is of type str, so the conversion is needed.
                args.parm(int642str(_linkTable.RefRecId));
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cmdbtnKANew_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the click behavior for the button that creates a new Knowledge article for a case.
    /// </summary>
    [FormControlEventHandler(formControlStr(CaseDetail, cmdbtnKANew), FormControlEventType::Clicked)]
    public static void cmdbtnKANew_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormDataSource tmpSmmKACaseRelation = sender.formRun().dataSource(formdatasourcestr(CaseDetail, TmpSmmKACaseRelation));
        tmpSmmKACaseRelation.create();
        tmpSmmKACaseRelation.refresh();
        sender.formRun().design().controlName(formControlStr(CaseDetail, KAGrid)).setFocus();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>