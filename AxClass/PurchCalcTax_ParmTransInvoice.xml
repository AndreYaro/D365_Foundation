<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_ParmTransInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchCalcTax_ParmTransInvoice extends PurchCalcTax_ParmTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction supports a single line adjustment.
    /// </summary>
    /// <returns>
    /// true if a single line adjustment is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        boolean allowSingleLineAdjustment;

        // Line level sales tax adjustments only applies when the tax calculation uses sales tax adjustments.
        Debug::assert(this.useSalesTaxAdjustments());

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            allowSingleLineAdjustment = true;
        }

        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventMovement</Name>
				<Source><![CDATA[
    protected InventMovement constructInventMovement()
    {
        if (parmLine.isNonPO())
        {
            Debug::assert(false);
            return null;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        if (parmTable.isNonPO())
        {
            return parmTable.CurrencyCode;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        if (parmLine.isNonPO())
        {
            return this.invoiceDate();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        if (parmLine && parmLine.isNonPO())
        {
            return this.deliveryDate();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        MarkupTrans markupTransLine;
        boolean taxGroupsExist;

        select firstOnly RecId from vendInvoiceInfoLineLocal
            where vendInvoiceInfoLineLocal.ParmId == parmTable.ParmId &&
                  vendInvoiceInfoLineLocal.TableRefId == parmTable.TableRefId &&
                  vendInvoiceInfoLineLocal.TaxGroup != '' &&
                  vendInvoiceInfoLineLocal.TaxItemGroup != '';
        if (vendInvoiceInfoLineLocal != null)
        {
            taxGroupsExist = true;
        }

        if (!taxGroupsExist)
        {
            if (markupTrans::doTaxGroupExistsForMarkup(parmTable.TableId, parmTable.RecId))
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstOnly RecId from markupTransLine
                where markupTransLine.TaxGroup != '' &&
                      markupTransLine.TaxItemGroup != '' &&
                      !markupTransLine.IsDeleted
            exists join vendInvoiceInfoLineLocal
                where vendInvoiceInfoLineLocal.ParmId == parmTable.ParmId &&
                      vendInvoiceInfoLineLocal.TableRefId == parmTable.TableRefId &&
                      vendInvoiceInfoLineLocal.TableId == markupTransLine.TransTableId &&
                      vendInvoiceInfoLineLocal.RecId == markupTransLine.TransRecId;
            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstonly RecId from markupTransLine
                where markupTransLine.TaxGroup != '' &&
                      markupTransLine.TaxItemGroup != '' &&
                      !markupTransLine.IsDeleted
            exists join vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.ParmId == parmTable.ParmId &&
                      vendInvoiceInfoSubTable.TableRefId == parmTable.TableRefId &&
                      vendInvoiceInfoSubTable.TableId == markupTransLine.TransTableId &&
                      vendInvoiceInfoSubTable.RecId == markupTransLine.TransRecId;
            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceDiscountCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to force document totals to be calculated when getting the discount percent.
    /// </summary>
    /// <returns>
    /// true if totals must be calculated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For invoices, the document discount may vary line-by-line, so force document totals to be
    /// calculated when getting the discount.
    /// </remarks>
    protected boolean forceDiscountCalculation()
    {
        #ISOCountryRegionCodes

        if (VendInvoiceSkipEndDiscCalculationWhenNoDiscFlight::instance().isEnabled() &&
            !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR, #isoPL, #isoRU, #isoIN]))
        {
            return this.isDiscountOnDocumentLine();
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDiscountOnDocumentLine</Name>
				<Source><![CDATA[
    private boolean isDiscountOnDocumentLine()
    {
        VendInvoiceInfoTable invoice = parmTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        boolean isDiscountOnInvoice = (invoice.CashDisc != 0 || invoice.EndDisc != 0 || invoice.CashDiscPercent != 0 || invoice.CashDiscCode != '');
        if (isDiscountOnInvoice)
        {
            return true;
        }

        // For lines from PO
        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == invoice.ParmId
                && vendInvoiceInfoLine.TableRefId == invoice.TableRefId
        join purchTable
            where purchTable.PurchId == vendInvoiceInfoLine.OrigPurchId 
                && (purchTable.CashDiscPercent != 0 
                    || purchTable.CashDisc != '' 
                    || purchTable.DiscPercent != 0 
                    || vendInvoiceInfoLine.LineDisc != 0 
                    || vendInvoiceInfoLine.LinePercent != 0 
                    || vendInvoiceInfoLine.MultiLnDisc != 0 
                    || vendInvoiceInfoLine.MultiLnPercent != 0);

        if (vendInvoiceInfoLine.RecId != 0)
        {
            return true;
        }

        vendInvoiceInfoLine.clear();
        // For lines not from PO
        select firstonly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == invoice.ParmId
                && vendInvoiceInfoLine.TableRefId == invoice.TableRefId 
                && (vendInvoiceInfoLine.LineDisc != 0 
                    || vendInvoiceInfoLine.LinePercent != 0 
                    || vendInvoiceInfoLine.MultiLnDisc != 0 
                    || vendInvoiceInfoLine.MultiLnPercent != 0);

        return vendInvoiceInfoLine.RecId != 0;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription taxAdjustmentDetailDescription;
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        InventTable localInventTable;
        EcoResCategoryTranslation localEcoResCategoryTranslation;
        MarkupTrans localMarkupTrans;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(VendInvoiceInfoLine):
                    localVendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_sourceRecId);

                    if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ItemId)
                    {
                        localInventTable = InventTable::find(localVendInvoiceInfoLine.ItemId);

                        if (localInventTable)
                        {
                            taxAdjustmentDetailDescription = localInventTable.itemDescriptionOrName();
                        }
                    }
                    else if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ProcurementCategory)
                    {
                        localEcoResCategoryTranslation = EcoResCategoryTranslation::find(localVendInvoiceInfoLine.ProcurementCategory, CompanyInfo::languageId());

                        if (localEcoResCategoryTranslation)
                        {
                            taxAdjustmentDetailDescription = localEcoResCategoryTranslation.Description;
                        }
                    }

                    break;

                case tableNum(MarkupTrans):
                    localMarkupTrans = MarkupTrans::findRecId(_sourceRecId);

                    if (localMarkupTrans)
                    {
                        taxAdjustmentDetailDescription = localMarkupTrans.Txt;
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reference of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference taxAdjustmentDetailReference;
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        EcoResCategory localEcoResCategory;
        MarkupTrans localMarkupTrans;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(VendInvoiceInfoLine):
                    localVendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_sourceRecId);

                    if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ItemId)
                    {
                        taxAdjustmentDetailReference = localVendInvoiceInfoLine.ItemId;
                    }
                    else if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ProcurementCategory)
                    {
                        localEcoResCategory = EcoResCategory::find(localVendInvoiceInfoLine.ProcurementCategory);

                        if (localEcoResCategory)
                        {
                            taxAdjustmentDetailReference = localEcoResCategory.Name;
                        }
                    }

                    break;

                case tableNum(MarkupTrans):
                    localMarkupTrans = MarkupTrans::findRecId(_sourceRecId);

                    if (localMarkupTrans)
                    {
                        taxAdjustmentDetailReference = localMarkupTrans.MarkupCode;
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;
        VendInvoiceInfoLine localVendInvoiceInfoLine;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(VendInvoiceInfoLine):
                    localVendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_sourceRecId);

                    if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ItemId)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Item;
                    }
                    else if (localVendInvoiceInfoLine && localVendInvoiceInfoLine.ProcurementCategory)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Category;
                    }
                    break;

                case tableNum(MarkupTrans):
                    taxAdjustmentDetailType = TaxAdjustmentDetailType::Charge;
                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tax is included in the item price for a purchase order document.
    /// </summary>
    /// <returns>
    /// true if the tax is included in the item price; otherwise false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (parmLine)
        {
            if (parmLine.VendDocumentLineMap::includeTax(purchTable, parmTable) == NoYes::Yes)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        if (parmTable)
        {
            vendInvoiceInfoTable = parmTable;
            return vendInvoiceInfoTable.isInclTax(purchTable);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line is eligible for total discount.
    /// </summary>
    /// <returns>
    /// true if the order line is eligible for total discount; otherwise, false.
    /// </returns>
    public boolean lineEndDisc()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.endDisc();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether existing <c>TaxUncommitted</c> records must be updated.
    /// </summary>
    /// <returns>
    /// true if the existing <c>TaxUncommitted</c> records must be updated; otherwise, false.
    /// </returns>
    protected boolean maintainTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount markupAmount()
    {
        if (!markupTrans.checkTaxCombination(false))
        {
            return 0.0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault markupDefaultDimension()
    {
        VendInvoiceInfoLine invoiceLine = parmLine;
        VendInvoiceInfoTable invoice = parmTable;

        if (invoiceLine)
        {
            if (invoiceLine.isNonPO())
            {
                return invoiceLine.DefaultDimension;
            }
        }

        if (invoice.isNonPO())
        {
            return invoice.DefaultDimension;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
            VendDocumentTableMap _parmTable,
            ParmId _parmId,
            PurchId _sumPurchId,
            DocumentStatus _documentStatus,
            boolean _skipInit = false)
    {
        super(_parmTable, _parmId, _sumPurchId, _documentStatus, _skipInit);

        source = _parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        super();

        return parmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        if (!parmLine)
        {
            return ledgerAccount;
        }

        if (parmLine.isNonPO())
        {
            if (parmLine.isCategoryBased() || !parmLine.inventoried())
            {
                return parmLine.accountItemLedgerDimension(InventAccountType::PurchExpense);
            }

            if (InventTable::modelGroupByItemId(parmLine.ItemId).PostOnhandFinancial)
            {
                return parmLine.accountItemLedgerDimension(InventAccountType::PurchReceipt);
            }
            else
            {
                return parmLine.accountItemLedgerDimension(InventAccountType::PurchConsump);
            }
        }
        else if (purchLine && purchLine.LedgerDimension)
        {
            return purchLine.LedgerDimension;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationLedgerDimensionAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerDimensionDefaultAccount operationLedgerDimensionAccount()
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        if (!parmLine)
            return ledgerAccount;

        if (parmLine.isCategoryBased() || !parmLine.inventoried())
        {
            return parmLine.accountItemLedgerDimension(InventAccountType::PurchExpense);
        }

        if (InventTable::modelGroupByItemId(parmLine.ItemId).PostOnhandFinancial)
        {
            return parmLine.accountItemLedgerDimension(InventAccountType::PurchReceipt);
        }
        else
        {
            return parmLine.accountItemLedgerDimension(InventAccountType::PurchConsump);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        if (parmLine.isNonPO())
        {
            if (parmLine.isCategoryBased() || !parmLine.inventoried())
            {
                return LedgerPostingType::PurchExpense;
            }

            if (InventTable::modelGroupByItemId(parmLine.ItemId).PostOnhandFinancial)
            {
                return LedgerPostingType::PurchReceipt;
            }
            else
            {
                return LedgerPostingType::PurchConsump;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    RecId origHeadingRecID()
    {
        return parmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    TableId origHeadingTableID()
    {
        return parmTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (!queryTransact)
        {
            queryTransact = this.queryBuild();
        }

        if (!querySubTable)
        {
            querySubTable = this.queryBuildPurchParmSubTable();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public Object queryBuild()
    {
        QueryRun queryRun;
        Query query;
        QueryBuildDataSource qbds;

        queryRun = super();
        query = queryRun.query();
        qbds = query.dataSourceTable(tableNum(VendInvoiceInfoLine));
        qbds = qbds.addDataSource(tableNum(SourceDocumentLine));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(VendInvoiceInfoLine, SourceDocumentLine), fieldNum(SourceDocumentLine, RecId));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    public Common queryGet(QueryRun _queryRun)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (_queryRun.changed(tableNum(VendInvoiceInfoLine)))
        {
            vendInvoiceInfoLine = _queryRun.get(tableNum(VendInvoiceInfoLine));
            parmLine = vendInvoiceInfoLine;

            if (parmLine)
            {
                if (!parmLine.isNonPO())
                {
                    purchLine = parmLine.purchLine();
                    purchLine.PurchReceivedNow = parmLine.ReceiveNow;
                    purchLine.QtyOrdered = parmLine.InventNow;
                    purchLine.LineAmount = parmLine.LineAmount;
                }
            }
        }

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault transDefaultDimension()
    {
        VendInvoiceInfoLine invoiceLine = parmLine;

        if (invoiceLine.isNonPO())
        {
            return invoiceLine.DefaultDimension;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDimensionAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount transDimensionAccount()
    {
        VendInvoiceInfoLine invoiceLine = parmLine;

        if (invoiceLine.isNonPO())
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(this.operationLedgerDimensionAccount(), invoiceLine.DefaultDimension);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemId</Name>
				<Source><![CDATA[
    public ItemId transItemId()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.ItemId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.taxPcsPrice(this.invoiceDate());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResCategory</c> object for the current tax transaction
    /// </summary>
    /// <returns>
    /// The <c>PurchCategory</c> object for the current tax transaction
    /// </returns>
    public PurchCategory transProcurementCategory()
    {
        if (parmLine.isNonPO())
        {
            return parmLine.ProcurementCategory;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPurchUnit</Name>
				<Source><![CDATA[
    PurchUnit transPurchUnit()
    {
        VendInvoiceInfoLine invoiceLine = parmLine;

        if (invoiceLine.isNonPO())
        {
            return invoiceLine.PurchUnit;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    RecId transRecId()
    {
        return parmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    TableId transTableId()
    {
        return parmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return parmLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return parmLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxWithholdGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdGroup transTaxWithholdGroup()
    {
        return parmLine.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxWithholdItemGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdItemGroupId_TH transTaxWithholdItemGroup()
    {
        return parmLine.TaxWithholdItemGroupHeadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId transTransId()
    {
        if (parmLine.isNonPO())
        {
            return '';
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (parmTable.isNonPO())
        {
            if (parmTable.FixedExchRate)
            {
                return parmTable.euroTriangulation;
            }

            return Currency::triangulation(parmTable.CurrencyCode, _date);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDetailsSalesTaxAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a tax calculation uses detailed level sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the tax calculation uses detailed level sales tax adjustments; otherwise, false.
    /// </returns>
    public boolean useDetailsSalesTaxAdjustmentType()
    {
        boolean useDetailSalesTaxAdjustmentType;

        if (this.allowSingleLineAdjustment())
        {
            useDetailSalesTaxAdjustmentType = true;
        }

        return useDetailSalesTaxAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyRetention</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the retention can be applied based on the tax included on the item price.
    /// </summary>
    /// <returns>
    ///    true if retention can be applied; otherwise, false.
    /// </returns>
    protected boolean canApplyRetention()
    {
        return !this.isTaxIncluded();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>