<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationDP</c> class is the report Data Provider class for the <c>SalesQuotation</c>
/// SRS report.
/// </summary>
[SRSReportParameterAttribute(classStr(SalesQuotationContract))]
public class SalesQuotationDP extends SrsReportDataProviderPreProcess
{
    private boolean                         isSummaryUpdated;

    SalesQuotationEditLinesForm             salesQuotationEditLines;

    private DiscAmount                      cashDisc;
    private boolean                         cashDiscOnInvoice;

    private NoYes                           printTaxAmountSalesExchangeRate;
    private boolean                         printLineHeader;

    private str                             lineHeaderPrinted[];
    private int                             lineHeaderPrintedCount;
    
    private boolean                         insertInventDim;

    protected InventDim                     inventDim;
    protected container                     inventDimSetup;
    protected container                     inventDimProductSetup;
    protected InventDimCtrl_Rep_Sales       inventDimReport;

    LogisticsAddressCountryRegionISOCode isoCountryCode;

    private KittingSrsReportDataProviderPreProcess kittingReportHandler;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTradeLoopTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used to populate the report
    /// </summary>
    /// <param name = "_custQuotationJour">
    /// The <c>CustQuotationJour</c> used to build the query.
    /// </param>
    /// <returns>A query that holds the data for the report</returns>
    protected QueryRun buildTradeLoopTransQuery(CustQuotationJour _custQuotationJour)
    {
        QueryRun tradeLoopTrans = new TradeLoopTrans(_custQuotationJour, tableNum(CustQuotationTrans)).buildQueryRun();
        tradeLoopTrans.query().dataSourceTable(tableNum(CustQuotationTrans)).addSortField(fieldNum(CustQuotationTrans, ProjTransType), SortOrder::Descending);

        if (inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId())
        {
            QueryBuildDataSource custQuotationpDS  = tradeLoopTrans.query().dataSourceTable(tableNum(CustQuotationTrans));
            QueryBuildDataSource qbds = custQuotationpDS.addDataSource(tableNum(InventDim));
            qbds.joinMode(JoinMode::OuterJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.addLink(fieldNum(CustQuotationTrans, InventDimId), fieldNum(InventDim, InventDimId));
            insertInventDim = true;
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler = new KittingSrsReportDataProviderPreProcess();
            tradeLoopTrans = kittingReportHandler.kittingGetQueryRun(tradeLoopTrans, tableNum(CustQuotationJour));
        }

        return TradeLoopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the <c>CashDiscAmount</c> value.
    /// </summary>
    /// <param name = "_custQuotationJour">
    /// The <c>CustQuotationJour</c> used to calculate the discount.
    /// </param>
    /// <returns>
    /// The <c>CashDiscAmount</c> value.
    /// </returns>
    private DiscAmount cashDiscAmount(CustQuotationJour _custQuotationJour)
    {
        CashDiscVAT cashDiscVAT = CustParameters::find().CashDiscVAT;
        TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters = TaxIntegrationFacade::getTaxJurisdictionParametersByTable(_custQuotationJour);

        if (taxIntegrationTaxJurisdictionParameters && !taxIntegrationTaxJurisdictionParameters.empty())
        {
            cashDiscVAT = taxIntegrationTaxJurisdictionParameters.isCashDiscCalculatedOnAmountInclTaxForCust();
        }

        if (cashDiscVAT)
        {
            cashDisc   = CurrencyExchangeHelper::amount(_custQuotationJour.QuotationAmount * _custQuotationJour.CashDiscPercent / 100, _custQuotationJour.CurrencyCode);
        }
        else
        {
            cashDisc   = CurrencyExchangeHelper::amount((_custQuotationJour.SalesBalance - _custQuotationJour.EndDisc + _custQuotationJour.SumMarkup) * _custQuotationJour.CashDiscPercent / 100, _custQuotationJour.CurrencyCode);
        }

        return cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLineHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the line header.
    /// </summary>
    /// <param name = "_lineHeader">
    /// The <c>LineHeader</c>
    /// </param>
    private void checkPrintLineHeader(LineHeader _lineHeader)
    {
        int         counter;
        boolean     lineHeaderPrint = true;

        printLineHeader             = false;

        if (isSummaryUpdated)
        {
            str lineHeaderOrig = _lineHeader;

            for (counter = 1; counter <= lineHeaderPrintedCount; counter++)
            {
                if (lineHeaderPrinted[counter] == lineHeaderOrig)
                {
                    printLineHeader = false;
                    lineHeaderPrint = false;
                    break;
                }
                else if (lineHeaderPrinted[counter] == subStr(lineHeaderOrig, 1, strLen(lineHeaderPrinted[counter])))
                {
                    _lineHeader = strLTrim(subStr(_lineHeader, strLen(lineHeaderPrinted[counter]) + 1, 255));
                }
            }

            if (_lineHeader && lineHeaderPrint)
            {
                printLineHeader = true;
                lineHeaderPrintedCount++;
                lineHeaderPrinted[lineHeaderPrintedCount] = lineHeaderOrig;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SalesQuotationDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesQuotationDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesQuotationDetailsTmp))]
    public SalesQuotationDetailsTmp getSalesQuotationDetailsTmp()
    {
        SalesQuotationDetailsTmp salesQuotationTmp;

        this.setTransactionConnection(salesQuotationTmp);

        select salesQuotationTmp;
        
        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SalesQuotationHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>SalesQuotationHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesQuotationHeaderTmp))]
    public SalesQuotationHeaderTmp getSalesQuotationHeaderTmp()
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp;

        this.setTransactionConnection(salesQuotationHeaderTmp);

        select salesQuotationHeaderTmp;

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        SysDocuBrandDetailsRegular docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        select docuBrandDetails;

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>inventDimReport</c>.
    /// </summary>
    protected void initializeInventDimReport()
    {
        inventDimReport         = this.instantiateInventDimReport();
        inventDimReport.initDimParmVisible();
        inventdimSetup          = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup   = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventDimReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventDimCtrl_Rep_Sales</c> instance.
    /// </summary>
    /// <returns>
    /// The <c>InventDimCtrl_Rep_Sales</c> instance.
    /// </returns>
    protected InventDimCtrl_Rep_Sales instantiateInventDimReport()
    {
        inventDimReport         = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Quotation);

        return inventDimReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    /// <returns>The <c>CustQuotationJour</c> that the header is created from</returns>
    protected CustQuotationJour initializeReportData()
    {
        SalesQuotationContract objContract  = this.parmDataContract() as SalesQuotationContract;

        isoCountryCode                      = SysCountryRegionCode::countryInfo();

        RecId custQuotationJourRecId        = objContract.parmRecordId();
        RecId salesQuotationEditLinesRecId  = objContract.parmSalesQuotationEditLinesRecId();

        CustQuotationJour custQuotationJour;

        if (custQuotationJourRecId)
        {
            custQuotationJour               = CustQuotationJour::findRecId(custQuotationJourRecId);
        }

        salesQuotationEditLines             = this.unpackSalesQuotationEditLines(salesQuotationEditLinesRecId);

        this.initializeInventDimReport();

        return custQuotationJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>_salesQuotationHeaderTmp</c>.
    /// </summary>
    /// <param name = "_salesQuotationHeaderTmp">The <c>SalesQuotationHeaderTmp</c> to be inserted.</param>
    protected void insertSalesQuotationHeaderTmp(SalesQuotationHeaderTmp _salesQuotationHeaderTmp)
    {
        _salesQuotationHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesQuotationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>_salesQuotationTmp</c>.
    /// </summary>
    /// <param name = "_salesQuotationTmp">The <c>SalesQuotationTmp</c> to be inserted.</param>
    protected void insertSalesQuotationTmp(SalesQuotationDetailsTmp _salesQuotationTmp)
    {
        _salesQuotationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item ID.
    /// </summary>
    /// <param name = "_custQuotationTrans">
    /// The <c>CustQuotationTrans</c> used to find the item id.
    /// </param>
    /// <returns>
    /// The item ID for the transaction.
    /// </returns>
    protected final ItemId itemId(CustQuotationTrans _custQuotationTrans)
    {
        ItemId  localItemId;

        if (_custQuotationTrans.ProjTransType == QuotationProjTransType::Item)
        {
            localItemId = SalesQuotationEditLinesForm::journalItemId(ModuleInventPurchSales::Sales, _custQuotationTrans.ItemId, _custQuotationTrans.ExternalItemId);

            if (inventDimReport.isInventDimItemId())
            {
                localItemId += inventDimReport.reportStrItemId(inventDim);
            }
        }

        return localItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Invent Quantity and Invent Storage Dimensions.
    /// </summary>
    /// <param name = "_custQuotationJour">
    /// The <c>CustQuotationJour</c> used to do the calculations.
    /// </param>
    /// <param name = "_custQuotationTrans">
    /// The <c>CustQuotationTrans</c> used to do the calculations.
    /// </param>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    /// <remarks>
    /// This method is called for each of the transactions.
    /// </remarks>
    private str printDimHistory(
        CustQuotationJour    _custQuotationJour,
        CustQuotationTrans   _custQuotationTrans)
    {
        SalesQuotationDPDimHistoryBuilder builder = SalesQuotationDPDimHistoryBuilder::construct();
        builder.parmCustQuotationJour(_custQuotationJour);
        builder.parmCustQuotationTrans(_custQuotationTrans);
        builder.parmInventDimSetup(inventDimSetup);
        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and also calls helper methods and inserts data in the temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CustQuotationJour custQuotationJour = this.initializeReportData();

        if (custQuotationJour)
        {
            isSummaryUpdated    = custQuotationJour.isSummaryUpdated();

            CustFormletterDocument   custFormletterDocument         = CustFormletterDocument::find();
            CustFormletterParameters custFormletterParameters       = CustFormletterParameters::find();
            FormLetterRemarks        formLetterRemarks              = FormLetterRemarks::find(custQuotationJour.LanguageId,
                                                                        custQuotationJour.QuotationType == QuotationType::Sales
                                                                            ? FormTextType::SalesQuotation
                                                                            : FormTextType::ProjectQuotation);

            //Set the common table data
            SalesQuotationHeaderTmp salesQuotationHeaderTmp = this.createSalesQuotationHeaderTmp(
                custQuotationJour,
                formLetterRemarks,
                custFormletterDocument,
                custFormletterParameters);
            
            this.createSalesQuotationLines(custQuotationJour, custFormletterDocument);

            this.createTaxLines(custQuotationJour, custFormletterParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales quotation lines.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    protected void createSalesQuotationLines(
        CustQuotationJour       _custQuotationJour,
        CustFormletterDocument  _custFormletterDocument)
    {
        lineHeaderPrintedCount = 0;

        QueryRun tradeLoopTrans = this.buildTradeLoopTransQuery(_custQuotationJour);

        while (tradeLoopTrans.next())
        {
            CustQuotationTrans custQuotationTrans = tradeLoopTrans.get(tableNum(CustQuotationTrans));

            // For Project Quotation with zero sales price
            if (this.skipCreateSalesQuotationLine(custQuotationTrans))
            {
                continue;
            }

            if (insertInventDim)
            {
                inventDim = tradeLoopTrans.get(tableNum(InventDim));
            }

            this.checkPrintLineHeader(custQuotationTrans.LineHeader);

            this.createSalesQuotationDetailsTmp(_custQuotationJour, custQuotationTrans, _custFormletterDocument);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreateSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales quotation  line should be created or not.
    /// </summary>
    /// <param name = "_custQuotationTrans">
    /// The <c>CustQuotationTrans</c> record that the line will be created from.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the line should be created.
    /// </returns>
    /// <remarks>
    /// This is used for project quotation only.For a given Line Property ID check the Print Zero Sales
    /// Price on Quotation settings: If set to the <c>Yes</c> value print the quotation line. If set to the
    /// <c>No</c> value do not print the quotation line. For quotation lines without the Line Property ID,
    /// print by default.
    /// </remarks>
    protected boolean skipCreateSalesQuotationLine(CustQuotationTrans _custQuotationTrans)
    {
        return _custQuotationTrans.AccountType == LedgerJournalACType::Project          &&
               _custQuotationTrans.SalesPrice == 0                                      &&
               _custQuotationTrans.LinePropertyId                                       &&
               !ProjLineProperty::find(_custQuotationTrans.LinePropertyId).OnQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax specification and inserts it to the <c>salesQuotationTmp</c> table.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup record.</param>
    protected void createTaxLines(
        CustQuotationJour           _custQuotationJour,
        CustFormletterParameters    _custFormletterParameters)
    {
        if (this.validateSalesTaxSpecification(_custFormletterParameters))
        {
            TaxSpec taxSpec = this.initializeTaxSpecification(_custQuotationJour);

            while (taxSpec.parmTaxSpec())
            {
                if (this.mustCreateTaxLine(taxSpec))
                {
                    this.createTaxLine(taxSpec, _custQuotationJour);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax specification.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <returns>The <c>TaxSpec</c> object.</returns>    
    protected TaxSpec initializeTaxSpecification(CustQuotationJour _custQuotationJour)
    {
        #EECountryRegionCodes

        TaxSpec taxSpec;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll) && _custQuotationJour.isProforma())
        {
            taxSpec = TaxSpec::construct('', naDate(), _custQuotationJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans(_custQuotationJour));
        }
        else
        {
            taxSpec = new TaxJournalSpec(_custQuotationJour.TableId, _custQuotationJour.RecId);
        }
        return taxSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesTaxSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the sales tax specification print level.
    /// </summary>
    /// <param name = "_custFormletterParameters">A customer form setup record.</param>
    /// <returns>true if the validation succeeded; otherwise, false.</returns>
    [Replaceable]
    protected boolean validateSalesTaxSpecification(CustFormletterParameters _custFormletterParameters)
    {
        return _custFormletterParameters.TaxSpecPrintLevel != TaxSpecPrintLevel::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax line
    /// </summary>
    /// <param name = "_taxSpec">The tax specifications used for creating the line</param>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <returns>The line created</returns>
    protected SalesQuotationDetailsTmp createTaxLine(
        TaxSpec _taxSpec,
        CustQuotationJour _custQuotationJour)
    {
        SalesQuotationDetailsTmp salesQuotationTmp = this.initializeTaxLine(_taxSpec, _custQuotationJour);
        this.insertTaxLine(_taxSpec, salesQuotationTmp);

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a tax line
    /// </summary>
    /// <param name = "_taxSpec">The tax specifications used when creating the line</param>
    /// <param name = "_salesQuotationTmp">The tax line to insert</param>
    protected void insertTaxLine(TaxSpec _taxSpec, SalesQuotationDetailsTmp _salesQuotationTmp)
    {
        _salesQuotationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a tax line should be created or not.
    /// </summary>
    /// <param name = "_taxSpec">The tax specifications used when creating the line</param>
    /// <returns>True if the line should be inserted</returns>
    protected boolean mustCreateTaxLine(TaxSpec _taxSpec)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record field data into the temporary table.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <param name = "_custQuotationTrans">The <c>CustQuotationTrans</c> record that the line will be created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns></returns>
    protected SalesQuotationDetailsTmp createSalesQuotationDetailsTmp(
        CustQuotationJour    _custQuotationJour,
        CustQuotationTrans   _custQuotationTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        SalesQuotationDetailsTmp salesQuotationTmp = this.initializeSalesQuotationDetailsTmp(
                        _custQuotationJour,
                        _custQuotationTrans,
                        _custFormletterDocument);

        this.insertSalesQuotationTmp(salesQuotationTmp);

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SalesQuotatiopDetailsTmp</c> table with details.
    /// </summary>
    /// <param name = "_custQuotationJour">A <c>CustQuotationJour</c> record that the header are created from.</param>
    /// <param name = "_custQuotationTrans">The <c>CustQuotationTrans</c> record that the line will be created from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    protected SalesQuotationDetailsTmp initializeSalesQuotationDetailsTmp(
        CustQuotationJour    _custQuotationJour,
        CustQuotationTrans   _custQuotationTrans,
        CustFormletterDocument      _custFormletterDocument)
    {
        SalesQuotationDetailsTmp salesQuotationTmp;
        this.setTransactionConnection(salesQuotationTmp);
        
        salesQuotationTmp.CustQuotationTrans        = _custQuotationTrans.RecId;
        
        if (printLineHeader)
        {
            salesQuotationTmp.LineHeader            = _custQuotationTrans.LineHeader;
        }
        salesQuotationTmp.ProjTransType             = _custQuotationTrans.ProjTransType;
        salesQuotationTmp.ItemId                    = this.itemId(_custQuotationTrans);
        salesQuotationTmp.Name                      = _custQuotationTrans.Name;
        salesQuotationTmp.Qty                       = _custQuotationTrans.Qty;
        salesQuotationTmp.SalesUnitTxt              = _custQuotationTrans.salesUnitTxt();
        salesQuotationTmp.SalesPrice                = _custQuotationTrans.SalesPrice;
        salesQuotationTmp.DlvDate                   = _custQuotationTrans.DlvDate;
        salesQuotationTmp.DiscPercent               = _custQuotationTrans.DiscPercent;
        salesQuotationTmp.DiscAmount                = _custQuotationTrans.DiscAmount;
        salesQuotationTmp.CurrencyCode              = _custQuotationTrans.CurrencyCode;
        salesQuotationTmp.PrintCode                 = _custQuotationTrans.TaxWriteCode;

        salesQuotationTmp.ExternalItemId            = SalesQuotationEditLinesForm::journalExternalItemId(ModuleInventPurchSales::Sales, _custQuotationTrans.ExternalItemId);

        if (#PdsCatchWeightEnabled)
        {
            salesQuotationTmp.PdsCWUnitId           = _custQuotationTrans.pdsCWUnitId();
            salesQuotationTmp.PdsCWQty              = _custQuotationTrans.PdsCWQty;
        }

        if ((ProjLineProperty::find(_custQuotationTrans.LinePropertyId).ToBeInvoiced == NoYes::Yes &&
            ProjInvoiceTable::isBillingRuleInvoiceable(_custQuotationTrans.custQuotationJour().ProjIdRef, _custQuotationTrans.ProjCategoryId, ''))
        || _custQuotationJour.QuotationType == QuotationType::Sales
        )
        {
            salesQuotationTmp.LineAmount            = _custQuotationTrans.LineAmount;
        }
        else
        {
            salesQuotationTmp.LineAmount = 0;
        }

        if ((_custFormletterDocument.DocuOnQuotation == DocuOnFormular::Line) ||
            (_custFormletterDocument.DocuOnQuotation == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_custQuotationTrans,
                                                                   _custFormletterDocument.DocuTypeQuotation,
                                                                   DocuRestriction::External);
            salesQuotationTmp.Notes                 = Docu::concatDocuRefNotes(docuRefSearch);
        }

        if (inventDim)
        {
            salesQuotationTmp.InventDimProduct = FormLetter::inventDimReport(inventDim, inventDimProductSetup, _custQuotationJour.LanguageId);
        }

        salesQuotationTmp.InventDimQtyPrint         = this.printDimHistory(_custQuotationJour, _custQuotationTrans);

        salesQuotationTmp.QuotationTransOrTaxTrans  = true;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(salesQuotationTmp, _custQuotationTrans);
        }

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SalesQuotationDetailsTmp</c> based on a <c>TaxSpec</c>
    /// </summary>
    /// <param name = "_taxSpec">The <c>TaxSpec</c> to initialize from</param>
    /// <param name = "_custQuotationJour">The <c>CustQuotationJour</c> to initialize from</param>
    /// <returns>A sales quotation sales line</returns>
    protected SalesQuotationDetailsTmp initializeTaxLine(
        TaxSpec _taxSpec,
        CustQuotationJour _custQuotationJour)
    {
        SalesQuotationDetailsTmp salesQuotationTmp;
        this.setTransactionConnection(salesQuotationTmp);

        CashDiscAmount                  cashDiscAmountTax;
        Amount                          amount;
        
        if (isoCountryCode == #isoES)
        {
            if (cashDiscOnInvoice)
            {
                amount                  = _taxSpec.taxBaseAmount() / ((100-_custQuotationJour.CashDiscPercent) / 100);
                cashDiscAmountTax       = amount * (_custQuotationJour.CashDiscPercent/100);
            }
        }

        salesQuotationTmp.LineAmount                = 0;
        salesQuotationTmp.PrintCode                 = _taxSpec.taxWriteCode();
        salesQuotationTmp.TaxCode                   = _taxSpec.taxCode();
        salesQuotationTmp.Amount                    = -amount;
        salesQuotationTmp.CashDiscAmount            = -cashDiscAmountTax;
        salesQuotationTmp.TaxBaseAmount             = - _taxSpec.taxBaseAmount();
        salesQuotationTmp.TaxBaseQty                = - _taxSpec.taxBaseQty();
        salesQuotationTmp.TaxAmount                 = - _taxSpec.taxAmount();
        salesQuotationTmp.TaxAmountMST              = - _taxSpec.taxAmountMST();
        salesQuotationTmp.TaxExemptDescription      = _taxSpec.taxExemptDescription();

        if (isoCountryCode == #isoHU && printTaxAmountSalesExchangeRate)
        {
            salesQuotationTmp.TaxBaseAmountMST      = - _taxSpec.taxBaseAmountMST();
        }

        salesQuotationTmp.QuotationTransOrTaxTrans  = false;

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesQuotationHeaderTmp</c>
    /// </summary>
    /// <param name = "_custQuotationJour">The <c>CustQuotationJour</c> record to create the header from</param>
    /// <param name = "_formLetterRemarks">A form note</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <param name = "_custFormletterParameters">The parameters of the customer form setup</param>
    /// <returns>The created <c>SalesQuotationHeaderTmp</c></returns>
    protected SalesQuotationHeaderTmp createSalesQuotationHeaderTmp(
        CustQuotationJour           _custQuotationJour,
        FormLetterRemarks           _formLetterRemarks,
        CustFormletterDocument      _custFormletterDocument,
        CustFormletterParameters    _custFormletterParameters)
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp = this.initializeSalesQuotationHeaderTmp(
            _custQuotationJour,
            _formLetterRemarks,
            _custFormletterDocument,
            _custFormletterParameters);

        this.insertSalesQuotationHeaderTmp(salesQuotationHeaderTmp);

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SalesQuotationHeaderTmp</c> table with header details.
    /// </summary>
    /// <param name = "_custQuotationJour">The <c>CustQuotationJour</c> record to initialize the header from</param>
    /// <param name = "_formLetterRemarks">A form note</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <param name = "_custFormletterParameters">The parameters of the customer form setup</param>
    /// <returns>The initialized <c>SalesQuotationHeaderTmp</c></returns>
    protected SalesQuotationHeaderTmp initializeSalesQuotationHeaderTmp(
        CustQuotationJour           _custQuotationJour,
        FormLetterRemarks           _formLetterRemarks,
        CustFormletterDocument      _custFormletterDocument,
        CustFormletterParameters    _custFormletterParameters)
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp;
        this.setTransactionConnection(salesQuotationHeaderTmp);

        DiscPct        cashDiscPercent;
        CashDiscAmount cashDiscAmount;

        if (isoCountryCode == #isoES)
        {
            cashDiscOnInvoice   = TaxParameters::find().CashDiscOnInvoice;

            if (cashDiscOnInvoice)
            {
                cashDiscPercent = _custQuotationJour.CashDiscPercent;
                cashDiscAmount  = this.cashDiscAmount(_custQuotationJour);
            }
        }
        
        salesQuotationHeaderTmp.CustQuotationJour                     = _custQuotationJour.RecId;
        salesQuotationHeaderTmp.QuotationId                           = _custQuotationJour.QuotationId;

        salesQuotationHeaderTmp.PrintLogo                             = NoYes::No;

        CompanyInfo companyInfo                     = CompanyInfo::find();

        if (_custFormletterParameters.PrePrintLevelQuotation == PrePrintLevel::BlankPaper)
        {
            salesQuotationHeaderTmp.CompanyLogo                       = SalesQuotationEditLinesForm::companyLogo();
            salesQuotationHeaderTmp.CompanyName                       = companyInfo.name();
            salesQuotationHeaderTmp.CompanyAddress                    = companyInfo.postalAddressWithTranslation(_custQuotationJour.LanguageId);
            salesQuotationHeaderTmp.CompanyPhone                      = companyInfo.phone();
            salesQuotationHeaderTmp.CompanyTelefax                    = companyInfo.teleFax();
            salesQuotationHeaderTmp.CompanyGiro                       = companyInfo.Giro;
            salesQuotationHeaderTmp.CompanyCoRegNum                   = companyInfo.CoRegNum;
            salesQuotationHeaderTmp.CompanyEnterpriseNumber           = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custQuotationJour.QuotationDate);
            salesQuotationHeaderTmp.ShowCompanyVATNum                 = _custFormletterParameters.PrintQuotationVATNum;
            salesQuotationHeaderTmp.CompanyVATNum                     = TaxRegistration::getTaxRegNumFromJournal(
                _custQuotationJour.TableId,
                _custQuotationJour.RecId,
                _custQuotationJour.QuotationDate);
            if (conLen(SalesQuotationEditLinesForm::companyLogo()) > 0)
            {
                salesQuotationHeaderTmp.PrintLogo                         = NoYes::Yes;
            }

            if (companyInfo.PrintEnterpriseregister_NO)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
                salesQuotationHeaderTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                         _custQuotationJour.LanguageId);
            }
        }

        salesQuotationHeaderTmp.DeliveryName                          = _custQuotationJour.DeliveryName;
        salesQuotationHeaderTmp.DeliveryAddress                       = _custQuotationJour.deliveryAddress();
        salesQuotationHeaderTmp.QuotationDocNum                       = _custQuotationJour.QuotationDocNum;
        salesQuotationHeaderTmp.QuotationDate                         = _custQuotationJour.QuotationDate;
        salesQuotationHeaderTmp.SalesId                               = _custQuotationJour.SalesId;
        salesQuotationHeaderTmp.PurchaseOrder                         = _custQuotationJour.PurchaseOrder;
        salesQuotationHeaderTmp.CustomerRef                           = _custQuotationJour.CustomerRef;
        salesQuotationHeaderTmp.SalesAdministrator                    = HcmWorker::find(_custQuotationJour.WorkerSalesTaker).PersonnelNumber;
        salesQuotationHeaderTmp.RespiteDate                           = _custQuotationJour.RespiteDate;
        salesQuotationHeaderTmp.PaymentCode                           = _custQuotationJour.paymentCode();

        SalesQuotationTable salesQuotationTable = _custQuotationJour.salesQuotationTable();

        salesQuotationHeaderTmp.DocuTitle                             = salesQuotationTable.DocuTitle;
        salesQuotationHeaderTmp.DocuIntro                             = salesQuotationTable.DocuIntro;
        salesQuotationHeaderTmp.DocuConclusion                        = salesQuotationTable.DocuConclusion;
        salesQuotationHeaderTmp.FormLetterRemarks                     = _formLetterRemarks.Txt;

        if ((_custFormletterDocument.DocuOnQuotation == DocuOnFormular::Head) ||
            (_custFormletterDocument.DocuOnQuotation == DocuOnFormular::All))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_custQuotationJour,
                                                                   _custFormletterDocument.DocuTypeQuotation,
                                                                   DocuRestriction::External);
            salesQuotationHeaderTmp.DocuRefMainNotes                  = Docu::concatDocuRefNotes(docuRefSearch);
        }

        salesQuotationHeaderTmp.SalesBalance                      = _custQuotationJour.SalesBalance;
        salesQuotationHeaderTmp.EndDisc                           = _custQuotationJour.EndDisc;
        salesQuotationHeaderTmp.SumMarkup                         = _custQuotationJour.SumMarkup;
        salesQuotationHeaderTmp.CashDisc                          = cashDiscAmount;
        salesQuotationHeaderTmp.TotalTaxBaseAmount                = _custQuotationJour.SalesBalance - _custQuotationJour.EndDisc + _custQuotationJour.SumMarkup - cashDiscAmount;
        salesQuotationHeaderTmp.SumTax                            = _custQuotationJour.SumTax;
        salesQuotationHeaderTmp.RoundOff                          = _custQuotationJour.RoundOff;
        salesQuotationHeaderTmp.QuotationAmount                   = _custQuotationJour.QuotationAmount;
        salesQuotationHeaderTmp.CurrencyCode                      = _custQuotationJour.CurrencyCode;

        salesQuotationHeaderTmp.TaxPrintTaxFreeBalance            = _custFormletterParameters.TaxPrintTaxFreeBalance;
        if (salesQuotationHeaderTmp.TaxPrintTaxFreeBalance)
        {
            salesQuotationHeaderTmp.NetAmount                     = _custQuotationJour.netAmount();

            TmpTaxWorkTrans tmpTaxWorkTrans                                       = this.tmpTaxWorkTrans(_custQuotationJour);
            salesQuotationHeaderTmp.TaxFreeBalance                = _custQuotationJour.taxFreeBalance(tmpTaxWorkTrans);
            salesQuotationHeaderTmp.TaxableBalance                = _custQuotationJour.taxableBalance(tmpTaxWorkTrans);
        }

        if (_custFormletterParameters.PrintEuroAmount)
        {
            salesQuotationHeaderTmp.EuroCurrencyCode              = Currency::findEuroCurrencyCode();
            if (salesQuotationHeaderTmp.EuroCurrencyCode && salesQuotationHeaderTmp.EuroCurrencyCode != salesQuotationHeaderTmp.CurrencyCode)
            {
                salesQuotationHeaderTmp.SalesBalanceEuro          = _custQuotationJour.salesBalanceEuro();
                salesQuotationHeaderTmp.EndDiscEuro               = _custQuotationJour.endDiscEuro();
                salesQuotationHeaderTmp.SumMarkupEuro             = _custQuotationJour.sumMarkupEuro();
                salesQuotationHeaderTmp.CashDiscEuro              = _custQuotationJour.amountCur2Euro(cashDiscAmount);
                salesQuotationHeaderTmp.TotalTaxBaseAmountEuro    = _custQuotationJour.amountCur2Euro(salesQuotationHeaderTmp.TotalTaxBaseAmount);
                salesQuotationHeaderTmp.SumTaxEuro                = _custQuotationJour.sumTaxEuro();
                salesQuotationHeaderTmp.RoundOffEuro              = _custQuotationJour.roundOffEuro();
                salesQuotationHeaderTmp.QuotationAmountEuro       = _custQuotationJour.quotationAmountEuro();
                salesQuotationHeaderTmp.TaxPrintTaxFreeBalance    = _custFormletterParameters.TaxPrintTaxFreeBalance;
                if (salesQuotationHeaderTmp.TaxPrintTaxFreeBalance)
                {
                    salesQuotationHeaderTmp.NetAmountEuro         = _custQuotationJour.netAmountEuro();
                    salesQuotationHeaderTmp.TaxFreeBalanceEuro    = _custQuotationJour.amountCur2Euro(salesQuotationHeaderTmp.TaxFreeBalance);
                    salesQuotationHeaderTmp.TaxableBalanceEuro    = _custQuotationJour.amountCur2Euro(salesQuotationHeaderTmp.TaxableBalance);
                }
            }
            else
            {
                salesQuotationHeaderTmp.EuroCurrencyCode = ""; //empty Euro currency means that euro line will not be printed
            }
        }

        salesQuotationHeaderTmp.PrePrintLevel                     = _custFormletterParameters.PrePrintLevelQuotation;
        salesQuotationHeaderTmp.TaxSpecPrintLevel                 = _custFormletterParameters.TaxSpecPrintLevel;
        salesQuotationHeaderTmp.CashDiscOnInvoice                 = cashDiscOnInvoice;
        salesQuotationHeaderTmp.CashDiscPercent                   = cashDiscPercent;
        salesQuotationHeaderTmp.CompanyCurrencyCode               = Ledger::accountingCurrency(companyInfo.RecId);
        salesQuotationHeaderTmp.CashDiscTxt                       = strFmt(SysLabel::labelId2String2(literalStr("@SYS62050"), _custQuotationJour.LanguageId),
                                                                           CashDisc::txt(_custQuotationJour.CashDiscCode, _custQuotationJour.LanguageId));

        if (isoCountryCode == #isoCZ)
        {
            salesQuotationHeaderTmp.CompanyRegNum                         = companyInfo.RegNum;
            salesQuotationHeaderTmp.CompanyEmail                          = companyInfo.email();
            salesQuotationHeaderTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, _custQuotationJour.QuotationDate);

            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            if (bankAccountTable)
            {
                salesQuotationHeaderTmp.CompanyBankAccountName    = bankAccountTable.Name;
                salesQuotationHeaderTmp.CompanyBankAccountNum     = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
                salesQuotationHeaderTmp.CompanyBankAccountRegNum  = bankAccountTable.RegistrationNum;
            }

            CustTable custTable = CustTable::find(_custQuotationJour.OrderAccount);

            if (custTable)
            {
                salesQuotationHeaderTmp.OrderAccountRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custQuotationJour.QuotationDate);
                salesQuotationHeaderTmp.OrderAccountVATNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custQuotationJour.QuotationDate);
            }
        }
        
        if (isoCountryCode == #isoHU &&
            salesQuotationHeaderTmp.CurrencyCode != salesQuotationHeaderTmp.CompanyCurrencyCode &&
            (salesQuotationHeaderTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST ||
            (salesQuotationHeaderTmp.TaxSpecPrintLevel == TaxSpecPrintLevel::Currency && TaxParameters::find().BankExchRate_W)))
        {
            salesQuotationHeaderTmp.PrintTaxAmountSalesExchangeRate = NoYes::Yes;
            salesQuotationHeaderTmp.SalesTaxExchangeRate            = _custQuotationJour.ExchRate;
            salesQuotationHeaderTmp.SumTaxMST                       = _custQuotationJour.amountMST(_custQuotationJour.SumTax);
        }

        printTaxAmountSalesExchangeRate = salesQuotationHeaderTmp.PrintTaxAmountSalesExchangeRate;

        // set Document Branding Header;
        this.setSysDocuBrandDetails(_custQuotationJour);

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    /// <param name = "_custQuotationJour">The <c>CustQuotationJour</c> to that the header is initialized from</param>
    private void setSysDocuBrandDetails(CustQuotationJour _custQuotationJour)
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        SysDocuBrandDetailsRegular docuBrandDetails;
        docuBrandDetails.setConnection(this.parmUserConnection());
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol    = Currency::find(_custQuotationJour.CurrencyCode).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TmpTaxWorkTrans</c> object.
    /// </summary>
    /// <param name = "_custQuotationJour">
    /// The <c>CustQuotationJour</c> to that the header was created from
    /// </param>
    /// <returns>
    /// The <c>TmpTaxWorkTrans</c> object.
    /// </returns>
    private TmpTaxWorkTrans tmpTaxWorkTrans(
        CustQuotationJour    _custQuotationJour)
    {
        if (_custQuotationJour.isProforma())
        {
            if (salesQuotationEditLines)
            {
                return salesQuotationEditLines.tmpTaxWorkTrans(_custQuotationJour.RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSalesQuotationEditLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packed class and unpacks it.
    /// </summary>
    /// <param name = "_salesQuotationEditLinesRecId">The <c>RecId</c> of the <c>SalesQuotationEditLines</c></param>
    /// <returns>An unpacked <c>SalesQuotationEditLinesForm</c></returns>
    private SalesQuotationEditLinesForm unpackSalesQuotationEditLines(RecId _salesQuotationEditLinesRecId)
    {
        if (_salesQuotationEditLinesRecId)
        {
            SRSTmpDataStore srsTmpDataStore;

            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == _salesQuotationEditLinesRecId;

            if (srsTmpDataStore.RecId)
            {
                salesQuotationEditLines = SalesQuotationEditLinesForm::construct(DocumentStatus::Quotation);
                salesQuotationEditLines.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }
        return salesQuotationEditLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>