<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReleaseUpdateDB70_Project extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the module name of an upgrade class.
    /// </summary>
    /// <returns>
    ///    The module name.
    /// </returns>
    /// <remarks>
    ///    This method must be implemented by sub classes.The module name is displayed on the cockpit form for
    ///    every script.
    /// </remarks>
    public ReleaseUpdateModule moduleName()
    {
        return "@SYS334296";
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableUniqueIndex</Name>
				<Source><![CDATA[
    private void disableUniqueIndex(TableId _tableId, int _indexNum)
    {
        ReleaseUpdateDBSyncManager manager = ReleaseUpdateDBSyncManager::Construct();

        DictTable dictTable = new DictTable(_tableId);
        DictIndex dictIndex = new DictIndex(_tableId, _indexNum);

        manager.IgnoreIndexSynchronization(dictTable, dictIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDupLineIdxInProjBegBalJournalTrans_CostSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ignores the index <c>LineIdx</c> in the table <c>ProjBegBalJournalTrans_CostSales</c>.
    /// to allow duplicate records.
    /// </summary>
    /// <remarks>
    /// The LineNum field is used in the unique index LineIdx on the table ProjBegBalJournalTrans_CostSales.
    /// The index is set to allow duplicates before the field is updated with the unique values.
    /// </remarks>
    [UpgradeScriptDescriptionAttribute("@Proj:UpgradeTitle_AllowLineIdxDuplicatesInProjBegBalJournalTrans_CostSales"),
     UpgradeScriptConfigKeyAttribute(configurationKeyStr(Project)),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StartScript),
     UpgradeScriptTableAttribute(tableStr(ProjBegBalJournalTrans_CostSales), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void allowDupLineIdxInProjBegBalJournalTrans_CostSales()
    {
        this.disableUniqueIndex(tableNum(ProjBegBalJournalTrans_CostSales), indexNum(ProjBegBalJournalTrans_CostSales, LineIdx));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjBegBalJournalTrans_CostSalesLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>ProjBegBalJournalTrans_CostSales</c> table to be unique in regards
    ///     to journal and line number.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateLineNumBegBalCostSales"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute(tableStr(ProjBegBalJournalTrans_CostSales), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateProjBegBalJournalTrans_CostSalesLineNum()
    {
        str sqlStatement = 'UPDATE T2'
            + ' SET T2.LINENUM = T1.LINENUM'
            + ' FROM'
            + ' (SELECT T.RECID, T.JOURNALID, ROW_NUMBER() OVER'
            + ' (PARTITION BY T.PARTITION, T.DATAAREAID, T.JOURNALID ORDER BY T.LINENUM, T.RECID) AS LINENUM'
            + ' FROM PROJBEGBALJOURNALTRANS_COSTSALES T) T1, PROJBEGBALJOURNALTRANS_COSTSALES T2 WHERE T1.RECID = T2.RECID';                

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdate(sqlStatement);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDupLineIdxInProjBegBalJournalTrans_OnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ignores the index <c>LineIdx</c> in the table <c>ProjBegBalJournalTrans_OnAcc</c>.
    /// to allow duplicate records.
    /// </summary>
    /// <remarks>
    /// The LineNum field is used in the unique index LineIdx on the table ProjBegBalJournalTrans_OnAcc.
    /// The index is set to allow duplicates before the field is updated with the unique values.
    /// </remarks>
    [UpgradeScriptDescriptionAttribute("@Proj:UpgradeTitle_AllowLineIdxDuplicatesInProjBegBalJournalTrans_OnAcc"),
     UpgradeScriptConfigKeyAttribute(configurationKeyStr(Project)),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StartScript),
     UpgradeScriptTableAttribute(tableStr(ProjBegBalJournalTrans_OnAcc), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void allowDupLineIdxInProjBegBalJournalTrans_OnAcc()
    {
        this.disableUniqueIndex(tableNum(ProjBegBalJournalTrans_OnAcc), indexNum(ProjBegBalJournalTrans_OnAcc, LineIdx));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjBegBalJournalTrans_OnAccLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>ProjBegBalJournalTrans_OnAcc</c> table to be unique in regards
    ///     to journal and line number.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateLineNumBegBalOnAcc"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute(tableStr(ProjBegBalJournalTrans_OnAcc), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateProjBegBalJournalTrans_OnAccLineNum()
    {
        str sqlStatement = 'UPDATE T2'
            + ' SET T2.LINENUM = T1.LINENUM'
            + ' FROM'
            + ' (SELECT T.RECID, T.JOURNALID, ROW_NUMBER() OVER'
            + ' (PARTITION BY T.PARTITION, T.DATAAREAID, T.JOURNALID ORDER BY T.LINENUM, T.RECID) AS LINENUM'
            + ' FROM PROJBEGBALJOURNALTRANS_ONACC T) T1, PROJBEGBALJOURNALTRANS_ONACC T2 WHERE T1.RECID = T2.RECID';               

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdate(sqlStatement);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDupLineIdxInProjJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ignores the index <c>LineIdx</c> in the table <c>ProjJournalTrans</c>.
    /// to allow duplicate records.
    /// </summary>
    /// <remarks>
    /// The LineNum field is used in the unique index LineIdx on the table ProjJournalTrans.
    /// The index is set to allow duplicates before the field is updated with the unique values.
    /// </remarks>
    [UpgradeScriptDescriptionAttribute("@Proj:UpgradeTitle_AllowLineIdxDuplicatesInProjJournalTrans"),
     UpgradeScriptConfigKeyAttribute(configurationKeyStr(Project)),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StartScript),
     UpgradeScriptTableAttribute(tableStr(ProjJournalTrans), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void allowDupLineIdxInProjJournalTrans()
    {
        this.disableUniqueIndex(tableNum(ProjJournalTrans), indexNum(ProjJournalTrans, LineIdx));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjJournalTransLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>ProjJournalTrans</c> table to be unique in regards
    ///     to journal and line number.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateLineNumProjJournal"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute(tableStr(ProjJournalTrans), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateProjJournalTransLineNum()
    {
        str sqlStatement = 'UPDATE T2'
            + ' SET T2.LINENUM = T1.LINENUM'
            + ' FROM'
            + ' (SELECT T.RECID, T.JOURNALID, ROW_NUMBER() OVER'
            + ' (PARTITION BY T.PARTITION, T.DATAAREAID, T.JOURNALID ORDER BY T.LINENUM, T.RECID) AS LINENUM'
            + ' FROM PROJJOURNALTRANS T) T1, PROJJOURNALTRANS T2 WHERE T1.RECID = T2.RECID';       

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdate(sqlStatement);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDupResourceLineIdxInTSTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ignores the index <c>ResourceLineIdx</c> in the table <c>TSTimesheetLine</c>.
    /// to allow duplicate records.
    /// </summary>
    /// <remarks>
    /// The LineNum field is used in the unique index ResourceLineIdx on the table TSTimesheetLine.
    /// The index is set to allow duplicates before the field is updated with the unique values.
    /// </remarks>
    [UpgradeScriptDescriptionAttribute("@Proj:UpgradeTitle_AllowLineIdxDuplicatesInTSTimesheetLine"),
     UpgradeScriptConfigKeyAttribute(configurationKeyStr(Project)),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StartScript),
     UpgradeScriptTableAttribute(tableStr(TSTimesheetLine), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void allowDupResourceLineIdxInTSTimesheetLine()
    {
        this.disableUniqueIndex(tableNum(TSTimesheetLine), indexNum(TSTimesheetLine, ResourceLineIdx));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTSTimesheetLineLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>TSTimesheetLine</c> table to be unique in regards
    ///     to Timesheet number and line number.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateLineNumTimesheet"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute(tableStr(TSTimesheetLine), false, true, true, false),
     UpgradeScriptTableAttribute(tableStr(TSTimesheetLineWeek), false, true, true, false),
     Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateTSTimesheetLineLineNum()
    {
        str sqlStatementTSTimeSheetLine = 'UPDATE T2'
            + ' SET T2.LINENUM = T1.LINENUM'
            + ' FROM'
            + ' (SELECT T.RECID, T.TIMESHEETNBR, ROW_NUMBER() OVER'
            + ' (PARTITION BY T.PARTITION, T.DATAAREAID, T.TIMESHEETNBR ORDER BY T.LINENUM, T.RECID) AS LINENUM'
            + ' FROM TSTIMESHEETLINE T) T1, TSTIMESHEETLINE T2 WHERE T1.RECID = T2.RECID';
       
        str sqlStatementTSTimeSheetLineWeek = 'UPDATE T2'
            + ' SET T2.LINENUM = T1.LINENUM'
            + ' FROM'
            + ' (SELECT T.RECID, T.TIMESHEETNBR, ROW_NUMBER() OVER'
            + ' (PARTITION BY T.PARTITION, T.DATAAREAID, T.TIMESHEETNBR ORDER BY T.LINENUM, T.RECID) AS LINENUM'
            + ' FROM TSTIMESHEETLINEWEEK T) T1, TSTIMESHEETLINEWEEK T2 WHERE T1.RECID = T2.RECID';

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(sqlStatementTSTimeSheetLine).assert();
        statement.executeUpdate(sqlStatementTSTimeSheetLine);
        CodeAccessPermission::revertAssert();

        new SqlStatementExecutePermission(sqlStatementTSTimeSheetLineWeek).assert();
        statement.executeUpdate(sqlStatementTSTimeSheetLineWeek);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePSAActivitySetup_HierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>PSAActivitySetup</c> table HierarchyId field with appropriate value.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateHierarchyIdPSAActivitySetup"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::PartitionScript),
     UpgradeScriptTableAttribute(tableStr(PSAActivitySetup), false, true, true, false),
     UpgradeScriptTableAttribute(tableStr(smmActivities), false, true, false, false),
     UpgradeScriptTableAttribute(tableStr(HierarchyTreeTable), false, true, false, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updatePSAActivitySetup_HierarchyId()
    {
        str sqlStatement = 'UPDATE T1'
            + ' SET HIERARCHYID = T3.HIERARCHYID'
            + ' FROM PSAACTIVITYSETUP T1'
            + ' JOIN SMMACTIVITIES T2 ON T2.ACTIVITYNUMBER = T1.ACTIVITYNUMBER'
            + ' JOIN HIERARCHYTREETABLE T3 ON T3.REFRECID = T2.RECID';        

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdate(sqlStatement);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHierarchy_HierarchyTypePostSync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>Hierarchy</c> table HierarchyType field with appropriate value.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateHierarchyType"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
     UpgradeScriptTableAttribute(tableStr(Hierarchy), false, true, true, false),
     UpgradeScriptTableAttribute(tableStr(HierarchyLinkTable), false, true, false, false),
     UpgradeScriptTableAttribute(tableStr(SalesQuotationTable), false, true, false, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateHierarchy_HierarchyTypePostSync()
    {
        Hierarchy               hierarchy;
        HierarchyLinkTable      hierarchyLinkTable;
        SalesQuotationTable     salesQuotationTable;

        ttsbegin;

        update_recordset hierarchy
            setting HierarchyType = HierarchyType::Quotation
        exists join hierarchyLinkTable
            where hierarchyLinkTable.HierarchyId == hierarchy.HierarchyId
        exists join salesQuotationTable
            where salesQuotationTable.TableId == hierarchyLinkTable.RefTableId
            && salesQuotationTable.RecId == hierarchyLinkTable.RefRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjPosting_LegalEntityFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>ProjPosting</c> table LendingLegalEntity and BorrowingLegalEntity fields with appropriate value.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@Proj:UpdateLegalEntitiesOfProjPosting"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
     UpgradeScriptTableAttribute(tableStr(ProjPosting), false, true, true, false), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateProjPosting_LegalEntityFields()
    {
        ProjPosting posting;

        ttsbegin;

        update_recordset posting
            setting LendingLegalEntity = posting.DataAreaId,
                BorrowingLegalEntity = posting.DataAreaId
            where posting.LendingLegalEntity == ''
                && posting.BorrowingLegalEntity == '';
            
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system with the source version earlier than AX 7.1.
    /// </summary>
    /// <returns>The script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::R1Update3;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>