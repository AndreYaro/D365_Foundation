<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailListingStatusJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// To copy the ChannelListingId data from <c>RetailListingStatusLog</c> table to <c>RetailProductListingStatus</c> table.
/// </summary>
class RetailListingStatusJob extends RunBaseBatch implements BatchRetryable
{
    RetailProductListingStatus retailProductListingStatus;
    RetailListingStatusLog      retailListingStatusLog;
    RetailTmpListingStatusLog   retailTmpListingStatusLog;
    RetailCatalogInternalOrg    retailCatalogInternalOrg;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateChannelListingId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the data of ChannelListingId from <c>RetailListingStatusLog</c> table to <c>RetailProductListingStatus</c> table.
    /// </summary>
    public void populateChannelListingId()
    {
        #OCCRetryCount
        date todaysDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        RetailProductListingStatus masterListing, variantListing, variantInTmp, variantListing2, checkRetailListing;
        InventTable inventTable;
        EcoResDistinctProductVariant distinctProductVariant;
        InventDimCombination    inventDimCombination;
        RetailOnlineChannelTable retailOnlineChannelTable;
        RetailPubCatalog    retailPubCatalog;
        RetailListingStatusLogMax retailListingStatusLogMax;
        RetailParentListingStatusMaxDtMaxListing  retailParentListingStatusMaxDtMaxListing;

        try
        {
            ttsbegin;

            // Explicitly published product
            insert_recordset retailProductListingStatus
            (
                Catalog,
                Channel,
                Product,
                LanguageId
            )
            select Catalog, Channel, Product, LanguageId from retailListingStatusLogMax
            notexists join checkRetailListing
                where checkRetailListing.Catalog == retailListingStatusLogMax.Catalog
                    && checkRetailListing.Channel == retailListingStatusLogMax.Channel
                    && checkRetailListing.Product == retailListingStatusLogMax.Product
                    && checkRetailListing.LanguageId == retailListingStatusLogMax.LanguageId;

            // Product master implicitly published from distinct product variant
            insert_recordset retailProductListingStatus
            (
                Catalog,
                Channel,
                LanguageId,
                Product
            )
            select Catalog, Channel, LanguageId from retailListingStatusLogMax
                group by Catalog, Channel, LanguageId
            join ProductMaster from distinctProductVariant
                group by ProductMaster
                where distinctProductVariant.RecId == retailListingStatusLogMax.Product
            notexists join checkRetailListing
                where checkRetailListing.Catalog == retailListingStatusLogMax.Catalog
                    && checkRetailListing.Channel == retailListingStatusLogMax.Channel
                    && checkRetailListing.LanguageId == retailListingStatusLogMax.LanguageId
                    && checkRetailListing.Product == distinctProductVariant.ProductMaster;

            // Explicit non-variant
            update_recordset retailProductListingStatus
            setting ActionStatus    = retailListingStatusLog.ActionStatus,
                    ChannelListingId = retailListingStatusLog.ChannelListingId,
                    RequestedAction = retailListingStatusLog.AppliedAction,
                    StatusMessage   = retailListingStatusLog.StatusMessage,
                    StatusDateTime  = retailListingStatusLog.StatusDateTime,
                    ChannelDataAreaId = retailOnlineChannelTable.inventLocationDataAreaId,
                    ItemId          = inventTable.ItemId,
                    ValidFrom       = retailPubCatalog.PublishedValidFrom,
                    ValidTo         = retailPubCatalog.PublishedValidTo
            join retailListingStatusLogMax
                where retailListingStatusLogMax.Catalog == retailProductListingStatus.Catalog
                    && retailListingStatusLogMax.Channel == retailProductListingStatus.Channel
                    && retailListingStatusLogMax.Product == retailProductListingStatus.Product
                    && retailListingStatusLogMax.LanguageId == retailProductListingStatus.LanguageId
            join retailListingStatusLog
                where retailListingStatusLog.RecId == retailListingStatusLogMax.MaxListingStatusLog
            join retailOnlineChannelTable
                    where retailOnlineChannelTable.RecId == retailListingStatusLog.Channel
            join inventTable
                where inventTable.Product == retailProductListingStatus.Product
                    && inventTable.dataAreaId == retailOnlineChannelTable.inventLocationDataAreaId
            join retailPubCatalog
                where retailPubCatalog.Origin == retailProductListingStatus.Catalog;

            // Explicit variant
            update_recordset retailProductListingStatus
            setting ActionStatus    = retailListingStatusLog.ActionStatus,
                    ChannelListingId = retailListingStatusLog.ChannelListingId,
                    RequestedAction = retailListingStatusLog.AppliedAction,
                    StatusMessage   = retailListingStatusLog.StatusMessage,
                    StatusDateTime  = retailListingStatusLog.StatusDateTime,
                    ChannelDataAreaId = retailOnlineChannelTable.inventLocationDataAreaId,
                    ItemId          = inventDimCombination.ItemId,
                    InventDim       = inventDimCombination.InventDimId,
                    ValidFrom       = retailPubCatalog.PublishedValidFrom,
                    ValidTo         = retailPubCatalog.PublishedValidTo,
                    ParentListing   = masterListing.RecId
            join retailListingStatusLogMax
                where retailListingStatusLogMax.Catalog == retailProductListingStatus.Catalog
                    && retailListingStatusLogMax.Channel == retailProductListingStatus.Channel
                    && retailListingStatusLogMax.Product == retailProductListingStatus.Product
                    && retailListingStatusLogMax.LanguageId == retailProductListingStatus.LanguageId
            join retailListingStatusLog
                where retailListingStatusLog.RecId == retailListingStatusLogMax.MaxListingStatusLog
            join retailOnlineChannelTable
                    where retailOnlineChannelTable.RecId == retailListingStatusLog.Channel
            join inventDimCombination
                where inventDimCombination.DistinctProductVariant == retailListingStatusLog.Product
                    && inventDimCombination.dataAreaId == retailOnlineChannelTable.inventLocationDataAreaId
            join distinctProductVariant
                where distinctProductVariant.RecId == retailListingStatusLog.Product
            join retailPubCatalog
                where retailPubCatalog.Origin == retailListingStatusLog.Catalog
            join masterListing
                where masterListing.Catalog == retailProductListingStatus.Catalog
                    && masterListing.Channel == retailProductListingStatus.Channel
                    && masterListing.Product == distinctProductVariant.ProductMaster
                    && masterListing.LanguageId == retailProductListingStatus.LanguageId;

            // Implicit master
            update_recordset retailProductListingStatus
            setting ChannelDataAreaId = retailOnlineChannelTable.inventLocationDataAreaId,
                    ItemId          = inventTable.ItemId,
                    ValidFrom       = retailPubCatalog.PublishedValidFrom,
                    ValidTo         = retailPubCatalog.PublishedValidTo
                where !retailProductListingStatus.ItemId
            join retailOnlineChannelTable
                    where retailOnlineChannelTable.RecId == retailProductListingStatus.Channel
            join inventTable
                where inventTable.Product == retailProductListingStatus.Product
                    && inventTable.dataAreaId == retailOnlineChannelTable.inventLocationDataAreaId
            join retailPubCatalog
                where retailPubCatalog.Origin == retailProductListingStatus.Catalog;

            // update StatusDateTime for Implicit master
            update_recordSet retailProductListingStatus
                setting StatusDateTime = checkRetailListing.StatusDateTime
                where !retailProductListingStatus.ParentListing
                join retailParentListingStatusMaxDtMaxListing
                    where retailParentListingStatusMaxDtMaxListing.Catalog == retailProductListingStatus.Catalog
                        && retailParentListingStatusMaxDtMaxListing.Channel == retailProductListingStatus.Channel
                        && retailParentListingStatusMaxDtMaxListing.LanguageId == retailProductListingStatus.LanguageId
                        && retailParentListingStatusMaxDtMaxListing.ParentListing == retailProductListingStatus.RecId
                join checkRetailListing
                    where checkRetailListing.RecId == retailParentListingStatusMaxDtMaxListing.Listing;

            update_recordSet retailListingStatusLog
                setting ListingStatus = retailProductListingStatus.RecId
                where retailListingStatusLog.Processed == NoYes::No
                join retailProductListingStatus
                where retailProductListingStatus.Catalog == retailListingStatusLog.Catalog
                    && retailProductListingStatus.Product == retailListingStatusLog.Product
                    && retailProductListingStatus.Channel == retailListingStatusLog.Channel
                    && retailProductListingStatus.LanguageId == retailListingStatusLog.LanguageId;

            insert_recordset retailTmpListingStatusLog(RetailListingStatusRecId, RetailListing)
            select RecId, ListingStatus from retailListingStatusLog
                where retailListingStatusLog.Processed == NoYes::No;

            // Mark the expired listings for which we have received Deletes from Channel as expired.
            update_recordSet retailProductListingStatus
                setting RequestedAction = RetailListingAction::Expire
                where retailProductListingStatus.ValidTo <= todaysDate // expired
                    && retailProductListingStatus.RequestedAction == RetailListingAction::Delete;

            update_recordset retailListingStatusLog
                setting Processed = NoYes::Yes
            join RetailListingStatusRecId from retailTmpListingStatusLog
                where retailListingStatusLog.RecId == retailTmpListingStatusLog.RetailListingStatusRecId;

            // Fix the master listing status by aggregate variant listing statuses.
            // If master has a variant in the tmp table, and master has a failed variant.
            update_recordSet masterListing
                setting ActionStatus = RetailListingActionStatus::Failed
            exists join variantInTmp
                where masterListing.RecId == variantInTmp.ParentListing
                join retailTmpListingStatusLog
                    where retailTmpListingStatusLog.RetailListing == variantInTmp.RecId
            exists join variantListing
                where masterListing.RecId == variantListing.ParentListing
                    && variantListing.ActionStatus == RetailListingActionStatus::Failed
            ;

            // If master has a variant in the tmp table, and master has no failed variants, and has a InProgress variant
            update_recordSet masterListing
                setting ActionStatus = RetailListingActionStatus::InProgress
            exists join variantInTmp
                where masterListing.RecId == variantInTmp.ParentListing
                join retailTmpListingStatusLog
                    where retailTmpListingStatusLog.RetailListing == variantInTmp.RecId
            exists join variantListing
                where masterListing.RecId == variantListing.ParentListing
                    && variantListing.ActionStatus == RetailListingActionStatus::InProgress
            notexists join variantListing2
                where masterListing.RecId == variantListing2.ParentListing
                    && variantListing2.ActionStatus == RetailListingActionStatus::Failed
            ;

            // If master has a variant in the tmp table, and all variant are done.
            update_recordSet masterListing
                setting ActionStatus = RetailListingActionStatus::Done
            exists join variantInTmp
                where masterListing.RecId == variantInTmp.ParentListing
                join retailTmpListingStatusLog
                    where retailTmpListingStatusLog.RetailListing == variantInTmp.RecId
            notexists join variantListing
                where masterListing.RecId == variantListing.ParentListing
                    && variantListing.ActionStatus != RetailListingActionStatus::Done
            ;

            this.updateCatalogChannel();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            info("@SYS65063"); // Deadlock detected
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    info("@SYS107548"); // Update conflicts
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        this.populateChannelListingId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatalogChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates retail catalog channel information.
    /// </summary>
    public void updateCatalogChannel()
    {
        boolean                     inProgress, failed, success;
        date todaysDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        int64 currentRunSuccessCount, currentRunFailedCount;
        RetailOnlineChannelTable    onlineChannelTable;
        RetailInternalOrganization  retailInternalOrganization;
        RetailCatalogInternalOrg    retailCatalogInternalOrgLocal;
        RetailPubRetailOnlineChannelLanguages retailPubRetailOnlineChannelLanguages;
        Catalog catalog;

        // Should only do online channels
        // listing status is currently not support for channel hierarchy (Business unit such as Online stores).
        while select retailCatalogInternalOrg
            join RecId from retailInternalOrganization
                where retailInternalOrganization.RecId == retailCatalogInternalOrg.InternalOrganization
            join Recid from onlineChannelTable
                where onlineChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
        {
            inProgress = false;
            failed = false;
            success = false;
            currentRunSuccessCount = 0;
            currentRunFailedCount = 0;

            // check If any listing action has status Failed.
            select firstOnly RecId from retailProductListingStatus
                where retailProductListingStatus.Catalog == retailCatalogInternalOrg.Catalog
                    && retailProductListingStatus.Channel == onlineChannelTable.RecId
                    && (retailProductListingStatus.ValidTo >=  todaysDate || retailProductListingStatus.RequestedAction == RetailListingAction::Expire)
                    && retailProductListingStatus.ActionStatus == RetailListingActionStatus::Failed;
            if (retailProductListingStatus.RecId)
            {
                failed = true;
            }

            // check If any current run listing action has status Failed.
            select count(RecId) from retailProductListingStatus
                where retailProductListingStatus.Catalog == retailCatalogInternalOrg.Catalog
                    && retailProductListingStatus.Channel == onlineChannelTable.RecId
                    && !retailProductListingStatus.ParentListing
                    && (retailProductListingStatus.ValidTo >=  todaysDate || retailProductListingStatus.RequestedAction == RetailListingAction::Expire)
                    && retailProductListingStatus.ActionStatus == RetailListingActionStatus::Failed
                join RecId, PublishedDateTime from catalog
                    where catalog.RecId == retailCatalogInternalOrg.Catalog
                    && retailProductListingStatus.StatusDateTime > catalog.PublishedDateTime;
            if (retailProductListingStatus.RecId)
            {
                currentRunFailedCount = retailProductListingStatus.RecId;
            }

            // check If any listing action has status Done.
            select count(RecId) from retailProductListingStatus
                where retailProductListingStatus.Catalog == retailCatalogInternalOrg.Catalog
                    && retailProductListingStatus.Channel == onlineChannelTable.RecId
                    && !retailProductListingStatus.ParentListing
                    && (retailProductListingStatus.ValidTo >=  todaysDate || retailProductListingStatus.RequestedAction == RetailListingAction::Expire)
                    && retailProductListingStatus.ActionStatus == RetailListingActionStatus::Done
                join RecId, PublishedDateTime from catalog
                    where catalog.RecId == retailCatalogInternalOrg.Catalog
                    && retailProductListingStatus.StatusDateTime > catalog.PublishedDateTime;
            if (retailProductListingStatus.RecId)
            {
                currentRunSuccessCount = retailProductListingStatus.RecId;
            }

            select count(RecId) from retailPubRetailOnlineChannelLanguages
                where retailPubRetailOnlineChannelLanguages.OnlineChannel == onlineChannelTable.RecId;

            if ((retailCatalogInternalOrg.ListingCount * retailPubRetailOnlineChannelLanguages.RecId) <= (currentRunSuccessCount + currentRunFailedCount))
            {
                if (!failed && (retailCatalogInternalOrg.ListingCount == currentRunSuccessCount))
                {
                    success = true;
                }
                }
                else
                {
                    inProgress = true;
                }

            if (inProgress)
            {
                update_recordSet retailCatalogInternalOrgLocal
                    setting AssociatedListingActionStatus = RetailListingActionStatus::InProgress,
                    AssociatedListingAction = RetailListingAction::Publish
                    where retailCatalogInternalOrgLocal.Catalog == retailCatalogInternalOrg.Catalog
                    && retailCatalogInternalOrgLocal.InternalOrganization == retailCatalogInternalOrg.InternalOrganization;
            }
            else if (failed)
            {
                update_recordSet retailCatalogInternalOrgLocal
                    setting AssociatedListingActionStatus = RetailListingActionStatus::Failed,
                    AssociatedListingAction = RetailListingAction::Publish
                    where retailCatalogInternalOrgLocal.Catalog == retailCatalogInternalOrg.Catalog
                    && retailCatalogInternalOrgLocal.InternalOrganization == retailCatalogInternalOrg.InternalOrganization;
            }
            else if (success)
            {
                update_recordSet retailCatalogInternalOrgLocal
                    setting AssociatedListingActionStatus = RetailListingActionStatus::Done,
                    AssociatedListingAction = RetailListingAction::Publish
                    where retailCatalogInternalOrgLocal.Catalog == retailCatalogInternalOrg.Catalog
                    && retailCatalogInternalOrgLocal.InternalOrganization == retailCatalogInternalOrg.InternalOrganization;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailListingStatusJob construct()
    {
        return new RetailListingStatusJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    // Here goes a description of the class
    public static ClassDescription description()
    {
        return "@RET4040016";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RetailListingStatusJob retailListingStatusLog;
        ;

        retailListingStatusLog = RetailListingStatusJob::construct();
        if (retailListingStatusLog.prompt())
        {
            retailListingStatusLog.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>