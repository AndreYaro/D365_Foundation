<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterTypePurchase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterTypeConsignment</c> class contains the logic specific to the <c>FormLetterType</c> purchase.
/// </summary>
[FormLetterTypeFactoryAttribute(FormLetterType::Purchase)]
class FormLetterTypePurchase extends FormletterTypeBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formLetterContract</Name>
				<Source><![CDATA[
    public FormLetterContract formLetterContract(container _formLetterContractPacked)
    {
        return PurchFormLetterContract::newFromPackedVersion(_formLetterContractPacked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalPrint</Name>
				<Source><![CDATA[
    public FormletterJournalPrint formletterJournalPrint(FormLetterContract _formLetterContract)
    {
        return FormletterJournalPrint::newPurchJournalPrint(_formLetterContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedOutputContract</Name>
				<Source><![CDATA[
    public container packedOutputContract(FormletterParmDataRearrangeBatchTask _formletterParmDataRearrangeBatchTask)
    {
        return PurchFormletterParmData::reArrangeServer(_formletterParmDataRearrangeBatchTask.parmFormletterContract().pack(), 
            _formletterParmDataRearrangeBatchTask.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterProvider</Name>
				<Source><![CDATA[
    public FormletterProvider formletterProvider()
    {
        return PurchFormletterProvider::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalCreate</Name>
				<Source><![CDATA[
    public FormletterJournalCreate formletterJournalCreate(FormletterService _formletterService,Common _parmTable)
    {
        return FormletterJournalCreate::newPurchJournalCreate(_formletterService.parmFormLetterContract(), _parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalPost</Name>
				<Source><![CDATA[
    public FormletterJournalPost formletterJournalPost(FormletterService _formletterService, Common _parmTable)
    {
        FormletterJournalPost formletterJournalPost = FormletterJournalPost::newPostPurch(_formletterService.parmFormLetterContract(), _formletterService.parmJournal()
                                                                                            , _parmTable);
        formletterJournalPost.parmTotals(_formletterService.parmTotals());
        return formletterJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmData</Name>
				<Source><![CDATA[
    public formletterParmData formletterParmData(FormletterService _formletterService)
    {
        return PurchFormletterParmData::newChooseLines(_formletterService.parmFormLetterContract().pack(), true, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmUpdate</Name>
				<Source><![CDATA[
    public FormletterParmUpdate formletterParmUpdate(FormletterService _formletterService)
    {
        return _formletterService.parmFormLetterContract().parmParmUpdate() as PurchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmMaps</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmMaps(FormletterService _formletterService)
    {
        PurchParmTable          emptyPurchParmTable;
        VendInvoiceInfoTable    emptyVendInvoiceInfoTable;
        FormletterParmTable     formletterParmTable;
        DictField               dictField;
        #ISOCountryRegionCodes

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GEEPL>
        boolean countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        // </GEEPL>

        if ((_formletterService.parmDocumentStatus() == DocumentStatus::Invoice)                        ||
                    // <GEERU>
                    (countryRegion_RU && _formletterService.parmDocumentStatus() == DocumentStatus::Facture_RU) ||
                    // </GEERU>
                    // <GEEPL>
                    (countryRegion_PL && _formletterService.parmDocumentStatus() == DocumentStatus::PlSAD)      ||
                    // </GEEPL>
                    (_formletterService.parmDocumentStatus() == DocumentStatus::ApproveJournal))
        {
            formletterParmTable = emptyVendInvoiceInfoTable;
            dictField = new DictField(tableNum(VendInvoiceInfoTable), fieldNum(VendInvoiceInfoTable, PurchId));
        }
        else
        {
            formletterParmTable = emptyPurchParmTable;
            dictField = new DictField(tableNum(PurchParmTable), fieldNum(PurchParmTable, PurchId));
        }
        _formletterService.parmLabelOrderId(dictField.label());
        return formletterParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologPrefixParmTable</Name>
				<Source><![CDATA[
    public str infologPrefixParmTable(FormletterParmTable _parmTable)
    {
        str infologPrefix;
        if (_parmTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = _parmTable;
            infologPrefix = fieldLabelValue(tableNum(VendInvoiceInfoTable), fieldNum(VendInvoiceInfoTable, Num), vendInvoiceInfoTable.Num);
        }
        else
        {
            infologPrefix = fieldLabelValue(_parmTable.TableId, fieldNum(PurchParmTable, PurchId), _parmTable.OrderId);
        }  

        return infologPrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmTable</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmTable(DocumentStatus _documentStatus)
    {
        PurchParmTable          emptyPurchParmTable;
        VendDocumentTableMap    emptyParmTable;
        VendInvoiceInfoTable    emptyVendInvoiceInfoTable;
        if ((_documentStatus == DocumentStatus::Invoice) ||
            (_documentStatus == DocumentStatus::ApproveJournal))
        {
            emptyParmTable = emptyVendInvoiceInfoTable;
        }
        else
        {
            emptyParmTable = emptyPurchParmTable;
        }

        return emptyParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmUpdate</Name>
				<Source><![CDATA[
    public FormletterParmUpdate initFormletterParmUpdate()
    {
        PurchParmUpdate emptyPurchParmUpdate;
        return emptyPurchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterJournal</Name>
				<Source><![CDATA[
    public FormletterJournal initFormletterJournal(DocumentStatus _documentStatus)
    {
        FormletterJournal       formletterJournal;

        // <GIN>
        CustomsVendBOEJour_IN   emptyCustomsVendBOEJour;
        boolean                 isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        // </GIN>

        switch (_documentStatus)
        {
            case DocumentStatus::PurchaseOrder  :
                VendPurchOrderJour emptyVendPurchOrderJour;
                formletterJournal = emptyVendPurchOrderJour;
                break;
            
            case DocumentStatus::ReceiptsList   :
                VendReceiptsListJour emptyVendReceiptsListJour;
                formletterJournal = emptyVendReceiptsListJour;
                break;           
            
            case DocumentStatus::PackingSlip    :
                VendPackingSlipJour emptyVendPackingSlipJour;
                formletterJournal = emptyVendPackingSlipJour;
                break;            
            
            case DocumentStatus::Invoice        ://fall through
            case DocumentStatus::ApproveJournal :
                VendInvoiceJour emptyVendInvoiceJour;
                formletterJournal = emptyVendInvoiceJour;
                break;
            
            case DocumentStatus::ConfirmationRequest :
                if (PurchConfirmationRequestJourInitFormLetterFlight::instance().isEnabled())
                {
                    PurchConfirmationRequestJour emptyPurchJour;
                    formletterJournal = emptyPurchJour;                   
                }
                else
                {
                    throw error(strFmt("@SYS19306",funcName()));
                }
                break;

                // <GIN>
            case DocumentStatus::BillOfEntry_IN :
                if (isCustomsEnabled)
                {
                    formletterJournal = emptyCustomsVendBOEJour;
                }
                break;
                // </GIN>

            default : throw error(strFmt("@SYS19306",funcName()));
        }

        return formletterJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>