<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDBKUpdate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim DBK update class.
/// </summary>
public class EximDBKUpdate_IN
{
    TmpEximTotalDBKTrans_IN tmpTotalDBKTrans;
    EximDBKSchemesTable_IN  dbkSchemesTable;
    EximDBKSchemesLine_IN   dbkSchemesLine;
    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalTrans      ledgerJournalTrans;
    EximPortId_IN           portId;
    EximProductGroup_IN     productGroup;
    DetailSummary           detailSummary;
    AmountMST               totalDrawbackAllowed;
    FromDateTime            fromDateTime;
    ToDateTime              toDateTime;
    TransDateTime           transDateTime;
    Voucher                 voucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new ledger journal.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createJournal()
    {
        LedgerJournalName  ledgerJournalName;
        LedgerJournalTable newLedgerJournalTable;

        select firstonly JournalName from ledgerJournalName
            where ledgerJournalName.JournalType == LedgerJournalType::CustPayment;

        newLedgerJournalTable.clear();
        newLedgerJournalTable.initValue();

        newLedgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);

        newLedgerJournalTable.JournalNum           = JournalTableData::newTable(newLedgerJournalTable).nextJournalId();

        newLedgerJournalTable.CurrencyCode         = Ledger::accountingCurrency();

        newLedgerJournalTable.DetailSummaryPosting = detailSummary;

        if (newLedgerJournalTable.validateWrite())
        {
            newLedgerJournalTable.insert();
            this.parmLedgerJournalTable(newLedgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the journal line information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initJournalLine()
    {
        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();

        ledgerJournalTrans.JournalNum        = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.LineNum           = LedgerJournalTrans::lastLineNum(ledgerJournalTable.JournalNum) + 1;
        ledgerJournalTrans.Voucher           = voucher;
        ledgerJournalTrans.AccountType       = dbkSchemesTable.CustAccount ? LedgerJournalACType::Cust : LedgerJournalACType::Ledger;

        if (dbkSchemesTable.CustAccount)
        {
            ledgerJournalTrans.parmAccount(dbkSchemesTable.CustAccount, LedgerJournalACType::Cust);
            ledgerJournalTrans.DefaultDimension  = dbkSchemesLine.DefaultDimension;
        }
        else
        {
            ledgerJournalTrans.LedgerDimension = dbkSchemesTable.ReceivableLedgerDimension;
        }

        ledgerJournalTrans.TransDate         = DateTimeUtil::date(transDateTime);
        ledgerJournalTrans.PaymentStatus     = CustVendPaymStatus::None;
        ledgerJournalTrans.SettleVoucher     = SettlementType::None;

        ledgerJournalTrans.CurrencyCode      = Ledger::accountingCurrency();

        ledgerJournalTrans.Approved          = NoYes::Yes;

        ledgerJournalTrans.Approver          = HcmWorker::userId2Worker(curuserid());

        ledgerJournalTrans.Due               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.PostingProfile    = CustParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger voucher of the transaction.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void ledgerVoucherTransCreate()
    {
        NumberSequenceReference numberSequenceReference;
        NumberSeq               numSeq;

        numberSequenceReference = EximParameters_IN::numRefDBKVoucher();

        numSeq = NumberSeq::newGetVoucher(numberSequenceReference);

        if (NumberSequenceTable::find(numberSequenceReference.NumberSequenceId).Continuous == NoYes::No)
        {
            throw error(strfmt("@SYS78707", numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
        }

        voucher = numSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucherTransEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends ledger voucher transaction.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void ledgerVoucherTransEnd()
    {
        if (totalDrawbackAllowed)
        {
            this.post();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDBKSchemesLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximDBKSchemesLine_IN parmDBKSchemesLine(EximDBKSchemesLine_IN _dbkSchemesLine = dbkSchemesLine)
    {
        dbkSchemesLine = _dbkSchemesLine;

        return dbkSchemesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDBKSchemesTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximDBKSchemesTable_IN parmDBKSchemesTable(EximDBKSchemesTable_IN _dbkSchemesTable = dbkSchemesTable)
    {
        dbkSchemesTable = _dbkSchemesTable;

        return dbkSchemesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailSummary</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DetailSummary parmDetailSummary(DetailSummary _detailSummary = detailSummary)
    {
        detailSummary = _detailSummary;

        return detailSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDateTime parmFromDateTime(FromDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;

        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPortId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximPortId_IN parmPortId(EximPortId_IN _portId = portId)
    {
        portId = _portId;

        return portId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximProductGroup_IN parmProductGroup(EximProductGroup_IN _productGroup = productGroup)
    {
        productGroup = _productGroup;

        return productGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximTotalDBKTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximTotalDBKTrans_IN parmTmpEximTotalDBKTrans(TmpEximTotalDBKTrans_IN _tmpTotalDBKTrans = null)
    {
        if (!prmisdefault(_tmpTotalDBKTrans))
        {
            tmpTotalDBKTrans = _tmpTotalDBKTrans;
        }
        return tmpTotalDBKTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDateTime parmToDateTime(ToDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;

        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmTransDateTime(TransDateTime _transDateTime = transDateTime)
    {
        transDateTime = _transDateTime;

        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post()
    {
        Args args = new Args();

        args.parm(ledgerJournalTable.JournalNum);
        args.record(ledgerJournalTable);
        LedgerJournalPost::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method of the instance.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void run()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximDBKUpdate_IN</c> class.
    /// </summary>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostDutyDrawback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new post duty drawback.
    /// </summary>
    /// <param name="_tmpTotalsDBKTrans">
    /// The total DBK transactions.
    /// </param>
    /// <param name="_args">
    /// Other arguments.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void newPostDutyDrawback(
        TmpEximTotalDBKTrans_IN _tmpTotalsDBKTrans,
        Args                    _args)
    {
        EximDBKUpdate_IN dbkUpdate;
        Object           callerForm;

        if (!_args || !_args.caller())
        {
            throw error("@SYS25407");
        }

        callerForm = _args.caller();

        dbkUpdate = new EximDBKUpd_Drawback_IN();

        if (formHasMethod(callerForm, identifierstr(parmFromDateTime)))
        {
            dbkUpdate.parmFromDateTime(callerForm.parmFromDateTime());
        }
        if (formHasMethod(callerForm, identifierstr(parmToDateTime)))
        {
            dbkUpdate.parmToDateTime(callerForm.parmToDateTime());
        }
        if (formHasMethod(callerForm, identifierstr(parmTransDateTime)))
        {
            dbkUpdate.parmTransDateTime(callerForm.parmTransDateTime());
        }
        if (formHasMethod(callerForm, identifierstr(parmDetailSummary)))
        {
            dbkUpdate.parmDetailSummary(callerForm.parmDetailSummary());
        }
        if (formHasMethod(callerForm, identifierstr(parmPortId)))
        {
            dbkUpdate.parmPortId(callerForm.parmPortId());
        }
        if (formHasMethod(callerForm, identifierstr(parmProductGroup)))
        {
            dbkUpdate.parmProductGroup(callerForm.parmProductGroup());
        }

        dbkUpdate.parmTmpEximTotalDBKTrans(_tmpTotalsDBKTrans);

        if (!dbkUpdate.validate())
        {
            throw Exception::Error;
        }

        dbkUpdate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostDutyDrawbackRealization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new post duty drawback realization.
    /// </summary>
    /// <param name="_args">
    /// The arguments.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void newPostDutyDrawbackRealization(Args _args)
    {
        EximDBKUpdate_IN       dbkUpdate;
        EximDBKSchemesTable_IN dbkSchemesTable;
        EximDBKSchemesLine_IN  dbkschemesLine;
        Object                 callerForm;

        if (!_args
            || !_args.caller()
            || !_args.record()
            || !_args.dataset() == tablenum(EximDBKSchemesLine_IN))
        {
            throw error("@SYS25407");
        }

        dbkUpdate = new EximDBKUpd_RealizeDrawback_IN();

        dbkschemesLine = _args.record();
        dbkSchemesTable = EximDBKSchemesTable_IN::find(dbkschemesLine.SchemesTableRecId);

        callerForm  = _args.caller();
        if (formHasMethod(callerForm, identifierstr(parmPostingDateTime)))
        {
            dbkUpdate.parmTransDateTime(callerForm.parmPostingDateTime());
        }

        dbkUpdate.parmDBKSchemesTable(dbkSchemesTable);
        dbkUpdate.parmFromDateTime(dbkSchemesTable.FromDateTime);
        dbkUpdate.parmDetailSummary(dbkSchemesTable.DetailLevel);
        dbkUpdate.parmPortId(EximPorts_IN::find(dbkSchemesTable.EximPorts).PortId);
        dbkUpdate.parmToDateTime(dbkSchemesTable.ToDateTime);

        if (!dbkUpdate.validate())
        {
            throw Exception::Error;
        }

        dbkUpdate.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>