<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationWizardTableCtrl_NormalName</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class WmsLocationWizardTableCtrl_NormalName extends WMSLocationWizardTableCtrl_Location
{
    WMSAisle                    bufferAisle;
    WMSAisle                    aisleAfter;

    WMSAisleNo                  aisleFrom, aisleTo;
    WMSRackId                   rackFrom, rackTo;
    Map                         shelfs;
    Map                         bins;

    Map                         warehouseDefaults;

    #Define.defaultBinFromPos(1)
    #Define.defaultBinToPos(2)
    #Define.defaultShelfFromPos(3)
    #Define.defaultShelfToPos(4)
    #Define.defaultRackFromPos(5)
    #Define.defaultRackToPos(6)
    #Define.existingAisleListPos(7)

    #localmacro.currentList
        aisleFrom,
        aisleTo,
        rackFrom,
        rackTo,
        WMSHeight,
        WMSWidth,
        WMSDepth
    #endmacro

    #WMSLocationDefaultData

    #define.ShelfsMax(9)
    #define.BinsMax(5)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAisleAfter</Name>
				<Source><![CDATA[
    protected void buildAisleAfter()
    {
        WMSAisle        wmsAisle;
        container       defaultValues = this.getDefaultValues();
        container       existingAisleListPacked;
        List            recordList;
        ListEnumerator  listEnumerator;

        aisleAfter.ttsbegin();

        while select forupdate aisleAfter
            aisleAfter.doDelete();

        existingAisleListPacked = conPeek(defaultValues, #existingAisleListPos);
        if (conLen(existingAisleListPacked) > 2)
        {
            recordList = List::create(existingAisleListPacked);
            listEnumerator = recordList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                wmsAisle = listEnumerator.current();
                aisleAfter.data(wmsAisle);
                aisleAfter.doInsert();
            }
        }
        wmsAisle.setTmp();
        wmsAisle.setTmpData(bufferAisle);

        while select wmsAisle
        {
            aisleAfter.data(wmsAisle);
            aisleAfter.doInsert();
        }

        aisleAfter.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    boolean canUpdate()
    {
        boolean ret = super();

        if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate()       &&
            !this.wmsLocationWizardTableCtrl_Aisle().normalAisleExists())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotExistTmp</Name>
				<Source><![CDATA[
    protected boolean checkNotExistTmp(
        Common      cursor = this.buffer(),
        boolean     onlySuper = false)
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (! super(cursor))
        {
            return false;
        }

        if (onlySuper)
        {
            return true;
        }

        if (! localLocationWizard.wmsLocationWizardTableCtrl_InboundDock().checkNotExistTmp(cursor,true))
        {
            return false;
        }

        if (! localLocationWizard.wmsLocationWizardTableCtrl_OutboundDock().checkNotExistTmp(cursor,true))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromBin</Name>
				<Source><![CDATA[
    protected WMSLevelId defaultFromBin()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromShelf</Name>
				<Source><![CDATA[
    protected WMSLevelId defaultFromShelf()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToBin</Name>
				<Source><![CDATA[
    protected WMSLevelId defaultToBin()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToShelf</Name>
				<Source><![CDATA[
    protected WMSLevelId defaultToShelf()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTable</Name>
				<Source><![CDATA[
    public void doTable(boolean _useCurBuffer = false)
    {
        if (_useCurBuffer)
        {
            return;
        }

        this.buildAisleAfter();

        while select aisleAfter
            where aisleAfter.AisleNo    >= aisleFrom    &&
                  aisleAfter.AisleNo    <= aisleTo
        {
            this.initAisle(aisleAfter.AisleId, aisleAfter.AisleNo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableGridTab</Name>
				<Source><![CDATA[
    /*
    This method is to be used in the wizard form to test if a grid tabpage is enabled.
    */
    public boolean enableGridTab()
    {
        return this.enableParmTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _bufferToCheck = null)
    {
        WMSLocation bufferToCheck = _bufferToCheck as WMSLocation;
        return WMSLocationWizardTableCtrl_Dock::existThisOrCrossBuffer(this.makeTmp(),bufferToCheck,this.wmsLocationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValues</Name>
				<Source><![CDATA[
    container getDefaultValues()
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;
        InventLocationId  inventLocationIdThis = localLocationWizard.parmInventLocationId();

        if (!warehouseDefaults.exists(inventLocationIdThis))
        {
            this.initWarehouseInformation(inventLocationIdThis, WMSLocationWizardTableCtrl_NormalName::getWarehouseInformation(inventLocationIdThis, this.wmsLocationType()));
        }
        return warehouseDefaults.lookup(localLocationWizard.parmInventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAisle</Name>
				<Source><![CDATA[
    protected void initAisle(WMSAisleId _wmsAisleId, WMSAisleNo _wmsAisleNo)
    {
        int             i, j;
        int             rack;

        for (rack = rackFrom; rack <= rackTo; rack++)
        {
            for (i = 1; i <= #shelfsMax; i++)
            {
                if (! shelfs.lookup(i))
                {
                    continue;
                }

                for (j = 1; j <= #binsMax; j++)
                {
                    if (! bins.lookup(j))
                    {
                        continue;
                    }
                    if (this.initLocation(_wmsAisleId, _wmsAisleNo, rack, i, j))
                    {
                        buffer.doInsert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBins</Name>
				<Source><![CDATA[
    protected void initBins()
    {
        WMSPositionId                   binFrom, binTo;
        int                             i;
        container                       defaultValues = this.getDefaultValues();

        bins    = new Map(Types::Integer,Types::Enum);
        for (i=#BinsMax;i;i--)
        {
            bins.insert(i,false);
        }

        binFrom = conPeek(defaultValues, #defaultBinFromPos);
        binFrom = (binFrom > 0) ? binFrom : this.defaultFromBin();

        binTo = conPeek(defaultValues, #defaultBinToPos);
        binTo = (binTo > 0) ? binTo : this.defaultToBin();

        for (i = binFrom; i <= binTo; i++)
        {
            bins.insert(i,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromToAisle</Name>
				<Source><![CDATA[
    protected void initFromToAisle()
    {
        this.buildAisleAfter();

        select minof(AisleNo) from aisleAfter;
        aisleFrom = aisleAfter.AisleNo;

        if (InventLocation::find(this.inventLocationId()).wmsAisleNameActive)
        {
            select maxof(AisleNo) from aisleAfter
                where aisleAfter.AisleNo != #SPECIAL_AISLENO;
            aisleTo = aisleAfter.AisleNo;
        }
        else
        {
            aisleTo = aisleFrom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromToRack</Name>
				<Source><![CDATA[
    protected void initFromToRack()
    {
        container defaultValues = this.getDefaultValues();

        rackFrom = conPeek(defaultValues, #defaultRackFromPos);
        rackFrom = (rackFrom > 0) ? rackFrom : 1;

        if (InventLocation::find(this.inventLocationId()).wmsRackNameActive)
        {
            rackTo = conPeek(defaultValues, #defaultRackToPos);
            rackTo = (rackTo > 0) ? rackTo : 15;
        }
        else
        {
            rackTo = rackFrom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLocation</Name>
				<Source><![CDATA[
    protected boolean initLocation(WMSAisleId _wmsAisleId, WMSAisleNo _wmsAisleNo, WMSRackId _wmsRackId, WMSLevelId _wmsLevelId, WMSPositionId _wmsPositionId)
    {
        buffer.clear();
        buffer.initValue();
        buffer.ManualName       = NoYes::No;
        buffer.InventLocationId = this.inventLocationId();
        buffer.AisleId          = _wmsAisleId;
        buffer.Rack             = _wmsRackId;
        buffer.Level            = _wmsLevelId;
        buffer.Position         = _wmsPositionId;
        buffer.wmsLocationId    = InventLocation::find(buffer.InventLocationId).wmsLocationId(buffer);

        if (this.existDB())
        {
            return false;
        }
        if (this.existTmp(buffer))
        {
            return false;
        }

        buffer.InputLocation    = buffer.wmsLocationId;
        buffer.LocationType     = this.wmsLocationType();
        buffer.Height           = wmsHeight;
        buffer.Width            = wmsWidth;
        buffer.Depth            = wmsDepth;
        buffer.Volume           = buffer.Height * buffer.Width * buffer.Depth;
        if (buffer.Level >= 1)
        {
            buffer.AbsoluteHeight = (buffer.Level - 1) * wmsHeight;
        }
        buffer.changeCheckText(_wmsAisleNo);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShelfs</Name>
				<Source><![CDATA[
    protected void initShelfs()
    {
        InventLocation  inventLocation = InventLocation::find(this.inventLocationId());
        WMSLevelId      shelfFrom, shelfTo;
        int             i;
        container       defaultValues = this.getDefaultValues();

        shelfs  = new Map(Types::Integer,Types::Enum);
        for (i=#ShelfsMax;i;i--)
        {
            shelfs.insert(i,false);
        }

        shelfFrom = conPeek(defaultValues, #defaultShelfFromPos);
        shelfFrom = (shelfFrom > 0) ? shelfFrom : this.defaultFromShelf();

        if (inventLocation.wmsLevelNameActive)
        {
            shelfTo = conPeek(defaultValues, #defaultShelfToPos);
            shelfTo = (shelfTo > 0) ? shelfTo : this.defaultToShelf();
        }
        else
        {
            shelfTo = shelfFrom;
        }

        for (i = shelfFrom; i <= shelfTo; i++)
        {
            shelfs.insert(i,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    protected void initValues()
    {
        super();

        this.initFromToAisle();
        this.initFromToRack();
        this.initShelfs();
        this.initBins();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseInformation</Name>
				<Source><![CDATA[
    public void initWarehouseInformation(InventLocationId _inventLocationId, container _values)
    {
        container               warehouseInformation;
        container               normalNameinformation;

        [warehouseInformation, normalNameinformation] = _values;
        warehouseDefaults.insert(_inventLocationId, normalNameinformation);

        super(_inventLocationId, warehouseInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFieldId</Name>
				<Source><![CDATA[
    protected FieldId keyFieldId()
    {
        return fieldNum(WMSLocation,wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        aisleAfter.setTmp();

        warehouseDefaults = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#currentList, shelfs.pack(), bins.pack()] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAisleFrom</Name>
				<Source><![CDATA[
    WMSAisleNo parmAisleFrom(WMSAisleNo _aisleFrom = aisleFrom)
    {
        aisleFrom = _aisleFrom;
        return aisleFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAisleTo</Name>
				<Source><![CDATA[
    WMSAisleNo parmAisleTo(WMSAisleNo _aisleTo = aisleTo)
    {
        aisleTo = _aisleTo;
        return aisleTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBin</Name>
				<Source><![CDATA[
    NoYes parmBin(Integer binNum, NoYes bin = bins.lookup(binNum))
    {
        bins.insert(binNum,bin);
        return bins.lookup(binNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRackFrom</Name>
				<Source><![CDATA[
    WMSRackId parmRackFrom(WMSRackId _rackFrom = rackFrom)
    {
        rackFrom = _rackFrom;
        return rackFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRackTo</Name>
				<Source><![CDATA[
    WMSRackId parmRackTo(WMSRackId _rackTo = rackTo)
    {
        rackTo = _rackTo;
        return rackTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShelf</Name>
				<Source><![CDATA[
    NoYes parmShelf(Integer shelfNum, NoYes shelf = shelfs.lookup(shelfNum))
    {
        shelfs.insert(shelfNum,shelf);
        return shelfs.lookup(shelfNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSDepth</Name>
				<Source><![CDATA[
    WMSDepth parmWMSDepth(WMSDepth _wmsDepth = wmsDepth)
    {
        wmsDepth = _wmsDepth;
        return wmsDepth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSHeight</Name>
				<Source><![CDATA[
    WMSHeight parmWMSHeight(WMSHeight _wmsHeight = wmsHeight)
    {
        wmsHeight = _wmsHeight;
        return wmsHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSWidth</Name>
				<Source><![CDATA[
    WMSWidth parmWMSWidth(WMSWidth _wmsWidth = wmsWidth)
    {
        wmsWidth = _wmsWidth;
        return wmsWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferAisle</Name>
				<Source><![CDATA[
    void setBufferAisle(WMSAisle wmsAisle)
    {
        bufferAisle = wmsAisle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInSelection</Name>
				<Source><![CDATA[
    public boolean showInSelection()
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;
        return localLocationWizard.hasLocationCoordinate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestFormat</Name>
				<Source><![CDATA[
    protected NumberSequenceFormat suggestFormat()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestUpdate</Name>
				<Source><![CDATA[
    public NoYes suggestUpdate()
    {
        WMSLocationWizard localLocationWizard = this.defaultDataParent() as WMSLocationWizard;

        if (! super())
        {
            return false;
        }

        if (! this.inventLocationId())
        {
            return false;
        }

        if (! localLocationWizard.hasLocationCoordinate())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container c)
    {
        container   shelfCon,binsCon,base;

        [#currentList,shelfCon,binsCon] = c;

        shelfs  = (shelfCon)    ? Map::create(shelfCon) : new Map(Types::Integer,Types::Enum);
        bins    = (binsCon)     ? Map::create(binsCon)  : new Map(Types::Integer,Types::Enum);

        return super(base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildsUpdate</Name>
				<Source><![CDATA[
    protected void updateChildsUpdate()
    {
        super();
        if (!update)
        {
            if (!this.wmsLocationWizardTableCtrl_Aisle().parmUpdate()       &&
                !this.wmsLocationWizardTableCtrl_Aisle().normalAisleExists())
            {
                update = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationType</Name>
				<Source><![CDATA[
    abstract WMSLocationType wmsLocationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingAisleListPacked</Name>
				<Source><![CDATA[
    static container existingAisleListPacked(InventLocationId _inventLocationId)
    {
        WMSAisle    wmsAisle;
        List        recordList = new List(Types::Record);

        while select wmsAisle
            where wmsAisle.InventLocationId     == _inventLocationId
        {
            recordList.addEnd(wmsAisle);
        }
        return recordList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxBinShelfRack</Name>
				<Source><![CDATA[
    static protected container getMaxBinShelfRack(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        WMSLocation                     wmsLocation;

        select maxof(Position), maxof(Level), maxof(Rack) from wmsLocation
            where wmsLocation.InventLocationId      == _inventLocationId &&
                  wmsLocation.LocationType          == _wmsLocationType;

        return [wmsLocation.Position, wmsLocation.Level, wmsLocation.Rack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinBinShelfRack</Name>
				<Source><![CDATA[
    static protected container getMinBinShelfRack(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        WMSLocation                     wmsLocation;

        select minof(Position), minof(Level), minof(Rack) from wmsLocation
            where wmsLocation.InventLocationId      == _inventLocationId &&
                  wmsLocation.LocationType          == _wmsLocationType;

        return [wmsLocation.Position, wmsLocation.Level, wmsLocation.Rack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseInformation</Name>
				<Source><![CDATA[
    static container getWarehouseInformation(InventLocationId _inventLocationId, WMSLocationType _wmsLocationType)
    {
        int         maxBin, maxShelf, maxRack;
        int         minBin, minShelf, minRack;
        container   warehouseInformation;

        [maxBin, maxShelf, maxRack]= WMSLocationWizardTableCtrl_NormalName::getMaxBinShelfRack(_inventLocationId, _wmsLocationType);
        [minBin, minShelf, minRack]= WMSLocationWizardTableCtrl_NormalName::getMinBinShelfRack(_inventLocationId, _wmsLocationType);

        warehouseInformation = [minBin      //defaultBinFromPos
                               ,maxBin      //defaultBinToPos
                               ,minShelf    //defaultShelfFromPos
                               ,maxShelf    //defaultShelfToPos
                               ,minRack     //defaultRackFromPos
                               ,maxRack     //defaultRackToPos
                               ,WMSLocationWizardTableCtrl_NormalName::existingAisleListPacked(_inventLocationId)   // existingAisleListPos
                               ];

        return [WMSLocationWizardTableCtrl_Location::getWarehouseInformation(_inventLocationId, _wmsLocationType)] + [warehouseInformation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAll</Name>
				<Source><![CDATA[
    static boolean isAll(Map map, boolean test)
    {
        MapIterator mapI = new MapIterator(map);

        mapI.begin();
        while (mapI.more())
        {
            if (mapI.value() != test)
            {
                return false;
            }
            mapI.next();
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>