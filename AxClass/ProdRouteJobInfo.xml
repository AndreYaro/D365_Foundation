<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteJobInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdRouteJobInfo</c> class is used to retrieve data for a <c>ProdRouteJob</c>.
/// </summary>
class ProdRouteJobInfo
{
    ProdRouteJob job;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the <c>ProdRouteJob</c> data source of a specified query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to the range is added.
    /// </param>
    /// <param name="_fieldId">
    /// The <c>ProdRouteJob</c> field to add a range.
    /// </param>
    /// <returns>
    /// The new range object.
    /// </returns>
    protected QueryBuildRange addRange(
        Query           _query,
        fieldId         _fieldId)
    {
        return _query.dataSourceTable(tableNum(ProdRouteJob)).addRange(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allNextJobsHaveStartTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the successor jobs have the start times set.
    /// </summary>
    /// <returns>
    /// true if all the successor jobs have the start times set; otherwise, false.
    /// </returns>
    public boolean allNextJobsHaveStartTimes()
    {
        Query query = this.nextJobsQuery();

        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, RecId)]);
        this.addRange(query, fieldNum(ProdRouteJob, FromDate)).value(queryValue(dateNull()));

        ProdRouteJob prodRouteJob = this.nextJobs(query);

        return prodRouteJob.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allPrevJobsHaveEndTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the predecessor jobs have the start times set.
    /// </summary>
    /// <returns>
    /// true if all the predecessor jobs have the start times set; otherwise, false.
    /// </returns>
    public boolean allPrevJobsHaveEndTimes()
    {
        Query query = this.prevJobsQuery();

        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, RecId)]);
        this.addRange(query, fieldNum(ProdRouteJob, ToDate)).value(queryValue(dateNull()));

        ProdRouteJob prodRouteJob = this.prevJobs(query);

        return prodRouteJob.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapSubsequenceCurrentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job can be part of an overlap subsequence in which the overlap job belongs to
    /// the current operation.
    /// </summary>
    /// <returns>
    /// true if the job can be part of an overlap subsequence in which the overlap job belongs to the
    /// current operation; otherwise, false.
    /// </returns>
    protected boolean checkOverlapSubsequenceCurrentOperation()
    {
        return job.NumType >= new ProdJobType_Process().numType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapSubsequencePrevOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job can be part of an overlap subsequence in which the overlap job belongs to
    /// the previous operation.
    /// </summary>
    /// <returns>
    /// true if this job can be part of an overlap subsequence in which the overlap job belongs to the
    /// previous operation; otherwise, false.
    /// </returns>
    protected boolean checkOverlapSubsequencePrevOperations()
    {
        return job.NumType <= new ProdJobType_Process().numType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParallelJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job has parallel jobs.
    /// </summary>
    /// <returns>
    /// true if the job has parallel jobs; otherwise, false.
    /// </returns>
    public boolean hasParallelJobs()
    {
        Query query = this.parallelJobsQuery();

        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, RecId)]);
        query.dataSourceTable(tableNum(prodRouteJob)).firstOnly(true);

        ProdRouteJob prodRouteJob = this.parallelJobs(query);

        return prodRouteJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludedInOverlapSubsequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job is included in an overlap subsequence.
    /// </summary>
    /// <returns>
    /// true if the job is included in an overlap subsequence; otherwise, false.
    /// </returns>
    public boolean isIncludedInOverlapSubsequence()
    {
        ProdRoute prodRoute;
        ProdRouteJob prodRouteJob;

        if (this.checkOverlapSubsequenceCurrentOperation())
        {
            select firstOnly RecId
                from prodRouteJob
                where   prodRouteJob.ProdId == job.ProdId
                    &&  prodRouteJob.OprNum == job.OprNum
                    &&  prodRouteJob.OprPriority == RouteOprPriority::Primary
                    &&  prodRouteJob.JobType == RouteJobType::Overlap;

            if (prodRouteJob)
            {
                return true;
            }
        }

        if (this.checkOverlapSubsequencePrevOperations())
        {
            select firstOnly RecId
                from prodRouteJob
                where   prodRouteJob.ProdId         == job.ProdId
                    &&  prodRouteJob.OprPriority    == RouteOprPriority::Primary
                    &&  prodRouteJob.JobType        == RouteJobType::Overlap
                exists join prodRoute
                    where   prodRoute.ProdId        == job.ProdId
                        &&  prodRoute.OprNum        == prodRouteJob.OprNum
                        &&  prodRoute.OprPriority   == prodRouteJob.OprPriority
                        &&  prodRoute.OprNumNext    == job.OprNum;

            if (prodRouteJob)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the class based on a specified production job.
    /// </summary>
    /// <param name="_job">
    ///     A record of the <c>ProdRouteJob</c> table; optional.
    /// </param>
    public void new(ProdRouteJob _job = null)
    {
        job = _job;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobInOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a successor job in the same operation to which a job belongs.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The successor job in the same operation to which the job belongs, or an empty record if it is the
    /// last job of the operation.
    /// </returns>
    public ProdRouteJob nextJobInOperation(Query _query = this.nextJobInOperationQuery())
    {
        return this.query2ProdRouteJob(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobInOperationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the successor job in the same operation this job belongs to and any parallel operations.
    /// </summary>
    /// <returns>
    /// A query that finds the successor job in the same operation this job belongs to and any parallel operations.
    /// </returns>
    public Query nextJobInOperationQuery()
    {
        ProdRouteJob prodRouteJob;

        select minOf(NumType)
            from prodRouteJob
            where   prodRouteJob.ProdId == job.ProdId
                &&  prodRouteJob.OprNum == job.OprNum
                &&  prodRouteJob.NumType > job.NumType;

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProdRouteJob));

        qbds.addRange(fieldNum(ProdRouteJob, ProdId     )).value(queryValue(job.ProdId));
        qbds.addRange(fieldNum(ProdRouteJob, OprNum     )).value(queryValue(job.OprNum));
        qbds.addRange(fieldNum(ProdRouteJob, NumType    )).value(queryValue(prodRouteJob.NumType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the successors of a job.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The successors of this job, or an empty record if it is the last job of the route.
    /// </returns>
    public ProdRouteJob nextJobs(Query _query = this.nextJobsQuery())
    {
        return this.query2ProdRouteJob(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobsEarliestStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the earliest start date and time of all the successors of a job.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The earliest start date and time of all the successors of the job.
    /// </returns>
    public container nextJobsEarliestStartDateTime(Query _query = this.nextJobsQuery())
    {
        Query query = new Query(_query.pack());
        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, FromDate)], SelectionField::Min);

        date earliestDate = this.nextJobs(query).FromDate;

        query = new Query(_query.pack());
        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, FromTime)], SelectionField::Min);
        this.addRange(query, fieldNum(ProdRouteJob, FromDate)).value(queryValue(earliestDate));

        int earliestTime = this.nextJobs(query).FromTime;

        return [earliestDate, earliestTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the successors of a job.
    /// </summary>
    /// <returns>
    /// A query that finds the successors of the job.
    /// </returns>
    public Query nextJobsQuery()
    {
        Query                   query;

        ProdRouteJob            nextJob;

        if (this.nextJobInOperation() != null)
        {
            query = this.nextJobInOperationQuery();
        }
        else
        {
            ProdRoute prodRoute = ProdRoute::find(job.ProdId, job.OprNum, job.OprPriority);

            select minOf(NumType)
                from nextJob
                where   nextJob.ProdId  == job.ProdId
                    &&  nextJob.OprNum  == prodRoute.OprNumNext;

            RouteJobNumType minJobNumType = nextJob.NumType;

            //select nextJob
            //    where   nextJob.ProdId  == job.ProdId
            //        &&  nextJob.OprNum  == prodRoute.OprNumNext
            //        &&  nextJob.NumType == minJobNumType;

            query = new Query();
            QueryBuildDataSource qbds = query.addDataSource(tableNum(ProdRouteJob));

            qbds.addRange(fieldNum(ProdRouteJob, ProdId     )).value(queryValue(job.ProdId));
            qbds.addRange(fieldNum(ProdRouteJob, OprNum     )).value(queryValue(prodRoute.OprNumNext));
            qbds.addRange(fieldNum(ProdRouteJob, NumType    )).value(queryValue(minJobNumType));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobsQueryExcludingJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the successors of a job that excludes the jobs in a specified collection.
    /// </summary>
    /// <param name="_jobsToExclude">
    /// A set of jobs to exclude from the search.
    /// </param>
    /// <param name="_baseQuery">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// A query that finds the successors of the job.
    /// </returns>
    public Query nextJobsQueryExcludingJobs(Set _jobsToExclude, Query _baseQuery = this.nextJobsQuery())
    {
        Query           query = new Query(_baseQuery.pack());

        SetEnumerator se = _jobsToExclude.getEnumerator();
        while (se.moveNext())
        {
            this.addRange(query, fieldNum(prodRouteJob, RecId)).value(SysQuery::valueNot(se.current()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parallelJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all jobs that are parallel to a job.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The jobs that are parallel to the job, or an empty record if the job has no parallel jobs.
    /// </returns>
    public ProdRouteJob parallelJobs(Query _query = this.parallelJobsQuery())
    {
        return this.query2ProdRouteJob(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parallelJobsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds all jobs that are parallel to a job.
    /// </summary>
    /// <returns>
    /// A query that finds all jobs that are parallel to the job.
    /// </returns>
    public Query parallelJobsQuery()
    {
        //select parallelJob
        //    where   parallelJob.ProdId      == job.ProdId
        //        &&  parallelJob.OprNum      == job.OprNum
        //        &&  parallelJob.JobType     == job.JobType
        //        &&  parallelJob.JobId       != job.JobId;

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProdRouteJob));

        qbds.addRange(fieldNum(ProdRouteJob, ProdId )).value(queryValue(job.ProdId));
        qbds.addRange(fieldNum(ProdRouteJob, OprNum )).value(queryValue(job.OprNum));
        qbds.addRange(fieldNum(ProdRouteJob, JobType)).value(queryValue(job.JobType));
        qbds.addRange(fieldNum(ProdRouteJob, JobId  )).value(SysQuery::valueNot(job.JobId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJob</Name>
				<Source><![CDATA[
    public ProdRouteJob parmJob(ProdRouteJob _job = job)
    {
        job = _job;
        return job;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobInOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the predecessor job in the same operation to which a job belongs.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The predecessor job in the same operation to which the job belongs, or an empty record if it is the
    /// first job of the operation.
    /// </returns>
    public ProdRouteJob prevJobInOperation(Query _query = this.prevJobInOperationQuery())
    {
        return this.query2ProdRouteJob(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobInOperationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the predecessor job in the same operation this job belongs to and any parallel operations.
    /// </summary>
    /// <returns>
    /// A query that finds the predecessor job in the same operation this job belongs to and any parallel operations.
    /// </returns>
    public Query prevJobInOperationQuery()
    {
        ProdRouteJob prodRouteJob;

        select maxOf(NumType)
            from prodRouteJob
            where   prodRouteJob.ProdId == job.ProdId
                &&  prodRouteJob.OprNum == job.OprNum
                &&  prodRouteJob.NumType < job.NumType;

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProdRouteJob));

        qbds.addRange(fieldNum(ProdRouteJob, ProdId     )).value(queryValue(job.ProdId));
        qbds.addRange(fieldNum(ProdRouteJob, OprNum     )).value(queryValue(job.OprNum));
        qbds.addRange(fieldNum(ProdRouteJob, NumType    )).value(queryValue(prodRouteJob.NumType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the predecessors of a job.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The predecessors of the job, or an empty record if it is the first job of the route.
    /// </returns>
    public ProdRouteJob prevJobs(Query _query = this.prevJobsQuery())
    {
        return this.query2ProdRouteJob(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobsLatestEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the latest end date and time of all the predecessors of a job.
    /// </summary>
    /// <param name="_query">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// The latest end date and time of all the predecessors of the job.
    /// </returns>
    public container prevJobsLatestEndDateTime(Query _query = this.prevJobsQuery())
    {
        Query query = new Query(_query.pack());
        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, ToDate)], SelectionField::Max);

        date latestDate = this.prevJobs(query).ToDate;

        query = new Query(_query.pack());
        this.setFieldsToSelect(query, [fieldNum(ProdRouteJob, ToTime)], SelectionField::Max);
        this.addRange(query, fieldNum(ProdRouteJob, ToDate)).value(queryValue(latestDate));

        int latestTime = this.prevJobs(query).ToTime;

        return [latestDate, latestTime];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the predecessors of a job.
    /// </summary>
    /// <returns>
    /// A query that finds the predecessors of the job.
    /// </returns>
    public Query prevJobsQuery()
    {
        Query                   query;

        ProdRoute               prodRoute;
        ProdRouteJob            prevJob;

        if (this.prevJobInOperation() != null)
        {
            query = this.prevJobInOperationQuery();
        }
        else
        {
            query = new Query();
            QueryBuildDataSource qbdsProdRouteJob = query.addDataSource(tableNum(ProdRouteJob));

            qbdsProdRouteJob.addRange(fieldNum(ProdRouteJob, ProdId )).value(queryValue(job.ProdId));

            QueryBuildDataSource qbdsProdRoute = qbdsProdRouteJob.addDataSource(tableNum(prodRoute));
            qbdsProdRoute.joinMode(JoinMode::ExistsJoin);

            qbdsProdRoute.addLink(fieldNum(ProdRouteJob, ProdId),       fieldNum(ProdRoute, ProdId));
            qbdsProdRoute.addLink(fieldNum(ProdRouteJob, OprNum),       fieldNum(ProdRoute, OprNum));
            qbdsProdRoute.addLink(fieldNum(ProdRouteJob, OprPriority),  fieldNum(ProdRoute, OprPriority));
            qbdsProdRoute.addRange(fieldNum(ProdRoute, OprNumNext)).value(queryValue(job.OprNum));

            str conditions = '';

            while select OprNum, OprPriority
                from prodRoute
                where   prodRoute.ProdId        == job.ProdId
                    &&  prodRoute.OprNumNext    == job.OprNum
            {
                if (conditions != '')
                {
                    conditions += ' || ';
                }

                select maxOf(NumType)
                    from prevJob
                    where   prevJob.ProdId          == job.ProdId
                        &&  prevJob.OprNum          == prodRoute.OprNum
                        &&  prevJob.OprPriority     == prodRoute.OprPriority;

                conditions += strFmt('((%1.%2 == %3) && (%1.%4 == %5) && (%1.%6 == %7))',
                                     qbdsProdRouteJob.name(),
                                     fieldStr(ProdRouteJob, OprNum),
                                     SysQuery::value(prodRoute.OprNum),
                                     fieldStr(ProdRouteJob, OprPriority),
                                     enum2int(prodRoute.OprPriority),
                                     fieldStr(ProdRouteJob, NumType),
                                     SysQuery::value(prevJob.NumType));
            }

            if (conditions != '')
            {
                qbdsProdRouteJob.addRange(fieldNum(ProdRouteJob, RecId)).value('(' + conditions + ')');
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobsQueryExcludingJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that finds the predecessors of a job that excludes the jobs in a specified
    /// collection.
    /// </summary>
    /// <param name="_jobsToExclude">
    /// A set of jobs to exclude from the search.
    /// </param>
    /// <param name="_baseQuery">
    /// A base query; optional.
    /// </param>
    /// <returns>
    /// A query that finds the predecessors of the job.
    /// </returns>
    public Query prevJobsQueryExcludingJobs(Set _jobsToExclude, Query _baseQuery = this.prevJobsQuery())
    {
        Query           query = new Query(_baseQuery.pack());

        SetEnumerator se = _jobsToExclude.getEnumerator();
        while (se.moveNext())
        {
            this.addRange(query, fieldNum(prodRouteJob, RecId)).value(SysQuery::valueNot(se.current()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query2ProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a query and retrieves a reference to the <c>ProdRouteJob</c> data source of that query.
    /// </summary>
    /// <param name="_query">
    /// The query that contains the <c>ProdRouteJob</c> data source.
    /// </param>
    /// <returns>
    /// The <c>ProdRouteJob</c> data source of the query.
    /// </returns>
    protected ProdRouteJob query2ProdRouteJob(Query _query)
    {
        QueryRun        queryRun = new QueryRun(_query);

        queryRun.next();
        ProdRouteJob prodRouteJob = queryRun.get(tableNum(ProdRouteJob));

        return prodRouteJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsToSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the selection list of a <c>ProdRouteJob</c> data source of a query to a specified list of
    /// fields.
    /// </summary>
    /// <param name="_query">
    /// The query on which to apply the selection list.
    /// </param>
    /// <param name="_fields">
    /// A container with the list of <c>ProdRouteJob</c> fields to select.
    /// </param>
    /// <param name="_fieldType">
    /// The <c>SelectionField</c> value to use for each field to select; optional.
    /// </param>
    protected void setFieldsToSelect(
        Query           _query,
        container       _fields,
        SelectionField  _fieldType = SelectionField::Database)
    {
        QueryBuildDataSource    qbds    = _query.dataSourceTable(tableNum(ProdRouteJob));
        QueryBuildFieldList     fields  = qbds.fields();

        int fieldCount = conLen(_fields);
        int i;

        fields.clearFieldList();

        for (i = 1; i <= fieldCount; i++)
        {
            fields.addField(conPeek(_fields, i), _fieldType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSingleJobRescheduling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a job is not of the type overlap, is not involved in an overlap sequence, does
    /// not have parallel jobs and that all predecessor and successor jobs are scheduled when you try to
    /// schedule a single job.
    /// </summary>
    /// <param name="_wrkCtrParmSchedule">
    /// The scheduling parameters.
    /// </param>
    /// <returns>
    /// true if the job can be scheduled individually; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If some verifications are not met, warnings are added to the Infolog.
    /// </remarks>
    public boolean validateSingleJobRescheduling(WrkCtrParmSchedule _wrkCtrParmSchedule)
    {
        boolean ok = true;

        if (job && _wrkCtrParmSchedule.schedSingleJob())
        {
            setPrefix(_wrkCtrParmSchedule.schedJobId());

            if (ok && job.JobType == RouteJobType::Overlap)
            {
                ok = checkFailed("@GLS3800018");
            }

            if (ok && this.hasParallelJobs())
            {
                ok = checkFailed("@GLS3800019");
            }

            if (ok && this.isIncludedInOverlapSubsequence())
            {
                ok = checkFailed("@GLS3800020");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the class based on a production job.
    /// </summary>
    /// <param name="_job">
    ///     The specified record of <c>ProdRouteJob</c> table.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ProdRouteJobInfo</c> class.
    /// </returns>
    public static ProdRouteJobInfo newFromProdRouteJob(ProdRouteJob _job)
    {
        return new ProdRouteJobInfo(_job);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWrkCtrParmSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the class based on the specified resource schedule controller.
    /// </summary>
    /// <param name="_wrkCtrParmSchedule">
    ///     The specified instance of <c>WrkCtrParmSchedule</c> class.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ProdRouteJobInfo</c> class.
    /// </returns>
    public static ProdRouteJobInfo newFromWrkCtrParmSchedule(WrkCtrParmSchedule _wrkCtrParmSchedule)
    {
        return new ProdRouteJobInfo(ProdRouteJob::findJobId(_wrkCtrParmSchedule.schedJobId()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
