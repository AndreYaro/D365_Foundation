<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestACSApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>UserRequestACSApprovalEventHandler</c> class handles the events for the <c>UserRequestACSApproval</c>
/// workflow element.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class UserRequestACSApprovalEventHandler extends WorkflowCancelManager implements
    WorkflowElementStartedEventHandler,
    WorkflowElementCanceledEventHandler,
    WorkflowElementDeniedEventHandler,
    WorkflowElementCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowCanceled();
        request.update();
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalApproved();
        request.update();
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when a request is denied.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalDenied();
        request.update();
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the started event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        UserRequest request = UserRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true);

        ttsbegin;
        request.workflowApprovalPending();
        request.update();
        ttscommit;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>