<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWbsTrackingServerActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWbsTrackingServerActions implements IServerActions
{
    HierarchyIdBase             hierarchyId;
    ProjTable                   projTable;
    const int HOURTRANSACTIONTYPE       = 0;
    const int EXPENSETRANSACTIONTYPE    = 1;
    const int ITEMTRANSACTIONTYPE       = 2;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(HierarchyIdBase _hierarchyId)
    {
        hierarchyId = _hierarchyId;
        projTable = HierarchyLinkTable::findAssociation(hierarchyId, tableNum(ProjTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjWbsTrackingServerActions construct(HierarchyIdBase _hierarchyId)
    {
        return new ProjWbsTrackingServerActions(_hierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    public str executeAction(ActionDataContract  _action)
    {
        Enumerator              argsEnumerator;
        str                     costAtComplete, effortAtComplete, psaActivitySetupRecId, taskType, activityNumber, closed, canBillingMilestoneComplete;
        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "updateRow":
                argsEnumerator.moveNext();
                costAtComplete = argsEnumerator.current();
                argsEnumerator.moveNext();
                effortAtComplete = argsEnumerator.current();
                argsEnumerator.moveNext();
                psaActivitySetupRecId = argsEnumerator.current();
                argsEnumerator.moveNext();
                taskType    = argsEnumerator.current();
                argsEnumerator.moveNext();
                activityNumber = argsEnumerator.current();
                argsEnumerator.moveNext();
                closed = argsEnumerator.current();
                argsEnumerator.moveNext();
                canBillingMilestoneComplete = argsEnumerator.current();
                this.updateValues(taskType, costAtComplete, effortAtComplete, psaActivitySetupRecId, activityNumber, closed, canBillingMilestoneComplete);
                break;
            default:
                error('Unrecognized operation was attempted.');
                break;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        Enumerator                  argsEnumerator;
        CollectionDataContract      dataCollection = CollectionDataContract::construct();
        str                         transactionType;
        int64                       psaActivitySetupRecId;

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "":
                dataCollection = this.getData();
                break;
            case "openTransactionsForm":
                argsEnumerator.moveNext();
                psaActivitySetupRecId = str2Int64(argsEnumerator.current());
                argsEnumerator.moveNext();
                transactionType = argsEnumerator.current();
                this.openTransactionsform(psaActivitySetupRecId, transactionType);
                break;
            case "openDetailsForm":
                argsEnumerator.moveNext();
                psaActivitySetupRecId = str2Int64(argsEnumerator.current());
                this.openDetailsForm(psaActivitySetupRecId);
                break;
            default:
                error('Unrecognized operation was attempted.');
                break;
        }
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDetailsForm</Name>
				<Source><![CDATA[
    private void openDetailsForm(int64 _psaActivitySetupRecId)
    {
        Args args = new Args();
        FormRun formRun;

        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        PSAActivitySetup    psaActivitySetup;
        ProjPlanVersion     projPlanVersion;

        select firstonly projPlanVersion order by RecId desc
            exists join hierarchyTreeTable
            exists join smmActivities
            exists join psaActivitySetup
            where hierarchyTreeTable.RecId == projPlanVersion.HierarchyTreeTableRefRecId &&
                smmActivities.RecId == hierarchyTreeTable.RefRecId &&
                smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber &&
                psaActivitySetup.RecId == _psaActivitySetupRecId;

        args.menuitemname(menuItemDisplayStr(ProjWBSActivityDetails));
        args.name(formStr(ProjWBSActivityDetails));
        args.record(projPlanVersion);
        args.record().company(curExt());
        args.parm(classStr(ProjWbsTrackingServerActions));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTransactionsform</Name>
				<Source><![CDATA[
    private void openTransactionsform(RecId _psaActivitySetupRecId, str _transactionType)
    {
        FormRun                 formRun;
        int                     transactionType = str2Int(_transactionType);
        PSAActivitySetup        psaActivitySetup;
        smmActivities           smmActivities;
        ProjTable               locProjTable;
        HierarchyTreeTable      hierarchyTreeTable;
        str                     menuItemStr;
        Args args = new Args();

        switch (transactionType)
        {
            case HOURTRANSACTIONTYPE:
                menuItemStr = menuItemDisplayStr(ProjTransEmpl);
                break;
            case EXPENSETRANSACTIONTYPE:
                menuItemStr = menuItemDisplayStr(ProjTransCost);
                break;
            case ITEMTRANSACTIONTYPE:
                menuItemStr = menuItemDisplayStr(ProjTransItem);
                break;
            default:
                break;
        }

        if (_psaActivitySetupRecId)
        {
            select firstonly psaActivitySetup where psaActivitySetup.RecId == _psaActivitySetupRecId;
            smmActivities = smmActivities::find(psaActivitySetup.ActivityNumber, false);
            hierarchyTreeTable = HierarchyTreeTable::findRefRecId(smmActivities.RecId, false);
            if (hierarchyTreeTable.isRootActivity())
            {
                locProjTable = HierarchyLinkTable::findAssociation(hierarchyTreeTable.HierarchyId, tableNum(ProjTable));
                args.record(locProjTable);
            }
            else
            {
                args.record(hierarchyTreeTable);
            }
            formRun = new MenuFunction(menuItemStr, MenuItemType::Display).create(args);
            formRun.run();
            formRun.wait(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValues</Name>
				<Source><![CDATA[
    private void updateValues(str _taskTimeType, str _costAtComplete, str _effortAtComplete, str _recId, str _activityNumber, str _closed, str _canBillingMilestoneComplete)
    {
        RecId taskActivitySetupRecId = str2int64(_recId);
        ProjTotalCostAmount cost = str2num(_costAtComplete);
        Hours taskEffortAtComplete = str2Num(_effortAtComplete);
        smmActivityTaskTimeType taskTimeType = str2int(_taskTimeType);
        NoYes closed = _closed == '1' ? NoYes::Yes : NoYes::No;
        
        ttsbegin;
        PSAActivitySetup taskActivitySetup = PSAActivitySetup::findRecId(taskActivitySetupRecId, true);
        Hours originalTaskEffortAtComplete = taskActivitySetup.EffortAtComplete;
        ProjTotalCostAmount originalCostAtComplete = taskActivitySetup.CostAtComplete;
        
        if (taskActivitySetup && originalTaskEffortAtComplete != taskEffortAtComplete || originalCostAtComplete != cost)
        {
            taskActivitySetup.EffortAtComplete = taskEffortAtComplete;
            taskActivitySetup.CostAtComplete = cost;
            taskActivitySetup.update();

            ProjPlanVersion taskPlanVersion = ProjPlanVersion::findByActivityNumber(taskActivitySetup.ActivityNumber, true);
            taskPlanVersion.TaskEffortAtComplete = taskEffortAtComplete;
            taskPlanVersion.TaskCostAtComplete = cost;
            taskPlanVersion.ActivityTaskTimeType = taskTimeType;
            taskPlanVersion.update();

            if (originalTaskEffortAtComplete != taskEffortAtComplete)
            {
                // Update root activity setup effort at complete value by the change of this task effort at complete value.
                smmActivities rootActivity = smmActivities::findWithRecId(ProjWBS::getRootActivityRecId(this.projTable.ProjId));
                PSAActivitySetup rootActivitySetup = PSAActivitySetup::findActivityNumber(rootActivity.ActivityNumber, true);
                if (rootActivitySetup)
                {
                    Hours rootEffortAtComplete = rootActivitySetup.EffortAtComplete - (originalTaskEffortAtComplete - taskEffortAtComplete);
                    ProjTotalCostAmount rootCostAtComplete = rootActivitySetup.CostAtComplete - (originalCostAtComplete - cost);

                    rootActivitySetup.EffortAtComplete = rootEffortAtComplete;
                    rootActivitySetup.CostAtComplete = rootCostAtComplete;
                    rootActivitySetup.update();

                    ProjPlanVersionDetail rootPlanVersionDetail = ProjPlanVersionDetail::findLatestByProjId(this.projTable.ProjId);
                    ProjPlanVersion rootPlanVersion = ProjPlanVersion::getRootTask(rootPlanVersionDetail.HierarchyId, true);
                    if (rootPlanVersion)
                    {
                        rootPlanVersion.selectForUpdate(true);
                        rootPlanVersion.TaskEffortAtComplete = rootEffortAtComplete;
                        rootPlanVersion.update();
                    }
                }
            }            
        }

        smmActivities smmActivities;
        select firstonly forupdate smmActivities
            where smmActivities.ActivityNumber == _activityNumber;
        if (smmActivities && smmActivities.ActivityTaskTimeType != taskTimeType || smmActivities.Closed != closed)
        {
            smmActivities.ActivityTaskTimeType = taskTimeType;
            smmActivities.Closed = closed;
            smmActivities.modifiedField(fieldNum(smmActivities,Closed));
            smmActivities.update();

            ProjPlanVersion taskPlanVersion = ProjPlanVersion::findByActivityNumber(_activityNumber, true);
            taskPlanVersion.IsTaskClosed = closed;
            taskPlanVersion.ActivityTaskTimeType = taskTimeType;
            taskPlanVersion.update();
        }

        if (smmActivities.ActivityTaskTimeType == smmActivityTaskTimeType::Completed)
        {
            if (_canBillingMilestoneComplete == '1')
            {
                ProjWbsTrackingServerActions::checkAndUpdatedRelatedBillingMilestone(this.projTable, smmActivities.ActivityNumber);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndUpdatedRelatedBillingMilestone</Name>
				<Source><![CDATA[
    private static void checkAndUpdatedRelatedBillingMilestone(ProjTable projTable, smmActivityNumber activityNumber)
    {
        ProjOnAccTrans projOnAccTrans;

        boolean enableMultipleContractLinesForProject = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        if (!projTable || (!enableMultipleContractLinesForProject && projTable.Type != ProjType::FixedPrice) ||
            (enableMultipleContractLinesForProject && !ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice)))
        {
            return;
        }

        while select forupdate RecId from projonAccTrans
            where projOnAccTrans.ActivityNumber == activityNumber
                && projOnAccTrans.ProjId == projTable.ProjId
                && projOnAccTrans.IsMilestoneComplete == NoYes::No

        {
            if (projOnAccTrans.RecId)
            {
                projOnAccTrans.IsMilestoneComplete = NoYes::Yes;
                projOnAccTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    private CollectionDataContract getData()
    {
        CollectionDataContract  collection;
        List                    items = new List(Types::Class);
        ProjTaskDataContract    taskData;
        Common                  hierarchyElement;
        QueryRun                queryRun;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource, smmActivitiesQBDS, psaActivitySetupQBDS;
        TableId                 collectionRootDataSourceId = tablenum(HierarchyTreeTable);
        PSAActivitySetup        psaActivitySetup;
        smmActivities           smmActivities;
        HierarchyTreeTable      hierarchyElementTree;
        Map                     postedActualCost = ProjWBSUpdateController::getPostedActualCost(this.hierarchyId);
        Map                     postedActualEffort = ProjWBSUpdateController::getPostedActualEffort(this.hierarchyId);
        TransDate               today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        queryBuildDataSource = query.addDataSource(collectionRootDataSourceId);
        queryBuildDataSource.addRange(fieldnum(HierarchyTreeTable, HierarchyId)).value(this.hierarchyId);
        queryBuildDataSource.addSortField(fieldnum(HierarchyTreeTable, SiblingNumber), SortOrder::Ascending);
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, SiblingNumber));
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, ElementNumber));
        queryBuildDataSource.addSelectionField(fieldnum(HierarchyTreeTable, ParentElementNumber));

        smmActivitiesQBDS = queryBuildDataSource.addDataSource(tableNum(smmActivities));
        smmActivitiesQBDS.joinMode(JoinMode::InnerJoin);
        smmActivitiesQBDS.addLink(fieldNum(HierarchyTreeTable, RefRecId), fieldNum(smmActivities, RecId));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, Purpose));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, ActivityTaskTimeType));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, ActivityNumber));
        smmActivitiesQBDS.addSelectionField(fieldnum(smmActivities, Closed));

        psaActivitySetupQBDS = smmActivitiesQBDS.addDataSource(tableNum(PSAActivitySetup));
        psaActivitySetupQBDS.joinMode(JoinMode::InnerJoin);
        psaActivitySetupQBDS.addLink(fieldNum(smmActivities, ActivityNumber),fieldNum(PSAActivitySetup, ActivityNumber));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, CostAtComplete));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, Effort));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, EffortAtComplete));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, RecId));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, CategoryDefault));
        psaActivitySetupQBDS.addSelectionField(fieldnum(PSAActivitySetup, ResourceCategory));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            hierarchyElement    = queryRun.getNo(1);
            smmActivities       = queryRun.getNo(2);
            psaActivitySetup    = queryRun.getNo(3);

            taskData            = ProjTaskDataContract::construct();

            if (hierarchyElement.TableId == tableNum(HierarchyTreeTable))
            {
                hierarchyElementTree = hierarchyElement;
                taskData.parmSiblingNumber(real2int(hierarchyElementTree.SiblingNumber));
            }

            taskData.parmId(hierarchyElement.getFieldValue("ElementNumber"));
            taskData.parmParentId(hierarchyElement.getFieldValue("ParentElementNumber"));
            taskData.parmHierarchyId(this.hierarchyId);
            taskData.parmName(smmActivities.Purpose);
            taskData.parmTaskType(smmActivities.ActivityTaskTimeType);
            taskData.parmActivityNumber(smmActivities.ActivityNumber);
            taskData.parmClosed(smmActivities.Closed);

            if (postedActualCost.exists(smmActivities.ActivityNumber))
            {
                taskData.parmActualCost(postedActualCost.lookup(smmActivities.ActivityNumber));
            }
            if (postedActualEffort.exists(smmActivities.ActivityNumber))
            {
                taskData.parmActualEffort(postedActualEffort.lookup(smmActivities.ActivityNumber));
            }

            NonNegativeCostPrice averageUnitCostPrice = psaActivityEstimates::getAverageUnitCostPriceForPublishedActivity(smmActivities.ActivityNumber);
            
            if (averageUnitCostPrice)
            {
                taskData.parmCostPrice(averageUnitCostPrice);
            }
            else
            {
                ProjHourCostPrice projHourCostPrice = ProjHourCostPrice::findProjCostPrice(projTable.ProjId, 0, psaActivitySetup.CategoryDefault, today, projTable.ProjInvoiceProjId, projTable.CustAccount, psaActivitySetup.ResourceCategory);
                if (projHourCostPrice)
                {
                    taskData.parmCostPrice(projHourCostPrice.CostPrice);
                }
            }

            taskData.parmEffort(psaActivitySetup.Effort);
            taskData.parmEffortAtComplete(psaActivitySetup.EffortAtComplete);

            NonNegativeTotal totalCostPrice = psaActivityEstimates::getTotalCostPriceEstimateForPublishedActivity(smmActivities.ActivityNumber);
            if (totalCostPrice)
            {
                taskData.parmCost(totalCostPrice);
            }
            taskData.parmCostAtComplete(psaActivitySetup.CostAtComplete);
            taskData.parmRecId(psaActivitySetup.RecId);

            str hasMilestone;
            str isMilestoneComplete;

            [hasMilestone, isMilestoneComplete] = ProjWbsTrackingServerActions::checkIfRelatedBillingMilestoneExists(projTable,smmActivities.ActivityNumber);
            taskData.parmBillingMilestoneExists(hasMilestone);
            taskData.parmBillingMilestoneComplete(isMilestoneComplete);
            taskData.parmCanBillingMilestoneComplete('0');

            items.addEnd(taskData);
        }

        collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRelatedBillingMilestoneExists</Name>
				<Source><![CDATA[
    public static container checkIfRelatedBillingMilestoneExists(ProjTable _projTable, smmActivityNumber _activityNumber)
    {
        boolean enableMultipleContractLinesForProject = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        if (!_projTable || (!enableMultipleContractLinesForProject && _projTable.Type != ProjType::FixedPrice) ||
            (enableMultipleContractLinesForProject && !ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(_projTable.ProjId, _projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice)))
        {
            return ['0','0'];
        }

        ProjOnAccTrans projOnAccTrans;

        select  firstonly RecId, IsMilestoneComplete from projOnAccTrans
                where projOnAccTrans.ActivityNumber == _activityNumber
            && projOnAccTrans.ProjId == _projTable.ProjId;

        if (projonAccTrans.RecId)
        {
            return ['1', projOnAccTrans.IsMilestoneComplete ? '1' : '0'];
        }

        return ['0','0'];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>