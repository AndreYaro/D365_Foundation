<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconBridgedAutoClearingTopPickService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class for the automatic clearing of bridged transactions batch job during bank reconciliation.
/// </summary>
internal final class BankReconBridgedAutoClearingTopPickService extends SysOperationServiceBase
{
    private guid processingId;
    private boolean isFailedClearingExist;
    private int totalCleared;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the bridged automatic clearing for specified bank reconciliation.
    /// </summary>
    /// <param name = "bankReconBridgedAutoClearingTopPickContract">The contract class.</param>
    internal void process(BankReconBridgedAutoClearingTopPickContract bankReconBridgedAutoClearingTopPickContract)
    {
        processingId = bankReconBridgedAutoClearingTopPickContract.parmProcessingId();

        this.doProcess();

        if (totalCleared)
        {
            info(strFmt("@Bank:BankReconBridgedAutoClearingTotalNumberInfoMessage", totalCleared));
        }

        if (isFailedClearingExist)
        {
            throw Error(strFmt("@Bank:BankReconBridgedAutoClearingFailedErrorMessage"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the bridged automatic clearing.
    /// </summary>
    private void doProcess()
    {
        BankBridgedAutoClearInstrumentationLogger logger = BankBridgedAutoClearInstrumentationLogger::createLogger(classStr(BankReconBridgedAutoClearingTopPickController));

        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addProcessingId(methodStr(BankReconBridgedAutoClearingTopPickService, doProcess), processingId))
        {
            System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
            stopWatch.Start();

            BankReconBridgedAutoClearingProcessing processing;
            TransDate clearingDate;

            processing.readPast(true);

            str bankDocumentTableRecIdFailedStr = tableStr(BankDocumentTable);

            do
            {
                RecId bankDocumentTableRecId;
                RecId bridgedLedgerJournalTransRecId;

                try
                {
                    ttsbegin;
                    select firstonly pessimisticlock processing where processing.ProcessId == processingId;

                    if (clearingDate == dateNull())
                    {
                        clearingDate = min(BankReconciliationHeader::find(processing.BankReconciliationHeader).CutOffDate,
                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                    }

                    if (processing)
                    {
                        bankDocumentTableRecId = processing.BankDocumentTable;
                        bridgedLedgerJournalTransRecId = processing.BridgedLedgerJournalTransRecId;

                        // Limit tts scope for processing deletion to make sure processing record can be deleted successfully
                        // if clearing processing failed, avoid while selection get stuck in an infinite loop.
                        processing.delete();
                        ttscommit;

                        ttsbegin;
                        if (BankReconBridgedAutoClearingTopPickController::clearBridgedTransPerBankDocument(bankDocumentTableRecId, clearingDate))
                        {
                            totalCleared++;
                        }
                    }

                    ttscommit;
                }
                catch (Exception::Error)
                {
                    ttsabort;

                    isFailedClearingExist = true;

                    LedgerJournalTrans ledgerJournalTransBridged = LedgerJournalTrans::findRecId(bridgedLedgerJournalTransRecId, false);

                    bankDocumentTableRecIdFailedStr += int642Str(bankDocumentTableRecId) + ';';

                    warning(strFmt(
                        "@Bank:BankReconBridgedAutoClearingFailedMessage",
                        ledgerJournalTransBridged.JournalNum,
                        ledgerJournalTransBridged.Voucher,
                        enum2Str(ledgerJournalTransBridged.AccountType),
                        ledgerJournalTransBridged.accountDisplay()));
                }
            }
            while (processing);

            logger.logError(bankDocumentTableRecIdFailedStr);

            stopWatch.Stop();
            logger.logInformation("@SYS65175" + "@SYS325924" + "@SYS303273" + any2Str(stopWatch.ElapsedMilliseconds));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>