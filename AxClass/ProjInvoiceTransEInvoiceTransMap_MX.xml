<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceTransEInvoiceTransMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceTransEInvoiceTransMap_MX</c> class extends the <c>EInvoiceTransBaseMap_MX</c>
/// class to implement the mapping from the <c>ProjInvoiceTransMap_MX</c> map.
/// </summary>
/// <remarks>
/// Objects of this class should be instantiated and used by the
/// <c>ProjInvoiceJourEInvoiceJourMap_MX</c> class.
/// </remarks>
public class ProjInvoiceTransEInvoiceTransMap_MX extends EInvoiceTransBaseMap_MX
{
    ProjInvoiceTransMap_MX  projInvoiceTrans;
    ProjInvoiceJour         projInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of project invoice line.
    /// </summary>
    /// <returns>Project invoice line amount.</returns>
    public LineAmount amount()
    {
        return projInvoiceTrans.LineAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of project invoice line.
    /// </summary>
    /// <returns>
    /// Project invoice line amount.
    /// </returns>
    public LineAmount amountCur()
    {
        return projInvoiceTrans.LineAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current CustInvoiceJour
    /// </summary>
    /// <returns>
    /// Invoice transaction currency code
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return projInvoiceJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the discount amount, used in report generation.
    /// </summary>
    /// <returns>
    /// <c>AmountCur</c> value.
    /// </returns>
    public AmountCur discountAmount()
    {
        AmountCur discAmount;

        if (projInvoiceTrans.TableId == tableNum(ProjInvoiceItem))
        {
            if (projInvoiceTrans.InventTransId && projInvoiceTrans.SalesId)
            {
                ProjInvoiceItem projInvoiceItem = projInvoiceTrans;
                SalesLine salesLine = ProjInvoiceItem.salesLine();
                SalesTable salesTable = SalesTable::find(projInvoiceTrans.SalesId);
                SalesPurchLineInterface salesPurchLineInterface = salesLine.SalesPurchLine::salesPurchLineInterface();
                SalesTotals salesTotals = SalesTotals::construct(salesTable, SalesUpdate::All, AccountOrder::None, '', salesTable.SalesId);

                discAmount = salesPurchLineInterface.calcLineDiscExclTax(projInvoiceTrans.Qty, projInvoiceTrans.InvoiceDate, salesTotals.tax());
            }
            else if (projInvoiceTrans.LinePercent < 100.00)
            {
                discAmount = projInvoiceTrans.LineAmountCur * projInvoiceTrans.LinePercent / (100.00 - projInvoiceTrans.LinePercent)
                    + projInvoiceTrans.LineDisc * projInvoiceTrans.Qty;
            }
            else
            {
                discAmount = projInvoiceTrans.PriceUnit * projInvoiceTrans.Qty;
            }
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmountMST</Name>
				<Source><![CDATA[
    public AmountMST discountAmountMST()
    {
        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceItem):
            return CurrencyExchangeHelper::mstAmount(
                projInvoiceTrans.LineDisc,
                projInvoiceTrans.CurrencyCode,
                projInvoiceTrans.InvoiceDate,
                Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation),
                projInvoiceJour.ExchRate,
                projInvoiceJour.ExchrateSecondary);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>projInvoiceTrans</c> class variable.
    /// </summary>
    /// <param name="_originalJournalLine">
    /// A <c>ProjInvoiceTransEInvoiceTransMap_MX</c> record to use for initialization.
    /// </param>
    protected void initLine(Common _originalJournalLine)
    {
        projInvoiceTrans = _originalJournalLine;

        this.initProjInvoiceJour(projInvoiceJour::find(projInvoiceTrans.ProjInvoiceId,
                                                        projInvoiceTrans.InvoiceDate));

        super(_originalJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>projInvoiceJour</c> class variable with the <c>ProjInvoiceJour</c> record of the
    /// line.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// A <c>ProjInvoiceJour</c> record that is the parent of the line.
    /// </param>
    protected void initProjInvoiceJour(ProjInvoiceJour _projInvoiceJour)
    {
        projInvoiceJour = _projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> value from the posted document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c> value of the original document line.
    /// </returns>
    public InventTransId inventTransId()
    {
        return projInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID from the posted document line.
    /// </summary>
    /// <returns>
    /// The item ID of the posted document line.
    /// </returns>
    public ItemId itemId()
    {
        ItemId  itemId;

        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceItem):
                itemId = projInvoiceTrans.ItemId;
                break;

            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjInvoiceRevenue):
                itemId = '';
                break;

            default:
                break;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name of the original posted document.
    /// </summary>
    /// <returns>
    /// The item name of the posted document line item.
    /// </returns>
    public ItemFreeTxt itemName()
    {
        ItemFreeTxt itemName;

        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceItem):
                itemName = projInvoiceTrans.LineDescription;
                break;

            case tableNum(ProjInvoiceEmpl):
                itemName = "@SYS1151";
                break;

            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceRevenue):
                itemName = '1';
                break;

            default:
                break;
        }

        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>MarkupTrans</c> records that are related to each invoice line.
    /// </summary>
    /// <returns>
    /// A list of <c>markupTrans</c> records.
    /// </returns>
    public List markupTransList()
    {
        MarkupTrans markupTrans;
        List list = new List(Types::Record);

        while select markupTrans
            where markupTrans.TransTableId == projInvoiceTrans.TableId
                && markupTrans.TransRecId == projInvoiceTrans.RecId
        {
            list.addEnd(markupTrans);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item number of the merchandise.
    /// </summary>
    /// <returns>
    /// The item number.
    /// </returns>
    public str noIdentification()
    {
        return this.productCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the serial number of the line item.
    /// </summary>
    /// <returns>
    /// Serial number per line.
    /// </returns>
    public InventSerialId serialNumber()
    {
        InventDim inventDim = InventDim::find(projInvoiceTrans.InventDimId);
        
        return inventDim.inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity of the posted document line.
    /// </summary>
    /// <returns>
    /// The quantity of the posted document line.
    /// </returns>
    public Qty qty()
    {
        Qty quantity;

        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceOnAcc):
                quantity = 1;
                break;

            case tableNum(ProjInvoiceItem):
            case tableNum(ProjInvoiceCost):
            case tableNum(ProjInvoiceEmpl):
            case tableNum(ProjInvoiceRevenue):
                quantity = projInvoiceTrans.Qty;
                break;

            default:
                break;
        }

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RefRecId sourceRecId()
    {
        return projInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return projInvoiceTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the unit id of posted document line.
    /// </summary>
    /// <returns>Posted document line unit id.</returns>
    /// <remarks>
    /// Unit of the line item. For ProjInvoiceCost, returns 'UN', because it is mandatory for CFDI 3.2.
    /// </remarks>
    public SalesUnit unit()
    {
        str unit;

        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceCost):
                unit = 'un';
                break;
            case tableNum(ProjInvoiceItem):
                unit = projInvoiceTrans.unit;
                break;
            case tableNum(ProjInvoiceEmpl):
                unit = "@SYS1151";
                break;
            case tableNum(ProjInvoiceOnAcc):
            case tableNum(ProjInvoiceRevenue):
                unit = '1';
                break;
        }

        return unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the price per unit of posted document line
    /// </summary>
    /// <returns>Posted document line price per unit.</returns>
    /// <remarks>
    /// Price per unit is how much each item unit costs
    /// </remarks>
    public SalesPrice unitPrice()
    {
        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;
        ProjOnAccTransSale          projOnAccTransSale;
        SalesPrice                  salesPrice;

        switch (projInvoiceTrans.TableId)
        {
            case tableNum(ProjInvoiceCost)     :
                select firstOnly salesPrice from projInvoiceCostDetail
                    where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceTrans.RecId;

                salesPrice = projInvoiceCostDetail.SalesPrice;
                break;

            case tableNum(ProjInvoiceEmpl)     :
                select firstOnly salesPrice from projInvoiceEmplDetail
                    where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceTrans.RecId;

                salesPrice = projInvoiceEmplDetail.SalesPrice;
                break;

            case tableNum(ProjInvoiceItem)     :

                Qty lineQty = projInvoiceTrans.Qty;
                PriceUnit priceUnit = projInvoiceTrans.PriceUnit;

                if (lineQty == 0)
                {
                    lineQty = 1;
                }

                if (priceUnit == 0)
                {
                    priceUnit = 1;
                }

                select firstOnly salesPrice from projInvoiceItemDetail
                    where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceTrans.RecId;

                salesPrice = CurrencyExchangeHelper::price(projInvoiceItemDetail.SalesPrice / priceUnit, projInvoiceTrans.CurrencyCode)
                     + CurrencyExchangeHelper::price(projInvoiceTrans.SalesMarkup / lineQty);
                break;

            case tableNum(ProjInvoiceRevenue)     :
                select firstOnly salesPrice from projInvoiceRevenueDetail
                    where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceTrans.RecId;

                salesPrice = projInvoiceRevenueDetail.SalesPrice;
                break;

            case tableNum(ProjInvoiceOnAcc) :
                select firstOnly Amount from projOnAccTransSale
                    exists join projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.SaleRefRecId == projOnAccTransSale.RecId
                       && projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceTrans.RecId;

                salesPrice = projOnAccTransSale.Amount;
                break;

            default:
                throw error("@SYS341183");
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the price MST per unit of posted document line
    /// </summary>
    /// <returns>
    /// posted document line price MST per unit
    /// </returns>
    /// <remarks>
    /// Price MST per unit is how much each item unit costs
    /// </remarks>
    public SalesPrice unitPriceMST()
    {
        return ExchangeRateHelper::mstPrice(this.unitPrice(), projInvoiceJour.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::No, projInvoiceJour.ExchRate, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a object of the correct <c>ElectronicInvoiceTransBaseMap_MX</c> concrete implementation based on the _originalJournalLine table id
    /// </summary>
    /// <param name="_projInvoiceTrans">
    /// Original invoice journal line that will be mapped to <c>EInvoiceTransBaseMap_MX</c>
    /// </param>
    /// <returns>
    /// An <c>EInvoiceTransBaseMap_MX</c> instantiated object
    /// </returns>
    /// <remarks>
    /// It is called by Allways <c>EInvoiceTransBaseMap_MX</c>.
    /// Always use this method to create new instances of <c>EInvoiceTransBaseMap_MX</c> classes
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the provided _originalJournalLine is not supported
    /// </exception>
    public static ProjInvoiceTransEInvoiceTransMap_MX construct(ProjInvoiceTransMap_MX _projInvoiceTrans)
    {
        ProjInvoiceTransEInvoiceTransMap_MX invoiceTransMap;
        EInvoiceJour_MX                     eInvoiceJour;
        ProjInvoiceJour                     projInvoiceJour = ProjInvoiceJour::find(_projInvoiceTrans.ProjInvoiceId, _projInvoiceTrans.InvoiceDate);

        eInvoiceJour = EInvoiceJour_MX::findByRef(projInvoiceJour.TableId, projInvoiceJour.RecId);

        if (!eInvoiceJour.CFDI)
        {
            throw error("@SYS341183");
        }

        switch (eInvoiceJour.CFDIVersion)
        {
            case EInvoiceCFDIVersion_MX::V3_2:
            case EInvoiceCFDIVersion_MX::V3_3:
            case EInvoiceCFDIVersion_MX::V4:
                invoiceTransMap = new ProjInvoiceTransEInvoiceTransMap_MX();
                break;

            default:
                throw error("@SYS341183");
        }

        invoiceTransMap.initLine(_projInvoiceTrans);

        return invoiceTransMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>