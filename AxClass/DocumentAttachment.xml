<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocumentAttachment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Attaches documents.
/// </summary>
public abstract class DocumentAttachment
{
    protected SrsReportRunService reportRunService = new SrsReportRunService();
    protected Common journal;
    protected PrintCopyOriginal printCopyOriginal;
    protected SrsReportDataContract innerReportDataContract;
    protected SrsReportDataContract reportDataContract;
    protected ERDocumentAttachmentContract erContract;
    protected ERDocumentAttachmentDataContract erDataContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJournal</Name>
				<Source><![CDATA[
    public Common parmJournal(Common _journal = journal)
    {
        journal = _journal;
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERContract</Name>
				<Source><![CDATA[
    public ERDocumentAttachmentContract parmERContract(ERDocumentAttachmentContract _erContract = erContract)
    {
        erContract = _erContract;
        return erContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInnerReportDataContract</Name>
				<Source><![CDATA[
    public SrsReportDataContract parmInnerReportDataContract(SrsReportDataContract _innerReportDataContract = innerReportDataContract)
    {
        innerReportDataContract = _innerReportDataContract;
        return innerReportDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>Constructs the required object.</summary>
    /// <param name = "_controllerClassId">The id of the class-controller.</param>
    /// <returns>The <c>DocumentAttachment</c> class instance.</returns>
    public static DocumentAttachment construct(PrintMgmtDocumentType _documentType)
    {
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(DocumentAttachment), new DocumentAttachmentAttribute(_documentType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates state before execution.
    /// </summary>
    /// <returns>true if valid; otherwise false.</returns>
    protected boolean validate()
    {
        return innerReportDataContract
            && journal
            && this.trySetJournal()
            && this.isEInvoiceAttachmentEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the processing.
    /// </summary>
    public void run()
    {
        if (this.validate())
        {
            this.initReportDataContract();
            this.initERDataContract();

            if (this.isApplicableForPrintType() && !this.isDocumentAttached())
            {
                this.attachDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDataContract</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initReportDataContract()
    {
        const int numberOfCopies = 1;

        DocumentAttachmentAttribute documentAttachmentAttribute = new DictClass(classIdGet(this))
            .getAttribute(classStr(DocumentAttachmentAttribute)) as DocumentAttachmentAttribute;

        if (documentAttachmentAttribute)
        {
            PrintMgmtDocumentType printMgmtDocumentType = documentAttachmentAttribute.parmDocumentType();
            PrintMgmtReportFormatName reportFormatName = PrintMgmtDocType::construct(printMgmtDocumentType).getDefaultReportFormat();
            str ext = SRSPrintDestinationSettings::findFileNameType(SRSReportFileFormat::PDF, 0);

            reportDataContract = reportRunService.getReportDataContract(innerReportDataContract.parmReportName());
            reportDataContract.unpack(innerReportDataContract.pack());
            reportDataContract.parmReportServerConfig(innerReportDataContract.parmReportServerConfig()
                ? innerReportDataContract.parmReportServerConfig()
                : reportDataContract.parmReportServerConfig(SRSFrameworkServiceHelper::getDefaultConfig()));

            SRSPrintDestinationSettings printDestinationSettings = reportDataContract.parmPrintSettings();
            printDestinationSettings.numberOfCopies(numberOfCopies);
            printDestinationSettings.printMediumType(SRSPrintMediumType::File);
            printDestinationSettings.fileFormat(SRSReportFileFormat::PDF);
            printDestinationSettings.parmFileName(reportFormatName + ext);

            if (innerReportDataContract.parmPrintSettings()
                && innerReportDataContract.parmPrintSettings().parmPrintToArchive())
            {
                printDestinationSettings.parmSRSPrintArchiveContract(innerReportDataContract.parmPrintSettings().parmSRSPrintArchiveContract());
            }

            if (innerReportDataContract.parmPrintSettings().printMediumType() == SRSPrintMediumType::File)
            {
                reportDataContract.parmReportExecutionInfo(new SRSReportExecutionInfo());
                reportRunService.preRunReport(reportDataContract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initERDataContract</Name>
				<Source><![CDATA[
    private void initERDataContract()
    {
        if (erContract)
        {
            erDataContract = erContract.getDataContract();

            str srsFileName = reportDataContract.parmPrintSettings().fileName();
            str reportName = conPeek(fileNameSplit(srsFileName), 2);
            erDataContract.parmReportName(reportName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document attachment file name based on either ER data contract or SRS one.
    /// </summary>
    /// <returns>Document attachment file name.</returns>
    protected str getFileName()
    {
        return erDataContract
            ? erDataContract.getFileName()
            : reportDataContract.parmPrintSettings().fileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileStream</Name>
				<Source><![CDATA[
    private System.IO.Stream getFileStream()
    {
        System.IO.Stream stream = null;

        if (erDataContract)
        {
            stream = erDataContract.getStream();
        }
        else
        {
            str archiveExecutionId = reportDataContract.parmPrintSettings().parmPrintToArchive()
                ? reportDataContract.parmPrintSettings().parmSRSPrintArchiveContract().parmExecutionID()
                : System.String::Empty;

            Map reportParametersMap = reportRunService.createParamMapFromContract(reportDataContract);

            SRSProxy proxy = SRSProxy::constructWithConfiguration(reportDataContract.parmReportServerConfig());
            proxy.parmReportExecutionInfo(reportDataContract.parmReportExecutionInfo());

            System.Byte[] reportBytes = proxy.renderReportToByteArray(
                reportDataContract.parmReportPath(),
                SrsReportRunUtil::getParameterValueArray(reportParametersMap),
                reportDataContract.parmPrintSettings().fileFormat(),
                reportDataContract.parmPrintSettings().deviceInfo(),
                archiveExecutionId);

            reportDataContract.parmReportExecutionInfo(proxy.parmReportExecutionInfo());

            if (reportBytes)
            {
                stream = new System.IO.MemoryStream(reportBytes);
            }
        }

        return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForPrintType</Name>
				<Source><![CDATA[
    private boolean isApplicableForPrintType()
    {
        return printCopyOriginal == PrintCopyOriginal::Original
            || (printCopyOriginal == PrintCopyOriginal::OriginalPrint
                && this.getPrintManagementType() == PrintMgmtDocInstanceType::Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentAttached</Name>
				<Source><![CDATA[
    private boolean isDocumentAttached()
    {
        str name, ext;
        [name, ext] = Docu::splitFilename(this.getFileName());

        DocuRef docuRef;
        DocuValue docuValue;
        select firstonly docuValue
            where docuValue.FileName == name
                && docuValue.FileType == ext
            exists join docuRef
                where docuRef.ValueRecId == docuValue.RecId
                    && docuRef.RefCompanyId == journal.DataAreaId
                    && docuRef.RefTableId == journal.TableId
                    && docuRef.RefRecId == journal.RecId;

        return docuValue.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocument</Name>
				<Source><![CDATA[
    private void attachDocument()
    {
        System.IO.MemoryStream stream = this.getFileStream();
        if (stream && stream.Length > 0)
        {
            stream.Position = 0;

            Filename filename = this.getFileName();
            str fileContentType = System.Web.MimeMapping::GetMimeMapping(filename);

            DocuRef docuRef = DocumentManagement::attachFile(
                journal.TableId,
                journal.RecId,
                journal.DataAreaId,
                enum2Symbol(enumNum(SRSPrintMediumType), SRSPrintMediumType::File),
                stream,
                filename,
                fileContentType,
                filename);

            ttsbegin;

            docuRef.Restriction = DocuRestriction::External;
            docuRef.doUpdate();

            ttscommit;

            if (this.isApplicableForDocumentHashNumberAttachment())
            {
                this.attachDocumentHashNumber(docuRef);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForDocumentHashNumberAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether Document Hash Number can be atached to the <c>DocuValue</c> table.
    /// </summary>
    /// <returns>true when Document Hash Number can be attached; otherwise, false.</returns>
    private boolean isApplicableForDocumentHashNumberAttachment()
    {
        return FeatureStateProvider::isFeatureEnabled(AttachmentDocumentHashNumberCalculationFeature::instance())
            && this.parmJournal()
            && (this.parmJournal().TableId == tableNum(CustInvoiceJour)
                || this.parmJournal().TableId == tableNum(ProjInvoiceJour))
            && !this.documentWithFilledHashNumberAttached();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentWithFilledHashNumberAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether current journal record has an attachment with a Document Hash Number
    /// calculated and attached for it.
    /// </summary>
    /// <returns>true when current journal record has an attachment with a Document Hash Number
    /// calculated and attached for it; otherwise, false.</returns>
    private boolean documentWithFilledHashNumberAttached()
    {
        DocuRef docuRef;
        DocuValue docuValue;

        select firstonly RecId from docuValue
            where docuValue.DocumentHashNumber != ''
            exists join docuRef
                where docuRef.ValueRecId == docuValue.RecId
                    && docuRef.RefCompanyId == journal.DataAreaId
                    && docuRef.RefTableId == journal.TableId
                    && docuRef.RefRecId == journal.RecId;

        return docuValue.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocumentHashNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and attaches Document Hash Number to the <c>DocuValue</c> record.
    /// </summary>
    /// <param name = "_docuRef">
    /// <c>DocuRef</c> record that references <c>DocuValue</c> record which Document
    /// Hash Number should be attahced to.
    /// </param>
    private void attachDocumentHashNumber(DocuRef _docuRef)
    {
        System.IO.Stream documentStream = DocumentManagement::getAttachmentStream(_docuRef);

        str documentStr;
        using (System.IO.StreamReader streamReader = new System.IO.StreamReader(documentStream, System.Text.Encoding::UTF8))
        {
            documentStr = streamReader.ReadToEnd();
        }

        System.Text.Encoding encoding = System.Text.Encoding::ASCII;
        System.Byte[] documentByte = encoding.GetBytes(documentStr);

        var hashAlgorithm = new Org.BouncyCastle.Crypto.Digests.Sha3Digest(512);

        hashAlgorithm.BlockUpdate(documentByte, 0, documentByte.Length);

        System.Byte[] result = new System.Byte[64](); // 512 / 8 = 64
        hashAlgorithm.DoFinal(result, 0);

        str documentHashStr = System.BitConverter::ToString(result);
        documentHashStr = strRem(documentHashStr, '-');

        ttsbegin;

        DocuValue docuValue = _docuRef.docuValue(true);
        docuValue.DocumentHashNumber = documentHashStr;
        docuValue.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEInvoiceAttachmentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the functionality availability.
    /// </summary>
    /// <returns>true if the functionality is enabled; otherwise false</returns>
    protected abstract boolean isEInvoiceAttachmentEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>trySetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a common record to the typed journal and validates it after.
    /// </summary>
    /// <returns>true if journal is valid; otherwise false.</returns>
    protected abstract boolean trySetJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintManagementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance type of the print management setup.
    /// </summary>
    /// <returns>Returns the <c>PrintMgmtDocInstanceType</c> of the print management setup.</returns>
    protected abstract PrintMgmtDocInstanceType getPrintManagementType()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>