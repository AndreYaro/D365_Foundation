<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSync_Appointment</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmOutlookSync_Appointment extends smmOutlookSync
{
    smmOutlookSyncType                  outlookSyncType;
    smmOutlookRecurrenceState           recurrenceState;

    container                           con;
    container                           seriesUpdated;
    container                           exceptionsContainer;
    container                           requiredAttendees;
    container                           optionalAttendees;
    container                           resourceAttendees;

    int                                 numOfRecipients;
    smmActivityOutlookGlobalObjectID    outlookGlobalObjectId;
    smmContactPersonOutlookEntryID      entryId;
    smmActivityOutlookEntryID           outlookEntryId;
    smmActivityOutlookEntryID           outlookMeetingEntryId;
    str                                 organizer;
    str                                 body;
    str                                 resources;

    TransDateTime                       syncrhonizeFromDateTime;
    TransDateTime                       syncrhonizeToDateTime;
    TransDateTime                       originalDateTime;
    TransDateTime                       startDateTime;
    TransDateTime                       recItemStartDateTime;

    boolean                             appointmentExistInOutlook;
    boolean                             synchronizeRecurring;
    boolean                             isMasterRec;
    boolean                             syncrhonizePrivate;
    boolean                             appointmentDeletedInOutlook;
    boolean                             saveItem;
    boolean                             saveMAPIItem;

    Counter                             updatedAppointments;
    Counter                             deletedAppointments;
    Counter                             lines;
    Counter                             numOfExceptions;
    Counter                             exceptionIndex;

    smmDateTimeLastSynchronized         outlookLastDateTimeModified;

    smmIRecurrence                      itemRecurrencePattern;

    smmActivities                       smmActivities;
    smmDeletedActivities                smmDeletedActivities;
    smmActivities                       activities;
    SysIMapiExAppointment               mapiExAppointment;
    HcmWorker                           hcmWorker;
    smmIAppointment                     outlookItem;
    // This should always be null. This is to maintain the depracated API method.
    COM                                 outlookCOMItem;

    #define.AxOldOutlookEntryId('AxOldOutlookEntryId')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearOutlookEntries</Name>
				<Source><![CDATA[
    // Delete all appointments in Outlook that are in axapta.This method is useful in case outlook is migrated/backuped.
    public void clearOutlookEntries()
    {
        synchronizeRecurring = false;

        while select smmActivities
            where !smmActivities.IsTemplate &&
                  smmActivities.Category             == smmActivityCategory::Appointment &&
                  smmActivities.ResponsibleWorker    == currentWorker
        {
            // Find appointment in Outlook
            appointmentExistInOutlook = this.getOulookItemFromOutlook(strUpr(smmActivities.OutlookEntryID));

            if (appointmentExistInOutlook)
            {
                this.saveOldItemEntryId(synchronizeRecurring, outlookItem.entryId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOutlookObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes Outlook objects that are opened by mapiEx.
    /// </summary>
    /// <param name="_save">
    /// A Boolean value that specifies whether to save.
    /// </param>
    void closeOutlookObject(boolean _save = false)
    {
        if (mapiExAppointment)
        {
            if (_save)
            {
                mapiExAppointment.save();
            }
            mapiExAppointment.close();
            mapiExAppointment.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an item in Outlook.
    /// </summary>
    protected void createInOutlook()
    {
        outlookItem = folder.createAppointment();
        outlookItem.saveItem();
        this.getOulookItemFromOutlook(outlookItem.entryId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMappingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>mappint</c> fields.
    /// </summary>
    /// <param name="_smmAxaptaOutlookMapping">
    /// Axapta fields mappint Outlook.
    /// </param>
    protected void createMappingField(smmAxaptaOutlookMapping _smmAxaptaOutlookMapping)
    {
        // Create a container Outlook field ids and sync directions
        fieldMapping = fieldMapping + [[_smmAxaptaOutlookMapping.OutlookAppointmentField, _smmAxaptaOutlookMapping.OutlookSyncDirections]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItemInOutlook</Name>
				<Source><![CDATA[
    public void deleteItemInOutlook()
    {
        outlookItem.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityForException</Name>
				<Source><![CDATA[
    // Find activity in case appointment is a exception
    void findActivityForException()
    {
        smmDateTimeLastSynchronized         outlookLastDateTimeModifiedTmp;
        List                                exceptions = outlookItem.exceptions();
        ListEnumerator                      exceptionEnumerator = exceptions.getEnumerator();
        smmIOccurrence                      occurrence;

        // Get Outlook parent/series last modify date and time
        outlookLastDateTimeModifiedTmp = DateTimeUtil::removeTimeZoneOffset(outlookItem.getMaster().lastModificationTime(),outlookTimeZone);

        if (exceptions.elements())
        {
            originalDateTime    = utcDateTimeNull();

            // Search through exceptions and find exception on basis of start date
            while (exceptionEnumerator.moveNext())
            {
                occurrence = exceptionEnumerator.current();
                if (!occurrence.deleted())
                {
                    if (occurrence.hasStart())
                    {
                        startDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.start(),outlookTimeZone);
                        recItemStartDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.start(),outlookTimeZone);
                        if (startDateTime == recItemStartDateTime)
                        {
                            originalDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.originalDate(),outlookTimeZone);
                            break;
                        }
                    }
                }
            }

            // If appointment was found in exceptions
            if (originalDateTime)
            {
                startDateTime    = DateTimeUtil::removeTimeZoneOffset(outlookItem.getMaster().start(),outlookTimeZone);
                if (originalDateTime == startDateTime)
                {
                    isMasterRec = true;
                }

                this.findSmmActivity();

                // Check if exception has not been changed in outlook but if entire series was changed
                // it may have updated some property on exception.
                // In this case outlook does not change the modified date and time prop on exception
                if (smmActivities)
                {
                    // Are the appointment not modified in Outlook since last synchronization
                    if (!( outlookLastDateTimeModified > this.getDateTimeOfLastSynchronization()
                           || outlookLastDateTimeModified > smmActivities.LastEditAxDateTime))
                    {
                       // Only update activity if it wasn't updated in Axapta since last syncrhonization (update in Axapta is always most important)
                        if (!(smmActivities.Modified))
                        {
                            // If series had been changed , then it may change some property on exception
                            if (outlookLastDateTimeModifiedTmp > this.getDateTimeOfLastSynchronization())
                            {
                                smmActivities.LastEditAxDateTime = utcDateTimeNull();
                            }
                        }
                    }
                    // Check if entryId and outlook Global object Id needs to be updated
                    if ((entryId && smmActivities.OutlookEntryID != entryId) || smmActivities.OutlookGlobalObjectID != outlookGlobalObjectId)
                    {
                        if (entryId)
                        {
                            smmActivities.OutlookEntryID        = outlookEntryId;
                        }
                        smmActivities.OutlookGlobalObjectID = outlookGlobalObjectId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSmmActivity</Name>
				<Source><![CDATA[
    void findSmmActivity(boolean _checkDate = true)
    {
        // Find the Axapta activity based on the Outlook entry id and original date
        select firstonly forupdate smmActivities where smmActivities.OutlookEntryID == outlookEntryId && (!_checkDate || smmActivities.OriginalAppointmentStartDateTime == originalDateTime)
        && smmActivities.ResponsibleWorker == currentWorker && !smmActivities.IsTemplate;

        if (!smmActivities && entryId && outlookEntryId != entryId)
        {
            // Find the Axapta activity based on the old Outlook entry id and original date
            select firstonly forupdate smmActivities where smmActivities.OutlookEntryID == entryId && (!_checkDate || smmActivities.OriginalAppointmentStartDateTime == originalDateTime)
            && smmActivities.ResponsibleWorker == currentWorker && !smmActivities.IsTemplate;
        }
        if (!smmActivities && outlookGlobalObjectId)
        {
            /* Find the Axapta activity based on global object id and original date
               If smmActivities.OutlookEntryID is not set - attendee appointment was not synchronized earlier
               If smmActivities.OutlookEntryID is set (Special case) - if the organizer has sent updates for the already synchronized
               attendee appointment*/
            select firstonly forupdate smmActivities
                    where smmActivities.OutlookGlobalObjectID == outlookGlobalObjectId && (!_checkDate || smmActivities.OriginalAppointmentStartDateTime == originalDateTime)
                          && smmActivities.ResponsibleWorker == currentWorker && !smmActivities.IsTemplate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromOutlook</Name>
				<Source><![CDATA[
    boolean getDataFromOutlook(smmOutlookUserEntryID _entryId)
    {
        int         i;
        requiredAttendees = connull();
        optionalAttendees = connull();
        resourceAttendees = connull();
        outlookGlobalObjectId = '';
        numOfRecipients = 0;
        organizer = '';
        body = '';
        resources = '';

        if (mapiInitialised && mapiEx)
        {
            mapiExAppointment = mapiEx.GetAppointmentFromEntryId(_entryId);
            if (!mapiExAppointment)
            {
                return false;
            }
            numOfRecipients=mapiExAppointment.RecipientCount();
            if (numOfRecipients < 0)
            {
                this.closeOutlookObject();
                return false;
            }
            if (numOfRecipients == 0)
            {
                requiredAttendees = [[currentOutlookUserEntryId,currentOutlookUser,currentOutlookEmail,currentOutlookEmail]];
            }
            for (i=0;i<numOfRecipients;i++)
            {
                mapiExAppointment.getRecipient(i);
                switch (mapiExAppointment.RecipientType())
                {
                    case #olRequired:
                    requiredAttendees += [[mapiExAppointment.RecipientEntryId(),mapiExAppointment.RecipientDisplayName(),mapiExAppointment.RecipientEmailAddress(),mapiExAppointment.RecipientSMTPAddress()]];
                    break;
                    case #olOptional:
                    optionalAttendees += [[mapiExAppointment.RecipientEntryId(),mapiExAppointment.RecipientDisplayName(),mapiExAppointment.RecipientEmailAddress(),mapiExAppointment.RecipientSMTPAddress()]];
                    break;
                    case #olResource:
                    resourceAttendees += [[mapiExAppointment.RecipientEntryId(),mapiExAppointment.RecipientDisplayName(),mapiExAppointment.RecipientEmailAddress(),mapiExAppointment.RecipientSMTPAddress()]];
                    resources += ((resources?',':'')+mapiExAppointment.RecipientDisplayName());
                    break;

                    case -1 :
                    this.closeOutlookObject();
                    return false;
                }
            }
            outlookGlobalObjectId = mapiExAppointment.GlobalObjectId();
            body = mapiExAppointment.Body();
            organizer = mapiExAppointment.SenderName();
        }

        this.closeOutlookObject();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExceptionApptFromOutlook</Name>
				<Source><![CDATA[
    // It appointment has been changed in outlook , search in exceptions in outlook
    // Changes can be - Date is changed or it is deleted
    void getExceptionApptFromOutlook()
    {
        smmIAppointment                     item, outlookItemTmp;
        List                                exceptions = new List(Types::AnyType);
        ListEnumerator                      exceptionEnumerator = exceptions.getEnumerator();
        smmIOccurrence                      occurrence;

        item  = this.outlookItem();
        this.setItem(item);
        exceptions   = outlookItem.exceptions();
        originalDateTime = utcDateTimeNull();
        recurrenceState = smmOutlookRecurrenceState::Exception;
        if (exceptions.elements())
        {
            // Traverse exceptions and find on basis of original appointment date
            while (exceptionEnumerator.moveNext())
            {
                occurrence = exceptionEnumerator.current();
                if (!occurrence.deleted())
                {
                    outlookItemTmp = occurrence.getAppointment();
                }
                if (occurrence.deleted() || outlookItemTmp)
                {
                    startDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.originalDate(),outlookTimeZone);
                    recItemStartDateTime = activities.OriginalAppointmentStartDateTime;
                    if (recItemStartDateTime == startDateTime)
                    {
                        if (occurrence.deleted())
                        {
                            appointmentExistInOutlook   = false;
                            outlookItemTmp = null;
                            // Delete activity in axapta or just break the link
                        }
                        originalDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.originalDate(),outlookTimeZone);
                        break;
                    }
                }
            }

            // If exception appointment was found
            if (originalDateTime)
            {
                // Make active outlook item = exception outlook item
                outlookItem = outlookItemTmp;

                // If axapta activity is not exeption mark it as exeption
                recurrenceState = smmOutlookRecurrenceState::Exception;
            }
            // If there is no exception in outlook then break link
            else
            {
                appointmentExistInOutlook   = false;
            }
        }
        // If there is no exception in outlook then break link
        else
        {
            appointmentExistInOutlook   = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    public smmIItem getItem()
    {
        return outlookItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemOccurrence</Name>
				<Source><![CDATA[
    // Get ocurrence of a recurring appointment
    smmIAppointment getItemOccurrence(Common _record)
    {
        smmIAppointment         outlookItemDel;
        List                    exceptions;
        ListEnumerator          exceptionEnumerator;
        TransDateTime           originalAppointmentStartDateTime;
        TransDateTime           appointmentStartDateTime;
        TransDateTime           tmpDateTime;
        smmIOccurrence          occurrence;
        ;

        switch (_record.TableId)
        {
            case tableNum(smmDeletedActivities) :
                smmDeletedActivities            = _record;
                appointmentStartDateTime        = smmDeletedActivities.StartDateTime;
                originalAppointmentStartDateTime= smmDeletedActivities.OriginalAppointmentStartDateTime;
                break;

            default:
            return outlookItemDel;
        }

        itemRecurrencePattern   = outlookItem.getRecurrencePattern();
        try
        {
            lines = infologLine();
            tmpDateTime = DateTimeUtil::applyTimeZoneOffset(appointmentStartDateTime,outlookTimeZone);
            outlookItemDel         = outlookItem.getItemOccurrence(DateTimeUtil::date(tmpDateTime),DateTimeUtil::time(tmpDateTime));
        }
        catch
        {
            infolog.clear(lines);
            // If date has been changed in outlook , then search in exceptions on basis of original start date
            exceptions = outlookItem.exceptions();
            exceptionEnumerator = exceptions.getEnumerator();
            if (exceptions.elements())
            {
                while (exceptionEnumerator.moveNext())
                {
                    occurrence = exceptionEnumerator.current();
                    if (!occurrence.deleted())
                    {
                        startDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.originalDate(),outlookTimeZone);
                        if (startDateTime == originalAppointmentStartDateTime)
                        {
                            outlookItemDel = occurrence.getAppointment();
                        }
                    }
                }
            }
        }
        return outlookItemDel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldItemEntryId</Name>
				<Source><![CDATA[
    // Get the old outlook entry Id from user properties
    str getOldItemEntryId(smmIItem _outlookItem = outlookItem)
    {
        return outlookItem.getOldItemEntryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOulookItemFromOutlook</Name>
				<Source><![CDATA[
    public boolean getOulookItemFromOutlook(str _outlookEntryId, boolean _echoErrorMessage = true)
    {
        boolean                 ret = true;

        try
        {
            outlookItem = mapiEx.getItemFromId(strUpr(_outlookEntryId), outlookItemType);

            if (outlookItem)
            {
                if (outlookItem.parentFolderId() != folder.entryId())
                {
                    ret = false;
                }
            }
            else
            {
                ret = false;
            }
        }
        catch (Exception::Error)
        {
            // Remove unwanted system error message
            infolog.clear(lines);

            if (_echoErrorMessage)
            {
                // Outlook item not found.
                error("@SYS86365");
            }

            return false;
        }

        CodeAccessPermission::revertAssert();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        // Set mapping type
        outlookMappingType = smmOutlookMappingTypes::Appointments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outlookItem</Name>
				<Source><![CDATA[
    smmIItem outlookItem()
    {
        return outlookItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOldItemEntryId</Name>
				<Source><![CDATA[
    // Save the old outlook entry Id
    public void saveOldItemEntryId(boolean synchronizeRecurringSeting, str _outlookEntryId)
    {
        outlookItem.saveOldItemEntryId(synchronizeRecurringSeting, _outlookEntryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivity</Name>
				<Source><![CDATA[
    void setActivity(smmActivities _smmActivities)
    {
        smmActivities = _smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBodyTextInAxapta</Name>
				<Source><![CDATA[
    void setBodyTextInAxapta()
    {
        #smmOutlook
        str     outlookBodyText = body;
        int     axaptaTagPosition;

        // Find position of the Axapta information tag the Outlook body text
        axaptaTagPosition = strscan(outlookBodyText, #AxInformationBegin, 1, strlen(outlookBodyText));

        // Was the tag not found
        if (!axaptaTagPosition)
        {
            // Use entire Outlook text as Activity user memo
            smmActivities.UserMemo = outlookBodyText;
        }
        else
        {
            // Use text placed before Axapta information tag as Activity user memo
            smmActivities.UserMemo = substr(outlookBodyText, 1, axaptaTagPosition - 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsInOutlook</Name>
				<Source><![CDATA[
    public void setFieldsInOutlook()
    {
        int                         i;
        smmOutlookAppointmentFields outlookAppointmentFields;
        smmOutlookSyncDirections    syncDirection;

        saveItem = true;
        saveMAPIItem = false;

        if (mapiInitialised && mapiEx)
        {
            this.getDataFromOutlook(entryId);
        }

        // Traverse through the field mapping container
        for (i = 1; i <= conlen(fieldMapping); i++)
        {
            // Find Outlook appointment field id
            outlookAppointmentFields = conpeek(conpeek(fieldMapping, i), 1);

            // Find synchronization direction
            syncDirection            = conpeek(conpeek(fieldMapping, i), 2);

            // Do not copy if the field is only meant to be copied from Outlook to Axapta
            if (syncDirection != smmOutlookSyncDirections::OutlookToAxaptaOnly && syncDirection != smmOutlookSyncDirections::None)
            {
                // Set the Outlook field values
                this.setFieldValuesInOutlook(outlookAppointmentFields);
            }
        }

        // Save the Outlook appointment
        if (saveItem)
        {
            outlookItem = outlookItem.saveItem();
            saveItem = false;
            this.closeOutlookObject();
            mapiExAppointment = mapiEx.getAppointmentFromEntryId(outlookItem.entryId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesInAxapta</Name>
				<Source><![CDATA[
    private void setFieldValuesInAxapta(smmOutlookAppointmentFields _outlookAppointmentFields)
    {
        date        endDate;
        TimeOfDay   time;
        EndDateTime endDateTime;

        switch (_outlookAppointmentFields)
        {
            case smmOutlookAppointmentFields::AllDayEvent                   :
                smmActivities.AllDay = outlookItem.allDayEvent();
                break;

            case smmOutlookAppointmentFields::BillingInformation            :
                smmActivities.BillingInformation = outlookItem.billingInformation();
                break;

            case smmOutlookAppointmentFields::Body                          :
                this.setBodyTextInAxapta();
                break;

            case smmOutlookAppointmentFields::Categories                    :
                smmActivities.OutlookCategories = outlookItem.categories();
                break;

            case smmOutlookAppointmentFields::End                           :
                smmActivities.EndDateTime = outlookItem.end();
                if (outlookItem.allDayEvent())
                {
                    // Extract the date
                    endDate = smmActivities.endDate();
                    time = str2time("23:59");
                    endDateTime = DateTimeUtil::newDateTime(endDate, time, outlookTimeZone);
                    smmActivities.EndDateTime = endDateTime;
                }
                else
                {
                    if (!(smmOutlookSyncAppointmentNotRemoveTimezoneFlight::instance().isEnabled() && outlookItem is smmEwsAppointment))
                    {
                        smmActivities.EndDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.end(),outlookTimeZone);
                    }
                }

                break;

            case smmOutlookAppointmentFields::Importance                    :
                this.setTaskPriority();
                break;

            case smmOutlookAppointmentFields::Location                      :
                smmActivities.Location = outlookItem.location();
                break;

            case smmOutlookAppointmentFields::Mileage                       :
                smmActivities.Mileage = outlookItem.mileage();
                break;

            case smmOutlookAppointmentFields::OptionalAttendees             :
                this.syncAttendeesOutlookToAxapta(smmAttendeeReqType::Optional);
                break;

            case smmOutlookAppointmentFields::Organizer                     :
                this.syncAttendeesOutlookToAxapta(smmAttendeeReqType::Required,true);
                break;

            case smmOutlookAppointmentFields::Reminder                      :
                smmActivities.ReminderActive  = outlookItem.reminderSet();
                break;

            case smmOutlookAppointmentFields::ReminderMinutes               :
                smmActivities.ReminderMinutes = outlookItem.reminderMinutesBeforeStart();
                break;

            case smmOutlookAppointmentFields::RequiredAttendees             :
                this.syncAttendeesOutlookToAxapta(smmAttendeeReqType::Required);
                break;

            case smmOutlookAppointmentFields::Resources                     :
                smmActivities.OutlookResources = resources;
                break;

            case smmOutlookAppointmentFields::ResponseRequested             :
                smmActivities.ResponseRequested = outlookItem.responseRequested();
                break;

            case smmOutlookAppointmentFields::Sensivitity                   :
                smmActivities.Sensitivity = outlookItem.sensitivity();
                break;

            case smmOutlookAppointmentFields::Start                         :
                if (outlookItem.allDayEvent())
                {
                    smmActivities.StartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(outlookItem.start()),str2time('00:00'),outlookTimeZone);
                }
                else
                {
                    if (smmOutlookSyncAppointmentNotRemoveTimezoneFlight::instance().isEnabled() && outlookItem is smmEwsAppointment)
                    {
                        smmActivities.StartDateTime = outlookItem.start();
                    }
                    else
                    {
                        smmActivities.StartDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.start(),outlookTimeZone);
                    }
                }
                break;

            case smmOutlookAppointmentFields::Subject                       :
                smmActivities.Purpose = outlookItem.subject();
                break;
            case smmOutlookAppointmentFields::ShowTimeAs                    :
                smmActivities.ActivityTimeType = outlookItem.busyStatus();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task priority based on appointment importance.
    /// </summary>
    protected void setTaskPriority()
    {
        switch (outlookItem.importance())
        {
            case #olImportanceLow :
                smmActivities.TaskPriority = smmActivityPriority::Low;
                break;

            case #olImportanceNormal :
                smmActivities.TaskPriority = smmActivityPriority::Normal;
                break;

            case #olImportanceHigh :
                smmActivities.TaskPriority = smmActivityPriority::High;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesInOutlook</Name>
				<Source><![CDATA[
    private void setFieldValuesInOutlook(smmOutlookAppointmentFields _outlookAppointmentFields)
    {
        container propertiesNotEditable;
        smmOutlookRecurrenceState s;

        propertiesNotEditable += [smmOutlookAppointmentFields::Categories,
                                  smmOutlookAppointmentFields::Sensivitity
                                  ];

        s = outlookItem.recurrenceState();
        // Cannot be updated for individual exceptions
        if (outlookItem.isRecurring() && (recurrenceState == smmOutlookRecurrenceState::Exception || outlookItem.recurrenceState() == smmOutlookRecurrenceState::Exception  && confind(propertiesNotEditable,_outlookAppointmentFields)))
        {
            return;
        }

        // Cannot be updated for entire series
        if (synchronizeRecurring && outlookItem.isRecurring() && outlookItem.recurrenceState() == smmOutlookRecurrenceState::Master || recurrenceState == smmOutlookRecurrenceState::Occurrence)
        {
            if (_outlookAppointmentFields == smmOutlookAppointmentFields::AllDayEvent)
                    return;
            if (_outlookAppointmentFields == smmOutlookAppointmentFields::Start)
                    return;
        }

        switch (_outlookAppointmentFields)
        {
            case smmOutlookAppointmentFields::AllDayEvent                   :
                outlookItem.setAllDayEvent(smmActivities.AllDay);
                break;

            case smmOutlookAppointmentFields::BillingInformation            :
                outlookItem.setBillingInformation(smmActivities.BillingInformation);
                break;

            case smmOutlookAppointmentFields::Body                          :
                outlookItem.setBody(smmActivities.UserMemo + '\n' + smmActivities.ExternalMemo);
                break;

            case smmOutlookAppointmentFields::Categories                    :
                outlookItem.setCategories(smmActivities.OutlookCategories);
                break;

            case smmOutlookAppointmentFields::Importance                    :
                this.setTaskImportance();
                break;

            case smmOutlookAppointmentFields::Location                      :
                outlookItem.setLocation(smmActivities.Location);
                break;

            case smmOutlookAppointmentFields::Mileage                       :
                outlookItem.setMileage(smmActivities.Mileage);
                break;

            case smmOutlookAppointmentFields::Reminder                      :
                outlookItem.setReminderSet(smmActivities.ReminderActive);
                break;

            case smmOutlookAppointmentFields::ReminderMinutes               :
                outlookItem.setReminderMinutesBeforeStart(smmActivities.ReminderMinutes);
                break;

            case smmOutlookAppointmentFields::ResponseRequested             :
                outlookItem.setResponseRequested(smmActivities.ResponseRequested);
                break;

            case smmOutlookAppointmentFields::Sensivitity                   :
                outlookItem.setSensitivity(smmActivities.Sensitivity);
                break;

            case smmOutlookAppointmentFields::Start                         :
                this.setStartTimeInOutlook();
                break;

            // Implement end , delete duration
            case smmOutlookAppointmentFields::Subject                       :
                outlookItem.setSubject(smmActivities.Purpose);
                break;

            case smmOutlookAppointmentFields::ShowTimeAs                    :
                outlookItem.setBusyStatus(smmActivities.ActivityTimeType);
                break;

            // Attendees
            case smmOutlookAppointmentFields::Organizer                     :
                this.syncAttendeesAxaptaToOutlook(smmAttendeeReqType::Required,true);
                break;

            case smmOutlookAppointmentFields::RequiredAttendees             :
                this.syncAttendeesAxaptaToOutlook(smmAttendeeReqType::Required);
                break;

            case smmOutlookAppointmentFields::OptionalAttendees             :
                this.syncAttendeesAxaptaToOutlook(smmAttendeeReqType::Optional);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment importance based on activity priority.
    /// </summary>
    protected void setTaskImportance()
    {
        switch (smmActivities.TaskPriority)
        {
            case smmActivityPriority::Low :
                outlookItem.setImportance(#olImportanceLow);
                break;

            case smmActivityPriority::Normal :
                outlookItem.setImportance(#olImportanceNormal);
                break;

            case smmActivityPriority::High :
                outlookItem.setImportance(#olImportanceHigh);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    public void setItem(smmIItem _item)
    {
        outlookItem = _item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookFolder</Name>
				<Source><![CDATA[
    protected void setOutlookFolder()
    {
        OutlookUserSetup    outlookUserSetup = OutlookUserSetup::findByUser(currentUser);
        // Get folder entryid and store id from the current employee
        str folderEntryId = outlookUserSetup.OutlookCalendarOutlookEntryID;
        str folderStoreId = outlookUserSetup.OutlookCalendarOutlookStoreID;

        this.setFolder(folderEntryId, folderStoreId, #olAppointmentItem, #olFolderCalendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookItemType</Name>
				<Source><![CDATA[
    protected void setOutlookItemType()
    {
        outlookItemType = smmOutlookMappingTypes::Appointments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartTimeInOutlook</Name>
				<Source><![CDATA[
    void setStartTimeInOutlook()
    {
        outlookItem.setStart(smmActivities.StartDateTime);
        outlookItem.setEnd(smmActivities.EndDateTime);

        // Make sure that all day property are not overwritten
        if (smmActivities.AllDay)
        {
            outlookItem.setAllDayEvent(smmActivities.AllDay);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeFromDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeFromDateTime(TransDateTime _synchronizeFromDateTime)
    {
        syncrhonizeFromDateTime = _synchronizeFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeToDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeToDateTime(TransDateTime _synchronizeToDateTime)
    {
        syncrhonizeToDateTime = _synchronizeToDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLog</Name>
				<Source><![CDATA[
    // Show the infolog after synchronization
    void showLog()
    {
        if (updatedAppointments == 0 && deletedAppointments == 0)
        {
            //No appointment(s) for synchronizing found.
            info("@SYS91050");
        }
        else
        {
            if (updatedAppointments)
            {
                // %1 appointment(s) have been synchronized.
                info(strfmt("@SYS91049", updatedAppointments));
            }

            if (deletedAppointments)
            {
                // %1 appointment(s) have been deleted.
                info(strfmt("@SYS91017", deletedAppointments));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncAttendeesAxaptaToOutlook</Name>
				<Source><![CDATA[
    // Syncronize attendees from axapta to outlook
    void syncAttendeesAxaptaToOutlook(smmAttendeeReqType _smmAttendeeReqType, boolean _syncOnlyOrganizer = false)
    {
        smmAttendeeTable            smmAttendeeTable;
        str                         attendeeStr;
        smmActivityOutlookEntryID   recipientEntryId;
        container                   mailIdList;
        Email                       outlookUserEmail;
        Email                       outlookUserEmailSMTP;
        int                         i;
        int                         attendeeType;
        container                   attendees;

        // Need to save outlook item before doing changed from MAPi
        if (outlookItem)
        {
            // Check if it was already saved
            if (saveItem)
            {
                outlookItem.saveItem();
                saveItem     = false;
                saveMAPIItem = false;
            }

            if (!mapiExAppointment)
            {
                mapiExAppointment = mapiEx.GetAppointmentFromEntryId(outlookItem.entryId());
            }
        }

        // Check if activity is organizer activity
        select firstonly smmAttendeeTable where smmAttendeeTable.OrganizerActivityId == activities.ActivityNumber;

        // Synchronize attendees only if organizer activity
        if (!smmAttendeeTable)
        {
            return;
        }
        _syncOnlyOrganizer = (_smmAttendeeReqType != smmAttendeeReqType::Required )? false : _syncOnlyOrganizer ;
        if (outlookItem)
        {
            // Set attendee requirement type
            switch (_smmAttendeeReqType)
            {
                case smmAttendeeReqType::Required :
                    attendeeType = #olRequired;
                    attendees    = requiredAttendees;
                    break;

                case smmAttendeeReqType::Optional :
                    attendeeType = #olOptional;
                    attendees    = optionalAttendees;
                    break;

                default :
                return;
            }

            // Traverse through the list of attendees of required type and update them
            i = 0;

            while (i < conLen(attendees))
            {
                i++;
                [recipientEntryId,attendeeStr,outlookUserEmail,outlookUserEmailSMTP] = conPeek(attendees,i);
                if (recipientEntryId)
                {
                    if (_syncOnlyOrganizer && (currentOutlookUserEntryId != recipientEntryId) )
                    {
                        continue;
                    }
                    select firstonly smmAttendeeTable  where smmAttendeeTable.OrganizerActivityId == activities.ActivityNumber
                    &&( smmAttendeeTable.OutlookEntryID == recipientEntryId || ((outlookUserEmail && smmAttendeeTable.Email == outlookUserEmail)||
                    (outlookUserEmailSMTP && smmAttendeeTable.Email == outlookUserEmailSMTP)) );

                    // Remove attendee from outlook if deleted from axapta
                    if (!smmAttendeeTable)
                    {
                        mapiExAppointment.RemoveRecipient(outlookUserEmailSMTP,attendeeType);
                        saveMAPIItem = true;
                    }
                    else
                    {
                        mailIdList += outlookUserEmailSMTP;
                        // If email has changed
                        if (outlookUserEmail != smmAttendeeTable.Email && outlookUserEmailSMTP != smmAttendeeTable.Email)
                        {
                            smmAttendeeTable.selectForUpdate(true);
                            mapiExAppointment.RemoveRecipient(outlookUserEmailSMTP,attendeeType);
                            smmAttendeeTable.OutlookEntryID = mapiExAppointment.AddRecipient(smmAttendeeTable.Email,smmAttendeeTable.Name,attendeeType);
                            saveMAPIItem = true;
                            smmAttendeeTable.update(false);
                        }
                    }
                }
            }

            ttsbegin;

            // Sync organizer
            if (_smmAttendeeReqType == smmAttendeeReqType::Required)
            {
                select forupdate smmAttendeeTable where smmAttendeeTable.OrganizerActivityId == activities.ActivityNumber
                && smmAttendeeTable.Type == smmAttendeeType::Organizer ;
                if (smmAttendeeTable)
                {
                    smmAttendeeTable.OutlookEntryID = currentOutlookUserEntryId;
                    smmAttendeeTable.update(false);
                }
            }

            // Sync new attendees added in axapta to outlook
            while select forupdate smmAttendeeTable where smmAttendeeTable.OrganizerActivityId == activities.ActivityNumber
            && smmAttendeeTable.Type != smmAttendeeType::Organizer && smmAttendeeTable.ReqType == _smmAttendeeReqType
            {
                if (!smmAttendeeTable.OutlookEntryID || !conFind(mailIdList,smmAttendeeTable.Email))
                {
                    smmAttendeeTable.OutlookEntryID = mapiExAppointment.AddRecipient(smmAttendeeTable.Email,smmAttendeeTable.Name,attendeeType);
                    saveMAPIItem = true;
                    smmAttendeeTable.update(false);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncAttendeesOutlookToAxapta</Name>
				<Source><![CDATA[
    // Syncronize attendees from outlook to axapta
    void syncAttendeesOutlookToAxapta(smmAttendeeReqType _smmAttendeeReqType, boolean _syncOnlyOrganizer = false)
    {
        LogisticsElectronicAddress          eCommunicationAddress;
        DirPartyLocation                    partyLocation;
        TransDateTime                       transDateTime = DateTimeUtil::getSystemDateTime();
        smmAttendeeTable                    smmAttendeeTable;
        smmAttendeeTable                    smmAttendeeTableOrganizer;
        Email                               email;
        str                                 attendeeStr;
        smmActivityOutlookEntryID           recipientEntryId;
        Email                               outlookUserEmail;
        Email                               outlookUserEmailSMTP;
        container                           entryIdList;
        container                           attendees;
        int                                 i;
        int                                 attendeeType;

        _syncOnlyOrganizer = (_smmAttendeeReqType != smmAttendeeReqType::Required )? false : _syncOnlyOrganizer ;
        if (outlookItem)
        {
            if (requiredAttendees || optionalAttendees )
            {
                // Synchronize attendees only if current outlook user is the organizer
                if (organizer != currentOutlookUser)
                {
                    return;
                }

                // Set attendee requirement type
                switch (_smmAttendeeReqType)
                {
                    case smmAttendeeReqType::Required :
                        attendeeType = #olRequired;
                        attendees = requiredAttendees;
                        break;

                    case smmAttendeeReqType::Optional :
                        attendeeType = #olOptional;
                        attendees = optionalAttendees;
                        break;

                    default :
                    return;
                }

                // Traverse through the list of attendees of required type and update them
                i = 0;

                if (numOfRecipients == 0 && _syncOnlyOrganizer)
                {
                    smmAttendeeTable::createOrganizer(smmActivities,currentOutlookUserEntryId);
                }
                // First one is organizer
                email = currentOutlookEmail;

                while (i < conLen(attendees))
                {
                    i++;
                    [recipientEntryId,attendeeStr,outlookUserEmail,outlookUserEmailSMTP] = conPeek(attendees,i);
                    if (recipientEntryId)
                    {
                        // If appointment organizer is different than current user
                        if (i == 1 && !(email == outlookUserEmailSMTP || email == outlookUserEmail  || currentOutlookUserEntryId == recipientEntryId))
                        {
                            return;
                        }
                        if (_syncOnlyOrganizer && recipientEntryId != currentOutlookUserEntryId)
                        {
                            continue;
                        }
                        entryIdList += recipientEntryId;

                        // Find attendee
                        select forupdate smmAttendeeTable
                            where smmAttendeeTable.OrganizerActivityId == smmActivities.ActivityNumber &&
                                  smmAttendeeTable.OutlookEntryID == recipientEntryId;

                        smmAttendeeTable.OutlookEntryID = recipientEntryId;
                        smmAttendeeTable.OrganizerActivityId = smmActivities.ActivityNumber;

                        // If attendee is a organizer and is different from old organizer
                        if (smmAttendeeTable.Type != smmAttendeeType::Organizer && (attendeeStr == organizer && (email == outlookUserEmailSMTP || email == outlookUserEmail)))
                        {
                            select firstonly forupdate smmAttendeeTableOrganizer where smmAttendeeTableOrganizer.OrganizerActivityId == smmActivities.ActivityNumber
                            && smmAttendeeTableOrganizer.Type == smmAttendeeType::Organizer && smmAttendeeTableOrganizer.OutlookEntryID != recipientEntryId;
                            if (smmAttendeeTableOrganizer)
                            {
                                smmAttendeeTableOrganizer.Type = smmAttendeeType::Attendee;
                                smmAttendeeTableOrganizer.update(false);
                            }
                        }

                        smmAttendeeTable.Type =  (attendeeStr == organizer && (email == outlookUserEmailSMTP || email == outlookUserEmail)) ? smmAttendeeType::Organizer : smmAttendeeType::Attendee;
                        smmAttendeeTable.ReqType = _smmAttendeeReqType;
                        smmAttendeeTable.Name = attendeeStr;
                        smmAttendeeTable.Email = (outlookUserEmail && outlookUserEmailSMTP) ? outlookUserEmailSMTP : outlookUserEmail;

                        // Check special case - if organizer is added as a attendee also
                        if (smmAttendeeTable.Type == smmAttendeeType::Organizer)
                        {
                            select firstonly smmAttendeeTableOrganizer where smmAttendeeTableOrganizer.OrganizerActivityId == smmActivities.ActivityNumber
                            && smmAttendeeTableOrganizer.Type == smmAttendeeType::Organizer && smmAttendeeTableOrganizer.Email == smmAttendeeTable.Email
                            && smmAttendeeTableOrganizer.RecId != smmAttendeeTable.RecId;
                            if (smmAttendeeTableOrganizer)
                            {
                                smmAttendeeTable.Type = smmAttendeeType::Attendee;
                            }
                            else
                            {
                                smmAttendeeTable.AttendeeWorker     = smmActivities.ResponsibleWorker;
                                smmAttendeeTable.AttendeeActivityId = smmActivities.ActivityNumber;
                            }
                        }

                        if (smmAttendeeTable.RecId)
                        {
                            smmAttendeeTable.update(false);
                        }
                        else
                        {
                            smmAttendeeTable.insert(smmActivities);
                        }
                    }
                }

                // Delete attendees in axapta which were deleted in outlook
                i = 1;
                while (!_syncOnlyOrganizer && i <= conLen(entryIdList))
                {
                    while select forupdate smmAttendeeTable where smmAttendeeTable.OrganizerActivityId == smmActivities.ActivityNumber
                    && smmAttendeeTable.ReqType == _smmAttendeeReqType && smmAttendeeTable.Type != smmAttendeeType::Organizer
                    {
                        if (!conFind(entryIdList,smmAttendeeTable.OutlookEntryID))
                        {
                            smmAttendeeTable.delete(true, false);
                        }
                    }
                    i++;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    public boolean synchronize()
    {
        boolean             errorInSync;
        OutlookUserSetup    outlookUserSetup;
        try
        {
            // Store date and time of the start of the synchronization
            syncDateTime = DateTimeUtil::getSystemDateTime();

            outlookUserSetup = OutlookUserSetup::findByUser(this.getCurrentUser());

            // Include private appointments in synchronization
            syncrhonizePrivate      = outlookUserSetup.InclPrivateAppointments;

            // Include recurring appointments in synchronization
            synchronizeRecurring    = outlookUserSetup.InclRecurringAppointments;

            // Delete all appointments in Outlook that were deleted in Axapta since last synchronization
            this.updateDeletedActivitiesInOutlook();

            // Traverse appointments in outlook and synchronize to axapta
            this.synchronizeAppointmentsOutlookToAxapta();

            // Traverse appointments in axapta and synchronize to outlook
            this.synchronizeAppointmentsAxaptaToOutlook();

            // Update the information stored for later update to axapta activities
            this.updateActivitiesCon();

            // Update last synchronization information
            this.updateLastSyncInformation(syncDateTime);

            // Show the syncronization log
            this.showLog();

            // Closing the connection object after successful sync
            this.closeMapiEx();
        }
        catch
        {
            errorInSync = true;
        }

        return !errorInSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeAppointmentsAxaptaToOutlook</Name>
				<Source><![CDATA[
    void synchronizeAppointmentsAxaptaToOutlook()
    {
        smmIAppointment                 outlookItemTmp, item;

        // Find all appointments for the employee in the selected sync period that were edited since last syncrhonization
        while select activities
            where activities.ResponsibleWorker      == currentWorker                       &&
                  activities.Category               == smmActivityCategory::Appointment    &&
                  activities.KeepSynchronized       == NoYes::Yes                          &&
                  !activities.IsTemplate                                                &&
                  activities.StartDateTime   >= syncrhonizeFromDateTime &&
                  activities.StartDateTime   <= syncrhonizeToDateTime   &&
                  (syncrhonizePrivate || activities.Sensitivity != smmSensitivity::Privat)
        {
            // Pass activity record to the class
            this.setActivity(activities);

            appointmentDeletedInOutlook = false;

            // Set Defaults
            recurrenceState             = smmOutlookRecurrenceState::NotRecurring;

            // Is appointment synchronized to Outlook before
            if (activities.OutlookEntryID)
            {
                // Search for the contact person in Outlook
                appointmentExistInOutlook = this.getOulookItemFromOutlook(strUpr(activities.OutlookEntryID));

                // To handle case if appointment is not modified in axapta but is deleted in outlook
                if (appointmentExistInOutlook && !activities.Modified && activities.RecurrenceState == smmOutlookRecurrenceState::NotRecurring)
                {
                    continue;
                }

                if (appointmentExistInOutlook)
                {
                    // IF recurring appointment
                    if (synchronizeRecurring && outlookItem && outlookItem.isRecurring())
                    {
                        try
                        {
                            lines = infologLine();
                            outlookItemTmp         = outlookItem.getItemOccurrence(smmActivities.startDate(outlookTimeZone),(smmActivities.AllDay ? 0 : smmActivities.startTime(outlookTimeZone)));
                            if (!synchronizeRecurring)
                            {
                                recurrenceState = smmOutlookRecurrenceState::NotRecurring;
                            }
                            else
                            {
                                recurrenceState = outlookItemTmp.recurrenceState();
                            }

                            //If appointment has not been modified in axapta then continue with rest
                            if (!activities.Modified)
                            {
                                continue;
                            }

                            if (synchronizeRecurring && activities.RecurrenceState == smmOutlookRecurrenceState::Exception)
                            {
                                recurrenceState        = smmOutlookRecurrenceState::Exception;
                            }

                            if (recurrenceState != smmOutlookRecurrenceState::Occurrence)
                            {
                                // Since it is exception take object for exception
                                outlookItem = outlookItemTmp;
                            }
                        }
                        catch (Exception::Error)
                        {
                            infolog.clear(lines);
                            // If date has been changed or appointmnet has been deleted in outlook
                            this.getExceptionApptFromOutlook();
                        }
                    }

                    // Only if appointment has not been deleted in outlook After analyzing (Case Recurring - Exception)
                    if (appointmentExistInOutlook)
                    {
                        item = this.getItem();
                        entryId = item.entryId();

                        // Get Outlook last modify date and time
                        outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                        // Synchronize if changed in axapta - time stamps in axapta and outlook dont match.If it has been modified in outlook at start of sync it will update in axapta and make sync time same
                        if (activities.LastEditAxDateTime != outlookLastDateTimeModified)
                        {
                            // Update in Outlook
                            this.setFieldsInOutlook();

                            if (mapiExAppointment)
                            {
                                outlookGlobalObjectId = mapiExAppointment.GlobalObjectId();
                                this.closeOutlookObject(saveMAPIItem);
                            }

                            this.getOulookItemFromOutlook(entryId);
                            item = outlookItem;

                            // Get Outlook last modify date and time
                            outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                            // If normal occurrence was modified in axapta
                            if (activities.RecurrenceState == smmOutlookRecurrenceState::Exception && recurrenceState != smmOutlookRecurrenceState::Exception)
                            {
                                recurrenceState = smmOutlookRecurrenceState::Exception;
                            }
                            // Mark the activity as updated for later update in Axapta
                            con = con + [[activities.ActivityNumber, entryId, outlookGlobalObjectId, smmOutlookUpdateAction::Update,outlookLastDateTimeModified,recurrenceState]];

                            updatedAppointments++;
                        }
                    }
                }
                // In case a appointment is deleted in outlook but exists in axapta
                if (!appointmentExistInOutlook)
                {
                    // If force synchronisation and deleted appointment should be created again
                    // Force sync right now does not work for recurring appointments
                    if (forceSync && recurrenceState != smmOutlookRecurrenceState::Exception)
                    {
                        appointmentDeletedInOutlook = true;
                    }
                    // Clear the link(EntryID and keep synchronised) in axapta
                    else
                    {
                        // Mark the activity as updated for later update in Axapta
                        con = con + [[activities.ActivityNumber, '', '', smmOutlookUpdateAction::Update, outlookLastDateTimeModified,smmOutlookRecurrenceState::NotRecurring]];
                    }
                }
            }

            // Appointment has not been syncrhonized before or appointment was deleted in Outlook and must be recreated
            if (!activities.OutlookEntryID || appointmentDeletedInOutlook)
            {
                // Create appointment in Outlook
                this.createInOutlook();

                // Find the entry id of the created Outlook appointment
                item = outlookItem;
                entryId = item.entryId();

                this.setFieldsInOutlook();

                if (mapiExAppointment)
                {
                    outlookGlobalObjectId = mapiExAppointment.GlobalObjectId();
                    this.closeOutlookObject(saveMAPIItem);
                }

                this.getOulookItemFromOutlook(entryId);
                item = outlookItem;

                // Save old outlook entry Id to handle SP2 modifications
                // this.saveOldOutlookEntryId(synchronizeRecurring, outlookItem.entryId());

                // Get Outlook last modify date and time
                outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                // Mark the activity as updated for later update in Axapta
                con = con + [[activities.ActivityNumber, entryId, outlookGlobalObjectId, smmOutlookUpdateAction::Create,outlookLastDateTimeModified,smmOutlookRecurrenceState::NotRecurring]];

                updatedAppointments++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeAppointmentsOutlookToAxapta</Name>
				<Source><![CDATA[
    void synchronizeAppointmentsOutlookToAxapta()
    {
        boolean                         privateAppointment;
        List                            appointments;
        ListEnumerator                  appointmentEnumerator;
        smmIAppointment                 master;

        appointments = folder.getAllAppointments(syncrhonizeFromDateTime, syncrhonizeToDateTime, outlookTimeZone, synchronizeRecurring);

        ttsbegin;

        // Traverse Outlook appointments
        appointmentEnumerator = appointments.getEnumerator();
        while (appointmentEnumerator.moveNext())
        {
            outlookItem = appointmentEnumerator.current();

            // Check if appointment is a private appointment
            privateAppointment = (outlookItem.sensitivity() == #olPrivate) ? true : false;

            // Do not syncrhonized private appointments
            if (!privateAppointment || syncrhonizePrivate)
            {
                // Get Outlook last modify date and time
                outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                // Get Outlook entry id
                outlookEntryId = outlookItem.entryId();
                entryId        = this.getOldItemEntryId(outlookItem);

                // Get outlook data including object Id
                this.getDataFromOutlook(outlookEntryId);

                if (!outlookGlobalObjectId && !entryId)
                {
                    this.closeOutlookObject();
                    continue;
                }

                originalDateTime = utcDateTimeNull();
                isMasterRec  = false;

                if (!synchronizeRecurring && outlookItem.isRecurring())
                {
                    warning("@SYS345357");
                    this.closeOutlookObject();
                    continue;
                }

                // If appointment is recurring set recurrence state
                if (outlookItem.isRecurring())
                {
                    if (!synchronizeRecurring)
                    {
                        recurrenceState = smmOutlookRecurrenceState::NotRecurring;
                    }
                    else
                    {
                        recurrenceState = outlookItem.recurrenceState();
                    }
                    isMasterRec         = !synchronizeRecurring;
                }
                else
                {
                    recurrenceState     = smmOutlookRecurrenceState::NotRecurring;
                    isMasterRec         = false;
                }

                // If a recurring appointment
                if (synchronizeRecurring && recurrenceState != smmOutlookRecurrenceState::NotRecurring)
                {
                    recurrenceState     = outlookItem.recurrenceState();
                    itemRecurrencePattern   = outlookItem.getRecurrencePattern();
                    master              = outlookItem.getMaster();

                    // If recurring appointment is a exception
                    if (recurrenceState == smmOutlookRecurrenceState::Exception)
                    {
                        this.findActivityForException();
                    }
                    // If recurrening appointment is not exception can be master or Occurence
                    else if (recurrenceState == smmOutlookRecurrenceState::Occurrence)
                    {
                        originalDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.start(),outlookTimeZone);
                        startDateTime    = DateTimeUtil::removeTimeZoneOffset(master.start(),outlookTimeZone);
                        if (startDateTime == originalDateTime)
                        {
                            isMasterRec = true;
                        }

                        this.findSmmActivity();
                    }
                }
                //If a normal appointment
                else
                {
                        this.findSmmActivity(false);
                }

                // Are the appointment modified in Outlook since last synchronization
                if ( (outlookLastDateTimeModified > this.getDateTimeOfLastSynchronization()) ||
                     (!smmActivities) ||
                     (smmActivities && (outlookLastDateTimeModified > smmActivities.LastEditAxDateTime))
                   )
                {
                    if (smmActivities)
                    {
                        // Only update activity if it wasn't updated in Axapta since last syncrhonization (update in Axapta is always most important)
                        if (!(smmActivities.Modified))
                        {
                            // Update in axapta if it is not recurring or  if recurring then not already updated in series update
                            if (recurrenceState !=  smmOutlookRecurrenceState::Occurrence || !conFind(seriesUpdated, outlookEntryId))
                            {
                                if (recurrenceState != smmOutlookRecurrenceState::NotRecurring)
                                {
                                    this.updateItemRecurrencePattern(smmActivities, itemRecurrencePattern,outlookTimeZone);
                                }

                                // Update recurrence state
                                smmActivities.RecurrenceState = recurrenceState;

                                // Update Outlook entry Id

                                smmActivities.OutlookEntryID = outlookEntryId;

                                // Update global object Id
                                smmActivities.OutlookGlobalObjectID = outlookGlobalObjectId;

                                // Update activity in Axapta with information from Outlook
                                this.updateAxaptaAppointment();

                                // Update time stamps from outlook to axapta
                                smmActivities.LastEditAxDateTime = outlookLastDateTimeModified;

                                // Save old entry id for SP2
                                this.saveOldItemEntryId(synchronizeRecurring, outlookEntryId);

                                smmActivities.IsMasterAppointment   = isMasterRec;

                                smmActivities.update(false,true);

                                updatedAppointments++;

                                // Update the entire series
                                this.updateActivitySeries();
                            }
                        }
                        // Update entry Id and outlookGlobal object Id
                        else if (outlookEntryId && (entryId != outlookEntryId || outlookGlobalObjectId != smmActivities.OutlookGlobalObjectID ))
                        {
                            smmActivities.OutlookEntryID        = outlookEntryId;
                            smmActivities.OutlookGlobalObjectID = outlookGlobalObjectId;

                            // Save old entry id for SP2
                            this.saveOldItemEntryId(synchronizeRecurring, outlookEntryId);

                            smmActivities.update(false,true);
                        }
                    }
                    // Create activity in axapta
                    else
                    {
                        smmActivities.clear();

                        smmActivities.ActivityNumber        = smmParameters::getNumber(smmNumbSeqUsed::Activity);
                        smmActivities.Category              = smmActivityCategory::Appointment;
                        smmActivities.ResponsibleWorker     = currentWorker;
                        smmActivities.OutlookEntryID        = outlookEntryId;
                        smmActivities.OutlookGlobalObjectID = outlookGlobalObjectId;
                        smmActivities.RecurrenceState       = recurrenceState;
                        smmActivities.IsMasterAppointment   = isMasterRec;
                        smmActivities.Source                = "@SYS94030"; // Microsoft outlook

                        if (recurrenceState != smmOutlookRecurrenceState::NotRecurring)
                        {
                            smmActivities.OriginalAppointmentStartDateTime = originalDateTime;
                            this.updateItemRecurrencePattern(smmActivities, itemRecurrencePattern, outlookTimeZone);
                        }

                        this.updateAxaptaAppointment();

                        // Update time stamps from outlook to axapta
                        smmActivities.LastEditAxDateTime    = outlookLastDateTimeModified;
                        smmActivities.Modified              = NoYes::No;

                        if (smmActivities.OutlookGlobalObjectID)
                        {
                            smmActivities.updateAttendeeFromActivity();
                        }

                        smmActivities.insert(false);

                        // Save old entry id for SP2
                        this.saveOldItemEntryId(synchronizeRecurring, outlookEntryId);
                        updatedAppointments++;
                    }
                }
            }
            this.closeOutlookObject();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitiesCon</Name>
				<Source><![CDATA[
    // Update the activities in axapta for changes stored in container
    void updateActivitiesCon()
    {
        int                             counter;
        smmOutlookUpdateAction          updateAction;
        smmOutlookRecurrencePattern     smmOutlookRecurrencePattern;

        ttsbegin;

        // Traverse the container of activities and actions
        for (counter = 1; counter <= conlen(con); counter++)
        {
            updateAction = conpeek(conpeek(con, counter), 4);

            if (updateAction == smmOutlookUpdateAction::Delete)
            {
                // Find the deletion entry in Axapta
                smmDeletedActivities = smmDeletedActivities::find(conpeek(conpeek(con, counter), 1), currentWorker,true);
                select firstonly activities where !activities.IsTemplate && activities.OutlookEntryID == smmDeletedActivities.OutlookEntryID;
                if (smmDeletedActivities.IsEntireSeries || (!activities && smmDeletedActivities.RecurrenceState != smmOutlookRecurrenceState::NotRecurring))
                {
                    smmOutlookRecurrencePattern = smmOutlookRecurrencePattern::find(smmDeletedActivities.OutlookEntryID,true);
                    if (smmOutlookRecurrencePattern)
                    {
                        smmOutlookRecurrencePattern.delete();
                    }
                }

                // Remove the deletion entry in Axapta now that the appointment are deleted from Outlook
                smmDeletedActivities.delete();
            }
            else
            if (updateAction == smmOutlookUpdateAction::Update)
            {
                activities = smmActivities::find(conpeek(conpeek(con, counter), 1), true);

                // In case an appointment is deleted in outlook , link should be cleared in axapta
                if (!conpeek(conpeek(con, counter), 2))
                {
                    // If appointment was recurring before
                    if (activities.RecurrenceState != smmOutlookRecurrenceState::NotRecurring)
                    {
                        select firstonly smmActivities where smmActivities.OutlookEntryID == activities.OutlookEntryID && smmActivities.RecId != activities.RecId;
                        if (!smmActivities)
                        {
                            smmOutlookRecurrencePattern = smmOutlookRecurrencePattern::find(smmDeletedActivities.OutlookEntryID,true);
                            if (smmOutlookRecurrencePattern)
                            {
                                smmOutlookRecurrencePattern.delete();
                            }
                        }
                    }
                    activities.OutlookEntryID           = '';
                    activities.OutlookGlobalObjectID    = '';
                }
                else
                {
                    activities.OutlookEntryID           = conpeek(conpeek(con, counter), 2);
                    activities.OutlookGlobalObjectID    = conpeek(conpeek(con, counter), 3);
                }
                // Update the time stamp from outlook to axapta
                activities.LastEditAxDateTime   = conpeek(conpeek(con, counter), 5);
                activities.Modified             = NoYes::No;

                activities.RecurrenceState      = conpeek(conpeek(con, counter), 6);

                activities.update(false,true);
            }
            else
            if (updateAction == smmOutlookUpdateAction::Create)
            {
                activities = smmActivities::find(conpeek(conpeek(con, counter), 1), true);

                activities.OutlookEntryID           = conpeek(conpeek(con, counter), 2);
                activities.OutlookGlobalObjectID    = conpeek(conpeek(con, counter), 3);

                // Update the time stamp from outlook to axapta
                activities.LastEditAxDateTime   = conpeek(conpeek(con, counter), 5);
                activities.Modified             = NoYes::No;

                activities.RecurrenceState      = conpeek(conpeek(con, counter), 6);

                activities.update(false, true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitySeries</Name>
				<Source><![CDATA[
    // To update the activities in axapta for a series update in outlook
    void updateActivitySeries()
    {
        smmAttendeeTable    smmAttendeeTableMaster;
        smmAttendeeTable    smmAttendeeTableSeries;
        container           attendeeRecIds;
        List                exceptions = outlookItem.exceptions();
        ListEnumerator      exceptionEnumerator = exceptions.getEnumerator();
        smmIOccurrence      occurrence;

        // If it is series update (not exception update)
        if (recurrenceState ==  smmOutlookRecurrenceState::Occurrence)
        {
            // Store the series which are updated
            seriesUpdated += [outlookEntryId];

            // Traverse the exceptions and store their start dates
            exceptionsContainer = connull();
            if (exceptions.elements())
            {
                while (exceptionEnumerator.moveNext())
                    {
                    occurrence = exceptionEnumerator.current();
                    startDateTime = DateTimeUtil::removeTimeZoneOffset(occurrence.originalDate(),outlookTimeZone);
                        exceptionsContainer += [startDateTime];
                    }
            }

            // Need to update all activities in series (excluding exceptions)
            while select forupdate activities where !activities.IsTemplate && activities.OutlookEntryID == outlookEntryId
            && activities.RecurrenceState != smmOutlookRecurrenceState::Exception && activities.RecId != smmActivities.RecId
            {
                // Check if activity is a part of exception then dont update it
                if (confind(exceptionsContainer,activities.OriginalAppointmentStartDateTime))
                {
                    continue;
                }

                // Update activity in Axapta with information from series update
                activities.updateFromSeries(smmActivities);

                // Update time stamps from outlook to axapta
                activities.LastEditAxDateTime = outlookLastDateTimeModified;

                activities.update(false,true);

                attendeeRecIds =  connull();

                // Select attendees for master activity
                while select smmAttendeeTableMaster
                             where smmAttendeeTableMaster.OrganizerActivityId == smmActivities.ActivityNumber
                                   && smmAttendeeTableMaster.Type != smmAttendeeType::Organizer
                {
                    select firstonly forupdate smmAttendeeTableSeries
                                     where smmAttendeeTableSeries.OrganizerActivityId == activities.ActivityNumber
                                     && smmAttendeeTableSeries.OutlookEntryID == smmAttendeeTableMaster.OutlookEntryID;

                    smmAttendeeTableSeries.OutlookEntryID       = smmAttendeeTableMaster.OutlookEntryID;
                    smmAttendeeTableSeries.OrganizerActivityId  = activities.ActivityNumber;
                    smmAttendeeTableSeries.Type                 =  smmAttendeeTableMaster.Type;
                    smmAttendeeTableSeries.ReqType              = smmAttendeeTableMaster.ReqType;
                    smmAttendeeTableSeries.Name                 = smmAttendeeTableMaster.Name;
                    smmAttendeeTableSeries.Email                = smmAttendeeTableMaster.Email;
                    smmAttendeeTableSeries.AttendeeWorker       = smmAttendeeTableMaster.AttendeeWorker;
                    if (smmAttendeeTableSeries.RecId)
                    {
                        smmAttendeeTableSeries.update(false);
                    }
                    else
                    {
                        if (smmAttendeeTableSeries.validateWrite(true))
                        {
                            smmAttendeeTableSeries.insert();
                        }
                    }
                    attendeeRecIds += [smmAttendeeTableSeries.RecId];
                }
                while select firstonly forupdate smmAttendeeTableSeries where smmAttendeeTableSeries.OrganizerActivityId == activities.ActivityNumber
                      && smmAttendeeTableSeries.Type != smmAttendeeType::Organizer
                {
                    if (!confind(attendeeRecIds,smmAttendeeTableSeries.RecId))
                    {
                       smmAttendeeTableSeries.delete();
                    }
                }
                updatedAppointments++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAxaptaAppointment</Name>
				<Source><![CDATA[
    public boolean updateAxaptaAppointment()
    {
        int                         i;
        smmOutlookAppointmentFields outlookAppointmentFields;
        smmOutlookSyncDirections    syncDirection;

        // Traverse through the field mapping container
        for (i = 1; i <= conlen(fieldMapping); i++)
        {
            // Find Outlook appointment field id
            outlookAppointmentFields  = conpeek(conpeek(fieldMapping, i), 1);

            // Find synchronization direction
            syncDirection             = conpeek(conpeek(fieldMapping, i), 2);

            // Do not copy if the field in only meant to be copied from Axapta to Outlook
            if (syncDirection != smmOutlookSyncDirections::AxaptaToOutlookOnly && syncDirection != smmOutlookSyncDirections::None)
            {
                // Set the Axapta field values
                this.setFieldValuesInAxapta(outlookAppointmentFields);
            }
        }

        smmActivities.KeepSynchronized = NoYes::Yes;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeletedActivitiesInOutlook</Name>
				<Source><![CDATA[
    // Delete all appointments in Outlook that were deleted in Axapta since last synchronization
    void updateDeletedActivitiesInOutlook()
    {
    //    COM                             appointmentItemsCollection;
        #define.filter (" ["+#AxOldOutlookEntryId+"]" + "= \'\%1\' " )

        // Traverse through deleted activities in axapta
        while select smmDeletedActivities
            where smmDeletedActivities.Category             == smmActivityCategory::Appointment &&
                  smmDeletedActivities.ResponsibleWorker    == currentWorker
        {
            // Find appointment in Outlook
            appointmentExistInOutlook = this.getOulookItemFromOutlook(strUpr(smmDeletedActivities.OutlookEntryID));

    //        // Search appointment again on basis of old entry Id
    //        if (!appointmentExistInOutlook)
    //        {
    //            appointmentItemsCollection = folder.items();
    //
    //
    //            restrict = strfmt(#filter, // [#AxOldOutlookEntryId] == \'\%1\'
    //                              smmDeletedActivities.OutlookEntryID);
    //
    //            // Find appointment on basis of old outlook entry Id
    //            outlookItem = appointmentItemsCollection.find(restrict);
    //
    //            if (outlookItem)
    //            {
    //                appointmentExistInOutlook = true;
    //                smmDeletedActivities.OutlookEntryID = outlookItem.entryId();
    //            }
    //
    //        }

            // If appointment is found in outlook
            if (appointmentExistInOutlook)
            {
                // If not recurring appointment or entire series need to be deleted
                if (smmDeletedActivities.RecurrenceState == smmOutlookRecurrenceState::NotRecurring
                    || (synchronizeRecurring && smmDeletedActivities.IsEntireSeries)
                   )
                {
                    // Delete the appointment in Outlook
                    this.deleteItemInOutlook();

                    deletedAppointments++;
                }
                else if (synchronizeRecurring && outlookItem.isRecurring())
                {
                    outlookItem = this.getItemOccurrence(smmDeletedActivities);
                    if (outlookItem)
                    {
                        this.deleteItemInOutlook();
                        deletedAppointments++;
                    }
                }
            }
            // Mark the deletion entry for deletion
            con = con + [[smmDeletedActivities.ActivityNumber, '', '', smmOutlookUpdateAction::Delete, dateNull(), 0, 0]];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>