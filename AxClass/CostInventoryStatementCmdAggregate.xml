<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryStatementCmdAggregate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostInventoryStatementCmdAggregate</c> aggregates amounts for the inventory statement.
/// </summary>
public class CostInventoryStatementCmdAggregate extends CostStatementCmdAggregate
{
    CostInventoryStatementCmdMapQuery   inventoryStatementCmdMapQuery;

    CostAmount                          beginningBalanceAmount,
                                        procuredAmount,
                                        manufacturedAmount,
                                        disposedAmount,
                                        disposedAmountFromCounting,
                                        consumedAmount,
                                        transferredAmount,
                                        soldAmount,
                                        endingBalanceAmount,
                                        varianceAmount;

    InventQty                           beginningBalanceQuantity,
                                        procuredQuantity,
                                        manufacturedQuantity,
                                        disposedQuantity,
                                        disposedQuantityFromCounting,
                                        consumedQuantity,
                                        transferredQuantity,
                                        soldQuantity,
                                        endingBalanceQuantity;

    boolean                             useCurrentBalance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBeginningBalanceAmount</Name>
				<Source><![CDATA[
    public CostAmount parmBeginningBalanceAmount()
    {
        return beginningBalanceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetSourcingAmount</Name>
				<Source><![CDATA[
    public CostAmount parmNetSourcingAmount()
    {
        return procuredAmount + manufacturedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcuredAmount</Name>
				<Source><![CDATA[
    public CostAmount parmProcuredAmount()
    {
        return procuredAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManufacturedAmount</Name>
				<Source><![CDATA[
    public CostAmount parmManufacturedAmount()
    {
        return manufacturedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetUsageAmount</Name>
				<Source><![CDATA[
    public CostAmount parmNetUsageAmount()
    {
        return disposedAmount + consumedAmount + transferredAmount + soldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisposedAmount</Name>
				<Source><![CDATA[
    public CostAmount parmDisposedAmount()
    {
        return disposedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisposedAmountFromCounting</Name>
				<Source><![CDATA[
    public CostAmount parmDisposedAmountFromCounting()
    {
        return disposedAmountFromCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedAmount</Name>
				<Source><![CDATA[
    public CostAmount parmConsumedAmount()
    {
        return consumedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferredAmount</Name>
				<Source><![CDATA[
    public CostAmount parmTransferredAmount()
    {
        return transferredAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSoldAmount</Name>
				<Source><![CDATA[
    public CostAmount parmSoldAmount()
    {
        return soldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalanceAmount</Name>
				<Source><![CDATA[
    public CostAmount parmEndingBalanceAmount()
    {
        return endingBalanceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVarianceAmount</Name>
				<Source><![CDATA[
    public CostAmount parmVarianceAmount()
    {
        return varianceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBeginningBalanceQuantity</Name>
				<Source><![CDATA[
    public InventQty parmBeginningBalanceQuantity()
    {
        return beginningBalanceQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetSourcingQuantity</Name>
				<Source><![CDATA[
    public InventQty parmNetSourcingQuantity()
    {
        return procuredQuantity + manufacturedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcuredQuantity</Name>
				<Source><![CDATA[
    public InventQty parmProcuredQuantity()
    {
        return procuredQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManufacturedQuantity</Name>
				<Source><![CDATA[
    public InventQty parmManufacturedQuantity()
    {
        return manufacturedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetUsageQuantity</Name>
				<Source><![CDATA[
    public InventQty parmNetUsageQuantity()
    {
        return disposedQuantity + consumedQuantity + transferredQuantity + soldQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisposedQuantity</Name>
				<Source><![CDATA[
    public InventQty parmDisposedQuantity()
    {
        return disposedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedQuantity</Name>
				<Source><![CDATA[
    public InventQty parmConsumedQuantity()
    {
        return consumedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferredQuantity</Name>
				<Source><![CDATA[
    public InventQty parmTransferredQuantity()
    {
        return transferredQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSoldQuantity</Name>
				<Source><![CDATA[
    public InventQty parmSoldQuantity()
    {
        return soldQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalanceQuantity</Name>
				<Source><![CDATA[
    public InventQty parmEndingBalanceQuantity()
    {
        return endingBalanceQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCurrentBalance</Name>
				<Source><![CDATA[
    public boolean parmUseCurrentBalance(boolean _useCurrentBalance = useCurrentBalance)
    {
        useCurrentBalance = _useCurrentBalance;

        return useCurrentBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyByStatementLineCategoryLevel2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies the statement line category level 2 and adds the amount to the statement.
    /// </summary>
    /// <param name = "_category">
    /// The statement line category to classify.
    /// </param>
    /// <param name = "_quantity">
    /// The quantity to add to the statement.
    /// </param>
    /// <param name = "_amount">
    /// The amount to add to the statement.
    /// </param>
    protected void classifyByStatementLineCategoryLevel2(
        CostStatementLineCategoryLevel2 _category,
        InventQty                       _quantity,
        CostAmount                      _amount)
    {
        switch (_category)
        {
            case CostStatementLineCategoryLevel2::Procured:
                procuredQuantity += _quantity;
                procuredAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::ManufacturedCost:
                manufacturedQuantity += _quantity;
                manufacturedAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::ConsumedMaterialsCost:
                consumedQuantity += _quantity;
                consumedAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::Transferred:
                transferredQuantity += _quantity;
                transferredAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::Sold:
                soldQuantity += _quantity;
                soldAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::Disposed:
                disposedQuantity += _quantity;
                disposedAmount += _amount;
                break;

            case CostStatementLineCategoryLevel2::None:
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyByStatementLineCategoryLevel3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies the statement line category level 3 and adds the amount to the statement.
    /// </summary>
    /// <param name = "_category">
    /// The statement line category to classify.
    /// </param>
    /// <param name = "_quantity">
    /// The quantity to add to the statement.
    /// </param>
    /// <param name = "_amount">
    /// The amount to add to the statement.
    /// </param>
    protected void classifyByStatementLineCategoryLevel3(
        CostStatementLineCategoryLevel3 _category,
        InventQty                       _quantity,
        CostAmount                      _amount)
    {
        switch (_category)
        {
            case CostStatementLineCategoryLevel3::Counting:
                disposedQuantityFromCounting += _quantity;
                disposedAmountFromCounting += _amount;
                break;

            case CostStatementLineCategoryLevel3::None:
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyByCostTransRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies the transaction reference type and adds the amount to the statement.
    /// </summary>
    /// <param name = "_costTransRefType">
    /// The transaction reference type to classify.
    /// </param>
    /// <param name = "_amount">
    /// The amount to add to the statement.
    /// </param>
    protected void classifyByCostTransRefType(InventCostTransRefType _costTransRefType, CostAmount _amount)
    {
        switch (_costTransRefType)
        {
            case InventCostTransRefType::InventoryJournal:
            case InventCostTransRefType::Project:
            case InventCostTransRefType::Purchase:
            case InventCostTransRefType::QualityOrder:
            case InventCostTransRefType::QuarantineOrder:
            case InventCostTransRefType::Sales:
            case InventCostTransRefType::Transfer:
            case InventCostTransRefType::WMSOrder:
                disposedAmount += _amount;
                procuredAmount -= _amount;
                varianceAmount += _amount;
                break;

            case InventCostTransRefType::Production:
            case InventCostTransRefType::ProductionFlow:
                disposedAmount += _amount;
                manufacturedAmount -= _amount;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the inventory quantity and value.
    /// </summary>
    public void execute()
    {
        if (inventoryStatementCmdMapQuery.isVariance())
        {
            this.classifyInventoryVariance();
        }
        else
        {
            switch (inventoryStatementCmdMapQuery.parmStatementType())
            {
                case CostStatementType::Inventory:
                    this.classifyInventoryValue();
                    break;
                case CostStatementType::Variance:
                    this.classifyVariance();
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyInventoryValue</Name>
				<Source><![CDATA[
    private void classifyInventoryValue()
    {
        InventQty   quantity    = inventoryStatementCmdMapQuery.parmQuantity();
        CostAmount  amount      = inventoryStatementCmdMapQuery.parmAmount();
        TransDate   transDate   = inventoryStatementCmdMapQuery.parmTransDate();
        CostStatementLineCategoryLevel1 costStatementLineCategoryLevel1 = inventoryStatementCmdMapQuery.parmStatementLineType1();
        if (transDate > fromDate || (transDate == fromDate && costStatementLineCategoryLevel1 != CostStatementLineCategoryLevel1::BeginningBalance))
        {
            if (useCurrentBalance)
            {
                beginningBalanceQuantity -= quantity;
                beginningBalanceAmount -= amount;
            }
            if (transDate > toDate
                || transDate == dateMax())
            {
                if (useCurrentBalance)
                {
                    endingBalanceQuantity -= quantity;
                    endingBalanceAmount -= amount;
                }
            }
            else
            {
                if (costStatementLineCategoryLevel1 != CostStatementLineCategoryLevel1::BeginningBalance)
                {
                    this.classifyByStatementLineCategoryLevel2(inventoryStatementCmdMapQuery.parmStatementLineType2(), quantity, amount);
                    this.classifyByStatementLineCategoryLevel3(inventoryStatementCmdMapQuery.parmStatementLineType3(), quantity, amount);
                }
                if (!useCurrentBalance)
                {
                    endingBalanceQuantity += quantity;
                    endingBalanceAmount += amount;
                }
            }
        }
        else if (!useCurrentBalance)
        {
            beginningBalanceQuantity += quantity;
            beginningBalanceAmount += amount;
            endingBalanceQuantity += quantity;
            endingBalanceAmount += amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies the variance.
    /// </summary>
    private void classifyVariance()
    {
        varianceAmount += inventoryStatementCmdMapQuery.parmAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyInventoryVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies the variance that should adjust the inventory values.
    /// </summary>
    private void classifyInventoryVariance()
    {
        CostAmount  amount      = inventoryStatementCmdMapQuery.parmAmount();
        TransDate   transDate   = inventoryStatementCmdMapQuery.parmTransDate();

        if (transDate >= fromDate && transDate <= toDate)
        {
            this.classifyByCostTransRefType(inventoryStatementCmdMapQuery.parmCostTransRefType(), amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostInventoryStatementCmdMapQuery</Name>
				<Source><![CDATA[
    protected CostInventoryStatementCmdMapQuery parmCostInventoryStatementCmdMapQuery(CostInventoryStatementCmdMapQuery _inventoryStatementCmdMapQuery = inventoryStatementCmdMapQuery)
    {
        inventoryStatementCmdMapQuery = _inventoryStatementCmdMapQuery;

        return inventoryStatementCmdMapQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostInventoryStatementCmdAggregate construct()
    {
        return new CostInventoryStatementCmdAggregate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostInventoryStatementCmdAggregate</c> class.
    /// </summary>
    /// <param name="_inventoryStatementCmdMapQuery">
    /// The instance of the <c>CostInventoryStatementCmdMapQuery</c> class that maps the query result.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostInventoryStatementCmdAggregate</c> class.
    /// </returns>
    public static CostInventoryStatementCmdAggregate newFromParameters(
        CostInventoryStatementCmdMapQuery   _inventoryStatementCmdMapQuery)
    {
        CostInventoryStatementCmdAggregate inventoryStatementCmdAggregate = CostInventoryStatementCmdAggregate::construct();
        inventoryStatementCmdAggregate.parmCostInventoryStatementCmdMapQuery(_inventoryStatementCmdMapQuery);

        return inventoryStatementCmdAggregate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>