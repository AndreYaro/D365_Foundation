<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationInvoiceBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>>CustAutomationInvoiceBuilder</c> builds the list of invoices for <c>CustAutomationInvoice</c>.
/// </summary>CustAutomationInvoice
public class CustAutomationInvoiceBuilder
{
    private date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private CustAutomationAssignmentTmp custAssignment;
    private NoYes isCollectionProcessAutomationStepTrackEnabled = CustAutomationParameters::find().EnableCollectionProcessAutomationStepTrack;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustAssign</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp parmCustAssign(CustAutomationAssignmentTmp _custAssignment = custAssignment)
    {
        custAssignment = _custAssignment;
        return custAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustAutomationInvoice</Name>
				<Source><![CDATA[
    internal static CustAutomationInvoice populateCustAutomationInvoice(CustAutomationContract _contract, CustAutomationAssignmentTmp _custAssignment)
    {
        CustAutomationInvoiceBuilder builder = new CustAutomationInvoiceBuilder();
        builder.parmCustAssign(_custAssignment);
        return builder.buildCustomerInvoiceTable(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustomerInvoiceTable</Name>
				<Source><![CDATA[
    private CustAutomationInvoice buildCustomerInvoiceTable(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice = this.insertCustAutomationInvoice(_contract);
        this.removeInvalidInvoices(_contract);
        this.populatePredunningInvoices(_contract);
        this.populatePredictionInvoices(_contract);
        return invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAutomationInvoice</Name>
				<Source><![CDATA[
    private CustAutomationInvoice insertCustAutomationInvoice(CustAutomationContract _contract)
    {
        Map fieldMap = new Map(Types::String, Types::Container);

        Query q = this.createBaseQueryForStrategy(_contract.parmCustAutomationStrategy().StrategyName, fieldMap);
        this.removeQuietDayCustomersFromQuery(q, _contract.parmCustAutomationStrategy().QuietDays);
        this.modifyOrAddOldestDueDateToQuery(q, fieldMap, _contract);
        this.removeDisputedInvoices(q);

        CustAutomationInvoice invoice;
        Query::insert_recordset(invoice, fieldMap, q);

        if (isCollectionProcessAutomationStepTrackEnabled)
        {
            this.updateCustAutomationProcessStepCount();
        }

        // These methods build off each other, ordering matters.
        this.updateStrategyLineDetails(_contract);
        this.updateOldestInvoice(_contract.parmCustAutomationStrategy().StrategyName);
        this.insertMultipleActionsSameDay(_contract);

        return invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseQueryForStrategy</Name>
				<Source><![CDATA[
    private Query createBaseQueryForStrategy(CustAutomationStrategyName _strategyName, Map _fieldMap)
    {
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(CustAutomationAssignmentTmp));
        qbds.cursor(custAssignment);
        qbds.fields().dynamic(NoYes::No);
        qbds.fields().clearFieldList();
        qbds.addGroupByAndSelectionField(fieldNum(CustAutomationAssignmentTmp, StrategyName));

        _fieldMap.insert(fieldStr(CustAutomationInvoice, StrategyName), [qbds.uniqueId(), fieldStr(CustAutomationAssignmentTmp, StrategyName)]);
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStrategyLineDetails</Name>
				<Source><![CDATA[
    private void updateStrategyLineDetails(CustAutomationContract _contract)
    {
        CustAutomationStrategyLine strategyLine;
        CustAutomationInvoice invoice;

        // Setting to a number we would never expect to hit (max int)
        CustAutomationDays multiActionDays = intMax();
        int automationProcessCount = 0;

        while select * from strategyLine
            order by Days, BusinessDocument, BusinessPurposeContact
            where strategyLine.ParentRecId == _contract.parmCustAutomationStrategy().RecId
        {
            date lowestInvoiceDate = DateTimeUtil::date(DateTimeUtil::addDays(currentDate, -strategyLine.Days));

            // Only update the first action on the same day given by the order by clause.
            if (multiActionDays != strategyLine.Days)
            {
                if (isCollectionProcessAutomationStepTrackEnabled)
                {
                    this.updateInvoiceWithProcessStepCount(_contract, invoice, strategyLine, lowestInvoiceDate, automationProcessCount);

                    ++automationProcessCount;
                }
                else
                {
                    update_recordset invoice
                    setting ActionType = strategyLine.ActionType,
                        When = strategyLine.When,
                        Days = strategyLine.Days,
                        BusinessDocument = strategyLine.BusinessDocument,
                        BusinessPurposeContact = strategyLine.BusinessPurposeContact,
                        Recipient = strategyLine.Recipient,
                        ExecutionId = _contract.parmExecutionId(),
                        ExecutionDate = currentDate,
                        ProcessScheduleOccurrenceId = _contract.parmProcessScheduleOccurrenceRecId(),
                        Predunning = strategyLine.Predunning
                    where invoice.DueDate <= lowestInvoiceDate
                        && invoice.StrategyName == _contract.parmCustAutomationStrategy().StrategyName
                        && invoice.Status == CustAutomationInvoiceStatus::Pending
                        && Invoice.Invoice == '';
                }
            }
            
            multiActionDays = strategyLine.Days;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMultipleActionsSameDay</Name>
				<Source><![CDATA[
    private void insertMultipleActionsSameDay(CustAutomationContract _contract)
    {
        CustAutomationStrategyLine strategyLine;
        CustAutomationStrategyBusinessDocument localBusinessDocument;
        CustAutomationBusinessPurposeContact localPurposeContact;

        // Setting to a number we would never expect to hit (max int)
        CustAutomationDays multiActionDays = intMax();

        while select * from strategyLine
            order by Days, BusinessDocument, BusinessPurposeContact
            where strategyLine.ParentRecId == _contract.parmCustAutomationStrategy().RecId
        {
            // Only insert the multiple actions after the first given by the order by clause.
            if (multiActionDays == strategyLine.Days)
            {
                this.insertSameDayAction(strategyLine, localBusinessDocument, localPurposeContact, _contract);
            }
            // Set unique values for join clause on indexTmp above to ensure we do not insert 2^(n-1) records given n = multiActionDays > 2.
            else
            {
                localBusinessDocument = strategyLine.BusinessDocument;
                localPurposeContact = strategyLine.BusinessPurposeContact;
            }

            multiActionDays = strategyLine.Days;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSameDayAction</Name>
				<Source><![CDATA[
    private void insertSameDayAction(
        CustAutomationStrategyLine _strategyLine,
        CustAutomationStrategyBusinessDocument _businessDocument,
        CustAutomationBusinessPurposeContact _purposeContact,
        CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice, invoiceInsert;
        CustAutomationActionType actionTypeToUpdate = _strategyLine.ActionType;
        CustAutomationDays daysToUpdate = _strategyLine.Days;
        CustAutomationStrategyBusinessDocument businessDocumentToUpdate = _strategyLine.BusinessDocument;
        CustAutomationBusinessPurposeContact businessContactToUpdate = _strategyLine.BusinessPurposeContact;
        CustAutomationRecipient recipientToUpdate = _strategyLine.Recipient;
        CustAutomationWhenRelationDueDate whenToUpdate = _strategyLine.When;
        CustAutomationStrategyName strategyName = _contract.parmCustAutomationStrategy().StrategyName;
        NoYes predunning = _strategyLine.Predunning;
        ProcessExecutionId executionId = _contract.parmExecutionId();
        RefRecId processScheduleOccurrenceId = _contract.parmProcessScheduleOccurrenceRecId();
        
        if (isCollectionProcessAutomationStepTrackEnabled)
        {
            insert_recordset invoiceInsert (ActionType, BusinessDocument, BusinessPurposeContact, Recipient, When, AccountNum, Invoice, DueDate, StrategyName, Days, ExecutionId, ExecutionDate, Predunning, ProcessScheduleOccurrenceId, CustAutomationProcessSentCount)
            select
                actionTypeToUpdate,
                businessDocumentToUpdate,
                businessContactToUpdate,
                recipientToUpdate,
                whenToUpdate,
                AccountNum,
                Invoice,
                DueDate,
                StrategyName,
                Days,
                executionId,
                ExecutionDate,
                predunning,
                processScheduleOccurrenceId,
                CustAutomationProcessSentCount
            from invoice
                where invoice.Days == _strategyLine.Days
                    && invoice.StrategyName == strategyName
                    && invoice.BusinessDocument == _businessDocument
                    && invoice.BusinessPurposeContact == _purposeContact
                    && invoice.ExecutionId == executionId;
        }
        else
        {
            insert_recordset invoiceInsert (ActionType, BusinessDocument, BusinessPurposeContact, Recipient, When, AccountNum, Invoice, DueDate, StrategyName, Days, ExecutionId, ExecutionDate, Predunning, ProcessScheduleOccurrenceId)
            select
                actionTypeToUpdate,
                businessDocumentToUpdate,
                businessContactToUpdate,
                recipientToUpdate,
                whenToUpdate,
                AccountNum,
                Invoice,
                DueDate,
                StrategyName,
                Days,
                executionId,
                ExecutionDate,
                predunning,
                processScheduleOccurrenceId
            from invoice
                where invoice.Days == _strategyLine.Days
                    && invoice.StrategyName == strategyName
                    && invoice.BusinessDocument == _businessDocument
                    && invoice.BusinessPurposeContact == _purposeContact
                    && invoice.ExecutionId == executionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOldestInvoice</Name>
				<Source><![CDATA[
    private void updateOldestInvoice(CustAutomationStrategyName _strategyName)
    {
        CustAutomationInvoice invoice;
        CustTrans custTrans;
        CustInvoiceJour custInvoiceJour;
        CustAutomationInvoiceSelectionTmp selectionTmp = CustAutomationInvoiceSameDayBuilder::buildInvoiceSelectionTmp(_strategyName);

        update_recordset invoice
            setting Invoice = custTrans.Invoice
            where invoice.StrategyName == _strategyName
                && invoice.Status == CustAutomationInvoiceStatus::Pending
                && invoice.ExecutionDate == currentDate
            join custTrans
                where custTrans.AccountNum == invoice.AccountNum
                    && custTrans.DueDate == invoice.DueDate
            join selectionTmp
                where selectionTmp.AccountNum == custTrans.AccountNum
                    && selectionTmp.CustTransCreatedDateTime == custTrans.CreatedDateTime
            join custInvoiceJour
                    where custInvoiceJour.InvoiceId == custTrans.Invoice
                        && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                        && custInvoiceJour.InvoiceDate == custTrans.TransDate
                        && custInvoiceJour.LedgerVoucher == custTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvalidInvoices</Name>
				<Source><![CDATA[
    private void removeInvalidInvoices(CustAutomationContract _contract)
    {
        this.removeCustomersWithNoInvoiceTrigger(_contract);
        this.removeDuplicatedActions(_contract.parmCustAutomationStrategy().StrategyName, _contract.parmExecutionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDuplicatedActions</Name>
				<Source><![CDATA[
    private void removeDuplicatedActions(CustAutomationStrategyName _strategyName, ProcessExecutionId _executionId)
    {
        CustAutomationInvoice invoice, olderInvoice;

        delete_from invoice
            where invoice.StrategyName == _strategyName
                && invoice.ExecutionId == _executionId
                 exists join olderInvoice
                    where olderInvoice.Days == invoice.Days
                        && olderInvoice.ActionType == invoice.ActionType
                        && olderInvoice.BusinessDocument == invoice.BusinessDocument
                        && olderInvoice.BusinessPurposeContact == invoice.BusinessPurposeContact
                        && olderInvoice.Invoice == invoice.Invoice
                        && olderInvoice.Status == CustAutomationInvoiceStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustomersWithNoInvoiceTrigger</Name>
				<Source><![CDATA[
    private void removeCustomersWithNoInvoiceTrigger(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice;

        delete_from invoice
            where invoice.StrategyName == _contract.parmCustAutomationStrategy().StrategyName
                && invoice.Invoice == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeQuietDayCustomersFromQuery</Name>
				<Source><![CDATA[
    private void removeQuietDayCustomersFromQuery(Query _q, CustAutomationDays _quietDays)
    {
        QueryBuildDataSource qbds = _q.dataSourceTable(tableNum(CustAutomationAssignmentTmp)).addDataSource(tableNum(CustAutomationInvoice));
        qbds.addLink(fieldNum(CustAutomationAssignmentTmp, AccountNum), fieldNum(CustAutomationInvoice, AccountNum));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addRange(fieldNum(CustAutomationInvoice, Status)).value(SysQuery::valueNot(CustAutomationInvoiceStatus::Simulation));
        qbds.addRange(fieldNum(CustAutomationInvoice, ExecutionDate))
            .value(strFmt('> %1', currentDate - _quietDays));
        qbds.fields().dynamic(NoYes::No);
        qbds.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOrAddOldestDueDateToQuery</Name>
				<Source><![CDATA[
    private void modifyOrAddOldestDueDateToQuery(Query _q, Map _fieldMap, CustAutomationContract _contract)
    {
        AmountMST excludeAmountMST = this.getExcludeInvoiceAmountFromStrategy(_contract);

        QueryBuildDataSource qbdsCustTrans = SysQuery::findOrCreateDataSource(_q, tableNum(CustTrans), tableNum(CustAutomationAssignmentTmp));
        qbdsCustTrans.addLink(fieldNum(CustAutomationAssignmentTmp, AccountNum), fieldNum(CustTrans, AccountNum));
        qbdsCustTrans.joinMode(JoinMode::InnerJoin);
        qbdsCustTrans.fetchMode(QueryFetchMode::One2One);
        qbdsCustTrans = this.modifyOrAddOldestDueDateToQueryRanges(qbdsCustTrans, excludeAmountMST);
        qbdsCustTrans.fields().dynamic(NoYes::No);
        qbdsCustTrans.fields().clearFieldList();

        qbdsCustTrans.addGroupByAndSelectionField(fieldNum(CustTrans, AccountNum));
        qbdsCustTrans.addSelectionField(fieldNum(CustTrans, DueDate), SelectionField::Min);

        QueryBuildDataSource qbdsInvoiceJour = _q.dataSourceTable(tableNum(CustTrans)).addDataSource(tableNum(CustInvoiceJour));
        qbdsInvoiceJour.joinMode(JoinMode::InnerJoin);
        qbdsInvoiceJour.fetchMode(QueryFetchMode::One2One);
        qbdsInvoiceJour.addLink(fieldNum(CustTrans, Invoice), fieldNum(CustInvoiceJour, InvoiceId));
        qbdsInvoiceJour.addLink(fieldNum(CustTrans, AccountNum), fieldNum(CustInvoiceJour, InvoiceAccount));
        qbdsInvoiceJour.addLink(fieldNum(CustTrans, TransDate), fieldNum(CustInvoiceJour, InvoiceDate));
        qbdsInvoiceJour.addLink(fieldNum(CustTrans, Voucher), fieldNum(CustInvoiceJour, LedgerVoucher));
        qbdsInvoiceJour.fields().dynamic(NoYes::No);
        qbdsInvoiceJour.fields().clearFieldList();

        _fieldMap.insert(fieldStr(CustAutomationInvoice, AccountNum), [qbdsCustTrans.uniqueId(), fieldStr(CustTrans, AccountNum)]);
        _fieldMap.insert(fieldStr(CustAutomationInvoice, DueDate), [qbdsCustTrans.uniqueId(), strFmt('MIN(%1)', fieldStr(CustTrans, DueDate))]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOrAddOldestDueDateToQueryRanges</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource modifyOrAddOldestDueDateToQueryRanges(QueryBuildDataSource _qbdsCustTrans, AmountMST _excludeAmountMST)
    {
        _qbdsCustTrans.addRange(fieldNum(CustTrans, Closed)).value(SysQuery::value(dateNull()));
        _qbdsCustTrans.addRange(fieldNum(CustTrans, CustAutomationExclude)).value(SysQuery::value(NoYes::No));
        _qbdsCustTrans.addRange(fieldNum(CustTrans, AmountMST))
            .value(SysQuery::range(_excludeAmountMST, realMax()));

        return _qbdsCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDisputedInvoices</Name>
				<Source><![CDATA[
    protected void removeDisputedInvoices(Query _q)
    {
        QueryBuildDataSource qbdsDispute = _q.dataSourceTable(tableNum(CustTrans)).addDataSource(tableNum(CustDispute));
        qbdsDispute.addLink(fieldNum(CustTrans, RecId), fieldNum(CustDispute, CustTrans));
        qbdsDispute.joinMode(JoinMode::NoExistsJoin);
        qbdsDispute.fetchMode(QueryFetchMode::One2One);
        qbdsDispute.addRange(fieldNum(CustDispute, Status)).value(SysQuery::value(CustVendDisputeStatus::Disputed));
        qbdsDispute.addRange(fieldNum(CustDispute, Status)).value(SysQuery::value(CustVendDisputeStatus::PromiseToPay));
        qbdsDispute.fields().dynamic(NoYes::No);
        qbdsDispute.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludeInvoiceAmountFromStrategy</Name>
				<Source><![CDATA[
    private AmountMST getExcludeInvoiceAmountFromStrategy(CustAutomationContract _contract)
    {
        AmountMST excludeAmountMST = (_contract.parmCustAutomationStrategy().CustExclude == CustAutomationExcludeBy::Invoice) ? _contract.parmCustAutomationStrategy().CustExcludeAmount : 0;

        return excludeAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePredunningInvoices</Name>
				<Source><![CDATA[
    private void populatePredunningInvoices(CustAutomationContract _contract)
    {
        if (CustAutomationStrategy::doesPredunningExistForStrategy(_contract.parmCustAutomationStrategy().RecId))
        {
            CustAutomationInvoicePredunningBuilder::populatePreDunningInvoices(_contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePredictionInvoices</Name>
				<Source><![CDATA[
    private void populatePredictionInvoices(CustAutomationContract _contract)
    {
        if (CustAutomationStrategy::doesPredictionExistForStrategy(_contract.parmCustAutomationStrategy().RecId))
        {
            CustAutomationInvoicePredictionBuilder::populatePredictionInvoices(_contract, custAssignment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceWithProcessStepCount</Name>
				<Source><![CDATA[
    private void updateInvoiceWithProcessStepCount(CustAutomationContract _contract, CustAutomationInvoice _invoice, CustAutomationStrategyLine _strategyLine, date _lowestInvoiceDate, int _automationProcessCount)
    {
        update_recordset _invoice
            setting ActionType = _strategyLine.ActionType,
                When = _strategyLine.When,
                Days = _strategyLine.Days,
                BusinessDocument = _strategyLine.BusinessDocument,
                BusinessPurposeContact = _strategyLine.BusinessPurposeContact,
                Recipient = _strategyLine.Recipient,
                ExecutionId = _contract.parmExecutionId(),
                ExecutionDate = currentDate,
                ProcessScheduleOccurrenceId = _contract.parmProcessScheduleOccurrenceRecId(),
                Predunning = _strategyLine.Predunning,
                CustAutomationProcessSentCount = _automationProcessCount + 1
            where _invoice.DueDate <= _lowestInvoiceDate
                && _invoice.StrategyName == _contract.parmCustAutomationStrategy().StrategyName
                && _invoice.Status == CustAutomationInvoiceStatus::Pending
                && _invoice.Invoice == ''
                && _invoice.CustAutomationProcessCount == _automationProcessCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAutomationProcessStepCount</Name>
				<Source><![CDATA[
    private void updateCustAutomationProcessStepCount()
    {
        CustTrans custTrans;
        CustAutomationInvoice invoice;
        CustInvoiceJour custInvoiceJour;
        CustAutomationProcessStepCountTable custAutomationProcessStepCountTable;

        update_recordset invoice
            setting CustAutomationProcessCount = custAutomationProcessStepCountTable.CustAutomationProcessCount
            where invoice.Status == CustAutomationInvoiceStatus::Pending
            && Invoice.Invoice == ''
        join custTrans
            where invoice.AccountNum == custTrans.AccountNum
            && invoice.DueDate == custTrans.DueDate
        join custInvoiceJour
            where custTrans.Invoice == custInvoiceJour.InvoiceId
            && custTrans.AccountNum == custInvoiceJour.InvoiceAccount
            && custTrans.TransDate == custInvoiceJour.InvoiceDate
            && custTrans.Voucher == custInvoiceJour.LedgerVoucher
        join custAutomationProcessStepCountTable
            where custTrans.RecId == custAutomationProcessStepCountTable.CustTransRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>