<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkPeriodTemplateCalculateBackward</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WorkPeriodTemplateCalculate</c> class calculates periods for a period template.
/// </summary>
/// <remarks>
///    The storage of the periods must be handled by another class that implements the
///    <c>WorkPeriodTemplateCalculable</c> interface.The first period will have a <c>dateNull</c> from
///    date. The last period will have a <c>maxDate</c> to date.
/// </remarks>
public class WorkPeriodTemplateCalculateBackward extends WorkPeriodTemplateCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHiddenDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds hidden days to a specified start date.
    /// </summary>
    /// <param name="_date">
    /// An end date.
    /// </param>
    /// <param name="_workPeriodTemplateLine">
    /// A <c>WorkPeriodTemplateLine</c> record.
    /// </param>
    /// <param name="_remainPeriods">
    /// An integer that contains the number of remaining time periods the current table buffer of the
    /// <c>WorkPeriodTemplateLine</c> record must create.
    /// </param>
    /// <returns>
    /// An end date.
    /// </returns>
    protected TransDate addHiddenDays(
        TransDate                   _date,
        WorkPeriodTemplateLine      _workPeriodTemplateLine,
        int                         _remainPeriods)
    {
        TransDate               newStartDate;
        TransDate               endDateNextLine;
        WorkPeriodTemplateLine  nextLine;

        newStartDate = _date;

        if (   setWorkDays.elements() > 0
            && setWorkDays.elements() < #daysPerWeek)
        {
            if (_workPeriodTemplateLine.Period == DayWeekMonthQuarterYear::Day)
            {
                if (_remainPeriods == 0)
                {
                    nextLine = this.nextWorkPeriodTemplateLine(_workPeriodTemplateLine);

                    if (   nextLine.RecId
                        && nextLine.Period != DayWeekMonthQuarterYear::Day)
                    {
                        nextLine.NumberOfPeriods = 0;
                        endDateNextLine          = this.calcStartDate(newStartDate,nextLine) - 1;
                    }
                }

                // subsequent hidden days are added as long we don't go into the next period
                while (!this.isWorkDay(newStartDate - 1 ) && (!endDateNextLine || endDateNextLine < (newStartDate - 1)))
                {
                    newStartDate--;
                }
            }
        }

        return newStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates periods from a specified period template.
    /// </summary>
    /// <param name="_caller">
    /// An object that implements the <c>WorkPeriodTemplateCalculable</c> interface.
    /// </param>
    public void calcPeriods(WorkPeriodTemplateCalculable _caller)
    {
        #define.maxNumberOfPeriods(1000)
        WorkPeriodTemplateLine      workPeriodTemplateLine;
        TransDate                   startDate;
        TransDate                   endDate;
        Counter                     createdPeriods;
        int                         remainPeriods;
        int                         extraPeriods;
        boolean                     considerFixedStartDate = workPeriodTemplate.FixedDayStart != WeekDays::None;
        PeriodTemplateDescription   periodTemplateDescription;

        if (!this.validate())
        {
            return;
        }

        // create outLook period
        startDate   = todayDate+1;
        endDate     = dateMax();
        _caller.addPeriod(startDate,endDate,"@SYS131154",0);

        //create periods
        while select workPeriodTemplateLine
            order by LineNumber
            where workPeriodTemplateLine.PeriodTemplate == workPeriodTemplate.RecId
        {
            if (createdPeriods > #maxNumberOfPeriods)
            {
                throw error(strfmt("@SYS132216",#maxNumberOfPeriods,workPeriodTemplate.Name));
            }

            remainPeriods   = workPeriodTemplateLine.ExplodePeriods ? workPeriodTemplateLine.NumberOfPeriods : 1;
            extraPeriods    = 0;
            do
            {
                endDate   = startDate - 1;
                startDate = this.calcStartDate(endDate, workPeriodTemplateLine);

                if (   considerFixedStartDate
                    && extraPeriods < #daysPerWeek
                    && workPeriodTemplateLine.ExplodePeriods
                    && workPeriodTemplateLine.Period == DayWeekMonthQuarterYear::Day
                    && dayofwk(startDate)            != workPeriodTemplate.FixedDayStart)
                {
                    extraPeriods++;
                }
                else
                {
                    remainPeriods--;
                    considerFixedStartDate = false;
                }

                startDate = this.addHiddenDays(startDate,workPeriodTemplateLine,remainPeriods);

                if (!this.parmSkipPeriodDescriptions())
                {
                    periodTemplateDescription = workPeriodTemplateLine.periodDescription(startDate,endDate,endDate);
                }

                _caller.addPeriod(startDate,endDate,periodTemplateDescription,this.calcNumOfWorkDays(startDate,endDate));

                createdPeriods++;
            }
            while (    remainPeriods > 0
                    && startDate - 1 > dateNull());
        }

        //create backLog period
        endDate     = startDate -1;
        startDate   = dateNull();
        _caller.addPeriod(startDate,endDate,"@SYS90879",0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates an end date by adding zero or more time periods to a start date.
    /// </summary>
    /// <param name="_endDate">
    /// An end date.
    /// </param>
    /// <param name="_templateLine">
    /// A <c>WorkPeriodTemplateLine</c> record that contains the period length and number of periods that
    /// are added to the start date.
    /// </param>
    /// <returns>
    /// An end date.
    /// </returns>
    protected TransDate calcStartDate(
        TransDate                   _endDate,
        WorkPeriodTemplateLine      _templateLine)
    {
        #TimeConstants

        int         numberOfPeriods;
        TransDate   startDate;
        int         remainPeriods;

        if (! _templateLine.RecId)
        {
            return _endDate;
        }

        if (   _templateLine.ExplodePeriods == NoYes::No
            && _templateLine.NumberOfPeriods >= 1)
        {
            numberOfPeriods =_templateLine.NumberOfPeriods - 1;
        }
        else
        {
            numberOfPeriods = 0;
        }

        PreferredLocale preferredLocale = (new xSession()).PreferredLocale();
                
        switch (_templateLine.Period)
        {
            case DayWeekMonthQuarterYear::Day:

                startDate = _endDate;

                remainPeriods = numberOfPeriods;

                if (setWorkDays.elements()>0 && setWorkDays.elements() < #daysPerWeek)
                {
                    while (remainPeriods)
                    {
                        startDate--;
                        if (this.isWorkDay(startDate))
                        {
                            remainPeriods--;
                        }
                    }
                }
                else
                {
                    startDate -= remainPeriods;
                }

                break;

            case DayWeekMonthQuarterYear::Week:

                // firstDayOfWeek() returns 0-6, dayOfWk() works with 1-7
                int firstDayOfWeek = DateTimeUtil::getFirstDayOfWeek(preferredLocale);
                if (dayofwk(_endDate) <= firstDayOfWeek)
                {
                    startDate = _endDate - #daysPerWeek - dayofwk(_endDate) + firstDayOfWeek + 1;
                }
                else
                {
                    startDate = _endDate - dayofwk(_endDate) + firstDayOfWeek + 1;
                }

                startDate -= (#daysPerWeek*numberOfPeriods);
                break;

            case DayWeekMonthQuarterYear::Month:
                startDate = dateStartMth(dateMthFwd(_endDate,-numberOfPeriods));
                break;

            case DayWeekMonthQuarterYear::Quarter:
                startDate = dateStartQtr(dateMthFwd(dateStartQtr(_endDate),#monthsPerQuarter*-numberOfPeriods));
                break;

            case DayWeekMonthQuarterYear::Year:
                startDate = DateTimeUtil::getStartOfYearDate(preferredLocale, dateMthFwd(_endDate,#monthsPerYear*-numberOfPeriods));
                break;
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static WorkPeriodTemplateCalculateBackward construct()
    {
        return new WorkPeriodTemplateCalculateBackward();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WorkPeriodTemplateCalculate</c> class.
    /// </summary>
    /// <param name="_refRecId">
    /// An integer that contains a period template record ID.
    /// </param>
    /// <param name="_todayDate">
    /// The date of today.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WorkPeriodTemplateCalculate</c> class.
    /// </returns>
    public static WorkPeriodTemplateCalculateBackward newStandard(
        WorkPeriodTemplateRecId _refRecId,
        TransDate               _todayDate)
    {
        WorkPeriodTemplateCalculate workPeriodTemplateCalculate = WorkPeriodTemplateCalculateBackward::construct();

        workPeriodTemplateCalculate.parmWorkPeriodTemplate(WorkPeriodTemplate::find(_refRecId));
        workPeriodTemplateCalculate.parmTodayDate(_todayDate);

        workPeriodTemplateCalculate.init();

        return workPeriodTemplateCalculate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>