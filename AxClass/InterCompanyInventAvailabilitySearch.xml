<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyInventAvailabilitySearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyInventAvailabilitySearch</c> class is a builder of
/// the search criteria that can be used to find the intercompany on hand availability.
/// </summary>
/// <remarks>
/// <para>
/// If you don't specify some of the mandatory parameters
/// your search criteria will be invalid (see more in the documentation to the <c>isValid_InterCompany</c> method.
/// </para>
/// <para>
/// Note that the <c>InterCompanyInventAvailabilitySearch</c> should only be used to instantiate
/// a single search criteria. Reusing the same search criteria for different searches is not supported.
/// I.e. you should never do the following:
/// - create a search criteria
/// - run the availability search
/// - change the same search criteria (e.g. the dimension criteria)
/// - run the availability search again.
/// Always create a new criteria instead.
/// </para>
/// </remarks>
public class InterCompanyInventAvailabilitySearch
{
    private  ItemId      item;
    private  InventTable interCompanyinventTable;
    private  boolean isInterCompanyInventSumSet;
    private  boolean isInterCompanyInventDimCriteriaSet;
    private  InterCompanyInventDim interCompanyInventDimCriteria;
    private  InventDimParm         interCompanyInventDimCriteriaParm;
    private  InterCompanyInventSum interCompanyInventSum;
    private  UnknownNoYes          isItemIdWHSEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDetermineInterCompanyInventDimCriteria</Name>
				<Source><![CDATA[
    private boolean canDetermineInterCompanyInventDimCriteria()
    {
        if (!isInterCompanyInventDimCriteriaSet)
        {
            return interCompanyInventSum.InventDimId != '';
        }

        return isInterCompanyInventDimCriteriaSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>InterCompanyInventSum</c> record that matches the search criteria.
    /// </summary>
    /// <returns>
    /// An <c>InterCompanyInventSum</c> record.
    /// </returns>
    /// <remarks>
    /// If the caller of the API did not provide the <c>InterCompanyInventSum</c> record then an empty record will be returned.
    /// If the <c>isInterCompanyInventSumSet</c> method returns false, then this record is considered to be empty.
    /// </remarks>
    public InterCompanyInventSum interCompanyInventSum()
    {
        return interCompanyInventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyInventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// The inventory dimensions criteria.
    /// </summary>
    /// <returns>
    /// An <c>InterCompanyInventDim</c> record.
    /// </returns>
    /// <remarks>
    /// Even if the dimension criteria was not set explicitly by the user of the API
    /// it can be derived from the <c>InterCompanyInventSum.InventDimId</c> field.
    /// Also, the dim criteria will be automatically populated if the <c>InterCompanyInventSum</c>
    /// record was joined to an <c>InterCompanyInventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if it was not possible to derive the dimension criteria
    /// based on the provided information.
    /// </exception>
    public InterCompanyInventDim interCompanyInventDimCriteria()
    {
        if (!isInterCompanyInventDimCriteriaSet)
        {
            if (interCompanyInventSum.InventDimId)
            {
                this.setInterCompanyInventDimCriteria(interCompanyInventSum.interCompanyInventDim());
            }
        }

        return interCompanyInventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyinventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// The item criteria.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> record.
    /// </returns>
    /// <remarks>
    /// Even if the <c>InventTable</c> record was not provided by the user of the API explicitly
    /// the record will be found based on the ID of the criteria item.
    /// </remarks>
    public InventTable interCompanyinventTable()
    {
        interCompanyinventTable = interCompanyinventTable ? interCompanyinventTable : InventTable::find(item);
        return interCompanyinventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemIdWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the criteria item is WHS-enabled.
    /// </summary>
    /// <returns>
    /// true if the criteria item is WHS-enabled; otherwise, false.
    /// </returns>
    public boolean isItemIdWHSEnabled()
    {
        if (isItemIdWHSEnabled == UnknownNoYes::Unknown)
        {
            isItemIdWHSEnabled = WHSInventEnabled::exist(item) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isItemIdWHSEnabled == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid_InterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the search criteria is valid or not.
    /// </summary>
    /// <returns>
    /// true, if the search criteria is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// <para>
    /// You always have to provide the criteria item. There are multiple ways of doing that
    /// (you can provide the ID of the item, you can provide the <c>InventTable</c> record
    /// and it can also be derived from <c>InterCompanyInventSum.ItemId</c>).
    /// </para>
    /// </remarks>
    public boolean isValid_InterCompany()
    {
        return item != '' && this.canDetermineInterCompanyInventDimCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInterCompanySumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates search criteria based on the specified <c>InterCompanyInventSum</c> and
    /// the dimensions that were used as a filter to find this record.
    /// </summary>
    /// <param name="_interCompanyInventSum">
    /// The <c>InterCompanyInventSum</c> record that contains on-hand information
    /// for the specified dimension criteria.
    /// </param>
    /// <param name="_interCompanyInventDim">
    /// The inventory dimensions of the <c>InterCompanyInventDim</c> record.
    /// </param>
    /// <returns>
    /// The <c>InterCompanyInventAvailabilitySearch</c> object.
    /// </returns>
    /// <remarks>
    /// Non-empty dimension values from the dimension criteria will be used to filter the availability.
    /// Empty dimensions will be ignored.
    /// Note that it is the responsibility of the user of the API to provide the correct dimensions that were used
    /// to find the specified <c>InterCompanyInventSum</c>.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if <c>InterCompanyInventSum.ItemId</c> is blank.
    /// </exception>
    public static InterCompanyInventAvailabilitySearch newFromInterCompanySumDim(InterCompanyInventSum _interCompanyInventSum, InterCompanyInventDim _interCompanyInventDim)
    {
        InterCompanyInventAvailabilitySearch search = new InterCompanyInventAvailabilitySearch();

        search.setInterCompanyInventSum(_interCompanyInventSum);
        search.setInterCompanyInventDimCriteria(_interCompanyInventDim);

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyInventDimCriteriaParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>InventDimParm</c> record that defines which of the dimension criteria values
    /// should be used when searching for the availability.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> record.
    /// </returns>
    public InventDimParm interCompanyInventDimCriteriaParm()
    {
        return interCompanyInventDimCriteriaParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyInventSumSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the <c>InterCompanyInventSum</c> record has been set for this search criteria.
    /// </summary>
    /// <returns>
    /// True if the <c>InterCompanyInventSum</c> record has been set; otherwise, false.
    /// </returns>
    public boolean isInterCompanyInventSumSet()
    {
        return isInterCompanyInventSumSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    /// <summary>
    /// The ID of the criteria item.
    /// </summary>
    /// <returns>
    /// The ID of the criteria item.
    /// </returns>
    public ItemId item()
    {
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventDimCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory dimensions criteria.
    /// </summary>
    /// <param name="_interCompanyInventDim">
    /// The inventory dimensions criteria.
    /// </param>
    /// <param name="_inventDimCriteriaParm">
    /// The flags that define which of the specified inventory dimensions should be used as filters; optional.
    /// </param>
    /// <remarks>
    /// By default all the non-empty dimensions are used as filters.
    /// </remarks>
    public void setInterCompanyInventDimCriteria(InterCompanyInventDim _interCompanyInventDim)
    {
        interCompanyInventDimCriteria     = _interCompanyInventDim;
        interCompanyInventDimCriteriaParm = _interCompanyInventDim.toDimParm();

        isInterCompanyInventDimCriteriaSet = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InterCompanyInventSum</c> record that matches the search criteria.
    /// </summary>
    /// <param name="_interCompanyInventSum">
    /// The <c>InterCompanyInventSum</c> record.
    /// </param>
    /// <remarks>
    /// <param>
    /// This is an optional parameter that you can set to boost performance.
    /// If it is not specified the search provider will be able to find it based on the rest of the criteria.
    /// </param>
    /// <param>
    /// It is the responsiblity of the user of the API to make sure that the provided <c>InterCompanyInventSum</c> record
    /// matches the rest of the criteria.
    /// </param>
    /// <param>
    /// If you set the <c>InterCompanyInventSum</c> record then you don't need to explicitly specify the ID of the criteria item.
    /// </param>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the search criteria is holding a reference to an item
    /// that is different from <c>InterCompanyInventSum.ItemId</c>
    /// </exception>
    public void setInterCompanyInventSum(InterCompanyInventSum _interCompanyInventSum)
    {
        interCompanyInventSum = _interCompanyInventSum;

        isInterCompanyInventSumSet = true;

        if (_interCompanyInventSum.ItemId)
        {
            this.setItem(_interCompanyInventSum.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID of the criteria item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the criteria item.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the search criteria is holding a reference to another item already.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws an error if the ID is not specified.
    /// </exception>
    public void setItem(ItemId _itemId)
    {
        if (!_itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (item && item != _itemId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        item = _itemId;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>