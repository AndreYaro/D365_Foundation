<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPRPeriodicCreateQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class constructs the query containing payment request sources to process.
/// </summary>
public abstract class CFMPRPeriodicCreateQueryBuilder
{
    FromDate dateFrom;
    ToDate dateTo;
    container dataAreas;

    Query paymentRequestSourceQuery;

    #define.negative('<0')
    #define.positive('>0')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMPRPeriodicCreateQueryBuilder</c> based on payment request source type and filtering ranges.
    /// </summary>
    /// <param name="_sourceType">
    /// Type of payment request sources to process.
    /// </param>
    /// <param name="_dateFrom">
    /// Start of the date range for the payment request sources to process.
    /// </param>
    /// <param name="_dateTo">
    /// End of the date range for the payment request sources to process.
    /// </param>
    /// <param name="_dataAreas">
    /// Company accounts range for payment request sources location.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionPercentCalc</c>.
    /// </returns>
    public static CFMPRPeriodicCreateQueryBuilder construct(
        CFMPaymentRequestSourceType _sourceType,
        FromDate _dateFrom,
        ToDate _dateTo,
        container _dataAreas)
    {
        CFMPaymentRequestSourceTypeAttribute extensionAttribute = new CFMPaymentRequestSourceTypeAttribute(_sourceType);
        CFMPRPeriodicCreateQueryBuilder queryBuilder = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPRPeriodicCreateQueryBuilder), extensionAttribute);

        if (!queryBuilder)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        queryBuilder.parmFromDate(_dateFrom);
        queryBuilder.parmToDate(_dateTo);
        queryBuilder.parmDataAreas(_dataAreas);

        return queryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryDataAreaFiltering</Name>
				<Source><![CDATA[
    protected void addQueryDataAreaFiltering(Query _query)
    {
        _query.allowCrossCompany(true);

        for (int i = conLen(dataAreas); i > 0 ; i--)
        {
            SelectableDataArea dataArea = conPeek(dataAreas, i);
            _query.addCompanyRange(dataArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentRequestSourceQuery</Name>
				<Source><![CDATA[
    public abstract Query getPaymentRequestSourceQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryDataSourceTableId</Name>
				<Source><![CDATA[
    public abstract TableId getQueryDataSourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreas</Name>
				<Source><![CDATA[
    public container parmDataAreas(container _dataAreas = dataAreas)
    {
        dataAreas = _dataAreas;

        return dataAreas;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;

        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(FromDate _dateTo = dateTo)
    {
        dateTo = _dateTo;

        return dateTo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>