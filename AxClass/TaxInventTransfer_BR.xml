<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInventTransfer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Tax implementation for Brazilian inventory transfer.
/// </summary>
class TaxInventTransfer_BR extends Tax
{
    InventTransferCalcTax_BR transferCalcTax;

    Common                      sourceRecord;
    inventTransferLine          inventTransferLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyExemptFiscalValue_BR</Name>
				<Source><![CDATA[
    protected void applyExemptFiscalValue_BR(TaxTable _taxTable, TaxBase _baseAmount)
    {
        Currency        currencyMST;

        currencyMST = Currency::find(Ledger::accountingCurrency(this.companyInfo().RecId));

        if (transferCalcTax.updateType() == InventTransferUpdateType::Shipment)
        {
            if (taxWorkTrans.ExemptTax == NoYes::Yes)
            {
                taxWorkTrans.TaxDirection = TaxDirection::TaxExemptSales;
            }
        }
        else
        {
            if (taxWorkTrans.ExemptTax == NoYes::Yes)
            {
                taxWorkTrans.TaxDirection = TaxDirection::TaxExemptPurchase;
            }
        }

        switch (_taxTable.TaxType_BR)
        {
            case TaxType_BR::ICMS :
            case TaxType_BR::IPI  :

                switch (taxWorkTrans.FiscalValue_BR)
                {
                    case TaxFiscalValue_BR::WithoutCreditDebitExempt :
                        if (taxWorkTrans.TaxReductionPct_BR !=0
                            && _taxTable.TaxSubstitution_BR == TaxSubstitutionEnum_BR::None)
                        {
                            taxWorkTrans.SourceExemptBaseAmount_BR = taxWorkTrans.TaxBaseAmountOrig;
                        }
                        else
                        {
                            taxWorkTrans.SourceExemptBaseAmount_BR = _baseAmount;
                        }
                        break;
                }
                break;

            default :
                switch (taxWorkTrans.FiscalValue_BR)
                {
                    case TaxFiscalValue_BR::WithoutCreditDebitExempt :
                        taxWorkTrans.SourceExemptBaseAmount_BR = _baseAmount;
                        break;
                }
        }

        taxWorkTrans.SourceExemptBaseAmountMST_BR   = CurrencyExchangeHelper::amountCur2MST(taxWorkTrans.SourceExemptBaseAmount_BR, taxWorkTrans.SourceCurrencyCode, exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax transactions.
    /// </summary>
    /// <returns>
    /// Total tax amount.
    /// </returns>
    TaxAmount calc()
    {
        TaxAmount       taxAmount;
        boolean         moreLines;
        AmountCur       baseAmount;

        AmountCur       baseAmountOriginal;

        if (!headingRecId)
            return 0;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        transferCalcTax.initCursor();
        moreLines = true;
        while (moreLines)
        {
            if (transferCalcTax.nextLine())
            {
                inventTransferLine = transferCalcTax.queryGet() as inventTransferLine;

                baseAmount = transferCalcTax.amounts();

                this.configureTaxForInventTransferLine();

                baseAmountOriginal      = baseAmount;

                this.insertLineInInternal(baseAmount,
                                          0,
                                          '',
                                          inventTransferLine.ItemId,
                                          0,
                                          transferCalcTax.defaultDimension(),
                                          transferCalcTax.operationAccount(),
                                          LedgerPostingType::InventReceipt);

                this.updateTaxationOriginOnTaxWorkTrans_BR(transferCalcTax.taxationOrigin());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();

                    this.saveInProcessTransaction();
                }
            }
            else
            {
                moreLines   = false;
            }
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(0);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        this.roundTaxOnTaxGroup();

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClearTaxAmountFields_BR</Name>
				<Source><![CDATA[
    protected boolean canClearTaxAmountFields_BR()
    {
        return transferCalcTax.updateType() == InventTransferUpdateType::Shipment
            || (transferCalcTax.updateType() == InventTransferUpdateType::Receive
                && inventTransferLine.inventTransferTable().inventTransferTableFiscalInfo_BR().InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn
                && taxWorkTrans.TaxType_BR != TaxType_BR::ICMSST
                && taxWorkTrans.TaxType_BR != TaxType_BR::IPI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForInventTransferLine</Name>
				<Source><![CDATA[
    private void configureTaxForInventTransferLine()
    {
        TransDate               taxCalculationDate;

        taxCalculationDate = transferCalcTax.invoiceDate();
        taxDate = taxCalculationDate;

        this.insertIntersection(transferCalcTax.transTaxGroup(),
                                transferCalcTax.transTaxItemGroup(),
                                transferCalcTax.transTransId(),
                                inventTransferLine.ItemId,
                                taxCalculationDate);

        if (! this.checkTaxCodesByLine())
            throw error("@SYS22772");
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the direction of the tax transactions.
    /// </summary>
    /// <param name="_taxGroupData">
    /// <c>TaxGroupData</c> related to the transaction.
    /// </param>
    /// <returns>
    /// <c>TaxDirection</c> for the tax transactions.
    /// </returns>
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        TaxDirection direction;

        if (transferCalcTax.updateType() == InventTransferUpdateType::Shipment)
        {
            if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                direction = TaxDirection::OutgoingTax;
            }
            else
            {
                direction = TaxDirection::TaxExemptSales;
            }
        }
        else
        {
            if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                direction = TaxDirection::IncomingTax;
            }
            else
            {
                direction = TaxDirection::TaxExemptPurchase;
            }
        }

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes context to with <c>InventTransferCalcTax_BR</c>.
    /// </summary>
    /// <param name="_transferCalcTax">
    /// A <c>InventTransferCalcTax_BR</c> to initialize context.
    /// </param>
    void init(InventTransferCalcTax_BR _transferCalcTax)
    {
        transferCalcTax     = _transferCalcTax;
        taxModuleType       = TaxModuleType::StockTransfer_IN;
        headingTableId      = transferCalcTax.tableId();
        headingRecId        = transferCalcTax.recID();
        sourceCurrencyCode  = transferCalcTax.currencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method returns the actual tax amount.
    /// </summary>
    /// <param name = "_includeUseTax">
    ///     A flag that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    ///     The actual tax amount in transactional currency.
    /// </returns>
    public TaxAmountCur totalTaxAmount(boolean _includeUseTax = false)
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        select sum(SourceRegulateAmountCur), sum(SourceOtherBaseTaxAmount_BR)
            from taxWorkTrans
            where (_includeUseTax || taxWorkTrans.TaxDirection  != TaxDirection::UseTax)
                    && taxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed
                    && (!isBrazilEnabled || (taxWorkTrans.IncludedInPrice_BR == false));

        if (transferCalcTax.updateType() == InventTransferUpdateType::Shipment)
        {
            return taxWorkTrans.SourceRegulateAmountCur + taxWorkTrans.SourceOtherBaseTaxAmount_BR;
        }
        else
        {
            return taxWorkTrans.SourceRegulateAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount operationAccount()
    {
        LedgerDimensionDefaultAccount   ledgerAccount;
        InventMovement                  inventMovement;

        inventMovement = InventMovement::construct(inventTransferLine);

        if (inventMovement.mustBeBookedFinancially())
        {
            if (inventMovement.mustBeBookedBalanceSheet())
            {
                ledgerAccount = inventMovement.accountBalanceSheet();
            }
            else
            {
                if (inventMovement.mustBeBookedOperations())
                {
                    ledgerAccount = inventMovement.accountOperations();
                }
            }
        }

        return LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerAccount, inventTransferLine.inventTransferLine_IN().DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensions</Name>
				<Source><![CDATA[
    protected void setLedgerDimensions(TmpTaxWorkTrans _taxWorkTrans, TaxTable _taxTable, DimensionDefault _dimensionDefault, LedgerDimensionAccount _operationLedgerDimension)
    {
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        LedgerDimensionDefaultAccount   defaultAccount;

        super(_taxWorkTrans, _taxTable, _dimensionDefault, _operationLedgerDimension);

        if (_taxWorkTrans.ExemptTax == NoYes::No)
        {
            changecompany(this.getCompany())
            {
                taxLedgerAccountGroup   = TaxLedgerAccountGroup::find(_taxTable.TaxAccountGroup);

                if (transferCalcTax.updateType() == InventTransferUpdateType::Receive
                    && _taxWorkTrans.TaxDirection == TaxDirection::IncomingTax && !TaxTable::find(_taxWorkTrans.TaxCode).RetainedTax_BR)
                {
                    defaultAccount = taxLedgerAccountGroup.TaxSalesOffsetLedgerDimension_BR;

                    if (defaultAccount != 0)
                    {
                        _taxWorkTrans.TaxSalesOffsetLedgerDimension_BR = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, _dimensionDefault);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return inventTransferLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return inventTransferLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a <c>TaxInventTransfer_BR</c> initialized with an <c>InventTransferCalcTax_BR</c>.
    /// </summary>
    /// <param name="_transferCalcTax">
    ///  A <c>InventTransferCalcTax_BR</c> to initialize context in an <c>TaxInventTransfer_BR</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>TaxInventTransfer_BR</c> class.
    /// </returns>
    [Replaceable]
    public static TaxInventTransfer_BR construct(InventTransferCalcTax_BR _transferCalcTax)
    {
        TaxInventTransfer_BR taxTransfer = new TaxInventTransfer_BR();
        ;
        taxTransfer.init(_transferCalcTax);

        return taxTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total amount of non recoverable taxes
    /// </summary>
    /// <param name="_tableId">
    ///     The reference tableId
    /// </param>
    /// <param name="_recId">
    ///     The reference RecId
    /// </param>
    /// <returns>
    ///     Total amount of non recoverable taxes
    /// </returns>
    /// <remarks>
    ///     This method must include includes all taxes because the used context handles cost price instead of prices
    ///     The base class handles with prices, that include taxes configured as 'included tax' (i.e. ICMS, PIS, COFINS)
    /// </remarks>

    public TaxAmount taxInCostPrice(TableId    _tableId,
                             RecId      _recId)
    {
        TaxAmount   taxAmount;

        select
            sum (TaxInCostPrice),
            sum (SourceRegulateAmountCur),
            sum (TaxInCostPriceRegulated)
        from taxWorkTrans
        where taxWorkTrans.SourceTableId   == _tableId      &&
              taxWorkTrans.SourceRecId     == _recId        &&
              (taxWorkTrans.TaxDirection    == TaxDirection::IncomingTax ||
               taxWorkTrans.TaxDirection    == TaxDirection::UseTax);

        if (this.taxParameters().PurchTaxOnOperations)
        {
            taxAmount = taxWorkTrans.SourceRegulateAmountCur;
        }
        else
        {
            if (taxWorkTrans.TaxAutogenerated)
            {
                taxAmount = taxWorkTrans.TaxInCostPrice;
            }
            else
            {
                taxAmount = taxWorkTrans.TaxInCostPriceRegulated;
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>