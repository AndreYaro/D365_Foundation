<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_FI extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        return this.checkBankAccountNum(_bankAccountMap.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00003, funcName());
        const str digits = '1234567890';

        int sum1;

        //Normalize account number if necessary
        BankAccount bankAccount = Bank_FI::convertBankAccountNum(_bankAccount);
        int i = strLen(bankAccount);
        if (!i)
        {
            return true;
        }

        if (i != 14)
        {
            return checkFailed(strfmt("@SYS54162", 14));
        }

        if (strNFind(bankAccount, digits, 1, strLen(bankAccount)))
        {
            return checkFailed("@SYS97947");
        }

        str digit = subStr(bankAccount, 14, 1);

        i = 1;
        while (i < 14)
        {
            sum1 += str2Int(subStr(int2Str(2 * str2Int(subStr(bankAccount, i, 1))), 1, 1)) + str2Int(subStr(int2Str(2 * str2Int(subStr(bankAccount, i, 1))), 2, 1));
            i += 1;

            if (i < 13)
            {
               sum1 += str2Int(subStr(bankAccount, i, 1));
            }

            i += 1;
        }

        int length = strLen(int2Str(sum1));
        str checkdigit = int2Str(10 - str2Int(subStr(int2Str(sum1), length, 1)));
        if (checkdigit == '10')
        {
            checkdigit = '0';
        }

        if (checkdigit != digit)
        {
            return checkFailed("@SYS58328");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBankAccountNum</Name>
				<Source><![CDATA[
    public static BankAccount convertBankAccountNum(BankAccount _accountNumber)
    {
        str convertedAccountNumber;

        int accountLength = strLen(_accountNumber);

        if (accountLength < 9)
        {
            // Account number not of sufficient length
            convertedAccountNumber = _accountNumber;
        }
        else
        {
            // Locate the dash, if present
            int dashPosition = strFind(_accountNumber, '-', 1, accountLength);

            if (dashPosition == 7)
            {
                // Perform conversion
                convertedAccountNumber = subStr(_accountNumber, 1, dashPosition - 1) + subStr(_accountNumber, dashPosition + 1, accountLength - dashPosition);
                if (subStr(convertedAccountNumber, 1, 1) == '4' || subStr(convertedAccountNumber, 1, 1) == '5')
                {
                    convertedAccountNumber = strIns(convertedAccountNumber, strRep('0', 14 - strLen(convertedAccountNumber)), 8);
                }
                else
                {
                    convertedAccountNumber = strIns(convertedAccountNumber, strRep('0', 14 - strLen(convertedAccountNumber)), 7);
                }
            }
            else
            {
                // No dash found or dash in wrong position, return back account number
                convertedAccountNumber = _accountNumber;
            }
        }

        return convertedAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankBarCodeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the bank bar code option can be set for the bank record, which is determined by
    ///    the <paramref name="_accountID" /> parameter.
    /// </summary>
    /// <param name="_accountID">
    ///    The bank account ID of the record to be validated.
    /// </param>
    /// <returns>
    ///    true if no other Finnish bank account has the bank bar code set; otherwise, false.
    /// </returns>
    public static boolean isBankBarCodeAllowed(BankAccount _accountID)
    {
        #isoCountryRegionCodes

        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;
        BankAccountTable bankAccountTable;
        boolean ret = true;

         select firstonly RecId from bankAccountTable
            where bankAccountTable.IncludeBankBarCode_FI == NoYes::Yes
               && bankAccountTable.AccountID != _accountID
             exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == bankAccountTable.Location
            exists join logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == logisticsPostalAddress.CountryRegionId
                   && logisticsAddressCountryRegion.isOcode == #isoFI;

        if (bankAccountTable.RecId)
        {
            ret = checkFailed("@SYS99114");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>