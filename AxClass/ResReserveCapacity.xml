<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResReserveCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reserve processor class that reserves specific capacity of the resource.
/// </summary>
class ResReserveCapacity extends ResReserveProcessor implements ResIReserveProcessor
{
    #TimeConstants

    // Non working hour capacity will set to 8 hours by default.
    const real nonWorkingHourCapacity = #SecondsPerHour;

    // Non working day capacity will set to 8 hours by default.
    const int nonWorkingDayNumberOfAvailableHours = 8;
    const int nonWorkingDayCapacity = (nonWorkingDayNumberOfAvailableHours - 1) * #SecondsPerHour;

    // Set the non working day starting hour at 8:00am
    const int nonWorkDayStartHour = 8 * #SecondsPerHour;

    // Set the non working day ending hour at 8:00am + non-working day capacity;
    const int nonWorkDayEndHour = nonWorkDayStartHour + nonWorkingDayCapacity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>book</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books planned resource full capacity based on calendar capacity.
    /// </summary>
    /// <returns>TRUE when the book operation succeeds.</returns>
    protected boolean book()
    {
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();
        CalendarRecId calendar = schedule.parmCalendar();

        return this.bookExecution(activityResource, activity, commitment, calendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books resource full capacity based on resource calendar capacity.
    /// </summary>
    /// <returns>TRUE when the book operation succeeds.</returns>
    protected boolean bookResource()
    {
        return this.book();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns planned resource full capacity based on calendar.
    /// </summary>
    /// <returns>TRUE when the assign operation succeeds.</returns>
    protected boolean assign()
    {
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();
        CalendarRecId calendar = schedule.parmCalendar();

        return this.assignExecution(activityResource, activity, commitment, calendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns resource full capacity based on resource calendar.
    /// </summary>
    /// <returns>TRUE when the assign operation succeeds.</returns>
    protected boolean assignResource()
    {
        return this.assign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookExecution</Name>
				<Source><![CDATA[
    private boolean bookExecution(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, CalendarRecId _calendar)
    {
        boolean result;

        if (_activityResource && _activity && _calendar && _commitment)
        {
            ResReservationInstance reservationInstance = this.getReservationDetails(schedule.parmCalendar(), ResReservationType::Booking);
            boolean allowBookingWithNoCapacity;
            real totalCapacityInTheSpecifiedPeriod;
            int totalNumberOfOpenHours;
            [allowBookingWithNoCapacity, totalCapacityInTheSpecifiedPeriod, totalNumberOfOpenHours] = this.getTotalCapacityInTheSpecifiedPeriodAndTotalNumberOfOpenHours(reservationInstance);
            
            utcdatetime startHour;
            utcdatetime endHour;
            [startHour, endHour] = this.getStartAndEndHour(allowBookingWithNoCapacity, totalCapacityInTheSpecifiedPeriod, schedule.start(), schedule.end());

            if (totalCapacityInTheSpecifiedPeriod  > 0)
            {
                real hourCapacity =
                    decRound(((totalCapacityInTheSpecifiedPeriod / totalNumberOfOpenHours)
                        * this.getCapacityPercentage(totalCapacityInTheSpecifiedPeriod, _activityResource, _activity)), 4);

                ResCalendarCapacity capacityView;
                ResBooking bookingTable;

                this.skipDatabaseLogAndEvent(bookingTable);

                insert_recordset bookingTable (ActivityResource, Activity, CommitType,
                    Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
                select _activityResource, _activity, _commitment,
                    Start, hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
                from capacityView
                    where capacityView.Calendar == _calendar
                    && capacityView.Hour >= startHour
                    && capacityView.Hour <= endHour
                    && (allowBookingWithNoCapacity || capacityView.End > 0);
                
                result = bookingTable.rowCount() ? true : false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignExecution</Name>
				<Source><![CDATA[
    private boolean assignExecution(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, CalendarRecId _calendar)
    {
        boolean result;

        if (_activityResource && _activity && _calendar && _commitment)
        {
            ResReservationInstance reservationInstance = this.getReservationDetails(schedule.parmCalendar(), ResReservationType::Assignment);
            boolean allowAssignWithNoCapacity;
            real totalCapacityInTheSpecifiedPeriod;
            int totalNumberOfOpenHours;
            [allowAssignWithNoCapacity, totalCapacityInTheSpecifiedPeriod, totalNumberOfOpenHours] = this.getTotalCapacityInTheSpecifiedPeriodAndTotalNumberOfOpenHours(reservationInstance);

            utcdatetime startHour;
            utcdatetime endHour;
            [startHour, endHour] = this.getStartAndEndHour(allowAssignWithNoCapacity, totalCapacityInTheSpecifiedPeriod, schedule.start(), schedule.end(), ResReservationType::Assignment);

            real totalCapacityInSeconds = totalCapacityInTheSpecifiedPeriod
                * this.getCapacityPercentage(totalCapacityInTheSpecifiedPeriod, _activityResource, _activity);
            
            if (totalCapacityInSeconds  > 0)
            {
                real unfilledActivityCapacity = ActivityFacade::getRemainingCapacityInSeconds(_activity, _commitment);
    
                PSARSEntityType entityType = schedule.activityType();
                if (unfilledActivityCapacity > 0
                    || (_commitment == ResCommitType::SoftBook && entityType != PSARsEntityType::Quotation))
                {
                    if ((totalCapacityInSeconds <= unfilledActivityCapacity)
                        || (_commitment == ResCommitType::SoftBook && entityType != PSARsEntityType::Quotation))
                    {
                        real hourCapacity = decRound(totalCapacityInSeconds / totalNumberOfOpenHours , 4);

                        result = this.insertAssignment(_activityResource, _activity, _commitment, _calendar,
                            startHour, endHour, hourCapacity, allowAssignWithNoCapacity);
                    }
                    else if (reserveProcessorType == ResBookingType::DistributeCapacityEvenly)
                    {
                        real hourCapacity = decRound(unfilledActivityCapacity / totalNumberOfOpenHours , 4);

                        result = this.insertAssignment(_activityResource, _activity, _commitment, _calendar,
                            startHour, endHour, hourCapacity, false);
                    }
                    else
                    {
                        ResReservationInstance reservationInstanceByCapacity;
                        reservationInstanceByCapacity = this.getReservationDetailsByCapacity(_calendar, unfilledActivityCapacity,
                            totalCapacityInTheSpecifiedPeriod, _activityResource, _activity, startHour, endHour, allowAssignWithNoCapacity);

                        int totalOpenHoursByCapacity = reservationInstanceByCapacity.parmNumberOfOpenHours();
                        utcdatetime lastConstantReservationHour = reservationInstanceByCapacity.parmConstantReservationHour();
                        utcdatetime lastVariableReservationHour = reservationInstanceByCapacity.parmLastVariableReservationHour();
                        real lastHourVariable = reservationInstanceByCapacity.parmVariableHourCapacity();

                        real hourCapacity = decRound((unfilledActivityCapacity - lastHourVariable) / totalOpenHoursByCapacity, 4);

                        result = this.insertAssignment(_activityResource, _activity, _commitment, _calendar,
                            startHour, lastConstantReservationHour, hourCapacity, allowAssignWithNoCapacity);

                        if (lastConstantReservationHour != lastVariableReservationHour)
                        {
                            result = this.insertAssignment(_activityResource, _activity, _commitment, _calendar,
                                lastVariableReservationHour, lastVariableReservationHour, lastHourVariable, allowAssignWithNoCapacity) && result;
                        }
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssignment</Name>
				<Source><![CDATA[
    private boolean insertAssignment(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, CalendarRecId _calendar, utcdatetime _start, utcdatetime _end,
        real _hourCapacity, boolean _allowAssignWithNoCapacity)
    {
        ResCalendarCapacity capacityView;
        ResAssignment assignmentTable;

        this.skipDatabaseLogAndEvent(assignmentTable);

        insert_recordset assignmentTable (ActivityResource, Activity, CommitType,
            Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
        select _activityResource, _activity, _commitment,
            Start, _hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
        from capacityView
            where capacityView.Calendar == _calendar
            && capacityView.Hour >= _start
            && capacityView.Hour <= _end
            && (_allowAssignWithNoCapacity || capacityView.End > 0);
        
        return assignmentTable.rowCount() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationDetailsByCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last hour of reservation by the specified capacity.
    /// </summary>
    /// <param name = "_calendar">Calendar record identifier.</param>
    /// <param name = "_specifyCapacity">Specified capacity to be reserved.</param>
    /// <param name = "_totalCapacityInTheSpecifiedPeriod">The total capacity in the specified period.</param>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_activity">Activity record ID.</param>
    /// <param name = "_start">Start date time.</param>
    /// <param name = "_end">End date time.</param>
    /// <param name = "_allowAssignWithNoCapacity">Allow assign with no capacity.</param>
    /// <returns>A container which contains </returns>
    private ResReservationInstance getReservationDetailsByCapacity(CalendarRecId _calendar,
        real _specifyCapacity, real _totalCapacityInTheSpecifiedPeriod, ActivityResourceRecId _activityResource, ActivityRecId _activity,
        utcdatetime _start, utcdatetime _end, boolean _allowAssignWithNoCapacity)
    {
        ResCalendarCapacityView capacityView;

        utcdatetime lastConstantReservationHour = _end;
        utcdatetime lastVariableReservationHour = _end;
        real totalCapacity;
        real lastHourCapacity;
        int numberOfOpenHours;

        real capacityPercentage = this.getCapacityPercentage(_totalCapacityInTheSpecifiedPeriod, _activityResource, _activity);

        while select capacity, Hour from  capacityView
            where capacityView.Calendar == _calendar
                && capacityView.Hour >= _start
                && capacityView.Hour <= _end
                && (_allowAssignWithNoCapacity || capacityView.Capacity > 0)
        {
            numberOfOpenHours++;
            totalCapacity += capacityView.Capacity * capacityPercentage;
            if (totalCapacity > _specifyCapacity)
            {
                numberOfOpenHours--;
                lastVariableReservationHour = capacityView.Hour;
                lastHourCapacity = totalCapacity - _specifyCapacity;
                break;
            }
            else if (totalCapacity == _specifyCapacity)
            {
                lastConstantReservationHour = capacityView.Hour;
                lastVariableReservationHour = lastConstantReservationHour;
                break;
            }
            lastConstantReservationHour = capacityView.Hour;
        }

        ResReservationInstance reservationInstance = ResReservationInstance::construct();
        reservationInstance.parmTotalCapacity(_specifyCapacity);
        reservationInstance.parmNumberOfOpenHours(numberOfOpenHours);
        reservationInstance.parmConstantReservationHour(lastConstantReservationHour);
        reservationInstance.parmLastVariableReservationHour(lastVariableReservationHour);
        reservationInstance.parmVariableHourCapacity(lastHourCapacity);

        return reservationInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calendar capacity and number of open hours by the specify calendar and scheduling start and end dates.
    /// </summary>
    /// <param name = "_calendar">Calendar record identifier.</param>
    /// <param name = "_reservationType">Reservation type.</param>
    /// <returns>
    /// A container which contains the total capacity in seconds and total count of open hours.
    ///</returns>
    private ResReservationInstance getReservationDetails(CalendarRecId _calendar, ResReservationType _reservationType)
    {
        ResCalendarCapacityView capacityView;

        utcdatetime startHour = schedule.Start();
        utcdatetime endHour = schedule.End();

        // Limit the calculation of total capacity and open hours by the WBS task start and end date if this is a reservation of type assignment.
        if (_reservationType == ResReservationType::Assignment)
        {
            startHour = max(startHour, taskStartDateTime);
            endHour = min(endHour, taskEndDateTime);
        }

        select sum(Capacity), count(RecId) from capacityView
            where capacityView.Calendar == _calendar
                && capacityView.Hour >= startHour
                && capacityView.Hour < endHour
                && capacityView.Capacity > 0;

        ResReservationInstance reservationInstance = ResReservationInstance::construct();
        reservationInstance.parmTotalCapacity(capacityView.Capacity);
        reservationInstance.parmNumberOfOpenHours(int642int(capacityView.RecId));

        return reservationInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCapacityCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// skip the capacity percentage calculation.
    /// </summary>
    /// <returns>false</returns>
    protected boolean skipCapacityCalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get capacity percentage for reservation.
    /// </summary>
    /// <param name = "_totalCapacityInTheSpecifiedPeriod">The total capacity in the specified period.</param>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_activity">Activity record Id.</param>
    /// <returns>Capacity percentage.</returns>
    protected real getCapacityPercentage(real _totalCapacityInTheSpecifiedPeriod, ActivityResourceRecId _activityResource,
        ActivityRecId _activity)
    {
        real percentage = 1;

        if(!this.skipCapacityCalculation())
        {
            if ((reserveProcessorType == ResBookingType::DistributeCapacityEvenly) && capacity)
            {
                percentage = this.getCapacityPercentageForDistributeCapacityEvenly(
                _totalCapacityInTheSpecifiedPeriod, _activityResource, _activity);
            }
            else if (reserveProcessorType == ResBookingType::CapacityPercentage)
            {
                percentage = this.getCapacityPercentageForPercentageCapacityScheduling();
            }
            else if (reserveProcessorType == ResBookingType::Manual)
            {
                percentage = this.getCapacityPercentageForManualScheduling(_totalCapacityInTheSpecifiedPeriod);
            }
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityPercentageForPercentageCapacityScheduling</Name>
				<Source><![CDATA[
    private real getCapacityPercentageForPercentageCapacityScheduling()
    {
        real percentage = 1;

        real capacityPercentage = schedule.Capacity();

        if (capacityPercentage != 0)
        {
            percentage = capacityPercentage / 100;
        }
        
        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityPercentageForDistributeCapacityEvenly</Name>
				<Source><![CDATA[
    private real getCapacityPercentageForDistributeCapacityEvenly(real _totalCapacityInTheSpecifiedPeriod,
        ActivityResourceRecId _activityResource, ActivityRecId _activity)
    {
        real percentage = 1.0;

        if (_totalCapacityInTheSpecifiedPeriod)
        {
            if (timeFrameType == AVTimeframeType::Hour)
            {
                percentage = this.getCapacityPercentageForHourDistributeCapacityEvenly(
                    _totalCapacityInTheSpecifiedPeriod, _activityResource);
            }
            else if (!ActivityResourceFacade::isGenericResource(_activityResource))
            {
                ResourceRecId resource = ActivityResourceFacade::getResource(_activityResource);
                ListEnumerator schedulesEnum = schedules.getEnumerator();

                Days totalSchedulesDurationDays;
                Days thisScheduleDurationDays;
                int scheduleCount;

                // Get the resource total working days for all the schedules.
                while (schedulesEnum.moveNext())
                {
                    ResIReservationSchedule reservationSchedule = schedulesEnum.current();
                    if ((reservationSchedule.activityResource() == _activityResource || reservationSchedule.resource() == resource)
                        && reservationSchedule.commitment() == schedule.commitment() && reservationSchedule.reservationType() == schedule.reservationType())
                    {
                        ResResourceCapacityWorkDaysView resourceCapacityWorkDaysView;
                        select count(RecId) from resourceCapacityWorkDaysView
                            where resourceCapacityWorkDaysView.Resource == resource
                                && resourceCapacityWorkDaysView.Day >= reservationSchedule.start()
                                && resourceCapacityWorkDaysView.Day <= reservationSchedule.end();

                        totalSchedulesDurationDays += int642int(resourceCapacityWorkDaysView.RecId);

                        if (reservationSchedule.start() == schedule.start() && reservationSchedule.end() == schedule.end())
                        {
                            // Get resource total working dya for this schedule.
                            thisScheduleDurationDays = int642int(resourceCapacityWorkDaysView.RecId);
                        }
                    }
                    scheduleCount++;
                }

                real actualCapacity = capacity;
                if (scheduleCount > 1 && totalSchedulesDurationDays)
                {
                    actualCapacity = capacity * (thisScheduleDurationDays / totalSchedulesDurationDays);
                }

                percentage = actualCapacity / _totalCapacityInTheSpecifiedPeriod;
            }
            else
            {
                // This is a planned resource
                percentage = capacity / _totalCapacityInTheSpecifiedPeriod;
            }
        }
        
        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityPercentageForHourDistributeCapacityEvenly</Name>
				<Source><![CDATA[
    private real getCapacityPercentageForHourDistributeCapacityEvenly(real _totalCapacityInTheSpecifiedPeriod,
        ActivityResourceRecId _activityResource)
    {
        real percentage = 1.0;

        ResourceRecId resource = ActivityResourceFacade::getResource(_activityResource);
        ListEnumerator schedulesEnum = schedules.getEnumerator();

        Hours totalSchedulesWorkingHours;
        Hours thisScheduleWorkingHours;
                
        // Get the resource total working hours for all the schedules.
        while (schedulesEnum.moveNext())
        {
            ResIReservationSchedule reservationSchedule = schedulesEnum.current();

            if (resource)
            {
                int workingHoursPerSchedule;
                if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                {
                    ResProjectResource projectResource;
                    ResCalendarDateTimeRange calendarDateTimeRange;
                    ResCalendarCapacity calendarCapacity;

                    select count(RecId) from calendarCapacity
                        where calendarCapacity.Hour >= reservationSchedule.start() &&
                            calendarCapacity.Hour <= reservationSchedule.end()
                    exists join calendarDateTimeRange
                        where calendarDateTimeRange.Calendar == calendarCapacity.Calendar &&
                            calendarDateTimeRange.ValidFromDateTime < calendarCapacity.Hour &&
                            calendarDateTimeRange.ValidToDateTime > calendarCapacity.Hour
                    exists join projectResource
                        where projectResource.Resource == calendarDateTimeRange.Resource &&
                            projectResource.RecipientCompany == projectResource.SourceCompany &&
                            projectResource.Resource == resource;

                    workingHoursPerSchedule = int642int(calendarCapacity.RecId);   
                }
                else
                {
                    ResRollup resRollup;
                    
                    select count(RecId) from resRollup
                    where resRollup.Resource == resource
                        && resRollup.Timescale == AVTimeframeType::Hour
                        && resRollup.Timeframe >= reservationSchedule.start()
                        && resRollup.Timeframe <= reservationSchedule.end()
                        && resRollup.Coverage == ResRollupCoverage::Availability
                        && resRollup.RootActivity == 0
                        && resRollup.ActivityResource == 0;

                    workingHoursPerSchedule = int642int(resRollup.RecId);
                }

                totalSchedulesWorkingHours += workingHoursPerSchedule;

                if (reservationSchedule.start() == schedule.start() && reservationSchedule.end() == schedule.end())
                {
                    // Get resource total working day for this schedule.
                    thisScheduleWorkingHours = workingHoursPerSchedule;
                }
            }
            else
            {
                ResCalendarCapacity calendarCapacity;
                select count(RecId) from calendarCapacity
                    where calendarCapacity.Calendar == schedule.parmCalendar()
                    && calendarCapacity.Hour >= reservationSchedule.start()
                    && calendarCapacity.Hour <= reservationSchedule.end();

                totalSchedulesWorkingHours += int642int(calendarCapacity.RecId);

                if (reservationSchedule.start() == schedule.start() && reservationSchedule.end() == schedule.end())
                {
                    // Get resource total working dya for this schedule.
                    thisScheduleWorkingHours = int642int(calendarCapacity.RecId);
                }
            }
        }
        if (totalSchedulesWorkingHours)
        {
            percentage = (capacity * (thisScheduleWorkingHours / totalSchedulesWorkingHours)) / _totalCapacityInTheSpecifiedPeriod;
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityPercentageForManualScheduling</Name>
				<Source><![CDATA[
    private real getCapacityPercentageForManualScheduling(real _totalCapacityInTheSpecifiedPeriod)
    {
        real capacityPercentage;

        if (_totalCapacityInTheSpecifiedPeriod > 0)
        {
            capacityPercentage = schedule.capacity() / _totalCapacityInTheSpecifiedPeriod;
        }

        return capacityPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCapacityInTheSpecifiedPeriodAndTotalNumberOfOpenHours</Name>
				<Source><![CDATA[
    private container getTotalCapacityInTheSpecifiedPeriodAndTotalNumberOfOpenHours(ResReservationInstance _reservationInstance)
    {
        boolean allowReservationWithNoCapacity;
        real totalCapacityInTheSpecifiedPeriod = _reservationInstance.parmTotalCapacity();
        int totalNumberOfOpenHours = _reservationInstance.parmNumberOfOpenHours();

        if (reserveProcessorType == ResBookingType::Manual && !totalCapacityInTheSpecifiedPeriod)
        {
            if (DateTimeUtil::date(schedule.End()) == DateTimeUtil::date(schedule.Start()))
            {
                allowReservationWithNoCapacity = true;

                // Schedule for one hour.
                if ((DateTimeUtil::time(schedule.End()) - DateTimeUtil::time(schedule.Start())) <= #SecondsPerHour)
                {
                    totalCapacityInTheSpecifiedPeriod = nonWorkingHourCapacity;
                    totalNumberOfOpenHours = 1;
                }
                // Schedule for the same day will spread the capacity accross this day default capacity.
                else if (DatetimeUtil::date(schedule.Start()) == DatetimeUtil::date(schedule.End()))
                {
                    totalCapacityInTheSpecifiedPeriod = nonWorkingDayCapacity;
                    totalNumberOfOpenHours = nonWorkingDayNumberOfAvailableHours;
                }
            }
        }

        return [allowReservationWithNoCapacity, totalCapacityInTheSpecifiedPeriod, totalNumberOfOpenHours];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartAndEndHour</Name>
				<Source><![CDATA[
    private container getStartAndEndHour(boolean _allowReservationWithNoCapacity, real _totalCapacityInTheSpecifiedPeriod,
        utcdatetime _start, utcdatetime _end, ResReservationType _reservationType = ResReservationType::Booking)
    {
        utcdatetime startHour = _start;
        utcdatetime endHour = _end;

        if (_reservationType == ResReservationType::Assignment)
        {
            startHour = (startHour < taskStartDateTime) ? taskStartDateTime : startHour;
            endHour = (endHour >  taskEndDateTime) ? taskEndDateTime : endHour;
        }

        if (_allowReservationWithNoCapacity && _totalCapacityInTheSpecifiedPeriod == nonWorkingDayCapacity)
        {
            startHour = DateTimeUtil::newDateTime(DateTimeUtil::Date(startHour), nonWorkDayStartHour);
            endHour = DateTimeUtil::newDateTime(DateTimeUtil::Date(startHour), nonWorkDayEndHour);
        }

        return [startHour, endHour];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the ResReserveCapacity processor.
    /// </summary>
    /// <param name = "_reservationType">Reservation type.</param>
    /// <returns>Instance of <c>ResReserveCapacity</c>.</returns>
    public static ResIReserveProcessor construct(ResBookingType _reservationType = ResBookingType::FullCapacity)
    {
        ResIReserveProcessor processor = new ResReserveCapacity(_reservationType);
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an <c>ResReserveCapacity</c> instance.
    /// </summary>
    /// <param name = "_bookingType">Reservation type.</param>
    private void new(ResBookingType _bookingType = ResBookingType::FullCapacity)
    {
        reserveProcessorType = _bookingType;
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>