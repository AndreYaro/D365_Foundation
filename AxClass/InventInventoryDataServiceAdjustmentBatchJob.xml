<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceAdjustmentBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceAdjustmentBatchJob extends InventInventoryDataServiceBaseBatchJob implements ISysBatchTask, BatchRetryable
{
    private InventInstrumentationLogger           logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();

        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceAdjustmentBatchJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        container result = InventoryServiceServiceHealthChecker::checkRegistration();
        
        boolean isProcessQueue = conPeek(result, 1);
        boolean isDisableQueue = conPeek(result, 2);
        str errorMessage = conPeek(result, 3);
        if (isProcessQueue)
        {
            this.processQueue();
        }
        else if (isDisableQueue)
        {
            InventInventoryDataServiceBatchJobHelper::deleteBatchTask(classNum(InventInventoryDataServiceAdjustmentBatchJob));
        }
        else if (errorMessage != '')
        {
            logger.logInformation(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceAdjustmentBatchJob construct()
    {
        return new InventInventoryDataServiceAdjustmentBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceAdjustmentBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForBatchExecution</Name>
				<Source><![CDATA[
    public void scheduleForBatchExecution(SysRecurrenceData _recurrenceData = InventInventoryDataServiceBaseBatchJob::getOneMinuteIntervalRecurrenceData())
    {
        super(_recurrenceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueue</Name>
				<Source><![CDATA[
    private void processQueue()
    {
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        ttsbegin;
        InventInventoryDataServiceOnhandAdjustmentQueueTemp::truncate();
        InventInventoryDataServiceOnhandAdjustmentQueue::insertRecordsIntoTempTable();
        ttscommit;

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAllAdjustment())
        {
            System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::IV_Adjustment);
            this.waitForAsyncTasks(threadTasklist);
        }

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_CleanProcessedQueueData())
        {
            ttsbegin;
            InventInventoryDataServiceOnhandAdjustmentQueue::cleanProcessedQueueData();
            InventInventoryDataServiceOnhandAdjustmentQueueTemp::insertPostFailedRecordsIntoQueueTable();
            ttscommit;
        }

        var ifAllDataFails = this.checkAllDataFails();

        if (InventIVAutoSetJobRecurrenceFlight::instance().isEnabled())
        {
            InventInventoryDataServiceBaseBatchJob::UpdateJobRecurrenceAndParametersIfNeeded(classStr(InventInventoryDataServiceAdjustmentBatchJob), classNum(InventInventoryDataServiceAdjustmentBatchJob), ifAllDataFails, logger);
        }

        if (ifAllDataFails)
        {
            throw error("@SCM:InventoryServiceAdjustmentBatchJobFailErrorMessage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllDataFails</Name>
				<Source><![CDATA[
    private boolean checkAllDataFails()
    {
        InventInventoryDataServiceOnhandAdjustmentQueueTemp adjustmentQueueTemp;

        select firstOnly adjustmentQueueTemp where adjustmentQueueTemp.PostFailed == false;

        if (!adjustmentQueueTemp)
        {
            select firstOnly adjustmentQueueTemp;
            if (adjustmentQueueTemp.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>