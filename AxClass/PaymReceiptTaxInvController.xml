<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymReceiptTaxInvController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymentReceiptTaxInvoiceController</c> class is the controller class for the
/// <c>PaymentReceiptTaxInvoiceController</c> report.
/// </summary>
public class PaymReceiptTaxInvController extends SrsReportRunController implements BatchRetryable
{
    NoYes                               printDoc;
    TaxUnrealizedDocuPrintHeader        printHeader;
    TaxUnrealizedDocuPrintLocation      location;
    TaxUnrealizedDocuText               miscText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00004, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewPaymReceiptTaxInvController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the controller
    /// </summary>
    /// <returns>
    /// The instance of the controller
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymReceiptTaxInvController getNewPaymReceiptTaxInvController()
    {
        return new PaymReceiptTaxInvController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the controller
    /// </summary>
    /// <param name="_args">
    /// The args
    /// </param>
    /// <param name="_reportName">
    /// The name of the report
    /// </param>
    /// <param name="_showDialog">
    /// True, the dialog of the report will be shown
    /// </param>
    /// <param name="_location">
    /// Location type
    /// </param>
    /// <param name="_miscText">
    /// Description
    /// </param>
    /// <param name="_printDocumentSet">
    /// True, the document will be printed
    /// </param>
    /// <param name="_printHeader">
    /// The text of the header.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initController(
        Args                            _args,
        str                             _reportName,
        boolean                         _showDialog,
        TaxUnrealizedDocuPrintLocation  _location = TaxUnrealizedDocuPrintLocation::None,
        TaxUnrealizedDocuText           _miscText = "",
        NoYes                           _printDocumentSet = false,
        TaxUnrealizedDocuPrintHeader    _printHeader = "")
    {
        this.parmArgs(_args);
        this.parmReportName(_reportName);
        this.parmShowDialog(false);
        this.parmLocation(_location);
        this.parmMiscText(_miscText);
        this.parmPrintDocumentSet(_printDocumentSet);
        this.parmPrintHeader(_printHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TaxUnrealizedDocuPrintLocation parmLocation(TaxUnrealizedDocuPrintLocation _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscText</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TaxUnrealizedDocuText parmMiscText(TaxUnrealizedDocuText _miscText = miscText)
    {
        miscText = _miscText;
        return miscText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDocumentSet</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public NoYes parmPrintDocumentSet(NoYes _printDoc = printDoc)
    {
        printDoc = _printDoc;
        return printDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeader</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TaxUnrealizedDocuPrintHeader parmPrintHeader(TaxUnrealizedDocuPrintHeader _printHeader = printHeader)
    {
        printHeader = _printHeader;
        return printHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
protected void preRunModifyContract()
    {
        InvoiceTaxType                  invoiceTaxType;
        LedgerJournalTrans              ledgerJournalTransPaym;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        CustTable                       custTable;
        CustTrans                       custTransPaym;
        PaymReceiptTaxInvContract       paymReceiptTaxInvContract = this.parmReportContract().parmRdpContract();

        invoiceTaxType          = this.parmArgs().parmEnumType();
        ledgerJournalTransPaym  = this.parmArgs().record();
        custTable               = CustTable::findByLedgerDimension(ledgerJournalTransPaym.LedgerDimension);
        custTransPaym           = CustTrans::findVoucherDate(ledgerJournalTransPaym.Voucher, ledgerJournalTransPaym.TransDate);
        ledgerJournalTransExtensionTH = LedgerJournalTransExtensionTH::findByLedgerJournalTrans(ledgerJournalTransPaym.RecId);

        paymReceiptTaxInvContract.parmTaxID(CompanyInfo::find().CoRegNum);
        paymReceiptTaxInvContract.parmCompanyAddress(CompanyInfo::find().postalAddress().Address);
        if (invoiceTaxType == InvoiceTaxType::Realized)
        {
            // Receipt
            this.parmDialogCaption("@SYS4082957");
            if (this.parmPrintDocumentSet())
            {
                paymReceiptTaxInvContract.parmCaption(this.parmPrintHeader());
                paymReceiptTaxInvContract.parmLocation(this.parmLocation());
                paymReceiptTaxInvContract.parmMiscText(this.parmMiscText());
            }
            else
            {
                // Receipt
                paymReceiptTaxInvContract.parmCaption("@SYS4082957");
            }
            paymReceiptTaxInvContract.parmTaxInvoiceNum(custTransPaym.custTransExtensionTH().ReceiptId);
        }
        else
        {
            // Receipt / Tax invoice
            this.parmDialogCaption("@SYS4082853");
            if (this.parmPrintDocumentSet())
            {
                paymReceiptTaxInvContract.parmCaption(this.parmPrintHeader());
                paymReceiptTaxInvContract.parmLocation(this.parmLocation());
                paymReceiptTaxInvContract.parmMiscText(this.parmMiscText());
            }
            else
            {
                // Receipt / Tax invoice
                paymReceiptTaxInvContract.parmCaption("@SYS4082853");
            }
            paymReceiptTaxInvContract.parmTaxInvoiceNum(custTransPaym.DocumentNum);
        }
        paymReceiptTaxInvContract.parmTaxInvoiceDate(ledgerJournalTransPaym.TransDate);
        paymReceiptTaxInvContract.parmCustName(custTable.name());
        paymReceiptTaxInvContract.parmCustAddress(custTable.postalAddress().Address);
        paymReceiptTaxInvContract.parmTaxBranchCode(TaxBranchType::getTBDisplayValueByDefaultDimension(ledgerJournalTransPaym.DefaultDimension));
        paymReceiptTaxInvContract.parmTaxBranchName(TaxBranch::getReportTaxBranchStr(paymReceiptTaxInvContract.parmTaxBranchCode()));
        paymReceiptTaxInvContract.parmCustTransPaymId(custTransPaym.RecId);
        paymReceiptTaxInvContract.parmInvoiceTaxType(this.parmArgs().parmEnumType());
        paymReceiptTaxInvContract.parmCurrencyCode(ledgerJournalTransPaym.CurrencyCode);
        paymReceiptTaxInvContract.parmTaxRegistrationNumber(ledgerJournalTransExtensionTH.TaxRegNum);
        paymReceiptTaxInvContract.parmTaxNatureOfAddress(ledgerJournalTransExtensionTH.TaxNatureOfAddress);
        paymReceiptTaxInvContract.parmBranchNumber(ledgerJournalTransExtensionTH.BranchNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocuSet</Name>
				<Source><![CDATA[
/// <summary>
    /// Prints the document
    /// </summary>
    /// <param name="_args">
    /// The args
    /// </param>
    /// <param name="_docuCode">
    /// The document id
    /// </param>
    /// <param name="_invoiceTaxType">
    /// The invoice tax type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printDocuSet(
        Args                _args,
        TaxUnrealizedDocuId _docuCode,
        InvoiceTaxType      _invoiceTaxType)
    {
        PaymReceiptTaxInvController     controller = this;
        TaxUnrealizedDocuSetLine        docuSetLineLocal;
        TaxUnrealizedDocuSetTable       docuSetTableLocal;

        if (_invoiceTaxType == InvoiceTaxType::Both)
        {
            _args.parmEnumType(InvoiceTaxType::Realized);
            controller.initController(_args, ssrsReportStr(PaymReceiptTaxInv, Design), false);
            controller.startOperation();

            while select PrintHeader from docuSetLineLocal
                order by docuSetLineLocal.RecId
                join ProdType, Location, MiscText from docuSetTableLocal
                    where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                        && docuSetTableLocal.Code                       == _docuCode
            {
                controller = this.getNewPaymReceiptTaxInvController();
                controller.initController(
                    _args,
                    ssrsReportStr(PaymReceiptTaxInv, Design),
                    false,
                    docuSetTableLocal.Location,
                    docuSetTableLocal.MiscText,
                    NoYes::Yes,
                    docuSetLineLocal.PrintHeader);
                controller.startOperation();
            }

            if (controller.hasUnRealizedTrans(_args.record()))
            {
            controller = this.getNewPaymReceiptTaxInvController();
            _args.parmEnumType(InvoiceTaxType::Unrealized);
                controller.initController(_args, ssrsReportStr(PaymReceiptTaxInv, Design), false);
                controller.startOperation();

                while select PrintHeader from docuSetLineLocal
                    order by docuSetLineLocal.RecId
                    join ProdType, Location, MiscText from docuSetTableLocal
                        where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                            && docuSetTableLocal.Code                       == _docuCode
                {
                    controller = this.getNewPaymReceiptTaxInvController();
                    controller.initController(
                        _args,
                        ssrsReportStr(PaymReceiptTaxInv, Design),
                        false,
                        docuSetTableLocal.Location,
                        docuSetTableLocal.MiscText,
                        NoYes::Yes,
                        docuSetLineLocal.PrintHeader);
                    controller.startOperation();
                }
            }
        }
        else
        {
        controller.initController(_args, ssrsReportStr(PaymReceiptTaxInv, Design), false);
        controller.startOperation();

        while select PrintHeader from docuSetLineLocal
            order by docuSetLineLocal.RecId
            join ProdType, Location, MiscText from docuSetTableLocal
                where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                    && docuSetTableLocal.Code                       == _docuCode
        {
            controller = this.getNewPaymReceiptTaxInvController();
            controller.initController(
                _args,
                ssrsReportStr(PaymReceiptTaxInv, Design),
                false,
                docuSetTableLocal.Location,
                docuSetTableLocal.MiscText,
                NoYes::Yes,
                docuSetLineLocal.PrintHeader);
            controller.startOperation();
        }
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PaymReceiptTaxInvController     controller = new PaymReceiptTaxInvController();
        InvoiceTaxType                  invoiceTaxType;
        SalesDocumentSetSelector        docuSetSelector;
        TaxUnrealizedDocuId             docuCode;
        boolean                         printDocuSet;

        invoiceTaxType = _args.parmEnumType();

        // Print document set
        docuSetSelector = new SalesDocumentSetSelector();
        printDocuSet = docuSetSelector.run();

        if (printDocuSet)
        {
            if (docuSetSelector.getDocuCode())
            {
                docuCode = docuSetSelector.getDocuCode();

                controller.printDocuSet(_args, docuCode, invoiceTaxType);
            }
            else
            {
                if (invoiceTaxType == InvoiceTaxType::Both)
                {
                    _args.parmEnumType(InvoiceTaxType::Realized);
                    controller.initController(
                        _args,
                        ssrsReportStr(PaymReceiptTaxInv, Design),
                        false);
                    controller.startOperation();

                    if (controller.hasUnRealizedTrans(_args.record()))
                    {
                        controller = new PaymReceiptTaxInvController();
                        _args.parmEnumType(InvoiceTaxType::Unrealized);
                        controller.initController(
                            _args,
                            ssrsReportStr(PaymReceiptTaxInv, Design),
                            false);
                        controller.startOperation();
                    }
                }
                else
                {
                    controller.initController(
                    _args,
                    ssrsReportStr(PaymReceiptTaxInv, Design),
                    false);
                    controller.startOperation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnRealizedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method indicates whether the specified tax code is unrealized VAT.
    /// </summary>
    /// <param name="_ledgerJournalTransPaym">
    /// The ledgerJournalTrans
    /// </param>
    /// <returns>
    ///     Returns true if tax type is Normal and payment sales tax code not null.
    ///     Returns true if tax type is average unrealized.
    ///     Otherwise, returns false.
    /// </returns>
    private boolean hasUnRealizedTrans(LedgerJournalTrans  _ledgerJournalTransPaym)
    {
        CustInvoiceJour                     custInvoiceJour;
        TaxTable                            taxTable;
        TaxTrans                            taxTrans;
        CustTrans                           custTransPaym;
        CustTrans                           custTransInv;
        CustSettlement                      custSettlement;

        select firstOnly RecId from taxTrans
            exists join taxTable
                where taxTable.TaxCode              == taxTrans.TaxCode
                    && ((taxTable.TaxType_TH        == TaxType_TH::Normal && taxTable.PaymentTaxCode)
                        || taxTable.TaxType_TH      == TaxType_TH::AverageUnrealized)
            exists join custInvoiceJour
                where custInvoiceJour.InvoiceDate       == taxTrans.TransDate
                    && custInvoiceJour.LedgerVoucher    == taxTrans.Voucher
            exists join custTransPaym
                where custTransPaym.Voucher     == _ledgerJournalTransPaym.Voucher
                    && custTransPaym.TransDate  == _ledgerJournalTransPaym.TransDate
            exists join custSettlement
                where custSettlement.OffsetRecid == custTransPaym.RecId
            exists join custTransInv
                where custTransInv.RecId        == custSettlement.TransRecId
                    && custTransInv.Invoice     == custInvoiceJour.InvoiceId
                    && custTransInv.TransDate   == custInvoiceJour.InvoiceDate
                    && custTransInv.AccountNum  == custInvoiceJour.InvoiceAccount;

        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>