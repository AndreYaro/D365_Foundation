<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrUtility_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Tax integration utility.
/// </summary>
class TaxIntgrUtility_CN
{
     #TaxIntgrEnhancement_CN
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the unit price.
    /// </summary>
    /// <param name="_isIncludeTax">
    /// Whether the price includes tax.
    /// </param>
    /// <param name="_netAmount">
    /// The net amount.
    /// </param>
    /// <param name="_taxAmount">
    /// The tax amount.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <returns>
    /// The unit price.
    /// </returns>
    public static Price calculateUnitPrice(boolean _isIncludeTax, AmountCur _netAmount, AmountCUr _taxAmount, Qty _qty)
    {
        Price unitPrice;

        if (_qty != 0)
        {
            if (_isIncludeTax)
            {
                unitPrice = (_netAmount + _taxAmount) / _qty;
            }
            else
            {
                unitPrice = _netAmount / _qty;
            }
        }

        return TaxIntgrUtility_CN::roundQuantity(unitPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount limit of the export document.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The record id of the export document.
    /// </param>
    /// <returns>
    /// The amount limit.
    /// </returns>
    public static AmountCur getAmountLimit(RefRecId _sourceRecId)
    {
        TaxProfileTable_CN              taxProfileTable_CN;
        TaxIntgrExportDocumentSource_CN exportDocumentSource;

        exportDocumentSource = TaxIntgrExportDocumentSource_CN::find(_sourceRecId);
        taxProfileTable_CN = TaxProfileTable_CN::findByTaxCode(exportDocumentSource.TaxCode);

        return taxProfileTable_CN.MaxInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount string.
    /// </summary>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <returns>
    /// The amount string.
    /// </returns>
    public static str getAmountString(real _amount)
    {
        return num2str(_amount, 0, 2, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuanityString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity string.
    /// </summary>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <returns>
    /// The quantity string.
    /// </returns>
    public static str getQuanityString(real _qty)
    {
        return num2str(_qty, 0, 6, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverAmountLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the amount is over limit.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_invoiceAmount">
    /// The invoice amount.
    /// </param>
    /// <returns>
    /// True if the amount is over limit; otherwise, false.
    /// </returns>
    public static boolean isOverAmountLimit(TaxCode _taxCode, AmountCur _invoiceAmount)
    {
        TaxProfileTable_CN taxProfile;
        boolean result;

        taxProfile = TaxProfileTable_CN::findByTaxCode(_taxCode);
        if (taxProfile.MaxInvoiceAmount < abs(_invoiceAmount))
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefTaxIntgExportDocumentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for a export document ID.
    /// </summary>
    /// <returns>
    /// The number sequence reference for the export document ID.
    /// </returns>
    public static NumberSequenceReference numRefTaxIntgExportDocumentId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(TaxIntgrExportDocumentId_CN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to round net amount and tax amount with default rounding.
    /// </summary>
    /// <param name="_amountToRound">
    /// original amount
    /// </param>
    /// <returns>
    /// amount after rounding
    /// </returns>
    public static AmountCur roundAmount(AmountMST _amountToRound)
    {
        return round(_amountToRound, #roundingAccAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundDownAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to round down net amount and tax amount with default rounding.
    /// </summary>
    /// <param name="_amountToRound">
    /// original amount
    /// </param>
    /// <returns>
    /// amount after rounding
    /// </returns>
    public static AmountCur roundDownAmount(AmountMST _amountToRound)
    {
        return roundDown(_amountToRound, #roundingAccAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds percentage in hundred.
    /// </summary>
    /// <param name="_percent">
    /// Original percentage.
    /// </param>
    /// <returns>
    /// Percentage after rounding
    /// </returns>
    public static Percent roundPercent(Percent _percent)
    {
        return round(_percent, #roundingPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundDownPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds down percentage in hundred.
    /// </summary>
    /// <param name="_percent">
    /// Original percentage.
    /// </param>
    /// <returns>
    /// Percentage after rounding
    /// </returns>
    public static Percent roundDownPercent(Percent _percent)
    {
        return roundDown(_percent, #roundingPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds quantity using accuracy for quantity.
    /// </summary>
    /// <param name="_qty">
    /// original quantity
    /// </param>
    /// <returns>
    /// quantity after rounding
    /// </returns>
    public static SalesInvoicedQty roundQuantity(SalesInvoicedQty _qty)
    {
        return round(_qty, #roundingAccQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundUpAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds up net amount and tax amount with default rounding.
    /// </summary>
    /// <param name="_amountToRound">
    /// original amount
    /// </param>
    /// <returns>
    /// amount after rounding
    /// </returns>
    public static AmountCur roundUpAmount(AmountMST _amountToRound)
    {
        return roundUp(_amountToRound, #roundingAccAmount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>