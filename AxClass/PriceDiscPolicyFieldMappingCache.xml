<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPolicyFieldMappingCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscPolicyFieldMappingCache</c> class converts table map field IDs to table field IDs
/// and vice versa.
/// </summary>
/// <remarks>
/// The instance of the <c>PriceDiscPolicyFieldMappingCache</c> class is used to convert field IDs in
/// the <c>PriceDiscResultFields</c> tables. The conversion can go in both directions.
/// </remarks>
class PriceDiscPolicyFieldMappingCache
{
    static private PriceDiscPolicyFieldMappingCache singleton;

    private List      policyTableMapList;
    private Map       tablefield2Map;
    private Map       mapField2Table;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isTableInMap</Name>
				<Source><![CDATA[
    public boolean isTableInMap(RefTableId _mappingTableId)
    {
        return tablefield2Map.exists(_mappingTableId) || mapField2Table.exists(_mappingTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>map2TableFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a container of map field IDs to corresponding table field IDs.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table.
    /// </param>
    /// <param name="_policyFields">
    ///    A container of map field IDs.
    /// </param>
    /// <returns>
    ///    A container that contains the table field IDs.
    /// </returns>
    /// <remarks>
    ///    The retrieved field IDs are incrementally sorted.
    /// </remarks>
    [SysObsolete("Method is moved to policyFieldList2TableFieldIds.", false, 31\03\2018), Hookable(false)]
    public container map2TableFieldIds(RefTableId _tableId, container _policyFields)
    {
        PriceDiscPolicyFieldList policyFieldList = PriceDiscPolicyFieldList::newList();

        for (int i = 1; i<=conLen(_policyFields); i++)
        {
            policyFieldList.addPriceDiscResultField(conPeek(_policyFields, i));
        }

        return this.policyFieldList2TableFieldIds(_tableId, policyFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyFieldList2TableFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a list of policy fields to corresponding table field IDs.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_tableMapList">
    /// A <c>PriceDiscPolicyFieldList</c> object containing the policy fields.
    /// </param>
    /// <returns>
    /// The container that contains the table field IDs.
    /// </returns>
    /// <remarks>
    /// The retrieved field IDs are incrementally sorted.
    /// </remarks>
    [Hookable(false)]
    public container policyFieldList2TableFieldIds(RefTableId _tableId, PriceDiscPolicyFieldList _policyFieldList)
    {
        container policyFieldsTable;
        Enumerator enumerator = _policyFieldList.getEnumerator();

        while (enumerator.moveNext())
        {
            policyFieldsTable += this.policyField2TableField(_tableId, enumerator.current());
        }

        return this.sortPolicyFields(policyFieldsTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyField2TableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a policy field to a corresponding table field ID.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c> object.
    /// </param>
    /// <returns>
    /// The table field ID.
    /// </returns>
    [Hookable(false)]
    public RefFieldId policyField2TableField(RefTableId _tableId, PriceDiscPolicyField _policyField)
    {
        if (mapField2Table.exists(_tableId))
        {
            Map mapField2TableField = mapField2Table.lookup(_tableId);

            if (mapField2TableField.exists(_policyField.parmPolicyFieldListEntry()))
            {
                return mapField2TableField.lookup(_policyField.parmPolicyFieldListEntry());
            }
        }

        return 0;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        tablefield2Map = new Map(Types::Integer, Types::Class);
        mapField2Table = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the field mapping of the map table in the AOT and stores the values in internal variables.
    /// </summary>
    private void setFieldMapping()
    {
        Enumerator tableMapEnumerator = this.parmPolicyTableMapList().getEnumerator();

        while (tableMapEnumerator.moveNext())
        {
            TableId         tableMapId = tableMapEnumerator.current();
            DictTable       dt = new DictTable(tableMapId);
            int             tableIterator, fieldIterator;

            int mapTableCount = dt.mapCnt();

            for (tableIterator = 1; tableIterator <= mapTableCount; tableIterator++)
            {
                DictTableMap tableMap = dt.mapObject(tableIterator);
                TableId mappingTableId = tableMap.table();

                Map tablefield2MapField;
                Map mapField2TableField;

                if (tablefield2Map.exists(mappingTableId))
                {
                    tablefield2MapField = tablefield2Map.lookup(mappingTableId);
                }
                else
                {
                    tablefield2MapField = new Map(Types::Integer, Types::Class);
                }

                if (mapField2Table.exists(mappingTableId))
                {
                    mapField2TableField = mapField2Table.lookup(mappingTableId);
                }
                else
                {
                    mapField2TableField = new Map(Types::Int64, Types::Integer);
                }

                int fieldCount     = tableMap.fieldCnt();

                for (fieldIterator = 1; fieldIterator <= fieldCount; fieldIterator++)
                {
                    FieldId mapFieldId   = tableMap.fieldCnt2FieldFrom(fieldIterator);
                    FieldId tableFieldId = tableMap.fieldCnt2FieldTo(fieldIterator);

                    PriceDiscPolicyField policyField = PriceDiscPolicyField::newTableMapField(tableMapId, mapFieldId);

                    tablefield2MapField.insert(tableFieldId, policyField);
                    mapField2TableField.insert(policyField.parmPolicyFieldListEntry(), tableFieldId);
                }

                tablefield2Map.insert(mappingTableId, tablefield2MapField);
                mapField2Table.insert(mappingTableId, mapField2TableField);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPolicyTableMapList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List parmPolicyTableMapList()
    {
        if (!policyTableMapList)
        {
            policyTableMapList = new List(Types::Integer);

            this.addPolicyTableMap(policyTableMapList);
        }

        return policyTableMapList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPolicyTableMap</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    final protected void addPolicyTableMap(List _policyTableMapList)
    {
        _policyTableMapList.addEnd(tableNum(PriceDiscResultFields));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortPolicyFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts the content of a container of field IDs.
    /// </summary>
    /// <param name="_c">
    ///    A container to sort.
    /// </param>
    /// <returns>
    ///    A sorted container.
    /// </returns>
    public container sortPolicyFields(container _c)
    {
        container c1  = _c;
        container c2;
        int       i;
        int       num1;

        while (c1)
        {
            [num1] = c1;
            for (i=1; i<=conLen(c1); i++)
            {
                num1 = min(num1, conPeek(c1, i));
            }
            c2 = conIns(c2, conLen(c2)+1, num1);
            c1 = conDel(c1, conFind(c1, num1),1);
        }

        return c2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>table2MapFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a container type that stores table field IDs to the corresponding table map field IDs.
    /// </summary>
    /// <param name="_tableId">
    ///    A table ID.
    /// </param>
    /// <param name="_policyFieldsTable">
    ///    The table field IDs.
    /// </param>
    /// <returns>
    ///    The corresponding map field IDs.
    /// </returns>
    [SysObsolete("Method is moved to table2PolicyFieldList.", false, 31\03\2018), Hookable(false)]
    public container table2MapFieldIds(RefTableId _tableId, container _policyFieldsTable)
    {
        container policyFields;
        Enumerator enumerator = this.table2PolicyFieldList(_tableId, _policyFieldsTable).getEnumerator();

        while (enumerator.moveNext())
        {
            PriceDiscPolicyField policyField = enumerator.current();

            if (policyField.parmTableMapId() != tableNum(PriceDiscResultFields))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            policyFields += policyField.parmTableMapFieldId();
        }

        return this.sortPolicyFields(policyFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>table2PolicyFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a container type that stores table field IDs to a policy field list.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_policyFieldsTable">
    /// The table field IDs.
    /// </param>
    /// <returns>
    /// The <c>PriceDiscPolicyFieldList</c> object containing policy fields.
    /// </returns>
    [Hookable(false)]
    public PriceDiscPolicyFieldList table2PolicyFieldList(RefTableId _tableId, container _policyFieldsTable)
    {
        PriceDiscPolicyFieldList policyFieldList = PriceDiscPolicyFieldList::newList();

        for (int i = 1; i<=conLen(_policyFieldsTable); i++)
        {
            policyFieldList.addPolicyField(this.tableField2PolicyField(_tableId, conPeek(_policyFieldsTable, i)));
        }

        return policyFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableField2PolicyField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a table field ID to the corresponding policy field.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_fieldId">
    /// A table field ID.
    /// </param>
    /// <returns>
    /// The <c>PriceDiscPolicyField</c> object representing the policy field.
    /// </returns>
    [Hookable(false)]
    public PriceDiscPolicyField tableField2PolicyField(RefTableId _tableId, RefFieldId _fieldId)
    {
        Map tablefield2MapField;

        if (tablefield2Map.exists(_tableId))
        {
            tablefield2MapField = tablefield2Map.lookup(_tableId);
        }
        else
        {
            tablefield2MapField = null;
        }

        if (tablefield2MapField.exists(_fieldId))
        {
            return tablefield2MapField.lookup(_fieldId);
        }
        else
        {
            return PriceDiscPolicyField::newUnmappedField();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs and initializes a new instance of the <c>PriceDiscPolicyFieldMappingCache</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>PriceDiscPolicyFieldMappingCache</c> class.
    /// </returns>
    public static PriceDiscPolicyFieldMappingCache newInitialized()
    {
        if (!singleton)
        {
            singleton = new PriceDiscPolicyFieldMappingCache();
            singleton.setFieldMapping();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePolicyFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the policy field list for a specific table.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <returns>
    /// The <c>PriceDiscPolicyFieldList</c> object containing the policy fields.
    /// </returns>
    [Hookable(false)]
    public PriceDiscPolicyFieldList retrievePolicyFieldList(RefTableId _tableId)
    {
        Map tablefield2MapField;

        if (tablefield2Map.exists(_tableId))
        {
            tablefield2MapField = tablefield2Map.lookup(_tableId);
        }

        PriceDiscPolicyFieldList policyFieldList = PriceDiscPolicyFieldList::newList();

        if (tablefield2MapField)
        {
            MapEnumerator tableField2MapFieldEnmumarator = tablefield2MapField.getEnumerator();
            while (tableField2MapFieldEnmumarator.moveNext())
            {
                policyFieldList.addPolicyField(tableField2MapFieldEnmumarator.currentValue());
            }
        }

        return policyFieldList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>