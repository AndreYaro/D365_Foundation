<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEntityDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SmmEntityDelete extends RunBase
{
    Dialog                  dialog;
    DialogGroup             dialogGroup;

    DialogField             fieldActivities;
    DialogField             fieldDocuments;
    DialogField             fieldContacts;
    DialogField             fieldProjects;

    NoYesId                 includeCommon;
    smmIncludeActivities    includeActivities;
    smmIncludeDocuments     includeDocuments;
    smmIncludeContacts      includeContacts;
    smmIncludeProjects      includeProjects;
    smmIncludeQuotes        includeQuotes;
    smmIncludeLeads         includeLeads;
    smmIncludeOpportunities includeOpportunities;

    Common                  common;

    fieldId                 fieldId;
    boolean                 showInfoLog;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
    includeCommon,
    includeActivities,
    includeDocuments,
    includeContacts,
    includeProjects,
    includeQuotes,
    includeLeads,
    includeOpportunities,
    showInfoLog
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    // Overridden to not allow batch processing
    boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        dialog.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteActivities</Name>
				<Source><![CDATA[
    // Delete activities related to the entity
    private void deleteActivities()
    {
        smmActivities                   smmActivities;
        smmActivityParentLinkTable      smmActivityParentLinkTable;

        while select forupdate smmActivities
            join forupdate smmActivityParentLinkTable
            where smmActivities.ActivityNumber == smmActivityParentLinkTable.ActivityNumber &&
                  smmActivityParentLinkTable.ParentType == conpeek(smmActivityParentLink::refTableId2ParentTypes(common.TableId, common), 1) &&
                  smmActivityParentLinkTable.RefRecId == common.RecId
        {
            if (!smmActivityParentLinkTable.PrimaryLink ||
                (smmActivities.Closed == NoYes::No &&
                smmActivityParentLinkTable::existsParentLink(smmActivities.ActivityNumber, smmActivityParentType::ServiceOrderLine)))
            {
                if (smmActivityParentLinkTable.validateDelete())
                {
                    smmActivityParentLinkTable.delete();
                }
            }
            else
            {
                smmActivities.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteContacts</Name>
				<Source><![CDATA[
    // Delete contacts related to the entity
    private void deleteContacts()
    {
        ContactPerson                   contactPerson;
        DirOrgPersonRelations           dirOrgPersonRelations;

        while select forupdate contactPerson
            exists join dirOrgPersonRelations
            where contactPerson.ContactPersonId == dirOrgPersonRelations.ContactPersonId &&
                  dirOrgPersonRelations.EntityRefTableId == common.TableId &&
                  dirOrgPersonRelations.EntityRefRecId == common.RecId
        {
            // Delete the link first so it will not conflict with validate
            DirOrgPersonRelations::deleteLink(common.TableId,common.RecId,contactPerson.ContactPersonId);

            if (contactPerson.validateDelete())
            {
                contactPerson.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocuments</Name>
				<Source><![CDATA[
    // Delete documents related to the entity
    private void deleteDocuments()
    {
        DocuRef             docuRef;

        while select forupdate docuRef
            where docuRef.RefTableId == common.TableId &&
                  docuRef.RefRecId == common.RecId &&
                  docuRef.ActualCompanyId == curext()
        {
            if (docuRef.validateDelete())
            {
                docuRef.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLink</Name>
				<Source><![CDATA[
    // This should be implemented in the subclass
    protected abstract void deleteLink()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProcess</Name>
				<Source><![CDATA[
    private void deleteProcess()
    {
        smmProcessInstance  smmProcessInstance;
        smmProcessInstance = smmProcessInstance::construct(common);
        smmProcessInstance.parmRemoveActivitiesOnly(false);
        smmProcessInstance.parmRemoveOpenActivities(false);
        smmProcessInstance.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    // Delete main and associated records depending on the options marked by the users
    public void deleteRecords()
    {
        // Delete the attached process
        this.deleteProcess();

        if (includeActivities)
        {
            // Delete activities
            this.deleteActivities();
        }

        if (includeContacts)
        {
            // Delete contacts
            this.deleteContacts();
        }

        if (includeDocuments)
        {
            // Delete documents
            this.deleteDocuments();
        }

        // Delete links for each entity
        this.deleteLink();

        //
        // Remove main table
        //
        if (includeCommon)
        {
            common.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    // Generate dialog
    public Object dialog()
    {
        FormDataSource  formDataSource;
        boolean         multiSelect;
        dialog = super();

        if (common && FormDataUtil::getFormDataSource(common))
        {
            formDataSource = FormDataUtil::getFormDataSource(common);
            if (formDataSource.anyMarked())
            {
                multiSelect = true;
            }
        }
        // Select associated record to remove for selected %1.
        dialog.addText(strfmt("@SYS105090", multiSelect ? tableid2pname(common.TableId) : fieldLabelValue(common.TableId, fieldId,common.(fieldId))));
        dialogGroup = dialog.addGroup();
        dialogGroup.frameType(FormFrameType::None);
        dialogGroup.columns(3);

        this.parmIncludeActivities(NoYes::Yes);
        this.parmIncludeDocuments(NoYes::Yes);
        this.parmIncludeContacts(NoYes::Yes);
        this.parmIncludeProjects(NoYes::Yes);

        fieldActivities         =   dialog.addFieldValue(extendedtypestr(smmIncludeActivities),  includeActivities);
        fieldDocuments          =   dialog.addFieldValue(extendedtypestr(smmIncludeDocuments),   includeDocuments);
        fieldContacts           =   dialog.addFieldValue(extendedtypestr(smmIncludeContacts),    includeContacts);
        fieldProjects           =   dialog.addFieldValue(extendedtypestr(smmIncludeProjects),    includeProjects);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    // Get input values
    public boolean getFromDialog()
    {
        this.parmIncludeActivities(fieldActivities.value());
        this.parmIncludeDocuments(fieldDocuments.value());
        this.parmIncludeContacts(fieldContacts.value());
        this.parmIncludeProjects(fieldProjects.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        includeCommon = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonTable</Name>
				<Source><![CDATA[
    public Common parmCommonTable(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeActivities</Name>
				<Source><![CDATA[
    public smmIncludeActivities parmIncludeActivities(smmIncludeActivities _includeActivities = includeActivities)
    {
        includeActivities = _includeActivities;

        return includeActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCommon</Name>
				<Source><![CDATA[
    public NoYesId parmIncludeCommon(NoYesId _includeCommon = includeCommon)
    {
        includeCommon = _includeCommon;

        return includeCommon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeContacts</Name>
				<Source><![CDATA[
    public smmIncludeContacts parmIncludeContacts(smmIncludeContacts _includeContacts = includeContacts)
    {
        includeContacts = _includeContacts;

        return includeContacts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDocuments</Name>
				<Source><![CDATA[
    public smmIncludeDocuments parmIncludeDocuments(smmIncludeDocuments _includeDocuments = includeDocuments)
    {
        includeDocuments = _includeDocuments;

        return includeDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeLeads</Name>
				<Source><![CDATA[
    public smmIncludeLeads parmIncludeLeads(smmIncludeLeads _includeLeads = includeLeads)
    {
        includeLeads = _includeLeads;

        return includeLeads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpportunities</Name>
				<Source><![CDATA[
    public smmIncludeOpportunities parmIncludeOpportunities(smmIncludeOpportunities _includeOpportunities = includeOpportunities)
    {
        includeOpportunities = _includeOpportunities;

        return includeOpportunities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeProjects</Name>
				<Source><![CDATA[
    public smmIncludeProjects parmIncludeProjects(smmIncludeProjects _includeProjects = includeProjects)
    {
        includeProjects = _includeProjects;

        return includeProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeQuotes</Name>
				<Source><![CDATA[
    public smmIncludeQuotes parmIncludeQuotes(smmIncludeQuotes _includeQuotes = includeQuotes)
    {
        includeQuotes = _includeQuotes;

        return includeQuotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoLog</Name>
				<Source><![CDATA[
    public boolean parmShowInfoLog(boolean _showInfoLog = showInfoLog)
    {
        showInfoLog = _showInfoLog;
        return showInfoLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    // This will delete the entity that the user selected and
    // the associated records that are marked for deletion.
    public void run()
    {
        SmmEntityDelete::processOnServer(common,
                                        includeOpportunities,
                                        includeLeads,
                                        includeQuotes,
                                        includeProjects,
                                        includeActivities,
                                        includeDocuments,
                                        includeContacts,
                                        includeCommon);

        if (showInfoLog)
        {
            info("@SYS113055");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        boolean ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
        void checkTableAccess(tableId _tableId)
        {
            if (!hasTableAccess(_tableId,AccessType::Delete))
            {
                ret = checkFailed(strfmt("@SYS76214",strfmt("@SYS70938",tableid2pname(_tableId),tableid2name(_tableId))));
            }
        }

        ret = super(_calledFrom);

        // Check for table permissions
        if (ret)
        {
            if (includeCommon)
            {
                checkTableAccess(common.TableId);
            }
            if (includeProjects)
            {
                checkTableAccess(tablenum(ProjTable));
            }
            if (includeContacts)
            {
                checkTableAccess(tablenum(ContactPerson));
            }
            if (includeDocuments)
            {
                checkTableAccess(tablenum(DocuRef));
            }
            if (includeActivities)
            {
                checkTableAccess(tablenum(smmActivities));
            }
            if (includeOpportunities)
            {
                checkTableAccess(tablenum(smmOpportunityTable));
            }
            if (includeLeads)
            {
                checkTableAccess(tablenum(smmLeadTable));
            }
            if (includeQuotes)
            {
                checkTableAccess(tablenum(SalesQuotationTable));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SmmEntityDelete construct(Common _common, boolean _includeCommon = true)
    {
        SmmEntityDelete     smmEntityDelete;
        if (!_common)
        {
            throw error(strfmt("@SYS29104",funcname())); // Class %1 must be called with a buffer.
        }

        switch (_common.TableId)
        {
            case tablenum(smmLeadTable) :
                smmEntityDelete = new SmmEntityDelete_Lead();
                break;
            case tablenum(smmOpportunityTable) :
                smmEntityDelete = new SmmEntityDelete_Opportunity();
                break;
        }
        if (smmEntityDelete)
        {
            smmEntityDelete.parmCommonTable(_common);
            smmEntityDelete.parmIncludeCommon(_includeCommon);
        }
        return smmEntityDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args, FormDataSource _formDataSource)
    {
        SmmEntityDelete smmEntityDelete;
        Common common = _args.record();
        if (!_args || !_args.record())
        {
            throw error(strfmt("@SYS29104",classstr(SmmEntityDelete))); // Class %1 must be called with a buffer.
        }

        smmEntityDelete = SmmEntityDelete::construct(common);

        smmEntityDelete.parmCommonTable(_args.record());

        if (smmEntityDelete.prompt())
        {
            smmEntityDelete.runOperation();

            if (_formDataSource)
            {
                _formDataSource.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnServer</Name>
				<Source><![CDATA[
    static void processOnServer(Common  _common,
                                       boolean _includeOpportunities,
                                       boolean _includeLeads,
                                       boolean _includeQuotes,
                                       boolean _includeProjects,
                                       boolean _includeActivities,
                                       boolean _includeDocuments,
                                       boolean _includeContacts,
                                       boolean _includeCommon = true)

    {
        SmmEntityDelete smmEntityDelete;
        #OCCRetryCount
        smmEntityDelete = SmmEntityDelete::construct(_common);
        smmEntityDelete.parmIncludeCommon(_includeCommon);
        smmEntityDelete.parmIncludeLeads(_includeLeads);
        smmEntityDelete.parmIncludeOpportunities(_includeOpportunities);
        smmEntityDelete.parmIncludeQuotes(_includeQuotes);
        smmEntityDelete.parmIncludeActivities(_includeActivities);
        smmEntityDelete.parmIncludeDocuments(_includeDocuments);
        smmEntityDelete.parmIncludeContacts(_includeContacts);
        smmEntityDelete.parmIncludeProjects(_includeProjects);

        try
        {
            ttsbegin;
            smmEntityDelete.deleteRecords();
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628"); // Update has been canceled because of an error.
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>