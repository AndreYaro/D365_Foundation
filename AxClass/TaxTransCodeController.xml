<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransCodeController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller class for the <c>TaxTransCode</c> report.
/// </summary>
public class TaxTransCodeController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00040, funcName());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a report contract before the dialog prompt.
    /// </summary>
    protected void prePromptModifyContract()
    {
        TaxTransCodeRdlContract     contract;
        int                         displayVatDueDate = 1;
        int                         displayCompanyForLedgerAccount = 1;

        this.parmDialogCaption("@SYS11582");

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            displayVatDueDate = 2;
        }

        // if InterCompany is entabled, we need to display the Company for ledger accounts on the report
        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            displayCompanyForLedgerAccount = 2;
        }

        contract = this.parmReportContract().parmRdlContract();
        contract.parmDisplayVatDueDate(displayVatDueDate);
        contract.parmDisplayCompanyForLedgerAccount(displayCompanyForLedgerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a report contract before a report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        TaxTransCodeRdlContract     contract;
        int                         displayVatDueDate = 1;

        contract = this.parmReportContract().parmRdlContract();

        if (contract.parmDisplayVatDueDate() != 2)
        {
            contract.parmDisplayVatDueDate(displayVatDueDate);
        }

        int displayCompanyForLedgerAccount = 1;
        
        if (contract.parmDisplayCompanyForLedgerAccount() != 2)
        {
            contract.parmDisplayCompanyForLedgerAccount(displayCompanyForLedgerAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxTransCodeController();
        controller.parmReportName(ssrsReportStr(TaxTransCode, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>