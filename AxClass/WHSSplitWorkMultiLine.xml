<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitWorkMultiLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSplitWork</c> class is responsible for separating selected worklines from the original work header. 
/// </summary>
internal class WHSSplitWorkMultiLine extends WhsSplitWork
{
    #OCCRetryCount

    private Map                         selectedWorkLines;
    private boolean                     anyReplenWorkLinksMovedToNewWork;
    private WHSInstrumentationLogger    logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedWorkLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map parmSelectedWorkLines(Map _selectedWorkLines = selectedWorkLines)
    {
        selectedWorkLines = _selectedWorkLines;

        return selectedWorkLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCurrentWorkLineToNewWorkHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the current workline from the original work to the new work and cancells the line from the original work.
    /// </summary>
    /// <param name = "_originalWorkLine">The work line which will be moved.</param>
    [Hookable(false)]
    protected void moveCurrentWorkLineToNewWorkHeader(WHSWorkLine _originalWorkLine)
    {
        WHSWorkLine newWorkLine;
        
        WhsSplitWork::initializeNewWorkLineFromOriginalWorkLine(_originalWorkLine, newWorkLine);

        ttsbegin;

        newWorkLine.WorkId     = newWorkId;
        newWorkLine.LineNum    = newWorkLineNum;
        newWorkLine.Skipped    = NoYes::No;
        newWorkLine.insert();

        _originalWorkLine.WorkStatus         = WHSWorkStatus::Cancelled;
        _originalWorkLine.QtyRemain          = 0;
        _originalWorkLine.InventQtyRemain    = 0;
        _originalWorkLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCurrentWorkLineLinksToNewWorkHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the links related to the current workline from the original work to the new work.
    /// </summary>
    [Hookable(false)]
    protected void moveCurrentWorkLineLinksToNewWorkHeader()
    {
        ttsbegin;

        // The order of moving the WHSReplenWorkLink first and WHSWorkInventTrans afterwards is important when concurrently Splitting work and executing the replenishment work related to the work being split.
        // When having a demand work with two pick lines and the first pick line has two related replenishment works with a single Pick/Put and trying to concurrently Split the first pick line and execute one of the replenishment works,
        // if the replenishment execution updates the WHSReplenWorkLink, the splitting has to wait to update WHSReplenWorkLink until the replenishment execution transaction is committed.
        // After updating the WHSReplenWorkLink it is important to have the code to move the WHSWorkInventTrans, so the WHSWorkInvenTrans created by the execution of the replenishment work will be move correctly when splitting work.
            
        this.updateReplenishmentWorkLinksSplitWorkMultiLine(newWorkId, newWorkLineNum);
        this.updateWorkInventoryTransactionReference(newWorkId, newWorkLineNum);
        this.updateWorkExceptionLog(newWorkId, newWorkLineNum);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReplenishmentWorkLinksSplitWorkMultiLine</Name>
				<Source><![CDATA[
    private void updateReplenishmentWorkLinksSplitWorkMultiLine(WHSWorkId _workId, LineNum _lineNum)
    {
        WHSReplenWorkLink replenWorkLinkDemand;

        update_recordset replenWorkLinkDemand
            setting DemandWorkId = _workId,
                DemandLineNum = _lineNum
            where replenWorkLinkDemand.DemandWorkId == origWorkId
                && replenWorkLinkDemand.DemandLineNum == currentLineNum;

        if (replenWorkLinkDemand.RowCount() > 0)
        {
            anyReplenWorkLinksMovedToNewWork = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockAndCountLockedWorkLines</Name>
				<Source><![CDATA[
    private NumberOfRecords lockAndCountLockedWorkLines()
    {
        WHSWorkLine workLineLocked;
        NumberOfRecords numOfLockedRecords;

        workLineLocked.readPast(true);

        while select pessimisticLock RecId from workLineLocked
            where workLineLocked.workId == origWorkId
        {
            numOfLockedRecords++;
        }

        return numOfLockedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireWaveLock</Name>
				<Source><![CDATA[
    private void acquireWaveLock()
    {
        WHSWorkTable originalWorkTable = WHSWorkTable::find(origWorkId);

        // A lock on the Wave table is acquired in order to prevent releasing the wave while a work is being split which can cause an incorrect blocked state on the new work. 

        WHSWaveTable waveTable;

        using (var activityContext = logger.splitWorkMultiLine().acquireWaveLock())
        {
            select firstonly repeatableread waveTable
                where waveTable.WaveId == originalWorkTable.WaveId;

            logger.logRecordInformation(waveTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireLocks</Name>
				<Source><![CDATA[
    private void acquireLocks()
    {
        NumberOfRecords workLineCount = WHSWorkTable::numberOfWorkLines(origWorkId);
        
        NumberOfRecords numOfLockedRecords = this.lockAndCountLockedWorkLines();

        this.validateAllWorkLinesAreLocked(numOfLockedRecords, workLineCount);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllWorkLinesAreLocked</Name>
				<Source><![CDATA[
    private void validateAllWorkLinesAreLocked(NumberOfRecords _numOfLockedRecords, NumberOfRecords _workLineCount)
    {
        if (_numOfLockedRecords < _workLineCount)
        {
            throw error("@WAX:LocksNotAcquired");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedLinesCanBeSplit</Name>
				<Source><![CDATA[
    private void validateSelectedLinesCanBeSplit()
    {
        WHSSplitWorkMultiLineValidator splitWorkmultiLineValidator =
            WHSSplitWorkMultiLineValidator::newFromSelectedWorkLinesAndWorkId(selectedWorkLines, origWorkId);

        WHSSplitWorkMultiLineValidatorResult canSelectedLinesBeSplit =
            splitWorkmultiLineValidator.validateSelectedWorkLinesCanBeSplit();

        if (!canSelectedLinesBeSplit.parmCanSplitWorkResult())
        {
            throw error(canSelectedLinesBeSplit.parmErrorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the selected work lines to a new work header.
    /// </summary>
    /// <returns>
    /// The newly created work ID
    /// </returns>
    [Hookable(false)]
    internal WHSWorkId splitWork()
    {
        using (var activityContext = logger.splitWorkMultiLine().executeSplitWork())
        {
            try
            {
                ttsbegin;

                this.acquireLocks();

                this.validateSelectedLinesCanBeSplit();

                this.createWorkTable();

                using (WHSSkipWorkIsBeingSplitValidationContext context = WHSSkipWorkIsBeingSplitValidationContext::newSkipWorkBeingSplitValidation())
                {
                    this.splitWorkLines();
                }

                this.computeNewBlockedStatus();

                this.logWorkCreationSuccess();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
          
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
   
            WHSWorkLineCache::remove(origWorkId);

            return newWorkId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeNewBlockedStatus</Name>
				<Source><![CDATA[
    private void computeNewBlockedStatus()
    {
        this.computeNewWorkBlockedStatus();

        if (anyReplenWorkLinksMovedToNewWork)
        {   
            this.tryUnblockOriginalWorkForReplenishment();
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnblockOriginalWorkForReplenishment</Name>
				<Source><![CDATA[
    private void tryUnblockOriginalWorkForReplenishment()
    {
        WHSWorkTable originalWorktable = WHSWorkTable::find(origWorkId, true);
        
        WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(origWorkId)
            .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::UnProcessedReplenishmentWork);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeNewWorkBlockedStatus</Name>
				<Source><![CDATA[
    private void computeNewWorkBlockedStatus()
    {
        this.acquireWaveLock();

        WHSWorkTable newWorktable = WHSWorkTable::find(newWorkId);

        container reasonTypes;

        reasonTypes += WHSWorkBlockingReasonType::UnProcessedReplenishmentWork;
        reasonTypes += WHSWorkBlockingReasonType::HeldWave;

        // The new work might be blocked only by HeldWave and Replenishment BlockingReasons
        WHSWorkBlockingConsistencyChecks::addMissingBlockingReasons(newWorktable, reasonTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldWorkLineBeMovedToNewWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the passed workline should be moved to the new work header.
    /// </summary>
    /// <param name = "_workLine">The workLine.</param>
    /// <returns>True, if the work is blocked by the passed reason type; otherwise, false.</returns>
    [Hookable(false)]
    protected boolean shouldWorkLineBeMovedToNewWork(WHSWorkLine _workLine)
    {
        return !doneWithPicks && selectedWorkLines.exists(_workLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLineLinksForNonInitialPickWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the links of a non initial pick line.
    /// </summary>
    [Hookable(false)]
    internal void updateWorkLineLinksForNonInitialPickWorkLine()
    {
        // All the lines which are being moved have status Open, so non initial pick lines have no WHSWorkInventTrans associated.
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseWorkLineCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line counter when handling the non initial pick lines.
    /// </summary>
    [Hookable(false)]
    internal void increaseWorkLineCounter()
    {
        ++newWorkLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRenumberWorkLineOriginalWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worklines should be renumbered on original work.
    /// </summary>
    ///<returns>True, if the worklines should be renumbered on original work; otherwise, false.</returns>
    [Hookable(false)]
    protected boolean shouldRenumberWorkLineOriginalWork()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkLineStayingOnOriginalWorkHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the worklines which are staying on the original work header when splitting work.
    /// </summary>
    /// <param name = "_workLineRecId">The RecId of the workLine.</param>
    [Hookable(false)]
    protected void handleWorkLineStayingOnOriginalWorkHeader(WHSWorkLineRecId _workLineRecId)
    {
        WHSWorkLine workLine = WHSWorkLine::findByRecId(_workLineRecId);

        this.initializeChangedToDoFields(workLine);

        qtyToDo                += workLine.QtyWork;
        qtyToDoInvent          += workLine.InventQtyWork;
        prevToDoItemId         = workLine.ItemId;
        prevToDoInventDimId    = workLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkCreationSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs successful creation of new work header to <c>WHSWorkCreateHistory</c> table.
    /// </summary>
    private void logWorkCreationSuccess()
    {
        InfoMessage successMessage = strfmt("@WAX:WorkHeaderCreatedBySplitting", newWorkId, origWorkId);

        WHSWorkCreateHistory::createWorkHistoryLine(WHSWorkTable::find(newWorkId).WorkBuildId,
                                                    successMessage,
                                                    false);

        info(successMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSWorkTable</c> with modified data.
    /// </summary>
    private void createWorkTable()
    {
        WHSWorkTable newWorkTable;
        WHSWorkTable origWorkTable = WHSWorkTable::find(origWorkId);

        buf2Buf(origWorkTable, newWorkTable);

        newWorkTable.setWorkId();
        newWorkTable.LockedUser               = '';
        newWorkTable.TargetLicensePlateId     = '';
        newWorkTable.UserManuallyAssigned     = NoYes::No;
        newWorkTable.WorkInProcessUTCDateTime = utcDateTimeNull();
        newWorkTable.WorkStatus               = WHSWorkStatus::Open;
        newWorkTable.Frozen                   = NoYes::No; // Frozen status will be calculated after moving the work lines

        newWorkId = newWorkTable.WorkId;

        newWorkTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMultiLineSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSSplitWorkMultiLine</c> class.
    /// </summary>
    /// <param name="_selectedWorkLines">
    /// The selected work lines to be split.
    /// </param>
    /// <param name="_originalWorkId">
    /// The id of the work that will be split.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSSplitWorkMultiLine</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSSplitWorkMultiLine initializeMultiLineSplit(
        Map         _selectedWorkLines,
        WHSWorkId   _originalWorkId)
    {
        WHSSplitWorkMultiLine whsSplitWorkMultiLine = WHSSplitWorkMultiLine::construct();

        whsSplitWorkMultiLine.parmOrigWorkId(_originalWorkId);

        whsSplitWorkMultiLine.parmSelectedWorkLines(_selectedWorkLines);

        whsSplitWorkMultiLine.initValues();

        return whsSplitWorkMultiLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSplitWorkMultiLine construct()
    {
        return new WHSSplitWorkMultiLine();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>