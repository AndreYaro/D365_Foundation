<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDetailDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxTransDetailDP</c> class declares the variables that are required for the <c>TaxTransDetail</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxTransDetail)),
    SRSReportParameterAttribute(classStr(TaxTransDetailRdlContract))
]
public class TaxTransDetailDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxTransDetailRdlContract contract;
    TaxTransDetailTmp taxTransDetailTmp;
    TaxTransDetailTmp taxTransDetailTmpMainAccount;
    boolean showVATDueDate;
    int taxTransDSNo_W;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildMainAccountFromGeneralAccountEntry</Name>
				<Source><![CDATA[
    private void buildMainAccountFromGeneralAccountEntry()
    {
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountView;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        Ledger ledger;
        CompanyInfo companyInfo;

        //  Get all distribution details for each TaxTrans using the tax transaction general journal account entry link table
        insert_recordset taxTransDetailTmpMainAccount (TaxTransRecId, MainAccount, FullyQualifiedAccount, GeneralJournalEntryDataArea)
        select TaxTransRecId from taxTransDetailTmp
            group by TaxTransRecId
            where taxTransDetailTmp.SourceDocumentLine == 0
            join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.taxTrans == taxTransDetailTmp.TaxTransRecId
                && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
            outer join MainAccount, FullyQualifiedAccount from mainAccountView
                group by MainAccount, FullyQualifiedAccount
                where mainAccountView.LedgerDimensionId == taxTransGeneralJournalAccountEntry.LedgerDimension
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry
            join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join ledger
                where ledger.RecId == generalJournalEntry.Ledger
            join DataArea from companyInfo
                group by DataArea
                where companyInfo.RecId == ledger.PrimaryForLegalEntity;

        this.updateMainAccountDetail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMainAccountFromSourceDocumentLine</Name>
				<Source><![CDATA[
    private void buildMainAccountFromSourceDocumentLine()
    {
        AccountingDistribution accountingDistribution;
        SourceDocumentLine sourceDocumentLineForTaxTrans;
        MainAccountLedgerDimensionView mainAccountView;
        TaxDocCompLineSourceDocLine taxDocumentComponentLineSDL;

        //  Get all distribution details for each TaxTrans by using the SourceDocumentLine
        insert_recordset taxTransDetailTmpMainAccount (TaxTransRecId, GeneralJournalEntryDataArea, MainAccount, FullyQualifiedAccount)
        select TaxTransRecId, GeneralJournalEntryDataArea  from taxTransDetailTmp
            group by TaxTransRecId, GeneralJournalEntryDataArea
            where taxTransDetailTmp.SourceDocumentLine > 0
            join sourceDocumentLineForTaxTrans
                where sourceDocumentLineForTaxTrans.RecId == taxTransDetailTmp.SourceDocumentLine
            join accountingDistribution
                where accountingDistribution.AmountSource == DistributionAmountSource::PrimaryAmount &&
                      accountingDistribution.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine
            join MainAccount, FullyQualifiedAccount from mainAccountView
                group by MainAccount, FullyQualifiedAccount
                where mainAccountView.LedgerDimensionId == AccountingDistribution.LedgerDimension
            notexists join taxDocumentComponentLineSDL
                where taxDocumentComponentLineSDL.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine;

        //  This is for GTE scenario
        //  Get all distribution details for each TaxTrans by using the SourceDocumentLine
        SourceDocumentLine taxComponentSourceDocumentLine;

        insert_recordset taxTransDetailTmpMainAccount (TaxTransRecId, GeneralJournalEntryDataArea, MainAccount, FullyQualifiedAccount)
        select TaxTransRecId, GeneralJournalEntryDataArea  from taxTransDetailTmp
            group by TaxTransRecId, GeneralJournalEntryDataArea
            where taxTransDetailTmp.SourceDocumentLine > 0
            join sourceDocumentLineForTaxTrans
                where sourceDocumentLineForTaxTrans.RecId == taxTransDetailTmp.SourceDocumentLine
            join taxDocumentComponentLineSDL
                where taxDocumentComponentLineSDL.SourceDocumentLine == sourceDocumentLineForTaxTrans.ParentSourceDocumentLine
            join taxComponentSourceDocumentLine
                where taxComponentSourceDocumentLine.RecId == taxDocumentComponentLineSDL.SourceDocumentLine
            join accountingDistribution
                where accountingDistribution.AmountSource == DistributionAmountSource::PrimaryAmount &&
                      accountingDistribution.SourceDocumentLine == taxComponentSourceDocumentLine.ParentSourceDocumentLine
            join MainAccount, FullyQualifiedAccount from mainAccountView
                group by MainAccount, FullyQualifiedAccount
                where mainAccountView.LedgerDimensionId == AccountingDistribution.LedgerDimension;

        this.updateMainAccountDetail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxTransDetailTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TaxTransDetailTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxTransDetailTmp))
    ]
    public TaxTransDetailTmp getTaxTransDetailTmp()
    {
        select taxTransDetailTmp
            order by taxTransDetailTmp.TaxCode, taxTransDetailTmp.TaxDirection, taxTransDetailTmp.TransDate,  taxTransDetailTmp.TaxTransRecId, taxTransDetailTmp.TaxAmount desc;
        return taxTransDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMainAccountDetail</Name>
				<Source><![CDATA[
    private void insertMainAccountDetail()
    {
        insert_recordset taxTransDetailTmp
            (SourceDocumentLine, CustInvoiceJourRecId, CustTransRecId, Name,
            name1, Reversed, showVATDueDate_W, Source, TaxCode,
            TaxDirection, TraceNum, TransDate, VatDueDate_W, VATNum,
            VATNum1, VATNum2, VATNum3, VATNum4, VendInvoiceJourRecId,VendTransRecId,
            Voucher, TaxTransRecId, MainAccount, FullyQualifiedAccount, GeneralJournalEntryDataArea)
        select  SourceDocumentLine, CustInvoiceJourRecId, CustTransRecId, Name,
            name1, Reversed, showVATDueDate_W, Source, TaxCode,
            TaxDirection, TraceNum, TransDate, VatDueDate_W, VATNum,
            VATNum1, VATNum2, VATNum3, VATNum4, VendInvoiceJourRecId,VendTransRecId,
            Voucher, TaxTransRecId, MainAccount, FullyQualifiedAccount, GeneralJournalEntryDataArea from taxTransDetailTmpMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpForPrimaryTaxTransRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a row in the <c>TaxTransDetailTmp</c> table representing the primary row in the report for a
    /// <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object that contains the joined table buffers from which to retrieve additional
    /// information.
    /// </param>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> table buffer to set the fields in the <c>TaxTransDetailTmp</c> temporary table.
    /// </param>
    /// <param name="useTaxTransSourceDocumentLine">
    /// Identifies when we need to set SourceDocumentLine in the <c>TaxTransDetailTmp</c> temporary table.
    /// </param>
    protected void insertTmpForPrimaryTaxTransRow(QueryRun _queryRun, TaxTrans _taxTrans, boolean useTaxTransSourceDocumentLine = false)
    {
        VendInvoiceJour vendInvoiceJour = _queryRun.get(tableNum(VendInvoiceJour));
        CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));
        ProjInvoiceJour projInvoiceJour = _queryRun.get(tableNum(ProjInvoiceJour));

        TaxTrans_W taxTrans_W;
        int sign = this.isReversalTransaction(_taxTrans) ? -1 : 1;

        if (showVATDueDate)
        {
            taxTrans_W = _queryRun.getNo(taxTransDSNo_W);
        }
        CustTable custTable = _queryRun.get(tableNum(CustTable));
        VendTable vendTable = _queryRun.get(tableNum(VendTable));
        CustTrans custTrans = _queryRun.get(tableNum(CustTrans));
        VendTrans vendTrans = _queryRun.get(tableNum(VendTrans));
        TransactionReversalTrans transactionReversalTrans = _queryRun.get(tableNum(TransactionReversalTrans));
        SubledgerVoucherGeneralJournalEntry	subledgerVoucherGeneralJournalEntry = _queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));

        if (useTaxTransSourceDocumentLine)
        {
            taxTransDetailTmp.SourceDocumentLine = _taxTrans.SourceDocumentLine;
        }

        taxTransDetailTmp.TaxAmount = _taxTrans.TaxAmount;
        taxTransDetailTmp.TaxBaseAmount = sign * _taxTrans.TaxBaseAmount;
        taxTransDetailTmp.TaxInCostPriceMST = _taxTrans.TaxInCostPriceMST;
        taxTransDetailTmp.TransDate = _taxTrans.TransDate;
        taxTransDetailTmp.Voucher = _taxTrans.Voucher;
        taxTransDetailTmp.TaxDirection = _taxTrans.TaxDirection;
        taxTransDetailTmp.TaxCode = _taxTrans.TaxCode;
        taxTransDetailTmp.Source = _taxTrans.Source;
        taxTransDetailTmp.GeneralJournalEntryDataArea = _taxTrans.dataAreaId;

        taxTransDetailTmp.TaxTransRecId = _taxTrans.RecId;
        taxTransDetailTmp.CustInvoiceJourRecId = custInvoiceJour.RecId;
        taxTransDetailTmp.VendInvoiceJourRecId = vendInvoiceJour.RecId;
        taxTransDetailTmp.CustTransRecId = custTrans.RecId;
        taxTransDetailTmp.VendTransRecId = vendTrans.RecId;
        taxTransDetailTmp.GeneralJournalEntry = subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        taxTransDetailTmp.ShowVatDueDate_W = NoYes::No;
        if (showVATDueDate)
        {
            taxTransDetailTmp.ShowVatDueDate_W = NoYes::Yes;
            taxTransDetailTmp.VatDueDate_W = taxTrans_W.VatDueDate_W;
        }

        if (custInvoiceJour.RecId)
        {
            taxTransDetailTmp.vatNum = custInvoiceJour.vatNum;
        }
        if (vendInvoiceJour.RecId)
        {
            taxTransDetailTmp.vatNum1 = vendInvoiceJour.vatNum;
        }
        if (projInvoiceJour.RecId)
        {
            taxTransDetailTmp.VATNum4 = projInvoiceJour.VATNum;
        }

        if (custTable.RecId)
        {
            taxTransDetailTmp.vatNum2 = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _taxTrans.TransDate);
            taxTransDetailTmp.Name = custTable.name();
        }
        if (vendTable.RecId)
        {
            taxTransDetailTmp.vatNum3 = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _taxTrans.TransDate);
            taxTransDetailTmp.Name1 = vendTable.name();
        }

        taxTransDetailTmp.Reversed = transactionReversalTrans.Reversed;
        taxTransDetailTmp.TraceNum = transactionReversalTrans.TraceNum;

        taxTransDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and inserts data to <c>TaxTransDetailTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            QueryRun queryRun = new QueryRun(this.parmQuery());

            contract = this.parmDataContract() as TaxTransDetailRdlContract;

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                date fromVATdate = contract.parmFromVATDate();
                date toVATDate = contract.parmToVATDate();

                if (toVATDate == dateNull())
                {
                    toVATDate = dateMax();
                }

                QueryBuildDataSource qbdsTaxTrans_W = TaxTrans::addDataSource(queryRun.query().dataSourceNo(1), tableNum(TaxTrans_W), JoinMode::InnerJoin);
                qbdsTaxTrans_W.addRange(fieldNum(TaxTrans_W, VatDueDate_W)).value(SysQuery::range(fromVATdate, toVATDate));
                if (qbdsTaxTrans_W)
                {
                    taxTransDSNo_W = qbdsTaxTrans_W.id();
                    showVATDueDate = true;
                }
            }

            boolean hasSourceDocumentLines;
            boolean hasGeneralAccountEntryLines;
            Set taxTransProcessedSet = new Set(Types::Int64); // This set is used to handle the taxtrans which has been processed. We only process each TaxTrans record once.

            if (TaxReportTmpTableDisposeFlight::instance().isEnabled())
            {
                taxTransDetailTmpMainAccount.setConnection(this.parmUserConnection());
            }
            else
            {
                this.takeOwnershipOfTempTable(taxTransDetailTmpMainAccount);
            }

            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                // The query outer joins to multiple source tables (CustTrans, VendTrans, BankAccountTrans) based on voucher.
                // The join is only used to identify the AccountNum/Id and type (e.g. Customer, Vendor, Bank).
                // Joining this information in the query performs better than an individual select on each TaxTrans record but
                // has the caveat that the join may return the same TaxTrans multiple times.
                // Check the taxTransProcessedMap to ensure we only process each TaxTrans record once.
                if (!taxTransProcessedSet.in(taxTrans.RecId))
                {
                    taxTransProcessedSet.add(taxTrans.RecId);

                    TransactionReversalTrans transactionReversalTrans = queryRun.get(tableNum(TransactionReversalTrans));
                    if (contract.parmIncludeReversed() == false && transactionReversalTrans.RecId != 0)
                    {
                        continue;
                    }

                    taxTransDetailTmp.clear();

                    // Find the account number detail data associated with the current TaxTrans record
                    // Use source document data if possible, otherwise revert to use data linked via TaxTransGeneralJournalAccountEntry table
                    // Note: There are cases where a SourceDocLine value references the original source document line which is not useful to
                    // this process. In these cases we revert to the TaxTransGeneralJourncalAccountEntry link table.
                    if (taxTrans.SourceDocumentLine &&
                        taxTrans.TaxOrigin != TaxOrigin::Payment &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                        taxTrans.TaxOrigin != TaxOrigin::CashDisc)
                    {
                        hasSourceDocumentLines = true;
                        this.insertTmpForPrimaryTaxTransRow(queryRun, taxTrans, true);
                    }
                    else
                    {
                        hasGeneralAccountEntryLines = true;
                        this.insertTmpForPrimaryTaxTransRow(queryRun, taxTrans, false);
                    }
                }
            }

            // Performance: We process these main account details in sets.
            // We also build both sets (taxTransCodeTmpSourceDocumentLine and taxTransCodeTmpGeneralAccountEntry)
            // before adding the results to taxTransCodeTmp.  This keeps taxTransCodeTmp as small as possible
            // in order to process buildGeneralAccountEntryMainAccount as efficiently as possible.
            if (hasSourceDocumentLines)
            {
                this.buildMainAccountFromSourceDocumentLine();
            }

            if (hasGeneralAccountEntryLines)
            {
                this.buildMainAccountFromGeneralAccountEntry();
            }
            this.insertMainAccountDetail();
            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::Yes;
            throw Exception::Error;
        }
        finally
        {
            if (TaxReportTmpTableDisposeFlight::instance().isEnabled())
            {
                taxTransDetailTmpMainAccount.dispose();
            }
            else
            {
                this.releaseOwnershipOfTempTable(taxTransDetailTmpMainAccount);
            }

            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxTransDetail), MenuItemType::Output).label(), 'TaxTransDetail', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountDetail</Name>
				<Source><![CDATA[
    private void updateMainAccountDetail()
    {
        //  Update these distribution details with the reference information
        //  Note: We do not update the amounts because it will cause incorrect report totals
        update_recordSet taxTransDetailTmpMainAccount
            setting
                SourceDocumentLine      = taxTransDetailTmp.SourceDocumentLine,
                CustInvoiceJourRecId    = taxTransDetailTmp.CustInvoiceJourRecId,
                CustTransRecId          = taxTransDetailTmp.CustTransRecId,
                Name                    = taxTransDetailTmp.name,
                name1                   = taxTransDetailTmp.name1,
                Reversed                = taxTransDetailTmp.Reversed,
                showVATDueDate_W        = taxTransDetailTmp.showVatDueDate_W,
                Source                  = taxTransDetailTmp.Source,
                TaxCode                 = taxTransDetailTmp.TaxCode,
                TaxDirection            = taxTransDetailTmp.TaxDirection,
                TraceNum                = taxTransDetailTmp.TraceNum,
                TransDate               = taxTransDetailTmp.TransDate,
                VatDueDate_W            = taxTransDetailTmp.VatDueDate_W,
                VATNum                  = taxTransDetailTmp.VATNum,
                VATNum1                 = taxTransDetailTmp.VATNum1,
                VATNum2                 = taxTransDetailTmp.VATNum2,
                VATNum3                 = taxTransDetailTmp.VATNum3,
                VATNum4                 = taxTransDetailTmp.VATNum4,
                VendInvoiceJourRecId    = taxTransDetailTmp.VendInvoiceJourRecId,
                VendTransRecId          = taxTransDetailTmp.VendTransRecId,
                Voucher                 = taxTransDetailTmp.Voucher
            join taxTransDetailTmp
                where taxTransDetailTmp.TaxTransRecId == taxTransDetailTmpMainAccount.TaxTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReversalTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether taxTrans transaction is reversal transaction.
    /// </summary>
    /// <param name = "_taxTras">The <c>TaxTrans</c> table.</param>
    /// <returns>returns true if it is reversal transaction otherwise false.</returns>
    private boolean isReversalTransaction(TaxTrans _taxTras)
    {
        #isoCountryRegionCodes
        return ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]) 
                || TaxTransDetailReportReverseChargeSignCorrectionFlight::instance().isEnabled())
            && _taxTras.ReverseCharge_W == NoYes::Yes
            && _taxTras.TaxDirection == TaxDirection::OutgoingTax);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>