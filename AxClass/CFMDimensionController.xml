<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDimensionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
///<summary>
/// The <c>CFMDimensionController</c> class provides control interaction logic for use of the
/// dimension entry control for cash flow management module in the UI.
/// </summary>
public class CFMDimensionController extends LedgerDimensionAccountController
{
    LedgerDimensionBase activeDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.parmLedgerDimensionType(LedgerDimensionType::BudgetPlanning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doIncludeTotalDimAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the total dimension attribute values are included in the lookup.
    /// </summary>
    /// <returns>
    /// true if the total values are included in the lookup; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Total values are always included for the cash flow management controller so this method always returns true.
    /// </remarks>
    protected boolean doIncludeTotalDimAttributeValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountStructureForced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to only search for values for the current account structure before the point of disambiguation.
    /// </summary>
    /// <returns>
    /// true to only search for values for the current account structure before the point of disambiguation; otherwise, false.
    /// </returns>
    protected boolean isAccountStructureForced()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>DimensionValidationStatus</c> enumeration value
    /// for the dimension value combination currently in the control.
    /// </summary>
    /// <param name="_originalCompany">
    /// The company that the controller was called from before any calls to change company.
    /// </param>
    /// <param name="_errorMessages">
    /// The list of error messages.
    /// </param>
    /// <param name="_dimensionStorage">
    /// The dimension storage object to use in validation; optional.
    /// </param>
    /// <returns>
    /// A <c>DimensionValidationStatus</c> enumeration value.
    /// </returns>
    public DimensionValidationStatus validateCombination(DataAreaId _originalCompany, List _errorMessages, DimensionStorage _dimensionStorage = null)
    {
        DimensionValidationStatus ret = DimensionValidationStatus::Valid;

        for (int i = 1; i <= currentSegments.lastIndex(); i++)
        {
            DimensionControlSegment controlSegment = currentSegments.value(i);

            if (controlSegment.parmValidationStatus() != SegmentValidationStatus::Valid)
            {
                ret = DimensionValidationStatus::Invalid;
                List::merge(_errorMessages, this.validateSegmentValue(controlSegment.parmDimensionAttributeValue(), controlSegment.parmValue(), i));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSegmentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified dimension attribute value.
    /// </summary>
    /// <param name="_dimAttributeValue">
    /// The record ID of the dimension attribute value to validate.
    /// </param>
    /// <param name="_value">
    /// The display value of the specified dimension attribute.
    /// </param>
    /// <param name="_segmentIndex">
    /// The index of the segment in the control where the specified dimension attribute value was used.
    /// </param>
    /// <returns>
    /// A list of validation error messages.
    /// </returns>
    protected List validateSegmentValue(DimensionAttributeValue _dimAttributeValue, str _value, int _segmentIndex)
    {
        List errorMessages = new List(Types::String);

        if (this.isAllowedForManualEntry(_dimAttributeValue, _value, errorMessages))
        {
            List errorList = DimensionController::validateSegment(
                    this.currentSegments,
                    _dimAttributeValue,
                    _value,
                    _segmentIndex,
                    false,
                    this.parmControlDate(),
                    this.parmDoValueActiveDatesValidation(),
                    this.parmDoValueSuspendedValidation());

            errorMessages.appendList(errorList);
        }

        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get account structure
    /// </summary>
    /// <returns>get account structure reference</returns>
    public DimensionHierarchyId getAccountStructure()
    {
        DimensionHierarchyId ret = CFMParameters::findInCentralizedPaymentsCompany().DimensionSet;

        if (activeDimension)
        {
            DimensionAttributeValueCombination valueCombination = DimensionAttributeValueCombination::find(activeDimension);

            if (valueCombination.AccountStructure)
            {
                ret = valueCombination.AccountStructure;
            }

            DimensionHierarchy hierarchy = DimensionHierarchy::getFirstDimensionHierarchyFromDimensionCombination(valueCombination.RecId);

            if (hierarchy.RecId)
            {
                ret = hierarchy.RecId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowClearReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear old reference and set active dimension
    /// </summary>
    /// <param name = "_ledgerDimension"></param>
    /// <returns></returns>
    public boolean allowClearReference(LedgerDimensionBase _ledgerDimension)
    {
        super(_ledgerDimension);

        firstInput = true;
        initialSegmentsLoaded = false;
        activeDimension = _ledgerDimension;

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>