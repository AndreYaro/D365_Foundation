<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferFR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transfers intrastat in France country context.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoFR)]
public class IntrastatTransferFR extends IntrastatTransfer implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour _custInvoiceJour,
                                                          CustInvoiceTrans _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        this.initCounty(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour             _custPackingSlipJour,
                                                         CustPackingSlipTrans            _custPackingSlipTrans,
                                                         CustPackingSlipJour_Intrastat   _custPackingSlipJour_Intrastat = null,
                                                         CustPackingSlipTrans_Intrastat  _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        this.initCounty(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        return super(_custInvoiceJour, _custInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        return super(_projInvoiceJour, _projInvoiceItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour,
                                                          VendInvoiceTrans _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        this.initCounty(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour             _vendPackingSlipJour,
                                                         VendPackingSlipTrans            _vendPackingSlipTrans,
                                                         VendPackingSlipJour_Intrastat   vendPackingSlipJour_Intrastat = null,
                                                         VendPackingSlipTrans_Intrastat  vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        this.initCounty(intrastat);

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustPckSlipTrans(CustPackingSlipJour _custPackingSlipJour, CustPackingSlipTrans _custPackingSlipTrans)
    {
        boolean ret;

        SalesTable salestable = SalesTable::find(_custPackingSlipTrans.SalesId);

        if(!(salestable.InterCompanyDirectDeliveryOrig && salestable.InterCompanyOrder))
        {
            ret = super(_custPackingSlipJour, _custPackingSlipTrans);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCounty</Name>
				<Source><![CDATA[
    private void initCounty(Intrastat _intrastat)
    {
        InventLocation inventLocation;
        VendInvoiceTrans vendInvoiceTrans;
        VendPackingSlipTrans vendPackingSlipTrans;

        switch (_intrastat.TransTableId)
        {
            case tablenum(CustInvoiceTrans):
                inventLocation = InventLocation::find(InventDim::find(CustInvoiceTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                break;

            case tablenum(CustPackingSlipTrans):
                inventLocation = InventLocation::find(InventDim::find(CustPackingSlipTrans::findRecId(_intrastat.TransRecId).InventDimId).InventLocationId);
                break;

            case tablenum(VendInvoiceTrans):
                vendInvoiceTrans = VendInvoiceTrans::findRecId(_intrastat.TransRecId);
                if (vendInvoiceTrans && (PurchTable::find(vendInvoiceTrans.PurchID).InterCompanyDirectDelivery == NoYes::Yes
                        || PurchLine::findInventTransId(vendInvoiceTrans.InventTransId).DeliveryType == TradeLineDlvType::DropShip))
                {
                    _intrastat.County = vendInvoiceTrans.DestCounty;
                }
                else
                {
                    inventLocation = InventLocation::find(InventDim::find(vendInvoiceTrans.InventDimId).InventLocationId);
                }
                break;

            case tablenum(VendPackingSlipTrans):
                vendPackingSlipTrans = VendPackingSlipTrans::findRecId(_intrastat.TransRecId);
                if (vendPackingSlipTrans && (PurchTable::find(vendPackingSlipTrans.OrigPurchid).InterCompanyDirectDelivery == NoYes::Yes
                        ||PurchLine::findInventTransId(vendPackingSlipTrans.InventTransId).DeliveryType == TradeLineDlvType::DropShip))
                {
                    _intrastat.County = vendPackingSlipTrans.DestCounty;
                }
                else
                {
                    inventLocation = InventLocation::find(InventDim::find(vendPackingSlipTrans.InventDimId).InventLocationId);
                }
                break;
        }

        if (inventLocation)
        {
            _intrastat.County = inventLocation.logisticsPostalAddress().County;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedDropShip</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedDropShip(LogisticsAddressCountryRegionId _countryRegionOfShipment, LogisticsAddressCountryRegionId _dlvCountryRegion)
    {
        return (this.isDomesticCache(_countryRegionOfShipment)
            || IntrastatCountryRegionParameters::isCountryRegionStateInEUByCountryAndStateId(_countryRegionOfShipment, stateIdOfShipment))
            && this.isCountryRegionStateInEU(deliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanyInfoCountryRegion</Name>
				<Source><![CDATA[
    protected boolean validateCompanyInfoCountryRegion(LogisticsAddressCountryRegionId _countryRegion)
    {
        boolean ret;

        if (IntrastatIncludeInterCompanyVendInvoiceReturnInFRFlight::instance().isEnabled()
            && ((vendInvoiceJourRun && vendInvoiceJourRun.InterCompanyPosted && vendInvoiceJourRun.PurchaseType == PurchaseType::ReturnItem)
                || (vendPackingSlipJourRun && vendPackingSlipJourRun.InterCompanyPosted && vendPackingSlipJourRun.PurchaseType == PurchaseType::ReturnItem)))
        {
            LogisticsPostalAddress postalAddress;
            postalAddress.CountryRegionId = _countryRegion;

            ret = this.isCountryRegionStateInEU(postalAddress);
        }
        else
        {
            ret = super(_countryRegion);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>