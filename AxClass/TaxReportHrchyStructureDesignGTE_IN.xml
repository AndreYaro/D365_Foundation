<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyStructureDesignGTE_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class manages the GTE tax hierarchy structure.
/// </summary>
[TaxReportHrchyStructureAttribute_IN(TaxReportHrchyStructDesignType_IN::GTE)]
public class TaxReportHrchyStructureDesignGTE_IN extends TaxReportSetOffStructureDesign_IN
{
    TaxSolutionScopeSetup       taxSolutionScopeSetup;
    TaxSolutionScope            taxSolutionScope;
    TaxRuntimeDefContext        defContext;
    TaxRuntimeDefContextVersion defContextVersion;
    TaxRuntimeDocContext        docContext;
    TaxRuntimeDocContextVersion docContextVersion;

    TaxSolutionScopeRecId hierarchyTaxSolutionScope;
    TaxRuntimeDefContextRecId hierarchyDefContext;
    TaxRuntimeDocContextRecId hierarchyDocContext;
    TaxRuntimeDefContextVersionRecId hierarchyDefContextVersion;
    TaxRuntimeDocContextVersionRecId hierarchyDocContextVersion;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextLevelNodeClass</Name>
				<Source><![CDATA[
    protected ClassId getNextLevelNodeClass(boolean _isRoot = false)
    {
        ClassId nextLevelClass;

        if(_isRoot)
        {
            nextLevelClass = classNum(TaxReportHrchyRootNode_IN);
        }
        else
        {
            switch(currentNode.parmClassId())
            {
                case classNum(TaxReportHrchyRootNode_IN):
                    nextLevelClass = classNum(TaxReportHrchyGTETaxTypeNode_IN);
                    break;

                case classNum(TaxReportHrchyGTETaxTypeNode_IN):
                    nextLevelClass = classNum(TaxReportHrchyGTETaxComponentNode_IN);
                    break;

                default:
                    nextLevelClass = classNum(TaxReportHrchyGTEReferenceNode_IN);
                    break;
            }
        }

        return nextLevelClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLevelNodes</Name>
				<Source><![CDATA[
    public List getNextLevelNodes(TaxReportHrchyNode_IN _currentNode, boolean _isRoot = false)
    {
        List nodeValues;

        this.parmCurrentNode(_currentNode);
        this.initFromTaxReportHierarchyVersion();

        switch(this.getNextLevelNodeClass(_isRoot))
        {
            case classNum(TaxReportHrchyRootNode_IN):
                nodeValues = this.getNodesForRoot();
                break;

            case classNum(TaxReportHrchyGTETaxTypeNode_IN):
                nodeValues = this.getNodesForTaxTypeLevel();
                break;

            case classNum(TaxReportHrchyGTETaxComponentNode_IN):
                nodeValues = this.getNodesForTaxComponentLevel();
                break;

            case classNum(TaxReportHrchyGTEReferenceNode_IN):
                nodeValues = this.getNodesForReferenceLevel();
                break;

            default:
                break;
        }

        return nodeValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForEnumReference</Name>
				<Source><![CDATA[
    private List getNodesForEnumReference(TaxRuntimeReferenceModel _referenceModel,
                                      TaxRuntimeComponentRecId _runtimeComponentRecId,
                                      RefRecId                 _referenceBindingVersionRecId)
    {
        TaxRuntimeReferenceModelAttr            referenceModelAttr;
        TaxRuntimeReferenceModelAttrVersion     referenceModelAttrVersion;
        TaxReportHrchyGTEReferenceEnumNode_IN   referenceNode;
        List                                    nodeList        = new List(Types::Class);
        boolean                                 emptyNodeAdded  = false;

        TaxRuntimeDefContextVersionRecId taxRuntimeDefContextVersionRecId = hierarchyDefContextVersion ? hierarchyDefContextVersion : defContextVersion.RecId;

        while select Name from referenceModelAttr
        order by Name
        where referenceModelAttr.TaxRuntimeReferenceModel == _referenceModel.RecId &&
              referenceModelAttr.DefContext               == defContext.RecId
        exists join referenceModelAttrVersion
            where referenceModelAttrVersion.TaxRuntimeReferenceModelAttr == referenceModelAttr.RecId &&
                  referenceModelAttrVersion.DefContextVersion            == taxRuntimeDefContextVersionRecId
        {
            referenceNode = TaxReportHrchyGTEReferenceEnumNode_IN::construct();
            referenceNode.parmReferenceBindingVersion(_referenceBindingVersionRecId);
            referenceNode.parmCanMatch(NoYes::Yes);
            referenceNode.parmCanSettle(NoYes::Yes);
            referenceNode.parmDisplayValue(referenceModelAttr.Name);
            referenceNode.parmComboDisplayValue(referenceModelAttr.Name);
            nodeList.addEnd(referenceNode);
            if (referenceModelAttr.Name == '')
            {
                emptyNodeAdded = true;
            }
        }
        if (!emptyNodeAdded)
        {
            referenceNode = TaxReportHrchyGTEReferenceEnumNode_IN::construct();
            referenceNode.parmReferenceBindingVersion(_referenceBindingVersionRecId);
            referenceNode.parmCanMatch(NoYes::Yes);
            referenceNode.parmCanSettle(NoYes::Yes);
            referenceNode.parmDisplayValue('');
            referenceNode.parmComboDisplayValue('');
            nodeList.addEnd(referenceNode);
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForReferenceLevel</Name>
				<Source><![CDATA[
    private List getNodesForReferenceLevel()
    {
        TaxRtLookupStructFieldBindingVersion    fieldBindingVersion;
        TaxRuntimeReferenceModel                referenceModel;
        TaxRuntimeReferenceModelVersion         referenceModelVersion;
        TaxRuntimeDocComponent                  runtimeDocComponent;
        TaxRuntimeComponentRecId                runtimeComponentRecId;
        SequenceNumber                          referenceLevel = 1;
        TaxReportHrchyGTENode_IN                currentGTENode;
        TaxReportHrchyGTEReferenceNode_IN       currentReferenceNode;
        List                                    nodeList = new List(Types::Class);

        TaxRuntimeDocContextRecId taxRuntimeDocContextRecId = hierarchyDocContext ? hierarchyDocContext : docContext.RecId;
        TaxRuntimeDefContextRecId taxRuntimeDefContextRecId = hierarchyDefContext ? hierarchyDefContext : defContext.RecId;
        TaxRuntimeDocContextVersionRecId taxRuntimeDocContextVersionRecId = hierarchyDocContextVersion ? hierarchyDocContextVersion : docContextVersion.RecId;
        TaxRuntimeDefContextVersionRecId taxRuntimeDefContextVersionRecId = hierarchyDefContextVersion ? hierarchyDefContextVersion : defContextVersion.RecId;

        currentGTENode       = currentNode as TaxReportHrchyGTENode_IN;

        if (!currentGTENode)
        throw error(Error::wrongUseOfFunction(funcName()));

        runtimeComponentRecId = currentGTENode.parmTaxRuntimeRecId();
        runtimeDocComponent   = TaxRuntimeDocComponent::findByRuntimeComponent(runtimeComponentRecId, taxRuntimeDocContextRecId);

        currentReferenceNode     = currentNode as TaxReportHrchyGTEReferenceNode_IN;
        if (currentReferenceNode)
        {
            referenceLevel = currentReferenceNode.parmReferenceSequence() + 1;
        }

        fieldBindingVersion = TaxRtLookupStructFieldBindingVersion::findByOwnerRefTypeAndSequence(runtimeDocComponent.TableId, runtimeDocComponent.RecId, TaxRuntimeLookupRefType::Settlement, referenceLevel, taxRuntimeDocContextVersionRecId);
        referenceModel      = TaxRuntimeReferenceModel::findByTaxRuntimeDefContext(taxRuntimeDefContextRecId, fieldBindingVersion.ReferenceModelName);

        if (referenceModel)
        {
            if (referenceModel.IsEnum)
            {
                nodeList = this.getNodesForEnumReference(referenceModel, runtimeComponentRecId, fieldBindingVersion.RecId);
            }
            else
            {
                referenceModelVersion = TaxRuntimeReferenceModelVersion::findByModelAndContextVersion(referenceModel.RecId, taxRuntimeDefContextVersionRecId);
                nodeList = this.getNodesForTableReference(referenceModel, referenceModelVersion, runtimeComponentRecId, fieldBindingVersion.RecId);
            }
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForTableReference</Name>
				<Source><![CDATA[
    private List getNodesForTableReference(TaxRuntimeReferenceModel         _referenceModel,
                                       TaxRuntimeReferenceModelVersion      _referenceModelVersion,
                                       TaxRuntimeComponentRecId             _runtimeComponentRecId,
                                       RefRecId                             _referenceBindingVersionRecId)
    {
        Common                                 referenceSourceTable;
        TaxReportHrchyGTEReferenceTableNode_IN referenceNode;
        QueryRun                               queryRun;
        Query                                  query;
        QueryBuildDataSource                   dataSource;
        List                                   nodeList = new List(Types::Class);
        boolean                                emptyNodeAdded = false;
        Name                                   referenceFieldName = _referenceModelVersion.NaturalKey;

        TaxRuntimeDefContextVersionRecId taxRuntimeDefContextVersionRecId = hierarchyDefContextVersion ? hierarchyDefContextVersion : defContextVersion.RecId;

        if (!referenceFieldName)
        {
            throw error(strFmt("@TaxGST:ErrorMessageOfNaturalKey", _referenceModel.Name));
        }

        query = new Query();
        dataSource = query.addDataSource(tablenum(TaxRegistrationNumbers_IN));
        dataSource.addRange(fieldNum(TaxRegistrationNumbers_IN, RegistrationType)).value(queryValue(TaxRegistrationType_IN::Company));
        dataSource.addRange(fieldNum(TaxRegistrationNumbers_IN, TaxType)).value(queryValue(TaxType_IN::GST));
        dataSource.addOrderByField(fieldNum(TaxRegistrationNumbers_IN, RegistrationNumber));
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            referenceSourceTable = queryRun.get(tablenum(TaxRegistrationNumbers_IN));
            referenceNode = TaxReportHrchyGTEReferenceTableNode_IN::construct();
            referenceNode.parmReferenceBindingVersion(_referenceBindingVersionRecId);
            referenceNode.parmCanMatch(NoYes::Yes);
            referenceNode.parmCanSettle(NoYes::Yes);
            referenceNode.parmDisplayValue(referenceSourceTable.getFieldValue('RegistrationNumber'));
            referenceNode.parmComboDisplayValue(referenceSourceTable.getFieldValue('RegistrationNumber'));
            nodeList.addEnd(referenceNode);
            if (referenceFieldName == '')
            {
                emptyNodeAdded = true;
            }
        }
        //Add an empty node
        if(!emptyNodeAdded)
        {
            referenceNode = TaxReportHrchyGTEReferenceTableNode_IN::construct();
            referenceNode.parmReferenceBindingVersion(_referenceBindingVersionRecId);
            referenceNode.parmCanMatch(NoYes::Yes);
            referenceNode.parmCanSettle(NoYes::Yes);
            referenceNode.parmDisplayValue('');
            referenceNode.parmComboDisplayValue('');
            nodeList.addEnd(referenceNode);
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForTaxComponentLevel</Name>
				<Source><![CDATA[
    private List getNodesForTaxComponentLevel()
    {
        TaxRuntimeComponent                  runtimeTaxComponent;
        TaxRuntimeComponentVersion           runtimeTaxComponentVersion;
        TaxRuntimeDocComponentVersion        runtimeDocTaxComponentVersion;

        TaxReportHrchyGTENode_IN      currentTaxTypeNode;
        TaxReportHrchyGTETaxComponentNode_IN taxComponentNode;
        List                                 nodeList = new List(Types::Class);

        TaxRuntimeDefContextVersionRecId taxRuntimeDefContextVersionRecId = hierarchyDefContextVersion ? hierarchyDefContextVersion : defContextVersion.RecId;
        TaxRuntimeDocContextVersionRecId taxRuntimeDocContextVersionRecId = hierarchyDocContextVersion ? hierarchyDocContextVersion : docContextVersion.RecId;

        currentTaxTypeNode = currentNode as TaxReportHrchyGTENode_IN;

        if (!currentTaxTypeNode)
        throw error(Error::wrongUseOfFunction(funcName()));

        while select Name, RecId from runtimeTaxComponent
        order by Name
        where runtimeTaxComponent.TaxRuntimeTaxType == currentTaxTypeNode.parmTaxRuntimeRecId()
        exists join runtimeTaxComponentVersion
            where runtimeTaxComponentVersion.TaxRuntimeComponent == runtimeTaxComponent.RecId &&
                  runtimeTaxComponentVersion.DefContextVersion   == taxRuntimeDefContextVersionRecId
        exists join runtimeDocTaxComponentVersion
            where runtimeDocTaxComponentVersion.TaxRuntimeComponentVersion == runtimeTaxComponentVersion.RecId
                  && runtimeDocTaxComponentVersion.DocContextVersion == taxRuntimeDocContextVersionRecId
        {
            taxComponentNode = TaxReportHrchyGTETaxComponentNode_IN::construct();
            taxComponentNode.parmTaxRuntimeTableId(runtimeTaxComponent.TableId);
            taxComponentNode.parmTaxRuntimeRecId(runtimeTaxComponent.RecId);
            taxComponentNode.parmDisplayValue(runtimeTaxComponent.Name);
            taxComponentNode.parmComboDisplayValue(runtimeTaxComponent.Name);
            taxComponentNode.parmCanPost(NoYes::Yes);
            taxComponentNode.parmCanMatch(NoYes::Yes);
            taxComponentNode.parmCanSettle(NoYes::Yes);
            nodeList.addEnd(taxComponentNode);
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForTaxTypeLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all child nodes of the current tax type node
    /// </summary>
    /// <returns>
    /// The list of all <c>TaxReportHrchyNode_IN</c> nodes.
    /// </returns>
    private List getNodesForTaxTypeLevel()
    {
        TaxRuntimeTaxType               runtimeTaxType;
        TaxRuntimeTaxTypeVersion        runtimeTaxTypeVersion;
        TaxRuntimeDocTaxTypeVersion     runtimeDocTaxTypeVersion;

        TaxReportHrchyGTETaxTypeNode_IN taxTypeNode;
        List nodeList = new List(Types::Class);

        TaxRuntimeDefContextVersionRecId taxRuntimeDefContextVersionRecId = hierarchyDefContextVersion ? hierarchyDefContextVersion : defContextVersion.RecId;
        TaxRuntimeDocContextVersionRecId taxRuntimeDocContextVersionRecId = hierarchyDocContextVersion ? hierarchyDocContextVersion : docContextVersion.RecId;
        while select Name, RecId from runtimeTaxType
        order by Name
        exists join runtimeTaxTypeVersion
            where runtimeTaxTypeVersion.TaxRuntimeTaxType == runtimeTaxType.RecId
                && runtimeTaxTypeVersion.DefContextVersion == taxRuntimeDefContextVersionRecId
        exists join runtimeDocTaxTypeVersion
            where runtimeDocTaxTypeVersion.TaxRuntimeTaxTypeVersion == runtimeTaxTypeVersion.RecId
                && runtimeDocTaxTypeVersion.DocContextVersion == taxRuntimeDocContextVersionRecId
        {
            taxTypeNode = TaxReportHrchyGTETaxTypeNode_IN::construct();
            taxTypeNode.parmTaxRuntimeTableId(runtimeTaxType.TableId);
            taxTypeNode.parmTaxRuntimeRecId(runtimeTaxType.RecId);
            taxTypeNode.parmDisplayValue(runtimeTaxType.Name);
            taxTypeNode.parmComboDisplayValue(runtimeTaxType.Name);
            nodeList.addEnd(taxTypeNode);
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransComboDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Combination display string for the specified record.
    /// </summary>
    /// <param name="_rootNode">
    /// The root node <c>TaxReportHrchyNode_IN</c> of the <c>TaxReportHierarchy_IN</c> instance.
    /// </param>
    /// <param name="_record">
    /// The record of TaxTrans.
    /// </param>
    /// <returns>
    /// The combination display string for the specified record.
    /// </returns>
    protected TaxReportHrchyNodeComboDisplayValue_IN getTransComboDisplayString(TaxReportHrchyNode_IN _rootNode,
                                                                            Common _record)
    {
        TaxTrans_IN                             taxTrans_IN = _record as TaxTrans_IN;
        TaxReportHrchyNodeComboDisplayValue_IN  nodeComboDisplayValue = _rootNode.parmComboDisplayValueStr();
        TaxReportHrchyNodeDisplayValue_IN       nodeDisplayValue;
        boolean                                 buildNextLevel = nodeComboDisplayValue != '';

        TaxReportHrchyNode_IN                   savedNode = currentNode;
        TaxReportHrchyGTENode_IN                nextNode;

        currentNode = _rootNode;

        while (buildNextLevel)
        {
            nextNode = new SysDictClass(this.getNextLevelNodeClass()).makeObject() as TaxReportHrchyGTENode_IN;

            nextNode.initFromParentNode(currentNode);
            [buildNextLevel, nodeDisplayValue] = nextNode.getNodeDisplayValueFromTaxTrans(taxTrans_IN, taxSolutionScope);

            if (buildNextLevel)
            {
                nodeComboDisplayValue = TaxReportHierarchyHelper_IN::getComboDisplayValue(nodeComboDisplayValue, nodeDisplayValue);
                currentNode = nextNode;
            }
        }

        currentNode = savedNode;

        return nodeComboDisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransComboDisplayValue</Name>
				<Source><![CDATA[
    protected TaxReportHrchyNodeComboDisplayValue_IN getTransComboDisplayValue(TaxReportHrchyNode_IN _rootNode, Common _record)
    {
        TaxTrans_IN                             taxTrans_IN = _record as TaxTrans_IN;
        TaxReportHrchyNodeComboDisplayValue_IN  nodeComboDisplayValue = int642str(_rootNode.parmRecId());
        TaxReportHrchyNodeDisplayValue_IN       nodeDisplayValue;
        boolean                                 buildNextLevel = nodeComboDisplayValue != '';

        TaxReportHrchyNode_IN                   savedNode = currentNode;
        TaxReportHrchyGTENode_IN                nextNode;

        currentNode = _rootNode;

        while (buildNextLevel)
        {
            nextNode = new SysDictClass(this.getNextLevelNodeClass()).makeObject() as TaxReportHrchyGTENode_IN;

            nextNode.initFromParentNode(currentNode);
            [buildNextLevel, nodeDisplayValue] = nextNode.getNodeDisplayValueFromTaxTrans(taxTrans_IN, taxSolutionScope);

            if (buildNextLevel)
            {
                nodeComboDisplayValue = TaxReportHierarchyHelper_IN::getComboDisplayValue(nodeComboDisplayValue, nodeDisplayValue);
                currentNode = nextNode;
            }
        }

        currentNode = savedNode;

        return nodeComboDisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxReportHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from the tax hierarchy.
    /// </summary>
    private void initFromTaxReportHierarchyVersion()
    {
        TaxReportHierarchyVersion_IN taxReportHierarchyVersion;
        TaxReportHierarchy_IN taxReportHierarchy;

        if (this.parmCurrentNode())
        {
            taxReportHierarchyVersion = TaxReportHierarchyVersion_IN::find(this.parmCurrentNode().parmTaxReportHierarchyVersion());
            taxReportHierarchy = TaxReportHierarchy_IN::find(taxReportHierarchyVersion.TaxReportHierarchy_IN);

            hierarchyTaxSolutionScope = taxReportHierarchy.TaxSolutionScope;
            hierarchyDefContextVersion = taxReportHierarchyVersion.DefContextVersion;
            hierarchyDocContextVersion = taxReportHierarchyVersion.DocContextVersion;
            hierarchyDefContext = TaxRuntimeDefContextVersion::find(hierarchyDefContextVersion).TaxRuntimeDefContext;
            hierarchyDocContext = TaxRuntimeDocContextVersion::find(hierarchyDocContextVersion).TaxRuntimeDocContext;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxSolutionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from the tax solution scope
    /// </summary>
    private void initFromTaxSolutionScope()
    {
        taxSolutionScopeSetup = TaxSolutionScopeSetup::findByLedger(Ledger::current());
        taxSolutionScope      = TaxSolutionScope::find(taxSolutionScopeSetup.TaxSolutionScope);
        defContext            = TaxRuntimeDefContext::findByScopeAndSolution(taxSolutionScope.RecId, taxSolutionScope.Solution);
        defContextVersion     = TaxRuntimeDefContextVersion::findByDefContextAndSolutionVersion(defContext.RecId, taxSolutionScope.SolutionVersion);
        docContext            = TaxRuntimeDocContext::findByScopeAndSolution(taxSolutionScope.RecId, taxSolutionScope.Solution);
        docContextVersion     = TaxRuntimeDocContextVersion::findByDocContextAndSolutionVersion(docContext.RecId, taxSolutionScope.SolutionVersion);

        if (! taxSolutionScopeSetup ||
        ! taxSolutionScope      ||
        ! defContext            ||
        ! defContextVersion     ||
        ! docContext            ||
        ! docContextVersion)
        {
            throw error("@TaxGST:ErrorMessageOfCreateGTEHierarchy");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initFromTaxSolutionScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefClassId</Name>
				<Source><![CDATA[
    public ClassId parmRefClassId()
    {
        return classNum(TaxReportHrchyStructureDesignGTE_IN);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>