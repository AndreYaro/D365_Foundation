<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardForm</c> class provides business logic that is shared by the kanban boards.
/// </summary>
public abstract class KanbanBoardForm
{
    FormRun     formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a card exists and that the card is assigned to a kanban.
    /// </summary>
    /// <param name="_cardId">
    ///    A card identifier of the card to verify.
    /// </param>
    /// <param name="_messageBoard">
    ///    A <c>KanbanBoardTmpMessageBoard</c> table for error messages.
    /// </param>
    /// <returns>
    ///    true if the card exists and the card is assigned to a kanban; otherwise, false.
    /// </returns>
    public boolean checkCardId(
        KanbanCardId               _cardId,
        KanbanBoardTmpMessageBoard _messageBoard)
    {
        boolean                 result = true;

        //verify that the card exists
        KanbanCard kanbanCard = KanbanCard::findCardId(_cardId);
        result = kanbanCard.RecId != 0;
        if (!result)
        {
            _messageBoard.error(strFmt("@SYS4000391", _cardId));
        }
        else
        {
            //verify that the card is assigned to a kanban
            result             =    result
                                 && kanbanCard.Kanban != 0;
            if (!result)
            {
                _messageBoard.error(strFmt("@SYS4000392", _cardId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
        protected FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a command.
    /// </summary>
    /// <param name="_menuItemStr">
    /// A string value that specifies the command to execute.
    /// </param>
    /// <param name="_menuItemType">
    /// A <c>MenuItemType</c> enumeration value that specifies the command to execute.
    /// </param>
    /// <param name="_common">
    /// A <c>Common</c> table buffer that is used when executing the command.
    /// </param>
    public void runMenuItem(
        str          _menuItemStr,
        MenuItemType _menuItemType = MenuItemType::Action,
        Common       _common       = null)
    {
        MenuFunction menuFunction = new MenuFunction(_menuItemStr,_menuItemType);
        if (menuFunction)
        {
            Args args = new Args();
            args.record(_common);
            args.caller(formRun);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormDataSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the last occurrence of a specified value in a specified field and data source.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A <c>FormDataSource</c> object that holds the records to search.
    /// </param>
    /// <param name="_fieldName">
    ///    A string value that specifies the field name to search.
    /// </param>
    /// <param name="_value">
    ///    A value to search.
    /// </param>
    /// <returns>
    ///    true if a record was found; otherwise, false.
    /// </returns>
    protected boolean selectFormDataSourceRecord(
        FormDataSource _formDataSource,
        str            _fieldName,
        anytype        _value)
    {
        boolean     result = false;

        if (   _formDataSource
            && _fieldName
            && _value)
        {
            //get the first multi selection or single selection record
            Common common = _formDataSource.getFirst();
            FieldId fieldId = fieldName2id(_formDataSource.table(),_fieldName);
            while (common)
            {
                //job found, select the record
                if (common.(fieldId) == _value)
                {
                    _formDataSource.findRecord(common);
                    result = true;
                }
                else
                {
                    _formDataSource.markRecord(common,0);
                }

                common = _formDataSource.getNext();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleRowsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether multiple data source records are selected in a given form.
    /// </summary>
    /// <param name="_dataSource">
    ///    The <c>FormDataSource</c> object to check.
    /// </param>
    /// <returns>
    ///    true if more than one record is selected in the form data source; otherwise, false.
    /// </returns>
    public static boolean multipleRowsSelected(FormDataSource _dataSource)
    {
        boolean result;

        Common common = _dataSource.getFirst(1) ?
                                    _dataSource.getFirst(1) :
                                    _dataSource.cursor();
        if (common)
        {
            common = _dataSource.getNext();
            result = common.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a container of field values or records from all of the selected records in a specified data
    /// source.
    /// </summary>
    /// <param name="_datasource">
    /// A <c>FormDatasource</c> value that contains the selected records.
    /// </param>
    /// <param name="_fieldId">
    /// A <c>FieldId</c> value of the field from which the value is added to the container; optional.
    /// </param>
    /// <param name="_containerFieldIds">
    /// A container that contains the field ID values from which the value is added to the result
    /// container; optional.
    /// </param>
    /// <returns>
    /// A container that contains the field values.
    /// </returns>
    /// <remarks>
    /// If more than one field ID value should be returned, the result is a container of containers. In
    /// this case the field ID parameter must be set to zero.
    /// </remarks>
    public static container selectedRecords(
        FormDataSource _datasource,
        FieldId        _fieldId = 0,
        container      _containerFieldIds = conNull())
    {
        Common          common;
        int             i;
        container       selectedRecords = conNull();

        if (_datasource)
        {
            // Create a container with the list of selected jobs
            for (common = _datasource.getFirst(1)
                                    ? _datasource.getFirst(1)
                                    : _datasource.cursor();
                                common;
                                common = _datasource.getNext())
            {
                if (_fieldId)
                {
                    selectedRecords += common.(_fieldId);
                }
                else
                {
                    if (   _containerFieldIds
                        && conLen(_containerFieldIds) > 0)
                    {
                        container containerFields = conNull();

                        for (i = 1; i <= conLen(_containerFieldIds); i++)
                        {
                            FieldId fieldId = conPeek(_containerFieldIds,i);
                            containerFields += common.(fieldId);
                        }
                        selectedRecords += [containerFields];
                    }
                    else
                    {
                        selectedRecords += [common];
                    }
                }
            }
        }

        return selectedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showConfigServiceProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a progress dialog for services configuration.
    /// </summary>
    /// <returns>
    /// A <c>SysOperationProgress</c> instance.
    /// </returns>
    /// <remarks>
    /// Services initialization may take several minutes when it performs the first query.
    /// </remarks>
    public static SysOperationProgress showConfigServiceProgress()
    {
        #AviFiles

        // Create the progress dialog
        SysOperationProgress progress = new SysOperationProgress();
        progress.setCaption("@SYS117324");
        progress.setText("@SYS315452");

        // Force the visual update
        progress.update(true);

        return progress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
