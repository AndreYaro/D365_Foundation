<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEncumbranceCarryForwardBalance_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates the carry forward balances of encumbrance documents like
/// purchase orders and general budget reservations.
/// </summary>
public final class BudgetEncumbranceCarryForwardBalance_PSN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCarryforwardAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the carry forward amount from accounting distributions based on the source document line and currency code provided.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The source document line ref recId of the document line.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of the document line.
    /// </param>
    /// <returns>
    /// The carry forward amount in transaction currency of the provided source document line.
    /// </returns>
    public static AmountCur getCarryforwardAmount(
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        CurrencyCode _currencyCode)
    {
        AccountingDistribution accountingDistributionPeriodOpen;
        AccountingEvent accountingEvent;
        AmountCur carryForwardAmount;

        select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from accountingDistributionPeriodOpen
            join Type from accountingEvent
                group by accountingDistributionPeriodOpen.TransactionCurrency, accountingDistributionPeriodOpen.AccountingLegalEntity, accountingDistributionPeriodOpen.AccountingDate, Type
                    order by accountingDistributionPeriodOpen.AccountingDate desc
                where accountingEvent.RecId == accountingDistributionPeriodOpen.AccountingEvent
                    && accountingDistributionPeriodOpen.SourceDocumentLine == _sourceDocumentLineRefRecId
                    && (accountingEvent.Type == AccountingEventType::PeriodOpen
                        || accountingEvent.Type == AccountingEventType::Original);

        if (accountingDistributionPeriodOpen.TransactionCurrencyAmount)
        {
            if (accountingDistributionPeriodOpen.TransactionCurrency == _currencyCode)
            {
                carryForwardAmount = accountingDistributionPeriodOpen.TransactionCurrencyAmount;
            }
            else
            {
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(accountingDistributionPeriodOpen.AccountingLegalEntity),
                    accountingDistributionPeriodOpen.AccountingDate);

                carryForwardAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                    accountingDistributionPeriodOpen.TransactionCurrency,
                    _currencyCode,
                    accountingDistributionPeriodOpen.TransactionCurrencyAmount,
                    true);
            }
        }

        return carryForwardAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>