<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostRevenueJournal extends ProjPost
{
    Common              buffer;
    ProjJournalTrans    projJournalTrans;
    ProjBegBalJournalTrans_Fee    projBegBalJournalTrans_Fee;
    ProjRevenueTrans    projRevenueTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedgerTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the transaction has a valid date and verifies that a posting period has been set up
    /// for the date and that the period is open for posting.
    /// </summary>
    /// <returns>
    /// true if the system can create a ledger entry for the date; otherwise, false.
    /// </returns>
    protected boolean checkLedgerTransDate()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the mandatory transaction fields contain values.
    /// </summary>
    /// <param name="throwerror">
    /// Indicates whether an error should be thrown when a validation fails; optional.
    /// </param>
    /// <returns>
    /// true if the basic fields contain values; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The <paramref name="throwerror" />
    ///   parameter is not used in this method and is provided for extending the functionality through an
    ///  override method. This method will call
    ///  <c>
    ///  checkFailed()
    ///  </c>
    ///   for all checked fields that do not contain a valid value.The following fields are checked by this
    ///  routine:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Project ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Category ID</description>
    ///   </item>
    ///   <item>
    ///   <description>Currency ID for Sales</description>
    ///   </item>
    ///   <item>
    ///   <description>Transaction Date</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean checkTrans(boolean throwerror = true)
    {
        boolean                ok  = true;
        ListEnumerator         enumerator;
        ProjFundingSourceRefId fundingSourceId;
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount defaultLedgerDimension;

        #ISOCountryRegionCodes

        ok  = super();

        ok = (ok &&  projTrans.validateWrite());

        ok  = (ok && ProjTable::find(projTrans.projId()).status().journalCheckStatusRevenue());

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && projJournalTrans)
        {
            DIOTAddlInfoForNoVendorProj_MX::deleteAdditionalInfo(projJournalTrans.RecId);
        }

        if (projTrans.canBeInvoiced() && projTrans.transTurnover() && ProjRevRecHelper::postWIPFeeForProject(ProjTable::find(projTrans.projId())))
        {
            enumerator = ProjFundingSource::getFundingSources( projTrans ).getEnumerator();
            while ( enumerator.moveNext() )
            {
                fundingSourceId = enumerator.current();

                defaultLedgerDimension=this.parmLedgerDimension(projTrans.salesOffsetAccountLedgerDimension(fundingSourceId));
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

                defaultLedgerDimension=this.parmLedgerDimension(projTrans.salesValueAccountLedgerDimension(fundingSourceId));
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budget update is required.
    /// </summary>
    /// <returns>
    ///    true if budget update is required; otherwise, false.
    /// </returns>
    public boolean checkUpdateBudget()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.parmTransIdOrig() && projTrans.transTurnover() > 0)
            {
                ret = true;
            }

            if (!this.parmTransIdOrig() && projTrans.transTurnover() < 0)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostRevenueJournal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    /// <param name="_psaContractLineNum">
    /// The contract billing rule creating the revenue transaction; optional.
    /// </param>
    public void new(Common _buffer, PSAContractLineNum _psaContractLineNum = '')
    {
        buffer  = _buffer;
        switch (_buffer.TableId)
        {
            case tableNum (ProjJournalTrans):
                projJournalTrans    = _buffer;
                projTrans           = ProjTrans::newProjJournalTrans(projJournalTrans, _psaContractLineNum);
                break;

            case tableNum (ProjBegBalJournalTrans_Fee):
                projBegBalJournalTrans_Fee    = _buffer;
                projTrans           = ProjTrans::construct(projBegBalJournalTrans_Fee);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility when you are creating a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        projRevenueTrans.clear();

        switch (buffer.TableId)
        {
            case tableNum (ProjJournalTrans):
                projRevenueTrans  = ProjRevenueTrans::initTransFromJournal(projJournalTrans);
                projRevenueTrans.TransactionOrigin = ProjOrigin::FeeJournal;
                if (projTrans.psaContractLineNum())
                {
                    projRevenueTrans.psaContractLineNum = projTrans.psaContractLineNum();
                }
                break;
        }

        if (ledgerVoucher)
        {
            projRevenueTrans.VoucherJournal = ledgerVoucher.lastVoucher();
        }

        if (this.parmAdjustment())
        {
            projRevenueTrans = this.initializeProjRevenueTransAdjustmentValues(projRevenueTrans);
        }

        if (this.parmTransactionOriginOrig())
        {
            projRevenueTrans.TransactionOrigin = this.parmTransactionOriginOrig();
        }

        if (! projRevenueTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            projRevenueTrans.IsCorrection = this.isTransCorrection(this.ledgerSalesAmount());
        }
        // </GEEU>
        projRevenueTrans.insert();

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(buffer, projRevenueTrans);
        }
        // </GIN>

        if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
        {
            this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());

            //Create ProjRevenueTransSale record
            MapEnumerator enumerateMap = new MapEnumerator(saleDistributions);
            while (enumerateMap.moveNext())
            {
                this.insertProjRevenueTransSale(enumerateMap);
            }
        }

        Docu::copy(projJournalTrans, projRevenueTrans);

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projRevenueTrans.TransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projRevenueTrans.TransId);
        }

        transIdNew = projRevenueTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjRevenueTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjRevenueTransSale</c> record.
    /// </summary>
    /// <param name = "_enumerateMap">
    /// An instance of <c>MapEnumerator</c> for the sales distributions.
    /// </param>
    /// <returns>
    /// The <c>ProjRevenueTransSale</c> table buffer.
    /// </returns>
    protected ProjRevenueTransSale initializeProjRevenueTransSale(MapEnumerator _enumerateMap)
    {
        ProjRevenueTransSale projRevenueTransSale;
        switch (buffer.TableId)
        {
            case tableNum(ProjJournalTrans):
                projRevenueTransSale = ProjRevenueTransSale::initTransFromJournal(projJournalTrans);
                projRevenueTransSale.LedgerTransdate = ledgerVoucher.lastTransDate();
                break;
        }

        projRevenueTransSale.TransId = projRevenueTrans.TransId;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_enumerateMap.currentKey());
        projRevenueTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projRevenueTrans.DefaultDimension, projFundingSource.DefaultDimension);
        projRevenueTransSale.FundingSource = _enumerateMap.currentKey();
        projRevenueTransSale.LineAmount = _enumerateMap.currentValue();
        projRevenueTransSale.LedgerTransdate = this.getLedgerJournalTransDate();

        if (projTrans.qty() != 0)
        {
            projRevenueTransSale.SalesPrice = projRevenueTransSale.LineAmount/projTrans.qty();
        }
        else
        {
            // Set Qty value as 1
            projRevenueTransSale.SalesPrice = projRevenueTransSale.LineAmount;
        }

        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projRevenueTransSale.FundingSource))
        {
            projRevenueTransSale.LedgerSalesPosted = true;
            if (projTrans.transTurnoverMST() != 0.0)
            {
                projRevenueTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projTrans.qty() * projRevenueTransSale.SalesPrice, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
            }
        }
        projRevenueTransSale.TransStatus = this.parmTransStatus();
        if (! projRevenueTransSale.TransStatus)
        {
            projRevenueTransSale.TransStatus = ProjTransStatus::Posted;
        }

        return ProjRevenueTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjRevenueTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>ProjRevenueTransSale</c> record.
    /// </summary>
    /// <param name = "_enumerateMap">
    /// An instance of <c>MapEnumerator</c> for the sales distributions.
    /// </param>
    protected void insertProjRevenueTransSale(MapEnumerator _enumerateMap)
    {
        ProjRevenueTransSale projRevenueTransSale = this.initializeProjRevenueTransSale(_enumerateMap);
        projRevenueTransSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostSalesDistributions</Name>
				<Source><![CDATA[
    public void createCostSalesDistributions(AmountCur _totalCostAmount, AmountCur _totalSaleAmount)
    {
        // No funding source specified -Standard call to funding engine via ProjPost class.
        if (projJournalTrans.FundingSource == 0)
        {
            super(_totalCostAmount, _totalSaleAmount);
        }
        else
        {
            //
            // User specified funding source - This will bypass the allocation rules and only check
            // funding limits
            //
            ProjFundingEngine       projFundingEngine;
            costDistributions = new Map(Types::Int64, Types::Real);
            saleDistributions = new Map(Types::Int64, Types::Real);

            projFundingEngine = ProjFundingEngine::construct(projTrans, _totalCostAmount ,  _totalSaleAmount);
            projFundingEngine.parmSingleFundingSourceRequired(true);
            projFundingEngine.setSingleFundingSourceRefId(projJournalTrans.FundingSource);
            if (projFundingEngine.allocate())
            {
                costDistributions = projFundingEngine.parmCostDistributions();
                saleDistributions = projFundingEngine.parmSaleDistributions();
                fundingSourceList = projFundingEngine.parmfundingSourceAllocation();
            }
            else
            {
                allocationError = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjRevenueTransAdjustmentValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>projRevenueTrans</c> table buffer for project adjustment.
    /// </summary>
    /// <param name = "_projRevenueTrans">The <c>ProjRevenueTrans</c> table buffer.</param>
    /// <returns>
    /// The <c>ProjRevenueTrans</c> table buffer.
    /// </returns>
    protected ProjRevenueTrans initializeProjRevenueTransAdjustmentValues(ProjRevenueTrans _projRevenueTrans)
    {
        _projRevenueTrans.TransIdRef = this.parmTransIdRef();
        _projRevenueTrans.AdjRefTransId = this.parmAdjRefTransId();

        return _projRevenueTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>