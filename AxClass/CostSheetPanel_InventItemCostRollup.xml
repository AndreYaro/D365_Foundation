<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_InventItemCostRollup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_InventItemCostRollup</c> class uses <c>InventItemPriceMap</c> record data to
///    fetch <c>InventItemCostGroupRollupSim</c> and <c>InventItemCostGroupRollup</c> records that will be
///    used in costing sheet or cost rollup representation.
/// </summary>
/// <remarks>
///    The class should be used by <c>InventItemCostGroupRollup</c> form.
/// </remarks>
class CostSheetPanel_InventItemCostRollup extends CostSheetPanel
{
    InventItemPriceMap  inventItemPriceMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        view = CostSheetPanelView::CostRollup;
        viewComboBox.selection(enum2int(view));

        per = CostSheetPanelPer::Unit;
        perComboBox.selection(enum2int(per));

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    protected void initUnitIdAndLotSize()
    {
        lotSize = inventItemPriceMap.PriceQty;

        if (lotSize == 0.00)
        {
            lotSize = 1.00;
        }

        if (per == CostSheetPanelPer::LotSize)
        {
            qtyReal.realValue(lotSize);
        }

        unitID = inventItemPriceMap.displayUnitId();
        unitIdString.text(unitID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    protected container packedRecordsList()
    {
        return CostSheetPanel_InventItemCostRollup::packedServerInventItemPriceMap(inventItemPriceMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPriceMap</Name>
				<Source><![CDATA[
    public InventItemPriceMap parmInventItemPriceMap(InventItemPriceMap _inventItemPriceMap = inventItemPriceMap)
    {
        inventItemPriceMap = _inventItemPriceMap;

        return inventItemPriceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class and adds controls to the caller form at runtime.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_InventItemCostRollup newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_InventItemCostRollup costSheetPanel = new CostSheetPanel_InventItemCostRollup();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerInventItemPriceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses <c>InventItemPriceSim</c> or <c>InventItemPrice</c> records to fetch records from the
    /// <c>InventItemCostGroupRollupSim</c> or <c>InventItemCostGroupRollup</c> tables.
    /// </summary>
    /// <param name="_inventItemPriceMap">
    /// An <c>InventItemPriceSim</c> or <c>InventItemPrice</c> record.
    /// </param>
    /// <returns>
    /// A packed <c>List</c> object that has cost rollup records.
    /// </returns>
    protected static container packedServerInventItemPriceMap(InventItemPriceMap _inventItemPriceMap)
    {
        CostTmpCostRollup               costTmpCostRollup;
        InventItemCostGroupRollup       inventItemCostGroupRollup;
        InventItemCostGroupRollupSim    inventItemCostGroupRollupSim;

        List list = new List(Types::Record);

        if (!_inventItemPriceMap.RecId)
            return list.pack();

        switch (_inventItemPriceMap.TableId)
        {
            case tableNum(InventItemPriceSim):
                inventItemCostGroupRollupSim.recordLevelSecurity(true);

                while select inventItemCostGroupRollupSim
                    where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == _inventItemPriceMap.RecId
                {
                    costTmpCostRollup.initFromInventItemCostGroupRollupMap(inventItemCostGroupRollupSim, _inventItemPriceMap);
                    costTmpCostRollup.insert();
                }
                break;

            case tableNum(InventItemPrice):
                inventItemCostGroupRollup.recordLevelSecurity(true);

                while select inventItemCostGroupRollup
                    where inventItemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceMap.RecId
                {
                    costTmpCostRollup.initFromInventItemCostGroupRollupMap(inventItemCostGroupRollup, _inventItemPriceMap);
                    costTmpCostRollup.insert();
                }
                break;
        }

        while select CostGroupId, Level, Split, sum(CostAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
