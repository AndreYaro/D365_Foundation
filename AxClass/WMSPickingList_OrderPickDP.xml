<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingList_OrderPickDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSPickingList_OrderPick</c> class is the report data provider class for the associated
///    <c>WMSPickingList_OrderPick</c> reports.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>WMSPickingList_OrderPick</c> reports to
///    view the customer picking list journal, which displays the updated sales order of the selected
///    picking lists.
///
/// Need a set to keep track of which kit headers have been printed.
/// Printing another line that has kit header.
///
/// Modified design of report to include a barcode for picking route Id
/// </remarks>
[SRSReportParameterAttribute(classStr(WmsPickingList_OrderPickContract))]
public class WmsPickingList_OrderPickDP extends SrsReportDataProviderPreProcess
{
    SalesFormLetterReport_PickingList           salesFormLetterReport;
    DocuRefSearch                               docuRefHead;
    DocuRefSearch                               docuRefLine;

    InventDimCtrl_Rep_Sales                     inventDimReport;
    str                                         inventDimString;
    container                                   inventDimSetup;

    PrintCopyOriginal                           printCopyOriginal;
    RefRecId                                    wmsPickingRouteTmpRecId;

    CustFormletterDocument                      custFormletterDocument;

    InventMovement                              movement;
    InventTableModule                           inventTableModule;

    boolean                                     showRegistered;
    boolean                                     showActivated;
    boolean                                     showStarted;
    boolean                                     showPicked;
    boolean                                     showStaged;
    boolean                                     showLoaded;
    boolean                                     showCompleted;
    boolean                                     showCanceled;
    boolean                                     isLineDataMissing;

    QueryBuildRange                             qbr_routeId;

    InventDim                                   inventDim;
    WMSOrderTrans                               wmsOrderTrans;
    WMSPickingRoute                             wmsPickingRoute;
    WMSPickingList_OrderPickTmp                 wmsPickingList_OrderPickTmp;
    WMSPickingList_OrderPickTmp                 wmsPickingList_OrderPickTmpTemplate;

    BarcodeSetupId                              barcodeSetupId;
    BarcodeSetup                                barcodeSetup;
    Barcode                                     barcode;
    Set                                         kitHeadersPrinted;
    MCRMessageAssociation                       mcrMessageAssociation;

    boolean                                     doProcessHeaderDocuRef;
    boolean                                     doProcessLineDocuRef;

    private KittingSrsReportDataProviderPreProcess kittingReportHandler;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the bar code for the picking route.
    /// </summary>
    /// <returns>
    ///    The bar code.
    /// </returns>
    private BarCodeString barCode()
    {
        str barCodeContents = wmsPickingRoute.PickingRouteID;

        if (!barCodeContents)
        {
            return '';
        }

        if (barcodeSetup.validateBarcode(strUpr(barCodeContents)))
        {
            barcode.string(true,strUpr(barCodeContents));
            barcode.encode();
        }
        else
        {
            throw(error(strFmt("@SYS41409", barcode.barcodeType(), strUpr(barCodeContents))));
        }

        if (!barcode)
        {
            return '';
        }

        return barcode.barcodeStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSPickingListOrderPickTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>WMSPickingList_OrderPickTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The retrieved data.
    /// </returns>
    [SRSReportDataSetAttribute('WMSPickingList_OrderPickTmp')]
    public WMSPickingList_OrderPickTmp getWMSPickingListOrderPickTmp()
    {
        select * from wmsPickingList_OrderPickTmp;
        return wmsPickingList_OrderPickTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the barcode.
    /// </summary>
    private void initBarcode()
    {
        barcodeSetupId = InventParameters::find().BarcodeSetupIdPick;
        barcodeSetup   = BarcodeSetup::find(barcodeSetupId);
        barcode        = barcodeSetup.barcode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension information.
    /// </summary>
    private void initInventDimData()
    {
        container   inventDimSetupProduct;

        inventDimReport = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::PickingList);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimSetup = conUnion(inventDimSetupProduct, inventDimSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWMSOrderTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transaction query.
    /// </summary>
    /// <returns>
    /// The query for the transactions.
    /// </returns>
    protected Query buildWMSOrderTransQuery()
    {
        Query                   queryWMSOrderTrans;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr_status;
        Range                   range;

        range = queryRangeConcat(range,(showRegistered ? queryValue(WMSExpeditionStatus::Registered)   : SysQuery::valueNot(WMSExpeditionStatus::Registered)));
        range = queryRangeConcat(range,(showActivated  ? queryValue(WMSExpeditionStatus::Activated)    : SysQuery::valueNot(WMSExpeditionStatus::Activated)));
        range = queryRangeConcat(range,(showStarted    ? queryValue(WMSExpeditionStatus::Started)      : SysQuery::valueNot(WMSExpeditionStatus::Started)));
        range = queryRangeConcat(range,(showPicked     ? queryValue(WMSExpeditionStatus::Picked)       : SysQuery::valueNot(WMSExpeditionStatus::Picked)));
        range = queryRangeConcat(range,(showStaged     ? queryValue(WMSExpeditionStatus::Staged)       : SysQuery::valueNot(WMSExpeditionStatus::Staged)));
        range = queryRangeConcat(range,(showLoaded     ? queryValue(WMSExpeditionStatus::Loaded)       : SysQuery::valueNot(WMSExpeditionStatus::Loaded)));
        range = queryRangeConcat(range,(showCanceled   ? queryValue(WMSExpeditionStatus::Cancelled)    : SysQuery::valueNot(WMSExpeditionStatus::Cancelled)));
        range = queryRangeConcat(range,(showCompleted  ? queryValue(WMSExpeditionStatus::Complete)     : SysQuery::valueNot(WMSExpeditionStatus::Complete)));

        queryWMSOrderTrans = new Query();
        qbds = queryWMSOrderTrans.addDataSource(tableNum(WMSOrderTrans));

        WMSOrderTrans::queryAddSortDefault(qbds);

        qbr_status  = qbds.addRange(fieldNum(WMSOrderTrans,ExpeditionStatus));
        qbr_status.value(range);

        return queryWMSOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the temporary table.
    /// </summary>
    final protected void insertIntoTempTable()
    {
        wmsPickingList_OrderPickTmp.clear();
       
        this.initPickingListOrderPickTmp(wmsPickingList_OrderPickTmp, wmsOrderTrans);

        wmsPickingList_OrderPickTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPickingListOrderPickTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSPickingList_OrderPickTmp</c> with the context data.
    /// </summary>
    /// <param name = "_pickingListOrderPickTmp">A temporary order pick record.</param>
    /// <param name = "_orderTrans">An inventory order transaction.</param>
    protected void initPickingListOrderPickTmp(WMSPickingList_OrderPickTmp _pickingListOrderPickTmp, WMSOrderTrans _orderTrans)
    {
        _pickingListOrderPickTmp.data(wmsPickingList_OrderPickTmpTemplate);

        _pickingListOrderPickTmp.ItemId = this.itemId();
        _pickingListOrderPickTmp.TransExpeditionStatus = _orderTrans.ExpeditionStatus;

        if (inventDim != null)
        {
            #InventDimDevelop

            _pickingListOrderPickTmp.InventDimFieldsMap::initAllDimensionsFrom(inventDim);

            _pickingListOrderPickTmp.InventGTDId_RU          = inventDim.InventGtdId_RU;
            _pickingListOrderPickTmp.InventProfileId_RU      = inventDim.InventProfileId_RU;
            _pickingListOrderPickTmp.InventOwnerId_RU        = inventDim.InventOwnerId_RU;

            _pickingListOrderPickTmp.InventDimPrint          = inventDimString;
        }
        _pickingListOrderPickTmp.ItemName                    = this.itemDescription();
        _pickingListOrderPickTmp.OrderQty                    = this.orderQty();
        _pickingListOrderPickTmp.OrderUnit                   = this.orderUnit();

        _pickingListOrderPickTmp.PdsEnabled                  = (#PdsCatchWeightEnabled? NoYes::Yes : NoYes::No);
        _pickingListOrderPickTmp.PdsCWQty                    = _orderTrans.PdsCWQty;
        _pickingListOrderPickTmp.PdsCWUnitId                 = _orderTrans.pdsCWUnitId();

        _pickingListOrderPickTmp.DeliveryDate                = _orderTrans.DlvDate;
        _pickingListOrderPickTmp.InventTransId               = _orderTrans.InventTransId;
        _pickingListOrderPickTmp.InventQty                   = _orderTrans.Qty;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            _pickingListOrderPickTmp.MCRExpeditedOrder            = this.MCRIsExpeditedLine(_orderTrans.InventTransId);
        }

        if (doProcessLineDocuRef)
        {
            _pickingListOrderPickTmp.Notes = Docu::concatDocuRefNotes(docuRefLine);
        }

        if (doProcessHeaderDocuRef)
        {
            _pickingListOrderPickTmp.MainNotes = Docu::concatDocuRefNotes(docuRefHead);
            // Have to rewind docuRefSearch for use by next line
            docuRefHead.init();
        }

        _pickingListOrderPickTmp.PrintMissingLinesErrorText  = isLineDataMissing;

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(_pickingListOrderPickTmp, _orderTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMovement</c> class for the transaction.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    A <c>WMSOrderTrans</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class.
    /// </returns>
    public InventMovement inventMovement(WMSOrderTrans _wmsOrderTrans)
    {
        InventMovement inventMovement;

        inventMovement = _wmsOrderTrans.inventMovement();

        if (inventMovement)
        {
            inventMovement = inventMovement.parentMovement(true);
        }

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item description.
    /// </summary>
    /// <returns>
    ///    The item description.
    /// </returns>
    private ItemFreeTxt itemDescription()
    {
        if (movement)
        {
            if (WmsPickingListShowVariantNameAndDescriptionFlight::instance().isEnabled()
             && movement is InventMov_Sales
             && InventTable::find(movement.itemId()).hasProductDimensions())
            {
                SalesLine salesLine = movement.buffer() as SalesLine;
                if (salesLine.Name != '')
                {
                    return salesLine.Name;
                }
            }

            return movement.itemDescription();
        }
        return '*';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item ID.
    /// </summary>
    /// <returns>
    /// The Item ID.
    /// </returns>
    private ItemId  itemId()
    {
        ItemId  itemIdLocal = wmsOrderTrans.ItemId;

        if (inventDimReport.isInventDimItemId())
        {
            itemIdLocal += inventDimReport.reportStrItemId(inventDim);
        }

        return itemIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsExpeditedLine</Name>
				<Source><![CDATA[
    private NoYes mcrIsExpeditedLine(InventTransId _inventTransId)
    {
        SalesLine           salesLine;
        MCRExpeditedOrder   expediteLine = NoYes::No;
        MCRSalesLine        mcrSalesLine;

        if (_inventTransId)
        {
            select firstonly RecId from salesLine
                where salesLine.InventTransId == _inventTransId
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                    && mcrSalesLine.Expedite;

            if (salesLine)
            {
                expediteLine = NoYes::Yes;
            }
        }
        return expediteLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory quantity.
    /// </summary>
    /// <returns>
    ///    The inventory quantity.
    /// </returns>
    protected InventPickOrderQty orderQty()
    {
        if (!movement)
        {
            return 0;
        }

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(wmsOrderTrans.ItemId, 
                                                                                     wmsOrderTrans.InventDimId, 
                                                                                     wmsOrderTrans.qty, 
                                                                                     inventTableModule.UnitId,
                                                                                     movement.transUnitId(),
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the order unit ID.
    /// </summary>
    /// <returns>
    ///    The order unit ID.
    /// </returns>
    protected UnitOfMeasureSymbol orderUnit()
    {
        if (!movement)
        {
            return '*';
        }

        return movement.transUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the document reference record for the picking route.
    /// </summary>
    protected void printDocumentHeader()
    {
        SalesTable refSalesHeader;

        if ((custFormletterDocument.DocuOnPickingList == DocuOnFormular::Head)
         || (custFormletterDocument.DocuOnPickingList == DocuOnFormular::All))
        {
            if (wmsPickingRoute.TransRefId)
            {
                // Initialize once (per report)
                select firstonly refSalesHeader where refSalesHeader.SalesId == wmsPickingRoute.TransRefId;
                if (refSalesHeader)
                {
                    docuRefHead = DocuRefSearch::newTypeIdAndRestriction(refSalesHeader,
                                                                         custFormletterDocument.DocuTypePickingList,
                                                                         DocuRestriction::Internal);
                    doProcessHeaderDocuRef = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and inserts data to in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun                            queryRunWMSOrderTrans;
        Common                              referencedTable;
        SRSTmpDataStore                     srsTmpDataStore;
        WmsPickingList_OrderPickContract    rdpContract;
        SalesLine                           salesLine;

        // Set the user connection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        wmsPickingList_OrderPickTmp.setConnection(this.parmUserConnection());

        rdpContract = this.parmDataContract() as WmsPickingList_OrderPickContract;

        showRegistered          = rdpContract.parmShowRegistered();
        showActivated           = rdpContract.parmShowActivated();
        showStarted             = rdpContract.parmShowStarted();
        showPicked              = rdpContract.parmShowPicked();
        showStaged              = rdpContract.parmShowStaged();
        showLoaded              = rdpContract.parmShowLoaded();
        showCompleted           = rdpContract.parmShowLoaded();
        showCanceled            = rdpContract.parmShowCancelled();
        wmsPickingRouteTmpRecId = rdpContract.parmPickingRouteId();
        printCopyOriginal       = rdpContract.parmPrintCopyOriginal();

        if (wmsPickingRouteTmpRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
                where srsTmpDataStore.RecId == wmsPickingRouteTmpRecId;

            if (srsTmpDataStore.RecId)
            {
                Global::con2Buf(srsTmpDataStore.Value, wmsPickingRoute);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }

        custFormletterDocument   = CustFormletterDocument::find();

        this.initInventDimData();

        salesFormLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::InventPickList);
        salesFormLetterReport.parmPrintType(printCopyOriginal);

        this.initBarcode();

        queryRunWMSOrderTrans = new QueryRun(this.buildWMSOrderTransQuery());
        qbr_routeId = queryRunWMSOrderTrans.query().dataSourceTable(tableNum(WMSOrderTrans)).addRange(fieldNum(WMSOrderTrans,RouteId));

        if (wmsPickingRoute.TransType == InventTransType::Sales && wmsPickingRoute.TransRefId)
        {
            salesFormLetterReport.setPrintMgmtNodeTypeFromTransType(InventTransType::Sales);
            referencedTable = SalesTable::find(wmsPickingRoute.TransRefId);
        }
        else if (wmsPickingRoute.TransType == InventTransType::TransferOrderShip && wmsPickingRoute.TransRefId)
        {
            salesFormLetterReport.setPrintMgmtNodeTypeFromTransType(InventTransType::TransferOrderShip);
            referencedTable = InventTransferTable::find(wmsPickingRoute.TransRefId);
        }
        else if (wmsPickingRoute.RecId)
        {
            // There is no referenced table in this case. The picking route is created by a shipment, which
            // can be a consolidation of several different sales orders, so finding a single record is not possible.
            // As a result, module settings will be used.
            salesFormLetterReport.setPrintMgmtNodeTypeFromTransType(wmsPickingRoute.TransType);
            referencedTable = null;
        }

        this.initWMSPickingList_OrderPickTmpTemplate();

        queryRunWMSOrderTrans.reset();
        qbr_routeId.value(queryValue(wmsPickingRoute.PickingRouteID));

        this.printDocumentHeader();

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler = new KittingSrsReportDataProviderPreProcess();
            queryRunWMSOrderTrans = kittingReportHandler.kittingGetQueryRun(queryRunWMSOrderTrans, tableNum(WMSOrderTrans));
        }

        while (queryRunWMSOrderTrans.next())
        {
            wmsOrderTrans     = queryRunWMSOrderTrans.get(tableNum(WMSOrderTrans));
            inventTableModule = InventTableModule::find(wmsOrderTrans.ItemId,ModuleInventPurchSales::Invent);

            movement = this.inventMovement(wmsOrderTrans);

            if (!movement)
            {
                isLineDataMissing = true;
            }

            if (((custFormletterDocument.DocuOnPickingList == DocuOnFormular::Line) || (custFormletterDocument.DocuOnPickingList == DocuOnFormular::All))
                && (wmsOrderTrans.InventTransId))
            {
                salesLine = SalesLine::findInventTransId(wmsOrderTrans.InventTransId);
                if (salesLine)
                {
                    docuRefLine = DocuRefSearch::newTypeIdAndRestriction(salesLine,
                                                                         custFormletterDocument.DocuTypePickingList,
                                                                         DocuRestriction::Internal);
                    doProcessLineDocuRef = true;
                }
            }

            inventDim = InventDim::find(wmsOrderTrans.InventDimId);

            if (inventDim != null)
            {
                inventDimString = FormLetter::inventDimReport(inventDim, inventDimSetup, CompanyInfo::languageId());
            }

            this.insertIntoTempTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWMSPickingList_OrderPickTmpTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default data in the template record.
    /// </summary>
    protected void initWMSPickingList_OrderPickTmpTemplate()
    {
        // <GEECZ>
        BankAccountTable companyBankAccount;
        CustTable        custTable;
        // </GEECZ>

        wmsPickingList_OrderPickTmpTemplate.DeliveryName = wmsPickingRoute.DeliveryName;
        if (wmsPickingRoute.DeliveryPostalAddress)
        {
            wmsPickingList_OrderPickTmpTemplate.DeliveryAddress = LogisticsPostalAddress::findRecId(wmsPickingRoute.DeliveryPostalAddress).Address;
        }
        else
        {
            wmsPickingList_OrderPickTmpTemplate.DeliveryAddress = '';
        }
        wmsPickingList_OrderPickTmpTemplate.TransType = wmsPickingRoute.TransType;
        wmsPickingList_OrderPickTmpTemplate.TransRefId = wmsPickingRoute.TransRefId;
        wmsPickingList_OrderPickTmpTemplate.ActivationDateTime = wmsPickingRoute.ActivationDateTime;
        wmsPickingList_OrderPickTmpTemplate.EndDateTime = wmsPickingRoute.EndDateTime;
        wmsPickingList_OrderPickTmpTemplate.DeliveryMode = wmsPickingRoute.DlvModeId;
        wmsPickingList_OrderPickTmpTemplate.DeliveryTerms = wmsPickingRoute.DlvTermId;
        wmsPickingList_OrderPickTmpTemplate.ExpeditionStatus = wmsPickingRoute.ExpeditionStatus;
        wmsPickingList_OrderPickTmpTemplate.PickingRouteID = wmsPickingRoute.PickingRouteID;
        wmsPickingList_OrderPickTmpTemplate.BarCode = this.barCode();
        wmsPickingList_OrderPickTmpTemplate.BarcodeFontName = barcodeSetup.FontName;
        wmsPickingList_OrderPickTmpTemplate.BarcodeFontSize = barcodeSetup.FontSize;

        if (InventParameters::find().MCRUseBoxingLogic == NoYes::Yes)
        {
            wmsPickingList_OrderPickTmpTemplate.MCRPickingWave      = wmsPickingRoute.MCRPickingWaveRef;
            wmsPickingList_OrderPickTmpTemplate.MCRPackingBoxName   = wmsPickingRoute.MCRPackingBoxName;
            wmsPickingList_OrderPickTmpTemplate.MCRShowLabel        = NoYes::Yes;
        }
        else
        {
            wmsPickingList_OrderPickTmpTemplate.MCRShowLabel        = NoYes::No;
        }

        #ISOCountryRegionCodes
        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();

        if (isoCountryCode == #isoNO)
        {
            CompanyInfo companyInfo = CompanyInfo::find();

            if (companyInfo.PrintEnterpriseregister_NO)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
                wmsPickingList_OrderPickTmpTemplate.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"), infolog.language());
            }
        }

        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            CompanyInfo companyInfo = CompanyInfo::find();
            wmsPickingList_OrderPickTmpTemplate.CompanyRegNum    = companyInfo.RegNum;
            wmsPickingList_OrderPickTmpTemplate.CompanyCoRegNum  = companyInfo.CoRegNum;
            wmsPickingList_OrderPickTmpTemplate.CompanyEmail     = companyInfo.email();
            wmsPickingList_OrderPickTmpTemplate.CompanyName      = companyInfo.Name;
            wmsPickingList_OrderPickTmpTemplate.CompanyPhone     = companyInfo.phone();
            wmsPickingList_OrderPickTmpTemplate.CompanyAddress   = companyInfo.postalAddress().Address;
            wmsPickingList_OrderPickTmpTemplate.CompanyTeleFax   = companyInfo.teleFax();

            wmsPickingList_OrderPickTmpTemplate.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, wmsPickingRoute.DlvDate);

            companyBankAccount = BankAccountTable::find(companyInfo.Bank);
            wmsPickingList_OrderPickTmpTemplate.CompanyBankAccountName       = companyBankAccount.Name;
            wmsPickingList_OrderPickTmpTemplate.CompanyBankAccountNum        = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                                companyBankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
            wmsPickingList_OrderPickTmpTemplate.CompanyBankAccountRoutingNum = companyBankAccount.RegistrationNum;

            custTable = CustTable::find(wmsPickingRoute.Customer);
            wmsPickingList_OrderPickTmpTemplate.CustRegNum      = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, wmsPickingRoute.DlvDate);
            wmsPickingList_OrderPickTmpTemplate.CustCoRegNum    = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, wmsPickingRoute.DlvDate);
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSPickingList_OrderPickDP construct()
    {
        return new WMSPickingList_OrderPickDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>