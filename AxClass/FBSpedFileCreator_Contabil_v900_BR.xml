<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_v900_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBSpedFileCreator_Contabil_v900_BR extends FBSpedFileCreator_Contabil_v800_BR
{
    private date recordI355ToDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecordI100</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I100.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I100 belongs to.
    /// </param>
    protected void createRecordI100(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;
        container mainAccountCostCenter;
        DimensionAttributeValue costCenter;
        Set ledgerDimensionSet = new Set(Types::String);

        LedgerTrialBalanceTmp trialBalanceTmp = this.calcTrialBalance(fromDate, toDate, true, false);

        while select LedgerDimension, ReportingDimension from trialBalanceTmp
            order by trialBalanceTmp.PrimaryFocus
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                mainAccountCostCenter = this.getMainAccountCostCenterV2(trialBalanceTmp.ReportingDimension);
            }
            else
            {
                mainAccountCostCenter = this.getMainAccountCostCenter(trialBalanceTmp.LedgerDimension);
            }

            ledgerDimensionSet.add(conPeek(mainAccountCostCenter, 2));
        }

        if (contract.parmInstitutionType())
        {
            MainAccountConsolidateAccount_BR mainAccountConsolidateAccount_BR;

            while select mainAccountConsolidateAccount_BR
            {
                ledgerDimensionSet.add(mainAccountConsolidateAccount_BR.dimensionAttributeValueValue());
            }
        }

        while select costCenter 
            where costCenter.DimensionAttribute == costCenterDimAttrRecId 
            && (!FBSpedFileCreatorI100FilterDeletedRecordsFlight::instance().isEnabled()
                || costCenter.IsDeleted == false)
        {
            if (ledgerDimensionSet.in(costCenter.getValue()))
            {
                spedRecord  = FBSpedRecord_BR::constructEmpty('I100');

                spedRecord.addFieldDate     (costCenter.ActiveFrom ? costCenter.ActiveFrom : fromDate); // DT_ALT
                spedRecord.addFieldString   (costCenter.getValue());                                    // COD_CCUS
                spedRecord.addFieldString   (costCenter.getName());                                     // CCUS

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ150</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the record J150.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the record J150 belongs to.
    /// </param>
    /// <param name="_level">
    /// The FBSpedContabilAccountTree_BR level.
    /// </param>
    /// <param name="_left">
    /// The left branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    /// <param name="_right">
    /// The right branch of the FBSpedContabilAccountTree_BR.
    /// </param>
    protected void writeRecordJ150(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTree, spedContabilAccountTreeAux;
        MainAccount mainAccount, parentMainAccount;
        FBSpedRecord_BR spedRecord;

        while select spedContabilAccountTree
                where spedContabilAccountTree.LeftValue > _left
                    && spedContabilAccountTree.RightValue < _right
                    && spedContabilAccountTree.AccountLevel == _level
            join Type, ParentMainAccount from mainAccount
                where mainAccount.MainAccountId == spedContabilAccountTree.AccountCode
                    && mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
            outer join MainAccountId from parentMainAccount
                where parentMainAccount.RecId == mainAccount.ParentMainAccount
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) == TotalAccounts)
            {
                spedContabilAccountTreeAux = this.getMainAccountOpeningClosingPreviousEndingBalance(mainAccount, spedContabilAccountTree);

                spedRecord = FBSpedRecord_BR::constructEmpty('J150');
                spedRecord.addFieldNumeric(recordJ150Counter, 0); // NU_ORDEM
                spedRecord.addFieldString(spedContabilAccountTree.AccountCode); // COD_AGL
                if (useNatureCode)
                {
                    spedRecord.addFieldString(mainAccount.NatureCode_BR == '05' ? 'T' : 'D');
                }
                else
                {
                    spedRecord.addFieldString(this.getAccountNatureCode(mainAccount.Type) == '05' ? 'T' : 'D');
                }
                spedRecord.addFieldNumeric(spedContabilAccountTree.AccountLevel); // NIVEL_AGL
                spedRecord.addFieldString(parentMainAccount.MainAccountId);
                spedRecord.addFieldString(spedContabilAccountTree.AccountDescription); // DESCR_COD_AGL
                spedRecord.addFieldNumeric(abs(spedContabilAccountTreeAux.PreviousEndingBalance), 2); // VL_CTA_INI_
                spedRecord.addFieldString(spedContabilAccountTreeAux.PreviousEndingBalance > 0 ? 'D' : 'C'); // IND_DC_CTA_INT
                spedRecord.addFieldNumeric(abs(spedContabilAccountTreeAux.EndingBalance), 2); // VL_CTA_FIN
                spedRecord.addFieldString(spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'C'); // IND_DC_CTA_FIN
                spedRecord.addFieldString(spedContabilAccountTreeAux.EndingBalance > 0 ? 'D' : 'R'); // IND_GRP_DRE
                spedRecord.addFieldEmpty();

                this.addChildRecord(_parentRecord, spedRecord);

                recordJ150Counter++;
            }

            this.writeRecordJ150(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSignatoryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the signatory code.
    /// </summary>
    /// <param name="_legalRepresentativeType">
    /// The legal representative type.
    /// </param>
    /// <returns>
    /// The signatory code.
    /// </returns>
    protected str retrieveSignatoryCode(LegalRepresentativeType_BR _legalRepresentativeType)
    {
        switch (_legalRepresentativeType)
        {
            case LegalRepresentativeType_BR::Director:
                return '203';
            case LegalRepresentativeType_BR::MemberOfBoard:
                return '204';
            case LegalRepresentativeType_BR::Administrator:
                return '205';
            case LegalRepresentativeType_BR::GroupAdministrator:
                return '206';
            case LegalRepresentativeType_BR::AdministratorAffiliated:
                return '207';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalPerson:
                return '220';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalEntity:
                return '222';
            case LegalRepresentativeType_BR::JudicialAdministrator:
                return '223';
            case LegalRepresentativeType_BR::JudicialManager:
                return '226';
            case LegalRepresentativeType_BR::Attorney:
                return '309';
            case LegalRepresentativeType_BR::Executor:
                return '312';
            case LegalRepresentativeType_BR::Receiver:
                return '313';
            case LegalRepresentativeType_BR::Intervenor:
                return '315';
            case LegalRepresentativeType_BR::Businessman:
                return '801';
            case LegalRepresentativeType_BR::Accountant:
                return '900';
            case LegalRepresentativeType_BR::Accounting:
                return '900';
            case LegalRepresentativeType_BR::AccountantRepResponsible:
                return '910';
            case LegalRepresentativeType_BR::AuditorRepResponsible:
                return '920';
            case LegalRepresentativeType_BR::IndependentAuditor:
                return '940';
            case LegalRepresentativeType_BR::Others:
                return '999';
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSignatoryIdentification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the signatory identification.
    /// </summary>
    /// <param name="_legalRepresentativeType">
    /// The legal representative type.
    /// </param>
    /// <returns>
    /// The signatory identification.
    /// </returns>
    protected str retrieveSignatoryIdentification(LegalRepresentativeType_BR _legalRepresentativeType)
    {
        switch (_legalRepresentativeType)
        {
            case LegalRepresentativeType_BR::Director:
                return 'DIRETOR';
            case LegalRepresentativeType_BR::MemberOfBoard:
                return 'CONSELHEIRO DE ADMINISTRAÇÃO';
            case LegalRepresentativeType_BR::Administrator:
                return 'ADMINISTRADOR';
            case LegalRepresentativeType_BR::GroupAdministrator:
                return 'ADMINISTRADOR DO GRUPO';
            case LegalRepresentativeType_BR::AdministratorAffiliated:
                return 'ADMINISTRADOR DE SOCIEDADE FILIADA';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalPerson:
                return 'ADMINISTRADOR JUDICIAL - PESSOA FÍSICA';
            case LegalRepresentativeType_BR::JudicialAdministratorLegalEntity:
                return 'ADMINISTRADOR JUDICIAL - PESSOA JURÍDICA - PROFISSIONAL RESPONSÁVEL';
            case LegalRepresentativeType_BR::JudicialAdministrator:
                return 'ADMINISTRADOR JUDICIAL/GESTOR';
            case LegalRepresentativeType_BR::JudicialManager:
                return 'GESTOR JUDICIAL';
            case LegalRepresentativeType_BR::Attorney:
                return 'PROCURADOR';
            case LegalRepresentativeType_BR::Executor:
                return 'INVENTARIANTE';
            case LegalRepresentativeType_BR::Receiver:
                return 'LIQUIDANTE';
            case LegalRepresentativeType_BR::Intervenor:
                return 'INTERVENTOR';
            case LegalRepresentativeType_BR::Businessman:
                return 'EMPRESÁRIO';
            case LegalRepresentativeType_BR::Accountant:
                return 'CONTADOR';
            case LegalRepresentativeType_BR::Accounting:
                return 'CONTABILISTA';
            case LegalRepresentativeType_BR::AccountantRepResponsible:
                return 'CONTADOR RESPONSÁVEL PELO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD';
            case LegalRepresentativeType_BR::AuditorRepResponsible:
                return 'AUDITOR INDEPENDENTE RESPONSÁVEL PELO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD';
            case LegalRepresentativeType_BR::IndependentAuditor:
                return 'AUDITOR INDEPENDENTE';
            case LegalRepresentativeType_BR::Others:
                return 'OUTROS';
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI350</Name>
				<Source><![CDATA[
    internal void createRecordI350(FBSpedRecord_BR _parentRecord)
    {
        FiscalCalendarYear fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);

        FiscalCalendarPeriod fiscalCalendarPeriod;
        while select EndDate from fiscalCalendarPeriod
            order by EndDate asc
            where   fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                &&  fiscalCalendarPeriod.Type               == FiscalPeriodType::Closing
        {
            recordI355ToDate = fiscalCalendarPeriod.EndDate;

            FBSpedRecord_BR spedRecord  = FBSpedRecord_BR::constructEmpty('I350');

            spedRecord.addFieldDate (fiscalCalendarPeriod.EndDate); // DT_RES

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordI355(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI355</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void createRecordI355(FBSpedRecord_BR _parentRecord)
    {
        LedgerTrialBalanceTmp trialBalanceTmp = this.calcTrialBalance(recordI355ToDate, recordI355ToDate, true, false);
        container mainAccountCostCenter;

        while select LedgerDimension, EndingBalance, ReportingDimension from trialBalanceTmp
            order by trialBalanceTmp.PrimaryFocus
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                mainAccountCostCenter = this.getMainAccountCostCenterV2(trialBalanceTmp.ReportingDimension);
            }
            else
            {
                mainAccountCostCenter = this.getMainAccountCostCenter(trialBalanceTmp.LedgerDimension);
            }

            MainAccount mainAccount = MainAccount::findByMainAccountId(conPeek(mainAccountCostCenter, 1));

            if (this.checkNatureCodeCodition(mainAccount, TotalAccounts))
            {
                FBSpedRecord_BR spedRecord  = FBSpedRecord_BR::constructEmpty('I355');

                spedRecord.addFieldString   (mainAccount.MainAccountId);                        // COD_CTA
                spedRecord.addFieldString   (conPeek(mainAccountCostCenter, 2));                // COD_CCUS
                spedRecord.addFieldNumeric  (abs(trialBalanceTmp.EndingBalance), 2);            // VL_CTA
                spedRecord.addFieldString   (trialBalanceTmp.EndingBalance >= 0 ? 'D' : 'C');   // IND_DC

                this.addChildRecord(_parentRecord, spedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountOpeningClosingPreviousEndingBalance</Name>
				<Source><![CDATA[
    private FBSpedContabilAccountTree_BR getMainAccountOpeningClosingPreviousEndingBalance(MainAccount _mainAccount, FBSpedContabilAccountTree_BR _spedContabilAccountTree)
    {
        FBSpedContabilAccountTree_BR spedContabilAccountTreeAux;

        if (this.checkNatureCodeCodition(_mainAccount, Totals))
        {
            select sum(OpeningBalance), sum(EndingBalance), sum(PreviousEndingBalance) from spedContabilAccountTreeAux
                where spedContabilAccountTreeAux.LeftValue > _spedContabilAccountTree.LeftValue
                    && spedContabilAccountTreeAux.RightValue < _spedContabilAccountTree.RightValue;
        }
        else
        {
            select sum(OpeningBalance), sum(EndingBalance), sum(PreviousEndingBalance) from spedContabilAccountTreeAux
                where spedContabilAccountTreeAux.LeftValue == _spedContabilAccountTree.LeftValue
                    && spedContabilAccountTreeAux.RightValue == _spedContabilAccountTree.RightValue;
        }

        return spedContabilAccountTreeAux;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>