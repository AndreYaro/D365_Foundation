<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCashDiscountHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendCashDiscountHelper</c> class manages calculations and validation of cash discount to
///    take amounts.
/// </summary>
class CustVendCashDiscountHelper
{
    CustVendTransOpen transOpen;
    CustVendTransOpenData transOpenData;

    DiscGraceDays graceDays;
    TransDate discountDate;

    CashDiscAmount cashDiscountTaken;
    CashDiscAmount largestCashDiscount;
    CashDiscAmount fullCashDiscountForTier;
    AmountCur previousSettledAmount;
    AmountCur remainingOpenBalance;

    ModuleCustVend moduleCustVend;
    boolean isFullCashDiscountForTierSet;
    boolean isLargestCashDiscountSet;
    boolean isCashDiscountTakenSet;
    boolean isPreviousSettledAmountSet;
    boolean isRemainingOpenBalanceSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCashDiscOnCreditNote</Name>
				<Source><![CDATA[
    private boolean allowCashDiscOnCreditNote()
    {
        boolean allowCashDiscountForCreditNote;
        CustParameters custParameters;
        VendParameters vendParameters;

        if (moduleCustVend == ModuleCustVend::Cust)
        {
            custParameters = CustParameters::find();
            allowCashDiscountForCreditNote = custParameters.CashDiscForCreditNote;
        }
        else
        {
            vendParameters = VendParameters::find();
            allowCashDiscountForCreditNote = vendParameters.CashDiscForCreditNote;
        }

        return allowCashDiscountForCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCashDiscOnPartialPayment</Name>
				<Source><![CDATA[
    private boolean allowCashDiscOnPartialPayment()
    {
        boolean allowCashDiscOnPartialPayment;
        CustParameters custParameters;
        VendParameters vendParameters;

        if (moduleCustVend == ModuleCustVend::Cust)
        {
            custParameters = CustParameters::find();
            allowCashDiscOnPartialPayment = custParameters.CashDiscForPartialPaym;
        }
        else
        {
            vendParameters = VendParameters::find();
            allowCashDiscOnPartialPayment = vendParameters.CashDiscForPartialPaym;
        }

        return allowCashDiscOnPartialPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscForOpenAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cash discount amount to take for the balance an open transaction.
    /// </summary>
    /// <returns>
    ///    The cash discount amount to take.
    /// </returns>
    public CashDiscAmount determineCashDiscForOpenAmount()
    {
        CashDiscAmount cashDiscountToTake;
        Percent percentOpen;
        CustVendTransCashDisc transCashDisc;

        if (transOpen.UseCashDisc == UseCashDisc::Never
            || abs(this.parmCashDiscountTaken()) > abs(this.parmLargestCashDiscount()))
        {
            return 0;
        }

        changecompany(transOpen.company())
        {
            if (!isFullCashDiscountForTierSet)
            {
                Debug::assert(discountDate != dateNull());

                transCashDisc = CustVendTransCashDisc::findByUseCashDisc(
                    moduleCustVend,
                    transOpen.TableId,
                    transOpen.RecId,
                    transOpen.UseCashDisc,
                    discountDate,
                    graceDays);

                fullCashDiscountForTier = transCashDisc.CashDiscAmount;
            }

            if (abs(this.parmLargestCashDiscount()) == abs(fullCashDiscountForTier))
            {
                // there is only one tier so discount to take is the discount for tier less amount already taken
                cashDiscountToTake = fullCashDiscountForTier - this.parmCashDiscountTaken();
            }
            else if (this.parmCashDiscountTaken() == 0)
            {
                // no discount has been taken so used the discount for tier
                cashDiscountToTake = fullCashDiscountForTier;
            }
            else
            {
                // there are tiered discount and have aleady taken a partial discount.
                // The cash discount is the percent left to settle times the discount for the tier.
                if (transOpen.AmountCur + this.parmPreviousSettledAmount() != 0)
                {
                    percentOpen = (transOpen.AmountCur / (transOpen.AmountCur + previousSettledAmount));
                }

                cashDiscountToTake = fullCashDiscountForTier * percentOpen;
                cashDiscountToTake = this.round(cashDiscountToTake);
            }

            cashDiscountToTake = this.validateCashDiscToTake(cashDiscountToTake);

            if (transOpen.UseCashDisc == UseCashDisc::Normal && this.isCreditNote()
                && this.allowCashDiscOnCreditNote() == false)
            {
                // This is a credit note and are not allowing cash discount for credit notes so the discount is zero
                cashDiscountToTake = 0;
            }
        }

        return cashDiscountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCashDiscForPartialSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the cash discount amount to take for the specified settle amount.
    /// </summary>
    /// <param name="_settleAmount">
    ///     The settle amount that is used to calculate the cash discount amount to take.
    /// </param>
    /// <returns>
    ///     The cash discount amount to take for the settle amount.
    /// </returns>
    public CashDiscAmount determineCashDiscForPartialSettlement(AmountCur _settleAmount)
    {
        CashDiscAmount cashDiscountToTake;

        cashDiscountToTake = this.determineCashDiscForOpenAmount();

        if (cashDiscountToTake == 0)
        {
            return 0;
        }

        changecompany(transOpen.company())
        {
            // determine if this is a partial payment
            if (abs(_settleAmount) < abs(this.parmRemainingOpenBalance() - cashDiscountToTake))
            {
                if (this.allowCashDiscOnPartialPayment() == NoYes::No
                    && transOpen.UseCashDisc == UseCashDisc::Always)
                {
                    // when use cash discount is always and don't allow discount on partial payment,
                    // take the full discount amount.
                    cashDiscountToTake = fullCashDiscountForTier;
                }
                else if (this.allowCashDiscOnPartialPayment() == NoYes::Yes
                    || transOpen.UseCashDisc == UseCashDisc::Always)
                {
                    if (transOpen.AmountCur + this.parmPreviousSettledAmount() - fullCashDiscountForTier == 0)
                    {
                        cashDiscountToTake = 0;
                    }
                    else
                    {
                        cashDiscountToTake = (fullCashDiscountForTier / (transOpen.AmountCur + this.parmPreviousSettledAmount() - fullCashDiscountForTier)) * _settleAmount;
                        cashDiscountToTake = this.round(cashDiscountToTake);
                    }
                }
                else
                {
                    // discount not allowed on partial
                    cashDiscountToTake = 0;
                }
            }

            cashDiscountToTake = this.validateCashDiscToTake(cashDiscountToTake);
        }

        return cashDiscountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    private boolean isCreditNote()
    {
        boolean isCreditNote;
        CustTrans custTrans;
        VendTrans vendTrans;

        if (moduleCustVend == ModuleCustVend::Cust)
        {
            custTrans = transOpen.custTrans();

            if (custTrans)
            {
                isCreditNote = custTrans.isCreditNote();
            }
        }
        else
        {
            vendTrans = transOpen.vendTrans();

            if (vendTrans)
            {
                isCreditNote = vendTrans.isCreditNote();
            }
        }

        return isCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(CustVendTransOpen _custVendTransOpen)
    {
        transOpen = _custVendTransOpen;
        transOpenData = _custVendTransOpen.transOpenData();

        switch (_custVendTransOpen.TableId)
        {
            case tableNum(CustTransOpen):
                moduleCustVend = ModuleCustVend::Cust;
                break;

            case tableNum(VendTransOpen):
                moduleCustVend = ModuleCustVend::Vend;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashDiscountTaken</Name>
				<Source><![CDATA[
    public CashDiscAmount parmCashDiscountTaken(CashDiscAmount _cashDiscountTaken = cashDiscountTaken)
    {
        cashDiscountTaken = _cashDiscountTaken;

        if (!isCashDiscountTakenSet)
        {
            if (prmIsDefault(_cashDiscountTaken))
            {
                changecompany(transOpen.company())
                {
                    // no value is passed in, so calculate the value
                    cashDiscountTaken = transOpen.getCashDiscAlreadyTaken();
                }
            }

            isCashDiscountTakenSet = true;
        }

        return cashDiscountTaken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscountDate</Name>
				<Source><![CDATA[
    public TransDate parmDiscountDate(TransDate _discountDate = discountDate)
    {
        discountDate = _discountDate;
        return discountDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullCashDiscountForTier</Name>
				<Source><![CDATA[
    public CashDiscAmount parmFullCashDiscountForTier(CashDiscAmount _fullCashDiscountForTier = fullCashDiscountForTier)
    {
        fullCashDiscountForTier = _fullCashDiscountForTier;

        if (!prmIsDefault(_fullCashDiscountForTier))
        {
            // value is passed in, not using the default
            isFullCashDiscountForTierSet = true;
        }

        return fullCashDiscountForTier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGraceDays</Name>
				<Source><![CDATA[
    public DiscGraceDays parmGraceDays(DiscGraceDays _graceDays = graceDays)
    {
        graceDays = _graceDays;
        return graceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLargestCashDiscount</Name>
				<Source><![CDATA[
    public CashDiscAmount parmLargestCashDiscount(CashDiscAmount _largestCashDiscount = largestCashDiscount)
    {
        largestCashDiscount = _largestCashDiscount;

        if (!isLargestCashDiscountSet)
        {
            if (prmIsDefault(_largestCashDiscount))
            {
                changecompany(transOpen.company())
                {
                    if (moduleCustVend == ModuleCustVend::Cust)
                    {
                        // no value is passed in, so calculate the value
                        largestCashDiscount = CustTransCashDisc::findLargestCashDisc(transOpen.TableId, transOpen.RecId).CashDiscAmount;
                    }
                    else
                    {
                        // no value is passed in, so calculate the value
                        largestCashDiscount = VendTransCashDisc::findLargestCashDisc(transOpen.TableId, transOpen.RecId).CashDiscAmount;
                    }
                }
            }

            isLargestCashDiscountSet = true;
        }

        return largestCashDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousSettledAmount</Name>
				<Source><![CDATA[
    public AmountCur parmPreviousSettledAmount(AmountCur _previousSettledAmount = previousSettledAmount)
    {
        previousSettledAmount = _previousSettledAmount;

        if (!isPreviousSettledAmountSet)
        {
            if (prmIsDefault(_previousSettledAmount))
            {
                changecompany(transOpen.company())
                {
                    // no value is passed in, so calculate the value
                    previousSettledAmount = transOpen.getPrevSettledAmount();
                }
            }

            isPreviousSettledAmountSet = true;
        }

        return previousSettledAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainingOpenBalance</Name>
				<Source><![CDATA[
    public AmountCur parmRemainingOpenBalance(AmountCur _remainingOpenBalance = remainingOpenBalance)
    {
        remainingOpenBalance = _remainingOpenBalance;

        if (!isRemainingOpenBalanceSet)
        {
            if (prmIsDefault(_remainingOpenBalance))
            {
                // no value is passed in, so use default value.
                remainingOpenBalance = transOpen.AmountCur;
            }

            isRemainingOpenBalanceSet = true;
        }

        return remainingOpenBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    private CashDiscAmount round(CashDiscAmount _discountAmount)
    {
        CashDiscAmount roundedDiscountAmount;
        CurrencyCode currencyCode;
        CustTrans custTrans;
        VendTrans vendTrans;

        if (moduleCustVend == ModuleCustVend::Cust)
        {
            custTrans = transOpen.custTrans();
            currencyCode = custTrans.CurrencyCode;
        }
        else
        {
            vendTrans = transOpen.vendTrans();
            currencyCode = vendTrans.CurrencyCode;
        }

        roundedDiscountAmount = CurrencyExchange::round(_discountAmount, currencyCode);

        return roundedDiscountAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCashDiscToTake</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the specified cash discount amount to take.
    /// </summary>
    /// <param name="_cashDiscountToTake">
    ///     The cash discount amount to take to validate.
    /// </param>
    /// <returns>
    ///     The validated cash discount amount to take.
    /// </returns>
    public CashDiscAmount validateCashDiscToTake(CashDiscAmount _cashDiscountToTake)
    {
        CashDiscAmount adjustedCashDiscountToTake = _cashDiscountToTake;

        // validate that discount is same sign as transaction
        if ((adjustedCashDiscountToTake > 0 && transOpen.AmountCur < 0)
            || (adjustedCashDiscountToTake < 0 && transOpen.AmountCur > 0))
        {
            adjustedCashDiscountToTake = -adjustedCashDiscountToTake;
        }

        if (abs(adjustedCashDiscountToTake + this.parmCashDiscountTaken()) > abs(this.parmLargestCashDiscount()))
        {
            // Discount to take can't be greater than largest discount less amount already taken
            adjustedCashDiscountToTake = this.parmLargestCashDiscount() - this.parmCashDiscountTaken();
        }

        return adjustedCashDiscountToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendCashDiscountHelper construct(CustVendTransOpen _custVendTransOpen)
    {
        return new CustVendCashDiscountHelper(_custVendTransOpen);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>