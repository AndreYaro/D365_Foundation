<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLabelPrintWithoutWorkEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSLicensePlateLabelPrintWithoutWorkEnumerator implements Enumerator
{
    private WHSLicensePlateLabel    licensePlateLabel;
    private WHSLicensePLate         licensePlate;
    private boolean                 firstRow = true;
    private boolean                 firstChild = true;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSLicensePlateLabelPrintWithoutWorkEnumerator construct()
    {
        return new WHSLicensePlateLabelPrintWithoutWorkEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public anytype current()
    {
        return licensePlateLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    public str definitionString()
    {
        return classStr(WHSLicensePlateLabelPrintWithoutWorkEnumerator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        if (!licensePlateLabel)
        {
            return false;
        }

        if (firstRow)
        {
            firstRow = false;
            return licensePlateLabel.LabelId != '';
        }

        if (firstChild)
        {
            if (licensePlate.LicensePlateLevel == 1)
            {
                firstChild = false;

                WHSLicensePlate         childLicensePlate;
                select forupdate licensePlateLabel
                    where licensePlateLabel.PrintedDate == dateNull()
                        && !licensePlateLabel.WorkId
                exists join childLicensePlate
                    where childLicensePlate.LicensePlateId == licensePlateLabel.LicensePlateId
                        && childLicensePlate.LicensePlateParent == licensePlate.LicensePlateId;
            }
            else
            {
                licensePlateLabel = null;
                return false;
            }
        }
        else
        {
            next licensePlateLabel;
        }

        return licensePlateLabel.LabelId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        select firstonly forUpdate licensePlateLabel
            where licensePlateLabel.LicensePlateId == licensePlate.LicensePlateId
                            && licensePlateLabel.PrintedDate == dateNull()
                            && !licensePlateLabel.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        this.init();
        firstRow = true;
        firstChild = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicensePlateId</Name>
				<Source><![CDATA[
    internal static WHSLicensePlateLabelPrintWithoutWorkEnumerator newFromLicensePlateId(WHSLicensePlateId _licensePlateId)
    {
        WHSLicensePlateLabelPrintWithoutWorkEnumerator enumerator = WHSLicensePlateLabelPrintWithoutWorkEnumerator::construct();

        WHSLicensePlate foundLicensePlate = WHSLicensePlate::find(_licensePlateId);

        if (foundLicensePlate.LicensePlateLevel == 1 || !foundLicensePlate.LicensePlateParent)
        {
            enumerator.licensePlate = foundLicensePlate;
        }
        else
        {
            WHSLicensePLate parentLicensePlate;
            select firstOnly parentLicensePlate
                where parentLicensePlate.LicensePlateId == foundLicensePlate.LicensePlateParent;
            enumerator.licensePlate = parentLicensePlate;
        }

        enumerator.init();

        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>