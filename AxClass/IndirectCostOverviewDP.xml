<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IndirectCostOverviewDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for <c>indirectCostOverview</c> Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>indirectCostOverview</c> SRS Report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(IndirectCostOverview)),
    SRSReportParameterAttribute(classStr(IndirectCostOverviewContract))
]
class IndirectCostOverviewDP extends SRSReportDataProviderBase
{
    IndirectCostOverviewTmp indirectCostOverviewTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIndirectCostOverviewTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>IndirectCostOverviewTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>IndirectCostOverviewTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(IndirectCostOverviewTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public IndirectCostOverviewTmp getIndirectCostOverviewTmp()
    {
        select indirectCostOverviewTmp;
        return indirectCostOverviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the temporary table.
    /// </summary>
    /// <param name="_costSheetCalcFact">
    ///    A <c>CostSheetCalculationFactor</c> table buffer.
    /// </param>
    /// <param name="_bomCostGroup">
    ///    A <c>BOMCostGroup</c> table buffer.
    /// </param>
    /// <param name="_costingVersion">
    ///    A <c>CostingVersion</c> table buffer.
    /// </param>
    /// <param name="_costSheetNodeTable">
    ///    A <c>CostSheetNodeTable</c> table buffer.
    /// </param>
    private void insertIntoTempTable(
        CostSheetCalculationFactor  _costSheetCalcFact,
        BOMCostGroup                _bomCostGroup,
        CostingVersion              _costingVersion,
        CostSheetNodeTable          _costSheetNodeTable)
    {
        indirectCostOverviewTmp.ItemCode                = _costSheetCalcFact.ItemCode;
        indirectCostOverviewTmp.ItemRelation            = _costSheetCalcFact.ItemRelation;
        indirectCostOverviewTmp.FromDate                = _costSheetCalcFact.FromDate;
        indirectCostOverviewTmp.InventSiteId            = _costSheetCalcFact.InventSiteId;
        indirectCostOverviewTmp.VersionId               = _costSheetCalcFact.VersionId;
        indirectCostOverviewTmp.Amount                  = _costSheetCalcFact.Amount;
        indirectCostOverviewTmp.CostingVersionStatus    = _costSheetCalcFact.CostingVersionStatus;
        indirectCostOverviewTmp.Code                    = _costSheetNodeTable.Code;
        indirectCostOverviewTmp.Type                    = _costSheetNodeTable.Type;
        indirectCostOverviewTmp.Description             = _costSheetNodeTable.Description;
        indirectCostOverviewTmp.Name                    = _bomCostGroup.Name;
        indirectCostOverviewTmp.CostGroupId             = _bomCostGroup.CostGroupId;
        indirectCostOverviewTmp.Percentage              = _costSheetCalcFact.Percentage;
        indirectCostOverviewTmp.CostingType             = _costingVersion.CostingType;
        indirectCostOverviewTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Calls sub-methods to insert data into the temporary table.
    /// </remarks>
    public void processReport()
    {
        QueryRun                    qrun;
        QueryBuildDataSource        dsRouteCostCategoryPrice;
        QueryBuildRange             qbRange;

        CostSheetCalculationFactor  costSheetCalcFact;
        BOMCostGroup                bomCostGroup;
        CostingVersion              costingVersion;
        CostSheetNodeTable          costSheetNodeTable;
        RecordSortedList            asPerDateFilter;
        TransDate                   asPerDate;
        IndirectCostOverviewContract contract = this.parmDataContract() as IndirectCostOverviewContract;

        asPerDate   = contract.parmAsPerDate();
        qrun        = new QueryRun(this.parmQuery());

        //if the user specified an As per date, some filtering is necessary
        if (asPerDate)
        {
            dsRouteCostCategoryPrice    = qrun.query().dataSourceTable(tableNum(CostSheetCalculationFactor),1);
            qbRange                     = dsRouteCostCategoryPrice.addRange(fieldNum(CostSheetCalculationFactor, FromDate));
            qbRange.value(SysQuery::range(dateNull(), asPerDate));

            asPerDateFilter             = new RecordSortedList(tableNum(CostSheetCalculationFactor));
            asPerDateFilter.sortOrder(  fieldNum(CostSheetCalculationFactor, SheetId),
                                        fieldNum(CostSheetCalculationFactor, NodeId),
                                        fieldNum(CostSheetCalculationFactor, ItemCode),
                                        fieldNum(CostSheetCalculationFactor, ItemRelation),
                                        fieldNum(CostSheetCalculationFactor, InventSiteId),
                                        fieldNum(CostSheetCalculationFactor, CostingVersionStatus));

            while (qrun.next())
            {
                costSheetCalcFact   = qrun.get(tableNum(CostSheetCalculationFactor));

                if (!asPerDateFilter.find(costSheetCalcFact))
                {
                    asPerDateFilter.ins(costSheetCalcFact);
                    bomCostGroup        = qrun.get(tableNum(BOMCostGroup));
                    costingVersion      = qrun.get(tableNum(CostingVersion));
                    costSheetNodeTable  = qrun.get(tableNum(CostSheetNodeTable),1);
                    this.insertIntoTempTable(costSheetCalcFact,bomCostGroup,costingVersion,costSheetNodeTable);
                }
            }
        }
        else
        {
            while (qrun.next())
            {
                costSheetCalcFact   = qrun.get(tableNum(CostSheetCalculationFactor));
                bomCostGroup        = qrun.get(tableNum(BOMCostGroup));
                costingVersion      = qrun.get(tableNum(CostingVersion));
                costSheetNodeTable  = qrun.get(tableNum(CostSheetNodeTable),1);
                this.insertIntoTempTable(costSheetCalcFact,bomCostGroup,costingVersion,costSheetNodeTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
