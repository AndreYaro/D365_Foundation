<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateOnMultipleLocationCheckQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for building the queries needed when ensuring that license plates only have on-hand on a single location.
/// </summary>
internal class WHSLicensePlateOnMultipleLocationCheckQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instantiateInventSumQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> instance that is used to query for license plates with physical inventory.
    /// </summary>
    /// <param name = "_inventSum">The <c>InventSum</c> buffer that will hold values from the table.</param>
    /// <param name = "_licensePlateId">The Id of the license plate to search for.</param>
    /// <param name = "_excludeUserLocations">A boolean determining if user locations should be included when searching for the license plate.</param>
    /// <param name = "_excludedInventLocationId">The Id of a warehouse that should be excluded when searching for the license plate.</param>    
    /// <returns>A <c>SysDaQueryObject</c> instance that is used to query for license plates with physical inventory.</returns>
    [Hookable(false)]
    internal SysDaQueryObject instantiateInventSumQueryObject(
        InventSum           _inventSum,
        WHSLIcensePlateId   _licensePlateId,
        boolean             _excludeUserLocations,
        InventLocationId    _excludedInventLocationId)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);

        SysDaQueryExpression inventSumQueryWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ClosedQty)), new SysDaValueExpression(NoYes::No))
                                                        .and(new SysDaGreaterThanExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, PhysicalInvent)), new SysDaValueExpression(0))
                                                        .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, LicensePlateId)), new SysDaValueExpression(_licensePlateId))));
        

        if (_excludedInventLocationId)
        {
            inventSumQueryWhereClause = inventSumQueryWhereClause.and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, InventLocationId)), new SysDaValueExpression(_excludedInventLocationId)));
        }

        inventSumQueryObject.whereClause(inventSumQueryWhereClause);

        inventSumQueryObject.groupByClause().add(fieldStr(InventSum, InventLocationId)).add(fieldStr(InventSum, wMSLocationId));

        if (_excludeUserLocations)
        {
            this.addWMSLocationNotUserLocationQuery(inventSumQueryObject, _inventSum);
        }
       
        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventSumInventDimQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> instance that is used to query for licenseplates with physical inventory.
    /// </summary>
    /// <param name = "_inventSum">The <c>InventSum</c> buffer that will hold values from the table.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer that will hold values from the table.</param>
    /// <param name = "_licensePlateId">The Id of the license plate to search for.</param>
    /// <param name = "_excludeUserLocations">A boolean determining if user locations should be included when searching for the license plate.</param>
    /// <param name = "_excludedInventLocationId">The Id of a warehouse that should be excluded when searching for the license plate.</param>
    /// <returns>A <c>SysDaQueryObject</c> instance that is used to query for license plates with physical inventory.</returns>
    [Hookable(false)]
    internal SysDaQueryObject instantiateInventSumInventDimQueryObject(
        InventSum           _inventSum,
        InventDim           _inventDim,
        WHSLIcensePlateId   _licensePlateId,
        boolean             _excludeUserLocations,
        InventLocationId    _excludedInventLocationId)
    {
        SysDaQueryObject inventSumQueryObject = new SysDaQueryObject(_inventSum);

        SysDaQueryExpression inventSumQueryExpression = new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ClosedQty)), new SysDaValueExpression(NoYes::No))
                                                        .and(new SysDaGreaterThanExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, PhysicalInvent)), new SysDaValueExpression(0)));
        
        inventSumQueryObject.whereClause(inventSumQueryExpression);

        SysDaQueryObject inventDimQuery = new SysDaQueryObject(_inventDim);
        SysDaQueryExpression inventDimWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimId)), new SysDaFieldExpression(_inventSum, identifierStr(InventDimId)))
                                                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventDim, fieldStr(InventDim, LicensePlateId)), new SysDaValueExpression(_licensePlateId)));
        
        if (_excludedInventLocationId)
        {
            inventDimWhereClause = inventDimWhereClause.and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventLocationId)), new SysDaValueExpression(_excludedInventLocationId)));
        }

        inventDimQuery.whereClause(inventDimWhereClause);
        
        inventSumQueryObject.joinClause(
            SysDaJoinKind::InnerJoin,
            inventDimQuery);
        
        if (_excludeUserLocations)
        {
            this.addWMSLocationNotUserLocationQuery(inventDimQuery, _inventDim);
        }

        inventDimQuery.groupByClause().add(fieldStr(InventDim, InventLocationId)).add(fieldStr(InventDim, wMSLocationId));
       
        return inventSumQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWMSLocationNotUserLocationQuery</Name>
				<Source><![CDATA[
    private void addWMSLocationNotUserLocationQuery(
        SysDaQueryObject    _inventSumQueryObject,
        Common              _inventDimensionJoinBuffer)
    {
        WHSUserLocType userLocType = WHSParameters::find().UserLocType;
        WMSLocation wmsLocation;
            
        SysDaQueryObject wmsLocationQuery = new SysDaQueryObject(wmsLocation);
            
        SysDaQueryExpression wmsLocationWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(wmsLocation, fieldStr(WMSLocation, wMSLocationId)), new SysDaFieldExpression(_inventDimensionJoinBuffer, identifierStr(wMSLocationId)))
                                                            .and(new SysDaEqualsExpression(new SysDaFieldExpression(wmsLocation, fieldStr(WMSLocation, InventLocationId)), new SysDaFieldExpression(_inventDimensionJoinBuffer, identifierStr(InventLocationId))))
                                                            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(wmsLocation, fieldStr(WMSLocation, LocProfileId)), new SysDaValueExpression(userLocType)));
        
        wmsLocationQuery.whereClause(wmsLocationWhereClause);

        _inventSumQueryObject.joinClause(
            SysDaJoinKind::ExistsJoin,
                wmsLocationQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSLicensePlateOnMultipleLocationCheckQueryBuilder construct()
    {
        return new WHSLicensePlateOnMultipleLocationCheckQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>