<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProServiceCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;

/// <summary>
/// A collection of Chorus Pro services.
/// </summary>
internal final class BusinessDocChorusProServiceCollection implements Enumerable
{
    private Map servicesByCodes = new Map(Types::String, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromJArray</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProServiceCollection constructFromJArray(JArray _serviceList)
    {
        #PC
        const str ServiceCodeJProperty = 'codeService';
        const str ServiceLabelJProperty = 'libelleService';
        const str IsActiveJProperty = 'estActif';
        const str ServiceCodeIdJProperty = 'idService';

        var ret = new BusinessDocChorusProServiceCollection();

        if (_serviceList != null)
        {
            var i = _serviceList.GetEnumerator();
            while (i.MoveNext())
            {
                JObject serviceJObj = i.get_Current() as JObject;
                if (serviceJObj != null)
                {
                    JToken jTokenCode = serviceJObj.SelectToken(ServiceCodeJProperty);
                    JToken jTokenLabel = serviceJObj.SelectToken(ServiceLabelJProperty);
                    JToken jTokenIsActive = serviceJObj.SelectToken(IsActiveJProperty);
                    JToken jTokenServiceCodeId = serviceJObj.SelectToken(ServiceCodeIdJProperty);
                    if (jTokenCode != null && jTokenLabel != null && jTokenIsActive != null)
                    {
                        str code = jTokenCode.ToString();
                        str label = jTokenLabel.ToString();
                        str isActive = jTokenIsActive.ToString();
                        int id = str2Int(jTokenServiceCodeId.ToString());

                        ret.add(code, label, id, isActive == #True);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    public Enumerator getEnumerator()
    {
        return servicesByCodes.valueSet().getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public void add(str _code, str _label, int _id, boolean _isActive)
    {
        servicesByCodes.insert(_code, BusinessDocChorusProService::construct(_code, _label, _id, _isActive));
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    public BusinessDocChorusProService get(str _code)
    {
        if (servicesByCodes.exists(_code))
        {
            return servicesByCodes.lookup(_code);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetHashCode</Name>
				<Source><![CDATA[
    public int GetHashCode()
    {
        int ret = 0;
        MapEnumerator i = servicesByCodes.getEnumerator();
        while (i.moveNext())
        {
            BusinessDocChorusProService service = i.currentValue();
            ret = (ret + service.GetHashCode()) mod BusinessDocChorusProService::HashCodeModulo;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>