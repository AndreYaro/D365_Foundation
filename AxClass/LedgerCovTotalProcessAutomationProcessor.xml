<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovTotalProcessAutomationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process for cash flow forecast process automation.
/// </summary>
internal class LedgerCovTotalProcessAutomationProcessor extends SysOperationServiceController
{
    
    private BatchHeader batchHeader;
    private ProcessExecutionSourceLink sourceLink;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFromSysLastValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmLoadFromSysLastValue(boolean _loadFromSysLastValue = loadFromSysLastValue)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription defaultCaption()
    {
        return "@CashFlowManagement:LedgerCovTotalAutomationProcess";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static LedgerCovTotalProcessAutomationProcessor construct()
    {
        return new LedgerCovTotalProcessAutomationProcessor(
            classStr(LedgerCovTotalProcessAutomationProcessor),
            methodStr(LedgerCovTotalProcessAutomationProcessor, runTask),
            SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    public void runTask(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;

        try
        {
            sourceLink = this.createProcessExecutionSourceLink(_processScheduleWorkItem);

            LedgerCovTotalProcessAutomationExecutionContract executionContract = this.initExecutionContract(_processScheduleWorkItem, sourceLink.RecId);

            batchHeader = this.getBatchHeader();

            // create LedgerCovTotal batch
            LedgerCovTotal cashflowBatch = LedgerCovTotal::constructFromAutomationExecutionContract(executionContract);
            batchHeader.addTask(cashflowBatch);

            // Create monitor task and add dependency
            LedgerCovTotalProcessAutomationRuntimeMonitor monitorTask = this.createRuntimeMonitorTask(sourceLink.RecId);
            batchHeader.addTask(monitorTask);
            batchHeader.addDependency(monitorTask, cashflowBatch, BatchDependencyStatus::FinishedOrError);

            batchHeader.save();
        }
        catch (errorEx)
        {
            this.logFailure(_processScheduleWorkItem);

            throw;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>logFailure</Name>
				<Source><![CDATA[
    private void logFailure(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        ttsbegin;
        
        if (sourceLink.RecId != 0)
        {
            sourceLink.RefRecId = 0;
            sourceLink.RefTableId = 0;
            sourceLink.Header = '';
            sourceLink.Message = "@CashFlowManagement:LedgerCovTotalAutomationFailed";
            sourceLink.Status = ProcessExecutionSourceStatus::Error;
            sourceLink.update();
        }
        else
        {
            ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
            sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
            sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
            sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
            sourceLinkItem.parmMessage("@CashFlowManagement:LedgerCovTotalAutomationFailed");
            sourceLinkItem.parmSourceTableId(0);
            sourceLinkItem.parmSourceRecId(0);
            sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Error);

            sourceLink = ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
        }
        
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
        messageLogItem.parmProcessExecutionSourceLink(sourceLink.RecId);
        messageLogItem.parmException(Exception::Error);
        messageLogItem.parmMessage("@CashFlowManagement:LedgerCovTotalAutomationFailed");
        
        ProcessExecutionMessageLog::insertMessage(messageLogItem);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchHeader</Name>
				<Source><![CDATA[
    private BatchHeader getBatchHeader()
    {
        if (batchHeader == null)
        {
            batchHeader = BatchHeader::getCurrentBatchHeader();
            if (batchHeader == null)
            {
                batchHeader = BatchHeader::construct();
            }
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessExecutionSourceLink</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink createProcessExecutionSourceLink(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        ProcessExecutionSourceLinkItem sourceLinkItem = ProcessExecutionSourceLinkItem::construct();
        sourceLinkItem.parmExecutionId(_processScheduleWorkItem.parmExecutionId());
        sourceLinkItem.parmProcessScheduleOccurrenceRecId(_processScheduleWorkItem.parmProcessScheduleOccurrenceRecId());
        sourceLinkItem.parmProcessScheduleSeriesPatternRecId(_processScheduleWorkItem.parmProcessScheduleSeriesPatternRecId());
        sourceLinkItem.parmMessage("@CashFlowManagement:LedgerCovTotalProcessAutomationExecutionInProgress");
        sourceLinkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Warning);

        return ProcessExecutionSourceLink::insertSourceLink(sourceLinkItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExecutionContract</Name>
				<Source><![CDATA[
    private LedgerCovTotalProcessAutomationExecutionContract initExecutionContract(ProcessScheduleWorkItem _processScheduleWorkItem, RefRecId _sourceLinkRecId)
    {
        AllNew forecastCalculationMethod = LedgerCovTotalProcessAutomationSchedulingParameters::findForProcessScheduleOccurrence(
            _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId())
            .Type;

        LedgerCovTotalProcessAutomationExecutionContract automationExecutionContract = LedgerCovTotalProcessAutomationExecutionContract::constructFromOccurrenceSourceLinkAndCalculationMethod(
            _processScheduleWorkItem.parmProcessScheduleOccurrenceRecId(),
            _sourceLinkRecId,
            forecastCalculationMethod);

        return automationExecutionContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private LedgerCovTotalProcessAutomationRuntimeMonitor createRuntimeMonitorTask(
        RefRecId _executionSourceLinkRecId)
    {
        LedgerCovTotalProcessAutomationRuntimeMonitor runtimeMonitor = new LedgerCovTotalProcessAutomationRuntimeMonitor(
            classStr(LedgerCovTotalProcessAutomationRuntimeMonitor),
            methodStr(LedgerCovTotalProcessAutomationRuntimeMonitor, runMonitor),
            SysOperationExecutionMode::Synchronous);

        LedgerCovTotalProcessAutomationRuntimeMonitorContract contract = runtimeMonitor.getDataContractInfoObject().dataContractObject() as LedgerCovTotalProcessAutomationRuntimeMonitorContract;
        contract.parmProcessExecutionSourceLinkRecId(_executionSourceLinkRecId);
        contract.parmBatchJobId(this.getBatchHeader().parmBatchHeaderId());
        contract.parmIsFinalRuntimeMonitor(true);

        return runtimeMonitor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>