<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpd_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventTransferUpd))]
public final class InventTransferUpd_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeInventTransferJourLine</Name>
				<Source><![CDATA[
    protected void initializeInventTransferJourLine(
        InventTransferJourLine  _inventTransferJourLine,
        InventTrans             _inventTrans,
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine)
    {
        next initializeInventTransferJourLine(_inventTransferJourLine, _inventTrans, _inventTransferParmLine, _inventTransferLine);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
            InventTransferTable::find(_inventTransferLine.TransferId).TransferType_IN == TransferType_IN::StockTransfer)
        {
            InventTransferLine_IN inventTransferLineIN = _inventTransferLine.inventTransferLine_IN();
            if (!inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
            {
                _inventTransferJourLine.ExciseAmt_IN     = inventTransLineTax.getExciseTaxAmount();
                _inventTransferJourLine.SalesTaxAmt_IN   = inventTransLineTax.getSalesTaxAmount();
                _inventTransferJourLine.vatAmt_IN        = inventTransLineTax.getVATTaxAmt();
                _inventTransferJourLine.UnitPrice_IN     = inventTransferLineIN.UnitPrice;

                _inventTransferJourLine.QtyScrapped = _inventTransferParmLine.QtyScrapNow;
            }

            if (inventTransferLineIN.UnitPrice == 0)
            {
                _inventTransferJourLine.NetAmtShip_IN    = CurrencyExchangeHelper::amount(inventTransferLineIN.NetAmount / _inventTransferLine.QtyTransfer, inventTransferLineIN.CurrencyCode) * _inventTransferJourLine.QtyShipped;
                _inventTransferJourLine.NetAmtReceive_IN = CurrencyExchangeHelper::amount(inventTransferLineIN.NetAmount / _inventTransferLine.QtyTransfer, inventTransferLineIN.CurrencyCode) * _inventTransferJourLine.QtyReceived;
            }
            else
            {
                _inventTransferJourLine.NetAmtShip_IN    = inventTransferLineIN.UnitPrice * _inventTransferJourLine.QtyShipped;
                _inventTransferJourLine.NetAmtReceive_IN = inventTransferLineIN.UnitPrice * _inventTransferJourLine.QtyReceived;
            }

            if (inventTransferTable.StockTransferCostPriceHandlingImprovement_IN)
            {
                _inventTransferJourLine.NetAmtShip_IN    = CurrencyExchangeHelper::amount(_inventTransferJourLine.NetAmtShip_IN, inventTransferLineIN.CurrencyCode);
                _inventTransferJourLine.NetAmtReceive_IN = CurrencyExchangeHelper::amount(_inventTransferJourLine.NetAmtReceive_IN, inventTransferLineIN.CurrencyCode);
            }
        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate that is called in the <c>run</c> method.
    /// </summary>
    /// <param name = "_inventTransferJour">The <c>InventTransferJour</c> record.</param>
    /// <param name = "_inventTransferTable">The <c>InventTransferTable</c> record.</param>
    [SubscribesTo(classStr(InventTransferUpd), delegateStr(InventTransferUpd, runDelegate))]
    public static void runDelegateHandler(InventTransferJour _inventTransferJour, InventTransferTable _inventTransferTable)
    {
        if (_inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer
            && _inventTransferJour.UpdateType == InventTransferUpdateType::Shipment
            && FeatureStateProvider::isFeatureEnabled(EInvoice_IN_Feature::instance())
            && TaxGSTInvoiceHelper_IN::isGSTInvoice(_inventTransferJour))
        {
            if (_inventTransferJour.CanceledShipment == NoYes::No)
            {
                OnlineInvoicingHelper_IN::createEInvoice(_inventTransferJour);
                OnlineInvoicingHelper_IN::validateEInvoice(_inventTransferJour);
            }
            else 
            {
                InventTransferJour origInventTransferJour = InventTransferJour::findRecId(_inventTransferJour.CanceledShipmentJournalRecId);
                OnlineInvoicingHelper_IN::cancelEInvoice(origInventTransferJour);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>