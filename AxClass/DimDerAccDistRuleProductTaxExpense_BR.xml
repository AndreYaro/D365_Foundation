<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerAccDistRuleProductTaxExpense_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Dimension derivation distribution rule extension for extended price for products sales.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleSaleOfProductExtendedPrice)),
SourceDocumentClassExtensionAttribute(classStr(AccJourRuleSalesComplInv))]
class DimDerAccDistRuleProductTaxExpense_BR extends DimensionDerivationRuleExtension
{
    accountingRule          accountingRule;
    SourceDocumentLineItem  parentSourceDocumentLineItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDimAllocForTax</Name>
				<Source><![CDATA[
    private LedgerDimensionAllocation createDimAllocForTax()
    {
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;

        ledgerDimensionDefaultAccount = this.getMainAccount(MainAccountDimensionListProviderType::Tax);
        ledgerDimension = this.createLedgerDimension(ledgerDimensionDefaultAccount);

        return LedgerDimensionAllocation::newFromParameters(
            ledgerDimension,
            1,
            accountingRule.parmSide(),
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimAllocForTaxNonRecoverable</Name>
				<Source><![CDATA[
    private LedgerDimensionAllocation createDimAllocForTaxNonRecoverable()
    {
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;

        ledgerDimensionDefaultAccount = this.getMainAccount(MainAccountDimensionListProviderType::Party);
        ledgerDimension = this.createLedgerDimension(ledgerDimensionDefaultAccount);

        return LedgerDimensionAllocation::newFromParameters(
            ledgerDimension,
            1,
            accountingRule.parmSide(),
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount createLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount)
    {
        if (_ledgerDimensionDefaultAccount)
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionDefaultAccount, parentSourceDocumentLineItem.parmDefaultDimension());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount getMainAccount(MainAccountDimensionListProviderType _mainAccountDimensionListProviderType)
    {
        MainAccountDimensionList    mainAccountDimensionList;

        mainAccountDimensionList = MainAccountDimensionListProvider::newFromAccountingRule(_mainAccountDimensionListProviderType, accountingRule)
                                        .parmMainAccountDimensionList();

        if (mainAccountDimensionList.first())
        {
            return mainAccountDimensionList.first().parmMainAccount();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the dimension allocation list.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     Current dimension allocation list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionAllocation ledgerDimensionAllocation;
        TaxSourceDocSublineItem taxSourceDocSublineItem;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        accountingRule = dimensionDerivationRule.parmAccountingRule();

        if (accountingRule.parmSourceDocumentLineItem() is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = accountingRule.parmSourceDocumentLineItem();

            if (TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).RetainedTax_BR)
            {
                return;
            }

            parentSourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();

            if (accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable)
            {
                ledgerDimensionAllocation = this.createDimAllocForTaxNonRecoverable();
            }

            if (accountingRule.parmMonetaryAmount() == MonetaryAmount::Tax)
            {
                ledgerDimensionAllocation = this.createDimAllocForTax();
            }

            _ledgerDimensionAllocationList.addEnd(LedgerDimensionAllocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to dimension derivation rule events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>