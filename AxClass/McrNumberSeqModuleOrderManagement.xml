<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrNumberSeqModuleOrderManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRNumberSeqModuleOrderManagement</c> class is for call center number sequence setup.
/// </summary>
public class McrNumberSeqModuleOrderManagement extends NumberSeqApplicationModule
{
    boolean         sameAsChecked;
    boolean         sameAsActive;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        //Define the <c>MCRRCTransBatchID</c> number for refund check print batches.
        datatype.parmDatatypeId(extendedTypeNum(MCRRCTransBatchID));
        datatype.parmReferenceHelp(literalStr("@MCR23532"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2010);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Define the <c>LetterID</c> number for AR parameter sequence number definition.
        datatype.parmDatatypeId(extendedTypeNum(MCRLetterSeqNum));
        datatype.parmReferenceHelp(literalStr("@MCR23606"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2022);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Define the <c>ContinuityCustomerLineID</c> number for AR parameter sequence number definition.
        datatype.parmDatatypeId(extendedTypeNum(MCRContinuityCustLineIDSeqNum));
        datatype.parmReferenceHelp(literalStr("@MCR23755"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2030);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        datatype.parmDatatypeId(extendedTypeNum(MCRCatalogLogID));
        datatype.parmReferenceHelp(literalStr("@MCR23549"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2060);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Used for order credit voucher series
        datatype.parmDatatypeId(extendedTypeNum(MCRCustCreditID));
        datatype.parmReferenceHelp(literalStr("@MCR25771"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2070);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Used as a unique key on the credit table
        datatype.parmDatatypeId(extendedTypeNum(MCRCreditTableID));
        datatype.parmReferenceHelp(literalStr("@MCR25773"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2071);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Used as a unique key on the coupon table
        datatype.parmDatatypeId(extendedTypeNum(MCRCouponId));
        datatype.parmReferenceHelp(literalStr("@MCR25460"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(2072);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Prospect list id number sequence.
        datatype.parmDatatypeId(extendedTypeNum(MCRSmmListId));
        datatype.parmConfigurationKeyId(configurationKeyNum(SmmCRM));
        datatype.parmReferenceHelp(literalStr("@MCR25538")); // Unique key for Leads
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(2073);
        datatype.parmWizardHighest(999999);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::MCROrderManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(McrNumberSeqModuleOrderManagement), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>