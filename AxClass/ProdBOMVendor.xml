<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdBOMVendor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdBOMVendor</c> class is used for evaluating the states of buttons on the
///    <c>ProdBOMVendorListPage</c> form.
/// </summary>

class ProdBOMVendor implements ButtonStateProvider
{
    ProdBOM                     prodBOM;
    FormDataSource              prodBOM_DS;

    // Listpages and FormButtonManager
    FormButtonManager           formButtonManager;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>reqtrans</c> data source is empty.
    /// </summary>
    /// <returns>
    ///    true if the <c>reqtrans</c> data source is empty; otherwise, false.
    /// </returns>
    protected  boolean checkRuleRecordExists()
    {
        return prodBOM ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the advanced caching.
    /// </summary>
    /// <remarks>
    ///    This method must be implemented by the rule helper classes that use
    ///    <c>FormButtonManager</c>.Implementing code in this method is required when the rule implementer
    ///    class must perform advanced caching.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string that identifies the rule for which advanced caching is to be performed.
    /// </param>
    /// <remarks>
    ///    This method is called by <c>FormButtonManager</c> on the rule class that implements the
    ///    <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormButtonManager</Name>
				<Source><![CDATA[
    public FormButtonManager parmFormButtonManager(FormButtonManager _formButtonManager = formButtonManager)
    {
        formButtonManager = _formButtonManager;

        return formButtonManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>Common</c> table buffer that belongs to the 1st data source instance.
    /// </param>
    /// <param name="datasources2">
    ///    A <c>Common</c> table buffer that belongs to the 2nd data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A <c>Common</c> table buffer that belongs to the 3rd data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A <c>Common</c> table buffer that belongs to the 4th data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A <c>Common</c> table buffer that belongs to the 5th data source instance; optional.
    /// </param>
    /// <remarks>
    ///    Up to 5 data sources can be passed. If the implementation requires more data sources, additional
    ///    custom methods should be implemented on the rule implementer class.The method is called by the
    ///    <c>FormButtonManager</c> on the rule class that implements the <c>ButtonStateProvider</c> interface.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        prodBOM         = datasources1;
        prodBOM_DS      = FormDataUtil::getFormDataSource(prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdBOMVendor construct()
    {
        return new ProdBOMVendor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>