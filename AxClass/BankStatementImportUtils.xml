<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementImportUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides utility methods which are used in bank statement import.
/// </summary>
class BankStatementImportUtils
{
    // No strong-typed way to specify a composite entity
    const str BankStatementImportEntityName = "BankStatementImportEntity";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reUploadFileFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upload the import file
    /// </summary>
    /// <param name = "_localFilePath">The local file path</param>
    /// <param name = "_uploadFileName">Name of file uploaded</param>
    /// <returns>Returns the file id.</returns>
    static SharedServiceUnitFileID reUploadFileFromStream(str _localFilePath, Filename _uploadFileName)
    {
        System.IO.FileStream fs;

        fs = new System.IO.FileStream(_localFilePath, System.IO.FileMode::Open, System.IO.FileAccess::Read);
        PaymentFileTemporaryStorageStrategy paymentFileTemporaryStorageStrategy = new PaymentFileTemporaryStorageStrategy();
        FileUploadTemporaryStorageResult result = paymentFileTemporaryStorageStrategy.uploadFile(fs, _uploadFileName);
        fs.Close();

        return result.getFileId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAndReUploadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust and ReUpload the import file.
    /// </summary>
    /// <param name = "_fileID">The shared service unit file id</param>
    /// <param name = "_uploadFileName">Name of file uploaded</param>
    public static SharedServiceUnitFileID adjustAndReUploadFile(SharedServiceUnitFileID _fileID, Filename _uploadFileName)
    {
        System.IO.StreamWriter sw;
        System.IO.StreamReader sr;
        SharedServiceUnitFileID updatedFileURL;

        ExecutePermission permission;

        const str HeaderLine= '<Batch><![CDATA[';
        const str Footer= ']]]]><![CDATA[></Batch>';

        // Download the file from the blob storage to the user-specified path and filename.
        str localFilePath = DMFStagingWriter::getSharedFilePath(_fileID);

        permission = new ExecutePermission();
        permission.assert();

        sr = new System.IO.StreamReader(localFilePath);
        str restOfStream = sr.ReadToEnd();
        sr.Close();

        sw = new System.IO.StreamWriter(localFilePath, false);
        sw.WriteLine(HeaderLine);
        sw.WriteLine(restOfStream);
        sw.WriteLine(Footer);
        sw.Flush();
        sw.Close();

        // Upload file to blob storage service.
        updatedFileURL = BankStatementImportUtils::reUploadFileFromStream(localFilePath, _uploadFileName);

        CodeAccessPermission::revertAssert();

        return updatedFileURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnzippedFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extract files from zip file and upload.
    /// </summary>
    /// <param name = "_uploadFileURL">DownLoad of the zip file.</param>
    /// <param name = "_fileSuffixes>List of file suffixes which serves as filter.</param>
    /// <returns>List of file IDs of the unzipped files which meet filter in file suffix list; returns all files if the filter is empty.</returns>
    public static List getUnzippedFiles(SharedServiceUnitURL _uploadFileURL, container _fileSuffixes)
    {
        #File

        System.IO.Compression.ZipArchive zipArchive =
            new System.IO.Compression.ZipArchive(File::UseFileFromURL(_uploadFileURL), System.IO.Compression.ZipArchiveMode::Read);

        CLRObject archiveEntries =  zipArchive.get_Entries();
        int length = archiveEntries.get_Count();

        List uploadUrlList = new List(types::Container);
        container consUnzippedFile;
        int i;

        for (i = 0; i < length; i++)
        {
            System.IO.Compression.ZipArchiveEntry item = archiveEntries.get_Item(i);
            List fileNameComponents = strSplit(item.Name, #FileExtensionDelimiter);
            ListIterator iterator = new ListIterator(fileNameComponents);
            str fileSuffix;
            while (iterator.more())
            {
                fileSuffix = iterator.value();
                iterator.next();
            }

            if (conLen(_fileSuffixes) == 0 || conFind(_fileSuffixes, fileSuffix) > 0)
            {
                using(System.IO.MemoryStream stream = new System.IO.MemoryStream())
                {
                    item.Open().CopyTo(stream);
                    str fileID = BankStatementImportUtils::sendFileToTempStore(stream, item.Name).getFileId();
                    consUnzippedFile = [fileID, item.Name];
                    uploadUrlList.addEnd(consUnzippedFile);
                }
            }
        }

        return uploadUrlList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToTempStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads a file and returns the file upload result.
    /// </summary>
    /// <param name="stream">
    /// The stream of the file.
    /// </param>
    /// <param name="fileName">
    /// The file name of the stream.
    /// </param>
    /// <param name="fileUploadStrategyClassName">
    /// The name of the class strategy to upload the file to storage.
    /// </param>
    /// <param name="_downloadOnly">
    ///     A boolean value indicating whether the file should be downloaded only; defaults to false.
    /// </param>
    /// <returns>
    /// File upload result.
    /// </returns>
    public static FileUploadTemporaryStorageResult sendFileToTempStore(System.IO.Stream stream, str fileName, classname fileUploadStrategyClassName = classstr(FileUploadTemporaryStorageStrategy), boolean _downloadOnly = false)
    {
        SysDictClass uploadStrategyDicClass;
        FileUploadTemporaryStorageStrategy fileUploadStrategy;
        FileUploadTemporaryStorageResult fileUploadResult;
        str downloadUrl = "";

        try
        {
            uploadStrategyDicClass = new SysDictClass(className2Id(fileUploadStrategyClassName));
            fileUploadStrategy = uploadStrategyDicClass.makeObject() as FileUploadTemporaryStorageStrategy;

            if (fileUploadStrategy == null)
            {
                warning("@ApplicationPlatform:FileUploadFailedInStrategy");
                throw Exception::Error;
            }

            if (stream == null)
            {
                throw error(Error::missingParameter(null));
            }

            fileUploadResult = fileUploadStrategy.uploadFile(stream, fileName);

            if (fileUploadResult == null || !fileUploadResult.getUploadStatus())
            {
                warning("@ApplicationPlatform:FileUploadFailed");
            }
            else
            {
                downloadUrl = fileUploadResult.getDownloadUrl(_downloadOnly);
                if (downloadUrl == "")
                {
                    throw Exception::Error;
                }
            }
        }
        catch(Exception::Error)
        {
            warning("@ApplicationPlatform:FileUploadFailed");
        }
        return fileUploadResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpBankStatementFormats</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup to DIXF definition group which has entity bank statement import.
    /// </summary>
    /// <param name = "_formControl">Form control with the lookup.</param>
    public static void lookUpBankStatementFormats(FormStringControl _formControl)
    {
        DataFileImportExportUtils_W::lookUpDefinitionGroup(_formControl, BankStatementImportEntityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountSuccessfulBankStmtImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get count of bank statement which succeeded during import.
    /// </summary>
    /// <param name = "_dmfDefinitionGroup">Definition group which processes the bank statement import.</param>
    /// <param name = "_executionId">Job ID of the execution.</param>
    /// <returns>Count of bank statement which failed during import.</returns>
    public static int getCountSuccessfulBankStmtImport(
        DMFDefinitionGroup _dmfDefinitionGroup,
        DMFExecutionId _executionId)
    {
        BankStatementStaging bankStatementStaging;

        select firstonly count(RecId) from bankStatementStaging
            where bankStatementStaging.TransferStatus == DMFTransferStatus::Completed
                && bankStatementStaging.DefinitionGroup == _dmfDefinitionGroup.DefinitionGroupName
                && bankStatementStaging.ExecutionId == _executionId;

        return int642int(bankStatementStaging.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountBankStmtImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get count of bank statement which is processed during the import.
    /// </summary>
    /// <param name = "_dmfDefinitionGroup">definition group which processes the bank statement import.</param>
    /// <param name = "_executionId">Job ID of the execution.</param>
    /// <returns>Count of bank statement which is processed during the import.</returns>
    public static int getCountBankStmtImport(
        DMFDefinitionGroup _dmfDefinitionGroup,
        DMFExecutionId _executionId)
    {
        BankStatementStaging bankStatementStaging;

        select firstonly count(RecId) from bankStatementStaging
            where bankStatementStaging.DefinitionGroup == _dmfDefinitionGroup.DefinitionGroupName
                && bankStatementStaging.ExecutionId == _executionId;

        return int642int(bankStatementStaging.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfImportedBankStatementIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get list of bank statement IDs which is imported.
    /// </summary>
    /// <param name = "_dmfDefinitionGroup">DMF exuection group used for the import.</param>
    /// <param name = "_executionId">Job ID of the execution.</param>
    /// <returns>list of bank statement IDs which is imported.</returns>
    public static List getListOfImportedBankStatementIds(
        DMFDefinitionGroup _dmfDefinitionGroup,
        DMFExecutionId _executionId)
    {
        BankStatementStaging bankStatementStaging;

        List listOfStatementIds = new List(Types::String);

        while select Identification from bankStatementStaging
            where bankStatementStaging.TransferStatus == DMFTransferStatus::Completed
                && bankStatementStaging.DefinitionGroup == _dmfDefinitionGroup.DefinitionGroupName
                && bankStatementStaging.ExecutionId == _executionId
        {
            listOfStatementIds.addEnd(bankStatementStaging.Identification);
        }

        return listOfStatementIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDebitCreditForBankStatement</Name>
				<Source><![CDATA[
    internal static void reverseDebitCreditForBankStatement(Name _gerConfigName, Description _executionID)
    {
        BankStatementDocumentStaging bankStatementDocumentStaging;
        BankStmtISODocument bankStmtISODocument;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;
        BankAccountTable bankAccountTable;

        ttsbegin;

        while select crosscompany bankStmtISOAccountStatement
            where bankStmtISOAccountStatement.Status == BankStatementStatus::Open
        join bankAccountTable
            where bankStmtISOAccountStatement.DataAreaId == bankAccountTable.DataAreaId
                && bankStmtISOAccountStatement.BankAccountTable == bankAccountTable.AccountID
                && bankAccountTable.ReverseDebitCredit == NoYes::Yes
        exists join bankStmtISODocument
            where bankStmtISODocument.RecId == bankStmtISOAccountStatement.BankStmtISODocument
        exists join bankStatementDocumentStaging
            where bankStatementDocumentStaging.BankStatementDocumentRecId == bankStmtISODocument.RecId
                && bankStatementDocumentStaging.DefinitionGroup == _gerConfigName
                && bankStatementDocumentStaging.ExecutionId == _executionID
        {
            changecompany(bankStmtISOAccountStatement.DataAreaId)
            {
                BankStatementImportUtils::reverseDebitCreditInBankStmtISOStatementLine(bankStmtISOAccountStatement.RecId);
                BankStatementImportUtils::reverseDebitCreditInBankStmtISOCashBalance(bankStmtISOAccountStatement.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTimeZoneChangeForBankStatement</Name>
				<Source><![CDATA[
    internal static void applyTimeZoneChangeForBankStatement(
        Name _gerConfigName, 
        Description _executionID, 
        DMFTimeZonePreference _timeZonePreference, 
        Timezone _timeZone,
        NoYes _importMultipleAccounts)
    {
        Timezone timeZoneLoc;

        if (!_importMultipleAccounts)
        {
            timeZoneLoc = BankStatementImportUtils::getPreferedTimeZone(_timeZonePreference, _timeZone);
        }

        BankStatementDocumentStaging bankStatementDocumentStaging;
        BankStmtISODocument bankStmtISODocument;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;
        Set groupHeaderSet = new Set(Types::Int64);

        ttsbegin;

        while select forupdate crosscompany DataAreaId, BankAccountTable, FromDateTime, ToDateTime from bankStmtISOAccountStatement
            where bankStmtISOAccountStatement.Status == BankStatementStatus::Open
        join GroupHeader from bankStmtISODocument
            where bankStmtISODocument.RecId == bankStmtISOAccountStatement.BankStmtISODocument
        exists join bankStatementDocumentStaging
            where bankStatementDocumentStaging.BankStatementDocumentRecId == bankStmtISODocument.RecId
                && bankStatementDocumentStaging.DefinitionGroup == _gerConfigName
                && bankStatementDocumentStaging.ExecutionId == _executionID
        {
            if (_importMultipleAccounts)
            {
                BankAccountTable bankAccountTable = BankAccountTable::findByCompany(bankStmtISOAccountStatement.DataAreaId, bankStmtISOAccountStatement.BankAccountTable);

                timeZoneLoc = BankStatementImportUtils::getPreferedTimeZone(bankAccountTable.TimeZonePreference, bankAccountTable.TimeZone);
            }
            
            if (!BankStatementImportUtils::checkTimeZoneUpdateCanBeSkipped(timeZoneLoc))
            {
                changecompany(bankStmtISOAccountStatement.DataAreaId)
                {
                    // For the origin bank statement model, one statement file only has one BankStmtISODocument record and one BankStmtISOGroupHeader record,
                    // multiple BankStmtISOAccountStatement records, but the time related fields for group header should only be updated once.
                    if (!groupHeaderSet.in(bankStmtISODocument.GroupHeader))
                    {
                        BankStatementImportUtils::updateTimeRelatedFieldsInBankStmtISOGroupHeader(bankStmtISODocument.GroupHeader, timeZoneLoc);
                        groupHeaderSet.add(bankStmtISODocument.GroupHeader);
                    }
                    
                    BankStatementImportUtils::updateTimeRelatedFieldsInBankStmtISOStatement(bankStmtISOAccountStatement, timeZoneLoc);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTimeZoneUpdateCanBeSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update time zone can be skipped if the time zone preference is auto or no conversion, or the time zone setting is UTC.
    /// </summary>
    /// <param name = "_timeZone">The time zone offset to be updated</param>
    /// <returns>If time zone update can be skipped</returns>
    private static boolean checkTimeZoneUpdateCanBeSkipped(Timezone _timeZone)
    {
        return (_timeZone == 0 || _timeZone == Timezone::GMT_COORDINATEDUNIVERSALTIME);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreferedTimeZone</Name>
				<Source><![CDATA[
    internal static Timezone getPreferedTimeZone(DMFTimeZonePreference _timeZonePreference, Timezone _timeZone)
    {
        Timezone timeZoneLoc;

        switch (_timeZonePreference)
        {
            case DMFTimeZonePreference::Company:
                timeZoneLoc = DateTimeUtil::getCompanyTimeZone();
                break;

            case DMFTimeZonePreference::User:
                timeZoneLoc = DateTimeUtil::getUserPreferredTimeZone();
                break;

            case DMFTimeZonePreference::Manual:
                timeZoneLoc = _timeZone;
                break;

            default:
                timeZoneLoc = 0;
                break;
        }

        return timeZoneLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeRelatedFieldsInBankStmtISOGroupHeader</Name>
				<Source><![CDATA[
    private static void updateTimeRelatedFieldsInBankStmtISOGroupHeader(RefRecId _groupHeaderRecId, Timezone _timeZone)
    {
        BankStmtISOGroupHeader bankStmtISOGroupHeader = BankStmtISOGroupHeader::find(_groupHeaderRecId, true);

        if (bankStmtISOGroupHeader.RecId)
        {
            bankStmtISOGroupHeader.CreationDateTime = DateTimeUtil::removeTimeZoneOffset(bankStmtISOGroupHeader.CreationDateTime, _timeZone);
            bankStmtISOGroupHeader.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeRelatedFieldsInBankStmtISOStatement</Name>
				<Source><![CDATA[
    private static void updateTimeRelatedFieldsInBankStmtISOStatement(BankStmtISOAccountStatement _bankStmtISOAccountStatement, Timezone _timeZone)
    {
        _bankStmtISOAccountStatement.FromDateTime = DateTimeUtil::removeTimeZoneOffset(_bankStmtISOAccountStatement.FromDateTime, _timeZone);
        _bankStmtISOAccountStatement.ToDateTime = DateTimeUtil::removeTimeZoneOffset(_bankStmtISOAccountStatement.ToDateTime, _timeZone);
        _bankStmtISOAccountStatement.update();

        BankStatementImportUtils::updateTimeRelatedFieldsInBankStmtISOStatementLine(_bankStmtISOAccountStatement.RecId, _timeZone);
        BankStatementImportUtils::updateTimeRelatedFieldsInBankStmtISOCashBalance(_bankStmtISOAccountStatement.RecId, _timeZone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeRelatedFieldsInBankStmtISOStatementLine</Name>
				<Source><![CDATA[
    private static void updateTimeRelatedFieldsInBankStmtISOStatementLine(RecId _bankStmtISOAccountStatementRecId, Timezone _timeZone)
    {
        BankStmtISOReportEntry bankStmtISOReportEntry;
        BankStmtISOCashBalanceAvailibility bankStmtISOCashBalanceAvailibility;

        while select forupdate RecId, BookingDateTime from bankStmtISOReportEntry
            where bankStmtISOReportEntry.BankStmtISOAccountStatement == _bankStmtISOAccountStatementRecId
        {
            bankStmtISOReportEntry.BookingDateTime = DateTimeUtil::removeTimeZoneOffset(bankStmtISOReportEntry.BookingDateTime, _timeZone);
            bankStmtISOReportEntry.update();
            
            while select forupdate ActualDate from bankStmtISOCashBalanceAvailibility
                where bankStmtISOCashBalanceAvailibility.BankStmtISOReportEntry == bankStmtISOReportEntry.RecId
            {
                bankStmtISOCashBalanceAvailibility.ActualDate = DateTimeUtil::removeTimeZoneOffset(bankStmtISOCashBalanceAvailibility.ActualDate, _timeZone);
                bankStmtISOCashBalanceAvailibility.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeRelatedFieldsInBankStmtISOCashBalance</Name>
				<Source><![CDATA[
    private static void updateTimeRelatedFieldsInBankStmtISOCashBalance(RecId _bankStmtISOAccountStatementRecId, Timezone _timeZone)
    {
        BankStmtISOCashBalance bankStmtISOCashBalance;
        BankStmtISOCashBalanceAvailibility bankStmtISOCashBalanceAvailibility;

        while select forupdate ActualDate from bankStmtISOCashBalanceAvailibility
        exists join bankStmtISOCashBalance
            where bankStmtISOCashBalanceAvailibility.BankStmtISOCashBalance == bankStmtISOCashBalance.RecId
                && bankStmtISOCashBalance.BankStmtISOAccountStatement == _bankStmtISOAccountStatementRecId
        {
            bankStmtISOCashBalanceAvailibility.ActualDate = DateTimeUtil::removeTimeZoneOffset(bankStmtISOCashBalanceAvailibility.ActualDate, _timeZone);
            bankStmtISOCashBalanceAvailibility.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDebitCreditInBankStmtISOStatementLine</Name>
				<Source><![CDATA[
    private static void reverseDebitCreditInBankStmtISOStatementLine(RecId _bankStmtISOAccountStatementRecId)
    {
        BankStmtISOReportEntry bankStmtISOReportEntry;
        bankStmtISOReportEntry.skipDataMethods(true);
        bankStmtISOReportEntry.skipEvents(true);

        update_recordset bankStmtISOReportEntry
        setting AmountCreditDebitIndicator = !bankStmtISOReportEntry.AmountCreditDebitIndicator
            where bankStmtISOReportEntry.BankStmtISOAccountStatement == _bankStmtISOAccountStatementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDebitCreditInBankStmtISOCashBalance</Name>
				<Source><![CDATA[
    private static void reverseDebitCreditInBankStmtISOCashBalance(RecId _bankStmtISOAccountStatementRecId)
    {
        BankStmtISOCashBalance bankStmtISOCashBalance;
        bankStmtISOCashBalance.skipDataMethods(true);
        bankStmtISOCashBalance.skipEvents(true);

        update_recordset bankStmtISOCashBalance
        setting AmountCreditDebitIndicator = !bankStmtISOCashBalance.AmountCreditDebitIndicator
            where bankStmtISOCashBalance.BankStmtISOAccountStatement == _bankStmtISOAccountStatementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBankStmtsImported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all related bank statement data which is imported before. If the statement status is not `Open`, then it can not be deleted.
    /// </summary>
    /// <param name = "_gerConfigName">GER configuration name</param>
    /// <param name = "_executionID">Execution ID</param>
    internal static void deleteBankStmtsImported(Name _gerConfigName, Description _executionID)
    {
        BankStatementDocumentStaging bankStatementDocumentStaging;
        BankStmtISODocument bankStmtISODocument;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;

        while select forupdate crosscompany bankStmtISOAccountStatement
            where bankStmtISOAccountStatement.Status == BankStatementStatus::Open
        exists join bankStmtISODocument
            where bankStmtISOAccountStatement.BankStmtISODocument == bankStmtISODocument.RecId
        exists join bankStatementDocumentStaging
            where bankStatementDocumentStaging.BankStatementDocumentRecId == bankStmtISODocument.RecId
                && bankStatementDocumentStaging.DefinitionGroup == _gerConfigName
                && bankStatementDocumentStaging.ExecutionId == _executionID
        {
            changecompany(bankStmtISOAccountStatement.DataAreaId)
            {
                bankStmtISOAccountStatement.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankStatementImportDataByBankAccountTable</Name>
				<Source><![CDATA[
    internal static BankStatementImportData getBankStatementImportDataByBankAccountTable(Map _importedBankAccounts, BankAccountTable _bankAccountTable)
    {
        str bankIdentifier = BankStatementImportUtils::buildBankIdentifier(_bankAccountTable.DataAreaId, _bankAccountTable.AccountID);
        if (!_importedBankAccounts.exists(bankIdentifier))
        {
            BankStatementImportData importData = BankStatementImportUtils::createNewBankStatementImportData(_bankAccountTable);
            _importedBankAccounts.insert(bankIdentifier, importData);
        }

        return _importedBankAccounts.lookup(bankIdentifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankStatementImportDataByCompanyAndAccount</Name>
				<Source><![CDATA[
    internal static BankStatementImportData getBankStatementImportDataByCompanyAndAccount(Map _importedBankAccounts, DataAreaId _company, CompanyBankAccountId _accountId)
    {
        str bankIdentifier = BankStatementImportUtils::buildBankIdentifier(_company, _accountId);
        if (!_importedBankAccounts.exists(bankIdentifier))
        {
            BankAccountTable bankAccountTable = BankAccountTable::findByCompany(_company, _accountId);
            BankStatementImportData importData = BankStatementImportUtils::createNewBankStatementImportData(bankAccountTable);
            _importedBankAccounts.insert(bankIdentifier, importData);
        }

        return _importedBankAccounts.lookup(bankIdentifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewBankStatementImportData</Name>
				<Source><![CDATA[
    private static BankStatementImportData createNewBankStatementImportData(BankAccountTable _bankAccountTable)
    {
        BankStatementImportData importData = new BankStatementImportData();
        importData.parmBankAccountTable(_bankAccountTable);
        importData.parmImportedStatements(new List(Types::String));
        importData.parmImportedStatementsRecIds(new List(Types::Int64));
        return importData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBankIdentifier</Name>
				<Source><![CDATA[
    private static str buildBankIdentifier(DataAreaId _company, CompanyBankAccountId _accountId)
    {
        return _company + _accountId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>