<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsExternalServiceHttpClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using System.Net.Http;
using Microsoft.Dynamics.ApplicationPlatform;

internal class WhsExternalServiceHttpClient
{
    private const int DefaultRequestTimeoutMilliseconds = 5 * 1000;

    private static Microsoft.Dynamics.HttpCommunication.IHttpClientFactory HttpClientFactory = new Microsoft.Dynamics.HttpCommunication.DefaultHttpClientFactory();
    
    private WhsExternalServiceRequestLogger logger;
    private int timeoutInMs = DefaultRequestTimeoutMilliseconds;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsExternalServiceHttpClient construct()
    {
        return new WhsExternalServiceHttpClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withLogger</Name>
				<Source><![CDATA[
    internal WhsExternalServiceHttpClient withLogger(WhsExternalServiceRequestLogger _logger)
    {
        logger = _logger;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withTimeoutInMs</Name>
				<Source><![CDATA[
    internal WhsExternalServiceHttpClient withTimeoutInMs(int _timeoutInMs)
    {
        timeoutInMs = _timeoutInMs;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeOperation</Name>
				<Source><![CDATA[
    internal HttpResponseMessage invokeOperation(HttpRequestMessage _requestMessage)
    {
        HttpClient httpClient = this.createHttpClient();

        // Invoke the httpClient using the async pattern and use WaitAny to keep any exception wrapped in the Task object
        // This way, we don't need to worry about X++ aborting the transaction in case of survivable failures
        System.Threading.Tasks.Task[] taskArray = new System.Threading.Tasks.Task[1]();

        var task = httpClient.SendAsync(_requestMessage, System.Threading.CancellationToken::None);
        taskArray.set_Item(0, task);
        System.Threading.Tasks.Task::WaitAny(taskArray);

        if (task.IsCanceled)
        {
            logger.logRequestError(strFmt("@WAX:ExternalServiceMaximumDurationTimeout", httpClient.Timeout.ToString('c')));
            return null;
        }
        else if (task.IsFaulted)
        {
            str exceptionMessage = '';

            if (task.Exception)
            {
                System.Exception exception = task.Exception;
                exceptionMessage = exception.Message;
                
                while (exception.InnerException)
                {
                    exception = exception.InnerException;
                    exceptionMessage = exception.Message;
                }
            }

            logger.logRequestError(exceptionMessage);
            return null;
        }

        HttpResponseMessage responseMessage = task.get_Result() as HttpResponseMessage;

        return responseMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpClient</Name>
				<Source><![CDATA[
    private HttpClient createHttpClient()
    {
        HttpClient newHttpClient = HttpClientFactory.CreateClient();
        newHttpClient.Timeout = new System.TimeSpan(0, 0, 0, 0, timeoutInMs);

        return newHttpClient;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>