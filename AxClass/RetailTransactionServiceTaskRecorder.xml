<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceTaskRecorder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;
using Microsoft.Dynamics.@Client.ServerForm.TaskRecording;
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.AX.BPMIntegration;
using BPMContract=Microsoft.Dynamics.AX.LifecycleManager.BusinessProcessManagement.Contract;
using System.Collections;
using System.Threading.Tasks;
using System.Threading;

/// <summary>
/// The <c>RetailTransactionServiceTaskRecorder</c> implements the task recorder related methods used to interact with Azure blob storage and Lifecycle Services.
/// </summary>
public class RetailTransactionServiceTaskRecorder
{
    /// <summary>
    /// The blob container files are stored in.
    /// </summary>
    private const str AzureStorageContainer = 'postaskrecorder';

    /// <summary>
    /// The shared access signature key lifetime.
    /// </summary>
    private static readonly System.TimeSpan sasKeyLifeTime = System.TimeSpan::FromHours(1);

    /// <summary>
    /// The URL expiration for public container blobs in minutes.
    /// </summary>
    public const int UrlExpirationForPublicContainerBlobsInMinutes = 30;

    /// <summary>
    /// The shared access signature key recycle window in seconds.
    /// </summary>
    private const int SasKeyRecycleWindowInSeconds = 600;

    /// <summary>
    /// The Client Server Form Recording namespace.
    /// </summary>
    private const str ClientServerFormTaskRecordingNamespace = 'http://schemas.datacontract.org/2004/07/Microsoft.Dynamics.Client.ServerForm.TaskRecording';

    /// <summary>
    /// The XML encoding used to serialize task recorder entities.
    /// </summary>
    private const str TaskRecorderXmlEncoding = 'utf-8';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetStorageAccessTokenForUpload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the blob container Uri and shared access signature key for the container.
    /// </summary>
    /// <returns>The blob container Uri and the shared access signature key.</returns>
    public static container GetStorageAccessTokenForUpload()
    {
        var storageAccessTokenDetails = [false, '', '', ''];

        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());

        try
        {
            str containerLink = blobStorageService.GetContainerLink(AzureStorageContainer, false);

            container sasKeyDetails = RetailTransactionServiceTaskRecorder::GetContainerSasKey(AzureStorageContainer, BlobUrlPermission::ReadWrite);

            var result = conPeek(sasKeyDetails, 1);

            if (result)
            {
                storageAccessTokenDetails = [true, '', containerLink, conPeek (sasKeyDetails, 3)];
            }
            else
            {
                storageAccessTokenDetails = [false, conPeek(sasKeyDetails, 2), '', ''];
            }
        }
        catch (Exception::CLRError)
        {
            storageAccessTokenDetails = [false, "@RetailMediaGalleryLabels:ErrorWhileCreatingNewSasKey", '', ''];
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'An error occcured when creating the upload uri.');
        }

        return storageAccessTokenDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateRecordingFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a recording file and uploads it to Azure storage.
    /// </summary>
    /// <param name = "recordingXml">The recording XML used to generate the recording file.</param>
    /// <param name = "recordingName">The name of the recording.</param>
    /// <returns>A container that contains an URL that points to the file in temp storage if the file upload was successful; otherwise, an error container if the upload was failed.</returns>
    public static container GenerateRecordingFile(str recordingXml, str recordingName)
    {
        recordingXml = strReplace(recordingXml, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace(), ClientServerFormTaskRecordingNamespace);
        System.Text.Encoding unicode = System.Text.Encoding::UTF8;
        System.Byte[] byteArray = unicode.GetBytes(recordingXml);
        using(var stream = new System.IO.MemoryStream(byteArray))
        {
            return RetailTransactionServiceTaskRecorder::UploadToAzureStorage(stream, recordingName, '.xml');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UploadRecording</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the recording to Lifecycle Services.
    /// </summary>
    /// <param name = "recording">The recording to be uploaded and saved to Lifecycle Services.</param>
    /// <param name = "bpmLineId">The business process model line identifier used to save the recording to Lifecycle Services.</param>
    /// <returns>The result and the error if any.</returns>
    public static container UploadRecording(str recordingXml, int bpmLineId)
    {
        boolean result = false;
        str error = '';
        recordingXml = strReplace(recordingXml, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace(), ClientServerFormTaskRecordingNamespace);
        Recording recording;
        System.Text.Encoding unicode = System.Text.Encoding::UTF8;
        System.Byte[] byteArray = unicode.GetBytes(recordingXml);
        using(var xmlStream = new System.IO.MemoryStream(byteArray))
        {
            recording = TaskRecorderXmlSerializer::DeserializeRecording(xmlStream);
        }

        try
        {
            SysBpmIUserProxy bpmProxy = SysBpmProxyFactory::CreateUserProxy();
            result = SysBPMHelper::SaveRecordingToBpmProxy(bpmProxy, recording, bpmLineId);
        }

        catch(Exception::Error)
        {
            error = "@Retail:UploadRecordingError"; // An error occurred when uploading the recording.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'An error occcured.');
        }

        return [result, error];
    }

]]></Source>
			</Method>
			<Method>
				<Name>UploadToAzureStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the artifact to Azure storage.
    /// </summary>
    /// <param name = "stream">The memory stream to be uploaded to Azure storage.</param>
    /// <param name = "artifactName">The name of the artifact to be uploaded to Azure storage.</param>
    /// <param name = "fileExtension">The extension of the file to be uploaded to Azure storage.</param>
    /// <returns>A container that contains an URL that points to the file in temp storage if the file upload was successful; otherwise, an error container if the upload was failed.</returns>
    public static container UploadToAzureStorage(System.IO.MemoryStream stream, str artifactName, str fileExtension)
    {
        Microsoft.WindowsAzure.Storage.StorageException storageException;
        boolean result = false;
        str error = '';
        str downloadUrl = '';
        str uploadGuid = guid2Str(newGuid());

        try
        {
            var blobInfo = new SharedServiceUnitStorageData();
            blobInfo.Id = uploadGuid;
            blobInfo.Category = AzureStorageContainer;
            blobInfo.Name = artifactName + uploadGuid + fileExtension;
            blobInfo.Accessibility = Accessibility::Private;
            blobInfo.Retention = Retention::Permanent;

            var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
            blobStorageService.UploadData(blobInfo, stream);

            // Fetch a read-only link.
            System.TimeSpan duration = System.TimeSpan::FromMinutes(UrlExpirationForPublicContainerBlobsInMinutes);
            var uploadedBlobInfo = blobStorageService.GetData(blobInfo.Id, blobInfo.Category, BlobUrlPermission::ReadWrite, duration);
            downloadUrl = uploadedBlobInfo.BlobLink;
            result = true;
        }
        catch(storageException)
        {
            error = "@ApplicationPlatform:FileUploadFailed";
            if (isSystemAdministrator())
            {
                error(storageException.get_Message() + storageException.get_StackTrace());
            }
        }
        catch(Exception::Error)
        {
            error = "@ApplicationPlatform:FileUploadFailed";
        }

        return [result, error, downloadUrl];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateTrainingDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a training document and uploads it to Azure storage.
    /// </summary>
    /// <param name = "recordingXml">The recording XML used to generate the training document.</param>
    /// <param name = "recordingName">The name of the recording.</param>
    /// <returns>A container that contains an URL that points to the file in temp storage if the file upload was successful; otherwise, an error container if the upload was failed.</returns>
    public static container GenerateTrainingDocument(str recordingXml, str recordingName)
    {
        boolean result = false;
        str error = '';
        str downloadUrl = '';
        recordingXml = strReplace(recordingXml, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace(), ClientServerFormTaskRecordingNamespace);
        Recording recording;
        System.Text.Encoding unicode = System.Text.Encoding::UTF8;
        System.Byte[] byteArray = unicode.GetBytes(recordingXml);
        using(var xmlStream = new System.IO.MemoryStream(byteArray))
        {
            recording = TaskRecorderXmlSerializer::DeserializeRecording(xmlStream);
        }

        System.IO.Stream docStream = null;
        try
        {
            docStream = Microsoft.Dynamics.Client.TaskRecording.DocGenerator.RecordingWordDocumentFactory::Create(recording);

            downloadUrl = File::SendFileToTempStore(docStream, recordingName + guid2Str(newGuid()) + '.docx', classstr(FileUploadTemporaryStorageStrategy), true);
            result = true;
        }
        catch(Exception::Error)
        {
            error = "@Retail:GenerateTrainingDocumentFailed"; // An error occurred when generating the training document.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'Generate training document failed.');
        }

        return [result, error, downloadUrl];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateBusinessProcessModelPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a business process model package and uploads it to Azure storage.
    /// </summary>
    /// <param name = "recordingXml">The recording XML used to generate the business process model package.</param>
    /// <param name = "recordingName">The name of the recording.</param>
    /// <returns>A container that contains an URL that points to the file in temp storage if the file upload was successful; otherwise, an error container if the upload was failed.</returns>
    public static container GenerateBusinessProcessModelPackage(str recordingXml, str recordingName)
    {
        boolean result = false;
        str error = '';
        recordingXml = strReplace(recordingXml, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace(), ClientServerFormTaskRecordingNamespace);
        Recording recording;
        System.Text.Encoding unicode = System.Text.Encoding::UTF8;
        System.Byte[] byteArray = unicode.GetBytes(recordingXml);
        using(var xmlStream = new System.IO.MemoryStream(byteArray))
        {
            recording = TaskRecorderXmlSerializer::DeserializeRecording(xmlStream);
        }

        // Get the BPMpackage and upload
        var bpmPostProcessing = new BPMPostProcessing(new SysTaskRecorderBPMLabelProvider());
        using(var bpmStream = bpmPostProcessing.CreateBPMPackage(recording))
        {
            return RetailTransactionServiceTaskRecorder::UploadToAzureStorage(bpmStream, recordingName, '.ax7bpm');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateRecordingBundle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a recording bundle and uploads it to Azure storage.
    /// </summary>
    /// <param name = "recordingXml">The recording XML used to generate the recording bundle.</param>
    /// <param name = "recordingName">The name of the recording.</param>
    /// <returns>A container that contains an URL that points to the file in temp storage if the file upload was successful; otherwise, an error container if the upload was failed.</returns>
    public static container GenerateRecordingBundle(str recordingXml, str recordingName)
    {
        boolean result = false;
        str error = '';
        recordingXml = strReplace(recordingXml, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace(), ClientServerFormTaskRecordingNamespace);
        Recording recording;
        System.Text.Encoding unicode = System.Text.Encoding::UTF8;
        System.Byte[] byteArray = unicode.GetBytes(recordingXml);
        using(var xmlStream = new System.IO.MemoryStream(byteArray))
        {
            recording = TaskRecorderXmlSerializer::DeserializeRecording(xmlStream);
        }

        // Get the recording bundle and upload
        using(var bpmStream = SysBPMHelper::CreateBundle(recording))
        {
            return RetailTransactionServiceTaskRecorder::UploadToAzureStorage(bpmStream, recordingName, '.axtr');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DownloadRecording</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the recording from LCS.
    /// </summary>
    /// <param name = "businessProcessModelLineId">The business process model line identifier.</param>
    /// <returns>A container that contains the recording if download was successful; otherwise, an error container if the upload was failed.</returns>
    public static container DownloadRecording(int64 businessProcessModelLineId)
    {
        boolean result = false;
        str error = '';
        Recording recording;
        str recordingXml = '';
        try
        {
            recording = RetailCertBPMApiHelper::LoadRecordingFromLCS(businessProcessModelLineId);
            using(var xmlStream = new System.IO.MemoryStream())
            {
                TaskRecorderXmlSerializer::serializeRecording(xmlStream, recording);
                recordingXml = System.Text.Encoding::get_UTF8().GetString(xmlStream.ToArray());
                recordingXml = strReplace(recordingXml, ClientServerFormTaskRecordingNamespace, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
                result = true;
            }
        }
        catch(Exception::Error)
        {
            error = "@Retail:DownloadRecordingError"; // An error occurred when downloading the recording.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'Download recording failed.');
        }

        return [result, error, recordingXml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>SearchTaskGuidesByTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches task guides by title.
    /// </summary>
    /// <param name = "businessProcessModelFrameworkId">The business process model framework identifier.</param>
    /// <param name = "taskGuideSearchKeyword">The task guide search keyword.</param>
    /// <param name = "queryTypeValue">The query type value.</param>
    /// <returns>A container that contains a collection of task guide search results.</returns>
    public static container SearchTaskGuidesByTitle(int64 businessProcessModelFrameworkId, str taskGuideSearchKeyword, int queryTypeValue)
    {
        boolean result = false;
        str error = '';
        str searchResultsXml = '';
        BPMContract.Models.TaskGuidesSearchResult searchResults;
        Generic.List<Task> taskList = new Generic.List<Task>();
        Task[] allTasks;
        int arrayLength, i;
        XmlDocument                 document = XmlDocument::newBlank(TaskRecorderXmlEncoding);
        XmlElement                  rootNode;

        try
        {
            if (businessProcessModelFrameworkId != 0)
            {
                taskList.add(RetailCertBPMAPIHelper::SearchTaskGuidesByTitleAsync(businessProcessModelFrameworkId, taskGuideSearchKeyword, queryTypeValue));
            }
            else
            {
                List helpLibraries = SysHelpSetupHelper::GetHelpLibraries();
                ListEnumerator librariesEnumerator = helpLibraries.getEnumerator();

                if (librariesEnumerator != null)
                {
                    while (librariesEnumerator.moveNext())
                    {
                        int64 libraryId = librariesEnumerator.current();

                        taskList.add(RetailCertBPMAPIHelper::SearchTaskGuidesByTitleAsync(libraryId, taskGuideSearchKeyword, queryTypeValue));
                    }
                }
            }

            allTasks = taskList.ToArray();
            Task::WaitAll(allTasks);

            arrayLength = allTasks.get_Length();

            // Construct the XML of task guides search results.
            rootNode = document.createElement('ArrayOfTaskGuidesSearchResult');

            for (i = 0; i < arrayLength; i++)
            {
                var currentTask = allTasks.GetValue(i);
                BPMContract.Models.TaskGuidesSearchResult taskGuidesSearchResult = conPeek(AsyncTaskResult::getAsyncTaskResult(currentTask).getResult(), 1);

                if (taskGuidesSearchResult != null)
                {
                    rootNode.appendChild(RetailTransactionServiceTaskRecorder::ConvertTaskGuidesSearchResultToXmlDocument(document, taskGuidesSearchResult));
                }
            }

            rootNode.setAttribute('xmlns', RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
            document.appendChild(rootNode);
            searchResultsXml = document.xml();
            result = true;
        }
        catch(Exception::Error)
        {
            error = "@Retail:SearchTaskGuidesByTitleError"; // An error occurred when searching for task guides by title.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'Search task guides by title failed.');
        }

        return [result, error, searchResultsXml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>LoadRecordingFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a recording from an XML file.
    /// </summary>
    /// <param name = "recordingUrl">The recording URL.</param>
    /// <returns>A container that contains the recording loaded from the XML file.</returns>
    public static container LoadRecordingFromFile(str recordingUrl)
    {
        boolean result = false;
        str error = '';
        str recordingXml = '';

        try
        {
            System.IO.MemoryStream recordingStream = SysBPMHelper::DownloadFromAzureStorage(new System.Uri(recordingUrl));
            recordingXml = System.Text.Encoding::get_UTF8().GetString(recordingStream.ToArray());
            recordingXml = strReplace(recordingXml, ClientServerFormTaskRecordingNamespace, RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
            result = true;
        }
        catch(Exception::CLRError)
        {
            error = "@Retail:LoadRecordingFromFile"; // An error occurred when loading the recording from an XML file.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'Load recording from file failed.');
        }

        return [result, error, recordingXml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBusinessProcessModelLibraries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the business process model libraries.
    /// </summary>
    /// <returns>A container that contains a collection of library frameworks in XML format.</returns>
    public static container GetBusinessProcessModelLibraries()
    {
        XmlDocument                 doc = XmlDocument::newBlank(TaskRecorderXmlEncoding);
        XmlElement                  rootNode;
        XmlElement                  recordNode;
        XmlElement                  fieldNode;
        SysLCSLibrary               sysLCSLibrary;
        SysLCSProject               sysLCSProject;
        SysHelpSetup                sysHelpSetup;

        // Construct the XML of frameworks
        rootNode = doc.createElement('ArrayOfFramework');
        rootNode.setAttribute('xmlns', RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
        doc.appendChild(rootNode);

        var libraries = RetailCertBPMApiHelper::ListFrameworks();
        var libraryEnumerator = libraries.GetEnumerator();

        while (libraryEnumerator.MoveNext())
        {
            BPMContract.Models.Framework framework = libraryEnumerator.Current;

            // Only private libraries are retrieved
            if (framework.Access != BPMContract.Models.FrameworkAccess::Global &&  framework.Access != BPMContract.Models.FrameworkAccess::Corporate)
            {
                recordNode = doc.createElement('Framework');
                fieldNode = doc.createElement('Id');
                fieldNode.text(int642Str(framework.Id));
                recordNode.appendChild(fieldNode);

                fieldNode = doc.createElement('Name');
                fieldNode.text(framework.Name);
                recordNode.appendChild(fieldNode);

                fieldNode = doc.createElement('Publisher');
                fieldNode.text(framework.Publisher);
                recordNode.appendChild(fieldNode);
                rootNode.appendChild(recordNode);
            }
        }

        return [true, '', doc.xml()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBusinessProcessModelLibrary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a single business process model library.
    /// </summary>
    /// <param name="businessProcessModelFrameworkId">The business process model framework identifier.</param>
    /// <param name="hierarchyDepth">The hierarchy depth of the framework. A hierarchy depth of -1 returns the entire tree.</param>
    /// <returns>
    /// A container that contains a single business process model library framework.
    /// </returns>
    public static container GetBusinessProcessModelLibrary(int64 businessProcessModelFrameworkId, int hierarchyDepth)
    {
        boolean result = false;
        str error = '';
        XmlDocument doc = XmlDocument::newBlank(TaskRecorderXmlEncoding);
        XmlElement rootNode;

        try
        {
            BPMContract.Models.Framework framework = RetailCertBPMAPIHelper::GetFrameworkAsync(businessProcessModelFrameworkId, BPMContract.Models.FrameworkView::None, hierarchyDepth);
            rootNode = RetailTransactionServiceTaskRecorder::ConvertFrameworkToXmlElement(doc, framework);
            rootNode.setAttribute('xmlns', RetailTransactionServiceUtilities::getCrtDataModelXmlNamespace());
            doc.appendChild(rootNode);
            result = true;
        }

        catch(Exception::Error)
        {
            error = "@Retail:GetBusinessProcessModelLibraryError"; // An error occurred when getting the business process model library.
            ApplicationEventSource::EventWriteRetailTransactionServiceTaskRecorderFailure(funcName(), 'An error occcured.');
        }

        return [result, error,  doc.xml()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerSasKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a shared access signature key for the container.
    /// </summary>
    /// <param name = "containerName">The container name.</param>
    /// <param name = "permissions">The permissions on the container.</param>
    /// <param name = "sasKeyLifeTime">The shared access signature key lifetime.</param>
    /// <returns>The container contains four values, 1.the result state, 2.error message, 3.shared access signature key, 4.shared access signature key expiration time in UTC.</returns>
    private static container getContainerSasKey(str containerName, BlobUrlPermission permissions)
    {
        container sasKeyDetails = [false, '', '', null];
        int existingSasKeyPolicyNumber;
        boolean isNewRecord = false;

        //revoke the expired sas key.
        var sasKeyRevokingResult = RetailCloudStorageSecurityHelper::revokeExpiredSaskeys(containerName);
        var result = conPeek(sasKeyRevokingResult, 1); //whether the previous method call was successful.
        if (!result)
        {
            sasKeyDetails = [false, conPeek(sasKeyRevokingResult, 2), '', null];
            return sasKeyDetails;
        }

        //Check from DB.
        RetailCloudStorageSecurity storageSecurity;
        var currentUtcDateTime = DateTimeUtil::utcNow();
        while select storageSecurity
            where ContainerName == containerName
        {
            var sasKeyExpirationDateTimeInUtc = storageSecurity.SasExpirationDateTimeInUtc;
            int64 sasKeyValidityInSeconds = DateTimeUtil::getDifference(sasKeyExpirationDateTimeInUtc, currentUtcDateTime);
            existingSasKeyPolicyNumber = str2Int(storageSecurity.SasPolicyName);

            if (sasKeyValidityInSeconds > SasKeyRecycleWindowInSeconds) //valid sas key.
            {
                sasKeyDetails = RetailCloudStorageSecurityHelper::getSasKeyFromClx(containerName, existingSasKeyPolicyNumber, BlobUrlPermission::ReadWrite, sasKeyLifeTime, isNewRecord);
            }
        }

        result = conPeek(sasKeyDetails, 1); //whether the previous method call was successful.
        if (result)
        {
            return sasKeyDetails;
        }

        //get a new sas key.
        isNewRecord = true;
        sasKeyDetails = RetailCloudStorageSecurityHelper::getSasKeyFromClx(containerName, existingSasKeyPolicyNumber, BlobUrlPermission::ReadWrite, sasKeyLifeTime, isNewRecord);

        return sasKeyDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertFrameworkToXmlElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a Framework object to an XML node.
    /// </summary>
    /// <param name = "doc">The XML document.</param>
    /// <param name = "framework">The framework.</param>
    /// <returns>An XmlElement that contains the serialized framework.</returns>
    private static XmlElement ConvertFrameworkToXmlElement(XmlDocument doc, BPMContract.Models.Framework framework)
    {
        XmlElement                  recordNode;
        XmlElement                  fieldNode;

        recordNode = doc.createElement('Framework');
        fieldNode = doc.createElement('Access');
        fieldNode.text(framework.Access.ToString());
        recordNode.appendChild(fieldNode);

        fieldNode = doc.createElement('Hierarchy');
        CLRObject enumerator = framework.Hierarchy.GetEnumerator();
        while (enumerator.MoveNext())
        {
            BPMContract.Models.Line current = enumerator.get_Current();
            fieldNode.appendChild(RetailTransactionServiceTaskRecorder::ConvertLineToXmlElement(doc, current));
        }

        recordNode.appendChild(fieldNode);
        fieldNode = doc.createElement('Id');
        fieldNode.text(int642Str(framework.Id));
        recordNode.appendChild(fieldNode);

        fieldNode = doc.createElement('Name');
        fieldNode.text(framework.Name);
        recordNode.appendChild(fieldNode);

        fieldNode = doc.createElement('Publisher');
        fieldNode.text(framework.Publisher);
        recordNode.appendChild(fieldNode);

        return recordNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertLineToXmlElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a Line object to an XML node.
    /// </summary>
    /// <param name = "doc">The XML document.</param>
    /// <param name = "line">The line.</param>
    /// <returns>An XmlElement that contains the serialized framework.</returns>
    private static XmlElement ConvertLineToXmlElement(XmlDocument doc, BPMContract.Models.Line line)
    {
        XmlElement                  lineNode;
        XmlElement                  lineFieldNode;
        XmlElement                  lineSubFieldNode;

        lineNode = doc.createElement('Line');
        // Append collection of ArtifactSummary objects
        lineFieldNode = doc.createElement('Artifacts');
        if (line.Artifacts != null)
        {
            CLRObject enumerator = line.Artifacts.GetEnumerator();
            while (enumerator.MoveNext())
            {
                BPMContract.Models.ArtifactSummary current = enumerator.get_Current();
                lineFieldNode.appendChild(RetailTransactionServiceTaskRecorder::ConvertArtifactSummaryToXmlElement(doc, current));
            }
        }
        lineNode.appendChild(lineFieldNode);

        // Recursively append collection of child lines
        if (line.Children != null)
        {
            CLRObject enumerator = line.Children.GetEnumerator();
            lineFieldNode = doc.createElement('Children');
            while (enumerator.MoveNext())
            {
                BPMContract.Models.Line current = enumerator.get_Current();
                lineFieldNode.appendChild(RetailTransactionServiceTaskRecorder::ConvertLineToXmlElement(doc, current));
            }
            lineNode.appendChild(lineFieldNode);
        }

        // Append the rest of the line properties
        lineFieldNode = doc.createElement('Description');
        lineFieldNode.text(line.Description);
        lineNode.appendChild(lineFieldNode);

        lineFieldNode = doc.createElement('Id');
        lineFieldNode.text(int642Str(line.Id));
        lineNode.appendChild(lineFieldNode);

        lineFieldNode = doc.createElement('IsLinked');
        lineFieldNode.text(line.IsLinked.ToString().ToLower());
        lineNode.appendChild(lineFieldNode);

        lineFieldNode = doc.createElement('LineMetadataId');
        lineFieldNode.text(int642Str(line.LineMetadataId));
        lineNode.appendChild(lineFieldNode);

        lineFieldNode = doc.createElement('Name');
        lineFieldNode.text(line.Name);
        lineNode.appendChild(lineFieldNode);

        return lineNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertArtifactSummaryToXmlElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a ArtifactSummary object to an XML node.
    /// </summary>
    /// <param name = "doc">The XML document.</param>
    /// <param name = "artifactSummary">The artifact summary.</param>
    /// <returns>An XmlElement that contains the serialized framework.</returns>
    private static XmlElement ConvertArtifactSummaryToXmlElement(XmlDocument doc, BPMContract.Models.ArtifactSummary artifactSummary)
    {
        XmlElement                  artifactSummaryNode;
        XmlElement                  artifactSummaryFieldNode;
        XmlElement                  artifactSummarySubFieldNode;

        artifactSummaryNode = doc.createElement('ArtifactSummary');
        artifactSummaryFieldNode = doc.createElement('ArtifactType');
        artifactSummaryFieldNode.text(artifactSummary.ArtifactType.ToString());
        artifactSummaryNode.appendChild(artifactSummaryFieldNode);

        // Append collection of language tags
        artifactSummaryFieldNode = doc.createElement('LanguageTags');
        if (artifactSummary.LanguageTags != null)
        {
            CLRObject enumerator = artifactSummary.LanguageTags.GetEnumerator();
            while (enumerator.MoveNext())
            {
                str current = enumerator.get_Current();
                artifactSummarySubFieldNode = doc.createElement('LanguageTag');
                artifactSummarySubFieldNode.text(current);
                artifactSummaryFieldNode.appendChild(artifactSummarySubFieldNode);
            }
        }
        artifactSummaryNode.appendChild(artifactSummaryFieldNode);
        return artifactSummaryNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertTaskGuidesSearchResultToXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a TaskGuidesSearchResult object to an XML document.
    /// </summary>
    /// <param name = "doc">The XML document.</param>
    /// <param name = "taskGuidesSearchResult">The taskGuidesSearchResult.</param>
    /// <returns>An XmlElement that contains the serialized TaskGuidesSearchResult.</returns>
    private static XmlElement ConvertTaskGuidesSearchResultToXmlDocument(XMLDocument doc, BPMContract.Models.TaskGuidesSearchResult taskGuidesSearchResult)
    {
        XmlElement taskGuidesSearchResultNode;
        XmlElement taskGuidesSearchResultFieldNode;
        XmlElement taskGuidesSearchResultSubFieldNode;

        taskGuidesSearchResultNode = doc.createElement('TaskGuidesSearchResult');
        taskGuidesSearchResultFieldNode = doc.createElement('FrameworkName');
        taskGuidesSearchResultFieldNode.text(taskGuidesSearchResult.FrameworkName);
        taskGuidesSearchResultNode.appendChild(taskGuidesSearchResultFieldNode);

        taskGuidesSearchResultFieldNode = doc.createElement('FrameworkPublisherName');
        taskGuidesSearchResultFieldNode.text(taskGuidesSearchResult.FrameworkPublisherName);
        taskGuidesSearchResultNode.appendChild(taskGuidesSearchResultFieldNode);

        if (taskGuidesSearchResult.Lines != null)
        {
            taskGuidesSearchResultFieldNode = doc.createElement('Lines');
            CLRObject enumerator = taskGuidesSearchResult.Lines.GetEnumerator();
            while (enumerator.MoveNext())
            {
                var current = enumerator.get_Current();
                taskGuidesSearchResultSubFieldNode = RetailTransactionServiceTaskRecorder::ConvertLineToXmlElement(doc, current);
                taskGuidesSearchResultFieldNode.appendChild(taskGuidesSearchResultSubFieldNode);
            }
            taskGuidesSearchResultNode.appendChild(taskGuidesSearchResultFieldNode);
        }

        return taskGuidesSearchResultNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>