<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesTotals_CrtSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSalesTotals_CrtSales</c> class calculates order totals for CRT sales transaction.
/// </summary>
internal class RetailSalesTotals_CrtSales extends SalesTotals_Trans
{
    private Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction transaction;
    private CLRObject enumeratorSalesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return RetailSalesCalcTax_CrtSales::construct(salesTable, transaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs sales totals for a given sales order and CRT sales transaction.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> record to calculate totals for.</param>
    /// <param name = "_transaction">The CRT sales transaction to calculate totals for.</param>
    /// <returns>The <c>SalesTotals_Trans</c> instance</returns>
    public static SalesTotals_Trans construct(SalesTable _salesTable, Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction _transaction)
    {
        var totals = new RetailSalesTotals_CrtSales(_salesTable, SalesUpdate::All);
        totals.setCrtSalesTransaction(_transaction);

        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCrtSalesTransaction</Name>
				<Source><![CDATA[
    private void setCrtSalesTransaction(Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction _transaction)
    {
        transaction = _transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the CRT transaction lins enumerator.
    /// </summary>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        CLRObject clrSalesLines = transaction.get_SalesLines();
        enumeratorSalesLine = clrSalesLines.GetEnumerator();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves next CRT transaction line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// True if enumerator returned the next line, otherwise false.
    /// </returns>
    protected boolean lineQueryRunNext(TradeTotalsIQueryRun _lineQueryRun)
    {
        return enumeratorSalesLine.MoveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next sales line initialized form CRT transaction line.
    /// </summary>
    /// <returns>
    /// The next order line.
    /// </returns>
    protected Common lineQueryRunGet(TradeTotalsIQueryRun _lineQueryRun)
    {
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine crtSalesLine = enumeratorSalesLine.get_Current();

        str inventTransId = crtSalesLine.LineId;
        salesLine = SalesLine::findInventTransId(inventTransId, true);

        RetailSalesTotals_CrtSales::initSalesLineFromCrtSalesLine(crtSalesLine, salesLine);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLineFromCrtSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes SalesLine record based on CRT salesLine
    /// </summary>
    /// <param name = "_crtSalesLine">The CRT sales Line</param>
    /// <param name = "_salesLine">The <c>SalesLine</c> to initialize</param>
    public static void initSalesLineFromCrtSalesLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine _crtSalesLine, SalesLine _salesLine)
    {
        real totalDiscount = _crtSalesLine.get_DiscountAmount();
        real totalQuantity = _crtSalesLine.get_Quantity();

        real unitDiscount = (totalQuantity == 0.0) ? 0.0 : (totalDiscount / totalQuantity);

        _salesLine.LineDisc = unitDiscount;
        _salesLine.LineAmount -= _crtSalesLine.TenderDiscountAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>