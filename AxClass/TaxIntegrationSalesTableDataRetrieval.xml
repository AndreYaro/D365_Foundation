<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSalesTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationSalesTableDataRetrieval</c> class retrieves data from <c>SalesTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(SalesTable))]
public class TaxIntegrationSalesTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected SalesTable salesTable;
    protected SalesLine salesLine;
    protected CustInvoiceTrans originalCustInvoiceTrans;

    protected CustTable custTable;
    protected CustTable custTableInvoice;

    protected InventDim inventDim;
    protected MCRSalesLineDropShipment mcrSalesLineDropShipment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled() && document.getLocalRecord())
        {
            this.salesTable = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.custTable)
                .where(this.custTable, fieldStr(CustTable, AccountNum))
                    .isEqualToLiteral(this.salesTable.CustAccount)
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualToLiteral(this.salesTable.InvoiceAccount)
                .toSysDaQueryObject();
        }
        else
        {
            if (isTaxIntegrationDataRetrievalSetDocumentRecord)
            {
                document.setLocalRecord(this.salesTable);
            }
            return SysDaQueryObjectBuilder::from(this.salesTable)
                .where(this.salesTable, fieldStr(SalesTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.custTable) // alternate key
                    .where(this.custTable, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, CustAccount))
                .outerJoin(this.custTableInvoice) // alternate key
                    .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, InvoiceAccount))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryBuilder =
            SysDaQueryObjectBuilder::from(this.salesLine)
                .where(this.salesLine, fieldStr(SalesLine, SalesId))
                    .isEqualToLiteral(this.salesTable.SalesId)
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.salesLine, fieldStr(SalesLine, InventDimId))
                .outerJoin(this.mcrSalesLineDropShipment) // alternate key
                    .where(this.mcrSalesLineDropShipment, fieldStr(MCRSalesLineDropShipment, SalesLine))
                        .isEqualTo(this.salesLine, fieldStr(SalesLine, RecId));

        if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled())
        {
            queryBuilder.outerJoin(this.originalCustInvoiceTrans)
                .where(this.originalCustInvoiceTrans, fieldStr(CustInvoiceTrans, RecId))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, RefReturnInvoiceTrans_W));
        }

        return queryBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.salesTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.salesTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.salesLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.salesLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        if (isTaxIntegrationDataRetrievalSetLineRecord)
        {
            return TaxIntegrationLineObject::constructOnDocumentWithRecord(
                this.salesLine.data(),
                this.document);
        }
        else
        {
            return TaxIntegrationLineObject::constructOnDocument(
                this.salesLine.TableId,
                this.salesLine.RecId,
                this.document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();

        if (document.getLocalTableId() == tableNum(SalesTable)
            && document.getBusinessProcess() == TaxIntegrationBusinessProcess::Sales
            && document.getSolutionProviderType() != TaxSolutionProviderType::ISV)
        {
            document.setShouldSkipLedgerDimension(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        this.copyToDocumentFromInventStorageDimMap(document, this.salesTable);

        document.setIncludingTax(this.salesTable.InclTax);
        document.setOrderAccount(this.salesTable.CustAccount);
        document.setOrderAccountGroup(this.salesTable.CustGroup);
        document.setInvoiceAccount(this.salesTable.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.salesTable.CurrencyCode);
        document.setAccountingCurrencyFixedExchangeRate(this.salesTable.FixedExchRate);
        document.setReportingCurrencyFixedExchangeRate(this.salesTable.ReportingCurrencyFixedExchRate);
        document.setDeliveryTerm(this.salesTable.DlvTerm);
        document.setListCode(this.salesTable.Listcode);

        this.copyToDocumentFromVATNum(
            this.salesTable.VATNum,
            this.salesTable.VATNumTableType,
            this.salesTable.VATNumRecId);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            if (document.getLocalTableId() == tableNum(SalesTable))
            {
                document.setCreatedDateTime(this.salesTable.CreatedDateTime);
            }
        }
        document.setSalesType(this.salesTable.SalesType);
        document.setIntercompanyDirectDelivery(this.salesTable.InterCompanyDirectDelivery);
        this.copyMCRSalesLineDropShipmentToDocument(document, this.salesTable);

        document.setIsRetail(salesTable.isRetailSale());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
            this.salesTable.InventLocationId,
            this.salesTable.InventSiteId,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (this.salesTable.SalesType == SalesType::ReturnItem)
        {
            shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(this.custTable, LogisticsLocationRoleType::Delivery);
        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = this.salesTable.deliveryAddress();
        }

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);
        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
            this.custTableInvoice,
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>SalesLine</c>, <c>MCRSalesLineDropShipment</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>The logics of this method are resued in project sales order scenario as well. Be careful when extend it.</remarks>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromSalesPurchJournalLine(_line, this.salesLine);
        this.copyToLineFromInventDim(_line, this.inventDim);

        _line.setProductVariant(this.salesLine.RetailVariantId);
        this.copyToLineFromInventTable(_line, this.salesLine.inventTable());
        _line.setIntrastatCommodityId(this.salesLine.IntrastatCommodity);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }

        _line.setDirectDelivery(this.mcrSalesLineDropShipment.DropShipment);
        _line.setDeliveryTerm(this.salesLine.DlvTerm);
        _line.setDeliveryDate(this.salesLine.deliveryDate(document.getInvoiceDate()));

        if (!document.getShouldSkipLedgerDimension())
        {
            _line.setLedgerDimension(this.salesLine.DefaultDimension);
            _line.setOperationLedgerDimension(LedgerDimensionFacade::serviceCreateLedgerDimension(
                this.salesLine.accountSalesLedgerDimension(),
                this.salesLine.DefaultDimension));
        }

        _line.setProjectId(this.salesLine.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setQuantity(this.getTransactionQuantity());
        _line.setLineAmount(this.salesLine.calcLineAmount(_line.getQuantity()));
        _line.setTransactionAmount(_line.getLineAmount());
        _line.setCostAmount(_line.getQuantity() * this.getCostPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction quantity.
    /// The logic is similar as SalesCalcTax_Sales::transQty().
    /// </summary>
    /// <returns>The quantity.</returns>
    private SalesQty getTransactionQuantity()
    {
        if (this.salesLine.RecId == 0)
        {
            return this.salesLine.SalesQty;
        }

        if (this.salesLine.canInvoiceOrderLineFromCurrentSalesStatus())
        {
            return SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(this.salesLine, this.document.getQuantityType().getSalesUpdate());
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>The logics of this method are resued in project sales order scenario as well. Be careful when extend it.</remarks>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryDimensionOrCompanyInformation(
            this.inventDim,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        return this.inventDim.InventLocationId + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + this.inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (this.salesTable.SalesType == SalesType::ReturnItem
            && (!TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled() || this.salesLine.SalesQty < 0))
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalCustInvoiceTrans)
            {
                shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.originalCustInvoiceTrans.DeliveryPostalAddress);
            }
            else
            {
                shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(this.custTable, LogisticsLocationRoleType::Delivery);
            }

        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = this.salesLine.deliveryAddress();
        }

        return shipmentDestinationLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        if (this.salesTable.SalesType == SalesType::ReturnItem
            && (!TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled() || this.salesLine.SalesQty < 0))
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalCustInvoiceTrans)
            {
                return strFmt('%1|%2', tableNum(LogisticsPostalAddress), this.originalCustInvoiceTrans.DeliveryPostalAddress);
            }
            else
            {
                return strFmt('%1|%2', tableNum(CustTable), this.custTable.RecId);
            }
        }
        else
        {
            return strFmt('%1|%2', tableNum(LogisticsPostalAddress), this.salesLine.DeliveryPostalAddress);
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTableDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales table discount percent.
    /// </summary>
    /// <returns>Return the sales table discount.</returns>
    /// <remarks>
    /// In case of posting an invoice with multiple sales orders, the salesTable can be different from the header table of salesLine.
    /// The straightforward solution is to query the header table of the line in the getLineQueryObject method.
    /// However, there is a performance concern as it is only needed for this corner case.
    /// Therefore, it caches the DiscPercent of the header table of the current line for simplicity. If more fields are needed in the future,
    /// may consider updating the salesTable (or caching the record) instead of caching more fields.
    /// </remarks>
    private SalesEndDiscPct getSalesTableDiscPercent()
    {
        if (!this.salesLine.endDisc())
        {
            return 0.0;
        }

        SalesEndDiscPct salesEndDiscPct;

        // With TaxIntegrationHeaderPecentChargeFlight, the SalesTable is queried together with SalesLine.
        // No extra code is needed to find the correct SalesTable.
        if (!TaxIntegrationHeaderPercentChargeFlight::instance().isEnabled()
            && this.salesLine.SalesId != this.salesTable.SalesId)
        {
            TaxIntegrationDataRetrievalContext contextLoc = this.getContext();
            if (!contextLoc.existsSalesPurchTotalsDiscPercent(this.salesLine.SalesId))
            {
                salesEndDiscPct = this.salesLine.salesTable().DiscPercent;
                contextLoc.cacheSalesPurchTotalsDiscPercent(this.salesLine.SalesId, salesEndDiscPct);
            }
            else
            {
                salesEndDiscPct = contextLoc.getSalesPurchTotalsDiscPercent(this.salesLine.SalesId, true);
            }
        }
        else
        {
            salesEndDiscPct = this.salesTable.DiscPercent;
        }

        return salesEndDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>SalesTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>
    /// Multiple sales orders can be calculated in one document. Different lines can have different headers.
    /// But some fields should be retrieved from the same header, some are from each line's header.
    /// Please keep the behavior the same as the core tax.
    /// </remarks>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        SalesEndDiscPct salesDiscPct = this.getSalesTableDiscPercent();
        if (salesDiscPct)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - salesDiscPct) / 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {   
        super(_charge);
        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>SalesTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.salesTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setInventoryTransactionId(this.salesLine.InventTransId);
        _charge.setLedgerDimension(this.salesLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the currenct charge from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The currenct charge.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.VendType)
        {
            case MarkupType::Item :
                if (salesLine)
                {
                    _charge.setOperationLedgerDimension(salesLine.accountSalesLedgerDimension());
                }
                break;
            case MarkupType::LedgerAccount :
                _charge.setOperationLedgerDimension(markupTable.parmVendorLedgerDimension());
                break;

            case MarkupType::CustVend :
                _charge.setOperationLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(salesTable.InvoiceAccount, salesTable.PostingProfile));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price.
    /// </summary>
    /// <returns>The cost price.</returns>
    [Replaceable]
    protected CostPrice getCostPrice()
    {
        return this.salesLine.CostPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>