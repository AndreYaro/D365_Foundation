<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsJournalFormTrans extends JournalFormTrans
{
    InventDimCtrl_Frm_WMSJournalTrans   inventDimFormSetup;

    WMSJournalTrans                     wmsJournalTrans;
    FormDataSource                      inventDim_ds;
    InventDim                           inventDim;

    FormStringControl                   ctrlGridInventTransRefId;
    FormStringControl                   ctrlGridInventTransId;
    FormStringControl                   ctrlInventTransRefId;
    FormStringControl                   ctrlInventTransId;
    FormStringControl                   ctrlGridItemId;
    FormStringControl                   ctrlReturnItemNum;
    FormStringControl                   ctrlReturnDispositionCodeId;
    FormStringControl                   ctrlItemId;
    FormStringControl                   ctrlVendAccount;
    FormComboBoxControl                 ctrlInventTransType;
    FormFunctionButtonControl           ctrlCreateSerialIds;

    boolean                             inventTransIdLookup;
    InventQty                           returnSplitQty;

    boolean                             palletNumberSequenceAvailable;
    PdsCWInventQty                      cwReturnSplitQty;
    PdsCWFormCtrl                       cwFormCtrl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barCodeEAN128</Name>
				<Source><![CDATA[
    public void barCodeEAN128(BarcodeEAN128AIDataValue _str)
    {
        BarcodeEAN128       barcodeEAN128;
        InventQty           inventQty;
        InventBatchId       inventBatchId;
        InventSerialId      inventSerialId;
        InventItemBarcode   inventItemBarcode;

        barcodeEAN128 = BarcodeEAN128::construct();
        barcodeEAN128.decode(_str);
        inventItemBarcode = barcodeEAN128.getItemInfo();
        if (inventItemBarcode.ItemId)
        {
            wmsJournalTrans.ItemId = inventItemBarcode.ItemId;
            if (inventItemBarcode.RecId)
            {
                if (inventItemBarcode.InventDimId != InventDim::inventDimIdBlank())
                {
                    inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(inventItemBarcode.ItemId), InventDim::find(inventItemBarcode.InventDimId));
                }

                if (inventItemBarcode.inventDim().ConfigId)
                {
                    inventDim.ConfigId    = inventItemBarcode.inventDim().ConfigId;
                }
            }
            this.fieldModifiedItemIdPost();
        }
        inventQty = barcodeEAN128.qty();
        if (inventQty)
        {
            if (inventItemBarcode.RecId && inventItemBarcode.Qty)
            {
                inventQty = inventQty * inventItemBarcode.Qty;
            }
            wmsJournalTrans.Qty = inventQty;
        }
        if (inventQty == 0 && wmsJournalTrans.Qty  == 0 && inventItemBarcode.Qty != 0)
        {
            wmsJournalTrans.Qty = inventItemBarcode.Qty;
        }

        inventBatchId = barcodeEAN128.batch();
        if (inventBatchId && inventDimFormSetup.parmDimParmEnabled().InventBatchIdFlag)
        {
            inventDim.InventBatchId = inventBatchId;
        }

        inventSerialId = barcodeEAN128.serialId();
        if (inventSerialId && inventDimFormSetup.parmDimParmEnabled().InventSerialIdFlag)
        {
            inventDim.InventSerialId = inventSerialId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();

        if (inventDim_ds)
        {
            inventDim_ds.active();
        }
        this.updateDesign(InventDimFormDesignUpdate::Active);

        ctrlReturnDispositionCodeId.enabled(wmsJournalTrans.ReturnItemNum ? true : false);

        //Note: if createQuarantineOrder is set for a transtype that does not support quarantine control the control is enabled so the user can still de-select quarantine control
        if (!wmsJournalTrans.CreateQuarantineOrder && !InventTrans::canTransTypeDoQuarantineMgmt(wmsJournalTrans.InventTransType))
        {
            journalTrans_ds.object(fieldNum(WMSJournalTrans, CreateQuarantineOrder)).allowEdit(false);
            journalTrans_ds.object(fieldNum(WMSJournalTrans, CreateQuarantineOrder)).skip(true);
        }
        else
        {
            journalTrans_ds.object(fieldNum(WMSJournalTrans, CreateQuarantineOrder)).allowEdit(true);
            journalTrans_ds.object(fieldNum(WMSJournalTrans, CreateQuarantineOrder)).skip(false);
        }

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        wmsJournalTrans  = _journalTrans;

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        super();
        wmsJournalTrans.initFromWMSJournalTable(journalFormTable.journalTableData().journalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        super();
        this.updateDesign(InventDimFormDesignUpdate::LinkActive);

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the catch weight quantity is modified.
    /// </summary>
    /// <param name="_ret">
    /// A Boolean value.
    /// </param>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        boolean ret;

        ret = super(_ret);

        if (ret && cwFormCtrl)
        {
            ret = cwFormCtrl.dataSourceValidateWrite();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    public void datasourceWritePre()
    {
        if (returnSplitQty != 0
            || (PdsGlobal::pdsIsCWItem(wmsJournalTrans.ItemId)
                && cwReturnSplitQty != 0)
            )
        {
            // split the return order line
            SalesLine::splitReturnLine(
                wmsJournalTrans.InventTransId,
                returnSplitQty,
                cwReturnSplitQty
                );
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    protected void enableButtonsActive()
    {
        WMSJournalTable     wmsJournalTable = journalFormTable.journalTableData().journalTable();
        boolean             editItem        = !wmsJournalTable.Posted;
        boolean             editTransRef    = !wmsJournalTable.Posted;

        super();

        ctrlCreateSerialIds.enabled(wmsJournalTrans.ItemId && !wmsJournalTable.Posted && ctrlCreateSerialIds.allowEdit() && wmsJournalTrans.canUpdateSerialId(false));

        if (editItem && wmsJournalTrans.InventTransId)
        {
            editItem = false;
        }
        if (editItem && wmsJournalTrans.InventTransType == InventTransType::Production && wmsJournalTrans.InventTransRefId)
        {
            editItem = false;
        }
        if (editTransRef && wmsJournalTrans.InventTransType != InventTransType::Production && wmsJournalTrans.InventTransId)
        {
            editTransRef = false;
        }
        switch (wmsJournalTable.JournalType)
        {
            case WMSJournalType::Reception:
                ctrlGridItemId.allowEdit(editItem);
                break;
            case WMSJournalType::Production:
                ctrlGridInventTransRefId.allowEdit(editTransRef);
                break;
        }
        ctrlItemId.allowEdit(editItem);
        ctrlInventTransType.allowEdit(editTransRef);
        ctrlInventTransRefId.allowEdit(editTransRef);
        ctrlReturnItemNum.allowEdit(editTransRef && wmsJournalTrans.InventTransType == InventTransType::Sales);
        ctrlReturnDispositionCodeId.enabled(wmsJournalTrans.InventTransType == InventTransType::Sales && wmsJournalTrans.ReturnItemNum != '');
        this.setVendAccountEnabledState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventTransIdPost()
    {
        InventMovement  inventMovement;

        if (wmsJournalTrans.InventTransId)
        {
            if (!inventTransIdLookup)
            {
                inventMovement = wmsJournalTrans.inventMovement();
                if (inventMovement)
                {
                    wmsJournalTrans.initFromMovement(inventMovement, inventDim);
                    this.fieldModifiedItemIdPost();
                }
            }
        }
        inventTransIdLookup = false;
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransRefIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventTransRefIdPost()
    {
        ProdTable           prodTable;
        InventTransOrigin   inventTransOrigin;
        InventMovement      inventMovement;

        if (wmsJournalTrans.InventTransRefId)
        {
            switch (wmsJournalTrans.InventTransType)
            {
                case InventTransType::Production:
                    prodTable = ProdTable::find(wmsJournalTrans.InventTransRefId);
                    if (prodTable)
                    {
                        inventMovement = InventMovement::construct(prodTable);
                        wmsJournalTrans.initFromMovement(inventMovement, inventDim);
                        this.fieldModifiedItemIdPost();
                    }
                    break;
                default:
                    break;
            }
        }
        if (wmsJournalTrans.InventTransId)
        {
            inventTransOrigin = InventTransOrigin::findByInventTransId(wmsJournalTrans.InventTransId);
            if (inventTransOrigin.ReferenceId != wmsJournalTrans.InventTransRefId || inventTransOrigin.ReferenceCategory != wmsJournalTrans.InventTransType)
            {
                wmsJournalTrans.InventTransId = '';
            }
        }
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        ProdTable       prodTable;
        PurchLine       purchLine;
        SalesLine       salesLine;
        InventMovement  inventMovement, movementCheckReferences;

        this.updateDesign(InventDimFormDesignUpdate::FieldChange);

        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(WMSJournalTrans, ItemId));
        }

        if (wmsJournalTrans.InventTransRefId)
        {
            switch (wmsJournalTrans.InventTransType)
            {
                case InventTransType::Production:
                    prodTable = ProdTable::find(wmsJournalTrans.InventTransRefId);
                    if (prodTable && prodTable.ItemId != wmsJournalTrans.ItemId)
                    {
                        wmsJournalTrans.InventTransRefId = '';
                    }
                    break;
                case InventTransType::Purch:
                    select count(RecId) from purchLine
                        where purchLine.PurchId     == wmsJournalTrans.InventTransRefId
                           && !purchLine.IsDeleted
                           && purchLine.ItemId      == wmsJournalTrans.ItemId;
                    if (purchLine.RecId == 1)
                    {
                        select firstonly purchLine
                            where purchLine.PurchId     == wmsJournalTrans.InventTransRefId
                               && !purchLine.IsDeleted
                               && purchLine.ItemId      == wmsJournalTrans.ItemId;
                        inventMovement = InventMovement::construct(purchLine);
                        wmsJournalTrans.initFromMovement(inventMovement, inventDim);
                    }
                    break;

                case InventTransType::Sales:
                    if (wmsJournalTrans.ReturnItemNum)
                    {
                        select count(RecId) from salesLine
                            where salesLine.SalesId     == wmsJournalTrans.InventTransRefId &&
                                  salesLine.ItemId      == wmsJournalTrans.ItemId;
                        if (salesLine.RecId == 1)
                        {
                            select firstonly salesLine
                                where salesLine.SalesId     == wmsJournalTrans.InventTransRefId &&
                                      salesLine.ItemId      == wmsJournalTrans.ItemId;
                            inventMovement = InventMovement::construct(salesLine);
                            wmsJournalTrans.initFromMovement(inventMovement, inventDim);
                        }
                    }
                    break;

                default:
                    break;
            }
        }
        if (wmsJournalTrans.InventTransId)
        {
            movementCheckReferences = wmsJournalTrans.inventMovement(wmsJournalTrans.InventTransId, false);
            if (movementCheckReferences)
            {
                if (movementCheckReferences.transRefId() != wmsJournalTrans.InventTransRefId || movementCheckReferences.transType() != wmsJournalTrans.InventTransType)
                {
                    wmsJournalTrans.InventTransId = '';
                }
            }
        }
        wmsJournalTrans.PalletTypeId    = InventTable::wmsPalletTypeId(wmsJournalTrans.ItemId);
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWQtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the catch weight quantity is modified.
    /// </summary>
    public void fieldModifiedPdsCWQtyPost()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(WMSJournalTrans, PdsCWQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQtyPost()
    {
        SalesLine   salesLine;

        if ( wmsJournalTrans.IsReturnOrder && wmsJournalTrans.Qty != wmsJournalTrans.orig().Qty)
        {
            if (ReturnDispositionCode::find(wmsJournalTrans.ReturnDispositionCodeId).createReplacement())
            {
                salesLine = SalesLine::findInventTransId(wmsJournalTrans.InventTransId);
                if (ReturnReplaceItemRef::existOrigSalesLine(salesLine.SalesId, salesLine.LineNum))
                {
                    if (Box::yesNo(strFmt("@SYS125400", wmsJournalTrans.ReturnItemNum) , DialogButton::Yes) == DialogButton::Yes)
                    {
                        ReturnReplaceItemRef::deleteReplaceSetup(salesLine.SalesId, salesLine.LineNum);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedReturnItemNumPost</Name>
				<Source><![CDATA[
    public void fieldModifiedReturnItemNumPost()
    {
        ctrlReturnDispositionCodeId.enabled(wmsJournalTrans.ReturnItemNum ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateItemId</Name>
				<Source><![CDATA[
    public boolean fieldValidateItemId()
    {
        boolean             ret;
        InventDimId         inventDimId;

        wmsJournalTrans.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        inventDimId = wmsJournalTrans.InventDimId;

        ret = wmsJournalTrans.validateField(fieldNum(WMSJournalTrans, ItemId));

        if (wmsJournalTrans.InventDimId != inventDimId)
        {
            inventDim.data(InventDim::find(wmsJournalTrans.InventDimId));
            inventDim_ds.setCurrent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();
        this.updateDesign(InventDimFormDesignUpdate::Init);
        palletNumberSequenceAvailable = !NumberSequenceTable::find(WMSParameters::numRefWMSPalletId().NumberSequenceId).Manual;

        if (cwFormCtrl)
        {
            cwFormCtrl.initPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    protected void initDatasourceAllow()
    {
        WMSJournalFormTable wmsJournalFormTable = journalFormTable;
        boolean allow = wmsJournalFormTable && wmsJournalFormTable.isJournalEnabled();

        if (journalTrans_ds)
        {
            journalTrans_ds.allowDelete(allow || (journalTableData && journalTableData.journalTable().Posted));
            journalTrans_ds.allowEdit(allow);
            journalTrans_ds.allowCreate(allow);
        }

        if (inventDim_ds)
        {
            inventDim_ds.allowEdit(allow);
        }

        if (allow)
        { // some fields should perhaps not be editable.
            this.updateDesign(InventDimFormDesignUpdate::Active);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFormSetup</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_WMSJournalTrans inventDimFormSetup()
    {
        WMSJournalType  wmsJournalType = initJournalTypeId;

        if (!inventDimFormSetup)
        {
            Set validDataSources = new Set(Types::String);

            validDataSources.add(inventDim_ds.name());
            inventDimFormSetup  = InventDimCtrl_Frm_WMSJournalTrans::newFromFormJournalType(formRun, wmsJournalType, validDataSources);
            inventDimFormSetup.parmWMSJournalTrans(wmsJournalTrans);
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimInitPost</Name>
				<Source><![CDATA[
    public void inventDimInitPost(InventDim _inventDim)
    {
        inventDim_ds    = FormDataUtil::getFormDataSource(_inventDim);
        inventDim       = _inventDim;

        inventDim_ds.object(fieldNum(InventDim, InventSiteId)).mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_WMSJournalTrans inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCreateSerialIds</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCreateSerialIds(FormFunctionButtonControl _ctrlCreateSerialIds = ctrlCreateSerialIds)
    {
        ctrlCreateSerialIds = _ctrlCreateSerialIds;
        return ctrlCreateSerialIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridInventTransId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlGridInventTransId(FormStringControl _ctrlGridInventTransId = ctrlGridInventTransId)
    {
        ctrlGridInventTransId = _ctrlGridInventTransId;
        return ctrlGridInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridInventTransRefId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlGridInventTransRefId(FormStringControl _ctrlGridInventTransRefId = ctrlGridInventTransRefId)
    {
        ctrlGridInventTransRefId = _ctrlGridInventTransRefId;
        return ctrlGridInventTransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridItemId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlGridItemId(FormStringControl _ctrlGridItemId = ctrlGridItemId)
    {
        ctrlGridItemId = _ctrlGridItemId;
        return ctrlGridItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridReturnItemNum</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlGridReturnItemNum(FormStringControl _ctrlReturnItemNum = ctrlReturnItemNum)
    {
        ctrlReturnItemNum = _ctrlReturnItemNum;
        return ctrlReturnItemNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInventTransId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlInventTransId(FormStringControl _ctrlInventTransId = ctrlInventTransId)
    {
        ctrlInventTransId = _ctrlInventTransId;
        return ctrlInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInventTransRefId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlInventTransRefId(FormStringControl _ctrlInventTransRefId = ctrlInventTransRefId)
    {
        ctrlInventTransRefId = _ctrlInventTransRefId;
        return ctrlInventTransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInventTransType</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlInventTransType(FormComboBoxControl _ctrlInventTransType = ctrlInventTransType)
    {
        ctrlInventTransType = _ctrlInventTransType;
        return ctrlInventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlItemId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlItemId(FormStringControl _ctrlItemId = ctrlItemId)
    {
        ctrlItemId = _ctrlItemId;
        return ctrlItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlReturnDispositionCodeId (FormStringControl _ctrlReturnDispositionCodeId = ctrlReturnDispositionCodeId)
    {
        ctrlReturnDispositionCodeId = _ctrlReturnDispositionCodeId;
        return ctrlReturnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWFormCtrl</Name>
				<Source><![CDATA[
    public PdsCWFormCtrl parmPdsCWFormCtrl(PdsCWFormCtrl _cwFormCtrl = cwFormCtrl)
    {
        cwFormCtrl = _cwFormCtrl;
        return cwFormCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVendAccount</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlVendAccount(FormStringControl _ctrlVendAccount = ctrlVendAccount)
    {
        ctrlVendAccount = _ctrlVendAccount;
        return ctrlVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPromptSplitReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a prompt must be shown when splitting a return line.
    /// </summary>
    /// <returns>true if a prompt must be shown; otherwise, false.</returns>
    protected boolean mustPromptSplitReturnLine()
    {
        if (wmsJournalTrans.ReturnItemNum && wmsJournalTrans.InventTransType == InventTransType::Sales)
        {
            if (wmsJournalTrans.orig().Qty      != wmsJournalTrans.Qty ||
               (wmsJournalTrans.orig().PdsCWQty != wmsJournalTrans.PdsCWQty && PdsGlobal::pdsIsCWItem(wmsJournalTrans.ItemId)))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptSplitReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a split on a return order line when the journal line is referenced to a return order and the
    /// quantity has been changed to less than the original quantity.
    /// </summary>
    /// <returns>
    /// true if the process can be continued; otherwise, false .
    /// </returns>
    public boolean promptSplitReturnLine()
    {
        boolean ret = true;

        returnSplitQty = 0;
        cwReturnSplitQty = 0;

        // prompt for split return order line if quantity is different
        if (this.mustPromptSplitReturnLine())
        {
            // find original return quantity on return order line, change the sign as return quantity is negative
            SalesLine salesLine = SalesLine::findInventTransId(wmsJournalTrans.InventTransId);
            InventQty returnLineQty = -salesLine.QtyOrdered;
            PdsCWInventQty cwReturnLineQty = -salesLine.PdsCWQty;

            if (returnLineQty > 0 && wmsJournalTrans.Qty < returnLineQty && wmsJournalTrans.Qty > 0
                || (cwReturnLineQty > 0
                    && wmsJournalTrans.PdsCWQty < cwReturnLineQty
                    && wmsJournalTrans.PdsCWQty > 0 
                    && PdsGlobal::pdsIsCWItem(wmsJournalTrans.ItemId))
                )
            {
                if (Box::okCancel(strFmt("@SYS126853", wmsJournalTrans.JournalId, wmsJournalTrans.LineNum, wmsJournalTrans.ItemId, wmsJournalTrans.Qty, returnLineQty),DialogButton::Ok) == DialogButton::Ok)
                {
                    returnSplitQty      = wmsJournalTrans.Qty - returnLineQty;
                    cwReturnSplitQty    = wmsJournalTrans.PdsCWQty - cwReturnLineQty;
                }
                else
                {
                    // do not continue
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    public void runbaseMainEnd(
        JournalRunbaseCallbackable  _runBaseBatch,
        boolean                     _fromCatchError)
    {
        super(_runBaseBatch, _fromCatchError);

        if (classIdGet(_runBaseBatch) == classNum(WMSJournalTransUpdateSerialId) && !_fromCatchError)
        {
            journalTrans_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLookupInventTrans</Name>
				<Source><![CDATA[
    public void setLookupInventTrans(InventTrans _inventTrans)
    {
        if (!_inventTrans.RecId)
        {
            return;
        }
        inventTransIdLookup = true;
        wmsJournalTrans.initFromInventTrans(_inventTrans, inventDim);
        this.fieldModifiedItemIdPost();
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    protected void updateDesign(InventDimFormDesignUpdate _mode)
    {
        WMSJournalType  wmsJournalType = initJournalTypeId;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init            :
            case InventDimFormDesignUpdate::LinkActive      :
                if (wmsJournalType == WMSJournalType::Reception)
                {
                    ctrlGridInventTransRefId.visible(false);
                    ctrlGridInventTransId.visible(false);
                    ctrlGridItemId.visible(true);
                }
                else if (wmsJournalType == WMSJournalType::Production)
                {
                    ctrlGridInventTransRefId.visible(true);
                    ctrlGridInventTransId.visible(true);
                    ctrlGridItemId.visible(false);
                }
                // do continue
            case InventDimFormDesignUpdate::Active          :
                this.inventDimFormSetup().formActiveSetup(InventDimGroupSetup::newItemId(wmsJournalTrans.ItemId));
                this.inventDimFormSetup().formSetControls(true);
                break;
            case InventDimFormDesignUpdate::FieldChange     :
                this.inventDimFormSetup().formActiveSetup(InventDimGroupSetup::newItemId(wmsJournalTrans.ItemId));
                this.inventDimFormSetup().formSetControls(false);
                break;
            default : throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendAccountEnabledState</Name>
				<Source><![CDATA[
    private void setVendAccountEnabledState()
    {
        ctrlVendAccount.enabled(
            wmsJournalTrans.InventTransType == InventTransType::Sales
            || wmsJournalTrans.InventTransType == InventTransType::Purch
            || wmsJournalTrans.InventTransType == InventTransType::ConsignmentReplenishmentOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>