<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlUpdateTrackingSummaryProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlUpdateTrackingSummaryProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlUpdateTrackingSummaryProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlUpdateTrackingSummaryProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlUpdateTrackingSummaryProc]
    (
         @PartitionId                                   BIGINT
        ,@TrackingDate                                  DATETIME
        ,@PrimaryLedger                                 BIGINT
        ,@BudgetControlLedgerDimension                  BIGINT
        ,@AccountingCurrencyAmount                      NUMERIC(32,16)
        ,@IsDraft                                       INT
        ,@IsSimulation                                  INT
        ,@IsCarryForward                                INT
        ,@IntegratorType                                INT
        ,@BudgetModelID                                 NVARCHAR(10)
        ,@BudgetModelSubModelID                         NVARCHAR(10)
        ,@BudgetModelType                               INT
        ,@BudgetModelDataAreaID                         NCHAR(4)

        ,@logErrorFl                                    CHAR(1)

        --<PubSect>
        ,@Category                                      INT
         --</PubSect>

        ,@ReturnMsg							            NVARCHAR(4000) OUTPUT
    )
    AS

    SET NOCOUNT ON;

    -- declarations

    DECLARE  @SPName                VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode               INT = 0
            ,@ErrorTrying           NVARCHAR(4000) -- string describing command that failed
            ,@Rowcount              INT -- local variable for @@ROWCOUNT
            ,@Error_Number          INT -- from ERROR_NUMBER()
            ,@Error_Line            INT -- from ERROR_LINE()
            ,@Error_State           INT = 1 -- from ERROR_STATE()
            ,@Error_Severity        INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure       NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage          NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum CHAR(1) = 'Y'
            ,@ModifiedDateTime      DATETIME
            ,@rowcount_Merge        INT = 0
            ,@BudgetControlBuildErrorMsg NVARCHAR(4000)

    BEGIN TRY
        SELECT  @ModifiedDateTime = GETUTCDATE();

        MERGE INTO [BUDGETSOURCETRACKINGSUMMARY] AS [target]
        USING
            (SELECT  @TrackingDate
                    ,@Category
                    ,@PrimaryLedger
                    ,@BudgetControlLedgerDimension
                    ,@AccountingCurrencyAmount
                    ,@IsDraft
                    ,@IsSimulation
                    ,@IsCarryForward
                    ,@IntegratorType
                    ,@BudgetModelID
                    ,@BudgetModelSubModelID
                    ,@BudgetModelType
                    ,@BudgetModelDataAreaId
            ) AS [source]
                (    [TrackingDate]
                    ,[Category]
                    ,[PrimaryLedger]
                    ,[BudgetControlLedgerDimension]
                    ,[SourceAccountingCurrencyAmount]
                    ,[IsDraft]
                    ,[IsSimulation]
                    ,[IsCarryForward]
                    ,[IntegratorType]
                    ,[BudgetModelID]
                    ,[BudgetModelSubModelID]
                    ,[BudgetModelType]
                    ,[BudgetModelDataareaID]
                )
        ON (        [source].[TrackingDate]                 = [target].[TRACKINGDATE]
                AND [target].[CATEGORY]                     = [source].[Category]
                AND [target].[PRIMARYLEDGER]                = [source].[PrimaryLedger]
                AND [target].[BUDGETCONTROLLEDGERDIMENSION] = [source].[BudgetControlLedgerDimension]
                AND [target].[ISDRAFT]                      = [source].[IsDraft]
                AND [target].[ISSIMULATION]                 = [source].[IsSimulation]
                AND [target].[ISCARRYFORWARD]               = [source].[IsCarryForward]
                AND [target].[INTEGRATORTYPE]               = [source].[IntegratorType]
                AND [target].[BUDGETMODELID]                = [source].[BudgetModelID]
                AND [target].[BUDGETMODELSUBMODELID]        = [source].[BudgetModelSubModelID]
                AND [target].[BUDGETMODELTYPE]              = [source].[BudgetModelType]
                AND [target].[BUDGETMODELDATAAREAID]        = [source].[BudgetModelDataareaID]
                AND [target].[PARTITION]                    = @PartitionId
            )
        WHEN MATCHED THEN -- recversion is not used, depend on applock to enforce single active thread access
            UPDATE SET [ACCOUNTINGCURRENCYAMOUNT] = [ACCOUNTINGCURRENCYAMOUNT] + [source].[SourceAccountingCurrencyAmount]
        WHEN NOT MATCHED BY TARGET THEN
            INSERT
                ( [TRACKINGDATE]
                    ,[CATEGORY]
                    ,[PRIMARYLEDGER]
                    ,[BUDGETCONTROLLEDGERDIMENSION]
                    ,[ISSIMULATION]
                    ,[ISDRAFT]
                    ,[ISCARRYFORWARD]
                    ,[INTEGRATORTYPE]
                    ,[BUDGETMODELID]
                    ,[BUDGETMODELSUBMODELID]
                    ,[BUDGETMODELTYPE]
                    ,[BUDGETMODELDATAAREAID]
                    ,[ACCOUNTINGCURRENCYAMOUNT]
                    ,[RECVERSION]
                    ,[PARTITION]
                )
            VALUES
                ( [source].[TrackingDate]
                    ,[source].[Category]
                    ,[source].[PrimaryLedger]
                    ,[source].[BudgetControlLedgerDimension]
                    ,[source].[IsSimulation]
                    ,[source].[IsDraft]
                    ,[source].[IsCarryForward]
                    ,[source].[IntegratorType]
                    ,[source].[BudgetModelID]
                    ,[source].[BudgetModelSubModelID]
                    ,[source].[BudgetModelType]
                    ,[source].[BudgetModelDataareaId]
                    ,[source].[SourceAccountingCurrencyAmount]
                    ,0
                    ,@PartitionId
                )
        ;

        SELECT @rowcount_Merge = @@ROWCOUNT;
        ;
    END TRY
    BEGIN CATCH
        SELECT   @ErrorTrying      = 'MERGE INTO BudgetSourceTrackingSummary';
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    -- normal termination

    RETURN (0)

    -- error termination

    lblErrorTrap:

   EXEC [BudgetControlBuildErrorMessageProc] 
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg		= @BudgetControlBuildErrorMsg OUTPUT
    ;

    IF @RetCode = 0
        BEGIN
            SELECT @RetCode = -1
        END

    SELECT @ReturnMsg = @BudgetControlBuildErrorMsg;

    RETURN (@RetCode)
        ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>