<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCustQuotationConfirmJourDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationCustQuotationConfirmJourDataRetrieval</c> class retrieves data from <c>CustQuotationConfirmJour</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(CustQuotationConfirmJour))]
public class TaxIntegrationCustQuotationConfirmJourDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected CustQuotationConfirmJour custQuotationConfirmJour;
    protected CustTable custTableInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.custQuotationConfirmJour)
            .where(this.custQuotationConfirmJour, fieldStr(CustQuotationConfirmJour, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .outerJoin(this.custTableInvoice)
                .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                    .isEqualTo(this.custQuotationConfirmJour, fieldStr(CustQuotationConfirmJour, InvoiceAccount))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        // For now, only header info is needed for Customer invouce journal, so skip document charge and line.
        document.setShouldSkipDocumentCharge(true);
        document.setShouldSkipLine(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        if (this.custQuotationConfirmJour.SalesId)
        {
            CustQuotationConfirmSalesLink custQuotationConfirmSalesLink;
            SalesQuotationTable salesQuotationTable;

            select firstonly salesQuotationTable
                exists join custQuotationConfirmSalesLink
                    where custQuotationConfirmSalesLink.SalesId == this.custQuotationConfirmJour.SalesId
                        && custQuotationConfirmSalesLink.QuotationConfirmId == this.custQuotationConfirmJour.QuotationConfirmId
                        && custQuotationConfirmSalesLink.QuotationDate == this.custQuotationConfirmJour.QuotationDate
                        && custQuotationConfirmSalesLink.origQuotationId == salesQuotationTable.QuotationId;

            this.copyToDocumentFromInventStorageDimMap(document, salesQuotationTable);
        }

        document.setIncludingTax(this.custQuotationConfirmJour.InclTax);
        document.setOrderAccount(this.custQuotationConfirmJour.OrderAccount);
        document.setOrderAccountGroup(this.custQuotationConfirmJour.CustGroup);
        document.setInvoiceAccount(this.custQuotationConfirmJour.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.custQuotationConfirmJour.CurrencyCode);
        document.setDeliveryTerm(this.custQuotationConfirmJour.DlvTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryLocationOrSiteOrCompanyInformation(
            document.getInventory().getWarehouse(),
            document.getInventory().getSite(),
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.custQuotationConfirmJour.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);
        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress =TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
            this.custTableInvoice,
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>