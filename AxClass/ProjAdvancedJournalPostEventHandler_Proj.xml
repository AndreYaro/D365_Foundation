<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostEventHandler_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjAdvancedJournalPostEventHandler_Proj
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProjAdvancedJournalPost_onAdvancedJournalPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for any additional actions that need to be made during the posting
    /// process for a record in <c>ProjAdvancedJournal</c>
    /// </summary>
    /// <param name = "_advancedJournalRecId">RecId for a posted record in <c>ProjAdvancedJournal</c></param>
    [SubscribesTo(classStr(ProjAdvancedJournalPost), delegateStr(ProjAdvancedJournalPost, onAdvancedJournalPost))]
    public static void ProjAdvancedJournalPost_onAdvancedJournalPost(ProjAdvancedJournalRecId _advancedJournalRecId)
    {
        // We update tax amount field on existing actuals when CE integration is enabled            
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            ProjAdvancedJournalPostEventHandler_Proj::sendCalculatedTaxesToPSA(_advancedJournalRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendCalculatedTaxesToPSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any line records have calculated taxes that need to be sent back to the PSA system
    /// </summary>
    /// <param name = "_advancedJournalRecId">RecId for a posted record in <c>ProjAdvancedJournal</c></param>
    private static void sendCalculatedTaxesToPSA(ProjAdvancedJournalRecId _advancedJournalRecId)
    {
        ProjAdvancedJournalLine line;
        ProjAdvancedJournal     header;

        ttsbegin;

        while select forupdate line
            where line.ProjAdvancedJournal == _advancedJournalRecId
            && line.CalculatedTaxAmount > 0
        {
            if (!header)
            {
                header = ProjAdvancedJournal::find(_advancedJournalRecId);
                if (!header)
                {
                    throw error(strFmt("@Proj:ProjCDSUnableToCreatePSATaxDocument", Line.Voucher));
                }
            }

            ProjAdvancedJournalPostEventHandler_Proj::generateCDSTaxRecord(line, header.PostedDateTime);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCDSTaxRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a record in <c>ProjCDSActualsImport</c> to represent the tax that was calculated by D365
    /// </summary>
    /// <param name = "_line">The <c>ProjAdvancedJournalLine</c> that contains a tax needing to be written back to D365</param>
    /// <param name = "_postedDate">The date the <c>ProjAdvancedJournalLine</c> record was posted in D365</param>
    /// <returns>RecId of the tax record created</returns>
    private static recId generateCDSTaxRecord(ProjAdvancedJournalLine _line, JournalPostedDateTime _postedDate)
    {
        ProjCDSActualsImport import;        // record to be created
        ProjCDSActualsImport costRecord;    // related cost record to the tax that was previously imported from PSA

        costRecord = ProjCDSActualsImport::findByAdvancedJournalLineAndType(_line.recId, ProjCDSTransType::Cost);
        if (costRecord)
        {
            // Create tax cost record

            // all fields are being explicitly set, even if its the default value
            import.AccountingDate = DateTimeUtil::date(_postedDate);
            //import.ActualId = ''; // Not able to provide as this is assigned by PSA
            import.AdjustmentStatus = 0;
            import.Amount = _line.CalculatedTaxAmount;
            import.AmountMST = CurrencyExchangeHelper::amountCur2MST(_line.CalculatedTaxAmount, costRecord.TransactionCurrencyId);
            import.BillingStatusId = 0;
            import.BillingType = ProjBillingType::Chargeable;
            import.ContractId = costRecord.ContractId;
            import.ContractLine = costRecord.ContractLine;
            import.ContractingUnit = costRecord.ContractingUnit;
            import.Description = costRecord.Description;
            import.DocumentDate = costRecord.DocumentDate;
            import.EndDate = costRecord.EndDate;
            import.ExchangeRateDate = costRecord.DocumentDate;
            import.ExchangeRate = _line.CostExchangeRate;
            import.ExternalDescription = costRecord.ExternalDescription;
            import.ExternalReference = ProjCDSConstants::TaxRecordMarkerPrefix + guid2Str(costRecord.ActualId);
            import.InvoiceId = '';
            import.IsJournalized = NoYes::No;
            import.OwningBusinessId = costRecord.OwningBusinessId;
            import.OwningUser = costRecord.OwningUser;
            import.ProjectId = costRecord.ProjectId;
            import.Quantity = 1;
            import.Status = costRecord.Status;
            import.StatusReason = costRecord.StatusReason;
            import.StartDate = costRecord.StartDate;
            import.TaskId = costRecord.TaskId;
            import.TransactionClassification = ProjCDSConstants::TransactionClassification_Tax;
            import.TransactionCategory = costRecord.TransactionCategory;
            import.TransactionCurrencyId = costRecord.TransactionCurrencyId;
            import.TransType = ProjCDSTransType::Cost;
            import.UnitOfMeasure = ProjCDSConstants::UnitOfMeasure_PrimaryUnit;
            import.UnitPrice = import.Amount; // Qty is 1. use Amount.
            import.UnitPriceMST = import.AmountMST; // Qty is 1, use AmountMST.
            import.ProjAdvancedJournalLine = _line.RecId;
            import.ResourceId = costRecord.ResourceId;
            import.ResourceOperationUnitId = costRecord.ResourceOperationUnitId;
            import.IsProcessed = true;
            import.ProjectDataAreaId = costRecord.ProjectDataAreaId;

            if (import.validateWrite())
            {
                import.insert();
            }
            else
            {
                throw error(strFmt("@Proj:ProjCDSUnableToCreatePSATaxDocument", _line.Voucher));
            }

            // create tax sales record
            if (costRecord.ContractId && costRecord.ProjectId && ProjCDSContractLineImport::findByContractAndProject(costRecord.ContractId, costRecord.ProjectId).Type == PSAContractLineType::TAndM)
            {
                ProjAdvancedJournalPostEventHandler_Proj::createMatchingTaxSalesRecord(import, _line.Voucher);
            }
        }

        return import.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMatchingTaxSalesRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses an existing Tax Cost record to create a nearly equivalent Tax Sales record
    /// </summary>
    /// <param name = "_taxCostRecord">The Tax Cost record to replicate</param>
    /// <param name = "_voucher">The transactions posted voucher number</param>
    public static void createMatchingTaxSalesRecord(ProjCDSActualsImport _taxCostRecord, ProjAdvancedJournalVoucher _voucher)
    {
        ProjCDSActualsImport taxSalesRecord;

        taxSalesRecord.data(_taxCostRecord);

        taxSalesRecord.RecId = 0;
        taxSalesRecord.TransType = ProjCDSTransType::Sales;

        if (taxSalesRecord.validateWrite())
        {
            taxSalesRecord.insert();
        }
        else
        {
            throw error(strFmt("@Proj:ProjCDSUnableToCreatePSATaxDocument", _voucher));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>