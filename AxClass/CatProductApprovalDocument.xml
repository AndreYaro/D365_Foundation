<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProductApprovalDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatProductApprovalDocument extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(CatProductApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAutomatedApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to run auto approval process or not
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if the auto approval process is run; otherwise, false.
    /// </returns>
    public CatCatalogIsAutomatedApproval  parmIsAutomatedApproval(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        CatVendorCatalog    catVendorCatalog;
        CatVendorProductCandidate   catVendorProductCandidate;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        if (tablenum(CatVendorProductCandidate) == _tableId)
        {
            select IsAutomatedApprovalEnabled from catVendorCatalog join catVendorCatalogMaintenanceRequest where
                                                catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorCatalog.RecId
                                                join CatalogMaintenanceRequest from catVendorProductCandidate where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
                                                && catVendorProductCandidate.RecId == _recId;
        }
        return catVendorCatalog.IsAutomatedApprovalEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsVendorLegalEntityChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the association between the vendor and the legal entity.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_catVendorProductCandidateTableId">
    ///    The table ID of <c>CatVendorProductCandidate</c>table that corresponds to the workflow instance.
    /// </param>
    /// <param name="_catVendorProductCandidateRecId">
    ///    The record ID of <c>CatVendorProductCandidate</c>table that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if there is no change in the vendor and legal entity association; otherwise, false.
    /// </returns>
    public CatCatalogIsVendorLegalEntityChanged  parmIsVendorLegalEntityChanged(CompanyId _companyId,
                                                                                tableId _catVendorProductCandidateTableId,
                                                                                RecId _catVendorProductCandidateRecId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorReleaseCatalog             catVendorReleaseCatalog;

        if (tablenum(CatVendorProductCandidate) == _catVendorProductCandidateTableId)
        {
            select firstonly IsChangedOrNew from catVendorReleaseCatalog

            join RecId from catVendorCatalogMaintenanceRequest
                where catVendorReleaseCatalog.Catalog == catVendorCatalogMaintenanceRequest.VendorCatalog
                      && catVendorReleaseCatalog.IsChangedOrNew == NoYes::Yes

            join RecId from catVendorProductCandidate
                where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
                      && catVendorProductCandidate.RecId == _catVendorProductCandidaterecId;
        }
        return catVendorReleaseCatalog.IsChangedOrNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductPriceDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the price change between the proposed and current prices. Returns Price delta between
    ///    proposed and current prices.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The price difference.
    /// </returns>
    /// <remarks>
    ///    The price difference is equal to <c>(PP – CP)/CP</c> where PP is the proposed price and CP is the
    ///    current price.
    /// </remarks>
    public CatProductPriceDelta  parmProductPriceDelta(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        CatVendorApprovedProduct            catVendorApprovedProduct;
        InventTable                         inventTable;
        PriceDiscTable                      priceDiscTable;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidatePrice      catVendorProductCandidatePrice;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatProductPriceDelta                priceDelta,curPriceDelta;

        catVendorProductCandidate = CatVendorProductCandidate::find(_recId);

        while select VendorProductCandidate, CurrencyCode, Price from catVendorProductCandidatePrice
            where catVendorProductCandidatePrice.VendorProductCandidate == catVendorProductCandidate.RecId
            join VendorProductCode, DirPartyTable, EcoResProduct from catVendorApprovedProduct
            where catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
            join RecId, VendorCatalog from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest
            join RecId, VendorParty from catVendorCatalog where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog
            && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
        {
            while select crosscompany Product, ItemId from inventTable where inventTable.Product == catVendorApprovedProduct.EcoResProduct
                join maxof(Amount) from priceDiscTable
                where priceDiscTable.ItemRelation == inventTable.ItemId && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                && priceDiscTable.Currency == catVendorProductCandidatePrice.CurrencyCode
            {
                //Price Delta formula: PD=(PP – CP)/CP.
                //where PD = Price Delta, PP = Proposed Price and CP = Current Price.
                curPriceDelta = (catVendorProductCandidatePrice.Price - priceDiscTable.Amount ) / priceDiscTable.Amount;
                if (curPriceDelta > priceDelta)
                {
                    priceDelta = curPriceDelta;
                }
            }
        }

        return priceDelta;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>