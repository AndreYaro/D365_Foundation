<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSelectorDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransSelectorDepreciation</c> class contains the common base for selectors of inventory transactions
/// elegible for depriciation.
/// </summary>
abstract class InventTransSelectorDepreciation implements InventTransSelector
{
    InventMovement  movement;
    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;
    boolean         selectMarkedTrans;
    StatusReceipt   fromStatusReceipt;
    StatusReceipt   toStatusReceipt;
    StatusIssue     fromStatusIssue;
    StatusIssue     toStatusIssue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
        public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
        public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
        public InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectMarkedTrans</Name>
				<Source><![CDATA[
        public boolean parmSelectMarkedTrans(boolean _selectMarkedTrans = selectMarkedTrans)
    {
        selectMarkedTrans = _selectMarkedTrans;

        return selectMarkedTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>select</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes a query over the <c>InventTrans</c> table and attaches cursor to the buffer passed in the parameters.
    /// </summary>
    /// <param name="_inventTrans">
    ///     An <c>InventTrans</c> table buffer.
    /// </param>
    abstract public void select(InventTrans _inventTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransStatusRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines issue and receipt status ranges based on the movement direction.
    /// </summary>
    /// <param name="_direction">
    /// The movement direction.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Wrong movement direction is specified.
    /// </exception>
    public void setInventTransStatusRanges(InventDirection _direction)
    {
        switch (_direction)
        {
            case InventDirection::Issue :
                fromStatusIssue = StatusIssue::ReservPhysical;
                toStatusIssue = StatusIssue::QuotationIssue;
                fromStatusReceipt = StatusReceipt::None;
                toStatusReceipt = StatusReceipt::None;
                break;

            case InventDirection::Receipt :
                fromStatusIssue = StatusIssue::None;
                toStatusIssue = StatusIssue::None;
                fromStatusReceipt = StatusReceipt::Ordered;
                toStatusReceipt = StatusReceipt::QuotationReceipt;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransSelectorDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inializes a new instance of the <c>InventTransSelectorDepreciation</c> class.
    /// </summary>
    /// <param name="_direction">
    /// A movement direction.
    /// </param>
    /// <param name="_movement">
    /// An inventory movement.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> table buffer that defines selection criteria.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> table buffer that specifies which dimesnions from the criteria must be obeyed.
    /// </param>
    /// <param name="_selectMarkedTrans">
    /// A Boolean parameter that specifies if the marked transactions should be retrieved.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransSelectorDepreciation</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The extension that is capable of handling the input parameter values is not found.
    /// </exception>
    public static InventTransSelectorDepreciation newInventTransSelectorDepreciation(
        InventDirection _direction,
        InventMovement  _movement,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm,
        boolean         _selectMarkedTrans)
    {
        InventTransSelectorDepreciationAttribute inventTransSelectorDepreciationAttribute = new InventTransSelectorDepreciationAttribute(
            _direction,
            !(_inventDimParm.isAllFlagNo() || (_inventDimParm.isAllFlagYes() && _inventDimCriteria.InventDimId != '')),
            _movement.pdsCWItem());

        InventTransSelectorDepreciation inventTransSelectorDepreciation = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(InventTransSelectorDepreciation),
            inventTransSelectorDepreciationAttribute);

        if (inventTransSelectorDepreciation == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventTransSelectorDepreciation.parmMovement(_movement);
        inventTransSelectorDepreciation.parmInventDimCriteria(_inventDimCriteria);
        inventTransSelectorDepreciation.parmInventDimParm(_inventDimParm);
        inventTransSelectorDepreciation.parmSelectMarkedTrans(_selectMarkedTrans);
        inventTransSelectorDepreciation.setInventTransStatusRanges(_direction);

        return inventTransSelectorDepreciation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
