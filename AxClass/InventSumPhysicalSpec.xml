<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumPhysicalSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumPhysicalSpec extends InventSumTrans
{
    InventQty       received[];
    InventQty       deducted[];
    InventQty       knownFloatQty[];
    CostAmount      knownFloatValue[];
    InventQty       unknownFloatQty[];
    CostAmount      unknownFloatValue[];
    InventQty       registered[];
    InventQty       picked[];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    void addInventTrans(InventTrans inventTrans)
    {
        int sign = 1;
        if (inventTrans.DateFinancial)
        {
            if (inventTrans.DateFinancial <= perDate)
            {
                sign = -1;
            }
        }

        transMax+= 1;
        transRecId[transMax]    = inventTrans.RecId;

        if (inventTrans.DateInvent && inventTrans.DateInvent <= perDate && (inventTrans.DatePhysical == dateNull() || inventTrans.DatePhysical > perDate ))
        {
            if (inventTrans.Qty > 0)
            {
                registered[transMax] += inventTrans.Qty;
            }
            else
            {
                picked[transMax]     -= inventTrans.Qty;
            }
        }
        else
        {
            switch (inventTrans.StatusReceipt)
            {
                case StatusReceipt::Received:
                    received[transMax]      += sign * inventTrans.Qty;
                    break;
                case StatusReceipt::Purchased:
                    received[transMax]      += sign * inventTrans.Qty;
                    break;
                default:
                    break;
            }

            switch (inventTrans.StatusIssue)
            {
                case StatusIssue::Deducted:
                    deducted[transMax]      -= sign * inventTrans.Qty;
                    break;
                case StatusIssue::Sold:
                    deducted[transMax]      -= sign * inventTrans.Qty;
                    break;
                default:
                    break;
            }
        }

        if (inventTrans.StatusReceipt == StatusReceipt::Purchased || inventTrans.StatusIssue == StatusIssue::Sold)
        {
            knownFloatValue[transMax]    += sign * inventTrans.costValue();
            knownFloatQty[transMax]      += sign * inventTrans.Qty;
        }

        unknownFloatQty[transMax]       = received[transMax] - deducted[transMax] - knownFloatQty[transMax] + registered[transMax] - picked[transMax];
        unknownFloatValue[transMax]     = unknownFloatQty[transMax] ?
                                          unknownFloatQty[transMax] * InventTable::findCostPcsPrice(itemId, inventTrans.InventDimId) :
                                          0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducted</Name>
				<Source><![CDATA[
    InventQty deducted(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return deducted[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>knownFloatValue</Name>
				<Source><![CDATA[
    CostAmount knownFloatValue(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return knownFloatValue[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>picked</Name>
				<Source><![CDATA[
    InventQty picked(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return picked[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>received</Name>
				<Source><![CDATA[
    InventQty received(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return received[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    InventQty registered(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return registered[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransByNonSelective</Name>
				<Source><![CDATA[
    private void addInventTransByNonSelective()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        while select forceplaceholders inventTrans
            order by DatePhysical
            where   inventTrans.ItemId              == itemId                                                                  &&
                    inventTrans.StatusReceipt       <= StatusReceipt::Received                                                 &&
                    inventTrans.StatusIssue         <= StatusIssue::Deducted                                                   &&
                    ((inventTrans.DatePhysical      <= perDate || (inventTrans.DateInvent <= perDate && inventTrans.DateInvent) &&
                        (inventTrans.DateFinancial     > perDate || !inventTrans.DateFinancial))                                  ||
                        (inventTrans.DateFinancial     <= perDate && inventTrans.DateFinancial                                    &&
                        (inventTrans.DatePhysical      > perDate || !inventTrans.DatePhysical)))
        #inventDimExistsJoin(inventTrans.InventDimId,inventDim,inventDimCriteria,inventDimParm)
        {
            this.addInventTrans(inventTrans);
        }

        while select forceplaceholders inventTrans
            order by DatePhysical
            where   inventTrans.ItemId              == itemId                                   &&
                    (inventTrans.StatusReceipt       == StatusReceipt::Registered                ||
                    inventTrans.StatusIssue         == StatusIssue::Picked)                     &&
                    inventTrans.DateInvent          <= perDate                                  &&
                    (inventTrans.DatePhysical        > perDate || inventTrans.DatePhysical == dateNull())
        #inventDimExistsJoin(inventTrans.InventDimId,inventDim,inventDimCriteria,inventDimParm)
        {
            this.addInventTrans(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransForSerial</Name>
				<Source><![CDATA[
    private void addInventTransForSerial()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        while #inventDimSelect(inventDim,inventDimCriteria,inventDimParm,forcePlaceholders tableId From,SerialIdIdx)
        join inventTrans
            order by DatePhysical
            where   inventTrans.InventDimId         == inventDim.InventDimId                    &&
                    inventTrans.ItemId              == itemId                                   &&
                    inventTrans.StatusReceipt       <= StatusReceipt::Received                  &&
                    inventTrans.StatusIssue         <= StatusIssue::Deducted                    &&
                    ((inventTrans.DatePhysical      <= perDate                                  &&
                        (inventTrans.DateFinancial     > perDate || !inventTrans.DateFinancial))   ||
                        (inventTrans.DateFinancial     <= perDate && inventTrans.DateFinancial     &&
                        (inventTrans.DatePhysical      > perDate || !inventTrans.DatePhysical)))
        {
            this.addInventTrans(inventTrans);
        }

        while #inventDimSelect(inventDim,inventDimCriteria,inventDimParm,forcePlaceholders tableId From,SerialIdIdx)
        join inventTrans
            order by DatePhysical
            where   inventTrans.InventDimId         == inventDim.InventDimId                    &&
                    inventTrans.ItemId              == itemId                                   &&
                    (inventTrans.StatusReceipt       == StatusReceipt::Registered                ||
                    inventTrans.StatusIssue         == StatusIssue::Picked)                     &&
                    inventTrans.DateInvent          <= perDate                                  &&
                    (inventTrans.DatePhysical        > perDate || inventTrans.DatePhysical == dateNull())
        {
            this.addInventTrans(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransForBatch</Name>
				<Source><![CDATA[
    private void addInventTransForBatch()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        while #inventDimSelect(inventDim,inventDimCriteria,inventDimParm,forcePlaceholders tableId From,BatchIdIdx)
        join inventTrans
            order by DatePhysical
            where   inventTrans.InventDimId         == inventDim.InventDimId                    &&
                    inventTrans.ItemId              == itemId                                   &&
                    inventTrans.StatusReceipt       <= StatusReceipt::Received                  &&
                    inventTrans.StatusIssue         <= StatusIssue::Deducted                    &&
                    ((inventTrans.DatePhysical      <= perDate                                  &&
                        (inventTrans.DateFinancial     > perDate || !inventTrans.DateFinancial))   ||
                        (inventTrans.DateFinancial     <= perDate && inventTrans.DateFinancial     &&
                        (inventTrans.DatePhysical      > perDate || !inventTrans.DatePhysical)))
        {
            this.addInventTrans(inventTrans);
        }

        while #inventDimSelect(inventDim,inventDimCriteria,inventDimParm,forcePlaceholders tableId From,BatchIdIdx)
        join inventTrans
            order by DatePhysical
            where   inventTrans.InventDimId         == inventDim.InventDimId                    &&
                    inventTrans.ItemId              == itemId                                   &&
                    (inventTrans.StatusReceipt       == StatusReceipt::Registered                ||
                    inventTrans.StatusIssue         == StatusIssue::Picked)                     &&
                    inventTrans.DateInvent          <= perDate                                  &&
                    (inventTrans.DatePhysical        > perDate || inventTrans.DatePhysical == dateNull())
        {
            this.addInventTrans(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransByDefault</Name>
				<Source><![CDATA[
    private void addInventTransByDefault()
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        while select inventTrans
            order by DatePhysical
            where   inventTrans.ItemId              == itemId                                   &&
                    inventTrans.StatusReceipt       <= StatusReceipt::Received                  &&
                    inventTrans.StatusIssue         <= StatusIssue::Deducted                    &&
                    ((inventTrans.DatePhysical      <= perDate                                  &&
                        (inventTrans.DateFinancial     > perDate || !inventTrans.DateFinancial))   ||
                        (inventTrans.DateFinancial     <= perDate && inventTrans.DateFinancial     &&
                        (inventTrans.DatePhysical      > perDate || !inventTrans.DatePhysical)))
        #inventDimExistsJoin(inventTrans.InventDimId,inventDim,inventDimCriteria,inventDimParm)
        {
            this.addInventTrans(inventTrans);
        }

        while select inventTrans
            order by DatePhysical
            where   inventTrans.ItemId              == itemId                                   &&
                    inventTrans.ItemId              == itemId                                   &&
                    (inventTrans.StatusReceipt       == StatusReceipt::Registered                ||
                    inventTrans.StatusIssue         == StatusIssue::Picked)                     &&
                    inventTrans.DateInvent          <= perDate                                  &&
                    (inventTrans.DatePhysical        > perDate || inventTrans.DatePhysical == dateNull())
        #inventDimExistsJoin(inventTrans.InventDimId,inventDim,inventDimCriteria,inventDimParm)
        {
            this.addInventTrans(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransByDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>InventTrans</c> records based on provided dimensions.
    /// </summary>
    /// <returns>true if handled; otherwise, false.</returns>
    protected boolean addInventTransByDimension()
    {
        if (! inventDimParm.isFlagSelective())
        {
            this.addInventTransByNonSelective();
            return true;
        }

        if (inventDimParm.InventSerialIdFlag && inventDimCriteria.InventSerialId)
        {
            this.addInventTransForSerial();
            return true;
        }
        
        if (inventDimParm.InventBatchIdFlag && inventDimCriteria.InventBatchId)
        {
            this.addInventTransForBatch();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    protected void setValueQty()
    {
        if (!isCalc)
        {
            if (!this.addInventTransByDimension())
            {
                this.addInventTransByDefault();
            }

            isCalc = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unknownFloatValue</Name>
				<Source><![CDATA[
    CostAmount unknownFloatValue(Integer x)
    {
        this.setValueQty();

        if (x > 0 && x <= transMax)
        {
            return unknownFloatValue[x];
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>