<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventIssueCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInventIssueCheckPost extends RunBaseBatch implements BatchRetryable
{
    JournalCheckPostType    journalCheckPostType;
    RAssetInventIssueTable  assetInventIssueTable;

    LedgerJournalTable      ledgerJournalTableAcquisition;
    LedgerJournalTable      ledgerJournalTableDepreciation;

    DialogField             dlgPost;
    NoYes                   post;

    QueryRun                queryRun;
    Counter                 progressCounter;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        post
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalTrans</Name>
				<Source><![CDATA[
    protected boolean checkJournalTrans()
    {
        RAssetInventIssueTrans      assetInventIssueTrans;
        RAssetDeprAccountForJournal assetDeprAccountForJournal;
        RAssetInventIssueQuotas     assetInventIssueQuotas;
        RAssetInventIssueQuotaTypes assetInventIssueQuotaTypes;
        RAssetParameters            assetParameters = RAssetParameters::find();
        InventTable                 inventTable;
        RAssetTable                 assetTableUsed;
        RAssetStandards             assetStandards;
        InventQty                   inventQty;
        boolean                     ret = true;

        if (! assetInventIssueTable.linesCount())
        {
            return checkFailed("@SYS27671");
        }

        while select assetInventIssueTrans
            where assetInventIssueTrans.InventIssueTableRecId == assetInventIssueTable.RecId
        {
            select firstonly RecId from assetDeprAccountForJournal
                where assetDeprAccountForJournal.RefRecId == assetInventIssueTrans.RecId;

            if (! assetDeprAccountForJournal.RecId)
            {
                ret = checkFailed(strFmt("@GLS113903", assetInventIssueTrans.ItemId));
            }
            while select assetDeprAccountForJournal
                where assetDeprAccountForJournal.RefRecId == assetInventIssueTrans.RecId
            {
                if (assetDeprAccountForJournal.AssetLedgerDimension)
                {
                   ret = (LedgerDimensionValidationHelper::validateByTree(LedgerDimensionFacade::serviceCreateLedgerDimension(assetDeprAccountForJournal.AssetLedgerDimension, assetInventIssueTrans.DefaultDimension), assetInventIssueTable.TransDate, true, true) == DimensionValidationStatus::Valid) && ret;
                }

                if (assetDeprAccountForJournal.DepreciationBonusLedgerDimension)
                {
                    ret = (LedgerDimensionValidationHelper::validateByTree(LedgerDimensionFacade::serviceCreateLedgerDimension(assetDeprAccountForJournal.DepreciationBonusLedgerDimension, assetInventIssueTrans.DefaultDimension), assetInventIssueTable.TransDate, true, true) == DimensionValidationStatus::Valid) && ret;
                }
            }
            inventTable = InventTable::find(assetInventIssueTrans.ItemId);

            if (inventTable.AssetGroupId_RU &&
                assetInventIssueTrans.CostPrice > assetParameters.LowCostAmountLimit)
            {
                ret = checkFailed(strFmt("@GLS113904", assetInventIssueTrans.ItemId, assetInventIssueTrans.assetMainGroupId()));
            }
            else if (! inventTable.AssetGroupId_RU)
            {
                assetInventIssueQuotas = RAssetInventIssueQuotas::findQuotas(assetInventIssueTrans.EmployeeTable_RU,
                                                                             assetInventIssueTrans.QuotaTypesRecId,
                                                                             inventTable.itemGroupId(),
                                                                             assetInventIssueTrans.ItemId);
                if (assetInventIssueQuotas)
                {
                    assetInventIssueQuotaTypes = RAssetInventIssueQuotaTypes::find(assetInventIssueTrans.QuotaTypesRecId);

                    inventQty = RAssetTable::clothAndRiggingQty(assetInventIssueTrans.ItemId, assetInventIssueTrans.EmployeeTable_RU, assetInventIssueTrans.QuotaTypesRecId);

                    if (! assetInventIssueQuotaTypes.SuperQuota && (assetInventIssueQuotas.Quota < inventQty + assetInventIssueTrans.Qty))
                    {
                        ret = checkFailed(strFmt("@GLS113986",
                                          assetInventIssueTrans.ItemId,
                                          assetInventIssueTrans.EmployeeTable_RU,
                                          EmployeeTable_RU::findByEmployeeId(assetInventIssueTrans.EmployeeTable_RU).employeeName()));
                    }
                }
                else
                {
                    ret = checkFailed(strFmt("@GLS113987", assetInventIssueTrans.ItemId));
                }
            }

            assetTableUsed = assetInventIssueTrans.rAssetTableUsed();

            if (assetTableUsed)
            {
                if (assetTableUsed.Status != RAssetStatus::Scrapped)
                {
                    ret = checkFailed(strFmt("@GLS114174", assetTableUsed.AccountNum, assetInventIssueTrans.ItemId));
                }

                while select DisposalDate from assetStandards
                    where assetStandards.AssetId == assetTableUsed.AccountNum
                {
                    if (assetStandards.DisposalDate > assetInventIssueTable.TransDate)
                        ret = checkFailed(strFmt("@GLS113908", assetInventIssueTable.TransDate, assetStandards.DisposalDate));
                }
            }

            this.displayProgress(strFmt("@GLS113905", assetInventIssueTrans.ItemId));
        }

        while select sum(Qty) from assetInventIssueTrans
            group by EmployeeTable_RU, QuotaTypesRecId, ItemId
            where assetInventIssueTrans.InventIssueTableRecId == assetInventIssueTable.RecId
        {
            inventTable = InventTable::find(assetInventIssueTrans.ItemId);

            if (! inventTable.AssetGroupId_RU)
            {
                assetInventIssueQuotas = RAssetInventIssueQuotas::findQuotas(assetInventIssueTrans.EmployeeTable_RU,
                                                                             assetInventIssueTrans.QuotaTypesRecId,
                                                                             inventTable.itemGroupId(),
                                                                             assetInventIssueTrans.ItemId);

                if (assetInventIssueQuotas)
                {
                    assetInventIssueQuotaTypes = RAssetInventIssueQuotaTypes::find(assetInventIssueTrans.QuotaTypesRecId);

                    inventQty = RAssetTable::clothAndRiggingQty(assetInventIssueTrans.ItemId, assetInventIssueTrans.EmployeeTable_RU, assetInventIssueTrans.QuotaTypesRecId);

                    if (! assetInventIssueQuotaTypes.SuperQuota && (assetInventIssueQuotas.Quota < inventQty + assetInventIssueTrans.Qty))
                    {
                        ret = checkFailed(strFmt("@GLS113986",
                                          assetInventIssueTrans.ItemId,
                                          assetInventIssueTrans.EmployeeTable_RU,
                                          EmployeeTable_RU::findByEmployeeId(assetInventIssueTrans.EmployeeTable_RU).employeeName()));
                    }
                }
            }

            this.displayProgress(strFmt("@GLS113988",
                                        RAssetInventIssueQuotaTypes::find(assetInventIssueTrans.QuotaTypesRecId).QuotaTypeId,
                                        assetInventIssueTrans.EmployeeTable_RU,
                                        assetInventIssueTrans.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAsset</Name>
				<Source><![CDATA[
    protected void createAsset(RAssetInventIssueTrans _assetInventIssueTrans)
    {
        RAssetTable                         assetTable;
        RAssetTable                         assetTableUsed;
        RAssetStandards                     assetStandards;
        RAssetStandards                     assetStandardsUsed;
        RAssetMainGroupMember               assetMainGroupMember;
        InventTable                         inventTable;
        RAssetDeprAccountForJournal         assetDeprAccountForJournal;
        RAssetMainGroupId                   mainGroupId;
        RAssetMainGroup                     assetMainGroup;
        RAssetScrap                         assetScrap;
        RAssetDeprAccount                   assetDeprAccount;
        RAssetCopy                          assetCopy;
        RAssetParameters                    assetParameters;
        RAssetSumCalc                       assetSumCalc;
        RAssetLifeTime                      lifeTime;
        #define.percent100(100)

        void insertMoveHist(EmployeeId_RU _employee, RAssetLocationId _location)
        {
            RAssetMoveHist     assetMovHist;

            assetMovHist.clear();
            assetMovHist.AccountNum  = assetTable.AccountNum;
            assetMovHist.ChangeDate  = assetInventIssueTable.TransDate;
            assetMovHist.MoveType    = RAssetMoveType::Transfer;
            assetMovHist.NewEmployee = _employee;
            assetMovHist.NewLocation = _location;
            assetMovHist.Userid      = curUserId();
            assetMovHist.insert();
        }
        void updateLifeHist(RAssetLifeTime _lifeTime)
        {
            RAssetLifeHist     lifeHist = RAssetLifeHist::findDateLifeTime(assetStandards.AssetId, maxDate(), assetStandards.AssetStandardId, true);
            lifeHist.NewLife   = _lifeTime;
            lifeHist.update();
        }

        mainGroupId = _assetInventIssueTrans.assetMainGroupId();

        if (! mainGroupId)
        {
            throw error(strFmt("@GLS113907", _assetInventIssueTrans.ItemId));
        }

        assetTableUsed  = _assetInventIssueTrans.rAssetTableUsed();

        if (assetTableUsed)
        {
            assetMainGroup  = RAssetMainGroup::find(assetTableUsed.AssetGroup);

            assetParameters = RAssetParameters::find();
            assetCopy       = new RAssetCopy(assetTableUsed);

            assetCopy.parmCopiesNumber(1);
            assetCopy.initSequence();
            assetCopy.runOperation();

            assetTable                      = RAssetTable::find(assetCopy.getNewAssetId(), true);
            assetTable.AcquisitionDate      = assetInventIssueTable.TransDate;
            assetTable.AcquisitionPrice     = _assetInventIssueTrans.CostPrice;
            assetTable.QuotaTypesRecId      = _assetInventIssueTrans.QuotaTypesRecId;
            assetTable.WrkCtrId             = _assetInventIssueTrans.WrkCtrId;

            if (! assetTable.validateWrite())
                throw error("@SYS79625");

            assetTable.update();

            insertMoveHist(_assetInventIssueTrans.EmployeeTable_RU, _assetInventIssueTrans.Location);

            assetMainGroup = RAssetMainGroup::find(assetTableUsed.AssetGroup);

            while select forupdate assetStandards
                where assetStandards.AssetId == assetTable.AccountNum
            {
                assetStandardsUsed  = RAssetStandards::find(assetTableUsed.AccountNum, assetStandards.AssetStandardId);

                if (assetStandardsUsed.DisposalDate > assetInventIssueTable.TransDate)
                {
                    throw error(strFmt("@GLS113908", assetInventIssueTable.TransDate, assetStandardsUsed.DisposalDate));
                }

                assetStandards.DefaultDimension = _assetInventIssueTrans.DefaultDimension;

                if (assetStandards.AssetStandardId == assetParameters.StandardIdDefault)
                {
                    assetStandards.AcquisitionPrice = RAssetProposal::roundAmount(assetStandards.AssetStandardId,
                                                                                  assetTable,
                                                                                  assetInventIssueTable.TransDate,
                                                                                  _assetInventIssueTrans.CostPrice,
                                                                                  assetStandards.CurrencyCode);
                    assetStandards.update();
                    updateLifeHist(_assetInventIssueTrans.UsingPeriod);
                }
                else
                {
                    assetSumCalc        = RAssetSumCalc_Trans::newAssetPeriod(assetTableUsed.AccountNum,
                                                                              assetStandards.AssetStandardId,
                                                                              assetInventIssueTable.TransDate);

                    assetStandards.AcquisitionPrice = RAssetProposal::roundAmount(assetStandards.AssetStandardId,
                                                                                  assetTable,
                                                                                  assetInventIssueTable.TransDate,
                                                                                  abs(assetSumCalc.disposalScrapValue()),
                                                                                  assetStandards.CurrencyCode);
                    lifeTime = assetStandardsUsed.lifeTimeRest(assetStandardsUsed.LastDepDate);

                    if (assetStandards.AcquisitionPrice && lifeTime)
                    {
                        if (! assetStandards.validateWrite())
                            throw error("@SYS79625");
                        assetStandards.update();
                        updateLifeHist(lifeTime);
                    }
                    else
                    {
                        assetStandards.delete();
                    }
                }
            }
        }
        else
        {
            assetMainGroup = RAssetMainGroup::find(mainGroupId);

            if (!assetMainGroup)
            {
                throw error(strFmt("@GLS113909", _assetInventIssueTrans.ItemId));
            }

            assetTable.initValue();
            assetTable.initFromAssetGroup(assetMainGroup);
            inventTable                 = InventTable::find(_assetInventIssueTrans.ItemId);
            assetTable.initFromInventTable(inventTable);
            assetTable.AssetGroup           = assetMainGroup.AssetMainGroupId;

            assetTable.Name                 = inventTable.itemName();

            assetTable.AcquisitionDate      = assetInventIssueTable.TransDate;
            assetTable.AcquisitionPrice     = _assetInventIssueTrans.CostPrice;
            assetTable.QuotaTypesRecId      = _assetInventIssueTrans.QuotaTypesRecId;
            assetTable.WrkCtrId             = _assetInventIssueTrans.WrkCtrId;
            assetTable.AccountNumReference  = assetTable.AccountNum;
            if (! assetTable.validateWrite())
                throw error("@SYS79625");
            assetTable.insert();

            insertMoveHist(_assetInventIssueTrans.EmployeeTable_RU, _assetInventIssueTrans.Location);
        }

        assetScrap.initFromInventTable(inventTable);
        assetScrap.Assembling       = NoYes::Yes;
        assetScrap.AssetId          = assetTable.AccountNum;
        assetScrap.ItemId           = _assetInventIssueTrans.ItemId;
        assetScrap.Qty              = 1;
        assetScrap.DefaultDimension = _assetInventIssueTrans.DefaultDimension;
        assetScrap.InventDimId      = _assetInventIssueTrans.InventDimId;

        assetScrap.insert();

        if (! assetTableUsed)
        {
            while select assetMainGroupMember
                where assetMainGroupMember.AssetMainGroupId == assetMainGroup.AssetMainGroupId
            {
                assetStandards.clear();
                assetStandards.initFromMainGroup(assetTable, assetMainGroupMember);

                assetStandards = RAssetStandards::find(assetTable.AccountNum,assetMainGroupMember.AssetStandardId, true);

                assetStandards.AcquisitionPrice = RAssetProposal::roundAmount(assetStandards.AssetStandardId,
                                                                              assetTable,
                                                                              assetInventIssueTable.TransDate,
                                                                              _assetInventIssueTrans.CostPrice,
                                                                              assetStandards.CurrencyCode);

                assetStandards.DefaultDimension = _assetInventIssueTrans.DefaultDimension;
                lifeTime = assetMainGroupMember.QuotaUsagePeriod ?
                           _assetInventIssueTrans.UsingPeriod :
                           RAssetGroup::find(assetStandards.AssetGroup).Lifetime;

                if (lifeTime <= 0)
                    throw error(strFmt("@GLS113909", _assetInventIssueTrans.ItemId, assetStandards.AssetStandardId));

                if (! assetStandards.validateWrite())
                    throw error("@SYS79625");

                assetStandards.update();
                updateLifeHist(lifeTime);

                assetDeprAccountForJournal = RAssetDeprAccountForJournal::find(_assetInventIssueTrans.RecId, assetMainGroupMember.AssetStandardId);

                if (assetDeprAccountForJournal)
                {
                    assetDeprAccount.clear();
                    assetDeprAccount.initFromRAssetDeprAccountForJournal(assetDeprAccountForJournal);
                    assetDeprAccount.AssetId    = assetTable.AccountNum;
                    assetDeprAccount.Percentage = #percent100;

                    assetDeprAccount.insert();
                }
            }
        }

        this.createAssetJournal(assetTable.AccountNum, assetInventIssueTable.TransDate, RAssetTransType::Acquisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetJournal</Name>
				<Source><![CDATA[
    protected void createAssetJournal(RAssetId _assetId, TransDate _transDate, RAssetTransType _assetTransType)
    {
        RAssetStandards assetStandards;
        RAssetProposal  assetProposal;
        RAssetAmount    assetAmount;

        if (!this.createLedgerJournalTablebyAssetTransType(_assetTransType))
        {
            throw error(strFmt("@SYS73815", enum2str(_assetTransType)));
        }

        assetProposal  = RAssetProposal::construct(_assetTransType);

        while select assetStandards
            where assetStandards.AssetId == _assetId
        {
            assetProposal.initParameters(_assetTransType == RAssetTransType::Acquisition ? ledgerJournalTableAcquisition.JournalNum : ledgerJournalTableDepreciation.JournalNum,
                                         _transDate, assetStandards);

            if (assetProposal.canCreateJournalLine(assetStandards.AssetStandardId))
            {
                assetAmount = _assetTransType == RAssetTransType::Acquisition ? assetStandards.AcquisitionPrice : 0;

                if (assetAmount)
                {
                    assetAmount = RAssetProposal::roundAmount(assetStandards.AssetStandardId,
                                                              RAssetTable::find(_assetId),
                                                              _transDate,
                                                              assetAmount,
                                                              assetStandards.CurrencyCode);

                    assetAmount = abs(assetAmount);
                }

                assetProposal.createJournalLines(assetStandards.AssetStandardId, true, assetAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    private void createLedgerJournalTable(LedgerJournalTable _ledgerJournalTable, LedgerJournalNameId _ledgerJournalNameId)
    {
        if (!_ledgerJournalTable)
        {
            _ledgerJournalTable.clear();
            _ledgerJournalTable.initFromLedgerJournalName(_ledgerJournalNameId);

            _ledgerJournalTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTablebyAssetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTable</c> record by supported asset trans type.
    /// </summary>
    /// <param name = "_assetTransType"></param>
    /// <returns>True if asset trans type supported; otherwise false</returns>
    protected boolean createLedgerJournalTablebyAssetTransType(RAssetTransType _assetTransType)
    {
        boolean ret = true;

        switch(_assetTransType)
        {
            case RAssetTransType::Acquisition:
                this.createLedgerJournalTable(ledgerJournalTableAcquisition, assetInventIssueTable.NameJournalAcquisition);
                break;

            case RAssetTransType::Depreciation:
                this.createLedgerJournalTable(ledgerJournalTableDepreciation, assetInventIssueTable.NameJournalDepreciation);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption(journalCheckPostType == JournalCheckPostType::Post ?
                       strFmt("@GLS113989", assetInventIssueTable.JournalId) :
                       strFmt("@SYS62637", assetInventIssueTable.JournalId));
        if (journalCheckPostType == JournalCheckPostType::Post)
            dlgPost  = dialog.addFieldValue(extendedTypeStr(NoYesId), post, "@SYS6098", "@GLS220497");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(str _info)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_info);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parameter values from the dialog form.
    /// </summary>
    /// <returns>
    /// true if the super method call returns true; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret && dlgPost)
        {
            post = dlgPost.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetInventIssueTable _assetInventIssueTable)
    {
        assetInventIssueTable = _assetInventIssueTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalCheckPostType</Name>
				<Source><![CDATA[
    public JournalCheckPostType parmJournalCheckPostType(JournalCheckPostType _journalCheckPostType = journalCheckPostType)
    {
        ;
        journalCheckPostType = _journalCheckPostType;
        return journalCheckPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPost</Name>
				<Source><![CDATA[
    public NoYes parmPost(NoYes _post = post)
    {
        post = _post;
        return post;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAssetJournal</Name>
				<Source><![CDATA[
    protected void postAssetJournal(RAssetTransType _assetTransType = RAssetTransType::Acquisition)
    {
        LedgerJournalTrans     ledgerJournalTrans;

        void post(LedgerJournalTable _ledgerJournalTable)
        {
            LedgerJournalCheckPost checkPost = LedgerJournalCheckPost::newLedgerJournalTable(_ledgerJournalTable, NoYes::Yes);

            LedgerJournalCheckPost::processOperation(checkPost);
        }

        switch(_assetTransType)
        {
            case RAssetTransType::Acquisition:

                if (ledgerJournalTableAcquisition)
                {
                    setPrefix(strFmt("@SYS26910", ledgerJournalTableAcquisition.JournalNum));
                    post(ledgerJournalTableAcquisition);
                }
                this.displayProgress(strFmt("@SYS26910", ledgerJournalTableAcquisition.JournalNum));
                break;

            case RAssetTransType::Depreciation:

                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == ledgerJournalTableDepreciation.JournalNum;

                if (ledgerJournalTableDepreciation && ledgerJournalTrans)
                {
                    setPrefix(strFmt("@SYS26910", ledgerJournalTableDepreciation.JournalNum));
                    post(ledgerJournalTableDepreciation);
                }
                else
                {
                    if (ledgerJournalTableDepreciation)
                    {
                        ledgerJournalTableDepreciation.delete();
                        ledgerJournalTableDepreciation = null;
                    }
                }

                this.displayProgress(strFmt("@SYS26910", ledgerJournalTableDepreciation.JournalNum));
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotalCountCalc</Name>
				<Source><![CDATA[
    private int progressTotalCountCalc()
    {
        int     ret;
        int64   linesCount;
        int64   groupLinesCount;

        #define.journalCount(2)

        linesCount      = assetInventIssueTable.linesCount();

        groupLinesCount = (select count(RecId) from rAssetInventIssueTrans
                                group by EmployeeTable_RU, QuotaTypesRecId, ItemId
                                where rAssetInventIssueTrans.InventIssueTableRecId == assetInventIssueTable.RecId).RecId;

        ret = int642int(linesCount + groupLinesCount);

        if (journalCheckPostType == JournalCheckPostType::Post)
        {
            if (! queryRun)
            {
                queryRun = new QueryRun(this.query());
            }

            ret += SysQuery::countTotal(queryRun) + #journalCount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                query           = new Query();
        QueryBuildDataSource queryDataSource = query.addDataSource(tableNum(RAssetInventIssueTable));
        ;

        queryDataSource.addRange(fieldNum(RAssetInventIssueTable, RecId)).value(queryValue(assetInventIssueTable.RecId));
        queryDataSource = queryDataSource.addDataSource(tableNum(RAssetInventIssueTrans));

        queryDataSource.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetInventIssueTrans           assetInventIssueTrans;
        LedgerJournalTrans               ledgerJournalTrans;
        Integer                          idx;
        Counter                          progressTotal;

        #macrolib.AviFiles
        #OCCRetryCount

        if (assetInventIssueTable.Posted)
        {
            info(strFmt("@SYS25365", assetInventIssueTable.JournalId));
            return;
        }

        setPrefix(strFmt("@SYS26909", assetInventIssueTable.JournalId));

        progressTotal = this.progressTotalCountCalc();

        this.progressInit("@GLS116527", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        if (this.checkJournalTrans())
        {
            info("@SYS17146");
        }
        else
        {
            throw error("@SYS79625");
        }

        if (journalCheckPostType != JournalCheckPostType::Post)
        {
            return;
        }

        setPrefix(strFmt("@GLS113910", assetInventIssueTable.JournalId));

        try
        {
            ttsbegin;

            if (! queryRun)
            {
                queryRun = new QueryRun(this.query());
            }

            while (queryRun.next())
            {
                assetInventIssueTrans = queryRun.get(tableNum(RAssetInventIssueTrans));

                for (idx = 1; idx <= assetInventIssueTrans.Qty; idx++)
                {
                    this.createAsset(assetInventIssueTrans);
                }

                this.displayProgress(strFmt("@GLS113911", assetInventIssueTrans.ItemId));
            }

            if (post)
                this.postAssetJournal(RAssetTransType::Acquisition);

            while select ledgerJournalTrans
                group by LedgerDimension, AccountType
                where ledgerJournalTrans.JournalNum == ledgerJournalTableAcquisition.JournalNum
            {
                this.createAssetJournal(ledgerJournalTrans.parmAccount(),
                                        nextMth(assetInventIssueTable.TransDate),
                                        RAssetTransType::Depreciation);
            }

            if (post)
                this.postAssetJournal(RAssetTransType::Depreciation);

            this.updateAssetInventIssueTable(assetInventIssueTable);

            info("@SYS5815");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error("@SYS79625");
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                error("@SYS79625");
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            error("@SYS79625");
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetInventIssueTable</Name>
				<Source><![CDATA[
    protected void updateAssetInventIssueTable(RAssetInventIssueTable _assetInventIssueTable)
    {
        _assetInventIssueTable.selectForUpdate(true);

        _assetInventIssueTable.Posted       = NoYes::Yes;

        if (ledgerJournalTableAcquisition)
        {
            _assetInventIssueTable.LedgerJournalNumAcquisition  = ledgerJournalTableAcquisition.JournalNum;
        }
        if (ledgerJournalTableDepreciation)
        {
            _assetInventIssueTable.LedgerJournalNumDepreciation = ledgerJournalTableDepreciation.JournalNum;
        }
        _assetInventIssueTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetInventIssueCheckPost  assetCheckPost = new RAssetInventIssueCheckPost();
        RAssetInventIssueTable      assetInventIssueTable;
        ;

        assetInventIssueTable = _args.record();

        assetCheckPost.initValue(assetInventIssueTable);
        assetCheckPost.parmJournalCheckPostType(_args.parmEnum());
        if (assetCheckPost.prompt())
        {
            assetCheckPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>