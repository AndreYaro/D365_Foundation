<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateCorrectionCustom_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureJourCreateCorrectionCustom_RU extends FactureJourCreateCustom_RU implements BatchRetryable
{
    CustomCorrectionTable_RU    customCorrectionTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        FromDate        periodStart;
        ToDate          periodEnd;
        FactureJour_RU  factureJourOrig = FactureJour_RU::find(customJournalTable.FactureId, FactureModule_RU::Vend);

        super();

        if (factureJourOrig)
        {
            [periodStart, periodEnd] = BookDataCalc_RU::datePeriodBook(factureJourOrig.FactureReportDate);

            factureJour.CorrectedFactureExternalId  = factureJourOrig.FactureExternalId;
            factureJour.CorrectedFactureDate        = factureJourOrig.FactureDate;
            factureJour.CorrectedPeriod             = periodEnd;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    void parmJournalTable(Common _journalTable)
    {
        customCorrectionTable = _journalTable;
        customJournalTable    = CustomJournalTable_RU::find(customCorrectionTable.JournalId);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>