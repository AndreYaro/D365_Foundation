<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEnum2EnumMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEnum2EnumMapping</c> class maps enums to enums.
/// </summary>
public abstract class CostEnum2EnumMapping
{
    private Map     keyValue;
    anytype         defaultValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map.
    /// </summary>
    protected abstract void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        keyValue = new Map(Types::Enum, Types::Enum);
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a key and value pair into the mapping.
    /// </summary>
    /// <param name = "_key">
    /// The key to add.
    /// </param>
    /// <param name = "_value">
    /// The value to add.
    /// </param>
    protected void add(anytype _key, anytype _value)
    {
        if ((typeOf(_key) != Types::Enum) || typeOf(_value) != Types::Enum)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        keyValue.insert(_key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum value associated with the specified enum key.
    /// </summary>
    /// <param name = "_key">
    /// The key of the value to get.
    /// </param>
    /// <returns>
    /// The value associated with the specified key.
    /// </returns>
    public final int getValue(int _key)
    {
        if (keyValue.exists(_key))
        {
            return keyValue.lookup(_key);
        }
        else
        {
            return defaultValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComparisionExpressionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a comparison expression map.
    /// </summary>
    /// <returns>
    /// A comparison expression map.
    /// </returns>
    public final Map getComparisionExpressionMap()
    {
        var comparisionExpressionMap = SysComputedColumn::comparisionExpressionMap();
        var enumerator = keyValue.getEnumerator();
        while (enumerator.moveNext())
        {
            comparisionExpressionMap.insert(SysComputedColumn::comparisonLiteral(enumerator.currentKey()), SysComputedColumn::comparisonLiteral(enumerator.currentValue()));
        }

        return comparisionExpressionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default value.
    /// </summary>
    /// <returns>
    /// The default value.
    /// </returns>
    public final int getDefaultValue()
    {
        return defaultValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>