<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLockedOrderHandlingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSLockedOrderHandlingContext</c> class is used to control a context in which orders are skipped if a lock cannot be obtained, i.e. they are locked by another process.
/// </summary>
internal class WHSLockedOrderHandlingContext implements System.IDisposable
{
    private static WHSLockedOrderHandlingContext instance;

    internal WHSLockedOrderHandling lockedOrderHandling;
    internal boolean skipOccurred;
    internal int numberOfSkippedOrders;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize(WHSLockedOrderHandling _userRequestedLockedOrderHandling)
    {
        if (_userRequestedLockedOrderHandling == WHSLockedOrderHandling::SkipLockedOrders &&
            appl.ttsLevel() == 0)
        {
            lockedOrderHandling = WHSLockedOrderHandling::SkipLockedOrders;
        }
        else
        {
            lockedOrderHandling = WHSLockedOrderHandling::WaitForLockedOrders;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    internal void reset()
    {
        numberOfSkippedOrders++;
        skipOccurred = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal WHSLockedOrderHandlingContext instance()
    {
        if (!instance)
        {
            instance = new WHSLockedOrderHandlingContext();
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>