<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgFlex</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgFlex</c> class handles calculation of the flex balances of a worker.
/// </summary>
public class JmgFlex extends RunBase
{
    container   externEmplIds;
    boolean     runNoDialog;
    QueryRun    queryRun;
    container   packedQuery;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        packedQuery
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedQuery = queryRun.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class can run as a batch job.
    /// </summary>
    /// <returns>
    ///    true if the class can run as a batch job; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query, which determines which workers to calculate flex balance for.
    /// </summary>
    public void initQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        int                     i;
        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(JmgEmployee));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(JmgEmployee,Active));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(JmgEmployee,FlexProfile));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(JmgEmployee,Worker));
        if (externEmplIds)
        {
            for (i = 1; i <= conLen(externEmplIds); i++)
            {
                queryBuildRange.value(queryRangeConcat(queryBuildRange.value(), conPeek(externEmplIds, i)));
            }
            queryBuildRange.status(RangeStatus::Locked);
        }
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgFlex</c> class.
    /// </summary>
    /// <param name="runNoDialogIn">
    ///    true if the <c>JmgFlex</c> class is run without prompting the user; otherwise, false.
    /// </param>
    void new(boolean runNoDialogIn = false)
    {
        super();
        runNoDialog = runNoDialogIn;
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JmgEmployee             jmgEmployee;
        int                     counter;

        this.progressInit(JmgFlex::description(), SysQuery::countLoops(queryRun), #AviUpdate);

        ttsbegin;

        while (queryRun.next())
        {
            jmgEmployee = queryRun.get(tableNum(JmgEmployee));
            setPrefix(#PreFixField(jmgEmployee, Worker));
            progress.setText(HcmWorker::worker2Name(jmgEmployee.Worker));
            JmgFlex::sumEmployee(jmgEmployee);
            counter++;
            progress.setCount(counter);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternEmplIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workers for whom the flex balance must be calculated.
    /// </summary>
    /// <param name="_emplIds">
    ///    A container that has worker IDs.
    /// </param>
    /// <remarks>
    ///    If workers are specified using this method, the user will not be shown a query prompt upon
    ///    execution.
    /// </remarks>
    private void setExternEmplIds(container _emplIds)
    {
        externEmplIds = _emplIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Select button is visible on the dialog.
    /// </summary>
    /// <returns>
    ///    true if the select button must be visible; otherwise, false.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class instance is valid.
    /// </summary>
    /// <param name="calledFrom">
    ///    A reference to the calling object.
    /// </param>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    boolean validate(Object calledFrom = null)
    {
        boolean    ok = true;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAutomaticFlexCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates automatic flex corrections for a specified worker in a given time frame.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A reference to the worker to create flex corrections for.
    /// </param>
    /// <param name="_dateFrom">
    ///    The start date of the time period for which to create flex corrections.
    /// </param>
    /// <param name="_dateTo">
    ///    The end date of the time period for which to create flex corrections.
    /// </param>
    /// <remarks>
    ///    Automatic flex corrections are calculated based on the settings in the flex group, which is
    ///    assigned to the worker.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Any not-transferred registrations exist for the user in the given date interval.
    /// </exception>
    public static void createAutomaticFlexCorrections(JmgEmployee _jmgEmployee, JmgDate _dateFrom, JmgDate _dateTo)
    {
        JmgStampJournalTable    jmgStampJournalTable;
        JmgFlexGroup            jmgFlexGroup;
        JmgFlexCorrection       jmgFlexCorrection;

        JmgFlexCorrection::deleteAutomaticCorrections(_jmgEmployee, _dateFrom, _dateTo);

        // Find the last transferred date in JmgStampJournalTable within payroll period
        // and insert correction if necessary
        ttsbegin;
        select firstonly jmgStampJournalTable
            order by ProfileDate desc
            where (jmgStampJournalTable.ProfileDate >= _dateFrom) &&
                  (jmgStampJournalTable.ProfileDate <= _dateTo) &&
                  (jmgStampJournalTable.Worker == _jmgEmployee.Worker) &&
                  jmgStampJournalTable.Transferred;

        if (jmgStampJournalTable    && _jmgEmployee.FlexProfile == NoYes::Yes)
        {
            jmgFlexGroup = JmgFlexGroup::find(_jmgEmployee.FlexGroup);
            if (_jmgEmployee.FlexProfile &&
                jmgFlexGroup.AdjustFlexMaximum &&
                (jmgStampJournalTable.PayFlexBalanceSeconds > jmgFlexGroup.MaximumFlexBalanceSeconds))
            {
                // Insert max correction
                jmgFlexCorrection.initValue();
                jmgFlexCorrection.Worker                = _jmgEmployee.Worker;
                jmgFlexCorrection.Date                  = jmgStampJournalTable.ProfileDate;
                jmgFlexCorrection.Description           = "@SYS39535";
                jmgFlexCorrection.PayCostType           = jmgFlexGroup.MaximumPayType;
                jmgFlexCorrection.PayTransferred        = NoYes::No;
                jmgFlexCorrection.Seconds               = jmgFlexGroup.MaximumFlexBalanceSeconds - jmgStampJournalTable.PayFlexBalanceSeconds;
                jmgFlexCorrection.PayQty                = jmgFlexGroup.MaximumPayUnits * jmgFlexCorrection.Seconds / 3600;
                jmgFlexCorrection.AutomaticCorrection   = NoYes::Yes;
                jmgFlexCorrection.insert();
                info(strFmt("@SYS98223", JmgProfileSeconds::formattedSeconds(jmgFlexCorrection.Seconds, JmgSecondPresentationEnum::Centitime), HcmWorker::find(_jmgEmployee.Worker).PersonnelNumber));

                // Update the flex balance:
                JmgFlex::sumEmployee(_jmgEmployee, jmgStampJournalTable.ProfileDate);
            }
            else if (_jmgEmployee.FlexProfile &&
                jmgFlexGroup.AdjustFlexMinimum &&
                (jmgStampJournalTable.PayFlexBalanceSeconds < jmgFlexGroup.MinimumFlexBalanceSeconds))
            {
                // Insert min correction
                jmgFlexCorrection.initValue();
                jmgFlexCorrection.Worker                = _jmgEmployee.Worker;
                jmgFlexCorrection.Date                  = jmgStampJournalTable.ProfileDate;
                jmgFlexCorrection.Description           = "@SYS39534";
                jmgFlexCorrection.PayCostType           = jmgFlexGroup.MinimumPayType;
                jmgFlexCorrection.PayTransferred        = NoYes::No;
                jmgFlexCorrection.Seconds               = jmgFlexGroup.MinimumFlexBalanceSeconds - jmgStampJournalTable.PayFlexBalanceSeconds;
                jmgFlexCorrection.PayQty                = jmgFlexGroup.MinimumPayUnits * jmgFlexCorrection.Seconds / 3600;
                jmgFlexCorrection.AutomaticCorrection   = NoYes::Yes;
                jmgFlexCorrection.insert();
                info(strFmt("@SYS98223", JmgProfileSeconds::formattedSeconds(jmgFlexCorrection.Seconds, JmgSecondPresentationEnum::Centitime), HcmWorker::find(_jmgEmployee.Worker).PersonnelNumber));

                // Update the flex balance:
                JmgFlex::sumEmployee(_jmgEmployee, jmgStampJournalTable.ProfileDate);
            }
        }
        else if (_jmgEmployee.FlexProfile   == NoYes::Yes)
        {
            jmgFlexGroup = JmgFlexGroup::find(_jmgEmployee.FlexGroup);
            // Warning, if employee has flex profile, but no where to create flex correction
            if (jmgFlexGroup.AdjustFlexMaximum || jmgFlexGroup.AdjustFlexMinimum)
            {
               warning(strFmt("@SYS98225", HcmWorker::find(_jmgEmployee.Worker).PersonnelNumber, date2StrUsr(_dateTo, DateFlags::FormatAll)));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38534";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        JmgFlex         jmgFlex;
        JmgEmployee     jmgEmployee;
        HcmWorker       hcmWorker;
        FormRun         caller;
        FormDataSource  fds;
        container       externEmplIds;
        jmgFlex = new JmgFlex();

        if (_args.dataset() == tableNum(JmgEmployee))
        {
            jmgEmployee = _args.record();
            jmgFlex.setExternEmplIds([jmgEmployee.Worker]);
            jmgFlex.initQuery();
        }
        else
        {
            caller = _args.caller();
            externEmplIds = conNull();
            if (caller 
                && (caller.name() == formStr(HcmWorker) || caller.name() == formStr(HcmWorkerV2)))
            {
                fds         = FormDataUtil::getFormDataSource(_args.record());
                hcmWorker   = fds.getFirst(true);
                if (!hcmWorker)
                {
                    hcmWorker = _args.record();
                }

                while (hcmWorker)
                {
                    externEmplIds   += [hcmWorker.RecId];
                    hcmWorker       = fds.getNext();
                }
                jmgFlex.setExternEmplIds(externEmplIds);
                jmgFlex.initQuery();
            }
        }

        if (jmgFlex.prompt())
        {
            jmgFlex.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the flex balance for the specified worker.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    A reference to the worker for which to update the flex balance.
    /// </param>
    /// <param name="_flexCalcDate">
    ///    The date from when calculation of flex balance is started.
    /// </param>
    /// <remarks>
    ///    If the parameter is not specified, then the flex balance is calculated from the first registration
    ///    made by the worker.
    /// </remarks>
    static void sumEmployee(JmgEmployee _jmgEmployee, JmgProfileDate _flexCalcDate = dateNull())
    {
        JmgStampJournalTable    jmgStampJournalTable;
        JmgSeconds              balance;
        JmgFlexGroup            jmgFlexGroup;
        JmgProfileDate          flexCalcDate;

        ttsbegin;
        flexCalcDate = _flexCalcDate;

        if (flexCalcDate != dateNull())
        {
            flexCalcDate = (select maxof(ProfileDate) from jmgStampJournalTable
                                where jmgStampJournalTable.Worker       == _jmgEmployee.Worker  &&
                                      jmgStampJournalTable.Transferred  == NoYes::Yes           &&
                                      jmgStampJournalTable.Approved     == NoYes::Yes           &&
                                      jmgStampJournalTable.Calculated   == NoYes::Yes           &&
                                      jmgStampJournalTable.ProfileDate  <  flexCalcDate).ProfileDate;

            select PayFlexBalanceSeconds from jmgStampJournalTable
                where jmgStampJournalTable.Worker       == _jmgEmployee.Worker  &&
                      jmgStampJournalTable.Transferred  == NoYes::Yes           &&
                      jmgStampJournalTable.Approved     == NoYes::Yes           &&
                      jmgStampJournalTable.Calculated   == NoYes::Yes           &&
                      jmgStampJournalTable.ProfileDate  == flexCalcDate;

            if (jmgStampJournalTable)
            {
                balance = jmgStampJournalTable.PayFlexBalanceSeconds;
            }
            else
            {
                balance = _jmgEmployee.OpeningFlexBalanceSeconds;
            }
        }
        else
        {
            balance = _jmgEmployee.OpeningFlexBalanceSeconds;
        }

        jmgFlexGroup = JmgFlexGroup::find(_jmgEmployee.FlexGroup);
        if (jmgFlexGroup.CalculateFlexFromPayTypes      == NoYes::Yes)
        {
            JmgFlex::sumEmployeePayTypes(_jmgEmployee, jmgFlexGroup, flexCalcDate, balance);
        }
        else
        {
            while select forupdate PayFlexAddSeconds, PayFlexSubSeconds, PayFlexCorrectionSeconds, PayFlexBalanceSeconds,
                                   Worker, ProfileDate, Transferred from jmgStampJournalTable
                order by ProfileDate
                where jmgStampJournalTable.Worker       == _jmgEmployee.Worker  &&
                      jmgStampJournalTable.Approved     == NoYes::Yes           &&
                      jmgStampJournalTable.Calculated   == NoYes::Yes           &&
                      jmgStampJournalTable.ProfileDate  >  flexCalcDate
            {
                if (jmgStampJournalTable.Transferred)
                {
                    jmgStampJournalTable.PayFlexCorrectionSeconds = (select sum(Seconds) from jmgFlexCorrection
                                                                         where jmgFlexCorrection.Worker == jmgStampJournalTable.Worker &&
                                                                               jmgFlexCorrection.Date   == jmgStampJournalTable.ProfileDate).Seconds;

                    balance += jmgStampJournalTable.PayFlexAddSeconds - jmgStampJournalTable.PayFlexSubSeconds + jmgStampJournalTable.PayFlexCorrectionSeconds;
                }
                jmgStampJournalTable.PayFlexBalanceSeconds = balance;
                jmgStampJournalTable.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumEmployeePayTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a workers flex balance based on pay types.
    /// </summary>
    /// <param name="_jmgEmployee">
    ///    The worker for which to update flex balance.
    /// </param>
    /// <param name="_jmgFlexGroup">
    ///    The flex group to which the worker belongs.
    /// </param>
    /// <param name="_startBalanceDate">
    ///    The date of the starting balance.
    /// </param>
    /// <param name="_startingBalance">
    ///    The flex balance as of the specified start date.
    /// </param>
    private static void sumEmployeePayTypes(JmgEmployee _jmgEmployee, JmgFlexGroup _jmgFlexGroup, JmgProfileDate _startBalanceDate, JmgSeconds _startingBalance)
    {
        JmgStampJournalTable    jmgStampJournalTable;
        JmgPayEvents            jmgPayEvents;
        JmgSeconds              flexCorrectionSub;
        JmgSeconds              flexCorrectionAdd;
        JmgSeconds              startingBalance;
        startingBalance = _startingBalance;

        while select forupdate jmgStampJournalTable
            order by ProfileDate asc
            where jmgStampJournalTable.Worker       == _jmgEmployee.Worker  &&
                  jmgStampJournalTable.ProfileDate  >  _startBalanceDate    &&
                  jmgStampJournalTable.Calculated   == NoYes::Yes           &&
                  jmgStampJournalTable.Approved     == NoYes::Yes           &&
                  jmgStampJournalTable.Transferred  == NoYes::Yes
        {
            if (_jmgFlexGroup.FlexAddPayType != _jmgFlexGroup.FlexSubPayType)
            {
                // Get flex-
                jmgStampJournalTable.PayFlexSubSeconds = JmgFlex::getPayFlexSubSeconds_BaseOnPayTypes_FlexAddNotEqualFlexSub(_jmgFlexGroup.FlexSubPayType, 
                                                                                                jmgStampJournalTable.ProfileDate, jmgStampJournalTable.Worker);

                // Get flex+
                select sum(PaySeconds)
                    from  jmgPayEvents
                    where jmgPayEvents.PayCostType      == _jmgFlexGroup.FlexAddPayType         &&
                          jmgPayEvents.ProfileDate      == jmgStampJournalTable.ProfileDate     &&
                          jmgPayEvents.Worker           == jmgStampJournalTable.Worker;
                jmgStampJournalTable.PayFlexAddSeconds  =  jmgPayEvents.PaySeconds;
            }
            else
            {
                // Get flex-
                select sum(PaySeconds)
                    from  jmgPayEvents
                    where jmgPayEvents.PayCostType      == _jmgFlexGroup.FlexSubPayType         &&
                          jmgPayEvents.ProfileDate      == jmgStampJournalTable.ProfileDate     &&
                          jmgPayEvents.Worker           == jmgStampJournalTable.Worker          &&
                          jmgPayEvents.PaySeconds       < 0;
                jmgStampJournalTable.PayFlexSubSeconds  = -jmgPayEvents.PaySeconds;

                // Get flex+
                select sum(PaySeconds)
                    from  jmgPayEvents
                    where jmgPayEvents.PayCostType      == _jmgFlexGroup.FlexAddPayType         &&
                          jmgPayEvents.ProfileDate      == jmgStampJournalTable.ProfileDate     &&
                          jmgPayEvents.Worker           == jmgStampJournalTable.Worker          &&
                          jmgPayEvents.PaySeconds       > 0;
                jmgStampJournalTable.PayFlexAddSeconds  = jmgPayEvents.PaySeconds;
            }
            // Get flex corrections
            flexCorrectionSub                       = (select sum(Seconds) from jmgFlexCorrection
                                                          where jmgFlexCorrection.Worker    == jmgStampJournalTable.Worker         &&
                                                                jmgFlexCorrection.Date      == jmgStampJournalTable.ProfileDate    &&
                                                                jmgFlexCorrection.Seconds   < 0).Seconds;

            flexCorrectionAdd                       = (select sum(Seconds) from jmgFlexCorrection
                                                          where jmgFlexCorrection.Worker    == jmgStampJournalTable.Worker         &&
                                                                jmgFlexCorrection.Date      == jmgStampJournalTable.ProfileDate    &&
                                                                jmgFlexCorrection.Seconds   >  0).Seconds;

            // Flex corrections are already included in Flex+ and flex- as they are included in pay events. Deduct them to get the correct results.
            jmgStampJournalTable.PayFlexCorrectionSeconds   = flexCorrectionAdd + flexCorrectionSub;

            if (jmgStampJournalTable.PayFlexAddSeconds)
            {
                jmgStampJournalTable.PayFlexAddSeconds     -= flexCorrectionAdd;
            }

            if (jmgStampJournalTable.PayFlexSubSeconds)
            {
                jmgStampJournalTable.PayFlexSubSeconds     += flexCorrectionSub;
            }

            jmgStampJournalTable.PayFlexBalanceSeconds     = startingBalance + jmgStampJournalTable.PayFlexAddSeconds - jmgStampJournalTable.PayFlexSubSeconds + jmgStampJournalTable.PayFlexCorrectionSeconds;
            jmgStampJournalTable.update();

            startingBalance = jmgStampJournalTable.PayFlexBalanceSeconds;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayFlexSubSeconds_BaseOnPayTypes_FlexAddNotEqualFlexSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Flex- for worker on the particular profile date.
    /// Use only for workers who have Flex Group with enabled "Based on pay types" and Flex- is not equal to Flex+ flex balance.
    /// </summary>
    /// <param name = "_flexSubPayType"> The Flex- pay type from the flex group to which the worker belongs. </param>
    /// <param name = "_profileDate"> The date of profile. </param>
    /// <param name = "_workerId"> The worker for which to update flex balance.</param>
    /// <returns> The Flex- for worker in this profile date. </returns>
    /// <remark> This methids returns Flex- including corrections. </remark>
    private static JmgSeconds getPayFlexSubSeconds_BaseOnPayTypes_FlexAddNotEqualFlexSub(JmgPayCostType _flexSubPayType, date _profileDate, JmgWorkerRecId _workerId)
    {
        JmgPayEvents jmgPayEvents;
        JmgSeconds   flexSubSeconds = 0;

        select sum(PaySeconds)
                    from  jmgPayEvents
                    where jmgPayEvents.PayCostType      == _flexSubPayType  &&
                          jmgPayEvents.ProfileDate      == _profileDate     &&
                          jmgPayEvents.Worker           == _workerId        &&
                          jmgPayEvents.PaySeconds       > 0;
        flexSubSeconds  = jmgPayEvents.PaySeconds;

        select sum(PaySeconds)
                    from  jmgPayEvents
                    where jmgPayEvents.PayCostType      == _flexSubPayType  &&
                          jmgPayEvents.ProfileDate      == _profileDate     &&
                          jmgPayEvents.Worker           == _workerId        &&
                          jmgPayEvents.PaySeconds       < 0;
        flexSubSeconds  += -jmgPayEvents.PaySeconds;

        return flexSubSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>