<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBInventoryBookModel7DP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBInventoryBookModel7DP_BR</c> class is the Report Data Provider class for the
/// <c>FBInventoryBookModel7_BR</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBHeaderContract_BR))]
public class FBInventoryBookModel7DP_BR extends SRSReportDataProviderBase
{
    TmpFBInventoryBookModel7_BR tmpFBInventoryBookModel7;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        FBHeaderContract_BR     contract = this.parmDataContract() as FBHeaderContract_BR;
        FBBookingPeriod_BR      fbBookingPeriod = FBBookingPeriod_BR::find(contract.parmFBBookingPeriodRecId());

        query = new Query();

        qbds = query.addDataSource(tableNum(InventTable));
        qbds.addGroupByField(fieldNum(InventTable, TaxFiscalClassification_BR));
        qbds.addGroupByField(fieldNum(InventTable, NameAlias));
        qbds.addGroupByField(fieldNum(InventTable, ItemId));
        qbds.addOrderByField(fieldNum(InventTable, TaxFiscalClassification_BR));
        qbds.addOrderByField(fieldNum(InventTable, ItemId));
        qbds.addRange(fieldNum(InventTable, ItemType)).value(SysQuery::valueNot(ItemType::Service));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFBInvetoryBookModel7</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBInventoryBookModel7_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBInventoryBookModel7_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmpFBInventoryBookModel7_BR))]
    public TmpFBInventoryBookModel7_BR getTmpFBInvetoryBookModel7()
    {
        select tmpFBInventoryBookModel7;
        return tmpFBInventoryBookModel7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpFBInventoryBookModel7</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>tmpFBInventoryBookModel7_BR</c>
    /// </summary>
    private void insertTmpFBInventoryBookModel7()
    {
        tmpFBInventoryBookModel7.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        InventTable                     inventTable;
        Query                           query;
        QueryRun                        queryRun;
        TaxFiscalClassificationId_BR    taxFiscalClassification;
        Qty                             qty;
        CostAmount                      partialValue, totalAmount;
        FBBookingPeriod_BR              bookingPeriod;
        FiscalEstablishment_BR          fiscalEstablishment;
        FBInventoryCalculator_BR        inventoryCalculator;

        FBHeaderContract_BR             contract = this.parmDataContract() as FBHeaderContract_BR;

        bookingPeriod = FBBookingPeriod_BR::find(contract.parmFBBookingPeriodRecId());

        changeCompany (bookingPeriod.FiscalEstablishmentDataArea)
        {
            select firstOnly crossCompany  RecId from fiscalEstablishment
                where fiscalEstablishment.FiscalEstablishmentId == contract.parmFiscalEstablishmentId();

            inventoryCalculator = new FBInventoryCalculator_BR(fiscalEstablishment.RecId);

            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                inventTable = queryRun.get(tableNum(InventTable)) as InventTable;

                tmpFBInventoryBookModel7.NCMCode            = inventTable.TaxFiscalClassification_BR;
                tmpFBInventoryBookModel7.Description        = inventTable.NameAlias;
                tmpFBInventoryBookModel7.Unit               = inventTable.inventTableModuleInvent().UnitId;

                inventoryCalculator.calculateInventoryBalancesForItem(bookingPeriod.periodTo(), inventTable);

                qty             = inventoryCalculator.getQty();
                partialValue    = inventoryCalculator.getValue();

                tmpFBInventoryBookModel7.Quantity           = qty;
                tmpFBInventoryBookModel7.PartialValue       = partialValue;

                tmpFBInventoryBookModel7.UnitaryValue       = inventoryCalculator.getUnitprice();

                if (taxFiscalClassification == inventTable.TaxFiscalClassification_BR)
                {
                    if (qty > 0)
                    {
                        totalAmount += partialValue;
                    }

                    tmpFBInventoryBookModel7.TotalValue = totalAmount;
                }
                else
                {
                    taxFiscalClassification = inventTable.TaxFiscalClassification_BR;

                    if (qty > 0)
                    {
                        totalAmount = partialValue;
                    }
                    else
                    {
                        totalAmount = 0;
                    }

                    tmpFBInventoryBookModel7.TotalValue = totalAmount;
                }

                this.insertTmpFBInventoryBookModel7();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>