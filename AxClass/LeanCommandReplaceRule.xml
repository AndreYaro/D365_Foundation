<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandReplaceRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCommandReplaceRule</c> class encapsulates the business logic around the
/// creation of a replenishment rule.
/// </summary>
class LeanCommandReplaceRule extends LeanCommandBase
{
    LeanRuleData    originalRuleData;
    LeanRuleData    newRuleData;
    boolean         rereadRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule replacement logic.
    /// </summary>
    /// <returns>
    ///    true if the replacement was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed within a transaction scope provided by the <c>LeanRulesEngine</c> table.
    /// </remarks>
    protected boolean execute()
    {
        boolean                 result = true;
        LegalEntity             legalEntity = CompanyInfo::current();

        // if we need to reread the buffers, do so
        // (rereading is necessary in case the rules that are affected here
        //  have been modified as part of another command along the way)
        if (rereadRuleData)
        {
            originalRuleData    = originalRuleData.parmKanbanRule().ruleData();
            newRuleData         = newRuleData.parmKanbanRule().ruleData();
        }

        LeanCoverageKanbanRule oldLeanCoverageKanbanRule = originalRuleData.parmLeanCoverageKanbanRule();
        LeanCoverageKanbanRule newLeanCoverageKanbanRule = newRuleData.parmLeanCoverageKanbanRule();

        KanbanFlow oldKanbanFlow = originalRuleData.kanbanFlow();
        KanbanFlow newKanbanFlow = newRuleData.kanbanFlow();

        KanbanRule oldKanbanRule = originalRuleData.parmKanbanRule();
        KanbanRule newKanbanRule = newRuleData.parmKanbanRule();

        if (   oldKanbanRule.LegalEntity != legalEntity
            || newKanbanRule.LegalEntity != legalEntity)
        {
            result = checkFailed(strfmt("@SYS332730",oldKanbanRule.RuleId));
        }

        if (result)
        {
            PlanActivityLocation oldLastPlanActivityLocation = oldKanbanFlow.lastPlanActivity().receiptLocation();
            PlanActivityLocation newLastPlanActivityLocation = newKanbanFlow.lastPlanActivity().receiptLocation();

            // a rule that's already part of a replacement chain (but not as a last element),
            // then it cannot be replaced again
            if (oldKanbanRule.ReplacingKanbanRule ||
                LeanCoverageKanbanRule::isRulePartOfReplacementChain(oldKanbanRule.RecId, false))
            {
                // The rule %1 cannot be replaced because %2
                // it is already part of a replacement chain
                error(strfmt("@SYS133812", oldKanbanRule.RuleId, "@SYS133813"));
                result = false;
            }

            // a replacing and replaced rule should share the same LeanCoverage records, should have
            // the same destination coverage, ReplenishmentStrategy, KanbanType and last activity's receipt location
            if (oldLeanCoverageKanbanRule.Coverage      != newLeanCoverageKanbanRule.Coverage
                || oldKanbanRule.ReplenishmentStrategy  != newKanbanRule.ReplenishmentStrategy
                || oldKanbanRule.KanbanType             != newKanbanRule.KanbanType
                || !oldLastPlanActivityLocation.compare(newLastPlanActivityLocation))
            {
                error(strfmt("@SYS133812", oldKanbanRule.RuleId, "@SYS136345"));
                result = false;
            }

            // make sure there's something to replace with
            if (!newKanbanRule.RecId)
            {
                // The rule %1 cannot be replaced because %2
                // the replacing rule doesn't exist
                error(strfmt("@SYS133812", oldKanbanRule.RuleId, "@SYS133814"));
                result = false;
            }

            if (result)
            {
                // get the old rule locked for update
                oldKanbanRule = KanbanRule::find(oldKanbanRule.RecId, true);

                // we always try to update the validity period of the replaced rule,
                // so we don't end up having time gaps

                // get the old rule's validity period record locked
                oldLeanCoverageKanbanRule = LeanCoverageKanbanRule::find(oldLeanCoverageKanbanRule.RecId, true);

                // set the new ValidTo period for the replaced rule and update the record
                oldLeanCoverageKanbanRule.ValidTo = LeanCommandReplaceRule::getReplacedRuleValidTo(newLeanCoverageKanbanRule);

                originalRuleData.initializeFromCommon(oldLeanCoverageKanbanRule);
                result = result && oldLeanCoverageKanbanRule.validateData(originalRuleData, true);

                if (result)
                {
                    oldLeanCoverageKanbanRule.update();
                }

                // set the replacing rule and update the record
                oldKanbanRule.ReplacingKanbanRule = newKanbanRule.RecId;
                result = result && oldKanbanRule.validateWrite();

                if (result)
                {
                    oldKanbanRule.update();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmNewRuleData(LeanRuleData _newRuleData = newRuleData)
    {
        newRuleData = _newRuleData;

        return newRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalRuleData</Name>
				<Source><![CDATA[
        public LeanRuleData parmOriginalRuleData(LeanRuleData _originalRuleData = originalRuleData)
    {
        originalRuleData = _originalRuleData;

        return originalRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRereadRuleData</Name>
				<Source><![CDATA[
        public boolean parmRereadRuleData(boolean _rereadRuleData = rereadRuleData)
    {
        rereadRuleData = _rereadRuleData;

        return rereadRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandReplaceRule construct()
    {
        return new LeanCommandReplaceRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplacedRuleValidTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a date that should be used as the <c>ValidTo</c> date of a replenishment rule.
    /// </summary>
    /// <param name="_newRuleLeanCoverageKanbanRule">
    ///    A buffer that contains the validity period of the replacing replenishment rule.
    /// </param>
    /// <returns>
    ///    The new <c>ValidTo</c> date of a replenishment rule.
    /// </returns>
    public static LeanRuleActiveDateTime getReplacedRuleValidTo(LeanCoverageKanbanRule _newRuleLeanCoverageKanbanRule)
    {
        return DateTimeUtil::addSeconds(_newRuleLeanCoverageKanbanRule.ValidFrom, -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>LeanCommandReplaceRule</c> class.
    /// </summary>
    /// <param name="_originalRuleData">
    /// An object containing the KanbanRule related buffers of the original rule.
    /// </param>
    /// <param name="_newRuleData">
    /// An object containing the KanbanRule related buffers of the rule to be replaced.
    /// </param>
    /// <param name="_rereadRuleData">
    /// Determines whether the rule buffers should be reread before replacement.
    /// </param>
    /// <returns>
    /// A LeanCommandReplaceRule instance.
    /// </returns>
    public static LeanCommandReplaceRule newStandard(LeanRuleData _originalRuleData, LeanRuleData _newRuleData, boolean _rereadRuleData = false)
    {
        LeanCommandReplaceRule leanCommandReplaceRule = LeanCommandReplaceRule::construct();

        leanCommandReplaceRule.parmOriginalRuleData(_originalRuleData);
        leanCommandReplaceRule.parmNewRuleData(_newRuleData);
        leanCommandReplaceRule.parmRereadRuleData(_rereadRuleData);

        return leanCommandReplaceRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
