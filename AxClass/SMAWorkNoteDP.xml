<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smaWorkNoteDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAWorkNoteDP</c> class is the report data provider class for the <c>SMAWorkNote</c> report.
/// </summary>
/// <remarks>
/// This is the RDP class for the SMAWorkNote SRS Report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(SMAWorkNote)),
    SRSReportParameterAttribute(classStr(SMAWorkNoteContract))
]
class smaWorkNoteDP extends SRSReportDataProviderBase
{
    CompanyInfo             companyInfo;
    CompanyCoRegNumShortTxt companyCoRegNum;
    Name                    companyName;
    Addressing              companyAddress;
    Phone                   companyPhone;
    TeleFax                 companyTelefax;
    VATNum                  companyVATNum;
    GiroNum                 companyGiro;
    InventDim               inventDim;
    SMAServiceOrderTable    serviceOrderTable;
    SMAServiceOrderLine     serviceHourTrans;
    SMAServiceOrderLine     serviceItemTrans;
    SMAServiceOrderLine     serviceExpenseFeeTrans;
    SalesLine               serviceSalesLine;
    SMAServiceTaskRelation  serviceTask;
    SMAServiceTaskRelation  serviceTaskAgreement;
    SMAWorkNoteTmp          smaWorkNoteTmp;
    SMAServiceOrderId       serviceOrderId;
    NoYes                   isSalesLine;
    NoYes                   additionalNotesVisibility;
    boolean                 printHeader;
    boolean                 expense;
    boolean                 fee;
    boolean                 additionalNotes;
    boolean                 itemConsumption;
    boolean                 taskNote;
    boolean                 lineText;
    boolean                 itemRequirement;
    boolean                 configId;
    boolean                 sizeId;
    boolean                 colorId;
    SMATransactionType      lastTransactionType;
    LogisticsAddressing     serviceAddress;
    LogisticsPostalAddress  logisticsPostalAddress;

    #define.ServiceHourTrans(1)
    #define.ServiceItemTrans(2)
    #define.ServiceExpenseFeeTrans(3)
    #define.ServiceSalesLine(4)
    #define.ServiceTask(5)
    #define.ServiceTaskAgreement(6)
    #define.ServiceItemTransDataSource('ServiceItemTrans')
    #define.ServiceSalesLineDataSource('ServiceSalesLine')
    #define.ServiceExpenseFeeTransDataSource('ServiceExpenseFeeTrans')
    #define.ServiceTaskDataSource('ServiceTask')
    #define.ServiceTaskAgreementDataSource('ServiceTaskAgreement')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSMAWorkNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>SMAWorkNoteTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SMAWorkNoteTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SMAWorkNoteTmp))
    ]
    public SMAWorkNoteTmp getSMAWorkNoteTmp()
    {
        select smaWorkNoteTmp;
        return smaWorkNoteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    /// <param name="_level">
    /// The level at which the data source is present in the query.
    /// </param>
    private void insertIntoTempTable(int _level)
    {
        this.initializeSmaWorkNoteTmp(_level);
        smaWorkNoteTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSmaWorkNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the temporary table record.
    /// </summary>
    /// <param name = "_level"> 
    /// The level at which the data source is present in the query.
    ///  </param>
    protected void initializeSmaWorkNoteTmp(int _level)
    {
        smaWorkNoteTmp.clear();
        smaWorkNoteTmp.CompanyName              = companyName;
        smaWorkNoteTmp.CompanyAddress           = companyAddress;
        smaWorkNoteTmp.CompanyPhone             = companyPhone;
        smaWorkNoteTmp.CompanyTelefax           = companyTelefax;
        smaWorkNoteTmp.CompanyGiro              = companyGiro;
        smaWorkNoteTmp.CompanyCoRegNum          = companyCoRegNum;
        smaWorkNoteTmp.CompanyVATNum            = companyVATNum;
        smaWorkNoteTmp.otProjId                 = serviceOrderTable.ProjId;
        smaWorkNoteTmp.otAgreementId            = serviceOrderTable.AgreementId;
        smaWorkNoteTmp.otServiceOrderId         = serviceOrderTable.ServiceOrderId;
        smaWorkNoteTmp.otContactPersonName      = ContactPerson::find(serviceOrderTable.ContactPersonId).personName();
        smaWorkNoteTmp.otCustAccount            = serviceOrderTable.CustAccount;
        smaWorkNoteTmp.otPaymTermId             = ProjTable::find(serviceOrderTable.ProjId).projInvoice().Payment;
        smaWorkNoteTmp.otCurrencyCode           = ProjTable::find(serviceOrderTable.ProjId).projInvoice().CurrencyId;
        smaWorkNoteTmp.otServiceLevelAgreement  = serviceOrderTable.ServiceLevelAgreement;
        smaWorkNoteTmp.otAgreementStartDateTime = serviceOrderTable.serviceLevelAgreementStartDateTime();
        smaWorkNoteTmp.otAgreementEndDateTime   = serviceOrderTable.displayLatestCompletionDateTime();
        smaWorkNoteTmp.otServiceAddressName     = serviceOrderTable.ServiceAddressName;
        smaWorkNoteTmp.otDescription            = serviceOrderTable.Description;
        smaWorkNoteTmp.psVisibility             = additionalNotesVisibility;
        smaWorkNoteTmp.ServiceAddress           = serviceOrderTable.serviceAddress();

        Enumerator productDimEnum;
        switch (_level)
        {
            case #ServiceHourTrans:

                smaWorkNoteTmp.sOlVisibility            = serviceHourTrans.ServiceOrderId;
                smaWorkNoteTmp.olEmplId                 = serviceHourTrans.workerName();
                smaWorkNoteTmp.olServiceTimeStartAfter  = serviceHourTrans.ServiceTimeStartAfter;
                smaWorkNoteTmp.olServiceTimeEndBefore   = serviceHourTrans.ServiceTimeEndBefore;
                smaWorkNoteTmp.olQty                    = serviceHourTrans.Qty;
                smaWorkNoteTmp.olTimeSheetStartTime     = serviceHourTrans.TimeSheetStartTime;
                smaWorkNoteTmp.olTimeSheetEndTime       = serviceHourTrans.TimeSheetEndTime;
                smaWorkNoteTmp.olServiceObjectId        = serviceHourTrans.ServiceObjectId;
                smaWorkNoteTmp.olServiceLineTaskId      = serviceHourTrans.ServiceTaskId;
                smaWorkNoteTmp.olDescriptionService     = serviceHourTrans.DescriptionService;
                break;

            case #ServiceItemTrans:

                inventDim = InventDim::find(serviceItemTrans.InventDimId);
                smaWorkNoteTmp.olTransactionType        = serviceItemTrans.TransactionType;
                smaWorkNoteTmp.olItemId                 = serviceItemTrans.ItemId;
                smaWorkNoteTmp.olItemSetupType          = SMAItemSetupType::ItemConsumption;
                smaWorkNoteTmp.olDescription            = serviceItemTrans.Description;
                smaWorkNoteTmp.olQty                    = serviceItemTrans.Qty;
                smaWorkNoteTmp.olServiceObjectId        = serviceItemTrans.ServiceObjectId;
                smaWorkNoteTmp.olServiceLineTaskId      = serviceItemTrans.ServiceTaskId;
                smaWorkNoteTmp.sitVisibility            = serviceItemTrans.ServiceOrderId;

                productDimEnum = InventProductDimension::getEnumeratorForEnabledDimensions();
                while (productDimEnum.moveNext())
                {
                    InventProductDimension dim = productDimEnum.current();
                    FieldId smaWorkNoteTmpFieldId = SMAWorkNoteTmp::olProductDimensionFieldId(dim);
                    if (smaWorkNoteTmpFieldId > 0)
                    {
                        smaWorkNoteTmp.(SMAWorkNoteTmpFieldId) = inventDim.(dim.parmInventDimFieldId());
                    }
                }

                break;

            case #ServiceExpenseFeeTrans:

                smaWorkNoteTmp.olTransactionType        = serviceExpenseFeeTrans.TransactionType;
                smaWorkNoteTmp.olDescription            = serviceExpenseFeeTrans.Description;
                smaWorkNoteTmp.olDescription            = serviceExpenseFeeTrans.Description;
                smaWorkNoteTmp.olProjCategoryId         = serviceExpenseFeeTrans.ProjCategoryId;
                smaWorkNoteTmp.olDescriptionService     = serviceExpenseFeeTrans.DescriptionService;
                smaWorkNoteTmp.olServiceObjectId        = serviceExpenseFeeTrans.ServiceObjectId;
                smaWorkNoteTmp.olServiceLineTaskId      = serviceExpenseFeeTrans.ServiceTaskId;
                smaWorkNoteTmp.seftVisibility           = serviceExpenseFeeTrans.ServiceOrderId;
                break;

            case #ServiceSalesLine:

                inventDim = InventDim::find(serviceSalesLine.InventDimId);
                smaWorkNoteTmp.slVisibility             = serviceSalesLine.SalesId;
                smaWorkNoteTmp.slLabelVisibility        = isSalesLine;
                smaWorkNoteTmp.slTransactionType        = enum2str(SMATransactionType::Item);
                smaWorkNoteTmp.slItemId                 = serviceSalesLine.ItemId;
                smaWorkNoteTmp.slItemSetup              = SMAItemSetupType::ItemRequirement;
                smaWorkNoteTmp.slName                   = serviceSalesLine.Name;
                smaWorkNoteTmp.slQtyOrdered             = serviceSalesLine.QtyOrdered;
                smaWorkNoteTmp.slItemName               = serviceSalesLine.itemName();
                smaWorkNoteTmp.slServiceOrderId         = serviceSalesLine.ServiceOrderId;

                productDimEnum = InventProductDimension::getEnumeratorForEnabledDimensions();
                while (productDimEnum.moveNext())
                {
                    InventProductDimension dim = productDimEnum.current();
                    FieldId smaWorkNoteTmpFieldId = SMAWorkNoteTmp::slProductDimensionFieldId(dim);
                    if (smaWorkNoteTmpFieldId > 0)
                    {
                        smaWorkNoteTmp.(SMAWorkNoteTmpFieldId) = inventDim.(dim.parmInventDimFieldId());
                    }
                }

                break;

            case #ServiceTask:

                smaWorkNoteTmp.stServiceOrderId         = serviceTask.RelKeyId;
                smaWorkNoteTmp.trServiceTaskId          = serviceTask.ServiceTaskId;
                smaWorkNoteTmp.trTaskDescription        = serviceTask.taskDesciption();
                smaWorkNoteTmp.trShowRelationOrigin     = serviceTask.showRelationOrigin();
                smaWorkNoteTmp.trDescriptionExternal    = serviceTask.DescriptionExternal;
                smaWorkNoteTmp.trDescriptionInternal    = serviceTask.DescriptionInternal;
                smaWorkNoteTmp.stdVisibility            = taskNote && (serviceTask.RelTableId == tableNum(SMAServiceOrderTable)) ? NoYes::Yes : NoYes::No;
                break;

            case #ServiceTaskAgreement:

                smaWorkNoteTmp.staServiceOrderId        = serviceTaskAgreement.RelKeyId;
                smaWorkNoteTmp.trstaServiceTaskId       = serviceTaskAgreement.ServiceTaskId;
                smaWorkNoteTmp.trTaskDescription        = serviceTaskAgreement.taskDesciption();
                smaWorkNoteTmp.trShowRelationOrigin     = serviceTaskAgreement.showRelationOrigin();
                smaWorkNoteTmp.trDescriptionExternal    = serviceTaskAgreement.DescriptionExternal;
                smaWorkNoteTmp.trDescriptionInternal    = serviceTaskAgreement.DescriptionInternal;
                smaWorkNoteTmp.stdAgreementVisibility   = taskNote && (serviceTaskAgreement.RelTableId == tableNum(SMAAgreementTable)) ? NoYes::Yes : NoYes::No;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method calls sub methods to insert data into the temporary table.
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         queryRangeTranstype;
        QueryRun                qr;
        boolean                 existsHourTrans = false;

        SMAWorkNoteContract contract = this.parmDataContract() as SMAWorkNoteContract;

        expense         = contract.parmExpense();
        fee             = contract.parmFee();
        itemRequirement = contract.parmItemRequirement();
        additionalNotes = contract.parmAdditionalNotes();
        itemConsumption = contract.parmItemConsumption();
        taskNote        = contract.parmTaskNote();
        lineText        = contract.parmLineText();
        configId        = contract.parmConfigId();
        sizeId          = contract.parmSizeId();
        colorId         = contract.parmColorId();

        companyInfo     = CompanyInfo::find();
        companyName     = companyInfo.Name;
        companyAddress  = companyInfo.postalAddress().Address;
        companyCoRegNum = companyInfo.CoRegNum;
        companyVATNum   = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
        companyTelefax  = companyInfo.teleFax();
        companyPhone    = companyInfo.phone();
        companyGiro     = companyInfo.Giro;

        this.parmQuery().dataSourceName(#ServiceItemTransDataSource).enabled(itemConsumption == NoYes::Yes);
        this.parmQuery().dataSourceName(#ServiceSalesLineDataSource).enabled(itemRequirement == NoYes::Yes);
        this.parmQuery().dataSourceName(#ServiceExpenseFeeTransDataSource).enabled(expense == NoYes::Yes || fee == NoYes::Yes);
        this.parmQuery().dataSourceName(#ServiceTaskDataSource).enabled(taskNote == NoYes::Yes);
        this.parmQuery().dataSourceName(#ServiceTaskAgreementDataSource).enabled(taskNote == NoYes::Yes);

        if (itemRequirement == NoYes::Yes && SMAWorkNoteFilterSalesLineCanceledStatusFlight::instance().isEnabled())
        {
            queryDataSource = this.parmQuery().dataSourceName(#ServiceSalesLineDataSource);
            QueryBuildRange queryRangeCanceledStatus = queryDataSource.addRange(fieldNum(SalesLine, SalesStatus));
            queryRangeCanceledStatus.value(SysQuery::valueNot(enum2str(SalesStatus::Canceled)));
        }

        if (expense || fee)
        {
            queryDataSource = this.parmQuery().dataSourceName(#ServiceExpenseFeeTransDataSource);

            queryRangeTranstype = queryDataSource.addRange(fieldNum(SMAServiceOrderLine, TransactionType));

            if (expense && fee)
            {
                queryRangeTranstype.value(queryValue(SMATransactionType::Expense) + ',' + queryValue(SMATransactionType::Fee));
            }
            else if (expense && !fee)
            {
                queryRangeTranstype.value(queryValue(SMATransactionType::Expense));
            }
            else if (!expense && fee)
            {
                queryRangeTranstype.value(queryValue(SMATransactionType::Fee));
            }
        }

        qr  = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            if (SysReportRun::changed(qr,tableNum(LogisticsPostalAddress)))
            {
                logisticsPostalAddress = qr.get(tableNum(LogisticsPostalAddress));
                serviceAddress = logisticsPostalAddress.Address;
            }
            if (SysReportRun::changed(qr,tableNum(SMAServiceOrderTable)))
            {
                if (existsHourTrans && additionalNotes)
                {
                    additionalNotesVisibility = NoYes::Yes;
                }
                serviceOrderTable = qr.get(tableNum(SMAServiceOrderTable));
                serviceOrderId = serviceOrderTable.ServiceOrderId;
                isSalesLine     = false;
                existsHourTrans = false;
            }
            if (SysReportRun::changed(qr,tableNum(SMAServiceOrderLine), #ServiceHourTrans))
            {
                if (!existsHourTrans)
                {
                    existsHourTrans = true;
                }
                serviceHourTrans = qr.get(tableNum(SMAServiceOrderLine), #ServiceHourTrans);
                this.insertIntoTempTable(#ServiceHourTrans);
            }
            if (existsHourTrans)
            {
                if (itemConsumption && SysReportRun::changed(qr, tableNum(SMAServiceOrderLine), #ServiceItemTrans))
                {
                    serviceItemTrans = qr.get(tableNum(SMAServiceOrderLine), #ServiceItemTrans);
                    this.insertIntoTempTable(#ServiceItemTrans);
                }
                if ((expense || fee) && SysReportRun::changed(qr,tableNum(SMAServiceOrderLine), #ServiceExpenseFeeTrans))
                {
                    serviceExpenseFeeTrans = qr.get(tableNum(SMAServiceOrderLine), #ServiceExpenseFeeTrans);
                    this.insertIntoTempTable(#ServiceExpenseFeeTrans);
                }

                if (itemRequirement && SysReportRun::changed(qr, tableNum(SalesLine)))
                {
                    serviceSalesLine = qr.get(tableNum(SalesLine));
                    isSalesLine = true;
                    this.insertIntoTempTable(#ServiceSalesLine);
                }
                if (taskNote && SysReportRun::changed(qr,tableNum(SMAServiceTaskRelation), #ServiceHourTrans))
                {
                    serviceTask = qr.get(tableNum(SMAServiceTaskRelation), #ServiceHourTrans);
                    this.insertIntoTempTable(#ServiceTask);
                }
                if (taskNote && SysReportRun::changed(qr,tableNum(SMAServiceTaskRelation), #ServiceItemTrans))
                {
                    serviceTaskAgreement = qr.get(tableNum(SMAServiceTaskRelation), #ServiceItemTrans);
                    this.insertIntoTempTable(#ServiceTaskAgreement);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>