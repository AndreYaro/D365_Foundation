<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ReturnItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::ReturnItem, NoYes::No)]
class SalesLineType_ReturnItem extends SalesLineType
{
    SalesTable                  salesTableExchange;
    SalesTable                  salesTableOriginal;
    SalesParameters             salesParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowPosQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a positive quantity is enabled for the given return order line.
    /// </summary>
    /// <returns>
    ///    true if positive quantity is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A positive quantity is enabled for return order lines in two scenarios:
    ///    <list type="number">
    ///       <item>
    ///          <description>If the return is rejected and the item(s) in question should be returned to the
    ///          customer a line with positive quantity is created on the return order. The purpose of this line is
    ///          to mark/reserve and reissue the item(s) from the inventory.</description>
    ///       </item>
    ///       <item>
    ///          <description>If the applied disposition code implies scrapping, a new line with positive quantity
    ///          is created and marked/reserved against the return order line. The line is hidden for the user and
    ///          the purpose of the line is to prevent the returned item is issued from the inventory instead of
    ///          being scrapped.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean allowPosQty()
    {
        boolean ret = false;

        if (salesLine.returnDispositionCode().DispositionAction == DispositionAction::ReturnToCust || salesLine.isReturnReservationLine())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipCarrierAddress</Name>
				<Source><![CDATA[
    public boolean checkShipCarrierAddress()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean creditNoteLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupUponInsert</Name>
				<Source><![CDATA[
    public boolean createMarkupUponInsert(boolean _createMarkup)
    {
        return salesTable.mcrIsCallCenter() ? super(_createMarkup) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        this.deletePendingRegistrationsNonStocked();

        SalesTable::returnUpdatedHeaderStatus(salesTable.SalesId, salesTable.DocumentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    void  initFromCustInvoiceTrans(CustInvoiceTrans custInvoiceTrans,
                                   boolean          copyPrecisely,
                                   boolean          copyPriceDisc,
                                   boolean          copyQty,
                                   Qty              qty,
                                   PdsCWInventQty   _pdsCWQty = 0
                                   )
    {
        super(custInvoiceTrans, copyPrecisely, copyPriceDisc, copyQty, qty, _pdsCWQty);

        // We've to set QtyOrdered = 0, otherwise \Data Dictionary\Tables\SalesLine\Methods\modifyWMSLocation will force the direction to be 'Issue'.
        salesLine.QtyOrdered = 0;
        InventDim inventDimReciept = salesLine.inventDim();
        inventDimReciept.wmsLocationId = '';
        inventDimReciept.wmsPalletId   = '';
        salesLine.modifyWMSLocation(inventDimReciept, false, InventDirection::Issue, InventDirection::Issue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the specified  <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record to base the sales line upon.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether 55price should be reset; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        if (salesLine.SalesQty > 0)
        {
            salesLine.SalesQty      = 0;
            salesLine.QtyOrdered    = 0;

            if (salesLine.PdsCWQty > 0)
            {
                salesLine.PdsCWQty = 0;
            }
        }

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            salesLine.PdsCWExpectedRetQty = -1;
            salesLine.pdsCWExpRetQtyConversion();
        }
        else
        {
            salesLine.ExpectedRetQty = -1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable _salesTable, boolean _ignoreInventDim = false)
    {
        super(_salesTable, _ignoreInventDim);

        salesLine.ReturnStatus = ReturnStatusLine::Awaiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    void  initSalesQty()
    {
        salesLine.QtyOrdered = salesLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line-level synchronization engine for intercompany trade.
    /// </summary>
    /// <returns>A new instance of <c>InterCompanySyncSalesLineType</c> or one of its subclasses.</returns>
    public InterCompanySyncSalesLineType interCompanySyncEngine()
    {
        return InterCompanySyncSalesLineType_ReturnItem::newFromSalesLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyValidateDeleteQty</Name>
				<Source><![CDATA[
    protected boolean interCompanyValidateDeleteQty(PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionSales(InventTable _inventTable = salesLine.inventTable())
    {
        if (CustParameters::isReturnAlternativePostingProfileEnabled())
        {
            if (salesLine.LedgerDimension)
            {
                return salesLine.LedgerDimension;
            }

            LedgerDimensionDefaultAccount ledgerDimension = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesReturn);

            return ledgerDimension;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales_IT</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionSales_IT(InventTable _inventTable = salesLine.inventTable(), boolean _creditNote = false)
    {
        LedgerDimensionDefaultAccount ledgerDimension = 0;

        if (salesLine.LedgerDimension)
        {
            ledgerDimension = salesLine.LedgerDimension;
        }
        else if (CustParameters::isReturnAlternativePostingProfileEnabled())
        {
            ledgerDimension = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesReturn);
        }
        else
        {
            if (_creditNote)
            {
                ledgerDimension = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesCreditNote_IT);
            }

            if (!ledgerDimension)
            {
                ledgerDimension = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesRevenue);
            }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    public InventDirection defaultInventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSalesQtyBeNegative</Name>
				<Source><![CDATA[
    boolean mustSalesQtyBeNegative()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>SalesLineType_ReturnItem</c> class.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record.
    /// </param>
    public void new(SalesLine _salesLine, SalesTable _salesTable)
    {
        super(_salesLine, _salesTable);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesTableOriginal = SalesTable::find(salesTable.mcrReturnSalesTable().OriginalSalesId);
        }

        if (salesTable.ReturnReplacementId)
        {
            salesTableExchange = SalesTable::find(salesTable.ReturnReplacementId);
        }

        salesParameters = SalesParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a batch can be specified on the sales line.
    /// </summary>
    /// <param name="_inventBatchId">
    /// A batch ID.
    /// </param>
    /// <returns>
    /// true if a batch can be specified on the sales line; otherwise, false .
    /// </returns>
    protected boolean pmfValidateBatchId(InventBatchId _inventBatchId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether this is a return item.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean returnItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the same batch parameter for the return item sales line.
    /// </summary>
    public void setPdsSameLot()
    {
        super();

        salesLine.PdsSameLot = salesLine.PdsSameLot == NoYes::Yes ? salesLine.ExpectedRetQty > 0 : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reservation type for the sales line from a kanban rule.
    /// </summary>
    /// <param name="_includeManualKanbanRules">
    /// A Boolean value that defines whether kanban rules with <c>manual</c> setting are included in the
    /// search.
    /// </param>
    /// Sets the reservation type for the sales line from a kanban rule.
    public void setReservationFromKanbanRule(boolean _includeManualKanbanRules = false)
    {
        //do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityGreaterThanReturnLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the expected return quantity is greater than the return lot.
    /// </summary>
    /// <param name="_returnLine">
    /// The return order line.
    /// </param>
    /// <returns>true if the expected return quantity is greater than the return lot; otherwise, false.</returns>
    protected boolean isQuantityGreaterThanReturnLot(SalesLine _returnLine)
    {
        return abs(salesLine.ExpectedRetQty) > (_returnLine.invoicedInTotal() - _returnLine.remainReturnLotQty(salesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fields for the <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the validation of the field went well; otherwise, false .
    /// </returns>
    boolean validateField(FieldId _fieldId)
    {
        SalesTable  checkSalesTable;

        InventQty   saveRetQty;

        boolean ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(SalesLine, PdsCWExpectedRetQty) :
                    // Convert the CW quantity on the table buffer to the inventory quantity.
                    // This executes before the table buffer modifiedField() method
                    // executes so we have to do it here.
                    if (_fieldId == fieldNum(SalesLine, PdsCWExpectedRetQty))
                    {
                        saveRetQty = salesLine.ExpectedRetQty;
                        salesLine.pdsCWExpRetQtyConversion();
                    }
                //fall through
                case fieldNum(SalesLine, ExpectedRetQty):
                    if (salesLine.ExpectedRetQty > 0 && !this.allowPosQty())
                    {
                        // Quantity of returned items orders must be negative.
                        ret = checkFailed("@SYS53512");
                    }

                    if (!salesLine.isInterCompanyOrder()
                        && salesLine.ExpectedRetQty == 0)
                    {
                        // Expected return quantity must not be zero
                        ret = checkFailed("@SYS105646");
                    }
                    else
                    {
                        SalesLine returnSalesLine = SalesLine::findInventTransId(salesLine.InventTransIdReturn);
                        if (returnSalesLine)
                        {
                            if (MCROrderParameters::isCallCenterEnabledAndInUse())
                            {
                                MCRSalesLine mcrSalesLine = salesLine.mcrSalesLine();
                                CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(mcrSalesLine.CustInvoiceTransRecId);
                                MCRCustCreditTable mcrCustCreditTable = MCRCustCreditTable::findByInventTransID(salesLine.InventTransId);
                                if (mcrCustCreditTable)
                                {
                                    if (abs(salesLine.ExpectedRetQty) 
                                        > (EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                               custInvoiceTrans.ItemId,
                                               custInvoiceTrans.InventDimId,
                                               mcrCustCreditTable.priceMatchAvail(),
                                               salesLine.inventTable().inventUnitId(),
                                               custInvoiceTrans.SalesUnit,
                                               NoYes::No) -  salesLine.mcrPreviouslyReturnedCreditFromReturn()))
                                    {
                                        ret = checkFailed("@SYS53004");
                                    }
                                }
                                else if (abs(salesLine.ExpectedRetQty) 
                                         > (returnSalesLine.invoicedInTotal() - EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                                    custInvoiceTrans.ItemId,
                                                                                    custInvoiceTrans.InventDimId,
                                                                                    salesLine.mcrTotalQtyCredited(),
                                                                                    salesLine.inventTable().inventUnitId(),
                                                                                    custInvoiceTrans.SalesUnit,
                                                                                    NoYes::No) - salesLine.mcrPreviouslyReturnedNoCreditReturn()))
                                {
                                    // The quantity being returned is greater than what can be covered by the return lot.
                                    ret = checkFailed("@SYS53004");
                                }
                                else if (this.isQuantityGreaterThanReturnLot(returnSalesLine))
                                {
                                    // The quantity being returned is greater than what can be covered by the return lot.
                                    ret = checkFailed("@SYS53004");
                                }
                            }
                            else
                            {
                                if (this.isQuantityGreaterThanReturnLot(returnSalesLine))
                                {
                                    // The quantity being returned is greater than what can be covered by the return lot.
                                    ret = checkFailed("@SYS53004");
                                }
                            }
                        }
                    }

                    // Return the original quantity if an error was found
                    if (!ret && _fieldId == fieldNum(SalesLine, PdsCWExpectedRetQty))
                    {
                        salesLine.ExpectedRetQty = saveRetQty;
                    }
                    break;
                case fieldNum(SalesLine, ReturnDeadline):
                    select ReturnDeadline from checkSalesTable
                        where checkSalesTable.SalesId == salesLine.SalesId;
                    if (checkSalesTable.ReturnDeadline && (salesLine.ReturnDeadline < checkSalesTable.ReturnDeadline))
                    {
                        // Return deadline on lines must not be before return deadline on header
                        ret = checkFailed("@SYS105786");
                    }
                    break;
                case fieldNum(SalesLine, ReturnDispositionCodeId):
                    if (salesLine.ReturnDispositionCodeId)
                    {
                        if (salesLine.SkipUpdate == InterCompanySkipUpdate::No
                            && salesLine.interCompanySalesLineExist() &&  salesLine.salesTable().InterCompanyDirectDelivery)
                        {
                            ret = checkFailed("@SYS120346");
                        }

                        //Return item cannot have a disposition action for replace.
                        if (!salesLine.isStocked())
                        {
                            DispositionAction dispositionAction = ReturnDispositionCode::find(salesLine.ReturnDispositionCodeId).DispositionAction;
                            if (dispositionAction == DispositionAction::ReplaceCredit || dispositionAction == DispositionAction::ReplaceScrap)
                            {
                                ret = checkFailed("@SYS190602");
                            }
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean  ok = true;

        ok = super(_skipCreditLimitCheck);

        if (!this.canReturnProduct())
        {
            if (salesLine.ItemId)
            {
                // You cannot create a return order line for a service product that is not stocked
                ok = checkFailed("@SYS342085");
            }
            else
            if (salesLine.SalesCategory)
            {
                // You cannot create a return order line for a sales category that is not classified as tangible
                ok = checkFailed("@SYS342086");
            }
        }

        if (salesLine.SalesQty > 0
        &&  salesLine.SkipUpdate == InterCompanySkipUpdate::No && !this.allowPosQty())
        {
            // Quantity of returned items orders must be negative.
            ok = checkFailed("@SYS53512");
        }

        if (!salesLine.isInterCompanyOrder()
            && salesLine.ExpectedRetQty == 0)
        {
            // Expected return quantity must not be zero
            ok = checkFailed("@SYS105646");
        }

        if (salesLine.ExpectedRetQty * salesLine.LineAmount < 0)
        {
            //The sign on Quantity and Net amount have to be the same
            ok = checkFailed("@SYS78848");
        }

        // <GEERU>
        if (ok && salesLine.AssetId_RU)
        {
            ok = checkFailed("@GLS116227");
        }
        // </GEERU>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReturnProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product is allowed to be returned.
    /// </summary>
    /// <returns>true if product can be returned; otherwise, false.</returns>
    protected boolean canReturnProduct()
    {
        return salesLine.isTangible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesLineType::construct() instead.', false, 31\05\2017)]
    static SalesLineType construct(SalesLine salesLine, SalesTable salesTable = salesLine.salesTable())
    {
        if (salesLine.ProjId)
            return new SalesLineType_ProjectReturnItem(salesLine,salesTable);

        return new SalesLineType_ReturnItem(salesLine,salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetRetLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the return line amount against the passed <c>InventTransId</c> value
    /// for a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_retInventTransIdId">
    /// The <c>SalesId</c> value that identifies the sales order line for which the
    /// return line amount should be calculated.
    /// </param>
    /// <param name="_custInvoiceTransRecId">
    /// The passed <c>InventTransId</c> value against which to calculate the return line amount.
    /// </param>
    /// <returns>
    /// The return line amount.
    /// </returns>
    public static AmountCur mcrGetRetLineAmount(SalesId _retInventTransIdId, RecId _custInvoiceTransRecId = 0)
    {
        SalesLine           salesLine;
        MCRSalesLine        mcrSalesLine;

        // Get all returned sales lines for the passed InventTransId.
        select sum(LineAmount) from  salesLine
            where salesLine.InventTransIdReturn     == _retInventTransIdId
                && salesLine.SalesQty                   <  0
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == salesLine.RecId
                && mcrSalesLine.CustInvoiceTransRecId   == _custInvoiceTransRecId;

        return salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetRetLineMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the return charges against the passed <c>MarkupCode</c> value
    /// for a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_retInventTransIdId">
    /// The <c>SalesId</c> value that identifies the sales order line for which the
    /// return charges should be calculated.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> value against which to calculate the return charges.
    /// </param>
    /// <returns>
    /// The return charges.
    /// </returns>
    public static AmountCur mcrGetRetLineMiscCharge(SalesId _retInventTransIdId, MarkupCode _markupCode)
    {
        SalesLine           salesLine;
        MarkupTable         retMarkupTable;
        MarkupTrans         retMarkupTrans;

        // Get all returned sales lines for the passed InventTransId
        // and  retrieve the passed markup code if it's tied to the line.
        select sum(Value) from retMarkupTrans
            where retMarkupTrans.MarkupCode == _markupCode
                    && retMarkupTrans.MarkupCategory == MarkupCategory::Fixed
            exists join salesLine
                where salesLine.InventTransIdReturn == _retInventTransIdId
                    && salesLine.SalesQty < 0
                    && salesLine.RecId == retMarkupTrans.TransRecId
                    && salesLine.TableId == retMarkupTrans.TransTableId
            exists join retMarkupTable
                where retMarkupTable.MarkupCode == retMarkupTrans.MarkupCode
                    && retMarkupTable.CustType == MarkupType::CustVend
                    && retMarkupTable.mcrProRate;

        return retMarkupTrans.Value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>