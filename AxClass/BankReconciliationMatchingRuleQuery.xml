<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchingRuleQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationMatchingRuleQuery</c> class builds the query
/// of bank reconciliation rule which is used for matching.
/// </summary>
class BankReconciliationMatchingRuleQuery
{
    private boolean isBankModernReconciliationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance());

    BankReconciliationMatchRuleRefRecId matchRuleRecId;
    BankReconciliationStatementOpenTmp comparedStatementTmpBuffer;
    private BankReconciliationDocumentOpenTmp comparedDocumentTmpBuffer;
    private BankReconciliationStatementOpenView comparedStatementViewBuffer;

    Map queryMap;
    Map queryRangeMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for specified matching rule line type.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// Matching rule line type.
    /// </param>
    /// <returns>
    /// Builed query.
    /// </returns>
    protected Query buildQuery(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        Set ruleLineSet = new Set(Types::Record);

        Query query;

        if (queryMap.exists(_matchRuleLineType))
        {
            query = queryMap.lookup(_matchRuleLineType);
        }

        if (query == null)
        {
            //Fill the set with all macth rule lines
            BankReconciliationMatchRuleLine matchRuleLine;
            while select matchRuleLine
                order by LineNum
                where matchRuleLine.BankReconciliationMatchRule == matchRuleRecId
                    && matchRuleLine.LineType == _matchRuleLineType
            {
                ruleLineSet.add(matchRuleLine);
            }

            query = this.initializeBaseQuery(_matchRuleLineType);
            TableId queryTableId = this.getQueryTableNum(_matchRuleLineType);
            QueryBuildDataSource qbds = query.dataSourceTable(queryTableId);

            while (ruleLineSet.elements() > 0)
            {
                Set remainingRuleLineSet = new Set(Types::Record);

                SetEnumerator ruleLineSetEnumerator = ruleLineSet.getEnumerator();
                while (ruleLineSetEnumerator.moveNext())
                {
                    matchRuleLine = ruleLineSetEnumerator.current();

                    QueryBuildRange qbr = qbds.findRange(matchRuleLine.FieldId);
                    if (!qbr)
                    {
                        //Add range
                        qbr = qbds.addRange(matchRuleLine.FieldId);

                        //Save into Map
                        queryRangeMap.insert(matchRuleLine.RecId, qbr);
                    }
                    else
                    {
                        remainingRuleLineSet.add(matchRuleLine);
                    }
                }

                ruleLineSet = remainingRuleLineSet;
                if (ruleLineSet.elements() > 0)
                {
                    qbds = qbds.addDataSource(queryTableId);
                    qbds.relations(false);
                    qbds.joinMode(JoinMode::ExistsJoin);

                    qbds.addLink(
                        fieldName2id(queryTableId, identifierStr(RecId)),
                        fieldName2id(queryTableId, identifierStr(RecId)));
                }
            }

            //Save into map
            queryMap.insert(_matchRuleLineType, query);
        }

        this.setQueryRanges(_matchRuleLineType);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comparing value based on given <c>BankReconciliationMatchRuleLine</c> buffer.
    /// </summary>
    /// <param name="_matchRuleLine">
    /// Given <c>BankReconciliationMatchRuleLine</c> buffer.
    /// </param>
    /// <returns>
    /// The comparing value.
    /// </returns>
    protected anytype getCompareValue(BankReconciliationMatchRuleLine _matchRuleLine)
    {
        anytype compareValue;

        if (_matchRuleLine.CompareFieldId && comparedStatementTmpBuffer)
        {
            compareValue = BankReconciliationRuleParser::getCompareValueFromField(
                _matchRuleLine.getFieldType(),
                comparedStatementTmpBuffer.(_matchRuleLine.CompareFieldId),
                _matchRuleLine.CompareFieldExpression);
        }
        else if (isBankModernReconciliationFeatureEnabled
            && _matchRuleLine.CompareFieldId
            && comparedDocumentTmpBuffer)
        {
            compareValue = BankReconciliationRuleParser::getCompareValueFromField(
                _matchRuleLine.getFieldType(),
                comparedDocumentTmpBuffer.(_matchRuleLine.CompareFieldId),
                 _matchRuleLine.CompareFieldExpression);
        }
        else if (isBankModernReconciliationFeatureEnabled
            && _matchRuleLine.CompareFieldId
            && comparedStatementViewBuffer)
        {
            compareValue = BankReconciliationRuleParser::getCompareValueFromField(
                _matchRuleLine.getFieldType(),
                comparedStatementViewBuffer.(_matchRuleLine.CompareFieldId),
                _matchRuleLine.CompareFieldExpression);
        }
        else
        {
            compareValue = _matchRuleLine.Value;
        }

        return compareValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareValueFromField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comparing value from field value and compared value in the rule line.
    /// </summary>
    /// <param name="_type">
    /// Type of field.
    /// </param>
    /// <param name="_comparedFieldValue">
    /// The field value.
    /// </param>
    /// <param name="_comparedFieldExpression">
    /// The expression of compared field.
    /// </param>
    /// <returns>
    /// The combined value.
    /// </returns>
    protected anytype getCompareValueFromField(
        Types _type,
        anytype _comparedFieldValue,
        BankReconciliationMatchFieldValue _comparedFieldExpression)
    {
        anytype result;

        if (_comparedFieldExpression)
        {
            result = BankReconciliationRuleParser::calculateCompareFieldExpression(
                _type,
                _comparedFieldValue,
                _comparedFieldExpression);
        }
        else
        {
            result = _comparedFieldValue;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankReconciliationDocumentOpenTmp</c> buffer.
    /// </summary>
    /// <param name="_documentTmp">
    /// The given <c>BankReconciliationDocumentOpenTmp</c> buffer.
    /// </param>
    /// <returns>
    /// <c>BankReconciliationDocumentOpenTmp</c> buffer.
    /// </returns>
    private BankReconciliationDocumentOpenTmp getDocumentTmp(BankReconciliationDocumentOpenTmp _documentTmp)
    {
        BankReconciliationDocumentOpenTmp documentTmpLocal;

        documentTmpLocal.linkPhysicalTableInstance(_documentTmp);

        return documentTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsMatchedFieldNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field number of matched status for the query.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// The matching rule line type.
    /// </param>
    /// <returns>
    /// The field number of matched status for the query.
    /// </returns>
    protected RefFieldId getIsMatchedFieldNum(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        switch (_matchRuleLineType)
        {
            case BankReconciliationMatchRuleLineType::SettleStatement:
            case BankReconciliationMatchRuleLineType::SettleCustInvoice:
            case BankReconciliationMatchRuleLineType::Statement:
            case BankReconciliationMatchRuleLineType::OrigStatement:
            case BankReconciliationMatchRuleLineType::GenerateVoucher:
            case BankReconciliationMatchRuleLineType::GenerateCustPaym:
            case BankReconciliationMatchRuleLineType::GenerateVendPaym:
                return fieldNum(BankReconciliationStatementOpenTmp, IsMatched);

            case BankReconciliationMatchRuleLineType::Document:
            case BankReconciliationMatchRuleLineType::OrigDocument:
                return fieldNum(BankReconciliationDocumentOpenTmp, IsMatched);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRunForSearching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query run of searching via specified matching rule line type and given buffer.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// Matching rule line type.
    /// </param>
    /// <param name="_searchTable">
    /// Given buffer of <c>BankReconciliationStatementOpenTmp</c> or <c>BankReconciliationDocumentOpenTmp</c>.
    /// </param>
    /// <returns>
    /// Query run of searching.
    /// </returns>
    public QueryRun getQueryRunForSearching(BankReconciliationMatchRuleLineType _matchRuleLineType, Common _searchTable)
    {
        QueryRun queryRunOfSearching;

        if (this.isQueryRunOfSearchingRequired(_matchRuleLineType))
        {
            queryRunOfSearching = new QueryRun(this.buildQuery(_matchRuleLineType));
            queryRunOfSearching = this.setQueryRunRecord(queryRunOfSearching, _searchTable);
        }

        return queryRunOfSearching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTableNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table number for the query.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// The match rule line type.
    /// </param>
    /// <returns>
    /// The table number for the query.
    /// </returns>
    protected RefTableId getQueryTableNum(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        switch (_matchRuleLineType)
        {
            case BankReconciliationMatchRuleLineType::SettleStatement:
            case BankReconciliationMatchRuleLineType::GenerateVoucher:
            case BankReconciliationMatchRuleLineType::GenerateCustPaym:
            case BankReconciliationMatchRuleLineType::GenerateVendPaym:
                return tableNum(BankReconciliationStatementOpenView);

            case BankReconciliationMatchRuleLineType::Statement:
            case BankReconciliationMatchRuleLineType::OrigStatement:
                return tableNum(BankReconciliationStatementOpenTmp);

            case BankReconciliationMatchRuleLineType::Document:
            case BankReconciliationMatchRuleLineType::OrigDocument:
                return tableNum(BankReconciliationDocumentOpenTmp);

            case BankReconciliationMatchRuleLineType::SettleCustInvoice:
            case BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice:
                return tableNum(CustInvoiceForBankReconciliationView);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the range value based on operator and compared value
    /// </summary>
    /// <param name="_operator">
    /// The operator.
    /// </param>
    /// <param name="_compareValue">
    /// The compared value.
    /// </param>
    /// <returns>
    /// The range value.
    /// </returns>
    protected BankReconciliationMatchFieldValue getRangeValueString(BankReconciliationMatchOperatorType _operator, anyType _compareValue)
    {
        return BankReconciliationRuleParser::getRangeValueString(_operator, _compareValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankReconciliationStatementOpenTmp</c> buffer.
    /// </summary>
    /// <param name="_statementTmp">
    /// The given <c>BankReconciliationStatementOpenTmp</c> buffer.
    /// </param>
    /// <returns>
    /// <c>BankReconciliationStatementOpenTmp</c> buffer.
    /// </returns>
    private BankReconciliationStatementOpenTmp getStatementTmp(BankReconciliationStatementOpenTmp _statementTmp)
    {
        BankReconciliationStatementOpenTmp statementTmpLocal;

        statementTmpLocal.linkPhysicalTableInstance(_statementTmp);

        return statementTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// The match rule line type.
    /// </param>
    /// <returns>
    /// The intialized query.
    /// </returns>
    protected Query initializeBaseQuery(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        Query query = new Query();
        if (isBankModernReconciliationFeatureEnabled)
        {
            QueryBuildDataSource qbds;
            QueryBuildRange qbr;

            switch (_matchRuleLineType)
            {
                case BankReconciliationMatchRuleLineType::SettleStatement:
                case BankReconciliationMatchRuleLineType::GenerateVoucher:
                case BankReconciliationMatchRuleLineType::GenerateCustPaym:
                case BankReconciliationMatchRuleLineType::GenerateVendPaym:
                    qbds = query.addDataSource(tableNum(BankReconciliationStatementOpenTmp));
                    qbr = qbds.addRange(this.getIsMatchedFieldNum(_matchRuleLineType));
                    qbr.value(queryValue(NoYes::No));
                    qbds = qbds.addDataSource(tableNum(BankReconciliationStatementOpenView));
                    // In case when customer disable MBR feature and marked statement lines as new, these lines should be filtered out.
                    qbr = qbds.addRange(fieldNum(BankReconciliationStatementOpenView, IsNewBankDocument));
                    qbr.value(SysQuery::value(0));
                    qbds.joinMode(JoinMode::InnerJoin);
                    qbds.addLink(
                        fieldNum(BankReconciliationStatementOpenTmp, BankStmtISOReportEntry),
                        fieldNum(BankReconciliationStatementOpenView, BankISOReportEntryRecId));
                    break;

                case BankReconciliationMatchRuleLineType::SettleCustInvoice:
                    qbds = query.addDataSource(tableNum(CustTransOpen));
                    qbds = qbds.addDataSource(tableNum(CustInvoiceForBankReconciliationView));
                    qbds.joinMode(JoinMode::InnerJoin);
                    qbds.addLink(
                        fieldNum(CustTransOpen, RefRecId),
                        fieldNum(CustInvoiceForBankReconciliationView, CustTransRecId));
                    qbds.addLink(
                        fieldNum(CustTransOpen, AccountNum),
                        fieldNum(CustInvoiceForBankReconciliationView, AccountNum));
                    this.addNonEmptyStringFilterWhenDoFieldCompare(query, _matchRuleLineType);
                    break;

                case BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice:
                    qbds = query.addDataSource(tableNum(CustInvoiceForBankReconciliationView));
                    qbds.addRange(fieldNum(CustInvoiceForBankReconciliationView, AmountCur)).value('0..');
                    this.addNonEmptyStringFilterWhenDoFieldCompare(query, _matchRuleLineType);
                    break;

                default:
                    qbds = query.addDataSource(this.getQueryTableNum(_matchRuleLineType));
                    qbr = qbds.addRange(this.getIsMatchedFieldNum(_matchRuleLineType));
                    qbr.value(queryValue(NoYes::No));
                    break;
            }
        }
        else
        {
            QueryBuildDataSource qbds = query.addDataSource(this.getQueryTableNum(_matchRuleLineType));
            QueryBuildRange qbr = qbds.addRange(this.getIsMatchedFieldNum(_matchRuleLineType));
            qbr.value(queryValue(NoYes::No));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonEmptyStringFilterWhenDoFieldCompare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a filter to the query to exclude records with empty string fields when comparing fields.
    /// </summary>
    /// <param name = "_query">The query object.</param>
    /// <param name = "_matchRuleLineType">The match line type.</param>
    /// <Remarks>
    /// This method addresses an issue where, during comparison (e.g., 'Equals' or 'BeginWith'),
    /// records with empty string fields are incorrectly fetched even when the compared field is also empty.
    /// We allow the field to be empty when the compared operator is 'NotEqual'.
    /// </Remarks>
    private void addNonEmptyStringFilterWhenDoFieldCompare(Query _query, BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        TableId queryTableId = this.getQueryTableNum(_matchRuleLineType);
        DictTable dictTable = new DictTable(queryTableId);
        QueryBuildDataSource qbds = _query.dataSourceTable(queryTableId);
        BankReconciliationMatchRuleLine matchRuleLine;
        while select FieldId from matchRuleLine
            group by matchRuleLine.FieldId
            where matchRuleLine.BankReconciliationMatchRule == matchRuleRecId
                && matchRuleLine.LineType == _matchRuleLineType
                && matchRuleLine.CompareFieldId
                && matchRuleLine.Operator != BankReconciliationMatchOperatorType::NotEqual
                && matchRuleLine.SystemGeneratedType == BankReconMatchRuleLineSysGeneratedType::None
        {
            if (dictTable.fieldObject(matchRuleLine.FieldId).baseType() == Types::String)
            {
                _query.addQueryFilter(qbds, fieldId2Name(queryTableId, matchRuleLine.FieldId)).value(SysQuery::valueNotEmptyString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryRunOfSearchingRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether query run of searching is required.
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// The matching rule line type.
    /// </param>
    /// <returns>
    /// False if matching rule line type is <c>BankReconciliationMatchRuleLineType::Document</c>,
    /// but the matching rule won't search bank documents; Or matching rule line type is
    /// <c>BankReconciliationMatchRuleLineType::OrigStatement</c>, but the matching rule is not action of clear
    /// reversal statement; otherwise true.
    /// </returns>
    private boolean isQueryRunOfSearchingRequired(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        boolean ret = true;

        BankReconciliationMatchRule matchRule = BankReconciliationMatchRule::find(matchRuleRecId);

        switch (_matchRuleLineType)
        {
            case BankReconciliationMatchRuleLineType::Document:
                if (!matchRule.isSearchingMatchingEntry())
                {
                    ret = false;
                }
                break;

            case BankReconciliationMatchRuleLineType::OrigStatement:
                if (matchRule.MatchActionType != BankReconciliationMatchActionType::Reversal)
                {
                    ret = false;
                }
                break;

            case BankReconciliationMatchRuleLineType::OrigDocument:
                if (matchRule.MatchActionType != BankReconciliationMatchActionType::TransactionReversal)
                {
                    ret = false;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        queryMap = new Map(Types::Enum, Types::Class);
        queryRangeMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationMatchRuleRecId</Name>
				<Source><![CDATA[
    public BankReconciliationMatchRuleRefRecId parmBankReconciliationMatchRuleRecId(BankReconciliationMatchRuleRefRecId _matchRuleRecId = matchRuleRecId)
    {
        matchRuleRecId = _matchRuleRecId;

        return matchRuleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComparedStatementTmpBuffer</Name>
				<Source><![CDATA[
    public BankReconciliationStatementOpenTmp parmComparedStatementTmpBuffer(BankReconciliationStatementOpenTmp _comparedStatementTmpBuffer = comparedStatementTmpBuffer)
    {
        comparedStatementTmpBuffer = _comparedStatementTmpBuffer;

        return comparedStatementTmpBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComparedDocumentTmpBuffer</Name>
				<Source><![CDATA[
    internal BankReconciliationDocumentOpenTmp parmComparedDocumentTmpBuffer(BankReconciliationDocumentOpenTmp _comparedDocumentTmpBuffer)
    {
        comparedDocumentTmpBuffer = _comparedDocumentTmpBuffer;

        return comparedDocumentTmpBuffer;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmComparedStatementViewBuffer</Name>
				<Source><![CDATA[
    internal BankReconciliationStatementOpenView parmComparedStatementViewBuffer(BankReconciliationStatementOpenView _comparedStatementViewBuffer = comparedStatementViewBuffer)
    {
        comparedStatementViewBuffer = _comparedStatementViewBuffer;

        return comparedStatementViewBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query ranges value according to current comparing statement
    /// </summary>
    /// <param name="_matchRuleLineType">
    /// The match rule line type.
    /// </param>
    protected void setQueryRanges(BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        while select matchRuleLine
            order by LineNum
            where matchRuleLine.BankReconciliationMatchRule == matchRuleRecId
                && matchRuleLine.LineType == _matchRuleLineType
        {
            if (queryRangeMap.exists(matchRuleLine.RecId)
                && (!isBankModernReconciliationFeatureEnabled
                || !BankReconciliationRuleParser::isSpecialOperatorType(matchRuleLine.Operator)))
            {
                QueryBuildRange range = queryRangeMap.lookup(matchRuleLine.RecId);
                BankReconciliationMatchFieldValue rangeValueString = BankReconciliationRuleParser::getRangeValueString(
                    matchRuleLine.Operator,
                    this.getCompareValue(matchRuleLine));
                range.value(rangeValueString);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRunRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets record for each data source of given queryRun.
    /// </summary>
    /// <param name="_queryRun">
    /// Given queryRun.
    /// </param>
    /// <param name="_searchTable">
    /// Given buffer of <c>BankReconciliationStatementOpenTmp</c> or <c>BankReconciliationDocumentOpenTmp</c>.
    /// </param>
    /// <returns>
    /// QueryRun after setting record for each data source.
    /// </returns>
    protected QueryRun setQueryRunRecord(QueryRun _queryRun, Common _searchTable)
    {
        for (Counter counter = 1; counter <= _queryRun.query().dataSourceCount(); counter++)
        {
            if (isBankModernReconciliationFeatureEnabled)
            {
                switch (_queryRun.query().dataSourceNo(counter).table())
                {
                    case tableNum(BankReconciliationStatementOpenTmp):
                        _queryRun.setRecord(this.getStatementTmp(_searchTable as BankReconciliationStatementOpenTmp), counter);
                        break;

                    case tableNum(BankReconciliationDocumentOpenTmp):
                        _queryRun.setRecord(this.getDocumentTmp(_searchTable as BankReconciliationDocumentOpenTmp), counter);
                        break;

                    default:
                        break;
                }
            }
            else
            {
                TableId tableId = _queryRun.query().dataSourceNo(counter).table();
                if (tableId == tableNum(BankReconciliationStatementOpenTmp))
                {
                    _queryRun.setRecord(this.getStatementTmp(_searchTable as BankReconciliationStatementOpenTmp), counter);
                }
                else if (tableId == tableNum(BankReconciliationDocumentOpenTmp))
                {
                    _queryRun.setRecord(this.getDocumentTmp(_searchTable as BankReconciliationDocumentOpenTmp), counter);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        return _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>BankReconciliationMatchingRuleQuery</c> for matching query.
    /// </summary>
    /// <param name="_matchRuleRecId">
    /// The <c>BankReconciliationMatchRule</c> record Id.
    /// </param>
    /// <returns>
    /// An instance of <c>BankReconciliationMatchingRuleQuery</c>.
    /// </returns>
    public static BankReconciliationMatchingRuleQuery construct(BankReconciliationMatchRuleRefRecId _matchRuleRecId)
    {
        BankReconciliationMatchingRuleQuery matchingRuleQuery = new BankReconciliationMatchingRuleQuery();

        matchingRuleQuery.parmBankReconciliationMatchRuleRecId(_matchRuleRecId);
        return matchingRuleQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>