<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumFieldsQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A builder class for the on-hand inventory field selections.
/// </summary>
public class InventSumFieldsQueryBuilder
{
    const str CacheClassScope = classStr(InventSumFieldsQueryBuilder);
    const int MinimumLenghtOfPackedListOrSet = 1;

    static container inventSumFieldsContainer;
    static container inventSumDeltaFieldsContainer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildInventSumDeltaDimIdSQLTransactionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the filter expression for item number, inventory dimension id and SQL transaction id on the <c>InventSumDelta</c> table.
    /// </summary>
    /// <param name = "_inventSumDelta">An <c>InventSumDelta</c> record buffer.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_inventDimId">The inventory dimension id.</param>
    /// <param name = "_transactionId">The SQL transaction id.</param>
    /// <returns>A query object filter expression.</returns>
    internal static SysDaBinaryExpression buildInventSumDeltaDimIdSQLTransactionFilter(InventSumDelta _inventSumDelta, ItemId _itemId, InventDimId _inventDimId, CreatedTransactionId _transactionId)
    {
        return
            new SysDaEqualsExpression(new SysDaFieldExpression(_inventSumDelta, fieldStr(InventSumDelta, ItemId)), new SysDaValueExpression(_itemId))
                .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventSumDelta, fieldStr(InventSumDelta, InventDimId)), new SysDaValueExpression(_inventDimId)))
                .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventSumDelta, fieldStr(InventSumDelta, SQLTransactionID)), new SysDaValueExpression(_transactionId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumFieldsQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the SUM field selection on a query object based on the given field group of the <c>InventSum</c> table.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    /// <param name = "_fieldGroupStr">The field group name from <c>InventSum</c>.</param>
    internal static void buildInventSumFieldsQueryProjection(SysDaQueryObject _queryObject, str _fieldGroupStr)
    {     
        if (!inventSumFieldsContainer)
        {
            inventSumFieldsContainer = InventSumFieldsQueryBuilder::getFieldGroupFields(tableNum(InventSum), _fieldGroupStr);
        }     

        InventSumFieldsQueryBuilder::buildQuerySumProjectionFromContainer(_queryObject, inventSumFieldsContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventSumDeltaFieldsQueryProjection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the SUM field selection on a query object based on the given field group of the <c>InventSumDelta</c> table.
    /// </summary>
    /// <param name = "_queryObject">A <c>SysDaQueryObject</c> instance.</param>
    /// <param name = "_fieldGroupStr">The field group name from <c>InventSumDelta</c>.</param>
    internal static void buildInventSumDeltaFieldsQueryProjection(SysDaQueryObject _queryObject, str _fieldGroupStr)
    {
        if (!inventSumDeltaFieldsContainer)
        {
            inventSumDeltaFieldsContainer = InventSumFieldsQueryBuilder::getFieldGroupFields(tableNum(InventSumDelta), _fieldGroupStr);
        }

        InventSumFieldsQueryBuilder::buildQuerySumProjectionFromContainer(_queryObject, inventSumDeltaFieldsContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySumProjectionFromContainer</Name>
				<Source><![CDATA[
    private static void buildQuerySumProjectionFromContainer(SysDaQueryObject _queryObject, container _inventSumFieldsContainer)
    {
        int deltaFieldsContainerLength = conLen(_inventSumFieldsContainer);
        
        for (int i = 1; i <= deltaFieldsContainerLength; i++)
        {
            _queryObject.projection().addSum(conPeek(_inventSumFieldsContainer, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupFieldsFromMetaData</Name>
				<Source><![CDATA[
    private static container getFieldGroupFieldsFromMetaData(
        TableId         _tableId,
        str             _fieldGroupStr)
    {
        container      result = conNull();
        DictFieldGroup dictFieldGroup = new DictFieldGroup(_tableId, _fieldGroupStr);

        if (dictFieldGroup)
        {
            int fieldCnt = dictFieldGroup.numberOfFields();
          
            for (int i = 1; i <= fieldCnt; i++)
            {
                DictField dictField = new DictField(_tableId, dictFieldGroup.field(i));          

                if (dictField)
                {
                    result += dictField.name();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupFields</Name>
				<Source><![CDATA[
    private static container getFieldGroupFields(
        TableId         _tableId,
        str             _fieldGroupStr)
    {
        container cacheKey = [_tableId, _fieldGroupStr];
        container fieldContainer;

        SysGlobalObjectCache sysGlobalObjectCache = classfactory.globalObjectCache();
        container cachedFields = sysGlobalObjectCache.find(CacheClassScope, cacheKey);

        if (cachedFields && conLen(cachedFields) >= MinimumLenghtOfPackedListOrSet)
        {
            fieldContainer = cachedFields;
        }
        else
        {
            fieldContainer = InventSumFieldsQueryBuilder::getFieldGroupFieldsFromMetaData(_tableId, _fieldGroupStr);
            sysGlobalObjectCache.insert(CacheClassScope, cacheKey, fieldContainer);
        }

        return fieldContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>