<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchyInstance_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the hierarchy instance.
/// </summary>
class TaxReportHierarchyInstance_IN
{
    TaxReportHierarchy_IN           hierarchy;
    TaxReportHierarchyVersion_IN    hierarchyVersion;
    TaxReportHrchyNode_IN           rootNode;

    //hash table used to lookup nodes quickly.
    Map     hierarchyMap;

    //says whether the structure is editable or not
    boolean editable;

    //says whether the hierarchy has been edited
    boolean edited;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enterEditMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the edit mode.
    /// </summary>
    public void enterEditMode()
    {
        editable = true;
        edited = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an instance of <c>TaxReportHrchyNode_IN</c>.
    /// </summary>
    /// <param name="_nodeRecId">
    /// The recid is used to find record.
    /// </param>
    /// <returns>
    /// Returns an instance of <c>TaxReportHrchyNode_IN</c> if exist; otherwise, null.
    /// </returns>
    TaxReportHrchyNode_IN findNode(RecId _nodeRecId)
    {
        TaxReportHrchyNode_IN    node;
        if (hierarchyMap.exists(_nodeRecId))
        {
            node = hierarchyMap.lookup(_nodeRecId);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy name.
    /// </summary>
    /// <returns>
    /// Returns the hierarchy name.
    /// </returns>
    public str getHierarchyName()
    {
        return hierarchy.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status active or not for instance <c>TaxReportHierarchy_IN</c>.
    /// </summary>
    /// <returns>
    /// Returns true, if active; otherwise, false.
    /// </returns>
    public NoYes getHierarchyStatus()
    {
        return hierarchy.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>TaxReportHierarchyVersion_IN</c>.
    /// </summary>
    /// <returns>
    /// Returns an instance of <c>TaxReportHierarchyVersion_IN</c>.
    /// </returns>
    public TaxReportHierarchyVersion_IN getHierarchyVersion()
    {
        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent of the given instance of <c>TaxReportHrchyNode_IN</c>.
    /// </summary>
    /// <param name="_child">
    /// The child instance of <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// An instance of <c>TaxReportHrchyNode_IN</c>.
    /// </returns>
    TaxReportHrchyNode_IN getParent(TaxReportHrchyNode_IN _child)
    {
        TaxReportHierarchyNode_IN    tableNode;

        tableNode = TaxReportHierarchyNode_IN::findbyHierarchyAndNodeId(
            _child.parmTaxReportHierarchyVersion(), _child.parmParentId());

        return TaxReportHierarchyHelper_IN::initNodeFromValueTable(tableNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides the status is active or not for instance <c>TaxReportHierarchyVersion_IN</c>.
    /// </summary>
    /// <returns>
    /// Returns true, if active; otherwise, false.
    /// </returns>
    public boolean isActive()
    {
        return hierarchyVersion.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The hierarchy version.
    /// </param>
    public void new (TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        hierarchy = TaxReportHierarchy_IN::find(_hierarchyVersion.TaxReportHierarchy_IN);
        hierarchyVersion = _hierarchyVersion;

        if (hierarchy)
        {
            this.reload();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditable</Name>
				<Source><![CDATA[
    public boolean parmEditable()
    {
        return editable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reloads the hierarchy instance
    /// </summary>
    public void reload()
    {
        TaxReportHierarchyNode_IN    descendantTableNode;
        TaxReportHrchyNode_IN        descendantNode;

        hierarchyVersion = TaxReportHierarchyVersion_IN::find(hierarchyVersion.RecId);
        rootNode = TaxReportHierarchyHelper_IN::findRootNode(hierarchyVersion.RecId);

        // Insert root node into the map for quick lookup, root node has not parent node
        hierarchyMap = new Map(Types::Int64, Types::Class);
        hierarchyMap.insert(rootNode.parmRecId(), rootNode);

        // Insert all child nodes into the map and also update the parentMap for quick lookup
        while select descendantTableNode
            order by descendantTableNode.LeftId asc
            where descendantTableNode.TaxReportHierarchyVersion_IN == rootNode.parmTaxReportHierarchyVersion()
               && descendantTableNode.LeftId > rootNode.parmLeftId()
               && descendantTableNode.RightId < rootNode.parmRightId()
        {
            descendantNode = TaxReportHierarchyHelper_IN::initNodeFromValueTable(descendantTableNode);
            hierarchyMap.insert(descendantNode.parmRecId(), descendantNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromHierarchyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes record from HierarchyMap.
    /// </summary>
    /// <param name="_nodeRecId">
    /// The recid is used to find record.
    /// </param>
    /// <returns>
    /// Return true, if remove successfully; otherwise, false.
    /// </returns>
    public boolean removeFromHierarchyMap(RecId _nodeRecId)
    {
        TaxReportHrchyNode_IN   current = this.findNode(_nodeRecId);

        if (current == null || hierarchyMap == null)
            return false;

        //Remove current node
        hierarchyMap.remove(current.parmRecId());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a node from HierarchyMap.
    /// </summary>
    /// <param name="_nodeRecId">
    /// The needed to remove node.
    /// </param>
    /// <param name="selNode">
    /// An instance of <c>TaxReportHrchyNode_IN</c>; optional.
    /// </param>
    /// <returns>
    /// Returns true, if removed successfully; otherwise, false.
    /// </returns>
    public boolean removeNode(recId _nodeRecId, TaxReportHrchyNode_IN selNode = null)
    {
        TaxReportHrchyNode_IN parent, current;

        this.throwIfEditDisallowed();

        current = this.findNode(_nodeRecId);

        if (!current)
            return false;

        parent = this.getParent(current);
        this.removeNodeInternal(current);

        edited = true;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNodeInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a node from HierarchyMap.
    /// </summary>
    /// <param name="node">
    /// The node need to be removed.
    /// </param>
    public void removeNodeInternal(TaxReportHrchyNode_IN node)
    {
        TaxReportHrchyNode_IN  parent;
        int                    iChildIndex = 1;
        ;
        parent = this.getParent(node);

        this.removeFromHierarchyMap(node.parmRecId());
        node.remove();

        if (node == rootNode)
        {
            rootNode = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the root node.
    /// </summary>
    /// <returns>
    /// Returns the root node.
    /// </returns>
    TaxReportHrchyNode_IN rootNode()
    {
        return rootNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether save draft.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean saveDraft()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the hierarchy with the latest master data.
    /// </summary>
    public void synchronize()
    {
        TaxReportHierarchySynchronizer_IN::newSynchronizer(hierarchyVersion)
            .synchronize();

        this.reload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeSetOffRules</Name>
				<Source><![CDATA[
    private void synchronizeSetOffRules()
    {
        TaxReportHierarchySetOffRuleDetails_IN      setoffRuleDetail;
        TaxReportHierarchySetOffRuleDirection_IN    setoffRuleDir;
        TaxReportHierarchySetOffRule_IN             setoffRule;
        TaxReportHrchyNodeCollectionDetails_IN      nodeCollectionDetail;
        TaxReportHrchyNodeCollection_IN             nodeCollection;
        TaxReportHierarchyNode_IN                   hierarchyNode;

        // Node collection detail records have been deleted along with node records
        delete_from setoffRuleDetail
            notExists join nodeCollectionDetail
                where nodeCollectionDetail.RecId == setoffRuleDetail.TaxReportHrchyNodeCollectionDetails_IN;

        delete_from nodeCollectionDetail
            notExists join hierarchyNode
                where hierarchyNode.RecId == nodeCollectionDetail.TaxReportHierarchyNode_IN
                   && hierarchyNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId;

        while select RecId from nodeCollection
            join TaxReportHierarchySetOffRule_IN from setoffRuleDir
                where setoffRuleDir.TaxReportHrchyNodeCollection_IN == nodeCollection.RecId
            join forUpdate setoffRule
                where setoffRule.RecId == setoffRuleDir.TaxReportHierarchySetOffRule_IN
            notExists join hierarchyNode
                where hierarchyNode.RecId == nodeCollection.TaxReportHierarchyNode_IN
                   && hierarchyNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
        {
            setoffRule.delete();
        }

        delete_from nodeCollection
            notExists join hierarchyNode
                where hierarchyNode.RecId == nodeCollection.TaxReportHierarchyNode_IN
                   && hierarchyNode.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfEditDisallowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// If is not editalbe, then throw errors.
    /// </summary>
    public void throwIfEditDisallowed()
    {
        if (editable == false)
        {
            throw error("@SYS133619");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy.
    /// </summary>
    /// <returns>
    /// Returns the hierarchy.
    /// </returns>
    public TaxReportHierarchy_IN getHierarchy()
    {
        return hierarchy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>