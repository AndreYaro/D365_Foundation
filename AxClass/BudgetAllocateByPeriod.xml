<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllocateByPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetAllocateByPeriod</c> class manages the budget allocation by ledger period process.
/// </summary>
public class BudgetAllocateByPeriod
{
    BudgetTransactionLine budgetTransactionLine;
    LedgerAllocateKeyId ledgerAllocateKeyId;

    TransDate startDate;

    LineNum newLineNumFactor;
    LineNum currentLineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNewLineNumFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the new line number factor based on the source <c>BudgetTransactionLine</c> record and
    ///    the total number of <c>LedgerAllocateTrans</c> lines present for the given <c>LedgerAllocateKey</c>
    ///    record.
    /// </summary>
    protected void calculateNewLineNumFactor()
    {
        BudgetTransactionLine budgetTransactionLineNextRow;
        LedgerAllocateTrans ledgerAllocateTrans;

        LineNum nextLineNum;
        LineNum periodCount;

        currentLineNum = budgetTransactionLine.LineNumber;

        // Get the next minimum budget transaction line number after the source budget transaction line number.
        select minof(LineNumber)
            from budgetTransactionLineNextRow
            where budgetTransactionLineNextRow.BudgetTransactionHeader == budgetTransactionLine.BudgetTransactionHeader &&
                 budgetTransactionLineNextRow.LineNumber > currentLineNum;

        nextLineNum = budgetTransactionLineNextRow.LineNumber;
        budgetTransactionLineNextRow = BudgetTransactionLine::findByTransactionHeaderLineNum(budgetTransactionLine.BudgetTransactionHeader, nextLineNum);

        if (budgetTransactionLineNextRow.RecId != 0 && nextLineNum != 0)
        {
            // When there is a budget transaction line after the source budget transaction line, the the new lines should be inserted between the two lines, so
            // count the number of leger allocation lines present for the given leger allocate key.
            select count(LineNum)
                from ledgerAllocateTrans
                where ledgerAllocateTrans.Key == ledgerAllocateKeyId;

            periodCount = ledgerAllocateTrans.LineNum;

            if (periodCount != 0)
            {
                // While calculating the new line number factor consider the new offset line that will be inserted after budget allocation.
                newLineNumFactor = (nextLineNum - currentLineNum) / (periodCount + 2);
            }
        }
        else
        {
            // When there is no budget transaction line after the source budget transaction line.
            newLineNumFactor = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the source <c>BudgetTransactionLine</c> record and creates new lines based on the period
    ///    allocation keys.
    /// </summary>
    /// <returns>
    ///    true if the budget transaction line is not processed, is not used by any other user, and the
    ///    <c>amountcur</c> field is not equal to 0; otherwise, false
    /// </returns>
    protected boolean checkBudgetTransactionLine()
    {
        boolean ret = true;
        BudgetTransactionHeader budgetTransactionHeader;

        budgetTransactionHeader = BudgetTransactionHeader::find(budgetTransactionLine.BudgetTransactionHeader);

        if (BudgetTransactionHeader::checkExist(budgetTransactionHeader.RecId) == false ||
            budgetTransactionHeader.isUserBlocked() == true)
        {
            // Budget transaction does not exist or is in use by another user; throw error to cancel the BudgetTransaction Line creation.
            throw error("@SYS21628");
        }

        if (budgetTransactionHeader.checkBudgetTransAvailableToComplete() == false)
        {
            // Source budget transaction has already been processed; throw error to cancel the BudgetTransaction Line creation.
            checkFailed("@SYS23025");
            throw error("@SYS21628");
        }

        if (budgetTransactionLine.TransactionCurrencyAmount == 0)
        {
            // Source budget transaction line has 0 amount; throw error to cancel the BudgetTransaction Line creation.
            throw error(strfmt("@SYS190317", LedgerDimensionFacade::getDisplayValueForLedgerDimension(budgetTransactionLine.LedgerDimension)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetTransactionLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies some of the budget transaction line details from the source budget transaction line to the
    ///    new line.
    /// </summary>
    /// <param name="_budgetTransactionLineNew">
    ///    A <c>BudgetTransactionLine</c> buffer that needs details like budget transaction header, ledger
    ///    account, and currency from the source budget transaction line.
    /// </param>
    protected void copyBudgetTransactionLineDetails(BudgetTransactionLine _budgetTransactionLineNew)
    {
        _budgetTransactionLineNew.TransactionCurrency = budgetTransactionLine.TransactionCurrency;
        _budgetTransactionLineNew.BudgetTransactionHeader = budgetTransactionLine.BudgetTransactionHeader;
        _budgetTransactionLineNew.BudgetType = budgetTransactionLine.BudgetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransactionLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new budget transaction lines based on the ledger allocation key and the source budget
    ///    transaction line. The <c>determineStartDate</c> and <c>calculateNewLineNumFactor</c> methods must
    ///    be called before this method in order get the starting of budget allocation and new line number
    ///    factor.
    /// </summary>
    protected void createBudgetTransactionLines()
    {
        BudgetTransactionLine budgetTransactionLineNew;
        BudgetTransactionLine budgetTransactionLineNewOffset;
        LedgerAllocateTrans ledgerAllocateTrans;

        LineNum offsetLineNum;
        TransDate newTransactionLineDate;
        LedgerAllocatePct periodAllocationPctProportion;
        LedgerAllocatePct allocatedPercentage;
        Currency currency;

        AmountCur distributionAmountForLine;
        Counter lineCount;

        ttsbegin;

        currentLineNum = budgetTransactionLine.LineNumber;

        // Store the first new line number for the offset Line and is used in later part of code if an offset line is needed to be inserted.
        offsetLineNum = this.getNextLineNum();

        currency = Currency::find(budgetTransactionLine.TransactionCurrency);

        select sum(PctProportion), count(RecId) from ledgerAllocateTrans
            where ledgerAllocateTrans.Key == ledgerAllocateKeyId;

        BudgetAllocatePercent totalPercentToAllocate = ledgerAllocateTrans.PctProportion / 100;
        AmountCur distributionAmountRemaining = currency.amount_Instance(budgetTransactionLine.TransactionCurrencyAmount * totalPercentToAllocate);
        int64 distributionCount = ledgerAllocateTrans.RecId;

        while select ledgerAllocateTrans
            order by ledgerAllocateTrans.Freq
            where ledgerAllocateTrans.Key == ledgerAllocateKeyId
        {
            newTransactionLineDate = this.determineTransactionDate(ledgerAllocateTrans);

            if (newTransactionLineDate >= budgetTransactionLine.Date)
            {
                // Should create new budget transaction lines for allocation dates after the given date in the source budget transaction line.
                budgetTransactionLineNew.clear();

                lineCount++;

                periodAllocationPctProportion = ledgerAllocateTrans.PctProportion / 100;

                this.copyBudgetTransactionLineDetails(budgetTransactionLineNew);

                budgetTransactionLineNew.LineNumber = this.getNextLineNum();
                budgetTransactionLineNew.Date = newTransactionLineDate;
                budgetTransactionLineNew.Quantity = decround((budgetTransactionLine.Quantity * periodAllocationPctProportion), 2) ;
                budgetTransactionLineNew.Price = budgetTransactionLine.Price;
                budgetTransactionLineNew.Comment = "@SYS132065";

                if (lineCount == distributionCount)
                {
                    distributionAmountForLine = distributionAmountRemaining;
                }
                else
                {
                    distributionAmountForLine = currency.amount_Instance(budgetTransactionLine.TransactionCurrencyAmount * periodAllocationPctProportion);
                    distributionAmountRemaining -= distributionAmountForLine;
                }

                budgetTransactionLineNew.TransactionCurrencyAmount = distributionAmountForLine;
                budgetTransactionLineNew.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                    distributionAmountForLine,
                    budgetTransactionLineNew.TransactionCurrency,
                    budgetTransactionLineNew.Date);

                if (ledgerAllocateTrans.DefaultDimension != 0)
                {
                    // The period allocation key line has default dimension defined for it.
                    // Merge the dimensions on the period allocation key line with the dimensions on the source budget transaction line.
                    budgetTransactionLineNew.LedgerDimension = BudgetTransactionManager::mergeDefaultDimWithLedgerDim(
                        ledgerAllocateTrans.DefaultDimension,
                        budgetTransactionLine.LedgerDimension,
                        budgetTransactionLineNew.Date);
                }
                else
                {
                    // The period allocation key line has no default dimensions defined for it; use the ledger dimension from the source budget transaction line.
                    budgetTransactionLineNew.LedgerDimension = budgetTransactionLine.LedgerDimension;
                }

                if (budgetTransactionLineNew.LedgerDimension != 0 && budgetTransactionLineNew.validateWrite())
                {
                    budgetTransactionLineNew.write();
                }
                else
                {
                    throw error('@Budget:BudgetPeriodAllocationError');
                }

                allocatedPercentage += ledgerAllocateTrans.PctProportion;
            }
        }

        if (allocatedPercentage > 0)
        {
            // Create an offset line for the allocated amount based on the allocated percentage.
            periodAllocationPctProportion = allocatedPercentage / 100;

            this.copyBudgetTransactionLineDetails(budgetTransactionLineNewOffset);

            budgetTransactionLineNewOffset.Date = budgetTransactionLine.Date;
            budgetTransactionLineNewOffset.LedgerDimension = budgetTransactionLine.LedgerDimension;
            budgetTransactionLineNewOffset.LineNumber = offsetLineNum;

            // The AmountCur value should be reversed for the offset transaction line.
            budgetTransactionLineNewOffset.TransactionCurrencyAmount = currency.amount_Instance((-1) * budgetTransactionLine.TransactionCurrencyAmount * periodAllocationPctProportion);

            budgetTransactionLineNewOffset.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                budgetTransactionLineNewOffset.TransactionCurrencyAmount,
                budgetTransactionLineNewOffset.TransactionCurrency,
                budgetTransactionLineNewOffset.Date);

            budgetTransactionLineNewOffset.Quantity = 0.00;
            budgetTransactionLineNewOffset.Price = 0.00 ;
            budgetTransactionLineNewOffset.Comment = "@SYS132065";

            if (budgetTransactionLineNewOffset.validateWrite())
            {
                budgetTransactionLineNewOffset.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the starting date before creating new budget transaction lines by using the fixed field
    ///    value of the <c>LedgerAllocateKey</c> buffer.
    /// </summary>
    protected void determineStartDate()
    {
        container fiscalYearStartEndDates;
        LedgerAllocateKey ledgerAllocateKey;

        ledgerAllocateKey = LedgerAllocateKey::find(ledgerAllocateKeyId);

        if (ledgerAllocateKey.Fixed)
        {
            // The starting date is the first opening period date of the company's fiscal year that the date falls in.
            fiscalYearStartEndDates = FiscalCalendars::findFiscalYearStartEndDatesByDate(
                                        Ledger::fiscalCalendar(),
                                        budgetTransactionLine.Date);

            startDate = conpeek(fiscalYearStartEndDates, 1);
        }
        else
        {
            // Starting date will be the source budget transaction line's date.
            startDate = budgetTransactionLine.Date;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the transaction date for the new budget transaction lines by creating an instance of the
    ///    <c>Futures</c> class that has the budget allocation starting date, frequency, and frequency code.
    /// </summary>
    /// <param name="_ledgerAllocateTrans">
    ///    An instance of the <c>LedgerAllocateTrans</c> table which is used in creating the <c>Futures</c>
    ///    class instance for getting the next transaction date based on the frequency and the frequency code.
    /// </param>
    /// <returns>
    ///    A <c>TransDate</c> object that uses the <c>Futures</c> class instance for the new budget
    ///    transaction line.
    /// </returns>
    protected TransDate determineTransactionDate(LedgerAllocateTrans _ledgerAllocateTrans)
    {
        Futures futures;

        futures = Futures::construct(startDate, _ledgerAllocateTrans.Freq, _ledgerAllocateTrans.FreqCode);
        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the next line number based on the current line number and the new line number factor.
    ///    The <c>calculateNewLineNumFactor</c> method must be called before this method to get the new line
    ///    number factor.
    /// </summary>
    /// <returns>
    ///    The <c>LineNum</c> value as the next line number based on the current line number and the new line
    ///    number factor.
    /// </returns>
    protected LineNum getNextLineNum()
    {
        LineNum nextLineNum;

        nextLineNum = currentLineNum + newLineNumFactor;

        currentLineNum = nextLineNum;

        if (nextLineNum == 0)
        {
            // To avoid a line number with value zero and two lines having the same line number,
            // calculate the next line number by manipulating the new line number factor.
            nextLineNum = newLineNumFactor / 2;
        }

        return nextLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetAllocateByPeriod</c> class.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    /// The <c>BudgetTransactionLine</c> record ID to allocate.
    /// </param>
    /// <param name="_ledgerAllocateKeyId">
    /// The ledger period allocation key.
    /// </param>
    protected void initialize(RecId _budgetTransactionLineId, LedgerAllocateKeyId _ledgerAllocateKeyId)
    {
        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineId);
        ledgerAllocateKeyId = _ledgerAllocateKeyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation of the <c>BudgetTransactionLine</c> record.
    /// </summary>
    protected void process()
    {
        if (this.checkBudgetTransactionLine() && BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date))
        {
            // When the source budget transaction line is a valid one.
            this.determineStartDate();
            this.calculateNewLineNumFactor();
            this.createBudgetTransactionLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the <c>BudgetTransactionLine</c> record based on the specified ledger period allocation key.
    /// </summary>
    /// <param name="_budgetTransactionLineId">
    /// The <c>BudgetTransactionLine</c> record ID to allocate.
    /// </param>
    /// <param name="_ledgerAllocateKeyId">
    /// The ledger period allocation key.
    /// </param>
    public static void allocateLine(RecId _budgetTransactionLineId, LedgerAllocateKeyId _ledgerAllocateKeyId)
    {
        BudgetAllocateByPeriod budgetAllocateByPeriod = new BudgetAllocateByPeriod();

        budgetAllocateByPeriod = new BudgetAllocateByPeriod();
        budgetAllocateByPeriod.initialize(_budgetTransactionLineId, _ledgerAllocateKeyId);
        budgetAllocateByPeriod.process();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>