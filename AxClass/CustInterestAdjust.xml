<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestAdjust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInterestAdjust</c> class is used to adjust the posted interest notes.
/// </summary>
class CustInterestAdjust
{
    CustTable custTable;
    CustInterestAdjustmentAction custInterestAdjustmentAction;
    CustInterestAdjustmentType custInterestAdjustmentType;
    TableId interestTableId;
    Notes notes;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInterestFeeEntry</Name>
				<Source><![CDATA[
    private void addInterestFeeEntry(CustInterestJour _custInterestJour, CustInvoiceLine _custInvoiceLine, Map _settlementMap)
    {
        CustTrans custTrans;

        if (_custInterestJour.FeeLastAdjustmentInvoice)
        {
            custTrans = CustTrans::findFromInvoice(CustInvoiceTable::findRecId(_custInterestJour.FeeLastAdjustmentInvoice).InvoiceId);
        }
        else
        {
            select firstonly custTrans
                where custTrans.Voucher == _custInterestJour.FeeVoucher &&
                    custTrans.TransDate == _custInterestJour.Updated &&
                    custTrans.AccountNum == _custInterestJour.AccountNum;
        }

        if (custTrans.RecId)
        {
            this.addMapEntry(custTrans, _custInvoiceLine.AmountCur, _settlementMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInterestTransEntry</Name>
				<Source><![CDATA[
    private void addInterestTransEntry(
        CustInterestJour _custInterestJour,
        CustInterestTrans _custInterestTrans,
        CustInvoiceLine _custInvoiceLine,
        Map _settlementMap,
        AmountCur _lineAmount = 0)
    {
        CustTrans custTrans;

        if (_custInterestTrans.LastAdjustmentInvoice)
        {
            custTrans = CustTrans::findFromInvoice(CustInvoiceTable::findRecId(_custInterestTrans.LastAdjustmentInvoice).InvoiceId);
        }
        else
        {
            custTrans = _custInterestTrans.getCustTrans();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.addMapEntry(custTrans, _lineAmount, _settlementMap);
        }
        else
        {
            this.addMapEntry(custTrans, _custInvoiceLine.AmountCur, _settlementMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMapEntry</Name>
				<Source><![CDATA[
    private void addMapEntry(
        CustTrans _custTrans,
        AmountCur _interestAmount,
        Map _settlementMap)
    {
        if (_settlementMap.exists(_custTrans))
        {
            _interestAmount += _settlementMap.lookup(_custTrans);
        }

        _settlementMap.insert(_custTrans, _interestAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInterestFee</Name>
				<Source><![CDATA[
    private void adjustInterestFee(InterestNote _interestNote, CustTrans _custTrans)
    {
        Map settlementMap = new Map(Types::Record, Types::Real);
        AmountCur totalWaiveInterestAmount;
        LedgerDimensionAccount ledgerDimensionAccount;
        CustInvoiceTable custInvoiceTable;
        CustInterestJour custInterestJour;
        CustInvoiceLine custInvoiceLine;

        custInterestJour = CustInterestJour::find(_interestNote, true);

        setPrefix(_interestNote);

        ttsbegin;

        if (this.isAdjustmentRequired(custInterestJour.FeeAdjustmentStatus)
            && abs(custInterestJour.Fee - custInterestJour.FeeWriteOffAmount) > 0)
        {
            custInvoiceTable = this.createCustInvoiceTable(custInterestJour, _custTrans.CurrencyCode);

            ledgerDimensionAccount = custInterestJour.feeLedgerDimension();
            if (!ledgerDimensionAccount)
            {
                throw error("@SYS322866");
            }

            custInvoiceLine = this.createCustInvoiceLineForInterestFee(custInterestJour, custInvoiceTable.RecId, ledgerDimensionAccount);
            totalWaiveInterestAmount += custInvoiceLine.AmountCur;
            this.addInterestFeeEntry(custInterestJour, custInvoiceLine, settlementMap);

            if (custInterestJour.TaxAmount)
            {
                custInvoiceLine = this.createCustInvoiceLineForSalesTax(custInterestJour, custInvoiceTable.RecId);
                this.addInterestFeeEntry(custInterestJour, custInvoiceLine, settlementMap);
                totalWaiveInterestAmount += custInvoiceLine.AmountCur;
            }

            this.settleInvoice(
                custInvoiceTable,
                custInterestJour,
                null,
                null,
                settlementMap,
                totalWaiveInterestAmount,
                true,
                _custTrans);
        }

        this.updateAdjustmentStatus(custInvoiceTable.RecId, custInterestJour, null, true);
        this.log(custInterestJour, custInvoiceTable.RecId, totalWaiveInterestAmount);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInterestNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the adjustment for interest note and general journal entity.
    /// </summary>
    /// <param name = "_interestNote">
    /// Value of <c>InterestNote</c>.
    /// </param>
    /// <param name = "_interestAdjustmentQuery">
    /// Query for adjusting the interest note.
    /// </param>
    /// <param name = "_custTrans">
    /// Current <c>CustTrans</c>.
    /// </param>
    private void adjustInterestNote(InterestNote _interestNote, Query _interestAdjustmentQuery, CustTrans _custTrans)
    {
        Map settlementMap = new Map(Types::Record, Types::Real);
        Set waivedInterestTransactionSet = new Set(Types::Record);
        QueryRun qr = new QueryRun(_interestAdjustmentQuery);
        AmountCur totalWaiveInterestAmount;
        LedgerDimensionAccount ledgerDimensionAccount;
        CustInvoiceTable custInvoiceTable;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustInvoiceLine custInvoiceLine;
        Set custInvoiceLineIdRefSet = new Set(Types::Int64);
        boolean interestAdjusted = false;
        AmountCur invoiceLineAdjustmentAmount;

        custInterestJour = CustInterestJour::find(_interestNote, true);

        // At this point we are processing the adjustment for one interest note and general journal entry,
        // which could include multiple transactions. Iterate over all interest transactions to adjust
        // them as necessary.

        setPrefix(_interestNote);
        if (QueryRun::getQueryRowCount(_interestAdjustmentQuery, 1) > 0)
        {
            while (qr.next())
            {
                custInterestTrans = qr.get(tableNum(CustInterestTrans));

                if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
                {
                    if (abs(custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount) > 0)
                    {
                        if (!interestAdjusted)
                        {
                            // Only create this when an adjustment is required, and only the first time through.
                            custInvoiceTable = this.createCustInvoiceTable(custInterestJour, _custTrans.CurrencyCode);
                        }

                        interestAdjusted = true;

                        if (!ledgerDimensionAccount || custInterestJour.checkInterestCalcAccountChoice())
                        {
                            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                            {
                                ledgerDimensionAccount = CustInterestAdjust::getAccountToUse(custInterestJour, custInterestTrans.RecId, custInterestTrans);
                            }
                            else
                            {
                                ledgerDimensionAccount = CustInterestAdjust::getAccountToUse(custInterestJour, custInterestTrans.RecId);
                            }
                        }
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && !ledgerDimensionAccount
                                && (CustTrans::find(custInterestTrans.CustTransId).TransType != LedgerTransType::Cust
                                || LedgerParameters::find().JournalizingDefinitionEnableValue != NoYes::Yes))
                        {
                            throw error("@SYS322866");
                        }
                        else
                        if (!ledgerDimensionAccount)
                        {
                            throw error("@SYS322866");
                        }

                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            invoiceLineAdjustmentAmount = this.createCustInvoiceLines(
                                                                custInterestJour,
                                                                custInterestTrans,
                                                                custInvoiceTable,
                                                                ledgerDimensionAccount);

                            this.addInterestTransEntry(custInterestJour, custInterestTrans, custInvoiceLine, settlementMap, invoiceLineAdjustmentAmount);

                            totalWaiveInterestAmount += invoiceLineAdjustmentAmount;
                        }
                        else
                        {
                            custInvoiceLine = this.createCustInvoiceLine(
                            custInterestJour,
                            custInterestTrans,
                            custInvoiceTable,
                            ledgerDimensionAccount);

                            this.addInterestTransEntry(custInterestJour, custInterestTrans, custInvoiceLine, settlementMap);

                            totalWaiveInterestAmount += custInvoiceLine.AmountCur;
                        }

                        if (custInterestTrans.CustInvoiceLineIdRef)
                        {
                            custInvoiceLineIdRefSet.add(custInterestTrans.CustInvoiceLineIdRef);
                        }
                    }

                    // Always add the transaction to the set so the adjustment status gets updated
                    waivedInterestTransactionSet.add(custInterestTrans);
                }

                if (this.isLastInterestDateUpdateRequired(custInterestTrans))
                {
                    this.updateLastInterestDate(custInterestTrans);

                    // Sets require unique values, so this will not result in duplicates if the interest trans
                    // was also adjusted. This is necessary to set the adjustment status correctly in the
                    // case of a reversal after a previous waive.
                    waivedInterestTransactionSet.add(custInterestTrans);
                }
            }

            if (interestAdjusted)
            {
                this.settleInvoice(
                    custInvoiceTable,
                    custInterestJour,
                    custInvoiceLineIdRefSet,
                    waivedInterestTransactionSet,
                    settlementMap,
                    totalWaiveInterestAmount,
                    false,
                    _custTrans);
            }

            this.updateAdjustmentStatus(custInvoiceTable.RecId, custInterestJour, waivedInterestTransactionSet, false);
            this.log(custInterestJour, custInvoiceTable.RecId, totalWaiveInterestAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInterestTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the adjustment for interest note and general journal entity.
    /// </summary>
    /// <param name = "_interestNote">
    /// Value of <c>InterestNote</c>.
    /// </param>
    /// <param name = "_interestAdjustmentQuery">
    /// Query for adjusting the interest note.
    /// </param>
    /// <param name = "_custTrans">
    /// Current <c>CustTrans</c>.
    /// </param>
    private void adjustInterestTrans(InterestNote _interestNote, CustTrans _custTrans, Set _interestTransSet)
    {
        #OCCRetryCount
        Map settlementMap = new Map(Types::Record, Types::Real);
        Set waivedInterestTransactionSet = new Set(Types::Record);
        AmountCur totalWaiveInterestAmount;
        LedgerDimensionAccount ledgerDimensionAccount;
        CustInvoiceTable custInvoiceTable;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustInvoiceLine custInvoiceLine;
        SetEnumerator interestTransSetEnumerator;
        Set custInvoiceLineIdRefSet = new Set(Types::Int64);
        boolean interestAdjusted = false;

        AmountCur invoiceLineAdjustmentAmount;

        custInterestJour = CustInterestJour::find(_interestNote, true);

        interestTransSetEnumerator = _interestTransSet.getEnumerator();

        setPrefix(_interestNote);

        ttsbegin;

        while (interestTransSetEnumerator.moveNext())
        {
            custInterestTrans = interestTransSetEnumerator.current();

            if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
            {
                if (abs(custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount) > 0)
                {
                    if (!interestAdjusted)
                    {
                        // Only create this when an adjustment is required, and only the first time through.
                        custInvoiceTable = this.createCustInvoiceTable(custInterestJour, _custTrans.CurrencyCode);
                    }

                    interestAdjusted = true;

                    if (!ledgerDimensionAccount || custInterestJour.checkInterestCalcAccountChoice())
                    {
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            ledgerDimensionAccount = CustInterestAdjust::getAccountToUse(custInterestJour, custInterestTrans.RecId, custInterestTrans);
                        }
                        else
                        {
                            ledgerDimensionAccount = CustInterestAdjust::getAccountToUse(custInterestJour, custInterestTrans.RecId);
                        }
                    }

                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && !ledgerDimensionAccount
                            && (CustTrans::find(custInterestTrans.CustTransId).TransType != LedgerTransType::Cust
                            || LedgerParameters::find().JournalizingDefinitionEnableValue != NoYes::Yes))
                    {
                        throw error("@SYS322866");
                    }
                    else if (!ledgerDimensionAccount)
                    {
                        throw error("@SYS322866");
                    }

                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        invoiceLineAdjustmentAmount = this.createCustInvoiceLines(
                                                            custInterestJour,
                                                            custInterestTrans,
                                                            custInvoiceTable,
                                                            ledgerDimensionAccount);

                        this.addInterestTransEntry(custInterestJour, custInterestTrans, custInvoiceLine, settlementMap, invoiceLineAdjustmentAmount);

                        totalWaiveInterestAmount += invoiceLineAdjustmentAmount;
                    }
                    else
                    {
                        custInvoiceLine = this.createCustInvoiceLine(
                            custInterestJour,
                            custInterestTrans,
                            custInvoiceTable,
                            ledgerDimensionAccount);

                        this.addInterestTransEntry(custInterestJour, custInterestTrans, custInvoiceLine, settlementMap);

                        totalWaiveInterestAmount += custInvoiceLine.AmountCur;
                    }

                    if (custInterestTrans.CustInvoiceLineIdRef)
                    {
                        custInvoiceLineIdRefSet.add(custInterestTrans.CustInvoiceLineIdRef);
                    }
                }

                // Always add the transaction to the set so the adjustment status gets updated
                waivedInterestTransactionSet.add(custInterestTrans);
            }

            if (this.isLastInterestDateUpdateRequired(custInterestTrans))
            {
                this.updateLastInterestDate(custInterestTrans);

                // Sets require unique values, so this will not result in duplicates if the interest trans
                // was also adjusted. This is necessary to get the adjustment status set correctly in the
                // the case of a reversal after a previous waive.
                waivedInterestTransactionSet.add(custInterestTrans);
            }
        }

        if (interestAdjusted)
        {
            this.settleInvoice(
                custInvoiceTable,
                custInterestJour,
                custInvoiceLineIdRefSet,
                waivedInterestTransactionSet,
                settlementMap,
                totalWaiveInterestAmount,
                false,
                _custTrans);
        }

        this.updateAdjustmentStatus(custInvoiceTable.RecId, custInterestJour, waivedInterestTransactionSet, false);
        this.log(custInterestJour, custInvoiceTable.RecId, totalWaiveInterestAmount);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentLabel</Name>
				<Source><![CDATA[
    private str adjustmentLabel(CustInterestAdjustmentAction _custInterestAdjustmentAction)
    {
        str text;
        switch (_custInterestAdjustmentAction)
        {
            case CustInterestAdjustmentAction::Waive:
                text = "@SYS322901";
                break;

            case CustInterestAdjustmentAction::ReInstate:
                text = "@SYS322899";
                break;

            case CustInterestAdjustmentAction::Reverse:
                text = "@SYS322900";
                break;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToBeWaivedByInterestNote</Name>
				<Source><![CDATA[
    private AmountCur amountToBeWaivedByInterestNote(
        CustInterestJour _custInterestJour,
        Query _interestAdjustmentQuery,
        CurrencyCode _currencyCode
        )
    {
        QueryRun qr = new QueryRun(_interestAdjustmentQuery);
        CustInterestTrans custInterestTrans;
        AmountCur totalInterestAmount;

        while (qr.next())
        {
            custInterestTrans = qr.get(tableNum(CustInterestTrans));

            if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
            {
                if (custInterestTrans.CurrencyCode == _currencyCode)
                {
                    totalInterestAmount += custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount;
                }
                else
                {
                    totalInterestAmount += CurrencyExchangeHelper::curAmount2CurAmount(custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount, custInterestTrans.CurrencyCode, _currencyCode);
                }
            }
        }

        return totalInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToBeWaivedByInterestTrans</Name>
				<Source><![CDATA[
    private AmountCur amountToBeWaivedByInterestTrans(
        CustInterestJour _custInterestJour,
        CurrencyCode _currencyCode,
        Set _interestTransSet)
    {
        CustInterestTrans custInterestTrans;
        AmountCur totalInterestAmount;
        SetEnumerator interestTransSetEnumerator;

        interestTransSetEnumerator = _interestTransSet.getEnumerator();

        while (interestTransSetEnumerator.moveNext())
        {
            custInterestTrans = interestTransSetEnumerator.current();

            if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
            {
                if (custInterestTrans.CurrencyCode == _currencyCode)
                {
                    totalInterestAmount += custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount;
                }
                else
                {
                    totalInterestAmount += CurrencyExchangeHelper::curAmount2CurAmount(custInterestTrans.InterestAmount - custInterestTrans.WriteOffAmount, custInterestTrans.CurrencyCode, _currencyCode);
                }
            }
        }

        return totalInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscAmount</Name>
				<Source><![CDATA[
    private DiscAmount calcCashDiscAmount(AmountCur _custTransAmount, DiscAmount _cashDiscAmount, AmountCur _totalWaiveInterestAmount)
    {
        return _custTransAmount / _totalWaiveInterestAmount * _cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount cashDiscountLedgerDimension(CustTrans _custTrans, CustSettlement _custSettlement)
    {
        CustInvoiceJour custInvoiceJour;
        CashDiscCode cashDiscCode;
        LedgerDimensionDefaultAccount taxLedgerDimension;
        CustTrans custTransOffset;

        if (_custSettlement.CanBeReversed && _custSettlement.UtilizedCashDisc && _custSettlement.CashDiscountLedgerDimension)
        {
            return _custSettlement.CashDiscountLedgerDimension;
        }

        select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceId == _custTrans.Invoice &&
                custInvoiceJour.InvoiceAccount == _custTrans.AccountNum &&
                custInvoiceJour.InvoiceDate == _custTrans.TransDate &&
                custInvoiceJour.LedgerVoucher == _custTrans.Voucher;

        if (!custInvoiceJour)
        {
            select firstonly CashDiscCode, TaxGroup, SumTax, LedgerVoucher, InvoiceDate from custInvoiceJour
                exists join custTransOffset
                where custTransOffset.RecId == _custTrans.OffsetRecid &&
                    custInvoiceJour.InvoiceId == custTransOffset.Invoice &&
                    custInvoiceJour.InvoiceAccount == custTransOffset.AccountNum &&
                    custInvoiceJour.InvoiceDate == custTransOffset.TransDate &&
                    custInvoiceJour.LedgerVoucher == custTransOffset.Voucher;
        }

        if (custInvoiceJour)
        {
            cashDiscCode = custInvoiceJour.CashDiscCode;
            if (custInvoiceJour.TaxGroup && custInvoiceJour.SumTax)
            {
                taxLedgerDimension = this.findTaxLedgerDimension(custInvoiceJour.LedgerVoucher, custInvoiceJour.InvoiceDate);
                if (taxLedgerDimension)
                {
                    return taxLedgerDimension;
                }
            }
        }

        if (!cashDiscCode)
        {
            cashDiscCode = CustTable::find(_custTrans.AccountNum).CashDisc;
        }

        if (cashDiscCode)
        {
            return CashDisc::paidLedgerDimension(cashDiscCode);
        }

        return LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::CustCashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashDisc</Name>
				<Source><![CDATA[
    private CustSettlement checkCashDisc(CustTrans _custTrans)
    {
        CustSettlement custSettlement;
        CustTrans custTrans;

        select custSettlement
            exists join custTrans
            where custSettlement.SettlementVoucher == custTrans.Voucher &&
                custSettlement.TransCompany == custTrans.DataAreaId &&
                custSettlement.AccountNum == custTrans.AccountNum &&
                custTrans.LastSettleVoucher == _custTrans.Voucher &&
                custTrans.DataAreaId == _custTrans.DataAreaId &&
                custTrans.AccountNum == _custTrans.AccountNum;

        return custSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterestFee</Name>
				<Source><![CDATA[
    private void checkInterestFee(CustInterestJour _custInterestJour, boolean _interestNoteFound)
    {
        if ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && custInterestAdjustmentType == CustInterestAdjustmentType::InterestFees && _custInterestJour.FeeAdjustmentStatus != CustInterestAdjustmentStatus::None) ||
            (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate && custInterestAdjustmentType == CustInterestAdjustmentType::InterestFees && _custInterestJour.FeeAdjustmentStatus != CustInterestAdjustmentStatus::Waive))
        {
            if (!_interestNoteFound)
            {
                throw error (strFmt ("@SYS330265", custInterestAdjustmentAction));
            }
            else
            {
                error (strFmt ("@SYS330265", custInterestAdjustmentAction));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterestNote</Name>
				<Source><![CDATA[
    private boolean checkInterestNote(CustInterestJour _custInterestJour,Query _interestAdjustmentQuery)
    {
        CustInterestTrans custInterestTrans;
        boolean noRecordExist;
        boolean interestNoteFound = true;

        if (QueryRun::getQueryRowCount(_interestAdjustmentQuery, 1) == 0)
        {
            interestNoteFound = false;
            if (custInterestAdjustmentAction != CustInterestAdjustmentAction::Reverse)
            {
                this.checkInterestFee(_custInterestJour, interestNoteFound);
            }
            else
            {
                throw error (strFmt ("@SYS330265", custInterestAdjustmentAction));
            }
        }
        else
        {
            while select AdjustmentStatus from custInterestTrans
                where custInterestTrans.InterestNote == _custInterestJour.InterestNote
            {
                if ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && custInterestTrans.AdjustmentStatus != CustInterestAdjustmentStatus::None) ||
                 (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate && custInterestTrans.AdjustmentStatus != CustInterestAdjustmentStatus::Waive) ||
                 (custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse && custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Reverse))
                {
                    noRecordExist = true;
                    break;
                }
            }
            if (noRecordExist)
            {
                info (strFmt("@SYS335492", _custInterestJour.InterestNote));
            }
        }
        return interestNoteFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterestToAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the interest note or interest transaction to adjust exists.
    /// </summary>
    /// <param name="_totalWaivedAmount">
    /// The amount that has been waived for the specified customer.
    /// </param>
    /// <param name="_waivelimitByCurrency">
    /// The waive amount limit for the specified customer.
    /// </param>
    /// <remarks>
    /// When the interest note or interest transaction does not exist, an error message is displayed.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The adjustment type is waived and the amount to be waived is more than the limit set in customer
    /// parameters.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// No interest note or interest transaction found for the given record of <c>CustTable</c> table.
    /// </exception>
    public void checkInterestToAdjust(
        AmountCur _totalWaivedAmount,
        AmountCur _waivelimitByCurrency)
    {
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustParameters custParameters;
        boolean interestExist;
        int days;

        boolean doesInterestExist(date _updated)
        {
            if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive)
            {
                days = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - _updated;
                if (custParameters.MinimumWaiveDays && custParameters.MinimumWaiveDays > days)
                {
                    return false;
                }
                if (!custParameters.MaximumWaiveDays || custParameters.MaximumWaiveDays >= days)
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
            return false;
        }

        custParameters = CustParameters::find();

        switch (custInterestAdjustmentType)
        {
            case CustInterestAdjustmentType::InterestNote:
                while select Updated from custInterestJour
                    where custInterestJour.Status == PrintPostCancel::Posted &&
                            custInterestJour.AccountNum == custTable.AccountNum
                        exists join custInterestTrans
                        where custInterestTrans.InterestNote == custInterestJour.InterestNote &&
                                ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse &&
                                (custInterestTrans.AdjustmentStatus != CustInterestAdjustmentStatus::Reverse) ||
                                (custInterestJour.FeeAdjustmentStatus != CustInterestAdjustmentStatus::Reverse && custInterestJour.Fee)) ||
                                (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive &&
                                (custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::None) ||
                                (custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::None && custInterestJour.Fee)) ||
                                (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate &&
                                (custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Waive) ||
                                (custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::Waive && custInterestJour.Fee)))
                {
                    interestExist = doesInterestExist(custInterestJour.Updated);
                    if (interestExist)
                    {
                        break;
                    }
                }
                break;

            case CustInterestAdjustmentType::InterestTransaction:
                while select Updated from custInterestJour
                    where custInterestJour.Status == PrintPostCancel::Posted &&
                            custInterestJour.AccountNum == custTable.AccountNum
                    join RecId, InterestAmount from custInterestTrans
                        where custInterestTrans.InterestNote == custInterestJour.InterestNote &&
                                custInterestTrans.InterestAmount &&
                                ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse &&
                                custInterestTrans.AdjustmentStatus != CustInterestAdjustmentStatus::Reverse) ||
                                (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive &&
                                custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::None) ||
                                (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate &&
                                custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Waive))
                {
                    interestExist = doesInterestExist(custInterestJour.Updated);
                    if (interestExist)
                    {
                        break;
                    }
                }
                break;

            case CustInterestAdjustmentType::InterestFees:
                while select Updated from custInterestJour
                    where custInterestJour.Status == PrintPostCancel::Posted &&
                            custInterestJour.AccountNum == custTable.AccountNum &&
                            custInterestJour.Fee &&
                            ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse &&
                            custInterestJour.FeeAdjustmentStatus != CustInterestAdjustmentStatus::Reverse) ||
                            (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive &&
                            custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::None) ||
                            (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate &&
                            custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::Waive))
                {
                    interestExist = doesInterestExist(custInterestJour.Updated);
                    if (interestExist)
                    {
                        break;
                    }
                }
                break;
        }

        if (!interestExist)
        {
            switch (custInterestAdjustmentType)
            {
                case CustInterestAdjustmentType::InterestNote:
                    throw error("@SYS322858");

                case CustInterestAdjustmentType::InterestTransaction:
                    throw error("@SYS322859");

                case CustInterestAdjustmentType::InterestFees:
                    throw error("@SYS322860");
            }
        }
        if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && _waivelimitByCurrency && _totalWaivedAmount >= _waivelimitByCurrency)
        {
            throw error(strFmt("@SYS322861", _waivelimitByCurrency));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterestTrans</Name>
				<Source><![CDATA[
    private void checkInterestTrans(CustInterestJour _custInterestJour, Set _interestTransSet)
    {
        CustInterestTrans custInterestTransLocal;
        SetEnumerator interestTransSetEnumerator;

        interestTransSetEnumerator = _interestTransSet.getEnumerator();

        while (interestTransSetEnumerator.moveNext())
        {
            custInterestTransLocal = interestTransSetEnumerator.current();
            if ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && custInterestTransLocal.AdjustmentStatus != CustInterestAdjustmentStatus::None) ||
                (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate && custInterestTransLocal.AdjustmentStatus != CustInterestAdjustmentStatus::Waive) ||
                (custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse && custInterestTransLocal.AdjustmentStatus == CustInterestAdjustmentStatus::Reverse))
            {
                throw error (strFmt ("@SYS330265", custInterestAdjustmentAction));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCopyOfInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the invoice line by copying the invoice line on which interest has been calculated.
    /// </summary>
    /// <param name="_custInterestJour">
    /// The <c>CustInterestJour</c> table buffer to use.
    /// </param>
    /// <param name="_invoiceAmount">
    /// The amount to use.
    /// </param>
    /// <param name="_custInterestTrans">
    /// The <c>CustInterestTrans</c> table buffer to use.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> table buffer to use.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The interest revenue ledger dimension to use.
    /// </param>
    /// <param name="_originalInvoiceLineId">
    /// The record ID of the original invoice line on which interest has been calculated.
    /// </param>
    /// <param name="_custBillingCodeRecId">
    /// The record ID of customer billing code record.
    /// </param>
    /// <returns>
    /// The <c>CustInvoiceLine</c> table buffer.
    /// </returns>
    private CustInvoiceLine createCopyOfInvoiceLine(
        CustInterestJour _custInterestJour,
        AmountCur _invoiceAmount,
        CustInterestTrans _custInterestTrans,
        CustInvoiceTable _custInvoiceTable,
        LedgerDimensionAccount _ledgerDimensionAccount,
        RefRecId _originalInvoiceLineId,
        RefRecId _custBillingCodeRecId)
    {
        CustInvoiceLine custInvoiceLine;
        int amountFactor;

        amountFactor = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? 1 : -1;
        custInvoiceLine.Description = strFmt("@SYS322896", this.adjustmentLabel(custInterestAdjustmentAction), custInterestAdjustmentType != CustInterestAdjustmentType::InterestTransaction ? _custInterestJour.InterestNote : _custInterestTrans.Invoice);
        custInvoiceLine.ParentRecId = _custInvoiceTable.RecId;
        custInvoiceLine.DefaultDimension = _custInterestJour.DefaultDimension;
        custInvoiceLine.LedgerDimension = _ledgerDimensionAccount;
        custInvoiceLine.InvoiceTxt = strFmt("@SYS322898", _custInterestJour.InterestNote);
        custInvoiceLine.AmountCur = amountFactor * (_invoiceAmount);
        custInvoiceLine.CustBillingCode = _custBillingCodeRecId;
        custInvoiceLine.CorrectedCustInvoiceLine = _originalInvoiceLineId;
        custInvoiceLine.insert();

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLine</Name>
				<Source><![CDATA[
    private CustInvoiceLine createCustInvoiceLine(
        CustInterestJour _custInterestJour,
        CustInterestTrans _custInterestTrans,
        CustInvoiceTable _custInvoiceTable,
        LedgerDimensionAccount _ledgerDimensionAccount)
    {
        CustInvoiceLine custInvoiceLine;
        int amountFactor;

        amountFactor = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? 1 : -1;
        custInvoiceLine.Description = strFmt("@SYS322896", this.adjustmentLabel(custInterestAdjustmentAction), custInterestAdjustmentType != CustInterestAdjustmentType::InterestTransaction ? _custInterestJour.InterestNote : _custInterestTrans.Invoice);
        custInvoiceLine.ParentRecId = _custInvoiceTable.RecId;
        custInvoiceLine.DefaultDimension = _custInterestJour.DefaultDimension;
        custInvoiceLine.LedgerDimension = _ledgerDimensionAccount;
        custInvoiceLine.InvoiceTxt = strFmt("@SYS322898", _custInterestJour.InterestNote);
        custInvoiceLine.AmountCur = amountFactor * (_custInterestTrans.InterestAmount - _custInterestTrans.WriteOffAmount);
          
        LogisticsAddressCountryRegionISOCode countryRegion = SysCountryRegionCode::countryInfo(curext());

        // Quantity value on the custinvoiceline is being defaulted to '1' to address XML Validation for waiving and reinstating customer interest notes in Mexico entity when CFDI parameters are enabled.
        if (CredManCustInterestNoteXMLValidationWhenCFDIParametersEnabledFlight::instance().isEnabled() && countryRegion == #isoMX)
        {
            custInvoiceLine.Quantity = 1;
        }
        
        if (custInvoiceLine.AmountCur != 0)
        {
            custInvoiceLine.insert();
        }

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLineForCashDisc</Name>
				<Source><![CDATA[
    private CustInvoiceLine createCustInvoiceLineForCashDisc(
        CustInterestJour _custInterestJour,
        CustInvoiceTable _custInvoiceTable,
        AmountCur _totalWaiveInterestAmount,
        CustTrans _custTrans,
        CustSettlement _custSettlement)
    {
        CustInvoiceLine custInvoiceLine;
        int amountFactor;
        DiscAmount updatedCashDiscAmount;
        LedgerDimensionAccount cashDiscLedgerDimension;

        cashDiscLedgerDimension = this.cashDiscountLedgerDimension(_custTrans, _custSettlement);
        updatedCashDiscAmount = this.calcCashDiscAmount(_custTrans.AmountCur, _custSettlement.UtilizedCashDisc, _totalWaiveInterestAmount);
        amountFactor = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? -1 : 1;
        custInvoiceLine.Description = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? strFmt("@SYS330960", _custInterestJour.InterestNote) : strFmt("@SYS330959", _custInterestJour.InterestNote);
        custInvoiceLine.ParentRecId = _custInvoiceTable.RecId;
        custInvoiceLine.DefaultDimension = _custInterestJour.DefaultDimension;
        custInvoiceLine.LedgerDimension = cashDiscLedgerDimension;
        custInvoiceLine.InvoiceTxt = custInvoiceLine.Description;
        custInvoiceLine.AmountCur = amountFactor * _custSettlement.UtilizedCashDisc;

        if (custInvoiceLine.AmountCur != 0)
        {
            custInvoiceLine.insert();
        }

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLineForInterestFee</Name>
				<Source><![CDATA[
    private CustInvoiceLine createCustInvoiceLineForInterestFee(
        CustInterestJour _custInterestJour,
        RefRecId _custInvoiceTableId,
        LedgerDimensionAccount _ledgerDimensionAccount)
    {
        CustInvoiceLine custInvoiceLine;
        int amountFactor;

        amountFactor = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? 1 : -1;
        custInvoiceLine.Description = strFmt("@SYS322897", this.adjustmentLabel(custInterestAdjustmentAction), _custInterestJour.InterestNote);
        custInvoiceLine.ParentRecId = _custInvoiceTableId;
        custInvoiceLine.DefaultDimension = _custInterestJour.DefaultDimension;
        custInvoiceLine.LedgerDimension = _ledgerDimensionAccount;
        custInvoiceLine.InvoiceTxt = strFmt("@SYS322898", _custInterestJour.InterestNote);
        custInvoiceLine.AmountCur = amountFactor * (_custInterestJour.Fee - _custInterestJour.FeeWriteOffAmount);
        if (custInvoiceLine.AmountCur != 0)
        {
            custInvoiceLine.insert();
        }

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLineForSalesTax</Name>
				<Source><![CDATA[
    private CustInvoiceLine createCustInvoiceLineForSalesTax(
        CustInterestJour _custInterestJour,
        RecId _custInvoiceTableRecId)
    {
        CustInvoiceLine custInvoiceLine;
        int amountFactor;

        amountFactor = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? 1 : -1;
        custInvoiceLine.Description = strFmt("@SYS322896", this.adjustmentLabel(custInterestAdjustmentAction), custInterestAdjustmentType != CustInterestAdjustmentType::InterestTransaction ? _custInterestJour.InterestNote : _custInterestJour.TaxGroup);
        custInvoiceLine.ParentRecId = _custInvoiceTableRecId;
        custInvoiceLine.DefaultDimension = _custInterestJour.DefaultDimension;
        custInvoiceLine.LedgerDimension = this.getLedgerDimensionForSalesTax(_custInterestJour);
        custInvoiceLine.InvoiceTxt = strFmt("@SYS322898", _custInterestJour.InterestNote);
        custInvoiceLine.AmountCur = amountFactor * _custInterestJour.TaxAmount;
        if (custInvoiceLine.AmountCur != 0)
        {
            custInvoiceLine.insert();
        }

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the invoice lines by copying the invoice lines on which interest has been calculated.
    /// </summary>
    /// <param name="_custInterestJour">
    /// The <c>CustInterestJour</c> table buffer to use.
    /// </param>
    /// <param name="_custInterestTrans">
    /// The <c>CustInterestTrans</c> table buffer to use.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// The <c>custInvoiceTable</c> table buffer to use.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// The interest revenue ledger dimension to use.
    /// </param>
    /// <returns>
    /// The sum of invoice line amounts that have been created.
    /// </returns>
    private AmountCur createCustInvoiceLines(
        CustInterestJour _custInterestJour,
        CustInterestTrans _custInterestTrans,
        CustInvoiceTable _custInvoiceTable,
        LedgerDimensionAccount _ledgerDimensionAccount)
    {
        CustInvoiceLine interestCustInvoiceLine, newCustInvoiceLine;
        CustTrans localCustTrans;
        CustnterestTransLineIdRef_Invoice localCustnterestTransLineIdRef_Invoice;
        CustInterestTransLine localCustInterestTransLine;
        Percent interestPercent;
        AmountCur totalAdjustedAmount, amountToBeAdjusted, currentTransAdjustedAmount, pennyDifferenceAmount;
        RefRecId totalInterestTransCount;
        Counter currentLineNum;

        //Retrieve the customer transaction on which interest has been calculated.
        localCustTrans = CustTrans::find(_custInterestTrans.CustTransId);

        if (localCustTrans.TransType == LedgerTransType::Cust && LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes)
        {
            //Below queries should be modified in parallel to avoid miscalculations.
            select count(RecId) from localCustInterestTransLine
                where localCustInterestTransLine.CustInterestTrans == _custInterestTrans.RecId;

            interestPercent = 1 - (_custInterestTrans.WriteOffAmount / _custInterestTrans.InterestAmount);
            totalInterestTransCount = localCustInterestTransLine.RecId;

            while select localCustInterestTransLine
                where localCustInterestTransLine.CustInterestTrans == _custInterestTrans.RecId
            {
                currentLineNum++;
                currentTransAdjustedAmount = CurrencyExchange::round(localCustInterestTransLine.InterestAmount * interestPercent, _custInterestTrans.CurrencyCode);
                amountToBeAdjusted += currentTransAdjustedAmount;

                if (currentLineNum == totalInterestTransCount && amountToBeAdjusted != (_custInterestTrans.InterestAmount - _custInterestTrans.WriteOffAmount))
                {
                    pennyDifferenceAmount = (_custInterestTrans.InterestAmount - _custInterestTrans.WriteOffAmount) - amountToBeAdjusted;
                    currentTransAdjustedAmount += pennyDifferenceAmount;
                }

                select firstonly AmountCur, RecId, CustBillingCode from interestCustInvoiceLine
                    exists join RecId from localCustnterestTransLineIdRef_Invoice
                    where localCustnterestTransLineIdRef_Invoice.CustInterestLineType == CustInterestLineType::Customer
                       && localCustnterestTransLineIdRef_Invoice.CustInvoiceLine == interestCustInvoiceLine.RecId
                       && localCustnterestTransLineIdRef_Invoice.RecId == localCustInterestTransLine.CustInterestTransLineIdRef;

                newCustInvoiceLine = this.createCopyOfInvoiceLine(_custInterestJour,
                                                                             currentTransAdjustedAmount,
                                                                             _custInterestTrans,
                                                                             _custInvoiceTable,
                                                                             CustInterestHelper::getInterestTransLedgerAccount(
                                                                                        CustInterestLedgerDimensionsOptions_PSN::InterestLinesLedgerDimension,
                                                                                        localCustInterestTransLine),
                                                                             interestCustInvoiceLine.RecId,
                                                                             interestCustInvoiceLine.CustBillingCode);
                totalAdjustedAmount += newCustInvoiceLine.AmountCur;
            }
        }
        else
        {
            newCustInvoiceLine = this.createCustInvoiceLine(_custInterestJour,
                                                            _custInterestTrans,
                                                            _custInvoiceTable,
                                                            _ledgerDimensionAccount);

            totalAdjustedAmount = newCustInvoiceLine.AmountCur;
        }

        return totalAdjustedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the initialized record in <c>CustInvoiceTable</c> table buffer.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A <c>CustInterestJour</c> table buffer.
    /// </param>
    /// <param name = "_currencyCode">
    ///     Currency code.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTable</c> table buffer.
    /// </returns>
    private CustInvoiceTable createCustInvoiceTable(
        CustInterestJour _custInterestJour,
        CurrencyCode _currencyCode)
    {
        CustInvoiceTable custInvoiceTable = this.initCustInvoiceTable(_custInterestJour, _currencyCode);

        custInvoiceTable.insert();

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>CustInvoiceTable</c>.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A <c>CustInterestJour</c> table buffer.
    /// </param>
    /// <param name = "_currencyCode">
    ///     Currency code.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTable</c> table buffer.
    /// </returns>
    protected CustInvoiceTable initCustInvoiceTable(CustInterestJour _custInterestJour, CurrencyCode _currencyCode)
    {
        CustInvoiceTable custInvoiceTable;
        TransDate invoiceDate;

        invoiceDate = CustParameters::find().AdjustmentDateToUse == CustInterestAdjustmentDateToUse::InterestNoteDate ? _custInterestJour.Updated : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        custInvoiceTable.initFromCustTable(CustTable::find(_custInterestJour.AccountNum));
        custInvoiceTable.DueDate = invoiceDate;
        custInvoiceTable.InvoiceDate = invoiceDate;
        custInvoiceTable.CurrencyCode = _currencyCode;
        custInvoiceTable.PostingProfile = _custInterestJour.PostingProfile;
        custInvoiceTable.DefaultDimension = _custInterestJour.DefaultDimension;

        // This logic regarding cash discount is done by default, but this code is here to ensure
        // it is clear that no cash discounts should be included on the correcting invoice.
        custInvoiceTable.CashDiscCode = '';
        custInvoiceTable.CashDiscDate = dateNull();
        custInvoiceTable.CashDiscPercent = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custInvoiceTable.CustBillingClassification = _custInterestJour.CustBillingClassification;
            custInvoiceTable.ForInterestAdjustment = NoYes::Yes;
            custInvoiceTable.AdjustingInvoiceDate = _custInterestJour.ToDate;
        }

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount findTaxLedgerDimension(Voucher _voucher,
                                                         TransDate _transDate)
    {
        return TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(TaxTrans::find(_voucher, _transDate).TaxCode)).CashDiscountOutgoingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestNoteQuery</Name>
				<Source><![CDATA[
    public Query getInterestNoteQuery(CustInterestAdjustmentAction _custInterestAdjustmentAction)
    {
        Query query;
        QueryBuildRange adjustmentStatusRange;

        query = new Query(queryStr(CustInterestAdjustQuery));

        adjustmentStatusRange = query.dataSourceTable(tableNum(CustInterestTrans)).addRange(fieldNum(CustInterestTrans, AdjustmentStatus));

        switch (_custInterestAdjustmentAction)
        {
            case CustInterestAdjustmentAction::Waive:
                adjustmentStatusRange.value(strFmt("%1", enum2int(CustInterestAdjustmentStatus::None)));
                break;

            case CustInterestAdjustmentAction::ReInstate:
                adjustmentStatusRange.value(strFmt("%1", enum2int(CustInterestAdjustmentStatus::Waive)));
                break;

            case CustInterestAdjustmentAction::Reverse:
                adjustmentStatusRange.value(SysQuery::valueNot(strFmt("%1", enum2int(CustInterestAdjustmentStatus::Reverse))));
                break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionForSalesTax</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getLedgerDimensionForSalesTax(CustInterestJour _custInterestJour)
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        select firstonly LedgerDimension from generalJournalAccountEntry
            where generalJournalAccountEntry.PostingType == LedgerPostingType::Tax
                exists join taxTransGeneralJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                exists join taxTrans
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                          && taxTrans.SourceTableId == _custInterestJour.TableId
                          && taxTrans.SourceRecId == _custInterestJour.RecId;

        return generalJournalAccountEntry.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdjustmentRequired</Name>
				<Source><![CDATA[
    private boolean isAdjustmentRequired(CustInterestAdjustmentStatus _currentAdjustmentStatus)
    {
        boolean isAdjustmentRequired = false;

        if ((custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive ||
            custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse)
            && (_currentAdjustmentStatus == CustInterestAdjustmentStatus::None ||
            _currentAdjustmentStatus == CustInterestAdjustmentStatus::ReInstate))
        {
            isAdjustmentRequired = true;
        }

        if (custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate
            && (_currentAdjustmentStatus == CustInterestAdjustmentStatus::Reverse ||
            _currentAdjustmentStatus == CustInterestAdjustmentStatus::Waive))
        {
            isAdjustmentRequired = true;
        }

        return isAdjustmentRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastInterestDateUpdateRequired</Name>
				<Source><![CDATA[
    private boolean isLastInterestDateUpdateRequired(CustInterestTrans _custInterestTrans)
    {
        return custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>log</Name>
				<Source><![CDATA[
    private void log(
        CustInterestJour _custInterestJour,
        CustInvoiceTableRefRecId _custInvoiceTableId,
        AmountCur _totalWaiveInterestAmount)
    {
        CustInterestAdjustmentHistory custInterestAdjustmentHistory;

        if (_totalWaiveInterestAmount != 0)
        {
            custInterestAdjustmentHistory.clear();
            custInterestAdjustmentHistory.InterestNote = _custInterestJour.InterestNote;
            custInterestAdjustmentHistory.AdjustmentDateTime = DateTimeUtil::utcNow();
            custInterestAdjustmentHistory.CustInvoiceTable = _custInvoiceTableId;
            custInterestAdjustmentHistory.AdjustmentType = custInterestAdjustmentType;
            custInterestAdjustmentHistory.AdjustmentAction = custInterestAdjustmentAction;
            custInterestAdjustmentHistory.AdjustmentAmount = _totalWaiveInterestAmount;
            custInterestAdjustmentHistory.Notes = notes;
            custInterestAdjustmentHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAdjustingEntry</Name>
				<Source><![CDATA[
    private boolean markAdjustingEntry(
        CustInvoiceTable _custInvoiceTable,
        CustInterestJour _custInterestJour,
        Map _custTransMap,
        Set _custInvoiceLineIdRefSet,
        AmountCur _totalInterestAdjustmentAmount,
        DiscAmount _cashDiscount)
    {
        CustTrans interestCustTrans;
        SpecTransManager specTransManager;
        MapEnumerator mapEnumerator;
        CustTransOpen custTransOpen;
        AmountCur totalInterestAmount;
        boolean settleTransaction;
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CustTransOpenLine custTransOpenLine;
        SetEnumerator custInvoiceLineIdRefSetEnumerator;
        NoYes isMarkOpenInvoiceLine;
        AmountCur amountToSettle;

        if (_totalInterestAdjustmentAmount == 0)
        {
            return false;
        }

        specTransManager = SpecTransManager::newRefTableId(_custInvoiceTable, tableNum(CustTransOpen), false);
        mapEnumerator = _custTransMap.getEnumerator();

        isMarkOpenInvoiceLine = CustParameters::find().MarkOpenInvoiceLine;

        while (mapEnumerator.moveNext())
        {
            interestCustTrans = mapEnumerator.currentKey();
            totalInterestAmount = mapEnumerator.currentValue();
            custTransOpen = interestCustTrans.transOpen(dateNull(), true);

            if (custTransOpen)
            {
                if (!specTransManager.exist(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId))
                {
                    amountToSettle = totalInterestAmount + ((_cashDiscount / _totalInterestAdjustmentAmount) * totalInterestAmount);

                    if (abs(amountToSettle) > abs(custTransOpen.AmountCur))
                    {
                        // Never settle more than the open amount
                        amountToSettle = -custTransOpen.AmountCur;
                    }

                    // Never take discounts on interest adjustments
                    ttsBegin;
                    custTransOpen.UseCashDisc = UseCashDisc::Never;
                    custTransOpen.update();
                    ttsCommit;

                    specTransManager.insert(
                        custTransOpen.company(),
                        custTransOpen.TableId,
                        custTransOpen.RecId,
                        -1 * amountToSettle,
                        interestCustTrans.CurrencyCode);

                    if (_custInvoiceLineIdRefSet && isMarkOpenInvoiceLine)
                    {
                        custInvoiceLineIdRefSetEnumerator = _custInvoiceLineIdRefSet.getEnumerator();

                        while (custInvoiceLineIdRefSetEnumerator.moveNext())
                        {
                            select firstonly RecId, AmountCur from custTransOpenLine
                                where custTransOpenLine.CustTransOpen == custTransOpen.RecId &&
                                      custTransOpenLine.CustInvoiceLineIdRef == custInvoiceLineIdRefSetEnumerator.current();

                            if (custTransOpenLine.RecId)
                            {
                                custTransMarkedOpenLine.clear();
                                custTransMarkedOpenLine.SpecTrans = SpecTrans::findBySpec(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId).RecId;
                                custTransMarkedOpenLine.AmountToSettle = custTransOpenLine.AmountCur;
                                custTransMarkedOpenLine.CustTransOpenLine = custTransOpenLine.RecId;
                                custTransMarkedOpenLine.insert();
                            }
                        }
                    }
                }
                settleTransaction = true;
            }
        }

        return settleTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInterestAdjustmentAction</Name>
				<Source><![CDATA[
    public CustInterestAdjustmentAction parmCustInterestAdjustmentAction(CustInterestAdjustmentAction _custInterestAdjustmentAction = custInterestAdjustmentAction)
    {
        custInterestAdjustmentAction = _custInterestAdjustmentAction;

        return custInterestAdjustmentAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInterestAdjustmentType</Name>
				<Source><![CDATA[
    public CustInterestAdjustmentType parmCustInterestAdjustmentType(CustInterestAdjustmentType _custInterestAdjustmentType = custInterestAdjustmentType)
    {
        custInterestAdjustmentType = _custInterestAdjustmentType;

        return custInterestAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTable</Name>
				<Source><![CDATA[
    public CustTable parmCustTable(CustTable _custTable = custTable)
    {
        custTable = _custTable;

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterestTableId</Name>
				<Source><![CDATA[
    public TableId parmInterestTableId(TableId _interestTableId = interestTableId)
    {
        interestTableId = _interestTableId;

        return interestTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post(CustInvoiceTable _adjustingInvoice)
    {
        CustPostInvoice custPostInvoice;
        SourceDocumentHeader sourceDocumentHeader;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (Debug::debugMode())
        {
            Debug::assert(_adjustingInvoice.RecId);
        }

        custPostInvoice = this.createCustPostInvoice(_adjustingInvoice);

        if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse &&
            custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
        {
            custPostInvoice.parmRefNum(RefNum::Interest);
            custPostInvoice.parmIsInterestNoteReversal(true);
        }

        sourceDocumentHeader = SourceDocumentHeader::find(_adjustingInvoice.SourceDocumentHeader);

        if (BrazilParameters::isEnabled())
        {
            custPostInvoice.parmIsCustInterestAdjustment_BR(custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse ||
                                                        custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive);
        }

        LogisticsAddressCountryRegionISOCode countryRegion = SysCountryRegionCode::countryInfo(curext());

        if (countryRegion == #isoIT && CustInterestAdjustSkipTaxValidationOnFreeTextInvoiceFlight::instance().isEnabled())
        {
            custPostInvoice.parmIsInvoiceForInterestAdjustment(true);
        }

        custPostInvoice.parmCustInvoiceTable(_adjustingInvoice);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            custPostInvoice.parmStorno_RU(custInterestAdjustmentAction == CustInterestAdjustmentAction::Reverse ||
                                          custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive);
        // </GEERU>

        using (CustInterestAdjustSalesDateContext context = CustInterestAdjustSalesDateContext::construct())
        {
            context.parmIsInterest(true);

            custPostInvoice.run();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInterestNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the specified interest notes by creating adjusting invoices.
    /// </summary>
    /// <param name="_interestRecordSortedList">
    /// The list that contains the <c>CustInterestJour</c> record to adjust.
    /// </param>
    /// <param name="_totalWaivedAmount">
    /// The amount that has been waived for the specified customer.
    /// </param>
    /// <param name="_waivelimitByCurrency">
    /// The waive limit for the specified customer.
    /// </param>
    public void processInterestNote(
        RecordSortedList _interestRecordSortedList,
        AmountCur _totalWaivedAmount,
        AmountCur _waivelimitByCurrency)
    {
        #OCCRetryCount
        Query interestTransQuery;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        Set interestTransSet;
        Set interestTransSetByCustTrans;
        boolean recordExist;
        boolean isValidInterestNote;
        boolean calculationCompleted;

        interestTransQuery = this.getInterestNoteQuery(custInterestAdjustmentAction);
        interestTransSet = new Set(Types::Record);
        interestTransSetByCustTrans = new Set(Types::Record);
        recordExist = _interestRecordSortedList.first(custInterestJour);
        custInterestJour.reread();

        setPrefix("@SYS3854");

        while (recordExist)
        {
            try
            {
                ttsbegin;

                interestTransQuery.dataSourceTable(tableNum(CustInterestTrans)).clearRange(fieldNum(CustInterestTrans, InterestNote));
                interestTransQuery.dataSourceTable(tableNum(CustInterestTrans)).clearRange(fieldNum(CustInterestTrans, GeneralJournalEntry));
                interestTransQuery.dataSourceTable(tableNum(CustInterestTrans)).addRange(fieldNum(CustInterestTrans, InterestNote)).value(custInterestJour.InterestNote);

                isValidInterestNote = this.validateInterestNote(
                    custInterestJour,
                    interestTransQuery,
                    _waivelimitByCurrency,
                    _totalWaivedAmount,
                    custTable.Currency,
                    interestTransSet);

                if (!isValidInterestNote)
                {
                    throw error("@SYS322862");
                }

                calculationCompleted = true;

                if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestNote)
                {
                    while select custInterestTrans
                        group by GeneralJournalEntry
                        where custInterestTrans.InterestNote == custInterestJour.InterestNote
                    {
                        interestTransQuery.dataSourceTable(tableNum(CustInterestTrans)).clearRange(fieldNum(CustInterestTrans, GeneralJournalEntry));
                        interestTransQuery.dataSourceTable(tableNum(CustInterestTrans)).addRange(fieldNum(CustInterestTrans, GeneralJournalEntry)).value(int642str(custInterestTrans.GeneralJournalEntry));

                        this.adjustInterestNote(
                            custInterestJour.InterestNote,
                            interestTransQuery,
                            custInterestTrans.getCustTrans());
                    }
                }

                this.adjustInterestFee(
                    custInterestJour.InterestNote,
                    CustTrans::findVoucherDate(custInterestJour.FeeVoucher, custInterestJour.Updated));

                ttscommit;

                recordExist = _interestRecordSortedList.next(custInterestJour);
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    custInterestJour = CustInterestJour::find(custInterestJour.InterestNote, true);
                }
                else
                {
                    custInterestJour.reread();
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                recordExist = _interestRecordSortedList.next(custInterestJour);
            }
        }

        if (calculationCompleted)
        {
            info("@SYS322868");
        }
        else
        {
            error("@SYS329633");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInterestTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the specified interest notes by creating adjusting invoices.
    /// </summary>
    /// <param name="_interestRecordSortedList">
    ///    The list that contains the <c>CustInterestTrans</c> record to be adjusted.
    /// </param>
    /// <param name="_totalWaivedAmount">
    ///    The amount that has been waived for given customer.
    /// </param>
    /// <param name="_waivelimitByCurrency">
    ///    The waive limit for given customer.
    /// </param>
    public void processInterestTransactions(
        RecordSortedList _interestRecordSortedList,
        AmountCur _totalWaivedAmount,
        AmountCur _waivelimitByCurrency)
    {
        #OCCRetryCount
        Query interestTransQuery;
        CustInterestTrans custInterestTrans;
        Set interestTransSet;
        Set interestTransSetByCustTrans;
        InterestNote interestNote;
        boolean recordExist;

        interestTransSet = new Set(Types::Record);
        interestTransSetByCustTrans = new Set(Types::Record);
        interestTransQuery = this.getInterestNoteQuery(custInterestAdjustmentAction);

        setPrefix("@SYS3854");

        recordExist = _interestRecordSortedList.first(custInterestTrans);
        custInterestTrans.reread();

        while (recordExist)
        {
            if (interestNote && custInterestTrans.InterestNote != interestNote)
            {
                this.processInterestTransactionsByCustTrans(interestNote, interestTransSet, _waivelimitByCurrency, _totalWaivedAmount);
                interestTransSet = new Set(Types::Record);
            }

            interestTransSet.add(custInterestTrans);
            interestNote = custInterestTrans.InterestNote;
            recordExist = _interestRecordSortedList.next(custInterestTrans);
            custInterestTrans.reread();
        }
        if (interestNote)
        {
            this.processInterestTransactionsByCustTrans(interestNote, interestTransSet, _waivelimitByCurrency, _totalWaivedAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInterestTransactionsByCustTrans</Name>
				<Source><![CDATA[
    private void processInterestTransactionsByCustTrans(
        InterestNote _interestNote,
        Set _interestTransSet,
        AmountCur _waivelimitByCurrency,
        AmountCur _totalWaivedAmount)
    {
        #OCCRetryCount
        Set interestTransSetByCustTrans;
        SetEnumerator interestTransSetEnumerator;
        CustInterestJour custInterestJour;
        CustInterestTrans localCustInterestTrans;
        boolean isValidInterestNote, calculationCompleted;
        GeneralJournalEntryRecId generalJournalEntry;
        CustTrans custTrans;

        interestTransSetEnumerator = _interestTransSet.getEnumerator();
        interestTransSetByCustTrans = new Set(Types::Record);

        try
        {
            ttsbegin;

            custInterestJour = CustInterestJour::find(_interestNote);

            isValidInterestNote = this.validateInterestNote(
                custInterestJour,
                null,
                _waivelimitByCurrency,
                _totalWaivedAmount,
                custTable.Currency,
                _interestTransSet);

            if (!isValidInterestNote)
            {
                throw error("@SYS322863");
            }

            calculationCompleted = true;

            while (interestTransSetEnumerator.moveNext())
            {
                localCustInterestTrans = interestTransSetEnumerator.current();

                if (generalJournalEntry && generalJournalEntry != localCustInterestTrans.GeneralJournalEntry)
                {
                    this.adjustInterestTrans(
                        _interestNote,
                        custTrans,
                        interestTransSetByCustTrans);

                    interestTransSetByCustTrans = new Set(Types::Record);
                }

                interestTransSetByCustTrans.add(localCustInterestTrans);
                generalJournalEntry = localCustInterestTrans.GeneralJournalEntry;

                custTrans = localCustInterestTrans.getCustTrans();
            }

            if (generalJournalEntry)
            {
                this.adjustInterestTrans(
                    _interestNote,
                    custTrans,
                    interestTransSetByCustTrans);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            return;
        }

        if (calculationCompleted)
        {
            info("@SYS322868");
        }
        else
        {
            error("@SYS329633");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the transaction interest against the customer transaction.
    /// </summary>
    /// <param name="_custInterestTrans">
    ///    An instance of the <c>CustInterestTrans</c> table.
    /// </param>
    public void reverseTransaction(CustInterestTrans _custInterestTrans)
    {
        Set interestTransSet;
        CustInterestJour custInterestJour;

        interestTransSet = new Set(Types::Record);

        custInterestJour = CustInterestJour::find(_custInterestTrans.InterestNote);
        custTable = CustTable::find(custInterestJour.AccountNum);
        this.parmCustInterestAdjustmentAction(CustInterestAdjustmentAction::Reverse);
        custInterestAdjustmentType = CustInterestAdjustmentType::InterestTransaction;

        interestTransSet.add(_custInterestTrans);

        this.adjustInterestTrans(_custInterestTrans.InterestNote,
                                _custInterestTrans.getCustTrans(),
                                interestTransSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormRun formRun;
        Args dialgFormArgs;
        Object formRunObj;
        AmountCur totalWaivedAmount;
        AmountCur waivelimitByCurrency;
        RecordSortedList interestRecordSortedList;

        switch (this.parmInterestTableId())
        {
            case tableNum(CustInterestJour):
                custInterestAdjustmentType = CustInterestAdjustmentType::InterestNote;
                break;

            case tableNum(CustInterestFee):
                custInterestAdjustmentType = CustInterestAdjustmentType::InterestFees;
                break;

            case tableNum(CustInterestTrans):
                custInterestAdjustmentType = CustInterestAdjustmentType::InterestTransaction;
                break;
        }

        totalWaivedAmount = this.totalWaivedAmount(custTable.AccountNum, custTable.Currency);
        waivelimitByCurrency = CustInterestWaiveLimit::find(custTable.Currency).Limit;

        this.checkInterestToAdjust(totalWaivedAmount, waivelimitByCurrency);

        if (custInterestAdjustmentType == CustInterestAdjustmentType::InterestTransaction)
        {
            dialgFormArgs = new Args(formStr(CustInterestTransList));
        }
        else
        {
            dialgFormArgs = new Args(formStr(CustInterestJourList));
        }

        dialgFormArgs.parmEnumType(enumNum(CustInterestAdjustmentAction));
        dialgFormArgs.parmEnum(custInterestAdjustmentAction);
        dialgFormArgs.record(custTable);
        dialgFormArgs.parm(tableId2name(this.parmInterestTableId()));

        formRun = classfactory.formRunClass(dialgFormArgs);
        formRun.run();
        formRun.wait(true);

        if (formRun.closedOk())
        {
            formRunObj = formRun;

            if (formHasMethod(formRun, 'getNotes') && formHasMethod(formRun, 'getSelectedInterestNotes'))
            {
                notes = formRunObj.getNotes();
                interestRecordSortedList = formRunObj.getSelectedInterestNotes();
                if (custInterestAdjustmentType != CustInterestAdjustmentType::InterestTransaction)
                {
                    this.processInterestNote(interestRecordSortedList, totalWaivedAmount, waivelimitByCurrency);
                }
                else
                {
                    this.processInterestTransactions(interestRecordSortedList, totalWaivedAmount, waivelimitByCurrency);
                }
            }
            else
            {
                throw error(Error::missingParameter(formRun));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInvoice</Name>
				<Source><![CDATA[
    private void settleInvoice(
        CustInvoiceTable _custInvoiceTable,
        CustInterestJour _custInterestJour,
        Set _custInvoiceLineIdRefSet,
        Set _waivedInterestTransactionSet,
        Map _settlementMap,
        AmountCur _totalWaiveInterestAmount,
        boolean _feeAdjusted,
        CustTrans _custTrans)
    {
        CustSettlement custSettlement;
        CustInvoiceLine custInvoiceLine;

        custSettlement = this.checkCashDisc(_custTrans);
        if (custSettlement.UtilizedCashDisc)
        {
            custInvoiceLine = this.createCustInvoiceLineForCashDisc(_custInterestJour, _custInvoiceTable, _totalWaiveInterestAmount, _custTrans, custSettlement);
            _totalWaiveInterestAmount += CustInvoiceLine.AmountCur;
        }

        this.markAdjustingEntry(_custInvoiceTable, _custInterestJour, _settlementMap, _custInvoiceLineIdRefSet, _totalWaiveInterestAmount, custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? -1 * custSettlement.UtilizedCashDisc : custSettlement.UtilizedCashDisc);
        this.post(_custInvoiceTable);
        _custInvoiceTable = CustInvoiceTable::findRecId(_custInvoiceTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorMessage</Name>
				<Source><![CDATA[
    private void showErrorMessage(
        boolean _ledgerDimensionFound,
        boolean _isAmountWithinLimit,
        boolean _skipInterestNote,
        InterestNote _interestNote)
    {
        if (!_isAmountWithinLimit)
        {
            if (_skipInterestNote)
            {
                error("@SYS3854" + '\t' + _interestNote + '\t' + "@SYS322862");
                throw Exception::Error;
            }
            else
            {
                error("@SYS3854" + '\t' + _interestNote + '\t' + "@SYS322863");
            }
        }
        else if (!_ledgerDimensionFound)
        {
            throw error("@SYS322866");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransForInterestFee</Name>
				<Source><![CDATA[
    private void specTransForInterestFee(CustInterestJour _custInterestJour)
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;

        select firstonly RecId from custTransOpen
            exists join custTrans
            where custTrans.RecId == custTransOpen.RefRecId &&
                custTrans.Voucher == _custInterestJour.FeeVoucher &&
                custTrans.TransDate == _custInterestJour.Updated &&
                custTrans.AccountNum == _custInterestJour.AccountNum;

        this.validateInterestNotMarkedForSettlement(custTransOpen, _custInterestJour.InterestNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransForInterestNote</Name>
				<Source><![CDATA[
    private void specTransForInterestNote(CustInterestJour _custInterestJour, Query _interestAdjustmentQuery)
    {
        CustInterestTrans custInterestTrans;

        QueryRun qr = new QueryRun(_interestAdjustmentQuery);

        while (qr.next())
        {
            custInterestTrans = qr.get(tableNum(CustInterestTrans));

            if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
            {
                this.validateInterestNotMarkedForSettlement(custInterestTrans.getCustTrans().transOpen(), _custInterestJour.InterestNote);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransForInterestTrans</Name>
				<Source><![CDATA[
    private void specTransForInterestTrans(CustInterestJour _custInterestJour, Set _interestTransSet)
    {
        CustInterestTrans custInterestTrans;
        SetEnumerator interestTransSetEnumerator;

        interestTransSetEnumerator = _interestTransSet.getEnumerator();
        while (interestTransSetEnumerator.moveNext())
        {
            custInterestTrans = interestTransSetEnumerator.current();

            if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
            {
                this.validateInterestNotMarkedForSettlement(custInterestTrans.getCustTrans().transOpen(), _custInterestJour.InterestNote);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterestNotMarkedForSettlement</Name>
				<Source><![CDATA[
    private void validateInterestNotMarkedForSettlement(CustTransOpen _custTransOpen, InterestNote _interestNote)
    {
        if (_custTransOpen && SpecTrans::existByRef(_custTransOpen.company(), tableNum(CustTransOpen), _custTransOpen.RecId))
        {
            error("@SYS3854" + '\t' + _interestNote + '\t' + "@SYS329632");
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWaivedAmount</Name>
				<Source><![CDATA[
    private AmountCur totalWaivedAmount(
        CustAccount _accountNum,
        CurrencyCode _currencyCode)
    {
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        AmountCur totalInterestAmount;

        while select InterestNote from custInterestJour
            where custInterestJour.AccountNum == _accountNum
            join InterestAmount, CurrencyCode from custInterestTrans
                where custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Waive &&
                  custInterestTrans.InterestNote == custInterestJour.InterestNote
        {
            totalInterestAmount += custInterestTrans.CurrencyCode == _currencyCode ? custInterestTrans.InterestAmount : CurrencyExchangeHelper::curAmount2CurAmount(custInterestTrans.InterestAmount, custInterestTrans.CurrencyCode, _currencyCode);
        }

        while select Fee, CurrencyCode from custInterestJour
            where custInterestJour.AccountNum == _accountNum &&
                  custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::Waive
        {
            totalInterestAmount += custInterestJour.CurrencyCode == _currencyCode ? custInterestJour.Fee : CurrencyExchangeHelper::curAmount2CurAmount(custInterestJour.Fee, custInterestJour.CurrencyCode, _currencyCode);
        }

        totalInterestAmount += custInterestJour.Fee;

        return totalInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdjustmentStatus</Name>
				<Source><![CDATA[
    private void updateAdjustmentStatus(
        CustInvoiceTableRefRecId _custInvoiceTableId,
        CustInterestJour _custInterestJour,
        Set _waivedInterestTransactionSet,
        boolean _feeAdjusted)
    {
        SetEnumerator waivedTransSetEnumerator;
        CustInterestTrans custInterestTrans;

        if (_waivedInterestTransactionSet != null)
        {
            waivedTransSetEnumerator = _waivedInterestTransactionSet.getEnumerator();

            while (waivedTransSetEnumerator.moveNext())
            {
                custInterestTrans = waivedTransSetEnumerator.current();
                custInterestTrans = CustInterestTrans::find(custInterestTrans.InterestNote, custInterestTrans.RecId, true);

                if (this.isAdjustmentRequired(custInterestTrans.AdjustmentStatus))
                {
                    // Only update the last adjustment invoice when adjustments are made.
                    custInterestTrans.LastAdjustmentInvoice = _custInvoiceTableId;
                }

                custInterestTrans.AdjustmentStatus = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? CustInterestAdjustmentStatus::None : enum2int(custInterestAdjustmentAction);
                enum2int(custInterestAdjustmentAction);
                custInterestTrans.update();
            }
        }

        if (_feeAdjusted)
        {
            _custInterestJour.FeeLastAdjustmentInvoice = _custInvoiceTableId;
            _custInterestJour.FeeAdjustmentStatus = custInterestAdjustmentAction == CustInterestAdjustmentAction::ReInstate ? CustInterestAdjustmentStatus::None : enum2int(custInterestAdjustmentAction);
            _custInterestJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastInterestDate</Name>
				<Source><![CDATA[
    private void updateLastInterestDate(CustInterestTrans _custInterestTrans)
    {
        CustTransOpen custTransOpen;
        CustSettlement custSettlement;
        TransDate lastInterestDate;

        lastInterestDate = _custInterestTrans.CalcFrom - 1;

        if (lastInterestDate == _custInterestTrans.DueDate)
        {
            lastInterestDate = dateNull();
        }

        // Only update the last interest date when it is earlier than the existing last interest
        // date. This is necessary for handling situations where interest transactions are posted
        // for the same interest note, but refer to the same transaction / settlement record. In
        // some cases (transaction interest calculations) they are adjusted separately so we need
        // to handle it at this level.

        while select forupdate custTransOpen
            where custTransOpen.RefRecId == _custInterestTrans.CustTransId
                && custTransOpen.DueDate == _custInterestTrans.DueDate
        {
            if (lastInterestDate < custTransOpen.LastInterestDate)
            {
                custTransOpen.LastInterestDate = lastInterestDate;
                custTransOpen.update();
            }
        }

        while select forupdate custSettlement
            where custSettlement.TransRecId == _custInterestTrans.CustTransId
                && custSettlement.DueDate == _custInterestTrans.DueDate
        {
            if (lastInterestDate < custSettlement.LastInterestDate)
            {
                custSettlement.LastInterestDate = lastInterestDate;
                custSettlement.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterestNote</Name>
				<Source><![CDATA[
    private boolean validateInterestNote(
        CustInterestJour _custInterestJour,
        Query _interestAdjustmentQuery,
        AmountCur _waivelimitByCurrency,
        AmountCur _totalWaivedAmount,
        CurrencyCode _currencyCode,
        Set _interestTransSet = null)
    {
        AmountCur amountToBeWaived;
        boolean isAmountWithinLimit = true;
        boolean interestNoteFound;

        switch (custInterestAdjustmentType)
        {
            case CustInterestAdjustmentType::InterestTransaction:
                this.checkInterestTrans(_custInterestJour, _interestTransSet);
                this.specTransForInterestTrans(_custInterestJour, _interestTransSet);
                if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && _waivelimitByCurrency)
                {
                    amountToBeWaived = this.amountToBeWaivedByInterestTrans(_custInterestJour, _currencyCode, _interestTransSet);
                }
                break;

            case CustInterestAdjustmentType::InterestNote:
                interestNoteFound = this.checkInterestNote(_custInterestJour, _interestAdjustmentQuery);
                this.specTransForInterestNote(_custInterestJour, _interestAdjustmentQuery);
                if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && _waivelimitByCurrency)
                {
                    amountToBeWaived = this.amountToBeWaivedByInterestNote(_custInterestJour, _interestAdjustmentQuery, _currencyCode);
                }
                break;

            case CustInterestAdjustmentType::InterestFees:
                this.checkInterestFee(_custInterestJour, interestNoteFound);
                this.specTransForInterestFee(_custInterestJour);
                if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && _waivelimitByCurrency && _custInterestJour.FeeAdjustmentStatus == CustInterestAdjustmentStatus::None)
                {
                    amountToBeWaived = _custInterestJour.Fee;
                }
                break;
        }
        if (custInterestAdjustmentAction == CustInterestAdjustmentAction::Waive && _waivelimitByCurrency)
        {
            isAmountWithinLimit = _totalWaivedAmount + amountToBeWaived <= _waivelimitByCurrency;
        }

        return isAmountWithinLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustInterestAdjust construct()
    {
        return new CustInterestAdjust();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountToUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension that is associated with the records.
    /// </summary>
    /// <param name = "_custInterestJour">
    /// Current <c>CustInterestJour</c>.
    /// </param>
    /// <param name = "_custInterestTransRecId">
    /// RecId of the <c>CustInterestTrans</c> record.
    /// </param>
    /// <param name = "_custInterestTrans">
    /// Current <c>CustInterestTrans</c>.
    /// </param>
    /// <returns>
    /// The ledger dimension.
    /// </returns>
    private static LedgerDimensionAccount getAccountToUse(CustInterestJour _custInterestJour, RefRecId _custInterestTransRecId, CustInterestTrans _custInterestTrans = null)
    {
        CustInterest custInterest;
        CustInterestTrans custInterestTrans;
        CustPostingProfile custPostingProfile;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            return CustInterestHelper::getInterestTransLedgerAccount(CustInterestLedgerDimensionsOptions_PSN::InterestTransactionLedgerDimension, _custInterestTrans);
        }
        else
        {
            select CustTransId, InterestAmount
            from custInterestTrans
            where custInterestTrans.RecId == _custInterestTransRecId;

            if (_custInterestJour.checkInterestCalcAccountChoice())
            {
                custPostingProfile = CustTrans::find(custInterestTrans.CustTransId).PostingProfile;
            }
            else
            {
                custPostingProfile = _custInterestJour.PostingProfile;
            }

            custInterest = CustInterest::find(CustLedgerAccounts::custInterest(_custInterestJour.AccountNum, custPostingProfile, false));

            return CustInterestPost::ledgerDimension(custInterestTrans.InterestAmount, custInterest, _custInterestJour, _custInterestTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustInterestAdjust custInterestAdjust;

        custInterestAdjust = CustInterestAdjust::construct();
        custInterestAdjust.parmCustInterestAdjustmentAction(args.parmEnum());
        custInterestAdjust.parmCustTable(args.record());
        custInterestAdjust.parmInterestTableId(tableName2id(args.parm()));
        custInterestAdjust.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustPostInvoice</Name>
				<Source><![CDATA[
    protected CustPostInvoice createCustPostInvoice(CustInvoiceTable _adjustingInvoice)
    {
        CustPostInvoice custPostInvoice = CustPostInvoice::construct(_adjustingInvoice);

        return custPostInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>