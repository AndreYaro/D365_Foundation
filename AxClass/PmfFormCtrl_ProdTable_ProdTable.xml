<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTable_ProdTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_ProdTable</c> class is the form control handler for the <c>ProdTable</c> data
/// source of the <c>ProdTable</c> form.
/// </summary>
/// <remarks>
/// See the <c>PmfFormCtrl_ProdTable_InventDim</c> class for the form control handler for the
/// <c>InventDim</c> data source.
/// </remarks>
public class PmfFormCtrl_ProdTable_ProdTable extends PmfFormCtrl
{
    boolean         calledFromProdProcessBatch;
    boolean         calledFromProdListPage;
    boolean         showStandardAndBatchOrders;
    boolean         isBullOrPack;
    boolean         isRegulatedItem;
    boolean         isItemBatchActive;

    ItemId          lastFetchedItemId;
    container       lastFetchedRuleData;
    #PMFHelp
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>active</c> event has been processed for the data source.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for this class.
    /// </exception>
    public void dataSourceActivePost()
    {
        ProdTable prodTable;

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        prodTable = buffer;

        this.fetchRuleData();

        if (!this.isStandardEnabled())
        {
            this.parmFormRun().design().caption(
                strfmt("@PRO107",prodTable.ProdId,prodTable.Name));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>create</c> event has been processed for the data source.
    /// </summary>
    public void dataSourceCreatePost()
    {
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>ProdTable</c> data source has been initialized.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer that is associated to the data source.
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);

        if (this.isPmfEnabled())
        {
            this.initRange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchData</Name>
				<Source><![CDATA[
    private container fetchData(ItemId _itemId)
    {
        if (lastFetchedItemId == _itemId)
        {
            return lastFetchedRuleData;
        }

        lastFetchedItemId   = _itemId;
        lastFetchedRuleData = PmfFormCtrl_ProdTable_ProdTable::fetchDataServer(_itemId);

        return lastFetchedRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch rules data and cache them
    /// </summary>
    public void fetchRuleData()
    {
        ProdTable prodTable = buffer;
        [isBullOrPack, isRegulatedItem, isItemBatchActive] = this.fetchData(prodTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form button manager and adjusts various properties for the usage of the form with
    /// production batch orders
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for this class.
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (calledFromProdProcessBatch)
        {
            this.parmFormRun().design().caption("@PRO1522");
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Grid)),
                    formRun.design().controlName(formControlStr(ProdTable,ProdTable_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Grid)),
                    formRun.design().controlName(formControlStr(ProdTable,ProdTable_PdsCWBatchSchedGrid)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Production)),
                    formRun.design().controlName(formControlStr(ProdTable,Production_PdsCWBatchSched)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Production)),
                    formRun.design().controlName(formControlStr(ProdTable,Production_M_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Created)),
                    formRun.design().controlName(formControlStr(ProdTable,ProdTable_PdsCWUnitId1)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Esitimated)),
                    formRun.design().controlName(formControlStr(ProdTable,PdsCWBatchEst)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Started)),
                    formRun.design().controlName(formControlStr(ProdTable,PdsCWBatchStup)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,ReportedFinished)),
                    formRun.design().controlName(formControlStr(ProdTable,pdsCWReportedFinishedGood)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,End)),
                    formRun.design().controlName(formControlStr(ProdTable,pdsCWHistoricalCostQtyGood)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,RemainInventPhysicalGroup)),
                    formRun.design().controlName(formControlStr(ProdTable,PdsCWRemainPhysical)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }

        if (#PmfReworkBatchEnabled)
        {
            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(ProdTable,PmfReworkBatch)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isReworkBatchEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,Grid)),
                    formRun.design().controlName(formControlStr(ProdTable,ProdTable_PmfReworkBatch)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isReworkBatchEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(ProdTable,PmfReworkBatch)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isProdRAF),
                    ButtonRuleEffectType::Enabled);
        }

        if (#PDSPotencyEnabled)
        {
            boolean isPDSBalanceProdBOMEnhancedFeatureEnabled = PDSBalanceProdBOMEnhancedFeature::instance().isEnabled();

            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(isPDSBalanceProdBOMEnhancedFeatureEnabled ? formControlStr(ProdTable, PDSBalanceProdBOMEnhanced) : formControlStr(ProdTable,PDSBatchBalancing)),
                    methodStr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(isPDSBalanceProdBOMEnhancedFeatureEnabled ? formControlStr(ProdTable, PDSBalanceProdBOMEnhanced) : formControlStr(ProdTable,PDSBatchBalancing)),
                    methodStr(PmfFormCtrl_ProdTable_ProdTable, pdsAllowBalancing),
                    ButtonRuleEffectType::Enabled);
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,PmfProdCoBy)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,PmfProdCoBy)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isBatchOrder),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Grid)),
                formRun.design().controlName(formControlStr(ProdTable,ProdTable_PmfCoByVarAllow)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Grid)),
                formRun.design().controlName(formControlStr(ProdTable,ProdTable_PmfYieldPct)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                formRun.design().controlName(formControlStr(ProdTable,Formula_PmfYieldPct)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Grid)),
                formRun.design().controlName(formControlStr(ProdTable,ProdTable_PmfYieldPct)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isBatchOrderStatusNotYetEstimated),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                formRun.design().controlName(formControlStr(ProdTable,Formula_PmfYieldPct)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isBatchOrderStatusNotYetEstimated),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,Measurement)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,Tab_Project)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,Tab_ProjectError)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,Tab_ProjectOver)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,Tab_ProjectUnder)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Grid)),
                formRun.design().controlName(formControlStr(ProdTable,ProdTable_ProjId)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isStandardEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,HeaderInfo)),
                formRun.design().controlName(formControlStr(ProdTable,HeaderTitle)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Identification)),
                formRun.design().controlName(formControlStr(ProdTable,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Identification)),
                formRun.design().controlName(formControlStr(ProdTable,Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,Production)),
                formRun.design().controlName(formControlStr(ProdTable,Production_QtySched)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO1497");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO1115");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                formRun.design().controlName(formControlStr(ProdTable,BOM_BOMDate)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO94");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                formRun.design().controlName(formControlStr(ProdTable,BOM_BOMId)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO101");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable,BOM)),
                formRun.design().controlName(formControlStr(ProdTable,BOM_Reservation)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO2156");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,PmfPackOnHand)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isBulkorPack),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,PmfAddToConsOrder)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isNotOnConsOrder),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTable,PmfRemFromConsOrder)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isOnConsOrder),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTable, OrderDetails)),
                formRun.design().controlName(formControlStr(ProdTable, PmfProdCoByCostAllocation)),
                methodstr(PmfFormCtrl_ProdTable_ProdTable, isBatchOrder),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                      formRun.design().controlName(formControlStr(ProdTable,OrderDetails)),
                      formRun.design().controlName(formControlStr(ProdTable,ProdBOMMenuItem)),
                      methodstr(PmfFormCtrl_ProdTable_ProdTable, isNonBatchOrder),
                      ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                      formRun.design().controlName(formControlStr(ProdTable,OrderDetails)),
                      formRun.design().controlName(formControlStr(ProdTable,PmfFormulaMenuItem)),
                      methodstr(PmfFormCtrl_ProdTable_ProdTable, isBatchOrder),
                      ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                    formRun.design().controlName(formControlStr(ProdTable,OpenMSDSDocument)),
                    formRun.design().controlName(formControlStr(ProdTable,OpenMSDSDocument)),
                    methodstr(PmfFormCtrl_ProdTable_ProdTable, isRegulatedItem),
                    ButtonRuleEffectType::Enabled);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before you execute the standard code in the <c>init</c> form event.
    /// </summary>
    /// <remarks>
    /// The base implementation calls the same method on all <c>PmfFormCtrl</c> assigned as sub-controls to
    /// this object. All child classes must call this parent method if they override this method. The form
    /// only must call this event method if there is actual code associated with the event method or any of
    /// the sub-controls associated with this object.
    /// </remarks>
    public void initPre()
    {
        SalesLine   callerSalesLine;
        ProdTable   callerProdTable;
        Common      common = this.callerBuffer()
                                ? this.callerBuffer()
                                    : this.args().lookupRecord() //List pages
                                        ? this.args().lookupRecord()
                                        : null;

        switch (common.TableId)
        {
            case tablenum(SalesLine) :
                callerSalesLine = common;
                if (callerSalesLine.inventTable().isFormulaAllowed())
                {
                    calledFromProdProcessBatch = PmfBatchOrderReferences::hasSalesLineBatchOrders(callerSalesLine);
                }
                break;

            case tablenum(ProdTable) :
                callerProdTable = common;
                break;

            default:
                // break;
        }

        calledFromProdProcessBatch = calledFromProdProcessBatch
            || this.menuItemName() == menuitemdisplaystr(PmfProdProcessBatch)
            || this.menuItemName() == menuitemdisplaystr(CostPmfProdTableDetailsList)
            || this.menuItemName() == menuitemdisplaystr(PmfBatchOrderNew)
            || callerProdTable.ProdType == ProdType::Process
            || (this.caller()
                && this.caller().name() == formstr(ProdTableOverview)
                && this.caller().pmfIsEnabled());

        // Try to initialize variable again based on args.lookupRecord() because caller form may be opened from 'View detail',
        // and callerBuffer() is binded to buffer record which is different from prodTable.
        if (!calledFromProdProcessBatch && common
        &&  common.TableId != tableNum(SalesLine)
        &&  common.TableId != tableNum(ProdTable)
        &&  this.args().lookupRecord()
        &&  this.args().lookupRecord().TableId == tableNum(ProdTable))
        {
            callerProdTable = this.args().lookupRecord();
            if (callerProdTable.ProdType == ProdType::Process)
            {
                calledFromProdProcessBatch = true;
            }
        }

        showStandardAndBatchOrders = this.menuItemName() == menuitemDisplayStr(ProdTableListInventTrace);

        calledFromProdListPage = this.caller()
                && this.caller().name() == formstr(ProdTableListPage);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form data source query to show the appropriate records.
    /// </summary>
    /// <remarks>
    /// Based on the caller the form only displays production batch orders or filters these orders.
    /// </remarks>
    private void initRange()
    {
        QueryBuildRange qbr;

        if (!showStandardAndBatchOrders)
        {
            formDS.query().dataSourceTable(tablenum(ProdTable))
                .clearRange(fieldnum(ProdTable, ProdType));

            qbr = formDS.query().dataSourceTable(
                tablenum(ProdTable)).addRange(
                    fieldnum(ProdTable, ProdType));

            qbr.status(RangeStatus::Locked);

            if (this.isFormulaEnabled())
            {
                qbr.value(SysQuery::value(ProdType::Process));
            }
            else
            {
                qbr.value(SysQuery::valueNot(ProdType::Process));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current buffer is a batch order.
    /// </summary>
    /// <returns>
    /// true if a batch order; otherwise, false.
    /// </returns>
    public boolean isBatchOrder()
    {
        ProdTable prodTable = buffer;

        return prodTable.ProdType == ProdType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchOrderStatusNotYetEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch order has a status up to estimated.
    /// </summary>
    /// <returns>
    /// true if the order has a status up to estimated; otherwise, false .
    /// </returns>
    public boolean isBatchOrderStatusNotYetEstimated()
    {
        ProdTable   prodTable = buffer;

        return (this.isFormulaEnabled()
                && prodTable.ProdType   == ProdType::Process
                && prodTable.status().isBefore(ProdStatus::CostEstimated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBulkorPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item is bulk or pack item.
    /// </summary>
    /// <returns>
    /// true if item is bulk or pack item; otherwise, false .
    /// </returns>
    public NoYes isBulkorPack()
    {
        return isBullOrPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the form has been called from the list page.
    /// </summary>
    /// <returns>
    /// true if the form has been called from the list page; otherwise, false .
    /// </returns>
    public boolean isCalledFromListPage()
    {
        return calledFromProdListPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order is a production batch order.
    /// </summary>
    /// <returns>
    /// true if the order is a production batch order; otherwise, false .
    /// </returns>
    /// <remarks>
    /// This method is used for the button manager to determine the states of various controls.
    /// </remarks>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled
            && (calledFromProdProcessBatch || showStandardAndBatchOrders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemBatchActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the referenced item has the active batch dimension.
    /// </summary>
    /// <returns>
    /// true if the dimension group of the item has the batch dimension enabled; otherwise, false .
    /// </returns>
    public boolean isItemBatchActive()
    {
        return isItemBatchActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current buffer is not a batch order.
    /// </summary>
    /// <returns>
    /// true if not a batch order; otherwise, false.
    /// </returns>
    public boolean isNonBatchOrder()
    {
        ProdTable prodTable = buffer;

        return prodTable.ProdType != ProdType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotOnConsOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch is a bulk or pack item and is not a consolidated order.
    /// </summary>
    /// <returns>
    /// true is batch order is a consolidated order; otherwise, false .
    /// </returns>
    public NoYes isNotOnConsOrder()
    {
        ProdTable prodTable = buffer;

        return  this.isBulkorPack() && !prodTable.PmfConsOrdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnConsOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item is a bulk or pack item and if it belongs to a consolidated order.
    /// </summary>
    /// <returns>
    /// true if the batch order is a consolidated order; otherwise, false .
    /// </returns>
    public NoYes isOnConsOrder()
    {
        ProdTable prodTable = buffer;

        return  this.isBulkorPack() && prodTable.PmfConsOrdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdRAF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is a Process type and if the order status is Reported as
    /// Finished
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if Process order and Reported as finished; otherwise <c>NoYes::No</c> .
    /// </returns>
    public NoYes isProdRAF()
    {
        ProdTable   prodTable = buffer;

        return (#PmfReworkBatchEnabled
                && prodTable.ProdType   == ProdType::Process
                && prodTable.ProdStatus == ProdStatus::ReportedFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegulatedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>ProdTable</c> record refers to a regulated item.
    /// </summary>
    /// <returns>
    /// true if the current <c>ProdTable</c> record refers to a regulated item; otherwise, false .
    /// </returns>
    public boolean isRegulatedItem()
    {
        return isRegulatedItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReworkBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the rework batch functionality should be enabled.
    /// </summary>
    /// <returns>
    /// true if the rework batch functionality should be enabled; otherwise, false .
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public NoYes isReworkBatchEnabled()
    {
        return this.isFormulaEnabled()
            && #PmfReworkBatchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order is a standard production order.
    /// </summary>
    /// <returns>
    /// true if the order is a standard production order; otherwise, false .
    /// </returns>
    public NoYes isStandardEnabled()
    {
        return showStandardAndBatchOrders || !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAllowBalancing</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the production order and the current status allows to be batch balanced.
    /// </summary>
    /// <returns>
    ///     true if the production order allows to be batch balanced; otherwise, false.
    /// </returns>
    public boolean pdsAllowBalancing()
    {
        ProdTable       prodTable;

        prodTable = buffer;
        return prodTable.status().pdsCanBeBatchBalanced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources that are that will be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A <c>Common</c> table buffer that belongs to the first data source instance.
    /// </param>
    /// <param name="_datasources2">
    /// A <c>Common</c> table buffer that belongs to the second data source instance.
    /// </param>
    /// <param name="_datasources3">
    /// A <c>Common</c> table buffer that belongs to the third data source instance.
    /// </param>
    /// <param name="_datasources4">
    /// A <c>Common</c> table buffer that belongs to the fourth data source instance.
    /// </param>
    /// <param name="_datasources5">
    /// A <c>Common</c> table buffer that belongs to the fifth data source instance.
    /// </param>
    /// <remarks>
    /// Up to 5 data sources can be passed. If the implementation requires more data sources additional
    /// custom methods should be implemented on the rule implementer class.The method is called by the
    /// <c>FormButtonManager</c> class on the rule class that implements the <c>ButtonStateProvider</c>
    /// interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        ProdTable       prodTable = buffer;
        ProdStatusType  prodStatus = prodTable.statusClient();
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(prodTable.ItemId);
        super();

        this.enableDSField(fieldnum(ProdTable,PmfYieldPct),
                prodTable.status().isBeforeOrEqualTo(ProdStatus::CostEstimated));

        this.enableDSField(fieldnum(ProdTable,QtySched),
                prodStatus.formFieldsActive() && !isCWItem);

        if (this.isCatchWeightEnabled())
        {
            if (prodTable.ProdStatus == ProdStatus::Created)
            {
                formDS.object(fieldnum(ProdTable, PdsCWBatchSched)).enabled(isCWItem);
            }
            else
            {
                formDS.object(fieldnum(ProdTable, PdsCWBatchSched)).enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdTable_ProdTable construct()
    {
        return new PmfFormCtrl_ProdTable_ProdTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchDataServer</Name>
				<Source><![CDATA[
    private static container fetchDataServer(ItemId _itemId)
    {
        boolean isBullOrPack;
        boolean isRegulatedItem;
        boolean isItemBatchActive;

        isBullOrPack      = #PmfEnabled && PmfBulkItemConv::isBulkorPack(_itemId);
        isRegulatedItem   = PdsMRCRegulatedCountry::isRegulated(_itemId);
        isItemBatchActive = #PmfEnabled && InventTable::find(_itemId).isItemBatchActivated();

        return [isBullOrPack, isRegulatedItem, isItemBatchActive];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element.
    /// </summary>
    /// <param name="_fr">
    /// The <c>FormRun</c> object for which to create the form control handler.
    /// </param>
    /// <returns>
    /// The created form control handler.
    /// </returns>
    public static PmfFormCtrl_ProdTable_ProdTable newFromForm(
        FormRun _fr)
    {
        PdsCWFormCtrl cwFormCtrl;
        PmfFormCtrl_ProdTable_ProdTable frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTable_ProdTable::construct();
        frmCtrl.parmFormRun(_fr);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_fr);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                    [[fieldnum(ProdTable,QtySched),
                        fieldnum(ProdTable,PdsCWBatchSched),
                        false]]));
            cwFormCtrl.parmItemFieldId(fieldnum(ProdTable,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(ProdTable,pdsCWUnitId));
            frmCtrl.addSubFormCtrl(cwFormCtrl);
        }

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>