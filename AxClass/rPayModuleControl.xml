<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayModuleControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayModuleControl
{
    container            calcTypeItems;
    DictEnum             enumCommon;
    RPayCounterCalcTable payCounterCalcTable;
    QueryRun             queryRun;
    Query                query;
    RPayModuleTable      payModuleTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcItemsAdd</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcItemsAdd(DictEnum dictEnum, boolean add = true)
    {
        int currentLength;
        int i;
        container item;

        if (add)
        {
            currentLength = conLen(calcTypeItems);
        }

        for (i = 1; i <= dictEnum.values();i+=1)
        {
            item = conPoke(item, 1, dictEnum.name());
            item = conPoke(item, 2, i-1);
            calcTypeItems = conPoke(calcTypeItems, i + currentLength, item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTypeItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container of calculation types.
    /// </summary>
    /// <returns>
    /// The container of calculation types.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcTypeItems()
    {
        return calcTypeItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method for specified object.
    /// </summary>
    /// <param name="_object">
    /// The instance of object.
    /// </param>
    /// <param name="_prefix">
    /// The method prefix.
    /// </param>
    /// <param name="_defaultValue">
    /// Default value.
    /// </param>
    /// <returns>
    /// The result of called method.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str callMethod(Object _object, str _prefix, str _defaultValue = '')
    {
        int               i;
        container         item;
        str               statment;
        DictEnum          dictEnum;
        DictClass         dictClass = new DictClass(classIdGet(this));
        DictClass         dictClassRun = new DictClass(classIdGet(_object));
        ExecutePermission executePermission   = new ExecutePermission();
        str               retValue = _defaultValue;

        str returnValue(anytype _value)
        {
            str ret;

            switch (typeOf(_value))
            {
                case Types::void:
                    ret = retValue;
                    break;
                case Types::Enum:
                    ret = enum2Value(_value);
                    break;
                case Types::Real:
                    ret = num2str(_value, 0, 16, 1, 0);
                    break;
                default:
                    ret = strFmt('%1', _value);
            }

            return ret;
        }

        for (i = 1; i <= conLen(calcTypeItems); i += 1)
        {
            item = conPeek(calcTypeItems, i);
            dictEnum = new DictEnum(enumName2Id(conPeek(item, 1)));

            if (payCounterCalcTable.PayCalculateEnumName == dictEnum.name() &&
                payCounterCalcTable.PayCalculateTypeNumber == conPeek(item, 2))
            {
                statment = _prefix + dictEnum.value2Symbol(conPeek(item, 2));

                if (this.methodExists(dictClassRun, statment))
                {
                    executePermission.assert();
                    retValue = returnValue(dictClass.callObject(statment, _object));
                    CodeAccessPermission::revertAssert();
                }

                return retValue;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeToCalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canChangeToCalculate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModuleCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determinate if the current module can be calculated.
    /// </summary>
    /// <returns>
    /// true if module can be calculated otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canModuleCalculate()
    {
        RPayModuleTable payModuleTableLocal;

        if (! RpayController::canModuleChanged())
        {
            return false;
        }

        select firstonly payModuleTableLocal
            where payModuleTableLocal.PayModuleGroupId == payModuleTable.PayModuleGroupId - 1 &&
                  payModuleTableLocal.PayModuleSost    == RPayModuleSost::NoCalculate;

        if (payModuleTableLocal)
        {
            return checkFailed("@RUP386");
        }

        select firstonly payModuleTableLocal
            where payModuleTableLocal.ParentModuleCode == payModuleTable.PayModuleCode &&
                  payModuleTableLocal.PayModuleSost    == RPayModuleSost::NoCalculate;

        if (payModuleTableLocal)
        {
            return checkFailed("@RUP386");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deletePayTrans()
    {
        RPayTrans               payTrans;
        RPayEmplParameters      emplParameters;

        delete_from payTrans
            where payTrans.PayPeriod            == RPayParameters::payPeriod()  &&
                  payTrans.PayModuleCode        == payModuleTable.PayModuleCode &&
                  payTrans.SourceTableId                                        &&
                  payTrans.SourceRecId                                          &&
                  payTrans.PayPeriod            == payTrans.CorrectedPeriod
            notexists join emplParameters
                    where emplParameters.EmplId == payTrans.EmplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQuery()
    {
        if (payModuleTable.Query)
        {
            query = new Query(payModuleTable.Query);
            queryRun.query(query);
        }
        query = queryRun.query();
        queryRun.saveUserSetup(false);
        query.title(payModuleTable.PayModuleName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodExists</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean methodExists(DictClass dictClass,str metodName)
    {
        int       i;
        boolean   find;
        DictClass dictClassExtend;

        for (i = 1; i <= dictClass.objectMethodCnt(); i++)
        {
            if (dictClass.objectMethod(i) == metodName)
            {
                find = true;
                break;
            }
        }

        if (! find && dictClass.extend())
        {
            dictClassExtend = new DictClass(dictClass.extend());
            find = this.methodExists(dictClassExtend,metodName);
        }

        return find;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCalculationDelete</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void moduleCalculationDelete()
    {
        RPayModuleTable     payModuleTableLocal;
        RPayModuleControl   rPayModuleControl;

        ttsbegin;

        while select forupdate payModuleTableLocal
                  where payModuleTableLocal.ParentModuleCode == payModuleTable.PayModuleCode
        {
            rPayModuleControl = payModuleTableLocal.payModuleControl();
            payModuleTableLocal.PayModuleSost = RPayModuleSost::UnUse;
            payModuleTableLocal.update();
            rPayModuleControl.moduleCalculationDelete();
        }

        this.deletePayTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleSostModified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean moduleSostModified(RPayModuleTable rPayModuleTable)
    {
        FormDataSource formDataSource;

        if (! this.updateModuleSost())
        {
            return false;
        }

        switch (rPayModuleTable.PayModuleSost)
        {
            case RPayModuleSost::NoCalculate:
                if (rPayModuleTable.NeedDeleteBeforeCalc)
                {
                    this.moduleCalculationDelete();
                    if (infolog.num())
                    {
                        return false;
                    }
                }
                formDataSource = FormDataUtil::getFormDataSource(rPayModuleTable);
                if (formDataSource)
                {
                    formDataSource.research();
                    formDataSource.findRecord(payModuleTable);
                }
                return true;
            case RPayModuleSost::Calculate:
                return this.canChangeToCalculate();
            case RPayModuleSost::UnUse:
                this.moduleCalculationDelete();
                if (infolog.num())
                {
                    return false;
                }
                formDataSource = FormDataUtil::getFormDataSource(rPayModuleTable);
                if (formDataSource)
                {
                    formDataSource.research();
                    formDataSource.findRecord(payModuleTable);
                }
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needArchivUpdate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean needArchivUpdate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RPayModuleTable _payModuleTable)
    {
        enumCommon     = new DictEnum(enumNum(RPayCommonCalcType));
        queryRun       = new QueryRun(querystr(RPayCalcCommonQuery));
        payModuleTable = _payModuleTable.data();
        this.calcItemsAdd(enumCommon);
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCounterCalcTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCounterCalcTable payCounterCalcTable(RPayCounterCalcTable _payCounterCalcTable = payCounterCalcTable)
    {
        payCounterCalcTable = _payCounterCalcTable.data();
        return payCounterCalcTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId sourceTableId()
    {
        return tableNum(RHRMEmplTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateModuleSost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateModuleSost()
    {
        RPayModuleTable   payModuleTableLocal;
        RPayModuleControl parentModuleControl;

        if (! RpayController::canModuleChanged())
        {
            return false;
        }

        ttsbegin;

        if (payModuleTable.ParentModuleCode)
        {
            select firstonly forupdate payModuleTableLocal
                where payModuleTableLocal.PayModuleCode == payModuleTable.ParentModuleCode &&
                       payModuleTableLocal.PayModuleSost != RPayModuleSost::UnUse;

            if (payModuleTableLocal.RecId)
            {
                payModuleTableLocal.PayModuleSost = RPayModuleSost::NoCalculate;
                payModuleTableLocal.update();

                parentModuleControl = payModuleTableLocal.payModuleControl();
                parentModuleControl.updateModuleSost();
            }
            else
            {
                ttscommit;
                return false;
            }
        }

        while select forupdate payModuleTableLocal
                  where payModuleTableLocal.PayModuleGroupId >  payModuleTable.PayModuleGroupId &&
                        payModuleTableLocal.PayModuleSost    == RPayModuleSost::Calculate
        {
            payModuleTableLocal.PayModuleSost = RPayModuleSost::NoCalculate;
            payModuleTableLocal.update();
        }

        if (this.needArchivUpdate())
        {
            RPayParameters::setPayStatus(RPayStatus::NoCalc);
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>