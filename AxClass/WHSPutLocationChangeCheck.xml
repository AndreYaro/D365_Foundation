<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPutLocationChangeCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPutLocationChangeCheck</c> class is responsible for validating that a new location
/// is valid when the location is changed during put.
/// </summary>
class WHSPutLocationChangeCheck
{
    InventLocationId    warehouseId;
    WMSLocationId       locationId;
    ItemId              itemId;
    WHSWorkLine         workLine;
    InventSiteId        inventSiteId;
    InventDim           productDims;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the location validation.
    /// </summary>
    /// <returns>
    /// true if the location is valid; otherwise, false
    /// </returns>
    public boolean checkLocation()
    {
        return this.locationExists()
            && this.matchesPutLocationType()
            && (this.allowMixedItems() || this.isFixedLocationForThis() || !this.isFixedLocationForOther());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    private InventSiteId inventSiteId()
    {
        if (!inventSiteId)
        {
            inventSiteId = InventLocation::find(warehouseId).InventSiteId;
        }

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location is a fixed location for a product or variant other than the current one.
    /// </summary>
    /// <returns>
    /// true if the location is a fixed one for another product or variant; otherwise, false
    /// </returns>
    protected boolean isFixedLocationForOther()
    {
        return this.isFixedLocationForOtherProduct() || this.isFixedLocationForOtherVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForOtherProduct</Name>
				<Source><![CDATA[
    private boolean isFixedLocationForOtherProduct()
    {
        WHSInventFixedLocation  fixedProductLocation;

        select firstonly RecId from fixedProductLocation
            where   fixedProductLocation.InventSiteId        == this.inventSiteId() &&
                    fixedProductLocation.InventLocationId    == warehouseId         &&
                    fixedProductLocation.wmsLocationId       == locationId          &&
                    fixedProductLocation.ItemId              != itemId;

        return fixedProductLocation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForOtherVariant</Name>
				<Source><![CDATA[
    private boolean isFixedLocationForOtherVariant()
    {
        WHSProductVariantFixedLocation  fixedVariantLocation;
        boolean                         ret = false;

        if (workLine)
        {
            // check if the location is fixed either for another variant of this product,
            // or a variant of another product
            select firstonly RecId from fixedVariantLocation
                where   fixedVariantLocation.InventLocationId  == warehouseId
                    &&  fixedVariantLocation.wmsLocationId     == locationId
                    &&  (   fixedVariantLocation.ItemId                     != itemId
                        ||  fixedVariantLocation.ProductVariantInventDimId  != this.workLineProductDims().InventDimId);

            ret = fixedVariantLocation.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForThis</Name>
				<Source><![CDATA[
    private boolean isFixedLocationForThis()
    {
        return this.isFixedLocationForThisVariant() || this.isFixedLocationForThisProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForThisProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location is the fixed location for the current product.
    /// </summary>
    /// <returns>
    /// true if the location is a fixed one for the product; otherwise, false
    /// </returns>
    protected boolean isFixedLocationForThisProduct()
    {
        return WHSInventFixedLocation::exist(itemId, warehouseId, this.inventSiteId(), locationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedLocationForThisVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location is the fixed location for the current product variant.
    /// </summary>
    /// <returns>
    /// true if the location is a fixed one for the variant; otherwise, false
    /// </returns>
    protected boolean isFixedLocationForThisVariant()
    {
        boolean                 ret = false;

        if (this.workLineProductDims())
        {
            ret = WHSProductVariantFixedLocation::exist(
                itemId,
                this.workLineProductDims().InventDimId,
                warehouseId,
                locationId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location exists in the warehouse.
    /// </summary>
    /// <returns>
    /// true if the location exists; otherwise, false
    /// </returns>
    protected boolean locationExists()
    {
        return locationId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchesPutLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the work line is a put, checks to see that it matches the work class's put location type.
    /// </summary>
    /// <returns>
    /// true if the location type matches or does not need to match; otherwise, false
    /// </returns>
    protected boolean matchesPutLocationType()
    {
        boolean ret = true;

        if (workLine &&
            workLine.WorkType == WHSWorkType::Put &&
            WHSWorkClassValidLocType::workClassHasSpecifiedLocType(workLine.WorkClassId) &&
            !WHSWorkClassValidLocType::find(workLine.WorkClassId, WHSLocationProfile::find(WMSLocation::find(locationId, warehouseId).LocProfileId).LocType))
        {
            ret = checkFailed("@WAX3026");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMixedItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the location allows mixed items.
    /// </summary>
    /// <returns>true if the location alllows mixed items; otherwise, false.</returns>
    protected boolean allowMixedItems()
    {
        return WMSLocation::find(locationId, warehouseId).whsLocationProfile().AllowMixedItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSPutLocationChangeCheck</c> class from the specified parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse ID of the current warehouse.
    /// </param>
    /// <param name="_locationId">
    /// Location ID of the location to which the item is attempted to be put.
    /// </param>
    /// <param name="_itemId">
    /// Item ID of the item that the work is executed for.
    /// </param>
    /// <param name="_workLine">
    /// Current work line.
    /// </param>
    protected void new(
        InventLocationId    _inventLocationId,
        WMSLocationId       _locationId,
        ItemId              _itemId,
        WHSWorkLine         _workLine)
    {
        warehouseId = _inventLocationId;
        locationId = WMSLocation::whsGetLocationId(_locationId, warehouseId);
        itemId      = _itemId;
        workLine    = _workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workLineProductDims</Name>
				<Source><![CDATA[
    private InventDim workLineProductDims()
    {
        if (!productDims && workLine && workLine.inventDim().anyProductDimensionSpecified())
        {
            productDims.initFromInventDim(workLine.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
            productDims = InventDim::findOrCreate(productDims);
        }

        return productDims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSPutLocationChangeCheck</c> class from the specified parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse ID of the current warehouse.
    /// </param>
    /// <param name="_locationId">
    /// Location ID of the location to which the item is attempted to be put.
    /// </param>
    /// <param name="_itemId">
    /// Item ID of the item that the work is executed for.
    /// </param>
    /// <param name="_workLine">
    /// Current work line.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSPutLocationChangeCheck</c> class.
    /// </returns>
    public static WHSPutLocationChangeCheck newFromParameters(
        InventLocationId    _inventLocationId,
        WMSLocationId       _locationId,
        ItemId              _itemId,
        WHSWorkLine         _workLine)
    {
        return new WHSPutLocationChangeCheck(_inventLocationId, _locationId, _itemId, _workLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>