<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CBDDestinationsFormLetterContext_POInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// The <c>CBDDestinationsFormLetterContext_POInvoice</c> class is an implementation of the
/// <c>CBDDestinationsFormLetterContextInterface</c> interface to support
/// runtime Electronic reporting destinations for Purchase order Invoice document.
/// </summary>
[ExportMetadata(classStr(CBDDestinationsFormLetterContextInterface), PrintMgmtDocumentType::PurchaseOrderInvoice)]
[Export(identifierstr(Dynamics.AX.Application.CBDDestinationsFormLetterContextInterface))]
internal final class CBDDestinationsFormLetterContext_POInvoice
    implements CBDDestinationsFormLetterContextInterface
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryTableBuffer</Name>
				<Source><![CDATA[
    public Common getQueryTableBuffer(Common _reference, Object _formLetter)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = _reference as VendInvoiceInfoTable;

        if (!vendInvoiceInfoTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchFormLetter purchFormLetter = _formLetter as PurchFormLetter;

        if (!purchFormLetter)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.setTmp();
        vendInvoiceJour.initValue();
        vendInvoiceJour.InvoiceDate = purchFormLetter.transDate();
        vendInvoiceJour.initFromParmTable(vendInvoiceInfoTable);
        vendInvoiceJour.Proforma = NoYes::Yes;
        vendInvoiceJour.doInsert();

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountReferences</Name>
				<Source><![CDATA[
    public NumberOfRecords getCountReferences(Object _formLetter)
    {
        PurchFormLetter purchFormLetter = _formLetter as PurchFormLetter;

        if (!purchFormLetter)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchParmUpdate purchParmUpdate = purchFormLetter.purchParmUpdate();
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select count(RecId) from vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId;

        return vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceBuffer</Name>
				<Source><![CDATA[
    public Common getReferenceBuffer(Object _formLetter)
    {
        PurchFormLetter purchFormLetter = _formLetter as PurchFormLetter;

        if (!purchFormLetter)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchParmUpdate purchParmUpdate = purchFormLetter.purchParmUpdate();
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == purchParmUpdate.ParmId;

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtRefTableBuffer</Name>
				<Source><![CDATA[
    public Common getPrintMgmtRefTableBuffer(Common _reference)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = _reference as VendInvoiceInfoTable;

        if (!vendInvoiceInfoTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Common printMgmtReferencedTable;

        if (vendInvoiceInfoTable.isNonPO())
        {
            printMgmtReferencedTable = vendInvoiceInfoTable.vendTable_InvoiceAccount();
        }
        else
        {
            printMgmtReferencedTable = vendInvoiceInfoTable.purchTable();
        }

        return printMgmtReferencedTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintContext</Name>
				<Source><![CDATA[
    public PrintMgmtPrintContext getPrintContext(Common _printMgmtReferencedTable, Common _queryTableBuffer)
    {
        FormLetterReport formLetterReport = FormLetterReport::construct(this.getPrintMgmtDocumentType());

        if (_printMgmtReferencedTable.TableId == tableNum(VendTable)
            && formLetterReport is PurchFormLetterReport_Invoice)
        {
            PurchFormLetterReport_Invoice purchFormLetterReport_Invoice = formLetterReport;
            purchFormLetterReport_Invoice.setPrintMgmtNodeTypeForVendor(true);
        }

        return formLetterReport.getDefaultPrintMgmtContext(_queryTableBuffer, _printMgmtReferencedTable.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    private PrintMgmtDocumentType getPrintMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>