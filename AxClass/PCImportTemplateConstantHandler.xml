<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportTemplateConstantHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportTemplateConstantHandler extends PCImportAttributeBindingHandler
{
    PCTemplateConstant              templateConstant;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performCustomInitialization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value given a string representation of the value.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if no SysRelAttributeProperty is found.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if an unexpected data type is found.
    /// </exception>
    protected void performCustomInitialization()
    {
        EcoResTextValue         textValue;
        EcoResBooleanValue      booleanValue;
        EcoResIntValue          intValue;
        EcoResFloatValue        floatValue;
        EcoResDateTimeValue     dateTimeValue;
        date                    dateValue;

        DictTable               dictTable;
        DictField               dictField;
        Types                   type;

        str                     value               = this.getFieldByName(#Value);

        #define.DateSequence(123)

        dictTable                                   = DictTable::construct(tableId2name(tableId));
        dictField                                   = dictTable.fieldObject(fieldId);

        // validate type match
        type                                        = dictField.baseType();

        switch (type)
        {
            case Types::Enum,
                 Types::Integer:
                if (value == #True || value == #False)
                {
                    booleanValue.BooleanValue       = (value == #True ? NoYes::Yes : NoYes::No);
                    booleanValue.insert();

                    templateConstant.ConstantValue  = booleanValue.RecId;
                }
                else
                {
                    intValue.IntValue               = str2int(value);
                    intValue.insert();

                    templateConstant.ConstantValue  = intValue.RecId;
                }
                break;

            case Types::Real:
                floatValue.FloatValue               = str2num(value);
                floatValue.insert();

                templateConstant.ConstantValue      = floatValue.RecId;
                break;

            case Types::Date:
                dateValue                           = str2Date(value, #DateSequence);
                dateTimeValue.DateTimeValue         = DateTimeUtil::newDateTime(dateValue, 1);
                dateTimeValue.insert();

                templateConstant.ConstantValue      = dateTimeValue.RecId;
                break;

            case Types::String:
                textValue.TextValue                 = value;
                textValue.insert();

                templateConstant.ConstantValue  = textValue.RecId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return templateConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportTemplateConstantHandler construct()
    {
        return new PCImportTemplateConstantHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>