<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost_Dismiss</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost_Dismiss extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResponsible</Name>
				<Source><![CDATA[
    private void checkResponsible(RHRMEmplTable _emplTable)
    {
        RPayHRMOrganization      rhrmOrganization;

        setPrefix(strFmt("@RUP1590", _emplTable.EmployeeId, _emplTable.name()));

        while select HrmOrganizationId, Description from rhrmOrganization
            where rhrmOrganization.Responsible == _emplTable.EmployeeId
        {
            info(strFmt("@RUP1591", rhrmOrganization.HrmOrganizationId, rhrmOrganization.Description));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean                             ret = true;
        RHRMOrderTrans                      rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMOrderTrans                      hrmOrderTransLocal;
        RHRMOrderTable                      hrmOrderTableLocal;

        EmplAdvTable_RU   emplAdvTable;
        EmployeeTable_RU  employeeTable;
        EmplBalanceMST_RU emplBalance;

        if (! super(_journalTransData))
            return false;

        select firstonly RecId from hrmOrderTransLocal
            where hrmOrderTransLocal.StartDate  >  rhrmOrderTrans.StartDate &&
                  hrmOrderTransLocal.EmplId     == rhrmOrderTrans.EmplId
        join RecId from hrmOrderTableLocal
            where hrmOrderTableLocal.RecId      == hrmOrderTransLocal.OrderTableRecId &&
                  hrmOrderTableLocal.Posted     == NoYes::Yes;

        if (hrmOrderTransLocal.RecId)
            ret = checkFailed(strFmt("@RUP1915", rhrmOrderTrans.EmplId, rhrmOrderTrans.emplName()));

        ret = ret && RHRMJournalCheckPost::checkDismissOperation(rhrmOrderTrans);

        if (ret)
        {
            employeeTable = EmployeeTable_RU::findByEmployeeId(rhrmOrderTrans.EmplId);

            if (employeeTable && employeeTable.AdvHolder && employeeTable.RPayCheck)
            {
                select firstOnly RecId from emplAdvTable
                    where emplAdvTable.EmplAccount == rhrmOrderTrans.EmplId &&
                          (emplAdvTable.status == EmplAdvStatus_RU::Approved ||
                           emplAdvTable.status == EmplAdvStatus_RU::Open);

                if (emplAdvTable.RecId)
                {
                    warning(strFmt("@RUP6160", rhrmOrderTrans.EmplId, rhrmOrderTrans.emplName()));
                }

                emplBalance = new EmplBalanceMST_RU(maxDate());
                emplBalance.calc(rhrmOrderTrans.EmplId);
                if ((emplBalance.amountMST() + emplBalance.amountMSTExchAdj()) != 0)
                {
                    warning(strFmt("@RUP6164", rhrmOrderTrans.EmplId, rhrmOrderTrans.emplName()));
                }
            }
        }

        this.checkResponsible(RHRMEmplTable::find(rhrmOrderTrans.EmplId));

        return ret && rhrmOrderTrans.validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans                 rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMOrderTable                 rhrmOrderTable = journalTableData.journalTable();

        RPayHistory                    payHistory, payHistoryLast;

        RHRMVacationType               hrmVacationType;
        RHRMEmplTable                  emplTable;
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        RPayVacationDetermineTime      payVacationDetermineTime;
        Days                           compensatedDays;

        super(_journalTransData);

        payHistory.Number                   = rhrmOrderTrans.EmplId;
        payHistory.HistType                 = RPayHistType::Employment;
        payHistory.StartDate                = rhrmOrderTrans.StartDate;
        payHistory.OperationType            = RHRMJournalType::Dismiss;
        payHistory.HrmOrderDate             = rhrmOrderTable.TransDate;
        payHistory.HrmOrderNum              = rhrmOrderTable.OrderNum;
        payHistory.HrmReasonCodeId          = rhrmOrderTrans.ReasonCodeId;
        payHistory.Reason                   = rhrmOrderTable.Reason;
        payHistory.AttachDocDate            = rhrmOrderTrans.AttachDocDate;
        payHistory.AttachDocNum             = rhrmOrderTrans.AttachDocNum;
        payHistory.OrderTransRecId          = rhrmOrderTrans.RecId;

        payHistoryLast = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId, rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);
        payHistory.LastStaffListRefRecId    = payHistoryLast.hrmStaffListRefRecId;
        payHistory.LastOrganizationId       = payHistoryLast.HrmOrganizationId;
        payHistory.LastTitle                = payHistoryLast.HcmTitle;
        payHistory.LastTradeCategory        = payHistoryLast.TradeCategory;
        payHistory.TransTime                = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        payHistory.insert();

        this.updateEmplTable(rhrmOrderTrans);

        if (updateTbl && isConfigurationkeyEnabled(configurationKeyNum(RPayTbl)))
        {
            this.updateTimesheetDismiss(payHistory);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(RpayAverageEarn)))
        {
            emplTable = RHRMEmplTable::find(rhrmOrderTrans.EmplId);

            while select VacationTypeId from hrmVacationType
                where hrmVacationType.CalcCompensation == NoYes::Yes
            {
                payVacationDetermineTime = new RPayVacationDetermineTime(emplTable.EmployeeId,
                                                                         emplTable.PayEmploymentDate,
                                                                         emplTable.PayResignedDate,
                                                                         hrmVacationType.VacationTypeId);

                compensatedDays = payVacationDetermineTime.getCompensatedDays();
                if (compensatedDays)
                {
                    payAverageEarnEmplPeriodTable.rPayAverageEarnCode = RPayAverageEarnTable::findAverageEarnCode(RPayAverageEarnCodeType::Vacation, hrmVacationType.VacationTypeId).rPayAverageEarnCode;

                    payAverageEarnEmplPeriodTable.initFromAverageEarnEmplTable();

                    payAverageEarnEmplPeriodTable.EmplId                = emplTable.EmployeeId;
                    payAverageEarnEmplPeriodTable.StartDate             = emplTable.PayResignedDate;
                    payAverageEarnEmplPeriodTable.VacationTypeId        = hrmVacationType.VacationTypeId;
                    payAverageEarnEmplPeriodTable.VacationRecordType    = RPayVacationRecordType::VacationCompensation;
                    payAverageEarnEmplPeriodTable.DayNumber             = compensatedDays;
                    payAverageEarnEmplPeriodTable.AverageEarnCalcPeriod = RPayParameters::payPeriod(emplTable.EmployeeId);

                    payAverageEarnEmplPeriodTable.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateEmplTable(RHRMOrderTrans _orderTrans)
    {
        RHRMEmplTable emplTable = RHRMEmplTable::find(_orderTrans.EmplId, true);

        emplTable.PayResignedDate = _orderTrans.StartDate;
        emplTable.doUpdate();

        this.checkResponsible(emplTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetDismiss</Name>
				<Source><![CDATA[
    private void updateTimesheetDismiss(RPayHistory _rPayHistory)
    {
        ReportPeriod_RU lastTimesheetDate;

        if (updateTbl)
        {
            lastTimesheetDate = RPayTblTrans::lastTimesheetPeriod(_rPayHistory.emplId(), _rPayHistory.StartDate);
            this.updateTimesheet(_rPayHistory.emplId(),
                                 _rPayHistory.StartDate + 1,
                                 max(dateEndMth(_rPayHistory.StartDate), lastTimesheetDate));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>