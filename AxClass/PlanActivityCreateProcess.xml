<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityCreateProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanActivityCreateProcess</c> class is a factory class for <c>PlanActivity</c> of the
///    process type.
/// </summary>
public class PlanActivityCreateProcess extends PlanActivityCreate
{
    PlanActivityTmpPickingLocations    pickingLocations;

    #LOCALMACRO.CurrentList
        wrkResourceGroup,
        onHandUpdate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all the necessary objects that are related to the <c>PlanActivity</c> that is being created.
    /// </summary>
    /// <returns>
    ///    The newly created high-level <c>PlanActivity</c> record.
    /// </returns>
    public PlanActivity createActivity()
    {
        PlanActivity                        highLevelPlanActivity;
        PlanActivity                        receivePlanActivity;
        PlanActivity                        operatePlanActivity;
        PlanActivityTimeRefRecId            planActivityTimeRefRecId;
        PlanActivityLocation                planActivityLocation;
        PlanActivityResourceRequirement     planActivityResourceRequirement;
        PlanActivityRelationship            planActivityRelationship;
        WrkCtrResourceGroup                 wrkCtrResourceGroup = WrkCtrResourceGroup::find(this.parmWrkResourceGroup());

        ttsbegin;
        highLevelPlanActivity = super();

        // Create an activity location based on the output location of the work cell
        planActivityLocation.PlanActivity             = highLevelPlanActivity.RecId;
        planActivityLocation.InventLocationId         = wrkCtrResourceGroup.OutputInventLocationId;
        planActivityLocation.InventLocationDataAreaId = planActivityLocation.InventLocationId ? appl.company().dataArea(tablenum(InventLocation)) : '';
        planActivityLocation.wmsLocationId            = wrkCtrResourceGroup.OutputWMSLocationId;
        planActivityLocation.wmsLocationDataAreaId    = planActivityLocation.wmsLocationId ? appl.company().dataArea(tablenum(WMSLocation)) : '';
        this.validateAndInsert(planActivityLocation);

        if (wrkCtrResourceGroup)
        {
            if (!this.mustSetPlanActivityTimeAtHighLevel())
            {
                planActivityTimeRefRecId = planActivityTime.RecId;
            }

            planActivityResourceRequirement.WrkCtrResourceGroup = wrkCtrResourceGroup.RecId;
            planActivityResourceRequirement.PlanActivity        = highLevelPlanActivity.RecId;
            planActivityResourceRequirement.PlanActivityTime    = planActivityTimeRefRecId;
            this.validateAndInsert(planActivityResourceRequirement);
        }
        else
        {
            throw error("@SYS331996");
        }

        // Process : Pick * n  -> Operate -> Recieve
        // Create operate activity
        operatePlanActivity = this.createAtomicActivity(PlanActivityType::Operate,
                                                        NoYes::No,
                                                        onHandUpdate,
                                                        0,
                                                        NoYes::No,
                                                        NoYes::No,
                                                        NoYes::No,
                                                        NoYes::No,
                                                        wrkCtrResourceGroup.RecId);

        // Set up aggregation for the operate activity
        planActivityRelationship.IndependentPlanActivity = highLevelPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = operatePlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        // Go through the picking locations and create a picking activity for each location
        while select pickingLocations
        {
            this.createProcessPickingActivity(
                                       pickingLocations.ItemId,
                                       pickingLocations.InventDimId,
                                       pickingLocations.PlanActivityUpdateOnhand,
                                       pickingLocations.RegisterScrap,
                                       highLevelPlanActivity.RecId,
                                       operatePlanActivity.RecId);
        }

        // Create receive activity
        receivePlanActivity = this.createAtomicActivity(PlanActivityType::Receive,
                                                        NoYes::No,
                                                        !receiveSemiFinished && onHandUpdate);

        // Sequence the atomic activities
        planActivityRelationship.IndependentPlanActivity = operatePlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = receivePlanActivity.RecId;
        planActivityRelationship.Constraint              = sequencePlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        planActivityRelationship.IndependentPlanActivity = highLevelPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = receivePlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);
        ttscommit;

        return highLevelPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessPickingActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a picking atomic activity
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value for which the picking activity is defined.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value from which the item must be picked.
    /// </param>
    /// <param name="_onHandUpdate">
    /// A Boolean value that defines whether the picking activity must update on-hand inventory.
    /// </param>
    /// <param name="_registerScrap">
    /// A Boolean value that defines whether the picking activity must register scrap.
    /// </param>
    /// <param name="_highLevelPlanActivityRefRecId">
    /// The record ID of the related high level process activity.
    /// </param>
    /// <param name="_operatePlanActivityRefRecId">
    /// The record ID of the related operate activity.
    /// </param>
    /// <param name="_leanProdFlowActivityPickingLocation">
    /// A <c>LeanProdFlowActivityPickingLocation</c> table buffer; optional.
    /// </param>
    /// <param name="_insertNewPickingLocation">
    /// A Boolean value that specifies whether a <c>LeanProdFlowActivityPickingLocation</c> has to be
    /// inserted; optional.
    /// </param>
    /// <returns>
    /// The <c>PlanActivity</c> record that represents the picking activity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity createProcessPickingActivity(
        ItemId                              _itemId,
        InventDimId                         _inventDimId,
        OnHandUpdate                        _onHandUpdate,
        LeanRegisterScrap                   _registerScrap,
        PlanActivityRefRecId                _highLevelPlanActivityRefRecId,
        PlanActivityRefRecId                _operatePlanActivityRefRecId,
        LeanProdFlowActivityPickingLocation _leanProdFlowActivityPickingLocation = null,
        boolean                             _insertNewPickingLocation = true)
    {
        PlanActivity                        pickPlanActivity;
        PlanActivityRelationship            planActivityRelationship;
        InventDim                           inventDim;
        InventDimId                         inventDimId;
        InventDimGroupSetup                 inventDimGroupSetup;
        InventDimParm                       inventDimParm;
        LeanProdFlowActivityPickingLocation leanProdFlowActivityPickingLocation;

        // initializes constraints
        if (   !sequencePlanConstraint
            || !aggregationPlanConstraint)
        {
            this.initPlanConstraints();
        }

        // Create pick activity
        pickPlanActivity = this.createAtomicActivity(PlanActivityType::Pick,
                                                     NoYes::No,
                                                     _onHandUpdate,
                                                     0,
                                                     NoYes::No,
                                                     NoYes::No,
                                                     NoYes::No,
                                                     _registerScrap);

        // Sequence the atomic picking activities - they must all be ended before operate can start
        planActivityRelationship.IndependentPlanActivity = pickPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = _operatePlanActivityRefRecId;
        planActivityRelationship.Constraint              = sequencePlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        // Set up aggregation for the activities
        planActivityRelationship.IndependentPlanActivity = _highLevelPlanActivityRefRecId;
        planActivityRelationship.DependentPlanActivity   = pickPlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        // use buffer that was passed as parameter
        if (!_insertNewPickingLocation)
        {
            leanProdFlowActivityPickingLocation = _leanProdFlowActivityPickingLocation;
        }

        // determine final inventDimId
        inventDim = InventDim::find(_inventDimId);
        if (!inventDim)
        {
            inventDimId = InventDim::inventDimIdBlank();
        }
        else
        {
            if (leanProdFlowActivityPickingLocation.ItemId)
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(leanProdFlowActivityPickingLocation.ItemId);
                inventDimGroupSetup.inventDimParmActive(inventDimParm);
            }
            else
            {
                inventDimParm.initDimLeanPickingList(null);
            }
            inventDim.clearNotSelectedDim(inventDimParm);
            inventDimId = InventDim::findDim(inventDim).InventDimId;
        }

        // initialize new picking location
        leanProdFlowActivityPickingLocation.ProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(pickPlanActivity.RecId).RecId;
        leanProdFlowActivityPickingLocation.ItemId                 = _itemId;
        leanProdFlowActivityPickingLocation.ItemDataAreaId         = leanProdFlowActivityPickingLocation.ItemId ? appl.company().dataArea(tablenum(InventTable)) : '';
        leanProdFlowActivityPickingLocation.InventDimId            = inventDimId;
        leanProdFlowActivityPickingLocation.InventDimDataAreaId    = leanProdFlowActivityPickingLocation.InventDimId ? appl.company().dataArea(tablenum(InventDim)) : '';

        // only insert if the record is not inserted outside this class (on a form)
        if (_insertNewPickingLocation)
        {
            this.validateAndInsert(leanProdFlowActivityPickingLocation);
        }

        return pickPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current instance of the class by using the parameters that are in the specified
    ///    container.
    /// </summary>
    /// <param name="_parameters">
    ///    The container that has the parameters.
    /// </param>
    /// <remarks>
    ///    This method is virtual; only the common parameters are initialized.
    /// </remarks>
    protected void initFromContainer(container _parameters)
    {
        container   parentParams, childParams, pickingLocationsContainer;
        int         conIdx, conLength;

        // unpack parent parameters
        [parentParams, childParams] = _parameters;

        // initialize parent
        super(parentParams);

        // unpack current object parameters
        [#CurrentList, pickingLocationsContainer] = childParams;

        conLength = conlen(pickingLocationsContainer);

        // if there're any picking locations - add them to the temp table
        for (conIdx = 1; conIdx <= conLength; conIdx++)
        {
            pickingLocations.clear();
            con2Buf(conpeek(pickingLocationsContainer, conIdx), pickingLocations);
            pickingLocations.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetPlanActivityTimeAtHighLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the plan activity time must be set at the high level.
    /// </summary>
    /// <returns>
    /// true if the activity does not have a resource requirement; otherwise, false.
    /// </returns>
    protected boolean mustSetPlanActivityTimeAtHighLevel()
    {
        return !this.parmWrkResourceGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickingLocations</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityTmpPickingLocations parmPickingLocations(PlanActivityTmpPickingLocations _pickingLocations = pickingLocations)
    {
        pickingLocations = _pickingLocations;

        return pickingLocations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkResourceGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmWrkResourceGroup(RefRecId _wrkResourceGroup = wrkResourceGroup)
    {
        wrkResourceGroup = _wrkResourceGroup;

        return wrkResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static PlanActivityCreateProcess construct()
    {
        return new PlanActivityCreateProcess();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>