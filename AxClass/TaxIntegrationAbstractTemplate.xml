<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAbstractTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAbstractTemplate</c> class is an abstract template to processs a <c>TaxIntegrationDocumentObject</c>.
/// which goes through the document itself, the charges of the document, the lines of the document, and the charges of each line.
/// </summary>
public abstract class TaxIntegrationAbstractTemplate
{
    internal protected ITaxIntegrationDataEnumerator lineEnumerator;
    internal protected ITaxIntegrationDataEnumerator lineChargeEnumerator;
    internal protected ITaxIntegrationDataEnumerator documentChargeEnumerator;

    /// <summary>
    /// The document to process.
    /// </summary>
    protected TaxIntegrationDocumentObject document;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationAbstractTemplate</c>.
    /// </summary>
    /// <param name = "_document">The document to process.</param>
    public void new(TaxIntegrationDocumentObject _document)
    {
        this.document = _document;
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits.
    /// </summary>
    protected void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line buffer need to be set for data persistence class.
    /// </summary>
    /// <returns> true if line buffer need to be set; otherwise, false. </returns>
    protected boolean useLineRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    protected abstract SysDaQueryObject getDocumentQueryObject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    protected abstract SysDaQueryObject getLineQueryObject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    protected abstract SysDaQueryObject getDocumentChargeQueryObject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    protected abstract SysDaQueryObject getLineChargeQueryObject()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the execution is transactional,
    /// which involves <c>ttsbegin</c>, <c>ttscommit</c>, and <c>ttsabort</c>.
    /// </summary>
    /// <returns>true if it is transactional; otherwise, false.</returns>
    protected abstract boolean isTransactional()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document.
    /// </summary>
    /// <returns>The document.</returns>
    protected abstract TaxIntegrationDocumentObject processDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected abstract TaxIntegrationLineObject processLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnsavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the unsaved line of the document.
    /// </summary>
    /// <returns>The current line of the document.</returns>
    protected TaxIntegrationLineObject processUnsavedLine()
    {
        // It won't be called. Throw error and do nothing, adding an abstrace method is breaking change
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the document.
    /// </summary>
    /// <returns>The current charge of the document.</returns>
    protected abstract TaxIntegrationLineObject processDocumentCharge()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the current charge of the current line.
    /// </summary>
    /// <param name = "_line">The current line.</param>
    /// <returns>The current charge of the current line.</returns>
    protected abstract TaxIntegrationLineObject processLineCharge(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the template.
    /// </summary>
    public void execute()
    {
        if (this.shouldSkip())
        {
            return;
        }

        if (!this.findDocument())
        {
            return;
        }

        if (this.isTransactional())
        {
            ttsbegin;
        }

        if (!this.processDocument())
        {
            if (this.isTransactional())
            {
                ttsabort;
            }
            return;
        }

        if (!document.shouldSkipLine())
        {
            lineEnumerator = this.getLineEnumerator();
            while (lineEnumerator.findNext())
            {
                TaxIntegrationLineObject line = this.processLine();
                if (!line)
                {
                    if (this.isTransactional())
                    {
                        ttsabort;
                    }
                    return;
                }

                if (!document.shouldSkipLineCharge())
                {
                    lineChargeEnumerator = this.getLineChargeEnumerator(line);
                    while (lineChargeEnumerator.findNext())
                    {
                        TaxIntegrationLineObject charge = this.processLineCharge(line);
                        if (!charge)
                        {
                            if (this.isTransactional())
                            {
                                ttsabort;
                            }
                            return;
                        }
                    }
                }
            }

            // For journal, tax is displayed for lines haven't been inserted/updated.
            if (document.hasUnsavedLine())
            {
                TaxIntegrationLineObject line = this.processUnsavedLine();
                if (!line)
                {
                    if (this.isTransactional())
                    {
                        ttsabort;
                    }
                    return;
                }
            }
        }

        if (!document.shouldSkipDocumentCharge())
        {
            documentChargeEnumerator = this.getDocumentChargeEnumerator();
            while (documentChargeEnumerator.findNext())
            {
                TaxIntegrationLineObject charge = this.processDocumentCharge();
                if (!charge)
                {
                    if (this.isTransactional())
                    {
                        ttsabort;
                    }
                    return;
                }
            }
        }

        if (this.isTransactional())
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds document query object records.
    /// </summary>
    /// <returns>True if document query records exist; otherwise, false</returns>
    private boolean findDocument()
    {
        boolean hasFoundRecord = this.findDocumentBySysda();

        if (!this.document.getLocalRecord() && !hasFoundRecord)
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:RecordNotFound", 'RecId', this.document.getLocalRecId(), this.document.getLocalTableId())));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentBySysda</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds document query object records by Sysda.
    /// </summary>
    /// <returns>True if document query records exist; otherwise, false</returns>
    internal protected boolean findDocumentBySysda()
    {
        var documentFindBundle = TaxIntegrationSysDaFindBundle::construct(this.getDocumentQueryObject());
        boolean hasFoundRecord = documentFindBundle.find();
        return hasFoundRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for line.
    /// </summary>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getLineEnumerator()
    {
        return TaxIntegrationDataEnumeratorFactory::getInstance(this.getLineQueryObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for line charge.
    /// </summary>
    /// <param name = "_line"><c>TaxIntegrationLineObject</c></param>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getLineChargeEnumerator(TaxIntegrationLineObject _line)
    {
        return TaxIntegrationDataEnumeratorFactory::getInstance(this.getLineChargeQueryObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data enumerator for document charge.
    /// </summary>
    /// <returns><c>ITaxIntegrationDataEnumerator</c></returns>
    internal protected ITaxIntegrationDataEnumerator getDocumentChargeEnumerator()
    {
        return TaxIntegrationDataEnumeratorFactory::getInstance(this.getDocumentChargeQueryObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the data retrieval or data persistence for transaction table process should be skipped.
    /// </summary>
    /// <returns>true, if the process should be skipped for transaction table; otherwise, false.</returns>
    /// <remarks>
    /// For data persistence, this method only skips persistence for transaction table. Tax is still persisted.
    /// </remarks>
    internal boolean shouldSkip()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>