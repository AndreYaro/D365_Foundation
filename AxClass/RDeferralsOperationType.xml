<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsOperationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsOperationType
{
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_RDeferrals  ledgerJournalTrans_RDeferrals;
    RDeferralsTransDate transDate;
    RDeferralsBook      rDeferralsBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBePosted</Name>
				<Source><![CDATA[
        protected boolean canBePosted()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        public boolean check()
    {
        boolean      ret= true;

        ret = this.checkPostBook();
        ret = ret && this.checkAcquisitionDate();
        ret = ret && this.checkLastWriteDate();
        ret = ret && ledgerJournalTrans.checkRDefferalsClosingDate_RU();

        if (! this.canBePosted())
            ret = checkFailed(strfmt("@GLS107168",
                                     rDeferralsBook.DeferralsId,
                                     rDeferralsBook.DeferralsBookId,
                                     rDeferralsBook.Status,
                                     this.rDeferralsTransType()));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAcquisitionDate</Name>
				<Source><![CDATA[
        protected boolean checkAcquisitionDate()
    {
        if (rDeferralsBook.StartDeferralsDate > transDate)
            return checkFailed(strfmt("@GLS103797", rDeferralsBook.DeferralsId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastOperationDate</Name>
				<Source><![CDATA[
        protected boolean checkLastOperationDate()
    {

        if (RDeferralsTrans::transLastDate(rDeferralsBook.DeferralsId, rDeferralsBook.DeferralsBookId) > transDate)
            return checkFailed(strfmt("@GLS107169", rDeferralsBook.DeferralsId, rDeferralsBook.DeferralsBookId));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastWriteDate</Name>
				<Source><![CDATA[
        protected boolean checkLastWriteDate()
    {
        if (transDate < dateStartMth(rDeferralsBook.LastDeferralsDate))
            return checkFailed(strfmt("@GLS103802", rDeferralsBook.DeferralsId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNetBookValue</Name>
				<Source><![CDATA[
        protected boolean checkNetBookValue()
    {
        RDeferralsSumCalc   deferralsSumTrans;
        RDeferralsAmount    deferralsAmount;

        deferralsAmount = ledgerJournalTrans.amountMST_RU();

        deferralsSumTrans = RDeferralsSumCalc_Trans::newDeferralsPeriod(rDeferralsBook.DeferralsId,
                                                                        rDeferralsBook.DeferralsBookId);

        if (deferralsSumTrans.netBookValue() - deferralsAmount < 0 )
            return checkFailed(strfmt("@GLS103801", ledgerJournalTrans.parmAccount()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostBook</Name>
				<Source><![CDATA[
        private boolean checkPostBook()
    {
        if (! rDeferralsBook)
            return checkFailed(strfmt("@GLS107167", rDeferralsBook.DeferralsId, rDeferralsBook.DeferralsBookId));

        if (rDeferralsBook.Depreciate)
            return checkFailed(strfmt("@GLS103798", rDeferralsBook.DeferralsId, rDeferralsBook.DeferralsBookId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostTrans</Name>
				<Source><![CDATA[
        public boolean checkPostTrans()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWritingOffPeriod</Name>
				<Source><![CDATA[
        protected boolean checkWritingOffPeriod()
    {
        RDeferralsTransDate  writingDate;

        if (rDeferralsBook.LastDeferralsDate)
        {
            writingDate = rDeferralsBook.LastDeferralsDate;
        }
        else
        {
            writingDate = RDeferralsGroup::find(rDeferralsBook.DeferralsGroupId).InitWriteStartDate ==
                          RDeferralsInitWriteStartDate::CreatedDate ?
                          rDeferralsBook.StartDeferralsDate :
                          rDeferralsBook.StartDeferralsDate - 1;
        }

        if (writingDate < transDate)
        {
            return checkFailed(strfmt("@GLS107172", rDeferralsBook.DeferralsId, rDeferralsBook.DeferralsBookId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(LedgerJournalTrans _ledgerJournalTrans,
                    TransDate          _transDate,
                    RDeferralsBookId   _rDeferralsBookId)
    {

        transDate           = _transDate;
        ledgerJournalTrans  = _ledgerJournalTrans;
        ledgerJournalTrans_RDeferrals  = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);
        rDeferralsBook      = RDeferralsBook::find(_ledgerJournalTrans.parmAccount(), _rDeferralsBookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rDeferralsTransType</Name>
				<Source><![CDATA[
        protected RDeferralsTransType rDeferralsTransType()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RDeferralsOperationType construct(RDeferralsTransType _rDeferralsTransType,
                                                           LedgerJournalTrans  _ledgerJournalTrans,
                                                           TransDate           _transDate,
                                                           RDeferralsBookId    _rDeferralsBookId)
    {
        switch (_rDeferralsTransType)
        {
            case RDeferralsTransType::WritingOff:
                return new RDeferralsOperationType_WritingOff(_ledgerJournalTrans, _transDate, _rDeferralsBookId);
            case RDeferralsTransType::Retired:
                return new RDeferralsOperationType_Retirement(_ledgerJournalTrans, _transDate, _rDeferralsBookId);
            case RDeferralsTransType::Receipt:
                return new RDeferralsOperationType_Receipt(_ledgerJournalTrans, _transDate, _rDeferralsBookId);
        }
        return new RDeferralsOperationType(_ledgerJournalTrans, _transDate, _rDeferralsBookId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>