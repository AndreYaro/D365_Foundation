<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendQuestionAnswerManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendQuestionAnswerManager</c> class is used to manage vendor questions and buyer responses for a request for quotation.
/// </summary>
internal static final class PurchRFQVendQuestionAnswerManager
{
    private static DialogField directResponse;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static void main(Args _args)
    {
        PurchRFQVendPostedQuestionAnswer postedQuestionAnswer = _args.record() as PurchRFQVendPostedQuestionAnswer;

        if (!postedQuestionAnswer)
        {
            throw error(error::missingRecord(tableStr(PurchRFQVendPostedQuestionAnswer)));
        }

        if (_args.menuItemName() == menuitemActionStr(PurchRFQVendSendAnswers))
        {
            PurchRFQVendQuestionAnswerManager::sendAnswer(postedQuestionAnswer);
        }
        if (_args.menuItemName() == menuitemActionStr(PurchRFQVendRevertAnswers))
        {
            PurchRFQVendQuestionAnswerManager::revertAnswer(postedQuestionAnswer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAnswer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends buyers answers to vendors questions.
    /// </summary>
    /// <param name = "_postedQuestionAnswer">The <c>PurchRFQVendPostedQuestionAnswer</c> datasource instance.</param>
    [Hookable(false), Wrappable(false)]
    internal static void sendAnswer(PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        if (_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId
            && PurchRFQVendPostedGroupQuestionAnswer::findByRecId(_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId).GroupAnswer != '')
        {
            Dialog dialog = PurchRFQVendQuestionAnswerManager::createDialog(_postedQuestionAnswer);

            if (dialog.run())
            {
                PurchRFQVendQuestionAnswerManager::updateIsAnswerPublishedForQuestion(_postedQuestionAnswer.RecId, directResponse.value());
                info('@SCM:SendAnswerSuccessMessage');
            }
        }
        else if (Box::yesNo('@SCM:PurchRFQSendAnswersDialogConfirmationMessage', DialogButton::Yes) == DialogButton::Yes)
        {
            PurchRFQVendQuestionAnswerManager::updateIsAnswerPublishedForQuestion(_postedQuestionAnswer.RecId);
            info('@SCM:SendAnswerSuccessMessage');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialog</Name>
				<Source><![CDATA[
    private static Dialog createDialog(PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        Dialog dialog = new Dialog('@SCM:GroupCodeConfirmationDialogMessage');
        dialog.formBuildDesign().windowType(FormWindowType::PopUp);
        dialog.addText('@SCM:GroupCodeConfirmationDialogInfo');

        directResponse = dialog.addFieldValue(extendedTypeStr(NoYesId), _postedQuestionAnswer.IsDirectResponse, '@SCM:DirectResponse');
        directResponse.allowEdit(!(PurchRFQVendQuestionAnswerManager::isExistingGroupCodeAlreadyPublished(_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId)).RecId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExistingGroupCodeAlreadyPublished</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static PurchRFQVendPostedQuestionAnswer isExistingGroupCodeAlreadyPublished(PurchRFQVendPostedGroupQuestionAnswerRecId _postedGroupQuestionAnswerRecId)
    {
        PurchRFQVendPostedQuestionAnswer localPostedQuestionAnswer;

        if (_postedGroupQuestionAnswerRecId)
        {
            while select IsAnswerPublishedToVendor, IsDirectResponse from localPostedQuestionAnswer
                where localPostedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId == _postedGroupQuestionAnswerRecId
            {
                if (localPostedQuestionAnswer.IsAnswerPublishedToVendor)
                {
                    return localPostedQuestionAnswer;
                }
            }
        }

        return localPostedQuestionAnswer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertAnswer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts response to originally sent response.
    /// </summary>
    /// <param name = "_postedQuestionAnswer">A record of <c>PurchRFQVendPostedQuestionAnswer</c> table.</param>
    [Hookable(false), Wrappable(false)]
    internal static void revertAnswer(PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        PurchRFQVendQuestionAnswerManager::updatePurchRFQVendPostedQuestionAnswer(_postedQuestionAnswer.RecId);
        PurchRFQVendQuestionAnswerManager::deletePurchRFQVendPendingQuestionAnswer(_postedQuestionAnswer.RecId);

        if (_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId)
        {
            PurchRFQVendQuestionAnswerManager::updatePurchRFQVendPostedGroupQuestionAnswer(_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId);
            PurchRFQVendQuestionAnswerManager::deletePurchRFQVendPendingGroupQuestionAnswer(_postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQVendPostedQuestionAnswer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQVendPostedQuestionAnswer</c> table record with pending values from <c>PurchRFQVendPendingQuestionAnswer</c> table.
    /// </summary>
    /// <param name = "_postedQuestionAnswer">The <c>PurchRFQVendPostedQuestionAnswer</c> table record to be updated.</param>
    private static void updatePurchRFQVendPostedQuestionAnswer(PurchRFQVendPostedQuestionAnswerRecId _postedQuestionAnswer)
    {
        PurchRFQVendPendingQuestionAnswer pendingQuestionAnswer = PurchRFQVendPendingQuestionAnswer::findByPostedQuestionAnswerRecId(_postedQuestionAnswer);
        PurchRFQVendPostedQuestionAnswer postedQuestionAnswer = PurchRFQVendPostedQuestionAnswer::findByRecId(_postedQuestionAnswer, true);

        if (postedQuestionAnswer && pendingQuestionAnswer)
        {
            ttsbegin;

            postedQuestionAnswer.CustomerAnswer = pendingQuestionAnswer.CustomerAnswer;
            postedQuestionAnswer.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQVendPostedGroupQuestionAnswer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQVendPostedGroupQuestionAnswer</c> table record with pending values from <c>PurchRFQVendPendingGroupQuestionAnswer</c> table.
    /// </summary>
    /// <param name = "_postedGroupQuestionAnswer">The <c>PurchRFQVendPostedGroupQuestionAnswer</c> table record to be updated.</param>
    private static void updatePurchRFQVendPostedGroupQuestionAnswer(PurchRFQVendPostedGroupQuestionAnswerRecId _postedGroupQuestionAnswer)
    {
        PurchRFQVendPendingGroupQuestionAnswer pendingGroupQuestionAnswer = PurchRFQVendPendingGroupQuestionAnswer::findByPostedGroupQuestionAnswerRecId(_postedGroupQuestionAnswer);
        PurchRFQVendPostedGroupQuestionAnswer postedGroupQuestionAnswer = PurchRFQVendPostedGroupQuestionAnswer::findByRecId(_postedGroupQuestionAnswer, true);

        if (postedGroupQuestionAnswer && pendingGroupQuestionAnswer)
        {
            ttsbegin;

            postedGroupQuestionAnswer.GroupQuestion = pendingGroupQuestionAnswer.GroupQuestion;
            postedGroupQuestionAnswer.GroupAnswer = pendingGroupQuestionAnswer.GroupAnswer;
            postedGroupQuestionAnswer.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQVendPendingQuestionAnswer</Name>
				<Source><![CDATA[
    private static void deletePurchRFQVendPendingQuestionAnswer(PurchRFQVendPostedQuestionAnswerRecId _postedQuestionAnswer)
    {
        PurchRFQVendPendingQuestionAnswer purchRFQVendPendingQuestionAnswer;

        delete_from purchRFQVendPendingQuestionAnswer
            where purchRFQVendPendingQuestionAnswer.PostedQuestionAnswer == _postedQuestionAnswer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQVendPendingGroupQuestionAnswer</Name>
				<Source><![CDATA[
    private static void deletePurchRFQVendPendingGroupQuestionAnswer(PurchRFQVendPostedGroupQuestionAnswerRecId _postedGroupQuestionAnswer)
    {
        PurchRFQVendPendingGroupQuestionAnswer purchRFQVendPendingGroupQuestionAnswer;

        delete_from purchRFQVendPendingGroupQuestionAnswer
            where purchRFQVendPendingGroupQuestionAnswer.PostedGroupQuestionAnswer == _postedGroupQuestionAnswer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsAnswerPublishedForQuestion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQVendPostedQuestionAnswer</c> table fields related to published answers.
    /// </summary>
    /// <param name = "_postedQuestionAnswer">The <c>PurchRFQVendPostedQuestionAnswer</c> table record ID.</param>
    /// <param name = "_isGroupDirectResponse">Boolean indicating direct response value for a group.</param>
    [Hookable(false), Wrappable(false)]
    internal static void updateIsAnswerPublishedForQuestion(PurchRFQVendPostedQuestionAnswerRecId _postedQuestionAnswer, boolean _isGroupDirectResponse = NoYes::No)
    {
        PurchRFQVendPostedQuestionAnswer postedQuestionAnswer = PurchRFQVendPostedQuestionAnswer::findByRecId(_postedQuestionAnswer, true);
        PurchRFQVendPostedQuestionAnswer purchRFQVendPostedQuestionAnswer;

        ttsbegin;

        if (postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId)
        {
            update_recordset purchRFQVendPostedQuestionAnswer
            setting IsAnswerPublishedToVendor = NoYes::Yes,
                AnswerPublishedOn = DateTimeUtil::utcNow(),
                IsDirectResponse = _isGroupDirectResponse
            where purchRFQVendPostedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId == postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId;

            PurchRFQVendQuestionAnswerManager::deletePurchRFQVendPendingGroupQuestionAnswer(postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId);
        }
        else
        {
            postedQuestionAnswer.IsAnswerPublishedToVendor = NoYes::Yes;
            postedQuestionAnswer.AnswerPublishedOn = DateTimeUtil::utcNow();
            postedQuestionAnswer.update();

            PurchRFQVendQuestionAnswerManager::deletePurchRFQVendPendingQuestionAnswer(_postedQuestionAnswer);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpData</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal final static PurchRFQVendTmpPublishedQuestionAnswer populateTmpData(
        PurchRFQId _rfqId,
        PurchRFQCaseId _rfqCaseId,
        PurchRFQVendPostedQuestionAnswer _postedQuestionAnswer)
    {
        PurchRFQVendTmpPublishedQuestionAnswer purchRFQVendTmpPublishedQuestionAnswer;

        insert_recordset purchRFQVendTmpPublishedQuestionAnswer
            (PurchRFQVendPostedQuestionAnswerRecId, VendQuestion, CustomerAnswer, QuestionSubmittedOn, AnswerPublishedOn, PurchRFQVendPostedGroupQuestionAnswerRecId)
            select RecId, VendQuestion, CustomerAnswer, QuestionSubmittedOn, AnswerPublishedOn, PurchRFQVendPostedGroupQuestionAnswerRecId
                from _postedQuestionAnswer
            where _postedQuestionAnswer.IsAnswerPublishedToVendor == NoYes::Yes
                && (_postedQuestionAnswer.RFQId == _rfqId
                    || (_postedQuestionAnswer.RFQCaseId == _rfqCaseId
                        && _postedQuestionAnswer.IsDirectResponse == NoYes::No))
                && _postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId == 0;

        PurchRFQVendPostedGroupQuestionAnswer publishedGroupQuestionAnswer;
        insert_recordset purchRFQVendTmpPublishedQuestionAnswer
            (PurchRFQVendPostedGroupQuestionAnswerRecId, AnswerPublishedOn, VendQuestion, CustomerAnswer)
            select PurchRFQVendPostedGroupQuestionAnswerRecId, AnswerPublishedOn 
                from _postedQuestionAnswer
                group by PurchRFQVendPostedGroupQuestionAnswerRecId, AnswerPublishedOn
                join GroupQuestion, GroupAnswer
                from publishedGroupQuestionAnswer
                group by GroupQuestion, GroupAnswer
                where publishedGroupQuestionAnswer.RecId == _postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId
                    && _postedQuestionAnswer.IsAnswerPublishedToVendor == NoYes::Yes
                    && (_postedQuestionAnswer.RFQId == _rfqId
                        || (_postedQuestionAnswer.RFQCaseId == _rfqCaseId
                            && _postedQuestionAnswer.IsDirectResponse == NoYes::No))
                    && _postedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId != 0;

        PurchRFQVendQuestionAnswerManager::publishedQuestion(purchRFQVendTmpPublishedQuestionAnswer);
        PurchRFQVendQuestionAnswerManager::publishedAnswer(purchRFQVendTmpPublishedQuestionAnswer);

        return purchRFQVendTmpPublishedQuestionAnswer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishedQuestion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the published group question for each record in the grid.
    /// </summary>
    /// <returns>Group question if it has been published. Otherwise, blank value.</returns>
    [Hookable(false), Wrappable(false)]
    internal static void publishedQuestion(PurchRFQVendTmpPublishedQuestionAnswer _publishedQuestionAnswer)
    {
        while select * from _publishedQuestionAnswer
        {
            if (_publishedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId)
            {
                PurchRFQVendPendingGroupQuestionAnswer pendingGroupQuestionAnswer = PurchRFQVendPendingGroupQuestionAnswer::findByPostedGroupQuestionAnswerRecId(_publishedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId);

                if (pendingGroupQuestionAnswer)
                {
                    ttsbegin;
                    _publishedQuestionAnswer.selectForUpdate(true);
                    _publishedQuestionAnswer.VendQuestion = pendingGroupQuestionAnswer.GroupQuestion;
                    _publishedQuestionAnswer.update();
                    ttscommit;
                }
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishedAnswer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the published group answer for each record in the grid.
    /// </summary>
    /// <returns>Group answer if it has been published. Otherwise, blank value.</returns>
    [Hookable(false), Wrappable(false)]
    internal static void publishedAnswer(PurchRFQVendTmpPublishedQuestionAnswer _publishedQuestionAnswer)
    {
        while select * from _publishedQuestionAnswer
        {
            if (_publishedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId)
            {
                PurchRFQVendPendingGroupQuestionAnswer pendingGroupQuestionAnswer = PurchRFQVendPendingGroupQuestionAnswer::findByPostedGroupQuestionAnswerRecId(_publishedQuestionAnswer.PurchRFQVendPostedGroupQuestionAnswerRecId);
        
                if (pendingGroupQuestionAnswer)
                {
                    ttsbegin;
                    _publishedQuestionAnswer.selectForUpdate(true);
                    _publishedQuestionAnswer.CustomerAnswer = pendingGroupQuestionAnswer.GroupAnswer;
                    _publishedQuestionAnswer.update();
                    ttscommit;
                }
            }
            else if (_publishedQuestionAnswer.PurchRFQVendPostedQuestionAnswerRecId)
            {
                PurchRFQVendPendingQuestionAnswer pendingQuestionAnswer = PurchRFQVendPendingQuestionAnswer::findByPostedQuestionAnswerRecId(_publishedQuestionAnswer.PurchRFQVendPostedQuestionAnswerRecId);
        
                if (pendingQuestionAnswer)
                {
                    ttsbegin;
                    _publishedQuestionAnswer.selectForUpdate(true);
                    _publishedQuestionAnswer.CustomerAnswer = pendingQuestionAnswer.CustomerAnswer;
                    _publishedQuestionAnswer.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>