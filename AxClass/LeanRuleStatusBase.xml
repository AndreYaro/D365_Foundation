<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleStatusBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleStatusBase</c> class provides a status-dependent API to the rule. As a base class it
///    also contains some default implementation for several methods.
/// </summary>
abstract public class LeanRuleStatusBase implements LeanRuleTypeProtectedInterface
{
    LeanRuleData    leanRuleData;
    Common          triggerBuffer;

    LeanRuleTypeProtectedInterface protectedElement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a rule can be triggered.
    /// </summary>
    /// <returns>
    /// true if the rule can be triggered; otherwise, false.
    /// </returns>
    public boolean canTrigger()
    {
        // the base class implementation only forwards the call
        return    protectedElement.canTrigger()
               && leanRuleData.kanbanFlow().hasActiveFlowVersion(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all kanban rule related records in the database.
    /// </summary>
    /// <remarks>
    ///    If a particular status does not allow for this operation an error will be thrown.
    /// </remarks>
    public void delete()
    {
        if (leanRuleData.hasActiveKanbans())
        {
            // A kanban rule can only be deleted if it has no Kanbans in status Started or Ended
            throw error("@SYS132487");
        }

        ttsbegin;
        // the base class implementation only forwards the call
        LeanRulesEngine::deleteRule(leanRuleData);
        ttscommit;

        // Clear cache
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the currently active rule.
    /// </summary>
    /// <returns>
    ///    The record ID of the currently active rule.
    /// </returns>
    /// <remarks>
    ///    The base implementation returns the current rule record ID.
    /// </remarks>
    public RefRecId getActiveRule()
    {
        return leanRuleData.parmKanbanRule().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCardsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query which can be used to get the cards that belong to a rule.
    /// </summary>
    /// <param name="_returnFreeCards">
    ///    The flag to determine whether the free or active cards are returned.
    /// </param>
    /// <param name="_onlyForCurrentRule">
    ///    The flag to determine whether the free or active cards are returned only for the current rule
    ///    buffer or for the whole replacement chain to which the rule belongs.
    /// </param>
    /// <returns>
    ///    The <c>Query</c> object to get the cards that belong to a rule.
    /// </returns>
    /// <remarks>
    ///    If the rule is part of a replacement chain of rules, the query will return all the cards that
    ///    belong to any of the rules in the chain.
    /// </remarks>
    public Query getCardsQuery(
        boolean _returnFreeCards,
        boolean _onlyForCurrentRule = false)
    {
        Query                   query = new Query();

        LeanCoverageKanbanRule  leanCoverageKanbanRule = LeanCoverageKanbanRule::findKanbanRule(leanRuleData.parmKanbanRule().RecId);

        // the query starts with the KanbanCard table to fetch the corresponding circulating cards
        QueryBuildDataSource qbdsKanbanCard = query.addDataSource(tableNum(KanbanCard));
        qbdsKanbanCard.addRange(fieldNum(KanbanCard, CardType)).value(queryValue(KanbanCardType::Circulating));

        // inner join with the KanbanRule table where we only pick the rules that use cards
        QueryBuildDataSource qbdsKanbanRule = qbdsKanbanCard.addDataSource(tableNum(KanbanRule));
        qbdsKanbanRule.joinMode(JoinMode::InnerJoin);
        qbdsKanbanRule.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanRule.relations(true);
        qbdsKanbanRule.addRange(fieldNum(KanbanRule, UsesCirculatingCards)).value(queryValue(NoYes::Yes));
        qbdsKanbanRule.addRange(fieldNum(KanbanRule, LegalEntity)).value(queryValue(leanRuleData.parmKanbanRule().LegalEntity));

        // if we only want the info for the current rule, then we should add a range on the rule's RecId
        if (_onlyForCurrentRule)
        {
            qbdsKanbanRule.addRange(fieldNum(KanbanRule, RecId)).value(queryValue(leanCoverageKanbanRule.KanbanRule));
        }

        // inner join with the date-effectiveness table and add a range to pick all rules that share
        // the same LeanCoverage -> those are all the rules that belong to the same replacement chain
        QueryBuildDataSource qbdsLeanCoverageKanbanRule = qbdsKanbanRule.addDataSource(tableNum(LeanCoverageKanbanRule));
        qbdsLeanCoverageKanbanRule.joinMode(JoinMode::InnerJoin);
        qbdsLeanCoverageKanbanRule.fetchMode(QueryFetchMode::One2One);
        qbdsLeanCoverageKanbanRule.relations(true);
        qbdsLeanCoverageKanbanRule.addRange(fieldNum(LeanCoverageKanbanRule, Coverage)).value(queryValue(leanCoverageKanbanRule.Coverage));

        // we to a non-exist join because we don't want to pick cards which have assigned Kanbans
        // that are not in status Emptied (if a card has a Kanban in a status that's not Emptied,
        // this means that the card is assigned)
        // join with the Kanban table to fetch the non-Emptied Kanbans
        QueryBuildDataSource qbdsKanban = qbdsKanbanCard.addDataSource(tableNum(Kanban));
        qbdsKanban.joinMode(_returnFreeCards ? JoinMode::NoExistsJoin : JoinMode::InnerJoin);
        qbdsKanban.fetchMode(QueryFetchMode::One2One);
        qbdsKanban.relations(true);
        qbdsKanban.addRange(fieldNum(Kanban, Status)).value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the rule has any active kanbans.
    /// </summary>
    /// <returns>
    ///    true if the rule has an active kanban; otherwise, false.
    /// </returns>
    public boolean hasActiveKanbans()
    {
        Kanban kanban;

        select firstonly RecId from kanban
            where kanban.KanbanRule == leanRuleData.parmKanbanRule().RecId
               && (kanban.Status    == LeanKanbanStatus::NotAssigned
               ||  kanban.Status    == LeanKanbanStatus::Assigned );

        return kanban.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields default data.
    /// </summary>
    public void initFields()
    {
        // nothing to initialize here
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the context of the interface with the context on which it operates.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The object that holds all the rule data.
    /// </param>
    /// <param name="_triggerBuffer">
    ///    The buffer on which the initial status method was called.
    /// </param>
    public void initializeContext(LeanRuleData _leanRuleData, Common _triggerBuffer)
    {
        triggerBuffer   = _triggerBuffer;
        leanRuleData    = _leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a rule is outdated.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    A rule is outdated when its validity period has expired and no replacing rule has been defined.
    /// </remarks>
    public boolean isOutdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the change in a field's value.
    /// </summary>
    /// <param name="_tableId">
    /// The id of the table which contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The id of the field which value has changed.
    /// </param>
    /// <remarks>
    /// If a particular status doesn't allow the change, an error will be thrown.
    /// </remarks>
    public void modifiedField(tableId _tableId, fieldId _fieldId)
    {
        if (triggerBuffer
            && triggerBuffer.TableId   == leanRuleData.parmKanbanRule().TableId
            && _tableId                == tableNum(KanbanRule)
            && _fieldId                == fieldNum(KanbanRule, ReplenishmentStrategy))
        {
            // Replenishment strategy can only be changed before saving the rule
            throw error(strFmt("@SYS132484", "@SYS131905"));
        }

        if (triggerBuffer
            && triggerBuffer.TableId    == leanRuleData.parmKanbanRule().TableId
            && _tableId                 == tableNum(KanbanRule)
            && _fieldId                 == fieldNum(KanbanRule, KanbanFlow))
        {
            // Replenishment strategy can only be changed before saving the rule
            throw error(strFmt("@SYS132484", "@SYS131967"));
        }

        // the base class implementation only forwards the call
        protectedElement.modifiedField(tableNum(KanbanRule), _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onKanbanFlowChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a change in the kanban flow.
    /// </summary>
    /// <remarks>
    ///    The method is implemented only for new rules.
    /// </remarks>
    public void onKanbanFlowChanged()
    {
        KanbanFlow              kanbanFlow = leanRuleData.kanbanFlow();

        // we have to maintain the cached coverage dimensions upon kanban flow change
        if (kanbanFlow.LastPlanPlanActivity)
        {
            PlanActivityLocation receiptPlanActivityLocation = kanbanFlow.lastPlanActivity().receiptLocation();

            if (receiptPlanActivityLocation)
            {
                InventDim inventDim        = leanRuleData.parmInventDim();
                inventDim.InventSiteId     = receiptPlanActivityLocation.inventSite().SiteId;
                inventDim.InventLocationId = receiptPlanActivityLocation.InventLocationId;
                inventDim.wmsLocationId    = receiptPlanActivityLocation.wmsLocationId;
                leanRuleData.parmInventDim(inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reassignCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the reassignment of a kanban card record.
    /// </summary>
    /// <param name="_kanbanCard">
    ///    The card that will be reassigned.
    /// </param>
    /// <returns>
    ///    true if the card was reassigned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base implementation returns false and does nothing.
    /// </remarks>
    public boolean reassignCard(KanbanCard _kanbanCard)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the lead time for the kanban rule.
    /// </summary>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether user interaction should be skipped.
    /// </param>
    public void refreshLeadTime(boolean _silent = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProtectedElement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the protected element.
    /// </summary>
    /// <param name="_element">
    ///    The protected element.
    /// </param>
    public void setProtectedElement(LeanRuleTypeProtectedInterface _element)
    {
        if (!_element)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // add the element to the chain
        protectedElement = _element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the rule record in the database.
    /// </summary>
    /// <remarks>
    ///    If a status does not allow for this operation, an error will be thrown.
    /// </remarks>
    public void update()
    {
        ttsbegin;
        // the base class implementation only forwards the call
        protectedElement.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a change of the kanban flow is possible.
    /// </summary>
    /// <returns>
    ///    true if the change is acceptable; otherwise, false.
    /// </returns>
    protected boolean validateCoverage()
    {
        LeanRuleData    originalData     = leanRuleData.orig();
        LeanCoverage    leanCoverage     = leanRuleData.parmLeanCoverage();
        LeanCoverage    originalCoverage = originalData.parmLeanCoverage();
        boolean         result           = true;

        if (   (leanCoverage.RuleCoverageType     != originalCoverage.RuleCoverageType
            ||  leanCoverage.ItemId               != originalCoverage.ItemId
            ||  leanCoverage.ItemDataAreaId       != originalCoverage.ItemDataAreaId
            ||  leanCoverage.InventDimId          != originalCoverage.InventDimId
            ||  leanCoverage.InventDimDataAreaId  != originalCoverage.InventDimDataAreaId
            ||  leanCoverage.AllocationId         != originalCoverage.AllocationId
            ||  leanCoverage.AllocationDataAreaId != originalCoverage.AllocationDataAreaId)
            && leanRuleData.hasActiveKanbans())
        {
            result = false;
            // The product cannot be changed for rules with active kanbans
            error("@SYS133239");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a change of the kanban flow is possible.
    /// </summary>
    /// <returns>
    ///    true if the change is acceptable; otherwise, false.
    /// </returns>
    protected boolean validateFlow()
    {
        LeanRuleData    originalData = leanRuleData.orig();
        KanbanRule      kanbanRule   = leanRuleData.parmKanbanRule();
        KanbanFlow      kanbanFlow   = leanRuleData.kanbanFlow();
        KanbanFlow      originalFlow = originalData.kanbanFlow();
        boolean         result       = true;

        // first/last activity shouldn't change for a rule that has active kanbans
        if (   (originalFlow.FirstPlanPlanActivity != kanbanFlow.FirstPlanPlanActivity
            ||  originalFlow.LastPlanPlanActivity  != kanbanFlow.LastPlanPlanActivity
            ||  originalFlow.LegalEntity           != kanbanFlow.LegalEntity
            ||  originalFlow.RecId                 != kanbanFlow.RecId)
            && leanRuleData.hasActiveKanbans())
        {
            // The source and destination cannot be changed for rules with active kanbans
            result = checkFailed("@SYS302317");
        }

        // replacing rules can't have different last activity
        if (   leanRuleData.parmKanbanRule().isReplacing()
            && kanbanFlow.LastPlanPlanActivity != originalFlow.LastPlanPlanActivity)
        {
            // Last activity cannot be changed for replacing rules.
            result = checkFailed("@SYS302317");
        }

        if (!leanRuleData.parmKanbanFlowWrapper().isFlowDefined())
        {
            result = checkFailed(strFmt("@SYS120870", "@SYS131967", ""));
        }

        // ensure kanban flow legal entity is consistent with legal entity of last plan activity
        // and kanban rule legal entity is consistent with kanban flow
        result =    result
                 && kanbanFlow.checkLegalEntity()
                 && kanbanRule.checkLegalEntity(kanbanFlow);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a change of the kanban type or the replenishment strategy is possible.
    /// </summary>
    /// <returns>
    ///    true if a change of the kanban type or the replenishment strategy is possible; otherwise, false.
    /// </returns>
    protected boolean validateTypes()
    {
        LeanRuleData originalData = leanRuleData.orig();
        boolean result = true;

        // those cannot be changed by default
        if (    originalData.leanKanbanType()        != leanRuleData.leanKanbanType()
            || originalData.replenishmentStrategy() != leanRuleData.replenishmentStrategy())
        {
            // The Replenishment strategy and Kanban type cannot be changed for already existing rules
            result = checkFailed("@SYS133241");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of a particular type object.
    /// </summary>
    /// <param name="_showWarnings">
    /// Boolean value indicating whether optional warnings should be shown.
    /// </param>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        boolean result = true;

        // validate whether a potential change in the KanbanType or ReplenishmentStrategy is valid
        result = this.validateTypes() && result;

        // validate whether a potential change in the KanbanFlow is valid
        result = this.validateFlow() && result;

        // validate whether a potential change in the coverage is valid
        result = this.validateCoverage() && result;

        // forward the call to the rule type for type-specific validation
        result = result && protectedElement.validateWrite(_showWarnings);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists a KanbanRule and all its related entities.
    /// </summary>
    /// <param name="_leanRuleData">
    /// The object that contains all the necessary buffers to perform the persistence operations.
    /// </param>
    /// <returns>
    /// true if the persistence was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method might raise exceptions if such occur during the database operations.
    /// The base implementation treats the write operation as an update.
    /// </remarks>
    public boolean write(LeanRuleData _leanRuleData)
    {
        // the base implementation treats the write operation as an update
        return LeanRulesEngine::updateRule(_leanRuleData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuleTimeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a rule time-dependent <c>LeanRuleStatusBase</c> object.
    /// </summary>
    /// <param name="_kanbanRuleRecId">
    ///    The record ID of the parent kanban rule. If the method is called on a kanban rule buffer itself,
    ///    this parameter is the same as the <paramref name="_ruleBuf.RecId" /> parameter.
    /// </param>
    /// <returns>
    ///    An instance of a class that derives from the <c>LeanRuleStatusBase</c> class.
    /// </returns>
    private static LeanRuleStatusBase createRuleTimeStatus(RefRecId _kanbanRuleRecId)
    {
        return LeanRuleStatusBase::createRuleTimeStatusInt(LeanCoverageKanbanRule::findKanbanRule(_kanbanRuleRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuleTimeStatusInt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a rule <c>LeanRuleStatusBase</c> object that is time dependent.
    /// </summary>
    /// <param name="_leanCoverageKanbanRule">
    ///    The <c>LeanCoverageKanbanRule</c> table buffer that holds the validity period of the rule.
    /// </param>
    /// <returns>
    ///    An instance of a class that derives from the <c>LeanRuleStatusBase</c> class.
    /// </returns>
    private static LeanRuleStatusBase createRuleTimeStatusInt(LeanCoverageKanbanRule _leanCoverageKanbanRule)
    {
        LeanRuleActiveDateTime currDateTime = DateTimeUtil::getSystemDateTime();
        LeanRuleStatusBase result;

        if (!_leanCoverageKanbanRule.RecId)
        {
            // there's no existing record -> this is a rule in status New
            result = LeanRuleStatusNew::newStandard();
        }
        else if (_leanCoverageKanbanRule.ValidTo != utcDateTimeNull() &&
                 _leanCoverageKanbanRule.ValidTo < currDateTime)
        {
           // the rule is in status Expired
           result = LeanRuleStatusExpired::newStandard();
        }
        else if (_leanCoverageKanbanRule.ValidFrom > currDateTime)
        {
            // the rule is in status Inactive
            result = LeanRuleStatusInactive::newStandard();
        }
        else if (_leanCoverageKanbanRule.ValidFrom           <= currDateTime
                    && (!_leanCoverageKanbanRule
                        || _leanCoverageKanbanRule.ValidTo   >= currDateTime
                        || _leanCoverageKanbanRule.ValidTo   == utcDateTimeNull()))
        {
            // the rule is in status Active
            result = LeanRuleStatusActive::newStandard();
        }
        else
        {
            // this is an exceptional case
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a <c>LeanRuleStatusBase</c> object for new rules (not being persisted yet).
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The object that contains all the necessary rule-related state that is not yet in the database.
    /// </param>
    /// <param name="_triggerBuffer">
    ///    The rule buffer on which the status method was first called.
    /// </param>
    /// <returns>
    ///    An instance of a class that derives from the <c>LeanRuleStatusBase</c> class.
    /// </returns>
    /// <remarks>
    ///    This factory method is used by forms in the cases when the rule entities have not yet been
    ///    persisted. This is needed in order to be able to reuse the Status and Type hierarchies uniformly by
    ///    preserving the rich context (the LeanRuleData).
    /// </remarks>
    public static LeanRuleStatusBase newLeanRuleData(
        LeanRuleData _leanRuleData,
        Common       _triggerBuffer = null)
    {
        // hardcoded instantiation of the various LeanRuleTypeProtectedInterface implementers
        LeanRuleStatusBase ruleTimeStatus = LeanRuleStatusBase::createRuleTimeStatusInt(_leanRuleData.parmLeanCoverageKanbanRule());
        LeanRuleTypeProtectedInterface ruleType = LeanRuleKanban::newLeanRuleData(_leanRuleData);

        // intialization with the rule's context buffer
        ruleTimeStatus.initializeContext(_leanRuleData, _triggerBuffer);
        ruleType.initializeContext(_leanRuleData, _triggerBuffer);

        // set the rule type as the status'es protected element
        ruleTimeStatus.setProtectedElement(ruleType);

        // return the result
        return ruleTimeStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRuleBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a <c>LeanRuleStatusBase</c> object from an existing rule buffer.
    /// </summary>
    /// <param name="_kanbanRuleRecId">
    ///    The record ID of the parent kanban rule. If the method is called on a kanban rule buffer itself,
    ///    this parameter is the same as the <paramref name="_ruleBuf.RecId" /> parameter.
    /// </param>
    /// <param name="_ruleBuf">
    ///    The rule buffer on which the status method was first called.
    /// </param>
    /// <returns>
    ///    An instance of a class that derives from the <c>LeanRuleStatusBase</c> class.
    /// </returns>
    public static LeanRuleStatusBase newRuleBuffer(RefRecId _kanbanRuleRecId, Common _ruleBuf)
    {
        LeanRuleData                   leanRuleData = LeanRuleData::newStandard(_kanbanRuleRecId, _ruleBuf);

        // if there is no rule data object created, this means the rule is not existing in the database
        // for new rules, the LeanRuleStatusBase::newLeanRuleData() should be used
        if (!leanRuleData)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // hardcoded instantiation of the various LeanRuleTypeProtectedInterface implementers
        LeanRuleStatusBase ruleTimeStatus = LeanRuleStatusBase::createRuleTimeStatus(_kanbanRuleRecId);
        LeanRuleTypeProtectedInterface ruleType = LeanRuleKanban::newLeanRuleData(leanRuleData);

        // intialization with the rule's context buffer
        ruleTimeStatus.initializeContext(leanRuleData, _ruleBuf);
        ruleType.initializeContext(leanRuleData, _ruleBuf);

        // set the rule type as the status'es protected element
        ruleTimeStatus.setProtectedElement(ruleType);

        // return the result
        return ruleTimeStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
