<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestSource_PP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMPaymentRequestSourceAttribute(tableStr(CFMPlannedPaymentTable))]
public class CFMPaymentRequestSource_PP extends CFMPaymentRequestSource
{
    CFMPaymentRequestCashDisc paymentRequestCashDisc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearPaymentRequestSource</Name>
				<Source><![CDATA[
    protected void clearPaymentRequestSource()
    {
        CFMPlannedPaymentTable plannedPayment;

        delete_from plannedPayment 
            where plannedPayment.RecId == sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    protected SelectableDataArea getDataAreaId()
    {
        CFMPlannedPaymentTable sourcePlannedPayment = sourceRecord;

        return sourcePlannedPayment.SourceDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequest</Name>
				<Source><![CDATA[
    protected void initPaymentRequest()
    {
        #ISOCountryRegionCodes
        CFMPlannedPaymentTable sourcePlannedPayment = sourceRecord;

        if (!this.validateDueAmountSum())
            return;

        PurchTable purchTable = PurchTable::findRecId(sourcePlannedPayment.SourceRecId);
        VendTable vendTable =  VendTable::find(purchTable.OrderAccount);

        CFMPaymentRequestTypeRef requestType = PaymTerm::find(purchTable.Payment).cfmPaymentRequestTypePrepayment;

        if (!requestType)
        {
            requestType = CFMParameters::findInCentralizedPaymentsCompany().SupplierPrepayment;

            if (!requestType)
            {
                throw error(strFmt("@Cashflowmanagement:OneOrMorePaymRequestTypeMissing","@SYS336089"));
            }
        }
        PurchAgreementId agreementId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            agreementId = PurchAgreementHeaderExt_RU::find(purchTable.agreementHeaderExt_RU()).AgreementId;
        }
        else
        {
            agreementId = PurchAgreementHeader::find(purchTable.MatchingAgreement).PurchNumberSequence;
        }

        ttsbegin;
        paymentRequestTable.clear();

        paymentRequestTable.Status = CFMPaymentRequestStatus::Confirmed;
        paymentRequestTable.PaymentRequestType = requestType;
        paymentRequestTable.AccountType = CFMAccountType::Vend;
        paymentRequestTable.SourceType = CFMPaymentRequestSourceType::PlannedPayment;
        paymentRequestTable.AgreementID = agreementId;
        paymentRequestTable.DefaultDimension = purchTable.DefaultDimension;
        paymentRequestTable.PaymMode = purchTable.PaymMode;
        paymentRequestTable.Prepayment = sourcePlannedPayment.Prepayment;
        paymentRequestTable.AccountNum = purchTable.OrderAccount;
        paymentRequestTable.InvoiceAccountNum = purchTable.InvoiceAccount;
        paymentRequestTable.DueDate = sourcePlannedPayment.DueDate;
        paymentRequestTable.PaymentDate = sourcePlannedPayment.DueDate;
        paymentRequestTable.CurrencyCode = purchTable.CurrencyCode;
        paymentRequestTable.PaymentCurrency = purchTable.CurrencyCode;
        paymentRequestTable.PostingProfile = VendParameters::find().PrepaymentPostingProfile;
        paymentRequestTable.SourceDataAreaId = sourcePlannedPayment.SourceDataAreaId;
        paymentRequestTable.PaymentDataAreaId = sourcePlannedPayment.PaymentDataAreaId;
        paymentRequestTable.HeaderRefRecId = purchtable.RecId;
        paymentRequestTable.RecepientBankAccountId = VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount).AccountID;
        paymentRequestTable.PaymSpec = purchTable.PaymSpec;

        //Calculated fields
        paymentRequestTable.initPaymentRequestInitiator();
        paymentRequestTable.initPaymentPriority();
        paymentRequestTable.initWorkflowStatus();

        if (VendPaymModeTable::find(purchTable.PaymMode))
        {
            paymentRequestTable.initFromCustVendPaymModeTable(VendPaymModeTable::find(purchTable.PaymMode));
        }
        //payment order
        if (agreementId)
        {
            PurchAgreementHeader purchAgreement = PurchAgreementHeader::findAgreementId(agreementId);
            CFMAgreementPaymentOrder agreementPaymentOrder = CFMAgreementPaymentOrder::findByAgreement(purchAgreement.RecId, SalesPurch::Purch);

            if (agreementPaymentOrder)
            {
                CFMPaymentRequestPaymentOrderCreate paymentOrderCreate = CFMPaymentRequestPaymentOrderCreate::construct(agreementPaymentOrder);
                paymentRequestTable.PaymentOrder = paymentOrderCreate.findOrCreate(agreementPaymentOrder).RecId;
            }
        }

        paymentRequestTable.insert();

        this.initPaymentRequestLines();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequestLines</Name>
				<Source><![CDATA[
    private void initPaymentRequestLines()
    {
        CFMPlannedPaymentLine plannedPaymentLine;

        while select plannedPaymentLine
            where plannedPaymentLine.PlannedPaymentTable == sourceRecord.RecId
        {
            CFMPaymentRequestLine  paymentRequestLine;

            paymentRequestLine.clear();

            paymentRequestLine.initFromPaymentRequestTable(paymentRequestTable);

            paymentRequestLine.AmountCur = plannedPaymentLine.DueAmount;
            paymentRequestLine.BalanceAmountCur = plannedPaymentLine.DueAmount;
            paymentRequestLine.LedgerDimension = plannedPaymentLine.LedgerDimension;
            paymentRequestLine.TaxItemGroup = plannedPaymentLine.TaxItemGroup;
            paymentRequestLine.TaxGroup = plannedPaymentLine.TaxGroup;
            paymentRequestLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDueAmountSum</Name>
				<Source><![CDATA[
    private boolean validateDueAmountSum()
    {
        CFMPlannedPaymentLine plannedPaymentLine;

        select sum(dueAmount) from plannedPaymentLine
            where plannedPaymentLine.PlannedPaymentTable == sourceRecord.RecId;

        return plannedPaymentLine.DueAmount > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>