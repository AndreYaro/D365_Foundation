<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfImportEPComplex_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ConfImportEPComplex_BR</c> is the basis for the electronic payment process to import the complex file.
/// </summary>
public abstract class ConfImportEPComplex_BR
{
    #define.SegmentPositionInDetailLine    (14)  // according to CNAB standards, segment ID will always be at position 14 of the detail line.

    ConfLayoutGroupId_BR        confLayoutGroupId;
    EPReturnFileReader_BR       fileReader;
    PaymMode                    paymMode;
    Map                         registeredValues;
    Map                         processedDocumentValues;
    EP_FileReturnSequencialNum  fileReturnSequenceNumber;
    str                         fileLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildEPReturnValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method used for the extended objects to implement.
    /// The extended objects' method is used to update the ledger journal transaction.
    /// </summary>
    /// <returns>
    /// An instance of class <c>EPReturnValues_BR</c> when overridden in the sub class.
    /// </returns>
    protected abstract EPReturnValues_BR buildEPReturnValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the processing of the entire file following the layout configuration defined by the user through the configurator feature.
    /// </summary>
    public void doImport()
    {
        ConfLayoutLines_BR   confLayoutLines;

        this.validateConfigurationPrerequisites();

        while select confLayoutLines
            where confLayoutLines.LayoutGroupId == confLayoutGroupId
        {
            if (confLayoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileHeader)
            {
                this.parseFile(confLayoutLines);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfFieldForTableAndField</Name>
				<Source><![CDATA[
    private ConfLayoutFields_BR getConfFieldForTableAndField(ConfLayoutLines_BR _confLayoutLine, ConfTableName_BR _tableName, ConfFieldName_BR  _fieldName, boolean _fail = true)
    {
        ConfLayoutFields_BR confLayoutFields;

        select confLayoutFields
            where confLayoutFields.LayoutGroupId == _confLayoutLine.LayoutGroupId
                && confLayoutFields.LayoutLineNum == _confLayoutLine.LayoutLineNum
                && confLayoutFields.TableName == _tableName
                && confLayoutFields.FieldName == _fieldName;

        if (_fail && !confLayoutFields)
        {
            throw error(strFmt("@GLS223828",
                        _tableName,
                        _fieldName,
                        _confLayoutLine.BatchLayoutLineType,
                        _confLayoutLine.LayoutGroupId));
        }

        return confLayoutFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldContentInFileLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the value of a specific field by parsing its content in the file line.
    /// </summary>
    /// <param name="_fileLine">
    ///     A string representing a line in the return file.
    /// </param>
    /// <param name="_confLayoutLines">
    ///     A buffer of <c>ConfLayoutLines_BR</c> table that describes the line that is being interpreted.
    /// </param>
    /// <param name="_confTableName">
    ///     The name of the table the content maps to.
    /// </param>
    /// <param name="_confFieldName">
    ///     The name of the table field the content maps to.
    /// </param>
    /// <param name="_fail">
    ///     Boolean indicating whether the method should fail in case the field cannot be properly parsed from the file line.
    /// </param>
    /// <returns>
    ///     An <c>anytype</c> with the value parsed from the file line.
    /// </returns>
    protected anytype getFieldContentInFileLine(str _fileLine, ConfLayoutLines_BR _confLayoutLines, ConfTableName_BR _confTableName, ConfFieldName_BR _confFieldName, boolean _fail = true)
    {
        str                         fieldContentInFile;
        anytype                     fieldContent;
        ConfLayoutFields_BR         confLayoutFields;
        ConfImportValueParser_BR    confImportValueParser;

        confLayoutFields = this.getConfFieldForTableAndField(_confLayoutLines, _confTableName, _confFieldName, _fail);

        fieldContentInFile = subStr(_fileLine, confLayoutFields.StartPos, confLayoutFields.Size);

        confImportValueParser = new ConfImportValueParser_BR(confLayoutFields, fieldContentInFile, fileReader.currentLineNumber());
        confImportValueParser.doParse();
        if (confImportValueParser.hasParsingErrors())
        {
            info(confImportValueParser.parsingErrorsAsString());
        }
        else
        {
            fieldContent = confImportValueParser.parsedValue();
        }

        return fieldContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes confBatchLayoutLineType of the return file.
    /// </summary>
    /// <param name="_fileLine">
    /// A string representing a line in the return file.
    /// </param>
    /// <param name="_confLayoutLines">
    /// A buffer of <c>ConfLayoutLines_BR</c> table that describes the line that is being interpreted.
    /// </param>
    /// <returns>
    /// Variable confBatchLayoutLineType.
    /// </returns>
    protected ConfBatchLayoutLineType_BR getFileLineType(str _fileLine, ConfLayoutLines_BR _confLayoutLines)
    {
        int                             registerType;
        ConfBatchLayoutLineType_BR      confBatchLayoutLineType = ConfBatchLayoutLineType_BR::FileTrailer;

        if (_fileLine
            && _confLayoutLines)
        {
            registerType = this.getFieldContentInFileLine(_fileLine, _confLayoutLines, 'Command', 'RegisterType');

            switch (registerType)
            {
                case 0:
                    confBatchLayoutLineType = ConfBatchLayoutLineType_BR::FileHeader;
                    break;
                case 1:
                    confBatchLayoutLineType = ConfBatchLayoutLineType_BR::BatchHeader;
                    break;
                case 3:
                    confBatchLayoutLineType = ConfBatchLayoutLineType_BR::Details;
                    break;
                case 5:
                    confBatchLayoutLineType = ConfBatchLayoutLineType_BR::BatchTrailer;
                    break;
                case 9:
                    confBatchLayoutLineType = ConfBatchLayoutLineType_BR::FileTrailer;
                    break;
            }
        }

        return confBatchLayoutLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstSegmentToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method used for the extended objects to implement.
    /// The extended objects' method returns the first segment to be processed.
    /// </summary>
    /// <param name="_fileLine">
    /// The content of the file line representing the batch header.
    /// </param>
    /// <param name="_confLayoutLineBatchHeader">
    /// <c>ConfLayoutLines_BR</c> that represents the configuration of the batch header.
    /// </param>
    /// <returns>
    /// The field <c>EPSegment_BR</c> of table <c>CustPaymModeSpec</c> when overrdden in the sub class.
    /// </returns>
    protected abstract EPSegment_BR getFirstSegmentToProcess(str _fileLine, ConfLayoutLines_BR _confLayoutLineBatchHeader)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfProcessedDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a list of strings representing the documents that were processed during importing.
    /// </summary>
    /// <returns>
    ///     A List of strings representing the processed documents.
    /// </returns>
    public List getListOfProcessedDocuments()
    {
        List            listOfProcessedDocuments;
        MapEnumerator   me;

        listOfProcessedDocuments = new List(Types::String);

        me = processedDocumentValues.getEnumerator();
        while (me.moveNext())
        {
            listOfProcessedDocuments.addEnd(me.currentKey());
        }

        return listOfProcessedDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfRequiredFieldsInLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method used for the extended objects to implement.
    /// The extended objects' method returns a container of strings representing the required fields.
    /// </summary>
    /// <returns>
    /// Container with required fields added.
    /// </returns>
    protected abstract container getListOfRequiredFieldsInLayout()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineForTheFirstSegment</Name>
				<Source><![CDATA[
    private str getNextLineForTheFirstSegment(EPSegment_BR _firstSegment, ConfLayoutLines_BR _confLayoutLines)
    {
        EPSegment_BR    segmentInFile;

        do
        {
            fileLine = fileReader.getNextLine();

            segmentInFile = this.getFieldContentInFileLine(fileLine,
                                                           _confLayoutLines,
                                                           this.getPaymModeSpecTableName(),
                                                           this.getPaymModeSpecSegmentFieldName());
        }
        while (segmentInFile != _firstSegment
            && this.getFileLineType(fileLine, _confLayoutLines) == ConfBatchLayoutLineType_BR::Details);

        return fileLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the payment mode to be used during the importing operation.
    /// </summary>
    /// <returns>
    ///     <c>PaymMode</c> representing the payment mode to be used during the importing operation.
    /// </returns>
    protected PaymMode getPaymentMode()
    {
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeSpecSegmentFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method used for the extended objects to implement.
    /// The extended objects' method returns the field name corresponding to the main segment to be processed.
    /// </summary>
    /// <returns>
    /// <c>FieldName</c> indicating the value of the first segment to be processed.
    /// </returns>
    protected abstract FieldName getPaymModeSpecSegmentFieldName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeSpecTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method used for the extended objects to implement.
    /// The extended objects' method returns the table name that keeps the main segment to be processed.
    /// </summary>
    /// <returns>
    /// <c>TableName</c> for the <c>CustPaymModeSpec</c> table.
    /// </returns>
    protected abstract TableName getPaymModeSpecTableName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentsToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a container with the information of the segments to be processed for a give batch header.
    /// </summary>
    /// <param name="_confLayoutLineBatchHeader">
    ///     A buffer of <c>ConfLayoutLines_BR</c> pointing to the batch header that is parent of the segment detail line.
    /// </param>
    /// <param name="_firstSegmentToProcess">
    ///     The first segment to be processed for the batch.
    /// </param>
    /// <returns>
    ///     a container with the information of the segments to be processed for a given batch header.
    /// </returns>
    /// <remarks>
    ///     The container returned is composed of two parts: the segment name and the <c>ConfLayoutLines_BR</c> that represents the layout of that specific segment.
    /// </remarks>
    protected container getSegmentsToProcess(ConfLayoutLines_BR _confLayoutLineBatchHeader,  EPSegment_BR _firstSegmentToProcess)
    {
        container           segmentsToProcess;
        EPSegmentTable_BR   segmentTable;
        EPSegment_BR        currentSegment = _firstSegmentToProcess;
        ConfLayoutLines_BR  segmentConfLayoutLines;
        boolean             isSegmentMandatory = true;

        ConfLayoutLines_BR getConfLayoutLineForSegment(EPSegment_BR _segment)
        {
            ConfLayoutLines_BR  confLayoutLines;
            ConfLayoutFields_BR confLayoutFields;

            while select confLayoutLines
                order by confLayoutLines.LayoutLineNum
                where confLayoutLines.LayoutGroupId == _confLayoutLineBatchHeader.LayoutGroupId
                    && confLayoutLines.LayoutLineNum > _confLayoutLineBatchHeader.LayoutLineNum
                    && confLayoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::Details
            {
                while select confLayoutFields
                    where confLayoutFields.LayoutGroupId == confLayoutLines.LayoutGroupId
                        && confLayoutFields.LayoutLineNum == confLayoutLines.LayoutLineNum
                {
                    if (confLayoutFields.TableName == this.getPaymModeSpecTableName()
                        && confLayoutFields.FieldName == this.getPaymModeSpecSegmentFieldName())
                    {
                        if (_segment == confLayoutFields.Value) // confLayoutFields.Value should have the segment ID
                        {
                            return confLayoutLines;
                        }
                    }
                }
            }
            confLayoutLines.clear();
            return confLayoutLines;
        }

        while (currentSegment)
        {
            segmentConfLayoutLines = getConfLayoutLineForSegment(currentSegment);
            if (!segmentConfLayoutLines)
            {
                if (isSegmentMandatory)
                {
                    throw error(strFmt("@GLS223823",
                        currentSegment,
                        this.getPaymModeSpecTableName(),
                        this.getPaymModeSpecSegmentFieldName()));
                }
            }
            else
            {
                segmentsToProcess += [[currentSegment, segmentConfLayoutLines]];
            }

            select Nextsegment
                from segmentTable
                where segmentTable.epSegment_BR == currentSegment;

            currentSegment     = segmentTable.Nextsegment;
            isSegmentMandatory = segmentTable.Mandatory;
        }

        return segmentsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the return occurrence code found in the file to the corresponding value in <c>CustVendPaymStatus</c> base enum.
    /// </summary>
    /// <param name="_layoutReturnOccCode">
    ///     The string containing the return occurrence code as informed by the bank in the return file.
    /// </param>
    /// <returns>
    ///     The value in base enum <c>CustVendPaymStatus</c> corresponding to the return occurrence code sent by the bank.
    /// </returns>
    protected CustVendPaymStatus getStatus(EPLayoutReturnOccCode_BR _layoutReturnOccCode)
    {
        EPRetOccCodes_BR    epRetOccCodes;
        CustVendPaymStatus  custVendPaymStatus;

        select epRetOccCodes
            where epRetOccCodes.LayoutGroupId == confLayoutGroupId
                && epRetOccCodes.LayoutRetOccCode == _layoutReturnOccCode;

        if (!epRetOccCodes)
        {
            throw error(strFmt("@GLS223824",
                               _layoutReturnOccCode,
                               confLayoutGroupId));
        }
        else
        {
            custVendPaymStatus = this.getPaymStatusByRetOccCode(epRetOccCodes.RetOccCode);
        }

        return custVendPaymStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymStatusByRetOccCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates payment satus according to return occurence code.
    /// </summary>
    /// <param name = "_retOccCode">The return occurence code to calculate status for.</param>
    /// <returns>The payment satus corresponding to return occurence code.</returns>
    protected CustVendPaymStatus getPaymStatusByRetOccCode(EPRetOccCode_BR _retOccCode)
    {
        CustVendPaymStatus paymStatus;

        switch (_retOccCode)
        {
            case EPRetOccCode_BR::Code_01:
                paymStatus = CustVendPaymStatus::Recieved;
                break;

            case EPRetOccCode_BR::Code_02:
                paymStatus = CustVendPaymStatus::Confirmed;
                break;

            case EPRetOccCode_BR::Code_03:
            case EPRetOccCode_BR::Code_04:
                paymStatus = CustVendPaymStatus::Rejected;
                break;

            default :
                paymStatus = CustVendPaymStatus::Sent;
        }

        return paymStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>Common</c> table buffer for a given table that had values popolated during the import process.
    /// </summary>
    /// <param name="_tableName">
    ///     The name of the table.
    /// </param>
    /// <returns>
    ///     A <c>Common</c> buffer with values in all fields that were populated during the importing process.
    /// </returns>
    public Common getTableByName(str _tableName)
    {
        Common          record;
        TableId         tableId;

        tableId = tableName2id(_tableName);

        if (tableId)
        {
            if (registeredValues.exists(tableId))
            {
                record = registeredValues.lookup(tableId);
            }
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesForProcessedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the values processed for a given document.
    /// </summary>
    /// <param name="_document">
    ///     Id of the document processed during the import operation.
    /// </param>
    /// <returns>
    ///     An instance of class <c>EPReturnValues_BR</c> containing all the values processed for a given document.
    /// </returns>
    public EPReturnValues_BR getValuesForProcessedDocument(EPCompanyDocument_BR _document)
    {
        EPReturnValues_BR epReturnValues;

        if (processedDocumentValues.exists(_document))
        {
            epReturnValues = processedDocumentValues.lookup(_document);
        }

        return epReturnValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValuesForTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether there are values registered for a given table.
    /// </summary>
    /// <param name="_tableName">
    ///     The name of the table.
    /// </param>
    /// <returns>
    ///     True if there are any values processed for the table; false otherwise.
    /// </returns>
    public boolean hasValuesForTable(str _tableName)
    {
        TableId tableId;

        tableId = tableName2id(_tableName);

        if (tableId
            && registeredValues.exists(tableId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes map fields and <c>confLayoutGroupId</c> field.
    /// </summary>
    /// <param name="_confLayoutGroupId">
    /// Field confLayoutGroupId.
    /// </param>
    protected void new(ConfLayoutGroupId_BR _confLayoutGroupId)
    {
        confLayoutGroupId           = _confLayoutGroupId;
        this.resetRegisteredValuesMap();
        processedDocumentValues     = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Parses a batch in the file.
    /// </summary>
    /// <param name="_confLayoutLineBatchHeader">
    ///     A <c>ConfLayoutLines_BR</c> table buffer containing the layout of the batch header.
    /// </param>
    protected void parseBatch(ConfLayoutLines_BR _confLayoutLineBatchHeader)
    {
        EPSegment_BR                firstSegmentToProcess;

        fileLine = fileReader.getNextLine();

        while (this.getFileLineType(fileLine, _confLayoutLineBatchHeader) == ConfBatchLayoutLineType_BR::BatchHeader)
        {
            if (!fileReturnSequenceNumber)
            {
                fileReturnSequenceNumber = this.getFieldContentInFileLine(fileLine,
                                                            _confLayoutLineBatchHeader,
                                                            tableStr(EP_FileSequenceNum_BR),
                                                            fieldStr(EP_FileSequenceNum_BR, FileReturnSequenceNumber));
            }

            firstSegmentToProcess = this.getFirstSegmentToProcess(fileLine, _confLayoutLineBatchHeader);

            this.parseDetailsWithinBatch(_confLayoutLineBatchHeader, firstSegmentToProcess);

            // Current line should be a batch trailer, so we need to read the next one to make sure we get to the next batch header or to the file trailer
            fileLine = fileReader.getNextLine();
        }

        if (fileReturnSequenceNumber)
        {
            EP_FileSequenceNum_BR::insertRetSeq(fileReturnSequenceNumber, confLayoutGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Parses a detail line in the file.
    /// </summary>
    /// <param name="_fileLine">
    ///     a string representing the detail line in the file.
    /// </param>
    /// <param name="_confLayoutLines">
    ///     A <c>ConfLayoutLines_BR</c> table buffer containing the layout of the given detail file line.
    /// </param>
    /// <param name="_segment">
    ///     The segment represented by the file line.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Exception thrown when the segment in the file line is not the expected one.
    /// </exception>
    protected void parseDetail(str _fileLine, ConfLayoutLines_BR _confLayoutLines, EPSegment_BR _segment)
    {
        EPSegment_BR                segmentInFile;
        ConfLayoutFields_BR         confLayoutFields;
        str                         fieldContentInFile;
        ConfImportValueParser_BR    confImportValueParser;

        segmentInFile = this.getFieldContentInFileLine(_fileLine,
                                                       _confLayoutLines,
                                                       this.getPaymModeSpecTableName(),
                                                       this.getPaymModeSpecSegmentFieldName());

        if (segmentInFile != _segment)
        {
            throw error(strFmt("@GLS223826" , _segment));
        }

        while select confLayoutFields
            where confLayoutFields.LayoutGroupId == _confLayoutLines.LayoutGroupId
                && confLayoutFields.LayoutLineNum == _confLayoutLines.LayoutLineNum
                && confLayoutFields.TableName != 'Command'
                && confLayoutFields.FieldName != ''
        {
            fieldContentInFile = subStr(_fileLine, confLayoutFields.StartPos, confLayoutFields.Size);

            confImportValueParser = new ConfImportValueParser_BR(confLayoutFields, fieldContentInFile, fileReader.currentLineNumber());
            confImportValueParser.doParse();
            if (confImportValueParser.hasParsingErrors())
            {
                info(confImportValueParser.parsingErrorsAsString());
            }
            else
            {
                this.registerValueForTableField(confLayoutFields, confImportValueParser.parsedValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDetailsWithinBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Parses all detail lines within a given batch.
    /// </summary>
    /// <param name="_confLayoutLineBatchHeader">
    ///     A <c>ConfLayoutLines_BR</c> table buffer containing the layout of the batch header.
    /// </param>
    /// <param name="_firstSegmentToProcess">
    ///     The first segment to be processed in the batch.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Exception thrown when no segments to be processed are found within the batch.
    /// </exception>
    protected void parseDetailsWithinBatch(ConfLayoutLines_BR _confLayoutLineBatchHeader, EPSegment_BR _firstSegmentToProcess)
    {
        ConfLayoutLines_BR  confLayoutLines;
        container           segmentsToProcess;
        int                 nextSegmentToProcessIndex;
        str                 nextSegmentToProcess;

        nextSegmentToProcessIndex = 1;
        fileLine = fileReader.getNextLine();

        // If the _firstSegmentToProcess was not found until now, let's try reading it from the file directly
        if (!_firstSegmentToProcess)
        {
            _firstSegmentToProcess = subStr(fileLine, #SegmentPositionInDetailLine, 1);
        }

        segmentsToProcess = this.getSegmentsToProcess(_confLayoutLineBatchHeader, _firstSegmentToProcess);

        if (conLen(segmentsToProcess) == 0)
        {
            throw error("@GLS223825");
        }

        do
        {
            nextSegmentToProcess    = conPeek(conPeek(segmentsToProcess, nextSegmentToProcessIndex), 1);
            confLayoutLines         = conPeek(conPeek(segmentsToProcess, nextSegmentToProcessIndex), 2);

            if (this.getFileLineType(fileLine, confLayoutLines) != ConfBatchLayoutLineType_BR::Details)
            {
                break;
            }

            this.parseDetail(fileLine, confLayoutLines, nextSegmentToProcess);

            // If this is the last segment to process, calculate values for the set of segments that were just processed
            // and reset the variable nextSegmentToProcessIndex so that we can expect to repeat the next set of segments
            if (nextSegmentToProcessIndex == conLen(segmentsToProcess))
            {
                this.storeValuesForDocument();
                nextSegmentToProcessIndex = 1;
                this.resetRegisteredValuesMap();
                fileLine = this.getNextLineForTheFirstSegment(conPeek(conPeek(segmentsToProcess, nextSegmentToProcessIndex), 1),
                                                              conPeek(conPeek(segmentsToProcess, nextSegmentToProcessIndex), 2));
            }
            else
            {
                nextSegmentToProcessIndex ++;
                fileLine = fileReader.getNextLine();
            }
        }
        while (nextSegmentToProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Parses the file line corresponding to the file header.
    /// </summary>
    /// <param name="_confLayoutLineFileHeader">
    ///     A <c>ConfLayoutLines_BR</c> table buffer containing the layout of the file header line.
    /// </param>
    protected void parseFile(ConfLayoutLines_BR _confLayoutLineFileHeader)
    {
        ConfLayoutLines_BR      confLayoutLines;

        fileLine = fileReader.getNextLine();

        fileReturnSequenceNumber = this.getFieldContentInFileLine(fileLine,
                                                                  _confLayoutLineFileHeader,
                                                                  tableStr(EP_FileSequenceNum_BR),
                                                                  fieldStr(EP_FileSequenceNum_BR, FileReturnSequenceNumber),
                                                                  false);
        select confLayoutLines
            where confLayoutLines.LayoutGroupId == confLayoutGroupId
                && confLayoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::BatchHeader;

        this.parseBatch(confLayoutLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerValueForTableField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Register a value read from the file that corresponds to a table field value.
    /// </summary>
    /// <param name="_confLayoutFields">
    ///     <c>ConfLayoutFields_BR</c> table buffer containing the layout of the field as configured by the used through the Configurator feature.
    /// </param>
    /// <param name="_FieldValue">
    ///     The value that should be registered for the table field.
    /// </param>
    protected void registerValueForTableField(ConfLayoutFields_BR _confLayoutFields, anytype _FieldValue)
    {
        TableId             tableId;
        DictTable           dictTable;
        Common              record;
        FieldId             fieldId;

        tableId = tableName2id(_confLayoutFields.TableName);
        dictTable  = new DictTable(tableId);

        if (dictTable)
        {
            fieldId = dictTable.fieldName2Id(_confLayoutFields.FieldName);

            if (!registeredValues.exists(tableId))
            {
                record = dictTable.makeRecord();
                registeredValues.insert(tableId, record);
            }

            record = registeredValues.lookup(tableId);
            record.(fieldId) = _FieldValue;

            registeredValues.insert(tableId, record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the file reader that will be used to read the file being processed.
    /// </summary>
    /// <param name="_fileReader">
    ///     An instance of <c>EPReturnFileReader_BR</c> that points to the file to be read.
    /// </param>
    public void setFile(EPReturnFileReader_BR _fileReader)
    {
        fileReader = _fileReader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the payment mode to be used during the return processing.
    /// </summary>
    /// <param name="_paymMode">
    ///     The value of the payment mode to be used during the return process.
    /// </param>
    public void setPaymMode(PaymMode _paymMode)
    {
        paymMode = _paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeValuesForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the set of values read for a specific document into the internal map that keeps all the values read for each document.
    /// </summary>
    public void storeValuesForDocument()
    {
        EPReturnValues_BR   epReturnValues;

        epReturnValues = this.buildEPReturnValues();

        processedDocumentValues.insert(epReturnValues.parmCompanyDocument(), epReturnValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigurationPrerequisites</Name>
				<Source><![CDATA[
    private void validateConfigurationPrerequisites()
    {
        ConfLayoutGroups_BR     confLayoutGroups;
        ConfLayoutLines_BR      confLayoutLines;
        ConfLayoutFields_BR     confLayoutFields;
        Set                     fieldFoundInLayout = new Set(Types::String);
        container               requiredFields;
        int                     requiredFieldsIndex;
        FieldId                 fieldId;
        TableId                 tableId;
        boolean                 ok = true;

        boolean isFieldInLayout(TableId _tableId, FieldId _fieldId)
        {
            return fieldFoundInLayout.in(tableId2name(_tableId) + fieldId2name(_tableId, _fieldId));
        }

        select firstonly LayoutType
            from confLayoutGroups
            where confLayoutGroups.LayoutGroupId == confLayoutGroupId;

        if (confLayoutGroups.LayoutType != ConfLayoutTypesChoice_BR::FixedLength)
        {
            throw error(strFmt("@GLS223821", confLayoutGroupId));
        }

        while select TableName, FieldName
            from confLayoutFields
            where confLayoutFields.LayoutGroupId == confLayoutGroupId
                && confLayoutFields.TableName != 'Command'
                && confLayoutFields.FieldName != ''
            exists join confLayoutLines
                where confLayoutLines.LayoutGroupId == confLayoutGroupId
                    && confLayoutLines.BatchLayoutLineType == ConfBatchLayoutLineType_BR::Details

        {
            fieldFoundInLayout.add(strLRTrim(confLayoutFields.TableName) + strLRTrim(confLayoutFields.FieldName));
        }

        requiredFields = this.getListOfRequiredFieldsInLayout();

        for (requiredFieldsIndex = 1; requiredFieldsIndex <= conLen(requiredFields); requiredFieldsIndex++)
        {
            tableId = conPeek(conPeek(requiredFields, requiredFieldsIndex), 1);
            fieldId = conPeek(conPeek(requiredFields, requiredFieldsIndex), 2);

            if (!isFieldInLayout(tableId, fieldId))
            {
                ok = false;
                info(strFmt("@GLS223822",
                            fieldId2pname(tableId, fieldId),
                            tableId2name(tableId),
                            fieldId2name(tableId, fieldId)));
            }
        }

        if (!ok)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCustPaymForLayout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>ConfImportEPComplex_BR</c> to be used for the customer payment return process.
    /// </summary>
    /// <param name="_confLayoutGroupId">
    ///     The <c>ConfLayoutGroupId_BR</c> describing the file that will be processed.
    /// </param>
    /// <returns>
    ///     An instance of <c>ConfImportEPComplexCustPaym_BR</c> wich is the concrete class used to process customer payment returns.
    /// </returns>
    public static ConfImportEPComplex_BR constructCustPaymForLayout(ConfLayoutGroupId_BR _confLayoutGroupId)
    {
        ConfImportEPComplex_BR confImportComplex;

        confImportComplex = new ConfImportEPComplexCustPaym_BR(_confLayoutGroupId);

        return confImportComplex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructVendPaymForLayout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>ConfImportEPComplex_BR</c> to be used for the vendor payment return process.
    /// </summary>
    /// <param name="_confLayoutGroupId">
    ///     The <c>ConfLayoutGroupId_BR</c> describing the file that will be processed.
    /// </param>
    /// <returns>
    ///     An instance of <c>ConfImportEPComplexVendPaym_BR</c> wich is the concrete class used to process vendor payment returns.
    /// </returns>
    public static ConfImportEPComplex_BR constructVendPaymForLayout(ConfLayoutGroupId_BR _confLayoutGroupId)
    {
        ConfImportEPComplex_BR confImportComplex;

        confImportComplex = new ConfImportEPComplexVendPaym_BR(_confLayoutGroupId);

        return confImportComplex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRegisteredValuesMap</Name>
				<Source><![CDATA[
    private void resetRegisteredValuesMap()
    {
        registeredValues = new Map(Types::Integer, Types::Record);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>