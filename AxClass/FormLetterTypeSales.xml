<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterTypeSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterTypeConsignment</c> class contains the logic specific to the <c>FormLetterType</c> sales.
/// </summary>
[FormLetterTypeFactoryAttribute(FormLetterType::Sales)]
class FormLetterTypeSales extends FormletterTypeBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formLetterContract</Name>
				<Source><![CDATA[
    public FormLetterContract formLetterContract(container _formLetterContractPacked)
    {
        return SalesFormLetterContract::newFromPackedVersion(_formLetterContractPacked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalPrint</Name>
				<Source><![CDATA[
    public FormletterJournalPrint formletterJournalPrint(FormLetterContract _formLetterContract)
    {
        return FormletterJournalPrint::newSalesJournalPrint(_formLetterContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedOutputContract</Name>
				<Source><![CDATA[
    public container packedOutputContract(FormletterParmDataRearrangeBatchTask _formletterParmDataRearrangeBatchTask)
    {
        return SalesFormletterParmData::reArrangeServer(_formletterParmDataRearrangeBatchTask.parmFormletterContract().pack(), 
            _formletterParmDataRearrangeBatchTask.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterProvider</Name>
				<Source><![CDATA[
    public FormletterProvider formletterProvider()
    {
        return SalesFormletterProvider::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalCreate</Name>
				<Source><![CDATA[
    public FormletterJournalCreate formletterJournalCreate(FormletterService _formletterService,Common _parmTable)
    {
        return FormletterJournalCreate::newSalesJournalCreate(_formletterService.parmFormLetterContract(), _parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalPost</Name>
				<Source><![CDATA[
    public FormletterJournalPost formletterJournalPost(FormletterService _formletterService, Common _parmTable)
    {
        FormletterJournalPost formletterJournalPost = FormletterJournalPost::newPostSales(_formletterService.parmFormLetterContract(), _formletterService.parmJournal(), _parmTable);
        formletterJournalPost.parmTotals(_formletterService.parmTotals());
        return formletterJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmData</Name>
				<Source><![CDATA[
    public formletterParmData formletterParmData(FormletterService _formletterService)
    {
        return SalesFormletterParmData::newChooseLines(_formletterService.parmFormLetterContract().pack(), true, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmUpdate</Name>
				<Source><![CDATA[
    public FormletterParmUpdate formletterParmUpdate(FormletterService _formletterService)
    {
        return _formletterService.parmFormLetterContract().parmParmUpdate() as SalesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmMaps</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmMaps(FormletterService _formletterService)
    {
        SalesParmTable  emptySalesParmTable;
        DictField dictField = new DictField(tableNum(SalesParmTable), fieldNum(SalesParmTable, SalesId));
        _formletterService.parmLabelOrderId(dictField.label());
        return emptySalesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologPrefixParmTable</Name>
				<Source><![CDATA[
    public str infologPrefixParmTable(FormletterParmTable _parmTable)
    {
        return fieldLabelValue(_parmTable.TableId, fieldNum(SalesParmTable, SalesId), _parmTable.OrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterContractDataRearrange</Name>
				<Source><![CDATA[
    public void formLetterContractDataRearrange(FormletterService _formletterService)
    {
        SalesFormletterParmData::reArrangeServer(_formletterService.parmFormletterContract().pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmTable</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmTable(DocumentStatus _documentStatus)
    {
        SalesParmTable  emptySalesParmTable;
        return emptySalesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmUpdate</Name>
				<Source><![CDATA[
    public FormletterParmUpdate initFormletterParmUpdate()
    {
        SalesParmUpdate emptySalesParmUpdate;
        return emptySalesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterJournal</Name>
				<Source><![CDATA[
    public FormletterJournal initFormletterJournal(DocumentStatus _documentStatus)
    {
        FormletterJournal   formletterJournal;

        // <GIN>
        CustomsShippingBillJour_IN  emptyCustomsShippingBillJour;
        boolean                     isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        // </GIN>

        switch (_documentStatus)
        {
            case DocumentStatus::Confirmation       :
                CustConfirmJour emptyCustConfirmJour;
                formletterJournal = emptyCustConfirmJour;
                break;
            
            case DocumentStatus::PickingList        :
                WMSPickingRoute emptyWMSPickingRoute;
                formletterJournal = emptyWMSPickingRoute;
                break;

            case DocumentStatus::PackingSlip        : //fall through
            case DocumentStatus::ProjectPackingSlip :
                CustPackingSlipJour emptyCustPackingSlipJour;
                formletterJournal = emptyCustPackingSlipJour;
                break;

            case DocumentStatus::Invoice            :
            case DocumentStatus::FreeTextInvoice    : //fall through
                CustInvoiceJour emptyCustInvoiceJour;
                formletterJournal = emptyCustInvoiceJour;
                break;

            case DocumentStatus::ProjectInvoice     :
                Common emptyCommon;
                formletterJournal = emptyCommon;
                break;

            // <GIN>
            case DocumentStatus::ShippingBill_IN    :
                if (isCustomsEnabled)
                {
                    formletterJournal = emptyCustomsShippingBillJour;
                }
                break;
            // </GIN>

            default : throw error(strFmt("@SYS19306",funcName()));
        }

        return formletterJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>