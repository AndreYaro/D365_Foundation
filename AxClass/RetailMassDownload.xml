<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassDownload</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The <c>RetailMassDownload</c> class implements the <c>RetailIOperatingUnitPickerCaller</c> interface for showing mass download dialog.
/// </summary>
public class RetailMassDownload  extends RunBase implements RetailIOperatingUnitPickerCaller
{
    Set         selectedOMInternalOrgRecIds;
    RecId       oMHierarchyRecId;
    container   packedOMUnits;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>.
    /// </summary>
    /// <returns>The class that contains the methods that are described by the <c>RunBaseDialogable</c>.</returns>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RunBase</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of the <c>RunBase</c> class.</returns>
    public container pack()
    {
        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        oMHierarchyRecId = _oMHierarchyRecId;

        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        if (!prmIsDefault(_selectedOMInternalOrgRecIds))
        {
            selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    [SysObsolete("The method is deprecated. Use getPickerInitParameters()", true, 30\11\2017)]
    public Set GetSelectedOMInternalOrgRecIds()
    {
        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;
        pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    [SysObsolete('use parmSelectedOMInternalOrgRecIds method instead', true, 30\11\2017)]
    QueryRun queryRun(QueryRun  _queryRun = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the mass download based upon the user selection of the stores.
    /// </summary>
    public void run()
    {
        RetailStoreTable        storeTable;
        SetEnumerator           selectedStoreEnumerator;
        SetEnumerator           oMInternalOrgRecIds;
        RetailChannelTable      retailChannelTable;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set                     descendants;
        SetEnumerator           descendantsEnumerator;

        System.Exception exception;

        EventLogger::EventWriteRetailServicingInformation('Retail Mass Device Download started.');

        oMInternalOrgRecIds = selectedOMInternalOrgRecIds.getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel.
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            //get all the descendents for selected hierarchy node.
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                oMInternalOrgRecIds.current(),
                                oMHierarchyRecId,
                                DateTimeUtil::utcNow(),
                                operatingUnitType
                                );

            // start traversing on the descendants.
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if (retailChannelTable.RecId &&
                    retailChannelTable.ChannelType == RetailChannelType::RetailStore &&
                    !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        RetailSelfServicePackageManager::DownloadMassDownloadZip(selectedStoreRecIds);

        EventLogger::EventWriteRetailServicingInformation('Retail Mass Device Download completed.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:RetailMassDownload";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailMassDownload   RetailMassDownload  = new RetailMassDownload();

        if (RetailMassDownload.prompt())
        {
            RetailMassDownload.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    [SysObsolete('use run method instead', true, 30\11\2017)]
    static void runServer(container _packedRetailMassDownload)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>