<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_INV3</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form INV-3 to excel.
/// </summary>
class OXMLExcelReport_INV3 extends XMLExcelReport_RU implements InventJournalReportPackable_RU, BatchRetryable, ERIReportPostProcessingSupported
{
    JournalId                   journalId;
    TransDate                   postDate;
    JournalNumOfLines           numofLines;
    List                        inventReportsList;
    InventJournalReportType_RU  reportType;
    InventJournalProforma_RU    report;

    DialogField                 dialogCreationDate;
    DialogField                 dialogOrderNumber;
    DialogField                 dialogOrderDate;
    DialogField                 dialogStartDate;
    DialogField                 dialogEndDate;

    TransDate                   creationDate;
    Num                         orderNumber;
    TransDate                   orderDate;
    StartDate                   startDate;
    EndDate                     endDate;

    CompanyInfo                 companyInfo;
    OfficialsTrans_RU           officialsTrans_RU;
    InventJournalTrans          inventJournalTrans;
    InventDim                   inventDim;
    InventDimParm               inventDimParm;
    InventTable                 inventTable;

    InventOnhand                inventOnhand;

    str                         itemName;
    str                         unitName;
    str                         codeOkei;
    CostPrice                   costPrice;
    Amount                      countedAmount;
    Amount                      onHandAmount;
    MainAccountNum              mainAccount;

    Qty                         countedQtyTotal;
    Qty                         countedQtyPageTotal;
    Amount                      countedAmountTotal;
    Amount                      countedAmountPageTotal;

    Counter                     lineNumTotal;
    Counter                     LineNumPageTotal;

    Qty                         onHandQtyTotal;
    Qty                         onHandQtyPageTotal;
    Amount                      onHandAmountTotal;
    Amount                      onHandAmountPageTotal;

    #define.widthCols(32)

    #define.FirstPageNo(1)
    #define.MainPageNo(2)
    #define.LastPageNo(3)

    #define.FirstPage('FIRSTPAGE')
    #define.MainPageHeader('MAINPAGEHEADER')
    #define.MainPageBody('MAINPAGEBODY')
    #define.MainPageFooter('MAINPAGEFOOTER')
    #define.LastPage('LASTPAGE')

    // first page bookmarks
    #define.Company('Company')
    #define.Warehouse('Warehouse')
    #define.OrderNum('OrderNum')
    #define.OrderDate('OrderDate')
    #define.ClassificationbyOKPO('ClassificationbyOKPO')
    #define.InventStartDate('InventStartDate')
    #define.InventEndDate('InventEndDate')
    #define.InventJournalNum('InventJournalNum')
    #define.CountingListCreateDate('CountingListCreateDate')

    #define.InChargeTitleF1('InChargeTitleFirstPageLine1')
    #define.InChargeTitleF2('InChargeTitleFirstPageLine2')
    #define.InChargeNameF1('InChargeNameFirstPageLine1')
    #define.InChargeNameF2('InChargeNameFirstPageLine2')

    #define.InventOnHandDateDay('InventOnHandDateDay')
    #define.InventOnHandDateMth('InventOnHandDateMth')
    #define.InventOnHandDateYr('InventOnHandDateYr')

    // body bookmarks
    #define.LineNum('LineNum')
    #define.MainAccount('MainAccount')
    #define.ItemName('ItemName')
    #define.ItemId('ItemId')
    #define.CodeOKEI('CodeOKEI')
    #define.UnitName('UnitName')
    #define.CostPrice('CostPrice')
    #define.CountedQty('CountedQty')
    #define.CountedAmount('CountedAmount')
    #define.OnHandQty('OnHandQty')
    #define.OnHandAmount('OnHandAmount')

    // page totals bookmarks
    #define.CountedQtyPageTotal('CountedQtyPageTotal')
    #define.CountedAmountPageTotal('CountedAmountPageTotal')
    #define.OnHandQtyPageTotal('OnHandQtyPageTotal')
    #define.OnHandAmountPageTotal('OnHandAmountPageTotal')

    #define.LineNumPageTotalStr('LineNumPageTotalStr')
    #define.CountedQtyPageTotalStr('CountedQtyPageTotalStr')
    #define.CountedAmountPageTotalStr('CountedAmountPageTotalStr')
    #define.CountedAmountPageTotalCent('CountedAmountPageTotalCent')

    // last page bookmarks
    #define.LineNumTotalStr('LineNumTotalStr')
    #define.CountedQtyTotalStr('CountedQtyTotalStr')
    #define.CountedAmountTotalStr('CountedAmountTotalStr')
    #define.CountedAmountTotalCent('CountedAmountTotalCent')

    #define.PostingDateMth('PostingDateMth')
    #define.PostingDateDay('PostingDateDay')
    #define.PostingDateYr ('PostingDateYr')

    #define.ChairmanTitle('ChairmanTitle')
    #define.ChairmanName('ChairmanName')

    #define.MemberTitle1('MemberTitleLine1')
    #define.MemberTitle2('MemberTitleLine2')
    #define.MemberTitle3('MemberTitleLine3')
    #define.MemberName1('MemberNameLine1')
    #define.MemberName2('MemberNameLine2')
    #define.MemberName3('MemberNameLine3')

    #define.InChargeTitleL1('InChargeTitleLastPageLine1')
    #define.InChargeTitleL2('InChargeTitleLastPageLine2')
    #define.InChargeTitleL3('InChargeTitleLastPageLine3')
    #define.InChargeNameL1('InChargeNameLastPageLine1')
    #define.InChargeNameL2('InChargeNameLastPageLine2')
    #define.InChargeNameL3('InChargeNameLastPageLine3')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15.0)

        return max(document.getNamedRangeHeightWrapped(#ItemName, itemName),
                   document.getNamedRangeHeightWrapped(#ItemId,   inventJournalTrans.ItemId),
                   document.getNamedRangeHeightWrapped(#UnitName, unitName),
                   document.getNamedRangeHeightWrapped(#CodeOkei, codeOkei),
                   #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        boolean             isPosted = InventJournalTable::find(journalId).Posted;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventTransPosting  inventTransPosting;

        this.initSectionMap();

        // First page
        this.setCurrentWorksheetNum(#FirstPageNo, #widthCols);
        this.execute(#FirstPage);

        // Main pages
        this.setCurrentWorksheetNum(#MainPageNo, #widthCols);
        this.execute(#MainPageHeader);

        while select inventJournalTrans
            where inventJournalTrans.JournalId    == journalId
        join inventDim
            where inventDim.InventDimId           == inventJournalTrans.InventDimId
        {
            inventTable = inventJournalTrans.inventTable();

            if (isPosted)
            {
                select sum(Qty), sum(CostAmountPosted) from inventTrans
                    exists join inventTransOrigin
                        where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                           && inventTransOrigin.InventTransId == inventJournalTrans.InventTransId;

                costPrice = inventTrans.Qty ? CurrencyExchangeHelper::price(inventTrans.CostAmountPosted / inventTrans.Qty) : 0;

                select LedgerDimension from inventTransPosting
                    where inventTransPosting.ItemId                 == inventJournalTrans.ItemId        &&
                          inventTransPosting.InventTransPostingType == InventTransPostingType::Financial &&
                          inventTransPosting.InventTransOrigin      == InventTransOriginJournalTrans::findInventTransOriginId(
                                                                            inventJournalTrans.DataAreaId,
                                                                            inventJournalTrans.JournalId,
                                                                            inventJournalTrans.LineNum);

                mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(inventTransPosting.LedgerDimension);
            }

            if (!isPosted || !inventJournalTrans.Qty)
            {
                InventDimGroupSetup::newItemId(inventJournalTrans.ItemId).inventDimParmActiveFinancialInventory(inventDimParm);
                inventOnhand = InventOnhand::newParameters(inventJournalTrans.ItemId, inventDim, inventDimParm);

                costPrice = inventOnhand.costPricePcs(false, inventJournalTrans.TransDate);

                if (inventJournalTrans.Qty >= 0)
                {
                    mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventReceipt)));
                }

                if (inventJournalTrans.Qty < 0)
                {
                    mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventIssue)));
                }
            }

            countedAmount = CurrencyExchangeHelper::amount(inventJournalTrans.Counted * costPrice);
            onhandAmount  = CurrencyExchangeHelper::amount(inventJournalTrans.InventOnHand * costPrice);
            costPrice = CurrencyExchangeHelper::price(costPrice);
            UnitOfMeasureSymbol unitOfMeasureSymbol = inventJournalTrans.unitId();

            str unitNameDescription = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(unitOfMeasureSymbol).RecId, companyInfo.LanguageId).Description;
            unitName = unitNameDescription ? unitNameDescription : unitOfMeasureSymbol;
            InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(inventJournalTrans.ItemId, inventDim);
            itemName = inventDimCombination.RecId ? inventDimCombination.defaultProductName() : inventTable.defaultProductName();

            codeOkei = UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(unitOfMeasureSymbol));

            if (this.mustCreateNewPage())
            {
                this.execute(#MainPageFooter);

                lineNumPageTotal        = 0;
                countedQtyPageTotal     = 0;
                countedAmountPageTotal  = 0;
                onHandQtyPageTotal      = 0;
                onHandAmountPageTotal   = 0;

                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(#MainPageHeader);
            }

            lineNumTotal++;
            lineNumPageTotal++;

            this.execute(#MainPageBody);

            countedQtyTotal         += inventJournalTrans.Counted;
            countedQtyPageTotal     += inventJournalTrans.Counted;
            countedAmountTotal      += countedAmount;
            countedAmountPageTotal  += countedAmount;

            onHandQtyTotal          += inventJournalTrans.InventOnHand;
            onHandQtyPageTotal      += inventJournalTrans.InventOnHand;
            onHandAmountTotal       += onhandAmount;
            onHandAmountPageTotal   += onhandAmount;
        }

        this.execute(#MainPageFooter);

        // Last page
        this.setCurrentWorksheetNum(#LastPageNo, #widthCols);
        this.execute(#LastPage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            inventJournalTrans.ItemId);

        searchParameters.InventDim_RU = inventJournalTrans.inventDim();

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog    dialog = super();

        TransDate currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        TransDate voidDate;

        if (dialog)
        {
            dialog.addTabPage("@GLS104385");
            dialogCreationDate  = dialog.addFieldValue(extendedtypestr(TransDate), currentDate, "@GLS113031");

            dialog.addGroup("@GLS102458");
            dialogOrderNumber   = dialog.addFieldValue(extendedtypestr(Num),       orderNumber, "@GLS100700");
            dialogOrderDate     = dialog.addFieldValue(extendedtypestr(TransDate), voidDate,    "@GLS100719");
            dialogStartDate     = dialog.addFieldValue(extendedtypestr(StartDate), startDate,   "@GLS102456");
            dialogEndDate       = dialog.addFieldValue(extendedtypestr(EndDate),   endDate,     "@GLS102457");

            dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(InventJournalPrint_RU), DialogMenuItemGroup::BottomGrp);
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    #define.filename('INV-3')
    protected Filename fileName()
    {
        return #filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #FirstPage:
                this.fillFirstPage();
                break;
            case #MainPageBody:
                this.fillMainPageBody();
                break;
            case #MainPageFooter:
                this.fillMainPageFooter();
                break;
            case #LastPage:
                this.fillLastPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFirstPage</Name>
				<Source><![CDATA[
    private void fillFirstPage()
    {
        Bookmark    inChargeTitleBookmark, inChargeNameBookmark;
        int         countofPersonInCharge;
        Set         wareHouseNamesSet = new Set(Types::String);

        companyInfo = CompanyInfo::find();

        this.insertValueToSection(#Company,                 companyInfo.Name);
        this.insertValueToSection(#OrderNum,                orderNumber);
        this.insertValueToSection(#OrderDate,               orderDate);
        this.insertValueToSection(#ClassificationbyOKPO,    CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, postDate));
        this.insertValueToSection(#InventStartDate,         startDate);
        this.insertValueToSection(#InventEndDate,           endDate);
        this.insertValueToSection(#InventJournalNum,        journalId);
        this.insertValueToSection(#CountingListCreateDate,  creationDate);

        if (endDate)
        {
            this.insertValueToSection(#InventOnHandDateDay,     dayOfMth(endDate));
            this.insertValueToSection(#InventOnHandDateMth,     strLwr(RNumDateInWordConverter::construct().date2strMonth(endDate)));
            this.insertValueToSection(#InventOnHandDateYr,      year(endDate));
        }

        while select officialsTrans_RU
            where officialsTrans_RU.ReportType   == OffReportType_RU::InventINV3
               && officialsTrans_RU.OffSessionId == report.getOffSessionId()
               && officialsTrans_RU.Position     == OffPosition_RU::InCharge
        {
            countOfPersonInCharge++;

            if (countOfPersonInCharge > 2)
                break;

            switch (countOfPersonInCharge)
            {
                case 1:
                    inChargeTitleBookmark   = #InChargeTitleF1;
                    inChargeNameBookmark    = #InChargeNameF1;
                    break;
                case 2:
                    inChargeTitleBookmark   = #InChargeTitleF2;
                    inChargeNameBookmark    = #InChargeNameF2;
                    break;
            }

            this.insertValueToSection(inChargeTitleBookmark, officialsTrans_RU.Title);
            this.insertValueToSection(inChargeNameBookmark,  officialsTrans_RU.Name);
        }

        // Warehouse

        while select RecId from inventJournalTrans
            where inventJournalTrans.JournalId == journalId
        join InventLocationId from inventDim
            where inventDim.InventDimId        == inventJournalTrans.InventDimId
               && inventDim.InventLocationId
        {
            wareHouseNamesSet.add(inventDim.InventLocationId);
        }

        this.insertValueToSection(#Warehouse, subStr(wareHouseNamesSet.toString(), 2, strLen(wareHouseNamesSet.toString()) - 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLastPage</Name>
				<Source><![CDATA[
    private void fillLastPage()
    {
        Bookmark    titleBookmark, nameBookmark;
        int         countOfMember;
        int         countOfPersonInCharge;

        this.insertValueToSection(#LineNumTotalStr,         RNumDateInWordConverter::construct().numeralsToTxt(LineNumTotal));
        this.insertValueToSection(#CountedQtyTotalStr,      RNumDateInWordConverter::construct().numeralsToTxt(countedQtyTotal));
        this.insertValueToSection(#CountedAmountTotalStr,   RNumDateInWordConverter::construct().numeralsToTxt(countedAmountTotal));
        this.insertValueToSection(#CountedAmountTotalCent,  frac(CurrencyExchangeHelper::amount(countedAmountTotal)) * 100);

        if (postDate)
        {
            this.insertValueToSection(#PostingDateDay,  dayOfMth(postDate));
            this.insertValueToSection(#PostingDateMth,  strLwr(RNumDateInWordConverter::construct().date2strMonth(postDate)));
            this.insertValueToSection(#PostingDateYr,   year(postDate));
        }

        // chairman
        select firstOnly officialsTrans_RU
            where officialsTrans_RU.ReportType   == OffReportType_RU::InventINV3
               && officialsTrans_RU.OffSessionId == report.getOffSessionId()
               && officialsTrans_RU.Position     == OffPosition_RU::Chairman;

        this.insertValueToSection(#ChairmanTitle, officialsTrans_RU.Title);
        this.insertValueToSection(#ChairmanName, officialsTrans_RU.Name);

        // members
        while select officialsTrans_RU
            where officialsTrans_RU.ReportType   == OffReportType_RU::InventINV3
               && officialsTrans_RU.OffSessionId == report.getOffSessionId()
               && officialsTrans_RU.Position     == OffPosition_RU::Member
        {
            countOfMember++;

            if (countOfMember > 3)
                break;

            switch (countOfMember)
            {
                case 1:
                    titleBookmark   = #MemberTitle1;
                    nameBookmark    = #MemberName1;
                    break;
                case 2:
                    titleBookmark   = #MemberTitle2;
                    nameBookmark    = #MemberName2;
                    break;
                case 3:
                    titleBookmark   = #MemberTitle3;
                    nameBookmark    = #MemberName3;
                    break;
            }

            this.insertValueToSection(titleBookmark, officialsTrans_RU.Title);
            this.insertValueToSection(nameBookmark,  officialsTrans_RU.Name);
        }

        // persons in charge
        while select officialsTrans_RU
            where officialsTrans_RU.ReportType   == OffReportType_RU::InventINV3
               && officialsTrans_RU.OffSessionId == report.getOffSessionId()
               && officialsTrans_RU.Position     == OffPosition_RU::InCharge
        {
            countOfPersonInCharge ++;

            if (countOfPersonInCharge > 3)
                break;

            switch (countOfPersonInCharge)
            {
                case 1:
                    titleBookmark   = #InChargeTitleL1;
                    nameBookmark    = #InChargeNameL1;
                    break;
                case 2:
                    titleBookmark   = #InChargeTitleL2;
                    nameBookmark    = #InChargeNameL2;
                    break;
                case 3:
                    titleBookmark   = #InChargeTitleL3;
                    nameBookmark    = #InChargeNameL3;
                    break;
            }

            this.insertValueToSection(titleBookmark, officialsTrans_RU.Title);
            this.insertValueToSection(nameBookmark,  officialsTrans_RU.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMainPageBody</Name>
				<Source><![CDATA[
    private void fillMainPageBody()
    {
        this.insertValueToSection(#LineNum,         lineNumTotal);
        this.insertValueToSection(#MainAccount,     mainAccount);
        this.insertValueToSection(#ItemName,        itemName);
        this.insertValueToSection(#ItemId,          inventJournalTrans.ItemId);
        this.insertValueToSection(#UnitName,        unitName);
        this.insertValueToSection(#CodeOKEI,        codeOKEI);
        this.insertValueToSection(#CostPrice,       costPrice);
        this.insertValueToSection(#CountedQty,      inventJournalTrans.Counted);
        this.insertValueToSection(#CountedAmount,   countedAmount);
        this.insertValueToSection(#OnHandQty,       inventJournalTrans.InventOnHand);
        this.insertValueToSection(#OnHandAmount,    onhandAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMainPageFooter</Name>
				<Source><![CDATA[
    private void fillMainPageFooter()
    {
        this.insertValueToSection(#CountedQtyPageTotal,    countedQtyPageTotal);
        this.insertValueToSection(#CountedAmountPageTotal, countedAmountPageTotal);
        this.insertValueToSection(#OnHandQtyPageTotal,     onHandQtyPageTotal);
        this.insertValueToSection(#OnHandAmountPageTotal,  onHandAmountPageTotal);

        this.insertValueToSection(#LineNumPageTotalStr,         RNumDateInWordConverter::construct().numeralsToTxt(LineNumPageTotal));
        this.insertValueToSection(#CountedQtyPageTotalStr,      RNumDateInWordConverter::construct().numeralsToTxt(countedQtyPageTotal));
        this.insertValueToSection(#CountedAmountPageTotalStr,   RNumDateInWordConverter::construct().numeralsToTxt(countedAmountPageTotal));
        this.insertValueToSection(#CountedAmountPageTotalCent,  frac(CurrencyExchangeHelper::amount(countedAmountPageTotal)) * 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        creationDate    = dialogCreationDate.value();
        orderNumber     = dialogOrderNumber.value();
        orderDate       = dialogOrderDate.value();
        startDate       = dialogStartDate.value();
        endDate         = dialogEndDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    private void initReportData(InventJournalTable _inventJournalTable, InventJournalReportType_RU _reportType)
    {
        reportType         = _reportType;
        inventReportsList  = new List(Types::Class);
        report             = InventJournalProforma_RU::construct(reportType);
        report.initOfficialsDefault(_inventJournalTable.OffSessionId_RU);
        inventReportsList.addEnd(report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#FirstPage);
        this.addSection(#MainPageHeader);
        this.addSection(#MainPageBody, true);
        this.addSection(#MainPageFooter);
        this.addSection(#LastPage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#MainPageBody);

        requiredHeight += conPeek(mapSections.lookup(#MainPageFooter), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// A method determining whether to print a section identified by a bookmark given.
    /// </summary>
    /// <param name="_bookmark">
    /// A bookmark idetifying the section area to print.
    /// </param>
    /// <returns>
    /// A boolean value determining whether or not to print the section.
    /// </returns>
    /// <remarks>
    /// Do not print section identyfied by an empty bookmark.
    /// </remarks>
    protected boolean mustPrintSection(MSOfficeBookMark_RU _bookmark)
    {
        boolean ret;

        if (!_bookmark)
        {
            return false;
        }

        ret = super(_bookmark);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReportList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs inventReportsList list into container.
    /// </summary>
    /// <returns>
    /// Container with packed inventReportsList.
    /// </returns>
    public container packReportList()
    {
        if (inventReportsList)
            return inventReportsList.pack();

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumofLines</Name>
				<Source><![CDATA[
    public JournalNumOfLines parmNumofLines(JournalNumOfLines _numofLines = numofLines)
    {
        numofLines = _numofLines;
        return numofLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostDate</Name>
				<Source><![CDATA[
    public TransDate parmPostDate(TransDate _postDate = postDate)
    {
        postDate = _postDate;
        return postDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(INV3_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.otherCells(35)
    #define.lineCells(10)
    protected Counter totalCells()
    {
        return #otherCells + #lineCells * numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static OXMLExcelReport_INV3 construct()
    {
        return new OXMLExcelReport_INV3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS113030";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OXMLExcelReport_INV3 report;

        report = OXMLExcelReport_INV3::newFromArgs(_args);

        if (report.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00123, funcName());

            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>OXMLExcelReport_INV3</c> and initializes it from the <c>Args</c> object.
    /// </summary>
    /// <param name="_args">
    /// <c>Args</c> object for initializing.
    /// </param>
    /// <returns>
    /// New initialized instance of the <c>OXMLExcelReport_INV3</c> class.
    /// </returns>
    public static OXMLExcelReport_INV3 newFromArgs(Args _args)
    {
        OXMLExcelReport_INV3    report = OXMLExcelReport_INV3::construct();
        InventJournalTable      inventJournalTable;

        if (! _args || _args.dataset() != tableNum(InventJournalTable))
            throw error(strFmt("@SYS25516", OXMLExcelReport_INV3::description()));

        inventJournalTable = _args.record();

        report.parmJournalId (inventJournalTable.JournalId);
        report.parmPostDate  (DateTimeUtil::date(inventJournalTable.PostedDateTime));
        report.parmNumofLines(inventJournalTable.NumOfLines);
        report.initReportData(inventJournalTable, InventJournalReportType_RU::CountingList);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>