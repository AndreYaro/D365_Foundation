<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransItemForecast extends ProjTransItem
{
    ForecastSales   forecastSales;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return forecastSales.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransStatusBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a transaction can be invoiced based on its status.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    public boolean canTransStatusBeInvoiced(boolean     _chargeable = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId categoryId()
    {
        return forecastSales.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    CostPrice costPrice()
    {
        return forecastSales.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return forecastSales.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return forecastSales.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastEliminationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected elimination date for this transaction.
    /// </summary>
    /// <returns>
    /// The expected elimination date for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjForecastEliminationDate    forecastEliminationDate()
    {
        return forecastSales.ProjForecastEliminationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected invoice date for this transaction.
    /// </summary>
    /// <returns>
    /// The expected invoice date for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjForecastInvoiceDate    forecastInvoiceDate()
    {
        return forecastSales.ProjForecastInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the forecast model for this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the forecast model for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ForecastModelId forecastModelId()
    {
        return forecastSales.ModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return forecastSales.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory dimension for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return forecastSales.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    public boolean invoiceable()
    {
        return ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return forecastSales.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return forecastSales.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ForecastSales _forecastSales)
    {
        forecastSales   = _forecastSales;

        super(_forecastSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return forecastSales.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        return forecastSales.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    public SalesPrice salesPrice()
    {
        return forecastSales.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public UnitOfMeasureSymbol salesUnit()
    {
        return forecastSales.SalesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    public TaxGroup taxGroup()
    {
        return forecastSales.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        return forecastSales.costValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return forecastSales.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return forecastSales.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return forecastSales.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    public Voucher voucherInvoice()
    {
        Voucher ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>