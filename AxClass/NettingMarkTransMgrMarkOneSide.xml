<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NettingMarkTransMgrMarkOneSide</Name>
	<SourceCode>
		<Declaration><![CDATA[
[NettingRuleSelectionPolicyTypeAttribute(NettingRuleSelectionPolicyType::MarkOneSide)]
internal final class NettingMarkTransMgrMarkOneSide extends AbsNettingMarkTransMgr
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransWithPolicy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public INettingMarked markTransWithPolicy(Query _debitQuery, TableId _debitTableId, CompanyId _debitCompany, Query _creditQuery, TableId _creditTableId, CompanyId _creditCompany)
    {
        this.init();
        QueryRun debitQueryRun = new QueryRun(_debitQuery);
        QueryRun creditQueryRun = new QueryRun(_creditQuery);
        Common debitRecordPeeked;
        Common creditRecordPeeked;
        boolean debitUsed = true;
        boolean creditUsed = true;
        boolean debitHasMore = true;
        boolean creditHasMore = true;
        AmountCur debitAmountCounted = 0;
        AmountCur creditAmountCounted = 0;
        while (debitHasMore && creditHasMore)
        {
            if (debitUsed)
            {
                changecompany(_debitCompany)
                {
                    debitHasMore = debitQueryRun.next();
                    if (!debitHasMore)
                    {
                        break;
                    }
                    debitUsed = false;
                    debitRecordPeeked = debitQueryRun.get(_debitTableId);
                }
            }
            if (creditUsed)
            {
                changecompany(_creditCompany)
                {
                    creditHasMore = creditQueryRun.next();
                    if (!creditHasMore)
                    {
                        break;
                    }
                    creditUsed = false;
                    creditRecordPeeked = creditQueryRun.get(_creditTableId);
                }
            }
            if (debitAmountCounted + abs(debitRecordPeeked.getFieldValue(AmountCurFieldName)) <= creditAmountCounted + abs(creditRecordPeeked.getFieldValue(AmountCurFieldName)))
            {
                debitAmountCounted += abs(debitRecordPeeked.getFieldValue(AmountCurFieldName));
                markedResult.addDebitMarked(NettingMarkedTrans::construct(
                    this.getTableId(_debitTableId, debitRecordPeeked),
                    this.getRecId(_debitTableId, debitRecordPeeked),
                    debitRecordPeeked.getFieldValue(AmountCurFieldName)));
                debitUsed = true;
            }
            else
            {
                creditAmountCounted += abs(creditRecordPeeked.getFieldValue(AmountCurFieldName));
                markedResult.addCreditMarked(NettingMarkedTrans::construct(
                    this.getTableId(_creditTableId, creditRecordPeeked),
                    this.getRecId(_creditTableId, creditRecordPeeked),
                    creditRecordPeeked.getFieldValue(AmountCurFieldName)));
                creditUsed = true;
            }
        }
        while (debitAmountCounted <= creditAmountCounted && debitHasMore)
        {
            if (!debitUsed)
            {
                debitAmountCounted += abs(debitRecordPeeked.getFieldValue(AmountCurFieldName));
                markedResult.addDebitMarked(NettingMarkedTrans::construct(
                    this.getTableId(_debitTableId, debitRecordPeeked),
                    this.getRecId(_debitTableId, debitRecordPeeked),
                    debitRecordPeeked.getFieldValue(AmountCurFieldName)));
            }
            else
            {
                changecompany(_debitCompany)
                {
                    debitHasMore = debitQueryRun.next();
                    if (debitHasMore)
                    {
                        Common debitRecord = debitQueryRun.get(_debitTableId);
                        markedResult.addDebitMarked(NettingMarkedTrans::construct(
                            this.getTableId(_debitTableId, debitRecord),
                            this.getRecId(_debitTableId, debitRecord),
                            debitRecord.getFieldValue(AmountCurFieldName)));
                        debitAmountCounted += abs(debitRecord.getFieldValue(AmountCurFieldName));
                    }
                }
            }
        }
        while (creditAmountCounted <= debitAmountCounted && creditHasMore)
        {
            if (!creditUsed)
            {
                creditAmountCounted += abs(creditRecordPeeked.getFieldValue(AmountCurFieldName));
                markedResult.addCreditMarked(NettingMarkedTrans::construct(
                    this.getTableId(_creditTableId, creditRecordPeeked),
                    this.getRecId(_creditTableId, creditRecordPeeked),
                    creditRecordPeeked.getFieldValue(AmountCurFieldName)));
            }
            else
            {
                changecompany(_creditCompany)
                {
                    creditHasMore = creditQueryRun.next();
                    if (creditHasMore)
                    {
                        Common creditRecord = creditQueryRun.get(_creditTableId);
                        markedResult.addCreditMarked(NettingMarkedTrans::construct(
                            this.getTableId(_creditTableId, creditRecord),
                            this.getRecId(_creditTableId, creditRecord),
                            creditRecord.getFieldValue(AmountCurFieldName)));
                        creditAmountCounted += abs(creditRecord.getFieldValue(AmountCurFieldName));
                    }
                }
            }
        }
        return markedResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>