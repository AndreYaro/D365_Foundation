<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineType_ApplicationSuite_Extension</c> class is used for extension of the <c>SalesLineType</c> class functionality.
/// </summary>
[ExtensionOf(classStr(SalesLineType))]
public final class SalesLineType_ApplicationSuite_Extension
{
    private boolean isDeliveryInformationStockSalesLineChanged;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable _salesTable, boolean _ignoreInventDim)
    {
        next initFromSalesTable(_salesTable, _ignoreInventDim);

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            this.parmSalesLine().GoodsForFree_IT = SalesTable::invoiceForFree_IT(_salesTable);
        }

        if (TaxParameters::isCustomsEnable_IN())
        {
            this.parmSalesLine().EXIMPorts_IN = _salesTable.EXIMPorts_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLine</Name>
				<Source><![CDATA[
    public AxPurchLine syncPurchLine(SalesLine _salesLine, PurchLine _purchLine, boolean _create)
    {
        AxPurchLine axPurchLine;
        boolean create = _create;

        axPurchLine = next syncPurchLine(_salesLine,_purchLine,_create);

        if (!create &&  axPurchLine.purchLine().RecId == 0)
        {
            create = true;
        }
        
        PurchParameters purchParameters = PurchParameters::find();

        if (!SalesPurchSyncDeliveryInfoFeature::instance().isEnabled()
            || purchParameters.isDeliveryInformationUpdateAllowed(_salesLine.DeliveryType))
        {
            if (_salesLine.fieldChanged(fieldNum(SalesLine, DlvTerm)))
            {
                axPurchLine.parmDlvTerm(salesLine.DlvTerm);
            }

            if (_salesLine.fieldChanged(fieldNum(SalesLine, DlvMode)))
            {
                axPurchLine.parmDlvMode(salesLine.DlvMode);
            }
        }

        if (SalesSyncPurchExternalInfoFlight::instance().isEnabled())
        {
            if (axPurchLine.purchLine().purchTable().mustTransferItemNameForIntercompany())
            {
                if (_create || _salesLine.fieldChanged(fieldNum(SalesLine, ExternalItemId)))
                {
                    axPurchLine.parmExternalItemId(_salesLine.ExternalItemId);
                }

                if (_create || _salesLine.fieldChanged(fieldNum(SalesLine, Name)))
                {
                    axPurchLine.parmName(_salesLine.Name);
                }
            }
        }
        else
        {
            if (_purchLine.purchTable().mustTransferItemNameForIntercompany())
            {
                if (_create || _salesLine.fieldChanged(fieldNum(SalesLine, ExternalItemId)))
                {
                    axPurchLine.parmExternalItemId(_salesLine.ExternalItemId);
                }

                if (_create || _salesLine.fieldChanged(fieldNum(SalesLine, Name)))
                {
                    axPurchLine.parmName(_salesLine.Name);
                }
            }
        }

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveStockPurchaseLine</Name>
				<Source><![CDATA[
    internal void saveStockPurchaseLine(SalesLine _salesLine, boolean _create = false)
    {
        if (this.isPurchaseLineUpdateAllowed(_salesLine))
        {
            return;
        }

        if (_salesLine.InventRefTransId
            && this.isStockPurchaseLineUpdateAllowed())
        {
            AxPurchLine axPurchLine = this.syncStockPurchLine(_salesLine, null,_create);

            if (this.isDeliveryInformationStockSalesLineChanged())
            {
                axPurchLine.parmSkipUpdate(InterCompanySkipUpdate::Internal);
                axPurchLine.validateInput(true);
                axPurchLine.save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockPurchaseLineUpdateAllowed</Name>
				<Source><![CDATA[
    protected boolean isStockPurchaseLineUpdateAllowed()
    {
        return PurchParameters::find().DeliveryInfoSyncOnUpdateStock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryInformationStockSalesLineChanged</Name>
				<Source><![CDATA[
    protected boolean isDeliveryInformationStockSalesLineChanged()
    {
        return isDeliveryInformationStockSalesLineChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncStockPurchLine</Name>
				<Source><![CDATA[
    protected AxPurchLine syncStockPurchLine(SalesLine _salesLine, PurchLine _purchLine, boolean _create)
    {
        AxPurchLine axPurchLine = this.constructAxPurchLine(_salesLine, _purchLine);

        PurchParameters purchParameters = PurchParameters::find();
        isDeliveryInformationStockSalesLineChanged = false;

        if (purchParameters.isDeliveryInformationUpdateAllowed(_salesLine.DeliveryType))
        {
            if (_salesLine.fieldChanged(fieldNum(SalesLine, DlvTerm)))
            {
                axPurchLine.parmDlvTerm(salesLine.DlvTerm);
                isDeliveryInformationStockSalesLineChanged = true;
            }

            if (_salesLine.fieldChanged(fieldNum(SalesLine, DlvMode)))
            {
                axPurchLine.parmDlvMode(salesLine.DlvMode);
                isDeliveryInformationStockSalesLineChanged = true;
            }
        }

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable, boolean _resetPrice, AgreementHeaderRecId _matchingAgreement, boolean _executeOnlyIfProductIsFullySpecified)
    {
        next initFromInventTable(_inventTable, _resetPrice, _matchingAgreement, _executeOnlyIfProductIsFullySpecified);

        if (TaxParameters::isCustomsEnable_IN())
        {
            this.parmSalesLine().EximProductGroup_IN = _inventTable.EximProductGroupTable_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesForFree_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account for posting transactions related to goods delivered for free.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    /// <returns>The <c>LedgerDimensionDefaultAccount</c> set for posting.</returns>
    public LedgerDimensionDefaultAccount accountSalesForFree_IT(SalesLine _salesLine = this.parmSalesLine())
    {
        InventTable inventTable = _salesLine.inventTable();

        return InventPosting::accountItemLedgerDimensionFromParameters(
            InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
                InventAccountType::SalesForFree_IT,
                salesLine.ItemId,
                inventTable.itemGroupId(),
                salesLine.SalesCategory,
                salesLine.CustAccount,
                salesLine.CustGroup,
                salesLine.TaxGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(SalesLine _salesLineOrig)
    {
        next updated(_salesLineOrig);

        if (!CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            SalesLine salesLine = this.parmSalesLine();
            FreeNotesTable_IT::updateDocumentRef(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        next inserted();

        if (!CustFormletterParameters::find().AttachFreeNotesDirectly_IT)
        {
            if (this.parmSalesLine().DeliveryType == TradeLineDlvType::DropShip)
            {
                FreeNotesTable_IT::updateDocumentRef(this.parmSalesLine());
            }
            else
            {
                FreeNotesTable_IT::insertDocumentRef(this.parmSalesLine());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryAddress</Name>
				<Source><![CDATA[
    static void syncDeliveryAddress(
        SalesLine   _salesLine,
        AxPurchLine _axPurchLine,
        boolean     _directDelivery,
        boolean     _create)
    {
        next syncDeliveryAddress(
            _salesLine,
            _axPurchLine,
            _directDelivery,
            _create);

        if (BrazilParameters::isEnabled())
        {
            _axPurchLine.parmTaxServiceCode_BR(TaxServiceCode_BR::serviceCode_BR(_axPurchLine.purchLine()).ServiceCodeId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>