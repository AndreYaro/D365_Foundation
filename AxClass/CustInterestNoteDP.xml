<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestNoteDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
#define.parmIsEUR('EUR')
#define.parmIsCHF('CHF')
/// <summary>
/// The <c>CustInterestNoteDP</c> class is the report data provider class for the
/// <c>CustInterestNote</c> Microsoft SQL Server Reporting Services Report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustInterestNote)),
    SRSReportParameterAttribute(classStr(CustInterestNoteContract))
]
public class CustInterestNoteDP extends SrsReportDataProviderPreProcess
{
    CompanyInfo companyInfo;
    CustInterestNoteTmp custInterestNoteTmp;

    Map languageTextMap;

    PaymentStub giroType;
    PaymMoneyTransferSlip moneyTransferSlip;
    PaymMoneyTransferSlip_BE moneyTransferSlip_BE;
    PaymMoneyTransferSlip_CH moneyTransferSlip_CH;
    PaymMoneyTransferSlip_FI moneyTransferSlip_FI;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNo2_CH</Name>
				<Source><![CDATA[
    private str accountNo2_CH()
    {
        if (moneyTransferSlip_CH.ocr_AccountNo2())
        {
            return moneyTransferSlip_CH.ocr_AccountNo2() + '>';
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDecimals_CH</Name>
				<Source><![CDATA[
    private str amountDecimals_CH(CustInterestJour _custInterestJour)
    {
        if (moneyTransferSlip_CH.checkCurrency() && _custInterestJour.sumInterestAmountFee() >= 0)
        {
            return moneyTransferSlip_CH.invoiceAmountPenny();
        }
        return 'xx';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNoDecimals_CH</Name>
				<Source><![CDATA[
    private str amountNoDecimals_CH(CustInterestJour _custInterestJour)
    {
        if (moneyTransferSlip_CH.checkCurrency() && _custInterestJour.sumInterestAmountFee() >= 0)
        {
            return moneyTransferSlip_CH.invoiceAmountMST();
        }
        return strRep('x', 8);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_AccountNum_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank account number of the <c>PaymMoneyTransferSlip</c> class.
    /// </summary>
    /// <returns>
    ///     A String that contains the bank account number.
    /// </returns>
    protected str bankAccountTable_AccountNum_CH()
    {
        if (giroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountNum();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_Clearing_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank clearing code of the <c>PaymMoneyTransferSlip</c> class.
    /// </summary>
    /// <returns>
    ///     A String that contains the bank clearing code.
    /// </returns>
    protected str bankAccountTable_Clearing_CH()
    {
        if (giroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountTable().BankClearingCode;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroupIdName_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name value of the <c>BankAccountTable</c> table.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A record in the <c>CustInterestJour</c> table.
    /// </param>
    /// <returns>
    ///     The name value of the <c>BankAccountTable</c> table.
    /// </returns>
    protected Description bankGroupIdName_CH(CustInterestJour _custInterestJour)
    {
        if (giroType == PaymentStub::ESR_red_bank)
        {
            return BankAccountTable::find(_custInterestJour.paymentBankAccountId()).Name;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankZipCode_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the zipcode and city value of the <c>BankAccountTable</c> table.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A record in the <c>CustInterestJour</c> table.
    /// </param>
    /// <returns>
    ///     A String that contains the zipcode and city value of the <c>BankAccountTable</c> table.
    /// </returns>
    protected str bankZipCode_CH(CustInterestJour _custInterestJour)
    {
        LogisticsPostalAddress address;

        if (giroType == PaymentStub::ESR_red_bank)
        {
            address = BankAccountTable::find(_custInterestJour.paymentBankAccountId()).postalAddress();
            return address.ZipCode + ' ' + address.City;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>CompanyPaymId</c> value of the <c>BankAccountTable</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>CompanyPaymId</c> value of the <c>BankAccountTable</c> table.
    /// </returns>
    protected CompanyRegNum companyRegNum()
    {
        switch (giroType)
        {
            case PaymentStub::FIK752:
                return moneyTransferSlip.bankAccountTable().CompanyPaymId;
            default:
                return companyInfo.RegNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeISO_CH</Name>
				<Source><![CDATA[
    private CurrencyCodeISO currencyCodeISO_CH()
    {
        if (moneyTransferSlip_CH.parmIsEUR())
        {
            return #parmIsEUR;
        }
        else if (moneyTransferSlip_CH.parmIsCHF())
        {
            return #parmIsCHF;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyPhone</Name>
				<Source><![CDATA[
    private Phone getCompanyPhone()
    {
        Phone phone = companyInfo.phone();

        return phone ? phone : this.getDirPartyLocator(DirSystemECommunicationType::Phone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTelefax</Name>
				<Source><![CDATA[
    private TeleFax getCompanyTelefax()
    {
        TeleFax teleFax = companyInfo.teleFax();

        return teleFax ? teleFax : this.getDirPartyLocator(DirSystemECommunicationType::TeleFax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the temporary <c>CustInterestNoteTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data in the <c>CustInterestNoteTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr('CustInterestNoteTmp'))]
    public CustInterestNoteTmp getCustInterestNoteTmp()
    {
        select custInterestNoteTmp;
        return custInterestNoteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyLocator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the electronic communication address for the specified communication type.
    /// </summary>
    /// <param name="_dirSystemECommunicationType">
    ///    The communication type for which the communication address is required.
    /// </param>
    /// <returns>
    ///    The electronic communication address for the communication type specified.
    /// </returns>

    protected LogisticsElectronicAddressLocator getDirPartyLocator(DirSystemECommunicationType _dirSystemECommunicationType)
    {
        utcdatetime currentDateTime = DateTimeUtil::utcNow();

        return (select dirPartyContactInfoView
            where
                dirPartyContactInfoView.Party == companyInfo.RecId &&
                dirPartyContactInfoView.ValidFrom <= currentDateTime && dirPartyContactInfoView.ValidTo >= currentDateTime &&
                dirPartyContactInfoView.Type == enum2int(_dirSystemECommunicationType)).Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageTextRefCount</Name>
				<Source><![CDATA[
    private int getLanguageTextRefCount(Notes _languageText)
    {
        if (languageTextMap.exists(_languageText))
        {
            return languageTextMap.lookup(_languageText);
        }
        else if (_languageText)
        {
            languageTextMap.insert(_languageText, languageTextMap.elements() + 1);
            return languageTextMap.elements();
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes payment slips to use in Giro.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A record in the <c>CustInterestJour</c> table.
    /// </param>
    protected void initGiro(CustInterestJour _custInterestJour)
    {
        moneyTransferSlip = PaymMoneyTransferSlip::construct(giroType);

        moneyTransferSlip.init(giroType);

        this.populateMoneyTransferSlip(_custInterestJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMoneyTransferSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate payment slips to use in Giro.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A record in the <c>CustInterestJour</c> table.
    /// </param>
    protected void populateMoneyTransferSlip(CustInterestJour _custInterestJour)
    {
        switch (giroType)
        {
            case PaymentStub::ESR_orange:
            case PaymentStub::ESR_red_bank:
                moneyTransferSlip_CH = moneyTransferSlip;
                moneyTransferSlip_CH.initOCRLineInterest_CH(_custInterestJour);
                break;

            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                moneyTransferSlip_BE = new PaymMoneyTransferSlip_BE();
                break;

            case PaymentStub::Finnish:
                moneyTransferSlip_FI = new PaymMoneyTransferSlip_FI();
                moneyTransferSlip_FI.initOCRLine_FI();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTempTableForPaymentSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>CustInterestNoteTmp</c> table for different payment slips.
    /// </summary>
    /// <param name="_custInterestJour">
    ///    A record in the <c>CustInterestJour</c> table.
    /// </param>
    /// <param name="_custInterestTrans">
    ///    A record in the <c>CustInterestTrans</c> table.
    /// </param>
    protected void populateTempTableForPaymentSlip(CustInterestJour _custInterestJour, CustInterestTrans _custInterestTrans)
    {
        switch (giroType)
        {
            case PaymentStub::None:
                break;

            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                custInterestNoteTmp.PaymentId = moneyTransferSlip.paymentId( _custInterestJour.AccountNum, _custInterestTrans.Invoice,
                                                                strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
                custInterestNoteTmp.CompanyRegNum = this.companyRegNum();
                custInterestNoteTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInterestJour);
                custInterestNoteTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInterestJour);
                custInterestNoteTmp.OcrField = moneyTransferSlip.ocrField( _custInterestJour.AccountNum, _custInterestTrans.Invoice,
                                                                    strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
                CompanyInfoHelper::checkFICreditorIDEmpty(companyInfo.fiCreditorID_DK);
                custInterestNoteTmp.fiCreditorID_DK = companyInfo.fiCreditorID_DK;
                if (giroType == PaymentStub::FIK752 && _custInterestJour.CurrencyCode != 'DKK')
                {
                    custInterestNoteTmp.InfoMessage = "@SYS314488";
                    custInterestNoteTmp.GiroType = PaymentStub::FIK751;
                    info("@SYS343346");
                }
                break;

            case PaymentStub::BBS:
                custInterestNoteTmp.OcrField = this.ocrField( _custInterestJour);
                custInterestNoteTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInterestJour);
                custInterestNoteTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInterestJour);
                custInterestNoteTmp.AmountCheckId = moneyTransferSlip.amountCheckId(_custInterestJour.sumInterestAmountFee());
                break;

            case PaymentStub::ESR_red_bank:
                custInterestNoteTmp.BankGroupIdName_CH = this.bankGroupIdName_CH(_custInterestJour);
                custInterestNoteTmp.BankZipCode_CH = this.bankZipCode_CH(_custInterestJour);
                custInterestNoteTmp.Description_CH = "@SYS12128";
                custInterestNoteTmp.PaymentRef1_CH = moneyTransferSlip_CH.ocr_paymentRef1();
                custInterestNoteTmp.PaymentRef2_CH = moneyTransferSlip_CH.ocr_paymentRef2();
                custInterestNoteTmp.BankAccountTable_AccountNum_CH = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        moneyTransferSlip.bankAccountNum() : "@AccountsReceivable:FiveAsterisk";
                custInterestNoteTmp.BankAccountTable_Clearing_CH = moneyTransferSlip.bankAccountTable().RegistrationNum;
                custInterestNoteTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInterestJour);
                custInterestNoteTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInterestJour);
                custInterestNoteTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                custInterestNoteTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                custInterestNoteTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                custInterestNoteTmp.AccountNo2_CH = this.accountNo2_CH();
                custInterestNoteTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                break;

            case PaymentStub::ESR_orange:
                custInterestNoteTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInterestJour);
                custInterestNoteTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInterestJour);
                custInterestNoteTmp.CurrencyCodeISO_CH = this.currencyCodeISO_CH();
                custInterestNoteTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                custInterestNoteTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                custInterestNoteTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                custInterestNoteTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;

            case PaymentStub::Finnish:
                custInterestNoteTmp.AccountNum1_FI = moneyTransferSlip_FI.ocr_AccountNum1();
                custInterestNoteTmp.AccountNum2_FI = moneyTransferSlip_FI.ocr_AccountNum2();
                custInterestNoteTmp.AccountNum3_FI = moneyTransferSlip_FI.ocr_AccountNum3();
                custInterestNoteTmp.AccountNum4_FI = moneyTransferSlip_FI.ocr_AccountNum4();
                custInterestNoteTmp.AccountNum5_FI = moneyTransferSlip_FI.ocr_AccountNum5();
                custInterestNoteTmp.AccountNum6_FI = moneyTransferSlip_FI.ocr_AccountNum6();
                custInterestNoteTmp.InvoiceReferenceNumberFI = this.invoiceReferenceNumberFI(_custInterestTrans);
                custInterestNoteTmp.OcrLine_FI = moneyTransferSlip_FI.ocrLine(_custInterestJour.AccountNum,
                                                                    _custInterestJour.sumInterestAmountFee(),
                                                                    _custInterestTrans.DueDate);
                break;

            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                custInterestNoteTmp.PaymentReferenceBE = this.paymentReference(_custInterestJour);
                if (!custInterestNoteTmp.PaymentReferenceBE)
                {
                    custInterestNoteTmp.GiroType = PaymentStub::None;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableForPaymentSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>CustInterestNoteTmp</c> table for different payment slips.
    /// </summary>
    /// <param name="_custInterestJour">
    ///    A record in the <c>CustInterestJour</c> table.
    /// </param>
    /// <param name="_custInterestTrans">
    ///    A record in the <c>CustInterestTrans</c> table.
    /// </param>

    public void initTempTableForPaymentSlip(CustInterestJour _custInterestJour, CustInterestTrans _custInterestTrans)
    {
        giroType = _custInterestJour.GiroType;
        this.initGiro(_custInterestJour);
        custInterestNoteTmp.InfoMessage = '';
        custInterestNoteTmp.GiroType = giroType;

        this.populateTempTableForPaymentSlip(_custInterestJour, _custInterestTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableForPL</Name>
				<Source><![CDATA[
    private void initTempTableForPL(CustInterestJour _custInterestJour, CustInterestTrans _custInterestTrans)
    {
        custInterestNoteTmp.TaxInterestDays = _custInterestTrans.TaxInterestDays_PL;
        custInterestNoteTmp.TaxInterestAmount = _custInterestTrans.TaxInterestAmount_PL;
        custInterestNoteTmp.InterestNoteDate = _custInterestJour.NoteIssueDate_PL ? _custInterestJour.NoteIssueDate_PL :
                                                _custInterestJour.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>CustInterestNoteTmp</c> table from the data in the <c>CompanyInfo</c> table.
    /// </summary>
    /// <param name="_custInterestJour">
    ///    A record in the <c>CustInterestJour</c> table.
    /// </param>

    public void initTempTableFromCompanyInfo(custInterestJour _custInterestJour = null)
    {
        custInterestNoteTmp.PostalAddress = CustInterestNoteDP::getCompanyPostalAddress(companyInfo.RecId, _custInterestJour);
        custInterestNoteTmp.RegNum = companyInfo.CoRegNum;
        custInterestNoteTmp.CompanyVATNum = TaxRegistration::getTaxRegNumFromJournal(
            _custInterestJour.TableId,
            _custInterestJour.RecId,
            _custInterestJour.ToDate);
        custInterestNoteTmp.ShowCompanyVATNum = CustFormletterParameters::find().PrintInterestNoteVATNum;
        custInterestNoteTmp.CompanyPhone = this.getCompanyPhone();
        custInterestNoteTmp.CompanyFax = this.getCompanyTelefax();
        custInterestNoteTmp.CompanyName = companyInfo.name();
        custInterestNoteTmp.Image = CompanyImage::find(companyInfo.DataAreaId, tableNum(CompanyInfo), companyInfo.RecId).Image;
        custInterestNoteTmp.Giro = companyInfo.Giro;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCustInterestJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>CustInterestNoteTmp</c> table by using the data in the <c>CustInterestJour</c>
    /// table.
    /// </summary>
    /// <param name="_custInterestJour">
    /// A record in the <c>CustInterestJour</c> table.
    /// </param>
    public void initTempTableFromCustInterestJour(CustInterestJour _custInterestJour)
    {
        custInterestNoteTmp.AccountNum = _custInterestJour.AccountNum;
        custInterestNoteTmp.InterestNoteDate = _custInterestJour.ToDate;
        custInterestNoteTmp.InterestNote = _custInterestJour.InterestNote;
        custInterestNoteTmp.LastInterestNoteDate = _custInterestJour.datePreviousInterestNote();
        custInterestNoteTmp.Status = _custInterestJour.Status;
        custInterestNoteTmp.Printed = _custInterestJour.Printed;
        custInterestNoteTmp.InterestFee = _custInterestJour.Fee;
        custInterestNoteTmp.TaxAmountTotal = _custInterestJour.TaxAmount;
        custInterestNoteTmp.FeeLanguageText = _custInterestJour.Notes;
        custInterestNoteTmp.InvoiceAmount = _custInterestJour.sumInterestAmountFee();
        custInterestNoteTmp.CustCurrencyCode = _custInterestJour.CurrencyCode;
        custInterestNoteTmp.ColumnHeading = strFmt(SysLabel::labelId2String(literalStr("@SYS53547"), _custInterestJour.LanguageId), _custInterestJour.CurrencyCode);
        custInterestNoteTmp.FormLetterRemarksTxt = FormLetterRemarks::find(_custInterestJour.LanguageId, FormTextType::CustInterestNote).Txt;

        if (_custInterestJour.CustBillingClassification)
        {
            custInterestNoteTmp.BillingClassification = CustBillingClassification::find(_custInterestJour.CustBillingClassification).BillingClassification;
        }
        else
        {
            custInterestNoteTmp.BillingClassification = '';
        }

        if (CompanyInfo::find().PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            custInterestNoteTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                 _custInterestJour.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCustInterestTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>CustInterestNoteTmp</c> table by using the data in the
    /// <c>CustInterestTrans</c> table.
    /// </summary>
    /// <param name="_custInterestTrans">
    /// A record in the <c>CustInterestTrans</c> table.
    /// </param>
    /// <param name="_isLastRecord">
    /// A Boolean value that indicates whether the interest transaction is the last transaction of an
    /// Interest note.
    /// </param>
    public void initTempTableFromCustInterestTrans(CustInterestTrans _custInterestTrans, boolean _isLastRecord)
    {
        custInterestNoteTmp.InterestPercent = _custInterestTrans.InterestPercent;
        custInterestNoteTmp.RemainAmount = _custInterestTrans.InvoiceAmount;
        custInterestNoteTmp.InterestAmount = _custInterestTrans.InterestAmount;
        custInterestNoteTmp.InterestFromDate = _custInterestTrans.CalcFrom;
        custInterestNoteTmp.InterestToDate = _custInterestTrans.interestToDate();
        custInterestNoteTmp.InterestDays = _custInterestTrans.InterestDays;
        custInterestNoteTmp.TransDate = _custInterestTrans.TransDate;
        custInterestNoteTmp.DueDate = _custInterestTrans.DueDate;
        custInterestNoteTmp.Invoice = _custInterestTrans.Invoice;
        custInterestNoteTmp.TransTxt = _custInterestTrans.Txt;
        custInterestNoteTmp.InterestLanguageText = _custInterestTrans.Notes;
        custInterestNoteTmp.InterestAmountInCurr = _custInterestTrans.custInterestJourInterestAmount();
        custInterestNoteTmp.CurrencyCode = _custInterestTrans.CurrencyCode;

        if (CustParameters::isBillingClassificationEnabled())
        {
            if (!custInterestNoteTmp.BillingClassification && !languageTextMap.exists(_custInterestTrans.Notes))
            {
                custInterestNoteTmp.InterestLanguageText = _custInterestTrans.Notes;
            }

            custInterestNoteTmp.BalanceAmount = _custInterestTrans.RemainAmount;
            custInterestNoteTmp.RefCount = this.getLanguageTextRefCount(_custInterestTrans.Notes);
        }
        else
        {
            if (!languageTextMap.exists(_custInterestTrans.Notes))
            {
                custInterestNoteTmp.InterestLanguageText = _custInterestTrans.Notes;
            }

            custInterestNoteTmp.RefCount = this.getLanguageTextRefCount(_custInterestTrans.Notes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCustInterestTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>CustInterestNoteTmp</c> temporary table from the data in the <c>CustInterestTransLine</c> table.
    /// </summary>
    /// <param name="_custInterestTransLine">
    /// The <c>CustInterestTransLine</c> table record.
    /// </param>
    /// <param name="_isLastRecord">
    /// A boolean value to indicate that the interest transaction is the last transaction of Interest note.
    /// </param>
    /// <param name="_custTransOpenRecId">
    /// The ID of the <c>CustTransOpen</c> record to use.
    /// </param>
    public void initTempTableFromCustInterestTransLine(
        CustInterestTransLine _custInterestTransLine,
        boolean _isLastRecord,
        CustTransOpenRefRecId _custTransOpenRecId = 0)
    {
        CustInterestTrans custInterestTrans;
        CustInterestJour custInterestJour;

        custInterestTrans = CustInterestTrans::find(_custInterestTransLine.InterestNote, _custInterestTransLine.CustInterestTrans);
        custInterestJour = custInterestTrans.custInterestJour();

        custInterestNoteTmp.BalanceAmount = _custInterestTransLine.RemainAmount;
        custInterestNoteTmp.InterestPercent = _custInterestTransLine.InterestPercentage;
        custInterestNoteTmp.RemainAmount = _custInterestTransLine.LineAmount;
        custInterestNoteTmp.InterestAmount = _custInterestTransLine.InterestAmount;
        custInterestNoteTmp.InterestFromDate = _custInterestTransLine.CalcFrom;
        custInterestNoteTmp.InterestDays = _custInterestTransLine.InterestDays;
        custInterestNoteTmp.Invoice = strFmt('%1_%2',_custInterestTransLine.Invoice, _custInterestTransLine.LineNum);
        custInterestNoteTmp.TransTxt = _custInterestTransLine.TransactionTxt;

        custInterestNoteTmp.CurrencyCode = custInterestTrans.CurrencyCode;
        custInterestNoteTmp.LineNum = _custInterestTransLine.LineNum;
        custInterestNoteTmp.ColumnHeading = strFmt("@SYS53547", custInterestTrans.CurrencyCode);
        custInterestNoteTmp.InterestAmountInCurr = 0;
        custInterestNoteTmp.LineInterestAmountInCurr = CurrencyExchangeHelper::curAmount2CurAmount(_custInterestTransLine.InterestAmount, custInterestTrans.CurrencyCode, custInterestJour.CurrencyCode, custInterestJour.ToDate);

        if (!languageTextMap.exists(_custInterestTransLine.Notes))
        {
            custInterestNoteTmp.InterestLanguageText = _custInterestTransLine.Notes;
        }

        custInterestNoteTmp.InterestToDate = _custInterestTransLine.CalcFrom + _custInterestTransLine.InterestDays - 1;
        custInterestNoteTmp.RefCount = this.getLanguageTextRefCount(_custInterestTransLine.Notes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>CustInterestNoteTmp</c> table by using the data in the <c>CustTable</c>
    /// table.
    /// </summary>
    /// <param name="_custTable">
    /// A record in the <c>CustTable</c> table.
    /// </param>
    public void initTempTableFromCustTable(CustTable _custTable)
    {
        custInterestNoteTmp.CustomerName = _custTable.name();
        custInterestNoteTmp.CustomerAddress = CustInterestNoteDP::getCustomerPostalAddress(_custTable.Party);
        custInterestNoteTmp.PaymentTerms = _custTable.PaymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFeeTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts tax records in the temporary <c>CustInterestNoteTmp</c> table.
    /// </summary>
    /// <param name="_custInterestJour">
    /// A record in the <c>CustInterestJour</c> table.
    /// </param>
    protected void insertFeeTaxTransactions(CustInterestJour _custInterestJour)
    {
        TaxCustInterestNote taxCustInterestNote;
        TaxSpec taxSpec;
        TaxSpecPrintLevel taxSpecPrintLevel = CustFormletterParameters::find().TaxSpecPrintLevel;

        if (taxSpecPrintLevel != TaxSpecPrintLevel::None && (_custInterestJour.TaxWriteCode || _custInterestJour.TaxAmount))
        {
            taxCustInterestNote = CustInterestNoteFormLetterController::calcTax(_custInterestJour.InterestNote, false);
            taxSpec = TaxSpec::construct('', naDate(), _custInterestJour.RecId);
            taxSpec.parmLanguageId(_custInterestJour.LanguageId);
            taxSpec.setTmpTaxWorkTrans(taxCustInterestNote.tmpTaxWorkTrans());

            while (taxSpec.parmTaxSpec())
            {
                custInterestNoteTmp.InterestNote = _custInterestJour.InterestNote;
                custInterestNoteTmp.TaxAmountTotal = _custInterestJour.TaxAmount;
                custInterestNoteTmp.TaxWriteCode = taxSpec.taxWriteCode();
                custInterestNoteTmp.TaxCode = taxSpec.taxCode();
                custInterestNoteTmp.TaxBaseAmount = -taxSpec.taxBaseAmount();
                custInterestNoteTmp.TaxBaseQty = -taxSpec.taxBaseQty();
                custInterestNoteTmp.TaxAmount = -taxSpec.taxAmount();
                custInterestNoteTmp.TaxAmountMST = -taxSpec.taxAmountMST();
                custInterestNoteTmp.TaxExemptDescription = taxSpec.taxExemptDescription();

                if (taxSpecPrintLevel == TaxSpecPrintLevel::Currency || _custInterestJour.CurrencyCode == Ledger::accountingCurrency())
                {
                    custInterestNoteTmp.ShowTaxAmountMST = NoYes::No;
                }
                else
                {
                    custInterestNoteTmp.ShowTaxAmountMST = NoYes::Yes;
                }
                custInterestNoteTmp.IsTaxLine = NoYes::Yes;
                custInterestNoteTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountDecimals(CustInterestJour _custInterestJour)
    {
        AmountCur amount = _custInterestJour.sumInterestAmountFee();

        if (amount >= 0)
        {
            return strReplace(num2str(frac(amount) * 100, 2, 0, 0, 0), ' ', '0');
        }
        return 'XX';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountNoDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountNoDecimals(CustInterestJour _custInterestJour)
    {
        AmountCur amount = _custInterestJour.sumInterestAmountFee();

        if (amount >= 0)
        {
            return num2str(trunc(amount), 1, 0, 0, 0);
        }
        return strRep('X', 6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceReferenceNumberFI</Name>
				<Source><![CDATA[
    private ReferenceNumber_FI invoiceReferenceNumberFI(CustInterestTrans _custInterestTrans)
    {
        CustPaymReference refNumber = (select firstonly custTrans order by RecId where custTrans.Invoice == _custInterestTrans.Invoice).PaymReference;
        int refNumberLength = strLen(refNumber);

        // Add spaces for report formatting
        if (refNumberLength > 15)
        {
            return subStr(refNumber, 1, refNumberLength - 15) + ' ' +
                subStr(refNumber, refNumberLength - 14, 5) + ' ' +
                subStr(refNumber, refNumberLength - 9, 5) + ' ' +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 10)
        {
            return subStr(refNumber, 1, refNumberLength - 10) + ' ' +
                subStr(refNumber, refNumberLength - 9, 5) + ' ' +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 5)
        {
            return subStr(refNumber, 1, refNumberLength - 5) + ' ' +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else
        {
            return refNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    private str ocrField(CustInterestJour _custInterestJour)
    {
        if (_custInterestJour.PaymId)
        {
            return ' ' + _custInterestJour.PaymId;
        }
        moneyTransferSlip.parmNumSeqCode(NumberSequenceTable::find(_custInterestJour.NumberSequenceTable).NumberSequence);
        return moneyTransferSlip.ocrField(_custInterestJour.AccountNum, _custInterestJour.InterestNote,
                strLen(int2str(NumberSeq::highest(_custInterestJour.NumberSequenceTable))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentId2_PaymentId3_CH</Name>
				<Source><![CDATA[
    private str paymentId2_PaymentId3_CH()
    {
        return moneyTransferSlip_CH.ocr_PaymentId2() + ' ' + moneyTransferSlip_CH.ocr_PaymentId3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReference</Name>
				<Source><![CDATA[
    private PaymReference paymentReference(CustInterestJour _custInterestJour)
    {
        CustInterestTrans custInterestTransPayment;

        if (moneyTransferSlip_BE)
        {
            select firstonly RecId, Invoice
                from custInterestTransPayment
                where custInterestTransPayment.InterestNote == _custInterestJour.InterestNote &&
                      custInterestTransPayment.InterestCalculate;

            return moneyTransferSlip_BE.paymentIdReport(custInterestTransPayment.RecId ? custInterestTransPayment.Invoice : '', giroType);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubDueDate</Name>
				<Source><![CDATA[
    private str paymentStubDueDate(CustInvoiceJour _custInvoiceJour)
    {
        if (!_custInvoiceJour.creditNote() && !_custInvoiceJour.PaymentSched)
        {
            return strFmt('%1 %2', "@SYS21703", date2str(_custInvoiceJour.DueDate,-1,-1,-1,-1,-1,-1,DateFlags::FormatAll));
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubInvoiceId</Name>
				<Source><![CDATA[
    private str paymentStubInvoiceId(CustInvoiceJour _custInvoiceJour)
    {
        if (!_custInvoiceJour.creditNote())
        {
            return strFmt('%1: %2', "@SYS12128", _custInvoiceJour.InvoiceId);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the Microsoft SQL Server Reporting Services report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// Reporting Services at runtime. The method should compute data and populate the data tables that
    /// will be returned to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        CustInterestNoteContract contract = this.parmDataContract() as CustInterestNoteContract;
        CustInterestJour custInterestJour = CustInterestJour::findRecId(contract.parmRecordId());
        CustInterestTrans custInterestTrans;
        CustTransOpen custTransOpen;
        int64 totalRecords;
        int64 recordsCounter;

        boolean isPublicSectorScenario = false;
        NoYes inclTransWithNoBillingClass;
        List billingClassificationLocal;
        Map custInterestTransRecIdMap = new Map(Types::Int64, Types::Integer);
        CustInterestTransLine custInterestTransLine;

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        custInterestNoteTmp.setConnection(this.parmUserConnection());

        companyInfo = CompanyInfo::find();

        languageTextMap = new Map(Types::String, Types::Integer);

        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification());

        if (isPublicSectorScenario)
        {
            billingClassificationLocal = contract.parmBillingClassification();
            inclTransWithNoBillingClass = contract.parmInclTransWithNoBillingClass();
        }

        // Count # of transactions we are printing
        totalRecords =
                (select count(RecId)
                    from custInterestTrans
                    where custInterestTrans.InterestNote == custInterestJour.InterestNote &&
                          custInterestTrans.InterestCalculate == NoYes::Yes).RecId;

        this.initTempTableFromCompanyInfo(custInterestJour);
        this.initTempTableFromCustTable(CustTable::find(custInterestJour.AccountNum));
        this.insertFeeTaxTransactions(custInterestJour);
        this.initTempTableFromCustInterestJour(custInterestJour);

        this.featureRunForPaymentSlip(custInterestJour);

        while select custInterestTrans
            order by custInterestTrans.Voucher, custInterestTrans.CalcFrom
            where custInterestTrans.InterestNote == custInterestJour.InterestNote &&
                  custInterestTrans.InterestCalculate == NoYes::Yes
        {
            recordsCounter++;

            custInterestNoteTmp.CustInterestTransLineNum = custInterestTrans.LineNum;
            custInterestNoteTmp.IsTaxLine = NoYes::No;

            this.initTempTableForPaymentSlip(custInterestJour, custInterestTrans);
            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                this.initTempTableForPL(custInterestJour, custInterestTrans);
            }
            // </GEEPL>
            this.initTempTableFromCustInterestTrans(custInterestTrans, totalRecords == recordsCounter);

            // GIRO: Remove this block of code when GIRO no longer prints as a separate report
            if (GiroReportController::needGiroReport(custInterestNoteTmp.GiroType))
            {
                GiroReportTmp::populate(this.parmUserConnection(), custInterestNoteTmp);
                custInterestNoteTmp.GiroType = PaymentStub::None;
            }

            if (isPublicSectorScenario)
            {
                select firstOnly RecId
                    from custTransOpen
                    where custTransOpen.RefRecId == custInterestTrans.CustTransId &&
                        custTransOpen.DueDate == custInterestTrans.DueDate;

                if (!custInterestTransRecIdMap.exists(custInterestTrans.RecId))
                {
                    custInterestTransRecIdMap.insert(custInterestTrans.RecId, 1);
                    custInterestNoteTmp.insert();
                }

                if (billingClassificationLocal || inclTransWithNoBillingClass)
                {
                    while select custInterestTransLine
                        where custInterestTransLine.CustInterestTrans == custInterestTrans.RecId
                            && custInterestTransLine.InterestNote == custInterestTrans.InterestNote
                    {
                        this.initTempTableFromCustInterestTransLine(custInterestTransLine, totalRecords == recordsCounter, custTransOpen.RecId);
                        custInterestNoteTmp.insert();
                        custInterestNoteTmp.LineNum = 0;
                    }
                }
            }
            else
            {
                custInterestNoteTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureRunForPaymentSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Feature execution for different payment slips.
    /// </summary>
    /// <param name = "_custInterestJour">
    ///     A record in the <c>CustInterestJour</c> table.
    /// </param>
    protected void featureRunForPaymentSlip(CustInterestJour _custInterestJour)
    {
        switch (_custInterestJour.GiroType)
        {
            case PaymentStub::ESR_red_bank:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00007, funcName());
                break;
            case PaymentStub::ESR_orange:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00008, funcName());
                break;
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00007, funcName());
                break;
            case PaymentStub::BBS:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00004, funcName());
                break;
            case PaymentStub::Finnish:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00002, funcName());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyPostalAddress</Name>
				<Source><![CDATA[
    private static Addressing getCompanyPostalAddress(DirPartyRecId _companyParty, custInterestJour _custInterestJour)
    {
        CustTable custTable = CustTable::find(_custInterestJour.AccountNum);

        //Gets address based on role type, if not there, then gets address from Dirparty table
        Addressing addressing = DirUtility::replaceAddressTokenLanguage(DirParty::findPostalAddressByRole(_companyParty, LogisticsLocationRoleType::Business), custTable.languageId());

        if (addressing)
        {
            return addressing;
        }

        return DirUtility::replaceAddressTokenLanguage(DirParty::primaryPostalAddress(_companyParty), custTable.languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerPostalAddress</Name>
				<Source><![CDATA[
    private static Addressing getCustomerPostalAddress(DirPartyRecId _customerParty)
    {
        CustTable custTable = CustTable::findByPartyRecId(_customerParty);

        //Gets address based on role type, if not there, then gets address from Dirparty table
        Addressing addressing = DirUtility::replaceAddressTokenLanguage(DirParty::findPostalAddressByRole(_customerParty, LogisticsLocationRoleType::Statement), custTable.languageId());

        if (addressing)
        {
            return addressing;
        }

        addressing = DirUtility::replaceAddressTokenLanguage(DirParty::findPostalAddressByRole(_customerParty, LogisticsLocationRoleType::Invoice), custTable.languageId());
        if (addressing)
        {
            return addressing;
        }

        return DirUtility::replaceAddressTokenLanguage(DirParty::primaryPostalAddress(_customerParty), custTable.languageId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>