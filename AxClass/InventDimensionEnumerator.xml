<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimensionEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimensionEnumerator</c> class provides an enumerator for the <c>InventDimension</c> and its sub-classes.
/// </summary>
public class InventDimensionEnumerator implements Enumerator
{
    ListEnumerator inventoryDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current <c>InventDimension</c> class instance in the collection.
    /// </summary>
    /// <returns>
    /// The current inventory dimension.
    /// </returns>
    [Hookable(false)]
    public anytype current()
    {
        return inventoryDimensions.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current inventory dimension field identifier.
    /// </summary>
    /// <returns>The <c>FieldId</c> of the current inventory dimension in <c>InventDim</c> table.</returns>
    [Hookable(false)]
    public FieldId currentInventDimFieldId()
    {
        InventDimension current = this.current();

        return current.parmInventDimFieldId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDimParmFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current inventory dimension flag field identifier.
    /// </summary>
    /// <returns>The <c>FieldId</c> of the current inventory dimension flag in <c>InventDimParm</c> table.</returns>
    [Hookable(false)]
    public FieldId currentInventDimParmFieldId()
    {
        InventDimension current = this.current();

        return current.parmInventDimParmFieldId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to next element in the collection.
    /// </summary>
    /// <returns>
    /// true if the next element occurs in the collection; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean moveNext()
    {
        return inventoryDimensions.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the enumerator to point to the first collection element again.
    /// </summary>
    [Hookable(false)]
    public void reset()
    {
        inventoryDimensions.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str definitionString()
    {
        return inventoryDimensions.definitionString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected static InventDimensionEnumerator construct()
    {
        return new InventDimensionEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>InventDimensionEnumerator</c> class.
    /// </summary>
    /// <param name="_inventDimList">
    /// A list of inventory dimensions.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventDimensionEnumerator</c> class.
    /// </returns>
    [Hookable(false)]
    static public InventDimensionEnumerator newEnumerator(List _inventDimList)
    {
        InventDimensionEnumerator enumerator = InventDimensionEnumerator::construct();
        enumerator.inventoryDimensions = _inventDimList.getEnumerator();
        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>