<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStandardVarianceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdStandardVarianceList</c> class updates the standard variances of a production order.
/// </summary>
/// <remarks>
///    Posting is handled by inventory movement.
/// </remarks>
public class ProdStandardVarianceList
{
    ProdTable                   prodTable;
    ProdQty                     prodQty;
    InventItemPrice             inventItemPrice;
    InventCostTransVarianceList inventCostTransVarianceList;
    internal ProdTableJour      financialProdTableJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVarianceToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a calculated production variance to the list of production variances.
    /// </summary>
    /// <param name="_inventCostLevel">
    ///    The level of calculation.
    /// </param>
    /// <param name="_costGroupId">
    ///    The cost group ID.
    /// </param>
    /// <param name="_split">
    ///    A split that indicates whether the variance is further split.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The financial dimensions to use when posting.
    /// </param>
    /// <param name="_varianceType">
    ///    The type of variance.
    /// </param>
    /// <param name="_variance">
    ///    The variance amount.
    /// </param>
    protected void addVarianceToList(
        InventCostLevel         _inventCostLevel,
        CostGroupId             _costGroupId,
        NoYes                   _split,
        DimensionDefault        _defaultDimension,
        InventCostVarianceType  _varianceType,
        CostAmount              _variance)
    {
        InventCostTransVariance inventCostTransVariance;

        inventCostTransVariance.Level           = _inventCostLevel;
        inventCostTransVariance.CostGroupId     = _costGroupId;
        inventCostTransVariance.Split           = _split;
        inventCostTransVariance.VarianceType    = _varianceType;
        inventCostTransVariance.DefaultDimension = inventCostTransVariance.copyDimension(_defaultDimension);

        inventCostTransVarianceList.find(inventCostTransVariance);

        if (prodQty)
        {
            inventCostTransVariance.CostAmount += _variance / prodQty;
        }

        inventCostTransVarianceList.insert(inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProdStandardVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run a calculation on the standard variance object.
    /// </summary>
    /// <param name="_prodStandardVariance">A the standard variance object.</param>
    /// <returns>true if the calculation was good; otherwise, false.</returns>
    protected boolean calcProdStandardVariance(ProdStandardVariance_Prod _prodStandardVariance)
    {
        return _prodStandardVariance.calc(prodTable.ProdId,
                                        ProdTransRefType::Production,
                                        prodTable.CollectRefLevel,
                                        prodTable.CollectRefProdId,
                                        prodTable.RealDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructProdStandardVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProdStandardVariance_Prod</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ProdStandardVariance_Prod</c> class.
    /// </returns>
    protected ProdStandardVariance_Prod constructProdStandardVariance()
    {
        if (!prodTable)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ProdStandardVariance::construct(ProdTransRefType::Production);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a list of <c>InventCostTransVariances</c> records.
    /// </summary>
    protected void init()
    {
        inventCostTransVarianceList = InventCostTransVarianceList::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostTransVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes the list of calculated production variances.
    /// </summary>
    /// <returns>
    ///    The <c>InventCostTransVarianceList</c> that holds <c>InventCostVarianceTrans</c> records that
    ///    represent the individual variances.
    /// </returns>
    public InventCostTransVarianceList inventCostTransVarianceList()
    {
        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lot Id of the transaction.
    /// </summary>
    /// <returns>
    /// The lot Id of the transaction.
    /// </returns>
    protected InventTransId inventTransId()
    {
        return prodTable.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadHistoricalVariances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves calculated variances.
    /// </summary>
    /// <remarks>
    ///    This method applies to inventory adjustments after the initial variance calculation.
    /// </remarks>
    protected void loadHistoricalVariances()
    {
        InventCostTrans         inventCostTrans;
        InventCostTransVariance inventCostTransVariance;

        while select TableId from inventCostTrans
            where inventCostTrans.InventTransId ==
                                                  this.inventTransId()
        join Level, CostGroupId, Split, DefaultDimension, VarianceType, CostAmount from inventCostTransVariance
            where inventCostTransVariance.InventCostTransRefRecId == inventCostTrans.RecId
        {
            this.addVarianceToList(inventCostTransVariance.Level,
                                   inventCostTransVariance.CostGroupId,
                                   inventCostTransVariance.Split,
                                   inventCostTransVariance.DefaultDimension,
                                   inventCostTransVariance.VarianceType,
                                   -inventCostTransVariance.CostAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPrice</Name>
				<Source><![CDATA[
    public InventItemPrice parmInventItemPrice(InventItemPrice _inventItemPrice = inventItemPrice)
    {
        inventItemPrice = _inventItemPrice;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdQty</Name>
				<Source><![CDATA[
    public ProdQty parmProdQty(ProdQty _prodQty = prodQty)
    {
        prodQty = _prodQty;

        return prodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTableJour</Name>
				<Source><![CDATA[
    internal ProdTableJour parmProdTableJour(ProdTableJour _prodTableJour = financialProdTableJour)
    {
        financialProdTableJour = _prodTableJour;

        return financialProdTableJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and distributes variances to update.
    /// </summary>
    /// <param name="_calledDuringEnding">
    /// A boolean flag indicating if the method is called during the ending of a production order.
    /// </param>
    /// <returns>
    /// Returns true if the method was able to calculate variances on the given reference.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The calculation has been called without knowing the prodcuction order to perform the calculation on.
    /// </exception>
    public boolean run(boolean  _calledDuringEnding = false)
    {
        #OCCRetryCount

        ProdStandardVariance_Prod prodStandardVariance = this.constructProdStandardVariance();
        prodStandardVariance.parmCalledDuringEnding(_calledDuringEnding);
        boolean ret = this.calcProdStandardVariance(prodStandardVariance);

        if (ret)
        {
            this.init();
            this.loadHistoricalVariances();

            TmpProdStandardVariance tmpProdStandardVarianceByDim = prodStandardVariance.variancesByDimension();
            while select tmpProdStandardVarianceByDim
            {
                if (tmpProdStandardVarianceByDim.LotSizeVariance || tmpProdStandardVarianceByDim.Split == NoYes::Yes)
                    this.addVarianceToList(tmpProdStandardVarianceByDim.InventCostLevel,
                                           tmpProdStandardVarianceByDim.CostGroupId,
                                           tmpProdStandardVarianceByDim.Split,
                                           tmpProdStandardVarianceByDim.DefaultDimension,
                                           InventCostVarianceType::LotSize,
                                           tmpProdStandardVarianceByDim.LotSizeVariance);

                if (tmpProdStandardVarianceByDim.CostVariance || tmpProdStandardVarianceByDim.Split == NoYes::Yes)
                    this.addVarianceToList(tmpProdStandardVarianceByDim.InventCostLevel,
                                           tmpProdStandardVarianceByDim.CostGroupId,
                                           tmpProdStandardVarianceByDim.Split,
                                           tmpProdStandardVarianceByDim.DefaultDimension,
                                           InventCostVarianceType::ProdPrice,
                                           tmpProdStandardVarianceByDim.CostVariance);

                if (tmpProdStandardVarianceByDim.QtyVariance || tmpProdStandardVarianceByDim.Split == NoYes::Yes)
                    this.addVarianceToList(tmpProdStandardVarianceByDim.InventCostLevel,
                                           tmpProdStandardVarianceByDim.CostGroupId,
                                           tmpProdStandardVarianceByDim.Split,
                                           tmpProdStandardVarianceByDim.DefaultDimension,
                                           InventCostVarianceType::Quantity,
                                           tmpProdStandardVarianceByDim.QtyVariance);

                if (tmpProdStandardVarianceByDim.SubstitutionVariance || tmpProdStandardVarianceByDim.Split == NoYes::Yes)
                    this.addVarianceToList(tmpProdStandardVarianceByDim.InventCostLevel,
                                           tmpProdStandardVarianceByDim.CostGroupId,
                                           tmpProdStandardVarianceByDim.Split,
                                           tmpProdStandardVarianceByDim.DefaultDimension,
                                           InventCostVarianceType::Substitution,
                                           tmpProdStandardVarianceByDim.SubstitutionVariance);
            }

            // Find total variance record
            // If the bomcalcTrans value is in a range where it gets rounded down
            // and the prodCalcTrans value in a range where it gets rounded up
            // and the difference between these two values is so small that it does not get posted,
            // there would still be a mismatch. To avoid this, create an additional rounding
            // variance with differenc here.
            select * from tmpProdStandardVarianceByDim
            where tmpProdStandardVarianceByDim.InventCostLevel == InventCostLevel::Total;

            if (tmpProdStandardVarianceByDim)
            {
                // Get the inventItemPrice (if it was not set here, it was set in the prodStandardVariance class
                if (!inventItemPrice)
                    inventItemPrice = prodStandardVariance.parmInventItemPrice();

                // expense a delta between actual and std cost for fully scrapped LOT quantity as a scrap variance.
                if (!prodQty && !financialProdTableJour.QtyGood && financialProdTableJour.QtyError > 0 && ProdPostScrapStdCostModelFeature::instance().isEnabled())
                {
                    this.addScrapQuantityVarianceToList(tmpProdStandardVarianceByDim);
                }
                else 
                {
                    // Now check if there exists a rounding problem
                    CostAmount roundingAmount;

                    roundingAmount = CurrencyExchangeHelper::amount(tmpProdStandardVarianceByDim.RealCostAmount) -
                                     CurrencyExchangeHelper::amount(inventItemPrice.pcsPrice() * prodQty) -
                                     CurrencyExchangeHelper::amount(tmpProdStandardVarianceByDim.CostVariance
                                    + tmpProdStandardVarianceByDim.SubstitutionVariance
                                    + tmpProdStandardVarianceByDim.LotSizeVariance
                                    + tmpProdStandardVarianceByDim.QtyVariance);
                    if (roundingAmount != 0)
                    {
                        this.addVarianceToList(tmpProdStandardVarianceByDim.InventCostLevel,
                                           tmpProdStandardVarianceByDim.CostGroupId,
                                           NoYes::No,
                                           tmpProdStandardVarianceByDim.DefaultDimension,
                                           InventCostVarianceType::Rounding,
                                           roundingAmount);
                    }
                }

            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addScrapQuantityVarianceToList</Name>
				<Source><![CDATA[
    private void addScrapQuantityVarianceToList(TmpProdStandardVariance tmpProdStandardVarianceByDim)
    {
        InventCostTransVariance inventCostTransVariance;

        inventCostTransVariance.Level            = tmpProdStandardVarianceByDim.InventCostLevel;
        inventCostTransVariance.CostGroupId      = tmpProdStandardVarianceByDim.CostGroupId;
        inventCostTransVariance.Split            = NoYes::No;
        inventCostTransVariance.VarianceType     = InventCostVarianceType::Quantity;
        inventCostTransVariance.DefaultDimension = inventCostTransVariance.copyDimension(tmpProdStandardVarianceByDim.DefaultDimension);
        inventCostTransVariance.CostAmount       = (CurrencyExchangeHelper::amount(tmpProdStandardVarianceByDim.RealCostAmount) -
                                                    CurrencyExchangeHelper::amount(inventItemPrice.pcsPrice() * financialProdTableJour.QtyError)) / financialProdTableJour.QtyError;
        inventCostTransVarianceList.insert(inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStandardVarianceList construct()
    {
        return new ProdStandardVarianceList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>