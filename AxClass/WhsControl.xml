<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControl</c> class is responsible for handling controls on the mobile device.
/// </summary>
class WhsControl
{
    #WHSRF
    #WHSWorkExecuteControlElements
    #WHSWorkExecuteDisplayCases

    private str                  name;

    // From context
    WhsControlContext            context;
    int                          step;
    WHSRFPassthrough             pass;
    WHSRFPassthrough             fieldValues;
    WhsrfControlData             controlData;
    WHSWorkExecuteMode           mode;

    // Control state
    str                          data;
    str                          selected;
    boolean                      enabled;

    // Result
    [SysObsolete('This field will be changed to private. Use the parm methods to access the values and control.fail to set', false, 10\03\2020)]
    public boolean               hasError;
    [SysObsolete('This field will be changed to private. Use the parm methods to access the values and control.fail to set', false, 10\03\2020)]
    public str                   errorMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValueSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a value has been selected for a combo box control.
    /// </summary>
    /// <returns>A Boolean value indicating whether a value has been selected for the control.</returns>
    public boolean isValueSelected()
    {
        return pass.exists(#SelectedValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the control can be processed when having a default value.
    /// </summary>
    /// <returns>A Boolean value indicating whether the control can be processed.</returns>
    /// <remarks>When overriding this method, remember to call super, as the implementation may change in the future.</remarks>
    public boolean canProcessDefaultValue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public str parmName()
    {
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmData</Name>
				<Source><![CDATA[
    public str parmData(str _data = data)
    {
        data = _data;
        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelected</Name>
				<Source><![CDATA[
    public str parmSelected()
    {
        return selected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnabled</Name>
				<Source><![CDATA[
    public boolean parmEnabled()
    {
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContext</Name>
				<Source><![CDATA[
    public WhsControlContext parmContext()
    {
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorMessage</Name>
				<Source><![CDATA[
    public str parmErrorMessage()
    {
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasError</Name>
				<Source><![CDATA[
    public boolean parmHasError()
    {
        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the control for processing.
    /// </summary>
    /// <param name = "_data">The value entered in the control.</param>
    /// <param name = "_selected">The selected value of the control</param>
    /// <param name = "_enabled">Describes if the control is enabled.</param>
    public void initializeForProcessing(str _data, str _selected, boolean _enabled)
    {
        enabled = _enabled;
        selected = _selected;
        data = _data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromContext</Name>
				<Source><![CDATA[
    private void initializeFromContext(WhsControlContext _context)
    {
        context       = _context;
        step          = _context.step;
        pass          = _context.pass;
        fieldValues   = _context.fieldValues;
        controlData   = _context.controlData;
        mode          = _context.mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark the control with a failure. This will stop further processing of controls.
    /// </summary>
    /// <param name = "_errorMessage">The error message to display to the user.</param>
    /// <returns>false to indicate an error occurred.</returns>
    public boolean fail(str _errorMessage)
    {
        errorMessage = _errorMessage;
        hasError = true;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the control.
    /// </summary>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    public boolean process()
    {
        return this.processControlUsingDisplay(data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a control and the context.
    /// </summary>
    public void populate()
    {
        if (this.defaultValueToBlank() 
            && (!WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled() || !fieldValues.exists(this.parmName())))
        {
            fieldValues.insert(this.parmName(), '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControlUsingDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the control using the <c>WhsWorkExecuteDisplay</c> class.
    /// </summary>
    /// <param name = "_value">The value to process by the control.</param>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    protected boolean processControlUsingDisplay(str _value = data)
    {
        var workExecuteDisplay = context.workExecuteDisplay;
        if (workExecuteDisplay)
        {
            workExecuteDisplay.processControl(this, _value);
        }

        return !this.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the default processing, if the control hasn't been processed before.
    /// </summary>
    public void defaultProcessing()
    {
        if (this.mustPerformDefaultProcessing())
        {
            fieldValues.insert(this.parmName(), data);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPerformDefaultProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the control has been processed.
    /// </summary>
    /// <returns>true if it should be processed; otherwise, false.</returns>
    protected boolean mustPerformDefaultProcessing()
    {
        // Derived classes are expected to handle the processing explicitly
        return classIdGet(this) == classNum(Whscontrol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the control's value should be defaulted to blank.
    /// </summary>
    /// <returns>true if it should be defaulted to blank; otherwise, false.</returns>
    protected boolean defaultValueToBlank()
    {
        switch (this.parmName())
        {
            case #BatchDisposition:
            case #BatchQty:
            case #BatchUOM:
            case #BatchVerification:
            case #SerialVerification:
            case #CheckInOutId:
            case #ChildLP:
            case #ClusterId:
            case #ClusterPickQtyVerification:
            case #CountryOfOrigin1:
            case #CountryOfOrigin2:
            case #CycleCountUOM1:
            case #FromBatchDisposition:
            case #FullQty:
            case #LoadId:
            case #LocVerification:
            case #LPVerification:
            case #ParentLP:
            case #POLineNum:
            case #PONum:
            case #ProductConfirmation:
            case #QtyVerification:
            case #RAFEndJob:
            case #RMANum:
            case #StartLocationId:
            case #TOLineNum:
            case #TONum:
            case #UseVendBatchDate:
            case #UseVendExpDate:
            case #VendBatchDate:
            case #VendBatchId:
            case #VendExpDate:
            case #ZoneId:
                return true;
        }

        if (InventDim::isFieldIdDimensional(fieldName2id(tableNum(InventDim), this.parmName())))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromControlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>WhsControl</c> object from a control name.
    /// </summary>
    /// <param name = "_controlName">The name of the control.</param>
    /// <param name = "_context">The control context.</param>
    /// <returns>A new instance.</returns>
    public static WhsControl newFromControlName(str _controlName, WhsControlContext _context)
    {
        var attribute = new WhsControlFactoryAttribute(_controlName);
        WhsControl control = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsControl), attribute);
        Debug::assert(control != null);

        control.name = _controlName;
        control.initializeFromContext(_context);

        return control;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>