<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdTableCleanUp extends RunBaseBatch implements BatchRetryable
{
    TransDate                   realDateBefore;

    DialogRunbase               dialog;

    DialogField                 dialogRealDateBefore;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        realDateBefore
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteProductionOrders</Name>
				<Source><![CDATA[
    private int64 deleteProductionOrders()
    {
        ProdTable prodTable;

        prodTable.skipDeleteActions(true);
       
        new SysDaDeleteStatement().execute(new SysDaDeleteObject(this.buildDeleteProductionOrdersQuery(prodTable)));

        return prodTable.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteProductionOrdersQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for deletion of production orders.
    /// </summary>
    /// <param name = "_prodTable">The production order buffer.</param>
    /// <returns>A query object.</returns>
    private SysDaQueryObject buildDeleteProductionOrdersQuery(ProdTable _prodTable)
    {
        SysDaQueryObject prodTableDeleteQuery = new SysDaQueryObject(_prodTable);
        prodTableDeleteQuery.whereClause(this.buildDeleteProductionOrdersWhereClause(_prodTable));
        
        return prodTableDeleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteProductionOrdersWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the where clause for deletion of production orders.
    /// </summary>
    /// <param name = "_prodTable">The production order buffer.</param>
    /// <returns>An expression that is the where clause.</returns>
    protected SysDaBinaryExpression buildDeleteProductionOrdersWhereClause(ProdTable _prodTable)
    {
        return new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, ProdStatus)), new SysDaValueExpression(ProdStatus::Completed)),
            new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_prodTable, fieldStr(ProdTable, RealDate)), new SysDaValueExpression(realDateBefore)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductions</Name>
				<Source><![CDATA[
    protected void deleteProductions()
    {
        ProdTable           prodTable;
        ProdBOM             prodBOM;
        ProdRoute           prodRoute;
        ProdRouteJob        prodRouteJob;

        WrkCtrCapRes        wrkCtrCapRes;

        ProdCalcTrans       prodCalcTrans;

        ProdJournalTable    prodJournalTable;

        ProdJournalBOM      prodJournalBOM;
        ProdJournalProd     prodJournalProd;
        ProdJournalRoute    prodJournalRoute;

        int64 deletedProductions = this.deleteProductionOrders();
        if (deletedProductions == 0)
        {
            return;
        }

        // ProdBOm

        prodBOM.skipDataMethods(true);
        prodBOM.skipDeleteActions(true);
        delete_from prodBOM
            notexists join prodTable
            where prodTable.ProdId      == prodBOM.ProdId;

        // ProdRoute

        prodRoute.skipDataMethods(true);
        prodRoute.skipDeleteActions(true);
        delete_from prodRoute
            notexists join prodTable
            where prodTable.ProdId      == prodRoute.ProdId;

        // ProdRouteJob

        prodRouteJob.skipDataMethods(true);
        prodRouteJob.skipDeleteActions(true);
        delete_from prodRouteJob
            notexists join prodTable
            where prodTable.ProdId      == prodRouteJob.ProdId;

        // WrkCtrCapRes

        wrkCtrCapRes.skipDataMethods(true);
        wrkCtrCapRes.skipDeleteActions(true);
        delete_from wrkCtrCapRes
            where wrkCtrCapRes.RefType  == WrkCtrCapRefType::Production
            notexists join prodTable
            where prodTable.ProdId      == wrkCtrCapRes.RefId;

        // ProdCalcTrans

        prodCalcTrans.skipDataMethods(true);
        prodCalcTrans.skipDeleteActions(true);
        delete_from prodCalcTrans
            where prodCalcTrans.TransRefType == ProdTransRefType::Production
            notexists join prodTable
            where prodTable.ProdId           == prodCalcTrans.TransRefId;

        // Journals

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where prodJournalTable.Posted   == NoYes::Yes   &&
                  prodJournalTable.ProdId   != ''
            notexists join prodTable
            where prodTable.ProdId          == prodJournalTable.ProdId;

        prodJournalBOM.skipDataMethods(true);
        prodJournalBOM.skipDeleteActions(true);
        delete_from prodJournalBOM
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalBOM.JournalId;

        prodJournalBOM.skipDataMethods(true);
        prodJournalBOM.skipDeleteActions(true);
        delete_from prodJournalBOM
            notexists join prodTable
            where prodTable.ProdId           == prodJournalBOM.ProdId;

        prodJournalProd.skipDataMethods(true);
        prodJournalProd.skipDeleteActions(true);
        delete_from prodJournalProd
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalProd.JournalId;

        prodJournalProd.skipDataMethods(true);
        prodJournalProd.skipDeleteActions(true);
        delete_from prodJournalProd
            notexists join prodTable
            where prodTable.ProdId           == prodJournalProd.ProdId;

        prodJournalRoute.skipDataMethods(true);
        prodJournalRoute.skipDeleteActions(true);
        delete_from prodJournalRoute
            notexists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalRoute.JournalId;

        prodJournalRoute.skipDataMethods(true);
        prodJournalRoute.skipDeleteActions(true);
        delete_from prodJournalRoute
            notexists join prodTable
            where prodTable.ProdId           == prodJournalRoute.ProdId;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where prodJournalTable.JournalType  == ProdJournalType::Picklist     &&
                  prodJournalTable.Posted       == NoYes::Yes
            notexists join prodJournalBOM
            where prodJournalBOM.JournalId == prodJournalTable.JournalId;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where prodJournalTable.JournalType  == ProdJournalType::ReportFinished  &&
                  prodJournalTable.Posted       == NoYes::Yes
            notexists join prodJournalProd
            where prodJournalProd.JournalId == prodJournalTable.JournalId;

        prodJournalTable.skipDataMethods(true);
        prodJournalTable.skipDeleteActions(true);
        delete_from prodJournalTable
            where (prodJournalTable.JournalType == ProdJournalType::RouteCard   ||
                   prodJournalTable.JournalType == ProdJournalType::JobCard)    &&
                   prodJournalTable.Posted      == NoYes::Yes
            notexists join prodJournalRoute
            where prodJournalRoute.JournalId == prodJournalTable.JournalId;

        info(strfmt("@SYS112880",deletedProductions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogRealDateBefore = dialog.addFieldValue(extendedtypestr(TransDate),realDateBefore,"@SYS85093","@SYS74979");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        realDateBefore        =    dialogRealDateBefore.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        PreferredLocale preferredLocale = Global::currentUserLanguage();
        realDateBefore = DateTimeUtil::getStartOfYearDate(preferredLocale, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))-1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (! this.validate())
                throw error("@SYS18447");

            this.deleteProductions();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The task is run on the server. Your classes that extend <c>RunBaseBatch</c> must override the
    ///    <c>runsImpersonated</c> method and return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdTableCleanUp construct()
    {
        return new ProdTableCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS74977";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProdTableCleanUp          prodTableCleanUp = ProdTableCleanUp::newStandard();

        if (! prodTableCleanUp.prompt())
            return;

        prodTableCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    static ProdTableCleanUp newStandard()
    {
        ProdTableCleanUp          prodTableCleanUp = ProdTableCleanUp::construct();

        prodTableCleanUp.getLast();
        prodTableCleanUp.init();

        return prodTableCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>