<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResReservationSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reservation schedule class.
/// </summary>
public class ResReservationSchedule implements ResIReservationSchedule
{
    private ResourceRecId resource;
    private LegalEntity legalEntity;
    private ResourceCategoryRecId resourceCategory;
    private ActivityResourceRecId activityResource;
    private ActivityRecId activity;
    private PSARSEntityType activityType;
    private utcdatetime start;
    private utcdatetime end;
    private real capacity;
    private ResCommitType commitment;
    private ResCommitType userSelectedCommitment;
    private ResReservationType reservationType;
    private boolean processRollUpByAssignmentRequest;
    private boolean isExistingTeamMember;
    private CalendarRecId calendar;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resource record identifier.
    /// </summary>
    /// <param name = "_resource">Resource record identifier.</param>
    /// <returns>Resource record identifier.</returns>
    public ResourceRecId resource(ResourceRecId _resource = resource)
    {
        if (!prmIsDefault(_resource))
        {
            resource = _resource;
        }
        else if (!resource && activityResource)
        {
            // get resource by looking up PSAProjSchedRole table
            PSAProjSchedRole engagementTeam;

            select firstonly Resource from engagementTeam
                    where engagementTeam.RecId == activityResource;

            if (engagementTeam)
            {
                resource = engagementTeam.Resource;
            }
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resource category record identifier.
    /// </summary>
    /// <param name = "_resourceCategory">Resource category record identifier.</param>
    /// <returns>Resource category record identifier.</returns>
    public ResourceCategoryRecId resourceCategory(ResourceCategoryRecId _resourceCategory = resourceCategory)
    {
        if (!prmIsDefault(_resourceCategory))
        {
            resourceCategory = _resourceCategory;
        }
        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activity resource record identifier.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record identifier.</param>
    /// <returns>Activity resource record identifier.</returns>
    public ActivityResourceRecId activityResource(ActivityResourceRecId _activityResource = activityResource)
    {
        if (!prmIsDefault(_activityResource))
        {
            activityResource = _activityResource;
        }
        else if (!activityResource && resource && activity)
        {
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;

                select firstonly RecId from teamTable
                    where teamTable.RootActivity == activity
                        && teamTable.Resource == resource;

                if (teamTable)
                {
                    activityResource = teamTable.RecId;
                }
            }
            else
            {
                LegalEntityRecId resourceLegalEntity = ResourceFacade::getLegalEntity(resource);
                // get activity reource from ResActivityResourceDetailView
                ResActivityResourceDetailView activityResourceView;

                select firstOnly activityResource from activityResourceView
                where activityResourceView.Resource == resource
                    && activityResourceView.Activity == activity
                    && activityResourceView.SourceLegalEntity == resourceLegalEntity;

                if (activityResourceView)
                {
                    activityResource = activityResourceView.ActivityResource;
                }
            }
        }
        return activityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activity record identifier.
    /// </summary>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <returns>Activity record identifier.</returns>
    public ActivityRecId activity(ActivityRecId _activity = activity)
    {
        if (!prmIsDefault(_activity))
        {
            activity = _activity;
        }
        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the activity scheduling entity type.
    /// </summary>
    /// <param name = "_activityType">The enum of activity scheduling entity type.</param>
    /// <returns>The enum of activity scheduling entity type.</returns>
    public PSARSEntityType activityType(PSARSEntityType _activityType = activityType)
    {
        if (!prmIsDefault(_activityType))
        {
            activityType = _activityType;
        }
        return activityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start of Reservation schedule.
    /// </summary>
    /// <param name = "_start">Start date time.</param>
    /// <returns>Reservation start date/time value.</returns>
    public utcdatetime start(utcdatetime _start = start)
    {
        if (!prmIsDefault(_start))
        {
            start = _start;
        }
        return start;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// End of Reservation schedule.
    /// </summary>
    /// <param name = "_end">End date time.</param>
    /// <returns>Reservation end date/time value.</returns>
    public utcdatetime end(utcdatetime _end = end)
    {
        if (!prmIsDefault(_end))
        {
            end = _end;
        }
        return end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Capacity of Reservation schedule in seconds.
    /// </summary>
    /// <param name = "_capacity">Capacity in seconds.</param>
    /// <returns>Reservation capacity in seconds.</returns>
    public real capacity(real _capacity = capacity)
    {
        if (!prmIsDefault(_capacity))
        {
            capacity = _capacity;
        }
        return capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commitment type of Reservation schedule.
    /// </summary>
    /// <param name = "_commitment">Commitment type.</param>
    /// <returns>Reservation commitment type.</returns>
    public ResCommitType commitment(ResCommitType _commitment = commitment)
    {
        if (!prmIsDefault(_commitment))
        {
            commitment = _commitment;
        }
        return commitment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if schedule is booking or assignment.
    /// </summary>
    /// <param name = "_reservationType">Reservation type.</param>
    /// <returns>Reservation type.</returns>
    public ResReservationType reservationType(ResReservationType _reservationType = reservationType)
    {
        if (!prmIsDefault(_reservationType))
        {
            reservationType = _reservationType;
        }
        return reservationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessRollUpByAssignmentRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set <c>ResRollUp</c> table records to be updated by reservation process or by
    /// <c>ResValidateAndSubmitAssignmentRequest</c> class after resource request is submitted.
    /// </summary>
    /// <param name = "_processRollUpByAssignmentRequest">Whether to process all roll up updates by assignment request.</param>
    /// <returns>
    /// true to update <c>ResRollUp</c> table records by <c>ResValidateAndSubmitAssignmentRequest</c> class; otherwise, false.
    /// </returns>
    public boolean parmProcessRollUpByAssignmentRequest(boolean _processRollUpByAssignmentRequest = processRollUpByAssignmentRequest)
    {
        if (!prmIsDefault(_processRollUpByAssignmentRequest))
        {
            processRollUpByAssignmentRequest = _processRollUpByAssignmentRequest;
        }
        return processRollUpByAssignmentRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExistingTeamMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set if this resoruce is an existing team member for this engagement.
    /// </summary>
    /// <param name = "_isExistingTeamMember">Whether this is an existing team member.</param>
    /// <returns>true if this resource is an existing team member for this engagement; otherwise, false.</returns>
    public boolean parmIsExistingTeamMember(boolean _isExistingTeamMember = isExistingTeamMember)
    {
        if (!prmIsDefault(_isExistingTeamMember))
        {
            isExistingTeamMember = _isExistingTeamMember;
        }
        return isExistingTeamMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the scheduling calendar.
    /// </summary>
    /// <param name = "_calendar">Calendar record identifier.</param>
    /// <returns>Calendar record identifier.</returns>
    public CalendarRecId parmCalendar(CalendarRecId _calendar = calendar)
    {
        if (!prmIsDefault(_calendar))
        {
            calendar = _calendar;
        }
        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootActivityByActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get root activity rec ID by activity resource rec ID.
    /// </summary>
    /// <param name = "_activityResource">Activity resource rec ID.</param>
    /// <returns>Root activity rec ID.</returns>
    public ActivityRecId getRootActivityByActivityResource(activityresourcerecid _activityResource)
    {
        ActivityRecId rootActivity;

        if (_activityResource)
        {
            rootActivity = ActivityResourceFacade::getRootActivity(_activityResource);
        }

        return rootActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity resource identifier.
    /// </summary>
    /// <returns>Activity resource identifier.</returns>
    public ResActivityResourceId getActivityResourceId()
    {
        ActivityRecId localActivity = this.activity();
        ActivityRecId rootActivity = localActivity ? ActivityFacade::getRootActivity(localActivity) : 0;
        ActivityResourceRecId localActivityResource = this.activityResource();
        ResourceRecID localResource = this.Resource();

        if (rootActivity)
        {
            if (!localActivityResource && localResource)
            {
                localActivityResource = this.activityResource(ActivityResourceFacade::findByActivityAndResource(rootActivity, localResource));
            }
        }
        else if (localActivityResource)
        {
            rootActivity = this.getRootActivityByActivityResource(localActivityResource);
        }

        return strFmt(ResUtil::activityResourceIdStrFormat,
            rootActivity, localResource, localActivityResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of reservation schedule.
    /// </summary>
    protected void new()
    {
        resourceCategory = ResourceCategoryFacade::defaultResourceCategory();
        start = DateTimeUtil::minValue();
        end = DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReservationSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy resource reservation schedule object from the specified reservation schedule object.
    /// </summary>
    /// <param name = "_schedule">Resource reservation schedule object.</param>
    /// <returns>Reservation schedule object.</returns>
    public static ResIReservationSchedule copyReservationSchedule(ResIReservationSchedule _schedule)
    {
        ResIReservationSchedule newSchedule = ResReservationSchedule::construct();

        newSchedule.activityResource(_schedule.activityResource());
        newSchedule.resourceCategory(_schedule.resourceCategory());
        newSchedule.start(_schedule.start());
        newSchedule.end(_schedule.end());
        newSchedule.capacity(_schedule.capacity());
        newSchedule.commitment(_schedule.commitment());
        newSchedule.reservationType(_schedule.reservationType());
        newSchedule.activityType(_schedule.activityType());
        newSchedule.parmProcessRollUpByAssignmentRequest(false);
        return newSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resource reservation schedule constructor.
    /// </summary>
    /// <returns>Reservation schedule object.</returns>
    public static ResIReservationSchedule construct()
    {
        ResIReservationSchedule schedule = new ResReservationSchedule();
        return schedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the Reservation schedule class.
    /// </summary>
    /// <param name = "resource">Resource identifier.</param>
    /// <returns>Reservation schedule object.</returns>
    public static ResIReservationSchedule createSchedule(ResourceRecId resource)
    {
        ResIReservationSchedule schedule = ResReservationSchedule::construct();
        schedule.Resource(resource);

        return schedule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>