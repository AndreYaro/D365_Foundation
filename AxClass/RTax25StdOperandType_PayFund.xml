<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25StdOperandType_PayFund</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class encapsulates Russian payroll operation type.
/// </summary>
final class RTax25StdOperandType_PayFund extends RTax25StdOperandType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup form for the RefIdFrom control.
    /// </summary>
    public void lookupFrom()
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(RPayCounterTable), controlRefIdFrom);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(RPayCounterTable));
        qbds.addRange(fieldnum(RPayCounterTable, CounterType)).value(queryValue(RPayCounterType::Fund));
        qbds.addRange(fieldnum(RPayCounterTable, LineType)).value(queryValue(RPayCtypeType::BaseTotal));

        sysTableLookup.addLookupfield(fieldnum(RPayCounterTable, CounterUnit));
        sysTableLookup.addLookupfield(fieldnum(RPayCounterTable, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the operand for Russian payroll.
    /// </summary>
    /// <returns>
    /// The operand for Russian payroll.
    /// </returns>
    public AmountMST operand()
    {
        RPayTrans        payTrans;
        RPayFundMember   payFundMember;

        select sum(Amount) from payTrans
            index hint PeriodEmplIdx
            where payTrans.PayPeriod >= dateFrom &&
                  payTrans.PayPeriod <= dateTo
         exists join payFundMember
            where payFundMember.CounterUnit == expressionLine.RefIdFrom &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form design from for Russian payroll register.
    /// </summary>
    public void updateDesign()
    {
        controlRefIdFrom.lookupButton(FormLookupButton::Always);
        controlRefIdTo.lookupButton(FormLookupButton::Never);

        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates write for russian payroll register.
    /// </summary>
    /// <returns>
    /// true if validate write passed successfully, false otherwise.
    /// </returns>
    public boolean validateWrite()
    {
        boolean             ret = super();

        if (! RPayCounterTable::find(expressionLine.RefIdFrom))
        {
            ret = ret && checkFailed(strfmt("@RUP861"));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>