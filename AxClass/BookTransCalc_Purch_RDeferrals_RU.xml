<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Purch_RDeferrals_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookTransCalc_Purch_RDeferrals_RU extends BookTransCalc_Purch_RU
{
    RDeferralsBookId            deferralsBookIdDefault;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRDeferralsTable</Name>
				<Source><![CDATA[
        protected RDeferralsTable getRDeferralsTable()
    {
        RDeferralsTable     rDeferralsTable;
        FactureTrans_RU     factureTrans;
        LedgerJournalTrans  ledgerJournalTrans;
        VendInvoiceTrans    vendInvoiceTrans;

        switch (factureJour.FactureType)
        {
            case FactureType_RU::TaxCorrection :
                // this is select of several records, which are precessed in another method
                select rDeferralsTable
                join RecId from ledgerJournalTrans
                    where ledgerJournalTrans.TableId == rDeferralsTable.RefTableId &&
                          ledgerJournalTrans.RecId   == rDeferralsTable.RefRecId
                join factureTrans
                    where factureTrans.InvoiceLineNum == ledgerJournalTrans.LineNum    &&
                          factureTrans.InvoiceId      == ledgerJournalTrans.JournalNum &&
                          factureTrans.MarkupRefRecId == ledgerJournalTrans.RecId      &&
                          factureTrans.FactureId      == factureJour.FactureId         &&
                          factureTrans.Module         == factureJour.Module;
                break;

            default :
                // this is select of several records, which are precessed in another method
                select rDeferralsTable
                join RecId from vendInvoiceTrans
                    where vendInvoiceTrans.TableId == rDeferralsTable.RefTableId &&
                          vendInvoiceTrans.RecId   == rDeferralsTable.RefRecId
                join RecId from factureTrans
                    where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                          factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                          factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                          factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                          factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                          factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                          factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine      &&
                          factureTrans.FactureId           == factureJour.FactureId                &&
                          factureTrans.Module              == factureJour.Module;
                break;
        }

        return rDeferralsTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdvanceReport</Name>
				<Source><![CDATA[
        protected void processAdvanceReport()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmountDiff</Name>
				<Source><![CDATA[
        protected void processAmountDiff()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFacture</Name>
				<Source><![CDATA[
        protected void processFacture()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
        protected void processInvoice()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepayment</Name>
				<Source><![CDATA[
        protected void processPrepayment()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepaymentStorno</Name>
				<Source><![CDATA[
        protected void processPrepaymentStorno()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRDeferrals</Name>
				<Source><![CDATA[
        protected void processRDeferrals()
    {
        CompanyId                             curCompany           = curext();
        RDeferralsParameters                  rDeferralsParameters = RDeferralsParameters::find();
        RDeferralsTable                       rDeferralsTable;
        RDeferralsTrans                       deferralsTrans;
        RDeferralsTrans                       deferralsTransSource;
        PurchBookVATProcessLogTransOper_RU    processLogTransOperSelect;
        PurchBookVATProcessLogTransOper_RU    processLogTransOper;
        PurchBookVATProcessLogTrans_RU        processLogTrans;

        PurchBookVATProcessLogTransOper_RU    processLogTransOperSource;
        PurchBookVATProcessLogTrans_RU        processLogTransSource;

        BookStructSmallVATAmounts_RU          settledAmounts;

        BookStructVATAmounts_RU               bookUsedAmounts;
        BookStructVATAmounts_RU               bookSettledAmounts;
        BookStructVATAmounts_RU               bookFactureAmounts;

        TmpPurchBookVATProcessLogTrans_RU     processLogTransLoc;
        TmpPurchBookVATProcessLogTransOper_RU processLogTransOperLoc;

        BookStructSmallVATAmounts_RU          usedAmounts;
        ;

        deferralsBookIdDefault  = rDeferralsParameters.DeferralsBookIdDefault;

        if (!deferralsBookIdDefault)
        {
            throw error(strFmt("@GLS114364", "@GLS107143"));
        }

        rDeferralsTable = this.getRDeferralsTable();

        while (rDeferralsTable)
        {
            if (rDeferralsTable.vatRefundingMethod != RDeferralsVATRefundingMethod::Proportional)
            {
                return;
            }

            while select TransDate, Amount from deferralsTransSource
            join Amount, TransDate, DeferralsPeriod, RecId from deferralsTrans
                where deferralsTrans.DeferralsId     == rDeferralsTable.DeferralsId &&
                      deferralsTrans.DeferralsBookId == deferralsBookIdDefault      &&
                      deferralsTrans.TransDate       >= fromDate                    &&
                      deferralsTrans.TransDate       <= toDate                      &&
                      deferralsTrans.StornoRecId     == deferralsTransSource.RecId
            exists join processLogTransOperSelect
                where processLogTransOperSelect.rDeferralsTransRecId == deferralsTransSource.RecId
            {
                if (BookDataCalc_RU::datePeriodBook(deferralsTrans.TransDate) == BookDataCalc_RU::datePeriodBook(deferralsTrans.DeferralsPeriod))
                {
                    continue;
                }

                while select processLogTransOper
                    where processLogTransOper.rDeferralsTransRecId == deferralsTransSource.RecId &&
                          processLogTransOper.CanceledRefRecId     == 0                          &&
                          processLogTransOper.Blocked              == NoYes::No                  &&
                          processLogTransOper.BlockedAuto          == NoYes::No
                join * from processLogTrans
                    where processLogTrans.RecId == processLogTransOper.RefRecId
                {
                    select sum(rDeferralsClosedAmount), count(RecId) from processLogTransOperSource
                        where processLogTransOperSource.rDeferralsTransRecId== deferralsTrans.RecId
                    join TableId from processLogTransSource
                        where processLogTransSource.RecId                   == processLogTransOperSource.RefRecId &&
                              processLogTransSource.SettlementRecId         == processLogTrans.SettlementRecId;

                    if (processLogTransOperSource.RecId != 0 && (deferralsTrans.Amount - processLogTransOperSource.rDeferralsClosedAmount == 0))
                    {
                        continue;
                    }

                    if (factureJour.vatOnPayment == NoYes::No || VendSettlement::find(processLogTrans.SettlementRecId).CanBeReversed)
                    {
                        TmpPurchBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                                      factureJour.FactureId,
                                                                      factureJour.FactureExternalId,
                                                                      factureJour.FactureDate,
                                                                      factureJour.FactureDate,
                                                                      factureJour.FactureDate_External,
                                                                      processLogTrans.SettlementDate,
                                                                      processLogTrans.AccountNum,
                                                                      processLogTrans.AccountName,
                                                                      processLogTrans.CountryGTD,
                                                                      processLogTrans.TransType,
                                                                      processLogTrans.InvoiceRecIdRef,
                                                                      processLogTrans.PaymentRecIdRef,
                                                                      processLogTrans.RefTableId,
                                                                      curCompany,
                                                                      curCompany,
                                                                      processLogTrans.SettlementRecId,
                                                                      0,
                                                                      processLogTrans.PurchBookTransDate,
                                                                      dateNull(),
                                                                      PurchBookProcessingType_RU::Standard,
                                                                      conPeek(BookDataCalc_RU::datePeriodBook(deferralsTransSource.TransDate), 2),
                                                                      '',
                                                                      true);

                        tmpProcessLogTransOper.clear();

                        tmpProcessLogTransOper.initFromPBookVATProcessLogTransOper(processLogTransOper);

                        tmpProcessLogTransOper.AmountLiableToVAT      = - tmpProcessLogTransOper.AmountLiableToVAT;
                        tmpProcessLogTransOper.TaxAmount              = - tmpProcessLogTransOper.TaxAmount;

                        tmpProcessLogTransOper.TransDate              = deferralsTrans.TransDate;
                        tmpProcessLogTransOper.RefRecId               = salesPurchBookDataMap.RecId;

                        tmpProcessLogTransOper.rDeferralsTransRecId   = deferralsTrans.RecId;
                        tmpProcessLogTransOper.rDeferralsClosedAmount = - processLogTransOper.rDeferralsClosedAmount;

                        settledAmounts = new BookStructSmallVATAmounts_RU();
                        settledAmounts.addAmounts(tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount,
                                                  tmpProcessLogTransOper.AmountLiableToVAT,
                                                  tmpProcessLogTransOper.TaxAmount);
                        settledAmounts.reverseAmounts();

                        tmpProcessLogTransOper.SettledAmounts = settledAmounts.pack();
                        tmpProcessLogTransOper.Percent        = 100;
                        tmpProcessLogTransOper.insert();

                        bookSettledAmounts = BookStructVATAmounts_RU::create(salesPurchBookDataMap.SettledAmounts);
                        bookSettledAmounts.addSmallAmounts2(processLogTransOper.TaxCode, settledAmounts);
                        salesPurchBookDataMap.SettledAmounts = bookSettledAmounts.pack();

                        bookUsedAmounts = new BookStructVATAmounts_RU();
                        bookUsedAmounts.addAmounts2(bookSettledAmounts);
                        bookUsedAmounts.addAmounts2(bookSettledAmounts);
                        salesPurchBookDataMap.UsedAmounts = bookUsedAmounts.pack();

                        bookFactureAmounts = BookStructVATAmounts_RU::create(salesPurchBookDataMap.FactureAmounts);
                        bookFactureAmounts.isGroupBy(true);
                        salesPurchBookDataMap.FactureAmounts = bookFactureAmounts.pack();

                        salesPurchBookDataMap.update();

                        tmpProcessLogTransOper.UsedAmounts = salesPurchBookDataMap.UsedAmounts;
                        tmpProcessLogTransOper.update();

                        processLogTransLoc.setTmpData(salesPurchBookDataMap);
                        processLogTransOperLoc.setTmpData(tmpProcessLogTransOper);

                        select firstonly forupdate processLogTransLoc
                            where processLogTransLoc.FactureId == factureJour.FactureId &&
                                  ! processLogTransLoc.CorrectedPeriod
                        join TableId from processLogTransOperLoc
                            where processLogTransOperLoc.RefRecId == processLogTransLoc.RecId &&
                                  processLogTransOperLoc.Blocked  == NoYes::Yes;

                        if (processLogTransOperLoc.RecId)
                        {
                            bookUsedAmounts = new BookStructVATAmounts_RU();

                            while select processLogTransOperLoc
                                where processLogTransOperLoc.RefRecId == processLogTransLoc.RecId
                            {
                                usedAmounts = new BookStructSmallVATAmounts_RU();
                                usedAmounts.addAmounts(processLogTransOperLoc.AmountLiableToVAT + processLogTransOperLoc.TaxAmount,
                                                       processLogTransOperLoc.AmountLiableToVAT,
                                                       processLogTransOperLoc.TaxAmount);

                                bookUsedAmounts.addSmallAmounts2(processLogTransOperLoc.TaxCode, usedAmounts);
                            }

                            bookSettledAmounts = BookStructVATAmounts_RU::create(processLogTransLoc.SettledAmounts);

                            bookSettledAmounts.subAmounts2(bookUsedAmounts);

                            processLogTransLoc.UsedAmounts = bookSettledAmounts.pack();
                            processLogTransLoc.update();
                        }

                        salesPurchBookDataMap.setTmpData(processLogTransLoc);
                        tmpProcessLogTransOper.setTmpData(processLogTransOperLoc);
                    }
                }
            }

            next rDeferralsTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCorrection</Name>
				<Source><![CDATA[
        protected void processTaxCorrection()
    {
        this.processRDeferrals();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>