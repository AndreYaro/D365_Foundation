<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost_StaffListChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost_StaffListChange extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEmplOnPosition</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkEmplOnPosition(RHRMOrderTrans _orderTrans)
    {
        RHRMStaffList       rhrmStaffListLocal;
        RHRMStaffListEmploy emplCount;
        boolean             ret = true;

        rhrmStaffListLocal = RHRMStaffList::find(_orderTrans.StaffListRefRecId);

        emplCount = rhrmStaffListLocal.staffListEmploy(_orderTrans.StartDate);

        if (_orderTrans.ValueSum == 0 && emplCount > 0)
        {
            ret = checkFailed(strFmt("@RUP2513",
                                      _orderTrans.titleId(),
                                      emplCount));
        }
        else if (_orderTrans.ValueSum && _orderTrans.ValueSum < emplCount && !RHRMParameters::find().AllowOverdraft)
        {
            ret = checkFailed(strFmt("@RUP2514", _orderTrans.titleId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLaterOrder</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkLaterOrder(RHRMOrderTrans _orderTrans)
    {
        RHRMStaffListHistory    rhrmStaffListHistoryLocal;
        boolean                 ret = true;

        select firstonly RecId, StartDate from rhrmStaffListHistoryLocal
            where rhrmStaffListHistoryLocal.StaffListRefRecId  == _orderTrans.StaffListRefRecId &&
                  rhrmStaffListHistoryLocal.StartDate    >= _orderTrans.StartDate;

        if (rhrmStaffListHistoryLocal.RecId != 0)
        {
            if (rhrmStaffListHistoryLocal.StartDate >= _orderTrans.StartDate)
                ret = checkFailed(strFmt("@RUP2515",
                                          _orderTrans.titleId(),
                                          _orderTrans.OrganizationId,
                                          _orderTrans.organizationDescription(),
                                          rhrmStaffListHistoryLocal.StartDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiveTransferOrder</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkReceiveTransferOrder(RHRMOrderTrans _orderTrans)
    {
        RPayHistory rPayHistory;
        boolean     ret = true;

        select firstonly RecId from rPayHistory
            where rPayHistory.StartDate > _orderTrans.StartDate &&
                  rPayHistory.hrmStaffListRefRecId == _orderTrans.StaffListRefRecId &&
                  (rPayHistory.OperationType == RHRMJournalType::Receive ||
                   rPayHistory.OperationType == RHRMJournalType::Transfer);

        if (rPayHistory.RecId != 0)
        {
            ret = checkFailed(strFmt("@RUP2516",
                                       _orderTrans.titleId(),
                                       _orderTrans.OrganizationId,
                                       _orderTrans.organizationDescription()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean            ret;
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        ret = ret && rhrmOrderTrans.validateWrite();

        ret = ret && this.checkLaterOrder(rhrmOrderTrans);

        ret = ret && this.checkReceiveTransferOrder(rhrmOrderTrans);

        ret = ret && this.checkEmplOnPosition(rhrmOrderTrans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans          rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMStaffListHistory    rhrmStaffListHistory;

        super(_journalTransData);

        rhrmStaffListHistory.StaffListRefRecId  = rhrmOrderTrans.StaffListRefRecId;
        rhrmStaffListHistory.StartDate          = rhrmOrderTrans.StartDate;
        rhrmStaffListHistory.StaffListFactor    = rhrmOrderTrans.ValueSum;

        rhrmStaffListHistory.RiseInWages1       = rhrmOrderTrans.RiseInWages;
        rhrmStaffListHistory.RiseInWages2       = rhrmOrderTrans.RiseInWages2;
        rhrmStaffListHistory.RiseInWages3       = rhrmOrderTrans.RiseInWages3;

        rhrmStaffListHistory.MinWage            = rhrmOrderTrans.StaffListMinWage;
        rhrmStaffListHistory.MaxWage            = rhrmOrderTrans.StaffListMaxWage;
        rhrmStaffListHistory.GradeScaleId       = rhrmOrderTrans.GradeScaleId;
        rhrmStaffListHistory.MinGradeId         = rhrmOrderTrans.StaffListMinGradeId;
        rhrmStaffListHistory.MaxGradeId         = rhrmOrderTrans.StaffListMaxGradeId;

        rHRMStaffListHistory.Class              = rHRMOrderTrans.Class;
        rHRMStaffListHistory.Certified          = rHRMOrderTrans.Certified;
        rHRMStaffListHistory.WorkCondClass      = rHRMOrderTrans.WorkCondClass;
        rHRMStaffListHistory.SpecCond           = rHRMOrderTrans.SpecCond;
        rHRMStaffListHistory.PositionList       = rHRMOrderTrans.PositionList;

        rhrmStaffListHistory.OrderTransRecId  = rhrmOrderTrans.RecId;

        rhrmStaffListHistory.insert();

        this.createTransferJournal(rHRMStaffListHistory);
    }
]]></Source>
			</Method>
			<Method>
				<Name>createTransferJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTransferJournal(RHRMStaffListHistory _rHRMStaffListHistory)
    {
        RHRMWorkCondClassUpdater rHRMWorkCondClassUpdater;

        rHRMWorkCondClassUpdater = RHRMWorkCondClassUpdater::newStaffListHistory(_rHRMStaffListHistory);
        rHRMWorkCondClassUpdater.createTransferOrder();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>