<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating invoice proposal lines for non-billing rules.
/// </summary>
class ProjInvoiceProposalCreateLines  extends ProjInvoiceProposalCreateLinesBase
{
    protected boolean enableInvoiceProposalCreationgPerfEnhanced;
    protected ProjInvoiceProposalCreateLinesParams proposalCreateLinesPerfEnhancedParams;
    private int numOfProjects;
    private ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjInvoiceProposalCreateLines));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProposalTransDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer of type <c>PSATmpProjProposalTrans</c>
    /// </summary>
    /// <returns>
    /// A buffer of type <c>PSATmpProjProposalTrans</c>
    /// </returns>
    public PSATmpProjProposalTrans getProposalTransDisplay()
    {
        return proposalTransDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProposalTransDisplayDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer of type <c>PSATmpProjProposalTrans</c>
    /// </summary>
    /// <returns>
    /// A buffer of type <c>PSATmpProjProposalTrans</c>
    /// </returns>
    public PSATmpProjProposalTrans getProposalTransDisplayDeduction()
    {
        return proposalTransDisplayDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    [Hookable()]
    public Query getQuery(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId, TableId _tableIdTrans, TableId _tableIdSales)
    {
        #define.ProjId("ProjId")
        #define.TransDate("TransDate")
        #define.TransStatus("TransStatus")
        #define.TransIdRef("TransIdRef")
        #define.CurrencyId("CurrencyId")
        #define.SMAStartDate("SMAStartDate")

        Query                   query = new Query();
        QueryBuildDataSource    qbdsTrans;
        QueryBuildDataSource    qbdsTransSales;
        QueryBuildDataSource    qbdsTransServiceOrder;
        QueryBuildDataSource    qbdsTransServiceOrderLine;
        QueryBuildRange         qbdsTransRange;

        qbdsTrans = query.addDataSource(_tableIdTrans);
        qbdsTransRange = qbdsTrans.addRange(new DictTable(_tableIdTrans).fieldName2Id(#ProjId));
        qbdsTransRange.value(queryValue(_projId));

        FieldName linePropertyIdFieldName;
        FieldName transactionOriginFieldName;

        if (_tableIdTrans == tableNum(ProjItemTrans))
        {
            linePropertyIdFieldName = fieldId2Name(tableNum(ProjItemTrans), fieldNum(ProjItemTrans, LinePropertyId));
            transactionOriginFieldName = fieldId2Name(tableNum(ProjItemTrans), fieldNum(ProjItemTrans, TransactionOrigin));

            if (proposalCreateLinesParams.parmProjCategoryIdItem())
            {
                qbdsTransRange = qbdsTrans.addRange(fieldNum(ProjItemTrans, CategoryId));
                qbdsTransRange.value(proposalCreateLinesParams.parmProjCategoryIdItem());
            }
        }

        if (_tableIdTrans == tableNum(ProjRevenueTrans))
        {
            linePropertyIdFieldName = fieldId2Name(tableNum(ProjRevenueTrans), fieldNum(ProjRevenueTrans, LinePropertyId));
            transactionOriginFieldName = fieldId2Name(tableNum(ProjRevenueTrans), fieldNum(ProjRevenueTrans, TransactionOrigin));

            if (proposalCreateLinesParams.parmProjCategoryIdFee())
            {
                qbdsTransRange = qbdsTrans.addRange(fieldNum(ProjRevenueTrans, CategoryId));
                qbdsTransRange.value(proposalCreateLinesParams.parmProjCategoryIdFee());
            }
        }

        if (_tableIdTrans == tableNum(ProjEmplTrans))
        {
            linePropertyIdFieldName = fieldId2Name(tableNum(ProjEmplTrans), fieldNum(ProjEmplTrans, LinePropertyId));
            transactionOriginFieldName = fieldId2Name(tableNum(ProjEmplTrans), fieldNum(ProjEmplTrans, TransactionOrigin));

            if (proposalCreateLinesParams.parmProjCategoryIdEmpl())
            {
                qbdsTransRange = qbdsTrans.addRange(fieldNum(ProjEmplTrans, CategoryId));
                qbdsTransRange.value(proposalCreateLinesParams.parmProjCategoryIdEmpl());
            }
        }

        if (_tableIdTrans == tableNum(ProjCostTrans))
        {
            linePropertyIdFieldName = fieldId2Name(tableNum(ProjCostTrans), fieldNum(ProjCostTrans, LinePropertyId));
            transactionOriginFieldName = fieldId2Name(tableNum(ProjCostTrans), fieldNum(ProjCostTrans, TransactionOrigin));
            
            if (proposalCreateLinesParams.parmProjCategoryIdExp())
            {
                qbdsTransRange = qbdsTrans.addRange(fieldNum(ProjCostTrans, CategoryId));
                qbdsTransRange.value(proposalCreateLinesParams.parmProjCategoryIdExp());
            }
        }

        if (proposalCreateLinesParams.parmCurrencyCodeFixed())
        {
            qbdsTransRange = qbdsTrans.addRange(new DictTable(_tableIdTrans).fieldName2Id(#CurrencyId));
            qbdsTransRange.value(queryValue(proposalCreateLinesParams.parmCurrencyCodeFixed()));
        }

        if (_tableIdTrans == tableNum(ProjOnAccTrans))
        {
            qbdsTransRange = qbdsTrans.addRange(fieldNum(ProjOnAccTrans, PSAContractLineNum));
            qbdsTransRange.value(strFmt('((%1.%2 == %4) || (%1.%3 == %5))',
                                 qbdsTrans.name(),
                                 fieldStr(ProjOnAccTrans, PSAContractLineNum),
                                 fieldStr(ProjOnAccTrans, IsMilestoneComplete),
                                 SysQuery::valueEmptyString(),
                                 enum2int(NoYes::No)));
        }
         
        if (linePropertyIdFieldName && transactionOriginFieldName && ProjInvoiceProposalInvoiceableCacheFlight::instance().isEnabled())
        {
            // Join with ProjLineProperty table to filter out non-billable records,
            // except for subscription origin transactions or transactions without a LinePropertyId.
            QueryBuildDataSource qbdslineProperty = qbdsTrans.addDataSource(tableNum(ProjLineProperty));
            qbdslineProperty.fetchMode(QueryFetchMode::One2One);
            qbdslineProperty.relations(true);
            qbdslineProperty.joinMode(JoinMode::OuterJoin);

            query.addQueryFilter(qbdslineProperty, fieldStr(ProjLineProperty, RecId)).value
                (strFmt('((%4 == %2) || (%1.%3 == %5) || (%1.%6 == %7))',
                    qbdsTrans.name(),
                    enum2int(NoYes::Yes),
                    linePropertyIdFieldName,
                    fieldStr(ProjLineProperty, ToBeInvoiced),
                    SysQuery::valueEmptyString(),
                    transactionOriginFieldName,
                    enum2int(ProjOrigin::Subscription)));
        }
        
        qbdsTransSales = qbdsTrans.addDataSource(_tableIdSales);
        qbdsTransSales.relations(true);
        qbdsTransSales.joinMode(JoinMode::ExistsJoin);

        if (proposalCreateLinesParams.parmStartDate() || proposalCreateLinesParams.parmEndDate())
        {
            if (_tableIdTrans == tableNum(ProjRevenueTrans) && proposalCreateLinesParams.parmIsQueryRevenueTrans() && proposalCreateLinesParams.parmIsQuerySubscriptionTrans())
            {
                qbdsTrans.addRange(new DictTable(_tableIdTrans).fieldName2Id(#TransDate)).value(strFmt('(((%1 >= %2) && (%1 <= %3) && (%4 == %5)) || ((%6 == %7) && (%4 >= %2) && (%4 <= %3)))',
                 fieldStr(ProjRevenueTrans,TransDate),
                 Date2StrXpp(proposalCreateLinesParams.parmStartDate()),
                 Date2StrXpp(proposalCreateLinesParams.parmEndDate()),
                 fieldStr(ProjRevenueTrans,SMAStartDate),
                 Date2StrXpp(dateNull()),
                 fieldStr(ProjRevenueTrans,TransactionOrigin),
                 enum2int(ProjOrigin::Subscription)
                 ));
            }
            else if (_tableIdTrans == tableNum(ProjRevenueTrans) && proposalCreateLinesParams.parmIsQuerySubscriptionTrans())
            {
                qbdsTrans.addRange(new DictTable(_tableIdTrans).fieldName2Id(#SMAStartDate)).value(queryValue(proposalCreateLinesParams.parmStartDate()) + ".." + queryValue(proposalCreateLinesParams.parmEndDate()));
            }
            else
            {
                qbdsTrans.addRange(new DictTable(_tableIdTrans).fieldName2Id(#TransDate)).value(queryValue(proposalCreateLinesParams.parmStartDate()) + ".." + queryValue(proposalCreateLinesParams.parmEndDate()));
            }
        }
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (!proposalCreateLinesParams.parmReverseMarking_BR())
            {
                if (proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Both || proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Invoices)
                {
                    if (_tableIdTrans == tableNum(ProjOnAccTrans))
                    {
                        qbdsTransSales.addRange(new DictTable(_tableIdSales).fieldName2Id(#TransStatus)).value(queryValue(ProjTransStatus::Registered));
                    }
                    else
                    {
                        qbdsTransSales.addRange(new DictTable(_tableIdSales).fieldName2Id(#TransStatus)).value(queryValue(ProjTransStatus::Posted));
                    }
                }
            }
        }
        else
        {
            // </GBR>
            if (proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Both || proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Invoices)
            {
                if (_tableIdTrans == tableNum(ProjOnAccTrans))
                {
                    qbdsTransSales.addRange(new DictTable(_tableIdSales).fieldName2Id(#TransStatus)).value(queryValue(ProjTransStatus::Registered));
                }
                else
                {
                    qbdsTransSales.addRange(new DictTable(_tableIdSales).fieldName2Id(#TransStatus)).value(queryValue(ProjTransStatus::Posted));
                }
            }
            // <GBR>
        }
        // </GBR>
        if (proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Both || proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Creditnotes)
        {
            qbdsTransSales.addRange(new DictTable(_tableIdSales).fieldName2Id(#TransStatus)).value(queryValue(ProjTransStatus::MarkedCreditnote));
        }

        qbdsTrans.addSortField(new DictTable(_tableIdTrans).fieldName2Id(#TransDate));

        //ProjItemtrans is handled differently in the caller
        if (proposalCreateLinesParams.parmServiceOrderTable() && _tableIdTrans != tableNum(ProjItemTrans))
        {
            qbdsTransServiceOrder = qbdsTransSales.addDataSource(_tableIdTrans);
            qbdsTransServiceOrder.relations(true);

            qbdsTransServiceOrderLine = qbdsTransServiceOrder.addDataSource(tableNum(SMAServiceOrderLine));

            qbdsTransServiceOrderLine.addLink(new DictTable(_tableIdTrans).fieldName2Id(#TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));

            qbdsTransServiceOrderLine.addLink(new DictTable(_tableIdTrans).fieldName2Id(#ProjId), fieldNum(SMAServiceOrderLine, ProjId));
            qbdsTransServiceOrderLine.joinMode(JoinMode::InnerJoin);

            qbdsTransServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(proposalCreateLinesParams.parmServiceOrderTable().ServiceOrderId));
            qbdsTransServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ProjId)).value(queryValue(proposalCreateLinesParams.parmServiceOrderTable().ProjId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiSelection</Name>
				<Source><![CDATA[
    #define.Astrix("*")
    private boolean isMultiSelection(str _filterStr)
    {
        if (subStr(_filterStr, strLen(_filterStr), 1) == #Astrix)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetentionTrans</Name>
				<Source><![CDATA[
    private boolean isRetentionTrans(ProjRevenueTrans _revenueTrans)
    {
        boolean              isRetention = false;
        ProjRevenueTransSale revenueTransSale;

        if (_revenueTrans.IsRetained && _revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal)
        {
            select firstonly RecId from revenueTransSale
                where revenueTransSale.TransId == _revenueTrans.TransId &&
                      revenueTransSale.TransStatus == ProjTransStatus::Invoiced;

            isRetention = (revenueTransSale ? true : false);
        }

        return isRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for the Posted or marked for credit note fee transaction.
    /// </summary>
    /// <param name = "_revenueTrans">
    ///     The <c>ProjRevenueTrans</c> record.
    /// </param>
    /// <returns>
    ///     true if fee transaction is of type fee journal, free text invoice and advanced ledger entry; otherwise, false.
    /// </returns>
    protected boolean isRevenueTrans(ProjRevenueTrans _revenueTrans)
    {
        boolean              ret = false;
        ProjRevenueTransSale revenueTransSale;

        if (_revenueTrans.IsRetained == NoYes::No)
        {
            select firstonly RecId from revenueTransSale
                where revenueTransSale.TransId     == _revenueTrans.TransId &&
                      (revenueTransSale.TransStatus == ProjTransStatus::Posted ||
                      revenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);

            if (revenueTransSale)
            {
                // Public sector
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) &&
                    (_revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::AdvancedLedgerEntry ||
                     _revenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal))
                {
                    ret = true;
                }
                else if (_revenueTrans.TransactionOrigin == ProjOrigin::FeeJournal ||
                         _revenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice ||
                         _revenueTrans.TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
                {
                    ret = true;
                }
                else if (_revenueTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectedForCancel_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the sales order is a cancelling sales order and if it's match with the cancelling project invoice when set
    /// </summary>
    /// <param name="_salesTable">
    ///     The <c>SalesTable</c>
    /// </param>
    /// <returns>
    ///     True when the InvoiceRefRecID_BR is set and is equal to the invoice recId to be canceled
    ///     True when the InvoiceRefRecID_BR is set and the invoice recId to be canceled is not set
    ///     False otherwise
    /// </returns>
    /// <remarks>
    ///     This method will filter orders marked to cancel when creating a invoice proposal
    ///     And will filter orders that match with the invoice to be canceled when set.
    /// </remarks>

    private boolean isSelectedForCancel_BR(salesTable _salesTable)
    {
        boolean isSelectedForCancel;
        SalesTable_BR salesTable_BR = _salesTable.salesTable_BR();

        isSelectedForCancel = (salesTable_BR.InvoiceRefRecID_BR && salesTable_BR.InvoiceRefRecID_BR == proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR())
            || (salesTable_BR.InvoiceRefRecID_BR && proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR() == 0);

        return isSelectedForCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubscriptionTrans</Name>
				<Source><![CDATA[
    private boolean isSubscriptionTrans(ProjRevenueTrans _revenueTrans)
    {
        return (_revenueTrans.TransactionOrigin == ProjOrigin::Subscription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposalTransCreate</Name>
				<Source><![CDATA[
    public PSATmpProjProposalTrans parmProposalTransCreate(PSATmpProjProposalTrans _proposalTransCreate = proposalTransCreate)
    {
        proposalTransCreate = _proposalTransCreate;

        return proposalTransCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entry point for the logic to creates invoice proposal lines.
    /// </summary>
    void run()
    {
        numOfProjects = 0;
        
        using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity().activityContext(ProjOpsFinancialsInstrumentationActivites::InvProposalNonBillingRulesCreation))
        {
            enableInvoiceProposalCreationgPerfEnhanced = FeatureStateProvider::IsFeatureEnabled(ProjInvoiceProposalPerformanceEnhancementFeature::instance());

            activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::InvProposalPerfEnhancementFeature, any2Str(enableInvoiceProposalCreationgPerfEnhanced));
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, any2Str(proposalCreateLinesParams.parmIsBatch()));

            boolean isMultiProjInvoiceProjId = this.isMultiSelection(proposalCreateLinesParams.parmProjInvoiceProjId());
            if (enableInvoiceProposalCreationgPerfEnhanced)
            {
                this.initProposalCreateLinesPerfEnhancedParams();
                this.enhancedInvoiceProposalLineCreation(isMultiProjInvoiceProjId);
            }
            else
            {
                this.standardInvoiceProposalLineCreation(isMultiProjInvoiceProjId);
            }

            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                ttsbegin;
                this.kittingUpdateKittingFields_delegate(proposalTransDisplay);
                ttscommit;
            }

            this.logExecutionTelemetry(activityContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExecutionTelemetry</Name>
				<Source><![CDATA[
    private void logExecutionTelemetry(SysInstrumentationActivityContext _activityContext)
    {
        str numOfProjectsStr = int2Str(numOfProjects);
        str numOfDisplayTransStr = int2Str(this.getNumOfPSATmpProjProposalTransRecords(proposalTransDisplay));
        str numOfDisplayDeductionTransStr = int2Str(this.getNumOfPSATmpProjProposalTransRecords(proposalTransDisplayDeduction));

        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::InvProposalNumberOfProjects, numOfProjectsStr);
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::InvProposalNumberOfDisplayTransactions, numOfDisplayTransStr);
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::InvProposalNumberOfDisplayDeductionTransactions, numOfDisplayDeductionTransStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfPSATmpProjProposalTransRecords</Name>
				<Source><![CDATA[
    private int getNumOfPSATmpProjProposalTransRecords(PSATmpProjProposalTrans _orgTempTrans)
    {
        int numOfTrans;
        PSATmpProjProposalTrans tempTransForCount;
        tempTransForCount.setTmpData(_orgTempTrans);

        select count(RecId) from tempTransForCount;
        if (tempTransForCount.RecId)
        {
            numOfTrans = int642int(tempTransForCount.RecId);
        }

        return numOfTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfProjectsFromTemplTable</Name>
				<Source><![CDATA[
    private int getNumOfProjectsFromTemplTable(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int numOfProjectsLocal;
        
        select count(RecId) from _tmpInvoiceProposalCreate;
        if (_tmpInvoiceProposalCreate.RecId)
        {
            numOfProjectsLocal = int642int(_tmpInvoiceProposalCreate.RecId);
        }

        return numOfProjectsLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enhancedInvoiceProposalLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create invoice proposal methods.
    /// It will first identify the projects which have can be invoiced posted transactions by transactions type.
    /// Then invoice proposal will be created from those projects only.
    /// </summary>
    /// <param name = "_isMultiProjInvoiceProjId">Whether if multiple contract ID is set to true.</param>
    /// <remarks>
    /// This method should be called when the invoice proposal creation performance feature is enabled.
    /// </remarks>
    protected void enhancedInvoiceProposalLineCreation(boolean _isMultiProjInvoiceProjId)
    {
        boolean isMultiProjId = this.isMultiSelection(proposalCreateLinesParams.parmProjId());
        
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, enhancedInvoiceProposalLineCreation)))
        {
            activityContext.addCustomProperty('_isMultiProjInvoiceProjId', any2Str(_isMultiProjInvoiceProjId));
            activityContext.addCustomProperty('isMultiProjId', any2Str(isMultiProjId));

            int fundingSourceCount = 0;

            if (proposalCreateLinesParams.parmContainerFundingSources() != conNull())
            {
                List listFundingSources = List::create(proposalCreateLinesParams.parmContainerFundingSources());

                ListEnumerator listEnumeratorFundingSources = listFundingSources.getEnumerator();

                while (listEnumeratorFundingSources.moveNext())
                {
                    fundingSourceCount++;
                    projFundingSourceRefId = listEnumeratorFundingSources.current();
                    this.setupCreateInvoiceProposalTransactions(_isMultiProjInvoiceProjId, isMultiProjId, projFundingSourceRefId);
                }
            }
            else
            {
                fundingSourceCount++;

                if (!projFundingSourceRefId && proposalCreateLinesParams.parmFundingSource())
                {
                    projFundingSourceRefId = ProjFundingSource::findContractFundingSource(proposalCreateLinesParams.parmProjInvoiceProjId(),
                                                                                      proposalCreateLinesParams.parmFundingSource()).RecId;
                }

                this.setupCreateInvoiceProposalTransactions(_isMultiProjInvoiceProjId, isMultiProjId, projFundingSourceRefId);
            }
            
            activityContext.addCustomProperty('fundingSourceCount', any2Str(fundingSourceCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCreateInvoiceProposalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup creation invoice proposal transactions.
    /// </summary>
    /// <param name = "_isMultiProjInvoiceProjId">Whether if multiple contract ID is set to true.</param>
    /// <param name = "_isMultiProjId">Whether if multiple project ID is set to true.</param>
    /// <param name = "_fundingSourceRecId">Contract funding source record identifier.</param>
    protected void setupCreateInvoiceProposalTransactions(boolean _isMultiProjInvoiceProjId, boolean _isMultiProjId, RefRecId _fundingSourceRecId = 0)
    {
        int expenseTransactionCount = 0;
        int hourTransactionCount = 0;
        int itemTransactionCount = 0;
        int feeTransactionCount = 0;
        int salesLineTransactionCount = 0;
        int onAccountTransactionCount = 0;

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, setupCreateInvoiceProposalTransactions)))
        {
            ProjTmpInvoiceProposalCreate tmpInvoiceProposalCreate;
            this.skipDatabaseLogAndEvent(tmpInvoiceProposalCreate);
            if (_fundingSourceRecId)
            {
                this.setupTmpInvoiceProposalCreateByFundingSource(tmpInvoiceProposalCreate, _isMultiProjInvoiceProjId, _isMultiProjId, _fundingSourceRecId);
            }
            else
            {
                this.setupTmpInvoiceProposalCreate(tmpInvoiceProposalCreate, _isMultiProjInvoiceProjId, _isMultiProjId);
            }

            expenseTransactionCount = this.setupExpenseTransactions(tmpInvoiceProposalCreate);

            if (!isDebitNote)
            {
                hourTransactionCount = this.setupHourTransactions(tmpInvoiceProposalCreate);
                itemTransactionCount = this.setupItemTransactions(tmpInvoiceProposalCreate);
                feeTransactionCount = this.setupFeeTransactions(tmpInvoiceProposalCreate);
                salesLineTransactionCount = this.setupSalesLine(tmpInvoiceProposalCreate);
                onAccountTransactionCount = this.setupOnAccountTransactions(tmpInvoiceProposalCreate);
                this.setupOtherTransactions(tmpInvoiceProposalCreate);
            }

            activityContext.addCustomProperty('_fundingSourceRecId', any2Str(_fundingSourceRecId));
            activityContext.addCustomProperty('isDebitNote', any2Str(isDebitNote));
            activityContext.addCustomProperty('expenseTransactionCount', any2Str(expenseTransactionCount));
            activityContext.addCustomProperty('hourTransactionCount', any2Str(hourTransactionCount));
            activityContext.addCustomProperty('itemTransactionCount', any2Str(itemTransactionCount));
            activityContext.addCustomProperty('feeTransactionCount', any2Str(feeTransactionCount));
            activityContext.addCustomProperty('salesLineTransactionCount', any2Str(salesLineTransactionCount));
            activityContext.addCustomProperty('onAccountTransactionCount', any2Str(onAccountTransactionCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTmpInvoiceProposalCreateByFundingSource</Name>
				<Source><![CDATA[
    private void setupTmpInvoiceProposalCreateByFundingSource(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate, boolean _isMultiProjInvoiceProjId, boolean _isMultiProjId, RefRecId _fundingSourceRecId)
    {
        ProjInvoiceTable projInvoiceTable;
        ProjFundingSource projFundingSource;
        ProjStatusTypeRule projStatusTypeRule;
        ProjTable projTable;

        insert_recordset _tmpInvoiceProposalCreate(ProjInvoiceProjId, ProjId)
        select ProjInvoiceProjId from projInvoiceTable
            where !proposalCreateLinesParams.parmProjInvoiceProjId()
                || ((!_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId == proposalCreateLinesParams.parmProjInvoiceProjId())
                || (_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId like proposalCreateLinesParams.parmProjInvoiceProjId()))
            join ProjId from projTable
                where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId
                    && (!proposalCreateLinesParams.parmProjId()
                        || ((!_isMultiProjId
                            && projTable.ProjId == proposalCreateLinesParams.parmProjId())
                        || (_isMultiProjId && projTable.ProjId like proposalCreateLinesParams.parmProjId())))
            exists join projStatusTypeRule
                where projStatusTypeRule.ProjStatus == projTable.Status
                    && projStatusTypeRule.ProjType == projTable.Type
                    && projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal
            exists join projFundingSource
                where projFundingSource.contractId == projInvoiceTable.ProjInvoiceProjId
                    && projFundingSource.RecId == _fundingSourceRecId;
        
        update_recordset _tmpInvoiceProposalCreate
            setting isFixedPrice = NoYes::Yes
        exists join projTable
            where projTable.ProjId == _tmpInvoiceProposalCreate.ProjId
                && projTable.Type == ProjType::FixedPrice;

        numOfProjects += this.getNumOfProjectsFromTemplTable(_tmpInvoiceProposalCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTmpInvoiceProposalCreate</Name>
				<Source><![CDATA[
    private void setupTmpInvoiceProposalCreate(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate, boolean _isMultiProjInvoiceProjId, boolean _isMultiProjId)
    {
        ProjTable projTable;

        // If this class is called from ProjInvoiceProposalNormalPeriodic class, 
        // then the list of projects have been identified and it doesn't need 
        // to go through the insert query in else to add the records in temp table.
        if (proposalCreateLinesParams.parmContainerProjIds() && proposalCreateLinesParams.parmProjInvoiceProjId())
        {
            ttsbegin;
            for (int i = 1; i <= conLen(proposalCreateLinesParams.parmContainerProjIds()); i++)
            {
                _tmpInvoiceProposalCreate.clear();
                _tmpInvoiceProposalCreate.ProjInvoiceProjId = proposalCreateLinesParams.parmProjInvoiceProjId();
                _tmpInvoiceProposalCreate.ProjId = conPeek(proposalCreateLinesParams.parmContainerProjIds(), i);
                _tmpInvoiceProposalCreate.insert();
            }
            ttscommit;
        }
        else
        {
            ProjInvoiceTable projInvoiceTable;
            ProjStatusTypeRule projStatusTypeRule;
            
            boolean cdsLockingOptionCreateInvoiceProposals = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals);

            insert_recordset _tmpInvoiceProposalCreate(ProjInvoiceProjId, ProjId)
            select ProjInvoiceProjId from projInvoiceTable
                where !proposalCreateLinesParams.parmProjInvoiceProjId()
                    || ((!_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId == proposalCreateLinesParams.parmProjInvoiceProjId())
                    || (_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId like proposalCreateLinesParams.parmProjInvoiceProjId()))
                join ProjId from projTable
                    where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId
                        && (!proposalCreateLinesParams.parmProjId()
                            || ((!_isMultiProjId
                                && projTable.ProjId == proposalCreateLinesParams.parmProjId())
                            || (_isMultiProjId && projTable.ProjId like proposalCreateLinesParams.parmProjId())))
                        && (!cdsLockingOptionCreateInvoiceProposals
                            || (projTable.ProjDataSource == 0))
                exists join projStatusTypeRule
                    where projStatusTypeRule.ProjStatus == projTable.Status
                        && projStatusTypeRule.ProjType == projTable.Type
                        && projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal;
        }

        update_recordset _tmpInvoiceProposalCreate
            setting isFixedPrice = NoYes::Yes
        exists join projTable
            where projTable.ProjId == _tmpInvoiceProposalCreate.ProjId
                && projTable.Type == ProjType::FixedPrice;

        numOfProjects += this.getNumOfProjectsFromTemplTable(_tmpInvoiceProposalCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupExpenseTransactions</Name>
				<Source><![CDATA[
    private int setupExpenseTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQueryCostTrans())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQueryCostTrans(true);

            ProjCostTrans expenseTrans;
            ProjCostTransSale expenseTransSale;
            while select ProjInvoiceProjId, ProjId, isFixedPrice from _tmpInvoiceProposalCreate
            group by _tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice
                where _tmpInvoiceProposalCreate.isFixedPrice == NoYes::No
            exists join expenseTrans
                where expenseTrans.ProjId == _tmpInvoiceProposalCreate.ProjId
            exists join expenseTransSale
                where expenseTransSale.TransId == expenseTrans.TransId
                    && (expenseTransSale.TransStatus == ProjTransStatus::Posted || expenseTransSale.TransStatus == ProjTransStatus::MarkedCreditNote)
            {
                counter++;

                if (isDebitNote)
                {
                    //<GBR>
                    this.runDebitNoteTransactions_BR(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);
                    //</GBR>
                }
                else
                {
                    this.runTransactions(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);
                }
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQueryCostTrans(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupHourTransactions</Name>
				<Source><![CDATA[
    private int setupHourTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQueryEmplTrans())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQueryEmplTrans(true);

            ProjEmplTrans emplTrans;
            ProjEmplTransSale emplTransSale;
            while select ProjInvoiceProjId, ProjId, isFixedPrice from _tmpInvoiceProposalCreate
            group by _tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice
                where _tmpInvoiceProposalCreate.isFixedPrice == NoYes::No
            exists join emplTrans
                where emplTrans.ProjId == _tmpInvoiceProposalCreate.ProjId
            exists join emplTransSale
                where emplTransSale.TransId == emplTrans.TransId
                    && (emplTransSale.TransStatus == ProjTransStatus::Posted || emplTransSale.TransStatus == ProjTransStatus::MarkedCreditNote)
            {
                counter++;
                this.runTransactions(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);   
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQueryEmplTrans(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupItemTransactions</Name>
				<Source><![CDATA[
    private int setupItemTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQueryItemTrans())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQueryItemTrans(true);

            ProjItemTrans itemTrans;
            ProjItemTransSale itemTransSale;
            while select ProjInvoiceProjId, ProjId, isFixedPrice from _tmpInvoiceProposalCreate
            group by _tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice
                where _tmpInvoiceProposalCreate.isFixedPrice == NoYes::No
            exists join itemTrans
                where itemTrans.ProjId == _tmpInvoiceProposalCreate.ProjId
            exists join itemTransSale
                where itemTransSale.ProjTransId == itemTrans.ProjTransId
                    && (itemTransSale.TransStatus == ProjTransStatus::Posted || itemTransSale.TransStatus == ProjTransStatus::MarkedCreditNote)
            {
                counter++;
                this.runTransactions(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQueryItemTrans(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFeeTransactions</Name>
				<Source><![CDATA[
    private int setupFeeTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQueryRevenueTrans() 
            || proposalCreateLinesParams.parmIsQuerySubscriptionTrans())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQueryRevenueTrans(proposalCreateLinesParams.parmIsQueryRevenueTrans());
            proposalCreateLinesPerfEnhancedParams.parmIsQuerySubscriptionTrans(proposalCreateLinesParams.parmIsQuerySubscriptionTrans());

            ProjRevenueTrans feeTrans;
            ProjRevenueTransSale feeTransSale;
            while select ProjInvoiceProjId, ProjId, isFixedPrice from _tmpInvoiceProposalCreate
            group by _tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice
                where _tmpInvoiceProposalCreate.isFixedPrice == NoYes::No
            exists join feeTrans
                where feeTrans.ProjId == _tmpInvoiceProposalCreate.ProjId
            exists join feeTransSale
                where feeTransSale.TransId == feeTrans.TransId
                    && (feeTransSale.TransStatus == ProjTransStatus::Posted || feeTransSale.TransStatus == ProjTransStatus::MarkedCreditNote)
            {
                counter++;
                this.runTransactions(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);   
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQueryRevenueTrans(false);
            proposalCreateLinesPerfEnhancedParams.parmIsQuerySubscriptionTrans(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSalesLine</Name>
				<Source><![CDATA[
    private int setupSalesLine(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQuerySalesLine())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQuerySalesLine(true);

            Query query = this.getProjTmpInvoiceProposalCreateQueryForSalesLine();
            
            QueryRun queryRun = new QueryRun(query);
            ProjTmpInvoiceProposalCreate projTmpInvProposal;
            projTmpInvProposal.linkPhysicalTableInstance(_tmpInvoiceProposalCreate);
            queryRun.setCursor(projTmpInvProposal);

            while (queryRun.next())
            {
                counter++;
                ProjTmpInvoiceProposalCreate querryRunProjTmpInvProposal = queryRun.get(tablenum(ProjTmpInvoiceProposalCreate));
                this.runTransactions(querryRunProjTmpInvProposal.ProjInvoiceProjId, querryRunProjTmpInvProposal.ProjId, querryRunProjTmpInvProposal.isFixedPrice);
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQuerySalesLine(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTmpInvoiceProposalCreateQueryForSalesLine</Name>
				<Source><![CDATA[
    protected Query getProjTmpInvoiceProposalCreateQueryForSalesLine()
    {
        // Create a query to look for invoiceable project sales order lines with status of None, Backorder or Delivered.
        Query query = new Query();
        QueryBuildDataSource projTmpInvProposalQbds = this.getProjTmpInvoiceProposalCreateQDBSForSalesLine(query);
        QueryBuildDataSource salesLineQbds = this.getSalesLineQDBSForSalesLine(projTmpInvProposalQbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTmpInvoiceProposalCreateQDBSForSalesLine</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource getProjTmpInvoiceProposalCreateQDBSForSalesLine(Query _query)
    {
        QueryBuildDataSource projTmpInvProposalQbds = _query.addDataSource(tableNum(ProjTmpInvoiceProposalCreate));
        projTmpInvProposalQbds.addRange(fieldNum(ProjTmpInvoiceProposalCreate, isFixedPrice)).value(queryValue(NoYes::No));
        projTmpInvProposalQbds.addGroupByField(fieldNum(ProjTmpInvoiceProposalCreate, ProjInvoiceProjId));
        projTmpInvProposalQbds.addGroupByField(fieldNum(ProjTmpInvoiceProposalCreate, ProjId));
        projTmpInvProposalQbds.addGroupByField(fieldNum(ProjTmpInvoiceProposalCreate, isFixedPrice));

        return projTmpInvProposalQbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQDBSForSalesLine</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource getSalesLineQDBSForSalesLine(QueryBuildDataSource _projTmpInvProposalQbds)
    {
        QueryBuildDataSource salesLineQbds = _projTmpInvProposalQbds.addDataSource(tableNum(SalesLine));
        salesLineQbds.relations(false);
        salesLineQbds.joinMode(JoinMode::ExistsJoin);
        salesLineQbds.fetchMode(QueryFetchMode::One2One);
        salesLineQbds.addLink(fieldNum(ProjTmpInvoiceProposalCreate, ProjId), fieldNum(SalesLine, ProjId));
        salesLineQbds.addRange(fieldNum(SalesLine, Blocked)).value(queryValue(NoYes::No));
        salesLineQbds.addRange(fieldNum(SalesLine, SalesStatus)).value(
                strFmt('((%1.%2 == %3) || (%1.%2 == %4) || (%1.%2 == %5))',
                salesLineQbds.name(),
                fieldStr(SalesLine, SalesStatus),
                enum2int(SalesStatus::None),
                enum2int(SalesStatus::Backorder),
                enum2int(SalesStatus::Delivered)));

        return salesLineQbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupOnAccountTransactions</Name>
				<Source><![CDATA[
    private int setupOnAccountTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {
        int counter = 0;

        if (proposalCreateLinesParams.parmIsQueryOnAccTrans())
        {
            proposalCreateLinesPerfEnhancedParams.parmIsQueryOnAccTrans(true);

            ProjOnAccTrans onAccTrans;
            ProjOnAccTransSale onAccTransSale;
            while select ProjInvoiceProjId, ProjId, isFixedPrice from _tmpInvoiceProposalCreate
            group by _tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice
            exists join onAccTrans
                where onAccTrans.ProjId == _tmpInvoiceProposalCreate.ProjId
            exists join onAccTransSale
                where onAccTransSale.TransId == onAccTrans.TransId
                    && (onAccTransSale.TransStatus == ProjTransStatus::Registered || onAccTransSale.TransStatus == ProjTransStatus::MarkedCreditNote)
            {
                counter++;
                this.runTransactions(_tmpInvoiceProposalCreate.ProjInvoiceProjId, _tmpInvoiceProposalCreate.ProjId, _tmpInvoiceProposalCreate.isFixedPrice);
            }

            proposalCreateLinesPerfEnhancedParams.parmIsQueryOnAccTrans(false);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupOtherTransactions</Name>
				<Source><![CDATA[
    protected void setupOtherTransactions(ProjTmpInvoiceProposalCreate _tmpInvoiceProposalCreate)
    {}

]]></Source>
			</Method>
			<Method>
				<Name>standardInvoiceProposalLineCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create invoice proposal methods.
    /// It queries all projects in attempts to create invoice proposals.
    /// </summary>
    /// <param name = "_isMultiProjInvoiceProjId">Whether if multiple contract ID is set to true.</param>
    /// <remarks>
    /// Thie method should be called when the invoice proposal creation performance feature is not enabled.
    /// </remarks>
    protected void standardInvoiceProposalLineCreation(boolean _isMultiProjInvoiceProjId)
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, standardInvoiceProposalLineCreation)))
        {
            int fundingSourceCount = 0;
            int runTransactionsCallCount = 0;
            int runDebitNoteTransactions_BR_CallCount = 0;

            if (proposalCreateLinesParams.parmContainerFundingSources() != conNull())
            {
                boolean isMultiProjId = this.isMultiSelection(proposalCreateLinesParams.parmProjId());

                List listFundingSources = List::create(proposalCreateLinesParams.parmContainerFundingSources());

                ListEnumerator listEnumeratorFundingSources = listFundingSources.getEnumerator();

                while (listEnumeratorFundingSources.moveNext())
                {
                    fundingSourceCount++;

                    ProjInvoiceTable projInvoiceTable;
                    ProjFundingSource projFundingSource;
                    ProjStatusTypeRule projStatusTypeRule;
                    ProjTable projTable;

                    projFundingSourceRefId = listEnumeratorFundingSources.current();

                    while select ProjInvoiceProjId from projInvoiceTable
                    where !proposalCreateLinesParams.parmProjInvoiceProjId()
                        || ((!_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId == proposalCreateLinesParams.parmProjInvoiceProjId())
                        || (_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId like proposalCreateLinesParams.parmProjInvoiceProjId()))
                    join ProjId, Type from projTable
                        where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId
                            && (!proposalCreateLinesParams.parmProjId()
                                || ((!isMultiProjId
                                    && projTable.ProjId == proposalCreateLinesParams.parmProjId())
                                || (isMultiProjId && projTable.ProjId like proposalCreateLinesParams.parmProjId())))
                    exists join projStatusTypeRule
                        where projStatusTypeRule.ProjStatus == projTable.Status
                            && projStatusTypeRule.ProjType == projTable.Type
                            && projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal
                    exists join projFundingSource
                        where projFundingSource.contractId == projInvoiceTable.ProjInvoiceProjId
                            && projFundingSource.RecId == projFundingSourceRefId
                    {
                        numOfProjects++;
                        if (isDebitNote)
                        {
                            runDebitNoteTransactions_BR_CallCount++;
                            this.runDebitNoteTransactions_BR(projInvoiceTable.ProjInvoiceProjId, projTable.ProjId, projTable.Type == ProjType::FixedPrice);
                        }
                        else
                        {
                            runTransactionsCallCount++;
                            this.runTransactions(projInvoiceTable.ProjInvoiceProjId, projTable.ProjId, projTable.Type == ProjType::FixedPrice);
                        }
                    }
                }
            }
            else
            {
                ProjInvoiceTable projInvoiceTable;
                while select ProjInvoiceProjId from projInvoiceTable
                where !proposalCreateLinesParams.parmProjInvoiceProjId() ||
                    ((!_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId == proposalCreateLinesParams.parmProjInvoiceProjId() ||
                    (_isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId like proposalCreateLinesParams.parmProjInvoiceProjId())))
                {
                    if (proposalCreateLinesParams.parmFundingSource())
                    {
                        projFundingSourceRefId = ProjFundingSource::findContractFundingSource(projInvoiceTable.ProjInvoiceProjId,
                        proposalCreateLinesParams.parmFundingSource()).RecId;
                    }

                    QueryRun queryRun = new QueryRun(this.getProjTableForInvoiceProposal(projInvoiceTable));
                    while(queryRun.next())
                    {
                        numOfProjects++;
                        ProjTable projTable = queryRun.get(tableNum(ProjTable));
                        boolean isFixedPrice = ProjTable.Type == ProjType::FixedPrice;

                        //<GBR>
                        if (isDebitNote)
                        {
                            runDebitNoteTransactions_BR_CallCount++;
                            this.runDebitNoteTransactions_BR(projInvoiceTable.ProjInvoiceProjId, projTable.ProjId, isFixedPrice);
                        }
                        else
                        {
                            runTransactionsCallCount++;
                            //</GBR>
                            this.runTransactions(projInvoiceTable.ProjInvoiceProjId, projTable.ProjId, isFixedPrice);
                            //<GBR>
                        }
                    }
                    //</GBR>
                }
            }

            activityContext.addCustomProperty('fundingSourceCount', any2Str(fundingSourceCount));
            activityContext.addCustomProperty('numOfProjects', any2Str(numOfProjects));
            activityContext.addCustomProperty('runTransactionsCallCount', any2Str(runTransactionsCallCount));
            activityContext.addCustomProperty('runDebitNoteTransactions_BR_CallCount', any2Str(runDebitNoteTransactions_BR_CallCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableForInvoiceProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a <c>ProjTable</c> query used for project invoice proposals.
    /// </summary>
    /// <param name = "_projInvoiceTable">
    ///     A project invoice table buffer to get project invoice ID.
    /// </param>
    /// <returns>
    ///     A query having project table data filtered to drive proposal process.
    /// </returns>
    protected query getProjTableForInvoiceProposal(ProjInvoiceTable _projInvoiceTable)
    {
        boolean isMultiProjId = this.isMultiSelection(proposalCreateLinesParams.parmProjId());
        boolean cdsLockingOptionCreateInvoiceProposals = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals);
        ProjTable projTable;
        Query query = new Query();

        QueryBuildDataSource projTableDS = query.addDataSource(tableNum(ProjTable));
        QueryBuildDataSource projStatusTypeRuleDS = projTableDS.addDataSource(tableNum(ProjStatusTypeRule));
        projStatusTypeRuleDS.addLink(fieldNum(ProjTable, Status),fieldNum(ProjStatusTypeRule, ProjStatus));
        projStatusTypeRuleDS.addLink(fieldNum(ProjTable, Type),fieldNum(ProjStatusTypeRule, ProjType));
        projStatusTypeRuleDS.joinMode(JoinMode::ExistsJoin);
        projTableDS.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(queryValue(_projInvoiceTable.ProjInvoiceProjId));
        projStatusTypeRuleDS.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule)).value(queryValue(ProjStatusRule::CreateInvoiceProposal));
        if (proposalCreateLinesParams.parmProjId())
        {
            QueryBuildRange projIdRange = projTableDS.addRange(fieldNum(ProjTable, ProjId));
            if (isMultiProjId)
            {
                projIdRange.value(SysQuery::valueLikeAfter(proposalCreateLinesParams.parmProjId()));
            }
            else
            {
                projIdRange.value(SysQuery::value(proposalCreateLinesParams.parmProjId()));
            }
        }

        if (cdsLockingOptionCreateInvoiceProposals)
        {
            QueryBuildRange projDataSourceRange = projTableDS.addRange(fieldNum(ProjTable, ProjDataSource));
            projDataSourceRange.value(SysQuery::value(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the line creation process for deduction lines only.
    /// </summary>
    /// <remarks>
    /// It assumes that a call to run() has already happened, and we need to query only the deductions due to a split or
    /// any other action that didn't affect the project transactions.
    /// Having a separate method only for deductions improves the performance since only a small subset of entities has
    /// to be considered.
    /// </remarks>
    public void runDeductions()
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, runDeductions)))
        {
            int runDeductionQueryCallCount = 0;
            int deductionTransactionCount = 0;

            delete_from proposalTransDisplayDeduction
            where proposalTransDisplayDeduction.Selected == NoYes::Yes;

            boolean     isMultiProjId            = this.isMultiSelection(proposalCreateLinesParams.parmProjId());
            boolean     isMultiProjInvoiceProjId = this.isMultiSelection(proposalCreateLinesParams.parmProjInvoiceProjId());

            ProjInvoiceTable   projInvoiceTable;

            while select ProjInvoiceProjId from projInvoiceTable
                where !proposalCreateLinesParams.parmProjInvoiceProjId() ||
                (
                     (!isMultiProjInvoiceProjId && projInvoiceTable.ProjInvoiceProjId == proposalCreateLinesParams.parmProjInvoiceProjId()) ||
                     (isMultiProjInvoiceProjId  && projInvoiceTable.ProjInvoiceProjId like proposalCreateLinesParams.parmProjInvoiceProjId())
                )
            {
                if (proposalCreateLinesParams.parmFundingSource())
                {
                    projFundingSourceRefId =  ProjFundingSource::findContractFundingSource(projInvoiceTable.ProjInvoiceProjId, proposalCreateLinesParams.parmFundingSource()).RecId;
                }

                ProjTable          projTable;
                ProjStatusTypeRule projStatusTypeRule;

                while select projTable
                    where projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId &&
                        (!proposalCreateLinesParams.parmProjId() ||
                        ((!isMultiProjId && projTable.ProjId == proposalCreateLinesParams.parmProjId()) || (isMultiProjId && projTable.ProjId like proposalCreateLinesParams.parmProjId())))
                exists join projStatusTypeRule
                    where projTable.status == projStatusTypeRule.ProjStatus &&
                          projTable.Type == projStatusTypeRule.ProjType &&
                          projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal
                {
                    if (!proposalCreateLinesParams.parmServiceOrderTable())
                    {
                        runDeductionQueryCallCount++;
                        deductionTransactionCount += this.runDeductionQuery(this.getQuery(projInvoiceTable.ProjInvoiceProjId, projTable.ProjId, tableNum(ProjOnAccTrans), tableNum(ProjOnAccTransSale)));
                    }
                }
            }

            activityContext.addCustomProperty('runDeductionQueryCallCount', any2Str(runDeductionQueryCallCount));
            activityContext.addCustomProperty('deductionTransactionCount', any2Str(deductionTransactionCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostQuery</Name>
				<Source><![CDATA[
    private int runCostQuery(Query _query)
    {
        QueryRun                    runQuery = new QueryRun(_query);
        ProjCostTrans               projCostTrans;
        int counter = 0;

        while (runQuery.next())
        {
            projCostTrans      = runQuery.get(tableNum(ProjCostTrans));
            // <GBR>
            if ((BrazilParameters::isEnabled() && ProjLinePropertySetup::canCreateProjDebitNote_BR(projCostTrans.ProjId, projCostTrans.CategoryId, proposalCreateLinesParams.parmIsDebitNote())) || !BrazilParameters::isEnabled())
            {
                counter++;
                    
                // </GBR>
                this.doCost(projCostTrans, true, "");
                // <GBR>
            }
            // </GBR>
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDebitNoteTransactions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// filters the expense transactions for the debit note.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    /// ProjInvoiceProjId from ProjProposalJour.
    /// </param>
    /// <param name="_projId">
    /// Project ID from ProjProposalJour.
    /// </param>
    /// <param name="_isFixedPrice">
    /// Boolean flag for Fixed Price
    /// </param>
    public void runDebitNoteTransactions_BR(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId, boolean _isFixedPrice)
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, runDebitNoteTransactions_BR)))
        {
            int costQueryCount = 0;

            if (!_isFixedPrice)
            {
                costQueryCount = this.runCostQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjCostTrans), tableNum(ProjCostTransSale)));
            }

            activityContext.addCustomProperty('costQueryCount', any2Str(costQueryCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeductionQuery</Name>
				<Source><![CDATA[
    private int runDeductionQuery(Query _query)
    {
        QueryRun                     runQuery;
        ProjOnAccTrans               projOnAccTrans;
        int counter = 0;

        _query.dataSourceTable(tableNum(ProjOnAccTrans)).addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(queryValue(ProjOrigin::Deduction));

        runQuery = new QueryRun(_query);

        while (runQuery.next())
        {
            counter++;
            projOnAccTrans      = runQuery.get(tableNum(ProjOnAccTrans));

            this.doDeduction(projOnAccTrans);
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEmplQuery</Name>
				<Source><![CDATA[
    private int runEmplQuery(Query _query)
    {
        QueryRun                    runQuery = new QueryRun(_query);
        ProjEmplTrans               projEmplTrans;
        int counter = 0;

        while (runQuery.next())
        {
            counter++;
            projEmplTrans      = runQuery.get(tableNum(ProjEmplTrans));

            this.doEmpl(projEmplTrans, true, "");
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunForItemQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a instance of <c>QueryRun</c>
    /// </summary>
    /// <param name = "_query">
    ///     Current <c>Query</c>.
    /// </param>
    /// <returns><c>QueryRun</c> object.</returns>
    protected QueryRun queryRunForItemQuery(Query _query)
    {
        QueryRun runQuery = new QueryRun(_query);
        return runQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItemQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the query for <c>ProjItemTrans</c>.
    /// </summary>
    /// <param name = "_query">
    ///     Current <c>Query</c>.
    /// </param>
    /// <returns>The number of <c>ProjItemTrans</c> records returned by the <c>_query</c> passed in.</returns>
    private int runItemQuery(Query _query)
    {
        QueryRun                    runQuery = new QueryRun(_query);
        ProjItemTrans               projItemTrans;
        SMAServiceOrderLine         serviceOrderLine;
        SalesLine                   salesLine;
        int counter = 0;

        if (proposalCreateLinesParams.parmServiceOrderTable())
        {
            while select ProjTransId from serviceOrderLine where
                serviceOrderLine.ServiceOrderId     == proposalCreateLinesParams.parmServiceOrderTable().ServiceOrderId &&
                serviceOrderLine.TransactionType    == SMATransactionType::Item                                         &&
                serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted
            {
                _query.dataSourceTable(tableNum(ProjItemTrans)).addRange(fieldNum(ProjItemTrans, ProjTransIdRef)).value(serviceOrderLine.ProjTransId);
            }

            while select ProjTransId from salesLine
                where salesLine.SalesType      == SalesType::ItemReq                                               &&
                      salesLine.ProjId         == proposalCreateLinesParams.parmServiceOrderTable().ProjId         &&
                      salesLine.ServiceOrderId == proposalCreateLinesParams.parmServiceOrderTable().ServiceOrderId &&
                      salesLine.SalesStatus    == SalesStatus::Invoiced
            {
                _query.dataSourceTable(tableNum(ProjItemTrans)).addRange(fieldNum(ProjItemTrans, ProjTransIdRef)).value(salesLine.ProjTransId);
            }
        }

        runQuery = this.queryRunForItemQuery(_query);

        while (runQuery.next())
        {
            projItemTrans      = runQuery.get(tableNum(ProjItemTrans));

            if (projItemTrans.InventTransId)
            {
                select firstonly DeliveryType from salesLine
                    where salesLine.InventRefTransId == projItemTrans.InventTransId;

                // If the purchase order is created through sales order which has been direct delivered then the corresponding purchase lines should not be considered while creating the invoice proposal.
                if (salesLine && salesLine.DeliveryType == TradeLineDlvType::DropShip)
                {
                    continue;
                }
            }

            counter++;
            this.doItem(projItemTrans, true, "");
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnAccountQuery</Name>
				<Source><![CDATA[
    private int runOnAccountQuery(Query _query)
    {
        QueryRun                     runQuery;
        ProjOnAccTrans               projOnAccTrans;
        int counter = 0;

        //these records are shown in the reconciliation grid.
        _query.dataSourceTable(tableNum(ProjOnAccTrans)).addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(ProjOrigin::Deduction));

        if (!proposalCreateLinesParams.parmIsQueryOnAccTrans())
        {
            _query.dataSourceTable(tableNum(ProjOnAccTrans)).addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(ProjOrigin::Prepayment));
        }

        runQuery = new QueryRun(_query);

        while (runQuery.next())
        {
            counter++;
            projOnAccTrans      = runQuery.get(tableNum(ProjOnAccTrans));

            this.doOnAccount(projOnAccTrans, "");
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRevenueQuery</Name>
				<Source><![CDATA[
    private int runRevenueQuery(Query _query)
    {
        QueryRun                    runQuery = new QueryRun(_query);
        ProjRevenueTrans            projRevenueTrans;
        int counter = 0;

        while (runQuery.next())
        {
            projRevenueTrans = runQuery.get(tableNum(ProjRevenueTrans));

            if ((proposalCreateLinesParams.parmIsQueryRevenueTrans()      && this.isRevenueTrans(projRevenueTrans))      ||
                (proposalCreateLinesParams.parmIsQuerySubscriptionTrans() && this.isSubscriptionTrans(projRevenueTrans)) ||
                (proposalCreateLinesParams.parmIsQueryRevenueTrans()      && this.isRetentionTrans(projRevenueTrans)))
            {
                counter++;
                
                this.doRevenue(projRevenueTrans, "");
            }
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSalesLineQuery</Name>
				<Source><![CDATA[
    protected void runSalesLineQuery(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId)
    {
        #ISOCountryRegionCodes

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, runSalesLineQuery)))
        {
            Query query = this.createSalesLineQuery(_projInvoiceProjId, _projId);

            QueryRun runQuery = new QueryRun(query);

            int salesLineRecordCount = 0;
            int doSalesLineCallCount = 0;

            while (runQuery.next())
            {
                salesLineRecordCount++;

                SalesLine salesLine = runQuery.get(tableNum(SalesLine));

                if (this.checkDoSalesLine(runQuery))
                {
                    ProjFundingSource projFundingSource = ProjFundingSource::fundingSourceFromSalesLine(_projInvoiceProjId, salesLine);
                    ProjFundingSourceId fundingSourceId = proposalCreateLinesParams.parmFundingSource();
                    if ((!fundingSourceId || (fundingSourceId && projFundingSource.FundingSourceId == fundingSourceId)) && this.checkSalesLineWithInDateRange(salesLine))
                    {
                        doSalesLineCallCount++;
                        this.doSalesLine(salesLine, _projInvoiceProjId, true, "");
                    }
                }
            }

            activityContext.addCustomProperty('salesLineRecordCount', any2Str(salesLineRecordCount));
            activityContext.addCustomProperty('doSalesLineCallCount', any2Str(doSalesLineCallCount));

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDoSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks condition to process transactions of type sales.
    /// </summary>
    /// <param name = "_runQuery">
    ///     A <c>QueryRun</c> object holding Sales table header information.
    /// </param>
    /// <returns>
    ///     true for sales type transactions; Otherwise, false.
    /// </returns>
    protected Boolean checkDoSalesLine(QueryRun _runQuery)
    {
        return (!BrazilParameters::isEnabled()
                // only order to be invoiced
                || (proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR() == 0 && this.isSelectedForCancel_BR(_runQuery.get(tableNum(SalesTable))) == false)
                // only orders that match with the invoice to be canceled
                || (proposalCreateLinesParams.parmInvoiceToBeCanceledId_BR() != 0 && this.isSelectedForCancel_BR(_runQuery.get(tableNum(SalesTable))) == true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> instance for the <c>SalesTable</c> and <c>SalesLine</c> tables.
    /// </summary>
    /// <param name = "_projInvoiceProjId">
    /// The <c>ProjInvoiceProjId</c> value.
    /// </param>
    /// <param name = "_projId">
    /// The project ID.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance.
    /// </returns>
    protected Query createSalesLineQuery(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addRange(fieldNum(SalesTable, SalesStatus)).value(SalesQueryRangeUtil::salesStatusCanBeInvoiced());
        qbdsSalesTable.addRange(fieldNum(SalesTable, ProjId)).value(queryValue(_projId));
        qbdsSalesTable.addRange(fieldNum(SalesTable, MCROrderStopped)).value(queryValue(NoYes::No));
               
        QueryBuildDataSource qbdsSalesLine = qbdsSalesTable.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.relations(true);

        if (proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Both || proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Invoices)
        {
            // Include both regular sales orders and subscription sales orders
            qbdsSalesLine.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::Sales));

            qbdsSalesLine.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::Subscription));
        }

        if (proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Both || proposalCreateLinesParams.parmInvoiceTypeSelection() == ProjInvoiceTypeSelection::Creditnotes)
        {
            qbdsSalesLine.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::ReturnItem));
            qbdsSalesLine.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::Journal));
        }

        if (proposalCreateLinesParams.parmCurrencyCodeFixed())
        {
            qbdsSalesLine.addRange(fieldNum(SalesLine, CurrencyCode)).value(queryValue(proposalCreateLinesParams.parmCurrencyCodeFixed()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRunDeductionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the query for deductions should be executed.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    /// The contract ID.
    /// </param>
    /// <param name="_projId">
    /// The project ID.
    /// </param>
    /// <returns>
    /// true if the query should be executed; otherwise, false.
    /// </returns>
    protected boolean shouldRunDeductionQuery(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId)
    {
        return (
            ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQueryOnAccTrans()) 
            || !enableInvoiceProposalCreationgPerfEnhanced)
            && !proposalCreateLinesParams.parmServiceOrderTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransactions</Name>
				<Source><![CDATA[
    protected void runTransactions(ProjInvoiceProjId _projInvoiceProjId, ProjId _projId, boolean _isFixedPrice)
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalCreateLines, runTransactions)))
        {
            int costQueryCount = 0;
            int emplQueryCount = 0;
            int itemQueryCount = 0;
            int revenueQueryCount = 0;
            int onAccountQueryCount = 0;
            int deductionQueryCount = 0;

            invoiceableCache = new Map(Types::String, Types::Integer);

            if (!_isFixedPrice)
            {
                if ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQueryCostTrans())
                || (!enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesParams.parmIsQueryCostTrans()))
                {
                    costQueryCount = this.runCostQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjCostTrans), tableNum(ProjCostTransSale)));
                }

                if ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQueryEmplTrans())
                || (!enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesParams.parmIsQueryEmplTrans()))
                {
                    emplQueryCount = this.runEmplQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjEmplTrans), tableNum(ProjEmplTransSale)));
                }

                if ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQueryItemTrans())
                || (!enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesParams.parmIsQueryItemTrans()))
                {
                    itemQueryCount = this.runItemQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjItemTrans), tableNum(ProjItemTransSale)));
                }

                if ((enableInvoiceProposalCreationgPerfEnhanced && (proposalCreateLinesPerfEnhancedParams.parmIsQueryRevenueTrans() || proposalCreateLinesPerfEnhancedParams.parmIsQuerySubscriptionTrans()))
                || (!enableInvoiceProposalCreationgPerfEnhanced && (proposalCreateLinesParams.parmIsQueryRevenueTrans() || proposalCreateLinesParams.parmIsQuerySubscriptionTrans())))
                {
                    revenueQueryCount = this.runRevenueQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjRevenueTrans), tableNum(ProjRevenueTransSale)));
                }

                if ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQuerySalesLine())
                || (!enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesParams.parmIsQuerySalesLine()))
                {
                    this.runSalesLineQuery(_projInvoiceProjId, _projId);
                }
            }

            if ((enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesPerfEnhancedParams.parmIsQueryOnAccTrans()
                && !proposalCreateLinesParams.parmServiceOrderTable())
            || (!enableInvoiceProposalCreationgPerfEnhanced && proposalCreateLinesParams.parmIsQueryOnAccTrans()
                && !proposalCreateLinesParams.parmServiceOrderTable()))
            {
                onAccountQueryCount = this.runOnAccountQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjOnAccTrans), tableNum(ProjOnAccTransSale)));
            }

            if (this.shouldRunDeductionQuery(_projInvoiceProjId, _projId))
            {
                deductionQueryCount = this.runDeductionQuery(this.getQuery(_projInvoiceProjId, _projId, tableNum(ProjOnAccTrans), tableNum(ProjOnAccTransSale)));
            }

            activityContext.addCustomProperty('costQueryCount', any2Str(costQueryCount));
            activityContext.addCustomProperty('emplQueryCount', any2Str(emplQueryCount));
            activityContext.addCustomProperty('itemQueryCount', any2Str(itemQueryCount));
            activityContext.addCustomProperty('revenueQueryCount', any2Str(revenueQueryCount));
            activityContext.addCustomProperty('onAccountQueryCount', any2Str(onAccountQueryCount));
            activityContext.addCustomProperty('deductionQueryCount', any2Str(deductionQueryCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for ProjId variable.
    /// </summary>
    /// <param name="_projId">
    /// Project ID to be processed.
    /// </param>
    public void setProjId(ProjId _projId)
    {
        proposalCreateLinesParams.parmProjId(_projId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total amount for an invoice proposal.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency code in which  amount is to be calcualated.
    /// </param>
    /// <returns>
    /// Total amount for an invoice proposal.
    /// </returns>
    /// <remarks>
    /// The amount does not include deduction amount, this amount is returned separately.
    /// </remarks>

    public Amount transactionAmount(CurrencyCode _currencyCode = Ledger::accountingCurrency())
    {
        AmountCur   amountCur;

        select sum(LineAmount), sum(IndirectAmount) from proposalTransCreate where
            proposalTransCreate.CurrencyCode == _currencyCode &&
            proposalTransCreate.Selected     == true;

        amountCur = proposalTransCreate.LineAmount + proposalTransCreate.IndirectAmount;

        while select sum(LineAmount), sum(IndirectAmount) from proposalTransCreate group by CurrencyCode where
            proposalTransCreate.CurrencyCode != _currencyCode &&
            proposalTransCreate.Selected     == true
        {
            amountCur += CurrencyExchangeHelper::curAmount2CurAmount(proposalTransCreate.LineAmount + proposalTransCreate.IndirectAmount,
                        proposalTransCreate.CurrencyCode,
                        _currencyCode,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        false);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInvoiceProposalCreateLines construct()
    {
        return new ProjInvoiceProposalCreateLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjInvoiceProposalCreateLines</c> class.
    /// </summary>
    /// <param name="_params">
    /// A container representing a packed instance of <c>ProjInvoiceProposalCreateLinesParams</c> class.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjInvoiceProposalCreateLines</c> class.
    /// </returns>
    public static ProjInvoiceProposalCreateLines newStandard(container _params)
    {
        ProjInvoiceProposalCreateLines       createLines       = ProjInvoiceProposalCreateLines::construct();
        ProjInvoiceProposalCreateLinesParams createLinesParams = ProjInvoiceProposalCreateLinesParams::construct();

        createLinesParams.unpack(_params);

        createLines.parmProposalCreateLinesParams(createLinesParams);

        return createLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareProjIdForQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Modifies a project ID that may contain special characters for use in queries.
    /// </summary>
    /// <param name="_projId">
    /// The project ID to process.
    /// </param>
    /// <returns>
    /// The project ID string to use in a query.
    /// </returns>
    public static ProjId prepareProjIdForQuery(ProjId _projId)
    {
        ProjId	ret = _projId;

        if (strContains(_projId, @'\') || strContains(_projId,'/'))
        {
            ret = SysQuery::value(_projId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setprojCategoryIdItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for ProjCategoryId variable for Item.
    /// </summary>
    /// <param name="_projcategoryId">
    /// Project category ID to be processed.
    /// </param>
    public void setprojCategoryIdItem(ProjCategoryId _projcategoryId)
    {
        proposalCreateLinesParams.parmProjCategoryIdItem(_projcategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setprojCategoryIdFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for ProjCategoryId variable for Fee.
    /// </summary>
    /// <param name="_projcategoryId">
    /// Project category ID to be processed.
    /// </param>
    public void setprojCategoryIdFee(ProjCategoryId _projcategoryId)
    {
        proposalCreateLinesParams.parmProjCategoryIdFee(_projcategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setprojCategoryIdEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for ProjCategoryId variable for Empl.
    /// </summary>
    /// <param name="_projcategoryId">
    /// Project category ID to be processed.
    /// </param>
    public void setprojCategoryIdEmpl(ProjCategoryId _projcategoryId)
    {
        proposalCreateLinesParams.parmProjCategoryIdEmpl(_projcategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setprojCategoryIdExp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for ProjCategoryId variable for Exp.
    /// </summary>
    /// <param name="_projcategoryId">
    /// Project category ID to be processed.
    /// </param>
    public void setprojCategoryIdExp(ProjCategoryId _projcategoryId)
    {
        proposalCreateLinesParams.parmProjCategoryIdExp(_projcategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingUpdateKittingFields_delegate</Name>
				<Source><![CDATA[
    delegate void kittingUpdateKittingFields_delegate(PSATmpProjProposalTrans _proposalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposalCreateLinesPerfEnhancedParams</Name>
				<Source><![CDATA[
    protected void initProposalCreateLinesPerfEnhancedParams()
    {
        proposalCreateLinesPerfEnhancedParams = ProjInvoiceProposalCreateLinesParams::construct();
        proposalCreateLinesPerfEnhancedParams.parmIsQueryCostTrans(false);
        proposalCreateLinesPerfEnhancedParams.parmIsQueryEmplTrans(false);
        proposalCreateLinesPerfEnhancedParams.parmIsQueryItemTrans(false);
        proposalCreateLinesPerfEnhancedParams.parmIsQueryRevenueTrans(false);
        proposalCreateLinesPerfEnhancedParams.parmIsQueryOnAccTrans(false);
        proposalCreateLinesPerfEnhancedParams.parmIsQuerySubscriptionTrans(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specified table buffer.</param>
    protected void skipDatabaseLogAndEvent(Common _table)
    {
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>