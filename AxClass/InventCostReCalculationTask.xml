<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostReCalculationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Recalculates the inventory closing.
/// </summary>
class InventCostReCalculationTask extends InventCostHelpTaskBase implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the recalculation of the inventory closing.
    /// </summary>
    /// <remarks>
    /// If recalculation of the inventory closing has been chosen and
    /// the current date is after the requested inventory closing date a recalculation will be started.
    /// </remarks>
    protected void doRun()
    {
        if (inventClosing.RunRecalculation && DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > inventClosing.TransDate)
        {
            this.runRecalculation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostReCalculationTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostReCalculationTask construct()
    {
        return new InventCostReCalculationTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS63292";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostReCalculationTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostReCalculationTask</c> class.
    /// </returns>
    public static InventCostReCalculationTask newTask(
        Voucher             _voucher,
        TransDate           _transDate
    )
    {
        InventCostReCalculationTask inventCostReCalculationTask = InventCostReCalculationTask::construct();

        inventCostReCalculationTask.parmVoucher(_voucher);
        inventCostReCalculationTask.parmTransDate(_transDate);

        return inventCostReCalculationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRecalculation</Name>
				<Source><![CDATA[
    protected void runRecalculation()
    {
        progress.setText("@SYS63292");
        progress.update();

        InventCostClosingRecalc::newInventClosing(inventClosing).runOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>