<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvCashStateTransStatementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements the controller for rendering and running the <c>LvCashStateTransStatement</c> report.
/// </summary>
public class LvCashStateTransStatementController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        LvCashStateTransStatementContract   contract;

        Query                               query;
        QueryBuildRange                     queryBuildRange;
        QueryBuildDataSource                queryBuildDataSource;
        QueryFilter                         queryFilter;
        CompanyInfo                         companyInfo;
        HcmWorker                           hcmWorker;
        Name                                reportPeriod;

        super();

        contract = this.parmReportContract().parmRdpContract() as LvCashStateTransStatementContract;

        query = this.getFirstQuery();

        queryBuildRange = query.dataSourceTable(tableNum(LvCashStateTrans)).findRange(fieldNum(LvCashStateTrans, TransDate));

        if (queryBuildRange)
        {
            reportPeriod = queryBuildRange.value();
        }
        else
        {
            // Check the filters if period exists
            queryBuildDataSource = query.dataSourceTable(tableNum(LvCashStateTrans));
            queryFilter = query.findQueryFilter(queryBuildDataSource, fieldId2name(tableNum(LvCashStateTrans), fieldNum(LvCashStateTrans, TransDate)));

            if (queryFilter)
            {
                reportPeriod = queryFilter.value();
            }
        }

        companyInfo = CompanyInfo::find();
        hcmWorker = hcmWorker::find(contract.parmHcmWorkerRecId());

        // Initialize the hidden variables for use on the report
        contract.parmReportPeriod(reportPeriod);
        contract.parmTaxAuthorityName(TaxAuthorityAddress::find(contract.parmTaxAuthority()).Name);
        contract.parmCompanyAddress(companyInfo.postalAddress().Address);
        contract.parmCompanyRegistrationNum(companyInfo.RegNum);
        contract.parmEmployeeResponsible(hcmWorker.name());
        contract.parmEmployeePhone(strFmt("@GLS223460", hcmWorker.phone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>LvCashStateTransStatementController</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>LvCashStateTransStatementController</c> class.
    /// </param>
    static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00012, funcName());

        LvCashStateTransStatementController controller = new LvCashStateTransStatementController();

        controller.parmReportName(ssrsReportStr(LvCashStateTransStatement, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>