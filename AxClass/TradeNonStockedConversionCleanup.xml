<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionCleanup</c> class controls the clean up of conversions.
/// </summary>
class TradeNonStockedConversionCleanup
extends RunBaseBatch implements BatchRetryable
{
    DialogField fieldCleanupDate;

    TradeNonStockedConversionCleanupDate cleanupDate;

    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        cleanupDate
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        fieldCleanupDate = dialog.addFieldValue(extendedtypestr(TradeNonStockedConversionCleanupDate), cleanupDate);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        cleanupDate = fieldCleanupDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the conversion clean up.
    /// </summary>
    public void run()
    {
        TradeNonStockedConversion                   tradeNonStockedConversion;
        TradeNonStockedConversionItem               tradeNonStockedConversionItem;
        TradeNonStockedConversionItem               tradeNonStockedConversionItemDelete;
        TradeNonStockedConversionChangeTaskLog      tradeNonStockedConversionChangeTaskLog;
        TradeNonStockedConversionCheckTaskLog       tradeNonStockedConversionCheckTaskLog;
        TradeNonStockedConversionLog                tradeNonStockedConversionLog;
        TradeNonStockedConversionLogParent          tradeNonStockedConversionLogParent;
        boolean                                     recordsFound;

        super();

        ttsbegin;

        select count(RecId) from tradeNonStockedConversion
            exists join tradeNonStockedConversionChangeTaskLog
                where tradeNonStockedConversionChangeTaskLog.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0)
            notexists join tradeNonStockedConversionItem
                where tradeNonStockedConversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    tradeNonStockedConversionItem.Status != TradeNonStockedConversionStatus::Converted;

        if (tradeNonStockedConversion.RecId)
        {
            recordsFound = true;
            delete_from tradeNonStockedConversionCheckTaskLog
                exists join tradeNonStockedConversion
                    where tradeNonStockedConversion.RecId == tradeNonStockedConversionCheckTaskLog.NonStockedConversion
                    exists join tradeNonStockedConversionChangeTaskLog
                        where tradeNonStockedConversionChangeTaskLog.NonStockedConversion == tradeNonStockedConversion.RecId
                        &&    tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0)
                    notexists join tradeNonStockedConversionItem
                        where tradeNonStockedConversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                        &&    tradeNonStockedConversionItem.Status != TradeNonStockedConversionStatus::Converted;

            delete_from tradeNonStockedConversionLog
                exists join tradeNonStockedConversionItem
                    where tradeNonStockedConversionItem.RecId == tradeNonStockedConversionLog.NonStockedConversionItem
                    exists join tradeNonStockedConversion
                        where tradeNonStockedConversion.RecId == tradeNonStockedConversionItem.NonStockedConversion
                        exists join tradeNonStockedConversionChangeTaskLog
                            where tradeNonStockedConversionChangeTaskLog.NonStockedConversion == tradeNonStockedConversion.RecId
                            &&    tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0)
                        notexists join tradeNonStockedConversionItemDelete
                            where tradeNonStockedConversionItemDelete.NonStockedConversion == tradeNonStockedConversion.RecId
                            &&    tradeNonStockedConversionItemDelete.Status != TradeNonStockedConversionStatus::Converted;

            delete_from tradeNonStockedConversionLogParent
                notexists join tradeNonStockedConversionLog
                    where tradeNonStockedConversionLog.RecId == tradeNonStockedConversionLog.NonStockedConversionLogParent;

            tradeNonStockedConversionItemDelete.skipDataMethods(true);
            tradeNonStockedConversionItemDelete.skipDeleteActions(true);
            delete_from tradeNonStockedConversionItemDelete
                exists join tradeNonStockedConversion
                    where tradeNonStockedConversion.RecId == tradeNonStockedConversionItemDelete.NonStockedConversion
                    exists join tradeNonStockedConversionChangeTaskLog
                        where tradeNonStockedConversionChangeTaskLog.NonStockedConversion == tradeNonStockedConversion.RecId
                        &&    tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0)
                    notexists join tradeNonStockedConversionItem
                        where tradeNonStockedConversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                        &&    tradeNonStockedConversionItem.Status != TradeNonStockedConversionStatus::Converted;

            delete_from tradeNonStockedConversion
                exists join tradeNonStockedConversionChangeTaskLog
                    where tradeNonStockedConversionChangeTaskLog.NonStockedConversion == tradeNonStockedConversion.RecId
                    &&    tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0)
                notexists join tradeNonStockedConversionItem
                    where tradeNonStockedConversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                    &&    tradeNonStockedConversionItem.Status != TradeNonStockedConversionStatus::Converted;
        }

        if (recordsFound)
        {
            delete_from tradeNonStockedConversionChangeTaskLog
                where tradeNonStockedConversionChangeTaskLog.ExecutedDateTimeEnd <= DateTimeUtil::newDateTime(cleanupDate, 0);
            info("@SYS324088");
        }
        else
        {
            info("@SYS324089");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionCleanup construct()
    {
        return new TradeNonStockedConversionCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS324068";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        TradeNonStockedConversionCleanup tradeNonStockedConversionCleanup = TradeNonStockedConversionCleanup::construct();

        if (tradeNonStockedConversionCleanup.prompt())
        {
            tradeNonStockedConversionCleanup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>