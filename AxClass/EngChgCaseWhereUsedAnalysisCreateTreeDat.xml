<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EngChgCaseWhereUsedAnalysisCreateTreeDat</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to create the data for where-used analysis tree.
/// </summary>
public class EngChgCaseWhereUsedAnalysisCreateTreeDat
{
    str                 formatCode;

    int                 maxBomLevel;
    int                 maxRouteLevel;
    int                 maxNumberOfLevels;

    boolean             includeBoms;
    boolean             includeRoutes;

    boolean             onlyApprovedBoms;
    boolean             onlyApprovedBomVersions;
    boolean             onlyActiveBomVersions;
    boolean             finishedProductsOfBomVersions;

    boolean             onlyApprovedRoutes;
    boolean             onlyApprovedRouteVersions;
    boolean             onlyActiveRouteVersions;
    boolean             finishedProductsOfRouteVersions;

    Date                plannedEffectiveDate;
    int64               selectedCaseRecId;
    int64               startingInventNodeRecId;

    container           nodes;
    int                 nodeId;

    Set                 recordsForAssociation;
    Set                 expandedRecords;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add new node to the nodes container.
    /// </summary>
    /// <param name="_parentId">
    /// ID of the parent node.
    /// </param>
    /// <param name="_isAssociatedToCase">
    /// Indicates if the record is associated to the case for which the tree is created.
    /// </param>
    /// <param name="_nodeText">
    /// Text for the node that is created.
    /// </param>
    /// <returns>
    /// ID of the newly created node.
    /// </returns>
    /// <remarks>
    /// ID of the newly created node is created from a simple counter which counts the number of nods.
    /// </remarks>
    private int addNewNode(int _parentId, boolean _isAssociatedToCase, str _nodeText)
    {
        nodeId++;
        nodes += [[nodeId, _parentId, _isAssociatedToCase, _nodeText]];

        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds formatted label and value to be used as part of the line in the tree node to the specified node text.
    /// </summary>
    /// <param name="_nodeText">
    /// Node text to which label and value are added.
    /// </param>
    /// <param name="_label">
    /// Label for the node text addition.
    /// </param>
    /// <param name="_value">
    /// Value of the parameter specified by the label.
    /// </param>
    /// <returns>
    /// Formatted node text with the additional label and value if value is not null; otherwise specified node text.
    /// </returns>
    /// <remarks>
    /// LTR is supported (formatCode is used).
    /// Format of the label-value pair is label: value.
    /// Comma is added as a separator between the specified node text and label-value pair.
    /// </remarks>
    private str addToNodeText(str _nodeText, str _label, str _value)
    {
        str     labelValuePair;

        if (_value)
        {
            labelValuePair = strFmt(formatCode, _label, ': ', _value);
            _nodeText = strFmt(formatCode, _nodeText, _nodeText ? ', ' : '', labelValuePair);
        }

        return _nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBomRouteNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create text for the for BOM version or route version tree nodes.
    /// </summary>
    /// <param name="_nodeText">
    /// Existing text for the BOM version or route version tree node.
    /// </param>
    /// <param name="_fromDate">
    /// From date value for the BOM version or Route version.
    /// </param>
    /// <param name="_toDate">
    /// To date value for the BOM version or Route version.
    /// </param>
    /// <param name="_isVersionApproved">
    /// Indicates if BOM version or Route version is approved.
    /// </param>
    /// <returns>
    /// Text extended with version related data for the BOM or route tree node.
    /// </returns>
    /// <remarks>
    /// Dates (_fromDate and _toDate) are formatted with all flags.
    /// </remarks>
    private str createBomRouteNodeText(str _nodeText, Date _fromDate, Date _toDate, boolean _isVersionApproved)
    {
        _nodeText = this.addToNodeText(_nodeText, "@SYS4006601", date2StrUsr(_fromDate, DateFlags::FormatAll));
        _nodeText = this.addToNodeText(_nodeText, "@SYS4006602", date2StrUsr(_toDate, DateFlags::FormatAll));
        _nodeText = this.addToNodeText(_nodeText, "@SYS10158", enum2str(_isVersionApproved));

        return _nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBomTreeNodeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the BOM nodes of the tree.
    /// For each BOM node it finds BOM versions and calls method for creating data for item nodes.
    /// </summary>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record for the item that is part of the BOMs (used as a BOM line).
    /// </param>
    /// <param name="_parentNodeId">
    /// ID of the parent node.
    /// </param>
    /// <param name="_currentLevel">
    /// Current tree expansion level in the tree.
    /// </param>
    /// <remarks>
    /// Tree might look different depending on the selected filters on the <c>EngChgCaseWhereUsedAnalysis</c> form:
    ///     - onlyApprovedBoms,
    ///     - finishedProductsOfBomVersions,
    ///     - plannedEffectiveDate,
    ///     - onlyApprovedBomVersions,
    ///     - onlyActiveBomVersions.
    /// BOM records are also checked for association with the case for which the tree is created
    /// and information is used when adding the new node.
    /// Text for the BOM node is created and used when adding the new node.
    /// </remarks>
    private void createBomTreeNodeData(InventTable _inventTable, int _parentNodeId, int _currentLevel)
    {
        BOM             bomLines;
        BOMTable        bomTable;
        BOMVersion      bomVersion;
        InventTable     inventTable;

        int             newNodeId;
        boolean         isAssociatedToCase;
        str             nodeText;

        while select RecId, BOMId, Name, SiteId, ItemGroupId, Approved from bomTable
            exists join bomLines
            where bomLines.BOMId == bomTable.BOMId
                && bomLines.ItemId == _inventTable.ItemId
                && ((bomLines.FromDate <= plannedEffectiveDate)
                    && (bomLines.ToDate >= plannedEffectiveDate
                        || bomLines.ToDate == datenull()))
        {
            if (!onlyApprovedBoms || bomTable.Approved)
            {
                if (CaseAssociation::find(bomTable, selectedCaseRecId).RecId != 0)
                {
                    isAssociatedToCase = true;
                }
                else
                {
                    recordsForAssociation.add(bomTable);
                    isAssociatedToCase = false;
                }

                nodeText = this.createBomTreeNodeText(bomTable);
                newNodeId = this.addNewNode(_parentNodeId, isAssociatedToCase, nodeText);

                if (finishedProductsOfBomVersions)
                {
                    while select RecId, ItemId, PmfProductType, Product from inventTable
                        join bomVersion
                        where bomVersion.BOMId == bomTable.BOMId
                        && bomVersion.ItemId == inventTable.ItemId
                        && ((bomVersion.FromDate <= plannedEffectiveDate)
                            && (bomVersion.ToDate >= plannedEffectiveDate
                                || bomVersion.ToDate == datenull()))
                    {
                        if ((!onlyApprovedBomVersions || bomVersion.Approved)
                            && (!onlyActiveBomVersions || bomVersion.Active))
                        {
                            this.createItemTreeNodeData(inventTable, newNodeId, _currentLevel, bomVersion, null);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBomTreeNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create text for the BOM tree node.
    /// </summary>
    /// <param name="_bomTable">
    /// <c>BOMTable</c> record for which the text is created.
    /// </param>
    /// <returns>
    /// Text for the BOM tree node.
    /// </returns>
    /// <remarks>
    /// If <c>BOMTable</c> record is null, no text will be created.
    /// The following data is taken directly from the record:
    ///     - BOMId,
    ///     - Name,
    ///     - SiteId,
    ///     - ItemGroupId,
    ///     - Approved.
    /// </remarks>
    private str createBomTreeNodeText(BOMTable _bomTable)
    {
        str     nodeText;

        if (_bomTable != null)
        {
            nodeText = enum2str(_bomTable.PmfBOMFormula);
            nodeText = this.addToNodeText(nodeText, "@SYS5468", _bomTable.BOMId);
            nodeText = this.addToNodeText(nodeText, "@SYS7399", _bomTable.Name);
            nodeText = this.addToNodeText(nodeText, "@SYS103211", _bomTable.SiteId);
            nodeText = this.addToNodeText(nodeText, "@SYS4922", _bomTable.ItemGroupId);
            nodeText = this.addToNodeText(nodeText, "@SYS10158", enum2str(_bomTable.Approved));
        }

        return nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryDimensionNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create text for the inventory dimensions of versions for BOM or route version nodes.
    /// </summary>
    /// <param name="_nodeText">
    /// Existing text for the BOM version or route version tree node.
    /// </param>
    /// <param name="_inventDim">
    /// <c>InventDim</c> record to be used in the text creation.
    /// </param>
    /// <returns>
    /// Text extended with inventory dimensions for the BOM or route tree node.
    /// </returns>
    private str createInventoryDimensionNodeText(str _nodeText, InventDim _inventDim)
    {
        if (_inventDim != null)
        {
            Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                InventProductDimension dim = enum.current();
                _nodeText = this.addToNodeText(_nodeText, dim.label(), _inventDim.(dim.parmInventDimFieldId()));
            }

            _nodeText = this.addToNodeText(_nodeText, "@SYS103211", _inventDim.InventSiteId);
        }

        return _nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTreeNodeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the item nodes of the tree.
    /// For each item node it finds BOMs in which the item is in the BOM lines and routes for which the item has a version.
    /// Also calls method for creating data for BOM and route nodes.
    /// </summary>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record for which the tree node data is created.
    /// </param>
    /// <param name="_parentNodeId">
    /// ID of the parent node.
    /// </param>
    /// <param name="_currentLevel">
    /// Current tree expansion level in the tree.
    /// </param>
    /// <param name="_bomVersion">
    /// BOM version record for the current item; optional.
    /// Default value is null.
    /// </param>
    /// <param name="_routeVersion">
    /// Route version record for the current item; optional.
    /// Default value is null.
    /// </param>
    /// <remarks>
    /// Item records are also checked for association with the case for which the tree is created
    /// and information is used when adding the new node.
    /// Text for the item node is created and used when adding the new node.
    /// </remarks>
    private void createItemTreeNodeData(
        InventTable     _inventTable,
        int             _parentNodeId,
        int             _currentLevel,
        BOMVersion      _bomVersion = null,
        RouteVersion    _routeVersion = null)
    {
        int             newNodeId;
        boolean         isAssociatedToCase;
        str             nodeText;
        EcoResProduct   product = _inventTable.Product();

        if (CaseAssociation::find(_inventTable, selectedCaseRecId).RecId != 0)
        {
            isAssociatedToCase = true;
        }
        else
        {
            recordsForAssociation.add(_inventTable);
        }

        if (CaseAssociation::find(product, selectedCaseRecId).RecId == 0)
        {
            recordsForAssociation.add(product);
        }

        nodeText = this.createItemTreeNodeText(_inventTable, _bomVersion, _routeVersion);
        newNodeId = this.addNewNode(_parentNodeId, isAssociatedToCase, nodeText);

        if (!expandedRecords.in(_inventTable.RecId))
        {
            _currentLevel++;

            if (includeBoms && (_currentLevel >= 0) && (_currentLevel <= maxBOMLevel))
            {
                expandedRecords.add(_inventTable.RecId);
                this.createBOMTreeNodeData(_inventTable, newNodeId, _currentLevel);
            }
            if (includeRoutes && (_currentLevel >= 0) && (_currentLevel <= maxRouteLevel))
            {
                expandedRecords.add(_inventTable.RecId);
                this.createRouteTreeNodeData(_inventTable, newNodeId, _currentLevel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemTreeNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create text for the item tree node.
    /// </summary>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record for which the text is created.
    /// </param>
    /// <param name="_bomVersion">
    /// <c>BOMVersion</c> record to be used in the text creation; optional.
    /// Default value is null.
    /// </param>
    /// <param name="_routeVersion">
    /// <c>RouteVersion</c> record to be used in the text creation; optional.
    /// Default value is null.
    /// </param>
    /// <returns>
    /// Text for the item tree node.
    /// </returns>
    /// <remarks>
    /// If <c>InventTable</c> record is null, no text will be created.
    /// The following data is taken directly from the item record:
    ///     - ItemId,
    ///     - PmfProductType.
    /// If <c>BOMVersion</c> record is specified additional text will be added.
    ///     The following data is taken directly from the BOM version record:
    ///         - FromDate,
    ///         - ToDate,
    ///         - Approved.
    /// If <c>RouteVersion</c> record is specified additional text will be added.
    ///     The following data is taken directly from the route version record:
    ///         - FromDate,
    ///         - ToDate,
    ///         - Approved.
    /// Only one optional record should be specified (i.e. either <c>BOMVersion</c> record or <c>RouteVersion</c> record).
    /// If both are specified, node text will contain both values from BOM version and route version, which is not intended.
    /// </remarks>
    private str createItemTreeNodeText(InventTable _inventTable, BOMVersion _bomVersion = null, RouteVersion _routeVersion = null)
    {
        str             nodeText;
        InventDim       inventDim;

        if (_inventTable != null)
        {
            nodeText = "@SYS14428";
            nodeText = this.addToNodeText(nodeText, "@SYS12836", _inventTable.ItemId);
            nodeText = this.addToNodeText(nodeText, "@SYS133866", _inventTable.Product().productName());
            nodeText = this.addToNodeText(nodeText, "@SYS4922", _inventTable.itemGroupId());
            nodeText = this.addToNodeText(nodeText, "@PRO2618", enum2str(_inventTable.PmfProductType));

            if (_bomVersion != null)
            {
                inventDim = _bomVersion.inventDim();

                nodeText = this.createInventoryDimensionNodeText(nodeText, inventDim);
                nodeText = this.createBomRouteNodeText(nodeText, _bomVersion.FromDate, _bomVersion.ToDate, _bomVersion.Approved);
            }
            if (_routeVersion != null)
            {
                inventDim = _routeVersion.inventDim();

                nodeText = this.createInventoryDimensionNodeText(nodeText, inventDim);
                nodeText = this.createBomRouteNodeText(nodeText, _routeVersion.FromDate, _routeVersion.ToDate, _routeVersion.Approved);
            }
        }

        return nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteTreeNodeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the route nodes of the tree.
    /// For each route node it finds route versions and calls method for creating data for item nodes.
    /// </summary>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record for the item which has a route version.
    /// </param>
    /// <param name="_parentNodeId">
    /// ID of the parent node.
    /// </param>
    /// <param name="_currentLevel">
    /// Current tree expansion level in the tree.
    /// </param>
    /// <remarks>
    /// Tree might look different depending on the selected filters on the <c>EngChgCaseWhereUsedAnalysis</c> form:
    ///     - onlyApprovedRoutes,
    ///     - finishedProductsOfRouteVersions,
    ///     - plannedEffectiveDate,
    ///     - onlyApprovedRouteVersions,
    ///     - onlyActiveRouteVersions.
    /// Route records are also checked for association with the case for which the tree is created
    /// and information is used when adding the new node.
    /// Text for the route node is created and used when adding the new node.
    /// </remarks>
    private void createRouteTreeNodeData(InventTable _inventTable, int _parentNodeId, int _currentLevel)
    {
        RouteTable      routeTable;
        RouteVersion    routeVersion;
        InventTable     inventTable;
        int             newNodeId;
        boolean         isAssociatedToCase;
        str             nodeText;

        while select RecId, RouteId, Name, ItemGroupId, Approved from routeTable
            exists join routeVersion
            where routeVersion.RouteId == routeTable.RouteId
            && routeVersion.ItemId == _inventTable.ItemId
        {
            if (!onlyApprovedRoutes || routeTable.Approved)
            {
                if (CaseAssociation::find(routeTable, selectedCaseRecId).RecId != 0)
                {
                    isAssociatedToCase = true;
                }
                else
                {
                    recordsForAssociation.add(routeTable);
                    isAssociatedToCase = false;
                }

                nodeText = this.createRouteTreeNodeText(routeTable);
                newNodeId = this.addNewNode(_parentNodeId, isAssociatedToCase, nodeText);

                if (finishedProductsOfRouteVersions)
                {
                    while select RecId, ItemId, PmfProductType, Product from inventTable
                        join routeVersion
                        where routeVersion.RouteId == routeTable.RouteId
                        && routeVersion.ItemId == inventTable.ItemId
                        && ((routeVersion.FromDate <= plannedEffectiveDate)
                            && (routeVersion.ToDate >= plannedEffectiveDate
                                || routeVersion.ToDate == datenull()))
                    {
                        if ((!onlyApprovedRouteVersions || routeVersion.Approved)
                            && (!onlyActiveRouteVersions || routeVersion.Active))
                        {
                            this.createItemTreeNodeData(inventTable, newNodeId, _currentLevel, null, routeVersion);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteTreeNodeText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create text for the route tree node.
    /// </summary>
    /// <param name="_routeTable">
    /// <c>RouteTable</c> record for which the text is created.
    /// </param>
    /// <returns>
    /// Text for the route tree node.
    /// </returns>
    /// <remarks>
    /// If <c>RouteTable</c> record is null, no text will be created.
    /// The following data is taken directly from the record:
    ///     - RouteId,
    ///     - Name,
    ///     - ItemGroupId,
    ///     - Approved.
    /// </remarks>
    private str createRouteTreeNodeText(RouteTable _routeTable)
    {
        str     nodeText;

        if (_routeTable != null)
        {
            nodeText =  "@SYS4190";
            nodeText = this.addToNodeText(nodeText, "@SYS21709", _routeTable.RouteId);
            nodeText = this.addToNodeText(nodeText, "@SYS7399", _routeTable.Name);
            nodeText = this.addToNodeText(nodeText, "@SYS4922", _routeTable.ItemGroupId);
            nodeText = this.addToNodeText(nodeText, "@SYS10158", enum2str(_routeTable.Approved));
        }

        return nodeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the creation of the where-used analysis tree data and get the result of the process.
    /// </summary>
    /// <returns>
    /// Container with the data for where-used analysis tree, which can be used to recreate the tree in the UI.
    /// </returns>
    /// <remarks>
    /// The data in the container has the following structure:
    ///     [int id, int parentId, RefTableId recordTableId, boolean isAssociatedToCase, str nodeText],
    ///     - id is the index of the current node (not the same as tree identifier),
    ///     - recordTableId is a table ID for the record for which the tree node is created,
    ///     - isAssociatedToCase indicates if the record is associated to the case for which the tree is created,
    ///     - nodeText is text for the node that is created.
    /// </remarks>
    public container getTreeData()
    {
        InventTable     inventTable;

        inventTable = InventTable::findRecId(startingInventNodeRecId);

        this.createItemTreeNodeData(inventTable, 0, 0);

        return nodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>EngChgCaseWhereUsedAnalysisCreateTreeDat</c> class instance.
    /// Create set of records for association and set of expanded records.
    /// Proper text formatting for the nodes is set depending of the current session language is LTR or RTL.
    /// </summary>
    /// <returns>
    /// True if records for association set and expanded records set are created, false otherwise.
    /// </returns>
    private boolean init()
    {
        recordsForAssociation = new Set(Types::Record);
        expandedRecords = new Set(Types::Int64);

        // Formatting the text according to LTR (left-to-right) or RTL (right-to-left).
        formatCode = GlobalEx::generateStrConcatFormat();
        
        if (recordsForAssociation != null && expandedRecords != null)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinishedProductsOfBomVersions</Name>
				<Source><![CDATA[
    public boolean parmFinishedProductsOfBomVersions(boolean _finishedProductsOfBomVersions = finishedProductsOfBomVersions)
    {
        finishedProductsOfBomVersions = _finishedProductsOfBomVersions;
        return finishedProductsOfBomVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinishedProductsOfRouteVersions</Name>
				<Source><![CDATA[
    public boolean parmFinishedProductsOfRouteVersions(boolean _finishedProductsOfRouteVersions = finishedProductsOfRouteVersions)
    {
        finishedProductsOfRouteVersions = _finishedProductsOfRouteVersions;
        return finishedProductsOfRouteVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeBoms</Name>
				<Source><![CDATA[
    public boolean parmIncludeBoms(boolean _includeBoms = includeBoms)
    {
        includeBoms = _includeBoms;
        return includeBoms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeRoutes</Name>
				<Source><![CDATA[
    public boolean parmIncludeRoutes(boolean _includeRoutes = includeRoutes)
    {
        includeRoutes = _includeRoutes;
        return includeRoutes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxBomLevel</Name>
				<Source><![CDATA[
    public int parmMaxBomLevel(int _maxBomLevel = maxBomLevel)
    {
        maxBomLevel = _maxBomLevel;
        return maxBomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxNumberOfLevels</Name>
				<Source><![CDATA[
    public int parmMaxNumberOfLevels(int _maxNumberOfLevels = maxNumberOfLevels)
    {
        maxNumberOfLevels = _maxNumberOfLevels;
        return maxNumberOfLevels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxRouteLevel</Name>
				<Source><![CDATA[
    public int parmMaxRouteLevel(int _maxRouteLevel = maxRouteLevel)
    {
        maxRouteLevel = _maxRouteLevel;
        return maxRouteLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyActiveBomVersions</Name>
				<Source><![CDATA[
    public boolean parmOnlyActiveBomVersions(boolean _onlyActiveBomVersions = onlyActiveBomVersions)
    {
        onlyActiveBomVersions = _onlyActiveBomVersions;
        return onlyActiveBomVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyActiveRouteVersions</Name>
				<Source><![CDATA[
    public boolean parmOnlyActiveRouteVersions(boolean _onlyActiveRouteVersions = onlyActiveRouteVersions)
    {
        onlyActiveRouteVersions = _onlyActiveRouteVersions;
        return onlyActiveRouteVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApprovedBoms</Name>
				<Source><![CDATA[
    public boolean parmOnlyApprovedBoms(boolean _onlyApprovedBoms = onlyApprovedBoms)
    {
        onlyApprovedBoms = _onlyApprovedBoms;
        return onlyApprovedBoms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApprovedBomVersions</Name>
				<Source><![CDATA[
    public boolean parmOnlyApprovedBomVersions(boolean _onlyApprovedBomVersions = onlyApprovedBomVersions)
    {
        onlyApprovedBomVersions = _onlyApprovedBomVersions;
        return onlyApprovedBomVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApprovedRoutes</Name>
				<Source><![CDATA[
    public boolean parmOnlyApprovedRoutes(boolean _onlyApprovedRoutes = onlyApprovedRoutes)
    {
        onlyApprovedRoutes = _onlyApprovedRoutes;
        return onlyApprovedRoutes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApprovedRouteVersions</Name>
				<Source><![CDATA[
    public boolean parmOnlyApprovedRouteVersions(boolean _onlyApprovedRouteVersions = onlyApprovedRouteVersions)
    {
        onlyApprovedRouteVersions = _onlyApprovedRouteVersions;
        return onlyApprovedRouteVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedEffectiveDate</Name>
				<Source><![CDATA[
    public Date parmPlannedEffectiveDate(Date _plannedEffectiveDate = plannedEffectiveDate)
    {
        if (_plannedEffectiveDate == dateNull())
        {
            plannedEffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            plannedEffectiveDate = _plannedEffectiveDate;
        }
        return plannedEffectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedCaseRecId</Name>
				<Source><![CDATA[
    public int64 parmSelectedCaseRecId(int64 _selectedCaseRecId = selectedCaseRecId)
    {
        selectedCaseRecId = _selectedCaseRecId;
        return selectedCaseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmsRecordsForAssociation</Name>
				<Source><![CDATA[
    public Set parmsRecordsForAssociation(Set _recordsForAssociation = recordsForAssociation)
    {
        recordsForAssociation = _recordsForAssociation;
        return recordsForAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartingInventNodeRecId</Name>
				<Source><![CDATA[
    public int64 parmStartingInventNodeRecId(int64 _startingInventNodeRecId = startingInventNodeRecId)
    {
        startingInventNodeRecId = _startingInventNodeRecId;
        return startingInventNodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static EngChgCaseWhereUsedAnalysisCreateTreeDat construct()
    {
        return new EngChgCaseWhereUsedAnalysisCreateTreeDat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAnalysisCreateTreeDataAndGetTreeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseWhereUsedAnalysisCreateTreeDat</c> class.
    /// </summary>
    /// <param name="_maxNumberOfLevels">
    /// Maximum number of levels for the where-used analysis tree.
    /// </param>
    /// <param name="_maxBomLevel">
    /// Maximum level on which BOMs will be shown.
    /// </param>
    /// <param name="_maxRouteLevel">
    /// Maximum level on which routes will be shown.
    /// </param>
    /// <param name="_plannedEffectiveDate">
    /// Case planned effective date.
    /// </param>
    /// <param name="_includeBoms">
    /// Indicates if BOMs should be shown in the tree.
    /// </param>
    /// <param name="_onlyApprovedBoms">
    /// Indicates if only approved BOMs should be shown in the tree.
    /// </param>
    /// <param name="_onlyApprovedBomVersions">
    /// Indicates if only approved BOM versions should be shown in the tree.
    /// </param>
    /// <param name="_onlyActiveBomVersions">
    /// Indicates if only active BOM versions should be shown in the tree.
    /// </param>
    /// <param name="_finishedProductsOfBomVersions">
    /// Indicates if finished products of BOM versions should be shown in the tree.
    /// </param>
    /// <param name="_includeRoutes">
    /// Indicates if routes should be shown in the tree.
    /// </param>
    /// <param name="_onlyApprovedRoutes">
    /// Indicates if only approved routes should be shown in the tree.
    /// </param>
    /// <param name="_onlyApprovedRouteVersions">
    /// Indicates if only approved route versions should be shown in the tree.
    /// </param>
    /// <param name="_onlyActiveRouteVersions">
    /// Indicates if only active route versions should be shown in the tree.
    /// </param>
    /// <param name="_finishedProductsOfRouteVersions">
    /// Indicates if finished products of route versions should be shown in the tree.
    /// </param>
    /// <param name="_startingInventNodeRecId">
    /// Item recID for which the where-used analysis tree is created.
    /// </param>
    /// <param name="_selectedCaseRecId">
    /// Case recID for which the where-used analysis tree is created.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseWhereUsedAnalysisCreateTreeDat</c> class instance.
    /// </returns>
    public static EngChgCaseWhereUsedAnalysisCreateTreeDat newAnalysisCreateTreeDataAndGetTreeData(
        int     _maxNumberOfLevels,
        int     _maxBomLevel,
        int     _maxRouteLevel,
        Date    _plannedEffectiveDate,
        boolean _includeBoms,
        boolean _onlyApprovedBoms,
        boolean _onlyApprovedBomVersions,
        boolean _onlyActiveBomVersions,
        boolean _finishedProductsOfBomVersions,
        boolean _includeRoutes,
        boolean _onlyApprovedRoutes,
        boolean _onlyApprovedRouteVersions,
        boolean _onlyActiveRouteVersions,
        boolean _finishedProductsOfRouteVersions,
        int64   _startingInventNodeRecId,
        int64   _selectedCaseRecId)
    {
        EngChgCaseWhereUsedAnalysisCreateTreeDat analysisCreateTreeData = EngChgCaseWhereUsedAnalysisCreateTreeDat::construct();

        analysisCreateTreeData.parmMaxNumberOfLevels(_maxNumberOfLevels);
        analysisCreateTreeData.parmMaxBomLevel(_maxBomLevel);
        analysisCreateTreeData.parmMaxRouteLevel(_maxRouteLevel);
        analysisCreateTreeData.parmPlannedEffectiveDate(_plannedEffectiveDate);
        analysisCreateTreeData.parmIncludeBoms(_includeBOMs);
        analysisCreateTreeData.parmOnlyApprovedBoms(_onlyApprovedBoms);
        analysisCreateTreeData.parmOnlyApprovedBomVersions(_onlyApprovedBomVersions);
        analysisCreateTreeData.parmOnlyActiveBomVersions(_onlyActiveBomVersions);
        analysisCreateTreeData.parmFinishedProductsOfBomVersions(_finishedProductsOfBomVersions);
        analysisCreateTreeData.parmIncludeRoutes(_includeRoutes);
        analysisCreateTreeData.parmOnlyApprovedRoutes(_onlyApprovedRoutes);
        analysisCreateTreeData.parmOnlyApprovedRouteVersions(_onlyApprovedRouteVersions);
        analysisCreateTreeData.parmOnlyActiveRouteVersions(_onlyActiveRouteVersions);
        analysisCreateTreeData.parmFinishedProductsOfRouteVersions(_finishedProductsOfRouteVersions);
        analysisCreateTreeData.parmStartingInventNodeRecId(_startingInventNodeRecId);
        analysisCreateTreeData.parmSelectedCaseRecId(_selectedCaseRecId);

        analysisCreateTreeData.init();

        return analysisCreateTreeData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>