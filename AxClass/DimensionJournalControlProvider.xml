<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionJournalControlProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides access to journal control information.
/// </summary>
[ExportMetadataAttribute("DimensionIJournalControlProvider", "DefaultProvider"),ExportAttribute("Dynamics.AX.Application.DimensionIJournalControlProvider")]
public class DimensionJournalControlProvider implements DimensionIJournalControlProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>restrictQueryForJournalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension constraint tree corresponding to the the journal control detail for the specified journal name and company.
    /// </summary>
    /// <param name = "_dimensionHierarchyRecId">The dimension hierarchy for which to find the journal control detail.</param>
    /// <param name = "_originalCompany">The company of the journal.</param>
    /// <param name = "_dataAreaId">The company for which to find the journal control details.</param>
    /// <param name = "_journalName">The journal name.</param>
    /// <returns>The record ID of the dimension constraint tree.</returns>
    public RecId restrictQueryForJournalControl(RefRecId _dimensionHierarchyRecId, dataAreaId _originalCompany, DataAreaId _dataAreaId, str _journalName)
    {
        LedgerJournalControlHeader  ledgerJournalControlHeader;
        LedgerJournalControlDetail  ledgerJournalControlDetail;
        CompanyInfo                 currentLegalEntity;
        RecId                       dimConstraintTreeId;

        // Restrict values based on journal control for the company the journal exists in.
        changecompany(_originalCompany)
        {
            currentLegalEntity = CompanyInfo::findDataArea(_dataAreaId);

            ledgerJournalControlHeader = LedgerJournalControlHeader::findByJournalNameCompanyAccountType(
                _journalName,
                currentLegalEntity.RecId,
                LedgerJournalACTypeAll::Ledger);

            if (ledgerJournalControlHeader)
            {
                select firstonly DimensionConstraintTree from ledgerJournalControlDetail
                    where ledgerJournalControlDetail.LedgerJournalControl == ledgerJournalControlHeader.RecId &&
                        ledgerJournalControlDetail.LedgerLegalEntity == currentLegalEntity.RecId &&
                        ledgerJournalControlDetail.DimensionHierarchy == _dimensionHierarchyRecId;

                dimConstraintTreeId = ledgerJournalControlDetail.DimensionConstraintTree;
            }
        }

        return dimConstraintTreeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension validation status based on journal control setup.
    /// </summary>
    /// <param name = "_ledgerDimensionAccountController">The account controller for which to get the dimension validation status.</param>
    /// <param name = "_originalCompany">The company of the journal.</param>
    /// <param name = "_errorMessages">The output parameter to capture any resulting error messages.</param>
    /// <param name = "_dataAreaId">The company for which to find the journal control details.</param>
    /// <param name = "_currentSegments">The current segments to be validated.</param>
    /// <param name = "_dimensionStorage">The <c>DimensionStorage</c> instance; optional.</param>
    /// <returns>The dimension validation status.</returns>
    public DimensionValidationStatus validateCombination(LedgerDimensionAccountController _ledgerDimensionAccountController, DataAreaId _originalCompany, List _errorMessages, DataAreaId _dataAreaId, Array _currentSegments, DimensionStorage _dimensionStorage = null)
    {
        DimensionValidationStatus validationStatus = DimensionValidationStatus::Valid;
        LedgerJournalControlHeader ledgerJournalControlHeader;
        DimensionStorage dimStorage = _dimensionStorage;
        DimensionValidationRequest request;
        LedgerDimensionValidationRequest ledgerRequest;
        DimensionValidationStatusContract status;
        LegalEntityRecId currentLegalEntityRecId;

        changeCompany(_dataAreaId)
        {
            currentLegalEntityRecId = CompanyInfo::current(_dataAreaId);

            if (_dimensionStorage == null && _ledgerDimensionAccountController.getAccountStructure())
            {
                dimStorage = _ledgerDimensionAccountController.getDimensionStorage(true);
            }

            if (dimStorage && _currentSegments.lastIndex() > 0)
            {
                request = DimensionValidationRequest::newForDimensionStorage(dimStorage, _ledgerDimensionAccountController.parmControlDate());
                request.parmDoValueActiveDatesValidation(!_ledgerDimensionAccountController.parmDoValueActiveDatesValidation());
                request.parmDoValueSuspendedValidation(!_ledgerDimensionAccountController.parmDoValueSuspendedValidation());
                
                ledgerRequest = request as LedgerDimensionValidationRequest;
                if (ledgerRequest)
                {
                    ledgerRequest.parmDoValidateFixedDimensions(_ledgerDimensionAccountController.parmValidateFixedDimensions());
                    ledgerRequest.parmDoValidateDerivedDimensionPreventChanges(true); 
                    status = DimensionValidation::getStatus(ledgerRequest);
                }
                else
                {
                    status = DimensionValidation::getStatus(request);
                }

                status.displayValidationMessages();

                validationStatus = status.parmValidationStatus();

                if (validationStatus != DimensionValidationStatus::StructureChanged)
                {
                    // Journal control validation needs to be done in the company the journal exist in.
                    changecompany(_originalCompany)
                    {
                        ledgerJournalControlHeader = LedgerJournalControlHeader::findByJournalNameCompanyAccountType(
                            _ledgerDimensionAccountController.parmJournalName(),
                            currentLegalEntityRecId,
                            LedgerJournalACTypeAll::Ledger);

                        // Validate by journal control
                        List validateByJournalNameForCombinationErrors = new List(Types::String);

                        if (ledgerJournalControlHeader &&
                            !DimensionValidationHelper::validateByJournalNameForCombination(
                                currentLegalEntityRecId,
                                dimStorage,
                                _ledgerDimensionAccountController.parmJournalName(),
                                ledgerJournalControlHeader.RecId,
                                true,
                                validateByJournalNameForCombinationErrors))
                        {
                            validationStatus = DimensionValidationStatus::Invalid;
                        }

                        if (validateByJournalNameForCombinationErrors)
                        {
                            _errorMessages.appendList(validateByJournalNameForCombinationErrors);
                        }
                    }
                }
            }
        }

        return validationStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>