<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkAdhocApportionmentEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkAdhocApportionmentEngine</c> class processes ad-hoc apportionment requests.
/// </summary>
public static class TMSFwkAdhocApportionmentEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes ad-hoc apportionment requests for a transaction.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    public static void process(TmsTransactionFacade _transactionFacade)
    {
        // get all apportionment requests
        XElementListEnumerator apportionments = new XElementList(_transactionFacade.parmRequest().Descendants(ElementXmlConstants::Apportionment))
            .GetListEnumerator();

        while (apportionments.MoveNext())
        {
            XElement apportionment = apportionments.Current();

            Amount amountApportioned = 0;
            Amount totalRoundingRemainder = 0;
            int detailCounter = 1;

            Amount amountToApportion = apportionment.GetDecimal(ElementXmlConstants::Amount);
            var details = new XElementList(apportionment.Descendants(ElementXmlConstants::Detail));
            TMSRateUnit totalUnits = details.SumElementsDecimal(ElementXmlConstants::Unit);

            XElementListEnumerator detailsEnumnerator = details.GetListEnumerator();
            while (detailsEnumnerator.MoveNext())
            {
                XElement detail = detailsEnumnerator.Current();
                Amount amount = 0;

                if (detailCounter == details.Count)
                {
                    // if last detail, just subtract from subtotal
                    amount = amountToApportion - amountApportioned;
                }
                else
                {
                    // otherwise apportion that
                    TMSRateUnit units = detail.GetDecimal(ElementXmlConstants::Unit);
                    Amount unroundedAmount = (units / totalUnits) * amountToApportion;
                    amount = System.Math::Round(unroundedAmount, 2);

                    Amount roundingRemainder = unroundedAmount - amount;
                    totalRoundingRemainder += roundingRemainder;

                    // if we have built up over a cent of remainder, ensure that it is accounted for
                    if (abs(totalRoundingRemainder) >= 0.01)
                    {
                        Amount delta = roundingRemainder > 0 ? 0.01 : -0.01;
                        amount += delta;
                        totalRoundingRemainder -= delta;
                    }

                    amountApportioned += amount;
                }

                detail.Add(new XElement(ElementXmlConstants::Amount, amount));

                detailCounter++;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>