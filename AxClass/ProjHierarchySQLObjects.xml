<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHierarchySQLObjects</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjHierarchySQLObjects</c> class manages SQL Server objects for Project hierarchy.
/// </summary>
class ProjHierarchySQLObjects extends ApplicationSQLObjects
{
    private const str splitByIntegerFunc = 'ProjSplitIntegerByDelimeter';
    private const str incrementSubStringFunc = 'ProjIncrementSubStringByDelimeter';
    private const str replaceSubStringFunc = 'ProjReplaceSubStringByDelimeter';
    private const str replacePrefixFunc = 'ProjReplacePrefixByDelimeter';

	// Force ProjHierarchySQL objects to be instantiated upon referencing this class
    private static boolean initSuccess = ProjHierarchySQLObjects::createAll();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the project hierarchy SQL objects.
    /// </summary>
    /// <param name="_forceCreate">
    /// Indicates whether to force creating all the project hierarchy SQL objects
    /// regardless of the state of the cache or the existing objects; optional.
    /// </param>
    /// <returns>
    /// true if the object creation was successful or already exists; False if the creation of the SQL objects failed.
    /// </returns>
    public static boolean createAll(boolean _forceCreate = false)
    {
        boolean isSuccessful = true;
        container cachedResult;
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        ProjHierarchySQLObjects hierarchySQLObjects;

        if (_forceCreate || objectCache.find(classStr(ProjHierarchySQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey) == connull())
        {
            hierarchySQLObjects = new ProjHierarchySQLObjects();
            hierarchySQLObjects.initialize();

            if (_forceCreate ||
                !hierarchySQLObjects.existFunction(splitByIntegerFunc) ||
                !hierarchySQLObjects.existFunction(incrementSubStringFunc) ||
                !hierarchySQLObjects.existFunction(replaceSubStringFunc) ||
                !hierarchySQLObjects.existFunction(replacePrefixFunc))
            {
                isSuccessful = hierarchySQLObjects.createSqlObjects();
            }

            if (isSuccessful)
            {
                // Add the SQL objects created indicator to the cache.
                objectCache.insert(classStr(ProjHierarchySQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey, [true]);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitByIntegerFuncName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL name of the 'split by integer' function.
    /// </summary>
    /// <returns>
    /// The SQL name of the 'split by integer' function.
    /// </returns>
    public static str getSplitByIntegerFuncName()
    {
        return splitByIntegerFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncrementSubStringFuncName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL name of the 'increment substring' function.
    /// </summary>
    /// <returns>
    /// The SQL name of the 'increment substring' function.
    /// </returns>
    public static str getIncrementSubStringFuncName()
    {
        return incrementSubStringFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplaceSubStringFuncName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL name of the 'replace substring' function.
    /// </summary>
    /// <returns>
    /// The SQL name of the 'replace substring' function.
    /// </returns>
    public static str getReplaceSubStringFuncName()
    {
        return replaceSubStringFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplacePrefixFuncName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL name of the 'replace prefix' function.
    /// </summary>
    /// <returns>
    /// The SQL name of the 'replace prefix' function.
    /// </returns>
    public static str getReplacePrefixFuncName()
    {
        return replacePrefixFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the project hierarchy SQL functions.
    /// </summary>
    /// <returns>
    /// true if the function creation commands were successful; otherwise, false.
    /// </returns>
    public boolean createFunctions()
    {
        boolean isSuccessful;

        isSuccessful = this.createProjectHierarchyFunction(splitByIntegerFunc)
            && this.createProjectHierarchyFunction(incrementSubStringFunc)
            && this.createProjectHierarchyFunction(replaceSubStringFunc)
            && this.createProjectHierarchyFunction(replacePrefixFunc);

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectHierarchyFunction</Name>
				<Source><![CDATA[
    private boolean createProjectHierarchyFunction(str _functionName)
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the function.
        isSuccessful = this.dropFunction(_functionName);

        if (isSuccessful)
        {
            switch (_functionName)
            {
                case splitByIntegerFunc:
                    sqlStatementText = this.getSplitByIntegerFunc();
                    isSuccessful = this.executeSqlStatement(sqlStatementText);
                    break;
                case incrementSubStringFunc:
                    sqlStatementText = this.getIncrementSubStringFunc();
                    isSuccessful = this.executeSqlStatement(sqlStatementText);
                    break;
                case replaceSubStringFunc:
                    sqlStatementText = this.getProjReplaceSubStringByDelimeterFunc();
                    isSuccessful = this.executeSqlStatement(sqlStatementText);
                    break;
                case replacePrefixFunc:
                    sqlStatementText = this.getProjReplacePrefixByDelimeterFunc();
                    isSuccessful = this.executeSqlStatement(sqlStatementText);
                    break;
            }
            
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitByIntegerFunc</Name>
				<Source><![CDATA[
    private str getSplitByIntegerFunc()
    {
        str sqlStatementText;

        sqlStatementText = @"
            CREATE FUNCTION " + splitByIntegerFunc + @"
            (
                @input AS NVARCHAR(MAX),
                @delimeter AS NVARCHAR(100),
                @position AS INT
            ) RETURNS INT
            AS
            BEGIN
            DECLARE @startPosition AS INT
            DECLARE @endPosition AS INT
            DECLARE @returnInt AS INT
            SET @endPosition = -1
            SET @returnInt = 0
            WHILE (@position > 0 and @endPosition != 0) BEGIN
                SET @startPosition = @endPosition + 1
                SET @endPosition = charindex(@delimeter, @input, @startPosition)
                IF(@position = 1) BEGIN
                    IF(@endPosition = 0) BEGIN
                        SET @endPosition = len(@input) + 1
                    END
                    SET @returnInt = substring(@input, @startPosition, @endPosition - @startPosition)
                END
                SET @position = @position - 1
            END
            RETURN @returnInt
            END ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncrementSubStringFunc</Name>
				<Source><![CDATA[
    private str getIncrementSubStringFunc()
    {
        str sqlStatementText;

        sqlStatementText = @"
            CREATE FUNCTION " + incrementSubStringFunc + @"
            (
                @input AS NVARCHAR(MAX),
                @delimeter AS NVARCHAR(100),
                @position AS INT,
                @increment AS INT
            ) RETURNS NVARCHAR(MAX)
            AS
            BEGIN
            DECLARE @startPosition AS INT
            DECLARE @endPosition AS INT
            DECLARE @inputLen AS INT
            DECLARE @orgPosition AS INT
            DECLARE @returnString AS NVARCHAR(MAX)
            SET @inputLen = len(@input)
            SET @orgPosition = @position
            SET @endPosition = -1
            WHILE (@position > 0 and @endPosition != 0) BEGIN
                SET @startPosition = @endPosition + 1
                SET @endPosition = charindex(@delimeter, @input, @startPosition)
                IF(@position = 1) BEGIN
                    IF(@endPosition = 0)
                    SET @endPosition = @inputLen + 1
                    SET @returnString = CONVERT(NVARCHAR(MAX), CONVERT(INT, substring(@input, @startPosition, @endPosition - @startPosition)) + @increment) +
                    substring(@input, @endPosition, @inputLen)
                    IF (@orgPosition > 1) BEGIN
                        SET @returnString = substring(@input, 1, @startPosition - 1) + @returnString
                    END
                END
                SET @position = @position - 1
            END
            RETURN @returnString
            END ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjReplaceSubStringByDelimeterFunc</Name>
				<Source><![CDATA[
    private str getProjReplaceSubStringByDelimeterFunc()
    {
        str sqlStatementText;

        sqlStatementText = @"
            CREATE FUNCTION " + replaceSubStringFunc + @"
            (
                @input AS NVARCHAR(MAX),
                @delimeter AS NVARCHAR(100),
                @position AS INT,
                @replaceString AS NVARCHAR(100)
            ) RETURNS NVARCHAR(MAX)
            AS
            BEGIN
            DECLARE @startPosition AS INT
            DECLARE @endPosition AS INT
            DECLARE @inputLen AS INT
            DECLARE @orgPosition AS INT
            DECLARE @returnString AS NVARCHAR(MAX)
            DECLARE @returnStringSecondHalf AS NVARCHAR(MAX)
            SET @inputLen = LEN(@input)
            SET @orgPosition = @position
            SET @endPosition = -1
            SET @returnString = @replaceString
            WHILE (@position > 0 and @endPosition != 0) BEGIN
                SET @startPosition = @endPosition + 1
                SET @endPosition = CHARINDEX(@delimeter, @input, @startPosition)
                IF(@position = 1) BEGIN
                    IF(@endPosition = 0)
                    SET @endPosition = @inputLen + 1
                    SET @returnStringSecondHalf = SUBSTRING(@input, @endPosition + 1, @inputLen)
                    IF (@returnString != '' AND @returnStringSecondHalf != '') BEGIN
                        SET @returnString = @returnString + @delimeter + @returnStringSecondHalf
                    END
                    ELSE IF (@returnStringSecondHalf != '') BEGIN
                        SET @returnString = @returnStringSecondHalf
                    END
                    IF (@orgPosition > 1) BEGIN
                        IF (@returnString != '') BEGIN
                            SET @returnString = @delimeter + @returnString
                        END
                        SET @returnString = SUBSTRING(@input, 1, @startPosition - 2) + @returnString
                    END
                END
                SET @position = @position - 1
            END
            RETURN @returnString
            END ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjReplacePrefixByDelimeterFunc</Name>
				<Source><![CDATA[
    private str getProjReplacePrefixByDelimeterFunc()
    {
        str sqlStatementText;

        sqlStatementText = @"
            CREATE FUNCTION " + replacePrefixFunc + @"
            (
                @input AS NVARCHAR(MAX),
                @delimeter AS NVARCHAR(100),
                @position AS INT,
                @replaceString AS NVARCHAR(100)
            ) RETURNS NVARCHAR(MAX)
            AS BEGIN
            DECLARE @startPosition AS INT
            DECLARE @endPosition AS INT
            DECLARE @inputLen AS INT
            DECLARE @returnString AS NVARCHAR(MAX)
            SET @returnString = '';
            SET @inputLen = LEN(@input)
            SET @endPosition = -1
            WHILE (@position > 0 and @endPosition != 0) BEGIN
                SET @startPosition = @endPosition + 1
                SET @endPosition = CHARINDEX(@delimeter, @input, @startPosition)
                IF(@position = 1) BEGIN
                    IF(@endPosition = 0)
                    SET @endPosition = @inputLen + 1
                    SET @returnString = @replaceString + SUBSTRING(@input, @endPosition, @inputLen)
                END
                SET @position = @position - 1
            END
            RETURN @returnString
            END ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>