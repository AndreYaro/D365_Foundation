<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTTDSCalculation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTTDSCalculation_IN</c> class is used for Indian GST TDS Calculation.
/// </summary>
internal class TaxGSTTDSCalculation_IN
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGSTAmountsForSpecReference_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the GST amount of the associated records in the <c>SpecTrans</c> table in the specified currency.
    /// Refer to method SpecTransManager::getTotalSettleAmountForSpecReference().
    /// </summary>
    public static container getGSTAmountsForSpecReference_IN(
        CompanyId _specCompany,
        tableId _specTableId,
        RefRecId _specRecId,
        CurrencyCode _specCurrency,
        CompanyId _specCurrencyCompany,
        TransDate _exchRateDate,
        ExchRate _exchRate = 0)
    {
        #ISOCountryRegionCodes
        SpecTrans specTrans;
        AmountCur totalInvoiceSettleAmount;
        AmountCur totalGSTAmountToExclude;
        CustVendTrans custVendTrans;
        CustVendInvoiceJour custVendInvoiceJour;
        AmountCur invoiceSettleAmount;
        AmountCur gstAmountToExclude;

        // Loop through all SpecTrans in the current spec set, convert amount to given currency & add to total
        while select crossCompany specTrans
            where specTrans.SpecCompany == _specCompany
                && specTrans.SpecTableId == _specTableId
                && specTrans.SpecRecId == _specRecId
        {
            // Get the currency for the marked transaction
            switch (specTrans.RefTableId)
            {
                case tableNum(CustTransOpen), tableNum(CustSettlement):
                    custVendTrans = specTrans.custTrans();
                    custVendInvoiceJour = TaxGSTTDSCalculation_IN::getInvoiceJournalByCustVendTrans(custVendTrans);
                    break;

                case tableNum(VendTransOpen), tableNum(VendSettlement):
                    custVendTrans = specTrans.vendTrans();
                    custVendInvoiceJour = TaxGSTTDSCalculation_IN::getInvoiceJournalByCustVendTrans(custVendTrans);
                    break;

                default:
                    Debug::assert(false);
                    break;
            }

            if (!custVendTrans || !custVendInvoiceJour)
            {
                continue;
            }

            [invoiceSettleAmount, gstAmountToExclude] = TaxGSTTDSCalculation_IN::calculateGSTAmounts_IN(
                specTrans,
                custVendInvoiceJour.InvoiceAmount,
                custVendTrans.AmountCur,
                custVendInvoiceJour.SumTax);

            totalInvoiceSettleAmount += TaxGSTTDSCalculation_IN::convertAmountByCurrency(
                invoiceSettleAmount,
                custVendTrans,
                specTrans,
                _specCurrency,
                _specCurrencyCompany,
                _exchRateDate,
                _exchRate);

            totalGSTAmountToExclude += TaxGSTTDSCalculation_IN::convertAmountByCurrency(
                gstAmountToExclude,
                custVendTrans,
                specTrans,
                _specCurrency,
                _specCurrencyCompany,
                _exchRateDate,
                _exchRate);
        }

        return [totalInvoiceSettleAmount, totalGSTAmountToExclude];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGSTAmounts_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates how much invoice amount and tax amount are settled during this transaction according to the percentage of payment amount of the total payment amount.
    /// </summary>
    /// <param name = "_specTrans"></param>
    /// <param name = "_invoiceAmountTotal">The total invoice amount including Indian GST.</param>
    /// <param name = "_invoicePaymentTotal">The total payment amount, which could be different from invoice amount.</param>
    /// <param name = "_invoiceTaxTotal">The total invoice tax amount.</param>
    /// <returns>The container with invoice settled amount and gst amount to be excluded.</returns>
    private static container calculateGSTAmounts_IN(
        SpecTrans _specTrans,
        Amount _invoiceAmountTotal,
        Amount _invoicePaymentTotal,
        Amount _invoiceTaxTotal)
    {
        AmountCur invoiceSettleAmount;
        AmountCur gstAmountToExclude;
        real invoiceSettlePercentage;

        if (_specTrans.FullSettlement)
        {
            invoiceSettlePercentage = 1;
        }
        else
        {
            invoiceSettlePercentage = (_invoicePaymentTotal) ? (_specTrans.Balance01 + _specTrans.CashDiscToTake) / _invoicePaymentTotal : 0;
        }

        invoiceSettleAmount = _invoiceAmountTotal * invoiceSettlePercentage;
        gstAmountToExclude = _invoiceTaxTotal * invoiceSettlePercentage;

        return [invoiceSettleAmount, gstAmountToExclude];
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmountByCurrency</Name>
				<Source><![CDATA[
    private static AmountCur convertAmountByCurrency(
        AmountCur _amountToConvert,
        CustVendTrans _custVendTrans,
        SpecTrans _specTrans,
        CurrencyCode _specCurrency,
        CompanyId _specCurrencyCompany,
        TransDate _exchRateDate,
        ExchRate _exchRate = 0)
    {
        AmountCur convertedAmount;
        CompanyId specCompanyCurrency;
        CompanyId refCompanyCurrency;
        AmountMST refAmountMst;
        CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(_specCurrencyCompany).RecId), _exchRateDate);

        if (_custVendTrans.CurrencyCode == _specCurrency)
        {
            // Currencies are the same, no conversion needed, add to total
            convertedAmount = _amountToConvert;
        }
        else if (_specTrans.CrossRate != 0)
        {
            // CrossRate is specified, translate directly from Ref currency to Spec currency, round result
            convertedAmount = CurrencyExchange::round(CurrencyExchange::calculateAmount(_amountToConvert, _specTrans.CrossRate), _specCurrency);
        }
        else
        {
            // Set helper to convert to Ref company currency - use rate from RefCompany
            currencyHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(_specTrans.RefCompany).RecId));
            refAmountMst = currencyHelper.calculateTransactionToAccounting(_custVendTrans.CurrencyCode, _amountToConvert, false);

            if (_specTrans.RefCompany != _specCurrencyCompany)
            {
                changecompany(_specTrans.RefCompany)
                {
                    refCompanyCurrency = CompanyInfoHelper::standardCurrency();
                    currencyHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(_specTrans.RefCompany).RecId));
                }

                changecompany(_specCurrencyCompany)
                {
                    specCompanyCurrency = CompanyInfoHelper::standardCurrency();
                }

                if (refCompanyCurrency != specCompanyCurrency)
                {
                    // Convert to spec ref company currency, interim result unrounded
                    refAmountMst = currencyHelper.calculateAccountingToTransaction(specCompanyCurrency, refAmountMst, false);
                }
            }

            // Set helper to convert to Spec currency
            currencyHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(_specCurrencyCompany).RecId));

            if (_exchRate != 0)
            {
                // Convert to spec currency - use exchange rate passed in, round result
                // Note: we need to take the reciprocal of the exchange rate here because CurrencyExchHelper::calculateAmount
                // method actually treats the exchange rate passed in as an 100 based ratio on the amount passed in.
                refAmountMst = CurrencyExchange::calculateAmount(refAmountMst, (100 * 100 / _exchRate));
                convertedAmount = CurrencyExchange::round(refAmountMst, _specCurrency);
            }
            else
            {
                // Convert to spec currency - lookup rate, round result
                convertedAmount = currencyHelper.calculateAccountingToTransaction(_specCurrency, refAmountMst, true);
            }
        }

        return convertedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJournalByCustVendTrans</Name>
				<Source><![CDATA[
    private static CustVendInvoiceJour getInvoiceJournalByCustVendTrans(CustVendTrans _custVendTrans)
    {
        CustVendInvoiceJour invoiceJournal;

        if (_custVendTrans.TransType == LedgerTransType::Project)
        {
            invoiceJournal = ProjInvoiceJour::find(_custVendTrans.Invoice, _custVendTrans.TransDate);
        }
        else
        {
            switch (_custVendTrans.TableId)
            {
                case tableNum(CustTrans):
                    CustTrans custTrans = _custVendTrans;
                    invoiceJournal = custTrans.custInvoiceJour_RU();
                    break;

                case tableNum(VendTrans):
                    VendTrans vendTrans = _custVendTrans;
                    invoiceJournal = vendTrans.vendInvoiceJour();
                    break;
            }
        }

        return invoiceJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>