<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventModelType_NonValuated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventModelType_NonValuated</c> class implements the Non-Valuated inventory model.
/// </summary>
internal class InventModelType_NonValuated extends InventModelType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTransactionAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether you can adjust an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record to adjust.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// The <c>InventTransOrigin</c> record that is related to the <c>inventTrans</c> record.
    /// </param>
    /// <returns>
    /// true if it can adjust an inventory transactions; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean allowTransactionAdjustment(InventTrans _inventTrans = null, InventTransOrigin _inventTransOrigin = null)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheFinancialOnhandOnFinancialUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the financial update of the inventory transactions should cache the financial
    /// on-hand inventory.
    /// </summary>
    /// <returns>
    /// true if the financial update of the inventory transactions should cache the financial on-hand
    /// inventory; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean cacheFinancialOnhandOnFinancialUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheFinancialOnhandOnPhysicalUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the physical update of the inventory transactions should cache the financial
    /// available inventory.
    /// </summary>
    /// <returns>
    /// true if the physical update of the inventory transactions should cache the financial on-hand
    /// inventory; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean cacheFinancialOnhandOnPhysicalUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory available is valid.
    /// </summary>
    /// <param name="_inventOnhand">
    /// The <c>inventOnHand</c> object.
    /// </param>
    /// <param name="_checkOnly">
    /// A Boolean value that indicates whether no exceptions will be thrown.
    /// </param>
    /// <returns>
    /// true if the inventory available is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The check is implemented to make sure calculations done in parallel do not conflict.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    /// The inventory available is invalid because of an update conflict.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The inventory available is invalid because of an error.
    /// </exception>
    [Hookable(false)]
    public boolean checkInventOnHand(InventOnhand _inventOnhand, boolean _checkOnly = false)
    {
        // The on-hand check can be valuable to detect if incorrect data is created.
        InventSum   inventSum   = _inventOnhand.inventSumWithoutAvailability(true);
        Qty         postedQty   = inventSum.PostedQty - inventSum.Deducted + inventSum.Received;
        CostAmount  postedValue = inventSum.PostedValue + inventSum.PhysicalValue;
        CostAmount  expectedAmount = 0.0;

        if (postedValue != 0.0)
        {
            if (_checkOnly)
            {
                return false;
            }
            CostManagementInstrumentationLogger logger =  CostManagementInstrumentationLogger::createLogger(classStr(InventModelType_NonValuated));
            using (var inventModelTypeActivityContext = logger.inventModelTypeActivities().checkInventOnHand(
                classStr(InventModelType_NonValuated),
                inventSum.InventDimId,
                InventTable::find(inventSum.ItemId).RecId,
                postedQty,
                postedValue,
                expectedAmount))
            {
                throw error(strFmt("@SCM:ErrorMessage_CheckInventOnHand_NotMatchInventoryQuantity", postedValue, postedQty, inventSum.InventDimId, inventSum.ItemId));
            }
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cost for one piece.
    /// </summary>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> record for which to determine the cost.
    /// </param>
    /// <param name="_inventModelGroup">
    /// The <c>InventModelGroup</c> record related to the item.
    /// </param>
    /// <param name="_onHandOnly">
    /// A Boolean value that indicates whether to return 0 if the on-hand quantity or values is less than
    /// or equal zero.
    /// </param>
    /// <param name="_priceDate">
    /// The date for the cost, this is only used for standard cost.
    /// </param>
    /// <returns>
    /// The cost for one piece.
    /// </returns>
    [Hookable(false)]
    public CostPrice costPricePcs(
        InventSum           _inventSum,
        InventModelGroup    _inventModelGroup = null,
        boolean             _onHandOnly = false,
        PriceDate           _priceDate  = maxDate())
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the estimated physical value for an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record for which to get the estimated physical value.
    /// </param>
    /// <param name="_inventOnhand">
    /// The <c>InventOnHand</c> object.
    /// </param>
    /// <param name="_updateNow">
    /// The <c>InventUpdate</c> object.
    /// </param>
    /// <returns>
    /// The estimated physical value for the inventory transaction.
    /// </returns>
    [Hookable(false)]
    public CostAmount estimatedPhysicalValue(InventTrans _inventTrans, InventOnhand _inventOnhand, InventUpdate _updateNow)
    {
        CostAmount              costAmount;

        if (_inventTrans.Qty >= 0)
        {
            costAmount = super(_inventTrans, _inventOnhand, _updateNow);
        }
        else
        {
            costAmount = 0.0;
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the financial issue cost for an inventory transaction.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for which to calculate the issue cost.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record for which to calculate the issue cost.
    /// </param>
    /// <param name="_inventOnhand">
    /// An <c>InventOnHand</c> object that has the financial on-hand inventory.
    /// </param>
    /// <returns>
    /// The financial issue cost for the inventory transaction.
    /// </returns>
    [Hookable(false)]
    public CostAmount financialIssueCostValue(InventMovement _inventMovement, InventTrans _inventTrans, InventOnhand _inventOnhand)
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostPriceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost for an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimID</c> value for which to retrieve the cost.
    /// </param>
    /// <param name="_inventTableModuleInvent">
    /// The <c>InventTableModule</c> record to retrieve the cost for; optional.
    /// </param>
    /// <param name="_transDate">
    /// The date to retrieve the cost for; optional.
    /// </param>
    /// <param name="_newSiteId">
    /// The site to retrieve the cost for; optional.
    /// </param>
    /// <param name="_throwError">
    /// A Boolean value that indicates whether to throw an error if no cost is found; optional.
    /// </param>
    /// <returns>
    /// An <c>InventPriceMap</c> buffer that has the cost for the item.
    /// </returns>
    [Hookable(false)]
    public InventPriceMap inventCostPriceMap(
        InventTable             _inventTable,
        InventDimId             _inventDimId,
        InventTableModule       _inventTableModuleInvent    = null, // set this parameter for better performance if avail
        TransDate               _transDate                  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InventSiteId            _newSiteId                  = '',
        boolean                 _throwError                 = false)
    {
        InventItemPrice     inventItemPrice;

        inventItemPrice.Price = 0.0;
        inventItemPrice.PriceQty = 1;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory model.
    /// </summary>
    /// <returns>
    /// The inventory model.
    /// </returns>
   [Hookable(false)]
    public InventModel inventModel()
    {
        return InventModel::NonValuated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryOwnerAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isInventoryOwnerAllowed()
    {
        return WHSWarehouseInventoryOwnerFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the inventory model is settled.
    /// </summary>
    /// <returns>
    /// true if the inventory model is settled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isSettled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAlwaysBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether inventory transactions must be booked physical.
    /// </summary>
    /// <returns>
    /// true if inventory transactions always must be booked physical; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean mustAlwaysBeBookedPhysically()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether inventory transactions must be closed.
    /// </summary>
    /// <returns>
    /// true if inventory transactions must be closed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean mustBeClosed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckInventOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model has to perform an available validation when the
    /// <c>InventSum</c> record is updated.
    /// </summary>
    /// <param name="_inventSumDelta">
    /// The change that is used to update the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    /// true if the inventory model has to perform a available validation when the <c>InventSum</c> record
    /// is updated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validation is implemented in the <c>checkInventOnHand</c> method.
    /// </remarks>
    public boolean mustCheckInventOnHand(InventSumDelta _inventSumDelta)
    {
        return false; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSplitInventSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>InventSettlement</c> must be split when <c>InventTrans</c> is split.
    /// </summary>
    /// <returns>
    /// true if <c>InventSettlement</c> must be split when <c>InventTrans</c> is split; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean mustSplitInventSettlement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventJournalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the cost on the inventory journal must be updated to the current cost before the
    /// journal is posted.
    /// </summary>
    /// <param name="_inventJournalType">
    /// The inventory journal type.
    /// </param>
    /// <returns>
    /// true if the cost on the inventory journal must be updated to the current cost before the journal is
    /// posted; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean mustUpdateInventJournalCost(InventJournalType _inventJournalType)
    {
        switch (_inventJournalType)
        {
            case InventJournalType::Count:
            case InventJournalType::TagCounting:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalExpense</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns physical expense related to an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The physical expense related to an inventory transaction.
    /// </returns>
    [Hookable(false)]
    protected CostAmount physicalExpense(InventTrans _inventTrans)
    {
        InventSettlement    settlement;
        CostAmount          amount;

        ttsbegin;
        boolean more = this.physicalSettlementList(_inventTrans).first(settlement);
        while (more)
        {
            if (settlement.OperationsPosting == LedgerPostingType::PurchExpense)
            {
                amount += settlement.CostAmountAdjustment;
            }
            more = this.physicalSettlementList(_inventTrans).next(settlement);
        }
        ttscommit;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalSettlementList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns physical inventory settlement adjustments related to an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    A record sorted list that has inventory settlement records.
    /// </returns>
    [Hookable(false)]
    protected RecordSortedList physicalSettlementList(InventTrans _inventTrans)
    {
        if (!physicalSettlementList)
        {
            physicalSettlementList = new RecordSortedList(tableNum(InventSettlement));
            physicalSettlementList.sortOrder(fieldNum(InventSettlement, RecId));

            InventSettlement    inventSettlement;

            while select inventSettlement
            where inventSettlement.TransRecId           == _inventTrans.RecId
               && inventSettlement.Cancelled            == NoYes::No
               && inventSettlement.SettleModel          == InventSettleModel::PhysicalValue
                && inventSettlement.OperationsPosting   == LedgerPostingType::PurchExpense
               // <GEERU>
               && inventSettlement.InventTransCurrency_RU == inventTransCurrency
               // </GEERU>
            {
                physicalSettlementList.ins(inventSettlement);
            }
        }
        return physicalSettlementList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPriceVarianceFinancialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts an adjustment for the inventory transaction after it is financially updated.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for the transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object for the transaction.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> buffer.
    /// </param>
    /// <param name="_adjustment">
    /// The adjustment amount.
    /// </param>
    /// <remarks>
    /// The method must be called after the <c>InventTrans</c> buffer is updated financial.
    /// </remarks>
    [Hookable(false)]
    public void postPriceVarianceFinancialAdjustment(InventMovement   _inventMovement,
                                                     LedgerVoucher    _ledgerVoucher,
                                                     InventTrans      _inventTrans,
                                                     CostAmount       _adjustment)
    {
        if (_adjustment)
        {
            InventSettlement inventSettlement = _inventTrans.updatePriceVarianceFin(_inventMovement,
                                                                   this.varianceAccountType(),
                                                                   _ledgerVoucher.lastVoucher(),
                                                                   _ledgerVoucher.lastTransDate(),
                                                                   _adjustment);
            if (inventSettlement.CostAmountAdjustment)
            {
                if (_inventMovement.mustBeBookedFinancially())
                {
                    inventSettlement.post(_ledgerVoucher);
                }
                inventSettlement.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the inventory transaction after it is updated financial.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for the transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object for the transaction.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> buffer.
    /// </param>
    /// <param name="_inventOnhand">
    /// The <c>InventOnhand</c> object that has the physical or financial inventory available.
    /// </param>
    /// <remarks>
    /// The method must be called after the <c>InventTrans</c> buffer is updated financial.
    /// </remarks>
    [Hookable(false)]
    public void postUpdateFinancial(InventMovement _inventMovement, LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventOnhand _inventOnhand = null)
    {
        CostAmount physicalExpenseAmount = this.physicalExpense(_inventTrans);
        CostAmount expenseAmount = _inventTrans.CostAmountPhysical - _inventTrans.CostAmountPosted + physicalExpenseAmount;

        if (expenseAmount)
        {
            this.postPriceVarianceFinancialAdjustment(_inventMovement, _ledgerVoucher, _inventTrans, expenseAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateFinancialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the inventory transaction after it is financially adjusted.
    /// </summary>
    /// <param name="_inventTrans">
    /// The adjusted <c>InventTrans</c> record.
    /// </param>
    /// <param name="_voucher">
    /// The <c>Voucher</c> for the adjustment
    /// </param>
    /// <param name="_postingDate">
    /// The <c>TransDate</c> for the adjustment.
    /// </param>
    /// <param name="_costAmount">
    /// The adjustment amount.
    /// </param>
    /// <remarks>
    /// The method must be called after the <c>InventTrans</c> record is financial adjusted.
    /// </remarks>
    [Hookable(false)]
    public void postUpdateFinancialAdjustment(
        InventTrans     _inventTrans,
        Voucher         _voucher,
        TransDate       _postingDate,
        CostAmount      _costAmount)
    {
        InventSettlement inventSettlement = _inventTrans.updatePriceVarianceFin(_inventTrans.inventMovement(true),
                                                                                this.varianceAccountType(),
                                                                                _voucher,
                                                                                _postingDate,
                                                                                -_costAmount);

        if (inventSettlement.CostAmountAdjustment)
        {
            inventSettlement.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdatePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the inventory transaction after it is updated physical.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for the transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object for the transaction.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record.
    /// </param>
    /// <param name="_financialInventOnhand">
    /// The <c>InventOnhand</c> object that has the financial inventory available.
    /// </param>
    /// <remarks>
    /// The method must be called after the <c>InventTrans</c> buffer is updated physical.
    /// </remarks>
    [Hookable(false)]
    public void postUpdatePhysical(
        InventMovement  _inventMovement,
        LedgerVoucher   _ledgerVoucher,
        InventTrans     _inventTrans,
        InventOnhand    _financialInventOnhand = null)
    {
        CostAmount expenseAmount = -_inventTrans.CostAmountPhysical;

        if (expenseAmount)
        {
            InventSettlement inventSettlement = _inventTrans.updatePriceVariancePhy(_inventMovement,
                                                                    this.varianceAccountType(),
                                                                    expenseAmount);
            if (_inventMovement.mustBeBookedPhysically())
            {
                inventSettlement.post(_ledgerVoucher);
            }
            inventSettlement.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdatePhysicalReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the inventory transaction after it is updated physical for return.
    /// </summary>
    /// <param name="_inventMovement">
    /// The <c>InventMovement</c> object for the transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object for the transaction.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record.
    /// </param>
    /// <param name="_returnInventTrans">
    /// The return <c>InventTrans</c> record.
    /// </param>
    /// <remarks>
    /// The method must be called after the <c>InventTrans</c> buffer is updated physical for return.
    /// </remarks>
    [Hookable(false)]
    public void postUpdatePhysicalReturn(InventMovement _inventMovement, LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventTrans _returnInventTrans)
    {
        if (_inventTrans.Qty > 0)
        {
            this.postUpdatePhysical(_inventMovement, _ledgerVoucher, _inventTrans);
            this.preUpdateFinancial(_inventMovement, _ledgerVoucher, _inventTrans);
            CostAmount expenseAmount = this.physicalExpense(_inventTrans);
            if (expenseAmount)
            {
                this.postPriceVarianceFinancialAdjustment(_inventMovement, _ledgerVoucher, _inventTrans, expenseAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the physical value adjustments.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The <c>InventMovement</c> that belongs to the currently processed transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> to which the postings should be added.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction that is currently processed.
    /// </param>
    /// <param name="_inventOnhand">
    /// The <c>InventOnhand</c> object that has the physical or financial inventory.
    /// </param>
    [Hookable(false)]
    public void preUpdateFinancial(InventMovement _inventMovement, LedgerVoucher _ledgerVoucher, InventTrans _inventTrans, InventOnhand _inventOnhand = null)
    {
        if (_inventOnhand)
        {
            _inventOnhand.inventSumWithoutAvailability(false).subInventTransOnSum(_inventTrans);
        }
        this.updateLedgerReverseAdjustments(_inventMovement, _ledgerVoucher, _inventTrans);
        _inventTrans.update();
        if (_inventOnhand)
        {
            _inventOnhand.inventSumWithoutAvailability(false).addInventTransOnSum(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerReverseAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses a physical value adjustment.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The <c>InventMovement</c> that belongs to the currently processed transaction.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> to which the postings should be added.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction that is currently processed.
    /// </param>
    [Hookable(false)]
    protected void updateLedgerReverseAdjustments(
        InventMovement  _inventMovement,
        LedgerVoucher   _ledgerVoucher,
        InventTrans     _inventTrans)
    {
        InventSettlement    settlement;

        ttsbegin;
        physicalSettlementList = null;
        boolean more = this.physicalSettlementList(_inventTrans).first(settlement);
        while (more)
        {
            this.reversePhysicalSettlement(_inventMovement,_ledgerVoucher,_inventTrans, settlement);
            more = this.physicalSettlementList(_inventTrans).next(settlement);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventModelChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model group is valid.
    /// </summary>
    /// <param name="_inventModelGroup">
    /// The <c>InventModelGroup</c> record.
    /// </param>
    /// <returns>
    /// true if the inventory model group is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean validateInventModelChange(InventModelGroup _inventModelGroup)
    {
        InventSum               inventSum;
        InventModelGroupItem    inventModelGroupItem;

        if (_inventModelGroup.orig().RecId)
        {
            switch (_inventModelGroup.orig().InventModel)
            {
                case InventModel::StdCost:
                case InventModel::MovingAverage:

                    select pessimisticlock firstonly RecId
                    from inventSum
                    where inventSum.Closed == NoYes::No
                    exists join inventModelGroupItem
                    where inventModelGroupItem.ItemId == inventSum.ItemId
                       && inventModelGroupItem.ItemDataAreaId == inventSum.DataAreaId
                       && inventModelGroupItem.ModelGroupId == _inventModelGroup.ModelGroupId
                       && inventModelGroupItem.ModelGroupDataAreaId == _inventModelGroup.DataAreaId;

                    if (inventSum.RecId)
                    {
                        return checkFailed(strFmt("@FPK270051",
                                                   _inventModelGroup.orig().InventModel, _inventModelGroup.InventModel));
                    }
                    break;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventModelChangeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model group item relation is valid.
    /// </summary>
    /// <param name="_inventModelGroupItem">
    /// The <c>InventModelGroupItem</c> record.
    /// </param>
    /// <returns>
    /// true if the inventory model group item relation is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean validateInventModelChangeItem(InventModelGroupItem _inventModelGroupItem)
    {
        InventSum       inventSum;

        if (_inventModelGroupItem.orig().RecId)
        {
            InventModel changeFromInventModel = _inventModelGroupItem.orig().modelGroup().InventModel;
            switch (changeFromInventModel)
            {
                case InventModel::StdCost:
                case InventModel::MovingAverage:

                    select pessimisticlock firstonly RecId
                    from inventSum
                    where inventSum.ItemId == _inventModelGroupItem.ItemId
                       && inventSum.DataAreaId == _inventModelGroupItem.ItemDataAreaId
                       && inventSum.Closed == NoYes::No
                       && inventSum.IsExcludedFromInventoryValue == NoYes::No;

                    if (inventSum.RecId)
                    {
                        return checkFailed(strFmt("@FPK270051",
                                                   changeFromInventModel, this.inventModel()));
                    }
                    break;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model group is valid.
    /// </summary>
    /// <param name="_inventModelGroup">
    /// The <c>InventModelGroup</c> record.
    /// </param>
    /// <returns>
    /// true if the inventory model group is valid; otherwise, false.
    /// </returns>
    public boolean validateWriteInventModelGroup(InventModelGroup _inventModelGroup)
    {
        boolean ret = this.validateInventModelChange(_inventModelGroup);
        ret         = (this.skipValidatePostOnhandPhysicalEnabled() || this.validatePostOnhandPhysicalEnabled(_inventModelGroup)) && ret;
        ret         = (this.skipValidatePostOnhandFinancialEnabled() || this.validatePostOnhandFinancialEnabled(_inventModelGroup)) && ret;
        ret         = this.validateInclPhysicalValueInCostDisabled(_inventModelGroup) && ret;
        ret         = this.validateStandardCostDisabled(_inventModelGroup) && ret;
        ret         = this.validateModelGroupHasNoService(_inventModelGroup) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidatePostOnhandPhysicalEnabled</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean skipValidatePostOnhandPhysicalEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidatePostOnhandFinancialEnabled</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean skipValidatePostOnhandFinancialEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostOnhandPhysicalAndPostOnhandFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that both post physical inventory and post financial are enabled or disabled for the inventory model group.
    /// </summary>
    /// <param name="_inventModelGroup">
    /// The <c>InventModelGroup</c> buffer to validate.
    /// </param>
    /// <returns>
    /// true if both post physical inventory and post financial are enabled or disabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean validatePostOnhandPhysicalAndPostOnhandFinancial(InventModelGroup  _inventModelGroup)
    {
        if (_inventModelGroup.PostOnhandPhysical != _inventModelGroup.PostOnhandFinancial)
        {
            return checkFailed(strFmt("@CostManagement:ErrorPostOnhandPhysicalAndPostOnhandFinancialNotInSync", this.inventModel(), "@SYS54278", "@SYS54275"));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventModelGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory model group item relation is valid.
    /// </summary>
    /// <param name="_inventModelGroupItem">
    /// The <c>InventModelGroupItem</c> record.
    /// </param>
    /// <param name="_inclConvCheck">
    /// A Boolean value that indicates whether the conversion check is included.
    /// </param>
    /// <returns>
    /// true if the inventory model group item relation is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean validateWriteInventModelGroupItem(InventModelGroupItem _inventModelGroupItem, boolean _inclConvCheck = true)
    {
        boolean ret = this.validateItemTypeIsNotService(_inventModelGroupItem);
        ret = ret && this.validateInventModelChangeItem(_inventModelGroupItem);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the variance account type for the inventory model.
    /// </summary>
    /// <returns>
    /// The variance account type for the inventory model.
    /// </returns>
    [Hookable(false)]
    protected InventAccountType varianceAccountType()
    {
        return InventAccountType::PurchExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventModelType_NonValuated construct()
    {
        return new InventModelType_NonValuated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>