<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteInventForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RouteInventForm
{
    Map                         mapTmp2Route;
    Map                         mapTmp2RouteOpr;

    Map                         mapRoute;
    Map                         mapRouteOpr;

    RouteId                     routeId;
    ItemId                      itemId;
    EcoResItemConfigurationName configId;
    ProdRoute                   prodRoute;
    FormDataSource              prodRoute_ds;
    InventSiteId                siteId;

    boolean                     dropWrite;
    private boolean             isConfigFilterApplied;

    RecId                       lastSelectedRouteRecId;
    RouteOpr                    lastSelectedRouteOpr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteRelation</Name>
				<Source><![CDATA[
    void deleteRelation()
    {
        Route       route;
        RouteOpr    routeOpr;

        recId       recIdRoute;
        recId       recIdRouteOpr;

        ttsbegin;

        this.prodRouteDSReRead();

        if (prodRoute.RecId && mapTmp2RouteOpr.exists(prodRoute.RecId) && mapTmp2Route.exists(prodRoute.RecId))
        {
            recIdRoute      = mapTmp2Route.lookup(prodRoute.RecId);
            route           = Route::findRecId(recIdRoute,true);

            recIdRouteOpr   = mapTmp2RouteOpr.lookup(prodRoute.RecId);
            routeOpr        = RouteOpr::findRecId(recIdRouteOpr,true);

            if (route.RecId && routeOpr.RecId)
            {
                if (routeOpr.ItemCode       == TableGroupAll::Table &&
                    routeOpr.ConfigId       == configId             &&
                    routeOpr.RouteCode      == RouteAll::Route)
                {
                    routeOpr.delete();

                    this.removeMapRouteOpr(routeOpr);

                    routeOpr = route.routeOpr(itemId, configId, siteId, routeOpr);
                    if (! routeOpr)
                        routeOpr.initValue();

                    prodRoute.RouteOprMap::initFromRouteOprMap(routeOpr);

                    dropWrite = true;
                    prodRoute_ds.write();
                    dropWrite = false;

                    this.insertMapRouteOpr(prodRoute,routeOpr);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRouteOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the operation relation for the route record.
    /// </summary>
    /// <param name="_prodRoute">
    /// The route record to search for.
    /// </param>
    /// <returns>
    /// A record in the <c>RouteOpr</c> table; otherwise, an empty record.
    /// </returns>
    public RouteOpr findRouteOpr(ProdRoute _prodRoute)
    {
        RouteOpr    routeOpr;
        recId       recId;

        if (lastSelectedRouteRecId
            &&  (lastSelectedRouteOpr.RecId)
            &&  (lastSelectedRouteRecId == _prodRoute.RecId))
        {
            routeOpr = lastSelectedRouteOpr;
        }
        else if (_prodRoute.RecId)
        {
            if (mapTmp2RouteOpr.exists(_prodRoute.RecId))
            {
                recId = mapTmp2RouteOpr.lookup(_prodRoute.RecId);
                if (mapRouteOpr.exists(recId))
                {
                    routeOpr = mapRouteOpr.lookup(recId);
                    this.updateDirectCache(_prodRoute.RecId, routeOpr);
                }
            }
        }
        else
        {
            if (_prodRoute.RouteOprRefRecId)
            {
                routeOpr = RouteOpr::findRecId(_prodRoute.RouteOprRefRecId);
                this.updateDirectCache(_prodRoute.RecId, routeOpr);
            }
        }

        return routeOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected boolean init()
    {
        mapTmp2Route        = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));
        mapTmp2RouteOpr     = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));

        mapRoute            = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        mapRouteOpr         = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMapRoute</Name>
				<Source><![CDATA[
    private void insertMapRoute(
        ProdRoute   _prodRoute,
        Route       _route
        )
    {
        mapRoute.insert(_route.RecId,_route);
        mapTmp2Route.insert(_prodRoute.RecId,_route.RecId);
        lastSelectedRouteRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMapRouteOpr</Name>
				<Source><![CDATA[
    protected void insertMapRouteOpr(
        ProdRoute   _prodRoute,
        RouteOpr    _routeOpr
        )
    {
        if (_routeOpr.RecId)
        {
             mapTmp2RouteOpr.insert(_prodRoute.RecId,_routeOpr.RecId);
             mapRouteOpr.insert(_routeOpr.RecId,_routeOpr);
             lastSelectedRouteRecId = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRefreshAfterWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the route data source should be refreshed.
    /// </summary>
    /// <returns>
    ///    true if the route data source should be refreshed; otherwise, false.
    /// </returns>
    public boolean mustRefreshAfterWrite()
    {
        Route   route;
        boolean refresh = false;

        if (prodRoute.OprId && !dropWrite)
        {
            select count(RecId) from route
                where route.RouteId == routeId
                   && route.OprId   == prodRoute.OprId;

            refresh = (route.RecId > 1);
        }

        return refresh;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSActive</Name>
				<Source><![CDATA[
    void prodRouteDSActive()
    {
        Route       route;
        RouteOpr    routeOpr;

        if (prodRoute.RecId && ! mapTmp2RouteOpr.exists(prodRoute.RecId) && mapTmp2Route.exists(prodRoute.RecId))
        {
            route    = mapRoute.lookup(mapTmp2Route.lookup(prodRoute.RecId));
            routeOpr = route.routeOpr(itemId,configId,siteId,routeOpr);

            if (routeOpr.RecId)
            {
                prodRoute.RouteOprMap::initFromRouteOprMap(routeOpr);

                dropWrite = true;
                prodRoute_ds.write();
                dropWrite = false;

                this.insertMapRouteOpr(prodRoute,routeOpr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSDeletePost</Name>
				<Source><![CDATA[
    public void prodRouteDSDeletePost(ProdRoute _prodRouteOrig)
    {
        recId       recIdRoute;
        recId       recIdRouteOpr;

        Route       route;
        RouteOpr    routeOpr;

        if (mapTmp2Route.exists(_prodRouteOrig.RecId))
        {
            recIdRoute = mapTmp2Route.lookup(_prodRouteOrig.RecId);

            mapTmp2Route.remove(_prodRouteOrig.RecId);
        }

        if (mapTmp2RouteOpr.exists(_prodRouteOrig.RecId))
        {
            recIdRouteOpr = mapTmp2RouteOpr.lookup(_prodRouteOrig.RecId);

            mapTmp2RouteOpr.remove(_prodRouteOrig.RecId);
        }

        if (recIdRoute)
            route = Route::findRecId(recIdRoute,true);

        if (route.RecId)
        {
            route.delete();

            if (mapRoute.exists(route.RecId))
                mapRoute.remove(route.RecId);
        }

        if (recIdRouteOpr)
            routeOpr = RouteOpr::findRecId(recIdRouteOpr,true);

        if (routeOpr.RecId)
        {
            if (routeOpr.ItemCode       == TableGroupAll::Table &&
                routeOpr.ConfigId       == configId             &&
                routeOpr.RouteCode      == RouteAll::Route)
            {
                routeOpr.delete();

                this.removeMapRouteOpr(routeOpr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSExecuteQueryPre</Name>
				<Source><![CDATA[
    void prodRouteDSExecuteQueryPre(
        RouteVersion                _routeVersion,
        EcoResItemConfigurationName _configId)
    {
        Route       route;
        RouteOpr    routeOpr;

        this.init();

        itemId      = _routeVersion.ItemId;
        configId    = _configId;
        routeId     = _routeVersion.RouteId;
        siteId      = _routeVersion.inventSiteId();

        delete_from prodRoute;

        if (routeId)
        {
            while select route
                where route.RouteId == routeId
            {
                routeOpr = route.routeOpr(itemId,configId,siteId,routeOpr);

                if (!routeOpr)
                {
                    if (this.parmIsConfigFilterApplied())
                    {
                        info(strFmt("@SCM:RouteInventProdFindOprRelation", route.OprId));
                    }
                    routeOpr.initValue();
                }

                this.initProdRouteFromRouteRouteOpr(route, routeOpr);

                prodRoute.doInsert();

                this.insertMapRoute(prodRoute,route);
                this.insertMapRouteOpr(prodRoute,routeOpr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdRouteFromRouteRouteOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProdRoute</c> buffer using the RouteMap and RouteOprMap.
    /// </summary>
    /// <param name = "_route"> A <c>Route</c> buffer. </param>
    /// <param name = "_routeOpr"> A <c>RouteOpr</c> buffer.</param>
    protected void initProdRouteFromRouteRouteOpr(Route _route, RouteOpr _routeOpr)
    {
        prodRoute.RouteMap::initFromRouteMap(_route);
        prodRoute.RouteOprMap::initFromRouteOprMap(_routeOpr);

        if (prodRoute.ErrorPct == 0)
        {
            prodRoute.ErrorPct = prodRoute.getResource(false).ErrorPct;
        }

        prodRoute.OprId = _route.OprId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsConfigFilterApplied</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsConfigFilterApplied(boolean _isConfigFilterApplied = isConfigFilterApplied)
    {
        isConfigFilterApplied = _isConfigFilterApplied;
        return isConfigFilterApplied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSInitPost</Name>
				<Source><![CDATA[
    void prodRouteDSInitPost(
        ProdRoute   _prodRoute
        )
    {
        prodRoute       = _prodRoute;
        prodRoute_ds    = FormDataUtil::getFormDataSource(_prodRoute);

        prodRoute.setTmp();
        prodRoute.checkRecord(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSReRead</Name>
				<Source><![CDATA[
    void prodRouteDSReRead()
    {
        Route       route;
        RouteOpr    routeOpr;

        if (prodRoute.RecId && mapTmp2Route.exists(prodRoute.RecId) && mapTmp2Route.exists(prodRoute.RecId))
        {
            route = Route::findRecId(mapTmp2Route.lookup(prodRoute.RecId),true);
            if (! route.RecId)
                throw error("@SYS5149");

            prodRoute.RouteMap::initFromRouteMap(route);
            mapRoute.insert(route.RecId,route);

            routeOpr  = mapRouteOpr.lookup(mapTmp2RouteOpr.lookup(prodRoute.RecId));

            mapTmp2RouteOpr.remove(prodRoute.RecId);
            this.removeMapRouteOpr(routeOpr);

            routeOpr = route.routeOpr(itemId,configId,siteId,routeOpr);

            prodRoute.RouteOprMap::initFromRouteOprMap(routeOpr);

            dropWrite = true;
            prodRoute_ds.write();
            dropWrite = false;

            this.insertMapRouteOpr(prodRoute,routeOpr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSValidateDeletePre</Name>
				<Source><![CDATA[
    boolean prodRouteDSValidateDeletePre()
    {
        boolean     ok = true;
        Route       route;

        route.RouteId   =   routeId;
        route.RouteMap::initFromRouteMap(prodRoute);
        ok = route.validateDelete();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSValidateWritePre</Name>
				<Source><![CDATA[
    boolean prodRouteDSValidateWritePre()
    {
        boolean     ok = true;

        Route       route;
        RouteOpr    routeOpr;

        if (! dropWrite)
        {
            route.RouteId   = routeId;
            route.initFromProdRoute(prodRoute);

            ok = ok && route.validateWrite();

            routeOpr.ConfigId = configId;
            routeOpr.RouteOprMap::initFromRouteOprMap(prodRoute);
            ok = ok && routeOpr.validateWrite();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteDSWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the transformation from a temporary <c>ProdRoute</c> buffer to a <c>RouteOpr</c> buffer.
    /// </summary>
    /// <param name="_insertMode">
    ///    true if it is the first time that the buffer is written; otherwise, false.
    /// </param>
    /// <param name="_forceTableRoute">
    ///    true if a new <c>RouteOpr</c> record must always be created; otherwise, false.
    /// </param>
    void prodRouteDSWritePost(
        boolean                     _insertMode,
        boolean                     _forceTableRoute = false
        )
    {

        if (dropWrite)
        {
            dropWrite = false;
            return;
        }
        Route route;

        if (_insertMode || ! mapTmp2Route.exists(prodRoute.RecId))
        {
            route.RouteMap::initFromRouteMap(prodRoute);
            route.RouteId   = routeId;
            route.insert();

            this.insertMapRoute(prodRoute,route);
        }
        else
        {
            RecId recIdRoute = mapTmp2Route.lookup(prodRoute.RecId);

            if (! mapRoute.exists(recIdRoute))
                throw error(strfmt("@SYS19378",funcname()));

            route      = mapRoute.lookup(recIdRoute);
            ProdRoute                       prodRouteCmp1;
            ProdRoute                       prodRouteCmp2;
            Route                           routeCmp;

            prodRouteCmp1.RouteMap::initFromRouteMap(route);
            routeCmp.RouteMap::initFromRouteMap(prodRoute);
            prodRouteCmp2.RouteMap::initFromRouteMap(routeCmp);

            if (! bufCmp(prodRouteCmp1,prodRouteCmp2))
            {
                route = Route::findRecId(recIdRoute,true);
                if (! route.RecId)
                    throw error("@SYS5149");

                route.RouteMap::initFromRouteMap(prodRoute);
                route.update();

                this.insertMapRoute(prodRoute,route);
            }
        }

        if (! mapTmp2RouteOpr.exists(prodRoute.RecId))
            _insertMode = true;

        if (_insertMode)
        {
            RouteOpr routeOpr = route.routeOpr(itemId,configId,siteId,null);
            if (routeOpr.RecId)
            {
                this.removeMapRouteOpr(routeOpr);
                this.insertMapRouteOpr(prodRoute,routeOpr);

                _insertMode = false;
            }
            else
            {
                routeOpr = this.initializeRouteOprForInsert();
                routeOpr.insert();

                this.insertMapRouteOpr(prodRoute,routeOpr);
            }
        }

        if (! _insertMode)
        {
            this.createOrUpdateRouteOprFromRoute(_forceTableRoute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRouteOprForInsert</Name>
				<Source><![CDATA[
    private RouteOpr initializeRouteOprForInsert()
    {
        RouteOpr routeOpr;
        routeOpr.ItemCode       = TableGroupAll::Table;
        routeOpr.ItemRelation   = itemId;
        routeOpr.ConfigId       = configId;
        routeOpr.RouteCode      = RouteAll::Route;
        routeOpr.RouteRelation  = routeId;

        this.initializeRouteOpr(routeOpr);

        routeOpr.SiteId         = siteId;

        return routeOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRouteOpr</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the RouteOpr to be updated
    /// </summary>
    /// <param name="_routeOpr">
    ///    The RouteOper to be updated
    /// </param>
    protected void initializeRouteOpr(RouteOpr _routeOpr)
    {
        _routeOpr.RouteOprMap::initFromRouteOprMap(prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRouteOprFromRoute</Name>
				<Source><![CDATA[
    private void createOrUpdateRouteOprFromRoute(boolean _forceTableRoute )
    {
        RecId recIdRouteOpr = mapTmp2RouteOpr.lookup(prodRoute.RecId);

        if (! mapRouteOpr.exists(recIdRouteOpr))
        {
            throw error(strfmt("@SYS19378",funcname()));
        }

        RouteOpr routeOprOrig  = mapRouteOpr.lookup(recIdRouteOpr);
        boolean areBuffersIdentical = false;

        ProdRoute                       prodRouteCmp1;
        ProdRoute                       prodRouteCmp2;
        RouteOpr                        routeOprCmp;
        if (!_forceTableRoute)
        {
            prodRouteCmp1.RouteOprMap::initFromRouteOprMap(routeOprOrig);
            routeOprCmp.RouteOprMap::initFromRouteOprMap(prodRoute);
            prodRouteCmp2.RouteOprMap::initFromRouteOprMap(routeOprCmp);

            areBuffersIdentical = bufCmp(prodRouteCmp1, prodRouteCmp2);
        }

        if (_forceTableRoute || ! areBuffersIdentical)
        {
            this.removeMapRouteOpr(routeOprOrig);
            RouteOpr routeOpr;
           
            select forupdate routeOpr
                where routeOpr.OprId          == prodRoute.OprId        &&
                      routeOpr.ItemCode       == TableGroupAll::Table   &&
                      routeOpr.ItemRelation   == itemId                 &&
                      routeOpr.ConfigId       == configId               &&
                      routeOpr.RouteCode      == RouteAll::Route        &&
                      routeOpr.RouteRelation  == routeId                &&
                      routeOpr.SiteId         == siteId;

            if (routeOpr.RecId)
            {
                this.removeMapRouteOpr(routeOpr);
                this.initializeRouteOpr(routeOpr);
                routeOpr.update();
            }
            else
            {
                routeOpr = this.initializeRouteOprForInsert();
                routeOpr.insert();
                Docu::copy(routeOprOrig,routeOpr);

                if (prodRouteCmp1.OprId != prodRouteCmp2.OprId)
                {
                    Route route;
                    route.RouteMap::initFromRouteMap(prodRoute);
                    
                    RouteOpr  fromRouteOpr;
                    
                    if (RouteInventFormInitRouteIdFlight::instance().isEnabled())
                    {
                        fromRouteOpr = route.routeOpr(itemId, configId, siteId, fromRouteOpr);
                    }
                    else
                    {
                        fromRouteOpr = route.routeOpr(itemId, configId, siteId);
                    }

                    //Copy requirement set and requirements of the new operation relation, NOT the previous one.
                    WrkCtrActivityRequirementSet::copyRequirements(fromRouteOpr.activity(),routeOpr.activity());
                }
                else
                {
                    //Copy requirement set and requirements
                    WrkCtrActivityRequirementSet::copyRequirements(routeOprOrig.activity(),routeOpr.activity());
                }
            }

            this.insertMapRouteOpr(prodRoute,routeOpr);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMapRouteOpr</Name>
				<Source><![CDATA[
    private void removeMapRouteOpr(
        RouteOpr    _routeOpr
        )
    {
        MapIterator mi;
        boolean     loop    = true;

        if (mapRouteOpr.exists(_routeOpr.RecId))
        {
            mapRouteOpr.remove(_routeOpr.RecId);

            while (loop)
            {
                loop = false;

                mi   = new MapIterator(mapTmp2RouteOpr);
                mi.begin();
                while (mi.more())
                {
                    if (mapTmp2RouteOpr.lookup(mi.key()) == _routeOpr.RecId)
                    {
                        mapTmp2RouteOpr.remove(mi.key());
                        loop = true;
                        break;
                    }

                    mi.next();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDirectCache</Name>
				<Source><![CDATA[
    private void updateDirectCache(RecId _prodRouteRecId, RouteOpr _buffer)
    {
        lastSelectedRouteRecId = _prodRouteRecId;
        lastSelectedRouteOpr   = _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RouteInventForm construct()
    {
        return new RouteInventForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    static RouteInventForm newForm(FormRun _formRun)
    {
        RouteInventForm routeInventForm = RouteInventForm::construct();
        routeInventForm.init();

        return routeInventForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>