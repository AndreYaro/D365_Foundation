<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetNumberProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetNumberProvider</c> class generates fixed assets numbers for the import from data entities.
/// </summary>
internal final class AssetNumberProvider
{
    private NumberSequenceTable numberSequenceTable;
    private int originalNumberOfRecordsFromList;
    private SysGuidString functionNameSuffix;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static AssetNumberProvider construct()
    {
        return new AssetNumberProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        const str CharsNotAllowedInSQLFunctionName = '{-}';
        functionNameSuffix = strRem(guid2str(newGuid()), CharsNotAllowedInSQLFunctionName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNumberSequenceValues</Name>
				<Source><![CDATA[
    internal void generateNumberSequenceValues(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        AssetFixedAssetStagingMap _staging,
        AssetFixedAssetNumbersTmp _assetFixedAssetNumbersTmp)
    {
        this.loadAssetNumberTmp(_dmfDefinitionGroupExecution, _staging, _assetFixedAssetNumbersTmp);

        while select FixedAssetGroupId, count(RecId) from _assetFixedAssetNumbersTmp
            group by FixedAssetGroupId
        {
            this.initializeNumberSequenceReferenceAndTable(_assetFixedAssetNumbersTmp.FixedAssetGroupId);
            int numberOfRecordsForGroup = this.consumeNumberSequencePreviouslyReleasedList(
                int642int(_assetFixedAssetNumbersTmp.RecId),
                _assetFixedAssetNumbersTmp);

            if (numberOfRecordsForGroup)
            {
                this.consumeNumberSequenceTable(numberOfRecordsForGroup, _assetFixedAssetNumbersTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAssetNumberTmp</Name>
				<Source><![CDATA[
    private void loadAssetNumberTmp(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        AssetFixedAssetStagingMap _staging,
        AssetFixedAssetNumbersTmp _assetFixedAssetNumbersTmp) 
    {
        insert_recordset _assetFixedAssetNumbersTmp (FixedAssetGroupId, FixedAssetNumber, RefRecId)
        select FixedAssetGroupId, FixedAssetNumber, RecId
            from _staging
            where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && _staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
               && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated)
               && !_staging.FixedAssetNumber && _staging.FixedAssetGroupId;

        AssetFixedAssetNumbersTmp assetFixedAssetNumbersTmp;
        assetFixedAssetNumbersTmp.linkPhysicalTableInstance(_assetFixedAssetNumbersTmp);

        // establish Offset values by Fixed asset group
        // because numberSequences are group specific
        // this ensures that numbers assigned are consecutive (i.e. no gaps) within a group
        while select _assetFixedAssetNumbersTmp
           group by FixedAssetGroupId
        {
            AssetFixedAssetNumbersTmp offsetAssetNumbersTmp;

            insert_recordset offsetAssetNumbersTmp(RefRecId)
                select RecId from assetFixedAssetNumbersTmp
                where assetFixedAssetNumbersTmp.FixedAssetGroupId == _assetFixedAssetNumbersTmp.FixedAssetGroupId;

            update_recordset assetFixedAssetNumbersTmp
                setting Offset = offsetAssetNumbersTmp.RecId
                join offsetAssetNumbersTmp
                where offsetAssetNumbersTmp.RefRecId == assetFixedAssetNumbersTmp.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNumberSequenceReferenceAndTable</Name>
				<Source><![CDATA[
    private void initializeNumberSequenceReferenceAndTable(AssetGroupId _assetGroupId)
    {
        numberSequenceTable = null;
        AssetGroup assetGroup = AssetGroup::find(_assetGroupId);

        if (assetGroup.AutoNumber && assetGroup.AutoNumberSequenceTable)
        {
            numberSequenceTable = NumberSequenceTable::find(assetGroup.AutoNumberSequenceTable);
        }

        if (!numberSequenceTable && AssetParameters::find().AutoNumber)
        {
            NumberSequenceReference numberSequenceReference = AssetParameters::numRefAssetId();
            numberSequenceTable = numberSequenceReference.numberSequenceTable();
        }

        Debug::assert(numberSequenceTable != null);

        if (numberSequenceTable.Blocked)
        {
            throw error(strFmt("@SYS25068",numberSequenceTable.NumberSequence));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeNumberSequencePreviouslyReleasedList</Name>
				<Source><![CDATA[
    private int consumeNumberSequencePreviouslyReleasedList(int _numberOfRecordsForGroup, AssetFixedAssetNumbersTmp _assetFixedAssetNumbersTmp)
    {
        NumberSequenceList numberSequenceList;
        int numberOfRecordsRemainingForGroup;

        select count(RecId) from numberSequenceList
            where numberSequenceList.NumberSequenceId == numberSequenceTable.RecId
                && numberSequenceList.Status == NumStatus::Free;

        int numOfRecsFromList = int642int(numberSequenceList.RecId);
        numOfRecsFromList = min(numOfRecsFromList, _numberOfRecordsForGroup);
        originalNumberOfRecordsFromList = numOfRecsFromList;
        numberOfRecordsRemainingForGroup = _numberOfRecordsForGroup - numOfRecsFromList;

        // If number sequence needs to be pulled from NumberSequenceList table
        if (numOfRecsFromList > 0)
        {
            AssetFixedAssetNumbersTmp assetNumberTmp;
            assetNumberTmp.linkPhysicalTableInstance(_assetFixedAssetNumbersTmp);

            ttsbegin;
            while select forupdate assetNumberTmp
                where assetNumberTmp.FixedAssetGroupId == _assetFixedAssetNumbersTmp.FixedAssetGroupId
            {
                assetNumberTmp.FixedAssetNumber = NumberSeq::newGetNumFromId(numberSequenceTable.RecId).num();
                assetNumberTmp.doUpdate();
                numOfRecsFromList--;

                if (numOfRecsFromList == 0)
                {
                    break;
                }
            }
            ttscommit;
        }

        return numberOfRecordsRemainingForGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeNumberSequenceTable</Name>
				<Source><![CDATA[
    private void consumeNumberSequenceTable(int _numberOfRecordsForGroup, AssetFixedAssetNumbersTmp _assetFixedAssetNumbersTmp)
    {
        str sqlStatement;
        NumberSequenceRange nextRecOrig;
        Connection connection = new Connection();
        NumberSequenceTable numberSequenceTableLoc;

        try
        {
            connection.ttsbegin();
            numberSequenceTableLoc.setConnection(connection);
            numberSequenceTableLoc.disableCache(true);

            numberSequenceTableLoc = NumberSequenceTable::find(numberSequenceTable.RecId, true);

            if (numberSequenceTableLoc)
            {
                if ((numberSequenceTableLoc.NextRec + _numberOfRecordsForGroup)  > numberSequenceTableLoc.Highest
                    || _numberOfRecordsForGroup > intMax())
                {
                    throw error(strFmt("@SYS17478", numberSequenceTableLoc.NumberSequence));
                }

                nextRecOrig = numberSequenceTableLoc.NextRec;
                numberSequenceTableLoc.NextRec += int642int(_numberOfRecordsForGroup);
                numberSequenceTableLoc.update();
            }

            this.createFnFmtNumberSequence_TSQL();

            sqlStatement = this.createSqlStatement(nextRecOrig, originalNumberOfRecordsFromList, _assetFixedAssetNumbersTmp);
            Statement statement = connection.createStatement();
            statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());
            connection.ttscommit();
        }
        finally
        {
            connection.finalize();
            this.dropFnFmtNumberSequence_TSQL();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSqlStatement</Name>
				<Source><![CDATA[
    private str createSqlStatement(
        NumberSequenceRange nextRec,
        int _originalNumberOfRecordsFromList,
        AssetFixedAssetNumbersTmp _assetFixedAssetNumbersTmp)
    {
        str assetFixedAssetNumbersTmpName = _assetFixedAssetNumbersTmp.getPhysicalTableName();
        SqlSystem sqlSystem = new SysSqlSystem();

        //UPDATE AssetFixedAssetNumbersTmp
        //SET FixedAssetNumber = [dbo].FN_FMT_NUMBERSEQUENCE(<NumberSequenceTable.Format>,OFFSET-<Number or records used from NumberSequenceList>, NumberSequenceTable.NextRec-1,0)
        //WHERE FixedAssetGroupId = <Current group Id > AND FixedAssetNumber = ''
        str sqlStatement = 'UPDATE %10 SET FixedAssetNumber = [%1].FN_FMT_NUMBERSEQUENCE%11(N\'%2\',%8-%9,%3,0) WHERE %4 = \'%5\' AND %6 = %7';

        sqlStatement = strFmt(sqlStatement,
                                this.getSchemaName(), // %1
                                numberSequenceTable.Format, // %2
                                nextRec-1, // %3
                                this.backendFieldName(tableNum(AssetFixedAssetNumbersTmp),fieldNum(AssetFixedAssetNumbersTmp, FixedAssetGroupId)), //%4
                                _assetFixedAssetNumbersTmp.FixedAssetGroupId, //%5
                                this.backendFieldName(tableNum(AssetFixedAssetNumbersTmp),fieldNum(AssetFixedAssetNumbersTmp, FixedAssetNumber)), //%6
                                sqlSystem.sqlLiteral(''), // %7
                                this.backendFieldName(tableNum(AssetFixedAssetNumbersTmp),fieldNum(AssetFixedAssetNumbersTmp, Offset)), //%8
                                _originalNumberOfRecordsFromList, //%9
                                assetFixedAssetNumbersTmpName, //%10
                                functionNameSuffix //%11
                            );

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFnFmtNumberSequence_TSQL</Name>
				<Source><![CDATA[
    private void createFnFmtNumberSequence_TSQL()
    {
        // drop FN_FMT_NUMBERSEQUENCE if exists
        this.dropFnFmtNumberSequence_TSQL();

        // create FN_FMT_NUMBERSEQUENCE

        // T-SQL equivalent
        /*
        CREATE  FUNCTION FN_FMT_NUMBERSEQUENCE //<GFM>
        {GUID value} // </GFM>
        (
        @FORMAT NVARCHAR(40),
        @NUMBER BIGINT,
        @NEXTREC BIGINT = 0,
        @RJUSTIFY_LENGTH INT = 0
        )
        RETURNS NVARCHAR(40)
        AS
        BEGIN
        DECLARE    @TMP_NUMBER            INT,
        @TMP_NUMBER_STR        NVARCHAR(40),
        @LEN_TMP_NUMBER_STR    INT,
        @POSITION                INT,
        @POSITION1                INT,
        @POSITION2                INT,
        @LASTGOODPOS        INT,
        @SYMBOL                NVARCHAR(40),
        @FORMATSYMBOLS        NVARCHAR(40),
        @NUMOFFORMATSYMBOLS    INT,
        @REMAINDER            INT,
        @INCREMENT            INT,
        @FIRSTLETTER        NCHAR(1),
        @FORMATTED_NUMBER    NVARCHAR(40),
        @FORMAT_LENGTH    INT

        SET        @FIRSTLETTER =     'A'

        --        number to be formatted
        SET        @NUMBER = @NUMBER+@NEXTREC

        --    check if format is empty
        IF    @FORMAT = ''
        BEGIN
        SET @FORMATTED_NUMBER = CONVERT(NVARCHAR(40),@NUMBER)
        GOTO RJUSTIFY
        END
        --    check if format has '#' or '&'
        IF    @FORMAT NOT LIKE '%[&#]%'
        BEGIN
        -- neither '#' nor '&' exists in the format
        SET @FORMATTED_NUMBER = CONVERT(NVARCHAR(40),@NUMBER)
        GOTO RJUSTIFY
        END

        --    Format has only digits
        IF    @FORMAT NOT LIKE '%&%'
        BEGIN
        SET    @FORMATTED_NUMBER     = @FORMAT
        SET    @TMP_NUMBER_STR      = CONVERT(NVARCHAR(40),@NUMBER)
        SET    @LEN_TMP_NUMBER_STR  = LEN(@TMP_NUMBER_STR)

        --        add number to the format
        WHILE @TMP_NUMBER_STR <> ''
        BEGIN
        -- find first entry of '#' starting from the right
        SET @LASTGOODPOS = LEN(@FORMATTED_NUMBER) - CHARINDEX('#', REVERSE(@FORMATTED_NUMBER)) + 1

        SET @FORMATTED_NUMBER = STUFF(@FORMATTED_NUMBER, @LASTGOODPOS , 1 , SUBSTRING (@TMP_NUMBER_STR ,@LEN_TMP_NUMBER_STR , 1 ))
        SET    @TMP_NUMBER_STR  = STUFF(@TMP_NUMBER_STR, @LEN_TMP_NUMBER_STR, 1, '')
        SET    @LEN_TMP_NUMBER_STR  = @LEN_TMP_NUMBER_STR - 1
        END
        -- replace left '#' with '0'
        SET    @FORMATTED_NUMBER  = REPLACE(@FORMATTED_NUMBER,'#','0')
        GOTO RJUSTIFY
        END
        --    Format has ABC-letters and may be digits
        ELSE
        BEGIN
        -- Take out the format string

        -- take the first found (from left to right)
        SET @POSITION = 0
        SET @POSITION1 = CHARINDEX('#',@FORMAT)
        SET @POSITION2 = CHARINDEX('&',@FORMAT)

        IF @POSITION1 = 0
        SET @POSITION = @POSITION2

        IF @POSITION  = 0 AND @POSITION2 = 0
        SET @POSITION = @POSITION1

        IF @POSITION = 0 AND @POSITION1 > @POSITION2
        SET @POSITION = @POSITION2 -- LOWEST WINS

        IF @POSITION = 0
        SET @POSITION = @POSITION1

        SET @FORMATSYMBOLS = ''
        WHILE @POSITION > 0
        BEGIN

        SET @FORMATSYMBOLS = @FORMATSYMBOLS + SUBSTRING(@FORMAT, @POSITION, 1)
        -- take the first found (from left to right)
        SET @POSITION1 = CHARINDEX('#', @FORMAT, @POSITION + 1)
        SET @POSITION2 = CHARINDEX('&', @FORMAT, @POSITION + 1)

        SET @POSITION = 0
        IF @POSITION1 = 0
        SET @POSITION = @POSITION2

        IF @POSITION  = 0 AND @POSITION2 = 0
        SET @POSITION = @POSITION1

        IF @POSITION = 0 AND @POSITION1 > @POSITION2
        SET @POSITION = @POSITION2 -- LOWEST WINS

        IF @POSITION = 0
        SET @POSITION = @POSITION1
        END -- end while

        SET @NUMOFFORMATSYMBOLS  = LEN(@FORMATSYMBOLS)

        SET @TMP_NUMBER = @NUMBER
        SET @TMP_NUMBER_STR =''

        IF @FORMAT NOT LIKE '%#%'
        SET  @TMP_NUMBER = @TMP_NUMBER - 1  -- make 1 = 'A' (class NumberSeq->numInsertFormatLetters(), line 22)

        -- Convert number according the format
        SET @INCREMENT = 1
        WHILE @TMP_NUMBER <> 0
        BEGIN

        SET @SYMBOL = SUBSTRING(@FORMATSYMBOLS, ((@NUMOFFORMATSYMBOLS - @INCREMENT) + 1), 1)

        IF @SYMBOL = '#'
        BEGIN
        SET @REMAINDER  = @TMP_NUMBER % 10
        SET @TMP_NUMBER_STR  = CONVERT(NVARCHAR(40),@REMAINDER) + @TMP_NUMBER_STR
        SET @TMP_NUMBER = @TMP_NUMBER / 10
        END

        IF    @SYMBOL = '&'
        BEGIN
        SET @REMAINDER = @TMP_NUMBER % 26
        SET @TMP_NUMBER_STR  = CHAR(@REMAINDER + ASCII(@FIRSTLETTER)) + @TMP_NUMBER_STR
        SET @TMP_NUMBER = @TMP_NUMBER / 26
        END
        SET @INCREMENT = @INCREMENT + 1
        END -- WHILE @TMP_NUMBER <> 0

        -- We have the converted number in tmp_number_str.
        -- Now run the same code as for digits

        SET @FORMATTED_NUMBER = @FORMAT
        SET @LEN_TMP_NUMBER_STR  = LEN(@TMP_NUMBER_STR)
        SET @LASTGOODPOS = 0

        -- add number to the format
        WHILE @TMP_NUMBER_STR <> ''
        BEGIN
        -- find entries of '#' or '&' starting from the right
        SET @POSITION1 = CHARINDEX('#', @FORMATTED_NUMBER)
        SET @POSITION2 = CHARINDEX('&', @FORMATTED_NUMBER)

        SET @POSITION = 0

        IF @POSITION1 = 0
        SET @POSITION = @POSITION2

        IF @POSITION = 0 AND @POSITION2 = 0
        SET @POSITION = @POSITION1

        IF    @POSITION = 0 AND @POSITION1 > @POSITION2
        SET @POSITION = @POSITION2    -- LOWEST WINS

        IF @POSITION = 0
        SET @POSITION = @POSITION1

        WHILE @POSITION > 0
        BEGIN
        SET @LASTGOODPOS = @POSITION
        SET @POSITION1 = CHARINDEX('#',@FORMATTED_NUMBER,  @POSITION + 1)
        SET @POSITION2 = CHARINDEX('&',@FORMATTED_NUMBER,  @POSITION + 1)
        SET @POSITION = 0

        IF @POSITION1 = 0
        SET @POSITION = @POSITION2

        IF @POSITION = 0 AND @POSITION2 = 0
        SET @POSITION = @POSITION1

        IF @POSITION = 0 AND @POSITION1 > @POSITION2
        SET @POSITION = @POSITION2 -- LOWEST WINS

        IF @POSITION = 0
        SET @POSITION = @POSITION1

        END  -- @POSITION > 0

        SET @FORMATTED_NUMBER    = STUFF(@FORMATTED_NUMBER , @LASTGOODPOS , 1 , SUBSTRING (@TMP_NUMBER_STR , @LEN_TMP_NUMBER_STR , 1 ))
        SET @TMP_NUMBER_STR        = STUFF(@TMP_NUMBER_STR, @LEN_TMP_NUMBER_STR, 1, '')
        SET @LEN_TMP_NUMBER_STR = @LEN_TMP_NUMBER_STR - 1

        END  -- WHILE @TMP_NUMBER_STR <> ''

        -- replace left '#' with '0' and '&' with 'A'
        SET    @FORMATTED_NUMBER = REPLACE(@FORMATTED_NUMBER,'#','0')
        SET    @FORMATTED_NUMBER = REPLACE(@FORMATTED_NUMBER,'&','A')

        END --  ELSE @FORMAT NOT LIKE '%&%'

        RJUSTIFY:
        IF @RJUSTIFY_LENGTH > 0
        BEGIN
        SET @FORMAT_LENGTH = LEN(@FORMATTED_NUMBER)
        SET @FORMATTED_NUMBER = REPLICATE(' ',(@RJUSTIFY_LENGTH-@FORMAT_LENGTH))+@FORMATTED_NUMBER
        END
        RETURN @FORMATTED_NUMBER

        END

        */

        str sqlStmt =   'CREATE FUNCTION [%1].FN_FMT_NUMBERSEQUENCE%2\n';
        sqlStmt +=  '(\n';
        sqlStmt +=  '   @FORMAT NVARCHAR(40),\n';
        sqlStmt +=  '   @NUMBER BIGINT,\n';
        sqlStmt +=  '   @NEXTREC BIGINT = 0,\n';
        sqlStmt +=  '   @RJUSTIFY_LENGTH INT = 0\n';
        sqlStmt +=  ')\n';
        sqlStmt +=  '   RETURNS NVARCHAR(40)\n';
        sqlStmt +=  'AS\n';
        sqlStmt +=  'BEGIN\n';
        sqlStmt +=  'DECLARE    @TMP_NUMBER         INT,\n';
        sqlStmt +=  '           @TMP_NUMBER_STR     NVARCHAR(40),\n';
        sqlStmt +=  '           @LEN_TMP_NUMBER_STR INT,\n';
        sqlStmt +=  '           @POSITION           INT,\n';
        sqlStmt +=  '           @POSITION1          INT,\n';
        sqlStmt +=  '           @POSITION2          INT,\n';
        sqlStmt +=  '           @LASTGOODPOS        INT,\n';
        sqlStmt +=  '           @SYMBOL             NVARCHAR(40),\n';
        sqlStmt +=  '           @FORMATSYMBOLS      NVARCHAR(40),\n';
        sqlStmt +=  '           @NUMOFFORMATSYMBOLS INT,\n';
        sqlStmt +=  '           @REMAINDER          INT,\n';
        sqlStmt +=  '           @INCREMENT          INT,\n';
        sqlStmt +=  '           @FIRSTLETTER        NCHAR(1),\n';
        sqlStmt +=  '           @FORMATTED_NUMBER   NVARCHAR(40),\n';
        sqlStmt +=  '           @FORMAT_LENGTH      INT\n';
        sqlStmt +=  '\n';
        sqlStmt +=  'SET        @FIRSTLETTER =     \'A\'\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '--         number to be formatted\n';
        sqlStmt +=  'SET        @NUMBER = @NUMBER+@NEXTREC\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '--    check if format is empty\n';
        sqlStmt +=  'IF @FORMAT = \'\'\n';
        sqlStmt +=  '   BEGIN\n';
        sqlStmt +=  '       SET @FORMATTED_NUMBER = CONVERT(NVARCHAR(40),@NUMBER)\n';
        sqlStmt +=  '       GOTO RJUSTIFY\n';
        sqlStmt +=  '   END\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '--    check if format has \'#\' or \'&\'\n';
        sqlStmt +=  'IF    @FORMAT NOT LIKE \'%[&#]%\'\n';
        sqlStmt +=  '   BEGIN\n';
        sqlStmt +=  '-- neither \'#\' nor \'&\' exists in the format\n';
        sqlStmt +=  '       SET @FORMATTED_NUMBER = CONVERT(NVARCHAR(40),@NUMBER)\n';
        sqlStmt +=  '       GOTO RJUSTIFY\n';
        sqlStmt +=  '   END\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '--    Format has only digits\n';
        sqlStmt +=  'IF    @FORMAT NOT LIKE \'%&%\'\n';
        sqlStmt +=  '   BEGIN\n';
        sqlStmt +=  '       SET    @FORMATTED_NUMBER    = @FORMAT\n';
        sqlStmt +=  '       SET    @TMP_NUMBER_STR      = CONVERT(NVARCHAR(40),@NUMBER)\n';
        sqlStmt +=  '       SET    @LEN_TMP_NUMBER_STR  = LEN(@TMP_NUMBER_STR)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '--        add number to the format\n';
        sqlStmt +=  '       WHILE @TMP_NUMBER_STR <> \'\'\n';
        sqlStmt +=  '           BEGIN\n';
        sqlStmt +=  '               -- find first entry of \'#\' starting from the right\n';
        sqlStmt +=  '               SET @LASTGOODPOS = LEN(@FORMATTED_NUMBER) - CHARINDEX(\'#\', REVERSE(@FORMATTED_NUMBER)) + 1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               SET @FORMATTED_NUMBER = STUFF(@FORMATTED_NUMBER, @LASTGOODPOS , 1 , SUBSTRING (@TMP_NUMBER_STR ,@LEN_TMP_NUMBER_STR , 1 ))\n';
        sqlStmt +=  '               SET    @TMP_NUMBER_STR  = STUFF(@TMP_NUMBER_STR, @LEN_TMP_NUMBER_STR, 1, \'\')\n';
        sqlStmt +=  '               SET    @LEN_TMP_NUMBER_STR  = @LEN_TMP_NUMBER_STR - 1\n';
        sqlStmt +=  '           END\n';
        sqlStmt +=  '           -- replace left \'#\' with \'0\'\n';
        sqlStmt +=  '           SET    @FORMATTED_NUMBER  = REPLACE(@FORMATTED_NUMBER,\'#\',\'0\')\n';
        sqlStmt +=  '           GOTO RJUSTIFY\n';
        sqlStmt +=  '   END\n';
        sqlStmt +=  '--    Format has ABC-letters and may be digits\n';
        sqlStmt +=  'ELSE\n';
        sqlStmt +=  '   BEGIN\n';
        sqlStmt +=  '       -- Take out the format string\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       -- take the first found (from left to right)\n';
        sqlStmt +=  '       SET @POSITION = 0\n';
        sqlStmt +=  '       SET @POSITION1 = CHARINDEX(\'#\',@FORMAT)\n';
        sqlStmt +=  '       SET @POSITION2 = CHARINDEX(\'&\',@FORMAT)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       IF @POSITION1 = 0\n';
        sqlStmt +=  '           SET @POSITION = @POSITION2\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       IF @POSITION  = 0 AND @POSITION2 = 0\n';
        sqlStmt +=  '           SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       IF @POSITION = 0 AND @POSITION1 > @POSITION2\n';
        sqlStmt +=  '           SET @POSITION = @POSITION2 -- LOWEST WINS\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       IF @POSITION = 0\n';
        sqlStmt +=  '           SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       SET @FORMATSYMBOLS = \'\'\n';
        sqlStmt +=  '       WHILE @POSITION > 0\n';
        sqlStmt +=  '           BEGIN\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               SET @FORMATSYMBOLS = @FORMATSYMBOLS + SUBSTRING(@FORMAT, @POSITION, 1)\n';
        sqlStmt +=  '               -- take the first found (from left to right)\n';
        sqlStmt +=  '               SET @POSITION1 = CHARINDEX(\'#\', @FORMAT, @POSITION + 1)\n';
        sqlStmt +=  '               SET @POSITION2 = CHARINDEX(\'&\', @FORMAT, @POSITION + 1)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               SET @POSITION = 0\n';
        sqlStmt +=  '               IF @POSITION1 = 0\n';
        sqlStmt +=  '                   SET @POSITION = @POSITION2\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               IF @POSITION  = 0 AND @POSITION2 = 0\n';
        sqlStmt +=  '                   SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               IF @POSITION = 0 AND @POSITION1 > @POSITION2\n';
        sqlStmt +=  '                   SET @POSITION = @POSITION2 -- LOWEST WINS\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               IF @POSITION = 0\n';
        sqlStmt +=  '                   SET @POSITION = @POSITION1\n';
        sqlStmt +=  '           END -- end while\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           SET @NUMOFFORMATSYMBOLS  = LEN(@FORMATSYMBOLS)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           SET @TMP_NUMBER = @NUMBER\n';
        sqlStmt +=  '           SET @TMP_NUMBER_STR =\'\'\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           IF @FORMAT NOT LIKE \'%#%\'\n';
        sqlStmt +=  '               SET  @TMP_NUMBER = @TMP_NUMBER - 1  -- make 1 = \'A\' (class NumberSeq->numInsertFormatLetters(), line 22)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           -- Convert number according the format\n';
        sqlStmt +=  '           SET @INCREMENT = 1\n';
        sqlStmt +=  '           WHILE @TMP_NUMBER <> 0\n';
        sqlStmt +=  '               BEGIN\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   SET @SYMBOL = SUBSTRING(@FORMATSYMBOLS, ((@NUMOFFORMATSYMBOLS - @INCREMENT) + 1), 1)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @SYMBOL = \'#\'\n';
        sqlStmt +=  '                       BEGIN\n';
        sqlStmt +=  '                           SET @REMAINDER  = @TMP_NUMBER % 10\n';
        sqlStmt +=  '                           SET @TMP_NUMBER_STR  = CONVERT(NVARCHAR(40),@REMAINDER) + @TMP_NUMBER_STR\n';
        sqlStmt +=  '                           SET @TMP_NUMBER = @TMP_NUMBER / 10\n';
        sqlStmt +=  '                       END\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @SYMBOL = \'&\'\n';
        sqlStmt +=  '                       BEGIN\n';
        sqlStmt +=  '                           SET @REMAINDER = @TMP_NUMBER % 26\n';
        sqlStmt +=  '                           SET @TMP_NUMBER_STR  = CHAR(@REMAINDER + ASCII(@FIRSTLETTER)) + @TMP_NUMBER_STR\n';
        sqlStmt +=  '                           SET @TMP_NUMBER = @TMP_NUMBER / 26\n';
        sqlStmt +=  '                       END\n';
        sqlStmt +=  '                   SET @INCREMENT = @INCREMENT + 1\n';
        sqlStmt +=  '               END -- WHILE @TMP_NUMBER <> 0\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               -- We have the converted number in tmp_number_str.\n';
        sqlStmt +=  '               -- Now run the same code as for digits\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           SET @FORMATTED_NUMBER = @FORMAT\n';
        sqlStmt +=  '           SET @LEN_TMP_NUMBER_STR  = LEN(@TMP_NUMBER_STR)\n';
        sqlStmt +=  '           SET @LASTGOODPOS = 0\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '           -- add number to the format\n';
        sqlStmt +=  '           WHILE @TMP_NUMBER_STR <> \'\'\n';
        sqlStmt +=  '               BEGIN\n';
        sqlStmt +=  '                   -- find entries of \'#\' or \'&\' starting from the right\n';
        sqlStmt +=  '                   -- Mark\'s note: does not look like this is starting from right\n';
        sqlStmt +=  '                   SET @POSITION1 = CHARINDEX(\'#\', @FORMATTED_NUMBER)\n';
        sqlStmt +=  '                   SET @POSITION2 = CHARINDEX(\'&\', @FORMATTED_NUMBER)\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   SET @POSITION = 0\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @POSITION1 = 0\n';
        sqlStmt +=  '                       SET @POSITION = @POSITION2\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @POSITION = 0 AND @POSITION2 = 0\n';
        sqlStmt +=  '                       SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @POSITION = 0 AND @POSITION1 > @POSITION2\n';
        sqlStmt +=  '                       SET @POSITION = @POSITION2    -- LOWEST WINS\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   IF @POSITION = 0\n';
        sqlStmt +=  '                       SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   WHILE @POSITION > 0\n';
        sqlStmt +=  '                       BEGIN\n';
        sqlStmt +=  '                           SET @LASTGOODPOS = @POSITION\n';
        sqlStmt +=  '                           SET @POSITION1 = CHARINDEX(\'#\',@FORMATTED_NUMBER,  @POSITION + 1)\n';
        sqlStmt +=  '                           SET @POSITION2 = CHARINDEX(\'&\',@FORMATTED_NUMBER,  @POSITION + 1)\n';
        sqlStmt +=  '                           SET @POSITION = 0\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                           IF @POSITION1 = 0\n';
        sqlStmt +=  '                               SET @POSITION = @POSITION2\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                           IF @POSITION = 0 AND @POSITION2 = 0\n';
        sqlStmt +=  '                               SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                           IF @POSITION = 0 AND @POSITION1 > @POSITION2\n';
        sqlStmt +=  '                               SET @POSITION = @POSITION2 -- LOWEST WINS\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                           IF @POSITION = 0\n';
        sqlStmt +=  '                               SET @POSITION = @POSITION1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '                   END  -- @POSITION > 0\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '               SET @FORMATTED_NUMBER   = STUFF(@FORMATTED_NUMBER , @LASTGOODPOS , 1 , SUBSTRING (@TMP_NUMBER_STR , @LEN_TMP_NUMBER_STR , 1 ))\n';
        sqlStmt +=  '               SET @TMP_NUMBER_STR     = STUFF(@TMP_NUMBER_STR, @LEN_TMP_NUMBER_STR, 1, \'\')\n';
        sqlStmt +=  '               SET @LEN_TMP_NUMBER_STR = @LEN_TMP_NUMBER_STR - 1\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       END  -- WHILE @TMP_NUMBER_STR <> \'\'\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '       -- replace left \'#\' with \'0\' and \'&\' with \'A\'\n';
        sqlStmt +=  '       SET @FORMATTED_NUMBER = REPLACE(@FORMATTED_NUMBER,\'#\',\'0\')\n';
        sqlStmt +=  '       SET @FORMATTED_NUMBER = REPLACE(@FORMATTED_NUMBER,\'&\',\'A\')\n';
        sqlStmt +=  '\n';
        sqlStmt +=  '   END --  ELSE @FORMAT NOT LIKE \'%&%\'\n';
        sqlStmt +=  '\n';
        sqlStmt +=  'RJUSTIFY:\n';
        sqlStmt +=  '   IF @RJUSTIFY_LENGTH > 0\n';
        sqlStmt +=  '       BEGIN\n';
        sqlStmt +=  '           SET @FORMAT_LENGTH = LEN(@FORMATTED_NUMBER)\n';
        sqlStmt +=  '           SET @FORMATTED_NUMBER = REPLICATE(\' \',(@RJUSTIFY_LENGTH-@FORMAT_LENGTH))+@FORMATTED_NUMBER\n';
        sqlStmt +=  '       END\n';
        sqlStmt +=  'RETURN @FORMATTED_NUMBER\n';
        sqlStmt +=  '\n';
        sqlStmt +=  'END\n';

        sqlStmt = strFmt(
            sqlStmt,
            this.getSchemaName(),
            functionNameSuffix);

        SqlStatementExecutePermission sqlStatementExecutePermission = new SqlStatementExecutePermission(sqlStmt);
        sqlStatementExecutePermission.assert();

        this.statementExeUpdate(sqlStmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropFnFmtNumberSequence_TSQL</Name>
				<Source><![CDATA[
    private void dropFnFmtNumberSequence_TSQL()
    {
        str sqlStmt =   'IF EXISTS (SELECT name FROM sysobjects WHERE name = \'FN_FMT_NUMBERSEQUENCE%2\' AND type = \'FN\')\n';
        sqlStmt +=  '   DROP FUNCTION [%1].FN_FMT_NUMBERSEQUENCE%2';

        sqlStmt = strFmt(
            sqlStmt,
            this.getSchemaName(),
            functionNameSuffix);

        SqlStatementExecutePermission sqlStatementExecutePermission = new SqlStatementExecutePermission(sqlStmt);
        sqlStatementExecutePermission.assert();

        this.statementExeUpdate(sqlStmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementExeUpdate</Name>
				<Source><![CDATA[
    private int statementExeUpdate(str _sql, Connection _con = null)
    {
        int             sqlResult;
        Statement       statement;
        boolean         cleanupConnection;

        try
        {
            if (!_con)
            {
                cleanupConnection = true;
                _con = new Connection();
            }

            statement = _con.createStatement();

            // Do not call assert() here, do it in the caller
            // BP deviation documented
            sqlResult = statement.executeUpdateWithParameters(_sql, SqlParams::create());
            statement.close();

            if (cleanupConnection && _con)
            {
                _con.finalize();
            }
        }
        catch (Exception::Error)
        {
            if (statement)
            {
                statement.close();
            }

            if (cleanupConnection && _con)
            {
                _con.finalize();
            }

            throw error("@SYS99562");
        }

        return sqlResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaName</Name>
				<Source><![CDATA[
    private str getSchemaName()
    {
        const str sql_Current_Schema = 'SELECT SCHEMA_NAME()';
        str schemaName;

        SqlStatementExecutePermission sqlStatementExecutePermission = new SqlStatementExecutePermission(sql_Current_Schema);
        sqlStatementExecutePermission.assert();

        ResultSet resultSet = this.statementExeQuery(sql_Current_Schema);

        if (resultSet && resultSet.next())
        {
            schemaName = resultSet.getString(1);
        }
        else
        {
            throw error("@SYS99562");
        }

        return schemaName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementExeQuery</Name>
				<Source><![CDATA[
    private ResultSet statementExeQuery(str _sql)
    {
        ResultSet resultSet;

        try
        {
            Connection con = new Connection();
            Statement statement = con.createStatement();

            // Do not call assert() here, do it in the caller
            // BP deviation documented
            resultSet = statement.executeQueryWithParameters(_sql, SqlParams::create());
        }
        catch (Exception::Error)
        {
            throw error("@SYS99562");
        }

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>backendFieldName</Name>
				<Source><![CDATA[
    private str backendFieldName(TableId _tableId, FieldId _fieldId)
    {
        SysDictField sysDictField = new SysDictField(_tableId, _fieldId);
        
        if (!sysDictField)
        {
            if (!SysDictTable::newTableId(_tableId))
            {
                throw error(strFmt("@SYS55416",_tableId));
            }
            else
            {
                throw error(strFmt("@SYS55418",_fieldId, tableId2name(_tableId)));
            }
        }

        return sysDictField.name(DbBackend::Sql);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>