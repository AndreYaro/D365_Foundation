<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementRemainingOpenAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementRemainingOpenAmounts</c> class represents remaining amounts of transactions participating in the settlement.
/// </summary>
public class SettlementRemainingOpenAmounts
{
    private Counter currentIndex; // Gives the current count of transactions not settled due to end of opposite transactions (debit or credit)
    private Counter maxIndex;
    private RecId transRecId[]; // Holds the recid for unsettled transaction
    private RecId transOpenRecId[]; // Holds the recid for unsettled CustTransOpen
    private Counter settlementGroup[]; // Holds the placeholder settlement group for transaction not fully settled
    private CompanyId company[]; // Holds the company of the unsettled transaction
    private SettlementTransactionState transState[]; // Holds the transaction state of the transaction
    private Map amountForCompany; // Maps contains the open amount per company
    private container stillOpenDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentIndex</Name>
				<Source><![CDATA[
    public Counter getCurrentIndex()
    {
        return currentIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransRecId</Name>
				<Source><![CDATA[
    public RecId getTransRecId(Counter _index = currentIndex)
    {
        return transRecId[_index];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOpenRecId</Name>
				<Source><![CDATA[
    public RecId getTransOpenRecId(Counter _index = currentIndex)
    {
        return transOpenRecId[_index];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroup</Name>
				<Source><![CDATA[
    public Counter getGroup(Counter _index = currentIndex)
    {
        return settlementGroup[_index];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompany</Name>
				<Source><![CDATA[
    public CompanyId getCompany(Counter _index = currentIndex)
    {
        return company[_index];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    public SettlementTransactionState getState(Counter _index = currentIndex)
    {
        return transState[_index];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountForCompany</Name>
				<Source><![CDATA[
    private void setAmountForCompany(CompanyId _company, AmountMST _amount)
    {
        amountForCompany.insert(_company, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the still open amount for given company.
    /// </summary>
    /// <param name = "_company">
    /// The company for which the amount is adjusted.
    /// </param>
    /// <param name = "_adjustingAmount">
    /// The adjustment amount.
    /// </param>
    public void adjustAmountForCompany(CompanyId _company, AmountMST _adjustingAmount)
    {
        AmountMST amount = this.getAmountForCompany(_company);
        amount += _adjustingAmount;
        this.setAmountForCompany(_company, amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountForCompany</Name>
				<Source><![CDATA[
    public AmountMST getAmountForCompany(CompanyId _company)
    {
        AmountMST amount;

        if (amountForCompany.exists(_company))
        {
            amount = amountForCompany.lookup(_company);
        }
        else
        {
            amount = 0.0;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimension</Name>
				<Source><![CDATA[
    public DimensionDefault getDimension(Counter _index = currentIndex)
    {
        return conPeek(stillOpenDimension, _index);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    private void next()
    {
        currentIndex++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        currentIndex = 0;
        amountForCompany = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new entry to the collection.
    /// </summary>
    /// <param name="_custVendTransRecId">
    /// The record ID of the transaction for which the values are being set.
    /// </param>
    /// <param name="_custVendTransCompany">
    /// The company ID of the transaction for which the values are being set.
    /// </param>
    /// <param name="_custVendTransExchRateCurToMst">
    /// The exchange rate for the transaction for which the values are being set.
    /// </param>
    /// <param name="_custVendTransOpenRecId">
    /// The record ID of the CustVendTransOpen record.
    /// </param>
    /// <param name="_specTransBalance">
    /// The SpecTrans record used to set the values.
    /// </param>
    /// <param name="_creditTransDefaultDimension">
    /// The dimension of the customer transaction.
    /// </param>
    /// <param name="_transState">
    /// The state of the transaction.
    /// </param>
    /// <param name="_settlementGroupPlaceHolder">
    /// The settlement group for the current settlement.
    /// </param>
    /// <remarks>
    /// Values should be set in the array any time there is a transaction with unsettled amount.
    /// The still open array variables are used when processing transactions with remaining amounts.
    /// </remarks>
    public void add(
        RecId _custVendTransRecId,
        DataAreaId _custVendTransCompany,
        ExchRate _custVendTransExchRateCurToMst,
        RecId _custVendTransOpenRecId,
        AmountMST _specTransBalance,
        DimensionDefault _creditTransDefaultDimension,
        SettlementTransactionState _transState,
        Counter _settlementGroupPlaceHolder)
    {
        AmountMST companyAmount = 0.0;

        this.next();
        if (this.getCurrentIndex() <= maxIndex)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        maxIndex = this.getCurrentIndex();

        transRecId[currentIndex] = _custVendTransRecId;
        transOpenRecId[currentIndex] = _custVendTransOpenRecId;
        transState[currentIndex] = _transState;
        settlementGroup[currentIndex] = _settlementGroupPlaceHolder;
        stillOpenDimension = conIns(stillOpenDimension, currentIndex, _creditTransDefaultDimension);
        company[currentIndex] = _custVendTransCompany;

        // Add amount to the map
        companyAmount = this.getAmountForCompany(_custVendTransCompany);
        companyAmount += _specTransBalance * (_custVendTransExchRateCurToMst / 100.0);
        this.setAmountForCompany(_custVendTransCompany, companyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SettlementRemainingOpenAmounts construct()
    {
        SettlementRemainingOpenAmounts instance = new SettlementRemainingOpenAmounts();

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>