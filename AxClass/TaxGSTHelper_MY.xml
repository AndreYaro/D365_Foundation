<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTHelper_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is the helper class for Malaysia GST features.
/// </summary>
class TaxGSTHelper_MY
{
    public const int LineNumberInterval = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST registration number.
    /// </summary>
    /// <param name="_date">
    /// The date used to determine the GST registration number.
    /// </param>
    /// <returns>
    /// The GST registration number.
    /// </returns>
    public static TaxRegistrationNumber getGSTRegistrationNumber(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        str                                     regNumber;
        CompanyInfo                             companyInfo;
        DirPartyLocation                        dirPartyLocation;
        LogisticsPostalAddress                  logisticsPostalAddress;
        TaxRegistration                         taxRegistration;
        TaxRegistrationTypeApplicabilityRule    taxRegistrationTypeApplicabilityRule;
        LogisticsAddressCountryRegion           logisticsAddressCountryRegion;
        #ISOCountryRegionCodes

        //As the validTimeState keyword workes without reference to the time zone, we can convert date to datetime without reference to the time zone.
        utcdatetime dt = DateTimeUtil::newDateTime(_date, 0);

        companyInfo = companyInfo::findDataArea(curext());
        select firstOnly validTimeState(dt) RegistrationNumber from taxRegistration
            exists join dirPartyLocation
                where dirPartyLocation.RecId                        == taxRegistration.DirPartyLocation
                    && dirPartyLocation.Party                       == companyInfo.RecId
                    && dirPartyLocation.IsPrimaryTaxRegistration    == NoYes::Yes
            exists join logisticsPostalAddress
                where logisticsPostalAddress.Location   == dirPartyLocation.Location
            exists join logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == logisticsPostalAddress.CountryRegionId
                    && logisticsAddressCountryRegion.ISOcode        == #isoMY
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.RecId                        == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    && taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted  == NoYes::Yes;

        regNumber = taxRegistration.RegistrationNumber;

        return regNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjProposalTransTableWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the refInvoiceId and refInvoiceDate.
    /// </summary>
    /// <param name = "_projProposalMap_MY">
    /// The map <c>ProjProposalMap_MY</c>.
    /// </param>
    /// <returns>
    /// true or false.
    /// </returns>
    public static boolean validateProjProposalTransTableWrite(ProjProposalMap_MY _projProposalMap_MY)
    {
        boolean     ret             = true;
        InvoiceId   refInvoiceId    = _projProposalMap_MY.RefInvoiceId_MY;
        InvoiceDate refInvoiceData  = _projProposalMap_MY.RefInvoiceDate_MY;

        if (refInvoiceId && refInvoiceData)
        {
            if (!CustInvoiceJourLookupController_MY::validateRefInvoiceInfo([refInvoiceId, refInvoiceData, RefNum::Project]))
            {
                // @SYP4850090: The original invoice cannot be found.
                ret = checkFailed("@SYP4860680");
            }
        }
        else if ((refInvoiceId && !refInvoiceData) || (!refInvoiceId && refInvoiceData))
        {
            // @SYP4850099: The original invoice number and the original invoice date should either both have a value, or both not have a value. One cannot have a value while the other does not.
            ret = checkFailed("@SYP4860689");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransSourceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get final SourceTableId SourceRecId for a <c>TaxTrans</c> record.
    /// </summary>
    /// <param name = "_taxTrans">
    /// The Tax transaction that GAF information is created for
    /// </param>
    /// <returns>
    /// Final SourceTableId and SourceRecId
    /// </returns>
    /// <remarks>
    /// In the middle of invoice process for PO/Open vendor invoice/FTI, _taxTrans.SourceTableId and _taxTrans.SourceRecId bind to VendInvoiceInfoLine or CustInvoiceLine but they are updated to bind to
    /// VendInvoiceTrans or CustInvoiceTrans at the end of invoice process. this method is used to be called in the middle of invoice process to get final SourceTableId and SourceRecId
    /// </remarks>
    public static container getTaxTransSourceReference(TaxTrans _taxTrans)
    {
        CustInvoiceTrans        custInvoiceTrans;
        VendInvoiceTrans        vendInvoiceTrans;
        SourceDocumentLine      sourceDocumentLineTaxTrans;
        SourceDocumentLine      sourceDocumentLineTaxTransParent;
        TableId                 sourceTableId;
        RefRecId                sourceRecId;

        if (_taxTrans.SourceTableId == tableNum(VendInvoiceInfoLine))
        {
            select firstOnly RecId from vendInvoiceTrans
                exists join sourceDocumentLineTaxTransParent
                    where sourceDocumentLineTaxTransParent.RecId == vendInvoiceTrans.SourceDocumentLine
                    exists join sourceDocumentLineTaxTrans
                        where sourceDocumentLineTaxTrans.ParentSourceDocumentLine   == sourceDocumentLineTaxTransParent.RecId
                            && _taxTrans.SourceDocumentLine                              == sourceDocumentLineTaxTrans.RecId;

            sourceTableId   = vendInvoiceTrans.TableId;
            sourceRecId     = vendInvoiceTrans.RecId;
        }
        else if (_taxTrans.SourceTableId == tableNum(CustInvoiceLine))
        {
            select firstOnly RecId from custInvoiceTrans
                exists join sourceDocumentLineTaxTransParent
                    where sourceDocumentLineTaxTransParent.RecId == custInvoiceTrans.SourceDocumentLine
                    exists join sourceDocumentLineTaxTrans
                        where sourceDocumentLineTaxTrans.ParentSourceDocumentLine   == sourceDocumentLineTaxTransParent.RecId
                            && _taxTrans.SourceDocumentLine                              == sourceDocumentLineTaxTrans.RecId;

            sourceTableId   = custInvoiceTrans.TableId;
            sourceRecId     = custInvoiceTrans.RecId;
        }
        else
        {
            sourceTableId   = _taxTrans.SourceTableId;
            sourceRecId     = _taxTrans.SourceRecId;
        }

        return [sourceTableId, sourceRecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>