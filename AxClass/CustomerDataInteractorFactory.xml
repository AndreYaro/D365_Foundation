<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerDataInteractorFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Constructs <c>FormAmbiguousReferenceResolver</c> objects suitable for translating a partial customer account or name
/// entered into a control into the expected value.
/// </summary>
public class CustomerDataInteractorFactory extends DataInteractorFactory
{
    public static readonly AbsoluteFieldBinding PkFieldBinding = AbsoluteFieldBinding::construct(fieldStr(CustTable, AccountNum), tableStr(CustTable));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructAmbiguousReferenceResolver</Name>
				<Source><![CDATA[
    public AmbiguousReferenceResolver constructAmbiguousReferenceResolver()
    {
        AmbiguousReferenceResolver ambigousReferenceResolver;

        if (this.dataInteractorTarget().fieldBinding().isEqualTo(CustomerDataInteractorFactory::PkFieldBinding))
        {
            //Field binding is already set
            ambigousReferenceResolver = AmbiguousReferenceResolver::construct(this.dataInteractorTarget());
        }
        else
        {
            ambigousReferenceResolver = AmbiguousReferenceResolver::construct(this.dataInteractorTarget(), CustomerDataInteractorFactory::PkFieldBinding);
        }

        return ambigousReferenceResolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingOrCreateResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-uses the last instance of <c>FormControlAmbiguousReferenceResolver</c> created for <param ref="_control"/>
    /// if it exists; otherwise, a new instance of <c>FormControlAmbiguousReferenceResolver</c> is created.
    /// </summary>
    /// <param name = "_control">The control on which contextual data entry is being performed.</param>
    /// <param name="_baseQuery">Custom query on which resolution queries will be based; optional.</param>
    /// <returns>The <c>AmbiguousReferenceResolver</c> instance.</returns>
    public static AmbiguousReferenceResolver useExistingOrCreateResolver(FormControl _control, Query _baseQuery = null)
    {
        return FormControlAmbiguousReferenceResolver::useExistingOrCreate(_control, CustomerDataInteractorFactory::PkFieldBinding, null, _baseQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceForControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the customer account number or by
    /// mapping it to the customer name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_control">The control on which contextual data entry is being performed.</param>
    /// <param name="_baseQuery">Custom query on which resolution queries will be based; optional.</param>
    /// <returns>The resolved value.</returns>
    public static str resolveAmbiguousReferenceForControl(FormControl _control, Query _baseQuery = null)
    {
        return CustomerDataInteractorFactory::useExistingOrCreateResolver(_control, _baseQuery)
                .resolveAmbiguousReference(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefaultBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a query with the appropriate root and joined datasources to be used as a base query for ambiguous resolution of customers.
    /// </summary>
    /// <returns>A <c>Query</c> object.</returns>
    public static Query constructDefaultBaseQuery()
    {
        var query = new Query();

        // add the root DS
        var custTableDS = query.addDataSource(tableNum(CustTable));

        // add the alternate field DS
        var dirPartyTableDS = custTableDS.addDataSource(tableNum(DirPartyTable));
        dirPartyTableDS.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyTable, RecId));
        dirPartyTableDS.joinMode(JoinMode::InnerJoin);
        dirPartyTableDS.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>