<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPriceLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This abstract class is used for project price lookup.
/// </summary>
public abstract class ProjPriceLookup
{
    protected Map fieldNumToParmValueMap;
    protected Map variableValueFieldsToDefaultLookupValuesMap;
    protected List fixedValueFieldsList;
    protected List variableValueFieldsLookupConPrecedenceList;
    protected TableId targetTableNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryBuildDataSourceFilterByPrecedenceListFieldId</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Build query build data source filter by precedence list field identifier.
    /// </summary>
    /// <param name = "_fieldId">Specific field identifier to be added for filter.</param>
    /// <param name = "_qbdsProjHourCostPrice">Query build datasource for the project hour cost price table query filter.</param>
    protected void buildQueryBuildDataSourceFilterByPrecedenceListFieldId(FieldId _fieldId, QueryBuildDataSource _qbdsProjHourCostPrice)
    {
        _qbdsProjHourCostPrice.addRange(_fieldId).value(queryValue(fieldNumToParmValueMap.lookup(_fieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceLoop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find price by looping through the variable value fields lookup container to generate necessary queries.
    /// </summary>
    /// <returns>Price table buffer.</returns>
    protected Common findPriceLoop()
    {
        Common priceTable;

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(classStr(ProjPriceLookup));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(methodStr(ProjPriceLookup, findPriceLoop)))
        {
            int findCount = 0;

            ListEnumerator lookupConListEnum = variableValueFieldsLookupConPrecedenceList.getEnumerator();
            while (lookupConListEnum.moveNext())
            {
                container fieldsCon = lookupConListEnum.current();
                if (this.shouldQueryByLookupFieldsCon(fieldsCon))
                {
                    findCount++;
                    Query query = this.buildQueryByFixedValueLookupFields();
                    this.buildQueryByPrecedenceList(query, fieldsCon);
                    this.buildQueryByVariableValueLookupFieldsWithDefaultValue(query, fieldsCon);
                    priceTable = this.find(query);
                }

                if (priceTable)
                {
                    break;
                }
            }

            activityContext.addCustomProperty('findCount', any2Str(findCount));
            activityContext.addCustomProperty('priceTable.RecId', any2Str(priceTable.RecId));

        }

        return priceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryByLookupFieldsCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether to query by the specified lookup fields container if any field
    /// if any field in this container has default value.
    /// </summary>
    /// <param name = "_lookupFieldsCon">Lookup fields container.</param>
    /// <returns>true to query by lookup fields in the container; otherwise, fasle.</returns>
    protected boolean shouldQueryByLookupFieldsCon(container _lookupFieldsCon)
    {
        boolean shouldQueryByLookup = true;

        for (int i = 1; i <= conlen(_lookupFieldsCon); i++)
        {
            FieldId currentfield = conPeek(_lookupFieldsCon, i);

            if (fieldNumToParmValueMap.lookup(currentfield)
                == variableValueFieldsToDefaultLookupValuesMap.lookup(currentfield))
            {
                return false;
            }
        }

        return shouldQueryByLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByPrecedenceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build hour cost price query by variable value lookup fields with parameter specified values.
    /// Query build data source range will be added for the specific field by the variable values lookup fields container.
    /// </summary>
    /// <param name = "_priceQuery">Price lookup query.</param>
    /// <param name = "_currentVariableValueslookupFieldsCon">Current variable values lookup fields container.</param>
    protected void buildQueryByPrecedenceList(Query _priceQuery, container _currentVariableValueslookupFieldsCon)
    {
        QueryBuildDataSource qbdsPrice = _priceQuery.dataSourceTable(targetTableNum);
        
        for (int i = 1; i <= conlen(_currentVariableValueslookupFieldsCon); i++)
        {
            this.buildQueryBuildDataSourceFilterByPrecedenceListFieldId(
                conPeek(_currentVariableValueslookupFieldsCon, i), qbdsPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByVariableValueLookupFieldsWithDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build price query by variable value lookup fields with default values.
    /// Query build data source range will only be added for the specific field
    /// if it has not been specified in the variable values lookup fields container.
    /// </summary>
    /// <param name = "_priceQuery">Price lookup query.</param>
    /// <param name = "_currentVariableValueslookupFieldsCon">Currenct variable values lookup fields container.</param>
    protected void buildQueryByVariableValueLookupFieldsWithDefaultValue(Query _priceQuery, container _currentVariableValueslookupFieldsCon)
    {
        QueryBuildDataSource qbdsProjTransferPrice = _priceQuery.dataSourceTable(targetTableNum);

        MapEnumerator fieldNumsToDefaultLookupValuesMapEnum = variableValueFieldsToDefaultLookupValuesMap.getEnumerator();
        while (fieldNumsToDefaultLookupValuesMapEnum.moveNext())
        {
            boolean existsInVariableValuesLookupFieldContainer;
            if (conFind(_currentVariableValueslookupFieldsCon, fieldNumsToDefaultLookupValuesMapEnum.currentKey()))
            {
                existsInVariableValuesLookupFieldContainer = true;
            }

            if (!existsInVariableValuesLookupFieldContainer)
            {
                qbdsProjTransferPrice.addRange(fieldNumsToDefaultLookupValuesMapEnum.currentKey())
                    .value(queryValue(variableValueFieldsToDefaultLookupValuesMap.lookup(fieldNumsToDefaultLookupValuesMapEnum.currentKey())));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceByFixedValueFieldOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find price table buffer by fixed value fields only.
    /// </summary>
    /// <returns>Price table buffer.</returns>
    protected Common findPriceByFixedValueFieldOnly()
    {
        // Query price by fixed valued fields and variable fields by default values.
        // This should only be called as last query to lookup when all else fails.

        Query query = this.buildQueryByFixedValueLookupFields();
        container nullCon;
        this.buildQueryByVariableValueLookupFieldsWithDefaultValue(query, nullCon);
        return this.find(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByFixedValueLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build price query by the mandatory fields.
    /// </summary>
    /// <returns>Target query.</returns>
    /// <remarks>
    /// Inherited class needs to override the logic in this method.
    /// </remarks>
    protected Query buildQueryByFixedValueLookupFields()
    {
        Query query = new Query();
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find target record. This method is needed to be override by inherited class.
    /// </summary>
    /// <param name = "_priceQuery">Price query.</param>
    /// <returns>Target table buffer.</returns>
    /// <remarks>
    /// Inherited class needs to override the logic in this method.
    /// </remarks>
    protected Common find(Query _priceQuery)
    {
        Common commonTable;
        return commonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        fieldNumToParmValueMap = new Map(Types::Integer, Types::AnyType);
        variableValueFieldsToDefaultLookupValuesMap = new Map(Types::Integer, Types::AnyType);
        fixedValueFieldsList = new List(Types::Integer);
        variableValueFieldsLookupConPrecedenceList = new List(Types::Container);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>