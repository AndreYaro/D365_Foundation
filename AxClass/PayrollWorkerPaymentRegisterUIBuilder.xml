<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerPaymentRegisterUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollWorkerPaymentRegisterUIBuilder</c> is extended from <c>SrsReportDataContractUIBuilder</c>
/// to create the layout for the report dialog, that was not achieveable from Contract class.
/// </summary>
class PayrollWorkerPaymentRegisterUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField                             payCycleField;
    DialogField                             printSSNField;
    container                               payPeriodList;
    FormBuildComboBoxControl                fromPayPeriodBuildComboBox;
    FormComboBoxControl                     fromPayPeriodComboBox;
    PayrollFromPayPeriod                    fromPayPeriod;
    PayrollPayPeriodRecId                   fromPayPeriodRecId;
    FormBuildComboBoxControl                toPayPeriodBuildComboBox;
    FormComboBoxControl                     toPayPeriodComboBox;
    PayrollPayPeriodRecId                   toPayPeriodRecId;
    PayrollToPayPeriod                      toPayPeriod;
    PayrollPayCycleRecId                    payCycleRecId;
    PayrollWorkerPaymentRegisterContract    rdpContract;

    const str PayPeriodListControlFrom = 'PayPeriodListControlFrom';
    const str PayPeriodListControlTo   = 'PayPeriodListControlTo';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the layout for the report dialog.
    /// </summary>
    public void build()
    {
        rdpContract = this.dataContractObject();

        // Add the pay cycle field.
        payCycleField = this.addDialogField(methodstr(PayrollWorkerPaymentRegisterContract, parmPayCycleId), rdpContract);
        payCycleField.lookupButton(2);

        // Add the print social security number field.
        printSSNField = this.addDialogField(methodstr(PayrollWorkerPaymentRegisterContract, parmPrintSSN), rdpContract);

        // Add the from pay period field.
        fromPayPeriodBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, PayPeriodListControlFrom);
        fromPayPeriodBuildComboBox.label("@SYS4090033");
        fromPayPeriodBuildComboBox.comboType(1);

        // Add the to pay period field.
        toPayPeriodBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, PayPeriodListControlTo);
        toPayPeriodBuildComboBox.label("@Payroll:ToPayPeriod");
        toPayPeriodBuildComboBox.comboType(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayPeriodList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the list of period start and end dates and populates the combo box in dialog with these values for the process.
    /// </summary>
    protected void createPayPeriodList()
    {
        PayrollPayPeriod    selectedPayPeriod;
        int                 i,
                            selectionIndex = 1;

        payPeriodList = conNull();
        fromPayPeriodComboBox.clear();
        toPayPeriodComboBox.clear();

        while select PeriodStartDate, PeriodEndDate from selectedPayPeriod
            order by PeriodEndDate
            where selectedPayPeriod.PayCycle == payCycleRecId
        {
            i++;
            fromPayPeriodComboBox.add(strfmt("@SYS76785",
                date2StrUsr(selectedPayPeriod.PeriodStartDate, DateFlags::FormatAll),
                date2StrUsr(selectedPayPeriod.PeriodEndDate, DateFlags::FormatAll)));

            toPayPeriodComboBox.add(strfmt("@SYS76785",
                date2StrUsr(selectedPayPeriod.PeriodStartDate, DateFlags::FormatAll),
                date2StrUsr(selectedPayPeriod.PeriodEndDate, DateFlags::FormatAll)));

            payPeriodList += selectedPayPeriod.RecId;
        }

        fromPayPeriodComboBox.selection(selectionIndex - 1);
        toPayPeriodComboBox.selection(selectionIndex - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to set values to the <c>PayrollWorkerPaymentRegisterContract</c> class
    /// parameters before running the report.
    /// </summary>
    public void getFromDialog()
    {
        super();

        rdpContract.parmPayCycleRecId(payCycleRecId);

        fromPayPeriodRecId  = conPeek(payPeriodList, fromPayPeriodComboBox.selection() + 1);
        rdpContract.parmFromPayPeriodRecId(fromPayPeriodRecId);

        toPayPeriodRecId  = conPeek(payPeriodList, toPayPeriodComboBox.selection() + 1);
        rdpContract.parmToPayPeriodRecId(toPayPeriodRecId);

        this.setLastPayPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form with the values from the previous report run.
    /// </summary>
    public void initializeFields()
    {
        printSSNField.visible(isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministrationUSA)));
        printSSNField.control().value(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPayCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>PayCycle</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control for which to perform the lookup.
    /// </param>
    public void lookupPayCycle(FormStringControl _ctrl)
    {
        SysTableLookup          payCycleLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        payCycleLookup = SysTableLookup::newParameters(tablenum(PayrollPayCycle), _ctrl, true);

        // Add the fields to be shown in the lookup form
        payCycleLookup.addLookupfield(fieldnum(PayrollPayCycle, PayCycleId));
        payCycleLookup.addLookupfield(fieldnum(PayrollPayCycle, Description));

        // Create the query datasource
        queryBuildDataSource = query.addDataSource(tablenum(PayrollPayCycle));

        // Add the query to the lookup form
        payCycleLookup.parmQuery(query);

        // Perform lookup
        payCycleLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPayCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the pay period filters based on the value selected from the lookup.
    /// since the call to super cannot be made, the value gets modified only after executing this method.
    /// </summary>
    /// <returns>
    /// true when the pay cycle is modified. Otherwise, false.
    /// </returns>
    public boolean modifyPayCycle()
    {
        boolean ret = true;

        this.setPayControlsEnabled();
        this.createPayPeriodList();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of the pay cycle control.
    /// </summary>
    /// <param name="_payCycleControl">
    /// The pay cycle control for which the modified event needs to be handled.
    /// </param>
    /// <returns>
    /// true when the pay cycle is modified. Otherwise, false.
    /// </returns>
    public boolean payCycleModified(FormStringControl _payCycleControl)
    {
        return this.modifyPayCycle();
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the pay cycle field.
    /// </summary>
    /// <param name="_payCycleControl">
    /// The pay cycle control which need to be validated.
    /// </param>
    /// <returns>
    /// true when the pay cycle is valid. Otherwise, false.
    /// </returns>
    public boolean payCycleValidate(FormStringControl _payCycleControl)
    {
        return this.validatePayCycle(_payCycleControl.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog      dialogLocal = this.dialog();
        DialogField dialogField;

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        fromPayPeriodComboBox = dialogLocal.dialogForm().formRun().control(fromPayPeriodBuildComboBox.id());
        toPayPeriodComboBox = dialogLocal.dialogForm().formRun().control(toPayPeriodBuildComboBox.id());
        payCycleRecId = PayrollPayCycle::findByPayCycle(payCycleField.control().valueStr()).RecId;
        this.createPayPeriodList();
        this.setLastPayPeriod();

        // Override the methods of pay cycle field.
        dialogField = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(PayrollWorkerPaymentRegisterContract, parmPayCycleId));
        dialogField.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(PayrollWorkerPaymentRegisterUIBuilder, lookupPayCycle), this);
        dialogField.registerOverrideMethod(methodstr(FormStringControl, validate), methodstr(PayrollWorkerPaymentRegisterUIBuilder, payCycleValidate), this);
        dialogField.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(PayrollWorkerPaymentRegisterUIBuilder, payCycleModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>PayrollPayPeriod</c> records in from and to pay period combo boxes based on the contract class parameters.
    /// </summary>
    private void setLastPayPeriod()
    {
        Integer len = conLen(payPeriodList);
        int     i;

        fromPayPeriodRecId = rdpContract.parmFromPayPeriodRecId();
        toPayPeriodRecId = rdpContract.parmToPayPeriodRecId();

        for (i = 0; i < len; i++)
        {
            if (fromPayPeriodRecId == conPeek(payPeriodList, i))
            {
                fromPayPeriodComboBox.selection(i - 1);
                fromPayPeriod = fromPayPeriodComboBox.valueStr();
                rdpContract.parmFromPayPeriod(fromPayPeriod);
                break;
            }
        }

        for (i = 0; i < len; i++)
        {
            if (toPayPeriodRecId == conPeek(payPeriodList, i))
            {
                toPayPeriodComboBox.selection(i - 1);
                toPayPeriod = toPayPeriodComboBox.valueStr();
                rdpContract.parmToPayPeriod(toPayPeriod);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayControlsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the state of the parameter fields.
    /// </summary>
    public void setPayControlsEnabled()
    {
        if (!PayCycleRecId)
        {
            payCycleField.control().text('');
            fromPayPeriodComboBox.enabled(false);
            toPayPeriodComboBox.enabled(false);
        }
        else
        {
            fromPayPeriodComboBox.enabled(true);
            toPayPeriodComboBox.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the pay cycle name.
    /// </summary>
    /// <param name="_payCycleId">
    /// The pay cycle name which need to be validated.
    /// </param>
    /// <returns>
    /// true when the pay cycle name is valid. Otherwise, false.
    /// </returns>
    public boolean validatePayCycle(PayrollPayCycleId _payCycleId)
    {
        PayrollPayCycle payCycle;
        boolean         ret = true;

        payCycle = null;
        payCycleRecId = 0;

        select firstonly RecId from payCycle
            where payCycle.PayCycleId == _payCycleId;

        payCycleRecId = payCycle.RecId;

        if (_payCycleId && !payCycleRecId)
        {
            // Pay cycle with the name the user entered was not found.
            ret = checkFailed(strfmt("@SYS304909", _payCycleId, fieldpname(PayrollPayCycle, PayCycleId), tablepname(PayrollPayCycle)));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>