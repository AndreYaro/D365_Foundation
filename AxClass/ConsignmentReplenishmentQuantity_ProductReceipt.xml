<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentQuantity_ProductReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ConsignmentReplenishmentQuantity_ProductReceipt</c> class calculates the quantities of the
///    <c>ConsignmentReplenishmentOrderLine</c> record during product receipt.
/// </summary>
public class ConsignmentReplenishmentQuantity_ProductReceipt extends ConsignmentReplenishmentQuantityBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInventoryQuantities</Name>
				<Source><![CDATA[
    protected container calcInventoryQuantities(
        ConsignmentReplenishmentOrderLine _consignmentReplenishmentOrderLine,
        PurchUpdate   _specQty = PurchUpdate::All,
        InventQty     _inventQty = naReal())
    {
        ConsignmentReplenishmentInventoryQuantity qtyUpdate;
        ConsignmentReplenishmentInventoryQuantity remainAfter;
        ConsignmentReplenishmentInventoryQuantity remainBefore;

        if (_inventQty != naReal())
        {
            qtyUpdate = _inventQty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _consignmentReplenishmentOrderLine.ReceiveInventoryQuantityNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = _consignmentReplenishmentOrderLine.RemainingInventoryPhysicalQuantity;
                    break;

                case PurchUpdate::Recorded:
                    qtyUpdate = _consignmentReplenishmentOrderLine.registered();
                    break;
            }
        }

        remainBefore = _consignmentReplenishmentOrderLine.RemainingInventoryPhysicalQuantity;

        if (qtyUpdate * _consignmentReplenishmentOrderLine.ReplenishmentQuantity < 0)
        {
            remainAfter = _consignmentReplenishmentOrderLine.RemainingInventoryPhysicalQuantity;
        }
        else
        {
            remainAfter = remainBefore - qtyUpdate;
            if (remainAfter * _consignmentReplenishmentOrderLine.ReplenishmentQuantity < 0)
            {
                remainAfter = 0;
            }
        }

       return [qtyUpdate, remainBefore, remainAfter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReplenishmentQuantities</Name>
				<Source><![CDATA[
    protected container calcReplenishmentQuantities(
        ConsignmentReplenishmentOrderLine   _consignmentReplenishmentOrderLine,
        PurchUpdate                         _specQty = PurchUpdate::All,
        ConsignmentReplenishmentQuantity    _qty = naReal())
    {
        ConsignmentReplenishmentQuantity qtyUpdate;
        ConsignmentReplenishmentQuantity remainAfter;
        ConsignmentReplenishmentQuantity remainBefore;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }

        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _consignmentReplenishmentOrderLine.ReceiveReplenishmentQuantityNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = _consignmentReplenishmentOrderLine.RemainingReplenishmentPhysicalQuantity;
                    break;

                case PurchUpdate::Recorded:
                    qtyUpdate = _consignmentReplenishmentOrderLine.registeredInReplenishmentUnit();
                    break;
            }
        }

        remainBefore = _consignmentReplenishmentOrderLine.RemainingReplenishmentPhysicalQuantity;

        if (qtyUpdate * _consignmentReplenishmentOrderLine.ReplenishmentQuantity < 0)
        {
            remainAfter = _consignmentReplenishmentOrderLine.RemainingReplenishmentPhysicalQuantity;
        }
        else
        {
            remainAfter = _consignmentReplenishmentOrderLine.RemainingReplenishmentPhysicalQuantity - qtyUpdate;

            if (remainAfter * _consignmentReplenishmentOrderLine.ReplenishmentQuantity < 0)
            {
                remainAfter = 0;
            }
        }

        return [qtyUpdate, remainBefore, remainAfter];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>