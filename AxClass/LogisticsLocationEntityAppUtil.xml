<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationEntityAppUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsLocationEntityAppUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onGettingDefaultLocationRoleFromEntity</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(LogisticsLocationEntity), delegatestr(LogisticsLocationEntity, gettingDefaultLocationRoleFromEntity))]
    public static void onGettingDefaultLocationRoleFromEntity(TableId _entityTableId, EventHandlerResult result)
    {
        switch (_entityTableId)
        {
            case tableNum(HcmWorker),
                tableNum(HcmContractorEntity),
                tableNum(HcmEmployeeEntity),
                tableNum(HcmContractorV2Entity),
                tableNum(HcmEmployeeV2Entity),
                tableNum(HcmWorkerContactEntity),
                tableNum(HcmWorkerEntity),
                tableNum(HcmWorkerPostalAddressV2Entity),
                tableNum(HcmWorkerPostalAddressDualWriteEntity),
                tableNum(HcmPersonAddressEntity):

                LogisticsLocationRole logisticsLocationRole;
                LogisticsLocationRoleRecId roleTypeRecId = HcmSharedParameters::find().DefaultLocationRoleRecId;

                if (roleTypeRecId)
                {
                    logisticsLocationRole =  LogisticsLocationRole::findRec(roleTypeRecId);
                }
                else
                {
                    logisticsLocationRole = LogisticsLocationRole::findByType(LogisticsLocationRoleType::Home);
                }

                result.result(logisticsLocationRole);
                break;

            case tableNum(HcmApplicant),
                tableNum(HcmApplicantEntity),
                tableNum(HRMApplicationBasket):

                result.result(LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Recruit));
                break;

            case tableNum(InventLocation),
                tableNum(InventSite):

                result.result(LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
                break;

            case tableNum(HRMCourseHotel),
                tableNum(HcmCourseHotelEntity),
                tableNum(HRMCourseLocation),
                tableNum(HcmCourseLocationEntity),
                tableNum(CompanyInfo),
                tableNum(OMOperatingUnit),
                tableNum(OMOperatingUnitEntity),
                tableNum(HcmWorkerBankAccount),
                tableNum(HcmWorkerBankAccountEntity),
                tableNum(HcmIssuingAgency),
                tableNum(HcmIssuingAgencyEntity),
                tableNum(HcmSurveyCompany),
                tableNum(HcmSurveyCompanyEntity),
                tableNum(HRMMedia),
                tableNum(HcmMediaEntity):

                result.result(LogisticsLocationRole::findByType(LogisticsLocationRoleType::Business));
                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressLocationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the <c>LogisticsLocationRecId</c> for an address.
    /// </summary>
    /// <param name="_common">
    ///    The entity for which to find the location.
    /// </param>
    /// <param name="_roleType">
    ///    The role of the location.
    /// </param>
    /// <param name="_transDateTime">
    ///    The date time value for when the location is valid.
    /// </param>
    /// <returns>
    ///    The <c>RecId</c> value of the <c>LogisticsLocation</c> record.
    /// </returns>
    public static LogisticsLocationRecId addressLocationRecId(Common _common,
        LogisticsLocationRoleType _roleType, TransDateTime _transDateTime = DateTimeUtil::utcNow())
    {
        LogisticsLocationEntity entity = LogisticsLocationEntity::findLocation(_common, _roleType, _transDateTime);
        return entity.parmLocationRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteLocation_Subsciber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(LogisticsLocationEntity),
        delegatestr(LogisticsLocationEntity,canDeleteLocation_delegate))]
    static void canDeleteLocation_Subsciber(LogisticsLocationEntity_canDelete_Args _args)
    {
        if (!_args.result()) {
            return;
        }
        _args.result(LogisticsLocationEntityAppUtil::canDeleteLocation(_args.getRefRecId(), _args.getExceptionList(), _args.getShowInfoLog()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteLocation</Name>
				<Source><![CDATA[
    static boolean canDeleteLocation(LogisticsLocationRecId _location,container exceptionList = conNull(), boolean _showInfoLog = false)
    {
        Query                   query;
        QueryBuildDataSource    qbDataSource;
        QueryRun                qRun;
        int                     i;
        container               tableList;
        TableId                 tableId;
        DataAreaId              dataAreaId;
        DataAreaId              olddataAreaId;
        SysDictTable            dictTable;
        Common                  common;
        boolean                 flag;
        RecId                   recId;
        void readOne()
        {
            if (qRun.next())
            {
                common = qRun.getNo(1);
                tableId = conPeek(tableList,common.UnionAllBranchId*2-1);
                dataAreaId = common.(dictTable.fieldName2Id(identifierStr(dataAreaId)));
                recId      = common.(dictTable.fieldName2Id(identifierStr(RecId)));
                if (!exceptionList || !conFind(exceptionList,[tableId,recId]))
                {
                    flag = true;
                }
            }
            else
            {
                flag = false;
            }
        }

        unchecked(Uncheck::TableSecurityPermission)
        {
            tableList = LogisticsLocationEntityAppUtil::locationTableList();
            if (tableList && _location)
            {
                query = new Query();
                query.queryType(QueryType::Union);
                query.allowCrossCompany(true);
                for (i=1; i<=conLen(tableList); i+=2)
                {
                    dictTable = new SysDictTable(conPeek(tableList,i));
                    qbDataSource = query.addDataSource(conPeek(tableList,i));
                    qbDataSource.update(false);
                    qbDataSource.fields().dynamic(false);
                    qbDataSource.fields().clearFieldList();
                    qbDataSource.fields().addField(conPeek(tableList,i+1));
                    qbDataSource.addRange(conPeek(tableList,i+1)).value(queryValue(_location));
                    qbDataSource.addSortField(dictTable.fieldName2Id(identifierStr(dataAreaId)));
                    qbDataSource.unionType(UnionType::UnionAll);
                }
                qRun = new QueryRun(query);
                readOne();
                olddataAreaId = dataAreaId;
                if (flag && _showInfoLog)
                {
                    setPrefix(strFmt("@SYS136898",_location));
                }
                while (flag)
                {
                    if (_showInfoLog)
                    {
                        // Company %1
                        setPrefix(strFmt("@SYS110249",dataAreaId));
                    }
                    do
                    {
                        if (_showInfoLog)
                        {
                            // %1
                            checkFailed(strFmt("@SYS82282",tableId2pname(tableId)));
                        }
                        readOne();
                    } while (flag && dataAreaId == olddataAreaId);
                    olddataAreaId = dataAreaId;
                }
            }
            if (tableId)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeletePostalAddress_Subsciber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(LogisticsLocationEntity),
        delegatestr(LogisticsLocationEntity,canDeletePostalAddress_delegate))]
    static void canDeletePostalAddress_Subsciber(LogisticsLocationEntity_canDelete_Args _args)
    {
        if (!_args.result()) {
            return;
        }
        _args.result(LogisticsLocationEntityAppUtil::canDeletePostalAddress(_args.getRefRecId(), _args.getExceptionList(), _args.getShowInfoLog()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeletePostalAddress</Name>
				<Source><![CDATA[
    static boolean canDeletePostalAddress(LogisticsPostalAddressRecId _postalAddress,container exceptionList = conNull(), boolean _showInfoLog = false)
    {
        Query                   query;
        QueryBuildDataSource    qbDataSource;
        QueryRun                qRun;
        int                     i;
        container               tableList;
        TableId                 tableId;
        DataAreaId              dataAreaId;
        DataAreaId              olddataAreaId;
        SysDictTable            dictTable;
        Common                  common;
        boolean                 flag;
        RecId                   recId;
        Set                     dependentTables;
        SetIterator             iterator;

        void readOne()
        {
            if (qRun.next())
            {
                common = qRun.getNo(1);
                tableId = conPeek(tableList,common.UnionAllBranchId*2-1);
                dataAreaId = common.(dictTable.fieldName2Id(identifierStr(dataAreaId)));
                recId      = common.(dictTable.fieldName2Id(identifierStr(RecId)));
                if (!exceptionList || !conFind(exceptionList,[tableId,recId]))
                {
                    flag = true;
                }
            }
            else
            {
                flag = false;
            }
        }

        unchecked(Uncheck::TableSecurityPermission)
        {
            tableList = LogisticsLocationEntityAppUtil::postalAddressTableList();
            if (tableList && _postalAddress)
            {
                query = new Query();
                query.queryType(QueryType::Union);
                query.allowCrossCompany(true);
                dependentTables = new Set(Types::String);
                for (i=1; i<=conLen(tableList); i+=2)
                {
                    dictTable = new SysDictTable(conPeek(tableList,i));
                    qbDataSource = query.addDataSource(conPeek(tableList,i));
                    qbDataSource.update(false);
                    qbDataSource.fields().dynamic(false);
                    qbDataSource.fields().clearFieldList();
                    qbDataSource.fields().addField(conPeek(tableList,i+1));
                    qbDataSource.addRange(conPeek(tableList,i+1)).value(queryValue(_postalAddress));
                    qbDataSource.addSortField(dictTable.fieldName2Id(identifierStr(dataAreaId)));
                    qbDataSource.unionType(UnionType::UnionAll);
                }
                qRun = new QueryRun(query);
                readOne();
                olddataAreaId = dataAreaId;
                if (flag && _showInfoLog)
                {
                    setPrefix(strFmt("@SYS136897",_postalAddress));
                }
                while (flag)
                {
                    if (_showInfoLog)
                    {
                        // Company %1
                        setPrefix(strFmt("@SYS110249",dataAreaId));
                    }
                    do
                    {
                        if (_showInfoLog)
                        {
                            // %1
                            dependentTables.add(strFmt("@SYS82282",tableId2pname(tableId)));
                        }
                        readOne();
                    } while (flag && dataAreaId == olddataAreaId);
                    olddataAreaId = dataAreaId;
                }
                iterator = new SetIterator(dependentTables);
                while (iterator.more())
                {
                    checkFailed(iterator.value());
                    iterator.next();
                }
            }          
            if (tableId)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLocationRoleFromEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default location role, depending on the entity type.
    /// </summary>
    /// <param name="_entityTableId">
    ///    The <c>TableId</c> value of the entity, that is, a <c>CustTable</c> value, a <c>HcmWorker</c>
    ///    value, and so on.
    /// </param>
    /// <returns>
    ///    A map of the key and value pair in which the key is the <c>RecId</c> value and the value is the
    ///    <c>Name</c> value.
    /// </returns>
    public static Map getDefaultLocationRoleFromEntity(TableId _entityTableId)
    {
        LogisticsLocationRole locationRole;
        Map defaultLocationRole = new Map(Types::Int64, Types::String); // Value key pair

        switch (_entityTableId)
        {
            case tableNum(HcmWorker) :
                locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home);
                break;

            case tableNum(HcmApplicant) :
            case tableNum(HRMApplicationBasket) :
                locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Recruit);
                break;

            case tableNum(InventLocation):
            case tableNum(InventSite) :
                locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
                break;

            default :
                locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business);
        }

        if (locationRole)
        {
            defaultLocationRole.insert(locationRole.RecId, locationRole.description());
        }
        return defaultLocationRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationTableList</Name>
				<Source><![CDATA[
    static container locationTableList()
    {
        container list;

        list = [tableNum(AssetLocation)    ,fieldNum(AssetLocation,LogisticsLocation)
        ,tableNum(BankAccountTable)    ,fieldNum(BankAccountTable,Location)
        ,tableNum(BankGroup)    ,fieldNum(BankGroup,Location)
        ,tableNum(CustBankAccount)    ,fieldNum(CustBankAccount,Location)
        ,tableNum(CustInvoiceTable)    ,fieldNum(CustInvoiceTable,DeliveryLocation)
        ,tableNum(IntrastatParameters)    ,fieldNum(IntrastatParameters,AgentLocation)
        ,tableNum(ProjInvoiceTable)    ,fieldNum(ProjInvoiceTable,InvoiceLocation)
        ,tableNum(ProjTable)    ,fieldNum(ProjTable,DeliveryLocation)];
        list +=
    //    ,tablenum(PurchReqLine)    ,fieldnum(PurchReqLine,DeliveryLocation)
        [tableNum(SalesBasket)    ,fieldNum(SalesBasket,DeliveryLocation)
        ,tableNum(SalesCarrier)    ,fieldNum(SalesCarrier,Location)
        ,tableNum(SalesQuotationBasket)    ,fieldNum(SalesQuotationBasket,DeliveryLocation)];
        list +=
        [tableNum(Tax1099SoftwareVendParameters)    ,fieldNum(Tax1099SoftwareVendParameters,Location)
        ,tableNum(Tax1099TransmitterParameters)    ,fieldNum(Tax1099TransmitterParameters,Location)
        ,tableNum(TaxAuthorityAddress)    ,fieldNum(TaxAuthorityAddress,Location)
    /*    ,tablenum(TrvExpTrans)    ,fieldnum(TrvExpTrans,LogisticsLocation)*/
        ,tableNum(VendBankAccount)    ,fieldNum(VendBankAccount,Location)
    /*  ,tablenum(VendRequest)    ,fieldnum(VendRequest,BankLocation)
        ,tablenum(VendRequest)    ,fieldnum(VendRequest,cContactLocation)
        ,tablenum(VendRequest)    ,fieldnum(VendRequest,cLocation)
        ,tablenum(VendRFQJour)    ,fieldnum(VendRFQJour,DeliveryLocation)*/];

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddressTableList</Name>
				<Source><![CDATA[
    static container postalAddressTableList()
    {
        container list;

        list = [tableNum(CustCollectionLetterJour),    fieldNum(CustCollectionLetterJour,PostalAddress)
        ,tableNum(CustConfirmJour),    fieldNum(CustConfirmJour,DeliveryPostalAddress)
        ,tableNum(CustConfirmSalesLink),    fieldNum(CustConfirmSalesLink,DeliveryPostalAddress)
        ,tableNum(CustInterestJour),    fieldNum(CustInterestJour,PostalAddress)
        ,tableNum(CustInvoiceJour),    fieldNum(CustInvoiceJour,DeliveryPostalAddress)
        ,tableNum(CustInvoiceJour),    fieldNum(CustInvoiceJour,InvoicePostalAddress)
        ,tableNum(CustInvoiceSalesLink),    fieldNum(CustInvoiceSalesLink,DeliveryPostalAddress)
        ,tableNum(CustInvoiceSalesLink),    fieldNum(CustInvoiceSalesLink,InvoicePostalAddress)
        ,tableNum(CustInvoiceTrans),    fieldNum(CustInvoiceTrans,DeliveryPostalAddress)
        ,tableNum(CustPackingSlipJour),    fieldNum(CustPackingSlipJour,DeliveryPostalAddress)
        ,tableNum(CustPackingSlipJour),    fieldNum(CustPackingSlipJour,InvoicePostalAddress)
        ,tableNum(CustPackingSlipSalesLink),    fieldNum(CustPackingSlipSalesLink,DeliveryPostalAddress)
        ,tableNum(CustPackingSlipTrans),    fieldNum(CustPackingSlipTrans,DeliveryPostalAddress)
        ,tableNum(CustQuotationConfirmJour),    fieldNum(CustQuotationConfirmJour,DeliveryPostalAddress)
        ,tableNum(CustQuotationConfirmSalesLink),    fieldNum(CustQuotationConfirmSalesLink,DeliveryPostalAddress)
        ,tableNum(CustQuotationJour),    fieldNum(CustQuotationJour,DeliveryPostalAddress)
        ,tableNum(CustQuotationSalesLink),    fieldNum(CustQuotationSalesLink,DeliveryPostalAddress)
        ,tableNum(InventTransferJour),    fieldNum(InventTransferJour,FromPostalAddress)
        ,tableNum(InventTransferJour),    fieldNum(InventTransferJour,ToPostalAddress)
        ,tableNum(ProjInvoiceJour),    fieldNum(ProjInvoiceJour,DeliveryPostalAddress)
        ,tableNum(ProjProposalJour),    fieldNum(ProjProposalJour,DeliveryPostalAddress)
        ,tableNum(VendInvoiceInfoLine),    fieldNum(VendInvoiceInfoLine,DeliveryPostalAddress)
        ,tableNum(VendInvoiceInfoTable),    fieldNum(VendInvoiceInfoTable,DeliveryPostalAddress)
        ,tableNum(VendPackingSlipJour),    fieldNum(VendPackingSlipJour,DeliveryPostalAddress)
        ,tableNum(VendPurchOrderJour),    fieldNum(VendPurchOrderJour,DeliveryPostalAddress)
        ,tableNum(VendReceiptsListJour),    fieldNum(VendReceiptsListJour,DeliveryPostalAddress)
        ,tableNum(VendRFQJour),    fieldNum(VendRFQJour,DeliveryPostalAddress)];

        list +=
        [tableNum(CustInvoiceTable),                    fieldNum(CustInvoiceTable, PostalAddress)
        ,tableNum(PurchRFQCaseTable),                   fieldNum(PurchRFQCaseTable, DeliveryPostalAddress)
        ,tableNum(PurchRFQCaseLine),                    fieldNum(PurchRFQCaseLine, DeliveryPostalAddress)
        ,tableNum(PurchRFQTable),                       fieldNum(PurchRFQTable, DeliveryPostalAddress)
        ,tableNum(PurchRFQLine),                        fieldNum(PurchRFQLine, DeliveryPostalAddress)
        ,tableNum(SalesTable),                          fieldNum(SalesTable, DeliveryPostalAddress)
        ,tableNum(SalesLine),                           fieldNum(SalesLine, DeliveryPostalAddress)
        ,tableNum(SalesParmTable),                      fieldNum(SalesParmTable, DeliveryPostalAddress)
        ,tableNum(SalesParmLine),                       fieldNum(SalesParmLine, DeliveryPostalAddress)
        ,tableNum(SalesQuotationTable),                 fieldNum(SalesQuotationTable, DeliveryPostalAddress)
        ,tableNum(SalesQuotationLine),                  fieldNum(SalesQuotationLine, DeliveryPostalAddress)
        ,tableNum(SalesQuotationParmTable),             fieldNum(SalesQuotationParmTable, DeliveryPostalAddress)
        ,tableNum(SalesQuotationParmLine),              fieldNum(SalesQuotationParmLine, DeliveryPostalAddress)
        ,tableNum(PurchTable),                          fieldNum(PurchTable, DeliveryPostalAddress)
        ,tableNum(PurchLine),                           fieldNum(PurchLine, DeliveryPostalAddress)
        ,tableNum(ConsignmentReplenishmentOrderHeader), fieldNum(ConsignmentReplenishmentOrderHeader, DeliveryPostalAddress)
        ,tableNum(ConsignmentReplenishmentOrderLine),   fieldNum(ConsignmentReplenishmentOrderLine, DeliveryPostalAddress)
        ,tableNum(SMAServiceOrderTable),                fieldNum(SMAServiceOrderTable, ServicePostalAddress)
        ,tableNum(InventTransferTable),                 fieldNum(InventTransferTable, FromPostalAddress)
        ,tableNum(InventTransferTable),                 fieldNum(InventTransferTable, ToPostalAddress)
        // <GEELT><GEELV>
        ,tableNum(TransportationDocument),              fieldNum(TransportationDocument, LoadedPostalAddress)
        ,tableNum(TransportationDocument),              fieldNum(TransportationDocument, UnloadedPostalAddress)
        // </GEELV></GEELT>
        ];

        // <GEERU>
        list +=
        [tableNum(CustInvoice4PaymJour_RU), fieldNum(CustInvoice4PaymJour_RU, DeliveryPostalAddress)
        ,tableNum(FactureJour_RU),          fieldNum(FactureJour_RU,          DeliveryPostalAddress)
        ,tableNum(InventTransferJour),      fieldNum(InventTransferJour,      LadingPostalAddress_RU)
        ,tableNum(InventTransferJour),      fieldNum(InventTransferJour,      UnladingPostalAddress_RU)
        ,tableNum(InventTransferParmTable), fieldNum(InventTransferParmTable, LadingPostalAddress_RU)
        ,tableNum(InventTransferParmTable), fieldNum(InventTransferParmTable, UnladingPostalAddress_RU)
        ,tableNum(InventTransferTable),     fieldNum(InventTransferTable,     LadingPostalAddress_RU)
        ,tableNum(InventTransferTable),     fieldNum(InventTransferTable,     UnladingPostalAddress_RU)
        ,tableNum(WMSBillOfLading),         fieldNum(WMSBillOfLading,         LadingPostalAddress_RU)
        ,tableNum(WMSBillOfLading),         fieldNum(WMSBillOfLading,         UnladingPostalAddress_RU)
        ];
        // </GEERU>

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedLocation</Name>
				<Source><![CDATA[
    static container relatedLocation(TableId _tableId,RecId _recId)
    {
        SysDictTable            dictTable;
        Common                  entity;
        container               locations;

        dictTable = new SysDictTable(_tableId);
        if (dictTable)
        {
            entity = dictTable.makeRecord();

            select firstonly entity
                where entity.RecId == _recId;
        }
        switch (entity.TableId)
        {
            case tableNum(SalesCreateReleaseOrderTableTmp) :
            locations = [LogisticsPostalAddress::locationRecIdFromAddressRecId(entity.(fieldNum(SalesCreateReleaseOrderTableTmp, DeliveryPostalAddress)))];
            break;

            case tableNum(SalesCreateReleaseOrderLineTmp) :
            locations = [LogisticsPostalAddress::locationRecIdFromAddressRecId(entity.(fieldNum(SalesCreateReleaseOrderLineTmp, DeliveryPostalAddress)))];
            break;

            case tableNum(PurchReqLine) :
            locations = [LogisticsPostalAddress::locationRecIdFromAddressRecId(entity.(fieldNum(PurchReqLine,DeliveryPostalAddress)))];
            break;
        }
        return locations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedLocationRole</Name>
				<Source><![CDATA[
    static LogisticsLocationRoleType relatedLocationRole(TableId _tableId)
    {
        LogisticsLocationRoleType roleType;

        switch (_tableId)
        {
            case tableNum(SalesCreateReleaseOrderTableTmp) :
            case tableNum(SalesCreateReleaseOrderLineTmp) :
            case tableNum(SalesTable) :
            case tableNum(SalesLine) :
            case tableNum(PurchTable) :
            case tableNum(PurchLine) :
            case tableNum(ConsignmentReplenishmentOrderHeader) :
            case tableNum(ConsignmentReplenishmentOrderLine) :
            case tableNum(SalesQuotationTable) :
            case tableNum(SalesQuotationLine) :
            case tableNum(PurchRFQCaseTable) :
            case tableNum(PurchRFQCaseLine) :
            case tableNum(PurchReqTable) :
            case tableNum(PurchReqLine) :
            roleType = LogisticsLocationRoleType::Delivery;
            break;

            case tableNum(CustInvoiceTable) :
            roleType = LogisticsLocationRoleType::Invoice;
            break;

            case tableNum(SMAServiceOrderTable) :
            roleType = LogisticsLocationRoleType::Service;
            break;
        }
        return roleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionNewAddressDefaultRole</Name>
				<Source><![CDATA[
    public static LogisticsLocationRoleType transactionNewAddressDefaultRole(TableId _tableId)
    {
        LogisticsLocationRoleType type = LogisticsLocationEntityAppUtil::relatedLocationRole(_tableId);
        return type ? type : LogisticsLocationRoleType::Delivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionPostalAddressFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>LogisticsPostalAddress</c> field ID on the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    The table for which to get the <c>LogisticsPostalAddress</c> field ID.
    /// </param>
    /// <param name="_roleType">
    /// The role type to differentiate postal addresses if more than one are present on the specified table.
    /// </param>
    /// <returns>
    ///    The <c>FieldId</c> value of a <c>LogisticsPostalAddress</c> foreign key.
    /// </returns>
    public static FieldId transactionPostalAddressFieldId(
        TableId                   _tableId,
        LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None)
    {
        switch (_tableId)
        {
            case tableNum(SalesCreateReleaseOrderTableTmp): return fieldNum(SalesCreateReleaseOrderTableTmp, DeliveryPostalAddress);
            case tableNum(SalesTable) : return fieldNum(SalesTable, DeliveryPostalAddress);
            // <GEERU>
            case tableNum(SalesParmTable) :
                switch (_roleType)
                {
                    case LogisticsLocationRoleType::Lading_W :
                        return fieldNum(SalesParmTable, LadingPostalAddress_RU);
                    case LogisticsLocationRoleType::Unlading_W :
                        return fieldNum(SalesParmTable, UnladingPostalAddress_RU);

                    default                                  :
                        return fieldNum(SalesParmTable, DeliveryPostalAddress);
                }
            case tableNum(InventTransferTable) :
                switch (_roleType)
                {
                    case LogisticsLocationRoleType::Lading_W :
                        return fieldNum(InventTransferTable, LadingPostalAddress_RU);
                    case LogisticsLocationRoleType::Unlading_W :
                        return fieldNum(InventTransferTable, UnladingPostalAddress_RU);

                    default :
                        return fieldNum(InventTransferTable, ToPostalAddress);
                }
            case tableNum(WMSBillOfLading) :
                switch (_roleType)
                {
                    case LogisticsLocationRoleType::Lading_W :
                        return fieldNum(WMSBillOfLading, LadingPostalAddress_RU);
                    case LogisticsLocationRoleType::Unlading_W :
                        return fieldNum(WMSBillOfLading, UnladingPostalAddress_RU);

                    default :
                        return fieldNum(WMSBillOfLading, DeliveryPostalAddress);
                }
            // </GEERU>
            case tableNum(SalesLine) : return fieldNum(SalesLine, DeliveryPostalAddress);
            case tableNum(SalesQuotationTable) : return fieldNum(SalesQuotationTable, DeliveryPostalAddress);
            case tableNum(SalesQuotationLine) : return fieldNum(SalesQuotationLine, DeliveryPostalAddress);
            case tableNum(LedgerJournalTrans) : return fieldNum(LedgerJournalTrans, RemittanceAddress);
            case tableNum(VendTrans) : return fieldNum(VendTrans, RemittanceAddress);
            case tableNum(CustInvoiceTable) :
                switch (_roleType)
                {
                    case LogisticsLocationRoleType::Delivery :
                        return fieldNum(CustInvoiceTable, DeliveryPostalAddress);
                    default :
                        return fieldNum(CustInvoiceTable, PostalAddress);
                }
            case tableNum(PurchRFQCaseTable) : return fieldNum(PurchRFQCaseTable, DeliveryPostalAddress);
            case tableNum(PurchRFQCaseLine) : return fieldNum(PurchRFQCaseLine, DeliveryPostalAddress);
            case tableNum(PurchRFQTable) : return fieldNum(PurchRFQTable, DeliveryPostalAddress);
            case tableNum(PurchRFQLine) : return fieldNum(PurchRFQLine, DeliveryPostalAddress);
            case tableNum(PurchTable) : return fieldNum(PurchTable, DeliveryPostalAddress);
            case tableNum(TmpPurchTable) : return fieldNum(TmpPurchTable, DeliveryPostalAddress);
            case tableNum(PurchLine) : return fieldNum(PurchLine, DeliveryPostalAddress);
            case tableNum(ConsignmentReplenishmentOrderHeader) : return fieldNum(ConsignmentReplenishmentOrderHeader, DeliveryPostalAddress);
            case tableNum(ConsignmentReplenishmentOrderLine) : return fieldNum(ConsignmentReplenishmentOrderLine, DeliveryPostalAddress);
            case tableNum(SMAServiceOrderTable) : return fieldNum(SMAServiceOrderTable, ServicePostalAddress);
            case tableNum(PurchReqLine) : return fieldNum(PurchReqLine, DeliveryPostalAddress);
            case tableNum(VendInvoiceInfoTable) : return fieldNum(VendInvoiceInfoTable, DeliveryPostalAddress);
            case tableNum(VendInvoiceInfoLine) : return fieldNum(VendInvoiceInfoLine, DeliveryPostalAddress);
            case tableNum(AgreementHeaderDefault) : return fieldNum(AgreementHeaderDefault, DeliveryPostalAddress);
            // <GEELT><GEELV>
            case tableNum(TransportationDocument) :
                switch (_roleType)
                {
                    case LogisticsLocationRoleType::Unlading_W :
                        return fieldNum(TransportationDocument, UnloadedPostalAddress);

                    default :
                        return fieldNum(TransportationDocument, LoadedPostalAddress);
                }
            case tableNum(CzCustAdvanceInvoiceTable) : return fieldNum(CzCustAdvanceInvoiceTable, PostalAddress);
            case tableNum(CzVendAdvanceInvoiceTable) : return fieldNum(CzVendAdvanceInvoiceTable, PostalAddress);
            case tableNum(RAssetTable) : return fieldNum(RAssetTable, LogisticsPostalAddress);
            // </GEELV></GEELT>
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocation_replaceCommon_subscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(LogisticsLocationEntity),
        delegatestr(LogisticsLocationEntity, findLocation_replaceCommon_delegate))]
    static void findLocation_replaceCommon_subscriber(Common common, EventHandlerResult _res)
    {
        switch (common.TableId)
        {
            case tableNum(SalesTable) :
            _res.result(CustTable::find(common.(fieldNum(SalesTable,CustAccount))));
            break;

            case tableNum(PurchTable) :
            _res.result(VendTable::find(common.(fieldNum(PurchTable,OrderAccount))));
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocation_find_subscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(LogisticsLocationEntity),
        delegatestr(LogisticsLocationEntity, findLocation_find_delegate))]
    static void findLocation_find_subscriber(Common common, TransDateTime _transDateTime, EventHandlerResult _res)
    {
        switch (common.TableId)
        {
            case tableNum(InventSite):
                LogisticsLocationRecId logisticsLocationRecId = InventSite::getLocationFromRole(common.(fieldNum(InventSite,RecId)), LogisticsLocationRoleType::Delivery, _transDateTime);
                _res.result(LogisticsLocationEntity::constructFromLocationRecId(logisticsLocationRecId, false, _transDateTime));
            break;

            case tableNum(InventLocation):
                logisticsLocationRecId = InventLocation::getLocationFromRole(common.(fieldNum(InventLocation,RecId)), LogisticsLocationRoleType::Delivery, _transDateTime);
                _res.result(LogisticsLocationEntity::constructFromLocationRecId(logisticsLocationRecId, false, _transDateTime));
            break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>