<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPPOReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to manage mixed license plate receiving for inbound orders.
/// </summary>
public abstract class WHSWorkExecuteDisplayMixedLPPOReceiving extends WHSWorkExecuteDisplayMixedLPReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransType</Name>
				<Source><![CDATA[
    protected InventTransType getInventTransType()
    {
        var orderProvider = this.receivingOrderProvider(false);
        return orderProvider ? orderProvider.inventTransType() : InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected Common getOrderLine()
    {
        if (this.getInventTransType() == InventTransType::Purch)
        {
            return this.getPurchLine();
        }

        return this.receivingOrderProvider().orderLine(pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    protected PurchLine getPurchLine()
    {
        return PurchLine::find(pass.lookupStr(#PONum), pass.lookupInt64(#POLineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNum</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to setOrderNumFromWorkLine', false, 20\07\2023)]
    protected void setOrderNum(InventTransId _inventTransId)
    {
        pass.insert(#PONum, PurchLine::findInventTransId(_inventTransId).PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNumFromWorkLine</Name>
				<Source><![CDATA[
    protected void setOrderNumFromWorkLine(WHSWorkLine _workLine)
    {
        var orderProvider = this.receivingOrderProvider(false);
        WHSWorkTransType workTransType = orderProvider ? orderProvider.workTransType() : _workLine.whsWorkTable().WorkTransType;

        if (workTransType == WHSWorkTransType::Purch)
        {
            this.setOrderNum(_workLine.InventTransId);
            return;
        }
        
        if (!orderProvider)
        {
            var whsWorkTransactionType = WhsWorkTransactionType::singletonFromType(workTransType) as WHSInboundShipmentWorkTransactionType;
            orderProvider = whsWorkTransactionType ? whsWorkTransactionType.receivingOrderProvider() : new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
        }

        orderProvider.setOrderNum(pass, orderProvider.findInventTransId(_workLine.InventTransId).OrderNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    protected InventDim getInventDim(Common _common)
    {
        WHSReceiptOrderLine orderLine = _common;

        return orderLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptAtWarehouse</Name>
				<Source><![CDATA[
    protected void checkReceiptAtWarehouse(
        Common			 _common,
        InventLocationId _inventLocationId)
    {
        this.checkReceiptAtWarehouseAllowed(_common, _inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOrderNumValue</Name>
				<Source><![CDATA[
    protected boolean noOrderNumValue()
    {
        return (!pass.hasValue(#LoadId)
            && !(this.receivingOrderProvider(false) && this.receivingOrderProvider().hasOrderNum(pass)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassWithSavedValues</Name>
				<Source><![CDATA[
    protected WhsrfPassthrough resetPassWithSavedValues(container _con)
    {
        var orderProvider = this.receivingOrderProvider();

        Num saveOrderId = orderProvider.orderNum(pass);

        pass = this.resetPassthrough(_con, false);

        orderProvider.setOrderNum(pass, saveOrderId);

        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMixedLicensePlate</Name>
				<Source><![CDATA[
    protected void validateExistingMixedLicensePlate(WHSMixedLicensePlateReceipt _mixedLP)
    {
        WHSWorkTransType expectedWorkTransType = this.receivingOrderProvider().workTransType();

        if (_mixedLP.WorkTransType == expectedWorkTransType
        &&  _mixedLP.LoadId)
        {
            throw error("@WAX:MixedLPAssociatedLoadError");
        }
        else if (_mixedLP.WorkTransType != expectedWorkTransType)
        {
            throw error("@WAX:MixedLPDiffWorkTransTypeError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderProviderFromMixedLPLine</Name>
				<Source><![CDATA[
    private WHSWorkExecuteDisplayReceivingOrderProvider getOrderProviderFromMixedLPLine(WHSMixedLicensePlateReceiptLine _mixedLPLine)
    {
        var orderProvider = WHSWorkExecuteDisplayReceivingOrderProvider::newFromInventTransType(_mixedLPLine.InventTransType);
        return orderProvider ? orderProvider : new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModifyItemQtyStr</Name>
				<Source><![CDATA[
    protected str buildModifyItemQtyStr(
        WHSLicensePlateId _licensePlateId,
        Line              _mixedLineNum)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        select firstOnly InventTransId, InventTransType, InventQty, LineNum, InventDimId, CapturedWeight from mixedLPLines
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(pass.lookup(#LicensePlateId)).RecId
            &&    mixedLPLines.LineNum               == str2int(pass.lookup(#MixedLPLineNum));

        var orderProvider = this.getOrderProviderFromMixedLPLine(mixedLPLines);
        WHSReceiptOrderLine orderLine = orderProvider.findInventTransId(mixedLPLines.InventTransId);

        boolean isCWItem = PdsGlobal::pdsIsCWItem(orderLine.ItemId);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                            strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                            strFmt("@WAX3192", orderProvider.orderFieldLabel(), orderLine.OrderNumber),
                            strFmt("@WAX3192", "@WAX1240", orderLine.ItemId),
                            strFmt("@WAX3192", orderProvider.lineQtyFieldLabel(), isCWItem ? orderLine.PdsCWQty : orderLine.InventQty),
                            strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                            isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(orderLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                            strFmt("@WAX3192", "@SYS153282", InventTableModule::find(orderLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        if (this.captureTrackingDimensions(orderLine.ItemId))
        {
            str trackingInfo = this.getTrackingInfoList(orderLine.ItemId, mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        return lpInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLine</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to checkInboundOrderLine', false, 14\04\2023)]
    protected boolean checkPurchLine(
        InventTransId   _transId,
        StatusReceipt   _status)
    {
        return this.checkInboundOrderLine(_transId, _status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInboundOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a WHSReceiptOrderLine can have more quantity received against it.
    /// </summary>
    /// <param name="_transId">
    /// The InventTransId on the WHSReceiptOrderLine that is being checked.
    /// </param>
    /// <param name="_status">
    /// The status to check against.
    /// </param>
    /// <returns>
    /// True if the WHSReceiptOrderLine can have more quantity received against it, otherwise false.
    /// </returns>
    protected boolean checkInboundOrderLine(
        InventTransId   _transId,
        StatusReceipt   _status)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        boolean             ret;

        select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId == _transId
            join ItemId, sum(Qty) from inventTrans
            group by InventTransOrigin, ItemId
                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                &&    inventTrans.StatusReceipt         == _status
                &&    inventTrans.StatusIssue           == StatusIssue::None
                &&    inventTrans.Qty                    > 0;

        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        WHSReceiptOrderLine orderLine = this.receivingOrderProvider().findInventTransId(_transId);

        switch (_status)
        {
            case StatusReceipt::Ordered:
                // Both mixed lp line table and inventTrans store qty in inventory unit
                if (WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(orderLine.InventTransId) < inventTrans.Qty)
                {
                    ret = true;
                }

                break;

            case StatusReceipt::Registered:
                // Add qty on mixed LP table before converting, as its also stored in the invent unit on this table
                InventQty totalReceivedQty = releasedProductUnitConverter.convert(inventTrans.Qty + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(orderLine.InventTransId),
                                                                        UnitOfMeasure::findBySymbol(inventTrans.inventUnit()).RecId,
                                                                        UnitOfMeasure::findBySymbol(orderLine.Unit).RecId,
                                                                        NoYes::No,
                                                                        orderLine.ItemId,
                                                                        orderLine.InventDimId,
                                                                        NoYes::No);

                // If line still has open qty use it
                if (totalReceivedQty < (orderLine.Qty * orderLine.OverDeliveryPct / 100 + orderLine.Qty))
                {
                    ret = true;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConversion</Name>
				<Source><![CDATA[
    protected container buildConversion(container _con)
    {
        container    ret = _con;

        ItemId       itemId       = pass.lookup(#ItemId);
        InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);

        if (pass.exists(#SelectedValueUOM) && pass.lookup(#SelectedValueUOM) != '' && pass.lookup(#SelectedValueUOM) != handlingUnitId)
        {
            if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
            {
                pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
            }
            else if (!pass.exists(#Initiation))
            {
                pass.remove(#CurrentUOM);
            }

            WHSReceiptOrderLine orderLine = this.getOrderLine();

            if (itemId && PdsGlobal::pdsIsCWItem(itemId))
            {
                ret += [this.buildControl(#RFLabel,
                                          WHSWorkExecuteDisplayMixedLPControls::InventConversion,
                                          strFmt("@WAX:MobileDeviceItemConversion",
                                                 pass.parmSelectedValueUOM(),
                                                 EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(itemId,
                                                                                                (orderLine) ? orderLine.InventDimId : '',
                                                                                                1,
                                                                                                pass.parmSelectedValueUOM(),
                                                                                                handlingUnitId,
                                                                                                NoYes::No,
                                                                                                NoYes::Yes),
                                                handlingUnitId),
                                          1, '', #WHSRFUndefinedDataType, '', 0)];
            }
            else
            {
                ret += [this.buildControl(#RFLabel,
                                      WHSWorkExecuteDisplayMixedLPControls::InventConversion,
                                      strFmt("@WAX:MobileDeviceItemConversion",
                                             pass.parmSelectedValueUOM(),
                                             InventTableModule::unitConvert(itemId,
                                                                            ModuleInventPurchSales::Invent,
                                                                            pass.parmSelectedValueUOM(),
                                                                            1,
                                                                            (orderLine) ? orderLine.InventDimId : ''),
                                             handlingUnitId),
                                      1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfo</Name>
				<Source><![CDATA[
    protected container buildLPInfo(WHSLicensePlateId _licensePlateId)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        container                       ret;
        boolean                         callBuildLPInfoLine = WHSBuildLPInfoControlFlight::instance().isEnabled();
        int                             i;

        while select InventTransId, InventTransType, LineNum, InventQty, CapturedWeight, InventDimId from mixedLPLines
            order by LineNum
            where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_licensePlateId).RecId
        {
            if (callBuildLPInfoLine)
            {
                ret = this.buildLPInfoLine(ret, mixedLPLines, i);
            }
            else
            {
                var orderProvider = this.getOrderProviderFromMixedLPLine(mixedLPLines);
                WHSReceiptOrderLine orderLine = orderProvider.findInventTransId(mixedLPLines.InventTransId);

                boolean isCWItem = PdsGlobal::pdsIsCWItem(orderLine.ItemId);
            
                str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                            strFmt("@WAX3192", "@SYS70473", mixedLPLines.LineNum),
                            strFmt("@WAX3192", orderProvider.orderFieldLabel(), orderLine.OrderNumber),
                            strFmt("@WAX3192", "@WAX1240", orderLine.ItemId),
                            strFmt("@WAX3192", orderProvider.lineQtyFieldLabel(), isCWItem ? orderLine.PdsCWQty : orderLine.InventQty),
                            strFmt("@WAX3192", "@WAX:LPQty", mixedLPLines.InventQty),
                            isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(orderLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", mixedLPLines.CapturedWeight)) : '',
                            strFmt("@WAX3192", "@SYS153282", InventTableModule::find(orderLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

                str trackingInfo;
            
                if (InventTable::find(orderLine.ItemId).productDimensionGroup())
                {
                    trackingInfo = this.getProductDimensionList(orderLine.ItemId, mixedLPLines.InventDimId);
                    lpInfo = lpInfo + trackingInfo;
                }

                if (this.captureTrackingDimensions(orderLine.ItemId))
                {
                    trackingInfo = this.getTrackingInfoList(orderLine.ItemId, mixedLPLines.InventDimId);
                    lpInfo = lpInfo + trackingInfo;
                }
                ret += [this.buildControl(#RFLabel, int2str(i), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
            mixedLPHasLines = true;
            i++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfoLine</Name>
				<Source><![CDATA[
    protected container buildLPInfoLine(container _con, WHSMixedLicensePlateReceiptLine _mixedLPLines, int _controlNum)
    {
        container ret = _con;

        var orderProvider = this.getOrderProviderFromMixedLPLine(_mixedLPLines);
        WHSReceiptOrderLine orderLine = orderProvider.findInventTransId(_mixedLPLines.InventTransId);

        boolean isCWItem = PdsGlobal::pdsIsCWItem(orderLine.ItemId);
            
        str lpInfo = strFmt('%1\n%2\n%3\n%4\n%5%6\n%7',
                            strFmt("@WAX3192", "@SYS70473", _mixedLPLines.LineNum),
                            strFmt("@WAX3192", orderProvider.orderFieldLabel(), orderLine.OrderNumber),
                            strFmt("@WAX3192", "@WAX1240", orderLine.ItemId),
                            strFmt("@WAX3192", orderProvider.lineQtyFieldLabel(), isCWItem ? orderLine.PdsCWQty : orderLine.InventQty),
                            strFmt("@WAX3192", "@WAX:LPQty", _mixedLPLines.InventQty),
                            isCWItem ? strFmt('\n%1\n%2',
                                                strFmt("@WAX3192", "@SYS153282", WHSCatchWeightHelper::inventHandlingUnitId(orderLine.ItemId)),
                                                strFmt("@WAX3192", "@WAX:WeightCaptured", _mixedLPLines.CapturedWeight)) : '',
                            strFmt("@WAX3192", "@SYS153282", InventTableModule::find(orderLine.ItemId, ModuleInventPurchSales::Invent).UnitId));

        str trackingInfo;
            
        if (InventTable::find(orderLine.ItemId).productDimensionGroup())
        {
            trackingInfo = this.getProductDimensionList(orderLine.ItemId, _mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }

        if (this.captureTrackingDimensions(orderLine.ItemId))
        {
            trackingInfo = this.getTrackingInfoList(orderLine.ItemId, _mixedLPLines.InventDimId);
            lpInfo = lpInfo + trackingInfo;
        }
        ret += [this.buildControl(#RFLabel, int2str(_controlNum), lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDeliveryMixedLP</Name>
				<Source><![CDATA[
    protected boolean checkOverDeliveryMixedLP(WHSMixedLicensePlateReceiptLine _mixedLPLines)
    {
        WHSReceiptOrderLine orderLine = this.receivingOrderProvider().findInventTransId(_mixedLPLines.InventTransId);
        WhsWorkExecute	workExecute = WhsWorkExecute::construct();

        InventHandlingQty additionalHandlingQty = (pass.lookupNum(#NewQty) - _mixedLPLines.InventQty);
        InventHandlingUnitId inventHandlingUnit = (this.isCatchWeightItem(orderLine) ? WHSCatchWeightHelper::inventHandlingUnitId(orderLine.ItemId) : InventTableModule::find(orderLine.ItemId, ModuleInventPurchSales::Invent).UnitId);

        if (!this.checkLoadOverreceiptForOrderLine(orderLine, additionalHandlingQty, inventHandlingUnit))
        {
            return true;
        }

        return !workExecute.checkOverDeliveryForOrderLine(orderLine,
                                                          (WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(_mixedLPLines.InventTransId) + additionalHandlingQty),
                                                          inventHandlingUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLPReceiptLine</Name>
				<Source><![CDATA[
    protected void createLPReceiptLine(
        Common		 _common,
        InventDimId	 _inventDimId,
        MenuItemName _menuItemName)
    {
        WHSReceiptOrderLine orderLine = _common;

        // Create record in received table.
        WHSMixedLicensePlateReceiptLine::mixedLPReceiveLine(_inventDimId,
                                                     orderLine.InventTransId,
                                                     pass.parmCurrentQty(),
                                                     pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) ? pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                                                                    : pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume),
                                                     pass.lookup(#ReceiptId),
                                                     pass.lookup(#UserId),
                                                     _menuItemName,
                                                     pass.lookupStr(#LoadId),
                                                     pass.lookupStr(#ShipmentId),
                                                     pass.lookupStr(#ContainerType),
                                                     orderLine.workTransType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentQtyUOM</Name>
				<Source><![CDATA[
    protected container setCurrentQtyUOM(
        container _con,
        Common	  _common)
    {
        WHSReceiptOrderLine orderLine = _common;
        boolean isCWItem  = pass.parmItemId() && PdsGlobal::pdsIsCWItem(pass.parmItemId());
  
        if (UnitOfMeasure::unitOfMeasureIdBySymbol(pass.lookup(#SelectedValueUOM)))
        {
            if (isCWItem)
            {
                pass.insert(#CurrentQty, EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(pass.parmItemId(),
                                                                                        (orderLine) ? orderLine.InventDimId : '',
                                                                                        pass.lookupNum(#Qty),
                                                                                        pass.parmSelectedValueUOM(),
                                                                                        WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId()),
                                                                                        NoYes::No,
                                                                                        NoYes::Yes));
            }
            else
            {
                pass.insert(#CurrentQty, InventTableModule::unitConvert(pass.lookup(#ItemId),
                                                                        ModuleInventPurchSales::Invent,
                                                                        pass.lookup(#SelectedValueUOM),
                                                                        pass.lookupNum(#Qty),
                                                                        orderLine.InventDimId));
            }
        }

        container		ret			= _con;
        WhsWorkExecute	workExecute	= WhsWorkExecute::construct();
        boolean			overDeliveryBreak;
        
        if (step == 1)
        {
            pass.insert(#CurrentUOM, WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId()));
        }

        if (step == 1
            || (step == 2 && !pass.hasValue(#DimQty)))
        {
            if (!this.checkLoadOverreceiptForOrderLine(orderLine))
            {
                ret = conIns(ret, 1, conPeek(this.addErrorLabel(conNull(), "@WAX:CannotOverreceiveOnLoad", WHSRFColorText::Error), 1));
                overDeliveryBreak = true;
            }
            else if (!workExecute.checkOverDeliveryForOrderLine(orderLine,
                                                                (pass.lookupNum(#CurrentQty) + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(orderLine.InventTransId)),
                                                                pass.lookup(#CurrentUOM)))
            {
                ret = conIns(ret, 1, conPeek(this.addErrorLabel(conNull(), "@WAX2142", WHSRFColorText::Error), 1));
                overDeliveryBreak = true;
            }

            if (overDeliveryBreak && step == 2)
            {
                overDeliveryError = true;

                ret = this.buildRegistering(ret, '');

                pass.insert(#CurrentUOM, WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId()));
            }
        }

        return [ret, overDeliveryBreak];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadOverreceiptForOrderLine</Name>
				<Source><![CDATA[
    private boolean checkLoadOverreceiptForOrderLine(WHSReceiptOrderLine _orderLine,
                                                     Qty                 _additionalQty       = pass.lookupNum(#CurrentQty), 
                                                     UnitOfMeasureSymbol _additionalQtyUnitId = pass.lookup(#CurrentUOM))
    {
        boolean menuItemBlocksOverreceipt = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).blockLoadLineQuantityOverreceipt();
        boolean noLoadSpecified = !pass.hasValue(#LoadId);

        if (!menuItemBlocksOverreceipt || noLoadSpecified)
        {
            return true;
        }

        WHSLoadLine orderLineLoadLine;

        select firstonly orderLineLoadLine
            where orderLineLoadLine.InventTransId == _orderLine.InventTransId
               && orderLineLoadLine.LoadId        == pass.lookup(#LoadId);

        Debug::assert(orderLineLoadLine.RecId != 0);

        boolean canLoadLineAcceptReceipt = orderLineLoadLine.canLoadLineAcceptReceipt(
                                            _additionalQty + WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(_orderLine.InventTransId),
                                            _additionalQtyUnitId);

        return canLoadLineAcceptReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightItem(Common _common)
    {
        WHSReceiptOrderLine orderLine = _common as WHSReceiptOrderLine;

        return PdsGlobal::pdsIsCWItem(orderLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTaggedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight tag enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight tag enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightTaggedItem(Common _common)
    {
        WHSReceiptOrderLine orderLine = _common;

        return WHSInventTable::isCatchWeightTagTracked(orderLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetOrderLine</Name>
				<Source><![CDATA[
    protected boolean canGetOrderLine()
    {
        var orderProvider = this.receivingOrderProvider(false);
        return orderProvider && orderProvider.hasOrderNum(pass) && orderProvider.hasLineNum(pass);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>