<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoListPageMultiSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to manage form state upon record selection on list page style forms displaying vendor invoices.
/// Control states need to be managed depending on the record(s) selected on a FormDataSource tied to <c>VendInvoiceInfoTable</c>
/// </summary>
public class VendInvoiceInfoListPageMultiSelect
{
    FormDataSource formDataSource;
    PurchEditLinesForm_Invoice vendInvoiceListPageState;
    VendInvoiceInfoTable vendInvoiceInfoTable;
    boolean shouldBeEnabled = true;
    boolean isInvoiceOpen = false;
    boolean recordsMarked = false;
    boolean crossCompaniesMarked = false;
    boolean inWorkflowReviewOrRejected = false;
    private boolean isIncludedInProcessAutomation = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmShouldBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not controls should be enabled or disabled based on the records selected from the datasource.
    /// </summary>
    /// <param name = "_shouldBeEnabled">Should controls be enabled or disabled</param>
    /// <returns>A boolean indicating whether or not controls should be enabled or disabled</returns>
    public boolean parmShouldBeEnabled(boolean _shouldBeEnabled = shouldBeEnabled)
    {
        if (!prmIsDefault(_shouldBeEnabled))
        {
            shouldBeEnabled = _shouldBeEnabled;
        }

        return shouldBeEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsIncludedInProcessAutomation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not one of the selected invoice records is included in process automation.
    /// </summary>
    /// <param name = "_isIncludedInProcessAutomation">Is a selected invoice included in process automation.</param>
    /// <returns>A boolean indicating whether or not one of the selected invoice records is included in process automation</returns>
    [Hookable(false)]
    public boolean parmIsIncludedInProcessAutomation(boolean _isIncludedInProcessAutomation = isIncludedInProcessAutomation)
    {
        if (!prmIsDefault(_isIncludedInProcessAutomation))
        {
            isIncludedInProcessAutomation = _isIncludedInProcessAutomation;
        }

        return isIncludedInProcessAutomation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoiceOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not one of the selected invoice records is open.
    /// </summary>
    /// <param name = "_isInvoiceOpen">Is a selected invoice record open</param>
    /// <returns>A boolean indicating whether or not one of the selected invoice records is open</returns>
    public boolean parmIsInvoiceOpen(boolean _isInvoiceOpen = isInvoiceOpen)
    {
        if (!prmIsDefault(_isInvoiceOpen))
        {
            isInvoiceOpen = _isInvoiceOpen;
        }

        return isInvoiceOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordsMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not there are any records marked on the datasource.
    /// </summary>
    /// <param name = "_recordsMarked">A value indicating if records are marked</param>
    /// <returns>A boolean indicating whether or not there are any selected records</returns>
    public boolean parmRecordsMarked(boolean _recordsMarked = recordsMarked)
    {
        if (!prmIsDefault(_recordsMarked))
        {
            recordsMarked = _recordsMarked;
        }

        return recordsMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrossCompaniesMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not any of the selected records are from different companies.
    /// </summary>
    /// <param name = "_crossCompaniesMarked">A value indicating if there are records marked from different companies</param>
    /// <returns>A boolean indicating whether or not any of the selected records are from different companies</returns>
    public boolean parmCrossCompaniesMarked(boolean _crossCompaniesMarked = crossCompaniesMarked)
    {
        if (!prmIsDefault(_crossCompaniesMarked))
        {
            crossCompaniesMarked = _crossCompaniesMarked;
        }

        return crossCompaniesMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInWorkflowReviewOrRejected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not any of the selected records are in workflow and have a Review or Rejected state.
    /// </summary>
    /// <param name = "_inWorkflowReviewOrRejected">A value indicating if there are records marked that are in Review or Rejected workflow state</param>
    /// <returns>A boolean indicating whether or not any of the selected records are in workflow and have a Review or Rejected state</returns>
    public boolean parmInWorkflowReviewOrRejected(boolean _inWorkflowReviewOrRejected = inWorkflowReviewOrRejected)
    {
        if (!prmIsDefault(_inWorkflowReviewOrRejected))
        {
            inWorkflowReviewOrRejected = _inWorkflowReviewOrRejected;
        }

        return inWorkflowReviewOrRejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>VendInvoiceInfoListPageMultiSelect</c> instance
    /// </summary>
    /// <param name = "_formDataSource">The <c>FormDataSource</c> that is tied to the <c>VendInvoiceInfoTable</c> on the calling form</param>
    /// <param name = "_vendInvoiceInfoTable">The currently highlighted <c>VendInvoiceInfoTable</c> record on the calling form</param>
    /// <param name = "_vendInvoiceListPageState">The current instance of the <c>PurchEditLinesForm_Invoice</c> from the calling form</param>
    protected void new(FormDataSource _formDataSource, VendInvoiceInfoTable _vendInvoiceInfoTable, PurchEditLinesForm_Invoice _vendInvoiceListPageState)
    {
        formDataSource = _formDataSource;
        vendInvoiceInfoTable = _vendInvoiceInfoTable;
        vendInvoiceListPageState = _vendInvoiceListPageState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSelectState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through the currently selected/marked records on the <c>FormDataSource</c> and determines the selection state variable values for this instance.
    /// </summary>
    public void determineSelectState()
    {
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        PurchInvoiceType previousPurchInvoiceType;
        DocumentStatus previousDocumentStatus;
        LedgerJournalTransRefRecId previousPoolId;
        DataAreaId previousDataAreaId;

        // go through all marked records
        vendInvoiceInfoTableLocal = formDataSource.getFirst(1, false) as VendInvoiceInfoTable;

        if (!vendInvoiceInfoTableLocal)
        {
            //No marked records, use selected record
            vendInvoiceInfoTableLocal = vendInvoiceInfoTable;
        }

        shouldBeEnabled = true;
        inWorkflowReviewOrRejected = false;
        isIncludedInProcessAutomation = false;

        while (vendInvoiceInfoTableLocal && (shouldBeEnabled && (!inWorkflowReviewOrRejected || !isIncludedInProcessAutomation)))
        {
            // If two rows of different Invoice Type (pool, std or Adv Inv) or a row is Workflow in Review or Rejected
            // break out of the loop since the buttons are to be disabled if even one selection requires it               
                        
            // Disables the edit button when in case of multiple invoices, the invoice types are different
            this.determineSelectStateForLine(
                vendInvoiceInfoTableLocal,
                previousPurchInvoiceType,  
                previousDocumentStatus, 
                previousPoolId, 
                previousDataAreaId);

            // Disable the delete/post buttons even if one of the Invoices is opened
            this.determineIfInvoiceIsOpen(vendInvoiceInfoTableLocal);            
            
            isIncludedInProcessAutomation = VendInvoiceAutomationStateManagement::isInvoiceReadonly(vendInvoiceInfoTableLocal);
            previousPoolId = this.determinePreviousPoolId(vendInvoiceInfoTableLocal, previousPoolId);            

            this.determineInWorkflowStatus(vendInvoiceInfoTableLocal);            

            // Assigns invoice type for checking the invoice type difference
            previousPurchInvoiceType = vendInvoiceInfoTableLocal.InvoiceType;

            previousDocumentStatus = vendInvoiceInfoTableLocal.Ordering;

            previousDataAreaId = vendInvoiceInfoTableLocal.DataAreaId;

            recordsMarked = true;
           
            vendInvoiceInfoTableLocal = formDataSource.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines status of Worflow based on header state of vendor invoice list page.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableLocal">The local <c>VendInvoiceInfoTable</c> whose state is analyzed.</param>
    protected void determineInWorkflowStatus(VendInvoiceInfoTable _vendInvoiceInfoTableLocal)
    {
        if (!vendInvoiceListPageState.invoiceHeaderAllowDelete(_vendInvoiceInfoTableLocal))
        {
            inWorkflowReviewOrRejected = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePreviousPoolId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines which <c>LedgerJournalTransRefRecId</c> value should be used in the next iteration of determineSelectState(), based on DocumentStatus. 
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableLocal">Local table whose ordering value is analyzed.</param>
    /// <param name = "_previousPoolId">Previous iteration's <c>LedgerJournalTransRefRecId</c> value used.</param>
    /// <returns>The <c>LedgerJournalTransRefRecId</c> that will be passed to next iteration.</returns>
    protected LedgerJournalTransRefRecId determinePreviousPoolId(VendInvoiceInfoTable _vendInvoiceInfoTableLocal, LedgerJournalTransRefRecId _previousPoolId)
    {
        if (_vendInvoiceInfoTableLocal.Ordering == DocumentStatus::ApproveJournal)
        {
            return _vendInvoiceInfoTableLocal.PoolRecId;
        } 
        else 
        {
            return _previousPoolId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIfInvoiceIsOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoice is open, based on local table's info.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTableLocal">Local <c>VendInvoiceInfoTable</c>.</param>
    protected void determineIfInvoiceIsOpen(VendInvoiceInfoTable _vendInvoiceInfoTableLocal)
    {
        if (_vendInvoiceInfoTableLocal.ParmId != '')
        {
            isInvoiceOpen = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSelectStateForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines status of edit button in this form.
    /// </summary>
    /// <param name = "_previousPurchInvoiceType">Previous purchase invoice type.</param>
    /// <param name = "_vendInvoiceInfoTableLocal">Local <c>VendInvoiceInfoTable</c>.</param>
    /// <param name = "_previousDocumentStatus">Previous document status.</param>
    /// <param name = "_previousPoolId">Previous <c>LedgerJournalTransRefRecId</c> value used.</param>
    /// <param name = "_previousDataAreaId">Previous <c>DataAreaId</c> value used.</param>
    protected void determineSelectStateForLine(
            VendInvoiceInfoTable _vendInvoiceInfoTableLocal,
            PurchInvoiceType _previousPurchInvoiceType, 
            DocumentStatus _previousDocumentStatus,
            LedgerJournalTransRefRecId _previousPoolId,
            DataAreaId _previousDataAreaId)
    {
        if (recordsMarked)
        {
            if (_previousPurchInvoiceType != _vendInvoiceInfoTableLocal.InvoiceType 
                || _previousDocumentStatus != _vendInvoiceInfoTableLocal.Ordering 
                || _previousPoolId != _vendInvoiceInfoTableLocal.PoolRecId)
            {
                shouldBeEnabled = false;
            }

            if (_previousDataAreaId != _vendInvoiceInfoTableLocal.DataAreaId)
            {
                shouldBeEnabled = false;
                crossCompaniesMarked = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineMultiSelectState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>VendInvoiceInfoListPageMultiSelect</c> instance and calls the appropriate methods to determine the select state on the given <c>FormDataSource</c> and calling form.
    /// </summary>
    /// <param name = "_formDataSource">The <c>FormDataSource</c> that is tied to the <c>VendInvoiceInfoTable</c> on the calling form</param>
    /// <param name = "_vendInvoiceInfoTable">The currently highlighted <c>VendInvoiceInfoTable</c> record on the calling form</param>
    /// <param name = "_vendInvoiceListPageState">The current instance of the <c>PurchEditLinesForm_Invoice</c> from the calling form</param>
    /// <returns>The hydrated <c>VendInvoiceInfoListPageMultiSelect</c> instance</returns>
    public static VendInvoiceInfoListPageMultiSelect determineMultiSelectState(FormDataSource _formDataSource, VendInvoiceInfoTable _vendInvoiceInfoTable, PurchEditLinesForm_Invoice _vendInvoiceListPageState)
    {
        VendInvoiceInfoListPageMultiSelect vendInvoiceInfoListPageMultiSelect = new VendInvoiceInfoListPageMultiSelect(_formDataSource, _vendInvoiceInfoTable, _vendInvoiceListPageState);

        vendInvoiceInfoListPageMultiSelect.determineSelectState();

        return vendInvoiceInfoListPageMultiSelect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>