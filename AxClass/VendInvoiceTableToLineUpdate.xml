<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceTableToLineUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendInvoiceTableToLineUpdate extends SalesPurchTableToLineUpdate
{
    DialogButton copyTaxGroupToMarkupTrans;
    boolean updateTaxGroupOnLines;
    protected DialogButton copyOverrideSalesTaxToMarkupTrans;
    protected boolean updateOverrideSalesTaxOnLines;
    private boolean isTaxIntegrationEnabledForPurchase = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateLine</Name>
				<Source><![CDATA[
    protected boolean canUpdateLine(Common _sourceLine, boolean _previousErrorsFound = false, AxInternalBase _axTable = null)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = _sourceLine as VendInvoiceInfoLine;

        return vendInvoiceInfoLine.isNonPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxLineObject</Name>
				<Source><![CDATA[
    protected AxInternalBase getAxLineObject(AxInternalBase _axTable, Common _sourceLine)
    {
        AxVendInvoiceInfoLine axVendInvoiceInfoLine = AxVendInvoiceInfoLine::newVendInvoiceInfoLine(_sourceLine);

        axVendInvoiceInfoLine.axVendInvoiceInfoTable(_axTable);
        axVendInvoiceInfoLine.isTableToLine(true);

        return axVendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxTableObject</Name>
				<Source><![CDATA[
    protected AxInternalBase getAxTableObject(Common _sourceTable)
    {
        return AxVendInvoiceInfoTable::newVendInvoiceInfoTable(_sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    protected tableId lineTableId()
    {
        return tablenum(VendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLine</Name>
				<Source><![CDATA[
    protected QueryRun queryRunLine(boolean _update = false)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = sourceTable as VendInvoiceInfoTable;
        
        Query lineQuery = vendInvoiceInfoTable.queryLine(_update);
        
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)
            && vendInvoiceInfoTable.PurchAgreementHeader_PSN != 0))
        {
            QueryBuildRange receiveNowRange = lineQuery.dataSourceTable(tableNum(VendInvoiceInfoLine)).findRange(fieldNum(VendInvoiceInfoLine, ReceiveNow));
            
            if (receiveNowRange)
            {
                receiveNowRange.value(receiveNowRange.value() + ' || '
                    + strFmt('(%1.%2 != 0)',
                    lineQuery.dataSourceTable(tableNum(VendInvoiceInfoLine)).name(),
                    fieldStr(VendInvoiceInfoLine, AgreementLine_PSN)));
            }
        }

        return new QueryRun(lineQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAsModified</Name>
				<Source><![CDATA[
    protected void setFieldAsModified(AxInternalBase _axTable, fieldId _fieldId)
    {
        FieldId invoiceFieldId = VendInvoiceTableToLineUpdate::convertPurchTableFieldToVendInvoice(_fieldId);

        switch (invoiceFieldId)
        {
            case fieldnum(VendInvoiceInfoTable, InventLocationId):
                _axTable.setFieldAsModified(fieldnum(VendInvoiceInfoTable,InventSiteId));
                break;

            case fieldnum(VendInvoiceInfoTable, TaxGroup):
                updateTaxGroupOnLines = true;
                break;

            case fieldNum(VendInvoiceInfoTable, OverrideSalesTax):
                updateOverrideSalesTaxOnLines = true;
                copyOverrideSalesTaxToMarkupTrans = this.promptCopyOverrideSalesTaxToVendInfoLineCharges();
                break;
        }
        _axTable.setFieldAsModified(invoiceFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    protected void updateLine(Common _sourceLine, AxInternalBase _axLine, Common _sourceTable)
    {
        this.updateTaxGroupOnLine(_sourceLine, _sourceTable);
        this.updateOverrideSalesTaxOnLine(_sourceLine, _sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxGroupOnLine</Name>
				<Source><![CDATA[
    protected void updateTaxGroupOnLine(Common _sourceLine, Common _sourceTable)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = _sourceLine as VendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable = _sourceTable as VendInvoiceInfoTable;

        if (updateTaxGroupOnLines)
        {
            MarkupTrans::updateTaxGroup(vendInvoiceInfoLine.TableId,
                                        vendInvoiceInfoLine.RecId,
                                        vendInvoiceInfoTable.TaxGroup,
                                        vendInvoiceInfoLine.TaxGroup,
                                        copyTaxGroupToMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverrideSalesTaxOnLine</Name>
				<Source><![CDATA[
    private void updateOverrideSalesTaxOnLine(Common _sourceLine, Common _sourceTable)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = _sourceLine as VendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable = _sourceTable as VendInvoiceInfoTable;
        if (updateOverrideSalesTaxOnLines && isTaxIntegrationEnabledForPurchase)
        {
            MarkupTrans::updateOverrideSalesTax(
                vendInvoiceInfoLine.TableId,
                vendInvoiceInfoLine.RecId,
                vendInvoiceInfoTable.OverrideSalesTax,
                copyOverrideSalesTaxToMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceTableToLineUpdate construct(VendInvoiceTableToLineUpdatePrompt _vendInvoiceTableToLineUpdatePrompt)
    {
        VendInvoiceTableToLineUpdate vendInvoiceTableToLineUpdate;

        vendInvoiceTableToLineUpdate = new VendInvoiceTableToLineUpdate();
        vendInvoiceTableToLineUpdate.initUpdateFields(_vendInvoiceTableToLineUpdatePrompt);

        return vendInvoiceTableToLineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchTableFieldToVendInvoiceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for converting a <c>PurchTable</c> FieldId to a <c>VendInvoiceInfoTable</c> FieldId.
    /// </summary>
    /// <param name = "_purchTableFieldId">The <c>PurchTable</c> FieldId to convert.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the <c>VendInvoiceInfoTable</c> FieldId can be returned.</param>
    static delegate void convertPurchTableFieldToVendInvoiceDelegate(
        FieldId             _purchTableFieldId,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchTableFieldToVendInvoice</Name>
				<Source><![CDATA[
    public static FieldId convertPurchTableFieldToVendInvoice(FieldId _purchTableFieldId)
    {
        switch (_purchTableFieldId)
        {
            case fieldnum(PurchTable, TaxGroup):
            case fieldNum(PurchTable, OverrideSalesTax):
            case fieldnum(PurchTable, InventSiteId):
            case fieldnum(PurchTable, InventLocationId):
            case fieldnum(PurchTable, TransactionCode):
            case fieldnum(PurchTable, Port):
            case fieldnum(PurchTable, StatProcId):
            case fieldnum(PurchTable, Transport):
            case fieldnum(PurchTable, DefaultDimension):
            case fieldnum(PurchTable, AccountingDistributionTemplate):
                return VendInvoiceInfoTable::convertPurchTableFieldToVendInvoice(_purchTableFieldId);

            // These PO rolldown fields do not exist on an invoice
            case fieldnum(PurchTable, OrderAccount):
            case fieldnum(PurchTable, PriceGroupId):
            case fieldnum(PurchTable, LineDisc):
            case fieldnum(PurchTable, DeliveryDate):
            case fieldnum(PurchTable, LanguageId):
            case fieldnum(PurchTable, MarkupGroup):
            case PurchTable::fieldIdToInternalFieldId_W(fieldNum(PurchTable_W, TDSGroup_IN), tableNum(PurchTable_W)):
            case PurchTable::fieldIdToInternalFieldId_W(fieldNum(PurchTable_W, TCSGroup_IN), tableNum(PurchTable_W)):
            case PurchTable::fieldIdToInternalFieldId_W(fieldNum(PurchTable_RU, InventProfileId_RU), tableNum(PurchTable_RU)):
            case PurchTable::fieldIdToInternalFieldId_W(fieldNum(PurchTable_RU, PriceAgreementDate_RU), tableNum(PurchTable_RU)):
            case fieldNum(PurchTable, IntrastatFulfillmentDate_HU):
            case fieldNum(PurchTable, ConfirmedDlv):
            case fieldnum(PurchTable, RequestedShipDate):
            case fieldnum(PurchTable, ConfirmedShipDate):
            case fieldNum(PurchTable, ShipCalendarId):
                return 0;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                VendInvoiceTableToLineUpdate::convertPurchTableFieldToVendInvoiceDelegate(_purchTableFieldId, result);
				
				if (result.hasResult())
                {
                    return result.result();
                }

                DictField dictField = new DictField(tableNum(PurchTable), _purchTableFieldId);
                
                // Not expecting any other PO rolldown fields
                throw error(strfmt("@AccountsPayable:ErrorMsgPurchOrdertoVendInvoice",
                    dictField.name(),
                    dictField.label(),
                    tableStr(PurchTable),
                    staticDelegateStr(VendInvoiceTableToLineUpdate, convertPurchTableFieldToVendInvoiceDelegate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToVendInfoLineCharges</Name>
				<Source><![CDATA[
    private DialogButton promptCopyOverrideSalesTaxToVendInfoLineCharges()
    {
        DialogButton ret = DialogButton::No;
        VendInvoiceInfoTable vendInvoiceInfoTable = sourceTable as VendInvoiceInfoTable;

        if (isTaxIntegrationEnabledForPurchase)
        {
            MarkupTrans markupTrans;
            VendInvoiceInfoLine vendInvoiceInfoLine;
            select firstonly RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                join TransTableId, TransRecId, IsDeleted from markupTrans
                    where markupTrans.TransTableId == tableNum(VendInvoiceInfoLine)
                        && markupTrans.TransRecId == vendInvoiceInfoLine.RecId
                        && !markupTrans.IsDeleted;

            if (vendInvoiceInfoLine.RecId)
            {
                ret = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(tableNum(VendInvoiceInfoLine), vendInvoiceInfoLine.RecId, false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>