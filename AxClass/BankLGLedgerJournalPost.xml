<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGLedgerJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGLedgerJournalPost</c> class is the helper class for the letter of guarantee to post
///    the ledger journal.
/// </summary>
/// <remarks>
///    The instance of the <c>BankLGLedgerJournalPost</c> class must be created and used in the TTS block.
/// </remarks>
class BankLGLedgerJournalPost
{
    BankDocumentPosting bankDocumentPosting;
    LedgerJournalTable  ledgerJournalTable;
    Voucher             voucher;
    BankAccountTable    bankAccountTable;
    DimensionDefault    defaultDimension;
    private FinTagRecId finTag;

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExpenseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds transactions for expense.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to post.
    /// </param>
    /// <param name="_txt">
    ///     The txt of posting.
    /// </param>
    /// <returns>
    ///     The instance of created <c>LedgerJournalTrans</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalTrans addExpenseTrans(AmountCur _amount, LedgerJournalTransTxt _txt)
    {
        return this.addTrans(fieldstr(BankDocumentPosting, MiscChargesLedgerDimension), _amount, _txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiquidationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds transactions for liquidation.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to post.
    /// </param>
    /// <param name="_txt">
    ///     The txt of posting.
    /// </param>
    /// <returns>
    ///     The instance of created <c>LedgerJournalTrans</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalTrans addLiquidationTrans(AmountCur _amount, LedgerJournalTransTxt _txt)
    {
        return this.addTrans(fieldstr(BankDocumentPosting, BankLGLiquidationLedgerDimension), _amount, _txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarginTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds transactions for margin.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to post.
    /// </param>
    /// <param name="_txt">
    ///     The txt of posting.
    /// </param>
    /// <returns>
    ///     The instance of created <c>LedgerJournalTrans</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalTrans addMarginTrans(AmountCur _amount, LedgerJournalTransTxt _txt)
    {
        return this.addTrans(fieldstr(BankDocumentPosting, MarginLedgerDimension), _amount, _txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds transactions with specified parameters.
    /// </summary>
    /// <param name="_postingAccountFieldName">
    ///     The field name to get the account for posting.
    /// </param>
    /// <param name="_amount">
    ///     The amount to post.
    /// </param>
    /// <param name="_txt">
    ///     The txt of posting.
    /// </param>
    /// <returns>
    ///     The instance of created <c>LedgerJournalTrans</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalTrans addTrans(
        fieldName               _postingAccountFieldName,
        AmountCur               _amount,
        LedgerJournalTransTxt   _txt)
    {
        LedgerJournalTrans  ledgerJournalTrans;

        if (_amount != 0.0)
        {
            ledgerJournalTrans = this.getInitializedLedgerJournalTrans();

            // Add trans
            ledgerJournalTrans.Txt          = _txt;
            ledgerJournalTrans.AccountType  = LedgerJournalACType::Ledger;
            ledgerJournalTrans.parmLedgerDimension(this.getPostingLedgerDimension(_postingAccountFieldName, true));

            if (isFinTagConfigurationSetForCurrent)
            {
                ledgerJournalTrans.FinTag = finTag;
                ledgerJournalTrans.OffsetFinTag = finTag;
            }

            if (LedgerParameters::isChineseVoucher_CN())
            {
                ledgerJournalTrans.LedgerVoucherType_CN = LedgerVoucherType_CN::findDefault().RecId;
            }

            if (_amount > 0.0)
            {
                ledgerJournalTrans.AmountCurDebit   = _amount;
                ledgerJournalTrans.insert();
            }
            else
            {
                ledgerJournalTrans.AmountCurCredit  = -_amount;
                ledgerJournalTrans.insert();
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the initialized instance of <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <returns>
    ///     The instance of <c>LedgerJournalTrans</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerJournalTrans getInitializedLedgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.Voucher      = voucher;
        ledgerJournalTrans.JournalNum   = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.CurrencyCode = bankAccountTable.CurrencyCode;
        ledgerJournalTrans.ExchRate     = ExchangeRateHelper::exchRate(bankAccountTable.CurrencyCode);
        ledgerJournalTrans.TransDate    = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.parmOffsetDefaultDimension(defaultDimension);
        ledgerJournalTrans.parmOffsetAccount(bankAccountTable.AccountID, LedgerJournalACType::Bank);
        if (Ledger::reportingCurrency())
        {
            ExchangeRateCalculation exchangeRateCalculation = ExchangeRateCalculation::newExchangeDate(Ledger::reportingCurrencyExchangeRateType(),
                                                                                                ledgerJournalTrans.CurrencyCode,
                                                                                                Ledger::reportingCurrency(),
                                                                                                ledgerJournalTrans.TransDate);

            ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateCalculation.getExchangeRate1();
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the the instance of <c>LedgerJournalTable</c>.
    /// </summary>
    /// <returns>
    ///     The instance of <c>LedgerJournalTable</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalTable getLedgerJournalTable()
    {
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the ledger dimension for posting.
    /// </summary>
    /// <param name="_postingAccountFieldName">
    ///     The filed name to identify the field to get ledger dimension.
    /// </param>
    /// <param name="_raiseError">
    ///     If true, the error message should be raised when ledger dimension is not specified;
    ///  otherwise, not. The default is false.
    /// </param>
    /// <returns>
    ///     The ledger dimension for posting.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     When the specified field name is illegal.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionAccount getPostingLedgerDimension(
        fieldName   _postingAccountFieldName,
        boolean     _raiseError = false)
    {
        LedgerDimensionAccount  postingLedgerDimension;
        str                     fieldLabel;

        switch (_postingAccountFieldName)
        {
            case fieldstr(BankDocumentPosting, MiscChargesLedgerDimension):
                postingLedgerDimension  = bankDocumentPosting.MiscChargesLedgerDimension;
                fieldLabel              = new DictField(tablenum(BankDocumentPosting), fieldnum(BankDocumentPosting, MiscChargesLedgerDimension)).label();
                break;
            case fieldstr(BankDocumentPosting, MarginLedgerDimension):
                postingLedgerDimension  = bankDocumentPosting.MarginLedgerDimension;
                fieldLabel              = new DictField(tablenum(BankDocumentPosting), fieldnum(BankDocumentPosting, MarginLedgerDimension)).label();
                break;
            case fieldstr(BankDocumentPosting, BankLGLiquidationLedgerDimension):
                postingLedgerDimension  = bankDocumentPosting.BankLGLiquidationLedgerDimension;
                fieldLabel              = new DictField(tablenum(BankDocumentPosting), fieldnum(BankDocumentPosting, BankLGLiquidationLedgerDimension)).label();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_raiseError && postingLedgerDimension == 0)
        {
            // The %1 is not specified.
            checkFailed(strfmt("@SYS321809", fieldLabel));
        }

        // Converts the default account to ledger account.
        if (postingLedgerDimension != 0)
        {
            postingLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(postingLedgerDimension, defaultDimension);
        }

        return postingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create the instance of <c>BankLGLedgerJournalPost</c>.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLine">
    ///     The instance of <c>BankDocumentFacilityAgreementLine</c>.
    /// </param>
    /// <param name="_defaultDimension">
    ///    Default dimension of the letter of guarantee to be processed
    /// </param>
    /// <exception cref="Exception::Error">
    ///     When the transaction journal for Letter of Guarantee is not specified.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(BankDocumentFacilityAgreementLine _bankDocumentFacilityAgreementLine, DimensionDefault _defaultDimension = 0)
    {
        LedgerJournalName   ledgerJournalName;

        // Find the posting profile
        bankDocumentPosting = BankDocumentPosting::findByFacilityType(_bankDocumentFacilityAgreementLine.BankDocumentFacilityType);

        // Find the bank account info
        bankAccountTable = BankAccountTable::find(_bankDocumentFacilityAgreementLine.getBankDocumentFacilityAgreement().BankAccountTable);

        // Get the ledger journal name for LG
        ledgerJournalName = LedgerJournalName::find(BankParameters::find().BankLGJournalName);
        if (ledgerJournalName.RecId == 0)
        {
            // The transaction journal for Letter of Guarantee is not specified.
            throw error(
                "@SYS321808",
                '',
                SysInfoAction_Formrun::newFormnameControlnameDesc(
                    formstr(BankParameters),
                    formControlStr(BankParameters, BankLG_BankLGJournalName),
                    "@SYS24215"));
        }

        // Create the LedgerJournalTable
        ledgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
        ledgerJournalTable.insert();

        // Get the voucher number
        voucher = NumberSeq::newGetVoucherFromId(ledgerJournalName.NumberSequenceTable).voucher();
        defaultDimension = _defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Submit the posting.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGLedgerJournalPost construct(BankDocumentFacilityAgreementLine _bankDocumentFacilityAgreementLine)
    {
        return new BankLGLedgerJournalPost(_bankDocumentFacilityAgreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to construct a new instance of BankLGLedgerJournalPost class for a letter of guarantee to create and post a general journal for following business actions:
    /// Receive letter of guarantee from bank, Increase value, Decrease value, Extend letter of guarantee, Liquidate letter of guarantee, Cancel letter of guarantee
    /// </summary>
    /// <param name="_bankLGGuarantee">
    /// The letter of guarantee to be processed
    /// </param>
    /// <returns>
    /// An instance of BankLGLedgerJournalPost class
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BankLGLedgerJournalPost constructFromLG(BankLGGuarantee _bankLGGuarantee)
    {
        return new BankLGLedgerJournalPost(_bankLGGuarantee.getBankDocumentFacilityAgreementLine(), _bankLGGuarantee.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinTag</Name>
				<Source><![CDATA[
    public FinTagRecId parmFinTag(FinTagRecId _finTag = finTag)
    {
        finTag = _finTag;
        return finTag;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>