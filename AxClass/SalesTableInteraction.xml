<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableInteraction</c> class is the interaction class for the sales table details form.
/// </summary>
public class SalesTableInteraction extends PageInteraction
{
    private SalesInstrumentationLogger instrumentationLogger;

    Page                        page;
    SalesLine                   salesLine;
    SalesTable                  salesTable;

    SalesTableInteractionHelper salesTableInteractionHelper;

    // The following variable is only here to decrease compile time as the formControlStr intrinsic method will be executed many times.
    str macroFormControlStr;
    #localmacro.SetEnabled
        macroFormControlStr = %1;
        if (page.actionPaneControlVisible(macroFormControlStr))
        {
            page.actionPaneControlEnabled(macroFormControlStr, %2);
        }
    #endmacro

    // <GEERU>
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    public void enableHeaderActions()
    {
        salesTableInteractionHelper.initHeaderActions(salesTable);

        this.enableHeaderSalesOrder();
        this.enableHeaderSell();
        this.enableHeaderManage();
        this.enableHeaderPickAndPack();
        this.enableHeaderInvoice();
        this.enableHeaderRetail();
        this.enableHeaderGeneral();
        this.enableHeaderWHS();
        this.enableHeaderTMS();

        this.updateStateJournalButtonsMultipleOrders();
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.enableHeaderActions_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateJournalButtonsMultipleOrders</Name>
				<Source><![CDATA[
    private void updateStateJournalButtonsMultipleOrders()
    {
        SalesTableInteractionHelper::updateStateJournalButtonsMultipleOrders(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by enableHeaderActions() post event handler.
    /// </summary>
    protected void enableHeaderActions_BR()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonHeaderFiscalDocumentText_BR),  salesTableInteractionHelper.parmCanFiscalDocTextBeRegistrated_BR())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActionsFromLine</Name>
				<Source><![CDATA[
    private void enableHeaderActionsFromLine()
    {
        //Header actions dependent on line
        this.enableHeaderCreditInvoiceButton();
        this.updateStateJournalButtonsMultipleOrders();
        this.enableHeaderUpdateJournalActionsMultiSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderBankDocumentMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the bank document menu items.
    /// </summary>
    protected void enableHeaderBankDocumentMenuItems()
    {
        #SetEnabled(formcontrolstr(SalesTable, ButtonCreateBankLCExport), salesTableInteractionHelper.parmButtonCreateBankLCExport())
        #SetEnabled(formcontrolstr(SalesTable, BankLGRequestForm), salesTableInteractionHelper.parmButtonBankLGRequestForm())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderCreditCardMenuItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level credit card menu items.
    /// </summary>
    protected void enableHeaderCreditCardMenuItems()
    {
        #SetEnabled(formcontrolstr(SalesTable, CreditCardPreauthorize), salesTableInteractionHelper.parmCanCreditCardPreAuthorizeEnabled())
        #SetEnabled(formcontrolstr(SalesTable, CreditCardWizard), salesTableInteractionHelper.parmCreditCardWizardEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the credit invoice menu item in the header action panel.
    /// </summary>
    protected void enableHeaderCreditInvoiceButton()
    {
        page.actionPaneControlVisible(formControlStr(SalesTable, buttonCustVendCreditInvoicingHeader), salesTableInteractionHelper.parmButtonCustVendCreditInvoicingHeaderVisible_W());
        #SetEnabled(formcontrolstr(SalesTable, buttonCustVendCreditInvoicingHeader), salesTableInteractionHelper.parmButtonCustVendCreditInvoicingHeader())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named general.
    /// </summary>
    private void enableHeaderGeneral()
    {
        this.enableHeaderGeneralRelatedInformation();
        this.enableHeaderGeneralMainTain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneralRelatedInformation</Name>
				<Source><![CDATA[
    private void enableHeaderGeneralRelatedInformation()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonReferences), salesTableInteractionHelper.parmReferencesEnabled())
        #SetEnabled(formcontrolstr(SalesTable, buttonPurchTable),  salesTableInteractionHelper.parmRelatedPurchaseOrderEnabled())
        #SetEnabled(formcontrolstr(SalesTable, buttonSalesAgreement), salesTableInteractionHelper.parmMatchingAgreement())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderGeneralMainTain</Name>
				<Source><![CDATA[
    private void enableHeaderGeneralMainTain()
    {
        #SetEnabled(formcontrolstr(SalesTable, SuppItemTable_Sales), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched())
        #SetEnabled(formcontrolstr(SalesTable, SalesMultiLineDisc), salesTableInteractionHelper.parmbuttonMultiLineDiscEnabled())
        #SetEnabled(formcontrolstr(SalesTable, SalesEndDisc), salesTableInteractionHelper.parmbuttonEndDiscEnabled())
        #SetEnabled(formControlStr(salesTable, ContactPerson), salesTableInteractionHelper.parmContactPersonExists())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named invoice.
    /// </summary>
    private void enableHeaderInvoice()
    {
        //invoice joruals
        #SetEnabled(formcontrolstr(SalesTable, buttonJournalInvoice), salesTableInteractionHelper.parmExistsInvoice())
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonJournalFacture_RU), salesTableInteractionHelper.parmExistsFacture_RU())
        }
        // </GEERU>

        //change
        #SetEnabled(formcontrolstr(SalesTable, TradeBLWIChangeCode), !salesTableInteractionHelper.parmReturnItem())
        this.enableHeaderPaymentScheduleAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderManage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named manage.
    /// </summary>
    private void enableHeaderManage()
    {
        this.enableHeaderBankDocumentMenuItems();
        this.enableHeaderCreditCardMenuItems();

        this.enableHeaderIntercompanyTracing();

        //Manage customer
        #SetEnabled(formcontrolstr(SalesTable, CheckCreditLimit), !salesTableInteractionHelper.parmReturnItem())
        #SetEnabled(formcontrolstr(SalesTable, priceDiscActual), !salesTableInteractionHelper.parmReturnItem())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderIntercompanyTracing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane group named intercompany tracing.
    /// </summary>
    private void enableHeaderIntercompanyTracing()
    {
        #SetEnabled(formcontrolstr(SalesTable, ButtonPurchTableThisCompany), salesTableInteractionHelper.parmIntercompanySalesId())
        #SetEnabled(formcontrolstr(SalesTable, ButtonInterCompanyPurchTable), salesTableInteractionHelper.parmIntercompanyPurchId())
        #SetEnabled(formcontrolstr(SalesTable, ButtonInterCompanyOriginalSalesTable), salesTableInteractionHelper.parmIntercompanyOriginalSalesId())
        #SetEnabled(formcontrolstr(SalesTable, ButtonInterCompanySalesTable), salesTableInteractionHelper.parmIntercompanySalesId())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPaymentScheduleAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level payment schedule menu items.
    /// </summary>
    protected void enableHeaderPaymentScheduleAction()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonPaymentSchedule), salesTableInteractionHelper.parmPaymentScheduleEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderPickAndPack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named pick and pack.
    /// </summary>
    private void enableHeaderPickAndPack()
    {
        #SetEnabled(formcontrolstr(SalesTable, ButtonInterCompanySalesFormLetter_Pickinglist), salesTableInteractionHelper.parmEnableICPickingListButton())

        //pick and pack journals
        #SetEnabled(formcontrolstr(SalesTable, buttonJournalPickingList), salesTableInteractionHelper.parmExistsPickingList())
        #SetEnabled(formcontrolstr(SalesTable, buttonJournalPackingSlip), salesTableInteractionHelper.parmExistsPackingSlip())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderRetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named retail.
    /// </summary>
    private void enableHeaderRetail()
    {
        #SetEnabled(formcontrolstr(SalesTable, btngrpAttribute), salesTableInteractionHelper.parmIsRetailAttribute())
        #SetEnabled(formControlStr(SalesTable, AffiliationsButtonGroup), salesTableInteractionHelper.parmIsRetailOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named sales order.
    /// </summary>
    private void enableHeaderSalesOrder()
    {
        #SetEnabled(formcontrolstr(SalesTable, SMAServiceOrderWizard), salesTableInteractionHelper.parmRegularOrder())

        #SetEnabled(formcontrolstr(SalesTable, SalesCopyAllHeader), !salesTableInteractionHelper.parmReturnItem())
        #SetEnabled(formcontrolstr(SalesTable, SalesCopyJournalHeader), !salesTableInteractionHelper.parmReturnItem())

        //sales order new
        #SetEnabled(formcontrolstr(SalesTable, buttonCreatePurchOrder), salesTableInteractionHelper.parmCanCreatePurchOrder())
        #SetEnabled(formcontrolstr(SalesTable, buttonCreateDropShipment), salesTableInteractionHelper.parmCanCreateDropShipment())

        #SetEnabled(formControlStr(salesTable, SendEmail), SalesTable.CreditCardAuthorizationError)

        #SetEnabled(formControlStr(SalesTable, CancelOrderButton), salesTableInteractionHelper.parmCanCancel())

        #SetEnabled(formcontrolstr(SalesTable, mcrCreateCustHeaderCredit), salesTableInteractionHelper.parmMCRCanCreditHeader())
        #SetEnabled(formcontrolstr(SalesTable, mcrOrderHolds), salesTableInteractionHelper.parmMCROrderHoldsEnabled())
        
        RetailMCRChannelTable channelForCurrentUser = RetailMCRChannelTable::findForCurrentUser();
        boolean allowOrderCompletionForCommerceEnabledOrder = channelForCurrentUser.ChannelType == RetailChannelType::MCRCallCenter && RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(salesTable, funcName());
        boolean enableRecapButtonForCommerceOrders = allowOrderCompletionForCommerceEnabledOrder && RetailPaymentsEnableSalesOrderRecapForCommerceOrdersFlight::instance().isEnabled();

        #SetEnabled(formcontrolstr(SalesTable, mcrRecap), (salesTableInteractionHelper.parmMCROrderCompletionEnabled() || enableRecapButtonForCommerceOrders) && salesTableInteractionHelper.parmMCRAllowPaymentAccess())
        #SetEnabled(formcontrolstr(SalesTable, mcrCustPaymTableButton), (salesTableInteractionHelper.parmMCROrderCompletionEnabled() || allowOrderCompletionForCommerceEnabledOrder) && salesTableInteractionHelper.parmMCRAllowPaymentAccess())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderSell</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the menu items located on the header action pane tab page named sell.
    /// </summary>
    protected void enableHeaderSell()
    {
        boolean isRetailOrder = false;

        //Sell journals
        #SetEnabled(formcontrolstr(SalesTable, buttonJournalQuotationConfirmation), salesTableInteractionHelper.parmExistsQuotation())
        #SetEnabled(formcontrolstr(SalesTable, buttonJournalConfirmation), salesTableInteractionHelper.parmExistsConfirmation())
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonJournalInvoice4Paym_RU), salesTableInteractionHelper.parmExistsInvoice4Paym_RU())
        }
        // </GEERU>

        #SetEnabled(formcontrolstr(SalesTable, SMAAgreementWizard), salesTableInteractionHelper.parmRegularOrder())

        //Sell calculate
        #SetEnabled(formcontrolstr(SalesTable, buttonCalculateConfirmDates), salesTableInteractionHelper.parmButtonCalculateConfirmDates())
        #SetEnabled(formcontrolstr(SalesTable, SuppItemCalc_SalesHeader), salesTableInteractionHelper.parmSuppItemCalcEnabledHeader())

        // disable multiline and total discount buttons for Retail orders
        if (RetailParameters::isRetailEnabledAndInUse())
        {
            isRetailOrder = salesTableInteractionHelper.parmIsRetailOrder();
            #SetEnabled(formcontrolstr(SalesTable, MultiLnDisc), !isRetailOrder)
            #SetEnabled(formcontrolstr(SalesTable, EndDisc), !isRetailOrder)
        }
        else
        {
            #SetEnabled(formcontrolstr(SalesTable, MultiLnDisc), salesTableInteractionHelper.parmbuttonMultiLineDiscEnabled())
            #SetEnabled(formcontrolstr(SalesTable, EndDisc), salesTableInteractionHelper.parmbuttonEndDiscEnabled())
        }

        //Sell credite note
        #SetEnabled(formcontrolstr(SalesTable, SalesCreditNoteHeader), salesTableInteractionHelper.parmCanCreditNoteBeCreated())

        //Sell charges
        #SetEnabled(
            formcontrolstr(SalesTable, ButtonMarkupTransHeading),
            salesTableInteractionHelper.parmMarkupAllowed() && !salesTable.isCompletedCallCenterOrder());

        #SetEnabled(formcontrolstr(SalesTable, menuItemSalesPrepayment), !salesTableInteractionHelper.parmSalesStatusInvoiced())

        #SetEnabled(formControlStr(SalesTable, CFMPaymentRequestView), salesTableInteractionHelper.parmCFMPaymentRequestViewEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderTMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the menu items located on the header action pane tab page named transportation management.
    /// </summary>
    private void enableHeaderTMS()
    {
        #SetEnabled(formcontrolstr(SalesTable, TMSInvoiceJournal), salesTableInteractionHelper.parmTMSInvoiceJournalButtonEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level journal menu items.
    /// </summary>
    protected void enableHeaderUpdateJournalActions()
    {
        if (salesLine)
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateConfirmation), salesTableInteractionHelper.parmCanConfirmationBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaConfirmation), salesTableInteractionHelper.parmCanConfirmationBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingList), salesTableInteractionHelper.parmCanPickingListBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingListRegistrate), salesTableInteractionHelper.parmCanPickingListBeRegistrated())
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePackingSlip), salesTableInteractionHelper.parmCanPackingslipBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaPackingSlip), salesTableInteractionHelper.parmCanPackingslipBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateInvoice), salesTableInteractionHelper.parmCanInvoiceBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaInvoice), salesTableInteractionHelper.parmCanInvoiceBeUpdated())
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateConfirm), salesTableInteractionHelper.parmCanConfirmationBeUpdated())
        }
        else
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateConfirmation), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaConfirmation), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingList), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingListRegistrate),false )
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePackingSlip), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaPackingSlip), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateInvoice), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaInvoice), false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateConfirm), false)
        }

        this.enableHeaderUpdateJournalActionsMultiSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActionsMultiSelection</Name>
				<Source><![CDATA[
    private void enableHeaderUpdateJournalActionsMultiSelection()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateInvoice4Paym_RU), salesTableInteractionHelper.parmCanInvoice4PaymBeUpdated_RU())
            #SetEnabled(formcontrolstr(SalesTable, buttonProformaInvoice4Paym_RU), salesTableInteractionHelper.parmCanInvoice4PaymBeUpdated_RU())
            page.actionPaneControlVisible(formControlStr(SalesTable, buttonUpdateFacture_RU), salesTableInteractionHelper.parmCanInvoiceBeUpdated());
            page.actionPaneControlVisible(formControlStr(SalesTable, buttonProformaFacture_RU), salesTableInteractionHelper.parmCanInvoiceBeUpdated());
            page.actionPaneControlVisible(formControlStr(SalesTable, FactureEditLinesCust_RU), !salesTableInteractionHelper.parmCanInvoiceBeUpdated());
            page.actionPaneControlVisible(formControlStr(SalesTable, FactureEditLinesCust_Proforma_RU), !salesTableInteractionHelper.parmCanInvoiceBeUpdated());
            #SetEnabled(formcontrolstr(SalesTable, FactureEditLinesCust_RU), salesTableInteractionHelper.parmCanFactureBeUpdated_RU() &&
                                                                             salesTableInteractionHelper.parmCanCommFactureBeUpdated_RU())
            #SetEnabled(formcontrolstr(SalesTable, FactureEditLinesCust_Proforma_RU), salesTableInteractionHelper.parmCanFactureBeUpdated_RU() &&
                                                                                      salesTableInteractionHelper.parmCanCommFactureBeUpdated_RU())
            #SetEnabled(formControlStr(SalesTable, buttonUpdateFacture_RU), salesTableInteractionHelper.parmCanCommFactureBeUpdated_RU())
            #SetEnabled(formControlStr(SalesTable, buttonProformaFacture_RU), salesTableInteractionHelper.parmCanCommFactureBeUpdated_RU())
        }
        // </GEERU>

        // </GBR>
        if (BrazilParameters::isEnabled())
        {
            this.enableHeaderUpdateJournalActions_BR();
        }
        // <GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderUpdateJournalActions_BR</Name>
				<Source><![CDATA[
    private void enableHeaderUpdateJournalActions_BR()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonUpdateDeliverySlip_BR),        salesTableInteractionHelper.parmCanDeliverySlipBeUpdated_BR())

        if (!salesTableInteractionHelper.parmCanCreateInventTrans_BR())
        {
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePackingSlip),            false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdateDeliverySlip_BR),        false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingList),            false)
            #SetEnabled(formcontrolstr(SalesTable, buttonUpdatePickingListRegistrate),  false)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderWHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the menu items located on the header action pane tab page named warehouse management.
    /// </summary>
    private void enableHeaderWHS()
    {
        #SetEnabled(formcontrolstr(SalesTable, btnLoadTable), salesTableInteractionHelper.parmWHSLoadDetailsButtonEnabled())

        if (WhsSalesOrderDetailsSkipShipmentDetailsBtnInitForHeaderFlight::instance().isEnabled() == false)
        {
            #SetEnabled(formcontrolstr(salesTable, btnShipmentDetails), salesTableInteractionHelper.parmWHSShipmentDetailsButtonEnabled())
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    protected void enableLineActions()
    {
        salesTableInteractionHelper.initLineActions(salesTable, salesLine);

        this.enableLineSetupActions();
        this.enableLineFunctionActions();
        this.enableLineInquiryActions();
        this.enableLineCalculationActions();
        this.enableLineInterCompanyActions();
        this.enableLineAgreementActions();
        this.enableLinePCActions();
        this.enableLineUpdateActions();
        this.enableLineReturnOrderActions();
        this.enableLineRetailActions();

        this.enableHeaderActionsFromLine();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.enableLineActions_BR();
        }
        // </GBR>

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            this.enableLineActions_WHS();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by enableLineActions() post event handler.
    /// </summary>
    protected void enableLineActions_BR()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonLineFiscalDocumentText_BR), salesTableInteractionHelper.parmCanLineFiscalDocTextBeRegistrated_BR())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions_WHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by enableLineActions() post event handler to determine if buttons should be enabled.
    /// </summary>
    protected void enableLineActions_WHS()
    {
        #SetEnabled(formcontrolstr(SalesTable, btnLoadTable), salesTableInteractionHelper.parmWHSLoadTableEnabled())
        #SetEnabled(formcontrolstr(SalesTable, btnShipmentDetails), salesTableInteractionHelper.parmWHSShipmentDetailsButtonEnabled())
        #SetEnabled(formcontrolstr(SalesTable, WHSWorkTable), salesTableInteractionHelper.parmWHSWorkTableEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineAgreementActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level agreement menu items.
    /// </summary>
    protected void enableLineAgreementActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, SalesAgreementLine), salesTableInteractionHelper.parmAgreementLineEnabled())
        #SetEnabled(formcontrolstr(SalesTable, RemoveLink), salesTableInteractionHelper.parmAgreementRemoveLinkEnabled())
        #SetEnabled(formcontrolstr(SalesTable, CreateLink), salesTableInteractionHelper.parmAgreementCreateLinkEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineCalculationActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level calculation menu items.
    /// </summary>
    protected void enableLineCalculationActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, SuppItemCalc_Sales), salesTableInteractionHelper.parmSuppItemCalcEnabled())
        #SetEnabled(formcontrolstr(SalesTable, BOMPriceCalc), salesTableInteractionHelper.parmBomPriceCalcEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineFunctionActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level function menu items are enabled.
    /// </summary>
    protected void enableLineFunctionActions()
    {
        page.actionPaneControlVisible(formControlStr(SalesTable, buttonCustVendCreditInvoicingLines), salesTableInteractionHelper.parmButtonCustVendCreditInvoicingLines());

        #SetEnabled(formcontrolstr(SalesTable, buttonLineExpandBOM),  salesTableInteractionHelper.parmButtonLineExpandBOMEnabled())
        #SetEnabled(formcontrolstr(SalesTable, buttonDeliverySchedule), salesTableInteractionHelper.parmDeliveryScheduleEnabled())
        #SetEnabled(formControlStr(SalesTable, SalesLineDeliveryDetails), salesTableInteractionHelper.parmSalesLineDeliveryDetailsEnabled())
        #SetEnabled(formcontrolstr(SalesTable, CopyLine), salesTableInteractionHelper.parmLineExists())
        #SetEnabled(formcontrolstr(SalesTable, buttonCustVendCreditInvoicingLines), salesTableInteractionHelper.parmLineExists())
        #SetEnabled(formcontrolstr(SalesTable, SalesUpdateRemain), salesTableInteractionHelper.parmSalesUpdateRemainEnabled())
        #SetEnabled(formcontrolstr(SalesTable, ButtonSalesDropShipmentCancel), salesTableInteractionHelper.parmSalesDropShipmentCancelEnabled())
        #SetEnabled(formcontrolstr(SalesTable, DirPartyPostalAddressNewLine), salesTableInteractionHelper.parmAddressButtonsEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInquiryActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line level inquiry menu items are enabled.
    /// </summary>
    protected void enableLineInquiryActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonLineProduction), salesTableInteractionHelper.parmButtonProductionEnabled())
        #SetEnabled(formcontrolstr(SalesTable, buttonLineExplosion), salesTableInteractionHelper.parmButtonExplosionEnabled())
        #SetEnabled(formcontrolstr(SalesTable, BOMConsistOfTree), salesTableInteractionHelper.parmCanHaveBOMNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, ReqTransNet), salesTableInteractionHelper.parmStockedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, buttonInventSupply), salesTableInteractionHelper.parmStockedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, SalesATP), salesTableInteractionHelper.parmStockedNotReturn())

        #SetEnabled(formcontrolstr(SalesTable, linePriceDiscActual), salesTableInteractionHelper.parmProductBasedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, inventNonConformanceTableLine), salesTableInteractionHelper.parmProductBasedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, InventQualityOrderTableLine), salesTableInteractionHelper.parmProductBasedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, InventTestCertOfAnalysisTable), salesTableInteractionHelper.parmProductBasedNotReturn())
        #SetEnabled(formcontrolstr(SalesTable, LineKitVariantComponents), salesTableInteractionHelper.parmLineKitVariantComponentsEnabled())

        // Must set visibility before enabling/disabling
        this.page().actionPaneControlVisible(formControlStr(SalesTable, LineStripProductQualitySeparator), salesTableInteractionHelper.parmProductBasedNotReturn());
        #SetEnabled(formcontrolstr(SalesTable, LineStripProductQualitySeparator), salesTableInteractionHelper.parmProductBasedNotReturn())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineInterCompanyActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level intercompany menu items.
    /// </summary>
    protected void enableLineInterCompanyActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, InventOnhandInterCompany), salesTableInteractionHelper.parmInterCompanyActionsEnabled())
        #SetEnabled(formcontrolstr(SalesTable, InterCompanyRemoveMarking), salesTableInteractionHelper.parmInterCompanyRemoveEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLinePCActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level PC menu items.
    /// </summary>
    protected void enableLinePCActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, PCExecute), salesTableInteractionHelper.parmButtonConfigureLineEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineRetailActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level retail menu items are enabled.
    /// </summary>
    protected void enableLineRetailActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, retailAddItemMenuItem), salesTableInteractionHelper.parmEditHeaderAllowed())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineReturnOrderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level return order menu items.
    /// </summary>
    protected void enableLineReturnOrderActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, SalesLineReturnLine), salesTableInteractionHelper.parmButtonSalesLineReturnLineEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineSetupActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level setup menu items are enabled.
    /// </summary>
    protected void enableLineSetupActions()
    {
        #SetEnabled(
            formcontrolstr(SalesTable, ButtonMarkupTransLine),
        salesTableInteractionHelper.parmLineMarkupAllowed() && !salesTable.isCompletedCallCenterOrder())
        #SetEnabled(formcontrolstr(SalesTable, LineTaxTransSource), !salesTableInteractionHelper.parmHasMultipleDeliveries())
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnableOrderCompletionForCurrentUser</Name>
				<Source><![CDATA[
    private boolean isEnableOrderCompletionForCurrentUser()
    {
        return RetailMCRChannelTable::findForCurrentUser().MCREnableOrderCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineUpdateActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the line level update menu items are enabled.
    /// </summary>
    protected void enableLineUpdateActions()
    {
        #SetEnabled(formcontrolstr(SalesTable, buttonLineInventTrans), salesTableInteractionHelper.parmButtonLineInventTrans())
        #SetEnabled(formcontrolstr(SalesTable, buttonLineInventOnHand), salesTableInteractionHelper.parmButtonLineInventOnHand())
        #SetEnabled(formcontrolstr(SalesTable, buttonLineInventLot), salesTableInteractionHelper.parmButtonLineInventLot())
        #SetEnabled(formcontrolstr(SalesTable, InventDimTracking), salesTableInteractionHelper.parmStockedNotCanceledNotMultipleDlv())
        #SetEnabled(formcontrolstr(SalesTable, buttonLineInventReservation), salesTableInteractionHelper.parmButtonLineInventReservation())
        #SetEnabled(formcontrolstr(SalesTable, buttonLineInventMarking), salesTableInteractionHelper.parmButtonLineInventMarking())
        #SetEnabled(formcontrolstr(SalesTable, InventTransRegister), salesTableInteractionHelper.parmInventTransRegisterEnabled())
        #SetEnabled(formcontrolstr(SalesTable, InventTransPick), salesTableInteractionHelper.parmInventTransPickEnabled())
        #SetEnabled(formcontrolstr(SalesTable, PdsBatchAttribReserve), salesTableInteractionHelper.parmEnableBatchAttribReserve())
        #SetEnabled(formcontrolstr(SalesTable, PmfPackOnHand), salesTableInteractionHelper.parmEnablePackOnHand())
        #SetEnabled(formcontrolstr(SalesTable, CustDocumentLog), salesTableInteractionHelper.parmEnableCustDocumentLog())
        #SetEnabled(formcontrolstr(SalesTable, OpenMSDSDocument), salesTableInteractionHelper.parmEnableMSDSDocument())
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesTableInteraction</c> class by using the active records
    /// for the form.
    /// </summary>
    private void init()
    {
        page = this.page();

        salesLine               = page.activeRecord(identifierStr(SalesLine));
        salesTable              = page.activeRecord(identifierStr(SalesTable));

        salesTableInteractionHelper = SalesTableInteractionHelper::construct();

        if (page.pageArgs().enumTypeParameter() == enumNum(SalesTableFormId))
        {
            salesTableInteractionHelper.setSalesTableForm(SalesTableForm::construct(page.pageArgs().enumerationParameter(), salesTable));
        }
        else
        {
            salesTableInteractionHelper.setSalesTableForm(SalesTableForm::construct(SalesTableFormId::None, salesTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active sales order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesLine', 'selectionChanged')]
    public void salesLine_DS_selectionChanged()
    {
        using (var activityContext = instrumentationLogger.salesOrderInteractionActivities().selectionChange(tableStr(SalesLine)))
        {
            this.init();

            this.enableLineActions();

            if (salesLine.isIntercompanyOrigin())
            {
                this.enableHeaderIntercompanyTracing();
            }

            if (salesLine.isIntercompanyOrigin() || salesLine.isExternalVendorOrigin())
            {
                this.enableHeaderGeneralRelatedInformation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active sales order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesTable', 'selectionChanged')]
    public void salesTable_DS_selectionChanged()
    {
        using (var activityContext = instrumentationLogger.salesOrderInteractionActivities().selectionChange(tableStr(SalesTable)))
        {
            this.init();

            this.enableHeaderActions();
        
            #SetEnabled(formcontrolstr(SalesTable, SalesCreditNoteLines), salesTableInteractionHelper.parmCanCreditNoteBeCreated())
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(Page _page)
    {
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesTableInteraction));
        super(_page);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>