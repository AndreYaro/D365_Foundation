<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTransportTenderConfirmation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsTransportTenderConfirmation</c> class is used to run confirmation job for a transportation tender.
/// </summary>
public class TmsTransportTenderConfirmation extends RunBase
{
    TMSTransportationTender         tmsTransportationTender;

    Dialog                          dialog;
    DialogField                     dlfConfirmDateTime;
    DialogField                     dlfConfirmRate;
    DialogField                     dlfRequestRate;
    DialogField                     dlfRequestedRateCurrency;
    DialogField                     dlfRequestDateTime;
    DialogGroup                     groupMain;
    DialogGroup                     groupRequested;
    DialogGroup                     groupConfirmed;

    TMSConfirmedRate                confirmedRate;
    TMSConfirmedPickupDateTime      confirmedPickupDateTime;

    boolean                         dummy;

    #DEFINE.CurrentVersion(1)
    #LocalMacro.CurrentListSysLastValue
        dummy
    #EndMacro
    #LocalMacro.CurrentListNewSession
        #CurrentListSysLastValue,
        tmsTransportationTender,
        confirmedRate,
        confirmedPickupDateTime
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        TMSRequestedPickupDateTime  requestedPickupDateTime;

        requestedPickupDateTime = DateTimeUtil::applyTimeZoneOffset(
                                                    tmsTransportationTender.RequestedPickupDateTime,
                                                    DateTimeUtil::getUserPreferredTimeZone());

        dialog = super();
        dialog.caption("@TRX1493");

        groupMain = dialog.addGroup();
        groupMain.columns(2);
        groupMain.frameType(FormFrameType::None);

        groupRequested     = dialog.addGroup("@TRX1492",groupMain);
        dlfRequestRate     = dialog.addFieldValue(
                                        extendedTypeStr(TMSRequestedRate),
                                        tmsTransportationTender.RequestedRate,
                                        "@TRX509");
        dlfRequestedRateCurrency = dialog.addFieldValue(
                                        extendedTypeStr(CurrencyCode),
                                        tmsTransportationTender.CurrencyCode,
                                        "@SYS7572");
        dlfRequestDateTime = dialog.addFieldValue(
                                        extendedTypeStr(TMSRequestedPickupDateTime),
                                        requestedPickupDateTime,
                                        "@TRX1494");
        dlfRequestRate.allowEdit(false);
        dlfRequestDateTime.allowEdit(false);
        dlfRequestedRateCurrency.allowEdit(false);

        groupConfirmed     = dialog.addGroup("@TRX1480",groupMain);
        dlfConfirmRate     = dialog.addField(extendedTypeStr(TMSConfirmedRate), "@TRX509");
        dlfConfirmDateTime = dialog.addField(extendedTypeStr(TMSConfirmedPickupDateTime), "@TRX1494");

        dlfConfirmRate.mandatory_RU(true);
        dlfConfirmDateTime.mandatory_RU(true);

        dlfConfirmRate.registerOverrideMethod(
                                methodStr(FormRealControl,validate),
                                methodStr(TMSTransportTenderConfirmation,validateConfirmRate),
                                this);

        dlfConfirmDateTime.registerOverrideMethod(
                            methodStr(FormDateTimeControl,validate),
                            methodStr(TMSTransportTenderConfirmation,validateConfirmDateTime),
                            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        confirmedRate = dlfConfirmRate.value();
        confirmedPickupDateTime = DateTimeUtil::removeTimeZoneOffset(
                                                        dlfConfirmDateTime.value(),
                                                        DateTimeUtil::getUserPreferredTimeZone());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentListSysLastValue];
        }

        return [#CurrentVersion, #CurrentListNewSession];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTMSTransportationTender</Name>
				<Source><![CDATA[
    public TMSTransportationTender parmTMSTransportationTender(TMSTransportationTender _tmsTransportationTender = tmsTransportationTender)
    {
        tmsTransportationTender = _tmsTransportationTender;
        return tmsTransportationTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TMSTransportTender::tenderConfirmed(tmsTransportationTender, confirmedRate, confirmedPickupDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        boolean ret = false;

        if (version == #CurrentVersion)
        {
            if (this.inGetSaveLast())
            {
                [version, #CurrentListSysLastValue] = _packedClass;
            }
            else
            {
                [version, #CurrentListNewSession] = _packedClass;
            }
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Ensures that the confirm rate and the confirm date and time are valid.
    /// </summary>
    /// <param name="calledFrom">
    ///     The form that calls this method.
    /// </param>
    /// <returns>
    ///     True if both the rate and date time are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean result = super(calledFrom);

        if (result)
        {
            result =    this.validateConfirmRate(dlfConfirmRate.control())
                     && this.validateConfirmDateTime(dlfConfirmDateTime.control());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the date and time are not in the past.
    /// </summary>
    /// <param name="_control">
    ///     The control containing the date and time.
    /// </param>
    /// <returns>
    ///     True if the date and time are in the future; otherwise, false.
    /// </returns>
    protected boolean validateConfirmDateTime(FormDateTimeControl _control)
    {
        TMSConfirmedPickupDateTime  dateTime;
        boolean                     result = true;

        dateTime = DateTimeUtil::removeTimeZoneOffset(
                                    _control.dateTimeValue(),
                                    DateTimeUtil::getUserPreferredTimeZone());

        if (dateTime < DateTimeUtil::getSystemDateTime())
        {
            result = checkFailed("@TRX:TransTenderInThePast");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the rate is a positive value.
    /// </summary>
    /// <param name="_control">
    ///     The control containing the rate.
    /// </param>
    /// <returns>
    ///     True if the rate is positive; otherwise, false.
    /// </returns>
    protected boolean validateConfirmRate(FormRealControl _control)
    {
        boolean result = true;

        if (_control.realValue() < 0)
        {
            result = checkFailed("@TRX:TransTenderRateNegative");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.record() && _args.record() is TMSTransportationTender)
        {
            TMSTransportationTender transportationTender = _args.record() as TMSTransportationTender;

            TMSTransportTenderConfirmation tmsTransportTenderConfirmation = TMSTransportTenderConfirmation::newFromTransportationTender(transportationTender);

            if (tmsTransportTenderConfirmation.prompt())
            {
                tmsTransportTenderConfirmation.getFromDialog();

                tmsTransportTenderConfirmation.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@TRX:SandboxTitle_ConfirmingTransportTender";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransportationTender</Name>
				<Source><![CDATA[
    public static TMSTransportTenderConfirmation newFromTransportationTender(TMSTransportationTender _transportationTender)
    {
        TMSTransportTenderConfirmation transportTenderConfirmation = new TmsTransportTenderConfirmation();

        transportTenderConfirmation.parmTMSTransportationTender(_transportationTender);

        return transportTenderConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>