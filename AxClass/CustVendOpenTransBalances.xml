<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenTransBalances</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendOpenTransBalances</c> class is used to track several balances for open transactions
///    marked for settlement.
/// </summary>
/// <remarks>
///    This class manages the interaction with the balance manager class. The methods on the class support
///    initializing the class, marking and unmarking transactions, and determining factors affecting the
///    balances. They also support managing changing values that cause changes to the balances, and
///    returning the result of the balances to be consumed by the caller.
/// </remarks>
class CustVendOpenTransBalances
{
    CustVendOpenTransBalancesManager balancesManager;
    container sharedServiceCompanies;

    AmountMST transferredMst;
    AmountCur transferredDisplayCur;
    AmountMST markedTotalMst;
    AmountCur markedTotalDisplayCur;
    AmountMST estimatedDiscTotalMst;
    AmountCur estimatedDiscTotalDisplayCur;
    AmountMST custVendBalanceMst;

    CompanyId custVendCompany;
    AccountNum custVendAccountNum;
    CurrencyCode custVendCurrency;

    CompanyId displayCompany;
    CurrencyCode displayMstCurrency;
    CurrencyCode displayCurrency;

    boolean primaryMarked;
    boolean isPrimaryFromJournal;
    CompanyId primaryCompany;
    CurrencyCode primaryCurrency;
    ExchRate primaryExchRate;
    TransDate primaryTransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearLocalsForPrimaryPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the class variables that are used to track a primary payment when unmarked.
    /// </summary>
    /// <remarks>
    ///    When a primary payment is unmarked, the display currency is set to the currency of the customer or
    ///    vendor.
    /// </remarks>
    protected void clearLocalsForPrimaryPayment()
    {
        // Clear primary tracking variables
        if (!isPrimaryFromJournal)
        {
            primaryMarked = false;
            primaryCompany = '';
            primaryCurrency = '';
            primaryExchRate = 0;
            primaryTransDate = dateNull();
            displayCurrency = custVendCurrency;
            displayCompany = custVendCompany;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendBalanceMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total posted balance of the customer or vendor in the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The total posted balance of the customer or vendor.
    /// </returns>
    public AmountMST custVendBalanceMst()
    {
        return custVendBalanceMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineExchRateDisplayMstToDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the exchange rate to translate from the monetary standard (MST) currency to the display
    /// currency.
    /// </summary>
    /// <param name="_markedCustVendTrans">
    /// The transaction used to determine the exchange rate.
    /// </param>
    /// <param name="_transToMstExchRate">
    /// The exchange rate used to translate from the transaction currency to the monetary standard (MST)
    /// currency.
    /// </param>
    /// <param name="_transMstToDisplayMstExchRate">
    /// The exchange rate to translate from the monetary standard (MST) currency of the transaction company
    /// to the monetary standard (MST) currency of the display company.
    /// </param>
    /// <param name="_crossRate">
    /// The exchange rate used to translate from the currency of the transaction to the display currency.
    /// </param>
    /// <returns>
    /// The exchange rate.
    /// </returns>
    /// <remarks>
    /// If a primary payment is marked and there is a cross rate, the reciprocal of the <paramref
    /// name="_transMstToDisplayMstExchRate" /> is used to reverse the translation from transaction company
    /// currency to display company currency.If the transaction currency and the display currency are the
    /// same, the reciprocal of the <paramref name="_transMstToDisplayMstExchRate" /> is used to reverse
    /// the translation from transaction company currency to display company currency.If a primary payment
    /// is marked and no previous rules apply, the exchange rate of the primary payment is used.If there is
    /// no primary payment marked, the exchange rate is found for the posting date of the transaction.
    /// </remarks>
    protected ExchRate determineExchRateDisplayMstToDisplay(
        CustVendTrans _markedCustVendTrans,
        ExchRate _transToMstExchRate,
        ExchRate _transMstToDisplayMstExchRate,
        ExchRate _crossRate)
    {
        ExchRate mstToDisplayExchRate;

        // Assert the transaction to MST exchange rate is not zero.
        Debug::assert(_transToMstExchRate != 0);

        if (((primaryMarked == true) && (_crossRate != 0)) ||
            (_markedCustVendTrans.CurrencyCode == displayCurrency))
        {
            // In the case of a cross rate, the display currency amount is calculated directly using the cross
            // rate provided in the determineExchRateTransToTransMst method.

            // In the case where the display currency is the same as the transaction currency, the display currency amount
            // should be directly set to the transaction currency amount.

            // Cancelling out the rate used in the determineExchRateTransMstToDisplayMst method allows for this, and still
            // allows the accounting currency balance in the display company to be correct.

            mstToDisplayExchRate = ExchangeRateCalculation::calculateReciprocalExchangeRate(_transMstToDisplayMstExchRate);
        }
        else if (primaryMarked == true)
        {
            // In this case we need to get back to the display / primary payment currency. The rate provided must be used
            // since a user could have overriden the default. The reciprocal is used since we are going from the display
            // company accounting currency to the primary payment currency.
            mstToDisplayExchRate = ExchangeRateCalculation::calculateReciprocalExchangeRate(primaryExchRate);
        }
        else
        {
            changecompany(displayCompany)
            {
                // Look up exchange rate from company currency to display currency for transaction date
                mstToDisplayExchRate = ExchangeRateHelper::getCrossRateReciprocal_Static(Ledger::current(), displayCurrency, _markedCustVendTrans.TransDate);
            }
        }

        return mstToDisplayExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineExchRateTransMstToDisplayMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the exchange rate to translate from the monetary standard (MST) currency of the
    ///    transaction company to the monetary standard (MST) currency of the display company.
    /// </summary>
    /// <param name="_markedCustVendTrans">
    ///    The transaction that is used to determine the exchange rate.
    /// </param>
    /// <param name="_crossRate">
    ///    The exchange rate that is used to translate directly from the transaction currency to the display
    ///    currency.
    /// </param>
    /// <returns>
    ///    The exchange rate.
    /// </returns>
    /// <remarks>
    ///    If there is a cross rate or if the transaction currency and the display currency are the same,
    ///    translation must be done from the display currency to the display company currency.
    /// </remarks>
    protected ExchRate determineExchRateTransMstToDisplayMst(
        CustVendTrans _markedCustVendTrans,
        ExchRate _crossRate)
    {
        ExchRate transMstToDisplayMstExchRate;
        CompanyId markedCustVendTransCompany;

        if (((primaryMarked == true) && (_crossRate != 0)) ||
            ((primaryMarked == true) && (_markedCustVendTrans.CurrencyCode == displayCurrency)))
        {
            // When a primary payment is involved, the accounting currency balance will be calculated using the
            // exchange rate from the display / primary payment currency to the accounting currency of the display
            // company. This rate is provided on the primary payment and should be used.
            transMstToDisplayMstExchRate = primaryExchRate;
        }
        else if (_markedCustVendTrans.CurrencyCode == displayCurrency)
        {
            // When the transaction currency is the same as the display currency, the mst balance
            // will be calculated using the exchange rate from the display currency to the accounting
            // currency of the display company.
            changecompany(displayCompany)
            {
                if (CustVendSettlementFormCalculateTotalAmountMSTBasedOnCustVendTransExchRateFlight::instance().isEnabled()
                    && displayCompany == _markedCustVendTrans.company())
                {
                    transMstToDisplayMstExchRate = _markedCustVendTrans.exchRateCurToMst();
                }
                else
                {
                    transMstToDisplayMstExchRate = ExchangeRateHelper::getCrossRate_Static(Ledger::current(), displayCurrency, _markedCustVendTrans.TransDate);
                }
            }
        }
        else
        {
            markedCustVendTransCompany = _markedCustVendTrans.company();
            changecompany(markedCustVendTransCompany)
            {
                if (primaryMarked == true)
                {
                    // Look up rate from trans company currency to display company currency for payment date
                    transMstToDisplayMstExchRate = ExchangeRateHelper::getCrossRateReciprocal_Static(Ledger::current(), displayMstCurrency, primaryTransDate);
                }
                else
                {
                    // Look up rate from trans company currency to display company currency for transaction date
                    transMstToDisplayMstExchRate = ExchangeRateHelper::getCrossRateReciprocal_Static(Ledger::current(), displayMstCurrency, _markedCustVendTrans.TransDate);
                }
            }
        }

        return transMstToDisplayMstExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineExchRateTransToTransMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the exchange rate to translate from the currency of the transaction to the monetary
    /// standard (MST) currency.
    /// </summary>
    /// <param name="_markedCustVendTrans">
    /// The transaction used to determine the exchange rate.
    /// </param>
    /// <param name="_crossRate">
    /// The exchange rate used to translate directly from the transaction currency to the display currency.
    /// </param>
    /// <returns>
    /// The exchange rate.
    /// </returns>
    /// <remarks>
    /// If a primary payment is marked and there is a cross rate, the exchange rate is the cross rate.If
    /// the transaction currency and the display currency are the same, the exchange rate is 100.If a
    /// primary payment is marked and no previous rules apply, the exchange rate is found for the posting
    /// date of the primary payment.If no primary payment is marked, the exchange rate from the transaction
    /// is used.
    /// </remarks>
    protected ExchRate determineExchRateTransToTransMst(
        CustVendTrans _markedCustVendTrans,
        ExchRate _crossRate)
    {
        ExchRate transToMstExchRate;

        if ((primaryMarked == true) && (_crossRate != 0))
        {
            transToMstExchRate = _crossRate;
        }
        else if ((_markedCustVendTrans.CurrencyCode == displayCurrency))
        {
            // When the transaction currency is the same as the display currency, the mst balance
            // will be calculated using the exchange rate from the display currency to the accounting
            // currency of the display company.  This is handled in the determineExchRateTransMstToDisplayMst
            // method.  The rate of 100 ensures that no currency calculation occurs before that time.
            transToMstExchRate = 100;
        }
        else
        {
            changecompany(_markedCustVendTrans.company())
            {
                if (_markedCustVendTrans.CurrencyCode == Ledger::accountingCurrency())
                {
                    // No exchange if transaction already in transaction company currency
                    transToMstExchRate = 100;
                }
                else if (primaryMarked == true)
                {
                    // Look up exchange rate for transaction currency for payment date
                    transToMstExchRate = ExchangeRateHelper::getCrossRate_Static(Ledger::current(), _markedCustVendTrans.CurrencyCode, primaryTransDate);
                }
                else
                {
                    // Use exchange rate posted with transaction
                    transToMstExchRate = _markedCustVendTrans.exchRateCurToMst();
                }
            }
        }

        return transToMstExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDiscountGraceDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of discount grace days for the specified transaction.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The transaction that is used to get the number of discount grace days.
    /// </param>
    /// <returns>
    ///    The number of discount grace days for the specified transaction.
    /// </returns>
    protected DiscGraceDays findDiscountGraceDays(CustVendTrans _custVendTrans)
    {
        DiscGraceDays graceDays = 0;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                graceDays = CustPaymModeTable::discGraceDays(_custVendTrans.PaymMode);
                break;
            case tableNum(VendTrans):
                graceDays = VendPaymModeTable::discGraceDays(_custVendTrans.PaymMode);
                break;
            default:
                Debug::assert(false);
                break;
        }

        return graceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the display currency.
    /// </summary>
    /// <returns>
    ///    The display currency.
    /// </returns>
    public CurrencyCode getDisplayCurrency()
    {
        return displayCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEstimatedCashDiscTotalDisplayCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total estimated discount amount of the marked transactions in the currency displayed.
    /// </summary>
    /// <returns>
    ///    The total estimated discount amount of the marked transactions.
    /// </returns>
    public Amount getEstimatedCashDiscTotalDisplayCur()
    {
        return estimatedDiscTotalDisplayCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEstimatedCashDiscTotalMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total estimated discount amount of the marked transactions in the monetary standard (MST)
    ///    currency.
    /// </summary>
    /// <returns>
    ///    The total estimated discount amount of the marked transactions.
    /// </returns>
    public AmountMST getEstimatedCashDiscTotalMst()
    {
        return estimatedDiscTotalMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromLedgerJournalTransDisplayCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the transaction that is transferred from the journal in the currency displayed.
    /// </summary>
    /// <returns>
    ///    The amount of the journal transaction.
    /// </returns>
    public Amount getFromLedgerJournalTransDisplayCur()
    {
        return transferredDisplayCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromLedgerJournalTransMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the transaction that is transferred from the journal in the monetary standard
    ///    (MST) currency.
    /// </summary>
    /// <returns>
    ///    The amount of the journal transaction.
    /// </returns>
    public AmountMST getFromLedgerJournalTransMst()
    {
        return transferredMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedTotalDisplayCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount of the marked transactions in the currency displayed.
    /// </summary>
    /// <returns>
    ///    The total amount of the marked transactions.
    /// </returns>
    /// <remarks>
    ///    The total includes the transaction amount transferred from the journal transaction, if it has a
    ///    value.
    /// </remarks>
    public Amount getMarkedTotalDisplayCur()
    {
        return transferredDisplayCur + markedTotalDisplayCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkedTotalMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total amount of the marked transactions in the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The total amount of the marked transactions.
    /// </returns>
    /// <remarks>
    ///    The total includes the transaction amount transferred from the journal transaction, if it has a
    ///    value.
    /// </remarks>
    public AmountMST getMarkedTotalMst()
    {
        return transferredMst + markedTotalMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccountNumCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the customer or vendor account number and currency and sets the display currency from the
    ///    specified table buffer and related tables.
    /// </summary>
    /// <param name="_originator">
    ///    The table buffer used for initiating the class.
    /// </param>
    /// <remarks>
    ///    The table buffer should be from the <c>CustTable</c>, <c>VendTable</c>, <c>CustInvoiceTable</c>,
    ///    <c>SalesTable</c>, <c>PurchTable</c>, or <c>LedgerJournalTrans</c> table with an account type of
    ///    customer or vendor.If the specified table buffer is from the <c>LedgerJournalTrans</c> table, the
    ///    display currency is set to the <c>CurrencyCode</c> from this table. Otherwise, the display currency
    ///    is set to the currency from the customer or vendor.
    /// </remarks>
    protected void initAccountNumCurrencies(Common _originator)
    {
        LedgerJournalTrans ledgerJournalTrans;
        CustTable custTable;
        CustTrans custTrans;
        CustInvoiceTable custInvoiceTable;
        SalesTable salesTable;
        VendTable vendTable;
        VendTrans vendTrans;
        PurchTable purchTable;
        // <GEERU>
        CustInvoiceJour custInvoiceJour;
        // </GEERU>

        switch (_originator.TableId)
        {
            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans = _originator;
                custVendAccountNum = ledgerJournalTrans.parmAccount();
                displayCurrency = ledgerJournalTrans.CurrencyCode;
                displayCompany = ledgerJournalTrans.Company;

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    // LedgerJournalTrans.company() is the current journal transaction's record
                    // company; while LedgerJournalTrans.Company is the company for the
                    // LedgerJournalTrans.LedgerJournalTransAccountNum.  The two can be different
                    // because a journal transaction might be for a different company than the
                    // company where the transaction is initiated.
                    this.initCustCurrency(ledgerJournalTrans.Company, custVendAccountNum);
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    // LedgerJournalTrans.company() is the current journal transaction's record
                    // company; while LedgerJournalTrans.Company is the company for the
                    // LedgerJournalTrans.LedgerJournalTransAccountNum.  The two can be different
                    // because a journal transaction might be for a different company than the
                    // company where the transaction is initiated.
                    this.initVendCurrency(ledgerJournalTrans.Company, custVendAccountNum);
                }
                break;

            case tablenum(CustTable):
                custTable = _originator;
                custVendAccountNum = custTable.AccountNum;
                custVendCurrency = custTable.Currency;
                custVendCompany = custTable.company();
                break;

            case tablenum(CustInvoiceTable):
                custInvoiceTable = _originator;
                custVendAccountNum = custInvoiceTable.InvoiceAccount;
                this.initCustCurrency(custInvoiceTable.company(), custVendAccountNum);
                break;

            case tablenum(CustTrans):
                custTrans = _originator;
                custVendAccountNum = custTrans.AccountNum;
                this.initCustCurrency(custTrans.company(), custVendAccountNum);
                break;

            // <GEERU>
            case tablenum(CustInvoiceJour):
                custInvoiceJour    = _originator;
                custVendAccountNum = custInvoiceJour.InvoiceAccount;
                this.initCustCurrency(custInvoiceJour.company(), custVendAccountNum);
                break;
            // </GEERU>

            case tablenum(SalesTable):
                salesTable = _originator;
                custVendAccountNum = salesTable.InvoiceAccount;
                this.initCustCurrency(salesTable.company(), custVendAccountNum);
                break;

            case tablenum(VendTable):
                vendTable = _originator;
                custVendAccountNum = vendTable.AccountNum;
                custVendCurrency = vendTable.Currency;
                custVendCompany = vendTable.company();
                break;

            case tablenum(VendTrans):
                vendTrans = _originator;
                custVendAccountNum = vendTrans.AccountNum;
                this.initVendCurrency(VendTrans.company(), custVendAccountNum);
                break;

            case tablenum(PurchTable):
                purchTable = _originator;
                custVendAccountNum = purchTable.InvoiceAccount;
                this.initVendCurrency(purchTable.company(), custVendAccountNum);
                break;

        }

        this.initDisplayCompanyAndCurrencies(custVendCompany, custVendCurrency);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initDisplayCompanyAndCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables used to display company and currencies.
    /// </summary>
    /// <param name="_company">
    ///    The company used to find the accounting currency.
    /// </param>
    /// <param name="_currencyCode">
    ///    The transaction currency code.
    /// </param>
    protected void initDisplayCompanyAndCurrencies(CompanyId _company, CurrencyCode _currencyCode)
    {
        if (displayCurrency == '')
        {
            // Display currency was not set from journal transaction, use customer or vendor currency
            displayCurrency = _currencyCode;
            displayCompany = _company;
        }

        changecompany(displayCompany)
        {
            displayMstCurrency = CompanyInfoHelper::standardCurrency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variable used to track the currency code for the specified customer account.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company used to find the customer.
    /// </param>
    /// <param name="_custAccountNum">
    ///    The account number that is used to find the currency.
    /// </param>
    protected void initCustCurrency(
        CompanyId   _transCompany,
        CustVendAC  _custAccountNum)
    {
        CustTable custTable;
        container companies;

        companies += [_transCompany];

        select firstonly crosscompany:companies Currency from custTable
            where custTable.AccountNum == _custAccountNum;

        custVendCurrency = custTable.Currency;
        custVendCompany = _transCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendBalanceMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the posted customer or vendor balance in the monetary standard (MST) currency.
    /// </summary>
    /// <param name="_custVendAccount">
    ///    The customer or vendor account number that is used to initialize the balance.
    /// </param>
    /// <param name="_isCustomerAccount">
    ///    A Boolean value that indicates whether to initialize the posted customer balance or the vendor
    ///    balance.
    /// </param>
    protected void initCustVendBalanceMst(
        CustVendAC  _custVendAccount,
        boolean     _isCustomerAccount)
    {
        DirPartyRecId       custVendParty;
        CustVendTable       custVendTable;
        CustTable           custTable;
        VendTable           vendTable;
        CustVendTransOpen   custVendTransOpen;
        CustTransOpen       custTransOpen;
        VendTransOpen       vendTransOpen;
        CurrencyCode        transMstCurrency;
        Amount              transMstBalance;
        CurrencyExchangeHelper  currencyExchHelper;
        Ledger              ledger;
        CompanyInfo         companyInfo;

        changecompany(custVendCompany)
        {
            if (_isCustomerAccount)
            {
                custTable = CustTable::find(_custVendAccount);
                custVendParty = custTable.Party;
                custVendTable = custTable;
                custVendTransOpen = custTransOpen;
            }
            else
            {
                vendTable = VendTable::find(_custVendAccount);
                custVendParty = vendTable.Party;
                custVendTable = vendTable;
                custVendTransOpen = vendTransOpen;
            }
        }

        // Initialize currency exchange helper
        currencyExchHelper = CurrencyExchangeHelper::construct();
        currencyExchHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(displayCompany).RecId));

        if (CustVendOpenTransBalanceMSTPerfImproveFlight::instance().isEnabled())
        {
            while select crossCompany:sharedServiceCompanies AccountNum, Party, dataAreaId from custVendTable
                order by custVendTable.DataAreaId
                group by custVendTable.DataAreaId
                where custVendTable.Party == custVendParty
                join sum(AmountMST) from custVendTransOpen
                    where custVendTransOpen.AccountNum == custVendTable.AccountNum
            {
                transMstCurrency = Ledger::accountingCurrency(CompanyInfo::findDataArea(custVendTable.DataAreaId).RecId);
                transMstBalance = custVendTransOpen.AmountMST;

                // Convert to the company currency of the display company using the system date and the display company exchange rate, if necessary
                if (transMstCurrency != displayMstCurrency)
                {
                    // Calculate the balance from the transaction company if its currency exists in the display company.
                    transMstBalance = currencyExchHelper.calculateTransactionToAccounting(transMstCurrency, transMstBalance, true);
                }

                custVendBalanceMst += transMstBalance;
            }
        }
        else
        {
            while select crossCompany:sharedServiceCompanies AccountNum, Party, dataAreaId from custVendTable
                order by ledger.AccountingCurrency
                group by ledger.AccountingCurrency
                where custVendTable.Party == custVendParty
                join sum(AmountMST) from custVendTransOpen
                    where custVendTransOpen.AccountNum == custVendTable.AccountNum
                join recId from companyInfo
                    where companyInfo.DataArea == custVendTable.dataAreaId
                join AccountingCurrency, PrimaryForLegalEntity from ledger
                    where ledger.PrimaryForLegalEntity == companyInfo.RecId
            {
                transMstCurrency = ledger.AccountingCurrency;
                transMstBalance  = custVendTransOpen.AmountMST;

                // Convert to the company currency of the display company using the system date and the display company exchange rate, if necessary
                if (transMstCurrency != displayMstCurrency)
                {
                    // Calculate the balance from the transaction company if its currency exists in the display company.
                    transMstBalance = currencyExchHelper.calculateTransactionToAccounting(transMstCurrency, transMstBalance, true);
                }

                custVendBalanceMst += transMstBalance;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTransBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the balances that are taken from the journal transaction.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal transaction to use to calculate balances.
    /// </param>
    protected void initFromLedgerJournalTransBalances(LedgerJournalTrans _ledgerJournalTrans)
    {
        transferredDisplayCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;

        changecompany(_ledgerJournalTrans.Company)
        {
            transferredMst = _ledgerJournalTrans.calcAmountMST();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variable that tracks the currency code for the specified vendor account.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company used to find the vendor.
    /// </param>
    /// <param name="_vendAccountNum">
    ///    The account number used to find the currency.
    /// </param>
    protected void initVendCurrency(
        CompanyId   _transCompany,
        CustVendAC  _vendAccountNum)
    {
        VendTable vendTable;
        container companies;

        companies += [_transCompany];

        select firstonly crosscompany:companies Currency from vendTable
            where vendTable.AccountNum == _vendAccountNum;

        custVendCurrency = vendTable.Currency;
        custVendCompany = _transCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified open transaction to the balance tracking.
    /// </summary>
    /// <param name="_markedCustVendTransOpen">
    ///    The open transaction to add to balance tracking.
    /// </param>
    /// <param name="_markedCustVendTrans">
    ///    The transaction record that corresponds to the open transaction record.
    /// </param>
    /// <param name="_markedAmount">
    ///    The amount of the open transaction to track in the balances.
    /// </param>
    /// <param name="_discAmount">
    ///    The discount amount of the open transaction to track in the balances.
    /// </param>
    /// <param name="_crossRate">
    ///    The exchange rate used to translate from currency of the transaction to the display currency. Set
    ///    to 0 if it is unused.
    /// </param>
    /// <remarks>
    ///    If the <paramref name="_markedAmount" />is less than the amount of the open transaction minus the
    ///    discount amount determined, the discount is set to zero.
    /// </remarks>
    public void markTrans(
        CustVendTransOpen _markedCustVendTransOpen,
        CustVendTrans _markedCustVendTrans,
        AmountCur _markedAmount,
        CashDiscAmount _discAmount,
        ExchRate _crossRate)
    {
        ExchRate transToMstExchRate;
        ExchRate transMstToDisplayMstExchRate;
        ExchRate mstToDisplayExchRate;

        // Determine Trans to MST exchange rate
        transToMstExchRate = this.determineExchRateTransToTransMst(_markedCustVendTrans, _crossRate);

        // Determine trans company to display company exchange rate
        transMstToDisplayMstExchRate = this.determineExchRateTransMstToDisplayMst(_markedCustVendTrans, _crossRate);

        // Determine MST to display exchange rate
        mstToDisplayExchRate = this.determineExchRateDisplayMstToDisplay(_markedCustVendTrans, transToMstExchRate, transMstToDisplayMstExchRate, _crossRate);

        // Add marked transaction to balance manager
        balancesManager.add(_markedCustVendTransOpen.company(),
                            _markedCustVendTransOpen.RecId,
                            _markedAmount,
                            _discAmount,
                            _markedCustVendTrans.CurrencyCode,
                            _markedCustVendTrans.TransDate,
                            _markedCustVendTrans.ExchRate,
                            transToMstExchRate,
                            transMstToDisplayMstExchRate,
                            mstToDisplayExchRate);

        // Refresh marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization for the <c>CustVendOpenTransBalances</c> class.
    /// </summary>
    /// <param name="_originator">
    ///    The table buffer used for initiating the class.
    /// </param>
    /// <remarks>
    ///    Sets class variables for tracking primary payment information, currencies and dates that affect
    ///    balances.Creates an instance of the <c>CustVendOpenTransBalancesManager</c> class. This is used to
    ///    track balances for marked transactions and factors that affect the transactions. These factors
    ///    include the transaction amount, discount amount and exchange rates.This method also initializes
    ///    balance fields that are stored in class members.
    /// </remarks>
    protected void new(Common _originator)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalType ledgerJournalType;
        ExchRate paymentExchRate;
        ExchangeRateHelper exchangeRateHelper;

        // Initialize class members
        primaryCurrency = '';
        primaryMarked = false;
        isPrimaryFromJournal = false;
        primaryExchRate = 0;
        primaryTransDate = dateNull();

        // Get companies in the shared service boundary
        sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

        // Determine account number, display, customer/vendor currencies
        this.initAccountNumCurrencies(_originator);

        // Initialize balance manager
        changecompany(displayCompany)
        {
            balancesManager = CustVendOpenTransBalancesManager::construct(
                Currency::roundingPrecisionAdjusted(displayMstCurrency),
                Currency::roundingPrecisionAdjusted(displayCurrency));
        }

        // Initialize balances
        switch (_originator.TableId)
        {
            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans = _originator;
                ledgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;

                if (ledgerJournalType == LedgerJournalType::Daily ||
                    ledgerJournalType == LedgerJournalType::CustPayment ||
                    ledgerJournalType == LedgerJournalType::Payment ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeDraw ||
                    ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw ||
                    ledgerJournalType == LedgerJournalType::VendPaymRemittance)
                {
                    // A payment, bill of exchange draw, promissory note draw and promissory note remittance
                    // are considered primary payment transactions.

                    // Get exchange rate from payment/bill of exchange/promissory note journal transaction, crossRate() accounts for triangulation if needed
                    // Must send through setExchRate() to translate from display formatting
                    exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode);
                    paymentExchRate = exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate());

                    // Set primary payment variables from journal transaction
                    this.setLocalsForPrimaryPayment(true, ledgerJournalTrans.Company, ledgerJournalTrans.CurrencyCode, paymentExchRate, ledgerJournalTrans.TransDate);
                    isPrimaryFromJournal = true;
                }

                this.initFromLedgerJournalTransBalances(ledgerJournalTrans);

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    this.initCustVendBalanceMst(custVendAccountNum, true);
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    this.initCustVendBalanceMst(custVendAccountNum, false);
                }
                break;

            // <GEERU>
            case tablenum(CustInvoiceJour):
            // </GEERU>
            case tablenum(CustTable), tablenum(CustInvoiceTable), tablenum(SalesTable), tableNum(CustTrans):
                this.initCustVendBalanceMst(custVendAccountNum, true);
                break;

            case tablenum(VendTable), tablenum(PurchTable), tableNum(VendTrans):
                this.initCustVendBalanceMst(custVendAccountNum, false);
                break;

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCustVendBalanceMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the posted customer or vendor balance in the monetary standard (MST) currency.
    /// </summary>
    /// <param name="_isCustomerAccount">
    ///    A Boolean value that indicates whether to initialize the posted customer balance or the vendor
    ///    balance.
    /// </param>
    public void refreshCustVendBalanceMst(boolean _isCustomerAccount)
    {
        custVendBalanceMst = 0;
        this.initCustVendBalanceMst(custVendAccountNum, _isCustomerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMarkedTransactionBalances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the class variables that track the marked total and estimated discount total balances from
    ///    the instance of the <c>CustVendOpenTransBalancesManager</c> class.
    /// </summary>
    protected void refreshMarkedTransactionBalances()
    {
        markedTotalMst = balancesManager.sumTransBalanceMst();
        markedTotalDisplayCur = balancesManager.sumTransBalanceDisplay();
        estimatedDiscTotalMst = balancesManager.sumEstimatedCashDiscBalanceMst();
        estimatedDiscTotalDisplayCur = balancesManager.sumEstimatedCashBalanceDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocalsForPrimaryPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the class variables that are used to track a primary payment when they are marked.
    /// </summary>
    /// <param name="_marked">
    ///    A Boolean flag that indicates whether a primary payment is marked.
    /// </param>
    /// <param name="_company">
    ///    The company of the primary payment.
    /// </param>
    /// <param name="_currency">
    ///    The currency of the primary payment.
    /// </param>
    /// <param name="_exchRate">
    ///    The exchange rate of the primary payment used to translate from the currency of the transaction to
    ///    the monetary standard (MST) currency.
    /// </param>
    /// <param name="_transDate">
    ///    The posting date of the primary payment.
    /// </param>
    /// <remarks>
    ///    When a primary payment is marked, the display currency is set to the currency of the primary
    ///    payment and the date used to determine cash discounts is set to the posting date of the primary
    ///    payment.
    /// </remarks>
    protected void setLocalsForPrimaryPayment(
        boolean _marked,
        CompanyId _company,
        CurrencyCode _currency,
        ExchRate _exchRate,
        TransDate _transDate)
    {
        // Update primary tracking variables
        if (!isPrimaryFromJournal)
        {
            primaryMarked = _marked;
            primaryCompany = _company;
            primaryCurrency = _currency;
            primaryExchRate = _exchRate;
            primaryTransDate = _transDate;
            displayCurrency = primaryCurrency;
            displayCompany = primaryCompany;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrimaryPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or removes the specified open transaction as primary payment as specified by the <paramref
    ///    name="_isMarked" /> parameter.
    /// </summary>
    /// <param name="_markedCustVendTransOpen">
    ///    The open transaction to set or remove as the primary payment.
    /// </param>
    /// <param name="_markedCustVendTrans">
    ///    The transaction record that corresponds to the open transaction record.
    /// </param>
    /// <param name="_isMarked">
    ///    A Boolean value that indicates whether a primary payment is set or removed. Set to false if removed.
    /// </param>
    /// <remarks>
    ///    If a primary payment is set or removed, all cash discount amounts are recalculated. The display
    ///    currency is updated.Exchange rates that translate from the currencies of the marked transactions to
    ///    the monetary standard (MST) currency are updated. Exchange rates that translate from the MST
    ///    currency to the display currency are updated.
    /// </remarks>
    public void setPrimaryPayment(CustVendTransOpen _markedCustVendTransOpen, CustVendTrans _markedCustVendTrans, boolean _isMarked)
    {
        if (_isMarked)
        {
            // Set class variables tracking primary transaction
            this.setLocalsForPrimaryPayment(
                true,
                _markedCustVendTrans.company(),
                _markedCustVendTrans.CurrencyCode,
                _markedCustVendTrans.exchRateCurToMst(),
                _markedCustVendTrans.TransDate);

            changecompany(primaryCompany)
            {
                // Get the display company currency for the payment company
                displayMstCurrency = CompanyInfoHelper::standardCurrency();

                // If primary payment marked, update balance manager for new display currency round off
                balancesManager.updateRoundOffAmountDisplay(Currency::roundingPrecisionAdjusted(primaryCurrency));
            }

            // Update transaction to MST exchange rate for the given date
            balancesManager.updateAllTransToTransMstExchRates(primaryCurrency, primaryTransDate);

            // Update transaction company currency to display company currency exchange rates
            balancesManager.updateAllTransMstToDisplayMstExchRates(
                primaryCompany,
                displayMstCurrency,
                primaryTransDate,
                primaryCurrency,
                primaryExchRate);

            // Update all marked transactions to use primary exchange rate
            balancesManager.updateAllDisplayMstToDisplayExchRates(primaryCurrency, ExchangeRateCalculation::calculateReciprocalExchangeRate(primaryExchRate));
        }
        else
        {
            // Clear class variables tracking primary transaction
            this.clearLocalsForPrimaryPayment();

            changecompany(custVendCompany)
            {
                // Get the display company currency for the customer/vendor company
                displayMstCurrency = CompanyInfoHelper::standardCurrency();

                // If primary payment unmarked, update balance manager for new display currency round off
                balancesManager.updateRoundOffAmountDisplay(Currency::roundingPrecisionAdjusted(custVendCurrency));
            }

            // Update transaction to MST exchange rates to the rate at transaction posting
            balancesManager.resetAllTransToTransMstExchRates(displayCurrency);

            // Update transaction company currency to display company currency exchange rates
            balancesManager.updateAllTransMstToDisplayMstExchRates(displayCompany, displayMstCurrency, _markedCustVendTrans.TransDate, displayCurrency);

            // Update all MST to display currency exchange rates using the transaction date
            balancesManager.resetAllDisplayMstToDisplayExchRates(displayCompany, displayCurrency);
        }

        // Refresh marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkAllTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all transactions from balance tracking.
    /// </summary>
    /// <remarks>
    ///    Resets tracking of whether a primary payment is marked.
    /// </remarks>
    public void unmarkAllTrans()
    {
        // Remove all marked transactions from balance manager
        balancesManager.removeAll();

        // Reset class variables tracking primary transaction
        this.clearLocalsForPrimaryPayment();

        // Refresh marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the specified open transaction from balance tracking.
    /// </summary>
    /// <param name="_markedCustVendTransOpen">
    ///    The open transaction to remove from balance tracking.
    /// </param>
    /// <param name="_isPrimary">
    ///    A Boolean flag that indicates that the unmarked transaction is the primary payment.
    /// </param>
    public void unmarkTrans(CustVendTransOpen _markedCustVendTransOpen, boolean _isPrimary)
    {
        CustVendTrans custVendTrans;
        CustTransOpen custTransOpen;
        VendTransOpen vendTransOpen;

        // Remove marked transaction to balance manager
        balancesManager.remove(_markedCustVendTransOpen.company(), _markedCustVendTransOpen.RecId);

        if (_isPrimary)
        {
            // If transaction was primary, update primary payment settings
            switch (_markedCustVendTransOpen.TableId)
            {
                case tableNum(CustTransOpen):
                    custTransOpen = _markedCustVendTransOpen;
                    custVendTrans = custTransOpen.custTrans();
                    break;

                case tableNum(VendTransOpen):
                    vendTransOpen = _markedCustVendTransOpen;
                    custVendTrans = vendTransOpen.vendTrans();
                    break;
            }

            this.setPrimaryPayment(_markedCustVendTransOpen, custVendTrans, false);
        }
        else
        {
            // Refresh marked transaction balances
            this.refreshMarkedTransactionBalances();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCrossRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the balances for the specified open transaction for a change in the cross rate.
    /// </summary>
    /// <param name="_updateCustVendTransOpen">
    ///    The open transaction used to update balances.
    /// </param>
    /// <param name="_crossRate">
    ///    The exchange rate used to translate from the currency of the transaction to the display currency.
    /// </param>
    public void updateCrossRate(CustVendTransOpen _updateCustVendTransOpen, ExchRate _crossRate)
    {
        ExchRate updateTransToMstExchRate;
        ExchRate updateTransMstToDisplayMstExchRate;
        ExchRate updateDisplayMstToDisplayExchRate;
        CustVendTrans custVendTrans;
        CustTransOpen custTransOpen;
        VendTransOpen vendTransOpen;

        // Determine exchange rate changes
        switch (_updateCustVendTransOpen.TableId)
        {
            case tableNum(CustTransOpen):
                custTransOpen = _updateCustVendTransOpen;
                custVendTrans = custTransOpen.custTrans();
                break;

            case tableNum(VendTransOpen):
                vendTransOpen = _updateCustVendTransOpen;
                custVendTrans = vendTransOpen.vendTrans();
                break;
        }

        updateTransToMstExchRate = this.determineExchRateTransToTransMst(custVendTrans, _crossRate);
        updateTransMstToDisplayMstExchRate = this.determineExchRateTransMstToDisplayMst(custVendTrans, _crossRate);
        updateDisplayMstToDisplayExchRate = this.determineExchRateDisplayMstToDisplay(custVendTrans, updateTransToMstExchRate, updateTransMstToDisplayMstExchRate, _crossRate);

        // Update balances manager
        balancesManager.updateTransToTransMstExchRate(_updateCustVendTransOpen.company(), _updateCustVendTransOpen.RecId, updateTransToMstExchRate);
        balancesManager.updateTransMstToDisplayMstExchRate(_updateCustVendTransOpen.company(), _updateCustVendTransOpen.RecId, updateTransMstToDisplayMstExchRate);
        balancesManager.updateDisplayMstToDisplayExchRate(_updateCustVendTransOpen.company(), _updateCustVendTransOpen.RecId, updateDisplayMstToDisplayExchRate);

        // Update marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the balances for the specified open transaction for a change in the discount amount on the
    ///    specified cash discount record.
    /// </summary>
    /// <param name="_updateCustVendTransOpen">
    ///    The open transaction used to update balances.
    /// </param>
    /// <param name="_updateCashDiscAmount">
    ///    The open transaction used to update balances.
    /// </param>
    /// <remarks>
    ///    Multiple cash discount records can exist for an open transaction record. The discount amount change
    ///    is only applied if it is the cash discount record for the date used to determine discount amounts.
    /// </remarks>
    public void updateDiscAmount(CustVendTransOpen _updateCustVendTransOpen, CashDiscAmount _updateCashDiscAmount)
    {
        // If they are the same record, update balances manager with discount override
        balancesManager.updateEstimatedCashDiscAmount(_updateCustVendTransOpen.company(), _updateCustVendTransOpen.RecId, _updateCashDiscAmount);

        // Refresh marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates balances for the specified open transaction for a change in the amount to settle.
    /// </summary>
    /// <param name="_updateCustVendTransOpen">
    ///    The open transaction used to update balances.
    /// </param>
    /// <param name="_updateAmountCur">
    ///    The amount of the open transaction to include in the balance fields.
    /// </param>
    /// <remarks>
    ///    If the <paramref name="_updateAmountCur" /> is less than the amount of the open transaction minues
    ///    the discount amount determined, the estimated cash discount amount is set to 0 for balance tracking.
    /// </remarks>
    public void updateSettleAmountCur(CustVendTransOpen _updateCustVendTransOpen, AmountCur _updateAmountCur)
    {
        // Update balances manager
        balancesManager.updateTransAmount(_updateCustVendTransOpen.company(), _updateCustVendTransOpen.RecId, _updateAmountCur);

        // Refresh marked transaction balances
        this.refreshMarkedTransactionBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>CustVendOpenTransBalances</c> class.
    /// </summary>
    /// <param name="_originator">
    ///    The table buffer used to initiate the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustVendOpenTransBalances</c> class.
    /// </returns>
    /// <remarks>
    ///    The table buffer should be from the <c>CustTable</c>, <c>VendTable</c>, <c>CustInvoiceTable</c>,
    ///    <c>SalesTable</c>, <c>PurchTable</c>, <c>ProjTable</c>, or <c>LedgerJournalTrans</c> table with an
    ///    account type of customer or vendor.
    /// </remarks>
    public static CustVendOpenTransBalances construct(Common _originator)
    {
        CustVendOpenTransBalances custVendOpenTransBalances = new CustVendOpenTransBalances(_originator);

        // Update marked transaction balances
        custVendOpenTransBalances.refreshMarkedTransactionBalances();

        return custVendOpenTransBalances;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>