<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSalesOpenOrdersSRSHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustSalesOpenOrdersSRSHelper </c>class is used to calculate the amounts of every sales ID
///    and the corresponding customer name of the customer account that is related to each sales ID.
/// </summary>
public class CustSalesOpenOrdersSRSHelper
{
    SalesTable salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>amountDelivered</c> for every sales ID.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///    This is passed to the <c>getSalesTable</c> method to fetch the corresponding record and calculate
    ///    the amount delivered
    /// </param>
    /// <returns>
    ///    The amount delivered for every sales ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur amountDelivered(RecId _salesTableRecId)
    {
        SalesLine       salesLine;
        AmountCur       amountCur = 0;

        SalesTable      salesTableLocal;
        ;

        salesTableLocal = this.getSalesTable(_salesTableRecId);

        while select salesLine
                index hint SalesLineIdx
                where salesLine.SalesId     == salesTableLocal.SalesId
        {
            amountCur += salesLine.calcLineAmountExclTax(salesLine.SalesQty - salesLine.RemainSalesPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainingMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>amountRemainingMST</c> for every sales ID.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///    A <c>recId</c> that is passed to the <c>getSalesTable</c> method to fetch the corresponding record
    ///    and calculate the <c>amountRemainingMST</c> value.
    /// </param>
    /// <returns>
    ///    An <c>amountRemainingMST</c> for every sales ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST amountRemainingMST(RecId _salesTableRecId)
    {
        AmountMST       amountMST = 0;
        SalesTable      salesTableLocal;
        ;

        salesTableLocal = this.getSalesTable(_salesTableRecId);

        amountMST = CurrencyExchangeHelper::amountCur2MST(salesTableLocal.amountRemainSalesPhysical(), SalesTableLocal.CurrencyCode);
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>amountRemainSalesPhysical</c> for every sales ID.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///    A record ID that is passed to the <c>getSalesTable</c> method to fetch the corresponding record and
    ///    calculate the <c>amountRemainSalesPhysical</c>.
    /// </param>
    /// <returns>
    ///    An <c>amountRemainSalesPhysical</c> value for every sales ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur  amountRemainSalesPhysical(RecId _salesTableRecId)
    {
        SalesLine       salesLine;
        AmountCur       amountCur = 0;

        SalesTable      salesTableLocal;
        ;

        salesTableLocal = this.getSalesTable(_salesTableRecId);

        while select salesLine
                index hint SalesLineIdx
                where salesLine.SalesId    == salesTableLocal.SalesId
        {
           amountCur += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the customer name.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///    A <c>recId</c> that is passed to the <c>getSalesTable</c> method to fetch the corresponding record
    ///    and get the customer name.
    /// </param>
    /// <returns>
    ///    The customer name of corresponding customer account that is related to every sales ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustName customerName(RecId _salesTableRecId)
    {
        ;
        return this.getSalesTable(_salesTableRecId).custTable_CustAccount().Name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sales table record when the corresponding record ID is passed.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///    The <c>recId</c> of the record to get.
    /// </param>
    /// <returns>
    ///    The <c>SalesTable</c> record for each record ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesTable getSalesTable(RecId  _salesTableRecId)
    {
        ;
        return SalesTable::findRecId(_salesTableRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
