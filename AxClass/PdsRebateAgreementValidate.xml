<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateAgreementValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsRebateAgreementValidate</c> class that serves to validate the rebate agreement to avoid quantity overlaps and invalid combinations of Units of measure.
/// </summary>
public class PdsRebateAgreementValidate extends RunBase
{
    RecId               recId;

    PdsRebateVerifier   verifier;
    NoYes               remove;
    NoYes               isAlreadyValidated;

    DialogField         fieldVerifier;
    DialogField         fieldRemove;

    PdsRebateAgreement  agreement;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        verifier,
        remove,
        recId,
        isAlreadyValidated
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog to be presented to the user.
    /// </summary>
    /// <returns>
    /// An object of the <c>DialogRunBase</c> Class.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        Object          fieldApproverControl;

        fieldVerifier = dialog.addFieldValue(extendedTypeStr(PdsRebateVerifier), verifier, "@PDS1418");
        fieldApproverControl = fieldVerifier.control();

        fieldApproverControl.registerOverrideMethod(identifierstr(LookupReference), methodstr(PdsRebateAgreementValidate, workerLookup), this);
        fieldApproverControl.replacementFieldGroup(identifierstr(PersonnelNumber));

        if (this.isAlreadyValidated())
        {
            fieldRemove = dialog.addFieldValue(extendedTypeStr(NoYesId), remove, "@PDS1431");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the dialog <c>Remove Validation</c> field values.
    /// </summary>
    /// <returns>
    /// Always return true.
    /// </returns>
    public boolean getFromDialog()
    {
        this.parmVerifier(fieldVerifier.value());

        if (fieldRemove)
        {
            remove = fieldRemove.value();
        }
        else
        {
            remove = NoYes::No;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean init()
    {
        boolean ret;
        ret = super();

        agreement = PdsRebateAgreement::find(recId);

        isAlreadyValidated = agreement.Validated;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks whether rebate agreement is already validated.
    /// </summary>
    /// <returns>
    /// true if already validated; otherwise, false.
    /// </returns>
    public boolean isAlreadyValidated()
    {
        return isAlreadyValidated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        verifier = HcmWorker::userId2Worker(curuserid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// Returns list of stored parameters.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set the record Id of the rebate agreement to Validate.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the rebate agreement to validate.
    /// </param>
    /// <returns>
    /// The record Id of the rebate agreement to validate.
    /// </returns>
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVerifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set the verifier of the rebate agreement to validate.
    /// </summary>
    /// <param name="_verifier">
    /// The verifier of the rebate agreement to validate.
    /// </param>
    /// <returns>
    /// The verifier of the rebate agreement to validate.
    /// </returns>
    public PdsRebateVerifier parmVerifier(PdsRebateVerifier _verifier = verifier)
    {
        verifier = _verifier;

        return verifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the selected rebate agreement and validates the rebate agreement.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid rebate agreement.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Validation canceled for invalid rebate agreement.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// update conflict is not recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// update conflict is present.
    /// </exception>
    public void run()
    {
        #OCCRetryCount
        PdsRebateAgreement  rebateAgreement;

        if (!this.validate())
        {
            throw error("@PDS1427");
        }

        try
        {
            ttsbegin;

            rebateAgreement = PdsRebateAgreement::find(recId, true);

            if (!remove
                && !rebateAgreement.validateWrite())
            {
               throw error("@PDS1427");
            }

            if (remove)
            {
                rebateAgreement.invalidateRebateAgreement(true);
            }
            else
            {
               rebateAgreement.Validated                    = true;
               rebateAgreement.Verifier                     = verifier;
               rebateAgreement.TAMCustRebateApprovalStatus  = TAMCustRebateApprovalStatus::Approved;

               rebateAgreement.update(false);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemove</Name>
				<Source><![CDATA[
    public void setRemove(NoYes _remove)
    {
        remove = _remove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restore the last parameters saved.
    /// </summary>
    /// <param name="packedClass">
    /// List of stored parameters.
    /// </param>
    /// <returns>
    /// Returns true if restore succeeded or failed.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate agreement is validated.
    /// </summary>
    /// <param name="_calledFrom">
    /// An object.
    /// </param>
    /// <returns>
    /// true if rebate agreement is validated; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!remove)
        {
            if (verifier)
            {
                ret = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany().validateWorker(verifier);
                if (!ret)
                {
                    error(strfmt("@SYS39817", HcmWorker::find(verifier).PersonnelNumber));
                }
            }
            else
            {
                ret = checkFailed("@SYS8980");
            }

            if (!agreement)
            {
                agreement = PdsRebateAgreement::find(recId);
            }

            if (ret && this.mustCheckAgreement())
            {
                ret = this.checkAgreement();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement</Name>
				<Source><![CDATA[
    private boolean checkAgreement()
    {
        boolean ret = true;

        ret = ret && agreement.checkIfLineExists();
        ret = ret && agreement.checkLineBreaks();
        ret = ret && agreement.checkUOMConvert();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the rebate agreement must be validated.
    /// </summary>
    /// <returns>
    ///     true if rebate agreement must be validated; otherwise, false.
    /// </returns>
    protected boolean mustCheckAgreement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for selecting a worker in the current legal entity.
    /// </summary>
    /// <param name="_callerControl">
    /// The control which called the method.
    /// </param>
    /// <returns>
    /// The selected record.
    /// </returns>
    public Common workerLookup(Object _callerControl)
    {
        return HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().lookupWorker(_callerControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed.
    /// </param>
    /// <returns>
    /// Returns instance.
    /// </returns>
    public static PdsRebateAgreementValidate construct(Args _args)
    {
        switch (_args.dataset())
        {
            case tablenum(PdsRebateAgreement):
                return PdsRebateAgreementValidate::newRebateAgreement(_args.record());

            case tablenum(PdsRebateAgreementLine):
                return PdsRebateAgreementValidate::newRebateAgreement((_args.record() as PdsRebateAgreementLine).pdsRebateAgreement());
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns class description.
    /// </summary>
    /// <returns>
    /// Class description.
    /// </returns>
    static public ClassDescription description()
    {
        return "@PDS1426";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed.
    /// </param>
    public static void main(Args _args)
    {
        PdsRebateAgreementValidate validate = PdsRebateAgreementValidate::construct(_args);
        if (validate == null)
        {
            throw error(strfmt("@SYS26273", classStr(PdsRebateAgreementValidate)));
        }

        if (validate.prompt())
        {
            validate.runOperation();

            if (_args.record() && FormDataUtil::getFormDataSource(_args.record()))
            {
                FormDataSource datasource = FormDataUtil::getFormDataSource(_args.record());
                datasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of <c>PdsRebateAgreementValidate</c> class and set the class parameters with the information of rebate agreement.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// The <c>PdsRebateAgreement</c> record for which validation occurs.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsRebateAgreementValidate</c> class.
    /// </returns>
    public static PdsRebateAgreementValidate newRebateAgreement(PdsRebateAgreement _rebateAgreement)
    {
        PdsRebateAgreementValidate validate = new PdsRebateAgreementValidate();

        validate.getLast();
        validate.parmRecId(_rebateAgreement.RecId);
        validate.init();

        return validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>