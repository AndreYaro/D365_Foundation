<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfRecycledBpConsumptionCalc_ProdReal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>PmfRecycledBpConsumptionCalc_ProdReal</c> is responsible for calculation of the recycled byporoduct
/// estimated consumption on parent production order.
/// </summary>
class PmfRecycledBpConsumptionCalc_ProdReal implements IPmfRecycledBpConsumptionCalc
{
    Qty         reducedQty,
                bomLineQty;
    ProdTable   prodTable;
    ProdBOM     prodBOM;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateQtyToRecycledBp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates quantity to a recycled byproduct.
    /// </summary>
    /// <param name="_qtyAlreadyAllocated">
    /// Quantity that has been already allocated.
    /// </param>
    /// <param name="_pmfProdCoBy">
    /// The recycled byproduct.
    /// </param>
    public void allocateQtyToRecycledBp(Qty _qtyAlreadyAllocated, PmfProdCoBy _pmfProdCoBy)
    {
        PmfCoByProdCalcTrans prodCalcTrans;
        InventTable inventTableChild;

        InventItemType  inventItemType;
        ItemCalcType    calcType;
        BOMCalcGroup    bomCalcGroup;
        Qty qty;
        CostGroupId costGroupId;
        InventItemPrice inventItemPrice;

        prodCalcTrans = PmfCoByProdCalcTrans::findIdRef(prodBOM.TableId, prodBOM.RecId, _pmfProdCoBy.RecId, true);

        // For std cost item, find the itemprice that needs to be applied
        inventTableChild    = prodBOM.inventTable();

        inventItemPrice = InventItemPrice::stdCostFindDate(inventTableChild, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), prodBOM.InventDimId);
        costGroupId = inventItemPrice.costGroupId();

        if (!prodCalcTrans.RecId)
        {
            inventItemType      = inventTableChild.inventItemType();
            calcType            = inventItemType.calculationType();
            bomCalcGroup        = inventTableChild.bomCalcGroup();

            prodCalcTrans.initFromProdTable(prodTable, calcType);
            prodCalcTrans.initFromProdBOM(prodBOM);

            prodCalcTrans.Production    = NoYes::No;
            prodCalcTrans.bom           = NoYes::No;

            prodCalcTrans.Resource          = prodBOM.ItemId;
            prodCalcTrans.UnitId            = inventTableChild.inventTableModuleInvent().UnitId;
            prodCalcTrans.OprId             = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(prodBOM.InventDimId);
            prodCalcTrans.InventDimId       = prodBOM.InventDimId;

            prodCalcTrans.CalcGroupId   = bomCalcGroup.CalcGroupId;
            prodCalcTrans.CostGroupId   = costGroupId;

            prodCalcTrans.LineNum       =  PmfCoByProdCalcTrans::lastLineNum(_pmfProdCoBy.RecId)+1;
            prodCalcTrans.PmfIdRefCoByRecId = _pmfProdCoBy.RecId;
        }

        qty = max(0,
                  min(bomLineQty,
                      this.findRafQty(_pmfProdCoBy) - _qtyAlreadyAllocated));

        prodCalcTrans.RealConsump    = qty;

        prodCalcTrans.RealCostAmount = qty == 0 ? 0 : inventItemPrice.pcsPrice() * qty;

        // Always update the costGroupId
        prodCalcTrans.CostGroupId    = costGroupId;

        prodCalcTrans.write();

        reducedQty = bomLineQty - qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        PmfProdCoBy pmfProdCoBy = this.findRecycledProdCoBy();
        Qty         qtyAlreadyAllocated;

        if (pmfProdCoBy)
        {
            qtyAlreadyAllocated = this.findAlreadyAllocatedQty(pmfProdCoBy);

            this.allocateQtyToRecycledBp(qtyAlreadyAllocated, pmfProdCoBy);
        }
        else
        {
            reducedQty = bomLineQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAlreadyAllocatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds quantity that has been already settled in the recycled byproduct calculation
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The recycled byproduct.
    /// </param>
    /// <returns>
    /// The settled quantity.
    /// </returns>
    public Qty findAlreadyAllocatedQty(PmfProdCoBy  _pmfProdCoBy)
    {
        PmfCoByProdCalcTrans    prodCalcTrans;

        select sum(RealConsump) from prodCalcTrans
        where prodCalcTrans.PmfIdRefCoByRecId == _pmfProdCoBy.RecId
           && prodCalcTrans.CollectRefLevel   == prodTable.CollectRefLevel + 1
           && prodCalcTrans.IdRefTableId      == tableNum(ProdBOM)
           && prodCalcTrans.IdRefRecId        != prodBOM.RecId;

        return prodCalcTrans.RealConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRafQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds received quantity of a recycled byproduct.
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The recycled byproduct.
    /// </param>
    /// <returns>
    /// The quantity received from the production process.
    /// </returns>
    public Qty findRafQty(PmfProdCoBy  _pmfProdCoBy)
    {
        InventTransIdSum    inventTransIdSum = _pmfProdCoBy.inventTransIdSum();

        inventTransIdSum.calcSum();

        if (prodTable.ProdStatus != ProdStatus::Completed)
        {
            return inventTransIdSum.received();
        }
        else
        {
            return inventTransIdSum.purchased();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecycledProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds corresponding recycled byproduct.
    /// </summary>
    /// <returns>
    /// The <c>PmfProdCoBy</c> record.
    /// </returns>
    public PmfProdCoBy findRecycledProdCoBy()
    {
        PmfProdCoBy                         pmfProdCoBy;
        InventDim                           inventDim;
        InventDimParm                       inventDimParm;

        inventDimParm.setAllProductDimensions();

        select firstonly pmfProdCoBy
        where pmfProdCoBy.ProdId        == this.parmProdTable().ProdId
          &&  pmfProdCoBy.ItemId        == this.parmProdBom().ItemId
          &&  pmfProdCoBy.ProductType   == PmfProductType::By_Product
          &&  pmfProdCoBy.BurdenType    == PmfBurdenType::Recycled
        #inventDimExistsJoin(pmfProdCoBy.inventDimId, inventDim, this.parmProdBom().inventDim(), inventDimParm);

        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedQty</Name>
				<Source><![CDATA[
    public Qty parmAllocatedQty()
    {
        return this.parmBomLineQty() - this.parmReducedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomLineQty</Name>
				<Source><![CDATA[
    public Qty parmBomLineQty(Qty _bomLineQty = bomLineQty)
    {
        bomLineQty = _bomLineQty;

        return bomLineQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBom</Name>
				<Source><![CDATA[
    public ProdBOM parmProdBom(ProdBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReducedQty</Name>
				<Source><![CDATA[
    public Qty parmReducedQty(Qty _reducedQty = reducedQty)
    {
        reducedQty = _reducedQty;

        return reducedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcTransForCostSheetCalc</Name>
				<Source><![CDATA[
    public void updateCalcTransForCostSheetCalc(BOMCalcTransMap  _bomCalcTransMap, Qty _seriesSize)
    {
        PmfCostAllocationPct    allocationPct;
        ProdCalcTrans           concreteProdCalcTrans;
        PmfProdCalcTransMap     inputPmfCoByProdCalcTransMap;
        PmfProdCalcTransMap     resultPmfCoByProdCalcTransMap;
        PmfCoByProdCalcTrans    recycledTrans;
        PmfProdCoBy             pmfProdCoBy;
        Common                  common = _bomCalcTransMap.data();

        inputPmfCoByProdCalcTransMap = common;

        select sum(RealConsump), sum(RealCostAmount) from recycledTrans
            where recycledTrans.IdRefRecId == inputPmfCoByProdCalcTransMap.IdRefRecId
               && recycledTrans.IdRefTableId == inputPmfCoByProdCalcTransMap.IdRefTableId
        exists join pmfProdCoBy
            where pmfProdCoBy.RecId             == recycledTrans.PmfIdRefCoByRecId
               && pmfProdCoBy.BurdenType        == PmfBurdenType::Recycled
               && pmfProdCoBy.ProductType       == PmfProductType::By_Product;

        switch (inputPmfCoByProdCalcTransMap.TableId)
        {
            case tableNum(PmfCoByProdCalcTrans):
                allocationPct = PmfProdCoBy::find(inputPmfCoByProdCalcTransMap.TransRefId, inputPmfCoByProdCalcTransMap.PmfIdRefCoByRecId).CostAllocationPct;
                break;

            case tableNum(ProdCalcTrans):
                concreteProdCalcTrans = inputPmfCoByProdCalcTransMap;
                allocationPct = concreteProdCalcTrans.prodTable_RU().pmfRemainCostAlloc();
                break;
            default:
                throw(error(Error::wrongUseOfFunction(funcName())));
        }

        resultPmfCoByProdCalcTransMap = inputPmfCoByProdCalcTransMap.data();

        resultPmfCoByProdCalcTransMap.RealConsump    += recycledTrans.RealConsump    * allocationPct / 100.00;
        resultPmfCoByProdCalcTransMap.RealCostAmount += recycledTrans.RealCostAmount * allocationPct / 100.00;

        _bomCalcTransMap.data(resultPmfCoByProdCalcTransMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfRecycledBpConsumptionCalc_ProdReal construct()
    {
        return new PmfRecycledBpConsumptionCalc_ProdReal();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>