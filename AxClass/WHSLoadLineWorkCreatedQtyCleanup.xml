<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineWorkCreatedQtyCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadLineWorkCreatedQtyCleanup</c> class resets the <c>WorkCreateQty</c> field on all <c>WHSLoadLine</c> records
/// for the provided Load Id to 0, assuming there is in fact no work lines behind.
/// </summary>
public class WHSLoadLineWorkCreatedQtyCleanup extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    protected WHSWaveId waveId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        waveId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@WAX:ResetWorkCreatedQtyLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkCreatedQtyForWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>WorkCreatedQty</c> field on the load lines for the specified wave to 0,
    /// if the corresponding work lines do not exist or are canceled.
    /// </summary>
    /// <returns>The number of load lines that were updated.</returns>
    protected int64 resetWorkCreatedQtyForWave()
    {
        int64 result = this.resetWorkCreatedQuantityWhenOnlyCanceledWorkLinesRemain();

        result += this.resetWorkCreatedQuantityWhenOnlyCanceledWorkHeadersRemain();
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkCreatedQuantityWhenOnlyCanceledWorkHeadersRemain</Name>
				<Source><![CDATA[
    private int64 resetWorkCreatedQuantityWhenOnlyCanceledWorkHeadersRemain()
    {
        WHSWaveLine waveLine;
        WHSLoadLine loadLine;
        WHSWorkLine workLine;
        WHSWorkTable workTable;

        update_recordset loadLine
            setting WorkCreatedQty = 0
                where loadLine.WorkCreatedQty > 0
                exists join waveLine
                    where waveLine.WaveId == waveId
                        && waveLine.LoadId == loadLine.LoadId
                exists join workLine
                    where workLine.LoadLineRefRecId == loadLine.RecId
                notexists join workTable
                    where workTable.WorkId == workLine.WorkId
                        && workTable.WorkStatus != WHSWorkStatus::Cancelled;

        return loadLine.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkCreatedQuantityWhenOnlyCanceledWorkLinesRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>WorkCreatedQty</c> field on the load lines for the specified wave to 0,
    /// if the corresponding work lines do not exist.
    /// </summary>
    /// <returns>The number of load lines that were updated.</returns>
    private int64 resetWorkCreatedQuantityWhenOnlyCanceledWorkLinesRemain()
    {
        WHSWaveLine waveLine;
        WHSLoadLine loadLine;
        WHSWorkLine workLine;

        update_recordset loadLine
            setting WorkCreatedQty = 0
                where loadLine.WorkCreatedQty > 0
                exists join waveLine
                    where waveLine.WaveId == waveId
                        && waveLine.LoadId == loadLine.LoadId
                notexists join workLine
                    where workLine.LoadLineRefRecId == loadLine.RecId
                        && workLine.WorkStatus != WHSWorkStatus::Cancelled;

        return loadLine.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            setPrefix(strFmt("@WAX:WaveIdPrefix", waveId));

            ttsbegin;

            int64 linesUpdated = this.resetWorkCreatedQtyForWave();
            if (linesUpdated > 0)
            {
                WHSWaveTable::resetWhenWorkIsRemoved(waveId);
            }

            ttscommit;

            info(strFmt("@WAX:LineUpdateCount", linesUpdated));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    public WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;
        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLoadLineWorkCreatedQtyCleanup construct()
    {
        return new WHSLoadLineWorkCreatedQtyCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveTable</Name>
				<Source><![CDATA[
    public static WHSLoadLineWorkCreatedQtyCleanup newFromWaveTable(WHSWaveTable _waveTable)
    {
        var cleanup = WHSLoadLineWorkCreatedQtyCleanup::construct();
        cleanup.waveId = _waveTable.WaveId;
        return cleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(WHSWaveTable))
        {
            throw error(Error::missingRecord(tablePName(WHSWaveTable)));
        }

        var cleanup = WHSLoadLineWorkCreatedQtyCleanup::newFromWaveTable(_args.record());

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cleanup))
        {
            cleanup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSLoadLineWorkCreatedQtyCleanup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSLoadLineWorkCreatedQtyCleanup);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>