<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTableType extends InventType
{
    ProdTable       prodTable;
    NumberSeq       numberSeqProdId;
    BOMSearch       bomSearch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    boolean canInventBeReserved()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventUpd_Estimated</c> object from the current record.
    /// </summary>
    /// <param name = "_childBuffer">
    ///    A record of any type that controls the current <c>ProdTable</c> record.
    /// </param>
    /// <returns>
    /// The <c>InventUpd_Estimated</c> object.
    /// </returns>
    public InventUpd_Estimated createEstimated(Common _childBuffer)
    {
        return InventUpd_Estimated::newProdTable(prodTable, _childBuffer, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create production order status change record.
    /// </summary>
    public void createProdStatusChange()
    {
        SIGProdStatusChange     prodStatusChange;
        ProdTable               prodTableOrig = prodTable.orig();

        if (prodTableOrig && isConfigurationkeyEnabled(configurationKeyNum(SIG)))
        {
            if (prodTableOrig.status().isBefore(ProdStatus::Released)
                && prodTable.status().isAfterOrEqualTo(ProdStatus::Released)
                && SIGReleaseProdTableProcedure::construct().signatureRequired())
            {
                prodStatusChange.initProdTable(prodTableOrig, prodTable.ProdStatus);
                prodStatusChange.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production order record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production order record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands the production bills of materials and route.
    /// </summary>
    public void expandBOMRoute()
    {
        this.updateCopying();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdId</Name>
				<Source><![CDATA[
    ProdId initProdId(boolean makeDecisionLater = true)
    {
        numberSeqProdId = ProdTable::numberSeqProdId(makeDecisionLater);

        ProdId prodId = numberSeqProdId.num();

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production order record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production order record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProdTable _prodTable)
    {
        prodTable = _prodTable;

        super(prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqProdId</Name>
				<Source><![CDATA[
    NumberSeq numberSeqProdId()
    {
        return numberSeqProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBOMSearchWithBOMCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes BOMSearch field.
    /// </summary>
    /// <remarks>
    /// As part of initialization it executes BOM circularity check.
    /// </remarks>
    public void initializeBOMSearchWithBOMCheck()
    {
        if (prodTable.bomId)
        {
            bomSearch = BOMSearch::newProdTable(prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCanSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the split option should be available for this production order.
    /// </summary>
    /// <returns>
    /// true if the split option should be shown; false if it should not be shown.
    /// </returns>
    /// <remarks>
    /// This determines if the split order option should be available to the user. The base
    /// implementation always returns true.
    /// </remarks>
    public boolean pmfCanSplit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodIdUsed</Name>
				<Source><![CDATA[
    void prodIdUsed()
    {
        if (numberSeqProdId)
            numberSeqProdId.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOMCalc</Name>
				<Source><![CDATA[
    void runBOMCalc(
        ProdParmBOMCalc     prodParmBOMCalc,
        RunbaseRecsMapable  _multi = null
        )
    {
        ProdUpdBOMCalc  prodUpdBOMCalc  = ProdUpdBOMCalc::newParmBuffer(prodParmBOMCalc);
        prodUpdBOMCalc.run();

        if (_multi)
            _multi.mergeRecs(prodUpdBOMCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostEstimation</Name>
				<Source><![CDATA[
    void runCostEstimation(
        ProdParmCostEstimation      prodParmCostEstimation,
        ProdPurch                   _prodPurch  = null,
        RunbaseRecsMapable          _multi      = null
        )
    {
        ProdUpdCostEstimation prodUpdCostEstimation = ProdUpdCostEstimation::newParmBuffer(prodParmCostEstimation,_prodPurch);
        prodUpdCostEstimation.run();

        if (_multi)
            _multi.mergeRecs(prodUpdCostEstimation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runHistoricalCost</Name>
				<Source><![CDATA[
    void runHistoricalCost(
        ProdParmHistoricalCost   prodParmHistoricalCost,
        RunbaseRecsMapable       _multi = null
        )
    {
        ProdUpdHistoricalCost prodUpdHistoricalCost = ProdUpdHistoricalCost::newParmBuffer(prodParmHistoricalCost);
        prodUpdHistoricalCost.run();

        if (_multi)
            _multi.mergeRecs(prodUpdHistoricalCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobScheduling</Name>
				<Source><![CDATA[
    void runJobScheduling(
        ProdParmScheduling      _prodParmScheduling,
        RunbaseRecsMapable      _multi = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler = null
        )
    {
        ProdUpdScheduling_Job prodUpdScheduling_Job = ProdUpdScheduling_Job::newParmBuffer(_prodParmScheduling);
        prodUpdScheduling_Job.parmWrkCtrScheduler(_wrkCtrScheduler);
        prodUpdScheduling_Job.run();

        if (_multi)
        {
            _multi.mergeRecs(prodUpdScheduling_Job);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobUpdate</Name>
				<Source><![CDATA[
    void runJobUpdate()
    {
        ProdJobUpdate prodJobUpdate = ProdJobUpdate::newProdId(prodTable.ProdId);
        prodJobUpdate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationScheduling</Name>
				<Source><![CDATA[
    void runOperationScheduling(
        ProdParmScheduling      _prodParmScheduling,
        RunbaseRecsMapable      _multi = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler = null
        )
    {
        ProdUpdScheduling_Operation prodUpdScheduling_Operation = ProdUpdScheduling_Operation::newParmBuffer(_prodParmScheduling);
        prodUpdScheduling_Operation.parmWrkCtrScheduler(_wrkCtrScheduler);
        prodUpdScheduling_Operation.run();

        if (_multi)
        {
            _multi.mergeRecs(prodUpdScheduling_Operation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRelease</Name>
				<Source><![CDATA[
    void runRelease(
        ProdParmRelease     prodParmRelease,
        RunbaseRecsMapable  _multi   = null
        )
    {
        ProdUpdRelease prodUpdRelease  = ProdUpdRelease::newParmBuffer(prodParmRelease);

        //SIG - start
        if (isConfigurationkeyEnabled(configurationKeyNum(SIG)))
        {
            SIGReleaseProdTableProcedure procedure = SIGReleaseProdTableProcedure::construct();
            if (procedure.signatureRequired())
            {
                procedure.initProdParmRelease(prodParmRelease);
                if (!procedure.sign())
                {
                    throw Exception::Error;
                }
            }
        }
        //SIG - end

        prodUpdRelease.run();

        if (_multi)
            _multi.mergeRecs(prodUpdRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReportFinished</Name>
				<Source><![CDATA[
    void runReportFinished(
        ProdParmReportFinished  prodParmReportFinished,
        RunbaseRecsMapable      _multi   = null
        )
    {
        ProdUpdReportFinished prodUpdReportFinished = ProdUpdReportFinished::newParmBuffer(prodParmReportFinished);
        prodUpdReportFinished.run();

        if (_multi)
            _multi.mergeRecs(prodUpdReportFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRouteUpdate</Name>
				<Source><![CDATA[
    void runRouteUpdate()
    {
        ProdRouteUpdate    prodRouteUpdate    = ProdRouteUpdate::newProdId(prodTable.ProdId);
        prodRouteUpdate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStartUp</Name>
				<Source><![CDATA[
    void runStartUp(
        ProdParmStartUp prodParmStartUp,
        RunbaseRecsMapable  _multi = null
        )
    {
        ProdUpdStartUp prodStartUp = ProdUpdStartUp::newParmBuffer(prodParmStartUp);
        prodStartUp.run();

        if (_multi)
            _multi.mergeRecs(prodStartUp );
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    void runStatusDecrease(
        ProdParmStatusDecrease prodParmStatusDecrease,
        RunbaseRecsMapable  _multi = null
        )
    {
        ProdUpdStatusDecrease prodUpdStatusDecrease = ProdUpdStatusDecrease::newParmBuffer(prodParmStatusDecrease);
        prodUpdStatusDecrease.run();

        if (_multi)
            _multi.mergeRecs(prodUpdStatusDecrease);

        if (! prodUpdStatusDecrease.isJobFinished())
            prodUpdStatusDecrease.prodTable().status().runStatusDecrease(prodParmStatusDecrease,false,_multi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackStatus</Name>
				<Source><![CDATA[
    void setBackStatus()
    {
        if (prodTable.RemainInventPhysical != 0)
            prodTable.BackorderStatus= ProdBackStatus::Receipt;
        else
            prodTable.BackorderStatus= ProdBackStatus::Completed;

        ProdBackStatus backStatus = ProdBOM::lowestRemainStatus(prodTable.ProdId);

        if (backStatus)
            prodTable.BackorderStatus= min(prodTable.BackorderStatus,backStatus);

        if (prodTable.BackorderStatus != ProdBackStatus::Release)
        {
            backStatus = ProdRoute::lowestRemainStatus(prodTable.ProdId);
            if (backStatus)
                prodTable.BackorderStatus= min(prodTable.BackorderStatus,backStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production order is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production order record has been updated.
    /// </summary>
    /// <param name="_prodTableOrig">
    /// The original production order which is updated.
    /// </param>
    public void updated(ProdTable _prodTableOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCopying</Name>
				<Source><![CDATA[
    protected void updateCopying()
    {
        if (prodTable.BOMId && !prodTable.SkipCreateBOMLines)
        {
            BOMSearch       searchBOM   = bomSearch ? bomSearch : BOMSearch::newProdTable(prodTable);
            BOMCopyFromBOM  copyFromBOM = BOMCopyFrom::construct(BOMCopyToProd::newProdTableType(prodTable), searchBOM);
            copyFromBOM.copy();
            PmfProdCoBy::createLines(prodTable);
        }

        if (prodTable.RouteId && !prodTable.SkipCreateRouteOperations)
        {
            RouteSearch_Config routeSearch     = RouteSearch_Config::newProdTable(prodTable);
            RouteCopyFromRoute routeCopyFrom   = RouteCopyFrom::construct(RouteCopyToProd::newProdTableType(prodTable), routeSearch);
            routeCopyFrom.copy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete_BR</Name>
				<Source><![CDATA[
    private boolean validateDelete_BR()
    {
        if (BrazilParameters::find().ProdEnableDeleteProdTable == NoYes::No)
        {
            ProdTableJour prodTableJour;

            select firstOnly RecId from prodTableJour
                where prodTableJour.ProdId == prodTable.ProdId;

            if (prodTableJour.RecId)
            {
                return checkFailed("@SpedFiscalBlockK:ProductionOrderDeleteValidation");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        ProdBOM          prodBOM;
        ProdRoute        prodRoute;

        if (!prodTable.validateDelete(true))
        {
            return false;
        }

        while select prodBOM
            where prodBOM.ProdId == prodTable.ProdId
        {
            if (!prodBOM.validateDelete())
            {
                return false;
            }
        }

        while select prodRoute
            where prodRoute.ProdId == prodTable.ProdId
        {
            if (!prodRoute.validateDelete())
                return false;
        }

        if (!InventQualityOrderTable::checkNoOpenQualityOrders(prodTable))
        {
            return false;
        }

        if (BrazilParameters::isEnabled())
        {
            if (!this.validateDelete_BR())
            {
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdTableInventRefTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the related table for the given <c>ProdTable</c> record.
    /// </summary>
    /// <param name = "_prodTable">The <c>ProdTable</c> record.</param>
    /// <param name = "_result">
    /// An <c>EventHandlerRejectResult</c> instance, where subscribers can respond with a rejection if the validation fails.
    /// </param>
    delegate void validateWriteProdTableInventRefTypeDelegate(ProdTable _prodTable, EventHandlerRejectResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdTableInventRefTypeDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscriber for validating the related table for the given <c>ProdTable</c>.
    /// </summary>
    /// <param name = "_prodTable">The instance of the <c>ProdTable</c>.</param>
    /// <param name = "_result">
    /// An <c>EventHandlerRejectResult</c> instance, where subscribers can respond with a rejection if the validation fails.
    /// </param>
    [SubscribesTo(classStr(ProdTableType), delegateStr(ProdTableType, validateWriteProdTableInventRefTypeDelegate))]
    public static void validateWriteProdTableInventRefTypeDelegateHandler(ProdTable _prodTable, EventHandlerRejectResult _result)
    {
        switch (_prodTable.InventRefType)
        {
            case InventRefType::ProdLine:
                if (! _prodTable.InventRefId || ! _prodTable.InventRefTransId)
                {
                    _result.checkFailed("@SYS19558");
                }

                ProdBOM prodBOM;

                select prodBOM
                    where prodBOM.InventTransId  == _prodTable.InventRefTransId;

                if (! _prodTable.checkRefProdBOM(prodBOM))
                {
                    _result.reject();
                }

                break;

            case InventRefType::Sales:
                if (! _prodTable.InventRefId || ! _prodTable.InventRefTransId)
                {
                    _result.checkFailed("@SYS19558");
                }

                SalesLine salesLine;

                select salesLine
                    where salesLine.InventTransId  == _prodTable.InventRefTransId;

                if (! _prodTable.checkRefSalesLine(salesLine))
                {
                    _result.reject();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        InventQtyMarked qtyCanBeMarked;
        str             warningTxt;

        ProdTable this_Orig = prodTable.orig();

        if (!prodTable.ItemId)
        {
            return checkFailed("@SYS16661");
        }

        if (WHSInventEnabled::exist(prodTable.ItemId) && !prodTable.inventDim().InventLocationId)
        {
            return checkFailed("@SYS85069");
        }

        InventTable inventTable = prodTable.inventTable();

        if (!inventTable.checkValid(prodTable.ItemId))
        {
            return false;
        }

        if (!inventTable.inventItemInventSetup(prodTable.InventDimId).checkNotStopped(true))
        {
            return false;
        }

        if (prodTable.ProdPostingType == ProdPostingType::ProdGroup && ! prodTable.ProdGroupId)
        {
            return checkFailed("@SYS28396");
        }

        if (inventTable.AutoReportFinished)
        {
            return checkFailed(strFmt("@SYS67732", inventTable.ItemId));
        }
        
        var eventHandlerResult = EventHandlerRejectResult::newDefault();
        this.validateWriteProdTableInventRefTypeDelegate(prodTable, eventHandlerResult);
        if (eventHandlerResult.isRejected())
        {
            return false;
        }

        if (!this.checkForApprovedVersions())
        {
            return false;
        }

        // if just created from references
        if (prodTable.InventRefType && !this_Orig)
        {
            [qtyCanBeMarked, warningTxt]  = prodTable.referenceInfoWhatCanBeMarked();
            Qty qtyRemain = prodTable.QtySched - qtyCanBeMarked;
            if (qtyRemain > 0)
            {
                if (Box::yesNo(warningTxt+'\n\n'+"@SYS60031",DialogButton::Yes) != DialogButton::Yes)
                {
                    return false;
                }
            }
        }

        return prodTable.validateWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdTableType construct(ProdTable _prodTable)
    {
        switch (_prodTable.ProdType)
        {
            case ProdType::Vendor :
                return new ProdTableType_Vendor(_prodTable);
            case ProdType::Process:
                return ProdTableType_Pmf::construct(_prodTable);

            default               :
                return new ProdTableType_Standard(_prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInhouseProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a production type is in house production.
    /// </summary>
    /// <param name="_prodType">
    /// The order type for which the production type should be determined.
    /// </param>
    /// <returns>
    /// true if the production type indicates in house production; otherwise, false.
    /// </returns>
    public static boolean isInhouseProduction(ProdType _prodType)
    {
        return (_prodType != ProdType::Vendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForApprovedVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the BOM and Route version approval.
    /// </summary>
    /// <returns>true if the validation is successful.</returns>
    private boolean checkForApprovedVersions()
    {
        return prodTable.RecId || (prodTable.checkBOMId() && prodTable.checkRouteId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>