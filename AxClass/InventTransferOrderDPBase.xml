<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrderDPBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferOrderDPBase</c> class provides base implementation of a data provider class for
/// transfer order reports.
/// </summary>
public class InventTransferOrderDPBase extends SrsReportDataProviderPreProcessTempDB
{
    protected boolean isTaxInTransferOrderEnabled = TaxIntegrationUtils::isTaxInTransferOrderEnabled();
    protected AmountCur shipmentTaxBaseAmount;
    protected AmountCur receiptTaxBaseAmount;
    protected AmountCur shipmentTaxAmount;
    protected AmountCur receiptTaxAmount;
    protected CurrencyCode shipmentCurrencyCode;
    protected CurrencyCode receiptCurrencyCode;
    protected TaxWriteCode taxWriteCode;
    protected LanguageTxtText exemptDescription;
    protected TaxRegistrationNumber fromRegistrationNumber;
    protected TaxRegistrationNumber toRegistrationNumber;
    protected boolean showLine;
    protected boolean showTaxTrans;
    protected boolean isNewJournalLine;
    protected Name taxCodeSource;
    protected Set taxCodeSet;
    protected Map taxCodeSetMap = new Map(Types::Container, Types::AnyType);
    protected Map registrationMap = new Map(Types::Int64, Types::Container);
    protected static LanguageId languageId = currentUserLanguage();
    protected str shipment = SysLabel::labelId2String(literalStr("@SYS50389"), languageId);
    protected str receipt = SysLabel::labelId2String(literalStr("@SYS77799"), languageId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTaxCodeSet</Name>
				<Source><![CDATA[
    protected void initTaxCodeSet()
    {
        taxCodeSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCodeSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes tax code set by journal level.
    /// </summary>
    /// <param name = "_inventTransferTableRecId">The <c>InventTransferTable</c> recid.</param>
    /// <param name = "_updateType">The update type status of transfer order.</param>
    protected void processTaxCodeSet(RecId _inventTransferTableRecId, InventTransferUpdateType _updateType)
    {
        if (taxCodeSetMap.exists([_inventTransferTableRecId, _updateType]))
        {
            taxCodeSet = taxCodeSetMap.lookup([_inventTransferTableRecId, _updateType]);
        }
        else
        {
            this.initTaxCodeSet();
            taxCodeSetMap.insert([_inventTransferTableRecId, _updateType], taxCodeSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleTaxTransRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the information of the tax trans record.
    /// </summary>
    /// <param name = "_taxSpec">The <c>TaxTransferOrderJournalSpec</c> object which contains tax trans information.</param>
    /// <param name = "_updateType">Invent transfer order update type.</param>
    protected void processSingleTaxTransRecord(TaxTransferOrderJournalSpec _taxSpec, InventTransferUpdateType _updateType)
    {
        if (!taxCodeSet.in(_taxSpec.taxCode()))
        {
            taxWriteCode = _taxSpec.taxWriteCode();
            exemptDescription = _taxSpec.taxExemptDescription();
            if (exemptDescription)
            {
                showTaxTrans = true;
            }
            else
            {
                showTaxTrans = false;
            }

            taxCodeSet.add(_taxSpec.taxCode());
        }

        if (_updateType == InventTransferUpdateType::Shipment)
        {
            if (isNewJournalLine)
            {
                shipmentTaxBaseAmount = _taxSpec.taxBaseAmount();
            }
            shipmentTaxAmount = _taxSpec.taxAmount();
            shipmentCurrencyCode = _taxSpec.currencyCode();
            taxCodeSource = shipment;
        }
        else if (_updateType == InventTransferUpdateType::Receive)
        {
            if (isNewJournalLine)
            {
                receiptTaxBaseAmount = _taxSpec.taxBaseAmount();
            }

            receiptTaxAmount = _taxSpec.taxDirection() != TaxDirection::UseTax ? _taxSpec.taxAmount() : 0;
            receiptCurrencyCode = _taxSpec.currencyCode();
            taxCodeSource = receipt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes registration number variables.
    /// </summary>
    /// <param name = "_inventTransferTableRecId">The <c>InventTransferTable</c> recid.</param>
    /// <param name = "_inventTransferJour">The <c>InventTransferJour</c> record.</param>
    protected void processRegistrationNumber(RecId _inventTransferTableRecId, InventTransferJour _inventTransferJour)
    {
        if (registrationMap.exists(_inventTransferTableRecId))
        {
            [fromRegistrationNumber, toRegistrationNumber] = registrationMap.lookup(_inventTransferTableRecId);
        }
        else
        {
            if (_inventTransferJour.UpdateType == InventTransferUpdateType::Shipment)
            {
                fromRegistrationNumber = TaxRegistration::find(_inventTransferJour.TaxID).RegistrationNumber;
                toRegistrationNumber = TaxRegistration::find(_inventTransferJour.PartyTaxID).RegistrationNumber;
            }
            else if (_inventTransferJour.UpdateType == InventTransferUpdateType::Receive)
            {
                fromRegistrationNumber = TaxRegistration::find(_inventTransferJour.PartyTaxID).RegistrationNumber;
                toRegistrationNumber = TaxRegistration::find(_inventTransferJour.TaxID).RegistrationNumber;
            }
            else
            {
                fromRegistrationNumber = '';
                toRegistrationNumber = '';
            }

            registrationMap.insert(_inventTransferTableRecId, [fromRegistrationNumber, toRegistrationNumber]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the header data.
    /// </summary>
    protected void initHeaderData()
    {
        fromRegistrationNumber = '';
        toRegistrationNumber = '';
        shipmentCurrencyCode = '';
        receiptCurrencyCode = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineAndTaxLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data from line and tax line.
    /// </summary>
    protected void initLineAndTaxLineData()
    {
        taxWriteCode = '';
        exemptDescription = '';
        taxCodeSource = '';
        showLine = false;
        showTaxTrans = false;
        shipmentTaxBaseAmount = 0;
        receiptTaxBaseAmount = 0;
        shipmentTaxAmount = 0;
        receiptTaxAmount = 0;
        isNewJournalLine = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>