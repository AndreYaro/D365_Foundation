<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconciliationHeaderDP</c> class is the report Data Provider class for the
///     <c>BankReconciliationHeader</c> SRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(BankReconciliationHeaderContract))
]
class BankReconciliationHeaderDP extends SrsReportDataProviderPreProcessTempDB
{
    BankReconciliationHeaderHeaderTmp   reconciliationHeaderTmp;
    BankReconciliationHeaderDetailsTmp  reconciliationDetailsTmp;

    BankReconciliationHeader            reconciliation;

    #macrolib.BankReconciliationConditions
       

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReconciliationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>BankReconciliationHeaderDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>BankReconciliationHeaderDetailsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(BankReconciliationHeaderDetailsTmp))
    ]
    public BankReconciliationHeaderDetailsTmp getReconciliationDetailsTmp()
    {
        select reconciliationDetailsTmp;
        return reconciliationDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReconciliationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>BankReconciliationHeaderHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>BankReconciliationHeaderHeaderTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(BankReconciliationHeaderHeaderTmp))
    ]
    public BankReconciliationHeaderHeaderTmp getReconciliationHeaderTmp()
    {
        select reconciliationHeaderTmp;
        return reconciliationHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts adjustment line.
    /// </summary>
    /// <param name="_reportEntry">
    /// The statement line.
    /// </param>
    /// <param name="_statement">
    /// The statement.
    /// </param>
    /// <param name="_partyIdentification">
    /// The trading party identification.
    /// </param>
    /// <param name="_isMatched">
    /// Whether the line is in match.
    /// </param>
    /// <param name="_matchingType">
    /// The matching type.
    /// </param>
    public void insertAdjustment(
        BankStmtISOReportEntry              _reportEntry,
        BankStmtISOAccountStatement         _statement,
        BankStmtISOPartyIdentification      _partyIdentification,
        NoYesId                             _isMatched,
        BankReconciliationMatchingType      _matchingType)
    {
        reconciliationDetailsTmp.clear();
        reconciliationDetailsTmp.BankTransType = _reportEntry.getTransactionType();
        reconciliationDetailsTmp.AmountCur = _reportEntry.getBankCurrencyAmount();
        reconciliationDetailsTmp.LineType = BankReconciliationReportType::Adjustment;
        reconciliationDetailsTmp.PassedWorksheets = _reportEntry.getPassedWorksheets(reconciliation.RecId);
        reconciliationDetailsTmp.PaymReference = _reportEntry.ReferenceNumber;
        reconciliationDetailsTmp.TransDate = _reportEntry.getBookingDate();
        reconciliationDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReconciliationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>BankReconciliationHeaderDetailsTmp</c> temporary table.
    /// </summary>
    private void insertReconciliationDetailsTmp()
    {
        this.tranverseAdjustment();

        this.tranverseDocument();

        this.tranverseStatement();

        this.documentCancelled();

        this.statementCancelled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankReconciliationUtility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankReconciliationUtility</c> class.
    /// </summary>
    /// <returns>A new <c>BankReconciliationUtility</c> instance.</returns>
    [SysObsolete('Method createBankReconciliationUtility is not used anymore.', false, 26\07\2021)]
	protected BankReconciliationUtility createBankReconciliationUtility()
    {
        return BankReconciliationUtility::construct(reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReconciliationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>BankReconciliationHeaderHeaderTmp</c> temporary table.
    /// </summary>
    private void insertReconciliationHeaderTmp()
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(reconciliation.AccountId);

        // data from previous reconciliation
        BankReconciliationHeader prevReconciliation = BankReconciliationHeader::findPrevReconciliation(reconciliation);

        reconciliationHeaderTmp.LastStatementEndingBalance = prevReconciliation.getStatementEndingBalance();
        reconciliationHeaderTmp.LastStatementUnreconciledAmount = prevReconciliation.getStatementUnreconciledTotal();
        reconciliationHeaderTmp.LastStatementEndingDate = prevReconciliation.getStatementEndingDateV2();
        reconciliationHeaderTmp.LastBankAccountEndingBalance = bankAccountTable.getBalanceByDate(prevReconciliation.CutOffDate);
        reconciliationHeaderTmp.LastBankAccountUnreconciledAmount = prevReconciliation.getDocumentUnreconciledTotal();

        // data from current reconciliation
        reconciliationHeaderTmp.StatementEndingBalance = reconciliation.getStatementEndingBalance();
        reconciliationHeaderTmp.StatementUnreconciledAmount = reconciliation.getStatementUnreconciledTotal();
        reconciliationHeaderTmp.StatementEndingDate = reconciliation.getStatementEndingDateV2();
        reconciliationHeaderTmp.BankAccountEndingBalance = bankAccountTable.getBalanceByDate(reconciliation.CutOffDate);
        reconciliationHeaderTmp.BankAccountUnreconciledAmount = reconciliation.getDocumentUnreconciledTotal();

        reconciliationHeaderTmp.BankAccountUnpostedAmount = reconciliation.getDocumentUnpostedTotal();
        reconciliationHeaderTmp.AdjustedAmount = reconciliation.getAdjustedStatementTotal();
        reconciliationHeaderTmp.UserName = DirPersonuser::userId2Name(curUserId());

        reconciliationHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUnreconciledDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts unreconciled bank documents.
    /// </summary>
    /// <param name="_documentView">
    /// The bank document view.
    /// </param>
    /// <param name="_isMatched">
    /// Whether it is matched.
    /// </param>
    public void insertUnreconciledDocument(BankDocumentTableView _documentView, NoYesId _isMatched)
    {
        if (!_isMatched)
        {
            BankDocument bankDocument = BankDocument::newFromDocumentView(_documentView);
            TransDate transDate = bankDocument.getTransactionDate();

            if (!(_documentView.DocumentType == BankDocumentBookType::Cheque
                    && transDate > reconciliation.CutOffDate))
            {
                reconciliationDetailsTmp.clear();
                reconciliationDetailsTmp.initFrom(bankDocument, _documentView, reconciliation.RecId);
                reconciliationDetailsTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUnreconciledStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts unreconciled statements.
    /// </summary>
    /// <param name="_reportEntry">
    /// The statement line.
    /// </param>
    /// <param name="_statement">
    /// The bank statement.
    /// </param>
    /// <param name="_partyIdentification">
    /// The trading party identification.
    /// </param>
    /// <param name="_isMatched">
    /// Whether it is matched.
    /// </param>
    /// <param name="_matchingType">
    /// The matching type.
    /// </param>
    public void insertUnreconciledStatement(
        BankStmtISOReportEntry              _reportEntry,
        BankStmtISOAccountStatement         _statement,
        BankStmtISOPartyIdentification      _partyIdentification,
        NoYesId                             _isMatched,
        BankReconciliationMatchingType      _matchingType)
    {
        if (!_isMatched)
        {
            reconciliationDetailsTmp.clear();
            reconciliationDetailsTmp.BankTransType = _reportEntry.getTransactionType();
            reconciliationDetailsTmp.AmountCur = _reportEntry.getBankCurrencyAmount();
            reconciliationDetailsTmp.LineType = BankReconciliationReportType::BankStatementUnreconciled;
            reconciliationDetailsTmp.PassedWorksheets = _reportEntry.getPassedWorksheets(reconciliation.RecId);
            reconciliationDetailsTmp.PaymReference = _reportEntry.ReferenceNumber;
            reconciliationDetailsTmp.TransDate = _reportEntry.getBookingDate();
            reconciliationDetailsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>BankReconciliationHeader</c> report.
    /// </remarks>
    public void processReport()
    {
        BankReconciliationHeaderContract    contract = this.parmDataContract();
        BankReconciliationId                reconciliationId;

        reconciliationId = contract.parmReconciliationId();
        reconciliation = BankReconciliationHeader::findByReconciliationId(reconciliationId);
        reconciliationHeaderTmp.setConnection(this.parmUserConnection());
        reconciliationDetailsTmp.setConnection(this.parmUserConnection());

        if (reconciliation)
        {
            this.insertReconciliationHeaderTmp();
            this.insertReconciliationDetailsTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tranverses the adjustment of the reconciliation.
    /// </summary>
    private void tranverseAdjustment()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankStmtISOReportEntry              reportEntry;
        BankStmtISOAccountStatement         statement;
        BankStmtISOPartyIdentification      partyIdentification;
        BankReconciliationMatchingItemView  matchingItemView;

        if (reconciliation.IsReconciled())
        {
            while select * from reportEntry
                where reportEntry.IsNewBankDocument
            join Identification from statement
                where reportEntry.BankStmtISOAccountStatement == statement.RecId
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            #StatementLineInReconciliationHistory(openedItem, reportEntry, reconciliation)
            {
                this.insertAdjustment(reportEntry, statement, partyIdentification, matchingItemView.RecId != 0, matchingItemView.BankReconciliationMatchingType);
            }
        }
        else
        {
            TransDateTime cutoffDateTime = reconciliation.getCutOffDateTime();

            while select * from reportEntry
                #StatementLineForReconcile(reportEntry, cutoffDateTime, statement, reconciliation)
            && reportEntry.IsNewBankDocument
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            {
                this.insertAdjustment(reportEntry, statement, partyIdentification, matchingItemView.RecId != 0, matchingItemView.BankReconciliationMatchingType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tranverses the document of the reconciliation.
    /// </summary>
    private void tranverseDocument()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankDocumentTableView               documentView;
        BankReconciliationMatchingItemView  matchingItemView;
        BankAccountTrans                    locBankAccountTrans;

        if (reconciliation.IsReconciled())
        {
            while select * from documentView
                outer join RecId from matchingItemView
                    where documentView.BankDocumentTableRecId == matchingItemView.BankDocumentTable
                        && matchingItemView.BankReconciliationHeader == reconciliation.RecId
                exists join openedItem
                    where documentView.BankDocumentTableRecId == openedItem.BankDocumentTable
                        && openedItem.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledDocument(documentView, matchingItemView.RecId != 0);
            }
        }
        else
        {
            while select * from documentView
                where documentView.IsReconciled == NoYes::No
                    && documentView.AccountId   == reconciliation.AccountId
                    && documentView.DocumentDate <= reconciliation.CutoffDate
                outer join RecId from matchingItemView
                    where documentView.BankDocumentTableRecId == matchingItemView.BankDocumentTable
                        && matchingItemView.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledDocument(documentView, matchingItemView.RecId != 0);
            }

            while select * from documentView
                where documentView.IsReconciled == NoYes::Yes
                    && documentView.DocumentType == BankDocumentBookType::Cheque
                    && documentView.AccountId   == reconciliation.AccountId
                    && documentView.DocumentDate <= reconciliation.CutoffDate
                    && documentView.Cancelled   == NoYes::Yes
                    && documentView.SourceRelationType == tableNum(BankChequeTable)
                outer join RecId from matchingItemView
                    where documentView.BankDocumentTableRecId == matchingItemView.BankDocumentTable
                        && matchingItemView.BankReconciliationHeader == reconciliation.RecId
                exists join locBankAccountTrans
                    where locBankAccountTrans.SourceTableId == documentView.SourceRelationType
                        && locBankAccountTrans.SourceRecId == documentView.SourceRecId
                        && locBankAccountTrans.Cancel == NoYes::Yes
                        && locBankAccountTrans.TransDate > reconciliation.CutoffDate
            {
                this.insertUnreconciledDocument(documentView, matchingItemView.RecId != 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranverseStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tranverses the statement of the reconciliation.
    /// </summary>
    private void tranverseStatement()
    {
        BankReconciliationHistoryDetails    openedItem;
        BankStmtISOReportEntry              reportEntry;
        BankStmtISOAccountStatement         statement;
        BankStmtISOPartyIdentification      partyIdentification;
        BankReconciliationMatchingItemView  matchingItemView;

        if (reconciliation.IsReconciled())
        {
            while select * from reportEntry
            join Identification from statement
                where reportEntry.BankStmtISOAccountStatement == statement.RecId
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            #StatementLineInReconciliationHistory(openedItem, reportEntry, reconciliation)
            {
                this.insertUnreconciledStatement(reportEntry, statement, partyIdentification, matchingItemView.RecId != 0, matchingItemView.BankReconciliationMatchingType);
            }
        }
        else
        {
            TransDateTime cutoffDateTime = reconciliation.getCutOffDateTime();
            
            while select * from reportEntry
            #StatementLineForReconcile(reportEntry, cutoffDateTime, statement, reconciliation)
            outer join Name from partyIdentification
                where reportEntry.TradingParty == partyIdentification.RecId
            #IsStatementLineMatched(matchingItemView, reportEntry, reconciliation)
            {
                this.insertUnreconciledStatement(reportEntry, statement, partyIdentification, matchingItemView.RecId != 0, matchingItemView.BankReconciliationMatchingType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentCancelled</Name>
				<Source><![CDATA[
    private void documentCancelled()
    {
        BankReconciliationMatchingItemView matchingItemViewCancelled;
        BankReconciliationMatchingItemView matchingItemViewReconciled;
        BankReconciliationHeader headerCancelled;
        BankReconciliationHeader headerReconciled;
        BankDocumentTableView documentView;
        BankReconciliationHistoryDetails historyDetails;

        if (reconciliation.IsReconciled())
        {
            while select documentView
                where documentView.AccountId == reconciliation.AccountId
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankDocumentTable == documentView.BankDocumentTableRecId
                        && matchingItemViewCancelled.BankReconciliationHeader == reconciliation.RecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
            {
                this.insertUnreconciledDocument(documentView, NoYes::No);
            }

            while select documentView
                where documentView.AccountId == reconciliation.AccountId
                    && documentView.IsReconciled == NoYes::No
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankDocumentTable == documentView.BankDocumentTableRecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
                exists join headerCancelled
                    where headerCancelled.RecId == matchingItemViewCancelled.BankReconciliationHeader
                        && headerCancelled.CutOffDate <= reconciliation.CutOffDate
                        && headerCancelled.RecId < reconciliation.RecId
                notexists join historyDetails
                    where historyDetails.BankDocumentTable == documentView.BankDocumentTableRecId
                        && historyDetails.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledDocument(documentView, NoYes::No);
            }

            while select documentView
                where documentView.AccountId == reconciliation.AccountId
                    && documentView.IsReconciled == NoYes::Yes
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankDocumentTable == documentView.BankDocumentTableRecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
                exists join headerCancelled
                    where headerCancelled.RecId == matchingItemViewCancelled.BankReconciliationHeader
                        && headerCancelled.CutOffDate <= reconciliation.CutOffDate
                        && headerCancelled.RecId < reconciliation.RecId
                exists join matchingItemViewReconciled
                    where matchingItemViewReconciled.BankDocumentTable == documentView.BankDocumentTableRecId
                        && matchingItemViewReconciled.Cancelled == NoYes::No
                exists join headerReconciled
                    where headerReconciled.RecId == matchingItemViewReconciled.BankReconciliationHeader
                        && headerReconciled.CutOffDate >= reconciliation.CutOffDate
                        && headerReconciled.RecId > reconciliation.RecId
                        && headerReconciled.IsReconciled == NoYes::Yes
                notexists join historyDetails
                    where historyDetails.BankDocumentTable == documentView.BankDocumentTableRecId
                        && historyDetails.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledDocument(documentView, NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementCancelled</Name>
				<Source><![CDATA[
    private void statementCancelled()
    {
        BankReconciliationMatchingItemView matchingItemViewCancelled;
        BankReconciliationMatchingItemView matchingItemViewReconciled;
        BankReconciliationHeader headerCancelled;
        BankReconciliationHeader headerReconciled;
        BankStmtISOReportEntry reportEntry;
        BankStmtISOAccountStatement statement;
        BankStmtISOPartyIdentification partyIdentification;
        BankReconciliationHistoryDetails historyDetails;

        if (reconciliation.IsReconciled())
        {
            while select reportEntry
                join Identification from statement
                    where reportEntry.BankStmtISOAccountStatement == statement.RecId
                        && statement.BankAccountTable == reconciliation.AccountId
                outer join Name from partyIdentification
                    where reportEntry.TradingParty == partyIdentification.RecId
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankStmtISOReportEntry == reportEntry.RecId
                        && matchingItemViewCancelled.BankReconciliationHeader == reconciliation.RecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
            {
                this.insertUnreconciledStatement(reportEntry, statement, partyIdentification, NoYes::No, matchingItemViewCancelled.BankReconciliationMatchingType);
            }

            while select reportEntry
                where reportEntry.Reconciled == NoYes::No
                join Identification from statement
                    where reportEntry.BankStmtISOAccountStatement == statement.RecId
                        && statement.BankAccountTable == reconciliation.AccountId
                outer join Name from partyIdentification
                    where reportEntry.TradingParty == partyIdentification.RecId
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankStmtISOReportEntry == reportEntry.RecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
                exists join headerCancelled
                    where headerCancelled.RecId == matchingItemViewCancelled.BankReconciliationHeader
                        && headerCancelled.CutOffDate <= reconciliation.CutOffDate
                        && headerCancelled.RecId < reconciliation.RecId
                notexists join historyDetails
                    where historyDetails.BankStmtISOReportEntry == reportEntry.RecId
                        && historyDetails.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledStatement(reportEntry, statement, partyIdentification, NoYes::No, matchingItemViewCancelled.BankReconciliationMatchingType);
            }

            while select reportEntry
                where reportEntry.Reconciled == NoYes::Yes
                join Identification from statement
                    where reportEntry.BankStmtISOAccountStatement == statement.RecId
                        && statement.BankAccountTable == reconciliation.AccountId
                outer join Name from partyIdentification
                    where reportEntry.TradingParty == partyIdentification.RecId
                exists join matchingItemViewCancelled
                    where matchingItemViewCancelled.BankStmtISOReportEntry == reportEntry.RecId
                        && matchingItemViewCancelled.Cancelled == NoYes::Yes
                exists join headerCancelled
                    where headerCancelled.RecId == matchingItemViewCancelled.BankReconciliationHeader
                        && headerCancelled.CutOffDate <= reconciliation.CutOffDate
                        && headerCancelled.RecId < reconciliation.RecId
                exists join matchingItemViewReconciled
                    where matchingItemViewReconciled.BankStmtISOReportEntry == reportEntry.RecId
                        && matchingItemViewReconciled.Cancelled == NoYes::No
                exists join headerReconciled
                    where headerReconciled.RecId == matchingItemViewReconciled.BankReconciliationHeader
                        && headerReconciled.CutOffDate >= reconciliation.CutOffDate
                        && headerReconciled.RecId > reconciliation.RecId
                        && headerReconciled.IsReconciled == NoYes::Yes
                notexists join historyDetails
                    where historyDetails.BankStmtISOReportEntry == reportEntry.RecId
                        && historyDetails.BankReconciliationHeader == reconciliation.RecId
            {
                this.insertUnreconciledStatement(reportEntry, statement, partyIdentification, NoYes::No, matchingItemViewCancelled.BankReconciliationMatchingType);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>