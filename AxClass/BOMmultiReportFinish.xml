<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BoMmultiReportFinish</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BoMmultiReportFinish extends RunBaseMultiParm implements JournalRunbaseCallbackable, BatchRetryable
{
    BOMParmReportFinish standardBOMparmReportFinish;

    // Packed variables
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        standardBOMparmReportFinish
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _inventTable)
    {
        InventTable tmpInventTable = _inventTable as InventTable;
        if (! tmpInventTable.inventItemType().canBeProduced())
        {
            warning(strfmt("@SYS78162",tmpInventTable.ItemType));
            return false;
        }

        if (PdsGlobal::pdsIsCWItem(tmpInventTable.ItemId))
        {
            return checkFailed(strfmt("@PDS95",tmpInventTable.ItemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        BOMParmReportFinish bomParmReportFinish;
        int                 qty;

        boolean ret = super(_calledFrom);

        while select bomParmReportFinish
            group by PostNow
            where bomParmReportFinish.ParmId == parmId
        {
            qty+=1;
        }

        if (qty == 2)
            ret = checkFailed("@SYS79155");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    void cleanupDialog()
    {
        BOMParmReportFinish::deleteParameters(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        BOMParmReportFinish bomParmReportFinish;

        return bomParmReportFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCallerRecord</Name>
				<Source><![CDATA[
    protected void findCallerRecord()
    {
        InventTable     inventTable = InventTable::find(standardBOMparmReportFinish.ItemId);
        this.addUpdateRec(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    formName formName()
    {
        return formstr(BOMReportFinish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalId</Name>
				<Source><![CDATA[
    void initJournalId(BOMParmReportFinish _bomParmReportFinish)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer     _bomParmReportFinish)
    {
        BOMParmReportFinish saveBOMparmReportFinish;
        BOMParmReportFinish bomParmReportFinish = _bomParmReportFinish;
        saveBOMparmReportFinish.data(bomParmReportFinish);
        bomParmReportFinish.data(standardBOMparmReportFinish);

        bomParmReportFinish.ParmId      = saveBOMparmReportFinish.ParmId;
        bomParmReportFinish.RecId       = saveBOMparmReportFinish.RecId;
        bomParmReportFinish.LineNum     = saveBOMparmReportFinish.LineNum;
        bomParmReportFinish.ItemId      = saveBOMparmReportFinish.ItemId;
        bomParmReportFinish.setInventDimId(saveBOMparmReportFinish.InventDimId);
        bomParmReportFinish.bomId       = saveBOMparmReportFinish.bomId;
        bomParmReportFinish.Qty         = saveBOMparmReportFinish.Qty;
        bomParmReportFinish.Height      = saveBOMparmReportFinish.Height;
        bomParmReportFinish.Width       = saveBOMparmReportFinish.Width;
        bomParmReportFinish.Density     = saveBOMparmReportFinish.Density;
        bomParmReportFinish.Depth       = saveBOMparmReportFinish.Depth;
        bomParmReportFinish.JournalId   = saveBOMparmReportFinish.JournalId;

        bomParmReportFinish.TransDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common             _inventTable,
        ParmBuffer     _bomParmReportFinish
        )
    {
        InventTable inventTable = _inventTable as InventTable;
        BOMParmReportFinish bomParmReportFinish = _bomParmReportFinish;
        super(_inventTable,_bomParmReportFinish);

        this.initJournalId(bomParmReportFinish);

        bomParmReportFinish.initFromInventTable(inventTable);
        bomParmReportFinish.Info        = true;
        bomParmReportFinish.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return BOMParmReportFinish::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether the dialog system should be used for dialogs or if the system should be the form
    ///    that is created in the <c>dialog</c> method.
    /// </summary>
    /// <returns>
    ///    true if the dialog system should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When you use the dialog system a batch tab page is added to the form.
    /// </remarks>
    boolean mustUseDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfTransferLines</Name>
				<Source><![CDATA[
    Integer numOfTransferLines()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packResult</Name>
				<Source><![CDATA[
    public container packResult()
    {
        return [this.numOfTransferLines(),
                this.transferJournalId(),
                false,
                false,
                false,
                conNull(),
                conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _bomParmReportFinish = standardBOMparmReportFinish)
    {
        standardBOMparmReportFinish = _bomParmReportFinish;

        return standardBOMparmReportFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalPerBOMParm</Name>
				<Source><![CDATA[
    boolean postJournalPerBOMParm()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        Query query = new Query(querystr(BOMmultiSelectReportedFinish));
        QueryBuildDataSource inventTableQBDS = query.dataSourceName(tablestr(InventTable));
        Debug::assert(inventTableQBDS != null);

        InventInventoriedPolicy::addInventoriedRangeToInventTable(inventTableQBDS);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        BOMParmReportFinish     bomParmReportFinish;

        if (! this.validate())
            throw error("@SYS18447");

        select bomParmReportFinish
            index ParmLineNumIdx
            where bomParmReportFinish.ParmId  == parmId;

        while (bomParmReportFinish)
        {
            try
            {
                BOMReportFinish bomReportFinish = this.constructBOMReportFinish(bomParmReportFinish);
                bomReportFinish.run();
                if (this.isInBatch())
                {
                    bomReportFinish.journalTableData().updateBlock(JournalBlockLevel::System,JournalBlockLevel::None);
                }

                this.findCallerRecord();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
            next bomParmReportFinish;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBOMReportFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BOMReportFinish</c> class.
    /// </summary>
    /// <param name="_bomParmReportFinish">
    ///    A record of <c>BOMParmReportFinish</c> type.
    /// </param>
    /// <returns>
    /// An instance of the <c>BOMReportFinish</c> class.
    /// </returns>
    protected BOMReportFinish constructBOMReportFinish(BOMParmReportFinish _bomParmReportFinish)
    {
        return BOMReportFinish::newParmBuffer(_bomParmReportFinish, this.postJournalPerBOMParm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalId</Name>
				<Source><![CDATA[
    JournalId transferJournalId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMmultiReportFinish construct(Args   _args)
    {
        BOMmultiReportFinish    boMmultiReportFinish;

        switch (_args.dataset())
        {
            case tablenum(InventTable):
                boMmultiReportFinish = new BOMmultiReportFinish();
                break;
            case tablenum(InventJournalTrans):
                boMmultiReportFinish = new BOMmultiReportFinish_Journal();
                break;
            default:
                boMmultiReportFinish = new BOMmultiReportFinish();
        }

        return boMmultiReportFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS26441";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMmultiReportFinish            boMmultiReportFinish;
        Object                          formInventJournalTrans;
        JournalForm                     journalForm;
        JournalFormTrans                journalFormTrans;
        JournalFormTable                journalFormTable;
        FormDataSource                  formDataSource;
        BOMmultiReportFinish_Journal    boMmultiReportFinish_Journal;

        if (_args.parmEnum() == RunChoose::Run)
        {
            switch (_args.dataset())
            {
                case tablenum(InventTable):
                    boMmultiReportFinish = BOMmultiReportFinish::newInventTable(_args);
                    break;
                case tablenum(InventJournalTrans):
                    if (_args.caller() && _args.caller().name() == formstr(InventJournalBOM))
                    {
                        formInventJournalTrans = _args.caller();
                        journalForm   = JournalForm::fromArgs(_args);
                    }
                    boMmultiReportFinish = BOMmultiReportFinish_Journal::newInventJournalTrans(_args);
                    break;
                default:
                    boMmultiReportFinish = BOMmultiReportFinish::construct(_args);
                    boMmultiReportFinish.getLast();
                    boMmultiReportFinish.initParmId();
                    break;
            }

            if (journalForm)
            {
                journalForm.runbaseMainStart();
            }

            if (! boMmultiReportFinish.prompt())
            {
                if (journalForm && ! boMmultiReportFinish.batchInfo().parmBatchExecute())
                {
                    boMmultiReportFinish_Journal = boMmultiReportFinish as BOMmultiReportFinish_Journal;
                    if (boMmultiReportFinish_Journal)
                    {
                        journalForm.runbaseMainCancel(boMmultiReportFinish_Journal.journalId());
                    }
                }
                return;
            }

            try
            {
                boMmultiReportFinish.runOnServer();

                if (journalForm)
                {
                    journalForm.runbaseMainEnd(boMmultiReportFinish,false);
                }

                if (formInventJournalTrans && formInventJournalTrans.journalForm())
                {
                    journalFormTrans = formInventJournalTrans.journalForm();
                    if (journalFormTrans.getJournalFormTable())
                    {
                        journalFormTable = journalFormTrans.getJournalFormTable();
                        formDataSource = journalFormTable.journalTable_DS();
                        if (formDataSource)
                        {
                            formDataSource.reread();
                            formDataSource.refresh();
                            formDataSource.active();
                        }
                    }
                    else
                    {
                        formDataSource = journalFormTrans.journalTrans_DS();
                        if (formDataSource)
                        {
                            formDataSource.executeQuery();
                        }
                    }
                }
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(boMmultiReportFinish,true);
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
    static BOMmultiReportFinish newInventTable(Args _args)
    {
        BOMmultiReportFinish    boMmultiReportFinish;

        boMmultiReportFinish    = BOMmultiReportFinish::construct(_args);

        RunBaseMultiParm::initFromForm(boMmultiReportFinish,_args);

        return boMmultiReportFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>