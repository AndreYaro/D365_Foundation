<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLineSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementLineSourceDocLineItem</c> class is the source document line item for statement line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_BankStatement), SourceDocumentLine_BankStatement::BankStatementLine)]
class BankStatementLineSourceDocLineItem extends SourceDocumentLineItem
implements SourceDocumentLineItemIBankStatement, AccountingFinTagIDistributionTaggable
{
    BankStmtISOReportEntry statementLine;
    BankStatementLineBankDocumentInformation statementLineDocumentInformation;

    #BankStatementSourceDocument
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return statementLineDocumentInformation.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates legal entity RecId.
    /// </summary>
    /// <returns>
    /// The instance of the <c>LegalEntityRecId</c> class.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        boolean includesTax = true;

        // Create map
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        if (statementLine.IsNewBankDocument)
        {
            AmountCur amountCurIncludeTax = statementLine.getBankCurrencyAmount();

            AmountCur amountCurExcludeTax = abs(amountCurIncludeTax)
                - abs(TaxUncommitted::getActualTaxAmountForSourceLineWithCompany(
                    statementLine.TableId,
                    statementLine.RecId,
                    includesTax,
                    true));

            SourceDocumentAmount statementAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(),
                amountCurExcludeTax,
                MonetaryAmount::StatementAmount,
                includesTax);

            if (statementAmount.parmAmount())
            {
                sourceDocumentAmountMap.insert(statementAmount);
            }
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumnum(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        statementLine = _sourceDocumentLineImplementation;

        if (_additionalInformation && _additionalInformation.exists(tableNum(BankStatementLineBankDocumentInformation)))
        {
            statementLineDocumentInformation = _additionalInformation.lookup(tableNum(BankStatementLineBankDocumentInformation));
        }
        else
        {
            statementLineDocumentInformation = BankStatementLineBankDocumentInformation::findByReportEntry(statementLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDate accountingDate;

        if (statementLine.isPosted()
            || (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()) && statementLine.AccountingDate)
            || (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()) && statementLine.AccountingDate))
        {
            accountingDate = statementLine.AccountingDate;
        }
        else
        {
            accountingDate = this.parmSourceDocument().parmAccountingDate();
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankTransactionCode</Name>
				<Source><![CDATA[
    public BankStatementTransactionCode parmBankTransactionCode()
    {
        return statementLine.ProprietaryBankTransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return statementLineDocumentInformation.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        return statementLineDocumentInformation.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineOrderByValue</Name>
				<Source><![CDATA[
    public container parmLineOrderByValue()
    {
        return [#StatementAmountOrder];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return statementLine.getBankCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementLine</Name>
				<Source><![CDATA[
    internal BankStmtISOReportEntry getStatementLine()
    {
        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasMatchedAccountingDistribution</Name>
				<Source><![CDATA[
    public boolean parmHasMatchedAccountingDistribution()
    {
        return super() || statementLine.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTagsToAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies financial tags to a list of allocations for the current source document line.
    /// </summary>
    /// <param name = "_allocations">The list of allocations.</param>
    /// <returns>The list of allocations with financial tags applied.</returns>
    [Hookable(false)]
    public LedgerDimensionAllocationList applyTagsToAllocations(LedgerDimensionAllocationList _allocations)
    {
        LedgerDimensionAllocationListEnumerator ledgerDimensionAllocationListEnumerator = _allocations.getEnumerator();
        LedgerDimensionAllocationList returnList = LedgerDimensionAllocationList::construct();

        while (ledgerDimensionAllocationListEnumerator.moveNext())
        {
            LedgerDimensionAllocation currentItem = ledgerDimensionAllocationListEnumerator.current();
            currentItem.parmFinTag(statementLineDocumentInformation.FinTag);
            returnList.addEnd(currentItem);
        }

        return returnList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>