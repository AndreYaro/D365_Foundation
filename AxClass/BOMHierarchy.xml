<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomHierarchy
{
    #BOM

    BOMRouteVersionSelectAll    versionSelect;
    boolean                     searchInterval;     // Search interval in general
    boolean                     searchIntervalBOM;  // Works for BOMÂ´s
    boolean                     warningIfMaxLevel;
    boolean                     onlyApproved;

    Level                       maxLevels;
    Level                       presLevel;
    boolean                     selectConfig;
    boolean                     filterOnSiteId;
    boolean                     filterOnConfigId;

    RecordSortedList            boMupKeyList;       // List of parms to select BOm
    boolean                     boMupStop;          // Stop searching up, if same select parms is meet.

    InventDim                   inventDimCriteria;
    InventDimParm               inventDimCriteriaParm;

    BOM         parentBom;
    BOMVersion  parentBomVersion;
    guid        parentBOMIdentifier;
    guid        parentBOMVersionIdentifier;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomConsistOf</Name>
				<Source><![CDATA[
    public boolean bomConsistOf(
        BOMId           _bomId,
        Level           _maxLevels  = 0,
        TransDate       _fromDate   = dateNull(),
        TransDate       _toDate     = dateMax()
        )
    {
        if (!BOMTable::checkExist(_bomId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        presLevel = 0;
        this.setMaxLevels(_maxLevels);

        return this.searchDownBOM(_bomId,'','',_fromDate,_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomPartOf</Name>
				<Source><![CDATA[
    public boolean bomPartOf(
        BOMId           _bomId,
        Level           _maxLevels  = 0,
        TransDate       _fromDate   = dateNull(),
        TransDate       _toDate     = dateMax()
        )
    {
        if (!BOMTable::checkExist(_bomId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        presLevel = 0;
        this.setMaxLevels(_maxLevels);

        return this.searchUpVersion(_bomId,_fromDate,_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxLevel</Name>
				<Source><![CDATA[
    public boolean checkMaxLevel()
    {
        if (presLevel > BOMParameters::find().bomMaxLevel())
        {
            if (warningIfMaxLevel)
            {
                checkFailed("@SYS26729");
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemConsistOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM structure down and determines if it is valid.
    /// </summary>
    /// <param name="_itemId">
    /// The Id of an item to start from.
    /// </param>
    /// <param name="_configId">
    /// The configuration to limit selection on; optional.
    /// </param>
    /// <param name="_maxLevels">
    /// The maximum number of levels that is allowed to be traversed; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for versions from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for versions to; optional.
    /// </param>
    /// <param name="_selectConfig">
    /// A <c>boolean</c> value that determines if the configuration is to be determined based on the configuration group; optinal.
    /// </param>
    /// <param name="_itemBOMId">
    /// The Id of a Bill Of Material to start from; optional.
    /// </param>
    /// <param name="_siteId">
    /// The Id of a site that the search will be limited on if the site filter has been enabled; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The item parameter reference to a non-existing item.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The item is not allowed to have a Bill of Material or a Formula.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The provided configuration Id is not allowed for the item.
    /// </exception>
    public boolean itemConsistOf(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId       = '',
        Level                       _maxLevels      = 0,
        TransDate                   _fromDate       = dateNull(),
        TransDate                   _toDate         = dateMax(),
        boolean                     _selectConfig   = true,
        BOMId                       _itemBOMId      = '',
        InventSiteId                _siteId         = ''
        )
    {
        if (!InventTable::checkExist(_itemId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        if (!InventTable::find(_itemId).isFormulaOrBOMAllowed())
        {
            throw error(strfmt("@PRO2615",_itemId));
        }

        if (_configId &&
            !EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(InventTable::itemProduct(_itemId), _configId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        selectConfig    = _selectConfig;
        presLevel       = 0;
        this.setMaxLevels(_maxLevels);

        boolean ret = this.searchDownVersion(_itemId, _configId, _itemBOMId, _fromDate, _toDate, null, _siteId);

        return ret && this.searchDownVersionCoProduct(_itemId, _configId, _itemBOMId, _fromDate, _toDate, null, _siteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemPartOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM structure up and determines if it is valid.
    /// </summary>
    /// <param name="_itemId">
    /// The Id of an item to start from.
    /// </param>
    /// <param name="_configId">
    /// The configuration to limit selection on; optional.
    /// </param>
    /// <param name="_maxLevels">
    /// The maximum number of levels that is allowed to be traversed; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for versions from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for versions to; optional.
    /// </param>
    /// <param name="_siteId">
    /// The Id of a site that the search will be limited on if the site filter has been enabled; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The item parameter reference to a non-existing item.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The provided configuration Id is not allowed for the item.
    /// </exception>
    public boolean itemPartOf(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId       = '',
        Level                       _maxLevels      = 0,
        TransDate                   _fromDate       = dateNull(),
        TransDate                   _toDate         = dateMax(),
        InventSiteId                _siteId         = ''
        )
    {
        if (!InventTable::checkExist(_itemId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        if (_configId &&
            !EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(InventTable::itemProduct(_itemId), _configId))
        {
            throw error(strfmt("@SYS18598",funcname()));
        }

        presLevel = 0;
        this.setMaxLevels(_maxLevels);

        return this.searchUpBOM(_itemId, _configId, '', _fromDate, _toDate, _siteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSearchNextLevel</Name>
				<Source><![CDATA[
    public boolean mustSearchNextLevel()
    {
        return !maxLevels ||
               presLevel < maxLevels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseRLS</Name>
				<Source><![CDATA[
    public boolean mustUseRLS()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        BOMRouteVersionSelectAll    _versionSelect      = BOMRouteVersionSelectAll::Active,
        boolean                     _searchInterval     = true,
        boolean                     _warningIfMaxLevel  = false,
        boolean                     _boMupStop          = false,
        boolean                     _onlyApproved       = false
        )
    {
        versionSelect       = _versionSelect;
        searchInterval      = _searchInterval;
        warningIfMaxLevel   = _warningIfMaxLevel;
        boMupStop           = _boMupStop;
        onlyApproved        = _onlyApproved;

        boMupKeyList       = new RecordSortedList(tablenum(BOM));
        boMupKeyList.sortOrder(
            fieldnum(BOM,ItemId),
            fieldnum(BOM,InventDimId),
            fieldnum(BOM,ItemBOMId),
            fieldnum(BOM,FromDate),
            fieldnum(BOM,ToDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterOnConfigId</Name>
				<Source><![CDATA[
    public boolean parmFilterOnConfigId(boolean _filterOnConfigId = filterOnConfigId)
    {
        filterOnConfigId = _filterOnConfigId;
        return filterOnConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterOnSiteId</Name>
				<Source><![CDATA[
    public boolean parmFilterOnSiteId(boolean _filterOnSiteId = filterOnSiteId)
    {
        filterOnSiteId = _filterOnSiteId;
        return filterOnSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApproved</Name>
				<Source><![CDATA[
    public boolean parmOnlyApproved(boolean _onlyApproved = onlyApproved)
    {
        onlyApproved = _onlyApproved;
        return onlyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBom</Name>
				<Source><![CDATA[
    public BOM parmParentBom(BOM _parentBom = parentBom)
    {
        parentBom = _parentBom;

        return parentBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBOMIdentifier</Name>
				<Source><![CDATA[
    public guid parmParentBOMIdentifier(guid _parentBOMIdentifier = parentBOMIdentifier)
    {
        parentBOMIdentifier = _parentBOMIdentifier;
        return parentBOMIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBomVersion</Name>
				<Source><![CDATA[
    public BOMVersion parmParentBomVersion(BOMVersion _parentBomVersion = parentBomVersion)
    {
        parentBomVersion = _parentBomVersion;

        return parentBomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBOMVersionIdentifier</Name>
				<Source><![CDATA[
    public guid parmParentBOMVersionIdentifier(guid _parentBOMVersionIdentifier = parentBOMVersionIdentifier)
    {
        parentBOMVersionIdentifier = _parentBOMVersionIdentifier;
        return parentBOMVersionIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchInterval</Name>
				<Source><![CDATA[
    public boolean parmSearchInterval(boolean _searchInterval = searchInterval)
    {
        searchInterval = _searchInterval;

        if (!searchInterval)
        {
            searchIntervalBOM = false;
        }

        return searchInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchIntervalBOM</Name>
				<Source><![CDATA[
    public boolean parmSearchIntervalBOM(boolean _searchIntervalBOM = searchIntervalBOM)
    {
        searchIntervalBOM = _searchIntervalBOM;

        if (searchIntervalBOM)
        {
            searchInterval = true;
        }

        return searchIntervalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionSelect</Name>
				<Source><![CDATA[
    public BOMRouteVersionSelectAll parmVersionSelect(BOMRouteVersionSelectAll _versionSelect = versionSelect)
    {
        versionSelect = _versionSelect;

        return versionSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presLevel</Name>
				<Source><![CDATA[
    public Level presLevel()
    {
        return presLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the lines of a BOM version.
    /// </summary>
    /// <param name="_version">
    /// The BOM version to traverse the lines for.
    /// </param>
    /// <param name="_parentConfigId">
    /// The Id of the configuration to search for.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for lines from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for lines to; optional.
    /// </param>
    /// <param name="_bomVersionIdentifier">
    /// The unique ID for the BOM version to traverse the lines for; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    protected boolean scanDownBOM(
        BOMVersion                  _version,
        EcoResItemConfigurationName _parentConfigId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        guid                        _bomVersionIdentifier = newGuid()
        )
    {
        if (!this.mustSearchNextLevel())
        {
            return true;
        }

        if (!this.searchDownBOM(
            _version.bomId,
            _version.ItemId,
            _parentConfigId,
            _fromDate,
            _toDate,
            _version,
            _version.inventDim().InventSiteId,
            _bomVersionIdentifier))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM versions that are referring to the item of a BOM line.
    /// </summary>
    /// <param name="_bom">
    /// The BOM line to traverse.
    /// </param>
    /// <param name="_parentItemId">
    /// The Id of the parent item.
    /// </param>
    /// <param name="_parentConfigId">
    /// The configuration Id of the parent item.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for lines from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for lines to; optional.
    /// </param>
    /// <param name="_parentSiteId">
    /// The Id of the parent site; optional.
    /// </param>
    /// <param name="_bomIdentifier">
    /// The unique ID for the BOM line to traverse; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    public boolean scanDownVersion(
        BOM                         _bom,
        ItemId                      _parentItemId,
        EcoResItemConfigurationName _parentConfigId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        InventSiteId                _parentSiteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        if (!this.mustSearchNextLevel())
        {
            return true;
        }

        if (!this.searchDownVersion(_bom.ItemId,_bom.inventDim().ConfigId,_bom.ItemBOMId,_fromDate,_toDate, _bom, _parentSiteId, _bomIdentifier))
        {
            return false;
        }

        if (!this.searchDownVersionCoProduct(_bom.ItemId,_bom.inventDim().ConfigId,_bom.ItemBOMId,_fromDate,_toDate, _bom, _parentSiteId, _bomIdentifier))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM that refers to a BOM version.
    /// </summary>
    /// <param name="_version">
    /// The BOM version to traverse the BOM for.
    /// </param>
    /// <param name="_configId">
    /// The Id of the configuration to search for.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for BOMs from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for BOMs to; optional.
    /// </param>
    /// <param name="_coBy">
    /// A co/by line that is part of the version; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    public boolean scanUpBOM(
        BOMVersion                  _version,
        EcoResItemConfigurationName _configId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PmfFormulaCoBy              _coBy = null
        )
    {
        if (!this.mustSearchNextLevel())
        {
            return true;
        }

        if (_coBy.ItemId)
        {
            if (!this.searchUpBOM(_coBy.ItemId,_configId,_version.bomId,_fromDate,_toDate, _version.inventDim().InventSiteId))
            {
                return false;
            }
        }
        else if (!this.searchUpBOM(_version.ItemId,_configId,_version.bomId,_fromDate,_toDate, _version.inventDim().InventSiteId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanUpVersion</Name>
				<Source><![CDATA[
    protected boolean scanUpVersion(
        BOM             _bom,
        TransDate       _fromDate,
        TransDate       _toDate
        )
    {
        if (!this.mustSearchNextLevel())
        {
            return true;
        }

        if (!this.searchUpVersion(_bom.bomId,_fromDate,_toDate))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownBOM</Name>
				<Source><![CDATA[
    protected boolean searchDownBOM(
        BOMId                       _bomId,
        ItemId                      _parentItemId,
        EcoResItemConfigurationName _parentConfigId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        BOMVersion                  _version = null,
        InventSiteId                _parentSiteId = '',
        guid                        _bomVersionIdentifier = newGuid()
        )
    {
        #macrolib.BOM

        BOM             bom;
        ConfigChoice    configChoice;
        TransDate       searchToDate;
        InventDim       inventDim;

        boolean scan()
        {
            setprefix(strfmt("@SYS25838",bom.ItemId));

            bom.setConfigId(_parentItemId,_parentConfigId);
            this.parmParentBomVersion(_version);
            this.parmParentBOMVersionIdentifier(_bomVersionIdentifier);
            if (!this.scanDownVersion(
                    bom,
                    _parentItemId,
                    _parentConfigId,
                    BOMHierarchy::setValidFromDate(_fromDate,bom.FromDate),
                    BOMHierarchy::setValidToDate(_toDate,bom.ToDate),
                    _parentSiteId)
               )
                return false;

            return true;
        }

        presLevel += 1;
        if (!this.checkMaxLevel())
        {
            return false;
        }

        searchToDate = _toDate ? _toDate : dateMax();
        bom.recordLevelSecurity(this.mustUseRLS());

        if (!selectConfig ||
            !(select configChoice).RecId)
        {
            while select * from bom
                order LineNum
                where bom.bomId         == _bomId            &&
                      ((searchInterval  && searchIntervalBOM &&
                        bom.FromDate    <= searchToDate      &&
                        (bom.ToDate     >= _fromDate         ||
                         !bom.ToDate
                        )
                       )                                     ||
                       (!searchInterval || !searchIntervalBOM)
                      )
                exists join inventDim
                    where inventDim.inventDimId == bom.InventDimId
                      &&  (!filterOnSiteId
                          || inventDim.InventSiteId == _parentSiteId
                          || inventDim.InventSiteId == ''
                          || _parentSiteId == '')

            {
                if (!scan())
                {
                    return false;
                }
            }
        }
        else
        {
            while select * from bom
                order LineNum
                where bom.bomId         == _bomId            &&
                      ((searchInterval  && searchIntervalBOM &&
                        bom.FromDate    <= searchToDate      &&
                        (bom.ToDate     >= _fromDate         ||
                         !bom.ToDate
                        )
                       )                                     ||
                       (!searchInterval || !searchIntervalBOM)
                      )
                exists join inventDim
                    where inventDim.inventDimId == bom.InventDimId
                      &&  (!filterOnSiteId
                          || inventDim.InventSiteId == _parentSiteId
                          || inventDim.InventSiteId == ''
                          || _parentSiteId == '')

                #ConfigChoiceJoin(_parentItemId,_parentConfigId)
            {
                if (!scan())
                {
                    return false;
                }
            }
        }

        presLevel -= 1;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM versions that are referring to the item of a BOM line.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of the BOM line to traverse.
    /// </param>
    /// <param name="_configId">
    /// The Id of the configuration to search for.
    /// </param>
    /// <param name="_itemBOMId">
    /// The item Id of the parent BOM.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for lines from.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for lines to.
    /// </param>
    /// <param name="_bom">
    /// The BOM line to traverse; optional.
    /// </param>
    /// <param name="_siteId">
    /// The site to filter the search on; optional.
    /// </param>
    /// <param name="_bomIdentifier">
    /// The unique ID for the BOM line to traverse; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    protected boolean searchDownVersion(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMId                       _itemBOMId,
        date                        _fromDate,
        date                        _toDate,
        BOM                         _bom = null,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        InventDim       inventDim;
        BOMVersion      version;
        date            searchToDate;
        boolean         constructionSelected;

        searchToDate = _toDate ? _toDate : dateMax();
        version.recordLevelSecurity(this.mustUseRLS());
        while select version
            order Construction desc, Active desc
            join  recId, configId from inventDim
                order by configId desc
            where   version.InventDimId == inventDim.inventDimId
            &&      version.ItemId    == _itemId                              &&
                  (
                   (_itemBOMId                                              &&
                    version.bomId   == _itemBOMId
                   )                                                        ||
                   !_itemBOMId
                  )                                                         &&
                  (
                   _itemBOMId ||
                   (
                    (versionSelect   == BOMRouteVersionSelectAll::Active     && // If only active then only the active
                     version.Active
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::Selected   &&
                     version.Construction
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::SelectedActive &&
                     (version.Construction || version.Active)
                    )                                        ||
                    versionSelect    == BOMRouteVersionSelectAll::All
                   )
                  )                                         &&
                  (
                   (searchInterval                          &&
                    version.FromDate    <= searchToDate     &&
                    (version.ToDate     >= _fromDate        ||
                     !version.ToDate
                    )
                   )                                        ||
                   (!searchInterval                         ||
                    _itemBOMId                              ||
                    (versionSelect != BOMRouteVersionSelectAll::Active  &&
                     version.Construction
                    )
                   )
                  )                                         &&
                  (version.Approved || !onlyApproved)
            && (!filterOnConfigId
                || InventDim.configId == _configId
                || InventDim.configId == ''
                || !_configId )

            && (!filterOnSiteId
                || inventDim.InventSiteId == _siteId
                || inventDim.InventSiteId == ''
                || _siteId == '')
        {
            if (versionSelect == BOMRouteVersionSelectAll::SelectedActive)
            {
                if (constructionSelected)
                {
                    break;
                }
                if (version.Construction)
                {
                    constructionSelected = true;
                }
            }

            setprefix(strfmt("@SYS25823",version.bomId, date2StrUsr(version.FromDate, DateFlags::FormatAll), date2StrUsr(version.ToDate, DateFlags::FormatAll)));

            this.parmParentBom(_bom);
            this.parmParentBOMIdentifier(_bomIdentifier);
            if (! this.scanDownBOM(
                    version,
                    _configId,
                    BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                    BOMHierarchy::setValidToDate(_toDate,version.ToDate))
                   )
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownVersionCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM versions that are referring to the item of a BOM line which is a co-product at the same time
    /// </summary>
    /// <param name="_itemId">
    /// The item Id of the BOM line to traverse.
    /// </param>
    /// <param name="_configId">
    /// The Id of the configuration to search for.
    /// </param>
    /// <param name="_itemBOMId">
    /// The item Id of the parent BOM.
    /// </param>
    /// <param name="_fromDate">
    /// The date to search for lines from.
    /// </param>
    /// <param name="_toDate">
    /// The date to search for lines to.
    /// </param>
    /// <param name="_bom">
    /// The BOM line to traverse; optional.
    /// </param>
    /// <param name="_siteId">
    /// The site to filter the search on; optional.
    /// </param>
    /// <param name="_bomIdentifier">
    /// The unique ID for the BOM line to traverse; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    protected boolean searchDownVersionCoProduct(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMId                       _itemBOMId,
        date                        _fromDate,
        date                        _toDate,
        BOM                         _bom = null,
        InventSiteId                _siteId = '',
        guid                        _bomIdentifier = newGuid()
        )
    {
        if (!#PmfEnabled)
        {
            return true;
        }

        InventDim       inventDim;
        BOMVersion      version;
        PmfFormulaCoBy  formulaCoBy;
        date            searchToDate;
        boolean         constructionSelected;

        searchToDate = _toDate ? _toDate : dateMax();
        version.recordLevelSecurity(this.mustUseRLS());

        while select recId from formulaCoBy
            join version
            order Construction desc, Active desc
            join  recId, configId from inventDim
                order by configId desc
            where  formulaCoBy.ItemId   == _itemId
                && formulaCoBy.ProductType == PmfProductType::Co_Product
                && version.RecId        == formulaCoBy.BOMVersionRefRecId
                && formulaCoBy.InventDimId  == inventDim.inventDimId    &&
                  (
                   (
                    (versionSelect   == BOMRouteVersionSelectAll::Active     && // If only active then only the active
                     ( version.Active )
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::Selected   &&
                     version.Construction
                    )                                        ||
                    (versionSelect   == BOMRouteVersionSelectAll::SelectedActive &&
                     (version.Construction || version.Active)
                    )                                        ||
                    versionSelect    == BOMRouteVersionSelectAll::All
                   )
                  )                                         &&
                  (
                   (searchInterval                          &&
                    version.FromDate    <= searchToDate     &&
                    (version.ToDate     >= _fromDate        ||
                     !version.ToDate
                    )
                   )                                        ||
                   (!searchInterval                         ||
                    _itemBOMId                              ||
                    (versionSelect != BOMRouteVersionSelectAll::Active  &&
                     version.Construction
                    )
                   )
                  )                                         &&
                  (version.Approved || !onlyApproved)
                && (!filterOnConfigId
                    || InventDim.configId == _configId
                    || InventDim.configId == ''
                    || !_configId )

                && (!filterOnSiteId
                    || inventDim.InventSiteId == _siteId
                    || inventDim.InventSiteId == ''
                    || _siteId == '')
        {
            if (versionSelect == BOMRouteVersionSelectAll::SelectedActive)
            {
                if (constructionSelected)
                {
                    break;
                }
                if (version.Construction)
                {
                    constructionSelected = true;
                }
            }

            setprefix(strfmt("@SYS25823",version.bomId, date2StrUsr(version.FromDate, DateFlags::FormatAll), date2StrUsr(version.ToDate, DateFlags::FormatAll)));

            this.parmParentBom(_bom);
            this.parmParentBOMIdentifier(_bomIdentifier);
            if (! this.scanDownBOM(
                    version,
                    _configId,
                    BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                    BOMHierarchy::setValidToDate(_toDate,version.ToDate))
                   )
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchUpBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses the BOM that refers to a BOM version.
    /// </summary>
    /// <param name="_itemId">
    /// The Id of the item to search for.
    /// </param>
    /// <param name="_configId">
    /// The Id of the configuration to search for.
    /// </param>
    /// <param name="_itemBOMId">
    /// The Id of the parent BOM.
    /// </param>
    /// <param name="_fromDate">
    /// The date to seach for BOMs from; optional.
    /// </param>
    /// <param name="_toDate">
    /// The date to seach for BOMs to; optional.
    /// </param>
    /// <param name="_siteId">
    /// The Id of the parent site; optional.
    /// </param>
    /// <returns>
    /// true if the structure is valid; otherwise, false.
    /// </returns>
    protected boolean searchUpBOM(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMId                       _itemBOMId,
        TransDate                   _fromDate,
        TransDate                   _toDate,
        InventSiteId                _siteId = '')
    {
        BOM         bom;
        InventDim   inventDim;
        TransDate   searchToDate;
        boolean     cached;

        presLevel += 1;
        if (!this.checkMaxLevel())
        {
            return false;
        }

        searchToDate = _toDate ? _toDate : dateMax();

        if (boMupStop)
        {
            bom.ItemId          = _itemId;
            inventDim.ConfigId  = _configId;
            inventDim.InventSiteId  = _siteId;
            bom.InventDimId     = InventDim::findDim(inventDim).InventDimId;
            bom.ItemBOMId       = _itemBOMId;
            bom.FromDate        = _fromDate;
            bom.ToDate          = searchToDate;

            cached              = boMupKeyList.find(bom);

            if (!cached)
            {
                boMupKeyList.ins(bom);
            }
        }

        if (!cached)
        {
            bom.recordLevelSecurity(this.mustUseRLS());
            while select forceplaceholders bom
                order by bomId
                where bom.ItemId        == _itemId                  &&
                      ((bom.ItemBOMId                               &&
                        bom.ItemBOMId   == _itemBOMId || !_itemBOMId
                       )                                            ||
                       (!bom.ItemBOMId)
                      )                                             &&
                      ((searchInterval  && searchIntervalBOM        &&
                        bom.FromDate    <= searchToDate             &&
                        (bom.ToDate     >= _fromDate                ||
                         !bom.ToDate
                        )
                       )                                            ||
                       !searchInterval || !searchIntervalBOM
                      )
                exists join inventDim
                    where inventDim.InventDimId == bom.InventDimId  &&
                          (!_configId || inventDim.ConfigId == _configId)
                    && (!filterOnSiteId
                        || inventDim.InventSiteId == _siteId
                        || inventDim.InventSiteId == ''
                        || _siteId == '')
                {
                setprefix(strfmt("@SYS25827",bom.bomId));

                if (!this.scanUpVersion(
                        bom,
                        BOMHierarchy::setValidFromDate(_fromDate,bom.FromDate),
                        BOMHierarchy::setValidToDate(_toDate,bom.ToDate))
                   )
                {
                    return false;
                }
            }
        }

        presLevel -= 1;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchUpVersion</Name>
				<Source><![CDATA[
    protected boolean searchUpVersion(
        BOMId       _bomId,
        date        _fromDate,
        date        _toDate
        )
    {
        BOMVersion      version;
        InventDim       inventDim;
        date            searchToDate;
        PmfFormulaCoBy  formulaCoBy;

        searchToDate = _toDate ? _toDate : dateMax();
        version.recordLevelSecurity(this.mustUseRLS());
        while select version
            order ItemId
            where
                version.bomId         == _bomId                               &&
                  ((searchInterval                                              &&
                    version.FromDate    <= searchToDate                         &&
                    (version.ToDate     >= _fromDate                            ||
                     !version.ToDate))                                          ||
                   (!searchInterval                                             ||
                    (versionSelect  != BOMRouteVersionSelectAll::Active         &&
                     version.Construction)))                                    &&
                  (version.Approved || !onlyApproved)                           &&
                  ((versionSelect   == BOMRouteVersionSelectAll::Active         &&
                    version.Active)                                             ||
                   (versionSelect   == BOMRouteVersionSelectAll::Selected       &&
                    version.Construction)                                       ||
                   (versionSelect   == BOMRouteVersionSelectAll::SelectedActive &&
                    (version.Construction                                       ||
                     version.Active))                                           ||
                   (versionSelect   == BOMRouteVersionSelectAll::All))
        {
            setprefix(strfmt("@SYS25826",version.ItemId,
                             date2StrUsr(version.FromDate, DateFlags::FormatAll),
                             date2StrUsr(version.ToDate, DateFlags::FormatAll)));

            inventDim = version.inventDim();
            if (!this.scanUpBOM(version,
                                ((inventDim)? inventDim.configId: ''),
                                BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                                BOMHierarchy::setValidToDate(_toDate,version.ToDate)))

            {
                return false;
            }

            while select formulaCoBy
                where  formulaCoBy.BOMVersionRefRecId   == version.RecId
                       && formulaCoBy.ProductType != PmfProductType::By_Product
            {
                inventDim = formulaCoBy.inventDim();
                if (!this.scanUpBOM(version,
                                    ((inventDim)? inventDim.configId: ''),
                                    BOMHierarchy::setValidFromDate(_fromDate,version.FromDate),
                                    BOMHierarchy::setValidToDate(_toDate,version.ToDate),
                                    formulaCoBy))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxLevels</Name>
				<Source><![CDATA[
    public void setMaxLevels(int _maxLevels)
    {
        maxLevels   = _maxLevels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidFromDate</Name>
				<Source><![CDATA[
    public static StartDate setValidFromDate(
        StartDate               _fromDate1,
        StartDate               _fromDate2
        )
    {
        StartDate tmpFromDate;

        tmpFromDate = _fromDate2 < _fromDate1 ? _fromDate1 : _fromDate2;

        return tmpFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidToDate</Name>
				<Source><![CDATA[
    public static TransDate setValidToDate(
        TransDate               _toDate1,
        TransDate               _toDate2
        )
    {
        TransDate tmpToDate;

        if (!_toDate2)
        {
            tmpToDate  = _toDate1;
        }
        else if (!_toDate1)
        {
            tmpToDate  = _toDate2;
        }
        else
        {
            tmpToDate  = _toDate2 > _toDate1 ? _toDate1 : _toDate2;
        }
        return tmpToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteriaParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimCriteriaParm(InventDimParm _inventDimCriteriaParm = inventDimCriteriaParm)
    {
        inventDimCriteriaParm = _inventDimCriteriaParm;

        return inventDimCriteriaParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>