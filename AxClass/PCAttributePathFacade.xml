<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCAttributePathFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCAttributePathFacade</c> class is a facade for storing and retrieving paths to attributes on sub-components on constraint relations
/// </summary>
class PCAttributePathFacade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duplicateConstraintRelationPathReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates a path reference on a constraint relation.
    /// </summary>
    /// <param name="_duplicate">
    /// The constraint relation that should have its path duplicated.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    /// A map from the original component IDs to the duplicated IDs.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map from the original category attribute reference IDs to the duplicated IDs.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The path contains unknown records.
    /// </exception>
    public static void duplicateConstraintRelationPathReference(PCTableConstraintColumnCategoryAttribute _duplicate, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        List            path           = PCAttributePathFacade::getPath(_duplicate);
        List            duplicatedPath = new List(Types::Record);
        ListEnumerator  le             = path.getEnumerator();
        Common          common;
        PCSubComponent  originalSubComponent, duplicatedSubComponent;
        EcoResCategoryAttribute originalCategoryAttribute, duplicatedCategoryAttribute;

        while (le.moveNext())
        {
            common = le.current();
            switch (common.TableId)
            {
                case tableNum(PCSubComponent):
                    originalSubComponent    = common as PCSubComponent;
                    duplicatedSubComponent  = PCSubComponent::findByNameAndParent(
                        originalSubComponent.Name,
                        _duplicatedComponentsMap.lookup(originalSubComponent.ParentComponentClass));
                    duplicatedPath.addEnd(duplicatedSubComponent);
                    break;

                case tableNum(EcoResCategoryAttribute):
                    originalCategoryAttribute   = common as EcoResCategoryAttribute;
                    duplicatedCategoryAttribute = EcoResCategoryAttribute::find(_duplicatedAttributesMap.lookup(originalCategoryAttribute.RecId));
                    duplicatedPath.addEnd(duplicatedCategoryAttribute);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        PCAttributePathFacade::savePath(_duplicate, duplicatedPath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributesUsedInAttributePaths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the attributes from a component which are referenced by the constraint relations.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_attributesUsedInAttributePaths">
    /// A map from attribute names to the attribute IDs.
    /// </param>
    public static void getAttributesUsedInAttributePaths(PCClassRecId _componentRecId, Map _attributesUsedInAttributePaths)
    {
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        EcoResCategoryAttribute                     categoryAttribute;

        while select Attribute, RecId from categoryAttribute
            where categoryAttribute.Category == _componentRecId
        exists join constraintRelation
            where constraintRelation.CategoryAttribute == categoryAttribute.RecId
        {
            _attributesUsedInAttributePaths.insert(categoryAttribute.getAttributeName(), categoryAttribute.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last sub-component record on a path.
    /// </summary>
    /// <param name="_path">
    /// A list of records.
    /// </param>
    /// <returns>
    /// The last sub-component record in the list of records.
    /// </returns>
    public static PCSubComponent getLastSubComponent(List _path)
    {
        ListEnumerator  le = _path.getEnumerator();
        PCSubComponent  lastSubComponent;
        Common          common;

        while (le.moveNext())
        {
            common = le.current();
            if (common.TableId == tableNum(PCSubComponent))
            {
                lastSubComponent = common as PCSubComponent;
            }
        }

        return lastSubComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path of an attribute based on a constraint relation record.
    /// </summary>
    /// <param name="_constraintRelation">
    /// A constraint relation record.
    /// </param>
    /// <returns>
    /// A list of <c>PCSubComponent</c> records followed by a <c>EcoResCategoryAttribute</c> record.
    /// </returns>
    public static List getPath(PCTableConstraintColumnCategoryAttribute _constraintRelation)
    {
        List path = PCSubComponentPath::getPath(_constraintRelation.SubComponentPath);

        path.addEnd(EcoResCategoryAttribute::find(_constraintRelation.CategoryAttribute));

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPathByConstraintRelationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path of an attribute that is based on a constraint relation record ID.
    /// </summary>
    /// <param name="_constraintRelationRecId">
    /// A constraint relation record ID.
    /// </param>
    /// <returns>
    /// A list of <c>PCSubComponent</c> records followed by an <c>EcoResCategoryAttribute</c> record.
    /// </returns>
    public static List getPathByConstraintRelationRecId(PCTableConstraintColumnCatAttrRecId _constraintRelationRecId)
    {
        return List::create(PCAttributePathFacade::getPathByConstraintRelationRecIdServer(_constraintRelationRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPathByConstraintRelationRecIdServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path of an attribute that is based on a constraint relation record ID.
    /// </summary>
    /// <param name="_constraintRelationRecId">
    /// A constraint relation record ID.
    /// </param>
    /// <returns>
    /// A packed list of <c>PCSubComponent</c> records followed by an <c>EcoResCategoryAttribute</c> record.
    /// </returns>
    public static container getPathByConstraintRelationRecIdServer(PCTableConstraintColumnCatAttrRecId _constraintRelationRecId)
    {
        return PCAttributePathFacade::getPath(PCTableConstraintColumnCategoryAttribute::find(_constraintRelationRecId)).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponentsUsedInAttributePaths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all the sub-components of a component that are referenced by the constriant relations.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component for which to retrieve the sub-components.
    /// </param>
    /// <param name="_subComponentsUsedInAttributePaths">
    /// A map to populate.
    /// </param>
    public static void getSubComponentsUsedInAttributePaths(PCClassRecId _componentRecId, Map _subComponentsUsedInAttributePaths)
    {
        PCSubComponent          subComponent;
        PCSubComponentPathNode  pathNode;

        while select Name, RecId from subComponent
            where subComponent.ParentComponentClass == _componentRecId
            exists join pathNode
                where pathNode.SubComponent == subComponent.RecId
        {
            _subComponentsUsedInAttributePaths.insert(subComponent.Name, subComponent.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pathIsSuffixPathRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the path specified by the <paramref name="_suffixPathRecId" /> path is a suffix
    /// of the <paramref name="_path" /> path .
    /// </summary>
    /// <param name="_path">
    /// A long path.
    /// </param>
    /// <param name="_suffixPathRecId">
    /// A suffix path.
    /// </param>
    /// <returns>
    /// true if the path is a suffix; otherwise, false.
    /// </returns>
    public static boolean pathIsSuffixPathRecId(StackBase _path, PCSubComponentPathRecId _suffixPathRecId)
    {
        return PCSubComponentPath::pathIsSuffix(_path, _suffixPathRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pathToXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a path as XML by using a <c>XmlWriter</c> writer .
    /// </summary>
    /// <param name="_xmlWriter">
    /// The <c>XmlWriter</c> writer that writes the path.
    /// </param>
    /// <param name="_pathEnumerator">
    /// An enumerator for the path.
    /// </param>
    /// <remarks>
    /// The path should be a list of <c>PCSubComponent</c> records followed by a
    /// <c>EcoResCategoryAttribute</c> record.
    /// </remarks>
    protected static void pathToXML(PCXmlWriter _xmlWriter, ListEnumerator _pathEnumerator)
    {
        #PC
        Common                  common;
        EcoResCategoryAttribute categoryAttribute;
        PCSubComponent          subComponent;

        if (_pathEnumerator.moveNext())
        {
            common = _pathEnumerator.current();
            switch  (common.TableId)
            {
                case tableNum(PCSubComponent):
                    subComponent = common as PCSubComponent;
                    _xmlWriter.writeStartElement(#subComponentElement);
                    _xmlWriter.writeAttributeString(#nameAttribute, subComponent.SolverName);
                    // Recursive to get all subcomponents
                    PCAttributePathFacade::pathToXML(_xmlWriter, _pathEnumerator);
                    break;

                case tableNum(EcoResCategoryAttribute):
                    categoryAttribute = common as EcoResCategoryAttribute;
                    _xmlWriter.writeStartElement(#attributeElement);
                    _xmlWriter.writeAttributeString(#nameAttribute, PCSolverVariable::findByAttribute(categoryAttribute.Attribute).Name);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            _xmlWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePackedPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save a path as a <c>PCSubComponentPath</c> path and assigns it to a constraint relation.
    /// </summary>
    /// <param name="_constraintRelation">
    /// A constraint relation.
    /// </param>
    /// <param name="_packedPath">
    /// The path to save.
    /// </param>
    public static void savePackedPath(PCTableConstraintColumnCategoryAttribute _constraintRelation, container _packedPath)
    {
        PCAttributePathFacade::savePath(_constraintRelation, List::create(_packedPath));
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save a path as a <c>PCSubComponentPath</c> path and assign it to a constraint relation.
    /// </summary>
    /// <param name="_constraintRelation">
    /// A constraint relation.
    /// </param>
    /// <param name="_path">
    /// The path to save.
    /// </param>
    public static void savePath(PCTableConstraintColumnCategoryAttribute _constraintRelation, List _path)
    {
        List            subComponentPath    = new List(Types::Record);
        ListEnumerator  le                  = _path.getEnumerator();
        Common          common;

        while (le.moveNext())
        {
            common = le.current();
            switch (common.TableId)
            {
                case tableNum(PCClass):
                    // Skip context.
                    continue;
                case tableNum(PCSubComponent):
                    subComponentPath.addEnd(common);
                    break;
                case tableNum(EcoResCategoryAttribute):
                    _constraintRelation.CategoryAttribute = common.RecId;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        Debug::assert(_constraintRelation.CategoryAttribute != 0);

        _constraintRelation.SubComponentPath = PCSubComponentPath::savePath(subComponentPath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the path of a constraint relation as XML by using a <c>XmlWriter</c> writer .
    /// </summary>
    /// <param name="_xmlWriter">
    /// The <c>XmlWriter</c> writer that writes the path.
    /// </param>
    /// <param name="_constraintRelation">
    /// The constraint relation to write.
    /// </param>
    public static void toXML(PCXmlWriter _xmlWriter, PCTableConstraintColumnCategoryAttribute _constraintRelation)
    {
        PCAttributePathFacade::pathToXML(_xmlWriter, PCAttributePathFacade::getPath(_constraintRelation).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferencesToCategoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all references from the constraint relations to the category attributes from an old
    /// category attribute record ID to a new record ID.
    /// </summary>
    /// <param name="_oldRecId">
    /// The old record ID.
    /// </param>
    /// <param name="_newRecId">
    /// The new record ID.
    /// </param>
    public static void updateReferencesToCategoryAttribute(RefRecId _oldRecId, RefRecId _newRecId)
    {
        PCTableConstraintColumnCategoryAttribute constraintRelation;

        if (_newRecId)
        {
            update_recordset constraintRelation
            setting CategoryAttribute = _newRecId
            where constraintRelation.CategoryAttribute == _oldRecId;
        }
        else
        {
            // Delete paths to non-existing attributes
            delete_from constraintRelation
                where constraintRelation.CategoryAttribute == _oldRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferencesToSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all references from the constraint relations to the sub-components from an old
    /// sub-component record ID to a new record ID.
    /// </summary>
    /// <param name="_oldRecId">
    /// The old record ID.
    /// </param>
    /// <param name="_newRecId">
    /// The new record ID.
    /// </param>
    public static void updateReferencesToSubComponent(PCSubComponentRecId _oldRecId, PCSubComponentRecId _newRecId)
    {
        PCSubComponentPathNode                      pathNode;
        PCTableConstraintColumnCategoryAttribute    constraintRelation;

        if (_newRecId)
        {
            update_recordset pathNode
            setting SubComponent = _newRecId
            where pathNode.SubComponent == _oldRecId;
        }
        else
        {
            // Delete paths through non-existing subcomponents
            while select SubComponentPath from pathNode
                where pathNode.SubComponent == _oldRecId
            {
                delete_from constraintRelation
                    where constraintRelation.SubComponentPath == pathNode.SubComponentPath;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubComponentChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the changes to a sub-component are valid.
    /// </summary>
    /// <param name="_subComponentRecId">
    /// The record ID of a sub-component.
    /// </param>
    /// <param name="_parentComponent">
    /// A parent component.
    /// </param>
    /// <param name="_childComponentRecId">
    /// A new child component reference.
    /// </param>
    /// <param name="_origChildComponentRecId">
    /// The previous child component reference.
    /// </param>
    /// <returns>
    /// true if the changes are valid; otherwise, false.
    /// </returns>
    public static boolean validateSubComponentChanges(PCSubComponentRecId _subComponentRecId, PCClassRecId _parentComponent, PCClassRecId _childComponentRecId, RefRecId _origChildComponentRecId)
    {
        return PCAttributePathFacade::validateSubComponentPathReferences(_subComponentRecId, _childComponentRecId, _origChildComponentRecId)
            && PCTableConstraintRelationFacade::validateDatabaseTableConstraints(_subComponentRecId, _parentComponent, _childComponentRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubComponentPathReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a sub-component is not referenced by the sub-component paths when the reference to
    /// the component is changed.
    /// </summary>
    /// <param name="_subComponentRecId">
    /// The sub-component which is modified.
    /// </param>
    /// <param name="_childComponentRecId">
    /// The new component record ID.
    /// </param>
    /// <param name="_origChildComponentRecId">
    /// The previous component record ID.
    /// </param>
    /// <returns>
    /// true if the change is valid; otherwise, false.
    /// </returns>
    protected static boolean validateSubComponentPathReferences(PCSubComponentRecId _subComponentRecId, PCClassRecId _childComponentRecId, PCClassRecId _origChildComponentRecId)
    {
        if (_subComponentRecId
            && _childComponentRecId != _origChildComponentRecId
            && (select firstonly RecId from pcSubComponentPathNode
                where pcSubComponentPathNode.SubComponent == _subComponentRecId).RecId != 0)
        {
            return checkFailed("@GLS180404");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>