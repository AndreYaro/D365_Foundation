<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiasImporter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FiasImporter_RU
{
    LogisticsAddressCountryRegionId regionId;
    LogisticsAddressImportVersionId_RU versionId;
    NoYes isFullImport;

    SysOperationProgress progress;
    
    Map statusesMap;

    Set regionSet;

    int updatedRecords;
    int insertedRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(
        Set _regionSet,
        LogisticsAddressCountryRegionId _regionId,
        LogisticsAddressImportVersionId_RU _versionId,
        NoYes _isFullImport)
    {
        versionId = _versionId;
        regionId = _regionId;

        isFullImport = _isFullImport;

        regionSet = _regionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Set parmSet(Set _set = regionSet)
    {
        regionSet = _set;
        return regionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStateSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating state set based on states currently loaded.
    /// </summary>
    private void updateStateSet()
    {
        LogisticsAddressState logisticsAddressState;
        
        // State set will change only if it is not a full import
        if (!isFullImport)
        {
            regionSet = new Set(Types::String);
            
            while select StateId from logisticsAddressState
                 where logisticsAddressState.CountryRegionId == regionId
            {
                regionSet.add(logisticsAddressState.StateId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsNotFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an entry in LogisticsAddressNotFoundRecords_RU table.
    /// </summary>
    /// <param name = "_recFrom">
    /// From which table the record has been moved.
    /// </param>
    /// <param name = "_recTo">
    /// To which table the record has been moved.
    /// </param>
    /// <param name = "_reason">
    /// Reason why the record hasn't been found.
    /// </param>
    private void markAsNotFound(Common _recFrom,
        Common _recTo,
        LogisticsAddressNotFoundReason_RU _reason)
    {
        LogisticsAddressNotFoundRecords_RU logisticsAddressNotFoundRecords_RU;

        select firstOnly forupdate logisticsAddressNotFoundRecords_RU
            where logisticsAddressNotFoundRecords_RU.RefRecId == _recFrom.RecId &&
                logisticsAddressNotFoundRecords_RU.RefTableId == _recFrom.TableId;

        logisticsAddressNotFoundRecords_RU.RefRecId = _recFrom.RecId;
        logisticsAddressNotFoundRecords_RU.RefRecIdTo = _recTo.RecId;

        logisticsAddressNotFoundRecords_RU.RefTableId = _recFrom.TableId;
        logisticsAddressNotFoundRecords_RU.LogisticsAddressNotFoundReason_RU = _reason;
        logisticsAddressNotFoundRecords_RU.LogisticsAddressElement = this.getElement(_recFrom.TableId);
        logisticsAddressNotFoundRecords_RU.LogisticsAddressElementTo = this.getElement(_recTo.TableId);

        logisticsAddressNotFoundRecords_RU.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromLogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the selected record from LogisticsAddressNotFoundRecords_RU table.
    /// </summary>
    /// <param name = "_addressObjectRecord">
    /// Selected record object.
    /// </param>
    private void deleteFromLogs(Common _addressObjectRecord)
    {
        LogisticsAddressNotFoundRecords_RU logisticsAddressNotFoundRecords_RU;
        
        delete_from logisticsAddressNotFoundRecords_RU
            where logisticsAddressNotFoundRecords_RU.RefRecId == _addressObjectRecord.RecId
               && logisticsAddressNotFoundRecords_RU.RefTableId == _addressObjectRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogisticsAddressFiasGuidCodes_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created GuidCodes table entry.
    /// </summary>
    /// <param name = "_table">
    /// Selected record from approprite table.
    /// </param>
    /// <param name = "_guid">
    /// Selected record's GUID.
    /// </param>
    /// <param name = "_parentGuid">
    /// Selected record parent's GUID.
    /// </param>
    private void createLogisticsAddressFiasGuidCodes_RU(Common _table, FiasGuidId_RU _guid, FiasGuidId_RU _parentGuid)
    {
        LogisticsAddressFiasGuidCodes_RU   logisticsAddressFiasGuidCodes_RU;
        
        logisticsAddressFiasGuidCodes_RU.FiasGuidId = _guid;
        logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _parentGuid;
        logisticsAddressFiasGuidCodes_RU.VersionId = versionId;
        logisticsAddressFiasGuidCodes_RU.RefRecId = _table.RecId;
        logisticsAddressFiasGuidCodes_RU.RefTableId = _table.TableId;
        logisticsAddressFiasGuidCodes_RU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOrUpdateProperties_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates and updates LogisticsAddressProperties_RU records for different
    /// kinds of logistics address objects.
    /// </summary>
    /// <param name = "_fiasAddressObject">
    /// Fias address object to create properties for.
    /// </param>
    /// <param name = "_addressRecord">
    /// Related record in AX table.
    /// </param>
    /// <param name = "_propertiesRecId">
    /// RecId of existing properties record.
    /// </param>
    /// <returns>
    /// RecId of created or updated LogisticsAddressProperties_RU record.
    /// </returns>
    private RecId initOrUpdateProperties_RU(FiasPropertiesDataContract_RU _fiasPropertiesDataContract_RU,
        Common _addressRecord,
        RecId _propertiesRecId = 0)
    {
        FiasAddressObject   fiasAddressObject;
        FiasHouse           fiasHouse;
        FiasStead           fiasStead;
        FiasRoom            fiasRoom;

        // Find properties entry for current table entry
        LogisticsAddressProperties_RU propertiesTable = LogisticsAddressProperties_RU::find(_propertiesRecId, true);
        LogisticsAddressZipCode logisticsAddressZipCode;
        AddressTypeTable_RU addressTypeTable_RU;

        LogisticsAddressHouseNumber_RU logisticsAddressHouseNumber_RU;
        LogisticsAddressSteadNumber_RU logisticsAddressSteadNumber_RU;

        // Looking for address type by address object's short name
        select firstOnly RecId from addressTypeTable_RU
            where addressTypeTable_RU.AddrTypeName == _fiasPropertiesDataContract_RU.parmShortName();
        
        // Filtering by address object type to look for zip code
        switch (_addressRecord.TableId)
        {
            case tableNum(logisticsAddressState):
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    _addressRecord.(fieldNum(logisticsAddressState, CountryRegionId)),
                    _addressRecord.(fieldNum(logisticsAddressState, StateId)));

                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = _addressRecord.(fieldNum(logisticsAddressState, StateId));
                    logisticsAddressZipCode.CountryRegionId = _addressRecord.(fieldNum(logisticsAddressState, CountryRegionId));
                }

                break;

            case tableNum(logisticsAddressCounty):
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    _addressRecord.(fieldNum(logisticsAddressCounty, CountryRegionId)),
                    _addressRecord.(fieldNum(logisticsAddressCounty, StateId)),
                    _addressRecord.(fieldNum(logisticsAddressCounty, CountyId)));

                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = _addressRecord.(fieldNum(logisticsAddressCounty, StateId));
                    logisticsAddressZipCode.County = _addressRecord.(fieldNum(logisticsAddressCounty, CountyId));
                    logisticsAddressZipCode.CountryRegionId = _addressRecord.(fieldNum(logisticsAddressCounty, CountryRegionId));
                }

                break;

            case tableNum(LogisticsAddressCity):
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    _addressRecord.(fieldNum(LogisticsAddressCity, CountryRegionId)),
                    _addressRecord.(fieldNum(LogisticsAddressCity, StateId)),
                    _addressRecord.(fieldNum(LogisticsAddressCity, CountyId)),
                    _addressRecord.RecId);
        
                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = _addressRecord.(fieldNum(LogisticsAddressCity, StateId));
                    logisticsAddressZipCode.County = _addressRecord.(fieldNum(LogisticsAddressCity, CountyId));
                    logisticsAddressZipCode.CityRecId = _addressRecord.RecId;
                    logisticsAddressZipCode.CountryRegionId = _addressRecord.(fieldNum(LogisticsAddressCity, CountryRegionId));
                }
        
                break;
        
            case tableNum(logisticsAddressDistrict):
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    _addressRecord.(fieldNum(logisticsAddressDistrict, CountryRegionId_RU)),
                    _addressRecord.(fieldNum(logisticsAddressDistrict, StateId_RU)),
                    _addressRecord.(fieldNum(logisticsAddressDistrict, CountyId_RU)),
                    _addressRecord.(fieldNum(logisticsAddressDistrict, City)),
                    _addressRecord.RecId);
        
                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = _addressRecord.(fieldNum(logisticsAddressDistrict, StateId_RU));
                    logisticsAddressZipCode.County = _addressRecord.(fieldNum(logisticsAddressDistrict, CountyId_RU));
                    logisticsAddressZipCode.District = _addressRecord.RecId;
                    logisticsAddressZipCode.CountryRegionId = _addressRecord.(fieldNum(logisticsAddressDistrict, CountryRegionId_RU));
                    logisticsAddressZipCode.CityRecId = _addressRecord.(fieldNum(logisticsAddressDistrict, City));
                }
        
                break;
        
            case tableNum(logisticsAddressStreet_RU):
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    _addressRecord.(fieldNum(logisticsAddressStreet_RU, CountryRegion)),
                    _addressRecord.(fieldNum(logisticsAddressStreet_RU, State)),
                    _addressRecord.(fieldNum(logisticsAddressStreet_RU, County)),
                    _addressRecord.(fieldNum(logisticsAddressStreet_RU, City)),
                    _addressRecord.(fieldNum(logisticsAddressStreet_RU, District)),
                    _addressRecord.RecId);
        
                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = _addressRecord.(fieldNum(logisticsAddressStreet_RU, State));
                    logisticsAddressZipCode.County = _addressRecord.(fieldNum(logisticsAddressStreet_RU, County));
                    logisticsAddressZipCode.StreetName = _addressRecord.(fieldNum(logisticsAddressStreet_RU, Description));
                    logisticsAddressZipCode.CountryRegionId = _addressRecord.(fieldNum(logisticsAddressStreet_RU, CountryRegion));
                    logisticsAddressZipCode.CityRecId = _addressRecord.(fieldNum(logisticsAddressStreet_RU, City));
                    logisticsAddressZipCode.District = _addressRecord.(fieldNum(logisticsAddressStreet_RU, District));
                }
        
                break;
        
            case tableNum(logisticsAddressHouseNumber_RU):
                logisticsAddressHouseNumber_RU = _addressRecord;
        
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    logisticsAddressHouseNumber_RU.CountryRegion,
                    logisticsAddressHouseNumber_RU.State,
                    logisticsAddressHouseNumber_RU.County,
                    logisticsAddressHouseNumber_RU.City,
                    logisticsAddressHouseNumber_RU.District,
                    logisticsAddressHouseNumber_RU.Street,
                    logisticsAddressHouseNumber_RU.RecId);
        
                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = logisticsAddressHouseNumber_RU.State;
                    logisticsAddressZipCode.County = logisticsAddressHouseNumber_RU.County;
                    logisticsAddressZipCode.District = logisticsAddressHouseNumber_RU.District;
                    logisticsAddressZipCode.CountryRegionId = logisticsAddressHouseNumber_RU.CountryRegion;
                    logisticsAddressZipCode.CityRecId = logisticsAddressHouseNumber_RU.City;
                    logisticsAddressZipCode.StreetName = logisticsAddressHouseNumber_RU.streetName();
                }
        
                break;
        
            case tableNum(logisticsAddressSteadNumber_RU):
                logisticsAddressSteadNumber_RU = _addressRecord;
  
                logisticsAddressZipCode = logisticsAddressZipCode::findZipCode_RU(_fiasPropertiesDataContract_RU.parmPostalCode(),
                    logisticsAddressSteadNumber_RU.CountryRegion,
                    logisticsAddressSteadNumber_RU.State,
                    logisticsAddressSteadNumber_RU.County,
                    logisticsAddressSteadNumber_RU.City,
                    logisticsAddressSteadNumber_RU.District,
                    logisticsAddressSteadNumber_RU.Street);
    
                if (!logisticsAddressZipCode.RecId)
                {
                    logisticsAddressZipCode.State = logisticsAddressSteadNumber_RU.State;
                    logisticsAddressZipCode.County = logisticsAddressSteadNumber_RU.County;
                    logisticsAddressZipCode.District = logisticsAddressSteadNumber_RU.District;
                    logisticsAddressZipCode.CountryRegionId = logisticsAddressSteadNumber_RU.CountryRegion;
                    logisticsAddressZipCode.CityRecId = logisticsAddressSteadNumber_RU.City;
                    logisticsAddressZipCode.StreetName = logisticsAddressSteadNumber_RU.streetName();
                }
  
                break;

            default:
                break;
        }

        // Creating new ZipCode entry if absent
        if(!logisticsAddressZipCode.RecId)
        {
            logisticsAddressZipCode.ZipCode = _fiasPropertiesDataContract_RU.parmPostalCode();
            logisticsAddressZipCode.insert();
        }
        
        select firstOnly propertiesTable
            where propertiesTable.AddressTypeTable_RU == AddressTypeTable_RU.RecId &&
            propertiesTable.GniCode == _fiasPropertiesDataContract_RU.parmIfnsfl() &&
            propertiesTable.IMNSDistrict == _fiasPropertiesDataContract_RU.parmTerrIfnsfl() &&
            propertiesTable.OKATO == _fiasPropertiesDataContract_RU.parmOkato() &&
            propertiesTable.ZipCode == logisticsAddressZipCode.RecId;

        // Creating new Properties entry if absent
        if(!propertiesTable.RecId)
        {
            propertiesTable.AddressTypeTable_RU = AddressTypeTable_RU.RecId;
            propertiesTable.GniCode = _fiasPropertiesDataContract_RU.parmIfnsfl();
            propertiesTable.IMNSDistrict = _fiasPropertiesDataContract_RU.parmTerrIfnsfl();
            propertiesTable.OKATO = _fiasPropertiesDataContract_RU.parmOkato();
            propertiesTable.ZipCode = logisticsAddressZipCode.RecId;

            propertiesTable.insert();
        }

        return propertiesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatusesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the operation statuses to speed up lookup process.
    /// </summary>
    private void initStatusesMap()
    {
        FIASOperationStatuses_RU fIASOperationStatuses_RU;
        
        statusesMap = new Map(Types::String, Types::Enum);

        while select OperationStatus, FiasOperationType_RU from fIASOperationStatuses_RU
        {
            statusesMap.insert(fIASOperationStatuses_RU.OperationStatus, fIASOperationStatuses_RU.FiasOperationType_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the version ID of selected record in GuidCodes table.
    /// </summary>
    /// <param name = "_logisticsAddressFiasGuidCodes_RU">
    /// Selected GuidCodes record.
    /// </param>
    private void updateVersionId(LogisticsAddressFiasGuidCodes_RU _logisticsAddressFiasGuidCodes_RU)
    {
        _logisticsAddressFiasGuidCodes_RU.selectForUpdate(true);
        _logisticsAddressFiasGuidCodes_RU.VersionId = versionId;
        _logisticsAddressFiasGuidCodes_RU.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the kind of logistics address elemment by table ID.
    /// </summary>
    /// <param name = "_tableId">
    /// ID of element's table.
    /// </param>
    /// <returns>
    /// Kind of element.
    /// </returns>
    private LogisticsAddressElement getElement(TableId _tableId)
    {
        switch(_tableId)
        {
            case tableNum(LogisticsAddressState):
                return LogisticsAddressElement::State;
            case tableNum(LogisticsAddressCounty):
                return LogisticsAddressElement::County;
            case tableNum(LogisticsAddressCity):
                return LogisticsAddressElement::City;
            case tableNum(LogisticsAddressDistrict):
                return LogisticsAddressElement::District;
            case tableNum(LogisticsAddressHouseNumber_RU):
                return LogisticsAddressElement::House_RU;
            case tableNum(LogisticsAddressSteadNumber_RU):
                return LogisticsAddressElement::Stead_RU;
            case tableNum(LogisticsAddressFlatNumber_RU):
                return LogisticsAddressElement::Flat_RU;
            default:
                return LogisticsAddressElement::StreetName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds out which state the address object belongs to.
    /// </summary>
    /// <param name = "_fiasAddressObject">
    /// Address object to search for.
    /// </param>
    /// <param name = "_regionId">
    /// Region ID of current country.
    /// </param>
    /// <param name = "_forUpdate">
    /// ForUpdate flag.
    /// </param>
    /// <returns>
    /// LogisticsAddressState table record.
    /// </returns>
    private LogisticsAddressState findState(
        FiasAddressObject _fiasAddressObject,
        LogisticsAddressCountryRegionId _regionId,
        NoYes _forUpdate = NoYes::No)
    {
        LogisticsAddressState stateTable;

        stateTable.selectForUpdate(_forUpdate);

        select firstOnly stateTable
            where stateTable.CountryRegionId == _regionId &&
                stateTable.StateId == _fiasAddressObject.RegionCode;

        return stateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCounty</Name>
				<Source><![CDATA[
    private LogisticsAddressCounty findCounty(FiasAddressObject _fiasAddressObject,
        LogisticsAddressCountryRegionId _regionId,
        Name _name = '',
        RecId _currentRecId = 0,
        NoYes _forUpdate = NoYes::No)
    {
        LogisticsAddressCounty countyTable;

        countyTable.selectForUpdate(_forUpdate);
        
        select firstOnly countyTable
            where countyTable.CountyId == _fiasAddressObject.AreaCode
                && countyTable.CountryRegionId == _regionId
                && countyTable.RecId != _currentRecId
                && (countyTable.Name == _name || _name == '')
                && countyTable.StateId == _fiasAddressObject.RegionCode;

        return countyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCity</Name>
				<Source><![CDATA[
    private LogisticsAddressCity findCity(FiasAddressObject _fiasAddressObject,
        LogisticsAddressCountryRegionId _regionId,
        LogisticsAddressCountyId _countyId,
        Name _name = '',
        RecId _currentRecId = 0,
        NoYes _forUpdate = NoYes::No)
    {
        LogisticsAddressCity cityTable;
        
        cityTable.selectForUpdate(_forUpdate);
        
        select firstOnly cityTable
            where cityTable.Name == _fiasAddressObject.CityCode
                && cityTable.CountryRegionId == _regionId
                && cityTable.CountyId == _countyId
                && cityTable.RecId != _currentRecId
                && ( CityTable.Description == _name || _name == '')
                && cityTable.StateId == _fiasAddressObject.RegionCode;
        
        return cityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDistrict</Name>
				<Source><![CDATA[
    private LogisticsAddressDistrict findDistrict(FiasAddressObject _fiasAddressObject,
        LogisticsAddressCountryRegionId _regionId,
        LogisticsAddressCountyId _countyId,
        LogisticsAddressDistrictName _districtName,
        Name _name = '',
        RecId _currentRecId = 0,
        NoYes _forUpdate = NoYes::No)
    {
        LogisticsAddressDistrict districtTable;
        LogisticsAddressCity LogisticsAddressCity;
    
        districtTable.selectForUpdate(_forUpdate);
    
        select firstOnly districtTable
            where districtTable.Name == _districtName
                && districtTable.CountryRegionId_RU == _regionId
                && districtTable.CountyId_RU == _countyId
                && ( districtTable.Description == _Name || _name == '')
                && districtTable.StateId_RU == _fiasAddressObject.RegionCode
        exists join LogisticsAddressCity
            where LogisticsAddressCity.RecId == districtTable.City
                && LogisticsAddressCity.Name == _fiasAddressObject.CityCode;
    
        if (!districtTable.RecId)
        {
            select firstOnly districtTable
            where districtTable.Name == _districtName
               && districtTable.CountryRegionId_RU == _regionId
               && districtTable.CountyId_RU == _countyId
               && districtTable.RecId != _currentRecId
               && ( districtTable.Description == _Name || _name == '')
               && districtTable.StateId_RU == _fiasAddressObject.RegionCode
               && districtTable.City == 0;
        }
    
        return districtTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStreet</Name>
				<Source><![CDATA[
    private LogisticsAddressStreet_RU findStreet(FiasAddressObject _fiasAddressObject,
        LogisticsAddressCountryRegionId _regionId,
        LogisticsAddressCountyId _countyId,
        LogisticsAddressStreetName_RU _objectCode,
        LogisticsAddressStreetName_RU _districtCode,
        LogisticsAddressStreetName_RU _cityCode,
        Name _name = '',
        RecId _currentRecId = 0,
        NoYes _forUpdate = NoYes::No)
    {
        LogisticsAddressStreet_RU streetTable;
        LogisticsAddressCity LogisticsAddressCity;
        LogisticsAddressDistrict logisticsAddressDistrict;
    
        if ( _cityCode != ''
            && _districtCode == '' )
        {
            select firstOnly RecId from LogisticsAddressCity
                where LogisticsAddressCity.Name == _cityCode
                    && LogisticsAddressCity.CountryRegionId == _regionId
                    && LogisticsAddressCity.CountyId == _countyId
                    && LogisticsAddressCity.StateId == _fiasAddressObject.RegionCode;
        }
    
        if ( _cityCode != ''
            && _districtCode != '' )
        {
            select firstOnly RecId from logisticsAddressDistrict
                where logisticsAddressDistrict.Name == _districtCode
                    && logisticsAddressDistrict.CountryRegionId_RU == _regionId
                    && logisticsAddressDistrict.CountyId_RU == _countyId
                    && logisticsAddressDistrict.StateId_RU == _fiasAddressObject.RegionCode
            join RecId from LogisticsAddressCity
                where LogisticsAddressCity.RecId == logisticsAddressDistrict.City
                    && LogisticsAddressCity.Name == _cityCode;
        }
    
        if ( _cityCode == ''
            && _districtCode != '' )
        {
            select firstOnly RecId from logisticsAddressDistrict
                where logisticsAddressDistrict.Name == _districtCode
                    && logisticsAddressDistrict.CountryRegionId_RU == _regionId
                    && logisticsAddressDistrict.CountyId_RU == _countyId
                    && logisticsAddressDistrict.StateId_RU == _fiasAddressObject.RegionCode;
        }
    
        streetTable.selectForUpdate(_forUpdate);
    
        select firstOnly streetTable
            where streetTable.Name == _objectCode
                && streetTable.CountryRegion == _regionId
                && streetTable.City == LogisticsAddressCity.RecId
                && streetTable.RecId != _currentRecId
                && ( streetTable.Description == _name || _name == '')
                && streetTable.District == logisticsAddressDistrict.RecId
                && streetTable.County == _countyId
                && streetTable.State == _fiasAddressObject.RegionCode;
    
        return streetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegionSetString</Name>
				<Source><![CDATA[
    private str getRegionSetString()
    {
        container c;
        SetEnumerator  enumerator = regionSet.getEnumerator();

        while (enumerator.moveNext())
        {
            c += enumerator.current();
        }
        return con2str(c);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAddressObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes current records in FiasAddressObject table.
    /// </summary>
    private void processAddressObjects()
    {
        LogisticsAddressState               stateTable;
        FiasAddressObject                   fiasAddressObject;
        FiasAddressObject                   fiasAddressObjectFnd;
        LogisticsAddressFiasGuidCodes_RU    logisticsAddressFiasGuidCodes_RU;

        Query                               query;
        QueryBuildDataSource                addressObjectQBDS;
        QueryBuildDataSource                operationStatusQBDS;
        QueryBuildRange                     qbr;
        QueryRun                            queryRun;

        query = new Query();
        addressObjectQBDS = query.addDataSource(tableNum(FiasAddressObject));
        qbr = addressObjectQBDS.addRange(fieldNum(FiasAddressObject, RegionCode));
        qbr.value(this.getRegionSetString());
        
        operationStatusQBDS = addressObjectQBDS.addDataSource(tableNum(FiasOperationStatuses_RU));
        operationStatusQBDS.joinMode(JoinMode::ExistsJoin);
        operationStatusQBDS.addLink(fieldNum(FiasAddressObject, OperStatus), fieldNum(FiasOperationStatuses_RU, OperationStatus), addressObjectQBDS.name());
        
        operationStatusQBDS.addRange(fieldNum(FiasAddressObject, DataAreaId)).value(
            strFmt('(((%1.%2 == "%4") && (%1.%3 == "%4")) || (%5.%6 == %7))',
                addressObjectQBDS.name(),
                fieldStr(FiasAddressObject, ActStatus),
                fieldStr(FiasAddressObject, LiveStatus),
                '1',
                operationStatusQBDS.name(),
                fieldStr(FiasOperationStatuses_RU, FiasOperationType_RU),
                any2int(FiasOperationType_RU::DeleteOperation)));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            fiasAddressObject = queryRun.get(tableNum(FiasAddressObject));
            
            // Fire up function in accordance with current object's Level
			try
            {
				switch (fiasAddressObject.AOLevel)
				{
					case '1':
						this.importState(fiasAddressObject);
						break;

					case '3':
						this.importCounty(fiasAddressObject);
						break;

					case '4':
						this.importCity(fiasAddressObject);
						break;

					case '5':
					case '6':
						this.importDistrict(fiasAddressObject);
						break;

					case '65':
					case '7':
						this.importStreet(fiasAddressObject);
						break;

					default:
						;
				}
            }
            catch(Exception::DuplicateKeyException)
            {
				// This prevents lengthy import jobs from failing in mid-execution in case of duplicates
				// Case tested: with proper setup this should not be trigered
                warning(strFmt("@FIAS:DuplicateAddressException", fiasAddressObject.OffName, fiasAddressObject.AOId));
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the state import from FiasAddressObject table.
    /// </summary>
    /// <param name = "_fiasAddressObject">
    /// FiasAddressObject table with selected State record.
    /// </param>
    private void importState(FiasAddressObject _fiasAddressObject)
    {
        LogisticsAddressState stateTable;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;

        // Handle deletion
        if (statusesMap.exists(_fiasAddressObject.OperStatus) &&
            (statusesMap.lookup(_fiasAddressObject.OperStatus) == FiasOperationType_RU::DeleteOperation) &&
            _fiasAddressObject.NextId == '')
        {
            stateTable = this.findState(_fiasAddressObject, regionId);

            if (stateTable.RecId)
            {
                this.markAsNotFound(stateTable,
                    stateTable, LogisticsAddressNotFoundReason_RU::Deleted);
            }

            return;
        }
        
        // Select records from GuidCodes and States tables
        select firstOnly forupdate logisticsAddressFiasGuidCodes_RU
            where logisticsAddressFiasGuidCodes_RU.FiasGuidId == _fiasAddressObject.AOGuid
        join forupdate stateTable
            where stateTable.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && stateTable.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;

        fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
        fiasPropertiesDataContract_RU.parmShortName(_fiasAddressObject.ShortName);
        fiasPropertiesDataContract_RU.parmPostalCode(_fiasAddressObject.PostalCode);
        fiasPropertiesDataContract_RU.parmIfnsfl(_fiasAddressObject.IFNSFL);
        fiasPropertiesDataContract_RU.parmTerrIfnsfl(_fiasAddressObject.TerrIFNSFL);
        fiasPropertiesDataContract_RU.parmOkato(_fiasAddressObject.OKATO);
        
        if (stateTable.RecId)
        {
            // Change existing record
            stateTable.Name = _fiasAddressObject.OffName;
            stateTable.CountryRegionId = regionId;
            stateTable.StateId = _fiasAddressObject.RegionCode;

            stateTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, stateTable, stateTable.Properties_RU);

            stateTable.update();
        
            updatedRecords++;

            logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _fiasAddressObject.ParentGuid;
            this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
        }
        else
        {
            // The record still may be found in a States table
            stateTable = this.findState(_fiasAddressObject, regionId, NoYes::Yes);
            
            stateTable.StateId = _fiasAddressObject.RegionCode;
            stateTable.Name = _fiasAddressObject.OffName;
            stateTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, stateTable, stateTable.Properties_RU);
            
            if(stateTable.RecId)
            {
                stateTable.update();
        
                updatedRecords++;
        
                this.deleteFromLogs(stateTable);
            }
        
            else
            {
                stateTable.CountryRegionId = regionId;
                stateTable.insert();
        
                insertedRecords++;
            }
            this.createLogisticsAddressFiasGuidCodes_RU(stateTable, _fiasAddressObject.AOGuid, _fiasAddressObject.ParentGuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the county import from FiasAddressObject table.
    /// </summary>
    /// <param name = "_fiasAddressObject">
    /// FiasAddressObject table with selected County record.
    /// </param>
    private void importCounty(FiasAddressObject _fiasAddressObject)
    {
        LogisticsAddressCounty   countyTable;
        LogisticsAddressCounty   countyTableExst;
        FiasAddressObject        fiasAddressObjectExst;
                
        LogisticsAddressFiasGuidCodes_RU   logisticsAddressFiasGuidCodes_RU;
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;

        if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::DeleteOperation
                    && _fiasAddressObject.NextId == '')
        {
            // Handle delete operation
            countyTable = this.findCounty(_fiasAddressObject, regionId);

            if (countyTable.RecId)
            {
                this.markAsNotFound(countyTable, countyTable, LogisticsAddressNotFoundReason_RU::Deleted);
            }

            return;
        }

        select forupdate logisticsAddressFiasGuidCodes_RU
            where logisticsAddressFiasGuidCodes_RU.FiasGuidId == _fiasAddressObject.AOGuid
        join forUpdate countyTable
            where countyTable.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && countyTable.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;

        fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
        fiasPropertiesDataContract_RU.parmShortName(_fiasAddressObject.ShortName);
        fiasPropertiesDataContract_RU.parmPostalCode(_fiasAddressObject.PostalCode);
        fiasPropertiesDataContract_RU.parmIfnsfl(_fiasAddressObject.IFNSFL);
        fiasPropertiesDataContract_RU.parmTerrIfnsfl(_fiasAddressObject.TerrIFNSFL);
        fiasPropertiesDataContract_RU.parmOkato(_fiasAddressObject.OKATO);

        if (countyTable.RecId)
        {
            // Change existing record
            countyTable.CountyId = _fiasAddressObject.AreaCode;
            countyTable.Name = _fiasAddressObject.OffName;
            countyTable.CountryRegionId = regionId;
            countyTable.StateId = _fiasAddressObject.RegionCode;
            countyTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, countyTable, countyTable.Properties_RU);
            countyTable.update();

            updatedRecords++;

            logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _fiasAddressObject.ParentGuid;
            this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
        }

        else
        {
            // The record still may be found in a Counties table
            countyTable = this.findCounty(_fiasAddressObject, regionId, '', 0, NoYes::Yes);

            countyTable.CountyId = _fiasAddressObject.AreaCode;
            countyTable.Name = _fiasAddressObject.OffName;
            countyTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, countyTable, countyTable.Properties_RU);

            if (countyTable.RecId)
            {
                countyTable.update();

                updatedRecords++;

                this.deleteFromLogs(countyTable);
            }

            else
            {
                countyTable.CountryRegionId = regionId;
                countyTable.StateId = _fiasAddressObject.RegionCode;
                countyTable.insert();

                insertedRecords++;

            }

            if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::ResubordinationOperation)
            {
                // Handle resubordination: looking for a previous element (element that has been changed)
                select firstOnly fiasAddressObjectExst
                    where fiasAddressObjectExst.AOGuid == _fiasAddressObject.AOGuid
                        && fiasAddressObjectExst.AOId == _fiasAddressObject.PrevId;

                if (fiasAddressObjectExst.RecId)
                {
                    // Previous element found; looking for referense entry in County table
                    countyTableExst = this.findCounty(fiasAddressObjectExst, regionId, countyTable.Name, countyTable.RecId);

                    if (countyTableExst.RecId)
                    {
                        // 'deleting' previous entry
                        this.markAsNotFound(countyTableExst,
                            countyTable, LogisticsAddressNotFoundReason_RU::Moved);
                    }
                }
            }

            this.createLogisticsAddressFiasGuidCodes_RU(countyTable, _fiasAddressObject.AOGuid, _fiasAddressObject.ParentGuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importCity</Name>
				<Source><![CDATA[
    private void importCity(FiasAddressObject _fiasAddressObject)
    {
        LogisticsAddressCity   cityTable;
        LogisticsAddressCity   cityTableExst;
        FiasAddressObject       fiasAddressObjectExst;

        LogisticsAddressCountyId countyId = _fiasAddressObject.AreaCode == '000'? '' : _fiasAddressObject.AreaCode;

        LogisticsAddressFiasGuidCodes_RU   logisticsAddressFiasGuidCodes_RU;
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;

        if (statusesMap.exists(_fiasAddressObject.OperStatus)
                && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::DeleteOperation
                && _fiasAddressObject.NextId == '')
        {
            // Handle delete operation
            cityTable = this.findCity(_fiasAddressObject, regionId, countyId);

            if (cityTable.RecId)
            {
                this.markAsNotFound(cityTable, cityTable, LogisticsAddressNotFoundReason_RU::Deleted);
            }

            return;
        }

        select firstOnly logisticsAddressFiasGuidCodes_RU
            where logisticsAddressFiasGuidCodes_RU.FiasGuidId == _fiasAddressObject.AOGuid
        join forupdate cityTable
            where cityTable.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
                && cityTable.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
        
        fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
        fiasPropertiesDataContract_RU.parmShortName(_fiasAddressObject.ShortName);
        fiasPropertiesDataContract_RU.parmPostalCode(_fiasAddressObject.PostalCode);
        fiasPropertiesDataContract_RU.parmIfnsfl(_fiasAddressObject.IFNSFL);
        fiasPropertiesDataContract_RU.parmTerrIfnsfl(_fiasAddressObject.TerrIFNSFL);
        fiasPropertiesDataContract_RU.parmOkato(_fiasAddressObject.OKATO);

        if (cityTable.RecId)
        {
            // Change existing record
            cityTable.Name = _fiasAddressObject.CityCode;
            cityTable.Description = _fiasAddressObject.OffName;
            cityTable.CountryRegionId = regionId;
            cityTable.CountyId = countyId;
            cityTable.StateId = _fiasAddressObject.RegionCode;
            cityTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, cityTable, cityTable.Properties_RU);
            cityTable.update();

            updatedRecords++;

            logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _fiasAddressObject.ParentGuid;
            this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
        }
        else
        {
            // The record still may be found in a Cities table
            cityTable = this.findCity(_fiasAddressObject, regionId, countyId, '', 0, NoYes::Yes);

            cityTable.Name = _fiasAddressObject.CityCode;
            cityTable.Description = _fiasAddressObject.OffName;
            cityTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, cityTable,cityTable.Properties_RU);

            if (cityTable.RecId)
            {
                cityTable.update();

                updatedRecords++;

                this.deleteFromLogs(cityTable);
            }

            else
            {
                cityTable.CountryRegionId = regionId;
                cityTable.CountyId = countyId;
                cityTable.StateId = _fiasAddressObject.RegionCode;
                
                LogisticsAddressCity city;
                str cityKey = _fiasAddressObject.CityCode + ', ' + _fiasAddressObject.RegionCode;
                str cityKeyNew = cityKey;
                int dupCount = 0;

                select RecId from city where city.CityKey == cityKeyNew;

                while (city.RecId)
                {
                    dupCount++;
                    cityKeyNew = cityKey + ' (' + int2Str(dupCount) + ')';
                    select RecId from city where city.CityKey == cityKeyNew;
                }

                cityTable.CityKey = cityKeyNew;
                cityTable.insert();

                insertedRecords++;
            }

            if (statusesMap.exists(_fiasAddressObject.OperStatus)
                && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::ResubordinationOperation)
            {
                select firstOnly fiasAddressObjectExst
                where fiasAddressObjectExst.AOGuid == _fiasAddressObject.AOGuid
                    && fiasAddressObjectExst.AOId == _fiasAddressObject.PrevId;

                if (fiasAddressObjectExst.RecId)
                {
                    countyId = fiasAddressObjectExst.AreaCode == '000'? '' : fiasAddressObjectExst.AreaCode;

                    cityTableExst = this.findCity(fiasAddressObjectExst, regionId, countyId, cityTable.Description, cityTable.RecId);

                    if (cityTableExst.RecId)
                    {
                        this.markAsNotFound(cityTableExst,
                        cityTable, LogisticsAddressNotFoundReason_RU::Moved);
                    }
                }
            }

            this.createLogisticsAddressFiasGuidCodes_RU(cityTable, _fiasAddressObject.AOGuid, _fiasAddressObject.ParentGuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importDistrict</Name>
				<Source><![CDATA[
    private void importDistrict(FiasAddressObject _fiasAddressObject)
    {
        LogisticsAddressDistrict        districtTable;
        LogisticsAddressCity           LogisticsAddressCity;
        LogisticsAddressStreet_RU       logisticsAddressStreet_RU;
        LogisticsAddressStreetName_RU   objectCode;
    
        LogisticsAddressDistrictName    districtName;
    
        LogisticsAddressDistrict        districtTableExst;
        FiasAddressObject               fiasAddressObjectExst;
    
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RUCity;
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;
    
        // '000' means the property is absent, should treat this value as empty
        LogisticsAddressCountyId countyId = _fiasAddressObject.AreaCode == '000'? '' : _fiasAddressObject.AreaCode;
    
        if (_fiasAddressObject.CtArCode != '000')
        {
            districtName = _fiasAddressObject.CtArCode;
        }
    
        if ( _fiasAddressObject.PlaceCode != '000')
        {
            districtName = _fiasAddressObject.PlaceCode;
        }
    
        if (_fiasAddressObject.PlanCode != '0000' || districtName == '')
        {
            districtName = _fiasAddressObject.PlanCode;
        }
    
        if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::DeleteOperation
                    && _fiasAddressObject.NextId == '')
        {
            // Handle delete operation
            districtTable = this.findDistrict(_fiasAddressObject, regionId, countyId, districtName);
    
            if (districtTable.RecId)
            {
                this.markAsNotFound(districtTable,
                    districtTable, LogisticsAddressNotFoundReason_RU::Deleted);
            }
    
            return;
        }
    
        select firstOnly forupdate logisticsAddressFiasGuidCodes_RU
            where logisticsAddressFiasGuidCodes_RU.FiasGuidId == _fiasAddressObject.AOGuid
        join forupdate districtTable
            where districtTable.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && districtTable.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
        select firstOnly FiasGuidId, RefRecId, RefTableId from logisticsAddressFiasGuidCodes_RUCity
            join RecId, Tableid from LogisticsAddressCity
        where LogisticsAddressCity.RecId == logisticsAddressFiasGuidCodes_RUCity.RefRecId
            && LogisticsAddressCity.TableId == logisticsAddressFiasGuidCodes_RUCity.RefTableId
            && logisticsAddressFiasGuidCodes_RUCity.FiasGuidId == _fiasAddressObject.ParentGuid;
        
        fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
        fiasPropertiesDataContract_RU.parmShortName(_fiasAddressObject.ShortName);
        fiasPropertiesDataContract_RU.parmPostalCode(_fiasAddressObject.PostalCode);
        fiasPropertiesDataContract_RU.parmIfnsfl(_fiasAddressObject.IFNSFL);
        fiasPropertiesDataContract_RU.parmTerrIfnsfl(_fiasAddressObject.TerrIFNSFL);
        fiasPropertiesDataContract_RU.parmOkato(_fiasAddressObject.OKATO);
    
        if (districtTable.RecId)
        {
            // Change existing record
            districtTable.Name = districtName;
            districtTable.City = LogisticsAddressCity.RecId;
            districtTable.Description = _fiasAddressObject.OffName;
            districtTable.CountryRegionId_RU = regionId;
            districtTable.CountyId_RU = countyId;
            districtTable.StateId_RU = _fiasAddressObject.RegionCode;
            districtTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, districtTable, districtTable.Properties_RU);
            districtTable.update();
    
            updatedRecords++;
    
            logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _fiasAddressObject.ParentGuid;
            this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
        }
        else
        {
            // The record still may be found in a Districts table
            districtTable = this.findDistrict(_fiasAddressObject, regionId, countyId, districtName, '', 0, NoYes::Yes);
    
            districtTable.Name = districtName;
            districtTable.City = LogisticsAddressCity.RecId;
            districtTable.Description = _fiasAddressObject.OffName;
            districtTable.Properties_RU = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, districtTable, districtTable.Properties_RU);
    
            if (districtTable.RecId)
            {
                districtTable.update();
    
                updatedRecords++;
    
                this.deleteFromLogs(districtTable);
            }
            else
            {
                districtTable.City = LogisticsAddressCity.RecId;
                districtTable.CountryRegionId_RU = regionId;
                districtTable.CountyId_RU = countyId;
                districtTable.StateId_RU = _fiasAddressObject.RegionCode;
                districtTable.insert();
    
                insertedRecords++;
            }
    
            if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::ResubordinationOperation)
            {
                // Handle resubordination
                select firstOnly fiasAddressObjectExst
                    where fiasAddressObjectExst.AOGuid == _fiasAddressObject.AOGuid
                        && fiasAddressObjectExst.AOId == _fiasAddressObject.PrevId;
    
                if (fiasAddressObjectExst.RecId)
                {
                    countyId = fiasAddressObjectExst.AreaCode == '000'? '' : fiasAddressObjectExst.AreaCode;
    
                    districtName = '';
    
                    if (fiasAddressObjectExst.CtArCode != '000')
                    {
                        districtName = fiasAddressObjectExst.CtArCode;
                    }
    
                    if (fiasAddressObjectExst.PlaceCode != '000')
                    {
                        districtName = fiasAddressObjectExst.PlaceCode;
                    }
    
                    if (fiasAddressObjectExst.PlanCode != '0000' && districtName == '')
                    {
                        districtName = fiasAddressObjectExst.PlanCode;
                    }
    
                    districtTableExst = this.findDistrict(fiasAddressObjectExst, regionId, countyId, districtName, fiasAddressObjectExst.OffName, districtTable.RecId);
    
                    if (districtTableExst.RecId)
                    {
                        this.markAsNotFound(districtTableExst,
                            districtTable, LogisticsAddressNotFoundReason_RU::Moved);
                    }
                    else
                    {
                        objectCode = fiasAddressObjectExst.StreetCode != '0000' ? fiasAddressObjectExst.StreetCode :
                            (fiasAddressObjectExst.ExtrCode != '0000' ? fiasAddressObjectExst.ExtrCode : fiasAddressObjectExst.PlanCode);
    
                        if (fiasAddressObjectExst.CtArCode != '000')
                        {
                            districtName = fiasAddressObjectExst.CtArCode;
                        }
    
                        if (fiasAddressObjectExst.PlaceCode != '000')
                        {
                            districtName = fiasAddressObjectExst.PlaceCode;
                        }
    
                        if (fiasAddressObjectExst.PlanCode != '0000' && districtName == '')
                        {
                            districtName = fiasAddressObjectExst.PlanCode;
                        }
    
                        logisticsAddressStreet_RU = this.findStreet(fiasAddressObjectExst, regionId, countyId, objectCode, districtName, fiasAddressObjectExst.OffName);
    
                        if (logisticsAddressStreet_RU.RecId)
                        {
                            this.markAsNotFound(logisticsAddressStreet_RU,
                                districtTable, LogisticsAddressNotFoundReason_RU::Moved);
                        }
                    }
                }
            }
    
            this.createLogisticsAddressFiasGuidCodes_RU(districtTable, _fiasAddressObject.AOGuid, _fiasAddressObject.ParentGuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importStreet</Name>
				<Source><![CDATA[
    private void importStreet(FiasAddressObject _fiasAddressObject)
    {
        LogisticsAddressStreet_RU streetTable;
        LogisticsAddressCity   LogisticsAddressCity;
        LogisticsAddressDistrict logisticsAddressDistrict;
    
        RecId cityRecId;
    
        LogisticsAddressStreetName_RU objectCode = _fiasAddressObject.StreetCode != '0000' ? _fiasAddressObject.StreetCode :
                                (_fiasAddressObject.ExtrCode != '0000' ? _fiasAddressObject.ExtrCode : _fiasAddressObject.PlanCode);
        LogisticsAddressStreetName_RU districtCode;
        LogisticsAddressStreetName_RU cityCode = _fiasAddressObject.CityCode;
    
        LogisticsAddressStreet_RU streetTableExst;
        LogisticsAddressStreet_RU streetTableFnd;
        FiasAddressObject fiasAddressObjectExst;
        FiasAddressObject fiasAddressObjectFnd;
    
        LogisticsAddressCountyId countyId = _fiasAddressObject.AreaCode == '000'? '' : _fiasAddressObject.AreaCode;
    
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RUCity;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RUDistrict;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RUStreet;

        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;
    
        if (_fiasAddressObject.CtArCode != '000')
        {
            districtCode = _fiasAddressObject.CtArCode;
        }
    
        if (_fiasAddressObject.PlaceCode != '000')
        {
            districtCode = _fiasAddressObject.PlaceCode;
        }
    
        // Looking for a parent address object
        select firstOnly fiasAddressObjectFnd
            where fiasAddressObjectFnd.AOGuid == _fiasAddressObject.ParentGuid
               && fiasAddressObjectFnd.AOLevel == '65';
        
        if ((_fiasAddressObject.AOLevel != '65' && !fiasAddressObjectFnd.RecId) || districtCode == '')
        {
            if ( _fiasAddressObject.PlanCode != '0000')
            {
                districtCode = _fiasAddressObject.PlanCode;
            }
        }
    
        if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::DeleteOperation
                    && _fiasAddressObject.NextId == '')
        {
            // Handle delete operation
            streetTable = this.findStreet(_fiasAddressObject, regionId, countyId, objectCode, districtCode, cityCode, _fiasAddressObject.OffName);
    
            if (streetTable.RecId)
            {
                this.markAsNotFound(streetTable,
                    streetTable, LogisticsAddressNotFoundReason_RU::Deleted);
            }
    
            return;
        }
    
        select firstOnly logisticsAddressFiasGuidCodes_RU
            where logisticsAddressFiasGuidCodes_RU.FiasGuidId == _fiasAddressObject.AOGuid
        join forUpdate streetTable
            where streetTable.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && streetTable.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
        select firstOnly logisticsAddressFiasGuidCodes_RUCity
            join RecId from LogisticsAddressCity
        where LogisticsAddressCity.REcId == logisticsAddressFiasGuidCodes_RUCity.RefRecId
            && LogisticsAddressCity.TableId == logisticsAddressFiasGuidCodes_RUCity.RefTableId
            && logisticsAddressFiasGuidCodes_RUCity.FiasGuidId == _fiasAddressObject.ParentGuid;
    
        if (!LogisticsAddressCity.RecId)
        {
            select firstOnly logisticsAddressFiasGuidCodes_RUStreet
                exists join streetTableFnd
            where streetTableFnd.RecId == logisticsAddressFiasGuidCodes_RUStreet.RefRecId
               && streetTableFnd.TableId == logisticsAddressFiasGuidCodes_RUStreet.RefTableId
               && logisticsAddressFiasGuidCodes_RUStreet.FiasGuidId == _fiasAddressObject.ParentGuid;
    
            if (logisticsAddressFiasGuidCodes_RUStreet.RecId)
            {
                select firstOnly logisticsAddressFiasGuidCodes_RUCity
                    join RecId from LogisticsAddressCity
                where LogisticsAddressCity.REcId == logisticsAddressFiasGuidCodes_RUCity.RefRecId
                    && LogisticsAddressCity.TableId == logisticsAddressFiasGuidCodes_RUCity.RefTableId
                    && logisticsAddressFiasGuidCodes_RUCity.FiasGuidId == logisticsAddressFiasGuidCodes_RUStreet.FiasParentGuidId;
            }
        }
    
        select firstOnly logisticsAddressFiasGuidCodes_RUDistrict
            join City, RecId from logisticsAddressDistrict
        where logisticsAddressDistrict.REcId == logisticsAddressFiasGuidCodes_RUDistrict.RefRecId
            && logisticsAddressDistrict.TableId == logisticsAddressFiasGuidCodes_RUDistrict.RefTableId
            && logisticsAddressFiasGuidCodes_RUDistrict.FiasGuidId == _fiasAddressObject.ParentGuid;
    
        if (!logisticsAddressDistrict.RecId)
        {
            select firstOnly logisticsAddressFiasGuidCodes_RUStreet
                exists join streetTableFnd
            where streetTableFnd.REcId == logisticsAddressFiasGuidCodes_RUStreet.RefRecId
               && streetTableFnd.TableId == logisticsAddressFiasGuidCodes_RUStreet.RefTableId
               && logisticsAddressFiasGuidCodes_RUStreet.FiasGuidId == _fiasAddressObject.ParentGuid;
    
            if (logisticsAddressFiasGuidCodes_RUStreet.RecId)
            {
                select firstOnly RefRecId, RefTableId, FiasGuidId from logisticsAddressFiasGuidCodes_RUDistrict
                    join City, RecId from logisticsAddressDistrict
                where logisticsAddressDistrict.REcId == logisticsAddressFiasGuidCodes_RUDistrict.RefRecId
                    && logisticsAddressDistrict.TableId == logisticsAddressFiasGuidCodes_RUDistrict.RefTableId
                    && logisticsAddressFiasGuidCodes_RUDistrict.FiasGuidId == logisticsAddressFiasGuidCodes_RUStreet.FiasParentGuidId;
            }
        }
    
        cityRecId = LogisticsAddressCity.RecId ? LogisticsAddressCity.RecId :  logisticsAddressDistrict.City;
        
        fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
        fiasPropertiesDataContract_RU.parmShortName(_fiasAddressObject.ShortName);
        fiasPropertiesDataContract_RU.parmPostalCode(_fiasAddressObject.PostalCode);
        fiasPropertiesDataContract_RU.parmIfnsfl(_fiasAddressObject.IFNSFL);
        fiasPropertiesDataContract_RU.parmTerrIfnsfl(_fiasAddressObject.TerrIFNSFL);
        fiasPropertiesDataContract_RU.parmOkato(_fiasAddressObject.OKATO);
    
        if (streetTable.RecId)
        {
            streetTable.Name = objectCode;
            streetTable.City = cityRecId;
            streetTable.District = logisticsAddressDistrict.RecId;
            streetTable.Description = _fiasAddressObject.OffName;
            streetTable.CountryRegion = regionId;
            streetTable.County = countyId;
            streetTable.State = _fiasAddressObject.RegionCode;
            streetTable.Properties = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, streetTable, streetTable.Properties);
            streetTable.update();
    
            updatedRecords++;
    
            logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = _fiasAddressObject.ParentGuid;
            this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
        }
        else
        {
            if (!logisticsAddressDistrict.RecId)
            {
                districtCode = '';
            }
    
            if (!cityRecId)
            {
                cityCode = '';
            }
    
            streetTable = this.findStreet(_fiasAddressObject, regionId, countyId, objectCode, districtCode, cityCode, '', 0, NoYes::Yes);
    
            streetTable.Name = objectCode;
            streetTable.City = cityRecId;
            streetTable.District = logisticsAddressDistrict.RecId;
            streetTable.Description = _fiasAddressObject.OffName;
            streetTable.Properties = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU, streetTable, streetTable.Properties);
    
            if (streetTable.RecId)
            {
                streetTable.update();
    
                this.deleteFromLogs(streetTable);
    
                updatedRecords++;
            }
            else
            {
                streetTable.City = cityRecId;
                streetTable.District = logisticsAddressDistrict.RecId;
                streetTable.CountryRegion = regionId;
                streetTable.County = countyId == '000' ? '' : countyId;
                streetTable.State = _fiasAddressObject.RegionCode;
                streetTable.insert();
    
                insertedRecords++;
            }
    
            if (statusesMap.exists(_fiasAddressObject.OperStatus)
                    && statusesMap.lookup(_fiasAddressObject.OperStatus) == FIASOperationType_RU::ResubordinationOperation)
            {
                select firstOnly fiasAddressObjectExst
                    where fiasAddressObjectExst.AOGuid == _fiasAddressObject.AOGuid
                        && fiasAddressObjectExst.AOId == _fiasAddressObject.PrevId;
    
                if (fiasAddressObjectExst.RecId)
                {
                    countyId = fiasAddressObjectExst.AreaCode == '000'? '' : fiasAddressObjectExst.AreaCode;
    
                    objectCode = fiasAddressObjectExst.StreetCode != '0000' ? fiasAddressObjectExst.StreetCode :
                        (fiasAddressObjectExst.ExtrCode != '0000' ? fiasAddressObjectExst.ExtrCode : fiasAddressObjectExst.PlanCode);
    
                    districtCode = '';
    
                    if (fiasAddressObjectExst.CtArCode != '000')
                    {
                        districtCode = fiasAddressObjectExst.CtArCode;
                    }
                    if (fiasAddressObjectExst.PlaceCode != '000')
                    {
                        districtCode = fiasAddressObjectExst.PlaceCode;
                    }
    
                    if ((fiasAddressObjectExst.AOLevel != '65' && !fiasAddressObjectFnd.RecId) || districtCode == '')
                    {
                        if (fiasAddressObjectExst.PlanCode != '0000')
                        {
                            districtCode = fiasAddressObjectExst.PlanCode;
                        }
                    }
    
                    cityCode = fiasAddressObjectExst.CityCode;
    
                    streetTableExst = this.findStreet(fiasAddressObjectExst, regionId, countyId,
                        objectCode, districtCode, cityCode, fiasAddressObjectExst.OffName, streetTable.RecId);
    
                    if (streetTableExst.RecId)
                    {
                        this.markAsNotFound(streetTableExst,
                            streetTable, LogisticsAddressNotFoundReason_RU::Moved);
                    }
                    else
                    {
                        logisticsAddressDistrict = this.findDistrict(fiasAddressObjectExst, regionId, countyId, districtCode, fiasAddressObjectExst.OffName);
    
                        if (logisticsAddressDistrict.RecId)
                        {
                            this.markAsNotFound(logisticsAddressDistrict,
                                streetTable, LogisticsAddressNotFoundReason_RU::Moved);
                        }
                    }
                }
            }
    
            this.createLogisticsAddressFiasGuidCodes_RU(streetTable, _fiasAddressObject.AOGuid, _fiasAddressObject.ParentGuid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processHouses</Name>
				<Source><![CDATA[
    private void processHouses()
    {
        FiasHouse                           fiasHouse;
        str                                 houseDescriptionString;
    
        FiasGuidId_RU                       fiasGuid;
        FiasGuidId_RU                       parentGuid;
    
        LogisticsAddressStreet_RU           logisticsAddressStreet;
        LogisticsAddressCity                logisticsAddressCity;
        LogisticsAddressDistrict            logisticsAddressDistrict;
        LogisticsAddressHouseNumber_RU      logisticsAddressHouseNumber_RU;
        LogisticsAddressHouseNumber_RU      logisticsAddressHouseNumber_RUFind;
        LogisticsAddressFiasGuidCodes_RU    logisticsAddressFiasGuidCodes_RU;
       
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;
    
        Set guidSet = new Set(Types::String);
    
        FiasEstateStatus                    fiasEstateStatus;
        FiasStructureStatus                 fiasStructureStatus;
        FiasImporterDataContract_RU         fiasImporterDataContract_RU;

        Query                               query;
        QueryBuildDataSource                houseQBDS;
        QueryRun                            queryRun;

        query = new Query();
        houseQBDS = query.addDataSource(tableNum(FiasHouse));
        houseQBDS.addRange(fieldNum(FiasHouse, DivType)).value(SysQuery::valueNot('2'));
        houseQBDS.addRange(fieldNum(FiasHouse, DataAreaId)).value(
            strfmt('(%1 >= %2)',
            fieldStr(FiasHouse, EndDate),
            DateTimeUtil::date(DateTimeUtil::utcNow())));

        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            fiasHouse = queryRun.get(tableNum(FiasHouse));

            try
            {
                select firstOnly logisticsAddressFiasGuidCodes_RU
                    where logisticsAddressFiasGuidCodes_RU.FiasGuidId == fiasHouse.HouseGuid
                join forUpdate logisticsAddressHouseNumber_RU
                    where logisticsAddressHouseNumber_RU.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
                        && logisticsAddressHouseNumber_RU.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
                fiasImporterDataContract_RU = this.validateParents(tableNum(FiasHouse), fieldNum(FiasHouse, AOGuid));
    
                if (fiasImporterDataContract_RU.parmIsValid())
                {
                    logisticsAddressStreet = fiasImporterDataContract_RU.parmStreet();
                    LogisticsAddressCity = fiasImporterDataContract_RU.parmCity();
                    logisticsAddressDistrict = fiasImporterDataContract_RU.parmDistrict();
    
                    logisticsAddressHouseNumber_RU.City = LogisticsAddressCity.RecId
                                                        + logisticsAddressStreet.City
                                                        + logisticsAddressDistrict.City;
                    logisticsAddressHouseNumber_RU.District = logisticsAddressDistrict.RecId
                                                            + logisticsAddressStreet.District;
                    logisticsAddressHouseNumber_RU.Name = strFmt('%1-%2-%3',
                        fiasHouse.HouseNum,
                        fiasHouse.BuildNum,
                        fiasHouse.StrucNum);
                    
                    logisticsAddressHouseNumber_RU houseTmp;
                    str keyNew = logisticsAddressHouseNumber_RU.Name;
                    int dupCount = 0;

                    select houseTmp where houseTmp.Name == keyNew;

                    while (houseTmp.RecId)
                    {
                        dupCount++;
                        keyNew = logisticsAddressHouseNumber_RU.Name + ' (' + int2Str(dupCount) + ')';
                        select houseTmp where houseTmp.Name == keyNew;
                    }

                    logisticsAddressHouseNumber_RU.Name = keyNew;
    
                    select fiasEstateStatus where fiasEstateStatus.EstStatId == fiasHouse.EstStatus;
                    houseDescriptionString = strFmt('%1 %2', fiasEstateStatus.Name, fiasHouse.HouseNum);
    
                    if (fiasHouse.BuildNum != '')
                    {
                        houseDescriptionString = houseDescriptionString + strFmt(' %1 %2', 'корпус', fiasHouse.BuildNum);
                    }
    
                    if (fiasHouse.StrucNum != '')
                    {
                        select firstonly fiasStructureStatus
                            where fiasStructureStatus.StrStatId == fiasHouse.StrStatus;
                        houseDescriptionString = houseDescriptionString
                            + strFmt(' %1 %2', fiasStructureStatus.Name, fiasHouse.StrucNum);
                    }
    
                    logisticsAddressHouseNumber_RU.HouseDescription = houseDescriptionString;
    
                    if (fiasHouse.StrucNum == '' && fiasHouse.BuildNum != '')
                    {
                        logisticsAddressHouseNumber_RU.BuildingDescription = strFmt('%1 %2 ', 'к.', fiasHouse.BuildNum);
                    }
    
                    if (fiasHouse.StrucNum != '' && fiasHouse.BuildNum == '')
                    {
                        logisticsAddressHouseNumber_RU.BuildingDescription = strFmt('%1 %2 ', 'c.', fiasHouse.StrucNum);
                    }
    
                    if (fiasHouse.StrucNum != '' && fiasHouse.BuildNum != '')
                    {
                        logisticsAddressHouseNumber_RU.BuildingDescription = strFmt('%1 %2 %3 %4', 'к.', fiasHouse.BuildNum, 'c.', fiasHouse.StrucNum);
                    }
    
                    logisticsAddressHouseNumber_RU.Street = logisticsAddressStreet.RecId;
                    logisticsAddressHouseNumber_RU.State = LogisticsAddressCity.StateId
                                                                + logisticsAddressStreet.State
                                                                + logisticsAddressDistrict.StateId_RU;
                    logisticsAddressHouseNumber_RU.County = LogisticsAddressCity.CountyId
                                                                + logisticsAddressStreet.County
                                                                + logisticsAddressDistrict.CountyId_RU;
                    logisticsAddressHouseNumber_RU.CountryRegion = regionId;
    
                    fiasGuid = fiasHouse.HouseGuid;
                    parentGuid = fiasHouse.AOGuid;
        
                    fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
                    fiasPropertiesDataContract_RU.parmShortName('');
                    fiasPropertiesDataContract_RU.parmPostalCode(fiasHouse.PostalCode);
                    fiasPropertiesDataContract_RU.parmIfnsfl(fiasHouse.IFNSFL);
                    fiasPropertiesDataContract_RU.parmTerrIfnsfl(fiasHouse.TerrIFNSFL);
                    fiasPropertiesDataContract_RU.parmOkato(fiasHouse.OKATO);
    
                    logisticsAddressHouseNumber_RU.Properties = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU,
                        logisticsAddressHouseNumber_RU,
                        logisticsAddressHouseNumber_RU.Properties);
    
                    if(logisticsAddressFiasGuidCodes_RU.RecId)
                    {
                        logisticsAddressHouseNumber_RU.update();

                        updatedRecords++;
    
                        logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = parentGuid;
                        this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
                    }
                    else
                    {
                        select firstonly forUpdate logisticsAddressHouseNumber_RUFind
                            where logisticsAddressHouseNumber_RUFind.City == LogisticsAddressCity.RecId
                                                        + logisticsAddressStreet.City
                                                        + logisticsAddressDistrict.City
                                && logisticsAddressHouseNumber_RUFind.District == logisticsAddressDistrict.RecId
                                                            + logisticsAddressStreet.District
                                && logisticsAddressHouseNumber_RUFind.Name == strFmt('%1-%2-%3',fiasHouse.HouseNum
                                    , fiasHouse.BuildNum
                                    , fiasHouse.StrucNum)
                                && logisticsAddressHouseNumber_RUFind.HouseDescription == logisticsAddressHouseNumber_RU.HouseDescription
                                && logisticsAddressHouseNumber_RUFind.BuildingDescription == logisticsAddressHouseNumber_RU.BuildingDescription
                                && logisticsAddressHouseNumber_RUFind.Street == logisticsAddressStreet.RecId
                                && logisticsAddressHouseNumber_RUFind.State == LogisticsAddressCity.StateId
                                                                            + logisticsAddressStreet.State
                                                                            + logisticsAddressDistrict.StateId_RU
                                && logisticsAddressHouseNumber_RUFind.County == LogisticsAddressCity.CountyId
                                                                            + logisticsAddressStreet.County
                                                                            + logisticsAddressDistrict.CountyId_RU
                                && logisticsAddressHouseNumber_RUFind.CountryRegion == regionId;
    
                        if (logisticsAddressHouseNumber_RUFind.RecId)
                        {
                            logisticsAddressHouseNumber_RUFind.Properties = logisticsAddressHouseNumber_RU.Properties;
    
                            logisticsAddressHouseNumber_RUFind.update();
    
                            updatedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressHouseNumber_RUFind,
                                fiasGuid,
                                parentGuid);
                        }
                        else
                        {
                            logisticsAddressHouseNumber_RU.insert();
    
                            insertedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressHouseNumber_RU,
                                fiasGuid,
                                parentGuid);
                        }
                    }
                }
            }
            catch(Exception::DuplicateKeyException)
            {
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSteads</Name>
				<Source><![CDATA[
    private void processSteads()
    {
        FiasImporterDataContract_RU fIASImporterDataContract_RU;
        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;

        FiasGuidId_RU fiasGuid, parentGuid;
    
        LogisticsAddressStreet_RU logisticsAddressStreet;
        LogisticsAddressCity LogisticsAddressCity;
        LogisticsAddressDistrict logisticsAddressDistrict;
        LogisticsAddressSteadNumber_RU logisticsAddressSteadNumber_RU;
        LogisticsAddressSteadNumber_RU logisticsAddressSteadNumber_RUFind;
        LogisticsAddressFiasGuidCodes_RU    logisticsAddressFiasGuidCodes_RU;
    
        Query                               query;
        QueryBuildDataSource                steadQBDS;
        QueryBuildRange                     qbr;
        QueryRun                            queryRun;

        query = new Query();
        steadQBDS = query.addDataSource(tableNum(FiasStead));
        qbr = steadQBDS.addRange(fieldNum(FiasStead, RegionCode));
        qbr.value(this.getRegionSetString());

        steadQBDS.addRange(fieldNum(FiasStead, DivType)).value(SysQuery::valueNot('2'));
        steadQBDS.addRange(fieldNum(FiasStead, DataAreaId)).value(
            strfmt('(%1 >= %2)',
                fieldStr(FiasStead, EndDate),
                DateTimeUtil::date(DateTimeUtil::utcNow())));

        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            FiasStead fiasStead = queryRun.get(tableNum(FiasStead));

            try
            {
                select firstOnly logisticsAddressFiasGuidCodes_RU
                    where logisticsAddressFiasGuidCodes_RU.FiasGuidId == fiasStead.SteadGuid
                join forUpdate logisticsAddressSteadNumber_RU
                    where logisticsAddressSteadNumber_RU.REcId == logisticsAddressFiasGuidCodes_RU.RefRecId
                        && logisticsAddressSteadNumber_RU.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
                fiasImporterDataContract_RU = this.validateParents(tableNum(FiasStead), fieldNum(FiasStead, ParentGuid));
    
                if (fiasImporterDataContract_RU.parmIsValid())
                {
                    logisticsAddressStreet = fiasImporterDataContract_RU.parmStreet();
                    LogisticsAddressCity = fiasImporterDataContract_RU.parmCity();
                    logisticsAddressDistrict = fiasImporterDataContract_RU.parmDistrict();
    
                    logisticsAddressSteadNumber_RU.City = LogisticsAddressCity.RecId;
                    logisticsAddressSteadNumber_RU.District = logisticsAddressDistrict.RecId;
                    logisticsAddressSteadNumber_RU.Name = fiasStead.Number;
                    logisticsAddressSteadNumber_RU.SteadDescription = fiasStead.Number;
                    logisticsAddressSteadNumber_RU.Street = logisticsAddressStreet.RecId;
                    logisticsAddressSteadNumber_RU.State = LogisticsAddressCity.StateId
                                                                + logisticsAddressStreet.State
                                                                + logisticsAddressDistrict.StateId_RU;
                    logisticsAddressSteadNumber_RU.County = LogisticsAddressCity.CountyId
                                                                + logisticsAddressStreet.County
                                                                + logisticsAddressDistrict.CountyId_RU;
                    logisticsAddressSteadNumber_RU.CountryRegion = regionId;

                    LogisticsAddressSteadNumber_RU houseTmp;
                    str keyNew = logisticsAddressSteadNumber_RU.Name;
                    int dupCount = 0;

                    select houseTmp where houseTmp.Name == keyNew;

                    while (houseTmp.RecId)
                    {
                        dupCount++;
                        keyNew = logisticsAddressSteadNumber_RU.Name + ' (' + int2Str(dupCount) + ')';
                        select houseTmp where houseTmp.Name == keyNew;
                    }

                    logisticsAddressSteadNumber_RU.Name = keyNew;
    
                    fiasGuid = fiasStead.SteadGuid;
                    parentGuid = fiasStead.ParentGuid;
        
                    fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
                    fiasPropertiesDataContract_RU.parmShortName('');
                    fiasPropertiesDataContract_RU.parmPostalCode(fiasStead.PostalCode);
                    fiasPropertiesDataContract_RU.parmIfnsfl(fiasStead.IFNSFL);
                    fiasPropertiesDataContract_RU.parmTerrIfnsfl(fiasStead.TerrIFNSFL);
                    fiasPropertiesDataContract_RU.parmOkato(fiasStead.OKATO);
    
                    logisticsAddressSteadNumber_RU.Properties = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU,
                            logisticsAddressSteadNumber_RU,
                            logisticsAddressSteadNumber_RU.Properties);
    
                    if(logisticsAddressFiasGuidCodes_RU.RecId)
                    {
                        logisticsAddressSteadNumber_RU.update();
    
                        updatedRecords++;
    
                        logisticsAddressFiasGuidCodes_RU.FiasParentGuidId = parentGuid;
                        this.updateVersionId(logisticsAddressFiasGuidCodes_RU);
                    }
                    else
                    {
                        select firstonly forUpdate logisticsAddressSteadNumber_RUFind
                            where logisticsAddressSteadNumber_RUFind.City == LogisticsAddressCity.RecId
                                                        + logisticsAddressStreet.City
                                                        + logisticsAddressDistrict.City
                                && logisticsAddressSteadNumber_RUFind.District == logisticsAddressDistrict.RecId
                                                            + logisticsAddressStreet.District
                                && logisticsAddressSteadNumber_RUFind.Name == fiasStead.Number
                                && logisticsAddressSteadNumber_RUFind.SteadDescription == fiasStead.Number
                                && logisticsAddressSteadNumber_RUFind.Street == logisticsAddressStreet.RecId
                                && logisticsAddressSteadNumber_RUFind.State == LogisticsAddressCity.StateId
                                                                + logisticsAddressStreet.State
                                                                + logisticsAddressDistrict.StateId_RU
                                && logisticsAddressSteadNumber_RUFind.County == LogisticsAddressCity.CountyId
                                                                + logisticsAddressStreet.County
                                                                + logisticsAddressDistrict.CountyId_RU
                                && logisticsAddressSteadNumber_RUFind.CountryRegion == regionId;
    
                        if (logisticsAddressSteadNumber_RUFind.RecId)
                        {
                            logisticsAddressSteadNumber_RUFind.Properties = logisticsAddressSteadNumber_RU.Properties;
    
                            logisticsAddressSteadNumber_RUFind.update();
    
                            updatedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressSteadNumber_RUFind,
                                fiasGuid,
                                parentGuid);
                        }
                        else
                        {
                            logisticsAddressSteadNumber_RU.insert();
    
                            insertedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressSteadNumber_RU,
                                fiasGuid,
                                parentGuid);
                        }
                    }
                }
            }
            catch(Exception::DuplicateKeyException)
            {
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRooms</Name>
				<Source><![CDATA[
    private void processRooms()
    {
        FiasGuidId_RU fiasGuid, parentGuid;
    
        LogisticsAddressHouseNumber_RU logisticsAddressHouseNumber_RU;
        LogisticsAddressFlatNumber_RU logisticsAddressFlatNumber_RU;
        LogisticsAddressFlatNumber_RU logisticsAddressFlatNumber_RUFnd;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RUFlat;
    
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
        FiasFlatType fiasFlatType;

        FiasPropertiesDataContract_RU fiasPropertiesDataContract_RU;

        Query                               query;
        QueryBuildDataSource                roomQBDS;
        QueryBuildRange                     qbr;
        QueryRun                            queryRun;

        query = new Query();
        roomQBDS = query.addDataSource(tableNum(FiasRoom));
        qbr = roomQBDS.addRange(fieldNum(FiasRoom, RegionCode));
        qbr.value(this.getRegionSetString());

        roomQBDS.addRange(fieldNum(FiasRoom, DataAreaId)).value(
            strfmt('(%1 >= %2)',
                fieldStr(FiasRoom, EndDate),
                DateTimeUtil::date(DateTimeUtil::utcNow())));

        queryRun = new QueryRun(query);
    
        while (queryRun.next())
        {
            FiasRoom fiasRoom = queryRun.get(tableNum(FiasRoom));

            try
            {
                select firstOnly logisticsAddressFiasGuidCodes_RUFlat
                    where logisticsAddressFiasGuidCodes_RUFlat.FiasGuidId == fiasRoom.RoomGuid
                join forUpdate logisticsAddressFlatNumber_RU
                    where logisticsAddressFlatNumber_RU.RecId == logisticsAddressFiasGuidCodes_RUFlat.RefRecId
                        && logisticsAddressFlatNumber_RU.TableId == logisticsAddressFiasGuidCodes_RUFlat.RefTableId;
    
    
                select firstOnly RecId, State from logisticsAddressHouseNumber_RU
                    join FiasGuidId, RefTableId, RefRecId from logisticsAddressFiasGuidCodes_RU
                where logisticsAddressFiasGuidCodes_RU.FiasGuidId == fiasRoom.HouseGuid
                    && logisticsAddressFiasGuidCodes_RU.RefTableId == logisticsAddressHouseNumber_RU.TableId
                    && logisticsAddressFiasGuidCodes_RU.RefRecId == logisticsAddressHouseNumber_RU.RecId;
    
                if (logisticsAddressHouseNumber_RU.RecId && regionSet.in(logisticsAddressHouseNumber_RU.State))
                {
                    logisticsAddressFlatNumber_RU.House = logisticsAddressHouseNumber_RU.RecId;
                    logisticsAddressFlatNumber_RU.Name = fiasRoom.FlatNumber;

                    select firstonly fiasFlatType
                        where fiasFlatType.FlTypeId == fiasRoom.FlatType;
                    logisticsAddressFlatNumber_RU.Description = strFmt('%1 %2', fiasFlatType.ShortName, fiasRoom.FlatNumber);
    
                    fiasGuid = fiasRoom.RoomGuid;
                    parentGuid = fiasRoom.HouseGuid;
        
                    fiasPropertiesDataContract_RU = new FiasPropertiesDataContract_RU();
                    fiasPropertiesDataContract_RU.parmShortName('');
                    fiasPropertiesDataContract_RU.parmPostalCode(fiasRoom.PostalCode);
                    fiasPropertiesDataContract_RU.parmIfnsfl('');
                    fiasPropertiesDataContract_RU.parmTerrIfnsfl('');
                    fiasPropertiesDataContract_RU.parmOkato('');
    
                    logisticsAddressFlatNumber_RU.Properties = this.initOrUpdateProperties_RU(fiasPropertiesDataContract_RU,
                        logisticsAddressFlatNumber_RU,
                        logisticsAddressFlatNumber_RU.Properties);
    
                    if (logisticsAddressFiasGuidCodes_RUFlat.RecId)
                    {
                        logisticsAddressFlatNumber_RU.update();
    
                        updatedRecords++;
    
                        this.updateVersionId(logisticsAddressFiasGuidCodes_RUFlat);
                    }
                    else
                    {
                        select firstOnly forupdate logisticsAddressFlatNumber_RUFnd
                            where logisticsAddressFlatNumber_RUFnd.House == logisticsAddressHouseNumber_RU.RecId
                                && logisticsAddressFlatNumber_RUFnd.Name == logisticsAddressFlatNumber_RU.Name
                                && logisticsAddressFlatNumber_RUFnd.Description == logisticsAddressFlatNumber_RU.Description;
    
                        if (logisticsAddressFlatNumber_RUFnd.RecId)
                        {
                            logisticsAddressFlatNumber_RUFnd.Properties = logisticsAddressFlatNumber_RU.Properties;
                            logisticsAddressFlatNumber_RUFnd.update();
    
                            updatedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressFlatNumber_RUFnd,
                                fiasGuid,
                                parentGuid);
                        }
                        else
                        {
                            logisticsAddressFlatNumber_RU.insert();
    
                            insertedRecords++;
    
                            this.createLogisticsAddressFiasGuidCodes_RU(logisticsAddressFlatNumber_RU,
                                fiasGuid,
                                parentGuid);
                        }
                    }
                }
            }
    
            catch (Exception::DuplicateKeyException)
            {
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogs</Name>
				<Source><![CDATA[
    private void createLogs()
    {
        LogisticsAddressImportLog_RU   logisticsAddressImportLog;
    
        if( insertedRecords != 0 || updatedRecords != 0 )
        {
            logisticsAddressImportLog.InsertedRecords = insertedRecords;
            logisticsAddressImportLog.UpdatedRecords = updatedRecords;
            logisticsAddressImportLog.LogDateTime = DateTimeUtil::utcNow();
            logisticsAddressImportLog.VersionId = versionId;
            logisticsAddressImportLog.insert();
        }
        else
        {
            info("@SYP4889720");
        }
    
        if (isFullImport)
        {
            this.fillNotFoundLog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNotFoundLog</Name>
				<Source><![CDATA[
    private void fillNotFoundLog()
    {
        LogisticsAddressHouseNumber_RU logisticsAddressHouseNumber_RU;
        LogisticsAddressSteadNumber_RU logisticsAddressSteadNumber_RU;
        LogisticsAddressFlatNumber_RU logisticsAddressFlatNumber_RU;
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
    
        this.insertNotFoundLog(tableNum(LogisticsAddressCity),
            fieldNum(LogisticsAddressCity, StateId));
    
        this.insertNotFoundLog(tableNum(LogisticsAddressCounty),
            fieldNum(logisticsAddressCounty, StateId));
    
        this.insertNotFoundLog(tableNum(LogisticsAddressDistrict),
            fieldNum(logisticsAddressDistrict, StateId_RU));
    
        this.insertNotFoundLog(tableNum(LogisticsAddressState),
            fieldNum(logisticsAddressState, StateId));
    
        this.insertNotFoundLog(tableNum(LogisticsAddressStreet_RU),
            fieldNum(logisticsAddressStreet_RU, State));
    
        while select logisticsAddressHouseNumber_RU
            exists join logisticsAddressFiasGuidCodes_RU
        where logisticsAddressFiasGuidCodes_RU.RefRecId == logisticsAddressHouseNumber_RU.RecId
           && logisticsAddressFiasGuidCodes_RU.RefTableId == logisticsAddressHouseNumber_RU.TableId
           && logisticsAddressFiasGuidCodes_RU.VersionId != versionId
        {
            this.markAsNotFound(logisticsAddressHouseNumber_RU, null, LogisticsAddressNotFoundReason_RU::NotFound);
        }
    
        while select logisticsAddressSteadNumber_RU
            exists join logisticsAddressFiasGuidCodes_RU
        where logisticsAddressFiasGuidCodes_RU.RefRecId == logisticsAddressSteadNumber_RU.RecId
           && logisticsAddressFiasGuidCodes_RU.RefTableId == logisticsAddressSteadNumber_RU.TableId
           && logisticsAddressFiasGuidCodes_RU.VersionId != versionId
        {
            this.markAsNotFound(logisticsAddressSteadNumber_RU, null, LogisticsAddressNotFoundReason_RU::NotFound);
        }
    
        while select logisticsAddressFlatNumber_RU
            exists join logisticsAddressFiasGuidCodes_RU
        where logisticsAddressFiasGuidCodes_RU.RefRecId == logisticsAddressFlatNumber_RU.RecId
           && logisticsAddressFiasGuidCodes_RU.RefTableId == logisticsAddressFlatNumber_RU.TableId
           && logisticsAddressFiasGuidCodes_RU.VersionId != versionId
        {
            this.markAsNotFound(logisticsAddressFlatNumber_RU, null, LogisticsAddressNotFoundReason_RU::NotFound);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNotFoundLog</Name>
				<Source><![CDATA[
    private void insertNotFoundLog(TableId _tableId,
        FieldId _stateField)
    {
        Common addressTable = new DictTable(_tableId).makeRecord();
    
        LogisticsAddressNotFoundRecords_RU logisticsAddressNotFoundRecords_RU;
    
        LogisticsAddressFiasGuidCodes_RU   logisticsAddressFiasGuidCodes_RU;
        LogisticsAddressFiasGuidCodes_RU   logisticsAddressFiasGuidCodes_RUFind;
    
        FiasAddressObject fiasAddressObject;
    
        while select RecId, TableId from addressTable
            notexists join logisticsAddressFiasGuidCodes_RU
        where logisticsAddressFiasGuidCodes_RU.RefREcId == addressTable.RecId
           && logisticsAddressFiasGuidCodes_RU.RefTableId == addressTable.TableId
           && logisticsAddressFiasGuidCodes_RU.VersionId == versionId
        {
            if (regionSet.in(addressTable.(_stateField)))
            {
                select firstOnly logisticsAddressNotFoundRecords_RU
                    where logisticsAddressNotFoundRecords_RU.RefRecId == addressTable.RecId
                       && logisticsAddressNotFoundRecords_RU.RefTableId == addressTable.TableId;
    
                if (logisticsAddressNotFoundRecords_RU.RecId)
                {
                    continue;
                }
    
                logisticsAddressNotFoundRecords_RU.RefRecId = addressTable.RecId;
    
                select firstOnly RecId, FiasGuidId, VersionId from logisticsAddressFiasGuidCodes_RUFind
                    where logisticsAddressFiasGuidCodes_RUFind.RefREcId == addressTable.RecId
                        && logisticsAddressFiasGuidCodes_RUFind.TableId == addressTable.TableId;
    
                if (logisticsAddressFiasGuidCodes_RUFind.RecId)
                {
                    if (!logisticsAddressNotFoundRecords_RU.RecId)
                    {
                        select firstOnly RecId, RegionCode from fiasAddressObject
                            where fiasAddressObject.AOGuid == logisticsAddressFiasGuidCodes_RUFind.FiasGuidId;
    
                        if (fiasAddressObject.RecId)
                        {
                            logisticsAddressNotFoundRecords_RU.Description = fiasAddressObject.RegionCode;
                        }
                    }
    
                    logisticsAddressNotFoundRecords_RU.VersionId = logisticsAddressFiasGuidCodes_RUFind.VersionId;
                }
    
                logisticsAddressNotFoundRecords_RU.LogisticsAddressElement = this.getElement(addressTable.TableId);
                logisticsAddressNotFoundRecords_RU.RefTableId = addressTable.TableId;
                logisticsAddressNotFoundRecords_RU.LogisticsAddressNotFoundReason_RU = logisticsAddressNotFoundRecords_RU.VersionId == 0 ?
                    LogisticsAddressNotFoundReason_RU::NotFound : LogisticsAddressNotFoundReason_RU::Replaced;
    
                logisticsAddressNotFoundRecords_RU.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hanles the whole process of FIAS import.
    /// </summary>
    /// <param name = "_regionSet">Set of regions to import.</param>
    /// <param name = "_regionId">Region ID of current country.</param>
    /// <param name = "_versionId">Version ID of current import derived from AS_ADDROBJ file name.</param>
    /// <param name = "_isFullImport">This can be either full or delta import.</param>
    /// <param name = "_isLoadHouseStead">Is it required to load houses and steads.</param>
    /// <param name = "_isLoadRoom">Is it required to load rooms.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void run(
        Set _regionSet,
        LogisticsAddressCountryRegionId _regionId,
        LogisticsAddressImportVersionId_RU _versionId,
        NoYes _isFullImport,
        NoYes _isLoadHouseStead = NoYes::Yes,
        NoYes _isLoadRoom = NoYes::Yes)
    {
        Set regionSetTmp;
        SetEnumerator setEnum;
        FiasImporter_RU fiasImporter_RU = new FIASImporter_RU(_regionSet, _regionId, _versionId, _isFullImport);
        
        ttsbegin;
        
        fiasImporter_RU.updateStateSet();

        fIASImporter_RU.initStatusesMap();

        fiasImporter_RU.processAddressObjects();

        if (_isLoadHouseStead)
        {
            fiasImporter_RU.processHouses();
            fiasImporter_RU.processSteads();
        }

        if (_isLoadRoom)
        {
            fiasImporter_RU.processRooms();
        }

        fiasImporter_RU.createLogs();

        infolog.clear();

        info("@GLS105894");

        LogisticsAddressUpdater_RU::updateAll(_regionId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParents</Name>
				<Source><![CDATA[
    private FiasImporterDataContract_RU validateParents(int _tableNum, int _fieldNum)
    {
        LogisticsAddressFiasGuidCodes_RU logisticsAddressFiasGuidCodes_RU;
        FiasImporterDataContract_RU fiasImporterDataContract_RU = new FiasImporterDataContract_RU();
    
        LogisticsAddressStreet_RU logisticsAddressStreet;
        LogisticsAddressCity LogisticsAddressCity;
        LogisticsAddressDistrict logisticsAddressDistrict;
    
        NoYes isValid;

        Query query = new Query();
        QueryBuildDataSource mainQBDS = query.addDataSource(tableNum(LogisticsAddressFiasGuidCodes_RU));
        QueryBuildDataSource specificQBDS = mainQBDS.addDataSource(_tableNum);
        specificQBDS.firstOnly(true);
        specificQBDS.joinMode(JoinMode::ExistsJoin);
        specificQBDS.addLink(fieldNum(LogisticsAddressFiasGuidCodes_RU, FiasGuidId), _fieldNum, mainQBDS.name());
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            logisticsAddressFiasGuidCodes_RU = queryRun.get(tableNum(LogisticsAddressFiasGuidCodes_RU));
        }
    
        select firstOnly LogisticsAddressCity
            where LogisticsAddressCity.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && LogisticsAddressCity.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
        select firstOnly logisticsAddressDistrict
            where logisticsAddressDistrict.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && logisticsAddressDistrict.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
        select firstOnly logisticsAddressStreet
            where logisticsAddressStreet.RecId == logisticsAddressFiasGuidCodes_RU.RefRecId
               && logisticsAddressStreet.TableId == logisticsAddressFiasGuidCodes_RU.RefTableId;
    
        isValid =  ((LogisticsAddressCity.RecId && regionSet.in(LogisticsAddressCity.StateId))
            || (logisticsAddressDistrict.RecId && regionSet.in(logisticsAddressDistrict.StateId_RU))
            || (logisticsAddressStreet.RecId && regionSet.in(logisticsAddressStreet.State)));
    
        fiasImporterDataContract_RU.parmCity(LogisticsAddressCity);
        fiasImporterDataContract_RU.parmDistrict(logisticsAddressDistrict);
        fiasImporterDataContract_RU.parmStreet(logisticsAddressStreet);
        fiasImporterDataContract_RU.parmIsValid(isValid);
    
        return fiasImporterDataContract_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>