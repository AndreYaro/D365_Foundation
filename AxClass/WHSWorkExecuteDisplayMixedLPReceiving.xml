<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes the mixed license plate receiving mobile device flow.
/// </summary>
public abstract class WHSWorkExecuteDisplayMixedLPReceiving extends WHSWorkExecuteDisplay
{
    boolean overDeliveryError;
    boolean mixedLPHasLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelClicked</Name>
				<Source><![CDATA[
    protected void cancelClicked()
    {
        if (step == 1 &&
            pass.hasValue(#ItemId))
        {
            pass.remove(#ItemId);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlItemId:
                
                if (!workLine)
                {
                    InventInventItemSearch          localInventItemSearch       = InventInventItemSearch::construct();
                    InventInventItemSearchResult    localInventItemSearchResult = localInventItemSearch.search(_control.parmData());
                    Qty                             itemQty                     = localInventItemSearchResult.parmQty();
                    InventDim                       itemInventDim               = InventDim::find(localInventItemSearchResult.parmInventDimId());
                    boolean                         ret;

                    switch (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).MixedLPReceivingMode)
                    {
                        case WHSMixedLPReceivingMode::TOItemReceiving:
                            ret = this.processItemIdForTransferOrderItemReceiving(_control);
                            break;

                        case WHSMixedLPReceivingMode::LoadItemReceiving:
                            ret = this.processItemIdForLoadItemReceiving(_control);
                            break;

                        case WHSMixedLPReceivingMode::POItemReceiving:
                            ret = this.processItemIdForPurchaseOrderItemReceiving(_control);
                            break;

                        case WHSMixedLPReceivingMode::ReturnOrderReceiving:
                            ret = this.processItemIdForReturnOrderReceiving(_control);
                            break;
                    }

                    if (!ret)
                    {
                        return ret;
                    }

                }

                var fieldValues = _control.parmContext().fieldValues;
                var controlData = _control.parmContext().controlData;

                if (controlData.qtyDefaultedFromScan
                    &&	controlData.parmSaveUOMValue())
                {
                    fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::MixedLPBarcodeUsed, 1);
                }
                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPOReceivingAndPutawayExecuteMode</Name>
				<Source><![CDATA[
    protected WHSWorkExecuteMode getPOReceivingAndPutawayExecuteMode()
    {
        return WHSWorkExecuteMode::MixedLPReceivingAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetDispositionCode</Name>
				<Source><![CDATA[
    private container buildGetDispositionCode(container _con)
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX359", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode == NoYes::Yes)
        {
            ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#ContainerType));
        }

        ret  = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransType</Name>
				<Source><![CDATA[
    protected abstract InventTransType getInventTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLine</Name>
				<Source><![CDATA[
    protected abstract Common getOrderLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPInfo</Name>
				<Source><![CDATA[
    protected abstract container buildLPInfo(WHSLicensePlateId _licensePlateId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPList</Name>
				<Source><![CDATA[
    private container buildLPList(
        container   _con,
        boolean     _modifyClicked,
        str         _extraText = '')
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX359", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode == NoYes::Yes)
        {
            ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#ContainerType));
        }

        ret += this.buildLPInfo(pass.lookup(#LicensePlateId));

        if (_modifyClicked
        ||  pass.exists(#MixedLPLineNum))
        {
            ret += [this.buildControl(#RFText, #MixedLPLineNum, "@WAX:LineToModify", 1, '', extendedTypeNum(LineNum), '', 0)];
            pass.insert(#MixedLPLineNum, '');
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (!_modifyClicked
        &&  !pass.exists(#MixedLPLineNum)
        &&  mixedLPHasLines)
        {
            ret += [this.buildControl(#RFButton, #RFModify, "@SYS71028", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassWithSavedValues</Name>
				<Source><![CDATA[
    protected abstract WhsrfPassthrough resetPassWithSavedValues(container _con)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModifyItemQtyStr</Name>
				<Source><![CDATA[
    protected abstract str buildModifyItemQtyStr(
        WHSLicensePlateId _licensePlateId,
        Line              _mixedLineNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMixedLicensePlate</Name>
				<Source><![CDATA[
    protected abstract void validateExistingMixedLicensePlate(WHSMixedLicensePlateReceipt _mixedLP)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModifyItemQty</Name>
				<Source><![CDATA[
    private container buildModifyItemQty(
        container   _con,
        str         _extraText = '')
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX359", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode == NoYes::Yes)
        {
            ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#ContainerType));
        }

        str lpInfo = this.buildModifyItemQtyStr(pass.lookup(#LicensePlateId), pass.parmMixedLPLineNum());

        ret += [this.buildControl(#RFLabel, '1', lpInfo, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #NewQty, "@WAX:MixedLPNewQty", 1, '', extendedTypeNum(Qty), '', 0)];

        WHSMixedLicensePlateReceiptLine mixedLPReceiptLine = WHSMixedLicensePlateReceiptLine::findOpenLPLineNum(pass.lookup(#LicensePlateId), pass.parmMixedLPLineNum());
        
        ItemId itemId;
        if (this is WHSWorkExecuteDisplayMixedLPReturnOrderReceiving)
        {
            itemId = SalesLine::findInventTransId(mixedLPReceiptLine.InventTransId).ItemId;
        }
        else
        {
            itemId = mixedLPReceiptLine.getItemId();
        }

        if (PdsGlobal::pdsIsCWItem(itemId) && !WHSInventTable::isCatchWeightTagTracked(itemId))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight, "@WAX:MixedLPNewCaptureWeight", 1, '', extendedTypeNum(WHSCapturedWeight), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPContainerControls</Name>
				<Source><![CDATA[
    protected container buildLPContainerControls(
        boolean _includeContainerType,
        boolean _enableContainerType = true)
    {
        container ret;

        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX359", 1, pass.lookup(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];

        if (_includeContainerType)
        {
            _enableContainerType = _enableContainerType ? !(this.receivingOrderProvider(false) && this.receivingOrderProvider().hasOrderNum(pass)) : false;
            ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), _enableContainerType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistrationButtonList</Name>
				<Source><![CDATA[
    protected container buildNextRegistrationButtonList()
    {
        container ret;

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected abstract container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected abstract container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOrderNumValue</Name>
				<Source><![CDATA[
    protected abstract boolean noOrderNumValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDeliveryMixedLP</Name>
				<Source><![CDATA[
    protected abstract boolean checkOverDeliveryMixedLP(WHSMixedLicensePlateReceiptLine	_mixedLPLines)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLPReceiptLine</Name>
				<Source><![CDATA[
    protected abstract void createLPReceiptLine(
        Common			_common,
        InventDimId		_inventDimId,
        MenuItemName	_menuItemName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptAtWarehouse</Name>
				<Source><![CDATA[
    protected abstract void checkReceiptAtWarehouse(
        Common				_common,
        InventLocationId	_inventLocationId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    protected abstract InventDim getInventDim(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNum</Name>
				<Source><![CDATA[
    [SysObsolete('Use setOrderNumFromWorkLine instead', false, 20\07\2023)]
    protected abstract void setOrderNum(InventTransId _inventTransId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNumFromWorkLine</Name>
				<Source><![CDATA[
    protected void setOrderNumFromWorkLine(WHSWorkLine _workLine)
    {
        this.setOrderNum(_workLine.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentQtyUOM</Name>
				<Source><![CDATA[
    protected abstract container setCurrentQtyUOM(
        container _con,
        Common	  _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightItem(Common _common)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            throw error(Error::missingOverload(funcName()));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTaggedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item being received is catch weight tag enabled.
    /// </summary>
    /// <param name = "_common">Source document record being received against.</param>
    /// <returns>True if item being received is catch weight tag enabled; otherwise False;</returns>
    [Hookable(false)]
    internal boolean isCatchWeightTaggedItem(Common _common)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            throw error(Error::missingOverload(funcName()));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(
        container _con,
        str       _buttonClicked = '')
    {
        WHSRFMenuItemTable      rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode, rfMenuItem.MenuItemName);
        WHSRFPassthrough        fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        WMSLocationId           newLocationId;
        WHSReceiptId            saveReceiptId;
        Common                  orderLine;
        WHSLoadId               saveLoadId;
        Set                     excludeLocationSet = new Set(Types::String);
        container               ret = conNull();
        container               con = _con;
        container               tmpPass;
        container               tmpFieldValues;
        container               tmpCon;
        boolean                 recall;
        boolean                 complete;

        WHSRFPassthrough globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);
        int hasError = this.hasError(_con);

        if (_buttonClicked == #RFLPComplete
        ||  _buttonClicked == #RFList
        ||  _buttonClicked == #RFModify)
        {
            step = 4;
        }
        else if (_buttonClicked == #RFNoLocation)      // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationSet = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationSet = this.buildLocationListFromStr(workLine.wmsLocationId);
            }

            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationSet);
            excludeLocationSet = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationSet));

            if (pass.exists(#PrevStep))
            {
                step = pass.parmPrevStep();
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFException)
        {
            step = #ReceivingExceptionStep1;
        }
        else if (_buttonClicked == #RFOverride)
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }
        else if (_buttonClicked == #RFSkip)
        {
            workTable = WHSWorkTable::find(pass.lookup(#WorkId));

            WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());
            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

            pass.insert(#DetermineStep, 1);
        }

        int startInfologLine = infologLine() + 1;

        WHSWorkExecuteDisplayReceivingOrderProvider orderProvider = this.receivingOrderProvider(false);
        switch (step)
        {
            // Get receiving LP or build screen for next item on same LP.
            case 0:
                pass.insert(#Initiation, '1');

                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                }

                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                if (pass.hasValue(#LicensePlateId))
                {
                    ret = this.buildNextRegistration(ret);
                }
                else
                {
                    ret = this.buildGetLicensePlate(ret);
                }
                step = 1;
                break;

            // Build screen to capture information about item being received on the LP, and start capturing tracking dimensions if required.
            case 1:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                if (_buttonClicked == #RFChangePO
                ||  _buttonClicked == WHSWorkExecuteDisplayMixedLPControls::ChangeTONum
                ||  _buttonClicked == WHSWorkExecuteDisplayMixedLPControls::ChangeRMANum)
                {
                    if (orderProvider)
                    {
                        orderProvider.removeOrderNum(pass);
                    }
                    pass.remove(#TONum);
                    pass.remove(#RMANum);

                    con = this.buildRegistering(ret, '', false);

                    [ret, complete] = this.processFieldValues(con, fieldValues);
                    break;
                }

                boolean removeContainer = !globalPass.hasValue(#LicensePlateId);

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (_buttonClicked == #RFCancel)
                {
                    this.clearPassProductDimensions(pass.lookupStr(#ItemId));
                    pass.remove(#ItemId);
                    fieldValues.remove(#ItemId);
                    if (orderProvider)
                    {
                        orderProvider.removeLineNum(pass);
                        orderProvider.removeLineNum(fieldValues);
                    }
                    pass.remove(#TOLineNum);
                    fieldValues.remove(#TOLineNum);
                    pass.remove(#Qty);
                    fieldValues.remove(#Qty);
                    pass.remove(#CurrentQty);
                    fieldValues.remove(#CurrentQty);
                    pass.remove(#CurrentUOM);
                    fieldValues.remove(#CurrentUOM);
                }
                else if (hasError) // When click Cancel button, we don't display error.
                {
                    ret = con;
                    break;
                }

                if (!pass.hasValue(#LicensePlateId))
                {
                    ret = this.buildGetLicensePlate(conNull());
                    break;
                }

                WHSMixedLicensePlateReceipt mixedLP = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(pass.lookup(#LicensePlateId));

                if (mixedLP
                    && (mixedLP.ReceiptStatus == WHSMixedLicensePlateReceiptStatus::Processing
                        || (mixedLP.ReceiptStatus == WHSMixedLicensePlateReceiptStatus::Error 
                            && !WHSMixedLPAllowUseOfLPWithErrorStatusFlight::instance().isEnabled())))
                {
                    throw error(strFmt("@WAX:LPUsedInDeferredReceivingError", mixedLP.LicensePlateId));
                }

                if (mixedLP)
                {
                    this.validateExistingMixedLicensePlate(mixedLP);
                }
                
                if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId))
                &&  this.noOrderNumValue())
                {
                    WHSUserId lpUserId = WHSMixedLicensePlateReceipt::getUserIdForOpenLP(pass.lookup(#LicensePlateId));

                    if (!lpUserId)
                    {
                        // Update LP records to have current user
                        WHSMixedLicensePlateReceipt::updateUser(pass.lookup(#LicensePlateId), pass.lookup(#UserId));
                    }
                    else if (lpUserId != pass.lookup(#UserId))
                    {
                        // If LP records have a different user associated to them throw error.
                        ret = this.buildGetLicensePlate(this.addErrorLabel(conNull(), "@WAX:MixedLPMultiUserError", WHSRFColorText::Error));
                        break;
                    }

                    // If found existing records, use the receipt Id from them.
                    saveReceiptId = mixedLP.ReceiptId;
                    pass.insert(#ReceiptId, saveReceiptId);

                    if (mixedLP.ContainerTypeCode)
                    {
                        pass.insert(#ContainerType, mixedLP.ContainerTypeCode);
                    }

                    // Only have a load Id if receiving mode is load item receiving, otherwise it would have thrown an error.
                    if (mixedLP.LoadId)
                    {
                        pass.insert(#LoadId, mixedLP.LoadId);
                    }

                    ret = this.buildNextRegistration(conNull());
                    break;
                }

                // Only want to remove container if it wasn't manually changed from the original default value
                if (removeContainer
                &&  pass.lookupStr(#ContainerType) == WHSLicensePlate::getDefaultContainerType('',
                                                                                                pass.lookup(#MenuItem),
                                                                                                pass.lookup(#UserId),
                                                                                                pass.lookupStr(#InventLocationId),
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                ''))
                {
                    pass.remove(#ContainerType);
                }

                con = this.buildRegistering(ret, '');
    
                if (pass.exists(#Qty) && fieldValues.exists(#Qty) && pass.lookupNum(#Qty) != fieldValues.lookupNum(#Qty))
                {
                    fieldValues.insert(#Qty, pass.lookup(#Qty));
                }

                // Could have determined the PO number for load item receiving.
                if (orderProvider && orderProvider.hasOrderNum(pass)
                &&  orderProvider.orderNum(pass) != orderProvider.orderNum(fieldValues))
                {
                    orderProvider.setOrderNum(fieldValues, orderProvider.orderNum(pass));
                }

                if (orderProvider && orderProvider.hasLineNum(pass)
                &&  orderProvider.lineNum(pass) != orderProvider.lineNum(fieldValues))
                {
                    orderProvider.setLineNum(fieldValues, orderProvider.lineNum(pass));
                }

                if (pass.exists(#ItemId)
                &&  pass.lookup(#ItemId) != fieldValues.lookupStr(#ItemId))
                {
                    fieldValues.insert(#ItemId, pass.lookup(#ItemId));
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                    &&  this.canGetOrderLine()
                    &&  pass.hasValue(#Qty)
                    &&  pass.hasValue(#SelectedValueUOM)
                    &&  _buttonClicked != #RFCancel)
                    {
                        orderLine = this.getOrderLine();

						if (this.isCatchWeightTaggedItem(orderLine))
                        {
                            throw error("@WAX:Error_WHSMixedLPReceivingDoesNotSupportCWTag");
                        }

                        this.checkReceiptAtWarehouse(orderLine, pass.lookup(#InventLocationId));
                        
                        if (WHSReceiptOrderLine::isReceiptOrderLine(orderLine)
                        && !this.validateCreateReceivingWorkForOrderLine(orderLine))
                        {
                            ret = conIns(ret, 1, conPeek(this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error), 1));
                            break;
                        }

                        if (!pass.hasValue(#ReceiptId))
                        {
                            saveReceiptId = WHSMixedLicensePlateReceipt::getReceiptIdForOpenLP(pass.lookup(#LicensePlateId));

                            pass.insert(#ReceiptId, saveReceiptId ? saveReceiptId : NumberSeq::newGetNum(WHSParameters::numRefWHSReceiptId()).num());
                        }

                        boolean overDeliveryBreak;

                        [ret, overDeliveryBreak] = this.setCurrentQtyUOM(ret, orderLine);

                        if (overDeliveryBreak)
                        {
                            break;
                        }

                        step = 2;

                        if (pass.hasValue(WHSWorkExecuteDisplayPieceByPieceControls::MixedLPBarcodeUsed))
                        {
                            pass.remove(WHSWorkExecuteDisplayPieceByPieceControls::MixedLPBarcodeUsed);
                            ret = this.updateModeStepPass(ret, mode, step, pass);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(ret, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                        }
                    }
                }
                break;

            case 2:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                orderLine = this.getOrderLine();
				
				if (this.isCatchWeightTaggedItem(orderLine))
                {
                    throw error("@WAX:Error_WHSMixedLPReceivingDoesNotSupportCWTag");
                }

                boolean overDeliveryBreak;
                [ret, overDeliveryBreak] = this.setCurrentQtyUOM(ret, orderLine);

                if (overDeliveryBreak)
                {
                    break;
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    boolean captureTrackingDimensions = this.captureTrackingDimensions(pass.lookup(#ItemId));

                    if (complete)
                    {
                        if (captureTrackingDimensions
                        &&  this.getInventTransType() != InventTransType::Sales
                        &&  (!pass.exists(#DimRunningQty)
                        ||   pass.lookupNum(#DimRunningQty) != 0))
                        {
                            if (this.mustCaptureSerialOnReceipt(pass.lookupStr(#ItemId)))
                            {
                                pass.insert(#CaptureSerial, true);
                            }
                            
                            ret = this.displayTrackingDimForm(_con, _buttonClicked, this.getInventDim(orderLine).inventDimId, this.getInventTransType());
                            break;
                        }

                        orderLine = this.getOrderLine();

                        InventDim trackingDim = this.initializeTrackingDimensionByOrderLine(orderLine);

                        if (!captureTrackingDimensions
                        ||  this.getInventTransType() == InventTransType::Sales)
                        {
                            // Create record in received table.
                            this.createLPReceiptLine(orderLine,
                                                     trackingDim.inventDimId,
                                                     rfMenuItem.MenuItemName);
                        }

                        WHSLicensePlateId saveLPId = pass.lookup(#LicensePlateId);
                        saveReceiptId = pass.lookup(#ReceiptId);
                        WHSContainerTypeCode saveContainerType = pass.lookupStr(#ContainerType);

                        pass = this.resetPassWithSavedValues(con);

                        pass.insert(#LicensePlateId, saveLPId);
                        pass.insert(#ReceiptId, saveReceiptId);

                        if (saveContainerType)
                        {
                            pass.insert(#ContainerType, saveContainerType);
                        }

                        con = conPoke(con, 2, pass.pack());
                        step = 0;

                        con = conPoke(con, 1, [mode, step]);
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                        ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(conPeek(ret, 2));

                        break;
                    }
                    else if (captureTrackingDimensions)
                    {
                        ret = this.buildPORecTrackingDimensions(conNull(), pass.lookup(#ItemId), pass.lookupNum(#DimQty));
                    }
                }
                break;

            // Build and display list of items on current LP.
            case 4:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                if (orderProvider)
                {
                    pass.insert(orderProvider.lineKey(), '');
                    con = this.setControlDataFromContainer(con, orderProvider.lineKey(), '');
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                if (pass.hasValue(#MixedLPLineNum))
                {
                    ret = this.buildModifyItemQty(conNull());
                    step = 7;
                    break;
                }

                ret = this.buildLPList(conNull(), _buttonClicked == #RFModify);

                if (_buttonClicked == #RFLPComplete)
                {
                    step = 6;
                }
                else if (_buttonClicked != #RFModify
                        &&  !pass.exists(#MixedLPLineNum))
                {
                    step = 0;
                }
                break;

            // Complete the license plate, create work
            case 6:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                if (rfMenuItem.ShowDisposition
                ||  rfMenuItem.MixedLPReceivingMode == WHSMixedLPReceivingMode::ReturnOrderReceiving)
                {
                    con = this.buildGetDispositionCode(conNull());
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                    &&  ((!rfMenuItem.ShowDisposition
                    &&    rfMenuItem.MixedLPReceivingMode != WHSMixedLPReceivingMode::ReturnOrderReceiving)
                    ||   pass.exists(#Disposition)))
                    {
                        WHSLicensePlate licensePlate = WHSLicensePlate::createLicensePlate(pass.lookup(#LicensePlateId), true, pass.lookupStr(#ContainerType));

                        WHSWorkCreateMixedLPReceiving workCreateMixedLP;
                        WHSWorkBuildId workBuildId;

                        if (WHSWorkExecuteDisplayMixedLPReceivingWorkReceiptStatusUpdaterFlight::instance().isEnabled())
                        {
                            WHSMixedLicensePlateReceipt mixedLicensePlateReceipt = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(licensePlate.LicensePlateId, true);

                            using (var updater = WHSMixedLicensePlateReceiptStatusUpdater::newForMixedLPReceipt(mixedLicensePlateReceipt.RecId))
                            {
                                workCreateMixedLP = this.initializeWorkCreateMixedLPReceiving(licensePlate, rfMenuItem);
                                workBuildId = workCreateMixedLP.createWork();
                                updater.setSuccessful();
                            }
                        }
                        else
                        {
                            workCreateMixedLP = this.initializeWorkCreateMixedLPReceiving(licensePlate, rfMenuItem);
                            workBuildId = workCreateMixedLP.createWork();
                        }

                        if (this.mustBuildLicensePlateLabels(rfMenuItem))
                        {
                            WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId).WorkId,
                                                                                                    null,
                                                                                                    pass.lookup(#MenuItem),
                                                                                                    pass.lookup(#UserId));

                            labelBuild.buildAllLicensePlateLabels(pass.lookup(#LicensePlateId));
                        }

                        if (mode == this.getPOReceivingAndPutawayExecuteMode())
                        {
                            this.removeTrackingDimensionsFromPass(pass.lookupStr(#ItemId));
                            pass.remove(#DimQty);
                            pass.insert(#DimUOM, InventTableModule::find(pass.lookupStr(#ItemId), ModuleInventPurchSales::Invent).UnitId);

                            workLine = WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId);

                            if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                            {
                                throw error("@WAX1459");
                            }
                            workTable = workLine.whsWorkTable();

                            if (workLine)
                            {
                                pass.insert(#DetermineStep, 1);
                                con = this.updateModeStepPass(con, mode, step, pass);
                                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                                pass = new WHSRFPassthrough(Types::String, Types::String);
                                pass = WHSRFPassthrough::create(tmpPass);

                                pass.insert(#MenuItem, rfMenuItem.MenuItemName);

                                con = this.updateModeStepPass(ret, mode, step, pass);
                                con = conPoke(con, 1, [mode, step]);
                                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                pass.insert(#DoingWork, 1);
                                if (pass.exists(#WorkId) && pass.exists(#LineNum))
                                {
                                    workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                                    {
                                        throw error("@WAX1459");
                                    }
                                    workTable = workLine.whsWorkTable();
                                }

                                if (step == #StepOne
                                &&  !pass.exists(#RebuildForm))
                                {
                                    step = #StepMax;
                                    pass.insert(#DetermineStep, 1);
                                }

                                if (recall)
                                {
                                    con = this.updateModeStepPass(con, mode, step, pass);
                                    con = conPoke(con, 1, [mode, step]);
                                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                    ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                                    pass = WHSRFPassthrough::create(conPeek(ret, 2));
                                    if (pass.exists(#WorkId) && pass.exists(#LineNum))
                                    {
                                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                        workTable = workLine.whsWorkTable();
                                    }
                                }
                            }
                        }
                        else
                        {
                            pass = this.resetPassthrough(con, false);
                            pass.insert(#WorkComplete, 1);

                            con = conPoke(con, 2, pass.pack());
                            step = 0;

                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            break;
                        }
                    }
                }
                break;

            // Case to modify the qty on the existing record.
            case 7:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                WHSMixedLicensePlateReceiptLine mixedLPLines = WHSMixedLicensePlateReceiptLine::findOpenLPLineNum(pass.lookup(#LicensePlateId), str2int(pass.lookup(#MixedLPLineNum)));
                boolean isCWItem = PdsGlobal::pdsIsCWItem(mixedLPLines.getItemId());

                if (isCWItem && pass.lookupNum(#NewQty) > 0 && !fieldValues.exists(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight))
                {
                    fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight, '');
                }
                
                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        if (isCWItem && !PDSCatchWeight::validateInventQty(mixedLPLines.getItemId(), pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight), pass.lookupNum(#NewQty), false))
                        {
                            throw error(strFmt("@WAX:Error_InvalidCatchWeight", pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight), pass.lookupNum(#NewQty), mixedLPLines.getItemId()));
                        }
                        
                        if (pass.lookupNum(#NewQty) <= 0)
                        {
                            ttsBegin;

                            mixedLPLines.selectForUpdate(true);
                            mixedLPLines.delete();

                            ttsCommit;
                        }
                        // Total open qty would include the amount of current record, so only need to add the difference of the new qty
                        else if (pass.lookupNum(#NewQty) > mixedLPLines.InventQty
                             &&  this.checkOverDeliveryMixedLP(mixedLPLines))
                        {
                            ret = this.buildModifyItemQty(this.addErrorLabel(conNull(), "@WAX2142", WHSRFColorText::Error));
                            break;
                        }
                        else
                        {
                            ttsBegin;

                            mixedLPLines.selectForUpdate(true);

                            mixedLPLines.InventQty = pass.parmNewQty();

                            if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight))
                            {
                                mixedLPLines.CapturedWeight = pass.parmNewCaptureWeight();
                            }
                            mixedLPLines.update();

                            ttsCommit;
                        }

                        step = 0;
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                        ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                        pass.remove(#NewQty);
                        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::NewCaptureWeight);
                        pass.remove(#MixedLPLineNum);
                    }
                }
                break;

            case #TrackingDimDetailsStep:
                [hasError, ret] = this.processTrackingDimDetails(2, hasError, con, fieldValues, startInfologLine, false, this.getInventTransType());
                break;

            case #VendBatchDetailsStep:
                [hasError, ret] = this.processVendorBatchDetails(hasError, con, fieldValues);
                break;

            default:
                // If skip was clicked we already found work table and the next line.
                if (pass.exists(#WorkId)
                &&  _buttonClicked != #RFSkip)
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    workTable = workLine.whsWorkTable();
                }

                WHSWorkLine preWorkLine;
                boolean		autoConfirmOn  = WHSRFAutoConfirm::isAutoConfirmationEnabled(rfMenuItem.MenuItemName, workLine.WorkType);
                boolean     groupedPutAway = this.isGroupedPut(rfMenuItem);

                int			totalWorkLines = WHSWorkLine::getTotalNumberOfWorkLinesForWorkType(workLine.WorkId, workLine.WorkType);
                int			runningWorkLineCount;

                do
                {
                    // Pass must have correct order number for executing work.
                    this.setOrderNumFromWorkLine(workLine);

                    con = conPoke(con, 2, pass.pack());
                    WHSRFPassthrough tmpMap = pass;
                    WHSWorkBuildId workBuildId = workTable.WorkBuildId;
                    preWorkLine = workLine;
                    [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                    pass = new WHSRFPassthrough(Types::String, Types::String);
                    pass = WHSRFPassthrough::create(tmpPass);
                    pass = this.combineMaps(tmpMap, pass);

                    pass.insert(#MenuItem, rfMenuItem.MenuItemName);

                    if (step == #Restart)
                    {
                        // Check for additional work to execute in case of cross docking
                        workLine = WHSWorkTable::findOpenCrossDockWorkByWorkBuildId(workBuildId, userId);

                        if (workLine.RecId != 0)
                        {
                            if (pass.exists(#WorkComplete))
                            {
                                pass.remove(#WorkComplete);
                            }

                            this.restartForCrossDockInbound();
                            this.setOrderNumFromWorkLine(workLine);
                            con = this.updateModeStepPass(con, mode, step, pass);
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                            pass = WHSRFPassthrough::newReset(pass);
                            pass = WHSRFPassthrough::create(tmpPass);
                        }
                        else
                        {
                            pass = WHSRFPassthrough::newReset(pass);
                            pass.insert(#WorkComplete, 1);

                            con = this.buildGetLicensePlate(conNull());
                            step = 0;
                        }
                    }
                    else if (step == #StepOne)
                    {
                        if (!pass.exists(#RebuildForm))
                        {
                            step = #StepMax;
                            pass.insert(#DetermineStep, 1);
                        }
                        else
                        {
                            ret = this.buildGetLicensePlate(conNull());
                            pass.remove(#RebuildForm);
                            step = 1;
                        }
                    }

                    runningWorkLineCount++;

                    if (runningWorkLineCount > totalWorkLines)
                    {
                        throw error(strFmt("@WAX:WorkProcessingPotentialError", workLine.WorkId, workLine.LineNum));
                    }
                }
                while (recall
                    && (autoConfirmOn || groupedPutAway)
                    && step					== #StepMax
                    && workLine.WorkType	== preWorkLine.WorkType
                    && workLine.LineNum		!= preWorkLine.LineNum);

                if (recall)
                {
                    con = this.updateModeStepPass(con, mode, step, pass);
                    con = conPoke(con, 1, [mode, step]);
                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                    ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                    pass = new WHSRFPassthrough(Types::String, Types::String);
                    pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    if (pass.exists(#WorkId) && pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                        workTable = workLine.whsWorkTable();
                    }
                }
                break;
        }

        if (step > 4
        &&  step != #StepMax)
        {
            ret = this.addButtons(ret);
        }
        ret = this.addCancelButton(ret, 1, true);

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBuildLicensePlateLabels</Name>
				<Source><![CDATA[
    private boolean mustBuildLicensePlateLabels(WHSRFMenuItemTable _rfMenuItem)
    {
        if (!WHSReturnReceivingSkipPrintForScrapFlight::instance().isEnabled())
        {
            return _rfMenuItem.PrintLabel;
        }

        if (_rfMenuItem.PrintLabel)
        {
            switch (_rfMenuItem.MixedLPReceivingMode)
            {
                case WHSMixedLPReceivingMode::ReturnOrderReceiving:
                    return WHSDispositionTable::isReturnDispositionCodeSupportingLicensePlateLabelCreation(pass.parmDispositionCode());

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTrackingDimensionByOrderLine</Name>
				<Source><![CDATA[
    protected InventDim initializeTrackingDimensionByOrderLine(Common _orderLine)
    {
        InventDim trackingDim = pass.createInventDimFromPass();
        boolean mustInitInventStatusId = !trackingDim.InventStatusId;
        boolean mustInitInventOwnerId_RU = !trackingDim.InventOwnerId_RU && WHSOwnerFieldIsSetOnMixedLPFlight::instance().isEnabled();

        if (mustInitInventStatusId || mustInitInventOwnerId_RU)
        {
            InventDim orderLineInventDim = this.getInventDim(_orderLine);

            if (mustInitInventStatusId)
            {
                trackingDim.InventStatusId = orderLineInventDim.InventStatusId;
            }

            if (mustInitInventOwnerId_RU)
            {
                trackingDim.InventOwnerId_RU = orderLineInventDim.InventOwnerId_RU;
            }

        }

        trackingDim.wMSLocationId = InventLocation::find(trackingDim.InventLocationId).wmsLocationIdDefaultReceipt;
        trackingDim = InventDim::findOrCreate(trackingDim);

        return trackingDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkCreateMixedLPReceiving</Name>
				<Source><![CDATA[
    protected WHSWorkCreateMixedLPReceiving initializeWorkCreateMixedLPReceiving(WHSLicensePlate _licensePlate, WHSRFMenuItemTable _rfMenuItem)
    {
        var workCreateMixedLP = new WHSWorkCreateMixedLPReceiving(_licensePlate);
        workCreateMixedLP.parmInventLocationId(pass.lookup(#InventLocationId));
        workCreateMixedLP.parmReceiptId(pass.lookup(#ReceiptId));
        workCreateMixedLP.parmLoadId(pass.lookupStr(#LoadId));
        workCreateMixedLP.parmTargetLicensePlateId(pass.lookup(#LicensePlateId));
        workCreateMixedLP.parmCreatedBy(userId);
        workCreateMixedLP.parmWorkTemplateCode(_rfMenuItem.WorkTemplateCode);
        workCreateMixedLP.parmDispositionCode(pass.lookupStr(#Disposition));

        return workCreateMixedLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductDimensionList</Name>
				<Source><![CDATA[
    protected str getProductDimensionList(
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        str             ret;

        InventDim inventDim = InventDim::find(_inventDimId);

        ListEnumerator le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            FieldId dimFieldId = le.current();

            ret += strFmt('\n' + "@WAX3192", fieldId2pname(tableNum(InventDim), dimFieldId), inventDim.(dimFieldId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrackingInfoList</Name>
				<Source><![CDATA[
    protected str getTrackingInfoList(
        ItemId      _itemId,
        InventDimId _dimId)
    {
        str             ret;

        InventDim inventDim = InventDim::find(_dimId);

        ListEnumerator le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(_itemId).trackingDimensionGroup()).activeFields().getEnumerator();

        while (le.moveNext())
        {
            FieldId dimFieldId = le.current();

            ret += strFmt('\n' + "@WAX3192", fieldId2pname(tableNum(InventDim), dimFieldId), inventDim.(dimFieldId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupedPut</Name>
				<Source><![CDATA[
    private boolean isGroupedPut(WHSRFMenuItemTable _rfMenuItem)
    {
        return workLine.WorkType == WHSWorkType::Put
               && _rfMenuItem.GroupPutaway;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCatchWeight</Name>
				<Source><![CDATA[
    protected container buildCatchWeight(container _con, ItemId _itemId)
    {
        container ret = _con;
        boolean shouldCaptureAggregateWeight = WHSInventTable::shouldCaptureAggregateWeight(_itemId);

        if (PdsGlobal::pdsIsCWItem(_itemId)
                && (shouldCaptureAggregateWeight || (!shouldCaptureAggregateWeight && !this.captureTrackingDimensions(_itemId))))
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetOrderLine</Name>
				<Source><![CDATA[
    protected boolean canGetOrderLine()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>