<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DebtCreditReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25DebtCreditReverse extends RTax25DebtCreditAmortisation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransAmounts</Name>
				<Source><![CDATA[
    protected void calcTransAmounts()
    {
        hopelessDebtMST = custVendTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxAmounts</Name>
				<Source><![CDATA[
    #define.Two(2)
    protected void postTaxAmounts()
    {
        LedgerVoucherTransObject      ledgerVoucherTransObject;
        LedgerVoucherObject           ledgerVoucherObject;
        CustVendTrans                 custVendTransOrig;
        CustVendCalcSettledAmounts_RU custVendCalcSettledAmounts;
        Map                           mapSettledAmounts;
        MapIterator                   it;
        BookStructSmallVATAmounts_RU  settledAmounts;
        TaxAmount                     totalTaxAmount;
        TaxCode                       taxCode;
        CurrencyExchangeHelper        currencyExchHelper;

        if (custVendTrans.TableId == tablenum(CustTrans))
        {
            custVendTransOrig = CustTrans::find(custVendTrans.OffsetRecId);
        }
        else
        {
            custVendTransOrig = VendTrans::find(custVendTrans.OffsetRecId);
        }
        custVendCalcSettledAmounts = CustVendCalcSettledAmounts_RU::construct(custVendTransOrig);
        custVendCalcSettledAmounts.calcSettledAmounts();
        custVendCalcSettledAmounts.calcNewSettlement(-hopelessDebtMST, 0);

        mapSettledAmounts = custVendCalcSettledAmounts.mapLastSettledAmountsMST();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        currencyExchHelper  = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                      ledgerVoucherObject.parmAccountingDate());
        it  = new MapIterator(mapSettledAmounts);

        while (it.more())
        {
            settledAmounts = BookStructSmallVATAmounts_RU::create(it.value());

            taxCode = conpeek(it.key(), 1);

            if (settledAmounts.taxAmountVAT() && taxCode)
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    LedgerPostingType::Tax,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(this.findTaxLedgerDimension(custVendTransOrig, taxCode), defaultDimension),
                    currencyCode,
                    -settledAmounts.taxAmountVAT(),
                    currencyExchHelper);

                ledgerVoucherTransObject.parmSourceTableId(custVendTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(custVendTrans.RecId);

                ledgerVoucherTransObject.parmTransTxt(transTxt);

                ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }

            totalTaxAmount += settledAmounts.taxAmountVAT();

            it.next();
        }

        if (totalTaxAmount)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::Tax,
                LedgerDimensionFacade::serviceCreateLedgerDimension(revenueExpenseLedgerDimension, defaultDimension),
                currencyCode,
                totalTaxAmount,
                currencyExchHelper);

            ledgerVoucherTransObject.parmSourceTableId(custVendTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(custVendTrans.RecId);

            ledgerVoucherTransObject.parmTransTxt(transTxt);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (ledgerBondClient)
        {
            if (ledgerBondClient.currentLogLength() >= #Two) // we have a debt with taxes
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }
            ledgerBondClient.removeCurrentLogObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtCreditReverse construct()
    {
        return new RTax25DebtCreditReverse();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>