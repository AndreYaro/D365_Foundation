<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This <c>WHSWaveLabelTranslator</c> class handles translating label layouts to a string with values.
/// </summary>
public final class WHSWaveLabelTranslator
{
    private WHSWaveLabelLayout				labelLayout;
    private List							workList;
    private List							workLineList;
    private WHSWaveLabelBuildId				waveLabelBuildId;
    private WHSLabelHeader					inputHeader;
    private WHSLabelHeader					outputHeader;
    private WHSLabelBody					inputBody;
    private WHSLabelBody					outputBody;
    private WHSLabelFooter					inputFooter;
    private WHSLabelFooter					outputFooter;
    private WHSZPL							outputStr;
    private List							labelList;
    private QueryRun						layoutQueryRun;
    private container						waveLabelIdCon;
    private WHSWaveLabelTypeId				waveLabelTypeId;
    private RefRecId						waveLabelHistoryRecId;
    private WHSWorkBuildId		            workBuildId;
    private	WhsDocumentRoutingTranslator	licensePlateLabelTranslator;
    private static boolean WHSPrintLabelPerfOptimizationsFlightEnabled = WHSPrintLabelPerfOptimizationsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of label translator class.
    /// </summary>
    /// <param name = "_labelTemplateRecId">The label template line that will be translated.</param>
    /// <param name = "_labelLayoutId">The label layout that will be translated.</param>
    /// <param name = "_workBuildId">The workBuildId to range works.</param>
    /// <param name = "_workLineList">A list of <c>WHSWorkLine</c> records the labels will be printed for.</param>
    /// <param name = "_waveLabelBuildId">The wave label build id.</param>
    private void new(
        RefRecId             _labelTemplateRecId,
        WHSWaveLabelLayoutId _labelLayoutId,
        WHSWorkBuildId		 _workBuildId,
        List                 _workLineList,
        WHSWaveLabelBuildId  _waveLabelBuildId)
    {
        labelList   = new List(Types::String);

        labelLayout		= WHSWaveLabelLayout::find(_labelLayoutId);
        waveLabelTypeId = WHSWaveLabelTemplate::findRecId(_labelTemplateRecId).WaveLabelTypeId;
        workBuildId		= _workBuildId;
        workLineList	= _workLineList;
        waveLabelBuildId = _waveLabelBuildId;
        
        inputHeader = labelLayout.LabelHeader;
        inputBody   = labelLayout.LabelBody;
        inputFooter = labelLayout.LabelFooter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorksAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of label translator class.
    /// </summary>
    /// <param name = "_labelTemplateRecId">The label template line that will be translated.</param>
    /// <param name = "_labelLayoutId">The label layout that will be translated.</param>
    /// <param name = "_workList">A list of <c>WHSWorkTable</c> records the labels will be printed for.</param>
    /// <param name = "_workLineList">A list of <c>WHSWorkLine</c> records the labels will be printed for.</param>
    /// <param name = "_waveLabelBuildId">The wave label build id.</param>
    /// <returns>An instance of the <c>WHSWaveLabelTranslator</c> class.</returns>
    [SysObsolete('Use WHSWaveLabelTranslator::newFromWorkLines() instead.', false, 6\3\2020)]
	public static WHSWaveLabelTranslator newFromWorksAndLines(
        RefRecId                _labelTemplateRecId,
        WHSWaveLabelLayoutId    _labelLayoutId,
        List                    _workList,
        List                    _workLineList,
        WHSWaveLabelBuildId     _waveLabelBuildId)
    {
        return WHSWaveLabelTranslator::newFromWorkLines(_labelTemplateRecId, _labelLayoutId, '', _workLineList, _waveLabelBuildId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of label translator class.
    /// </summary>
    /// <param name = "_labelTemplateRecId">The label template line that will be translated.</param>
    /// <param name = "_labelLayoutId">The label layout that will be translated.</param>
    /// <param name = "_workBuildId">The workBuildId to range works.</param>
    /// <param name = "_workLineList">A list of <c>WHSWorkLine</c> records the labels will be printed for.</param>
    /// <param name = "_waveLabelBuildId">The wave label build id.</param>
    /// <returns>An instance of the <c>WHSWaveLabelTranslator</c> class.</returns>
    public static WHSWaveLabelTranslator newFromWorkLines(
        RefRecId                _labelTemplateRecId,
        WHSWaveLabelLayoutId    _labelLayoutId,
        WHSWorkBuildId			_workBuildId,
        List                    _workLineList,
        WHSWaveLabelBuildId     _waveLabelBuildId)
    {
        return new WHSWaveLabelTranslator(_labelTemplateRecId, _labelLayoutId, _workBuildId, _workLineList, _waveLabelBuildId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates label layout text replacing placeholders with query values.
    /// </summary>
    /// <returns>
    /// A list of translated labels to be printed.
    /// </returns>
    public List translateLabel()
    {
        layoutQueryRun = this.queryRun();

        if (layoutQueryRun.next())
        {
            licensePlateLabelTranslator = WhsDocumentRoutingTranslator::construct();

			// Methods that store off global translations of label sections
            this.translateLabelHeader();
            this.translateLabelFooter();
            this.translateLabelBody();
        }
    
        return labelList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    private QueryRun queryRun()
    {
        QueryRun queryRun = new QueryRun(labelLayout.PackedQueryRun);
        queryRun.query().dataSourceTable(tableNum(WHSWaveLabel)).addRange(fieldNum(WHSWaveLabel, WaveLabelType)).value(queryValue(waveLabelTypeId));
        
		if (workBuildId)
        {
            queryRun.query().dataSourceTable(tableNum(WHSWorkTable)).addRange(fieldNum(WHSWorkTable, WorkBuildId)).value(queryValue(workBuildId));
        }

        this.addWorkLineRecIdRange(queryRun);
        this.addSelectionFields(queryRun);
        WHSPrintLabels::addBuildIdRange(queryRun, waveLabelBuildId);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectionFields</Name>
				<Source><![CDATA[
    private void addSelectionFields(QueryRun _queryRun)
    {
        Map fieldMap = WhsDocumentRoutingTranslator::fieldsRequiredToTranslate(inputHeader+inputBody+inputFooter);

        int	len = _queryRun.query().dataSourceCount();

        for (int i = 1; i <= len; i++)
        {
            QueryBuildDataSource qbds = _queryRun.query().dataSourceNo(i);
            if (qbds &&
                qbds.enabled() &&
                qbds.joinMode() == JoinMode::InnerJoin)
            {
                TableName tableName = tableId2Name(qbds.table());

                if (fieldMap.exists(tableName))
                {
                    Set fields = fieldMap.lookup(tableName);

                    if (fields)
                    {
                        var enum = fields.getEnumerator();
                        while (enum.moveNext())
                        {
                            FieldId fieldId = fieldName2Id(qbds.table(), enum.current());
                            if (fieldId)
                            {
                                qbds.addSelectionField(fieldId);
                            }
                        }
                    }
                }
                else
                {
                    // Add one field to limit number of returned fields
                    qbds.addSelectionField(fieldNum(Common, RecId));
                }
            }
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkLineRecIdRange</Name>
				<Source><![CDATA[
	private void addWorkLineRecIdRange(QueryRun	_queryRun)
    {
        TmpRecIdFilter	tmpRecIdFilter;
        ListEnumerator	workLineListEnumerator = workLineList.getEnumerator();

        while (workLineListEnumerator.moveNext())
        {
            tmpRecIdFilter.RefTableId = tableNum(WHSWorkLine);
            tmpRecIdFilter.RefRecId = workLineListEnumerator.current();
            tmpRecIdFilter.insert();
        }

        if (tmpRecIdFilter)
        {
            QueryBuildDataSource tmpRecIdFilterQbds = SysQuery::findOrCreateDataSource(_queryRun.query(), tableNum(TmpRecIdFilter), tableNum(WHSWorkLine));
            tmpRecIdFilterQbds.joinMode(JoinMode::ExistsJoin);
            tmpRecIdFilterQbds.fetchMode(QueryFetchMode::One2One);
            tmpRecIdFilterQbds.addLink(fieldNum(WHSWorkLine, RecId), fieldNum(TmpRecIdFilter, RefRecId));
            _queryRun.setRecord(tmpRecIdFilter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelCommon</Name>
				<Source><![CDATA[
    private int translateLabelCommon(
        WHSZPL  _input,
        int     _startPos,
        int     _length,
        boolean _header,
        boolean _body,
        boolean _footer)
    {
        int startPos = strFind(_input, WHSLabelConstants::PlaceholderChar, _startPos, _length);
        int endPos   = strFind(_input, WHSLabelConstants::PlaceholderChar, startPos + 1, _length);
    
        // Store off placeholder string to retrieve query data
        str placeholder = subStr(_input, startPos, (endPos - startPos) + 1);
        str queryValue  = this.placeholderValue(placeholder);

        if (_header)
        {
            outputHeader = strReplace(outputHeader, placeholder, queryValue);
        }

        if (_body)
        {
            outputBody = strReplace(outputBody, placeholder, queryValue);
        }

        if (_footer)
        {
            outputFooter = strReplace(outputFooter, placeholder, queryValue);
        }

        return endPos + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeholderValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get query data for placeholder
    /// </summary>
    /// <param name = "_placeholder">placeholder</param>
    /// <param name = "_queryRun">The query run object.</param>
    /// <returns>Query data</returns>
    private str placeholderValue(str _placeholder, QueryRun _queryRun = layoutQueryRun)
    {
        str queryValue;
        int placeholderLength   = strLen(_placeholder);
        int separatorPos        = strFind(_placeholder, WHSLabelConstants::SeparatorChar, 1, placeholderLength);
    
        Debug::assert(separatorPos > 0);

        // Retrieve table information from placeholder
        TableName	tableName = subStr(_placeholder, 2, separatorPos - 2);
        Common		record = _queryRun.get(tableName2Id(tableName));

        if (record)
        {
			FieldName fieldName = subStr(_placeholder, separatorPos + 1, placeholderLength - separatorPos - 1);
			FieldId	  fieldId = fieldName2Id(tableName2Id(tableName), fieldName);
            
			queryValue = strFmt('%1', record.(fieldId));
        }
		else
        {
            queryValue = '';
        }

        return queryValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateAllPlaceholders</Name>
				<Source><![CDATA[
    private WHSZPL translateAllPlaceholders(WHSZPL _input, QueryRun _queryRun = layoutQueryRun)
    {
        WHSZPL	ret;
        int		len = _queryRun.query().dataSourceCount();

        for (int i = 1; i <= len; i++)
        {
            QueryBuildDataSource qbds = _queryRun.query().dataSourceNo(i);
            if (qbds && qbds.enabled())
            {
                if (WhsWaveLabelTranslator::WHSPrintLabelPerfOptimizationsFlightEnabled)
                {
                    Common record = _queryRun.getNo(i);
                    licensePlateLabelTranslator.withRecord(record, tableId2Name(record.TableId));
                }
                else
                {
                    Common record = _queryRun.getNo(qbds.id());
                    licensePlateLabelTranslator.withRecord(record, tableId2Name(record.TableId));
                }
            }
        }

        ret = licensePlateLabelTranslator.translate(_input);
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates label body text replacing placeholders with query values.
    /// </summary>
    protected void translateLabelBody()
    {
        int     startPos = 1;
        int     length = strLen(inputBody);
        boolean repeatableSectionUsed;
    
        // Check to see if layout contains repeatable sections
        if (strScan(inputBody, WHSLabelConstants::RowStart, 1, length))
        {
            this.updateRepeatableSection();
            repeatableSectionUsed = true;
        }
        else
        {
            if (layoutQueryRun.query().dataSourceTable(tableNum(WHSWaveLabel)))
            {
                WHSWaveLabel waveLabel = layoutQueryRun.get(tableNum(WHSWaveLabel));
                if (waveLabel.RecId)
                {
                    this.updateWaveLabelWithListNumber(waveLabel.WaveLabelId);
                }
            }
        }
    
        // Update remaining placeholder values outside of the repeatable section
        outputBody = this.translateAllPlaceholders(inputBody);

        if (repeatableSectionUsed == false || outputBody != '')
        {
            labelList.addEnd(outputHeader + outputBody + outputFooter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates label footer text replacing placeholders with query values.
    /// </summary>
    protected void translateLabelFooter()
    {
        outputFooter = this.translateAllPlaceholders(inputFooter);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateLabelHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates label header text replacing placeholders with query values.
    /// </summary>
    protected void translateLabelHeader()
    {
        outputHeader = this.translateAllPlaceholders(inputHeader);
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataPlaceHolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data placeholder values in a string with query data.
    /// </summary>
    /// <param name="_inputStr">
    /// The input string whose placeholders will be updated.
    /// </param>
    /// <param name="_queryRun">
    /// The query run iteration whose data will be substituted in the string.
    /// </param>
    /// <returns>
    /// A string updated with query data.
    /// </returns>
    private str updateDataPlaceHolder(
        str         _inputStr,
        QueryRun    _queryRun)
    {
        str updatedStr = _inputStr;
        int startPos = 1;
        int length = strLen(_inputStr);
    
        // Update remaining placeholder values outside of the repeatable section
        while (strFind(_inputStr, WHSLabelConstants::PlaceholderChar, startPos, length))
        {
            // Determine positions of query value placeholder
            startPos    = strFind(_inputStr, WHSLabelConstants::PlaceholderChar, startPos, length);
            int endPos  = strFind(_inputStr, WHSLabelConstants::PlaceholderChar, startPos + 1, length);
    
            // Store off placeholder string to retrieve query data
            str placeholder         = subStr(_inputStr, startPos, (endPos - startPos) + 1);
    
            // Replace placeholder value with query data
            str queryValue  = this.placeholderValue(placeholder, _queryRun);
            updatedStr = strReplace(updatedStr, placeholder, queryValue);
    
            startPos = endPos + 1;
        }
    
        return updatedStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeightPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces height position placeholder with integer value.
    /// </summary>
    /// <param name="_inputStr">
    /// The input string that will be updated.
    /// </param>
    /// <param name="_height">
    /// The height value that will replace the placeholder.
    /// </param>
    /// <returns>
    /// A string updated with height values.
    /// </returns>
    private str updateHeightPlaceholder(
        str _inputStr,
        int _height)
    {
        return strReplace(_inputStr, WHSLabelConstants::YPos, int2str(_height));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRepeatableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the repeatable sections of label body.
    /// </summary>
    private void updateRepeatableSection()
    {
        // Convert input string to container split by new lines
        container strCon = str2con(inputBody, WHSLabelConstants::NewLine);
        int       length = conLen(strCon);
        str       finalStr;
        int       rowCount;
        container rowCon;
        QueryRun  rowQueryRun = this.queryRun();

        // Iterate over string rows looking for repeatable sections
        for (int i = 1; i <= length; ++i)
        {
            str rowStr = conPeek(strCon, i);
    
            if (strStartsWith(rowStr, WHSLabelConstants::RowStart))
            {
                // Initialize row settings
                int rowStrLen        = strLen(rowStr);
                int labelRowStartPos = strFind(rowStr, WHSLabelConstants::QuoteChar, 1, rowStrLen);
                int labelRowEndPos   = strFind(rowStr, WHSLabelConstants::QuoteChar, rowStrLen, -rowStrLen);
                str labelRow         = subStr(rowStr, labelRowStartPos + 1, (labelRowEndPos - labelRowStartPos) - 1);
    
                WHSWaveLabelLayoutRow labelLayoutRow = WHSWaveLabelLayoutRow::find(labelRow, labelLayout.RecId);
                int heightCounter  = labelLayoutRow.LabelRowStartPosition;
    
                ++i;
    
                rowStr = conPeek(strCon, i);

                str     headingStr;
                boolean headingSection;
                
                // Build up container of rows within repeatable section
                while (!strStartsWith(rowStr, WHSLabelConstants::RowEnd))
                {
                    if (strStartsWith(strLTrim(rowStr), WHSLabelConstants::HeadingStart))
                    {
                        headingSection = true;
                    }
                    else if (strStartsWith(strLTrim(rowStr), WHSLabelConstants::HeadingEnd))
                    {
                        headingSection = false;
                    }
                    else
                    {
                        rowCon += rowStr;
    
                        if (headingSection)
                        {
                            headingStr += rowStr;
                        }
                    }
    
                    ++i;
    
                    // Avoid infinite loop if repeatable section is incorrectly formatted.
                    if (i > length)
                    {
                        break;
                    }
    
                    rowStr = conPeek(strCon, i);
                }
    
                int rowConLen = conLen(rowCon);

                boolean waveLabelUsed = tableName2Id(labelLayoutRow.LabelRowTableName) == tableNum(WHSWaveLabel);

                while (rowQueryRun.next())
                {
                    // Duplicate lines within section for each change of configured table within query
                    if (rowQueryRun.changed(tableName2Id(labelLayoutRow.LabelRowTableName)))
                    {
                        for (int j = 1; j <= rowConLen; ++j)
                        {
                            str newRowStr = conPeek(rowCon, j);
    
                            // Replace data placeholders with query data if they exist
                            newRowStr = this.translateAllPlaceholders(newRowStr, rowQueryRun);
    
                            // Replace row height placeholder if it exists
                            newRowStr = this.updateHeightPlaceholder(newRowStr, heightCounter);
    
                            finalStr += newRowStr + WHSLabelConstants::NewLine;
                        }
    
                        ++rowCount;
                        heightCounter -= labelLayoutRow.LabelRowHeight;
    
                        // If number of rows per page reached, store off label and continue translating
                        if (rowCount == labelLayoutRow.LabelRowsPerPage)
                        {
                            finalStr = this.translateAllPlaceholders(finalStr, rowQueryRun);
                            
                            // Insert complete label into global list
                            labelList.addEnd(outputHeader + finalStr + outputFooter);

                            // Reset variables for overflow labels
                            heightCounter   = labelLayoutRow.LabelRowStartPosition;
                            rowCount        = 0;
                            finalStr        = headingStr;
                        }

                        if (waveLabelUsed)
                        {
                            WHSWaveLabel waveLabel = rowQueryRun.get(tableNum(WHSWaveLabel));
                            this.updateWaveLabelWithListNumber(waveLabel.WaveLabelId);
                        }
                    }
                }
            }
            else
            {
                // If repeatable section not found no need to change output string
                finalStr += rowStr + WHSLabelConstants::NewLine;
            }
        }
    
        inputBody = finalStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaveLabelWithListNumber</Name>
				<Source><![CDATA[
    private void updateWaveLabelWithListNumber(WHSWaveLabelId _waveLabelId)
    {
        if (_waveLabelId)
        {
            waveLabelIdCon += _waveLabelId;
                            
            ttsbegin;
            WHSWaveLabel waveLabel = WHSWaveLabel::find(_waveLabelId, true);

            waveLabel.ZPLListNumber = labelList.elements();
            waveLabel.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWaveLabelIdCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the container with wave label ids that are used in zpl label
    /// </summary>
    /// <returns>Container with wave label ids</returns>
    internal container getWaveLabelIdCon()
    {
        return waveLabelIdCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>