<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundWorkLoadChartQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>WHSOutboundWorkLoadChartQueryBuilder</c> based on the filter selection generates 
/// the dynamic query and populate the data into the charts data source.
/// </summary>
final internal class WHSOutboundWorkLoadChartQueryBuilder
{
    private WHSOutboundWorkLoadChartFilter filter;
    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSOutboundWorkLoadChartFilter _filter)
    {
        filter = _filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an intance of the <c>WHSOutboundWorkLoadChartQueryBuilder</c> class.
    /// </summary>
    /// <param name = "_filter">Filter buffer.</param>
    /// <returns>An instance of the <c>WHSOutboundWorkLoadChartQueryBuilder</c> class.</returns>
    [Hookable(false)]
    internal static WHSOutboundWorkLoadChartQueryBuilder init(WHSOutboundWorkLoadChartFilter _filter)
    {
        WHSOutboundWorkLoadChartQueryBuilder queryGenerator = new WHSOutboundWorkLoadChartQueryBuilder(_filter);        
        return queryGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dynamically builds the query based on user selection and populates the data into the charts datasource.
    /// </summary>
    /// <param name = "_outboundWorkLoadChart">Datasource to be populated</param>
    /// <returns>Datasource for the chart</returns>
    [Hookable(false)]
    internal WHSTmpOutboundWorkLoadChart populateChartData(WHSTmpOutboundWorkLoadChart _outboundWorkLoadChart)
    {
        QueryRun queryRun = this.buildQueryRun();

        boolean isXAxisFieldEnum = WHSOutboundWorkLoadChartHelper::isFieldEnumType(this.filter.XAxisGroupTableId, this.filter.XAxisGroupFieldId);
        boolean isXAxis2FieldEnum = WHSOutboundWorkLoadChartHelper::isFieldEnumType(this.filter.XAxisValueTableId, this.filter.XAxisValueFieldId);

        int numberOfRecords;

        WHSTmpOutboundWorkLoadChart workLoadChartDataTmp;
        workLoadChartDataTmp.setTmpData(_outboundWorkLoadChart);

        using (var activityContext = this.instrumentationLogger().outboundWorkLoadChartActivities().populateChartData())
        {
            ttsbegin;

            delete_from workLoadChartDataTmp;

            while (queryRun.next())
            {
                Common table1 = queryRun.get(this.filter.XAxisGroupTableId);
                Common table2 = queryRun.get(this.filter.XAxisValueTableId);

                if (table1.RecId)
                {
                    workLoadChartDataTmp.YAxis = table1.RecId;
                }
                else if (table2.RecId)
                {
                    workLoadChartDataTmp.YAxis = table2.RecId;
                }

                if (this.filter.XAxisGroupTableId && this.filter.XAxisGroupFieldId)
                {
                    if (isXAxisFieldEnum)
                    {
                        workLoadChartDataTmp.XAxis = enum2Str(table1.(this.filter.XAxisGroupFieldId));
                    }
                    else
                    {
                        workLoadChartDataTmp.XAxis = table1.(this.filter.XAxisGroupFieldId)
                            ? table1.(this.filter.XAxisGroupFieldId) : "@WAX:OutboundChartBlankText";
                    }
                }

                if (this.filter.XAxisValueTableId && this.filter.XAxisValueFieldId)
                {
                    if (isXAxis2FieldEnum)
                    {
                        workLoadChartDataTmp.XAxis2 = enum2Str(table2.(this.filter.XAxisValueFieldId));
                    }
                    else
                    {
                        workLoadChartDataTmp.XAxis2 = table2.(this.filter.XAxisValueFieldId)
                            ? table2.(this.filter.XAxisValueFieldId) : "@WAX:OutboundChartBlankText";
                    }
                }

                this.setYAxis2Value(workLoadChartDataTmp, queryRun);

                workLoadChartDataTmp.insert();
                numberOfRecords++;
            }

            ttscommit;

            this.instrumentationLogger().outboundWorkLoadChartActivities().populatedChartData(activityContext, numberOfRecords);
        }

        return workLoadChartDataTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setYAxis2Value</Name>
				<Source><![CDATA[
    private void setYAxis2Value(WHSTmpOutboundWorkLoadChart _workLoadChartDataTmp, QueryRun _queryRun)
    {
        if (this.filter.DisplayLevel == WHSChartDisplayLevel::OpenHeaders)
        {
            WHSOutboundWorkLoadActualAndEstimatedTimeView workLineView = _queryRun.get(tableNum(WHSOutboundWorkLoadActualAndEstimatedTimeView));
            WHSWorkTable workTable = _queryRun.get(tableNum(WHSWorkTable));
            _workLoadChartDataTmp.YAxis2 = (workTable.WorkStatus == WHSWorkStatus::Closed) ? workLineView.SumOfActualTime : workLineView.SumOfEstimatedTime;
        }
        else
        {
            WHSWorkLine workLine = _queryRun.get(tableNum(WHSWorkLine));
            _workLoadChartDataTmp.YAxis2 = (workLine.WorkStatus == WHSWorkStatus::Closed) ? workLine.ActualTime : workLine.EstimatedTime;
        }

        this.convertToMinutes(_workLoadChartDataTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToMinutes</Name>
				<Source><![CDATA[
    private void convertToMinutes(WHSTmpOutboundWorkLoadChart _workLoadChartDataTmp)
    {
        _workLoadChartDataTmp.YAxis2 = _workLoadChartDataTmp.YAxis2 ? (_workLoadChartDataTmp.YAxis2 / WHSOutboundWorkLoadChartConstants::OneMinute) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    private QueryRun buildQueryRun()
    {
        QueryRun queryRun;

        using (var activityContext = this.instrumentationLogger().outboundWorkLoadChartActivities().chartFilter())
        {
            instrumentationLogger.logRecordInformation(this.filter);

            if (this.filter)
            {
                queryRun = this.filter.defaultQueryRun();
                Query query = queryRun.query();

                this.populateWorkTransType(query);

                this.populateExpectedAndActualTimeFields(query);

                this.populateGroupByFields(query);

                this.populateCountField(query);

                this.populateWorkPickingType(query);

                this.populateSite(query);

                this.populateWarehouse(query);
            
                this.popluateCreateDateTime(query);
            }
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkTransType</Name>
				<Source><![CDATA[
    private void populateWorkTransType(Query _query)
    {
        _query.dataSourceTable(tableNum(WHSWorkTable))
            .addRange(fieldNum(WHSWorkTable, WorkTransType))
            .value(strFmt('%1', this.filter.getWorkTransTypeStr()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExpectedAndActualTimeFields</Name>
				<Source><![CDATA[
    private void populateExpectedAndActualTimeFields(Query _query)
    {
        if (this.filter.DisplayLevel == WHSChartDisplayLevel::OpenLines)
        {
            _query.dataSourceTable(tableNum(WHSWorkLine)).addSelectionField(fieldNum(WHSWorkLine, EstimatedTime), SelectionField::Sum);
            _query.dataSourceTable(tableNum(WHSWorkLine)).addSelectionField(fieldNum(WHSWorkLine, ActualTime), SelectionField::Sum);
        }
        else
        {
            _query.dataSourceTable(tableNum(WHSOutboundWorkLoadActualAndEstimatedTimeView))
                .addSelectionField(fieldNum(WHSOutboundWorkLoadActualAndEstimatedTimeView, SumOfEstimatedTime), SelectionField::Sum);

            _query.dataSourceTable(tableNum(WHSOutboundWorkLoadActualAndEstimatedTimeView))
                .addSelectionField(fieldNum(WHSOutboundWorkLoadActualAndEstimatedTimeView, SumOfActualTime), SelectionField::Sum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGroupByFields</Name>
				<Source><![CDATA[
    private void populateGroupByFields(Query _query)
    {
        // Add group by fields
        _query.dataSourceTable(this.filter.XAxisGroupTableId)
            .addGroupByField(this.filter.XAxisGroupFieldId);

        _query.dataSourceTable(this.filter.XAxisValueTableId)
            .addGroupByField(this.filter.XAxisValueFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCountField</Name>
				<Source><![CDATA[
    private void populateCountField(Query _query)
    {
        // Add count()
        _query.dataSourceTable(this.filter.XAxisValueTableId)
            .addSelectionField(fieldName2Id(this.filter.XAxisValueTableId, fieldStr(common, RecId)), SelectionField::Count);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkPickingType</Name>
				<Source><![CDATA[
    private void populateWorkPickingType(Query _query)
    {
        // In case of initial or staged picks add a join to the FirstPutWorkLine view
        if (this.filter.PickingType == WHSChartPickingType::InitialPicks)
        {
            this.populatePickingFilter(_query, '(%1.%2 > %3.%4)');
        }
        else if (this.filter.PickingType == WHSChartPickingType::StagedPicks)
        {
            this.populatePickingFilter(_query, '(%1.%2 < %3.%4)');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePickingFilter</Name>
				<Source><![CDATA[
    private void populatePickingFilter(Query _query, str _condition)
    {
        QueryBuildDataSource putWorkLineView = _query.dataSourceTable(tableNum(WHSWorkLine)).addDataSource(tablenum(WHSFirstPutWorkLineView));
            
        putWorkLineView.relations(false);
        putWorkLineView.clearLinks();
        putWorkLineView.joinMode(JoinMode::ExistsJoin);

        putWorkLineView.addLink(fieldNum(WHSWorkLine, WorkId), fieldNum(WHSFirstPutWorkLineView, WorkId));
            
        QueryBuildDataSource workLine = _query.dataSourceTable(tableNum(WHSWorkLine));

        putWorkLineView.addRange(fieldNum(WHSFirstPutWorkLineView, LineNum))
                .value(strFmt(_condition,
                    putWorkLineView.name(),
                    fieldStr(WHSFirstPutWorkLineView, LineNum),
                    workLine.name(),
                    fieldStr(WHSWorkLine, LineNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSite</Name>
				<Source><![CDATA[
    private void populateSite(Query _query)
    {
        // Add Site Id filter
        if (this.filter.InventSiteId)
        {
            QueryBuildDataSource workHeader = _query.dataSourceTable(tableNum(WHSWorkTable));
            workHeader.addRange(fieldNum(WHSWorkTable, InventSiteId)).value(SysQuery::value(this.filter.InventSiteId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWarehouse</Name>
				<Source><![CDATA[
    private void populateWarehouse(Query _query)
    {
        // Add warehouse filter
        if (this.filter.InventLocationId)
        {
            QueryBuildDataSource workHeader = _query.dataSourceTable(tableNum(WHSWorkTable));
            workHeader.addRange(fieldNum(WHSWorkTable, InventLocationId)).value(SysQuery::value(this.filter.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>popluateCreateDateTime</Name>
				<Source><![CDATA[
    private void popluateCreateDateTime(Query _query)
    {
        // Add created date time filter.
        QueryBuildDataSource qbdsWorkHeader = _query.dataSourceTable(tableNum(WHSWorkTable));
        QueryBuildRange rangeCreatedDate = qbdsWorkHeader.addRange(fieldNum(WHSWorkTable, CreatedDateTime));

        int daysToInclude = (filter.DaysToInclude > 0) ? (filter.DaysToInclude - 1) : 0;
        rangeCreatedDate.value(strFmt('> %1', SysQueryRangeUtil::value(DateTimeUtil::addDays(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), -daysToInclude))));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>