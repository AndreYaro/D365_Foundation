<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqSourceDocLineItem</c> class provides the information to handle the distributions and
/// subledger journal account entries for a purchase requisition line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProductRequisition), SourceDocumentLine_ProductRequisition::PurchaseRequisitionLine)]
public class PurchReqSourceDocLineItem extends SourceDocumentLineItem
    implements SourceDocumentIDataProvider,
               SourceDocumentIParty,
               SourceDocumentLineItemIProduct,
               SourceDocumentLineItemIProductQuantity,
               SourceDocumentLineItemICommitment,
               SourceDocumentLineItemIProjectRevenue,
               SourceDocumentLineItemIFixedAsset,
               SourceDocumentLineItemIFinalize,
               SourceDocumentIChargeSource

{
    PurchReqLine    purchReqLine;
    PurchReqTable   purchReqTable;
    InventTable     inventTable;
    VendTable       orderAccount;

    MarkupTrans     markupTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return purchReqLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return purchReqLine.BuyingLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        boolean                     includesTax = false;
        Amount                      extendedPriceAmount, priceAdjustmentAmount, chargeAmount, discountAmount;
        SourceDocumentLine          sourceDocumentLineValue;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        if (!purchReqLine.PriceUnit)
        {
            purchReqLine.PriceUnit = 1;
        }
        extendedPriceAmount = CurrencyExchangeHelper::amount(purchReqLine.LineAmount, purchReqLine.CurrencyCode);

        if (!purchReqLine.PurchPrice &&
        !purchReqLine.PurchMarkup &&
        !purchReqLine.discAmount() &&
        !purchReqLine.discPercent())
        {
            extendedPriceAmount = CurrencyExchangeHelper::amount(purchReqLine.LineAmount, purchReqLine.CurrencyCode);
        }
        else
        {
            if (purchReqLine.PurchPrice)
            {
                extendedPriceAmount = CurrencyExchangeHelper::amount(purchReqLine.PurchQty * purchReqLine.PurchPrice / purchReqLine.PriceUnit, purchReqLine.CurrencyCode);
            }
            else
            {
                extendedPriceAmount = CurrencyExchangeHelper::amount(purchReqLine.LineAmount, purchReqLine.CurrencyCode);
            }

            chargeAmount            = CurrencyExchangeHelper::amount(purchReqLine.PurchQty >= 0 ? purchReqLine.PurchMarkup : -purchReqLine.PurchMarkup, purchReqLine.CurrencyCode);

            if (purchReqLine.discPercent())
            {
                priceAdjustmentAmount   = -CurrencyExchangeHelper::amount(purchReqLine.PurchQty * purchReqLine.discAmount() / purchReqLine.PriceUnit, purchReqLine.CurrencyCode);
                discountAmount          = purchReqLine.LineAmount - extendedPriceAmount - priceAdjustmentAmount - chargeAmount;
            }
            else
            {
                priceAdjustmentAmount = purchReqLine.LineAmount - extendedPriceAmount - chargeAmount;
            }
        }

        sourceDocumentLineValue = this.parmSourceDocumentLine();

        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, extendedPriceAmount, MonetaryAmount::ExtendedPrice, includesTax));

        if (priceAdjustmentAmount)
        {
            sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, priceAdjustmentAmount, MonetaryAmount::PriceAdjustment, includesTax));
        }

        if (chargeAmount)
        {
            sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, chargeAmount, MonetaryAmount::Charge, includesTax));
        }

        if (discountAmount)
        {
            sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, discountAmount, MonetaryAmount::Discount, includesTax));
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProductRequisition),BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        purchReqLine    = _sourceDocumentLineImplementation;

        purchReqTable   = purchReqLine.purchReqTable();
        orderAccount    = VendTable::find(purchReqLine.VendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return purchReqLine.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmAssetDataAreaId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmAssetGroupDataAreaId()
    {
        return purchReqLine.AssetGroupDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupId</Name>
				<Source><![CDATA[
    public AssetGroupId parmAssetGroupId()
    {
        return purchReqLine.AssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransactionType</Name>
				<Source><![CDATA[
    public AssetTransType parmAssetTransactionType()
    {
        return AssetTransType::Acquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return EcoResCategory::find(purchReqLine.ProcurementCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
    public str parmCategoryName()
    {
        return EcoResCategory::find(purchReqLine.ProcurementCategory).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        Amount      chargeInputAmount;

        chargeInputAmount = purchReqLine.calcLineAmountExclTax();

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        return purchReqLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataAmountResolution</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataAmountResolution()
    {
        SourceDocumentLineStateContainer ret;

        ret = super();
        ret += [purchReqLine.VendAccount];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataDimensionDerivation</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataDimensionDerivation()
    {
        SourceDocumentLineStateContainer ret;

        ret = super();
        ret += [purchReqLine.VendAccount];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataMainAccDerivation</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataMainAccDerivation()
    {
        SourceDocumentLineStateContainer ret;

        ret = super();
        ret += [purchReqLine.VendAccount];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return purchReqLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSourceId</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmFundingSourceId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        if (purchReqLine.ItemId && !inventTable.RecId)
        {
            inventTable = purchReqLine.inventTable();
        }
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean ret;

        ret = super();
        ret = ret &&
    purchReqLine
    .checkUpdate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId()
    {
        DataAreaId      dataAreaId;

        if (purchReqLine.ItemId)
        {
            dataAreaId = purchReqLine.ItemIdDataArea;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return purchReqLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        DimensionAttributeValueSetItem  dimensionAttributeValueSetItem;
        DimensionAttributeValue         dimensionAttributeValue;
        DimensionAttribute              dimensionAttribute;
        LedgerDimensionDefaultingEngine dimensionDefaultingEngine;
        RecId                           accountStructureRecId;
        RecId                           mainAccountRecId;

        LedgerDimensionDefaultAccount ret;
        if (purchReqLine.DefaultDimension != 0)
        {
            //Find the dimension for the main account
            select EntityInstance from dimensionAttributeValue
        exists join dimensionAttribute where
            dimensionAttribute.Type         == DimensionAttributeType::MainAccount &&
            dimensionAttribute.RecId        == dimensionAttributeValue.DimensionAttribute
        exists join dimensionAttributeValueSetItem where
            dimensionAttributeValueSetItem.DimensionAttributeValue      == dimensionAttributeValue.RecId &&
            dimensionAttributeValueSetItem.DimensionAttributeValueSet   == purchReqLine.DefaultDimension;

            mainAccountRecId = dimensionAttributeValue.EntityInstance;
            if (mainAccountRecId != 0)
            {
                accountStructureRecId = DimensionHierarchy::getAccountStructure(mainAccountRecId, Ledger::primaryLedger(_legalEntityRecId));
                dimensionDefaultingEngine = LedgerDimensionDefaultingEngine::constructForMainAccountId(mainAccountRecId, accountStructureRecId);
                ret = dimensionDefaultingEngine.getLedgerDimension();
            }
        }
        if (ret == 0)
        {
            ret = super(_legalEntityRecId);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public CompanyInfo parmLegalEntity()
    {
        return CompanyInfo::findRecId(purchReqLine.BuyingLegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return purchReqLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyAccount</Name>
				<Source><![CDATA[
    public Common parmPartyAccount()
    {
        return orderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return purchReqLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return purchReqLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return purchReqLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return purchReqLine.ProjTaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return purchReqLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return ResourceFacade::findByWorker(purchReqLine.Requisitioner);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return purchReqLine.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        return purchReqLine.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return purchReqLine.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup()
    {
        return purchReqLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return UnitOfMeasure::find(purchReqLine.ProjSalesUnitOfMeasure).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return purchReqLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return purchReqLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        Decimals inventDecimalPlaces;

        inventTable = this.parmInventTable();

        if (inventTable)
        {
            inventDecimalPlaces = InventTable::inventDecimals(purchReqLine.ItemId);
        }

        return inventDecimalPlaces;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordCommitmentBusinessEvent</Name>
				<Source><![CDATA[
    public boolean parmRecordCommitmentBusinessEvent()
    {
        if (purchReqLine.IsPreEncumbranceRequired == UnknownNoYes::Unknown)
        {
            return PurchReqPreEncumber::isPreEncumbranceEnabled(purchReqLine.BuyingLegalEntity);
        }
        else
        {
            return (purchReqLine.IsPreEncumbranceRequired == UnknownNoYes::Yes ? true : false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return this.parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStocked()
    {
        TradeStockedProduct tradeStockedProduct;
        InventModelGroup    inventModelGroup;

        if (purchReqLine.isCategoryBased())
        {
            tradeStockedProduct = NoYes::No;
        }
        else
        {
            inventModelGroup = InventTable::find(purchReqLine.ItemId).modelGroup();
            tradeStockedProduct = inventModelGroup.isStocked()? NoYes::Yes : NoYes::No;
        }

        return tradeStockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return purchReqLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueModel</Name>
				<Source><![CDATA[
    public AssetBookId parmValueModel()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resovled item name on the purchase requisition line based
    /// on the item being a catalog or non-catalog item.
    /// </summary>
    /// <returns>
    /// The item name on the purchase requisition line.
    /// </returns>
    /// <remarks>
    /// This is a read-only method.
    /// </remarks>
    public ProdName parmItemName()
    {
        return purchReqLine.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineMatchAmountExceedReferenceDist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the total line match amount can exceed the reference distribution amount.
    /// </summary>
    /// <returns>
    /// true if the total line match amount can exceed the reference distribution; otherwise, false.
    /// </returns>
    public boolean canLineMatchAmountExceedReferenceDist()
    {
        boolean canLineAmountExceedReferenceDistributionAmount;

        if (purchReqLine.BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
        {
            canLineAmountExceedReferenceDistributionAmount = true;
        }
        else
        {
            canLineAmountExceedReferenceDistributionAmount = super();
        }

        return canLineAmountExceedReferenceDistributionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseOriginLineDistForChildAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether origin line distributions can be used for child monetary amount like discount.
    /// </summary>
    /// <returns>
    /// true if origin line distributions can be used for child monetary amount; otherwise, false.
    /// </returns>
    public boolean canUseOriginLineDistForChildAmount()
    {
        boolean canUseOriginLineDistForChildAmount;

        if (purchReqLine.BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
        {
            canUseOriginLineDistForChildAmount = true;
        }
        else
        {
            canUseOriginLineDistForChildAmount = super();
        }

        return canUseOriginLineDistForChildAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineMatchingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes source document line matching list with the referenced budget reservation line.
    /// </summary>
    protected void initSourceDocumentLineMatchingList()
    {
        super();

        if (purchReqLine.BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
        {
            sourceDocumentLineMatchingList = SourceDocumentLineMatchingFacade::addSourceDocLineItemToList(this,
                                            BudgetReservationLine_PSN::find(purchReqLine.BudgetReservationLine_PSN));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentStatus</Name>
				<Source><![CDATA[
    internal PurchReqRequisitionStatus getSourceDocumentStatus()
    {
        return purchReqLine.RequisitionStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>