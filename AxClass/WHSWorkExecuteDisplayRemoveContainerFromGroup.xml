<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayRemoveContainerFromGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWorkExecuteMode(WHSWorkExecuteMode::RemoveContainerFromGroup)]
public class WHSWorkExecuteDisplayRemoveContainerFromGroup extends WhsWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container ret;
        container con = _con;

        // Get the pass out of the form state container
        pass = WhsrfPassthrough::create(conPeek(con, #PassthroughInfo));

        // Check if an error was displayed to the user and remove it from the container if that is the case.
        if (this.hasError(con))
        {
            con = conDel(con, #ControlsStart, 1);
        }

        if (_buttonClicked == WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIdsButton)
        {
            step = 2;
        }
        else if (_buttonClicked == #RFDone)
        {
            step = 3;
        }

		switch (step)
		{
			case 0: // Get first container to be removed
				ret	= this.buildGetContainerToBeRemoved(ret);
				step = 1;
				break;

			case 1: // Get containers to be removed
				boolean hasErrors, complete;

				[hasErrors, complete, ret, con] = this.processUserInput(con);

				if (hasErrors)
				{
					return con;
				}

				if (complete)
				{
					this.processRemovedContainerId();
				}

                ret = this.buildGetContainerToBeRemoved();
				break;

			case 2: // Show selected containers
				ret = this.buildListOfContainersToBeRemoved(ret);
				step = 1;
				break;

			case 3: // Perform the removal of containers
				boolean anyContainerRemoved = this.removeContainers();

				if (anyContainerRemoved)
				{
					ret = this.addErrorLabel(conNull(), "@WAX:ContainersRemoved", WHSRFColorText::Success);
				}

				ret	= this.buildGetContainerToBeRemoved(ret);
				step = 1;
				break;

			default:
				break;
		}

        // Persist the step, mode and pass changes
        ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::RemoveContainerFromGroup, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetContainerToBeRemoved</Name>
				<Source><![CDATA[
    private container buildGetContainerToBeRemoved(container _ret = conNull())
    {
        container	ret						= _ret;
        str			removedContainerCounter	= pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerCounter);

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemoveContainerFromGroupInstructionsLabel, "@WAX:SelectContainerToBeRemovedFromGroup", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemoveContainerId, "@WAX1422", 1, pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemoveContainerId), extendedTypeNum(WHSContainerId), '', 0)];

        if (removedContainerCounter)
        {
			ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerCounter, strFmt("@WAX:RemovedContainersCount", removedContainerCounter), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (removedContainerCounter)
        {
            ret += [this.buildControl(#RFButton, #RFDone, "@WAX:RemoveContainers", 1, '', #WHSRFUndefinedDataType, '', 0)];
			ret += [this.buildControl(#RFButton, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIdsButton, "@WAX:ListOfContainersForRemoval", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
		
		ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildListOfContainersToBeRemoved</Name>
				<Source><![CDATA[
    private container buildListOfContainersToBeRemoved(container _ret = conNull())
    {
        container ret = _ret;

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIdsButton, "@WAX:ListOfContainersForRemoval", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds, pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemovedContainerId</Name>
				<Source><![CDATA[
	private void processRemovedContainerId()
    {
        str containerId = pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemoveContainerId);

		if (containerId)
        {
            this.validateRemovedContainerId(containerId);

            Set removedContainerIds;
            str removedContainerIdsFromPass	= pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds);

            if (removedContainerIdsFromPass)
            {
                removedContainerIds = WHSWorkExecuteDisplayRemoveContainerFromGroup::buildRemovedContainerIdsFromStr(removedContainerIdsFromPass);
                removedContainerIds.add(containerId);
            }
            else
            {
                removedContainerIds = WHSWorkExecuteDisplayRemoveContainerFromGroup::buildRemovedContainerIdsFromStr(containerId);
            }

            pass.insert(
				WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds,
				WHSWorkExecuteDisplayRemoveContainerFromGroup::buildRemovedContainerIdListFromSet(removedContainerIds));

            pass.insert(
				WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerCounter,
                removedContainerIds.elements());

            pass.remove(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemoveContainerId);
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemovedContainerId</Name>
				<Source><![CDATA[
	private void validateRemovedContainerId(WHSContainerId _containerId)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_containerId);

        if (!containerTable.ContainerGroupingLicensePlateId)
        {
            throw error("@WAX:CannotRemoveContainerThatIsNotPartOfContainerGroup");
        }
        else
        {
            if (containerTable.ShipCarrierTrackingNum || containerTable.MasterTrackingNum)
            {
                throw error("@WAX:ErrorCannotChangeContainerGroupWhenItIsManifested");
            }

            InventDim containerInventDim = InventDim::find(containerTable.InventDimId);

			if (WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId).ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::Automatic
				&& !WMSLocation::find(containerInventDim.wMSLocationId, containerInventDim.InventLocationId).isStagingLocation())
			{
				throw error("@WAX:CannotRemoveContainerIfContainerGroupIsNotOnStagingLocation");
			}
			else
			{
				WHSWorkLine		inProgressWorkLine;
				WHSWorkTable	inProgressWorkTable;

				select firstonly RecId from inProgressWorkLine
					where inProgressWorkLine.WorkStatus == WHSWorkStatus::InProcess
					exists join inProgressWorkTable
						where inProgressWorkTable.WorkId				== inProgressWorkLine.WorkId
							&& inProgressWorkTable.TargetLicensePlateId	== containerTable.ContainerGroupingLicensePlateId
							&& inProgressWorkTable.WorkTransType		== WHSWorkTransType::PackedContainerPicking
							&& inProgressWorkTable.WorkStatus			!= WHSWorkStatus::Cancelled;

				if (inProgressWorkLine.RecId)
				{
					throw error("@WAX:CannotRemoveContainerWithInProgressWorkLine");
				}
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRemovedContainerIdsFromStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes a string containing removed container IDs.
    /// </summary>
    /// <param name="_removedContainerIds">
    /// String containing removed container IDs.
    /// </param>
    /// <returns>
    /// Set containing removed container IDs.
    /// </returns>
    private static Set buildRemovedContainerIdsFromStr(str _removedContainerIds)
    {
        Set ret = new Set(Types::String);

        if (_removedContainerIds)
        {
            List removedContainerIds = strSplit(_removedContainerIds, '\n');

            ListEnumerator le = removedContainerIds.getEnumerator();

            while (le.moveNext())
            {
                str current = le.current();
                ret.add(current);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRemovedContainerIdListFromSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a removed container IDs set.
    /// </summary>
    /// <param name="_removedContainerIds">
    /// Set containing removed container IDs.
    /// </param>
    /// <returns>
    /// String representation of the removed containers set.
    /// </returns>
    private static str buildRemovedContainerIdListFromSet(Set _removedContainerIds)
    {
        str ret;

        if (_removedContainerIds)
        {
            SetEnumerator se = _removedContainerIds.getEnumerator();

            while (se.moveNext())
            {
                str current = se.current();

                if (!ret)
                {
                    ret = current;
                }
                else
                {
                    ret = ret + '\n' + current;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeContainers</Name>
				<Source><![CDATA[
	private boolean removeContainers()
    {
        boolean ret;

        str removedContainerIdsFromPass	= pass.lookupStr(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds);

        if (removedContainerIdsFromPass)
        {
            Set removedContainerIds = WHSWorkExecuteDisplayRemoveContainerFromGroup::buildRemovedContainerIdsFromStr(removedContainerIdsFromPass);

            SetEnumerator removedContainerIdsEnumerator = removedContainerIds.getEnumerator();

            WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));

            ttsbegin;

            while (removedContainerIdsEnumerator.moveNext())
            {
                str currentContainerId = removedContainerIdsEnumerator.current();

                WHSContainerGroupingLicensePlateId currentContainerGroupingLicensePlateId = this.updateContainerTable(currentContainerId);

                if (rfMenuItem.WillContainerRemovalCancelRelatedWork == NoYes::Yes)
                {
                    this.cancelRelatedWork(currentContainerGroupingLicensePlateId);
                }
                else
                {
                    this.updateRelatedWork(currentContainerId, currentContainerGroupingLicensePlateId);
                }

                WHSLicensePlate::removeFromParentLP(currentContainerId);
            }

            ttscommit;

            pass.remove(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerCounter);
            pass.remove(WHSWorkExecuteDisplayRemoveContainerFromGroupControls::RemovedContainerIds);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerTable</Name>
				<Source><![CDATA[
    private WHSContainerGroupingLicensePlateId updateContainerTable(WHSContainerId _containerId)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_containerId, true);

        WHSContainerGroupingLicensePlateId currentContainerGroupingLicensePlateId = containerTable.ContainerGroupingLicensePlateId;

        containerTable.ContainerGroupingLicensePlateId = '';
        containerTable.ContainerReleased = NoYes::No;
        containerTable.update();

        return currentContainerGroupingLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRelatedWork</Name>
				<Source><![CDATA[
    private void cancelRelatedWork(WHSContainerGroupingLicensePlateId _containerGroupingLicensePlateId)
    {
        WHSWorkTable localWorkTable;

        select firstonly WorkId from localWorkTable
            order by localWorkTable.WorkStatus
            where localWorkTable.TargetLicensePlateId	== _containerGroupingLicensePlateId
                && localWorkTable.WorkTransType			== WHSWorkTransType::PackedContainerPicking
                && localWorkTable.WorkStatus			!= WHSWorkStatus::Cancelled;

        if (localWorkTable)
        {
            WHSWorkTable::cancelWork(localWorkTable.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedWork</Name>
				<Source><![CDATA[
    private void updateRelatedWork(WHSContainerId _containerId, WHSContainerGroupingLicensePlateId _containerGroupingLicensePlateId)
    {
        WHSWorkLine		firstOpenPickWorkLine;
        WHSWorkTable	localWorkTable;

        select firstonly forupdate firstOpenPickWorkLine
            order by localWorkTable.WorkStatus asc, LineNum asc
            where firstOpenPickWorkLine.WorkType	== WHSWorkType::Pick
                && firstOpenPickWorkLine.WorkStatus	== WHSWorkStatus::Open
			join WorkStatus from localWorkTable
				where localWorkTable.TargetLicensePlateId	== _containerGroupingLicensePlateId
					&& localWorkTable.WorkTransType			== WHSWorkTransType::PackedContainerPicking
					&& localWorkTable.WorkStatus			!= WHSWorkStatus::Cancelled
					&& localWorkTable.WorkId				== firstOpenPickWorkLine.WorkId;

        if (firstOpenPickWorkLine)
        {
            WHSContainerLine	currentContainerLine;
            WHSLoadLine         currentContainerLoadLine;
            InventQty			totalContainerLinesRemovedQty;

            while select currentContainerLine
				where currentContainerLine.ContainerId		== _containerId
				join InventTransId from currentContainerLoadLine
					where currentContainerLoadLine.RecId	== currentContainerLine.LoadLine
            {
                this.updateRelatedWorkLineWorkInventTrans(currentContainerLine, firstOpenPickWorkLine, currentContainerLoadLine);
                this.updateRelatedWorkLineLoadLineDetails(currentContainerLine, firstOpenPickWorkLine);

                totalContainerLinesRemovedQty += currentContainerLine.getInventoryHandlingQuantity();
            }

            this.updateRelatedWorkQuantityAndCancelWorkIfNewQuantityIsZero(firstOpenPickWorkLine, totalContainerLinesRemovedQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedWorkLineWorkInventTrans</Name>
				<Source><![CDATA[
    private void updateRelatedWorkLineWorkInventTrans(
		WHSContainerLine	_containerLine,
        WHSWorkLine			_workLine,
        WHSLoadLine         _loadLine)
    {
        InventDim workInventTransInventDimFrom = _containerLine.inventDim();
        workInventTransInventDimFrom.clearLocationAndBelowDim(_containerLine.ItemId);
        workInventTransInventDimFrom.wmsLocationId  = _workLine.wmsLocationId;
        workInventTransInventDimFrom                = InventDim::findOrCreate(workInventTransInventDimFrom);

        WHSWorkInventTrans workInventTrans = WHSWorkInventTrans::find(
                                                _workLine.WorkId,
                                                _workLine.LineNum,
                                                _containerLine.ItemId,
                                                _loadLine.InventTransId,
                                                workInventTransInventDimFrom.InventDimId,
                                                true);

        if (workInventTrans)
        {
            workInventTrans.adjustHandlingQuantity(-_containerLine.Qty, _workLine.wmsLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    private void updateRelatedWorkLineLoadLineDetails(WHSContainerLine _containerLine, WHSWorkLine _workLine)
    {
        WHSWorkLineLoadLineDetails workLineLoadLineDetails = WHSWorkLineLoadLineDetails::find(_workLine.WorkId, _workLine.LineNum, _containerLine.LoadLine, true);

        if (workLineLoadLineDetails)
        {
            workLineLoadLineDetails.decreaseQtyAndDeleteRecordIfNewQtyIsZeroOrLess(_containerLine.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedWorkQuantityAndCancelWorkIfNewQuantityIsZero</Name>
				<Source><![CDATA[
    private void updateRelatedWorkQuantityAndCancelWorkIfNewQuantityIsZero( WHSWorkLine _firstOpenPickWorkLine, InventQty _totalContainerLinesRemovedQty)
    {
        InventQty newWorkLineQuantity = max(0, _firstOpenPickWorkLine.InventQtyWork - _totalContainerLinesRemovedQty);

        WHSWorkLine packedContainerPickingWorkLine;

        // All quantities in packed container work are the same.
        packedContainerPickingWorkLine.skipDataMethods(true);
        update_recordset packedContainerPickingWorkLine
            setting QtyWork		= newWorkLineQuantity,
                QtyRemain		= newWorkLineQuantity,
                InventQtyWork	= newWorkLineQuantity,
                InventQtyRemain	= newWorkLineQuantity
            where packedContainerPickingWorkLine.WorkId			== _firstOpenPickWorkLine.WorkId
                && packedContainerPickingWorkLine.WorkStatus	== WHSWorkStatus::Open;

        if (newWorkLineQuantity == 0)
        {
            WHSWorkTable::cancelWork(_firstOpenPickWorkLine.WorkId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>