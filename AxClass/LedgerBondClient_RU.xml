<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondClient_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerBondClient_RU
{
    LedgerBondServer_RU ledgerBondServer;
    TransDate           transDate;
    container           sortFields;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNewLogObject</Name>
				<Source><![CDATA[
    public void addNewLogObject()
    {
        ledgerBondServer.logList().addNewLogObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondLast2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Bonds last 2 transactions
    /// </summary>
    void bondLast2()
    {
        this.bondVRef2VRef(this.lastVrefId(), this.lastVrefId(-1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondLastVRef2CurrentLog</Name>
				<Source><![CDATA[
    public void bondLastVRef2CurrentLog(TransDate _transDate = transDate)
    {
        LedgerBondLog_RU log = this.currentLog(_transDate);

        this.bondVRef2Log(conPeek(log, conLen(log)), log);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondLog2Log</Name>
				<Source><![CDATA[
    public void bondLog2Log(TransDate          _transDate  = transDate,
                            LedgerBondLog_RU   _debitLog   = this.getDebitLog (_transDate),
                            LedgerBondLog_RU   _creditLog  = this.getCreditLog(_transDate),
                            container          _sortFields = sortFields)
    {
        int                         i,j;
        LedgerBondLog_RU            debitLog    = _debitLog,
                                    creditLog   = _creditLog;
        LedgerBondId_RU             vRefIdDebit;
        LedgerBondId_RU             vRefIdCredit;
        LedgerBondTransObject_RU    bondTransDebit, bondTransCredit;
        Amount                      amountToBond;

        ;

        if (conLen(debitLog) == 1)
        {
            this.bondVRef2Log(conPeek(debitLog,1), creditLog);
            return;
        }
        if (conLen(creditLog) == 1)
        {
            this.bondVRef2Log(conPeek(creditLog,1), debitLog);
            return;
        }

        debitLog = this.sortLog(_sortFields,debitLog);
        creditLog = this.sortLog(_sortFields,creditLog);

        for (i = conLen(debitLog) ; i ; i--)
        {
            vRefIdDebit = conPeek(debitLog, i);
            bondTransDebit = this.bondTransObject(vRefIdDebit);

            for (j = conLen(creditLog) ; j ; j --)
            {
                if (bondTransDebit.bondedCompletelyAll())
                {
                    break;
                }

                vRefIdCredit = conPeek(creditLog,j);
                bondTransCredit = this.bondTransObject(vRefIdCredit);

                if (bondTransCredit.bondedCompletelyAll())
                {
                    continue;
                }

                if (bondTransDebit.ledgerTransObject().parmTransactionCurrencyCode() == bondTransCredit.ledgerTransObject().parmTransactionCurrencyCode() &&
                    bondTransDebit.remainAmountCur() * bondTransCredit.remainAmountCur() != 0)
                {
                    amountToBond = min(bondTransDebit.remainAmountCur(), bondTransCredit.remainAmountCur());
                    if (amountToBond)
                    {
                        this.bondVRef2VRef(vRefIdDebit,
                                           vRefIdCredit,
                                           amountToBond,
                                           LedgerBondAmountType_RU::Currency,
                                           LedgerBondOrder_RU::DebitToCredit);
                    }
                }
                else
                {
                    amountToBond = min(bondTransDebit.remainAmountMST(), bondTransCredit.remainAmountMST());
                    if (amountToBond)
                    {
                        this.bondVRef2VRef(vRefIdDebit,
                                           vRefIdCredit,
                                           amountToBond,
                                           LedgerBondAmountType_RU::MST,
                                           LedgerBondOrder_RU::DebitToCredit);
                    }
                    else
                    {
                        this.bondVRef2VRef(vRefIdDebit,
                                           vRefIdCredit,
                                           min(bondTransDebit.remainAmountMSTSecond(), bondTransCredit.remainAmountMSTSecond()),
                                           LedgerBondAmountType_RU::MSTSecondary,
                                           LedgerBondOrder_RU::DebitToCredit);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondLogBySourceRecId</Name>
				<Source><![CDATA[
    public void bondLogBySourceRecId(TransDate         _transDate  = transDate,
                                     LedgerBondLog_RU  _log        = this.currentLog(_transDate),
                                     container         _sortFields = sortFields)
    {
        LedgerBondLog_RU         debitLog;
        LedgerBondLog_RU         creditLog;
        LedgerBondLog_RU         sourceRecIdLog;
        TmpLedgerBondLogTable_RU ledgerBondTmpLogTable;

        ledgerBondTmpLogTable = this.log2Table(_log);

        while select ledgerBondTmpLogTable
            group by SourceRecId,SourceTableId
            where ledgerBondTmpLogTable.SourceRecId &&
                  ledgerBondTmpLogTable.SourceTableId
        {
            sourceRecIdLog = this.getSourceRecIdLog(ledgerBondTmpLogTable.SourceRecId, ledgerBondTmpLogTable.SourceTableId,  _log);
            debitLog  = this.getDebitLog (_transDate, sourceRecIdLog);
            creditLog = this.getCreditLog(_transDate, sourceRecIdLog);
            this.bondLog2Log(_transDate, debitLog, creditLog, _sortFields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondTransObject</Name>
				<Source><![CDATA[
    public LedgerBondTransObject_RU bondTransObject(LedgerBondId_RU _vRefId)
    {
        return ledgerBondServer.findBondTransObject(_vRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondVRef2Log</Name>
				<Source><![CDATA[
    public void bondVRef2Log(LedgerBondId_RU    _vRefId,
                             container          _log = this.currentLog(),
                             boolean            _allowNegativeRemainder=false)
    {
        LedgerBondId_RU             vRefIdDebit, vRefIdCredit;
        boolean                     roundTo;
        LedgerBondTransObject_RU    bondTransObject, tmpBondTransObject;
        LedgerBondLog_RU            log;
        int                         i;

        Amount amountToBond(Amount _manySideAmount, Amount _oneSideAmlount)
        {
            if (_allowNegativeRemainder)
            {
                return _manySideAmount;
            }
            return  min(_manySideAmount, _oneSideAmlount);
        }

        bondTransObject = this.bondTransObject(_vRefId);
        if (ledgerBondServer.fatalErrorState() ||
            bondTransObject.bondedCompletelyAll() ||
            (bondTransObject.bondedCompletely() && bondTransObject.ledgerTransObject().parmAccountingCurrencyAmount()))
        {
            return;
        }

        if (transDate && bondTransObject.transDate() != transDate)
        {
            log = this.currentLog(bondTransObject.transDate());
        }
        else
        {
            log = _log;
        }
        log = conDel(log, conFind(log, _vRefId), 1);

        for (i = conLen(log); i && (_allowNegativeRemainder || !bondTransObject.bondedCompletelyAll()); i--)
        {
            tmpBondTransObject = ledgerBondServer.findBondTransObject(conPeek(log, i));

            roundTo = tmpBondTransObject.remainCrediting();

            vRefIdDebit  = roundTo ? _vRefId    : tmpBondTransObject.vrefId();
            vRefIdCredit = roundTo ? tmpBondTransObject.vrefId() : _vRefId;

            if (tmpBondTransObject.remainAmountCur() && bondTransObject.remainAmountCur() &&
                tmpBondTransObject.ledgerTransObject().parmTransactionCurrencyCode() == bondTransObject.ledgerTransObject().parmTransactionCurrencyCode())
            {
                ledgerBondServer.addBondProrateAmountCur(vRefIdDebit,
                                                         vRefIdCredit,
                                                         amountToBond(tmpBondTransObject.remainAmountCur(), bondTransObject.remainAmountCur()),
                                                         roundTo,
                                                         _vRefId);
            }
            else
            {
                if (tmpBondTransObject.remainAmountMST() && bondTransObject.remainAmountMST())
                {
                    ledgerBondServer.addBondProrateAmountMST(vRefIdDebit,
                                                             vRefIdCredit,
                                                             amountToBond(tmpBondTransObject.remainAmountMST(), bondTransObject.remainAmountMST()),
                                                             roundTo,
                                                             _vRefId);
                }
                else
                {
                    if (tmpBondTransObject.remainAmountMSTSecond() && bondTransObject.remainAmountMSTSecond())
                    {
                        ledgerBondServer.addBondProrateAmountMSTSecond(vRefIdDebit,
                                                                       vRefIdCredit,
                                                                       amountToBond(tmpBondTransObject.remainAmountMSTSecond(), bondTransObject.remainAmountMSTSecond()),
                                                                       roundTo,
                                                                       _vRefId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondVRef2VRef</Name>
				<Source><![CDATA[
    public void bondVRef2VRef(LedgerBondId_RU         _vRefId1,
                              LedgerBondId_RU         _vRefId2,
                              Amount                  _amount        = 0.0,
                              LedgerBondAmountType_RU _amountType    = LedgerBondAmountType_RU::Currency,
                              LedgerBondOrder_RU      _bondOrder     = LedgerBondOrder_RU::Auto,
                              boolean                 _roundToCredit = false)
    {
        LedgerBondId_RU             vRefIdDebit;
        LedgerBondId_RU             vRefIdCredit;
        LedgerBondTransObject_RU    bondTransObject2, bondTransObject1 = this.bondTransObject(_vRefId1);
        Amount                      amount1 = _amount, amount2;
        LedgerBondAmountType_RU     amountType = _amountType;
        ;

        if (ledgerBondServer.fatalErrorState())
            return;
        if (! amount1)
        {
            amount1 = bondTransObject1.remainAmountCur();
            bondTransObject2 = this.bondTransObject(_vRefId2);
            if (ledgerBondServer.fatalErrorState())
                return;

            amount2 = bondTransObject2.remainAmountCur();
            if (! amount1 || ! amount2)
            {
                amount1 = bondTransObject1.remainAmountMST();
                amount2 = bondTransObject2.remainAmountMST();
                amountType = LedgerBondAmountType_RU::MST;
            }
            if (! amount1 || ! amount2)
            {
                amount1 = bondTransObject1.remainAmountMSTSecond();
                amount2 = bondTransObject2.remainAmountMSTSecond();
                amountType = LedgerBondAmountType_RU::MSTSecondary;
            }
            amount1 = min(abs(amount1), abs(amount2));
        }

        switch (_bondOrder)
        {
            case LedgerBondOrder_RU::Auto :
                if (bondTransObject1.remainCrediting())
                {
                    vRefIdCredit = _vRefId1;
                    vRefIdDebit  = _vRefId2;
                }
                else
                {
                    vRefIdCredit = _vRefId2;
                    vRefIdDebit  = _vRefId1;
                }
                break;

            case LedgerBondOrder_RU::CreditToDebit :
                vRefIdCredit = _vRefId1;
                vRefIdDebit  = _vRefId2;
                break;

            case LedgerBondOrder_RU::DebitToCredit :
                vRefIdCredit = _vRefId2;
                vRefIdDebit  = _vRefId1;
                break;
        }

        switch (amountType)
        {
            case LedgerBondAmountType_RU::MST :
                ledgerBondServer.addBondProrateAmountMST(vRefIdDebit,
                                                         vRefIdCredit,
                                                         amount1,
                                                         _roundToCredit);
                break;

            case LedgerBondAmountType_RU::MSTSecondary :
                ledgerBondServer.addBondProrateAmountMSTSecond(vRefIdDebit,
                                                               vRefIdCredit,
                                                               amount1,
                                                               _roundToCredit);
                break;

            case LedgerBondAmountType_RU::Currency :
                ledgerBondServer.addBondProrateAmountCur(vRefIdDebit,
                                                         vRefIdCredit,
                                                         amount1,
                                                         _roundToCredit);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLog</Name>
				<Source><![CDATA[
    public LedgerBondLog_RU currentLog(TransDate   _transDate = transDate,
                                       boolean     _excludeCompletelyBonded = true)
    {
        LedgerBondLog_RU            currentLog, retLog;
        LedgerBondTransObject_RU    bondTransObject;
        int                         i;
        ;

        currentLog = ledgerBondServer.logList().lastLogObject().log(_transDate);

        if (_excludeCompletelyBonded)
        {
            for (i = 1 ; i <= conLen(currentLog); i++)
            {
                bondTransObject = this.bondTransObject(conPeek(currentLog, i));
                if (! bondTransObject.bondedCompletely() ||
                    (bondTransObject.remainAmountMSTSecond() &&
                     ! bondTransObject.ledgerTransObject().parmAccountingCurrencyAmount()))
                {
                    retLog += conPeek(currentLog, i);
                }
            }
        }
        else
        {
            retLog = currentLog;
        }
        return retLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLogLength</Name>
				<Source><![CDATA[
    public int currentLogLength(TransDate  _transDate = transDate,
                                boolean    _excludeCompletelyBonded = true)
    {
        return conLen(this.currentLog(_transDate, _excludeCompletelyBonded));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endSkipping</Name>
				<Source><![CDATA[
    /// <summary>
    ///  ends range of transactions to be skipped in lastVrefID
    /// </summary>
    /// <remarks>
    /// see also startSkipping()
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///  call of method without prior call of startSkipping()
    /// </exception>
    void endSkipping()
    {
        ledgerBondServer.endSkipping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVRefByPostingType</Name>
				<Source><![CDATA[
    public LedgerBondId_RU findVRefByPostingType(LedgerPostingType _postingType,
                                                 TransDate         _transDate = transDate,
                                                 boolean           _completelyBonded = false)
    {
        boolean                  more;
        LedgerBondTransList_RU   transList = ledgerBondServer.transList();

        transList.parmTransDate(_transDate);
        for (more = transList.first();
             more;
             more = transList.next())
        {
            if (transList.item().bondedCompletely() == _completelyBonded  &&
                transList.item().ledgerTransObject().parmPostingType() == _postingType)
                return transList.item().vrefId();
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCurrentLog</Name>
				<Source><![CDATA[
    public void flushCurrentLog()
    {
        ledgerBondServer.logList().lastLogObject().flushLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBondedVrefIDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get container of vrefIDs that are bonded to given vref ID
    /// </summary>
    /// <param name="_id">
    /// ID of transaction
    /// </param>
    /// <returns>
    ///  container of bonded vrefIDs
    /// </returns>
    container getBondedVrefIDs(LedgerBondId_RU _id)
    {
        return ledgerBondServer.getBondedVRefIDs(_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditLog</Name>
				<Source><![CDATA[
    public LedgerBondLog_RU getCreditLog(TransDate         _transDate = transDate,
                                         LedgerBondLog_RU  _log = this.currentLog(_transDate))
    {
        int              i;
        LedgerBondLog_RU retLog;

        for (i = 1 ; i <= conLen(_log); i++)
        {
            if (this.bondTransObject(conPeek(_log, i)).remainCrediting())
            {
               retLog += conPeek(_log, i);
            }
        }
        return retLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitLog</Name>
				<Source><![CDATA[
    public LedgerBondLog_RU getDebitLog(TransDate          _transDate = transDate,
                                        LedgerBondLog_RU   _log = this.currentLog(_transDate))
    {
        int              i;
        LedgerBondLog_RU retLog;

        for (i = 1 ; i <= conLen(_log); i++)
        {
            if (! this.bondTransObject(conPeek(_log, i)).remainCrediting())
            {
               retLog += conPeek(_log, i);
            }
        }
        return retLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogByPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container of vrefIDs in current log by given posting type
    /// </summary>
    /// <param name="_postingType">posting type to filter transactions</param>
    /// <param name="_transDate">date</param>
    /// <param name="_completelyBonded">true - returns only bonded transactions, false - only not bonded</param>
    /// <returns>container of LedgerBondId_RU</returns>
    public LedgerBondLog_RU getLogByPostingType(LedgerPostingType _postingType,
                                         TransDate         _transDate = transDate,
                                         boolean           _completelyBonded = false)
    {
        boolean                  more;
        LedgerBondTransList_RU   transList = ledgerBondServer.transList();
        LedgerBondLog_RU         ret;

        transList.parmTransDate(_transDate);
        for (more = transList.first();
             more;
             more = transList.next())
        {
            if (transList.item().bondedCompletely() == _completelyBonded  &&
                transList.item().ledgerTransObject().parmPostingType() == _postingType)
            {
                ret += transList.item().vrefId();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecIdLog</Name>
				<Source><![CDATA[
    public LedgerBondLog_RU getSourceRecIdLog(RefRecId         _recId,
                                              RefTableId       _tableId,
                                              LedgerBondLog_RU _log = this.currentLog())
    {
        int                      i;
        LedgerBondLog_RU         retLog;
        LedgerBondableTrans_RU ledgerVoucherTransObject;
        ;
        for (i = conLen(_log); i; i--)
        {
            ledgerVoucherTransObject = this.bondTransObject(conPeek(_log, i)).ledgerTransObject();
            if (ledgerVoucherTransObject.parmSourceRecId()   == _recId &&
                ledgerVoucherTransObject.parmSourceTableId() == _tableId)
            {
               retLog += conPeek(_log, i);
            }
        }
        return retLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastBondTransObject</Name>
				<Source><![CDATA[
    public LedgerBondTransObject_RU lastBondTransObject()
    {
        return ledgerBondServer.findBondTransObject(ledgerBondServer.lastVrefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNotBondedTransObject</Name>
				<Source><![CDATA[
    public LedgerBondTransObject_RU lastNotBondedTransObject(TransDate _transDate = transDate)
    {
        LedgerBondLog_RU            currentLog = this.currentLog(_transDate, true);

        return conLen(currentLog) ?
                this.bondTransObject(conPeek(currentLog, conLen(currentLog))) :
                null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastVrefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  VrefID of the last added transaction object
    /// </summary>
    /// <param name="_offset">
    ///    a number which is added to VRefID. Should be non positive
    /// </param>
    /// <returns>
    ///   LedgerBondVrefId_RU of the last added transaction
    /// </returns>
    /// <remarks>
    ///   see also startSkipping(), endSkipping()
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///   _offset most not be negative
    /// </exception>
    LedgerBondId_RU lastVrefId(int _offset = 0)
    {
        return ledgerBondServer.lastVrefId(_offset, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>log2Table</Name>
				<Source><![CDATA[
    public TmpLedgerBondLogTable_RU log2Table(LedgerBondLog_RU _log)
    {
        TmpLedgerBondLogTable_RU logTable;
        LedgerBondTransObject_RU bondTransObject;
        int                      i;

        for (i = conLen(_log); i > 0; i--)
        {
            bondTransObject = this.bondTransObject(conPeek(_log, i));

            logTable.doClear();

            logTable.BondId             = bondTransObject.vrefId();
            logTable.Correcting         = bondTransObject.ledgerTransObject().parmIsCorrection();
            logTable.AmountMST          = bondTransObject.ledgerTransObject().parmAccountingCurrencyAmount();
            logTable.AmountMSTSecondary = bondTransObject.ledgerTransObject().parmReportingCurrencyAmount();
            logTable.AmountCur          = bondTransObject.ledgerTransObject().parmTransactionCurrencyAmount();
            logTable.CurrencyCode       = bondTransObject.ledgerTransObject().parmTransactionCurrencyCode();
            logTable.Posting            = bondTransObject.ledgerTransObject().parmPostingType();
            logTable.DefaultDimension   = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(bondTransObject.ledgerTransObject().parmLedgerDimensionId());
            logTable.SourceRecId        = bondTransObject.ledgerTransObject().parmSourceRecId();
            logTable.SourceTableId      = bondTransObject.ledgerTransObject().parmSourceTableId();
            logTable.Crediting          = bondTransObject.remainCrediting();

            logTable.insert();
        }

        return logTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerBondServer_RU _ledgerBondServer, TransDate _transDate = dateNull())
    {
        if (! _ledgerBondServer)
            throw error(strFmt("@SYS23669", funcName()));

        ledgerBondServer = _ledgerBondServer;
        transDate = _transDate;
        sortFields =  [fieldNum(TmpLedgerBondLogTable_RU,DefaultDimension),
                       fieldNum(TmpLedgerBondLogTable_RU,AmountCur),
                       fieldNum(TmpLedgerBondLogTable_RU,CurrencyCode)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortFields</Name>
				<Source><![CDATA[
    public container parmSortFields(container _sortFields = sortFields)
    {
        sortFields = _sortFields;
        return sortFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCurrentLogObject</Name>
				<Source><![CDATA[
    public void removeCurrentLogObject()
    {
        ledgerBondServer.logList().removeLastLogObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortLog</Name>
				<Source><![CDATA[
    public LedgerBondLog_RU sortLog(container          _sortFields = sortFields,
                                    LedgerBondLog_RU   _log = this.currentLog())
    {
        TmpLedgerBondLogTable_RU logTable;
        Query                    query = new Query();
        QueryRun                 queryRun;
        QueryBuildDataSource     queryBuildDataSource;
        int                      i;
        LedgerBondLog_RU         retLog;
        ;

        logTable = this.log2Table(_log);

        queryBuildDataSource = query.addDataSource(tableNum(TmpLedgerBondLogTable_RU));
        queryBuildDataSource.addSelectionField(fieldNum(TmpLedgerBondLogTable_RU, BondId));

        for (i = conLen(_sortFields) ; i; i--)
        {
            queryBuildDataSource.addSortField(conPeek(_sortFields,i));
        }
        queryRun = new QueryRun(query);
        queryRun.setCursor(logTable);

        while (queryRun.next())
        {
            logTable = queryRun.get(tableNum(TmpLedgerBondLogTable_RU));
            retLog += logTable.BondId;
        }

        return retLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startSkipping</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Starts recording of transactions to be skipped in lastVRefId
    /// </summary>
    /// <remarks>
    ///  The skipping is need to ensure correct work of lastVRefID in case when adding transaction
    ///  to voucher generate more stransaction (now at allocation). Additional transactions are
    ///  bethween startSkipping() and endSkipping() and will be ignored while evaluating
    ///  vrefID by offset in lastVrefID
    ///   see also endSkipping()
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///    Skipping ranges can not be nested
    /// </exception>
    void startSkipping()
    {
        ledgerBondServer.startSkipping();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>