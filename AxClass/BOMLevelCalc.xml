<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomLevelCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMLevelCalc</c> class recalculates BOM levels on all items, based on the information from
///    both BOM version definitions and production BOMs.
/// </summary>
/// <remarks>
///    The <c>BOMLevelCalc</c> class stores BOM levels in the InventTable.BOMLevel field. These levels are utilized
///    for costing purposes.
/// </remarks>
class BomLevelCalc extends RunBaseBatch implements BatchRetryable
{
    NoYes                           dummyField;
    BOMLevelAnalyzer                analyzer;
    Map                             originalBOMLevelMap;
    Map                             originalCostBOMLevelMap;
    UserConnection                  connection;
    private boolean                 excludeProductionOrder;
    private BOMLevelCalcLevelType   calculationLevel;
    
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dummyField
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExcludeProductionOrder</Name>
				<Source><![CDATA[
    private boolean parmExcludeProductionOrder(boolean _excludeProductionOrder = excludeProductionOrder)
    {
        if (!BOMCalcJobExcludeProdOrderFromCostCalculationFeature::instance().isEnabled())
        {
            return false;
        }

        excludeProductionOrder = _excludeProductionOrder;
        return excludeProductionOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostBOMLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if CostBOMLevel should calculated when recalculating the BOM levels.
    /// </summary>
    /// <param name = "_setCostBOMLevel">A Boolean indicating if CostBOMLevel should calculated.</param>
    public void calculateCostBOMLevel(boolean _setCostBOMLevel)
    {
        this.parmExcludeProductionOrder(_setCostBOMLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMLevelCalcNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes whether the BOM level recalculation is needed.
    /// </summary>
    /// <returns>
    ///    true if the BOM level recalculation is needed; otherwise, false.
    /// </returns>
    public boolean isBOMLevelCalcNeeded()
    {
        if (!BOMLevelRecalculation::find().bomLevelRecalculationNeeded)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostBOMLevelCalcNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes whether the BOM level recalculation is needed for cost calculation.
    /// </summary>
    /// <returns>
    ///    true if the BOM level recalculation is needed for cost calculation; otherwise, false.
    /// </returns>
    public boolean isCostBOMLevelCalcNeeded()
    {
        if (!BOMCalcJobExcludeProdOrderFromCostCalculationFeature::instance().isEnabled())
        {
            return false;
        }

        if (!BOMLevelRecalculation::find().costBomLevelRecalculationNeeded)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTableBomQuery</Name>
				<Source><![CDATA[
    private Query createInventTableBomQuery()
    {
        date todayDate = systemDateGet();

        Query query = new Query();

        // Get data from InventTable
        QueryBuildDataSource dsInventTableBOM = query.addDataSource(tableNum(InventTable), 'inventTableBOM');
        dsInventTableBOM.addRange(fieldNum(InventTable,ItemType)).value(queryValue(any2int(ItemType::Item)));
        dsInventTableBOM.addSelectionField(fieldNum(InventTable, RecId));
        dsInventTableBOM.addSelectionField(fieldNum(InventTable, BOMLevel));
        dsInventTableBOM.addSelectionField(fieldNum(InventTable, CostBOMLevel));
        if (#PmfEnabled)
        {
            dsInventTableBOM.addSelectionField(fieldNum(InventTable, ItemId));
            dsInventTableBOM.addSelectionField(fieldNum(InventTable, PmfProductType));
        }

        dsInventTableBOM.addGroupByField(fieldNum(InventTable,RecId));
        dsInventTableBOM.addGroupByField(fieldNum(InventTable, BOMLevel));
        dsInventTableBOM.addGroupByField(fieldNum(InventTable, CostBOMLevel));
        if (#PmfEnabled)
        {
            dsInventTableBOM.addGroupByField(fieldNum(InventTable, ItemId));
            dsInventTableBOM.addGroupByField(fieldNum(InventTable, PmfProductType));
        }
        
        QueryBuildDataSource dsBOMVersion = dsInventTableBOM.addDataSource(tableNum(BOMVersion));
        dsBOMVersion.addLink(fieldNum(InventTable, ItemId), fieldNum(BOMVersion, ItemId));
        if(isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)))
        {
            dsBOMVersion.addRange(fieldNum(BOMVersion,Approved)).value(SysQuery::value(NoYes::Yes));
        }
        dsBOMVersion.addRange(fieldNum(BOMVersion,ToDate)).value(SysQuery::range(todaydate,null) + ',' + SysQuery::value(dateNull()));

        QueryBuildDataSource dsBOM = dsBOMVersion.addDataSource(tableNum(BOM));
        dsBOM.addLink(fieldNum(BOMVersion, bomId), fieldNum(BOM, bomId));
        dsBOM.addRange(fieldNum(BOM, ToDate)).value(SysQuery::range(todaydate, null) + ',' + SysQuery::value(dateNull()));

        QueryBuildDataSource dsInventTableBOMSubItem = dsBOM.addDataSource(tableNum(InventTable),'InventTableBOMSubItem');
        dsInventTableBOMSubItem.addLink(fieldNum(BOM,ItemId),fieldNum(InventTable, ItemId));
        dsInventTableBOMSubItem.addSelectionField(fieldNum(InventTable, BOMLevel));
        dsInventTableBOMSubItem.addSelectionField(fieldNum(InventTable, CostBOMLevel));
        dsInventTableBOMSubItem.addSelectionField(fieldNum(InventTable, RecId));
        dsInventTableBOMSubItem.addGroupByField(fieldNum(InventTable, BOMLevel));
        dsInventTableBOMSubItem.addGroupByField(fieldNum(InventTable, CostBOMLevel));
        dsInventTableBOMSubItem.addGroupByField(fieldNum(InventTable, RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads is-produced-from dependencies from BOM and production BOM into the analyzer.
    /// </summary>
    protected void loadDependencies()
    {
        Query query = this.createInventTableBomQuery();

        this.addProductionOrderDependencies(query);

        QueryRun queryRun = new QueryRun(query);
        this.loadToAnalyzer(queryRun, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductionOrderDependencies</Name>
				<Source><![CDATA[
    private void addProductionOrderDependencies(Query _query)
    {
        // Get data from ProdBOM
        QueryBuildDataSource dsInventTableProdBOM = _query.addDataSource(tableNum(InventTable),'inventTableProdBOM',UnionType::Union);

        dsInventTableProdBOM.addRange(fieldNum(InventTable,ItemType)).value(queryValue(any2int(ItemType::Item)));

        dsInventTableProdBOM.addSelectionField(fieldNum(InventTable,RecId));
        dsInventTableProdBOM.addSelectionField(fieldNum(InventTable,BOMLevel));
        dsInventTableProdBOM.addSelectionField(fieldNum(InventTable,CostBOMLevel));
        dsInventTableProdBOM.addGroupByField(fieldNum(InventTable,RecId));
        dsInventTableProdBOM.addGroupByField(fieldNum(InventTable,BOMLevel));
        dsInventTableProdBOM.addGroupByField(fieldNum(InventTable,CostBOMLevel));

        QueryBuildDataSource dsProdTable = dsInventTableProdBOM.addDataSource(tableNum(ProdTable));
        dsProdTable.addLink(fieldNum(InventTable,ItemId),fieldNum(ProdTable,ItemId));
        dsProdTable.addRange(fieldNum(ProdTable,ProdStatus)).value(SysQuery::range(ProdStatus::CostEstimated,ProdStatus::Completed));

        QueryBuildDataSource dsProdBOM = dsProdTable.addDataSource(tableNum(ProdBOM));
        dsProdBOM.addLink(fieldNum(ProdTable,ProdId),fieldNum(ProdBOM,ProdId));
        dsProdBOM.addRange(fieldNum(ProdBOM, ItemId)).value(strFmt("(%1.%2 != %3.%4)", dsProdBOM.name(), fieldStr(ProdBOM, ItemId), dsProdTable.name(), fieldStr(ProdTable, ItemId)));

        QueryBuildDataSource dsInventTableProdBOMSubItem = dsProdBOM.addDataSource(tableNum(InventTable),'InventTableProdBOMSubItem');
        dsInventTableProdBOMSubItem.addLink(fieldNum(ProdBOM,ItemId),fieldNum(InventTable,ItemId));
        dsInventTableProdBOMSubItem.addSelectionField(fieldNum(InventTable,RecId));
        dsInventTableProdBOMSubItem.addSelectionField(fieldNum(InventTable,BOMLevel));
        dsInventTableProdBOMSubItem.addSelectionField(fieldNum(InventTable,CostBOMLevel));
        dsInventTableProdBOMSubItem.addGroupByField(fieldNum(InventTable,RecId));
        dsInventTableProdBOMSubItem.addGroupByField(fieldNum(InventTable,BOMLevel));
        dsInventTableProdBOMSubItem.addGroupByField(fieldNum(InventTable,CostBOMLevel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependenciesExcludeProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads is-produced-from dependencies from BOM into the analyzer.
    /// </summary>
    protected void loadDependenciesExcludeProductionOrder()
    {
        Query query = this.createInventTableBomQuery();
        QueryRun queryRun = new QueryRun(query);

        this.loadToAnalyzer(queryRun, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependenciesProdutionOrderOnly</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads is-produced-from dependencies from production BOM into the analyzer.
    /// </summary>
    protected void loadDependenciesProdutionOrderOnly()
    {
        Query query = new Query();

        this.addProductionOrderDependencies(query);

        QueryRun queryRun = new QueryRun(query);

        this.loadToAnalyzerProductionOrderOnly(queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadToAnalyzer</Name>
				<Source><![CDATA[
    private void loadToAnalyzer(QueryRun _queryRun, boolean _isProdBomPresent)
    {
        const int InventTableBOMDataSource = 1;
        const int InventTableBOMSubItemDataSource = 4;
        const int InventTableProdBOMDataSource = 5;
        const int InventTableProdBOMSubItemDataSource = 8;

        InventTable          inventTableBOM;
        InventTable          inventTableSubItem;
        InventTable          inventTableCoBy;

        while (_queryRun.next())
        {
            if (_queryRun.getNo(InventTableBOMDataSource))
            {
                inventTableBOM = _queryRun.getNo(InventTableBOMDataSource);
                inventTableSubItem = _queryRun.getNo(InventTableBOMSubItemDataSource);

                if (#PmfEnabled
                && (    inventTableBOM.PmfProductType == PmfProductType::Formula
                    ||  inventTableBOM.PmfProductType == PmfProductType::MainItem))
                {
                    while select RecId, ItemId, BOMLevel, CostBOMLevel
                    from  inventTableCoBy
                    where  inventTableCoBy.PmfProductType       == PmfProductType::Co_Product
                        && inventTableCoBy.PmfPlanningItemId    == inventTableBOM.ItemId
                    {
                        analyzer.pmfAddEndItemGroupMember(
                                inventTableCoBy.RecId,
                                inventTableBOM.RecId);
                        this.addToOriginalBomLevelMap(inventTableCoBy.RecId, inventTableCoBy.BOMLevel);
                        this.addToOriginalCostBomLevelMap(inventTableCoBy.RecId, inventTableCoBy.CostBOMLevel);
                    }
                }
            }
            else
            {
                inventTableBOM = _queryRun.getNo(InventTableProdBOMDataSource);
                inventTableSubItem = _queryRun.getNo(InventTableProdBOMSubItemDataSource);
            }

            this.addToAnalyzer(inventTableSubItem, inventTableBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadToAnalyzerProductionOrderOnly</Name>
				<Source><![CDATA[
    private void loadToAnalyzerProductionOrderOnly(QueryRun _queryRun)
    {
        const int InventTableProdBOMDataSource = 1;
        const int InventTableProdBOMSubItemDataSource = 4;

        InventTable          inventTableBOM;
        InventTable          inventTableSubItem;

        while (_queryRun.next())
        {
            inventTableBOM = _queryRun.getNo(InventTableProdBOMDataSource);
            inventTableSubItem = _queryRun.getNo(InventTableProdBOMSubItemDataSource);

            this.addToAnalyzer(inventTableSubItem, inventTableBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToAnalyzer</Name>
				<Source><![CDATA[
    private void addToAnalyzer(InventTable _inventTableSubItem, InventTable _inventTableBOM)
    {
        analyzer.addDependency(_inventTableSubItem.RecId, _inventTableBOM.RecId);

        this.addToOriginalBomLevelMap(_inventTableSubItem.RecId, _inventTableSubItem.BOMLevel);
        this.addToOriginalBomLevelMap(_inventTableBOM.RecId, _inventTableBOM.BOMLevel);
        this.addToOriginalCostBomLevelMap(_inventTableSubItem.RecId, _inventTableSubItem.CostBOMLevel);
        this.addToOriginalCostBomLevelMap(_inventTableBOM.RecId, _inventTableBOM.CostBOMLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges to the BOMVersion <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_datasourceBOMVersion">An instance of the <c>QueryBuildDataSource</c>.</param>
    /// <param name = "_todayDate">Today's date.</param>
    protected void addRangeForBOMVersion(QueryBuildDataSource _datasourceBOMVersion, date _todayDate)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)))
        {
            _datasourceBOMVersion.addRange(fieldNum(BOMVersion,Approved)).value(SysQuery::value(NoYes::Yes));
        }

        _datasourceBOMVersion.addRange(fieldNum(BOMVersion,ToDate)).value(SysQuery::range(_todayDate, null) + ',' + SysQuery::value(dateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToOriginalBomLevelMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Memorizes the original level for the specific graph node.
    /// </summary>
    /// <param name = "_nodeId">The ID of the node.</param>
    /// <param name = "_level">The level to be memorized.</param>
    protected void addToOriginalBomLevelMap(RecId _nodeId, BOMLevel _level)
    {
        if (!originalBOMLevelMap.exists(_nodeId))
        {
            originalBOMLevelMap.insert(_nodeId, _level);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToOriginalCostBomLevelMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Memorizes the original cost calculation level for the specific graph node.
    /// </summary>
    /// <param name = "_nodeId">The ID of the node.</param>
    /// <param name = "_level">The level to be memorized.</param>
    protected void addToOriginalCostBomLevelMap(RecId _nodeId, CostBOMLevel _level)
    {
        if (!originalCostBOMLevelMap.exists(_nodeId))
        {
            originalCostBOMLevelMap.insert(_nodeId, _level);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion,#CurrentList];

        return SysPackExtensions::appendExtension(packed, classStr(BomLevelCalc), [excludeProductionOrder]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserConnection</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void validateUserConnection()
    {
        if (!connection)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityContext</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createActivityContext()
    {
        return BomInstrumentationLogger::createLogger(classStr(BOMLevelCalc)).bom().levelCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCostCalculationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cost calculation level should be used.
    /// </summary>
    /// <returns>true if the cost calculation level should be used; otherwise, false.</returns>
    protected boolean useCostCalculationLevel()
    {
        return BOMCalcJobExcludeProdOrderFromCostCalculationFeature::instance().isEnabled() &&
            (this.isCostBOMLevelCalcNeeded() ||
                this.parmExcludeProductionOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculates the BOM levels of all items, based on the information from both BOM version
    ///    definitions and production BOMs.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        using(var activiyContext = this.createActivityContext())
        {
            originalBOMLevelMap = new Map(Types::Int64, Types::Integer);
            originalCostBOMLevelMap = new Map(Types::Int64, Types::Integer);

            try
            {
                connection = new UserConnection();
                connection.ttsbegin();

                this.initializeAnalyzer();

                if (this.useCostCalculationLevel())
                {
                    // We need to update BOMlevel and CostBOMLevel
                    calculationLevel = BOMLevelCalcLevelType::CostBOMLevel;

                    // Load is-produced-from dependencies from BOM into the analyzer
                    this.loadDependenciesExcludeProductionOrder();

                    if (this.isBOMLevelCalcNeeded())
                    {
                        // Ensure that the graphs internal structure is not cleared when running the analyzer, we need the structure for processing the ProdBOM dependencies
                        boolean clearGraph = analyzer.parmMustClearGraphAfterAnalysis();
                        analyzer.parmMustClearGraphAfterAnalysis(false);

                        // Analyze the dependency graph and update CostBOMLevels
                        this.runAnalyzerAndUpdateBOMLevels();

                        analyzer.parmMustClearGraphAfterAnalysis(clearGraph);
                        analyzer.clearLevels();

                        calculationLevel = BOMLevelCalcLevelType::BOMLevel;

                        // Load is-produced-from dependencies from ProdBOM into the analyzer
                        this.loadDependenciesProdutionOrderOnly();
                    }
                }
                else
                {
                    calculationLevel = BOMLevelCalcLevelType::BOMLevel;

                    // Load is-produced-from dependencies from BOM and ProdBOM into the analyzer
                    this.loadDependencies();
                }

                this.runAnalyzerAndUpdateBOMLevels();

                // Marks that BOM recalculation is not needed anymore
                this.markLevelsUpToDate();

                connection.ttscommit();
            }
            catch(Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            finally
            {
                if (connection)
                {
                    connection.finalize();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAnalyzer</Name>
				<Source><![CDATA[
    protected void initializeAnalyzer()
    {
        analyzer = BOMLevelAnalyzer::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAnalyzerAndUpdateBOMLevels</Name>
				<Source><![CDATA[
    private void runAnalyzerAndUpdateBOMLevels()
    {
        // Analyze the dependency graph
        analyzer.analyze();

        // Update the BOMLevels of all items
        this.updateBOMLevels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the job runs by using the permissions of the user who ordered it, even if it runs in
    ///    batch.
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;

                container packedExtension = SysPackExtensions::findExtension(packedClass, classStr(BomLevelCalc));
                if(packedExtension != conNull())
                {
                    [excludeProductionOrder] = packedExtension;
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enforceSetBasedUpdateInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that BOM levels computation updates <c>InventTable</c> as a set based operation
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> record
    /// </param>
    protected void enforceSetBasedUpdateInventTable(InventTable _inventTable)
    {
        _inventTable.skipDataMethods(true);
        _inventTable.skipDatabaseLog(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the BOM levels of all items.
    /// </summary>
    protected void updateBOMLevels()
    {
        InventTable     inventTable;
        RefRecId        inventTableRecId;
        MapEnumerator   enumLevels;
        BOMLevel        newLevel;
        BOMLevel        maxLevel;

        this.validateUserConnection();

        inventTable.setConnection(connection);
        this.enforceSetBasedUpdateInventTable(inventTable);

        // Update BOM level for the items where the bom level is changed.
        enumLevels = analyzer.getLevels().getEnumerator();
        while (enumLevels.moveNext())
        {
            inventTableRecId = enumLevels.currentKey();
            newLevel = enumLevels.currentValue();

            switch (calculationLevel)
            {
                case BOMLevelCalcLevelType::CostBOMLevel:
                    if (newLevel != originalCostBOMLevelMap.lookup(inventTableRecId))
                    {
                        update_recordset inventTable
                        setting CostBOMLevel = newLevel
                        where inventTable.RecId == inventTableRecId;
                    }
                    break;

                case BOMLevelCalcLevelType::BOMLevel:
                    if (newLevel != originalBOMLevelMap.lookup(inventTableRecId))
                    {
                        update_recordset inventTable
                            setting BOMLevel = newLevel
                            where inventTable.RecId == inventTableRecId;
                    }
                    break;
            }

            maxLevel = max(newLevel, maxLevel);
        }

        // Make all co-products that are not being planned with a planning item go to the last BOM level
        switch (calculationLevel)
        {
            case BOMLevelCalcLevelType::CostBOMLevel:
                update_recordset inventTable
                    setting CostBOMLevel = maxLevel + 1
                    where inventTable.PmfProductType == PmfProductType::Co_Product
                       && inventTable.PmfPlanningItemId == '';
                break;

            case BOMLevelCalcLevelType::BOMLevel:
                update_recordset inventTable
                    setting bomLevel = maxLevel + 1
                    where inventTable.PmfProductType == PmfProductType::Co_Product
                       && inventTable.PmfPlanningItemId == '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markLevelsUpToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a flag marking levels as recalculated.
    /// </summary>
    protected void markLevelsUpToDate()
    {
        if (connection)
        {
            this.clearBOMLevelRecalculationNeededInUserConnection();
        }
        else
        {
            BOMLevelCalc::clearBOMLevelRecalculationNeeded();

            if (this.useCostCalculationLevel())
            {
                BOMLevelCalc::clearCostBOMLevelRecalculationNeeded();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLevelRecalcBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether BOM level recalculation is needed due to a change to a BOM line record.
    /// </summary>
    /// <param name="_bomLine">
    ///    The <c>BOM</c> record that has changed.
    /// </param>
    public static void checkLevelRecalcBOM(BOM _bomLine)
    {
        BOMVersion bomVersion;

        // check if this is an update and any of the relevant inputs have changed
        if (    _bomLine.orig()
            &&  _bomLine.ItemId      == _bomLine.orig().ItemId
            &&  _bomLine.bomId       == _bomLine.orig().bomId
            &&  _bomLine.ToDate      == _bomLine.orig().ToDate
            &&  _bomLine.InventDimId == _bomLine.orig().InventDimId)
        {
            return;
        }

        // check if this an insert and all the relevant data has been filled in
        if (    !_bomLine.orig()
            &&  (!_bomLine.ItemId
            ||   !_bomLine.bomId
            ||   !_bomLine.InventDimId))
        {
            return;
        }

        // check that there is at least one version that is approved that uses this line
        select firstonly RecId from bomVersion
            where   (bomVersion.bomId    == _bomLine.bomId || bomVersion.bomId    == _bomLine.orig().bomId)
            &&      (isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)) && bomVersion.Approved == NoYes::Yes)
            &&      (bomVersion.ToDate == dateNull() || bomVersion.ToDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (bomVersion)
        {
            BOMLevelCalc::setBOMLevelRecalculationNeeded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLevelRecalcBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether BOM level recalculation is needed due to a change to the <c>BOMVersion</c> table.
    /// </summary>
    /// <param name="_bomVersion">
    ///    The <c>BOMVersion</c> record that has changed.
    /// </param>
    public static void checkLevelRecalcBOMVersion(BOMVersion _bomVersion)
    {
        BOM bomLine;

        // check if this is an update and any of the relevant inputs have changed
        if (    _bomVersion.orig()
            &&  _bomVersion.ItemId      == _bomVersion.orig().ItemId
            &&  _bomVersion.bomId       == _bomVersion.orig().bomId
            &&  (isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)) && _bomVersion.Approved    == _bomVersion.orig().Approved)
            &&  _bomVersion.ToDate      == _bomVersion.orig().ToDate
            &&  _bomVersion.InventDimId == _bomVersion.orig().InventDimId)
        {
            return;
        }

        // check if this an insert and all the relevant data has been filled in
        if (    !_bomVersion.orig()
            &&  (!_bomVersion.ItemId
            ||   !_bomVersion.bomId
            ||   (isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)) && !_bomVersion.Approved)
            ||   !_bomVersion.InventDimId))
        {
            return;
        }

        // check that the version has at least one line
        select firstonly RecId from bomLine
            where bomLine.bomId == _bomVersion.bomId;

        if (bomLine)
        {
            BOMLevelCalc::setBOMLevelRecalculationNeeded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLevelRecalcInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether BOM level recalculation is needed due to a change to an <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that has changed.
    /// </param>
    public static void checkLevelRecalcInventTable(InventTable _inventTable)
    {
        boolean     recalc = false;
        InventTable inventTableOrig = _inventTable.orig();

        if (!_inventTable.RecId && _inventTable.PmfProductType == PmfProductType::Co_Product)
        {
            recalc = true;
        }

        if (inventTableOrig)
        {
            if (inventTableOrig.PmfPlanningItemId != _inventTable.PmfPlanningItemId)
            {
                recalc = true;
            }

            if (inventTableOrig.PmfProductType != _inventTable.PmfProductType
              && (inventTableOrig.PmfProductType == PmfProductType::Co_Product
                 || _inventTable.PmfProductType ==  PmfProductType::Co_Product))
            {
                recalc = true;
            }
        }

        if (recalc)
        {
            BOMLevelCalc::setBOMLevelRecalculationNeeded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLevelRecalcProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether BOM level recalculation is needed due to a change to the production BOM line.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The <c>ProdBOM</c> record that has changed.
    /// </param>
    public static void checkLevelRecalcProdBOM(ProdBOM _prodBOM)
    {
        // check if this is an update and any of the relevant inputs have changed
        if (    _prodBOM.orig()
            &&  _prodBOM.ItemId      == _prodBOM.orig().ItemId)
        {
            return;
        }

        // check if this an insert and all the relevant data has been filled in
        if (    !_prodBOM.orig()
            &&  !_prodBOM.ItemId)
        {
            return;
        }

        BOMLevelCalc::setBOMLevelRecalculationNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBOMLevelRecalculationNeededInUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks that a BOM level recalculation is not needed using a specific user connection.
    /// </summary>
    protected void clearBOMLevelRecalculationNeededInUserConnection()
    {
        this.validateUserConnection();
        BOMLevelRecalculation bomLevelRecalculation = BOMLevelRecalculation::find(curext(), true);
        bomLevelRecalculation.setConnection(connection);
        
        bomLevelRecalculation.bomLevelRecalculationNeeded = NoYes::No;
        if (this.useCostCalculationLevel())
        {
            bomLevelRecalculation.CostBOMLevelRecalculationNeeded = NoYes::No;
        }
        bomLevelRecalculation.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBOMLevelRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks that a BOM level recalculation is not needed.
    /// </summary>
    public static void clearBOMLevelRecalculationNeeded()
    {
        BOMLevelRecalculation bomLevelRecalculation;

        ttsbegin;

        bomLevelRecalculation = BOMLevelRecalculation::find(curext(), true);
        bomLevelRecalculation.bomLevelRecalculationNeeded = NoYes::No;
        bomLevelRecalculation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCostBOMLevelRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks that a cost calculation level recalculation is not needed.
    /// </summary>
    public static void clearCostBOMLevelRecalculationNeeded()
    {
        BOMLevelRecalculation bomLevelRecalculation;

        ttsbegin;

        bomLevelRecalculation = BOMLevelRecalculation::find(curext(), true);
        bomLevelRecalculation.CostBOMLevelRecalculationNeeded = NoYes::No;
        bomLevelRecalculation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMLevelCalc construct()
    {
        return new BOMLevelCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS112515";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMLevelCalc bomLevelCalc = BOMLevelCalc::construct();

        if (! bomLevelCalc.prompt())
        {
            return;
        }

        bomLevelCalc.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMLevelRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks that a BOM level recalculation is needed.
    /// </summary>
    public static void setBOMLevelRecalculationNeeded()
    {
        BOMLevelRecalculation bomLevelRecalculation;

        ttsbegin;

        bomLevelRecalculation = BOMLevelRecalculation::find(curext(), true);
        bomLevelRecalculation.bomLevelRecalculationNeeded = NoYes::Yes;
        bomLevelRecalculation.CostBOMLevelRecalculationNeeded = NoYes::Yes;
        bomLevelRecalculation.PlanningBOMLevelRecalculationNeeded = NoYes::Yes;
        bomLevelRecalculation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>