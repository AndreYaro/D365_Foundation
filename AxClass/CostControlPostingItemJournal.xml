<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingItemJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostControlPostingItemJournal extends CostControlPostingItem
{
    InventJournalTrans  inventJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty = inventJournalTrans.Qty, TransDate _transDate=DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (!super(_qty))
            return false;

        if (_qty==0)
            return true;

        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, _transDate);
        this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

        if (ProjTable::find(inventJournalTrans.ProjId).UseBudgeting)
        {
            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(inventJournalTrans);

            if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.salesAmount()))
            {
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(inventJournalTrans.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
        }
        else
        {
        if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
            this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost = super(_qty, _transDate);

        costControlTransCommittedCost.initFromInventJournalTrans(inventJournalTrans);
        AmountCur amountCur = inventJournalTrans.CostAmount;
        costControlTransCommittedCost.Amount = amountCur;
        costControlTransCommittedCost.AmountMst = costControlTransCommittedCost.Amount;

        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        ProjCommittedCostUpdateAction   retActionType;
        InventJournalTrans              inventJournalTrans_Orig;
        // No original means create a brand new salesLine
        if (! movement_Orig || !CostControlTransCommittedCost::findOpenedByProjTransID(inventJournalTrans.ProjTransId))
            retActionType = ProjCommittedCostUpdateAction::Create;

        else
        {
            if (movement_Orig.buffer().TableId!=tablenum(InventJournalTrans))
                throw error ("@SYS22828",funcname());
            else
                inventJournalTrans_Orig=movement_Orig.buffer();

            // Don't change the order of the three
            // dimension changes, update committed cost without reverse
            if (!DimensionDefaultFacade::areEqual(inventJournalTrans_Orig.DefaultDimension, inventJournalTrans.DefaultDimension)
              ||inventJournalTrans_Orig.ProjCategoryId!=inventJournalTrans.ProjCategoryId
              ||inventJournalTrans_Orig.ActivityNumber!=inventJournalTrans.ActivityNumber)
                    retActionType = ProjCommittedCostUpdateAction::UpdateOnly;

            // qty changes, should reverse the old one and recreate committed cost
            if (inventJournalTrans_Orig.Qty !=inventJournalTrans.Qty
             || inventJournalTrans_Orig.CostAmount != inventJournalTrans.CostAmount
             || (ProjTable::find(inventJournalTrans.ProjId).UseBudgeting && inventJournalTrans_Orig.ProjSalesPrice != inventJournalTrans.ProjSalesPrice))
                    retActionType = ProjCommittedCostUpdateAction::UpdateReverse;
        }
        return retActionType==ProjCommittedCostUpdateAction::Unknown? ProjCommittedCostUpdateAction::UpdateOnly:retActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        inventJournalTrans = buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction when a budget update is required.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction.
    /// </param>
    /// <returns>
    ///    true if the amounts are valid; otherwise, false.
    /// </returns>
    public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
    {
        boolean ret = true;

        if (actionType == ProjCommittedCostUpdateAction::Create && _costAmount == 0 && _salesAmount == 0)
        {
            ret = false;
        }
        if (actionType == ProjCommittedCostUpdateAction::Post && _costAmount == 0 && _salesAmount == 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        if (actionType== ProjCommittedCostUpdateAction::Create
        && _qty==0)
            return false;
        if ((actionType== ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete)
        && _qty==0)
            return false;
        if (actionType== ProjCommittedCostUpdateAction::Post)
            return false;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventMovement _movement)
    {
        super(_movement);
        if (movement)
           buffer=movement.buffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalTrans</Name>
				<Source><![CDATA[
    public InventJournalTrans parmInventJournalTrans(InventJournalTrans _inventJournalTrans=inventJournalTrans)
    {
        inventJournalTrans=_inventJournalTrans;
        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return inventJournalTrans.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
    {
        CostControlTransCommittedCost   costControlTransCommittedCost;
        Voucher                         voucher;
        TransDate                       ledgerTransDate;

        if (!super(isInvoiced))
            return false;

        if (isInvoiced)
        {
            voucher = this.parmLedgerVoucher().lastVoucher();

            ledgerDimensionDefaultAccount = this.parmMovement().accountOperations();
            ledgerTransDate=this.parmLedgerVoucher().lastTransDate();
        }

        while select forupdate costControlTransCommittedCost
            where costControlTransCommittedCost.ProjTransId == inventJournalTrans.ProjTransId
        {
            // update the voucher/ledger information; not overwrite if partially invoice
            if (isInvoiced && !costControlTransCommittedCost.Voucher)
            {
                if (!costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = voucher;
                    costControlTransCommittedCost.LedgerDimension=ledgerDimensionDefaultAccount;
                }
            }
            // Clear the open
            if (costControlTransCommittedCost.Open ==NoYes::Yes)
            {
                costControlTransCommittedCost.Open = NoYes::No;
                costControlTransCommittedCost.Reverse = NoYes::No;

                CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, isInvoiced, voucher, ledgerDimensionDefaultAccount, ledgerTransDate);

                if (ProjTable::find(inventJournalTrans.ProjId).UseBudgeting)
                {
                    ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(inventJournalTrans);

                    if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.SalesAmount()))
                    {
                        this.budgetUpdate(inventJournalTrans.ProjId,ProjBudgetTransaction::construct(inventJournalTrans),ProjBudgetAdjustmentType::Increment);
                    }
                }
                else
                {
                    if (this.mustUpdateForecast(costControlTransCommittedCost.Qty))
                        this.forecastUpdate(costControlTransCommittedCost,
                                            -costControlTransCommittedCost.Qty,
                                            -costControlTransCommittedCost.Amount);
                }
            }

            costControlTransCommittedCost.update();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        CostControlTransCommittedCost           updateCCTCC;

        CostControlTransCommittedCost oldOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());

        ProjCategoryId oldCategoryId = oldOpenCCTCC.CategoryId;
        smmActivityNumber oldActivityNum = oldOpenCCTCC.ActivityNumber;

        ProjCategoryId newCategoryId = inventJournalTrans.ProjCategoryId;
        smmActivityNumber newActivityNum = inventJournalTrans.ActivityNumber;

        while select forupdate updateCCTCC
            where updateCCTCC.ProjTransId == inventJournalTrans.ProjTransId
        {
            updateCCTCC.DefaultDimension = inventJournalTrans.DefaultDimension;
            updateCCTCC.CategoryId= inventJournalTrans.ProjCategoryId;
            updateCCTCC.ActivityNumber = inventJournalTrans.ActivityNumber;
            updateCCTCC.update();
        }

        if (oldCategoryId != newCategoryId || oldActivityNum != newActivityNum || inventJournalTrans.ProjSalesPrice != inventJournalTrans.orig().ProjSalesPrice)
        {
            boolean useBudgeting = ProjTable::find(inventJournalTrans.ProjId).UseBudgeting;

            if (useBudgeting)
            {
                this.budgetUpdate(inventJournalTrans.ProjId,ProjBudgetTransaction::construct(inventJournalTrans),ProjBudgetAdjustmentType::Increment);
            }
            else
            {
                this.forecastUpdate(oldOpenCCTCC, -oldOpenCCTCC.Qty, -oldOpenCCTCC.Amount);
            }

            if (useBudgeting)
            {
                ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine::construct(inventJournalTrans);
                ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                this.budgetUpdate(inventJournalTrans.ProjId, projBudgetTransaction, ProjBudgetAdjustmentType::Decrement);
            }
            else
            {
                CostControlTransCommittedCost newOpenCCTCC = CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId());
                this.forecastUpdate(newOpenCCTCC,
                                    newOpenCCTCC.Qty,
                                    newOpenCCTCC.Amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        boolean ret = super();
        if (ret)
        {
            if (!ProjParameters::find().TrackCommittedCostItemJournal)
                ret=false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>