<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCopying_CreditNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CreditNoteHeader, tableStr(SalesTable))]
public class SalesCopying_CreditNote extends SalesCopying
{
    SpecTransManager specTransManager;
    boolean          deleteSettlement;
    boolean          headerTotalDiscountSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    void copy()
    {
        ttsbegin;

        if (!CustParameters::find().TaxAdjustmentInReturn)
        {
            // clear out any existing tax adjustments for the Sales Order.
            TaxWorkRegulation::clearRegulation(salesTable.TableId, salesTable.RecId);
        }

        super();

        if (salesTable.SettleVoucher != salesParameters.SettleVoucher)
        {
            salesTable.SettleVoucher = salesParameters.SettleVoucher;
            if (salesTable.validateWrite())
            {
                salesTable.update();
            }
            else
            {
                salesTable.reread();
                throw error("@SYS18722");
            }
        }

        // Process any credit card information that is needed.
        this.copyCreditCardTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSettlementVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the settlement voucher type.
    /// </summary>
    /// <returns>
    ///     true if the settlement voucher type is not none; otherwise, false.
    /// </returns>
    protected boolean checkSettlementVoucher()
    {
        return (salesTable.SettleVoucher != SettlementType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCreditCardTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy credit card transactions.
    /// </summary>
    private void copyCreditCardTrans()
    {
        if (salesTable.isCreditCardPaymentType())
        {
            if (this.checkSettlementVoucher())
            {
                Box::infoOnce("@SYS329021", "@SYS329022", funcName());

                salesTable.SettleVoucher = this.getSettlementType();
                if (salesTable.validateWrite())
                {
                    salesTable.update();
                }
                else
                {
                    salesTable.reread();
                    throw error("@SYS18722");
                }
            }

            CreditCardAuthTrans chargeAuthTrans = CreditCardAuthTrans::findChargeByInvoice(custInvoiceJour.SalesId, custInvoiceJour.InvoiceId);

            if (chargeAuthTrans)
            {
                ttsbegin;

                if (!CreditCard::sameCard(salesTable, chargeAuthTrans))
                {
                    salesTable.CreditCardCustRefId = CreditCardCust::findByUniqueCardId(chargeAuthTrans.UniqueCardId).RecId;
                    salesTable.update();
                }

                if (chargeAuthTrans.SalesId == salesTable.SalesId)
                {
                    // The original sales order is being udpated.
                    chargeAuthTrans.RefundStatus = CreditCardRefundStatus::Marked;
                    chargeAuthTrans.selectForUpdate(true);
                    chargeAuthTrans.update();
                }
                else
                {
                    // The sales order is new.
                    // Copy the charge auth trans details to be refunded.
                    CreditCardAuthTrans refundAuthTrans = chargeAuthTrans.data();
                    refundAuthTrans.RefundStatus = CreditCardRefundStatus::Marked;
                    refundAuthTrans.SalesId = salesTable.SalesId;
                    refundAuthTrans.insert();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the original transaction exchange rate to a credit note.
    /// </summary>
    /// <param name="_exchRate">
    /// The original transaction exchange rate.
    /// </param>
    /// <param name="_sourceTableId">
    /// The original transaction table Id.
    /// </param>
    /// <param name="_sourceRecordId">
    /// The original transaction record Id.
    /// </param>
    public void copyExchRate(ExchRate _exchRate
        , RefTableId    _sourceTableId = 0
        , RefRecId      _sourceRecordId = 0
        )
    {
        if (copyExchRate)
        {
            salesTable.FixedExchRate = _exchRate;

            if (_sourceTableId && _sourceRecordId)
            {
                if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Sales))
                {
                    TaxSpecificExchangeRateHelper::copyFromTaxSpecificExchangeRateType(
                        _sourceTableId,
                        _sourceRecordId,
                        salesTable.TableId,
                        salesTable.RecId,
                        dateNull(),
                        NoYes::Yes);
                }
                else
                {
                    SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(_sourceTableId, _sourceRecordId);

                    if (salesTaxTransactionExchangeRate)
                    {
                        SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(salesTable.TableId, salesTable.RecId, salesTable.currencyCode,
                        salesTaxTransactionExchangeRate.SalesTaxExchangeRate, salesTaxTransactionExchangeRate.DateOfVATRegister, NoYes::Yes);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the original exchange rate for the reporting currency transaction to a credit note.
    /// </summary>
    /// <param name="_reportingCurrencyExchRate">The original reporting currency exchange rate.</param>
    internal void copyReportingCurrencyExchangeRate(ReportingCurrencyExchRate _reportingCurrencyExchRate)
    {
        if (copyExchRate)
        {
            salesTable.ReportingCurrencyFixedExchRate = _reportingCurrencyExchRate;
            salesTable.setReportingCurrencyFixedExchangeRate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    public void copyHeader()
    {
        super();

        if (!headerTotalDiscountSet && custInvoiceJour.EndDisc)
        {
            this.setHeaderTotalDiscount();
            if (headerTotalDiscountSet)
            {
                salesTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReasonTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ReasonTableRef</c> record for a specified cancel reason or cancel reason comment.
    /// </summary>
    /// <param name="_reasonTableRef">
    /// The reference record ID of the record.
    /// </param>
    /// <returns>
    /// The record ID of the created reason table record.
    /// </returns>
    public ReasonRefRecID copyReasonTableRef(RefRecId _reasonTableRef)
    {
        ReasonTableRef  tmpReasonTableRef = ReasonTableRef::find(_reasonTableRef);
        ReasonRefRecID  reasonRefRecID    = _reasonTableRef;

        if (tmpReasonTableRef)
        {
            reasonRefRecID = ReasonTableRef::createReasonTableRef(tmpReasonTableRef.Reason, tmpReasonTableRef.ReasonComment);
        }

        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSettlement</Name>
				<Source><![CDATA[
    void deleteSettlement()
    {
        if (deleteSettlement)
        {
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerPreUpdate</Name>
				<Source><![CDATA[
    protected void headerPreUpdate()
    {
        super();

        if (salesTable.SettleVoucher != salesParameters.SettleVoucher)
        {
            salesTable.SettleVoucher = salesParameters.SettleVoucher;
        }

        this.setHeaderTotalDiscount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromCustInvoiceJour</Name>
				<Source><![CDATA[
    public void initHeaderFromCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        super(_custInvoiceJour);

        // Remove the total discount on the header as it is also synchronized done to the lines.
        salesTable.DiscPercent = 0;

        CustExchRate reportingCurrencyFixedExchangeRate = _custInvoiceJour.SalesId ? _custInvoiceJour.salesTable().ReportingCurrencyFixedExchRate : 0.0;

        if (_custInvoiceJour.ExchRate != 0.0 || _custInvoiceJour.ExchRateSecondary != 0.0 || reportingCurrencyFixedExchangeRate != 0.0)
        {
            copyExchRate = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(SalesTable     _salesTable,
                        TmpFrmVirtual  _tmpFrmVirtualLines,
                        TmpFrmVirtual  _tmpFrmVirtualHeader,
                        Qty            _qtyFactor            = 1,
                        NoYes          _reverseSign          = NoYes::No,
                        NoYes          _recalculateAmount    = NoYes::No,
                        NoYes          _copyMarkup           = NoYes::No,
                        NoYes          _copyPrecisely        = NoYes::No,
                        NoYes          _deleteLines          = NoYes::No,
                        NoYes          _createCorrectionLine = NoYes::No,
                        NoYes          _copyExchRate         = NoYes::No,
                        NoYes          _copyLineDlvAddress   = NoYes::No,
                        NoYes          _copyPersonalization  = NoYes::No
    )
    {
        super(_salesTable,
              _tmpFrmVirtualLines,
              _tmpFrmVirtualHeader,
              _qtyFactor,
              _reverseSign,
              _recalculateAmount,
              _copyMarkup,
              _copyPrecisely,
              // <GEERU>
              _deleteLines,
              // </GEERU>
              // <GEEU>
              _createCorrectionLine,
              // </GEEU>
              // <GEERU>
              _copyExchRate);
              // </GEERU>

        if (this.settleInvoiceTrans())
        {
            specTransManager = SpecTransManager::newFromSpec(_salesTable);
        }

        deleteSettlement = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current instance with Credit Note creation parameters from the <c>SalesOrderCreditNoteContract</c> object.
    /// </summary>
    /// <param name="_salesOrderCopyingContract">
    /// An instance of <c>SalesOrderCreditNoteContract</c> class.
    /// </param>
    public void initParametersFromContract(SalesOrderCopyingContract _salesOrderCopyingContract)
    {
        SalesCreditNoteCopyingContract salesCreditNoteCopyingContract = _salesOrderCopyingContract as SalesCreditNoteCopyingContract;

        if (salesCreditNoteCopyingContract == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(salesCreditNoteCopyingContract);
        deleteSettlement = salesCreditNoteCopyingContract.parmDeleteSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCorrectionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a correction line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line to make the correction for.
    /// </param>
    /// <param name="_qty">
    /// The sales quantity for the correction line.
    /// </param>
    /// <param name="_cwQty">
    /// The sales CW quantity for the correction line.
    /// </param>
    [SysObsolete('Use SalesLineCopyFromSource.makeCorrectionLine() instead', false, 30\11\2017)]
    protected void makeCorrectionLine(SalesLine _salesLine, Qty _qty, PdsCWInventQty _cwQty = 0)
    {
        SalesLine                       salesLine;
        InventTransOriginId             inventTransOriginId_SalesLine;
        InventTransOriginId             inventTransOriginId_SalesLineCorrection;
        SalesLineForeignTradeCategory   salesLineForeignTradeCategory;
        boolean                         existsCustInvoiceJour = CustAdvanceInvoiceSettlement_W::existsCustInvoiceJour(
                                                                    CustInvoiceTrans::findRecId(salesLine.RefReturnInvoiceTrans_W).custInvoiceJour());

        buf2Buf(_salesLine, salesLine);

        _salesLine.CreditNoteInternalRef_PL = _salesLine.RecId;
        _salesLine.doUpdate();

        salesLine.LineNum                  += 1;

        salesLine.SalesQty                  = existsCustInvoiceJour ? 0 : _qty;
        salesLine.PdsCWQty                  = existsCustInvoiceJour ? 0 : _cwQty;
        salesLine.QtyOrdered                = salesLine.calcQtyOrdered();
        salesLine.LineDisc                  = _salesLine.LineDisc;
        salesLine.MultiLnDisc               = _salesLine.MultiLnDisc;
        salesLine.SalesMarkup               = _salesLine.SalesMarkup;

        salesLine.LineAmount                = _salesLine.SalesQty ?
                                              -CurrencyExchangeHelper::amount(_salesLine.LineAmount, _salesLine.CurrencyCode) :
                                              0;
        salesLine.LineAmount                = salesLine.calcLineAmount();

        salesLine.RemainInventPhysical      = salesLine.QtyOrdered;
        salesLine.PdsCWRemainInventPhysical = salesLine.PdsCWQty;
        salesLine.RemainSalesPhysical       = salesLine.SalesQty;
        salesLine.InventTransIdReturn       = '';

        // To have new ProjTransId for corrective line too.
        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])))
        {
            salesLine.ProjTransId = '';
        }

        salesLine.CostPrice                 = 0;

        salesLine.CreditNoteInternalRef_PL  = _salesLine.RecId;
        salesLine.RefReturnInvoiceTrans_W   = 0;
        salesLine.CreditNoteReasonCode      = this.copyReasonTableRef(reasonTableRef);

        salesLine.insert();

        if (salesLine.isCategoryBased() && !SalesLineForeignTradeCategory::findSalesLine(salesLine))
        {
            salesLineForeignTradeCategory.initFromSalesLine(salesLine);
            salesLineForeignTradeCategory.insert();
            salesLine.type().updatePendingRegistrationsNonStocked(false);
        }

        inventTransOriginId_SalesLine           = InventTransOrigin::findByInventTransId(_salesLine.InventTransId).RecId;
        inventTransOriginId_SalesLineCorrection = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;

        InventTransOrigin::updateMarking(inventTransOriginId_SalesLineCorrection, inventTransOriginId_SalesLine, -salesLine.calcQtyOrdered());
        InventTransOrigin::updateMarking(inventTransOriginId_SalesLine, inventTransOriginId_SalesLineCorrection, -_salesLine.calcQtyOrdered());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marking customer transaction settlement record .
    /// </summary>
    /// <param name="_custVendInvoiceTrans">
    /// Buffer of CustVendInvoiceTrans.
    /// </param>
    void markForSettlement(CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        CustTrans        custTrans;
        ProjTable        projTable;
        boolean          isProject;

        ttsbegin;

        if (_custVendInvoiceTrans.TableId == tableNum(projInvoiceItem))
        {
            ProjInvoiceItem projInvoiceItem = _custVendInvoiceTrans;
            custTrans = projInvoiceItem.projInvoiceJour().custTrans();
            projTable = ProjTable::find(projInvoiceItem.ProjId);
            isProject = true;
        }
        else
        {
            CustInvoiceTrans custInvoiceTrans = _custVendInvoiceTrans;
            custTrans = custInvoiceTrans.custInvoiceJour().custTrans();
        }

        while (custTrans)
        {
            if (isProject)
            {
                custTrans.transData().markForSettlement(projTable);
            }
            else
            {
                custTrans.transData().markForSettlement(salesTable);
            }

            next custTrans;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsSalesCopying_CreditNote_Object</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates from parent class that the object was called from a salesCopying_CreditNote
    ///     object instantiation.
    /// </summary>
    /// <returns>
    ///     true if the object was called from a <c>SalesCopying_CreditNode</c> object; otherwise, false.
    /// </returns>
    boolean mcrIsSalesCopying_CreditNote_Object()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetReturnValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the return values for the specified <paramref name="_salesLine" />.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> table buffer on which to set the return values.
    /// </param>
    void mcrSetReturnValues(SalesLine _salesLine)
    {
        MCRSalesLine mcrSalesLine = _salesLine.mcrSalesLine();
        mcrSalesLine.CustInvoiceTransRecId = tmpFrmVirtualLines.RecordNo;
        _salesLine.mcrPackMCRSalesLine(mcrSalesLine);

        if (RetailPricingUseLegacyMcrSetReturnValuesFlight::instance().isEnabled())
        {
            MCRSalesLinePriceOverride mcrSalesLinePriceOverride = _salesLine.mcrSalesLinePriceOverride();
            mcrSalesLinePriceOverride.PriceOverride = NoYes::Yes;
            _salesLine.mcrPackMCRSalesLinePriceOverride(mcrSalesLinePriceOverride);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveSettlement</Name>
				<Source><![CDATA[
    public boolean promptRemoveSettlement()
    {
        if (this.settleInvoiceTrans() && specTransManager.getSpecTransCount() > 0)
        {
            deleteSettlement = SpecTrans::promptRemoveMarkedTransactions();
        }
        return deleteSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales order header total discount.
    /// </summary>
    protected void setHeaderTotalDiscount()
    {
        CustInvoiceTrans   custInvoiceTrans_Sum;
        LineAmount         sumLineAmount;

        if (custInvoiceJour.EndDisc)
        {
            if (SalesCopyingCreditNoteConsiderLinesTotalDiscFlight::instance().isEnabled())
            {
                while select SalesCategory, ItemId, LineAmount from custInvoiceTrans_Sum
                    where custInvoiceTrans_Sum.SalesId              == custInvoiceJour.SalesId
                        && custInvoiceTrans_Sum.InvoiceId           == custInvoiceJour.InvoiceId
                        && custInvoiceTrans_Sum.InvoiceDate         == custInvoiceJour.InvoiceDate
                        && custInvoiceTrans_Sum.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
                {
                    if (custInvoiceTrans_Sum.isCategoryBased()
                        || InventTableModule::find(custInvoiceTrans_Sum.ItemId, ModuleInventPurchSales::Sales).EndDisc)
                    {
                        sumLineAmount += custInvoiceTrans_Sum.LineAmount;
                    }
                }
            }
            else
            {
                select sum(LineAmount) from custInvoiceTrans_Sum
                    where custInvoiceTrans_Sum.SalesId              == custInvoiceJour.SalesId
                        && custInvoiceTrans_Sum.InvoiceId           == custInvoiceJour.InvoiceId
                        && custInvoiceTrans_Sum.InvoiceDate         == custInvoiceJour.InvoiceDate
                        && custInvoiceTrans_Sum.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;
                    
                sumLineAmount = custInvoiceTrans_Sum.LineAmount;
            }
            
            //Find the DiscPercent from sourceSalesTable firstly
            SalesTable sourceSalesTable = SalesTable::find(custInvoiceJour.SalesId);

            if (sourceSalesTable.EndDisc)
            {
                salesTable.EndDisc = sourceSalesTable.EndDisc;
            }

            if (sourceSalesTable && sourceSalesTable.DiscPercent && round(sourceSalesTable.DiscPercent * minOne(sumLineAmount) / 100, 0.01) == custInvoiceJour.EndDisc)
            {
                //Use sourceSalesTable.DiscPercent when the sourceSalesTable.DisPercent is exists and matching with custInvoiceTrans
                salesTable.DiscPercent = sourceSalesTable.DiscPercent;
            }
            else
            {
                //Reverse calculate the pct by custInvoiceJour.endisc when the sourceSalesTable.DisPercent is not exists or not matching with custInvoiceTrans
                salesTable.DiscPercent  = round(custInvoiceJour.EndDisc * 100 / minOne(sumLineAmount), 0.01);
            }

            headerTotalDiscountSet = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturn</Name>
				<Source><![CDATA[
    void setInventTransIdReturn(SalesLine salesLine, Common _fromTrans)
    {
        CustInvoiceTrans custInvoiceTrans;

        // <GEERU>
        if (_fromTrans.TableId == tableNum(CustInvoiceTrans))
        {
            custInvoiceTrans = _fromTrans;
            if (custInvoiceTrans.custInvoiceTrans_RU().InventTransIdDelivery_RU)
            {
                salesLine.InventTransIdReturn = custInvoiceTrans.custInvoiceTrans_RU().InventTransIdDelivery_RU;
                return;
            }
        }
        // </GEERU>

        //<GEEU>
        if (salesLine.QtyOrdered <= 0 || salesLine.ExpectedRetQty != 0)
        //</GEEU>
        {
        // <GEERU>
            switch (_fromTrans.TableId)
            {
                case tableNum(CustInvoiceTrans):
                    custInvoiceTrans = _fromTrans as CustInvoiceTrans;
        // </GEERU>
                    salesLine.InventTransIdReturn     = custInvoiceTrans.InventTransId;
        // <GEERU>
                    salesLine.RefReturnInvoiceTrans_W = custInvoiceTrans.RecId;
                    break;

                case tableNum(ProjInvoiceItem):
                    ProjInvoiceItem projInvoiceItem = _fromTrans as ProjInvoiceItem;
                    salesLine.InventTransIdReturn     = projInvoiceItem.InventTransId;
                    salesLine.RefReturnInvoiceTrans_W = projInvoiceItem.RecId;
                    break;
            }
        // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWQty</Name>
				<Source><![CDATA[
    public void setPdsCWQty(
        SalesLine   _salesLine,
        boolean     _reverseSign,
        real        _qtyFactor)
    {
        _salesLine.PdsCWQty      = _reverseSign ? -_salesLine.PdsCWQty : _salesLine.PdsCWQty;
        _salesLine.PdsCWQty      = decRound(
            _salesLine.PdsCWQty * _qtyFactor,
            UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.pdsCWUnitId())));

        _salesLine.SalesQty      = _reverseSign ? -_salesLine.SalesQty : _salesLine.SalesQty;
        _salesLine.QtyOrdered    = _reverseSign ? -_salesLine.QtyOrdered : _salesLine.QtyOrdered;

        //set the remainders
        _salesLine.PdsCWRemainInventFinancial   = 0;
        _salesLine.PdsCWRemainInventPhysical    = _salesLine.PdsCWQty;
        _salesLine.RemainSalesPhysical          = _salesLine.SalesQty;
        _salesLine.RemainInventPhysical         = _salesLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInvoiceTrans</Name>
				<Source><![CDATA[
    boolean settleInvoiceTrans()
    {
        return salesParameters.SettleVoucher == SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceCreditCopy</Name>
				<Source><![CDATA[
    void updateInvoiceCreditCopy(SalesLine _salesLine, CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        CustInvoiceJour localCustInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;

        // <GEERU>
        InventTrans       inventTransFrom;
        InventTrans       inventTransTo;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            InventTransOrigin inventTransOriginFrom = InventTransOrigin::findByInventTransId(_custVendInvoiceTrans.InventTransId);
            InventTransOrigin inventTransOriginTo = InventTransOrigin::findByInventTransId(_salesLine.InventTransId);

            while select RecId from inventTransFrom
                where inventTransFrom.InventTransOrigin       == inventTransOriginFrom.RecId &&
                      inventTransFrom.ReturnInventTransOrigin == inventTransOriginTo.RecId
            join RecId from inventTransTo
                where inventTransTo.InventTransOrigin         == inventTransOriginTo.RecId   &&
                      inventTransTo.InventDimId               == inventTransFrom.InventDimId
            {
                TransLink_RU::create(tableNum(InventTrans), inventTransFrom.RecId, inventTransTo.RecId);
            }
        }
        // </GEERU>

        if (_salesLine.ReturnStatus == ReturnStatusLine::None)
        {
            if (this.mustUpdateDimensionFromInvoice(_salesLine))
            {
                InventTransInvoice::updateDimensionsFromInvoice(
                         InventTransOrigin::findByInventTransId(_custVendInvoiceTrans.InventTransId).RecId,
                         _custVendInvoiceTrans.InvoiceNum,
                         _custVendInvoiceTrans.InvoiceDate,
                         InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
            }

            if (_custVendInvoiceTrans.TableId == tableNum(CustInvoiceTrans))
            {
                custInvoiceTrans = _custVendInvoiceTrans;

                localCustInvoiceJour = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                                                 custInvoiceTrans.InvoiceId,
                                                                                 custInvoiceTrans.InvoiceDate,
                                                                                 custInvoiceTrans.NumberSequenceGroup);
            }

            if (CustParameters::find().TaxAdjustmentInReturn)
            {
                TaxRegulation::adjustTaxInvoiceV2(_salesLine, 0, _salesLine.SalesQty);
            }
            else
            {
                TaxRegulation::adjustTaxInvoice(localCustInvoiceJour.LedgerVoucher,
                                                custInvoiceTrans.InvoiceDate,
                                                custInvoiceTrans.InventTransId,
                                                tableNum(SalesTable),
                                                _salesLine.salesTable().RecId,
                                                _salesLine.QtyOrdered,
                                                custInvoiceTrans.Qty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveSettlementOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// In credit note scenario, displays a prompt to user asking about removing existing settlements.
    /// </summary>
    /// <param name="_packedSalesCreditNoteCopyingContract">
    /// Packed copying contract of type <c>SalesCreditNoteCopyingContract</c>
    /// </param>
    /// <returns>
    /// Return value indicating if selected settlement transactions should be removed.
    /// </returns>
    public static boolean promptRemoveSettlementOnServer(container _packedSalesCreditNoteCopyingContract)
    {
        SalesCreditNoteCopyingContract salesCreditNoteCopyingContract = SalesCreditNoteCopyingContract::construct();
        salesCreditNoteCopyingContract.unpack(_packedSalesCreditNoteCopyingContract);

        SalesCopying salesCopying = SalesCopying::construct(salesCreditNoteCopyingContract.parmSalesPurchCopy());
        salesCopying.initParametersFromContract(salesCreditNoteCopyingContract);
        return salesCopying.promptRemoveSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefInvoice_MY</Name>
				<Source><![CDATA[
    public void setRefInvoice_MY(SalesLine _salesLine, CustVendInvoiceJour _invoiceJour)
    {
        super(_salesLine, _invoiceJour);

        SalesLine_W salesLine_W       = _salesLine.salesLine_W();
        salesLine_W.RefInvoiceId_MY   = _invoiceJour.InvoiceId;
        salesLine_W.RefInvoiceDate_MY = _invoiceJour.InvoiceDate;

        _salesLine.packSalesLine_W(salesLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateDimensionFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the order line is tracked in inventory.
    /// </summary>
    /// <param name = "_salesLine">
    /// A sales line for use.
    /// </param>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean mustUpdateDimensionFromInvoice(SalesLine _salesLine)
    {
        return _salesLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isCreditNote()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>