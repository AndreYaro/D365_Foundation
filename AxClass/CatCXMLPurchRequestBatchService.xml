<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPurchRequestBatchService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class for implementing the logic of the batch task
/// </summary>
internal class CatCXMLPurchRequestBatchService extends SysOperationServiceBase
{

    CatCXMLPurchRequestBatchDataContract catCXMLPurchRequestBatchDataContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>purchRequestPrepareAndSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare and Send the Purchase request to the vendor
    /// </summary>
    /// <param name="_catCXMLPurchRequestBatchDataContract">
    /// An instance of the <c>CatCXMLPurchRequestBatchDataContract</c> class
    /// </param>
    [SysEntryPointAttribute]
    public void purchRequestPrepareAndSend(CatCXMLPurchRequestBatchDataContract _catCXMLPurchRequestBatchDataContract)
    {
        CatCXMLPurchRequest         cxmlPurchRequest, cXMLPurchRequesUpdate;
        CatCXMLPurchRequestHistory  cxmlPurchRequestHistory, cxmlPurchRequestHistoryUpdate;
        CatCXMLPurchRequestPrepare  cxmlPurchRequestPrepare;
        CatCXMLPurchRequestSend     cxmlPurchRequestSend;
        CatCXMLParameters           cxmlParameters;
        boolean                     sendcXML, vendResponse;
        PurchResponseXML            purchResponseXML;
        PurchReqSendStatus          purchReqSendStatus;
        PurchReqVendStatus          purchReqVendStatus;

        cxmlParameters          = CatCXMLParameters::find();
        cxmlPurchRequestPrepare = CatCXMLPurchRequestPrepare::construct();
        cxmlPurchRequestSend    = CatCXMLPurchRequestSend::construct();

        while select cxmlPurchRequest
            where cxmlPurchRequest.PurchReqSendStatus == PurchReqSendStatus::Waiting
        {
            cxmlPurchRequestHistory = this.prepareOrderRequestCXML(cxmlPurchRequest,cxmlPurchRequestPrepare);
           
            //If the parameters are in the test mode then we won't actually send the XML or set the status.
            //This allows the XML to be generate in bulk by the batch to evaluate the data.
            //This is different to the Cat site settings as that might be sending to a test site.
            if (cxmlParameters.CXMLTestMode == CXMLTestMode::Live)
            {
                sendcXML = this.getSendCXMLStatus(cxmlPurchRequestHistory,cxmlParameters);

                //if the send parameter remained at true then send.
                if (this.validateOrderRequestCXML(cxmlPurchRequestPrepare, cxmlPurchRequestSend) && sendcXML)
                {
                    //Send the XML
                    cxmlPurchRequestSend.parmCatExternalCatalog(cxmlPurchRequestPrepare.parmCatExternalCatalog());
                    cxmlPurchRequestSend.parmCatCXMLPurchRequestHistory(cxmlPurchRequestHistory);
                    vendResponse = this.getVendResponseStatus(cxmlPurchRequestSend);
                }

                if (!vendResponse)
                {
                    //Populate the error message
                    purchResponseXML = cxmlPurchRequestSend.parmSendError();
                    //Update the status to stopped so that it can be filtered on to investigate issues.
                    purchReqSendStatus = PurchReqSendStatus::Stopped;
                    //Determine the status of the response.
                    purchReqVendStatus = PurchReqVendStatus::VendorError;
                }

                else
                {
                    //Get the response message.
                    purchResponseXML = cxmlPurchRequestSend.parmPurchResponseXML();

                    //Update the status to sent.
                    cxmlPurchRequestSend.addToLog("@CXM:MessageSentToSupplier");
                    purchReqSendStatus = PurchReqSendStatus::Sent;

                    //Determine the status of the response.
                    purchReqVendStatus = cxmlPurchRequestSend.vendorResponseStatus();
                }

                //If the TRACESEND flag is set in the external catalog the print the send trace.
                if(cXMLPurchRequestSend.parmTraceCode())
                {
                    purchResponseXML = cXMLPurchRequestSend.parmLog();
                }

                //Set the header to the same as the current line.
                ttsbegin;

                if (CatCXMLPurchRequestSelectLatestFlight::instance().isEnabled())
                {
                    cxmlPurchRequestHistoryUpdate = CatCXMLPurchRequestHistory::findByCurrent(cxmlPurchRequest.PurchId, true);
                }
                else
                {
                    cxmlPurchRequestHistoryUpdate = CatCXMLPurchRequestHistory::findByPurchId(cxmlPurchRequest.PurchId,true);
                }
                cxmlPurchRequestHistoryUpdate.purchResponseXMLEdit(true, purchResponseXML);
                cxmlPurchRequestHistoryUpdate.PurchReqSendStatus = purchReqSendStatus;
                cxmlPurchRequestHistoryUpdate.PurchReqVendStatus = purchReqVendStatus;

                //Using utcNow to be the time when the update actually happened.
                //The date in the response message will be relevant to the vendor's system
                cxmlPurchRequestHistoryUpdate.PurchReqStatusChangedDateTime = DateTimeUtil::utcNow();
                cxmlPurchRequestHistoryUpdate.update();

                cXMLPurchRequesUpdate = CatCXMLPurchRequest::findByPurchId(cxmlPurchRequest.PurchId,true);
                cXMLPurchRequesUpdate.PurchReqSendStatus = purchReqSendStatus;
                cXMLPurchRequesUpdate.PurchReqVendStatus = purchReqVendStatus;
                cXMLPurchRequesUpdate.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendCXMLStatus</Name>
				<Source><![CDATA[
    private boolean getSendCXMLStatus(CatCXMLPurchRequestHistory cxmlPurchRequestHistory, CatCXMLParameters cxmlParameters)
    {
        boolean sendcXML = true;
        
        //Check if sending updates is enabled. If not then mark not to send.
        if (cxmlPurchRequestHistory.PurchReqMessageType == PurchReqMessageType::Update && cxmlParameters.CXMLSendPOUpdate == false)
        {
            sendcXML = false;
        }

        //Check if sending delete's is enabled. If not then mark not to send.
        if (cxmlPurchRequestHistory.PurchReqMessageType == PurchReqMessageType::Delete && cxmlParameters.CXMLSendPODelete == false)
        {
            sendcXML = false;
        }
        
        return sendcXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendResponseStatus</Name>
				<Source><![CDATA[
    private boolean getVendResponseStatus(CatCXMLPurchRequestSend _cxmlPurchRequestSend)
    {
        boolean             vendResponse;
        System.Exception    sysexception;

        try
        {
            vendResponse  = _cxmlPurchRequestSend.vendorResponse();
        }

        catch(Exception::CLRError)
        {
            _cxmlPurchRequestSend.parmSendError("@CXM:CLRExceptionError");
            _cxmlPurchRequestSend.addToLog("@CXM:CLRExceptionError");

            sysexception = CLRInterop::getLastException();

            _cxmlPurchRequestSend.addToLog("@CXM:DashedLine");
            _cxmlPurchRequestSend.addToLog(sysexception.Message);
            _cxmlPurchRequestSend.addToLog(sysexception.InnerException.ToString());
            _cxmlPurchRequestSend.addToLog("@CXM:DashedLine");

            vendResponse = false;
        }

        return vendResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareOrderRequestCXML</Name>
				<Source><![CDATA[
    private CatCXMLPurchRequestHistory prepareOrderRequestCXML(CatCXMLPurchRequest          cxmlPurchRequest
                                                              ,CatCXMLPurchRequestPrepare   cxmlPurchRequestPrepare)
    {
        CatCXMLPurchRequestHistory  cxmlPurchRequestHistory;

        //Prepare the XML
        ttsbegin;

        cxmlPurchRequestHistory = CatCXMLPurchRequestHistory::findByCurrent(cxmlPurchRequest.PurchId,true);
        cxmlPurchRequestPrepare.parmCatCXMLPurchRequest(cxmlPurchRequest);
        cxmlPurchRequestPrepare.parmCatCXMLPurchRequestHistory(cxmlPurchRequestHistory);
        cxmlPurchRequestHistory.purchRequestXMLEdit(true, cxmlPurchRequestPrepare.generateOrderRequest());
        cxmlPurchRequestHistory.update();

        ttscommit;

        return cxmlPurchRequestHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderRequestCXML</Name>
				<Source><![CDATA[
    private boolean validateOrderRequestCXML(CatCXMLPurchRequestPrepare _cxmlPurchRequestPrepare,
                                             CatCXMLPurchRequestSend    _cxmlPurchRequestSend)
    {
        boolean valid = true;

        if(!_cxmlPurchRequestPrepare.parmCatExternalCatalog())
        {
            _cxmlPurchRequestSend.parmSendError(strFmt("@CXM:VendorNotAssociatedWithExternalCatalog",
                                                        _cxmlPurchRequestPrepare.parmCatCXMLPurchRequest().VendAccount));

            valid = false;
        }

        return valid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>