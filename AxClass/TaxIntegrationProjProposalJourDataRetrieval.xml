<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationProjProposalJourDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationProjProposalJourDataRetrieval</c> class retrieves data from <c>ProjProposalJour</c>, etc.
/// </summary>
/// <remarks>
/// This class is inherited from <c>TaxIntegrationSalesTableDataRetrieval</c> class to reuse the logics for sales line and charges.
/// </remarks>
[TaxIntegrationDataRetrieval(tableStr(ProjProposalJour))]
public class TaxIntegrationProjProposalJourDataRetrieval
    extends TaxIntegrationSalesTableDataRetrieval
{
    protected ProjProposalJour projProposalJour;
    protected ProjFundingSource projFundingSource;
    protected TransportationDocument transportationDocument;

    protected TaxIntegrationProjProposalLinesUnionView taxIntegrationProjProposalLinesUnionView;
    protected ProjProposalCost projProposalCost;
    protected ProjProposalEmpl projProposalEmpl;
    protected ProjProposalItem projProposalItem;
    protected ProjProposalOnAcc projProposalOnAcc;
    protected ProjProposalRevenue projProposalRevenue;

    protected SalesPurchJournalLine salesPurchJournalLine;
    protected ProjTrans projTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (this.document.getLocalRecord())
        {
            this.projProposalJour = this.document.getLocalRecord();

            return SysDaQueryObjectBuilder::from(this.custTableInvoice)
                .where(this.custTableInvoice, fieldStr(CustTable, AccountNum))
                    .isEqualToLiteral(this.projProposalJour.InvoiceAccount)
                .outerJoin(this.custTable)
                    .where(this.custTable, fieldStr(CustTable, AccountNum))
                        .isEqualToLiteral(this.projProposalJour.OrderAccount)
                .outerJoin(this.projFundingSource)
                    .where(this.projFundingSource, fieldStr(projFundingSource, RecId))
                        .isEqualToLiteral(this.projProposalJour.FundingSource)
                .outerJoin(this.transportationDocument)
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualToLiteral(this.projProposalJour.TransportationDocument)
                .toSysDaQueryObject();
        }
        else
        {
            throw error(strFmt("@TaxIntegrationException:RecordNotFound",
                fieldStr(ProjProposalJour, RecId),
                this.document.getLocalRecId(),
                tableStr(ProjProposalJour)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.taxIntegrationProjProposalLinesUnionView)
            .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, ProposalId))
                .isEqualToLiteral(this.projProposalJour.ProposalId)
            .outerJoin(this.projProposalCost)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalCost))
                .where(this.projProposalCost, fieldStr(ProjProposalCost, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.projProposalEmpl)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalEmpl))
                .where(this.projProposalEmpl, fieldStr(ProjProposalEmpl, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.projProposalOnAcc)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalOnAcc))
                .where(this.projProposalOnAcc, fieldStr(ProjProposalOnAcc, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.projProposalRevenue)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalRevenue))
                .where(this.projProposalRevenue, fieldStr(ProjProposalRevenue, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.projProposalItem)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalItem))
                .where(this.projProposalItem, fieldStr(ProjProposalItem, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.salesLine)
                .where(this.projProposalItem, fieldStr(ProjProposalItem, ItemType))
                    .isEqualToLiteral(enum2int(ProjItemType::SalesOrder))
                .where(this.salesLine, fieldStr(SalesLine, InventTransId))
                    .isEqualTo(this.projProposalItem, fieldStr(ProjProposalItem, InventTransId))
            .outerJoin(this.inventDim)
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, InventDimId))
            .outerJoin(this.mcrSalesLineDropShipment)
                .where(this.mcrSalesLineDropShipment, fieldStr(MCRSalesLineDropShipment, SalesLine))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, RecId))
            .outerJoin(this.salesTable)
                .where(this.salesTable, fieldStr(SalesTable, SalesId))
                    .isEqualTo(this.salesLine, fieldStr(SalesLine, SalesId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .innerJoin(this.salesTable)
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                    .isEqualTo(this.salesTable, fieldStr(SalesTable, TableId))
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                    .isEqualTo(this.salesTable, fieldStr(SalesTable, RecId))
                .existsJoin(this.projProposalItem)
                    .where(this.projProposalItem, fieldStr(ProjProposalItem, SalesId))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, SalesId))
                    .where(this.projProposalItem, fieldStr(ProjProposalItem, ProposalId))
                        .isEqualToLiteral(this.projProposalJour.ProposalId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        this.setLineData();
        return TaxIntegrationLineObject::constructOnDocument(
            tableName2Id(this.taxIntegrationProjProposalLinesUnionView.LineTableName),
            this.taxIntegrationProjProposalLinesUnionView.LineRecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineData</Name>
				<Source><![CDATA[
    private void setLineData()
    {
        switch (taxIntegrationProjProposalLinesUnionView.LineTableName)
        {
            case tableStr(ProjProposalCost) :
                salesPurchJournalLine = this.projProposalCost;
                projTrans = ProjTrans::newProjProposalCost(this.projProposalCost);
                break;
            case tableStr(ProjProposalEmpl) :
                salesPurchJournalLine = this.projProposalEmpl;
                projTrans = ProjTrans::newProjProposalEmpl(this.projProposalEmpl);
                break;
            case tableStr(ProjProposalItem) :
                salesPurchJournalLine = this.projProposalItem;
                projTrans = ProjTrans::newProjProposalItem(this.projProposalItem);
                break;
            case tableStr(ProjProposalOnAcc) :
                salesPurchJournalLine = this.projProposalOnAcc;
                projTrans = ProjTrans::newProjProposalOnAcc(this.projProposalOnAcc);
                break;
            case tableStr(ProjProposalRevenue) :
                salesPurchJournalLine = this.projProposalRevenue;
                projTrans = ProjTrans::newProjProposalRevenue(this.projProposalRevenue);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>ProjProposalJour</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        document.setOrderAccount(this.projProposalJour.OrderAccount);
        document.setOrderAccountGroup(this.custTable.CustGroup);
        document.setInvoiceAccount(this.projProposalJour.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custTableInvoice.CustGroup);
        document.setTransactionCurrencyCode(this.projProposalJour.CurrencyId);
        document.setTaxGroup(this.projProposalJour.TaxGroupId);
        document.setDeliveryTerm(this.projProposalJour.DlvTerm);
        this.copyToDocumentFromVATNum(
            this.projProposalJour.VATNum,
            this.projProposalJour.VATNumTableType,
            this.projProposalJour.VATNumRecId);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setCreatedDateTime(this.projProposalJour.CreatedDateTime);
            document.setInvoiceDate(this.projProposalJour.InvoiceDate);
            VatDueDate_W vatRegisterDate = conPeek(document.getLegacyTax().parmVatRegData_W(), 1);
            document.setVATRegisterDate(vatRegisterDate);
            document.setCashDiscDate(this.projProposalJour.CashDiscDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        // Shipment address
        LogisticsPostalAddress headerShipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrCompanyInformation(
            this.transportationDocument,
            CompanyInfo::find(),
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress headerShipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
            this.custTable,
            LogisticsLocationRoleType::Delivery);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            headerShipmentOriginLogisticsPostalAddress,
            headerShipmentDestinationLogisticsPostalAddress);

        // Invoice address
        LogisticsPostalAddress headerInvoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        LogisticsPostalAddress headerInvoiceDestinationLogisticsPostalAddress;
        if (this.projFundingSource.InvoiceLocation)
        {
            headerInvoiceDestinationLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(this.projFundingSource.InvoiceLocation);
        }
        else
        {
            headerInvoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                this.custTableInvoice,
                LogisticsLocationRoleType::Invoice);
        }

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            headerInvoiceOriginLogisticsPostalAddress,
            headerInvoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        if (this.isProjectSalesOrder())
        {
            super(_line);
        }
        else
        {
            _line.setTransactionCurrencyCode(projTrans.currencyIdSales());
            this.copyToLineFromLineTableForItem(_line);
        }
        this.copyToLineFromSalesPurchJournalLine(_line, this.salesPurchJournalLine);

        TaxProj legacyTax = document.getLegacyTax() as TaxProj;
        _line.setCalculationDate(legacyTax.determineTaxCalculationDateByTrans(projTrans));
        _line.setProjectId(projTrans.ProjId());
        _line.setProjectCategory(projTrans.categoryId());
        _line.setLedgerDimension(projTrans.defaultDimension());

        if (salesPurchJournalLine && projTrans)
        {
            SalesCalcTax_ProjProposal taxProjProposal = legacyTax.salesCalcTax() as SalesCalcTax_ProjProposal;

            LedgerDimensionDefaultAccount operationAccount;
            LedgerPostingType operationPosting;

            [operationAccount, operationPosting] =
                taxProjProposal.parmOperationAccountAndPostingType(salesPurchJournalLine, projTrans);

            _line.setLedgerPostingType(operationPosting);
            _line.setOperationLedgerDimension(
                LedgerDimensionFacade::serviceCreateLedgerDimension(
                    operationAccount,
                    projTrans.defaultDimension()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromSalesPurchJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to line from SalesPurchJournalLine.
    /// </summary>
    /// <param name = "_destination">The current line of the document.</param>
    /// <param name = "_source">The <c>SalesPurchJournalLine</c> record.</param>
    protected void copyToLineFromSalesPurchJournalLine(
        TaxIntegrationLineObject _destination,
        SalesPurchJournalLine _source)
    {
        if (_source.SourceTableId == tableNum(SalesLine))
        {
            super(_destination, _source);
        }
        else
        {
            _destination.setTaxGroup(_source.TaxGroup);
            _destination.setTaxItemGroup(_source.TaxItemGroup);
            _destination.setOverrideSalesTax(_source.OverrideSalesTax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        _line.setQuantity(projTrans.Qty());

        TaxProj legacyTax = document.getLegacyTax() as TaxProj;
        SalesCalcTax_ProjProposal salesCalcTax = legacyTax.salesCalcTax();
        salesCalcTax.parmProjTrans(ProjTrans);
        _line.setLineAmount(salesCalcTax.transLineAmount());
        _line.setTransactionAmount(_line.getLineAmount());
        _line.setCostAmount(projTrans.transCost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTableForItem</Name>
				<Source><![CDATA[
    private void copyToLineFromLineTableForItem(TaxIntegrationLineObject _line)
    {
        if (taxIntegrationProjProposalLinesUnionView.LineTableName == tableStr(ProjProposalItem))
        {
            _line.setUnit(projTrans.salesUnit());
            _line.setInventoryTransactionId(projProposalItem.InventTransId);
            this.copyToLineFromInventTable(_line, projProposalItem.inventTable());
            this.copyToLineFromInventDim(_line, InventDim::find(projTrans.inventDimId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from <c>InventTable</c>
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationDocumentObject</c>.</param>
    /// <param name = "_source">The source <c>InventTable</c></param>
    protected void copyToLineFromInventTable(TaxIntegrationLineObject _destination, InventTable _source)
    {
        super(_destination, _source);
        if (!this.isProjectSalesOrder())
        {
            _destination.setItemId(_source.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        if (this.isProjectSalesOrder())
        {
            return super();
        }
        else
        {
            return TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrCompanyInformation(
                this.transportationDocument,
                CompanyInfo::find(),
                LogisticsLocationRoleType::Delivery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        if (this.isProjectSalesOrder())
        {
            return super();
        }
        else
        {
            return int2Str(this.transportationDocument.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        if (this.isProjectSalesOrder())
        {
            return super();
        }
        else
        {
            ProjTable projTable = projTrans.projTable();
            LogisticsPostalAddress lineShipmentDestinationLogisticsPostalAddress;
            if (projTable.DeliveryLocation)
            {
                lineShipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(projTable.DeliveryLocation);
            }
            else
            {
                CustTable projCustTable = CustTable::find(projTable.CustAccount);
                lineShipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                    projCustTable,
                    LogisticsLocationRoleType::Delivery);
            }
            return lineShipmentDestinationLogisticsPostalAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        if (this.isProjectSalesOrder())
        {
            return super();
        }
        else
        {
            ProjTable projTable = projTrans.projTable();
            return projTable.ProjId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>
    /// The defeault implementation invokes <c>copyToLineFromHeaderTable</c> after <c>copyToLineFromLineTable</c>.
    /// which means that a property will be overwritten by this method.
    /// This is suitable for a property which presents in the header table but not in the line table,
    /// but usually not desirable for a property presents in both the header table and the line table.
    /// </remarks>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectSalesOrder</Name>
				<Source><![CDATA[
    private boolean isProjectSalesOrder()
    {
        return (classIdGet(projTrans) == classNum(ProjTransItemProposal_SalesOrder));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>