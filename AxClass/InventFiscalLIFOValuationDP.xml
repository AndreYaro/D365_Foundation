<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventFiscalLIFOValuationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventFiscalLIFOValuationDP</c> class is the report data provider class for the
///    <c>InventFiscalLIFOValuation</c> report.
/// </summary>
[
     SRSReportParameterAttribute(classStr(InventFiscalLIFOValuationContract))
]
public class InventFiscalLIFOValuationDP extends SRSReportDataProviderBase
{
    InventFiscalLIFOJournalTable    inventFiscalLIFOJournalTableCaller;

    InventFiscalLIFOJournalTrans    inventFiscalLIFOJournalTransCurrent;
    InventFiscalLIFOJournalTrans    inventFiscalLIFOJournalTransPrev;

    InventFiscalLIFOJournalTransAdj inventFiscalLIFOJournalTransAdjPrev;
    InventFiscalLIFOValuationTmp    inventFiscalLIFOValuationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventFiscalLIFOValuationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets records in the <c>InventFiscalLIFOValuationTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The records in the <c>InventFiscalLIFOValuationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventFiscalLIFOValuationTmp))
    ]
    public InventFiscalLIFOValuationTmp getInventFiscalLIFOValuationTmp()
    {
        select inventFiscalLIFOValuationTmp;

        return inventFiscalLIFOValuationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>InventFiscalLIFOValuationTmp</c> table.
    /// </summary>
    public void insertTmpTable()
    {
        InventTable       inventTable       = InventTable::find(inventFiscalLIFOJournalTransCurrent.ItemId);
        EcoResDescription ecoResDescription = inventTable.itemDescriptionOrName();

        inventFiscalLIFOValuationTmp.ItemId             =   inventFiscalLIFOJournalTransCurrent.ItemId;
        inventFiscalLIFOValuationTmp.Year               =   inventFiscalLIFOJournalTransPrev.Yr;
        inventFiscalLIFOValuationTmp.RemainQty          =   inventFiscalLIFOJournalTransPrev.RemainQty -
                                                            inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj;
        inventFiscalLIFOValuationTmp.UnitValue          =   inventFiscalLIFOJournalTransPrev.UnitValue;
        inventFiscalLIFOValuationTmp.NormalValue        =   inventFiscalLIFOJournalTransCurrent.NormalValue;
        inventFiscalLIFOValuationTmp.GroupDescription   =   InventFiscalLIFOGroup::find(inventFiscalLIFOJournalTransCurrent.InventFiscalLIFOGroup).Name;
        inventFiscalLIFOValuationTmp.ItemDescription    =   ecoResDescription;
        inventFiscalLIFOValuationTmp.CompanyCurrency    =   Ledger::accountingCurrency(CompanyInfo::current());
        inventFiscalLIFOValuationTmp.wipIncluded        =   inventFiscalLIFOJournalTransCurrent.wipIncluded;
        inventFiscalLIFOValuationTmp.ItemGroup          =   inventFiscalLIFOJournalTransCurrent.ItemGroup;
        inventFiscalLIFOValuationTmp.FiscalLIFOGroupId  =   inventFiscalLIFOJournalTransCurrent.InventFiscalLIFOGroup;
        inventFiscalLIFOValuationTmp.UnitId             =   inventFiscalLIFOJournalTransCurrent.UnitId;
        inventFiscalLIFOValuationTmp.QtyPrimo           =   inventFiscalLIFOJournalTransCurrent.QtyPrimo;
        inventFiscalLIFOValuationTmp.QtyReceipt         =   inventFiscalLIFOJournalTransCurrent.QtyReceipt;
        inventFiscalLIFOValuationTmp.QtyIssue           =   inventFiscalLIFOJournalTransCurrent.QtyIssue;
        inventFiscalLIFOValuationTmp.RemainQtyAdj       =   inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj;
        inventFiscalLIFOValuationTmp.HeaderTxt          =   strfmt("@SYS98406",CompanyInfo::find().name(),
                                                                    year(inventFiscalLIFOJournalTableCaller.EndDate),
                                                                    inventFiscalLIFOJournalTableCaller.StartDate,
                                                                    inventFiscalLIFOJournalTableCaller.EndDate);
        inventFiscalLIFOValuationTmp.ReportName         =   this.reportName();
        inventFiscalLIFOValuationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the business logic required for the <c>InventFiscalLIFOValuation</c> report.
    /// </summary>
    public void processReport()
    {
        InventFiscalLIFOJournalTable        inventFiscalLIFOJournalTablePrev;
        InventFiscalLIFORemainQty			remainQtySum;
        InventFiscalLIFOTotalValue			totalValueSum;
        InventFiscalLIFOTotalValue			totalValueGrandTotal;
        InventFiscalLIFOGroup				inventFiscalLIFOGroup;
        InventFiscalLIFOValuationContract   contract = this.parmDataContract() as InventFiscalLIFOValuationContract;
        JournalId							journalId = contract.parmJournalId();

        inventFiscalLIFOJournalTableCaller = InventFiscalLIFOJournalTable::findByJournalId(journalId);

        while select inventFiscalLIFOJournalTransCurrent
            order by JournalId, ItemGroup desc, InventFiscalLIFOGroup, ItemId
            where inventFiscalLIFOJournalTransCurrent.JournalId == inventFiscalLIFOJournalTableCaller.JournalId
            exists join inventFiscalLIFOGroup
                where   inventFiscalLIFOGroup.RecId      == inventFiscalLIFOJournalTransCurrent.InventFiscalLIFOGroup
                   && ((inventFiscalLIFOGroup.Individual == NoYes::No  && inventFiscalLIFOJournalTransCurrent.ItemGroup == ItemGroup::GroupId)
                   ||  (inventFiscalLIFOGroup.Individual == NoYes::Yes && inventFiscalLIFOJournalTransCurrent.ItemGroup == ItemGroup::Item))
        {
            while select inventFiscalLIFOJournalTablePrev
                group by EndDate
                where inventFiscalLIFOJournalTablePrev.JournalType  == InventFiscalLIFOJournalType::FinalReport
                    && inventFiscalLIFOJournalTablePrev.StartDate   <  inventFiscalLIFOJournalTableCaller.StartDate

                join sum(NormalValue),sum(UnitValue),sum(RemainQty) from inventFiscalLIFOJournalTransPrev
                    group by InventFiscalLIFOGroup, ItemId, Yr
                    where inventFiscalLIFOJournalTransPrev.JournalId                == inventFiscalLIFOJournalTablePrev.JournalId
                        && inventFiscalLIFOJournalTransPrev.InventFiscalLIFOGroup   == inventFiscalLIFOJournalTransCurrent.InventFiscalLIFOGroup
                        && inventFiscalLIFOJournalTransPrev.ItemId                  == inventFiscalLIFOJournalTransCurrent.ItemId
                        && inventFiscalLIFOJournalTransPrev.ItemGroup               == inventFiscalLIFOJournalTransCurrent.ItemGroup
            {
                select sum(RemainQtyAdj) from inventFiscalLIFOJournalTransAdjPrev
                    group by InventFiscalLIFOGroup, ItemId, YearAdj
                    where inventFiscalLIFOJournalTransAdjPrev.InventFiscalLIFOGroup == inventFiscalLIFOJournalTransPrev.InventFiscalLIFOGroup
                        && inventFiscalLIFOJournalTransAdjPrev.ItemId               == inventFiscalLIFOJournalTransPrev.ItemId
                        && inventFiscalLIFOJournalTransAdjPrev.YearAdj              == inventFiscalLIFOJournalTransPrev.Yr
                        && ((inventFiscalLIFOJournalTransAdjPrev.Year               <  year(inventFiscalLIFOJournalTableCaller.EndDate)
                        && inventFiscalLIFOJournalTransAdjPrev.FinalReportClosed    == NoYes::Yes)
                        || (inventFiscalLIFOJournalTransAdjPrev.Year                <= year(inventFiscalLIFOJournalTableCaller.EndDate)
                        && inventFiscalLIFOJournalTransAdjPrev.JournalId            == inventFiscalLIFOJournalTableCaller.JournalId));

                this.insertTmpTable();
                remainQtySum  += inventFiscalLIFOJournalTransPrev.RemainQty - inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj;
                totalValueSum += (inventFiscalLIFOJournalTransPrev.RemainQty - inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj)
                               * (inventFiscalLIFOJournalTransCurrent.NormalValue ? inventFiscalLIFOJournalTransCurrent.NormalValue : inventFiscalLIFOJournalTransPrev.UnitValue);
            }

            inventFiscalLIFOJournalTransPrev = inventFiscalLIFOJournalTransCurrent.data();

            select sum(RemainQtyAdj) from inventFiscalLIFOJournalTransAdjPrev
                group by InventFiscalLIFOGroup, ItemId, YearAdj
                where inventFiscalLIFOJournalTransAdjPrev.InventFiscalLIFOGroup  == inventFiscalLIFOJournalTransPrev.InventFiscalLIFOGroup
                    && inventFiscalLIFOJournalTransAdjPrev.ItemId                == inventFiscalLIFOJournalTransPrev.ItemId
                    && inventFiscalLIFOJournalTransAdjPrev.YearAdj               == inventFiscalLIFOJournalTransPrev.Yr
                    && ((inventFiscalLIFOJournalTransAdjPrev.Year                <  year(inventFiscalLIFOJournalTableCaller.EndDate)
                    &&   inventFiscalLIFOJournalTransAdjPrev.FinalReportClosed   == NoYes::Yes)
                    ||  (inventFiscalLIFOJournalTransAdjPrev.Year                <=  year(inventFiscalLIFOJournalTableCaller.EndDate)
                    &&   inventFiscalLIFOJournalTransAdjPrev.JournalId           == inventFiscalLIFOJournalTableCaller.JournalId));

            remainQtySum  += inventFiscalLIFOJournalTransPrev.RemainQty - inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj;
            totalValueSum += (inventFiscalLIFOJournalTransPrev.RemainQty - inventFiscalLIFOJournalTransAdjPrev.RemainQtyAdj)
                           * (inventFiscalLIFOJournalTransCurrent.NormalValue ? inventFiscalLIFOJournalTransCurrent.NormalValue : inventFiscalLIFOJournalTransPrev.UnitValue);

            totalValueGrandTotal += totalValueSum;
            this.insertTmpTable();
            remainQtySum  = 0;
            totalValueSum = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the report name based on the journal type.
    /// </summary>
    /// <returns>
    ///    The report name based on the journal type.
    /// </returns>
    private Name reportName()
    {
        if (inventFiscalLIFOJournalTableCaller.JournalType == InventFiscalLIFOJournalType::FinalReport && inventFiscalLIFOJournalTableCaller.FinalReportClosed == NoYes::No)
        {
            return strfmt("@SYS98504", "@SYS98405", inventFiscalLIFOJournalTableCaller.JournalType);
        }
        else
        {
            return strfmt("@SYS98505", "@SYS98405", inventFiscalLIFOJournalTableCaller.JournalType);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>