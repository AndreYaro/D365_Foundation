<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvUnreconciledExpenseHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for all unreconciled expense related methods.
/// </summary>
public static class TrvUnreconciledExpenseHelper
{
    #TrvUnreconciledExpense

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attachToExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches an unreconciled expense to an existing expense report.
    /// </summary>
    /// <param name = "_expenseNumber">
    ///     The expense number to attach the unreconciled expense report.
    /// </param>
    /// <param name = "_unreconciledExpenses">
    ///     List of all the unreconciled expenses that are to be attached.
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    ///     True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <param name = "_callerForm">
    ///     The caller form where the async operations are performed. Optional.
    /// </param>
    /// <returns>
    ///     True if the attach succeeds and false if it fails. Expenses that can be attached will be attached,
    ///     false just means that there is at least one failed attachement.
    /// </returns>
    public static boolean attachToExpenseReport(TrvExpNumber _expenseNumber,
                                                List _unreconciledExpenses,
                                                boolean _skipSourceDocAndPolicies = false,
                                                TrvIAsyncEnabled _callerForm = null)
    {
        TrvParameters trvParameters = TrvParameters::find();
        boolean ret = true;

        if (!_unreconciledExpenses.empty())
        {
            // The expense report has to be in create or returned mode
            // cannot add cc transactions to a submitted expense report.
            TrvExpTable trvExpTable = TrvExpTable::find(_expenseNumber);

            if (!trvExpTable)
            {
                return checkFailed(strFmt("@SYS102079", _expenseNumber));
            }

            if (!trvExpTable.isEditableBasedOnWorkflowStatus())
            {
                return checkFailed(strFmt("@SYS102125", trvExpTable.ApprovalStatus));
            }

            ListEnumerator listEnumerator = _unreconciledExpenses.getEnumerator();
            listEnumerator.reset();

            while (listEnumerator.moveNext())
            {
                TrvUnreconciledExpenseTransUnion currentUnreconciledExpense = listEnumerator.current();

                TrvExpTrans trvExpTrans = TrvUnreconciledExpenseHelper::insertExpenseLine(currentUnreconciledExpense, _skipSourceDocAndPolicies, trvExpTable);

                if (trvExpTrans.RecId != 0)
                {
                    if (!_skipSourceDocAndPolicies)
                    {
                        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                        {
                            TrvPolicyEvalEngine::evaluateViolationsForLine(trvExpTrans.RecId, SysPolicyTypeEnum::TrvExpensePolicy);
                        }
                    }

                    if (_skipSourceDocAndPolicies && _callerForm)
                    {
                        _callerForm.doAsyncAction(trvExpTrans.RecId);
                    }
                }
                else
                {
                    ret = false;
                }
            }

            if (!_skipSourceDocAndPolicies)
            {
                // Once all the lines are saved on the expense report, evaluate the policies for the header.
                if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                {
                    TrvPolicyEvalEngine::evaluateViolationsForHdr(trvExpTable.RecId, SysPolicyTypeEnum::TrvExpensePolicy);

                    if (trvExpTable.ProjId)
                    {
                        trvExpTable.validateProjPolicies(false);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDefaultCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a category that is valid for unreconciled expenses
    /// </summary>
    /// <returns>
    ///     A valid <c>TrvCostType</c> record for unreconciled expenses
    /// </returns>
    public static TrvCostType selectDefaultCostType()
    {
        TrvCostType costType;

        // Top preference for expense type is meals, followed by car rental, etc.
        container expTypeInOrderOfPreference = [TrvExpType::Meals, TrvExpType::CarRental, TrvExpType::Conference, TrvExpType::Airline, TrvExpType::Hotel, TrvExpType::Entertainment, TrvExpType::Gift, TrvExpType::Expense];

        for (int i = 1; i <= conLen(expTypeInOrderOfPreference); i++)
        {
            TrvExpType expType = conPeek(expTypeInOrderOfPreference, i);

            // Loop through categories of specified expense type, searching for one that is valid
            while select costType where costType.ExpType == expType
            {
                if (TrvTmpUnreconciledExpenses::validateCategory(costType.CostType, false))
                {
                    // stop searching and return valid category
                    return costType;
                }
            }
        }

        // No valid categories are available.
        return costType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpenseLineFromCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts an expense line corresponding to credit card record
    /// </summary>
    /// <param name = "_trvPBSMaindata">
    ///     The unreconciled credit card expense to insert a line record for
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    ///     True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <param name = "_trvExpTable">
    ///     The expense report to assign the expense line to. Optional.
    /// </param>
    /// <returns>
    ///     The inserted <c>TrvExpTrans</c> record
    /// </returns>
    public static TrvExpTrans insertExpenseLineFromCreditCard(TrvPBSMaindata _trvPBSMaindata, boolean _skipSourceDocAndPolicies = false, TrvExpTable _trvExpTable = null)
    {
        boolean caughtException = false;
        TrvExpTrans trvExpTrans;

        try
        {
            _trvPBSMaindata = TrvPBSMaindata::findRecId(_trvPBSMaindata.RecId, true);

            // Check if the unreconciled expense exists and is not already transferred.
            // If so, skip insert for the current record and move on to the next record.
            if (!_trvPBSMaindata.RecId)
            {
                checkFailed("@SYS4007660");
                return trvExpTrans;
            }
            else if (_trvPBSMaindata.Transferred == NoYes::Yes)
            {
                TrvExpTrans existingExpenseLine;
                select firstonly RecId from existingExpenseLine where existingExpenseLine.PBSRecId == _trvPBSMaindata.RecId;

                // Credit card expense is marked as transferred and expense line already exists
                if (existingExpenseLine.RecId)
                {
                    checkFailed("@SYS4007661");

                    // Return empty buffer because new expense line creation failed
                    return trvExpTrans;
                }
            }

            if (_trvExpTable.RecId != 0)
            {
                // Method assumes validation of expense report was done by the caller
                trvExpTrans.ExpNumber   = _trvExpTable.ExpNumber;
                trvExpTrans.TrvExpTable = _trvExpTable.RecId;
            }

            // No check for bad/blank category.
            trvExpTrans.CostType = _trvPBSMaindata.CostType;

            // If cost type was bad/blank, select a default category rather than failing transfer.
            if (!trvExpTrans.CostType)
            {
                trvExpTrans.CostType = TrvUnreconciledExpenseHelper::selectDefaultCostType().CostType;
            }

            trvExpTrans.initFromCreditCardTransactionRecord(_trvPBSMaindata);

            // If the project header has a default project id, check that there is also a default project line property
            // and store the information on the attaching line.

            // In case the expense line is intercompany but no suitable intercompany category was found, the project id
            // field may not be defaulted because this would cause trvExpTrans.InterCompanyCategory to become mandatory
            // Only needed when the transaction is being added to an expense report.
            if (trvExpTrans.TrvExpTable && (!trvExpTrans.isIntercompany() || trvExpTrans.InterCompanyCategory))
            {
                trvExpTrans.setDefaultProjectFromExpenseReport();
            }
        }
        catch(Exception::Error)
        {
            if (!caughtException)
            {
                caughtException = true;
                retry;
            }
            // If no retry, because it's second exception, then re-throw the exception.
            throw Exception::Error;
        }

        if (trvExpTrans.validateWrite())
        {
            ttsbegin;

            // Don't evaluate policies yet. We can evaluate header level policies just once after all the saves are done.
            trvExpTrans.insert(false, !_skipSourceDocAndPolicies);
            
            // Update reference in unreconciled expense tables.
            if (_trvExpTable.RecId != 0)
            {
                _trvPBSMaindata.TravelNo = _trvExpTable.ExpNumber;
            }
            _trvPBSMaindata.Transferred = NoYes::Yes;
            _trvPBSMaindata.update();

            TrvExpenseHelper::generateExpMobileNotification(TrvExpMobileNotificationEventType::CCTransImport, trvExpTrans);

            TrvPbsItemizations itemizations;

            // Insert any itemizations that somehow made it in the system before the main transaction record.
            while select itemizations where itemizations.CCTransUniqueID == _trvPBSMaindata.CCTransUniqueID
            {
                TrvUnreconciledExpenseHelper::insertExpenseItemizationLineFromCreditCard(itemizations, _skipSourceDocAndPolicies);
            }

            ttscommit;
        }

        return trvExpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpenseLineFromUnreconciledExpense</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts an expense line corresponding to the provided unreconciled expense record
    /// </summary>
    /// <param name = "_trvUnreconciledExpenseTransaction">
    ///     The unreconciled expense to insert an expense line for
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    ///     True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <param name = "_trvExpTable">
    ///     The expense report to assign the expense line to. Optional.
    /// </param>
    /// <returns>
    ///     The inserted <c>TrvExpTrans</c> record
    /// </returns>
    public static TrvExpTrans insertExpenseLineFromUnreconciledExpense(TrvUnreconciledExpenseTransaction _trvUnreconciledExpenseTransaction, boolean _skipSourceDocAndPolicies = false, TrvExpTable _trvExpTable = null)
    {
        TrvExpTrans trvExpTrans;
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction;

        boolean caughtException = false;

        try
        {
            trvUnreconciledExpenseTransaction = TrvUnreconciledExpenseTransaction::find(_trvUnreconciledExpenseTransaction.RecId, true);

            // Check if the unreconciled expense exists and is not already transferred.
            // If so, skip insert for the current record and move on to the next record.
            if (!trvUnreconciledExpenseTransaction.RecId)
            {
                checkFailed("@SYS4007660");
                return trvExpTrans;
            }
            else if (trvUnreconciledExpenseTransaction.ExpenseLine)
            {
                checkFailed("@SYS4007661");
                return trvExpTrans;
            }

            if (_trvExpTable.RecId != 0)
            {
                // Method assumes validation of expense report was done by the caller
                trvExpTrans.ExpNumber   = _trvExpTable.ExpNumber;
                trvExpTrans.TrvExpTable = _trvExpTable.RecId;
            }

            // No check for bad/blank category.
            TrvCostType trvCostType = TrvCostType::find(_trvUnreconciledExpenseTransaction.CostType);

            // If cost type was bad/blank, select a default category rather than failing transfer.
            if (trvCostType.RecId == 0)
            {
                trvCostType = TrvUnreconciledExpenseHelper::selectDefaultCostType();
            }
            trvExpTrans.CostType = trvCostType.CostType;
            trvExpTrans.initFromCostType();

            // Fill in the information from the updated information on the form.
            trvExpTrans.MerchantId  = trvUnreconciledExpenseTransaction.MerchantId;
            trvExpTrans.initFromImportedTransactionRecord(trvUnreconciledExpenseTransaction);

            // If the project header has a default project id, check that there is also a default project line property
            // and store the information on the attaching line.

            // In case the expense line is intercompany but no suitable intercompany category was found, the project id
            // field may not be defaulted because this would cause trvExpTrans.InterCompanyCategory to become mandatory
            // and consequently, the trvExpTrans.insert() operation would fail in this method.
            if (!trvExpTrans.isIntercompany() || trvExpTrans.InterCompanyCategory)
            {
                trvExpTrans.setDefaultProjectFromExpenseReport();
            }
        }
        catch(Exception::Error)
        {
            if (!caughtException)
            {
                caughtException = true;
                retry;
            }
            // If no retry, because it's second exception, then re-throw the exception.
            throw Exception::Error;
        }

        if (trvExpTrans.validateWrite())
        {
            ttsbegin;

            // Don't evaluate policies yet. We can evaluate header level policies just once after all the saves are done.
            trvExpTrans.insert(false, !_skipSourceDocAndPolicies);

            // Move attachments to expense line.
            TrvReceiptsHelper::moveDocumentsFromUnreconciledToExpense(trvUnreconciledExpenseTransaction.RecId, trvExpTrans.RecId);

            // Add reference to expense transaction.
            trvUnreconciledExpenseTransaction.ExpenseLine = trvExpTrans.RecId;
            trvUnreconciledExpenseTransaction.update();

            ttscommit;
        }

        return trvExpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpenseItemizationLineFromCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an itemized line based on the provided record.
    /// </summary>
    /// <param name = "_itemization">
    /// The itemization record from the credit card company to use for creating the expense line.
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    /// True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <returns>
    /// The inserted <c>TrvExpTrans</c> record
    /// </returns>
    public static TrvExpTrans insertExpenseItemizationLineFromCreditCard(TrvPbsItemizations _itemization, boolean _skipSourceDocAndPolicies = false)
    {
        TrvPBSMaindata trvPBSMaindata;
        TrvExpTrans expenseLine;
        TrvExpTrans itemizedLine;

        select firstonly expenseLine
            join trvPBSMaindata where expenseLine.PBSRecId == trvPBSMaindata.RecId 
                && trvPBSMaindata.CCTransUniqueID == _itemization.CCTransUniqueID;

        if (!expenseLine.RecId || expenseLine.ApprovalStatus != TrvAppStatus::Create 
            || expenseLine.SplitLineType == TrvExpSplitLineType::SplitHeader)
        {
            //
            // No parent line yet, the parent has already been submitted, or the line has been split, 
            // so skip creation of itemized line and return empty buffer.
            //
            return itemizedLine;
        }

        TrvExpSubCategory subCategory;
        TrvPBSSubCategoryCodesMapping subCategoryMapping;

        select firstonly subCategory where subCategory.CostType == expenseLine.CostType
            join subCategoryMapping where subCategory.RecId == subCategoryMapping.TrvExpSubCategoryRecId
                && subCategoryMapping.SubCategoryCode == _itemization.SubCategoryCode;

        TrvDateStd transDate = _itemization.TransDate ? _itemization.TransDate : expenseLine.TransDate;

        TrvExpTrans existingItemizedLine;

        select firstonly RecId from existingItemizedLine where existingItemizedLine.ParentRecId == expenseLine.RecId
            && existingItemizedLine.SubCategoryRecId == subCategory.RecId
            && existingItemizedLine.TransDate == transDate;

        if (existingItemizedLine.RecId)
        {
            // An existing itemization exists for this subcategory and date, skipping creation
            return itemizedLine;
        }

        ttsbegin;

        itemizedLine.CostType = subCategory.CostType;
        itemizedLine.ExpType = expenseLine.ExpType;
        itemizedLine.SubCategoryRecId = subCategory.RecId;
        itemizedLine.initFromTrvExpItemizedHeader(expenseLine);
        itemizedLine.AmountCurr = _itemization.AmountCurr;
        itemizedLine.TransDate = transDate;
        itemizedLine.CreditCardTransactionCurrencyAmount = _itemization.AmountLocal ? _itemization.AmountLocal : _itemization.AmountCurr;

        if (itemizedLine.validateWrite())
        {
            itemizedLine.insert(false, !_skipSourceDocAndPolicies);
        }
        else
        {
            // Return an empty buffer since creation failed.
            itemizedLine.clear();
        }

        ttscommit;

        return itemizedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts an expense line corresponding to the provided unreconciled expense record
    /// </summary>
    /// <param name = "_currentUnreconciledExpense">
    ///     The unreconciled expense to insert an expense line for
    /// </param>
    /// <param name = "_skipSourceDocAndPolicies">
    ///     True if source document and policy evaluations can be skipped; otherwise, false. Optional.
    /// </param>
    /// <param name = "_trvExpTable">
    ///     The expense report to assign the expense line to. Optional.
    /// </param>
    /// <returns>
    ///     The inserted <c>TrvExpTrans</c> record
    /// </returns>
    public static TrvExpTrans insertExpenseLine(TrvUnreconciledExpenseTransUnion _currentUnreconciledExpense, boolean _skipSourceDocAndPolicies = false, TrvExpTable _trvExpTable = null)
    {
        TrvExpTrans trvExpTrans;

        RefRecId ccRecId = _currentUnreconciledExpense.RecId;
        TableId ccTableId = _currentUnreconciledExpense.OriginalTableId;

        // Create the new expense line according to source of unreconciled.
        switch (ccTableId)
        {
            case tableNum(TrvPBSMaindata):
                TrvPBSMaindata trvPBSMaindata = TrvPBSMaindata::findRecId(ccRecId, true);
                trvExpTrans = TrvUnreconciledExpenseHelper::insertExpenseLineFromCreditCard(trvPBSMaindata, _skipSourceDocAndPolicies, _trvExpTable);
                break;

            case tableNum(TrvUnreconciledExpenseTransaction):
                TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction = TrvUnreconciledExpenseTransaction::find(ccRecId, true);
                trvExpTrans = TrvUnreconciledExpenseHelper::insertExpenseLineFromUnreconciledExpense(trvUnreconciledExpenseTransaction, _skipSourceDocAndPolicies, _trvExpTable);
                break;

            default:
                break;
        }

        return trvExpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesWorkerHaveUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the passed in worker has any unreconciled expenses.
    /// </summary>
    /// <param name = "hcmWorkerRecId">The RecId of the worker for which to check for unreconciled expenses.</param>
    /// <returns>True if the worker has at least one credit card or other unreconciled expense.</returns>
    public static boolean doesWorkerHaveUnreconciledExpenses(HcmWorkerRecId hcmWorkerRecId)
    {
        return TrvUnreconciledExpenseHelper::getWorkerUnreconciledExpensesCount(hcmWorkerRecId) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerUnreconciledExpensesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of unreconciled credit card and expense transactions for the passed in worker.
    /// </summary>
    /// <param name = "hcmWorkerRecId">The RecId of the worker for which to check for unreconciled expenses.</param>
    /// <returns>A count of the number of unreconciled expenses.</returns>
    public static int getWorkerUnreconciledExpensesCount(HcmWorkerRecId hcmWorkerRecId)
    {
        return TrvUnreconciledExpenseHelper::getUnreconciledCreditCardCount(hcmWorkerRecId)
                    + TrvUnreconciledExpenseHelper::getUnreconciledExpenseCount(hcmWorkerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnreconciledCreditCardCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of unreconciled credit card transactions for the passed in worker.
    /// </summary>
    /// <param name = "hcmWorkerRecId">The RecId of the worker for which to check for unreconciled expenses.</param>
    /// <returns>A count of the number of unreconciled credit card transactions.</returns>
    public static int getUnreconciledCreditCardCount(HcmWorkerRecId hcmWorkerRecId)
    {
        int expenseCount = 0;
        TrvUnreconciledCreditCardTrans creditCardUnreconciled;

        // This method queries directly against the views for non transferred credit card and unreconciled expenses and not using the union view because of
        // additional complexity on the view, and therefore worse performance.
        select count(RecId) from creditcardUnreconciled
            where creditCardUnreconciled.Worker == hcmWorkerRecId;

        expenseCount = int642int(creditCardUnreconciled.RecId);

        return expenseCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnreconciledExpenseCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of unreconciled expenses transactions for the passed in worker.
    /// </summary>
    /// <param name = "hcmWorkerRecId">The RecId of the worker for which to check for unreconciled expenses.</param>
    /// <returns>A count of the number of unreconciled expense transactions.</returns>
    public static int getUnreconciledExpenseCount(HcmWorkerRecId hcmWorkerRecId)
    {
        int expenseCount = 0;
        TrvUnreconciledExpenseTrans unreconciledExpense;

        select count(RecId) from unreconciledExpense
            where unreconciledExpense.Worker == hcmWorkerRecId;

        expenseCount = int642int(unreconciledExpense.RecId);

        return expenseCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all the unreconciled expenses which can be deleted and returns false if
    ///     user tries to delete unreconciled expense from credit card.
    /// </summary>
    /// <param name = "_selectedUnreconciledExpenses">
    ///     List of all the unreconciled expenses to delete.
    /// </param>
    /// <returns>
    ///     True if the delete succeeds and false if it fails.
    /// </returns>
    public static boolean deleteUnreconciledExpenses(List _selectedUnreconciledExpenses)
    {
        ListEnumerator                      listEnumerator;
        TrvUnreconciledExpenseTransUnion    trvUnreconciledExpenseTransUnion;
        boolean                             deleteFailed = false;

        listEnumerator = _selectedUnreconciledExpenses.getEnumerator();
        listEnumerator.reset();

        while (listEnumerator.moveNext())
        {
            trvUnreconciledExpenseTransUnion = listEnumerator.current();

            if (trvUnreconciledExpenseTransUnion.OriginalTableId == tablenum(TrvUnreconciledExpenseTransaction))
            {
                TrvUnreconciledExpenseTransaction::deleteUnreconciledExpenseTransaction(trvUnreconciledExpenseTransUnion.RecId);
            }
            else if (trvUnreconciledExpenseTransUnion.OriginalTableId == tablenum(TrvPBSMaindata))
            {
                deleteFailed = true;
            }
        }
        return !deleteFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedCategoryList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a list of supported categories for credit card unreconciled expenses.
    ///     Unsupported categories for unreconciled expenses are per diem, mileage,
    ///     & cash advance return.
    /// </summary>
    /// <param name = "isCreditCard">True if the list is for a credit card expense, false otherwise.</param>
    /// <returns>List of <c>TrvExpType</c> values.</returns>
    public static List getSupportedCategoryList(boolean _isCreditCard)
    {
        List categoryList = new List(Types::Enum);

        categoryList.addEnd(TrvExpType::Expense);
        categoryList.addEnd(TrvExpType::Airline);
        categoryList.addEnd(TrvExpType::CarRental);
        categoryList.addEnd(TrvExpType::Conference);
        categoryList.addEnd(TrvExpType::Entertainment);
        categoryList.addEnd(TrvExpType::Hotel);
        categoryList.addEnd(TrvExpType::Meals);
        categoryList.addEnd(TrvExpType::Gift);

        // Personal is valid only if its a credit card expense.
        if (_isCreditCard)
        {
            categoryList.addEnd(TrvExpType::Personal);
        }

        return categoryList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportedCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the category selected is valid for credit card or mobile expenses.
    ///     Unsupported categories for unreconciled expenses are per diem, mileage,
    ///     & cash advance return.
    /// </summary>
    /// <param name = "_expenseType">The expense type of the category to verify support for</param>
    /// <param name = "isCreditCard">True if the category is for a credit card expense, false otherwise.</param>
    /// <returns>True if category is supported by the general expense type; otherwise, false.</returns>
    public static boolean isSupportedCategory(TrvExpType _expenseType, boolean _isCreditCard)
    {
        List categoryList = TrvUnreconciledExpenseHelper::getSupportedCategoryList(_isCreditCard);

        ListEnumerator enumerator = categoryList.getEnumerator();
        while (enumerator.moveNext())
        {
            TrvExpType expenseType = enumerator.current();

            if (expenseType == _expenseType)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label corresponding to the transaction source.
    /// </summary>
    /// <param name = "_tableId">The table id for which the label is to be obtained.</param>
    /// <returns>The string corresponding the label for the transaction source.</returns>
    public static str getTransactionSource(int _tableId)
    {
        str transLabel = '';

        switch (_tableId)
        {
            case tableNum(TrvPBSMaindata):
                transLabel = "@SYS101746";
                break;
            default:
                transLabel = "@SYS118138";
        }
        return transLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditCardTransactionWithImportOnlyCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the unreconciled expense record is a credit card transaction with an import only category
    /// </summary>
    /// <param name = "_tmpTrvUnreconciledExpenseTransUnion">The unreconciled expense record to evaluate.</param>
    /// <returns>True if the record is a credit card transaction with an import only expense type; otherwise, false.</returns>
    public static boolean isCreditCardTransactionWithImportOnlyCategory(TmpTrvUnreconciledExpenseTransUnion _tmpTrvUnreconciledExpenseTransUnion)
    {
        boolean isCreditCardTransaction = _tmpTrvUnreconciledExpenseTransUnion.OriginalTableId == tableNum(TrvPBSMaindata);
        boolean isCostTypeOfImportOnly = TrvCostType::find(_tmpTrvUnreconciledExpenseTransUnion.CostType).isImportOnly;

        return isCreditCardTransaction && isCostTypeOfImportOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnreconciledExpenseAsUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an unreconciled expense transaction as an impersonated user.
    /// </summary>
    /// <param name="_args">
    ///    A container that contains field values for a new record <c>TrvUnreconciledExpenseTransaction</c> in the following order:
    ///         - CostType, TransactionDate, Notes, TransactionCurrencyAmount, TransactionCurrencyCode, MerchantId (optional)
    /// </param>
    /// <returns>
    ///    A container that contains a reference to the unreconciled expense transaction.
    /// </returns>
    public static container createUnreconciledExpenseAsUser(container _args)
    {
        TrvUnreconciledExpenseTransaction   unreconciledExpenseTrans;
        TrvCostTypeEDT                      costType;
        TransDate                           transactionDate;
        TrvFreeText                         notes;
        AmountCur                           transactionCurrencyAmount;
        CurrencyCode                        transactionCurrencyCode;
        TrvExpMerchantId                    merchantId;

        //If there are 6 or more objects, then merchant should be enabled
        boolean isMerchantCategoryEnabled = ContainerClass::containerLength(_args) >= 6;

        if (isMerchantCategoryEnabled)
        {
            [costType, transactionDate, notes, transactionCurrencyAmount, transactionCurrencyCode, merchantId] = _args;
        }
        else
        {
            [costType, transactionDate, notes, transactionCurrencyAmount, transactionCurrencyCode] = _args;
        }

        ttsbegin;
        unreconciledExpenseTrans.clear();
        unreconciledExpenseTrans.TransDate  = transactionDate;
        unreconciledExpenseTrans.Worker     = DirPersonUserEx::findUserWorkerReference(curUserId());
        unreconciledExpenseTrans.CostType   = costType;
        unreconciledExpenseTrans.Notes      = notes;

        unreconciledExpenseTrans.TransactionCurrencyAmount  = transactionCurrencyAmount;
        unreconciledExpenseTrans.TransactionCurrencyCode    = transactionCurrencyCode;

        if (isMerchantCategoryEnabled)
        {
            unreconciledExpenseTrans.MerchantId = merchantId;
        }

        if (unreconciledExpenseTrans.validateWrite())
        {
            unreconciledExpenseTrans.insert();
        }
        ttscommit;

        return [unreconciledExpenseTrans.RecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>