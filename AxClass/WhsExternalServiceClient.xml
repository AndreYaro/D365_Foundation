<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsExternalServiceClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using System.Net.Http;

internal abstract class WhsExternalServiceClient
{
    private static const str AuthParamsName = 'auth';
    private static const str AuthParamsSecret = 'secret';    

    private WHSExternalServiceDefinition externalServiceDefiniton;
    private WhsExternalServiceInstance externalServiceInstance;
    private WhsExternalServiceOperation externalServiceOperation;        

    private WhsDocumentRoutingTranslator translator;
    private WhsExternalServiceHttpClient httpClient;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>invoke</Name>
				<Source><![CDATA[
    internal boolean invoke()
    {        
        WhsExternalServiceRequestLogger logger = this.createRequestLogger();

        if (!externalServiceOperation && !externalServiceInstance)
        {
            logger.logGeneralError("@WAX:ExternalServiceUnableToInvokeNoOpOrInstance");
            return false;
        }

        if (externalServiceOperation.ExternalServiceDefinition != externalServiceInstance.ExternalServiceDefinition)
        {
            logger.logGeneralError("@WAX:ExternalServiceRequestErrorOpsMismatch");
            return false;
        }

        if (externalServiceInstance.Offline)
        {
            logger.logGeneralError("@WAX:ExternalServiceRequestErrorServiceOffline");
            return false;
        }

        translator = this.initTranslatorForService(this.createTranslator());
        if (!translator)
        {            
            logger.logGeneralError("@WAX:ExternalServiceRequestErrorNoDocumentTranslator");
            return false;
        }
        
        HttpRequestMessage requestMessage = this.createHttpRequestMessage();               
                
        // Need to create a log message before we pass it to HttpClient, as it will dispose of the contents
        // In case we shouldn't log the body, we'll remove it away later
        if (externalServiceInstance.RequestBodyLoggingLevel != WhsExternalServiceLoggingLevel::None)
        {
            logger.initRequestBodyLogString(externalServiceInstance, requestMessage);
        }
       
        HttpResponseMessage responseMessage = this.createHttpClient(logger).invokeOperation(requestMessage);
        
        if (responseMessage)
        {
            return this.validateResponse(responseMessage, logger);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestLogger</Name>
				<Source><![CDATA[
    private WhsExternalServiceRequestLogger createRequestLogger()
    {
        WhsExternalServiceRequestLogger requestLogger = WhsExternalServiceRequestLogger::construct();
        
        requestLogger.withLoggingLevel(externalServiceInstance.LoggingLevel);
        requestLogger.withBodyLoggingLevel(externalServiceInstance.RequestBodyLoggingLevel);

        requestLogger.initRequestLogFromExternalServiceInstanceAndOperation(externalServiceInstance, externalServiceOperation);

        return requestLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHttpClient</Name>
				<Source><![CDATA[
    internal void setHttpClient(WhsExternalServiceHttpClient _httpClient)
    {
        httpClient = _httpClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpClient</Name>
				<Source><![CDATA[
    private WhsExternalServiceHttpClient createHttpClient(WhsExternalServiceRequestLogger _logger)
    {
        if (!httpClient)
        {
            httpClient = WhsExternalServiceHttpClient::construct();
        }

        httpClient.withLogger(_logger);

        if (externalServiceOperation.Timeout)
        {
            httpClient.withTimeoutInMs(externalServiceOperation.Timeout);
        }

        return httpClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withExternalServiceOperation</Name>
				<Source><![CDATA[
    internal WhsExternalServiceClient withExternalServiceOperation(WhsExternalServiceOperation _externalServiceOperation)
    {
        externalServiceOperation = _externalServiceOperation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withExternalServiceOperationRecId</Name>
				<Source><![CDATA[
    internal WhsExternalServiceClient withExternalServiceOperationRecId(WhsExternalServiceOperationRecId _externalServiceOperationRecId)
    {
        externalServiceOperation = WhsExternalServiceOperation::findByRecId(_externalServiceOperationRecId);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withExternalServiceInstance</Name>
				<Source><![CDATA[
    internal WhsExternalServiceClient withExternalServiceInstance(WhsExternalServiceInstance _externalServiceInstance)
    {
        externalServiceInstance = _externalServiceInstance;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withExternalServiceInstanceRecId</Name>
				<Source><![CDATA[
    internal WhsExternalServiceClient withExternalServiceInstanceRecId(WhsExternalServiceInstanceRecId _externalServiceInstanceRecId)
    {
        externalServiceInstance = WhsExternalServiceInstance::findByRecId(_externalServiceInstanceRecId);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTranslator</Name>
				<Source><![CDATA[
    private WhsDocumentRoutingTranslator createTranslator()
    {
        Map authParameters = new Map(Types::String, Types::String);
        authParameters.insert(AuthParamsSecret, externalServiceInstance.getAuthenticationSecret());

        return WhsDocumentRoutingTranslator::construct()
                    .withFormat(WhsDocumentRoutingFormat::PlainText)
                    .withParameterMap(authParameters, AuthParamsName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTranslatorForService</Name>
				<Source><![CDATA[
    protected abstract WhsDocumentRoutingTranslator initTranslatorForService(WhsDocumentRoutingTranslator _newTranslator)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResponse</Name>
				<Source><![CDATA[
    private boolean validateResponse(HttpResponseMessage _responseMessage, WhsExternalServiceRequestLogger _logger)
    {
        if (!_responseMessage.IsSuccessStatusCode)
        {
            _logger.logRequestError(_responseMessage.ReasonPhrase, _responseMessage.StatusCode.ToString('d'));
            return false;
        }

        _logger.logRequestSuccess(_responseMessage);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpRequestMessage</Name>
				<Source><![CDATA[
    private HttpRequestMessage createHttpRequestMessage()
    {
        var requestMessage = this.createRequest();
        requestMessage = this.addRequestHeaders(requestMessage);

        if (requestMessage.Method == HttpMethod::Post || requestMessage.Method == HttpMethod::Put)
        {
            switch (externalServiceOperation.RequestBodyType)
            {
                case WhsExternalServiceOperationRequestBodyType::FormData:
                    this.addFormDataMessageContent(requestMessage);
                    break;

                case WhsExternalServiceOperationRequestBodyType::Raw:
                    this.addRawMessageContent(requestMessage);
                    break;
            }
        }

        return requestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFormDataMessageContent</Name>
				<Source><![CDATA[
    private void addFormDataMessageContent(HttpRequestMessage _requestMessage)
    {
        var boundary = "--" + System.Guid::NewGuid().ToString('D');
        var multiPartContent = new MultipartFormDataContent(boundary);
        var multiPartContentHeaders = multiPartContent.Headers;

        multiPartContentHeaders.Remove('Content-Type');
        multiPartContentHeaders.TryAddWithoutValidation('Content-Type', 'multipart/form-data; boundary=' + boundary);

        WhsExternalServiceOperationKeyValue formDataKeyValuePairs;
        while select formDataKeyValuePairs 
            where formDataKeyValuePairs.ExternalServiceOperation == externalServiceOperation.RecId
               && formDataKeyValuePairs.KeyValueType == WhsExternalServiceOperationKeyValueType::FormData
        {            
            if (formDataKeyValuePairs.FileName)
            {
                multiPartContent.Add(new StringContent(translator.translate(formDataKeyValuePairs.Value)), 
                                     formDataKeyValuePairs.Key, 
                                     translator.translate(formDataKeyValuePairs.FileName));
            }
            else
            {
                multiPartContent.Add(new StringContent(translator.translate(formDataKeyValuePairs.Value)), formDataKeyValuePairs.Key);
            }
        }

        _requestMessage.Content = multiPartContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRawMessageContent</Name>
				<Source><![CDATA[
    private void addRawMessageContent(HttpRequestMessage _requestMessage)
    {
        str requestBody = translator.translate(externalServiceOperation.RequestBody);

        if (externalServiceOperation.RequestContentType)
        {
            _requestMessage.Content = new StringContent(requestBody, System.Text.Encoding::UTF8, externalServiceOperation.RequestContentType);
        }
        else
        {
            _requestMessage.Content = new StringContent(requestBody, System.Text.Encoding::UTF8);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    private HttpRequestMessage createRequest()
    {               
        str requestUri = this.getRequestURLString();

        boolean firstQueryStringParameter = true;

        WhsExternalServiceOperationKeyValue queryStringKeyValuePairs;
        while select queryStringKeyValuePairs
            where queryStringKeyValuePairs.ExternalServiceOperation == externalServiceOperation.RecId
               && queryStringKeyValuePairs.KeyValueType == WhsExternalServiceOperationKeyValueType::QueryString
        {
            if (firstQueryStringParameter)
            {
                requestUri = requestUri + '?';
                firstQueryStringParameter = false;
            }
            else
            {
                requestUri = requestUri + '&';
            }

            var encodedKey = System.Web.HttpUtility::UrlEncode(queryStringKeyValuePairs.Key);
            var encodedValue = System.Web.HttpUtility::UrlEncode(translator.translate(queryStringKeyValuePairs.Value));

            requestUri = requestUri + encodedKey + '=' + encodedValue;
        }

        var httpRequestMessage = new System.Net.Http.HttpRequestMessage(this.getHttpMethod(), requestUri);

        return HttpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    private HttpRequestMessage addRequestHeaders(HttpRequestMessage httpRequestMessage)
    {
        System.Net.Http.Headers.HttpRequestHeaders httpRequestHeaders = httpRequestMessage.Headers;

        WhsExternalServiceOperationKeyValue headerKeyValuePairs;
        while select headerKeyValuePairs
            where headerKeyValuePairs.ExternalServiceOperation == externalServiceOperation.RecId
               && headerKeyValuePairs.KeyValueType == WhsExternalServiceOperationKeyValueType::Header
        {
            httpRequestHeaders.Add(headerKeyValuePairs.Key, translator.translate(headerKeyValuePairs.Value));
        }

        return httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHttpMethod</Name>
				<Source><![CDATA[
    private HttpMethod getHttpMethod()
    {
        switch (this.externalServiceOperation.RequestType)
        {
            case WhsExternalServiceOperationRequestType::GET:
                return HttpMethod::Get;

            case WhsExternalServiceOperationRequestType::POST:
                return HttpMethod::Post;

            case WhsExternalServiceOperationRequestType::PUT:
                return HttpMethod::Put;

            default:
                throw error(error::missingOverload(funcName()));
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestURLString</Name>
				<Source><![CDATA[
    private str getRequestURLString()
    {
        System.Uri baseURL = null;

        if (!System.Uri::TryCreate(externalServiceInstance.BaseURL, System.UriKind::Absolute, byref baseURL) || CLRInterop::isNull(baseURL))
        {
            throw error(strFmt("@WAX:ExternalServiceUnableToCreateURLFromString", externalServiceInstance.BaseURL));
        }

        System.Uri requestURL = null;

        if (!System.Uri::TryCreate(baseURL, externalServiceOperation.RelativeURL, byref requestURL) || CLRInterop::isNull(requestURL))
        {
            throw error(strFmt("@WAX:ExternalServiceUnableToCreateURLFromString", externalServiceOperation.RelativeURL));
        }

        return requestURL.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>