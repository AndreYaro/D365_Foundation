<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayLogin</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to build login screen.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::Login)]
public class WhsWorkExecuteDisplayLogin extends WHSWorkExecuteDisplay
{
    #define.LoginUserName(1)
    #define.LoginPassword(2)

    private WHSServiceXMLTranslator translator;
    private WHSMobileDeviceData deviceData = WHSMobileDeviceData::construct();
    private boolean allowAutoLogin = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustUpdateSessionOnError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this flow must update the session if an error occurs.
    /// </summary>
    /// <returns>true if the session must be updated; otherwise, false.</returns>
    [Wrappable(false)]
    protected boolean mustUpdateSessionOnError()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowAutoLogin</Name>
				<Source><![CDATA[
    internal boolean parmAllowAutoLogin(boolean _allowAutoLogin = allowAutoLogin)
    {
        allowAutoLogin = _allowAutoLogin;
        return allowAutoLogin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTranslator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instance of <c>WHSServiceXMLTranslator</c> to be used in this class.
    /// </summary>
    /// <param name = "_translator">
    /// <c>WHSServiceXMLTranslator</c> instance to be used.
    /// </param>
    public void setTranslator(WHSServiceXMLTranslator _translator)
    {
        translator = _translator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetUserIdPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Login form.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_userId">
    /// User id, empty string by default.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildGetUserIdPassword(container _con, str _userId = '')
    {
        container   ret = _con;
        str         titleLabel = strFmt("@WAX728", curExt());

        ret += [this.buildControl(#RFLabel, #SignIn, titleLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #UserId, "@SYS4517", 1, _userId, extendedTypeNum(WHSUserId), '', 0)];
        ret += [this.buildControl(#RFPassword, #Password, "@SYS30019", 1, '', extendedTypeNum(Password), '', 0)];
        ret += [this.buildControl(#RFButton, #Login, "@WAX549", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        mode = WHSWorkExecuteMode::Login;

        container loginData = WHSWorkExecuteDisplayLogin::retrieveUserIdPassword(_con);
        int startInfologLine = infologLine() + 1;
        deviceData = WHSMobileDeviceData::newFromPass(pass);

        allowAutoLogin = allowAutoLogin && WHSVersionNumber::construct(deviceData.appVersion).isAutoLoginSupported();

        WHSUserId autoLoginUserId = allowAutoLogin ? WHSWorker::autoLoginAsWorkUser() : '';
        container ret;

        if (!loginData && !autoLoginUserId)
        {
            ret = this.buildGetUserIdPassword(_con);
        }
        else
        {
            ttsbegin;            
            
            userId = conPeek(loginData, #LoginUserName);            
            boolean isAuthenticated = false;

            if (!userId && autoLoginUserId)
            {
                userId = autoLoginUserId;
                isAuthenticated = WHSWorkUserAuthenticator::validate(userId);
            }

            this.validateLoginIsAllowed(userId);

            pass = new WHSRFPassthrough(Types::String, Types::String);            
            pass.insert(#UserId, userId);
            pass.setDeviceData(deviceData);

            if (!isAuthenticated)
            {
                str password = conPeek(loginData, #LoginPassword);
                isAuthenticated = WHSWorkUserAuthenticator::authenticate(userId, password);
            }

            if (this.validateCurrentEmployment(userId) && isAuthenticated)
            {
                InventLocationId inventLocationId = WHSWorkUser::find(pass.lookup(#UserId)).UserDefaultWarehouse;
                if (inventLocationId)
                {
                    WHSWorkUserSession::deleteInvalidSession(userId);
                    WHSWorkUserSession userSession = WHSWorkUserSession::find(userId);

                    if (!userSession)
                    {
                        ret = this.createWorkUserSession(_con, inventLocationId);
                    }
                    else
                    {
                        WHSWorkUserSessionInProgressLock::lockWorkUserSession(userId);

                        ret = this.retrieveWorkUserSession(userSession);
                    }

                    if (WHSWarehouseInfoFlight::instance().isEnabled())
                    {
                        pass.parmSendWarehouseInfo(true);
                    }

                    this.updateDeviceInformation(inventLocationId, userId);
                }
                else
                {
                    ret = this.addErrorLabel(ret, "@SYP4881951", WHSRFColorText::Error);
                    overrideSession = true;
                    ret = this.buildGetUserIdPassword(ret);
                }
            }
            else
            {
                ret = this.addErrorLabel(ret, "@WAX769", WHSRFColorText::Error);
                overrideSession = true;
                ret = this.buildGetUserIdPassword(ret);
            }

            ttscommit;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkUserSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create work user session and add to container containing the form state.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_inventLocationId">
    /// Inventory location value to be set on the session.
    /// </param>
    /// <returns>
    /// Container containing the form state after user session control is added.
    /// </returns>
    protected container createWorkUserSession(
        container           _con,
        InventLocationId    _inventLocationId)
    {
        // No User Session - create one (start with Menu mode)
        mode = WHSWorkExecuteMode::Menu;
        step = 0;

        // Set session language
        LanguageId languageId = WHSWorkUser::retrieveWorkUserLanguage(userId);
        if (languageId && infolog.language() != languageId)
        {
            infolog.language(languageId);
        }

        container con = this.updateModeStepPass(_con, mode, step, pass);
        con = conPoke(con, 2, pass.pack());
        
        WHSWorkUserSession userSession = WHSWorkExecuteDisplay::updateWorkUserSession(
            userId,
            con,
            _inventLocationId,
            '',
            languageId,
            translator);

        WHSWorkExecuteDisplay workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::Menu);
        container ret = workExecuteDisplay.displayForm(con);

        pass.regenerateSessionToken();
        ret = this.updateModeStepPass(ret, mode, step, pass);

        userSession = WHSWorkExecuteDisplay::updateWorkUserSession(
            userId,
            ret,
            _inventLocationId,
            '',
            languageId,
            translator);
       
        pass.insert(#UserSessionId, guid2str(userSession.UserSessionId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWorkUserSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the work user session and add to container containing the form state.
    /// </summary>
    /// <param name="_userSession">
    /// The work user session record.
    /// </param>
    /// <returns>
    /// Container containing the form state after user session control is added.
    /// </returns>
    protected container retrieveWorkUserSession(WHSWorkUserSession _userSession)
    {
        var sessionState = _userSession.sessionState();
        
        container con = WHSWorkExecuteDisplay::readXML(sessionState.parmXml());

        mode = sessionState.parmMode();
        step = sessionState.parmStep();
        pass = WHSRFPassthrough::create(sessionState.parmPass());
        pass.insert(#UserId, userId);
        pass.insert(#UserSessionId, guid2str(_userSession.UserSessionId));
        pass.setDeviceData(deviceData);

        if (WHSWorkExecuteMode::Login == mode && this.getButtonClicked(con) == #Login)  // Login
        {
            mode = WHSWorkExecuteMode::Menu;
            step = 0;
        }

        con = conPoke(con, #StateInfo, [mode, step]);
        con = conPoke(con, #PassThroughInfo, pass.pack());

        // if user is in menu and request has been to reset
        // navigation re-process the input.
        container ret;
        if (_userSession.ResetNavigation == NoYes::Yes && mode == WHSWorkExecuteMode::Menu)
        {
            ret = WHSWorkExecuteDisplay::getNextForm(con);
        }
        else
        {
            ret = con;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the user is a current employee or contractor.
    /// </summary>
    /// <param name="_userId">
    ///     The user to validate.
    /// </param>
    /// <returns>
    ///     True if the user is a current employee or contractor, otherwise; false.
    /// </returns>
    public boolean validateCurrentEmployment(WHSUserId _userId)
    {
        WHSWorkUser whsWorkUser;
        WHSWorker   whsWorker;
        HcmWorker   hcmWorker;
        boolean     result = false;

        select UserId from whsWorkUser
            where whsWorkUser.UserId == _userId
            join Worker from whsWorker
                where whsWorker.RecId == whsWorkUser.Worker
                join hcmWorker
                    where hcmWorker.RecId == whsWorker.Worker;

        if (hcmWorker && (hcmWorker.isEmployee() || hcmWorker.isContractor()))
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveUserIdPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads user login information from the given container.
    /// </summary>
    /// <param name="_con">
    /// Container to read from.
    /// </param>
    /// <returns>
    /// Container containing:
    /// 1: User Id
    /// 2: Password
    /// or conNull() if no information can be found.
    /// </returns>
    protected static container retrieveUserIdPassword(container _con)
    {
        str             userId;
        str             password;
        boolean         foundUser = false;
        boolean         foundPass = false;
        int             i;
        container       ctrl;

        if (!_con)
        {
            return conNull();
        }

        i = #ControlsStart;

        while (i <= conLen(_con) && !(foundUser && foundPass))
        {
            ctrl = conPeek(_con, i);
            i++;

            if (!foundUser && #RFText == conPeek(ctrl, #controlType) && #UserId == conPeek(ctrl, #name))
            {
                foundUser = true;
                userId = conPeek(ctrl, #data);
                continue;
            }

            if (!foundPass && #RFPassword == conPeek(ctrl, #controlType) && #Password == conPeek(ctrl, #name))
            {
                foundPass = true;
                password = conPeek(ctrl, #data);
                continue;
            }
        }

        return (foundUser && foundPass) ? [userId, password] : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeviceInformation</Name>
				<Source><![CDATA[
    private WHSMobileDevice updateDeviceInformation(InventLocationId _inventLocationId, WHSUserId _userId)
    {
        if (deviceData.deviceId == emptyGuid())
        {
            WHSMobileDevice mobileDevice;
            return mobileDevice;
        }

        return WHSMobileDevice::insertOrUpdate(deviceData, _inventLocationId, _userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoginIsAllowed</Name>
				<Source><![CDATA[
    private void validateLoginIsAllowed(WHSUserId _userId)
    {        
        if (deviceData.deviceId == emptyGuid())
        {
            return;
        }

        WHSMobileDevice mobileDevice = WHSMobileDevice::find(deviceData.deviceId);
        if (!mobileDevice)
        {
            return;
        }

        if (mobileDevice.DeviceSupportStatus == WHSVersionSupport::Blocked)
        {
            throw error("@WAX:MobileDeviceBlocked");
        }

        if (mobileDevice.DeviceLicense == WHSMobileDeviceLicenseType::BlockSharedUsage)
        {
            WHSWorkUser workUser = WHSWorkUser::find(_userId);
            if (workUser.isSharingWorker())
            {
                throw error("@WAX:MobileDeviceSharedUsageBlocked");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>