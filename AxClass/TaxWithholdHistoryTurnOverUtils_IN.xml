<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdHistoryTurnOverUtils_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdHistoryTurnoverUtils_IN</c> provides the functionality around initial
/// history threshold amount for withholding tax calculation.
/// </summary>
internal static class TaxWithholdHistoryTurnoverUtils_IN
{
    // These two magic values are created for Indian government law, the law requires to consider that all the payments in the period should be considered into threshold accumulation.
    internal static TransDate FromDateForCust = 1\4\2020;
    internal static TransDate ToDateForCust = 30\9\2020;

    // These two magic values are created for new Indian government law, the law requires to consider that all vendor transactions in the period should be considered into threshold accumulation.
    internal static TransDate FromDateForVend = 1\4\2021;
    internal static TransDate ToDateForVend = 30\6\2021;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxWithholdHistoryTurnOver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets withholding tax history turnover amount.
    /// </summary>
    /// <param name = "_from">The original from date</param>
    /// <param name = "_to">The original to date</param>
    /// <param name = "_taxWHTThresholdSourceLineImpl">The <c>TaxWHTThresholdSourceLineImpl_IN</c> instance.</param>
    /// <param name = "_custVendACType">The type of account, customer or vendor.</param>
    /// <returns>The withholding tax history turnover amount.</returns>
    internal static AmountCur getTaxWithholdHistoryTurnOver(
        FromDate _from,
        ToDate _to,
        TaxWHTThresholdSourceLineImpl_IN _taxWHTThresholdSourceLineImpl,
        CustVendACType _custVendACType)
    {
        TaxWithholdCode taxWithholdCode = _taxWHTThresholdSourceLineImpl.parmTaxWithholdCode();
        AccountNumber accountNumber = _taxWHTThresholdSourceLineImpl.parmAccountNum();
        AmountCur historyTurnOver = 0;
        TaxWithholdHistoryTurnOverHeader_IN taxWithholdHistoryTurnOverHeaderLoc = TaxWithholdHistoryTurnOverUtils_IN::getTaxWithholdHistoryTurnOverHeader(
            _from,
            _to,
            _custVendACType);

        if (taxWithholdHistoryTurnOverHeaderLoc.RecId != 0)
        {
            TaxWithholdHistoryTurnOverLine_IN taxWithholdHistoryTurnOverLineLoc;
            PANNumber_IN pAN = _taxWHTThresholdSourceLineImpl.getPANNumber();
            if (pAN && _taxWHTThresholdSourceLineImpl.isPANBasedAccumulation())
            {
                if (_taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust)
                {
                    TaxInformationCustTable_IN taxInfoCustTable;
                    select sum(TurnOverAmountMST) from taxWithholdHistoryTurnOverLineLoc
                        exists join RecId from taxInfoCustTable
                            where taxInfoCustTable.CustTable == taxWithholdHistoryTurnOverLineLoc.CustAccount
                                && taxInfoCustTable.PANStatus == PANStatus_IN::Received
                                && taxInfoCustTable.PANNumber == pAN
                                && taxWithholdHistoryTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN == taxWithholdHistoryTurnOverHeaderLoc.RecId;
                }
                else if (_taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Vend)
                {
                    TaxInformationVendTable_IN taxInfoVendTable;
                    select sum(TurnOverAmountMST) from taxWithholdHistoryTurnOverLineLoc
                        exists join RecId from taxInfoVendTable
                            where taxInfoVendTable.VendTable == taxWithholdHistoryTurnOverLineLoc.VendAccount
                                && taxInfoVendTable.PANStatus == PANStatus_IN::Received
                                && taxInfoVendTable.PANNumber == pAN
                                && taxWithholdHistoryTurnOverLineLoc.TaxWithholdCode == taxWithholdCode
                                && taxWithholdHistoryTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN == taxWithholdHistoryTurnOverHeaderLoc.RecId;
                }
            }
            else
            {
                if (_taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Cust)
                {
                    select TurnOverAmountMST from taxWithholdHistoryTurnOverLineLoc
                        where taxWithholdHistoryTurnOverLineLoc.CustAccount == accountNumber
                            && taxWithholdHistoryTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN == taxWithholdHistoryTurnOverHeaderLoc.RecId;
                }
                else if (_taxWHTThresholdSourceLineImpl.parmAccountType() == AccountType_IN::Vend)
                {
                    select TurnOverAmountMST from taxWithholdHistoryTurnOverLineLoc
                        where taxWithholdHistoryTurnOverLineLoc.VendAccount == accountNumber
                            && taxWithholdHistoryTurnOverLineLoc.TaxWithholdCode == taxWithholdCode
                            && taxWithholdHistoryTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN == taxWithholdHistoryTurnOverHeaderLoc.RecId;
                }
            }
            historyTurnOver = taxWithholdHistoryTurnOverLineLoc.TurnOverAmountMST;
        }
        return historyTurnOver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedFromDateBasedOnHistoryTurnOver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted from date according to the withholding tax history turnover settings.
    /// </summary>
    /// <param name = "_from">The original from date</param>
    /// <param name = "_to">The original to date</param>
    /// <param name = "_custVendACType">The type of account, customer or vendor.</param>
    /// <param name = "_taxWHTThresholdSourceLineImpl">The <c>TaxWHTThresholdSourceLineImpl_IN</c> instance.</param>
    /// <returns>The adjusted from date, if the [from date - to date] range overlapped the date range 
    /// defined in withholding tax history turnover settings, returns history to date + 1 day; otherwise original to date.
    /// </returns>
    internal static date getAdjustedFromDateBasedOnHistoryTurnOver(
        FromDate _from,
        ToDate _to,
        CustVendACType _custVendACType,
        TaxWHTThresholdSourceLineImpl_IN _taxWHTThresholdSourceLineImpl)
    {
        date adjustedDate = _from;
        TaxWithholdHistoryTurnOverHeader_IN historyTurnOverHeaderLoc = TaxWithholdHistoryTurnOverUtils_IN::getTaxWithholdHistoryTurnOverHeader(
            _from,
            _to,
            _custVendACType);

        if (_custVendACType == CustVendACType::Cust)
        {
            if (historyTurnOverHeaderLoc.RecId)
            {
                adjustedDate = historyTurnOverHeaderLoc.ToDate + 1;
            }
        }
        else
        {
            AccountNumber accountNumber = _taxWHTThresholdSourceLineImpl.parmAccountNum();
            TaxWithholdCode taxWithholdCode = _taxWHTThresholdSourceLineImpl.parmTaxWithholdCode();
            TaxWithholdHistoryTurnOverLine_IN taxWithholdHistoryTurnOverLineLoc;
            select RecId from taxWithholdHistoryTurnOverLineLoc
                where taxWithholdHistoryTurnOverLineLoc.VendAccount == accountNumber
                    && taxWithholdHistoryTurnOverLineLoc.TaxWithholdCode == taxWithholdCode
                    && taxWithholdHistoryTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN == historyTurnOverHeaderLoc.RecId;

            // If the combination of vendor and tax code does not exist, don't impact the threshold date range.
            if (taxWithholdHistoryTurnOverLineLoc.RecId)
            {
                adjustedDate = historyTurnOverHeaderLoc.ToDate + 1;
            }
        }

        return adjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdHistoryTurnOverHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxWithholdHistoryTurnOverHeader_IN</c> instance by given date range.
    /// 
    /// As the function is temporary for mitigating the problem of the new law about TCS sales of goods,
    /// we simply check if the given date range covers history turnover's date range.
    /// </summary>
    /// <param name = "_from">From date of the date range</param>
    /// <param name = "_to">To date of the date range</param>
    /// <param name = "_custVendACType">The type of account, customer or vendor.</param>
    /// <returns>The matched instance of <c>TaxWithholdHistoryTurnOverHeader_IN</c></returns>
    internal static TaxWithholdHistoryTurnOverHeader_IN getTaxWithholdHistoryTurnOverHeader(
        FromDate _from,
        ToDate _to,
        CustVendACType _custVendACType = CustVendACType::Cust)
    {
        TaxWithholdHistoryTurnOverHeader_IN taxWithholdHistoryTurnOverHeaderLoc;
        select firstonly taxWithholdHistoryTurnOverHeaderLoc
            where taxWithholdHistoryTurnOverHeaderLoc.AccountType == _custVendACType
                && taxWithholdHistoryTurnOverHeaderLoc.FromDate >= _from
                && taxWithholdHistoryTurnOverHeaderLoc.ToDate <= _to
                && taxWithholdHistoryTurnOverHeaderLoc.IsInitialized;
        return taxWithholdHistoryTurnOverHeaderLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWithholdHistoryTurnOverLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history withhold tax threshold amount for each customers.
    /// </summary>
    /// <param name = "_header">The <c>TaxWithholdHistoryTurnOverHeader_IN</c> instance as a parent of new lines.</param>
    internal static void initWithholdHistoryTurnOverLines(TaxWithholdHistoryTurnOverHeader_IN _header)
    {
        TaxWithholdHistoryTurnOverLine_IN taxWithholdTurnOverLineLoc;
        CustTable custTableLoc;
        RecordInsertList insertList = new RecordInsertList(taxWithholdTurnOverLineLoc.TableId);

        ttsbegin;

        while select AccountNum from custTableLoc
        {
            taxWithholdTurnOverLineLoc.TaxWithholdHistoryTurnOverHeader_IN = _header.RecId;
            taxWithholdTurnOverLineLoc.CustAccount = custTableLoc.AccountNum;
            taxWithholdTurnOverLineLoc.TurnOverAmountMST = TaxWithholdHistoryTurnoverUtils_IN::getCustHistoryAmount(custTableLoc.AccountNum, _header.FromDate, _header.ToDate);
            insertList.add(taxWithholdTurnOverLineLoc);
        }
        insertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustHistoryAmount</Name>
				<Source><![CDATA[
    internal static AmountCur getCustHistoryAmount(
        CustAccount _custAccount,
        FromDate _from,
        ToDate _to)
    {
        LedgerJournalTrans ledgerJournalTransLoc;
        ledgerJournalTable ledgerJournalTableLoc;
        AmountCur amount = 0;

        // Consider posted customer transactions as payment by the below criteria:
        // - customer - credit - bank / cash ledger account, as payment from customer;
        // - bank / cash ledger account - debit - customer, as payment from customer;
        // - customer - debit - bank / cash ledger account, as refund to customer;
        // - bank / cash ledger account - credit - customer, as refund to customer.
        while select ledgerJournalTransLoc
            where (ledgerJournalTransLoc.TransDate >= _from 
                    && ledgerJournalTransLoc.TransDate <= _to)
                && ((ledgerJournalTransLoc.AccountType == LedgerJournalACType::Cust
                        && ledgerJournalTransLoc.LedgerDimension != 0)
                    || (ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust
                        && ledgerJournalTransLoc.OffsetLedgerDimension != 0))
            join RecId from ledgerJournalTableLoc
                where ledgerJournalTableLoc.JournalNum == ledgerJournalTransLoc.JournalNum
                && ledgerJournalTableLoc.Posted == NoYes::Yes
        {
            if (LedgerJournalTrans::isCustomerPaymentByAccounts(ledgerJournalTransLoc)
                && ((ledgerJournalTransLoc.AccountType == LedgerJournalACType::Cust && ledgerJournalTransLoc.parmAccount() == _custAccount)
                    || (ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust && ledgerJournalTransLoc.parmOffsetAccount() == _custAccount)
                ))
            {
                CustTrans custTransLoc = CustTrans::findVoucherDate(ledgerJournalTransLoc.Voucher, ledgerJournalTransLoc.TransDate);
                if (custTransLoc.RecId != 0)
                {
                    // Payment from customer is negative amount, refund to customer is positive amount, therefore use '-=' here.
                    amount -= custTransLoc.AmountMST;
                }
            }
        }

        return amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>