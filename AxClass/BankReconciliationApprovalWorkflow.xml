<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationApprovalWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationApprovalWorkflow</c> class is the helper class for the <c>SubmitToWorkflow</c> and
/// <c>ResubmitToWorkflow</c> classes for the bank reconciliation workflow.
/// </summary>
public class BankReconciliationApprovalWorkflow
{
    BankReconciliationHeader    bankReconciliationHeader;
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    WorkflowWorkItemTable       workflowWorkItemTable;
    UserId                      userId;
    MenuItemName                menuItemName;
    WorkflowTypeName            workflowTypeName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box for submitting a bank reconciliation workflow.
    /// </summary>
    /// <returns>
    /// true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    protected boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         ok;

        if (menuItemName == menuitemActionStr(BankReconciliationApprovalSubmit))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemactionstr(BankReconciliationApprovalResubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workflowWorkItemTable,
                WorkflowWorkItemActionType::Resubmit,
                new MenuFunction(menuitemactionstr(BankReconciliationApprovalResubmit), MenuItemType::Action));
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BankReconciliationApprovalWorkflow</c> class.
    /// </summary>
    /// <param name="_documentRecord">
    /// The <c>BankReconciliationHeader</c> record to submit.
    /// </param>
    /// <param name="_menuItemName">
    /// The menuitem of the caller.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// The <c>WorkflowVersionTable</c> record.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// The <c>WorkflowWorkItemTable</c> record.
    /// </param>
    protected void init(
        BankReconciliationHeader    _documentRecord,
        MenuItemName                _menuItemName,
        WorkflowVersionTable        _workflowVersionTable,
        WorkflowWorkItemTable       _workflowWorkItemTable)
    {
        this.parmBankReconciliationHeader(_documentRecord);
        this.parmMenuItemName(_menuItemName);
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTypeName(this.parmWorkflowVersionTable().WorkflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationHeader</Name>
				<Source><![CDATA[
    public BankReconciliationHeader parmBankReconciliationHeader(BankReconciliationHeader _bankReconciliationHeader = bankReconciliationHeader)
    {
        bankReconciliationHeader = _bankReconciliationHeader;

        return bankReconciliationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTypeName</Name>
				<Source><![CDATA[
    public WorkflowTypeName parmWorkflowTypeName(WorkflowTypeName _workflowTypeName = workflowTypeName)
    {
        workflowTypeName = _workflowTypeName;

        return workflowTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the bank reconciliation document.
    /// </summary>
    public void reSubmit()
    {
        if (this.parmWorkflowWorkItemtable())
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(workflowWorkItemTable,
                workflowComment,
                userId,
                WorkflowWorkItemActionType::Resubmit,
                menuItemName);

            this.setWorkflowStatusToInReview();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatusToInReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the work flow status to in review and update the datasource.
    /// </summary>
    protected void setWorkflowStatusToInReview()
    {
        BankReconciliationApprovalWorkflow::setWorkflowStatus(this.parmBankReconciliationHeader(), BankReconciliationApprovalWFStatus::InReview);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the bank reconciliation document.
    /// </summary>
    public void submit()
    {
        if (this.parmWorkflowTypeName()
            && BankReconciliationHeader::find(bankReconciliationHeader.RecId).BankReconciliationApprovalWFStatus == BankReconciliationApprovalWFStatus::Draft)
        {
            Workflow::activateFromWorkflowType(workflowTypeName,
                bankReconciliationHeader.RecId,
                workflowComment,
                NoYes::No);

            this.setWorkflowStatusToInReview();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BankReconciliationApprovalWorkflow</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BankReconciliationApprovalWorkflow</c> class.
    /// </returns>
    public static BankReconciliationApprovalWorkflow construct()
    {
        return new BankReconciliationApprovalWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankReconciliationApprovalWorkflow      bankReconciliationApprovalWorkflow;
        BankReconciliationHeader                bankReconciliationHeader;

        Debug::assert(args.record()
            && args.record().TableId == tableNum(BankReconciliationHeader));

        bankReconciliationHeader = args.record();

        if (args.menuItemName() == menuitemactionstr(BankReconciliationApprovalSubmit) ||
            args.menuItemName() == menuitemactionstr(BankReconciliationApprovalResubmit))
        {
            bankReconciliationApprovalWorkflow = BankReconciliationApprovalWorkflow::construct();

            bankReconciliationApprovalWorkflow.init(
                bankReconciliationHeader,
                args.menuItemName(),
                args.caller().getActiveWorkflowConfiguration(),
                args.caller().getActiveWorkflowWorkItem());

            if (bankReconciliationApprovalWorkflow.dialogOk())
            {
                switch (args.menuItemName())
                {
                    case menuitemactionstr(BankReconciliationApprovalSubmit):
                        bankReconciliationApprovalWorkflow.submit();
                        break;

                    case menuitemactionstr(BankReconciliationApprovalResubmit):
                        bankReconciliationApprovalWorkflow.reSubmit();
                        break;

                    default:
                        break;
                }

                args.caller().updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the work flow status to the status and update the data source.
    /// </summary>
    /// <param name="_header">
    /// The bank reconciliation header.
    /// </param>
    /// <param name="_status">
    /// The workflow status.
    /// </param>
    public static void setWorkflowStatus(
        BankReconciliationHeader _header,
        BankReconciliationApprovalWFStatus _status)
    {
        FormDataSource bankReconciliationHeader_ds;

        BankReconciliationHeader::setWorkflowStatus(
            _header.RecId,
            _status);

        if (FormDataUtil::getFormDataSource(_header))
        {
            bankReconciliationHeader_ds = FormDataUtil::getFormDataSource(_header);
            bankReconciliationHeader_ds.research();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>