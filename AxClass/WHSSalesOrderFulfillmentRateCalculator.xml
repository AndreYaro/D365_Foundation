<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSalesOrderFulfillmentRateCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSalesOrderFulfillmentRateCalculator</c> class is used for calculations of values used for fulfillment rate validation of a sales order.
/// </summary>
public class WHSSalesOrderFulfillmentRateCalculator implements WHSIFulfillmentRateValidationCalculator
{
    protected SalesId salesId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQuantities</Name>
				<Source><![CDATA[
    public WHSFulfillmentRateQuantities calculateQuantities()
    {
        InventHandlingQty orderQuantity		= this.calculateTotalQuantity();
        InventHandlingQty fulfilledQuantity = this.calculateFulfilledQuantity();

        return WHSFulfillmentRateQuantities::newFromQuantities(orderQuantity, fulfilledQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateTotalQuantity()
    {
        SalesLine	salesLine;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            InventHandlingQty	inventHandlingQty;

            SysDaQueryObject salesLineQueryObject = new SysDaQueryObject(salesLine);
            salesLineQueryObject.groupByClause().add(fieldstr(SalesLine, ItemId));                                
            salesLineQueryObject.projection().add(fieldStr(SalesLine, ItemId));
            salesLineQueryObject.projection().addSum(fieldStr(SalesLine, PdsCWQty));
            salesLineQueryObject.projection().addSum(fieldStr(SalesLine, QtyOrdered));

            salesLineQueryObject.whereClause(this.buildSalesLineCwTotalQuantityFilterExpression(salesLine));
            salesLineQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, this.buildServiceItemFilterQuery(salesLine));

            SysDaSearchObject searchObject = new SysDaSearchObject(salesLineQueryObject);
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();            

            while(searchStatement.findNext(searchObject))
            {
                boolean isCwItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);
                inventHandlingQty += isCwItem ? salesLine.PdsCWQty : salesLine.QtyOrdered;
            }

            return inventHandlingQty;
        }
        else
        {
            SysDaQueryObject salesLineQueryObject = new SysDaQueryObject(salesLine);
            salesLineQueryObject.projection().addSum(fieldStr(SalesLine, QtyOrdered));

            salesLineQueryObject.whereClause(this.buildSalesLineTotalQuantityFilterExpression(salesLine));
            salesLineQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, this.buildServiceItemFilterQuery(salesLine));

            SysDaFindObject findObject = new SysDaFindObject(salesLineQueryObject);
            SysDaFindStatement findStatement = new SysDaFindStatement();
            findStatement.find(findObject);
            return salesLine.QtyOrdered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineTotalQuantityFilterExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query expression that filters sales lines to calculate total quantity.
    /// </summary>
    /// <param name = "_salesLine">Instance of <c>SalesLine</c> to filter.</param>
    /// <returns>Query expression for filtering sales lines.</returns>
    protected SysDaQueryExpression buildSalesLineTotalQuantityFilterExpression(SalesLine _salesLine)
    {
        SysDaQueryExpression filterExpression =
            new SysDaEqualsExpression(new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, SalesId)), new SysDaValueExpression(salesId))
                .and(new SysDaGreaterThanExpression(
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, QtyOrdered)),
                        new SysDaValueExpression(0)))
                .and(this.salesLineFilter(_salesLine));

        return filterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineTotalAmountFilterExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query expression that filters sales lines to calculate total amount.
    /// </summary>
    /// <param name = "_salesLine">Instance of <c>SalesLine</c> to filter.</param>
    /// <returns>Query expression for filtering sales lines.</returns>
    protected SysDaQueryExpression buildSalesLineTotalAmountFilterExpression(SalesLine _salesLine)
    {
        SysDaQueryExpression filterExpression =
            new SysDaEqualsExpression(new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, SalesId)), new SysDaValueExpression(salesId))
                .and(new SysDaGreaterThanExpression(
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, QtyOrdered)),
                        new SysDaValueExpression(0)));

        return filterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineCwTotalQuantityFilterExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query expression that filters catch weight enabled sales lines to calculate total quantity.
    /// </summary>
    /// <param name = "_salesLine">Instance of <c>SalesLine</c> to filter.</param>
    /// <returns>Query expression for filtering sales lines.</returns>
    protected SysDaQueryExpression buildSalesLineCwTotalQuantityFilterExpression(SalesLine _salesLine)
    {
        SysDaQueryExpression qtyFilter = 
                new SysDaGreaterThanExpression(
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, PdsCWQty)),
                        new SysDaValueExpression(0))
                .or(new SysDaGreaterThanExpression(
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, QtyOrdered)),
                        new SysDaValueExpression(0)));

        SysDaQueryExpression filterExpression =
            new SysDaEqualsExpression(new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, SalesId)), new SysDaValueExpression(salesId))
                .and(qtyFilter)
                .and(this.salesLineFilter(_salesLine));

        return filterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineFilter</Name>
				<Source><![CDATA[
    private SysDaQueryExpression salesLineFilter(SalesLine _salesLine)
    {
        SysDaQueryExpression salesLineFilterExpression =
            new SysDaNotEqualsExpression(
                new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, SalesStatus)),
                new SysDaValueExpression(SalesStatus::Canceled));

        salesLineFilterExpression = salesLineFilterExpression.and(new SysDaNotEqualsExpression(
                                                    new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, DeliveryType)),
                                                    new SysDaValueExpression(TradeLineDlvType::DropShip)));

        if (WHSSOFulfillmentCalculatorOrderLineWithMultipleDeliveriesFlight::instance().isEnabled())
        {
            salesLineFilterExpression = salesLineFilterExpression.and(new SysDaNotEqualsExpression(
                                                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, LineDeliveryType)),
                                                        new SysDaValueExpression(LineDeliveryType::OrderLineWithMultipleDeliveries)));
        }

        return salesLineFilterExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFulfilledQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateFulfilledQuantity()
    {
        InventTrans					inventTrans;
        SalesLine					salesLine;
        InventTransOriginSalesLine	inventTransOriginSalesLine;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            InventHandlingQty	inventHandlingQty;

            SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(inventTrans);
            inventTransQueryObject.projection().add(fieldStr(InventTrans, ItemId));
            inventTransQueryObject.projection().addSum(fieldStr(InventTrans, Qty));
            inventTransQueryObject.projection().addSum(fieldStr(InventTrans, PdsCWQty));
            inventTransQueryObject.groupByClause().add(fieldStr(InventTrans, ItemId));

            inventTransQueryObject.whereClause(this.buildInventTransFilterExpression(inventTrans));

            SysDaQueryObject inventTransOriginSalesLineQueryObject = this.buildInventTransOriginSalesLineFilterObject(inventTrans, inventTransOriginSalesLine);

            SysDaQueryObject salesLineQueryObject = new SysDaQueryObject(salesLine);
            salesLineQueryObject.whereClause(this.buildSalesLineFilterByInventTransOriginSalesLineExpression(salesLine, inventTransOriginSalesLine)
                                .and(this.buildSalesLineCwTotalQuantityFilterExpression(salesLine)));

            salesLineQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, this.buildServiceItemFilterQuery(salesLine));

            inventTransQueryObject.joinClause(SysDaJoinKind::ExistsJoin, inventTransOriginSalesLineQueryObject).joinClause(SysDaJoinKind::ExistsJoin, salesLineQueryObject);
            
            SysDaSearchObject searchObject = new SysDaSearchObject(inventTransQueryObject);
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();
            
            while(searchStatement.findNext(searchObject))
            {
                boolean isCwItem = PdsGlobal::pdsIsCWItem(inventTrans.ItemId);
                inventHandlingQty += isCwItem ? inventTrans.PdsCWQty : inventTrans.Qty;
            }

            return -inventHandlingQty;
        }
        else
		{
            SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(inventTrans);
            inventTransQueryObject.projection().addSum(fieldStr(InventTrans, Qty));

            inventTransQueryObject.whereClause(this.buildInventTransFilterExpression(inventTrans));                

            SysDaQueryObject inventTransOriginSalesLineQueryObject = this.buildInventTransOriginSalesLineFilterObject(inventTrans, inventTransOriginSalesLine);

            SysDaQueryObject salesLineQueryObject = new SysDaQueryObject(salesLine);
            salesLineQueryObject.whereClause(this.buildSalesLineFilterByInventTransOriginSalesLineExpression(salesLine, inventTransOriginSalesLine)
                                .and(this.buildSalesLineTotalQuantityFilterExpression(salesLine)));

            salesLineQueryObject.joinClause(SysDaJoinKind::NotExistsJoin, this.buildServiceItemFilterQuery(salesLine));

            inventTransQueryObject.joinClause(SysDaJoinKind::ExistsJoin, inventTransOriginSalesLineQueryObject).joinClause(SysDaJoinKind::ExistsJoin, salesLineQueryObject);
            
            SysDaFindObject findObject = new SysDaFindObject(inventTransQueryObject);
            SysDaFindStatement findStatement = new SysDaFindStatement();
            findStatement.find(findObject);

			return -inventTrans.Qty;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineFilterByInventTransOriginSalesLineExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildSalesLineFilterByInventTransOriginSalesLineExpression(SalesLine _salesLine, InventTransOriginSalesLine _inventTransOriginSalesLine)
    {
        return new SysDaEqualsExpression(
                        new SysDaFieldExpression(_inventTransOriginSalesLine, fieldStr(InventTransOriginSalesLine, SalesLineDataAreaId)),
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, DataAreaId)))
                .and(new SysDaEqualsExpression(
                        new SysDaFieldExpression(_inventTransOriginSalesLine, fieldStr(InventTransOriginSalesLine, SalesLineInventTransId)),
                        new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, InventTransId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransOriginSalesLineFilterObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventTransOriginSalesLineFilterObject(InventTrans _inventTrans, InventTransOriginSalesLine _inventTransOriginSalesLine)
    {
        SysDaQueryObject inventTransOriginSalesLineQueryObject = new SysDaQueryObject(_inventTransOriginSalesLine);
                inventTransOriginSalesLineQueryObject.whereClause(
                        new SysDaEqualsExpression(
                                new SysDaFieldExpression(_inventTransOriginSalesLine, fieldStr(InventTransOriginSalesLine, InventTransOrigin)),
                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin))));
        return inventTransOriginSalesLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransFilterExpression</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildInventTransFilterExpression(InventTrans _inventTrans)
    {
        SysDaQueryExpression inventTransStatusIssueFilter =
                            new SysDaEqualsExpression(
                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                new SysDaValueExpression(StatusIssue::ReservPhysical))
                        .or(new SysDaEqualsExpression(
                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                new SysDaValueExpression(StatusIssue::Picked)))
                        .or(new SysDaEqualsExpression(
                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                new SysDaValueExpression(StatusIssue::Deducted)))
                        .or(new SysDaEqualsExpression(
                                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                                new SysDaValueExpression(StatusIssue::Sold)));

        
        return new SysDaEqualsExpression(
                        new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)),
                        new SysDaValueExpression(StatusReceipt::None))
            .and(inventTransStatusIssueFilter)
            .or(new SysDaEqualsExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)), new SysDaValueExpression(StatusIssue::None))
                .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)), new SysDaValueExpression(StatusReceipt::Purchased))));
        
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    public WHSFulfillmentRateAmounts calculateAmounts()
    {
        SalesLine	salesLine;
        Amount		fulfilledAmount, totalAmount;
        InventQty	fulfilledLineQty;

        SysDaQueryObject salesLineQueryObject = new SysDaQueryObject(salesLine);
        salesLineQueryObject.whereClause(this.buildSalesLineTotalAmountFilterExpression(salesLine));

        SysDaSearchObject searchObject = new SysDaSearchObject(salesLineQueryObject);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        while(searchStatement.findNext(searchObject))
        {
            boolean isCwItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);

            if (isCwItem && salesLine.PdsCWQty)
            {
                fulfilledLineQty = salesLine.pdsCWDeliveredInTotal() + salesLine.pdsCWPickedInTotal() + salesLine.pdsCWReservedPhysical();
                fulFilledAmount += salesLine.LineAmount * (fulfilledLineQty / salesLine.PdsCWQty);
            }
            else
			{
                fulfilledLineQty = salesLine.deliveredInventInTotal() + salesLine.pickedInTotalInventUnit() + salesLine.reservedPhysical();
                fulFilledAmount += salesLine.LineAmount * (fulfilledLineQty / salesLine.QtyOrdered);
			}

            totalAmount += salesLine.LineAmount;
        }

        return WHSFulfillmentRateAmounts::newFromAmounts(totalAmount, fulfilledAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSSalesOrderFulfillmentRateCalculator</c> class.
    /// </summary>
    /// <param name = "_salesId">The sales Id of the sales order.</param>
    /// <returns>A new instance of the <c>WHSSalesOrderFulfillmentRateCalculator</c> class</returns>
    public static WHSSalesOrderFulfillmentRateCalculator newFromSalesId(SalesId _salesId)
    {
        WHSSalesOrderFulfillmentRateCalculator calculator = WHSSalesOrderFulfillmentRateCalculator::construct();
        
        calculator.salesId = _salesId;
        
        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildServiceItemFilterQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildServiceItemFilterQuery(SalesLine _salesLine)
    {
        EcoResProduct product;
        InventTable invantTable;
        SysDaQueryObject productItemQueryObject = new SysDaQueryObject(product);
        SysDaQueryObject inventTableQueryObject = new SysDaQueryObject(invantTable);

        inventTableQueryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(invantTable, fieldStr(InventTable, ItemId)),
            new SysDaFieldExpression(_salesLine, fieldStr(SalesLine, ItemId))));

        productItemQueryObject.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(product, fieldStr(EcoResProduct, RecId)),
            new SysDaFieldExpression(invantTable, fieldStr(InventTable, Product)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(product, fieldStr(EcoResProduct, ProductType)),
                new SysDaValueExpression(EcoResProductType::Service))));

        inventTableQueryObject.joinClause(SysDaJoinKind::ExistsJoin, productItemQueryObject);

        return inventTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSSalesOrderFulfillmentRateCalculator construct()
    {
        return new WHSSalesOrderFulfillmentRateCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>