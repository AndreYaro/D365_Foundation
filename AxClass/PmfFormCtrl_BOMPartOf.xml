<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMPartOf</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMPartOf</c> form
/// </summary>
public class PmfFormCtrl_BOMPartOf extends PmfFormCtrl
{
    boolean                     calledFromFormula;

    ItemId                      itemId;
    EcoResItemConfigurationName configId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMShowInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BOMShowInterval</c> control should be visible.
    /// </summary>
    /// <returns>
    /// true if the control should be visible; otherwise, false.
    /// </returns>
    /// <remarks>
    /// method is used by the button manager
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The form element has not been set.
    /// </exception>
    public boolean checkBOMShowInterval()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return formRun.args().dataset() != tablenum(ReqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add queries after the form datasource is initialized.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer associated with the datasource.
    /// </param>
    /// <remarks>
    /// This method needs to be called to add appropriate ranges to the datasource query
    /// </remarks>
    public void dataSourceInitPost(Common _buffer)
    {
        QueryBuildRange qbr;
        PmfFormulaCoBy pmfFormulaCoBy;

        super(_buffer);

        if (this.isPmfEnabled())
        {
            qbr = formDS.query().dataSourceTable(
                tablenum(BOM)).addRange(fieldnum(BOM,bomId));

            if (this.callerBuffer().TableId == tablenum(PmfFormulaCoBy))
            {
                pmfFormulaCoBy = this.callerBuffer();
                qbr.value(pmfFormulaCoBy.bomId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize references before the <c>linkActive</c> event for the datasource is executed.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The form element has not been set.
    /// </exception>
    public void dataSourceLinkActivePre()
    {
        ReqPO           bufferReqPo;
        InventTable     inventTable;

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (this.isFormulaEnabled())
        {
            this.setCaller(formRun.args().record());

            switch (formRun.args().dataset())
            {
                case tablenum(ReqPO):
                    bufferReqPo         = formRun.args().record();
                    itemId              = bufferReqPo.ItemId;
                    configId            = InventDim::find(bufferReqPo.CovInventDimId).ConfigId;
                    break;
                case tablenum(InventTable):
                    inventTable         = formRun.args().record();
                    itemId              = inventTable.ItemId;
                    break;
            }

            this.refreshManager();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMPartOf, BOMGrid)),
                formRun.design().controlName(formcontrolstr(BOMPartOf, BOM_BOMNum)),
                methodstr(PmfFormCtrl_BOMPartOf, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO529");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMPartOf, BOM)),
                formRun.design().controlName(formcontrolstr(BOMPartOf, BOMShowInterval)),
                methodstr(PmfFormCtrl_BOMPartOf, checkBOMShowInterval),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form caller before the form element will be initialized.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The form run has not been set for the class.
    /// </exception>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.setCaller(formRun.args().record());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shown record is from a formula.
    /// </summary>
    /// <returns>
    /// true if the shown record is a formula; otherwise, false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        return #PmfEnabled && calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    public EcoResItemConfigurationName parmConfigId(EcoResItemConfigurationName _configId = configId)
    {
        if (!prmisdefault(_configId))
        {
            configId = _configId;
        }

        return configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmisdefault(_itemId))
        {
            itemId = _itemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the member variables based on the caller.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer from the caller.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The caller record is not known.
    /// </exception>
    public void setCaller(Common _buffer)
    {
        InventTable     inventTable;
        ProdBOM         prodBOM;
        ReqPO           reqPO;
        BOM             bom;
        BOMVersion      bomVersion;
        PmfFormulaCoBy  pmfFormulaCoByProduct;

        calledFromFormula = false;

        switch (_buffer.TableId)
        {
            case tablenum(InventTable):
                inventTable = _buffer;
                calledFromFormula = inventTable.isFormulaAllowed()
                    || (#PmfEnabled
                        && (inventTable.PmfProductType
                                == PmfProductType::Co_Product
                            || inventTable.PmfProductType
                                == PmfProductType::By_Product));

                break;
            case tablenum(ProdBOM):
                prodBOM = _buffer;
                calledFromFormula =
                    prodBOM.prodTable().ProdType == ProdType::Process;
                break;
            case tablenum(ReqPO):
                reqPO = _buffer;
                calledFromFormula = InventTable::find(reqPO.ItemId).isFormulaAllowed();
                break;
            case tablenum(BOM):
                bom = _buffer;
                calledFromFormula =
                    bom.bomTable().PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            case tablenum(BOMVersion):
                bomVersion = _buffer;
                calledFromFormula =
                    bomVersion.bomTable().PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            case tablenum(PmfFormulaCoBy) :
                pmfFormulaCoByProduct = _buffer;
                inventTable = pmfFormulaCoByProduct.inventTable();
                itemId = inventTable.ItemId;
                calledFromFormula = inventTable.isFormulaAllowed();
                break;
            default:
                throw error(strfmt("@PRO2159",
                        formRun.name(),
                        tablepname(InventTable),
                        tablepname(BOM),
                        tablepname(BOMVersion),
                        tablepname(ProdBOM),
                        tablepname(PmfFormulaCoBy)));
        }

        calledFromFormula = calledFromFormula
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaPartOf)
            || (this.caller()
                && this.caller().name() == formstr(BOMConsistOf)
                && this.caller().pmfIsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMPartOf construct()
    {
        return new PmfFormCtrl_BOMPartOf();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element.
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for.
    /// </param>
    /// <returns>
    /// The created form control handler.
    /// </returns>
    public static PmfFormCtrl_BOMPartOf newFromForm(FormRun _fr)
    {
        PmfFormCtrl_BOMPartOf frmCtrl;

        frmCtrl = PmfFormCtrl_BOMPartOf::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>