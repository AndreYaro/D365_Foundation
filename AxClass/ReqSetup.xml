<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqSetup
{
    InventTable                  inventTable;
    ReqPoType                    inventItemSetupSupplyTypeDefault;
    ItemGroupId                  itemGroupId;
    ReqSetupVendTableCacheObject vendTable;

    UnitOfMeasureSymbol          cacheInventUnitId;
    UnitOfMeasureSymbol          cachePurchUnitId;

    RouteId                      cacheRouteId;
    TransDate                    cacheRouteDate;
    FromQty                      cacheRouteQty;
    InventDimId                  cacheRouteInventDimId;

    BOMId                        cacheBOMId;
    TransDate                    cacheBOMDate;
    FromQty                      cacheBOMQty;
    InventDimId                  cacheBOMInventDimId;

    BOMSortedList                cacheBOMlist;

    InventItemType               inventItemType;

    ItemId                       itemId;

    fieldId                      linkFieldId;

    boolean                      disableDbCache;

    InventDimParm                inventDimParmActive;
    InventDimParm                inventDimParmCov;

    InventDimGroupSetup          inventDimGroupSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimGroupSetup</c> record related to the <c>ReqSetup</c> item.
    /// </summary>
    /// <returns>
    /// The <c>InventDimGroupSetup</c> record related to the <c>ReqSetup</c> item.
    /// </returns>
    [Hookable(false)]
    public InventDimGroupSetup inventDimGroupSetup()
    {
        if (!inventDimGroupSetup)
        {
            inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        }
        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBomDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date used when searching for BOM version.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order record for which to find the BOM version.
    /// </param>
    /// <returns>
    ///    The date used to find BOM.
    /// </returns>
    /// <remarks>Return value of field used by bomId method when searching BOM version.</remarks>
    internal static TransDate getBomDate(ReqPO _reqPO)
    {
        return _reqPO.ReqDateDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the BOM to use for the planned order.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order record for which to find the BOM.
    /// </param>
    /// <returns>
    ///    The ID of the found BOM.
    /// </returns>
    public BOMId bomId(ReqPO _reqPO)
    {
        if (_reqPO.ItemBomId)
        {
            return _reqPO.ItemBomId;
        }

        if (! cacheBOMId || cacheBOMDate != _reqPO.ReqDateDlv ||
              cacheBOMQty != _reqPO.Qty || cacheBOMInventDimId != _reqPO.CovInventDimId)
        {
            cacheBOMDate        = _reqPO.ReqDateDlv;
            cacheBOMQty         = _reqPO.Qty;
            cacheBOMInventDimId = _reqPO.CovInventDimId;

            cacheBOMId      = inventTable.bomId(cacheBOMDate,cacheBOMQty,_reqPO.inventDim());
            cacheBOMlist    = null;
        }

        return cacheBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomSortedList</Name>
				<Source><![CDATA[
    public BOMSortedList bomSortedList(BOMId _bomId)
    {
        if (_bomId == cacheBOMId && !this.covPerConfig())
        {
            return cacheBOMlist;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the item group.
    /// </summary>
    /// <param name="_throwIfError">
    ///    A Boolean value that indicates if an error must be thrown on failure.
    /// </param>
    /// <returns>
    ///    true if the item group is specified; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The item has no item group specified.
    /// </exception>
    public boolean checkItemGroupId(boolean _throwIfError = true)
    {
        boolean result = itemGroupId != '';

        if (   !result
            && _throwIfError)
        {
            throw error(strFmt("@SYS313291", fieldPName(InventItemGroupItem,ItemGroupId)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covPerConfig</Name>
				<Source><![CDATA[
    public boolean covPerConfig()
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup = EcoResProductDimGroupSetup::newInventTable(this.inventTable()).getFieldSetup(fieldNum(InventDim,ConfigId));

        if (inventDimGroupFieldSetup.isActive() && inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPlannedOrderReqRefType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the type of the default planned order for the item.
    /// </summary>
    /// <returns>
    ///    A <c>ReqRefType</c> enumeration value that represents the type of the default planned type for the
    ///    item.
    /// </returns>
    public ReqRefType defaultPlannedOrderReqRefType()
    {
        return ReqPO::reqPoType2ReqRefType(inventItemSetupSupplyTypeDefault
                                           , this.isFormulaOrCoProduct()
                                           );
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected boolean init(InventTable _inventTable = null)
    {
        InventItemGroupItem inventItemGroupItem;

        if (_inventTable)
        {
            inventTable                      = _inventTable.data();
            inventItemSetupSupplyTypeDefault = InventItemSetupSupplyType::find(inventTable.ItemId,inventTable.DataAreaId).DefaultOrderType;
        }
        else
        {
            InventItemSetupSupplyType inventItemSetupSupplyType;
            inventTable.disableCache(disableDbCache);
            inventItemSetupSupplyType.disableCache(disableDbCache);

            select firstonly
                RecId,
                ItemId,
                Product,
                Height,
                Width,
                Depth,
                Density,
                ItemType,
                PrimaryVendorId,
                ReqGroupId,
                AutoReportFinished,
                bomLevel,
                ItemBuyerGroupId,
                ItemDimCostPrice
                , PmfProductType
                from inventTable
                    where inventTable.ItemId == itemId
                        join DefaultOrderType from inventItemSetupSupplyType
                            where inventItemSetupSupplyType.ItemDataAreaId == inventTable.DataAreaId
                               && inventItemSetupSupplyType.ItemId         == inventTable.ItemId;

            inventItemSetupSupplyTypeDefault = inventItemSetupSupplyType.DefaultOrderType;
        }

        inventItemGroupItem = InventItemGroupItem::findByItemIdLegalEntity(inventTable.ItemId,inventTable.DataAreaId);
        itemGroupId = inventItemGroupItem.ItemGroupId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>inventDimParmCov</c> enumerated value and the <c>inventDimParmActive</c>
    ///    enumerated value.
    /// </summary>
    protected void initInventDimParms()
    {
        InventDimGroupSetup inventDimGroupSetupLocal = this.inventDimGroupSetup();

        inventDimParmCov.initCovPrDimension(inventDimGroupSetupLocal);
        inventDimGroupSetupLocal.inventDimParmActive(inventDimParmActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDecimals</Name>
				<Source><![CDATA[
    public Integer inventDecimals()
    {
        return UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(this.inventUnitId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimParm</c> record that is initialized to represent the active inventory
    ///    dimensions.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> record that represents the active inventory dimensions.
    /// </returns>
    public InventDimParm inventDimParmActive()
    {
        if (! inventDimParmActive.InventSiteIdFlag)
        {
            this.initInventDimParms();
        }

        return inventDimParmActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmCov</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimParm</c> record that is initialized to represent the coverage inventory
    ///    dimensions.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> record that represents the coverage inventory dimensions.
    /// </returns>
    public InventDimParm inventDimParmCov()
    {
        if (! inventDimParmCov.InventSiteIdFlag)
        {
            this.initInventDimParms();
        }

        return inventDimParmCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemType</Name>
				<Source><![CDATA[
    public InventItemType inventItemType()
    {
        if (!inventItemType)
            inventItemType = inventTable.inventItemType();

        return inventItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable()
    {
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol inventUnitId()
    {
        InventTableModule   inventTableInvent;

        if (! cacheInventUnitId)
        {
            if (disableDbCache)
            {
                inventTableInvent.disableCache(true);
            }

            select firstonly
                UnitId
                from inventTableInvent
                index hint ItemModuleIdx
                where inventTableInvent.ItemId      == itemId      &&
                      inventTableInvent.ModuleType  == ModuleInventPurchSales::Invent;

            cacheInventUnitId = inventTableInvent.UnitId;
        }

        return cacheInventUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaOrCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is a formula or co-product.
    /// </summary>
    /// <returns>true if the item is a formula or co-product; otherwise, false.</returns>
    public boolean isFormulaOrCoProduct()
    {
        InventTable localInventTable = this.inventTable();

        switch (localInventTable.PmfProductType)
        {
            case PmfProductType::MainItem:
            case PmfProductType::Formula:
                return inventTable.inventItemType().canHaveBOM();
            case PmfProductType::Co_Product:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventLocationNotCovPlanned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the warehouse is an active planned dimension and not a coverage planned dimension.
    /// </summary>
    /// <returns>
    ///    true if the warehouse is active planned dimension and not a coverage planned dimension; otherwise,
    ///    false.
    /// </returns>
    public boolean isInventLocationNotCovPlanned()
    {
        if (     this.inventDimParmActive().InventLocationIdFlag
            && ! this.inventDimParmCov().InventLocationIdFlag)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBuyerGroupId</Name>
				<Source><![CDATA[
    public ItemBuyerGroupId itemBuyerGroupId(ItemPrimaryVendId _vendId)
    {
        ItemBuyerGroupId itemBuyerGroupId = this.vendTableCache(_vendId).ItemBuyerGroupId;

        return itemBuyerGroupId ? itemBuyerGroupId : inventTable.ItemBuyerGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupId</Name>
				<Source><![CDATA[
    public ItemGroupId  itemGroupId()
    {
        return itemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDerivedDirectly</Name>
				<Source><![CDATA[
    public boolean mustBeDerivedDirectly(BOMType _bomType)
    {
        switch (_bomType)
        {
            case BOMType::Phantom       :
            case BOMType::PeggedSupply  :
            case BOMType::Vendor        :
                return true;
        }

        if (inventTable.AutoReportFinished)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustItemBeCovPlanned</Name>
				<Source><![CDATA[
    public boolean mustItemBeCovPlanned()
    {
        if (this.inventTable().AutoReportFinished)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustItemOnlyBeDirectlyCov</Name>
				<Source><![CDATA[
    public boolean mustItemOnlyBeDirectlyCov()
    {
        return this.inventItemType().isServiceItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustItemReqBeCreated</Name>
				<Source><![CDATA[
    public boolean  mustItemReqBeCreated()
    {
        if (#PmfEnabled
            && this.inventTable().PmfProductType == PmfProductType::By_Product)
        {
            return true;
        }

        if (!EcoResProductLifecycleState::isStateActiveForPlanning(inventTable.ProductLifecycleStateId)
            && inventTable.Product().isDistinctProduct())
        {
            return false;
        }

        if (! this.inventItemType().mustBeReqCreated())
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisableDbCache</Name>
				<Source><![CDATA[
    public boolean parmDisableDbCache(boolean _disableDbCache = disableDbCache)
    {
        disableDbCache = _disableDbCache;
        return disableDbCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryVendId</Name>
				<Source><![CDATA[
    public VendAccount primaryVendId()
    {
        return inventTable.PrimaryVendorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol purchUnitId()
    {
        InventTableModule   inventTablePurch;

        if (! cachePurchUnitId)
        {
            if (disableDbCache)
            {
                inventTablePurch.disableCache(true);
            }

            select firstonly
                UnitId
                from inventTablePurch
                index hint ItemModuleIdx
                where inventTablePurch.ItemId      == itemId      &&
                      inventTablePurch.ModuleType  == ModuleInventPurchSales::Purch;

            cachePurchUnitId = inventTablePurch.UnitId;
        }

        return cachePurchUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the route to use for the planned order.
    /// </summary>
    /// <param name="_reqPO">
    ///    The planned order record for which to find the route.
    /// </param>
    /// <returns>
    ///    The ID of the found route.
    /// </returns>
    public RouteId routeId(ReqPO _reqPO)
    {
        if (_reqPO.ItemRouteId)
        {
            return _reqPO.ItemRouteId;
        }

        if (! cacheRouteId || cacheRouteDate != _reqPO.ReqDateDlv ||
              cacheRouteQty != _reqPO.Qty || cacheRouteInventDimId != _reqPO.CovInventDimId)
        {
            cacheRouteDate          = _reqPO.ReqDateDlv;
            cacheRouteQty           = _reqPO.Qty;
            cacheRouteInventDimId   = _reqPO.CovInventDimId;

            cacheRouteId    = inventTable.routeId(cacheRouteDate, cacheRouteQty, _reqPO.inventDim());
        }

        return cacheRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortedBOMList</Name>
				<Source><![CDATA[
    public void setSortedBOMList(BOMSortedList _bomList,BOMId _bomId)
    {
        if (_bomId == cacheBOMId)
        {
            cacheBOMlist = _bomList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current setup.
    /// </summary>
    /// <param name="_throwIfError">
    ///    A Boolean value that indicates if an error must be thrown on failure.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(boolean _throwIfError = true)
    {
        boolean result;

        result = this.checkItemGroupId(_throwIfError);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendGroupId</Name>
				<Source><![CDATA[
    public VendGroupId vendGroupId(ItemPrimaryVendId _vendId)
    {
        return this.vendTableCache(_vendId).VendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTableCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>ReqSetupVendTableCacheObject</c> based on the given <c>VendAccount</c>.
    /// </summary>
    /// <param name = "_vendId">The <c>VendAccount</c> to get a cache object based on.</param>
    /// <returns>A <c>ReqSetupVendTableCacheObject</c>.</returns>
    public ReqSetupVendTableCacheObject vendTableCache(VendAccount _vendId)
    {
        if (!vendTable || vendTable.AccountNum != _vendId)
        {
            if (disableDbCache)
            {
                if (_vendId)
                {
                    VendTable vendTableRecord;
                    vendTableRecord.disableCache(true);

                    select firstonly AccountNum,VendGroup,ItemBuyerGroupId,PurchCalendarId,PurchaseShipCalendarId,DlvMode from vendTableRecord
                        index hint AccountIdx
                        where vendTableRecord.AccountNum == _vendId;

                    vendTableRecord.disableCache(false);
                    vendTable = ReqSetupVendTableCacheObject::fromRecord(vendTableRecord);
                }
                else
                {
                    VendTable empty;
                    return ReqSetupVendTableCacheObject::fromRecord(empty);
                }
            }
            else
            {
                vendTable = ReqSetupVendTableCacheObject::fromRecord(VendTable::find(_vendId));
            }
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    public static ReqSetup   newItemId(
        ItemId        _itemId,
        InventTable   _inventTable      = null,
        boolean       _disableDbCache   = false
        )
    {
        ReqSetup reqSetup = new ReqSetup();
        reqSetup.itemId(_itemId);
        reqSetup.parmDisableDbCache(_disableDbCache);

        reqSetup.init(_inventTable);

        return reqSetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>