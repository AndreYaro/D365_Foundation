<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlTrackingUpdateRelieving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlTrackingUpdateRelieving</c> class is a sub-class of the
/// <c>BudgetControlTrackingUpdate</c> class and is specialized in order to manage the budget tracking
/// information in addition to relieving the information.
/// </summary>
public final class BudgetControlTrackingUpdateRelieving extends BudgetControlTrackingUpdate
{
    Map carryforwardSourceLedgerDimensionDetails;
    Map nonCarryforwardSourceLedgerDimensionDetails;

    // Used to cache BudgetSourceTrackingRelievingDetail table buffers.
    // Key: String (Relieving source legal entity, Relieving source ledger dimension, relieving control ledger dimension, is carryforward amounts)
    // Value: BudgetSourceTrackingRelievingDetail table buffer.
    Map relievingDetails;

    // Used to cache the carryforward amounts that have been relieved.
    // Key: String (Relieved source legal entity, relieved source ledger dimension)
    // Value: AmountMST
    Map relievedCarryforwardAmounts;

    // Used to cache the non-carryforward amounts that have been relieved.
    // Key: String (Relieved source legal entity, relieved source ledger dimension))
    // Value: AmountMST
    Map relievedNonCarryforwardAmounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches the relieved amount by using the specified criteria.
    /// </summary>
    /// <param name="_primaryLedgerToRelieveId">
    /// The primary ledger ID for the relieved amount to cache.
    /// </param>
    /// <param name="_budgetSourceToRelieveId">
    /// The budget source ID for the relieved amount to cache.
    /// </param>
    /// <param name="_sourceLedgerDimensionToRelieve">
    /// The source ledger dimension for the relieved amount to cache.
    /// </param>
    /// <param name="_isSimulation">
    /// A Boolean value that indicates whether to cache the relieved amount as a simulation.
    /// </param>
    /// <param name="_relievedAccountingCurrencyAmount">
    /// The relieved amount to cache.
    /// </param>
    /// <param name="_isCarryforward">
    /// A Boolean value that indicates whether the relieved amount to cache is a carryforward amount.
    /// </param>
    protected void cacheRelievedAmount(
        LedgerRecId _primaryLedgerToRelieveId,
        BudgetSourceRecId _budgetSourceToRelieveId,
        LedgerDimensionBase _sourceLedgerDimensionToRelieve,
        boolean _isSimulation,
        AmountMST _relievedAccountingCurrencyAmount,
        boolean _isCarryforward)
    {
        AmountMST relievedAmount = _relievedAccountingCurrencyAmount;

        str cacheKey = strfmt(
            '%1,%2,%3,%4',
            _primaryLedgerToRelieveId,
            _budgetSourceToRelieveId,
            _sourceLedgerDimensionToRelieve,
            _isSimulation);

        if (_isCarryforward)
        {
            if (relievedCarryforwardAmounts.exists(cacheKey))
            {
                relievedAmount += relievedCarryforwardAmounts.lookup(cacheKey);
            }

            relievedCarryforwardAmounts.insert(cacheKey, relievedAmount);
        }
        else
        {
            if (relievedNonCarryforwardAmounts.exists(cacheKey))
            {
                relievedAmount += relievedNonCarryforwardAmounts.lookup(cacheKey);
            }

            relievedNonCarryforwardAmounts.insert(cacheKey, relievedAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheRelievingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches the relieving detail by using the specified criteria.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity ID for the relieving detail to cache.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The source ledger dimension for the relieving detail to cache.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The control ledger dimension for the relieving detail to cache.
    /// </param>
    /// <param name="_isCarryforward">
    /// A Boolean value that indicates whether the relieving detail to cache is a carryforward amount.
    /// </param>
    /// <param name="_relievingDetail">
    /// The relieving detail to cache.
    /// </param>
    protected void cacheRelievingDetail(
        recId _legalEntityId,
        LedgerDimensionBase _sourceLedgerDimension,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        boolean _isCarryforward,
        BudgetSourceTrackingRelievingDetail _relievingDetail)
    {
        relievingDetails.insert(
            strfmt('%1,%2,%3,%4',
                _legalEntityId,
                _sourceLedgerDimension,
                _controlLedgerDimension,
                _isCarryforward),
            _relievingDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheTrackingAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Caches the tracking amounts.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    The ID for the legal entity record for which the source ledger dimension detail is tracked.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///    The budget control ledger dimension to track budget funds.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    ///    The ledger dimension from the budget control integration source.
    /// </param>
    /// <param name="_carryforwardAmount">
    ///    The carryforward amount to cache.
    /// </param>
    /// <param name="_nonCarryforwardAmount">
    ///    The non-carryforward amount to cache.
    /// </param>
    protected void cacheTrackingAmounts(
        recId _legalEntityId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        LedgerDimensionBase _sourceLedgerDimension,
        AmountMST _carryforwardAmount,
        AmountMST _nonCarryforwardAmount)
    {
        AmountMST carryforwardAmount = _carryforwardAmount;
        AmountMST nonCarryforwardAmount = _nonCarryforwardAmount;
        // Key: Control ledger dimension
        // Value: Map
        //      Key: Source ledger dimension
        //      Value: AmountMST
        Map legalEntityControlLedgerDimensionDetails;
        // Key: Source ledger dimension
        // Value: AmountMST
        Map sourceLedgerDimensionDetails;

        // Cache carryforward tracking amounts.
        if (carryforwardAmount != 0)
        {
            if (carryforwardSourceLedgerDimensionDetails.exists(_legalEntityId))
            {
                legalEntityControlLedgerDimensionDetails = carryforwardSourceLedgerDimensionDetails.lookup(_legalEntityId);

                if (legalEntityControlLedgerDimensionDetails.exists(_controlLedgerDimension))
                {
                    sourceLedgerDimensionDetails = legalEntityControlLedgerDimensionDetails.lookup(_controlLedgerDimension);

                    if (sourceLedgerDimensionDetails.exists(_sourceLedgerDimension))
                    {
                        carryforwardAmount += sourceLedgerDimensionDetails.lookup(
                            _sourceLedgerDimension);
                    }
                }
                else
                {
                    sourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBase)), typeName2Type(extendedtypestr(AmountMST)));
                }
            }
            else
            {
                sourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBase)), typeName2Type(extendedtypestr(AmountMST)));
                legalEntityControlLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBudgetControl)), Types::Class);
            }

            sourceLedgerDimensionDetails.insert(_sourceLedgerDimension, carryforwardAmount);
            legalEntityControlLedgerDimensionDetails.insert(_controlLedgerDimension, sourceLedgerDimensionDetails);
            carryforwardSourceLedgerDimensionDetails.insert(_legalEntityId, legalEntityControlLedgerDimensionDetails);
        }

        // Cache non-carryforward tracking amounts.
        if (nonCarryforwardAmount != 0)
        {
            if (nonCarryforwardSourceLedgerDimensionDetails.exists(_legalEntityId))
            {
                legalEntityControlLedgerDimensionDetails = nonCarryforwardSourceLedgerDimensionDetails.lookup(_legalEntityId);

                if (legalEntityControlLedgerDimensionDetails.exists(_controlLedgerDimension))
                {
                    sourceLedgerDimensionDetails = legalEntityControlLedgerDimensionDetails.lookup(_controlLedgerDimension);

                    if (sourceLedgerDimensionDetails.exists(_sourceLedgerDimension))
                    {
                        nonCarryforwardAmount += sourceLedgerDimensionDetails.lookup(
                            _sourceLedgerDimension);
                    }
                }
                else
                {
                    sourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBase)), typeName2Type(extendedtypestr(AmountMST)));
                }
            }
            else
            {
                sourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBase)), typeName2Type(extendedtypestr(AmountMST)));
                legalEntityControlLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBudgetControl)), Types::Class);
            }

            sourceLedgerDimensionDetails.insert(_sourceLedgerDimension, nonCarryforwardAmount);
            legalEntityControlLedgerDimensionDetails.insert(_controlLedgerDimension, sourceLedgerDimensionDetails);
            nonCarryforwardSourceLedgerDimensionDetails.insert(_legalEntityId, legalEntityControlLedgerDimensionDetails);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelievingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>BudgetSourceTrackingRelievingDetail</c> record with the specified details.
    /// </summary>
    /// <param name="_relievingBudgetSourceTrackingId">
    /// The relieving budget source tracking ID for the record.
    /// </param>
    /// <param name="_relievingSourceLedgerDimension">
    /// The relieving source ledger dimension for the record.
    /// </param>
    /// <param name="_relievedBudgetSourceTrackingDetailId">
    /// The relieved budget source tracking detail ID for the record.
    /// </param>
    /// <param name="_accountingCurrencyAmount">
    /// The amount for the record.
    /// </param>
    /// <param name="_isReturnOfBudgetFunds">
    /// A Boolean value indicating whether the record represents a return of funds.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceTrackingRelievingDetail</c> record that is inserted.
    /// </returns>
    protected BudgetSourceTrackingRelievingDetail createRelievingDetail(
        recId _relievingBudgetSourceTrackingId,
        LedgerDimensionBase _relievingSourceLedgerDimension,
        recId _relievedBudgetSourceTrackingDetailId,
        AmountMST _accountingCurrencyAmount,
        boolean _isReturnOfBudgetFunds)
    {
        BudgetSourceTrackingRelievingDetail relievingDetail;

        relievingDetail.RelievingBudgetSourceTracking = _relievingBudgetSourceTrackingId;
        relievingDetail.RelievingBudgetSourceLedgerDimension = _relievingSourceLedgerDimension;
        relievingDetail.RelievedBudgetSourceTrackingDetail = _relievedBudgetSourceTrackingDetailId;
        relievingDetail.AccountingCurrencyAmount = _accountingCurrencyAmount;
        relievingDetail.IsReturnOfBudgetFunds = _isReturnOfBudgetFunds;
        relievingDetail.IsDeletePending = NoYes::No;
        relievingDetail.IsSummarized = NoYes::No;

        relievingDetail.insert();

        return relievingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnDetailsForSimulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates return tracking details for simulation.
    /// </summary>
    protected void createReturnDetailsForSimulation()
    {
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        AmountMST relievedAmount;
        AmountMST amountToReturn;

        if (budgetSourceTrackingToSimulate)
        {
            if (BudgetSourceTrackingRelievingDetail::existRelievedBudgetSource(budgetSourceTrackingToSimulate.BudgetSource))
            {
                // The last budget source tracking for the budget source id has been relieved.
                // Return the last remaining amounts.
                while select * from budgetSourceTrackingDetail
                    where budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTrackingToSimulate.RecId
                {
                    relievedAmount = BudgetControlTrackingUpdateRelieving::getRelievedAmount(
                        budgetSourceTrackingDetail.RecId,
                        isSimulation);

                    amountToReturn = (budgetSourceTrackingDetail.AccountingCurrencyAmount + relievedAmount) * #InverseSign;

                    if (amountToReturn != 0)
                    {
                        this.createTrackingDetail(currentBudgetSourceTracking.RecId,
                            budgetSourceTrackingDetail.PrimaryLedger,
                            budgetSourceTrackingDetail.BudgetSourceLedgerDimension,
                            budgetSourceTrackingDetail.BudgetControlRule,
                            budgetSourceTrackingDetail.BudgetGroupMember,
                            budgetSourceTrackingDetail.BudgetControlLedgerDimension,
                            amountToReturn,
                            budgetSourceTrackingDetail.IsCarryForward,
                            NoYes::Yes);
                    }
                }
            }
            else if (BudgetSourceTrackingRelievingDetail::existRelievingBudgetSource(budgetSourceTrackingToSimulate.BudgetSource))
            {
                super();

                while select AccountingCurrencyAmount, RelievingBudgetSourceLedgerDimension, RelievedBudgetSourceTrackingDetail
                    from budgetSourceTrackingRelievingDetail
                        where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTrackingToSimulate.RecId
                {
                    amountToReturn = budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount * #InverseSign;

                    // Use current budget source to return relieving budget funds.
                    this.createRelievingDetail(
                        currentBudgetSourceTracking.RecId,
                        budgetSourceTrackingRelievingDetail.RelievingBudgetSourceLedgerDimension,
                        budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail,
                        amountToReturn,
                        NoYes::Yes);
                }
            }
            else
            {
                // The simulated budget source has not been relieved by downstream document or relieved any upstream document.
                // Simply return the simulated amounts.
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnRemainingDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates budget source tracking return details for all remaining confirmed funds for the budget source.
    /// </summary>
    protected void createReturnRemainingDetails()
    {
        BudgetSourceTrackingDetail          budgetSourceTrackingDetail;
        BudgetSourceTracking                budgetSourceTracking;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        AmountMST                       amountToReturn;
        LedgerRecId                     primaryLedgerToReturn;
        LedgerDimensionBase             sourceLedgerDimensionToReturn;
        LedgerDimensionBudgetControl    budgetControlLedgerDimensionToReturn;
        NoYes                           isCarryForwardToReturn;

        // If the last budget source tracking for the budget source id has relieved an upstream budget source and
        // also has been relieved by a downstream budget source, only return budget funds for the amounts
        // that has NOT been relieved by the downstream budget source, do not return any budget funds that it
        // has relieved from the upstream budget source to the upstream budget source.

        while select AccountingCurrencyAmount, BudgetSourceLedgerDimension, BudgetControlLedgerDimension, PrimaryLedger, isCarryforward, RecId
            from budgetSourceTrackingDetail
            order by BudgetSourceLedgerDimension, PrimaryLedger, IsCarryForward
                where budgetSourceTrackingDetail.IsDeletePending == NoYes::No &&
                    budgetSourceTrackingDetail.IsSummarized == NoYes::Yes
            exists join RecId from budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                    budgetSourceTracking.BudgetSource == budgetSourceRecId &&
                    budgetSourceTracking.IsDeletePending == NoYes::No
        {
            if (amountToReturn
                && (primaryLedgerToReturn           != budgetSourceTrackingDetail.PrimaryLedger
                || sourceLedgerDimensionToReturn    != budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                || isCarryForwardToReturn           != budgetSourceTrackingDetail.IsCarryForward))
            {
                // The source ledger dimension tracking detail to return has changed and the prior total amount to return needs to be tracked.
                this.trackBudgetSourceForReturnRemaining();

                this.createTrackingDetail(
                    currentBudgetSourceTracking.RecId,
                    primaryLedgerToReturn,
                    sourceLedgerDimensionToReturn,
                    0,
                    0,
                    budgetControlLedgerDimensionToReturn,
                    amountToReturn,
                    isCarryForwardToReturn,
                    NoYes::Yes);

                // Reset the amount to return for the current source ledger dimension tracking detail.
                amountToReturn = 0;
            }

            // IsSummarized flag is not considered when determining relieved amounts as other budget sources
            // in the same budget check group could include relieving details that would affect the amount
            // relieved from this budget source
            select sum(AccountingCurrencyAmount)
                from budgetSourceTrackingRelievingDetail
                    where budgetSourceTrackingRelievingDetail.IsDeletePending == NoYes::No &&
                        budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId;

            // Add the detail amount and relieving amount to the total source ledger dimension tracking detail amount to return.
            amountToReturn += (budgetSourceTrackingDetail.AccountingCurrencyAmount + budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount) * #InverseSign;

            // Set the source ledger dimension tracking detail to return the amount for.
            primaryLedgerToReturn                   = budgetSourceTrackingDetail.PrimaryLedger;
            sourceLedgerDimensionToReturn           = budgetSourceTrackingDetail.BudgetSourceLedgerDimension;
            budgetControlLedgerDimensionToReturn    = budgetSourceTrackingDetail.BudgetControlLedgerDimension;
            isCarryForwardToReturn                  = budgetSourceTrackingDetail.IsCarryForward;
        }

        if (amountToReturn)
        {
            // Track the last source ledger dimension tracking detail amount to return.
            this.trackBudgetSourceForReturnRemaining();

            this.createTrackingDetail(
                currentBudgetSourceTracking.RecId,
                primaryLedgerToReturn,
                sourceLedgerDimensionToReturn,
                0,
                0,
                budgetControlLedgerDimensionToReturn,
                amountToReturn,
                isCarryForwardToReturn,
                NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCachedRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a relieved amount with the specified details exists.
    /// </summary>
    /// <param name="_primaryLedgerToRelieveId">
    /// The primary ledger ID for the relieved amount to check for in cache.
    /// </param>
    /// <param name="_budgetSourceToRelieveId">
    /// The budget source ID for the relieved amount to check for in cache.
    /// </param>
    /// <param name="_sourceLedgerDimensionToRelieve">
    /// The source ledger dimension for the relieved amount to check for in cache.
    /// </param>
    /// <param name="_isSimulation">
    /// The simulation setting for the relieved amount to check for in cache.
    /// </param>
    /// <returns>
    /// true if the amount exists in cache; otherwise, false.
    /// </returns>
    protected boolean existsCachedRelievedAmount(
        recId _primaryLedgerToRelieveId,
        recId _budgetSourceToRelieveId,
        LedgerDimensionBase _sourceLedgerDimensionToRelieve,
        boolean _isSimulation)
    {
        boolean existsCachedRelievedAmount;

        str cacheKey = strfmt(
            '%1,%2,%3,%4',
            _primaryLedgerToRelieveId,
            _budgetSourceToRelieveId,
            _sourceLedgerDimensionToRelieve,
            _isSimulation);

        if (relievedCarryforwardAmounts.exists(cacheKey))
        {
            existsCachedRelievedAmount = true;
        }
        else if (relievedNonCarryforwardAmounts.exists(cacheKey))
        {
            existsCachedRelievedAmount = true;
        }

        return existsCachedRelievedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the relieved amount with the specified details from cache.
    /// </summary>
    /// <param name="_primaryLedgerToRelieveId">
    /// The primary ledger ID for the relieved amount to obtain from cache.
    /// </param>
    /// <param name="_budgetSourceToRelieveId">
    /// The budget source ID for the relieved amount to obtain from cache.
    /// </param>
    /// <param name="_sourceLedgerDimensionToRelieve">
    /// The source ledger dimension for the relieved amount to obtain from cache.
    /// </param>
    /// <param name="_isSimulation">
    /// The simulation setting for the relieved amount to obtain from cache.
    /// </param>
    /// <returns>
    /// A container with the relieved amount flagged as carryforward and the relieved amount not marked as
    /// carryforward
    /// </returns>
    protected container getCachedRelievedAmount(
        recId _primaryLedgerToRelieveId,
        recId _budgetSourceToRelieveId,
        LedgerDimensionBase _sourceLedgerDimensionToRelieve,
        boolean _isSimulation)
    {
        AmountMST relievedCarryforwardAmount;
        AmountMST relievedNonCarryforwardAmount;
        str cacheKey = strfmt(
            '%1,%2,%3,%4',
            _primaryLedgerToRelieveId,
            _budgetSourceToRelieveId,
            _sourceLedgerDimensionToRelieve,
            _isSimulation);

        if (relievedCarryforwardAmounts.exists(cacheKey))
        {
            relievedCarryforwardAmount = relievedCarryforwardAmounts.lookup(cacheKey);
        }

        if (relievedNonCarryforwardAmounts.exists(cacheKey))
        {
            relievedNonCarryforwardAmount = relievedNonCarryforwardAmounts.lookup(cacheKey);
        }

        return [relievedCarryforwardAmount, relievedNonCarryforwardAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelievedAmountAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the relieved carryforward and non-carryforward amounts for the budget source whose ledger
    /// dimension budget funds are to be relieved.
    /// </summary>
    /// <param name="_primaryLedgerIdToRelieve">
    /// The ID for the primary <c>Ledger</c> record to relieve budget funds.
    /// </param>
    /// <param name="_budgetSourceIdToRelieve">
    /// The ID for the <c>BudgetSource</c> record to relieve budget funds.
    /// </param>
    /// <param name="_sourceLedgerDimensionToRelieve">
    /// The ledger dimension to relieve budget funds.
    /// </param>
    /// <param name="_includeSimulations">
    /// A Boolean value that indicates whether simulation relieved amounts should be included; optional.
    /// </param>
    /// <returns>
    /// The relieved carryforward and non-carryforward amounts.
    /// </returns>
    protected container getRelievedAmountAll(
        recId _primaryLedgerIdToRelieve,
        recId _budgetSourceIdToRelieve,
        LedgerDimensionBase _sourceLedgerDimensionToRelieve,
        boolean _includeSimulations = false)
    {
        BudgetSourceTrackingRelievingDetail relievingDetail;
        BudgetSourceTrackingDetail relievedSourceTrackingDetail;
        BudgetSourceTracking relievedSourceTracking;
        BudgetSourceTracking relievingSourceTracking;
        AmountMST carryforwardTotalRelievedAmount;
        AmountMST nonCarryforwardTotalRelievedAmount;
        container relievedAmounts;

        if (this.existsCachedRelievedAmount(
                _primaryLedgerIdToRelieve,
                _budgetSourceIdToRelieve,
                _sourceLedgerDimensionToRelieve,
                _includeSimulations))
        {
            relievedAmounts = this.getCachedRelievedAmount(
                _primaryLedgerIdToRelieve,
                _budgetSourceIdToRelieve,
                _sourceLedgerDimensionToRelieve,
                _includeSimulations);
        }
        else
        {
            if (_includeSimulations)
            {
                while select AccountingCurrencyAmount
                    from relievingDetail
                        where relievingDetail.IsDeletePending == NoYes::No
                    join IsCarryForward
                    from relievedSourceTrackingDetail
                        where relievedSourceTrackingDetail.RecId == relievingDetail.RelievedBudgetSourceTrackingDetail &&
                            relievedSourceTrackingDetail.BudgetSourceLedgerDimension == _sourceLedgerDimensionToRelieve &&
                            relievedSourceTrackingDetail.PrimaryLedger == _primaryLedgerIdToRelieve &&
                            relievedSourceTrackingDetail.IsDeletePending == NoYes::No
                    join RecId from relievedSourceTracking
                        where relievedSourceTracking.RecId == relievedSourceTrackingDetail.BudgetSourceTracking &&
                            relievedSourceTracking.BudgetSource == _budgetSourceIdToRelieve
                {
                    if (relievedSourceTrackingDetail.IsCarryForward == NoYes::Yes)
                    {
                        carryforwardTotalRelievedAmount += relievingDetail.AccountingCurrencyAmount;
                    }
                    else
                    {
                        nonCarryforwardTotalRelievedAmount += relievingDetail.AccountingCurrencyAmount;
                    }
                }
            }
            else
            {
                while select AccountingCurrencyAmount
                    from relievingDetail
                        where relievingDetail.IsDeletePending == NoYes::No
                    join IsCarryForward
                    from relievedSourceTrackingDetail
                        where relievedSourceTrackingDetail.RecId == relievingDetail.RelievedBudgetSourceTrackingDetail &&
                            relievedSourceTrackingDetail.BudgetSourceLedgerDimension == _sourceLedgerDimensionToRelieve &&
                            relievedSourceTrackingDetail.PrimaryLedger == _primaryLedgerIdToRelieve &&
                            relievedSourceTrackingDetail.IsDeletePending == NoYes::No
                    join RecId from relievedSourceTracking
                        where relievedSourceTracking.RecId == relievedSourceTrackingDetail.BudgetSourceTracking &&
                            relievedSourceTracking.BudgetSource == _budgetSourceIdToRelieve &&
                            relievedSourceTracking.IsSimulation == NoYes::No
                    join RecId from relievingSourceTracking
                        where relievingSourceTracking.RecId == relievingDetail.RelievingBudgetSourceTracking &&
                            relievingSourceTracking.IsSimulation == NoYes::No
                {
                    if (relievedSourceTrackingDetail.IsCarryForward == NoYes::Yes)
                    {
                        carryforwardTotalRelievedAmount += relievingDetail.AccountingCurrencyAmount;
                    }
                    else
                    {
                        nonCarryforwardTotalRelievedAmount += relievingDetail.AccountingCurrencyAmount;
                    }
                }
            }

            relievedAmounts = [carryforwardTotalRelievedAmount, nonCarryforwardTotalRelievedAmount];

            this.cacheRelievedAmount(
                _primaryLedgerIdToRelieve,
                _budgetSourceIdToRelieve,
                _sourceLedgerDimensionToRelieve,
                _includeSimulations,
                carryforwardTotalRelievedAmount,
                true);

            this.cacheRelievedAmount(
                _primaryLedgerIdToRelieve,
                _budgetSourceIdToRelieve,
                _sourceLedgerDimensionToRelieve,
                _includeSimulations,
                nonCarryforwardTotalRelievedAmount,
                false);
        }

        return relievedAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrackedAmountAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the carryforward and non-carryforward amounts that are tracked, the ID for the last tracking
    /// detail record that contains the carryforward amounts, and the ID for the last tracking detail
    /// record that contains the non-carryforward amounts for the budget source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerId">
    /// The ID for the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_budgetSourceId">
    /// The ID for the <c>BudgetSource</c> record.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <param name="_includeSimulations">
    /// A Boolean value that indicates whether simulation amounts should be included; optional.
    /// </param>
    /// <returns>
    /// A container that contains the carryforward and non-carryforward amounts tracked, the ID for the
    /// last tracking detail record that contains the carryforward amounts, and the ID for the last
    /// tracking detail record that contains the non-carryforward amounts for the budget source ledger
    /// dimension.
    /// </returns>
    protected container getTrackedAmountAll(
        recId _primaryLedgerId,
        recId _budgetSourceId,
        LedgerDimensionBase _sourceLedgerDimension,
        boolean _includeSimulations = false)
    {
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTracking budgetSourceTracking;
        AmountMST carryforwardTotalAmount;
        AmountMST nonCarryforwardTotalAmount;
        boolean isFirstCarryforward = true;
        boolean isFirstNonCarryforward = true;
        recId carryforwardBudgetSourceTrackingDetail;
        recId nonCarryforwardBudgetSourceTrackingDetail;

        if (_includeSimulations)
        {
            while select RecId, AccountingCurrencyAmount, IsCarryForward, IsReturnOfBudgetFunds
                from budgetSourceTrackingDetail
                    where budgetSourceTrackingDetail.BudgetSourceLedgerDimension == _sourceLedgerDimension &&
                        budgetSourceTrackingDetail.PrimaryLedger == _primaryLedgerId &&
                        BudgetSourceTrackingDetail.IsDeletePending == NoYes::No
                join SequenceNumber from budgetSourceTracking
                    order by SequenceNumber desc
                    where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                        budgetSourceTracking.BudgetSource == _budgetSourceId
            {
                if (budgetSourceTrackingDetail.IsCarryForward == NoYes::Yes)
                {
                    if (isFirstCarryforward && budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No)
                    {
                        carryforwardBudgetSourceTrackingDetail = budgetSourceTrackingDetail.RecId;
                        isFirstCarryforward = false;
                    }

                    carryforwardTotalAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                }
                else
                {
                    if (isFirstNonCarryforward && budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No)
                    {
                        nonCarryforwardBudgetSourceTrackingDetail = budgetSourceTrackingDetail.RecId;
                        isFirstNonCarryforward = false;
                    }

                    nonCarryforwardTotalAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                }
            }
        }
        else
        {
            while select RecId, AccountingCurrencyAmount, IsCarryForward, IsReturnOfBudgetFunds
                from budgetSourceTrackingDetail
                    where budgetSourceTrackingDetail.BudgetSourceLedgerDimension == _sourceLedgerDimension &&
                        budgetSourceTrackingDetail.PrimaryLedger == _primaryLedgerId &&
                        budgetSourceTrackingDetail.IsDeletePending == NoYes::No
                join SequenceNumber from budgetSourceTracking
                    order by SequenceNumber desc
                    where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking &&
                        budgetSourceTracking.BudgetSource == _budgetSourceId &&
                        budgetSourceTracking.IsSimulation == NoYes::No
            {
                if (budgetSourceTrackingDetail.IsCarryForward == NoYes::Yes)
                {
                    if (isFirstCarryforward && budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No)
                    {
                        carryforwardBudgetSourceTrackingDetail = budgetSourceTrackingDetail.RecId;
                        isFirstCarryforward = false;
                    }

                    carryforwardTotalAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                }
                else
                {
                    if (isFirstNonCarryforward && budgetSourceTrackingDetail.IsReturnOfBudgetFunds == NoYes::No)
                    {
                        nonCarryforwardBudgetSourceTrackingDetail = budgetSourceTrackingDetail.RecId;
                        isFirstNonCarryforward = false;
                    }

                    nonCarryforwardTotalAmount += budgetSourceTrackingDetail.AccountingCurrencyAmount;
                }
            }
        }

        return [carryforwardTotalAmount,
            nonCarryforwardTotalAmount,
            carryforwardBudgetSourceTrackingDetail,
            nonCarryforwardBudgetSourceTrackingDetail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetControlTrackingUpdateRelieving</c> class.
    /// </summary>
    /// <param name="_budgetSourceRecId">
    /// The record ID of the <c>BudgetSource</c> record for which to track.
    /// </param>
    /// <param name="_isDraft">
    /// A Boolean value that indicates whether the budget source tracking status is draft.
    /// </param>
    /// <param name="_budgetControlCategory">
    /// The <c>BudgetControlCategory</c> enumeration value for which to categorize the budget source
    /// tracking.
    /// </param>
    /// <param name="_trackingDate">
    /// The tracking date for the budget source tracking.
    /// </param>
    /// <param name="_trackingUserId">
    /// The tracking user ID for the budget source tracking.
    /// </param>
    /// <param name="_trackingNumber">
    /// The tracking number for the budget source tracking.
    /// </param>
    /// <param name="_requiresRelieving">
    /// A Boolean value that indicates whether the budget source tracking requires relieving; optional.
    /// </param>
    /// <param name="_budgetModel">
    /// The <c>BudgetModel</c> record for the budget source tracking; optional.
    /// </param>
    /// <param name="_isCarryforward">
    /// A Boolean value that indicates whether the budget source tracking amounts are carryfoward amounts;
    /// optional.
    /// </param>
    /// <param name="_isSimulation">
    /// A Boolean value that indicates whether the budget source tracking is a simulation; optional.
    /// </param>
    /// <param name="_simulatedBudgetSourceRecId">
    /// The record ID of the simulated <c>BudgetSource</c> record; optional.
    /// </param>
    protected void initializeForProcessing(
        BudgetSourceRecId _budgetSourceRecId,
        boolean _isDraft,
        BudgetControlCategory _budgetControlCategory,
        TransDate _trackingDate,
        userId _trackingUserId,
        Num _trackingNumber,
        boolean _requiresRelieving = false,
        BudgetModel _budgetModel = null,
        boolean _isCarryforward = false,
        boolean _isSimulation = false,
        BudgetSourceRecId _simulatedBudgetSourceRecId = 0)
    {
        BudgetSourceRecId budgetSourceId;

        super(_budgetSourceRecId, _isDraft, _budgetControlCategory, _trackingDate, _trackingUserId, _trackingNumber, _requiresRelieving, _budgetModel, _isCarryforward, _isSimulation, _simulatedBudgetSourceRecId);

        carryforwardSourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(recId)), Types::Class);
        nonCarryforwardSourceLedgerDimensionDetails = new Map(typeName2Type(extendedtypestr(recId)), Types::Class);
        relievingDetails = new Map(Types::String, Types::Record);
        relievedCarryforwardAmounts = new Map(Types::String, typeName2Type(extendedtypestr(AmountMST)));
        relievedNonCarryforwardAmounts = new Map(Types::String, typeName2Type(extendedtypestr(AmountMST)));

        if (_simulatedBudgetSourceRecId)
        {
            budgetSourceId = _simulatedBudgetSourceRecId;
        }
        else
        {
            budgetSourceId = _budgetSourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relieveSourceLedgerDimensionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Relieves the specified amount from the specified relieving ledger dimension detail.
    /// </summary>
    /// <param name="_primaryLedgerIdToRelieve">
    /// The ID of primary <c>Ledger</c> record from which to relieve budget funds.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The budget control ledger dimension that is to relieve the budget funds.
    /// </param>
    /// <param name="_relievingDetail">
    /// The <c>BudgetRelievingDetail</c> class instance that contains the ledger dimension detail for which
    /// to relieve budget funds.
    /// </param>
    public void relieveSourceLedgerDimensionAmount(
        recId _primaryLedgerIdToRelieve,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        BudgetRelievingDetail _relievingDetail)
    {
        container sourceLedgerDimensionAmountDetails;
        container sourceLedgerDimensionRelievedAmounts;
        AmountMST availableCarryforwardAmountToRelieve;
        AmountMST availableNonCarryforwardAmountToRelieve;
        recId carryforwardSourceTrackingDetailToRelieve;
        recId nonCarryforwardSourceTrackingDetailToRelieve;
        AmountMST carryforwardAmountToRelieve;
        AmountMST relievingDetailRemainingAmountToRelieve;
        AmountMST nonCarryforwardAmountToRelieve;
        AmountMST carryforwardAmount;
        AmountMST nonCarryforwardAmount;
        AmountMST reliefAdjustmentAmount;

        BudgetSourceTracking simulationBudgetSourceTracking;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetailToReturnFunds;
        BudgetSourceTrackingRelievingDetail carryforwardBudgetSourceTrackingRelievingDetail;
        BudgetSourceTrackingRelievingDetail nonCarryforwardBudgetSourceTrackingRelievingDetail;
        BudgetSourceTrackingDetail relievedDetail;
        BudgetSourceTracking relievedTracking;
        BudgetSource relievedSource;
        boolean isGeneralBudgetReservationRelieving;

        if (isSimulation)
        {
            if (!isBudgetSourceTracked)
            {
                select firstOnly recId from budgetSourceTrackingRelievingDetailToReturnFunds
                    exists join simulationBudgetSourceTracking
                        where budgetSourceTrackingRelievingDetailToReturnFunds.RelievingBudgetSourceTracking == simulationBudgetSourceTracking.RecId &&
                            simulationBudgetSourceTracking.BudgetSource == simulatedBudgetSourceRecId;

                if (budgetSourceTrackingRelievingDetailToReturnFunds)
                {
                    // Must track budget source and return budget funds relieved by the budget source to be simulated
                    // prior to calculating available budget funds to relieve for the simulating budget source.
                    this.trackBudgetSource();
                }
            }
        }

        sourceLedgerDimensionAmountDetails = this.getTrackedAmountAll(
                                                _primaryLedgerIdToRelieve,
                                                _relievingDetail.parmBudgetSourceIdToRelieve(),
                                                _relievingDetail.parmLedgerDimensionToRelieve(),
                                                isSimulation);

        sourceLedgerDimensionRelievedAmounts = this.getRelievedAmountAll(
                                                _primaryLedgerIdToRelieve,
                                                _relievingDetail.parmBudgetSourceIdToRelieve(),
                                                _relievingDetail.parmLedgerDimensionToRelieve(),
                                                isSimulation);

        availableCarryforwardAmountToRelieve = conpeek(sourceLedgerDimensionAmountDetails, 1) + conpeek(sourceLedgerDimensionRelievedAmounts, 1);
        availableNonCarryforwardAmountToRelieve = conpeek(sourceLedgerDimensionAmountDetails, 2) + conpeek(sourceLedgerDimensionRelievedAmounts, 2);

        carryforwardSourceTrackingDetailToRelieve = conpeek(sourceLedgerDimensionAmountDetails, 3);
        nonCarryforwardSourceTrackingDetailToRelieve = conpeek(sourceLedgerDimensionAmountDetails, 4);

        // Relieve carryforward amount first.
        if (abs(availableCarryforwardAmountToRelieve) > abs(_relievingDetail.parmCurrencyAmountToRelieve()))
        {
            carryforwardAmountToRelieve = _relievingDetail.parmCurrencyAmountToRelieve();
        }
        else
        {
            carryforwardAmountToRelieve = availableCarryforwardAmountToRelieve;
        }

        relievingDetailRemainingAmountToRelieve = _relievingDetail.parmCurrencyAmountToRelieve() - carryforwardAmountToRelieve;

        if (abs(availableNonCarryforwardAmountToRelieve) > abs(relievingDetailRemainingAmountToRelieve))
        {
            nonCarryforwardAmountToRelieve = relievingDetailRemainingAmountToRelieve;
        }
        else
        {
            nonCarryforwardAmountToRelieve = availableNonCarryforwardAmountToRelieve;
        }

        if (carryforwardAmountToRelieve || nonCarryforwardAmountToRelieve)
        {
            // Create budget source tracking to track relieving ledger dimension details if not already created.
            this.trackBudgetSource();
        }

        // Create relieving detail records.
        if (carryforwardAmountToRelieve)
        {
            reliefAdjustmentAmount = carryforwardAmountToRelieve * #InverseSign;
			
			// Get the general budget reservation flag.
            isGeneralBudgetReservationRelieving = this.isGeneralBudgetReservationRelieving(carryforwardSourceTrackingDetailToRelieve);
           
			if (isGeneralBudgetReservationRelieving)
            {
				//
                // Make sure the relief amount from the document is matched for both tables: 
				// BudgetSourceTrackingDetail and BudgetSourceTrackingRelievingDetail
				//
                reliefAdjustmentAmount = min(_relievingDetail.parmCurrencyAmount(), carryforwardAmountToRelieve) * #InverseSign;
			}

            this.saveBudgetSourceTrackingRelievingDetail(_relievingDetail,
				carryforwardSourceTrackingDetailToRelieve,
				reliefAdjustmentAmount,
                isGeneralBudgetReservationRelieving);

            boolean areDimensionsEqual = (_relievingDetail.parmLedgerDimension() == _relievingDetail.parmLedgerDimensionToRelieve()
                || LedgerDimensionFacade::areEqual(_relievingDetail.parmLedgerDimension(), _relievingDetail.parmLedgerDimensionToRelieve()));

            if (_relievingDetail.parmLegalEntityId() == _relievingDetail.parmLegalEntityIdToRelieve() && areDimensionsEqual)
            {
                // The matching source ledger dimension amounts are carried forward amounts.
                // Calculate carryforward amount.
                if (abs(carryforwardAmountToRelieve) > abs(_relievingDetail.parmCurrencyAmount()))
                {
                    carryforwardAmount = _relievingDetail.parmCurrencyAmount();
                }
                else
                {
                    carryforwardAmount = carryforwardAmountToRelieve;
                }
            }

            this.cacheRelievedAmount(
                _primaryLedgerIdToRelieve,
                _relievingDetail.parmBudgetSourceIdToRelieve(),
                _relievingDetail.parmLedgerDimensionToRelieve(),
                isSimulation,
                reliefAdjustmentAmount,
                true);
        }

        // Calculate non-carryforward amount.
        nonCarryforwardAmount = _relievingDetail.parmCurrencyAmount() - carryforwardAmount;

        // Create relieving detail records.
        if (nonCarryforwardAmountToRelieve)
        {
            // Reset the helper buffers
            relievedDetail = null;
            relievedTracking = null;
            relievedSource = null;

            reliefAdjustmentAmount = (nonCarryforwardAmountToRelieve * #InverseSign);

            // Get the general budget reservation flag.
            isGeneralBudgetReservationRelieving = this.isGeneralBudgetReservationRelieving(nonCarryforwardSourceTrackingDetailToRelieve);
           
            if (isGeneralBudgetReservationRelieving)
            {
                //
                // Make sure the relief amount from the document is matched for both tables:
                // BudgetSourceTrackingDetail and BudgetSourceTrackingRelievingDetail
                //
                reliefAdjustmentAmount = min(_relievingDetail.parmCurrencyAmount(), nonCarryforwardAmountToRelieve) * #InverseSign;
            }

            this.saveBudgetSourceTrackingRelievingDetail(_relievingDetail, 
				nonCarryforwardSourceTrackingDetailToRelieve,
				reliefAdjustmentAmount,
                isGeneralBudgetReservationRelieving);

            this.cacheRelievedAmount(
                _primaryLedgerIdToRelieve,
                _relievingDetail.parmBudgetSourceIdToRelieve(),
                _relievingDetail.parmLedgerDimensionToRelieve(),
                isSimulation,
                reliefAdjustmentAmount,
                false);
        }

        if (_controlLedgerDimension)
        {
            // Cache tracking carryforward and non-carryforward amounts.
            this.cacheTrackingAmounts(
                _relievingDetail.parmLegalEntityId(),
                _controlLedgerDimension,
                _relievingDetail.parmLedgerDimension(),
                carryforwardAmount,
                nonCarryforwardAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSourceTrackingRelievingDetail</Name>
				<Source><![CDATA[
	/// <summary>
    /// Saves the record into the <c>BudgetSourceTrackingRelievingDetail</c> table if needed.
    /// </summary>
    /// <param name = "_relievingDetail">
    /// The budget source relieving detail instance of the <c>BudgetRelievingDetail</c> class.
	/// </param>
    /// <param name = "_budgetSourceTrackingDetailToRelieve">
    /// The record ID of the  table to relieve the budget reservation.
	/// </param>
    /// <param name = "_reliefAdjustmentAmount">
	/// The amount to relieve.
	/// </param>
    /// <param name = "_isGeneralBudgetReservationRelieving">
    /// The flag for the relieving detail. True if the relieveing is for begeral budget reservation, otherwiese, false.
	/// </param>
    private void saveBudgetSourceTrackingRelievingDetail(
		BudgetRelievingDetail _relievingDetail, 
        recId _budgetSourceTrackingDetailToRelieve,
        AmountMST _reliefAdjustmentAmount,
		boolean _isGeneralBudgetReservationRelieving)
    {
        boolean hasRelievedDetail;
		
        if (_isGeneralBudgetReservationRelieving)
        {
            // Check previous confirmed relieving for GBR relieving event only
			hasRelievedDetail = this.hasRelievedBySameSourceDocumentLineBudgetSource(currentBudgetSourceTracking.RecId,
				_relievingDetail.parmLedgerDimension(),
				_budgetSourceTrackingDetailToRelieve);

			// Set the preparation flag.
            areRelievingDetailsPrepared = hasRelievedDetail;
		}

        if (!hasRelievedDetail)
        {
            // Track the relieving event.
            BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail = BudgetSourceTrackingRelievingDetail::findByRelievingSourceAndRelievedDetail(
                                                                    currentBudgetSourceTracking.RecId,
                                                                    _relievingDetail.parmLedgerDimension(),
                                                                    _budgetSourceTrackingDetailToRelieve,
                                                                    false,
                                                                    true);

            // Note: The current budget source ledger dimension details have not been tracked yet.
            budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking = currentBudgetSourceTracking.RecId;
            budgetSourceTrackingRelievingDetail.RelievingBudgetSourceLedgerDimension = _relievingDetail.parmLedgerDimension();
            budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail = _budgetSourceTrackingDetailToRelieve;
            budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount += _reliefAdjustmentAmount;

            if (budgetSourceTrackingRelievingDetail.validateWrite())
            {
                budgetSourceTrackingRelievingDetail.write();
                areRelievingDetailsPrepared = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRelievingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the <c>BudgetSourceTrackingRelievingDetail</c> record that is referenced by the removal of
    ///    the <c>BudgetSourceTracking</c> record as a budget source to relieve.
    /// </summary>
    private void removeRelievingDetail()
    {
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        SetEnumerator removeElements;

        if (budgetSourceTrackingRecIdsToRemove.elements() > 0)
        {
            budgetSourceTrackingRelievingDetail.concurrencyModel(ConcurrencyModel::Pessimistic);

            removeElements = budgetSourceTrackingRecIdsToRemove.getEnumerator();

            while (removeElements.moveNext())
            {
                removalBudgetSourceTracking = BudgetSourceTracking::find(removeElements.current());

                update_recordSet budgetSourceTrackingRelievingDetail
                    setting IsDeletePending = NoYes::Yes
                    where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == removalBudgetSourceTracking.RecId;

                budgetSourceTrackingRelievingDetail.clear();

                if (!areRelievingPendingDeletionsPrepared)
                {
                    select firstOnly recId from budgetSourceTrackingRelievingDetail
                        where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == removalBudgetSourceTracking.RecId;

                    if (budgetSourceTrackingRelievingDetail.RecId)
                    {
                        areRelievingPendingDeletionsPrepared = true;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes any budget tracking information for the <c>BudgetSource</c> table record and, if it is
    /// requested, removes its relieving information.
    /// </summary>
    /// <param name="_includeBudgetSource">
    /// A Boolean value that indicates whether to remove the budget source; optional.
    /// </param>
    public void removeTracking(boolean _includeBudgetSource = false)
    {
        this.determineRemovalSourceTracking();

        // Current budget source might have relieved other budget source.  Remove those relieving details.
        this.removeRelievingDetail();
        this.removeLastSourceTrackingDetail();
        this.removeLastSourceTracking();

        if (_includeBudgetSource)
        {
            this.determineRemovalSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the ledger dimension detail.
    /// </summary>
    /// <param name="_primaryLedgerId">
    /// The ID for the primary <c>Ledger</c> record for which the ledger dimension details are tracked.
    /// </param>
    /// <param name="_controlRuleId">
    /// The ID for the <c>BudgetControlRule</c> record for the budget control ledger dimension to track
    /// budget funds.
    /// </param>
    /// <param name="_groupId">
    /// The ID for the <c>BudgetGroup</c> record for the budget control ledger dimension to track budget
    /// funds.
    /// </param>
    /// <param name="_controlLedgerDimension">
    /// The budget control ledger dimension to track budget funds.
    /// </param>
    /// <param name="_sourceDetails">
    /// The collection of budget source ledger dimension details that is associated with the budget control
    /// ledger dimension to track budget funds.
    /// </param>
    public void trackLedgerDimension(
        recId _primaryLedgerId,
        recId _controlRuleId,
        recId _groupId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        Set _sourceDetails)
    {
        SetEnumerator budgetSourceDetailsEnumerator;
        BudgetSourceDetail budgetSourceDetail;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        AmountMST carryforwardAmountFromRelievingDetail;
        AmountMST nonCarryforwardAmountFromRelievingDetail;
        AmountMST nonCarryforwardAmount;
        boolean isRelievingDetail;
        boolean isCheckDetail;
        boolean hasNonCarryforwardAmountsFromRelievingDetail;
        Map legalEntityControlLedgerDimensionDetails;
        Map sourceLedgerDimensionDetails;
        // Key: Source ledger dimension ID (LedgerDimensionBase)
        // Value: AmountMST
        Map budgetSourceNonCarryforwardLegalEntityDetails = new Map(typeName2Type(extendedtypestr(LedgerDimensionBase)), typeName2Type(extendedtypestr(AmountMST)));
        // Key: Legal entity ID (RecId)
        // Value:   Map
        //          Key: Source ledger dimension ID (LedgerDimensionBase)
        //          Value: AmountMST
        Map budgetSourceNonCarryforwardDetails = new Map(typeName2Type(extendedtypestr(recId)), Types::Class);
        MapEnumerator budgetSourceNonCarryforwardDetailsEnumerator;
        MapEnumerator budgetSourceNonCarryforwardLegalEntityDetailsEnumerator;

        if (_primaryLedgerId &&
            _controlLedgerDimension &&
            _sourceDetails.elements() > 0)
        {
            budgetSourceDetailsEnumerator = _sourceDetails.getEnumerator();

            // Track carryforward amounts and cache non-carryforward amounts from relieving details.
            while (budgetSourceDetailsEnumerator.moveNext())
            {
                budgetSourceDetail = budgetSourceDetailsEnumerator.current();

                isRelievingDetail = budgetSourceDetail is BudgetRelievingDetail;

                if (isRelievingDetail)
                {
                    // Track the source ledger dimension carryforward amounts that have been cached when relieving other source ledger dimension amounts.
                    if (carryforwardSourceLedgerDimensionDetails.exists(budgetSourceDetail.parmLegalEntityId()))
                    {
                        legalEntityControlLedgerDimensionDetails = carryforwardSourceLedgerDimensionDetails.lookup(budgetSourceDetail.parmLegalEntityId());

                        if (legalEntityControlLedgerDimensionDetails.exists(_controlLedgerDimension))
                        {
                            sourceLedgerDimensionDetails = legalEntityControlLedgerDimensionDetails.lookup(_controlLedgerDimension);

                            if (sourceLedgerDimensionDetails.exists(budgetSourceDetail.parmLedgerDimension()))
                            {
                                carryforwardAmountFromRelievingDetail = sourceLedgerDimensionDetails.lookup(budgetSourceDetail.parmLedgerDimension());

                                if (carryforwardAmountFromRelievingDetail)
                                {
                                    // Create budget source tracking to track budget control ledger dimension detail if not already created.
                                    this.trackBudgetSource();

                                    budgetSourceTrackingDetail = this.createTrackingDetail(
                                        currentBudgetSourceTracking.RecId,
                                        _primaryLedgerId,
                                        budgetSourceDetail.parmLedgerDimension(),
                                        _controlRuleId,
                                        _groupId,
                                        _controlLedgerDimension,
                                        carryforwardAmountFromRelievingDetail,
                                        NoYes::Yes,
                                        NoYes::No);

                                    // Remember the carry-forward status in order to potentially maintain it for the entire budget source.
                                    areCarryforwardDetailsPrepared = NoYes::Yes;
                                }

                                // Carryforward amount for the control detail source ledger dimension is now tracked.
                                // Remove it from the cache.
                                sourceLedgerDimensionDetails.remove(budgetSourceDetail.parmLedgerDimension());
                                legalEntityControlLedgerDimensionDetails.insert(_controlLedgerDimension, sourceLedgerDimensionDetails);
                                carryforwardSourceLedgerDimensionDetails.insert(budgetSourceDetail.parmLegalEntityId(), legalEntityControlLedgerDimensionDetails);
                            }
                        }
                    }

                    if (nonCarryforwardSourceLedgerDimensionDetails.exists(budgetSourceDetail.parmLegalEntityId()))
                    {
                        legalEntityControlLedgerDimensionDetails = nonCarryforwardSourceLedgerDimensionDetails.lookup(budgetSourceDetail.parmLegalEntityId());

                        if (legalEntityControlLedgerDimensionDetails.exists(_controlLedgerDimension))
                        {
                            sourceLedgerDimensionDetails = legalEntityControlLedgerDimensionDetails.lookup(_controlLedgerDimension);

                            if (sourceLedgerDimensionDetails.exists(budgetSourceDetail.parmLedgerDimension()))
                            {
                                nonCarryforwardAmountFromRelievingDetail = sourceLedgerDimensionDetails.lookup(budgetSourceDetail.parmLedgerDimension());

                                if (budgetSourceNonCarryforwardDetails.exists(budgetSourceDetail.parmLegalEntityId()))
                                {
                                    budgetSourceNonCarryforwardLegalEntityDetails = budgetSourceNonCarryforwardDetails.lookup(budgetSourceDetail.parmLegalEntityId());

                                    if (budgetSourceNonCarryforwardLegalEntityDetails.exists(budgetSourceDetail.parmLedgerDimension()))
                                    {
                                        nonCarryforwardAmount = budgetSourceNonCarryforwardLegalEntityDetails.lookup(budgetSourceDetail.parmLedgerDimension());
                                    }
                                    else
                                    {
                                        nonCarryforwardAmount = nonCarryforwardAmountFromRelievingDetail;
                                    }
                                }
                                else
                                {
                                    nonCarryforwardAmount = nonCarryforwardAmountFromRelievingDetail;
                                }

                                // Cache the non-carryforward amounts for the source ledger dimension from relieving details.
                                budgetSourceNonCarryforwardLegalEntityDetails.insert(budgetSourceDetail.parmLedgerDimension(), nonCarryforwardAmount);
                                budgetSourceNonCarryforwardDetails.insert(budgetSourceDetail.parmLegalEntityId(), budgetSourceNonCarryforwardLegalEntityDetails);
                            }
                        }
                    }
                }
            }

            budgetSourceDetailsEnumerator.reset();

            // Track non-carryforward amounts from budget check details and cached non-carryforward amounts from relieving details.
            while (budgetSourceDetailsEnumerator.moveNext())
            {
                // Reset the non-carryforward amount that was set from the previous detail.
                nonCarryforwardAmount = 0;

                budgetSourceDetail = budgetSourceDetailsEnumerator.current();

                isCheckDetail = budgetSourceDetail is BudgetCheckDetail;

                if (isCheckDetail)
                {
                    if (budgetSourceNonCarryforwardDetails.exists(budgetSourceDetail.parmLegalEntityId()))
                    {
                        budgetSourceNonCarryforwardLegalEntityDetails = budgetSourceNonCarryforwardDetails.lookup(budgetSourceDetail.parmLegalEntityId());

                        if (budgetSourceNonCarryforwardLegalEntityDetails.exists(budgetSourceDetail.parmLedgerDimension()))
                        {
                            hasNonCarryforwardAmountsFromRelievingDetail = true;

                            nonCarryforwardAmount = budgetSourceNonCarryforwardLegalEntityDetails.lookup(budgetSourceDetail.parmLedgerDimension());

                            // The non-carryforward amount will now be added to the budget check detail non-carryforward amount.
                            // Remove it from the cache.
                            budgetSourceNonCarryforwardLegalEntityDetails.remove(budgetSourceDetail.parmLedgerDimension());
                            budgetSourceNonCarryforwardDetails.insert(budgetSourceDetail.parmLegalEntityId(), budgetSourceNonCarryforwardLegalEntityDetails);
                        }
                    }

                    nonCarryforwardAmount += budgetSourceDetail.parmCurrencyAmount();

                    if (nonCarryforwardAmount)
                    {
                        // Create budget source tracking to track budget control ledger dimension detail if not already created.
                        this.trackBudgetSource();

                        budgetSourceTrackingDetail = this.createTrackingDetail(
                            currentBudgetSourceTracking.RecId,
                            _primaryLedgerId,
                            budgetSourceDetail.parmLedgerDimension(),
                            _controlRuleId,
                            _groupId,
                            _controlLedgerDimension,
                            nonCarryforwardAmount,
                            NoYes::No,
                            NoYes::No);
                    }
                }
            }

            // Track any remaining non-carryforward amounts from relieving details.
            if (budgetSourceNonCarryforwardDetails.elements() > 0)
            {
                budgetSourceNonCarryforwardDetailsEnumerator = budgetSourceNonCarryforwardDetails.getEnumerator();

                while (budgetSourceNonCarryforwardDetailsEnumerator.moveNext())
                {
                    budgetSourceNonCarryforwardLegalEntityDetails = budgetSourceNonCarryforwardDetailsEnumerator.currentValue();

                    if (budgetSourceNonCarryforwardLegalEntityDetails.elements() > 0)
                    {
                        budgetSourceNonCarryforwardLegalEntityDetailsEnumerator = budgetSourceNonCarryforwardLegalEntityDetails.getEnumerator();

                        while (budgetSourceNonCarryforwardLegalEntityDetailsEnumerator.moveNext())
                        {
                            if (budgetSourceNonCarryforwardLegalEntityDetailsEnumerator.currentValue())
                            {
                                // Create budget source tracking to track budget control ledger dimension detail if not already created.
                                this.trackBudgetSource();

                                budgetSourceTrackingDetail = this.createTrackingDetail(
                                    currentBudgetSourceTracking.RecId,
                                    _primaryLedgerId,
                                    budgetSourceNonCarryforwardLegalEntityDetailsEnumerator.currentKey(),
                                    _controlRuleId,
                                    _groupId,
                                    _controlLedgerDimension,
                                    budgetSourceNonCarryforwardLegalEntityDetailsEnumerator.currentValue(),
                                    NoYes::No,
                                    NoYes::No);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackReturnLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tracks the ledger dimension return detail.
    /// </summary>
    /// <param name="_primaryLedgerId">
    ///    The ID for the primary <c>Ledger</c> record for which the ledger dimension details are tracked.
    /// </param>
    /// <param name="_controlLedgerDimension">
    ///    The budget control ledger dimension for which to return budget funds.
    /// </param>
    /// <param name="_sourceDetails">
    ///    The collection of budget source ledger dimension details associated with the
    ///    budget control ledger dimension to return budget funds.
    /// </param>
    public void trackReturnLedgerDimension(
        LedgerRecId _primaryLedgerId,
        LedgerDimensionBudgetControl _controlLedgerDimension,
        Set _sourceDetails)
    {
        AmountMST returnAmount;
        AmountMST returnAmountRemaining;
        AmountMST carryforwardAmount;
        AmountMST nonCarryforwardAmount;
        AmountMST carryforwardAmountRelieved;
        AmountMST nonCarryforwardAmountRelieved;

        container sourceLedgerDimensionRelievedAmounts;
        container amounts;

        SetEnumerator budgetSourceDetailsEnumerator;
        BudgetSourceDetail budgetSourceDetail;

        if (_primaryLedgerId && (_sourceDetails.elements() > 0))
        {
            budgetSourceDetailsEnumerator = _sourceDetails.getEnumerator();

            this.determineSourceTrackingToReturn();

            if (budgetSourceTrackingToReturnAmounts)
            {
                while (budgetSourceDetailsEnumerator.moveNext())
                {
                    budgetSourceDetail = budgetSourceDetailsEnumerator.current();

                    // Get the total amount to return. The sign of the amount will be opposite of the amounts in tracking.
                    // Flip the sign of the amount so that the funds remaining can be compared to the amounts on the BudgetSourceTrackingDetail records.
                    returnAmountRemaining = budgetSourceDetail.parmCurrencyAmount() * #InverseSign;

                    // Get the amount in tracking.
                    amounts = this.getAmountInTracking(_primaryLedgerId, budgetSourceDetail);
                    carryforwardAmount = conpeek(amounts, 1);
                    nonCarryforwardAmount = conpeek(amounts, 2);

                    // Get the relieved amounts.
                    sourceLedgerDimensionRelievedAmounts = this.getRelievedAmountAll(
                                                            _primaryLedgerId,
                                                            budgetSourceTrackingToReturnAmounts.BudgetSource,
                                                            budgetSourceDetail.parmLedgerDimension(),
                                                            isSimulation);

                    carryforwardAmountRelieved = conpeek(sourceLedgerDimensionRelievedAmounts, 1);
                    nonCarryforwardAmountRelieved = conpeek(sourceLedgerDimensionRelievedAmounts, 2);

                    // Add the amount that was relieved to the amount in tracking.
                    carryforwardAmount += carryforwardAmountRelieved;
                    nonCarryforwardAmount += nonCarryforwardAmountRelieved;

                    // Process non-carryforward amounts first.

                    if (nonCarryforwardAmount <= returnAmountRemaining)
                    {
                        // There are sufficient funds to return the entire non-carryforward amount.
                        returnAmount = nonCarryforwardAmount;
                        returnAmountRemaining -= returnAmount;
                    }
                    else
                    {
                        // There are insufficient funds to return the entire non-carryforward amount.
                        // Return whatever budget return funds are remaining.
                        returnAmount = returnAmountRemaining;
                        returnAmountRemaining = 0;
                    }

                    if (returnAmount)
                    {
                        // There is a non-carryforward amount to return.
                        // Create budget source tracking to track budget control ledger dimension detail if not already created.
                        this.trackBudgetSource();

                        this.createTrackingDetail(
                            currentBudgetSourceTracking.RecId,
                            _primaryLedgerId,
                            budgetSourceDetail.parmLedgerDimension(),
                            0,
                            0,
                            _controlLedgerDimension,
                            returnAmount * #InverseSign,
                            NoYes::No,
                            NoYes::Yes);
                    }

                    if (returnAmountRemaining && carryforwardAmount)
                    {
                        // There is a carryforward amount to return and funds available to return.

                        if (carryforwardAmount <= returnAmountRemaining)
                        {
                            // There are sufficient funds to return the entire carryforward amount.
                            returnAmount = carryforwardAmount;
                        }
                        else
                        {
                            // There are insufficient funds to return the entire carryforward amount.
                            // Return whatever budget return funds are remaining.
                            returnAmount = returnAmountRemaining;
                        }

                        // Create budget source tracking to track budget control ledger dimension detail if not already created.
                        this.trackBudgetSource();

                        this.createTrackingDetail(
                            currentBudgetSourceTracking.RecId,
                            _primaryLedgerId,
                            budgetSourceDetail.parmLedgerDimension(),
                            0,
                            0,
                            _controlLedgerDimension,
                            returnAmount * #InverseSign,
                            NoYes::Yes,
                            NoYes::Yes);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetControlTrackingUpdateRelieving</c> class.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetControlTrackingUpdateRelieving</c> class instance.
    /// </returns>
    public static BudgetControlTrackingUpdateRelieving construct()
    {
        return new BudgetControlTrackingUpdateRelieving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelievedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the relieved amount for the specified <c>BudgetSourceTrackingDetail</c> record ID.
    /// </summary>
    /// <param name="_relievedBudgetSourceTrackingDetailId">
    /// The ID of a <c>BudgetSourceTrackingDetail</c> record.
    /// </param>
    /// <param name="_isSimulation">
    /// A Boolean value that indicates whether to get the simulated relieved amount; optional.
    /// </param>
    /// <returns>
    /// The relieved amount for the specified <c>BudgetSourceTrackingDetail</c> record ID.
    /// </returns>
    private static AmountMST getRelievedAmount(
        recId _relievedBudgetSourceTrackingDetailId,
        boolean _isSimulation = false)
    {
        BudgetSourceTracking relievingBudgetSourceTracking;
        BudgetSourceTracking relievedBudgetSourceTracking;
        BudgetSourceTrackingDetail relievedBudgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        if (_isSimulation)
        {
            select sum(AccountingCurrencyAmount) from budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _relievedBudgetSourceTrackingDetailId &&
                    budgetSourceTrackingRelievingDetail.IsDeletePending == NoYes::No;
        }
        else
        {
            select sum(AccountingCurrencyAmount) from budgetSourceTrackingRelievingDetail
                    where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _relievedBudgetSourceTrackingDetailId &&
                        budgetSourceTrackingRelievingDetail.IsDeletePending == NoYes::No
                notexists join relievingBudgetSourceTracking
                    where relievingBudgetSourceTracking.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking &&
                        relievingBudgetSourceTracking.IsSimulation == NoYes::Yes
                notexists join relievedBudgetSourceTrackingDetail
                    where relievedBudgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
                exists join relievedBudgetSourceTracking
                    where relievedBudgetSourceTracking.RecId == relievedBudgetSourceTrackingDetail.BudgetSourceTracking &&
                        relievedBudgetSourceTracking.IsSimulation == NoYes::Yes;
        }

        return budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRelievedBySameSourceDocumentLineBudgetSource</Name>
				<Source><![CDATA[
    private boolean hasRelievedBySameSourceDocumentLineBudgetSource(recId _relievingBudgetSourceTrackingId,
        LedgerDimensionBase _relievingBudgetSourceLedgerDimension,
        recId _relievedBudgetSourceTrackingDetailId)
    {
        boolean foundRelievedData;
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

		// Get current budget source tracking info.
        select firstonly BudgetSource from budgetSourceTracking
            join SourceDocumentLine from budgetSource
            where budgetSourceTracking.BudgetSource == budgetSource.RecId
                && budgetSourceTracking.RecId == _relievingBudgetSourceTrackingId;

		// Check if it is relieved and confirmed for the same relieving and relieved info.
        foundRelievedData = BudgetSourceTrackingRelievingDetail::checkRelievedBySameSourceDocumentLineBudgetSource(
                            _relievingBudgetSourceLedgerDimension,
                            _relievedBudgetSourceTrackingDetailId,
                            budgetSourceTracking.BudgetSource,
                            budgetSource.SourceDocumentLine);        

        return foundRelievedData;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGeneralBudgetReservationRelieving</Name>
				<Source><![CDATA[
    private boolean isGeneralBudgetReservationRelieving(recId _relievedBudgetSourceTrackingDetailId)
    {
        boolean isGeneralBudgetReservationRelieving;

        if (isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN)))
        {
            SourceDocumentHeader sourceDocumentHeader;
            SourceDocumentLine sourceDocumentLine;
            BudgetSource budgetSource;
            BudgetSourceTracking budgetSourceTracking;
            BudgetSourceTrackingDetail budgetSourceTrackingDetail;

            // Find if the relieved source document is Budget reservation document
            select firstonly RecId from sourceDocumentHeader
                join sourceDocumentLine
                join budgetSource
                join budgetSourceTracking
                exists join budgetSourceTrackingDetail
                where budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId
					&& budgetSourceTrackingDetail.RecId == _relievedBudgetSourceTrackingDetailId
                    && budgetSourceTracking.BudgetSource == budgetSource.RecId
                    && budgetSource.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId               
                    && sourceDocumentHeader.SourceRelationType == TableNum(BudgetReservationHeader_PSN);

            isGeneralBudgetReservationRelieving = sourcedocumentHeader.RecId != 0;
        }
                
        return isGeneralBudgetReservationRelieving;
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>