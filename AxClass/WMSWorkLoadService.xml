<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSWorkLoadService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSWorkLoadService</c> class provides an API for building the workload projection forecast.
/// </summary>
public class WMSWorkLoadService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds work load projection forecast
    /// </summary>
    /// <param name="_dataContract">
    /// An instance of the <c>WMSWorkLoadServiceDataContract</c> class.
    /// </param>
    public void buildForecast(WMSWorkLoadServiceDataContract _dataContract)
    {
        WMSSpaceUtilPeriodTemplateBuilder   periodTemplateBuilder;
        WMSWorkLoadForecastBuilder          workLoadForecastBuilder;
        WMSSpaceUtilInconsistencyLogger     inconsistencyLogger;

        ttsBegin;

        periodTemplateBuilder = WMSSpaceUtilPeriodTemplateBuilder::construct();
        periodTemplateBuilder.parmNumberOfDays(_dataContract.parmNumberOfDays());
        periodTemplateBuilder.parmReportSetup(_dataContract.parmReportSetupRecId());
        periodTemplateBuilder.createPeriodTemplate();

        inconsistencyLogger = WMSSpaceUtilInconsistencyLogger::construct();
        inconsistencyLogger.parmReportSetup(_dataContract.parmReportSetupRecId());

        workLoadForecastBuilder = WMSWorkLoadForecastBuilder::newFromDataContractAndPeriodTemplate(_dataContract, periodTemplateBuilder.getPeriodTemplateName());
        workLoadForecastBuilder.parmInconsistencyLogger(inconsistencyLogger);
        workLoadForecastBuilder.buildForecast();

        periodTemplateBuilder.deletePeriodTemplate();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
