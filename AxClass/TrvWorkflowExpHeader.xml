<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowExpHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvWorkflowExpHeader</c> class provides a workflow document class for expense reports.
/// </summary>
[
WorkflowDocIsQueueEnabledAttribute(true, "@SYS317210"),
ExpressionCurrencyFieldMapAttribute(methodstr(TrvWorkflowExpHeader, parmTotalExpenseAmount), methodstr(TrvWorkflowExpHeader, parmAccountingCurrencyCode)),
ExpressionCurrencyLEAttribute(tableStr(TrvExpTable), fieldStr(TrvExpTable, LegalEntity)),
ExpressionCurrencyLEAttribute(tableStr(TrvExpTrans), fieldStr(TrvExpTrans, LegalEntity)),
ExpressionCurrExchRateDateAttribute(tableStr(TrvExpTrans), fieldStr(TrvExpTrans, TransDate))
]
class TrvWorkflowExpHeader extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query name for this workflow document.
    /// </summary>
    /// <returns>
    ///    The query name from the AOT.
    /// </returns>
    QueryName getQueryName()
    {
        return querystr(TrvWorkflowExpHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency code from the ledger that is associated with the legal entity of the
    /// record.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The accounting currency code from the ledger that is associated with the legal entity of the record.
    /// </returns>
    [ExpressionFieldHideAttribute]
    public CurrencyCode parmAccountingCurrencyCode(
            CompanyId _companyId,
            tableId   _tableId,
            RecId     _recId)
    {
        if (_tableId == tableNum(TrvExpTrans))
        {
            return Ledger::accountingCurrency(TrvExpTrans::find(_recId).LegalEntity);
        }

        return Ledger::accountingCurrency(TrvExpTable::findRecId(_recId).LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpendingLimitRequester</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The spending limit of the requester.
    /// </returns>
    public TrvExpSpendingLimitAmountMSTRequester parmSpendingLimitRequester(CompanyId _companyId,
                                                                           TableId   _tableId,
                                                                           RecId     _recId)
    {
        TrvExpTable trvExpTable;

        if (_tableId != tableNum(TrvExpTable))
        {
                // Unexpected table: %1
            throw error(strfmt("@SYS328858", tableid2name(_tableId)));
        }

        if (_recId == 0)
        {
            // Workflow context record id is zero.
            throw error("@SYS107964");
        }
        trvExpTable = TrvExpTable::findRecId(_recId);
        changecompany(  CompanyInfo::findRecId(trvExpTable.LegalEntity).DataArea)
        {
            return TrvWorkflowExpHeader::findWorkerSpendingLimit(trvExpTable.CreatingWorker,Ledger::accountingCurrency(trvExpTable.LegalEntity));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalExpenseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total expense amount.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the <c>TrvExpTable</c> record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the <c>TrvExpTable</c> view.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the <c>TrvExpTable</c> to get the total for.
    /// </param>
    /// <returns>
    /// The total expense amount.
    /// </returns>
    /// <remarks>
    /// This method is the workflow calculated field method that is used by the expression builder.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The value of the <paramref name="_tableId" /> parameter is not the table ID of the
    /// <c>TrvExpTable</c> table.
    /// </exception>
    public TrvTotalExpenseAmount parmTotalExpenseAmount(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        if (_tableId != tablenum(TrvExpTable))
        {
            // Unexpected table: %1
            throw error(strfmt("@SYS328858", tableid2name(_tableId)));
        }

        return TrvExpTable::findRecId(_recId).total();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkerSpendingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the worker.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// The record Id of the <c>HcmWorker</c> record.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code in which the amount is to be calculated.
    /// </param>
    /// <returns>
    /// The spending limit of the worker.
    /// </returns>

    public static TrvExpSpendingLimitAmountMSTRequester findWorkerSpendingLimit(RecId _hcmWorkerRecId, CurrencyCode _currencyCode)
    {
        AmountMST                      limitValue;
        HRPWorkerLimit                 workerLimit;
        HcmWorker                      hcmWorker;
        container                      limitAmount;
        HcmPositionWorkerAssignment    positionWorkerAssignment;
        HcmPosition                    position;
        utcDateTime                    dateTimeNow;

        dateTimeNow = DateTimeUtil::utcNow();

        select RecId from hcmWorker where hcmWorker.RecId == _hcmWorkerRecId
            join Position from positionWorkerAssignment
                where positionWorkerAssignment.Worker == hcmWorker.RecId
                   && positionWorkerAssignment.ValidFrom <= dateTimeNow
                   && positionWorkerAssignment.ValidTo >= dateTimeNow
                join PositionId from position
                where position.RecId == positionWorkerAssignment.Position;

        workerLimit = new HRPWorkerLimit();
        limitAmount = workerLimit.getWorkerSigningLimit(hcmWorker.RecId, SourceDocumentRelationType::ExpenseReport, HRPLimitType::Spending,position.PositionId);

        //converting amount to the input parameter currency
        limitValue = CurrencyExchangeHelper::curAmount2CurAmount(conPeek(limitAmount, 1), conPeek(limitAmount, 2), _currencyCode);
        return limitValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the activity number.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the <c>TrvExpTable</c> record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    ///  The activity number.
    /// </returns>
    public TrvProjActivityNumPlaceHolder parmActivity(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        List activityNumbers = new List(Types::String);
        str activityNumbersString;
        TrvExpTrans trvExpTrans;
        
        if (_tableId != tableNum(TrvExpTable))
        {
            // Document table id reference: %1 is not valid.
            throw error(strFmt("@SYS112754", _tableId));
        }

        if (_recId == 0)
        {
            // Document record id is zero.
            throw error("@SYS112755");    
        }

        while select ProjActivityNumber, InterCompanyLE from trvExpTrans
            where trvExpTrans.TrvExpTable == _recId
        {
            if (trvExpTrans.ProjActivityNumber)
            {
                changecompany(trvExpTrans.legalEntityName())
                {
                    activityNumbers.addEnd(trvExpTrans.ProjActivityNumber + ' ' + smmActivities::find(trvExpTrans.ProjActivityNumber).Purpose);
                }
            }
        }

        activityNumbersString = strList2str(activityNumbers, ", ");
        return activityNumbersString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>