<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrRoyaltyVendTablePurgeDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTablePurgeDialog</c> class serves to delete royalties.
/// </summary>
class mcrRoyaltyVendTablePurgeDialog extends RunBaseBatch implements BatchRetryable
{
    date                            upToDate;
    DialogField                     dialogUpToDate;

    #define.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        upToDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the royalty date range field to dialog box.
    /// </summary>
    /// <returns>
    /// The dialog box object.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        dialogUpToDate  = dialogRunbase.addFieldValue(
                            extendedTypeStr(ToDate),
                            upToDate,
                            "@PRO1118",
                            "@PRO1119");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty date value.
    /// </summary>
    /// <returns>
    /// true if the royalty date value is retrieved successfully;
    /// otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        upToDate  =  dialogUpToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the application module value.
    /// </summary>
    /// <returns>
    /// The vendor application module value.
    /// </returns>
    public SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substantiates the <c>MCRRoyaltyVendTablePurgeDialog</c> object.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the dialog object parameters.
    /// </summary>
    /// <returns>
    /// The list of stored parameters.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the royalty delete process.
    /// </summary>
    public void run()
    {
        MCRRoyaltyVendTable::purgeRoyalties(upToDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the last parameters saved.
    /// </summary>
    /// <param name="_packedClass">
    /// The list of stored parameters.
    /// </param>
    /// <returns>
    /// true if the restore succeded; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>MCRRoyaltyVendTablePurgeDialog</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MCRRoyaltyVendTablePurgeDialog</c> class.
    /// </returns>
    public static MCRRoyaltyVendTablePurgeDialog construct()
    {
        return new MCRRoyaltyVendTablePurgeDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns class description.
    /// </summary>
    /// <returns>class description.</returns>
    public static ClassDescription description()
    {
        return "@MCR4410052";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        MCRRoyaltyVendTablePurgeDialog  mcrRoyaltyVendTablePurgeDialog = MCRRoyaltyVendTablePurgeDialog::construct();

        try
        {
            if (mcrRoyaltyVendTablePurgeDialog.prompt())
            {
                if ((Box::yesNo(
                        strFmt("@MCR4410075", PdsRebateStatus::Approved, PdsRebateStatus::Processed, mcrRoyaltyVendTablePurgeDialog.upToDate),
                        DialogButton::No,
                        MCRRoyaltyVendTablePurgeDialog::description())) == DialogButton::Yes)
                {
                    mcrRoyaltyVendTablePurgeDialog.runOperation();

                    if (_args.record())
                    {
                        Common record = _args.record();
                        FormDataSource mcrRoyaltyVendTable_ds = FormDataUtil::getFormDataSource(record);
                        mcrRoyaltyVendTable_ds.research();
                    }
                }
            }
        }
        catch (Exception::Error)
        {
            throw error("@PRO1150" + ' ' + "@PRO1149");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>