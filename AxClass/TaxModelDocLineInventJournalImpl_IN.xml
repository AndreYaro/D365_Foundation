<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineInventJournalImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>InventJournalTrans</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventJournalTrans))]
public class TaxModelDocLineInventJournalImpl_IN extends TaxModelDocLineBaseImpl_IN
    implements  TaxModelExciseTaxable_IN
{
    InventJournalTrans  inventJournalTrans;
    InventJournalTable  inventJournalTable;

    TaxModelDocLineExciseHelper_IN  exciseHelper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption address.
    /// </summary>
    /// <returns>
    /// The comsumption address.
    /// </returns>
    public LogisticsPostalAddress getConsumptionAddress()
    {
        InventDim               inventDim;
        LogisticsLocationRecId  logisticsLocationRecId;

        if (!isConsumptionAddressCached)
        {
            inventDim               = InventDim::find(inventJournalTrans.ToInventDimId);
            logisticsLocationRecId  = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId);
            consumptionAddress = LogisticsPostalAddress::findByLocation(logisticsLocationRecId);
            isConsumptionAddressCached = true;
        }
        return consumptionAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin address.
    /// </summary>
    /// <returns>
    /// The origin address.
    /// </returns>
    public LogisticsPostalAddress getOriginAddress()
    {
        InventDim               inventDim;
        LogisticsLocationRecId  logisticsLocationRecId;

        if (!isOriginAddressCached)
        {
            inventDim               = InventDim::find(inventJournalTrans.InventDimId);
            logisticsLocationRecId  = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId);
            originAddress           = LogisticsPostalAddress::findByLocation(logisticsLocationRecId);
            isOriginAddressCached = true;
        }
        return originAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return CustTable::find(ProjTable::find(inventJournalTrans.ProjId).CustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return DirectSettlement_IN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise tax number sequence.
    /// </summary>
    /// <returns>
    /// The number sequence generated.
    /// </returns>
    public container getExciseNumberSeq()
    {
        return exciseHelper.getExciseNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseRecordType_IN</c> of the document line map.
    /// </summary>
    /// <returns>
    /// The <c>ExciseRecordType_IN</c>
    /// </returns>
    public ExciseRecordType_IN getExciseRecordType()
    {
        return exciseHelper.getExciseRecordType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    public RefRecId getExciseTariffCodeRefRecId()
    {
        return exciseHelper.getExciseTariffCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseTariffCodes_IN</c>
    /// </returns>
    public ExciseTariffCodes_IN getExciseTariffCodesTable()
    {
        return exciseHelper.getExciseTariffCodesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Excise Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getExciseTaxRegistrationNumber()
    {
        TaxRegistrationNumber_IN ret;

        ret = exciseHelper.getExciseTaxRegistrationNumber();

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
            CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                TaxType_IN::Excise,
                this.getExciseType()).RegistrationNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Excise Registration
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getExciseTaxRegistrationRefRecId()
    {
        RefRecId ret;

        ret = exciseHelper.getExciseTaxRegistrationRefRecId();

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
            CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                TaxType_IN::Excise,
                this.getExciseType()).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseType_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseType_IN</c>
    /// </returns>
    public ExciseType_IN getExciseType()
    {
        return exciseHelper.getExciseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventJournalTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        if (this.getQuantity() >= 0)
        {
            return TaxDirection::IncomingTax;
        }
        else
        {
            return TaxDirection::OutgoingTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The tax group.
    /// </returns>
    public TaxGroup getTaxGroup()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the item tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The item tax group.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return inventJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
        TaxRegistrationNumber_IN ret;

        ret = super(_taxType);

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    _taxType).RegistrationNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    public RefRecId getTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
        RefRecId ret;

        ret = super(_taxType);

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    _taxType).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType_IN</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType_IN</c> of the transaction
    /// </returns>
    public TaxModelTransactionType getTransactionType()
    {
        if (this.getQuantity() >= 0)
        {
            return TaxModelTransactionType::Normal;
        }
        else
        {
            return TaxModelTransactionType::Return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        inventJournalTrans = _documentLineMap;
        inventJournalTable = inventJournalTrans.inventJournalTable();

        super(_documentLineMap);

        exciseHelper = new TaxModelDocLineExciseHelper_IN();
        exciseHelper.setDocumentLine(_documentLineMap);
        exciseHelper.setTaxModelTaxable(this);
        exciseHelper.setTaxModelExciseTaxable(this);
        exciseHelper.setTransTaxInformation(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        return exciseHelper.isExicseDSA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for SSI.
    /// </summary>
    /// <returns>
    /// True if the document line is SSI applied; otherwise, false.
    /// </returns>
    public NoYes isExicseSSI()
    {
        return exciseHelper.isExicseSSI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    // True if it is not inter state transaction; otherwise, false.
    // </returns>
    public NoYes IsInterStateTransaction()
    {
        InventDim               fromInventDim;
        InventDim               toInventDim;
        LogisticsLocationRecId  fromLogisticsLocationRecId;
        LogisticsLocationRecId  toLogisticsLocationRecId;
        LogisticsPostalAddress  fromAddress;
        LogisticsPostalAddress  toAddress;
        NoYes                   isInterState;

        isInterState = NoYes::No;

        fromInventDim = InventDim::find(inventJournalTrans.InventDimId);
        toInventDim = InventDim::find(inventJournalTrans.ToInventDimId);

        fromLogisticsLocationRecId = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(fromInventDim.InventLocationId, fromInventDim.InventSiteId);
        toLogisticsLocationRecId = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(toInventDim.InventLocationId, toInventDim.InventSiteId);
        fromAddress = LogisticsPostalAddress::findByLocation(fromLogisticsLocationRecId);
        toAddress = LogisticsPostalAddress::findByLocation(toLogisticsLocationRecId);

        if (fromAddress && toAddress
            && ((fromAddress.CountryRegionId != toAddress.CountryRegionId)
                || (fromAddress.CountryRegionId == toAddress.CountryRegionId
                    && fromAddress.State != ''
                    && toAddress.State != ''
                    && fromAddress.State != toAddress.State))
        )
        {
            isInterState = NoYes::Yes;
        }

        return isInterState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the excise tax number sequence.
    /// </summary>
    /// <param name="_nums">
    /// The sequence number
    /// </param>
    public void setExciseNumberSeq(container _nums)
    {
        exciseHelper.setExciseNumberSeq(_nums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return exciseHelper.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipExciseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Excise Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipExciseTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = exciseHelper.shouldSkipExciseTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to production.
    /// </summary>
    /// <returns>
    /// True if the document line is related to production; otherwise, false.
    /// </returns>
    public boolean isExciseProduction()
    {
        return inventJournalTrans.JournalType == InventJournalType::BOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Inventory_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        InventDim               inventDim;
        LogisticsLocationRecId  logisticsLocationRecId;

        inventDim               = InventDim::find(this.getInventDimId());
        logisticsLocationRecId  = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId);
         
        return LogisticsPostalAddress::findByLocation(logisticsLocationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol getUnit()
    {
        if (inventJournalTrans.ProjUnitID)
        {
            return inventJournalTrans.ProjUnitID;
        }
        else
        {
            return inventJournalTrans.unitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return inventJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return inventJournalTrans.TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>