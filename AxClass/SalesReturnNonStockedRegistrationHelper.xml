<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReturnNonStockedRegistrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesReturnNonStockedRegistrationHelper</c> class is the registration helper for non-stocked
/// sales return order lines.
/// </summary>
class SalesReturnNonStockedRegistrationHelper extends SalesNonStockedRegistrationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line quantity.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty lineQty()
    {
        return -salesLine.ExpectedRetQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventPendingQuantity</c> records must be deleted for an update of the
    /// line.
    /// </summary>
    /// <returns>
    /// true if the line update requires the <c>InventPendingQuantity</c> records to be deleted; otherwise,
    /// false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeDeleted()
    {
        SalesLine salesLineOrig = salesLine.orig();

        //Then pending registrations have to be deleted if:
        // - The sales return order has been cancelled.
        // - A disposition code with disposition action 'CreditOnly' has been applied as no physical receipt will happen.
        return  salesLine.ReturnStatus == ReturnStatusLine::Canceled
            ||  ReturnDispositionCode::find(salesLine.ReturnDispositionCodeId).DispositionAction == DispositionAction::CreditOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeSynced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>InventPendingQuantity</c> records should be synchronized for an update of the
    /// line.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// A Boolean value that indicates whether the <c>InventPendingQuantity</c> records are to be created
    /// for the line.
    /// </param>
    /// <returns>
    /// true if the line update requires the <c>InventPendingQuantity</c> records to be updated; otherwise,
    /// false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeSynced(boolean _isPendingRegistrationsToBeCreated)
    {
        SalesLine salesLineOrig = salesLine.orig();

        // Sync if the line is not yet fully registered,
        // and if it is a new line OR if the line Quantity/Site/Warehouse/Estimated time of arrival has changed.
        return (salesLine.registeredInSalesUnit() < abs(salesLine.ExpectedRetQty))
                && (_isPendingRegistrationsToBeCreated
                    || (!salesLine.ItemId //For category based lines pending registration details is always updated because values like weight come from order line related changes.
                        || salesLineOrig.ExpectedRetQty     != salesLine.ExpectedRetQty
                        || salesLineOrig.InventDimId        != salesLine.InventDimId
                        || salesLineOrig.ReturnDeadline     != salesLine.ReturnDeadline
                        || salesLineOrig.Name               != salesLine.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the pending registration records from the sales line.
    /// </summary>
    /// <param name="_adjustedQty">
    /// The quantity that is still to add onto the pending registration records.
    /// </param>
    /// <param name="_isNewLine">
    /// A Boolean value that specifies whether the line is a new line.
    /// </param>
    /// <remarks>
    /// This would typically be used when a sales return line is created or updated.
    /// </remarks>
    public void synchronizePendingRegistration(UnitQty _adjustedQty, boolean _isNewLine)
    {
        InventRegistrationSalesLine inventRegistrationSalesLine = InventRegistrationSalesLine::newFromSalesLine(salesLine);

        if (!salesLine.ReturnDispositionCodeId && salesLine.ExpectedRetQty)
        {
            //Synchronize the pending registration records.
            InventPendingQuantity::synchronizePendingRegistration(inventRegistrationSalesLine, _adjustedQty, !_isNewLine);
        }
        else if (!salesLine.orig().ReturnDispositionCodeId || !salesLine.ExpectedRetQty)
        {
            //If disposition code CreditOnly has been set now then delete pending registration records.
            DispositionAction dispositionAction = ReturnDispositionCode::find(salesLine.ReturnDispositionCodeId).DispositionAction;

            if (dispositionAction == DispositionAction::CreditOnly || !salesLine.ExpectedRetQty)
            {
                InventPendingQuantity::deletePendingRegistration(salesLine.SourceDocumentLine, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales return order line based on the registration that has been done.
    /// </summary>
    /// <remarks>
    /// This method is generally invoked when an arrival registration has been performed.
    /// </remarks>
    public void updateOnRegistration()
    {
        ttsbegin;

        super();

        if (wmsArrivalDetailTmp.InventQty > 0)
        {
            // Split the  if the full line quantity is not registered
            if (wmsArrivalDetailTmp.InventQty < this.lineQty())
            {
                SalesLine::splitReturnLine(salesLine.InventTransId, -(this.lineQty() - wmsArrivalDetailTmp.InventQty));

                //Delete the remaining pending registration for the sales line, because the pending registration quantity has been split into a new line.
                InventPendingQuantity::deletePendingRegistration(salesLine.SourceDocumentLine, true);
            }

            //Update status and disposition code on the original return order line.
            salesLine = SalesLine::findInventTransId(salesLine.InventTransId,true);
            salesLine.ReturnStatus              = ReturnStatusLine::Registered;
            salesLine.ReturnDispositionCodeId   = wmsArrivalDetailTmp.ReturnDispositionCodeId;
            salesLine.ReturnArrivalDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            salesLine.SalesQty                  = salesLine.ExpectedRetQty;
            salesLine.RemainSalesPhysical       = salesLine.SalesQty;
            //
            salesLine.update();

            // Create counter sales line if item is to be returned to customer
            DispositionAction dispositionAction = ReturnDispositionCode::find(wmsArrivalDetailTmp.ReturnDispositionCodeId).DispositionAction;
            if (dispositionAction == DispositionAction::ReturnToCust)
            {
                salesLine.ReturnDispositionCodeId = wmsArrivalDetailTmp.ReturnDispositionCodeId;
                salesLine.createReturnMarkupTrans(salesLine.salesTable());
                salesLine.createReturnReservationLineNonStocked();
            }

            //Update SalesTable status
            SalesTable salesTable = salesLine.salesTable(true);
            if (salesTable.ReturnStatus == ReturnStatusHeader::Created)
            {
                salesTable.ReturnStatus = ReturnStatusHeader::Open;
                if (ReturnOrderHasRegisteredLineCalcEstimateFlight::instance().isEnabled())
                {
                    salesTable.setEstimate();
                }
                salesTable.update();
            }
        }
        else
        if (wmsArrivalDetailTmp.InventQty < 0)
        {
            salesLine.returnLineArrivalUpdate(wmsArrivalDetailTmp.InventQty
                , 0             // Non-stocked catch weight items are not supported.
                );
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given quantity can be registered.
    /// </summary>
    /// <param name="_qtyToRegister">
    /// The quantity to register.
    /// </param>
    /// <returns>
    /// true if the quantity can be registered; otherwise, false.
    /// </returns>
    public boolean validateRegister(UnitQty _qtyToRegister)
    {
        boolean ok = super(_qtyToRegister);

        if (ok
            && _qtyToRegister > this.lineQty())
        {
            //Quantity exceeds the expected return quantity.
            ok = checkFailed(strFmt("@SYS323246", salesLine.SalesId));
        }

        if (ok
            &&_qtyToRegister > 0
            && !this.parmWMSArrivalDetailTmp().ReturnDispositionCodeId)
        {
            //Disposition code is missing for the line.
            ok = checkFailed(strFmt("@SYS323247", salesLine.SalesId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesReturnNonStockedRegistrationHelper construct()
    {
        return new SalesReturnNonStockedRegistrationHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>