<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerTransactionsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for report <c>CustLedgerTransactions_CN</c>
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustLedgerTransactionsContract_CN)),
    SRSReportQueryAttribute(queryStr(CustLedgerTransactions_CN))
]
public class CustLedgerTransactionsDP_CN extends SRSReportDataProviderBase
{
    #define.Dash('-')

    CustLedgerTransactionsContract_CN contract;
    CustLedgerTransactionsTmp_CN      custLedgerTransactionsTmp_CN;
    TransDate                         fromPeriod;
    TransDate                         toPeriod;
    Map                               openingBalancesMap;
    Map                               balancesMap;
    Map                               periodBeginningBalanceCalculationMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePeriodOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the period opening balance.
    /// </summary>
    /// <param name="_custAccount">
    /// Customer account.
    /// </param>
    /// <param name="_postingProfile">
    /// Posting profile.
    /// </param>
    /// <param name="_mainAccountNum">
    /// Main account number.
    /// </param>
    /// <param name="_transDate">
    /// Trans date.
    /// </param>
    private void calculatePeriodOpeningBalance(
        CustAccount         _custAccount,
        CustPostingProfile  _postingProfile,
        MainAccountNum      _mainAccountNum,
        TransDate           _transDate)
    {
        str         keyword;
        str         keywordCalculation;
        AmountCur   openningBalance;
        CustTrans   custTrans;
        TransDate   startDate;
        int         yearCur = year(_transDate);;

        keyword = strFmt('%1-%2-%3', _mainAccountNum, _custAccount, yearCur);
        keywordCalculation = strFmt('%1-%2-%3-%4', _mainAccountNum, _custAccount, _postingProfile, yearCur);

        if (yearCur == year(fromPeriod))
        {
            startDate = fromPeriod;
        }
        else
        {
            startDate = mkDate(1, 1, yearCur);
        }

        if (!periodBeginningBalanceCalculationMap.exists(keywordCalculation))
        {
            if (openingBalancesMap.exists(keyword))
            {
                openningBalance = openingBalancesMap.lookup(keyword);
            }

            select sum(AmountMST) from custTrans
                where  custTrans.AccountNum     == _custAccount
                    && custTrans.PostingProfile == _postingProfile
                    && custTrans.TransDate      <  startDate;

            openningBalance += custTrans.AmountMST;

            openingBalancesMap.insert(keyword, openningBalance);
            periodBeginningBalanceCalculationMap.insert(keywordCalculation, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets balances from map based on the Main account and Account num.
    /// </summary>
    /// <param name="_mainAccount">
    /// The Main account parameter.
    /// </param>
    /// <param name="_accountNum">
    /// The Account Num parameter.
    /// </param>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountMST getBalances(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum)
    {
        if (balancesMap.exists(strFmt('%1-%2', _mainAccount,_accountNum)))
        {
            return balancesMap.lookup(strFmt('%1-%2', _mainAccount,_accountNum));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustLedgerTransactionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the report data buffer.
    /// </summary>
    /// <returns>
    /// The tmp table buffer to report.
    /// </returns>
    [ SRSReportDataSetAttribute(tableStr(CustLedgerTransactionsTmp_CN))]
    public CustLedgerTransactionsTmp_CN getCustLedgerTransactionsTmp_CN()
    {
        return custLedgerTransactionsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the balances map and get the amount for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The Main Account parameter.
    /// </param>
    /// <returns>
    /// The amount for the main account.
    /// </returns>
    private AmountMST getMainAccountBalances(MainAccountNum _mainAccount)
    {
        AmountMST totalMainAccountBalances;

        MapEnumerator mapEnum = balancesMap.getEnumerator();

        while (mapEnum.moveNext())
        {
            if (strContains( mapEnum.currentKey(), _mainAccount))
            {
                totalMainAccountBalances += mapEnum.currentValue();
            }
        }

        return totalMainAccountBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the opening balance of customer account per main account in a map.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main Ledger Account Number.
    /// </param>
    /// <param name="_accountNum">
    /// Customer Acount Number.
    /// </param>
    /// <param name="_year">
    /// Current year.
    /// </param>
    /// <param name="_balancesMap">
    /// Map to be looked up.
    /// </param>
    /// <returns>
    /// The balance amount of the particular customer.
    /// </returns>
    private AmountMST getOpeningBalanceForAccount(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum,
        int            _year,
        Map            _balancesMap)
    {
        if (_balancesMap.exists(strFmt('%1-%2-%3', _mainAccount, _accountNum, _year)))
        {
            return _balancesMap.lookup(strFmt('%1-%2-%3', _mainAccount, _accountNum, _year));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates the balances map and get the total amonunt for all accounts.
    /// </summary>
    /// <returns>
    /// The total amount.
    /// </returns>
    private AmountMST getTotalBalances()
    {
        AmountMST totalMainAccountBalances;

        MapEnumerator mapEnum = balancesMap.getEnumerator();

        while (mapEnum.moveNext())
        {
            totalMainAccountBalances += mapEnum.currentValue();
        }

        return totalMainAccountBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialzes the from date and to date.
    /// </summary>
    /// <param name="_contract">
    /// The report contract.
    /// </param>
    private void initializeDate(CustLedgerTransactionsContract_CN _contract)
    {
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate())
        {
            fromPeriod      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate();
        }
        else
        {
            fromPeriod      = LedgerFiscalCalendar::currentLedgePeriod_CN().StartDate;
        }
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate())
        {
            toPeriod      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate();
        }
        else
        {
            toPeriod      = LedgerFiscalCalendar::currentLedgePeriod_CN().EndDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalancesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates data in balances map.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account parameter.
    /// </param>
    /// <param name="_accountNum">
    /// The Account num parameter.
    /// </param>
    /// <param name="_year">
    /// The Year value parameter.
    /// </param>
    /// <param name="_amount">
    /// The Amount to be inserted.
    /// </param>
    private void insertBalancesMap(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum,
        int            _year,
        AmountMSt      _amount)
    {
        if (balancesMap.exists(strFmt('%1-%2', _mainAccount,_accountNum)))
        {
            balancesMap.insert(
                strFmt('%1-%2', _mainAccount,_accountNum),
                balancesMap.lookup(strFmt('%1-%2', _mainAccount,_accountNum)) + _amount);
        }
        else
        {
            balancesMap.insert(
                strFmt('%1-%2', _mainAccount,_accountNum),
                this.getOpeningBalanceForAccount(_mainAccount,_accountNum,_year, openingBalancesMap)
                + _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpCustLedgerTransactions_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>CustLedgerTransactionsTmp_CN</c> table.
    /// </summary>
    /// <param name="custLedgerTransactionsTmpLocal_CN">
    /// The <c>CustLedgerTransactionsTmp_CN</c> table buffer to be inserted.
    /// </param>
    private void insertIntoTmpCustLedgerTransactions_CN(
        CustLedgerTransactionsTmp_CN custLedgerTransactionsTmpLocal_CN)
    {
        custLedgerTransactionsTmp_CN.AccountName        = custLedgerTransactionsTmpLocal_CN.AccountName;
        custLedgerTransactionsTmp_CN.AccountNum         = custLedgerTransactionsTmpLocal_CN.AccountNum;
        custLedgerTransactionsTmp_CN.MainAccountName    = custLedgerTransactionsTmpLocal_CN.MainAccountName;
        custLedgerTransactionsTmp_CN.MainAccountNum     = custLedgerTransactionsTmpLocal_CN.MainAccountNum;
        custLedgerTransactionsTmp_CN.Debit              = custLedgerTransactionsTmpLocal_CN.Debit;
        custLedgerTransactionsTmp_CN.Credit             = custLedgerTransactionsTmpLocal_CN.Credit;
        custLedgerTransactionsTmp_CN.Voucher            = custLedgerTransactionsTmpLocal_CN.Voucher;
        custLedgerTransactionsTmp_CN.Description        = custLedgerTransactionsTmpLocal_CN.Description;
        custLedgerTransactionsTmp_CN.Year               = custLedgerTransactionsTmpLocal_CN.Year;
        custLedgerTransactionsTmp_CN.Month              = custLedgerTransactionsTmpLocal_CN.Month;
        custLedgerTransactionsTmp_CN.Day                = custLedgerTransactionsTmpLocal_CN.Day;
        custLedgerTransactionsTmp_CN.PeriodLabel        = custLedgerTransactionsTmpLocal_CN.PeriodLabel;
        custLedgerTransactionsTmp_CN.TransDate          = custLedgerTransactionsTmpLocal_CN.TransDate;
        custLedgerTransactionsTmp_CN.Balance            = this.getBalances(
                                                            custLedgerTransactionsTmpLocal_CN.MainAccountNum,
                                                            custLedgerTransactionsTmpLocal_CN.AccountNum);
        custLedgerTransactionsTmp_CN.PeriodLabel        = custLedgerTransactionsTmpLocal_CN.PeriodLabel;
        custLedgerTransactionsTmp_CN.AccountBalance     = this.getMainAccountBalances(
                                                          custLedgerTransactionsTmpLocal_CN.MainAccountNum);
        custLedgerTransactionsTmp_CN.MainAccountBalance = this.getTotalBalances();
        custLedgerTransactionsTmp_CN.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAndInsertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the logic for report and inserts data into the temp table.
    /// </summary>
    /// <param name="custLedgerTransactionsTmpLocal_CN">
    /// The <c>CustLedgerTransactionsTmp_CN</c> table buffer.
    /// </param>
    private void processAndInsertData(CustLedgerTransactionsTmp_CN  custLedgerTransactionsTmpLocal_CN)
    {
        CustLedgerTransactionsTmp_CN  custLedgerTransactionsTmpLocal_CNTemp;
        int                           lastYear;
        int                           yearCounter = 0;
        boolean                       isFiscalYearChanged;

        custLedgerTransactionsTmpLocal_CNTemp = custLedgerTransactionsTmpLocal_CN;

        while select * from custLedgerTransactionsTmpLocal_CN
            order by custLedgerTransactionsTmpLocal_CN.Year,
                custLedgerTransactionsTmpLocal_CN.MainAccountNum,
                custLedgerTransactionsTmpLocal_CN.AccountNum,
                custLedgerTransactionsTmpLocal_CN.TransDate,
                custLedgerTransactionsTmpLocal_CN.Voucher
             where custLedgerTransactionsTmpLocal_CN.TransDate >= fromPeriod
        {
            isFiscalYearChanged = custLedgerTransactionsTmpLocal_CN.Year != lastYear ? true :  false;

            if (isFiscalYearChanged)
            {
                balancesMap = new Map(Types::String, Types::Real);
            }

            this.insertBalancesMap(
                custLedgerTransactionsTmpLocal_CN.MainAccountNum,
                custLedgerTransactionsTmpLocal_CN.AccountNum,
                custLedgerTransactionsTmpLocal_CN.Year,
                custLedgerTransactionsTmpLocal_CN.Debit
                + custLedgerTransactionsTmpLocal_CN.Credit) ;

            this.insertIntoTmpCustLedgerTransactions_CN(custLedgerTransactionsTmpLocal_CN);

            lastYear = custLedgerTransactionsTmpLocal_CN.Year;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                               query;
        QueryRun                            queryRun;
        CustLedgerTransactionsTmp_CN        custLedgerTransactionsTmpLocal_CN;
        String255                           fromPeriodLabel;
        String255                           toPeriodLabel;
        boolean                             isVoucherCNUsed;
        CustTable                           custTable;
        CustTrans                           custTrans;
        GeneralJournalEntry_W               generalJournalEntryW;
        MainAccount                         mainAccount;
        LedgerDimensionDefaultAccount       summaryAccount;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherEntry;
        VoucherJournal                      voucher;

        openingBalancesMap = new Map(Types::String, Types::Real);
        periodBeginningBalanceCalculationMap = new Map(Types::String, Types::Real);

        contract = this.parmDataContract() as CustLedgerTransactionsContract_CN;

        fromPeriodLabel = contract.parmLedgerFiscalPeriodNameContract_CN().parmFromPeriod();
        toPeriodLabel   = contract.parmLedgerFiscalPeriodNameContract_CN().parmToPeriod();
        isVoucherCNUsed = LedgerParameters::find().ChineseVoucher_CN;
        this.initializeDate(contract);

        query = this.parmQuery();
        query = CustLedgerTransactionsDP_CN::initQueryByDataContract(query, contract);
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            custTable               = queryRun.get(tableNum(CustTable));
            custTrans               = queryRun.get(tableNum(CustTrans));
            subledgerVoucherEntry   = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW    = queryRun.get(tableNum(GeneralJournalEntry_W));

            if (isVoucherCNUsed)
            {
                voucher = generalJournalEntryW.Voucher_CN;
            }
            else
            {
                voucher = custTrans.Voucher;
            }

            summaryAccount = CustLedgerAccounts::summaryLedgerDimension(
                                custTable.AccountNum,
                                custTrans.PostingProfile);

            mainAccount    = MainAccount::find(
                                DimensionAttributeValueCombination::find(summaryAccount).MainAccount);

            //initialize the beginning balance
            this.calculatePeriodOpeningBalance(custTable.AccountNum, custTrans.PostingProfile, mainAccount.MainAccountId, custTrans.TransDate);

            custLedgerTransactionsTmpLocal_CN.AccountNum      = custTable.AccountNum;
            custLedgerTransactionsTmpLocal_CN.AccountName     = DirPartyTable::getName(custTable.Party);
            custLedgerTransactionsTmpLocal_CN.MainAccountNum  = mainAccount.MainAccountId;
            custLedgerTransactionsTmpLocal_CN.MainAccountName = mainAccount.localizedName();
            custLedgerTransactionsTmpLocal_CN.PeriodLabel     = fromPeriodLabel + #Dash + toPeriodLabel;
            custLedgerTransactionsTmpLocal_CN.Voucher         = voucher;

            if (custTrans.AmountMST >= 0 || (custTrans.AmountMST < 0 && custTrans.Correct))
            {
                custLedgerTransactionsTmpLocal_CN.Debit  = custTrans.AmountMST;
                custLedgerTransactionsTmpLocal_CN.Credit = 0;
            }
            else
            {
                custLedgerTransactionsTmpLocal_CN.Debit  = 0;
                custLedgerTransactionsTmpLocal_CN.Credit = custTrans.AmountMST;
            }

            custLedgerTransactionsTmpLocal_CN.Balance     = 0;
            custLedgerTransactionsTmpLocal_CN.Year        = DateTimeUtil::year(
                                                                DateTimeUtil::newDateTime(
                                                                custTrans.TransDate, 0));
            custLedgerTransactionsTmpLocal_CN.Month       = DateTimeUtil::month(
                                                                DateTimeUtil::newDateTime(
                                                                custTrans.TransDate, 0));
            custLedgerTransactionsTmpLocal_CN.Day         = DateTimeUtil::day(
                                                                DateTimeUtil::newDateTime(
                                                                custTrans.TransDate, 0));
            custLedgerTransactionsTmpLocal_CN.Description = custTrans.Txt;
            custLedgerTransactionsTmpLocal_CN.TransDate   = custTrans.TransDate;
            custLedgerTransactionsTmpLocal_CN.insert();
        }

        this.processAndInsertData(custLedgerTransactionsTmpLocal_CN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    public static Query initQueryByDataContract(
        Query                                   _query,
        CustLedgerTransactionsContract_CN      _contract)
    {
        QueryBuildDataSource        custTransQBDS;
        QueryBuildDataSource        generalJournalAccountEntryQBDS;

        CustPostingProfile          fromPostingProfile;
        CustPostingProfile          toPostingProfile;
        TransDate                   fromPeriod;
        TransDate                   toPeriod;

        custTransQBDS = _query.dataSourceTable(tableNum(CustTrans));

        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate())
        {
            fromPeriod      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate();
        }
        else
        {
            fromPeriod      = LedgerFiscalCalendar::currentLedgePeriod_CN().StartDate;
        }
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate())
        {
            toPeriod      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate();
        }
        else
        {
            toPeriod      = LedgerFiscalCalendar::currentLedgePeriod_CN().EndDate;
        }
        fromPostingProfile = _contract.parmFromPostingProfile();
        toPostingProfile   = _contract.parmToPostingProfile();

        SysQuery::findOrCreateRange(
            custTransQBDS,
            fieldNum(CustTrans, TransDate)).value(
            SysQuery::range(fromPeriod, toPeriod));

        SysQuery::findOrCreateRange(
            custTransQBDS,
            fieldNum(CustTrans, PostingProfile)).value(
            SysQuery::range(fromPostingProfile, toPostingProfile));

        generalJournalAccountEntryQBDS = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
