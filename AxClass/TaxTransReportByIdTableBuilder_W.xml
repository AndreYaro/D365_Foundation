<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportByIdTableBuilder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Country customization extension of the base class.
/// </summary>
class TaxTransReportByIdTableBuilder_W extends TaxTransReportByIdTableBuilder
{
    // <GMY>
    boolean     isMY;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // </GMY>

    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransReportByIdTableBuilder_W construct()
    {
        TaxTransReportByIdTableBuilder_W tableBuilder =  new TaxTransReportByIdTableBuilder_W();
        tableBuilder.initialize();
        return tableBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        // <GMY>
        isMY = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTmpTaxReportByIdForInsertInTmpTaxReportById</Name>
				<Source><![CDATA[
    protected TmpTaxReportById selectTmpTaxReportByIdForInsertInTmpTaxReportById(TmpTaxReportById _tmpTaxReportById, TaxReportField _taxReportField, TaxReportLayout _taxReportLayout, TaxTrans _taxTrans)
    {
        // <GJP>
        // Check the tax report layout was Japan and tax value was not blank(Tax value need to be grouped by in outer loop the TaxTrans)
        if (TaxTransReport_JP::isTaxValueMatched(_taxReportLayout, _taxTrans.TaxValue))
        {
            _tmpTaxReportById = TaxTransReport_JP::matchTaxValueSelect(_tmpTaxReportById, _taxReportLayout, _taxTrans.TaxValue);
        }
        else
        {
            // </GJP>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxReportField, _taxReportLayout, _taxTrans);
            // <GJP>
        }
        // </GJP>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesOnRecordToBeInsertedByInsertInTmpTaxReportById</Name>
				<Source><![CDATA[
    protected TmpTaxReportById setValuesOnRecordToBeInsertedByInsertInTmpTaxReportById(
        TmpTaxReportById    _tmpTaxReportById,
        TaxReportField      _taxReportField,
        AmountMST           _amount,
        Amount              _taxInCostPrice,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans)
    {
        // <GJP>
        // The field 'TaxValue_JP' should be initialized for the temporary table TaxReportField when the 'TaxValue_JP' was group by on outer loop.
        if (TaxTransReport_JP::isTaxValueMatched(_taxReportLayout, _taxTrans.TaxValue))
        {
            _tmpTaxReportById = TaxTransReport_JP::setTaxValue(_tmpTaxReportById, _taxTrans.taxValue);
            _tmpTaxReportById = TaxTransReport_JP::setTaxType_JP(_tmpTaxReportById, _taxTrans);
        }
        // </GJP>

        _tmpTaxReportById = super(_tmpTaxReportById, _taxReportField, _amount, _taxInCostPrice, _taxReportLayout, _taxTrans);

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldBaseIncoming</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldBaseIncoming(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldBaseIncomingDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseIncomingDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>
        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxIncoming</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxIncoming(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldTaxIncomingDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxIncomingDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldBaseOutgoing</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldBaseOutgoing(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldBaseOutgoingDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseOutgoingDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxOutgoing</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxOutgoing(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldTaxOutgoingDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxOutgoingDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxFreeBuy</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxFreeBuy(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldTaxFreeBuyDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeBuyDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxFreeSales</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxFreeSales(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY && _isDebit && _taxTable.RepFieldTaxFreeSalesDebitNote_MY)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeSalesDebitNote_MY, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else if (!isMY || (!_isCredit && !_isDebit))
        {
            // </GMY>
            _tmpTaxReportById = super(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
            // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForUseTax</Name>
				<Source><![CDATA[
    protected TmpTaxReportById insertInTmpTaxReportByIdForUseTax(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        // <GMY>
        if (isMY)
        {
            if (_isCredit
                && _taxTable.RepFieldBaseUseTaxCreditNote)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(
                    _tmpTaxReportById,
                    _taxTrans,
                    _taxTable.RepFieldBaseUseTaxCreditNote,
                    _taxTable,
                    _taxReportCollection,
                    _taxReportLayout,
                    _taxTrans.TaxBaseAmount,
                    _taxTrans.TaxInCostPriceMST);
            }
            else
            {
                if (_isDebit
                    && _taxTable.RepFieldBaseUseTaxDebitNote_MY)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                        _tmpTaxReportById,
                        _taxTrans,
                        _taxTable.RepFieldBaseUseTaxDebitNote_MY,
                        _taxTable,
                        _taxReportCollection,
                        _taxReportLayout,
                        _taxTrans.TaxBaseAmount,
                        _taxTrans.TaxInCostPriceMST);
                }
                else
                {
                    if (_taxTable.RepFieldBaseUseTax)
                    {
                        _tmpTaxReportById = this.insertInTmpTaxReportById(
                            _tmpTaxReportById,
                            _taxTrans,
                            _taxTable.RepFieldBaseUseTax,
                            _taxTable,
                            _taxReportCollection,
                            _taxReportLayout,
                            _taxTrans.TaxBaseAmount,
                            _taxTrans.TaxInCostPriceMST);
                    }
                }
            }

            if (_isCredit
                && _taxTable.RepFieldBaseUseTaxOffsetCreditNote)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(
                    _tmpTaxReportById,
                    _taxTrans,
                    _taxTable.RepFieldBaseUseTaxOffsetCreditNote,
                    _taxTable,
                    _taxReportCollection,
                    _taxReportLayout,
                    -1 * _taxTrans.TaxBaseAmount);
            }
            else
            {
                if (_isDebit
                    && _taxTable.RepFieldBaseUseTaxOffsetDebitNote_MY)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                        _tmpTaxReportById,
                        _taxTrans,
                        _taxTable.RepFieldBaseUseTaxOffsetDebitNote_MY,
                        _taxTable,
                        _taxReportCollection,
                        _taxReportLayout,
                        -1 * _taxTrans.TaxBaseAmount);
                }
                else
                {
                    if (_taxTable.RepFieldBaseUseTaxOffset)
                    {
                        _tmpTaxReportById = this.insertInTmpTaxReportById(
                            _tmpTaxReportById,
                            _taxTrans,
                            _taxTable.RepFieldBaseUseTaxOffset,
                            _taxTable,
                            _taxReportCollection,
                            _taxReportLayout,
                            -1 * _taxTrans.TaxBaseAmount);
                    }
                }
            }

            if (_isCredit
                &&_taxTable.RepFieldUseTaxCreditNote)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(
                    _tmpTaxReportById,
                    _taxTrans,
                    _taxTable.RepFieldUseTaxCreditNote,
                    _taxTable,
                    _taxReportCollection,
                    _taxReportLayout,
                    _taxTrans.TaxAmount,
                    _taxTrans.TaxInCostPriceMST);
            }
            else
            {
                if (_isDebit
                    && _taxTable.RepFieldUseTaxDebitNote_MY)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                        _tmpTaxReportById,
                        _taxTrans,
                        _taxTable.RepFieldUseTaxDebitNote_MY,
                        _taxTable,
                        _taxReportCollection,
                        _taxReportLayout,
                        _taxTrans.TaxAmount,
                        _taxTrans.TaxInCostPriceMST);
                }
                else
                {
                    if (_taxReportLayout == TaxReportLayout::Belgium)  //In case it's a credit note and the UseTaxCreditNote Field
                    {
                        //for the tax code is empty, then it shouldn't be reported
                        if (! _isCredit && _taxTable.RepFieldUseTax)
                        {
                            _tmpTaxReportById = this.insertInTmpTaxReportById(
                                _tmpTaxReportById,
                                _taxTrans,
                                _taxTable.RepFieldUseTax,
                                _taxTable,
                                _taxReportCollection,
                                _taxReportLayout,
                                _taxTrans.TaxAmount,
                                _taxTrans.TaxInCostPriceMST);
                        }
                    }
                    else if (_taxReportLayout == TaxReportLayout::Germany)
                    {
                        if (_taxTable.RepFieldUseTax)
                        {
                            _tmpTaxReportById = this.insertInTmpTaxReportById(
                                _tmpTaxReportById,
                                _taxTrans, _taxTable.RepFieldUseTax,
                                _taxTable,
                                _taxReportCollection,
                                _taxReportLayout,
                                -1 * _taxTrans.TaxAmount);
                        }
                    }
                    else
                    {
                        if (_taxTable.RepFieldUseTax)
                        {
                            _tmpTaxReportById = this.insertInTmpTaxReportById(
                                _tmpTaxReportById,
                                _taxTrans,
                                _taxTable.RepFieldUseTax,
                                _taxTable,
                                _taxReportCollection,
                                _taxReportLayout,
                                _taxTrans.TaxAmount,
                                _taxTrans.TaxInCostPriceMST);
                        }
                    }
                }
            }

            if (_isCredit
                && _taxTable.RepFieldUseTaxOffsetCreditNote)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(
                    _tmpTaxReportById,
                    _taxTrans,
                    _taxTable.RepFieldUseTaxOffsetCreditNote,
                    _taxTable,
                    _taxReportCollection,
                    _taxReportLayout,
                    -1 * _taxTrans.TaxAmount);
            }
            else
            {
                if (_isDebit
                    && _taxTable.RepFieldUseTaxOffsetDebitNote_MY)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                        _tmpTaxReportById,
                        _taxTrans,
                        _taxTable.RepFieldUseTaxOffsetDebitNote_MY,
                        _taxTable,
                        _taxReportCollection,
                        _taxReportLayout,
                        -1 * _taxTrans.TaxAmount);
                }
                else
                {
                    if (_taxReportLayout == TaxReportLayout::Belgium)    //In case it's a credit note and the UseTaxOffsetCreditNote Field
                    {
                        //for the tax code is empty, then it shouldn't be reported
                        if ( !_isCredit
                            && _taxTable.RepFieldUseTaxOffset)
                        {
                            _tmpTaxReportById = this.insertInTmpTaxReportById(
                                _tmpTaxReportById,
                                _taxTrans,
                                _taxTable.RepFieldUseTaxOffset,
                                _taxTable,
                                _taxReportCollection,
                                _taxReportLayout,
                                1 * -_taxTrans.TaxAmount);
                        }
                    }
                    else
                    {
                        if (_taxReportLayout != TaxReportLayout::Norway
                            || _isCredit)
                        {
                            if (_taxTable.RepFieldUseTaxOffset)
                            {
                                if (_taxReportLayout == TaxReportLayout::Germany)
                                {
                                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                                        _tmpTaxReportById,
                                        _taxTrans,
                                        _taxTable.RepFieldUseTaxOffset,
                                        _taxTable,
                                        _taxReportCollection,
                                        _taxReportLayout,
                                        -1 * _taxTrans.TaxAmount,
                                        _taxTrans.TaxInCostPriceMST);
                                }
                                else
                                {
                                    _tmpTaxReportById = this.insertInTmpTaxReportById(
                                        _tmpTaxReportById,
                                        _taxTrans,
                                        _taxTable.RepFieldUseTaxOffset,
                                        _taxTable,
                                        _taxReportCollection,
                                        _taxReportLayout,
                                        -1 * _taxTrans.TaxAmount);
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
        // </GMY>
            _tmpTaxReportById = super(
                _taxTrans,
                _tmpTaxReportById,
                _taxTable,
                _taxReportCollection,
                _taxReportLayout,
                _isCredit,
                _isDebit);
        // <GMY>
        }
        // </GMY>

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>