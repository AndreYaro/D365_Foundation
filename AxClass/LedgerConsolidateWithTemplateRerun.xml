<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateWithTemplateRerun</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerConsolidateWithTemplateRerun extends RunBaseBatch implements BatchRetryable
{
    const int CurrentVersion = 1;

    LedgerConsolidateHist ledgerConsHist;
    RecId ledgerConsHistRecId;

    private SysInstrumentationLogger logger;
    private LedgerConsolidatePerformanceMonitor monitor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        ledgerConsHist = _args.record() as LedgerConsolidateHist;

        this.parmLedgerConsolidateHistRecId(ledgerConsHist.RecId);
        ledgerConsHist.selectForUpdate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerConsolidateHistRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RecId parmLedgerConsolidateHistRecId(RecId _ledgerConsHistRecId = ledgerConsHistRecId)
    {
        ledgerConsHistRecId = _ledgerConsHistRecId;

        return ledgerConsHistRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCompanyForRerun</Name>
				<Source><![CDATA[
    private container getSourceCompanyForRerun(RefRecId _targetTemplateId, DataAreaId _targetSourceCompany)
    {
        container sourceLegalEntities;
        LedgerConsolidateTemplateLegalEntity consSourceLegalEntity;

        select firstonly consSourceLegalEntity
            where consSourceLegalEntity.ConsolidateTemplate == _targetTemplateId
                && consSourceLegalEntity.SourceCompany == _targetSourceCompany;

        sourceLegalEntities = conIns(sourceLegalEntities, 1, [consSourceLegalEntity.SourceCompany, consSourceLegalEntity.Proportion, consSourceLegalEntity.ProfitLossBalance, '']);

        return sourceLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTask</Name>
				<Source><![CDATA[
    private void createBatchTask()
    {
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        ttsbegin;

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();

            batchHeader.parmCaption("@GeneralLedger:LedgerConsolidateRerun");

            this.unpack(this.pack());
            this.batchInfo().parmCaption("@GeneralLedger:LedgerConsolidateRerun");

            batchHeader.addRuntimeTask(this, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerConsolidateHist selectedLedgerConsHist = LedgerConsolidateHist::find(ledgerConsHistRecId);

        if (selectedLedgerConsHist == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerConsolidateWithTemplateRerun));
        monitor = LedgerConsolidatePerformanceMonitor::construct(logger);

        monitor.parmConsolidationId(ledgerConsHistRecId);

        using (SysInstrumentationActivityContext context = monitor.enterRerunConsolidation())
        {
            RefRecId selectedTemplateId = selectedLedgerConsHist.ConsolidateTemplate;
            LedgerConsolidateTemplate targetTemplate = LedgerConsolidateTemplate::find(selectedTemplateId);
            container sourceLegalEntities = this.getSourceCompanyForRerun(selectedLedgerConsHist.ConsolidateTemplate, selectedLedgerConsHist.CompanyIdOrigin);
            container sourceEliminations = LedgerConsolidateTemplateElimination::getSourceEliminations(selectedTemplateId);

            LedgerConsolidateTemplateDimension::copySourceDimensions(selectedTemplateId, curExt());
            LedgerConsolidateTemplateCurrency::copySourceCurrencyConversions(selectedTemplateId, curExt());

            LedgerConsolidate ledgerConsolidate = LedgerConsolidate::newLedgerConsolidate(LedgerConsMode::Online);

            ledgerConsolidate.fromDate(selectedLedgerConsHist.FromDate);
            ledgerConsolidate.toDate(selectedLedgerConsHist.ToDate);
            ledgerConsolidate.descriptionNote(selectedLedgerConsHist.Description);
            ledgerConsolidate.parmLedgerConsolidateTemplateId(selectedTemplateId);

            ledgerConsolidate.companies(sourceLegalEntities);
            ledgerConsolidate.parmEliminations(sourceEliminations);

            ledgerConsolidate.fromAccount(targetTemplate.FromAccount);
            ledgerConsolidate.toAccount(targetTemplate.ToAccount);

            ledgerConsolidate.companyGroupAccounts(targetTemplate.UseConsolidateAccount);
            ledgerConsolidate.parmConsolidateAccountGroup(targetTemplate.ConsolidateAccountGroup);

            ledgerConsolidate.consolidationAmountSource(targetTemplate.ConsolidateAmountSource);
            ledgerConsolidate.consolidateAccountingCurrency(targetTemplate.ConsolidateAccountingCurrency);

            ledgerConsolidate.transferCurrent(targetTemplate.TransferCurrent);

            ledgerConsolidate.parmProcessMode(targetTemplate.ProcessMode);
            ledgerConsolidate.parmGlPostingDate(targetTemplate.GLPostingDate);
            ledgerConsolidate.parmReleaseDate(targetTemplate.ReleaseDate);

            ledgerConsolidate.transferBudget(targetTemplate.TransferBudget);
            ledgerConsolidate.fromModel(targetTemplate.FromBudgetModel);
            ledgerConsolidate.toModel(targetTemplate.ToBudgetModel);
            ledgerConsolidate.parmBudgetExchangeRateType(targetTemplate.BudgetExchangeRateType);

            ledgerConsolidate.parmProcessFullBalanceRebuild(true);
            ledgerConsolidate.parmInBatch(true);

            ledgerConsolidate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerConsolidateWithTemplateRerun rerunInstance = new LedgerConsolidateWithTemplateRerun();
        rerunInstance.initFromArgs(_args);
        rerunInstance.createBatchTask();

        info(strFmt("@SYS73254", "@GeneralLedger:LedgerConsolidateRerun"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GeneralLedger:LedgerConsolidateRerun";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [CurrentVersion, ledgerConsHistRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packedClass)
    {
        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, ledgerConsHistRecId] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>