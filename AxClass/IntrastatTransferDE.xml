<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferDE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transfers intrastat in Germany country context.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoDE)]
public class IntrastatTransferDE extends IntrastatTransfer implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour             _custInvoiceJour,
                                                          CustInvoiceTrans            _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat   _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat  _custInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = CustTable::find(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custInvoiceJour.InvoiceDate);
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat intrastat;

        intrastat = super(_custInvoiceJour, _custInvoiceTrans);

        if (intrastat.OrderType == IntrastatOrderType::Return)
        {
            //AX cannot determine if the item credited crossed the German border as a physical return or not.
            //Invoice will be transferred with 0 invoice amount as arrivals, if a commodity code is provided;
            //otherwise, it will be transferred as negative dispatches with the correction flag set.
            if (intrastat.IntrastatCommodity)
            {
                intrastat.StatisticalAdjustmentAmount   = intrastat.AmountMST;
                intrastat.AmountMST                     = 0;
                intrastat.InvoiceMarkupMST              = 0;
            }
            else
            {
                intrastat.Direction = IntrastatDirection::Export;
                intrastat.Correct   = NoYes::Yes;
                intrastat.OrderType = IntrastatOrderType::Correction;
                intrastat.Qty       = - abs(intrastat.Qty);
                intrastat.Weight    = - abs(intrastat.Weight);
                intrastat.AmountMST = - abs(intrastat.AmountMST);
                intrastat.Markup    = - abs(intrastat.Markup);
            }
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour             _vendInvoiceJour,
                                                          VendInvoiceTrans            _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat   _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat  _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = VendTable::find(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _vendInvoiceJour.InvoiceDate);
        }

        intrastat.State = _vendInvoiceTrans.DestState;
        intrastat.County = _vendInvoiceTrans.DestCounty;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(
        VendPackingSlipJour _vendPackingSlipJour,
        VendPackingSlipTrans _vendPackingSlipTrans,
        VendPackingSlipJour_Intrastat _vendPackingSlipJour_Intrastat = null,
        VendPackingSlipTrans_Intrastat _vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, _vendPackingSlipJour_Intrastat, _vendPackingSlipTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            intrastat.VatNum = VendTable::find(intrastat.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, intrastat.TransDate);
        }

        intrastat.State = _vendPackingSlipTrans.DestState;
        intrastat.County = _vendPackingSlipTrans.DestCounty;

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCustInvoiceJour</Name>
				<Source><![CDATA[
    void loadFromCustInvoiceJour(IntrastatDirection  _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                 CustInvoiceJour     custInvoiceJour)
    {
        super(_direction, custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromVendInvoiceJour</Name>
				<Source><![CDATA[
    void loadFromVendInvoiceJour(IntrastatDirection  _direction, // this direction only determines the dispatchID - not the intrastat reporting direction
                                 VendInvoiceJour     vendInvoiceJour)
    {
        super(_direction, vendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>