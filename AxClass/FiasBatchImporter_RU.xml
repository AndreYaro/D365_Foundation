<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiasBatchImporter_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;

/// <summary>
/// Handles construction of FIAS import dialog, transfers dialog data to 
/// actual process and handles overall flow of the operation.
/// </summary>
class FiasBatchImporter_RU extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase                       dialog;
    FileUploadBuild                     dialogFileUpload;
    DialogField                         dialogFullImport;
    DialogField                         dialogImportHouses;
    DialogField                         dialogImportRooms;
    protected Filename                  uploadFileName;
    protected str                       uploadFileURL;
    protected SharedServiceUnitFileID   uploadFileID;
    protected NoYes                     isFullImport;
    protected NoYes                     importHousesSteads;
    protected NoYes                     importRooms;
    List                                fiasFiles;
    List                                executions;
    LogisticsAddressImportVersionId_RU  versionId;
    Set                                 regionSet;
    boolean                             hasAddrObjFile;
    str                                 regionCode;

    private const int currentVersion = 1;

    private const str dialogGroupName = 'File path';
    private const str fileUploadName = 'FileUpload';
    private const str availableTypes = '.zip';
    private const str okButtonName = 'OkButton';
    
    private const str importFiasFull = 'FiasFullImportJob';
    private const str importFiasDelta = 'FiasDeltaImportJob';
    
    private const str addrObjectMark = 'AS_ADDROBJ';
    private const str housesMark = 'AS_HOUSE';
    private const str steadsMark = 'AS_STEAD';
    private const str roomsMark = 'AS_ROOM';
    
    private const str addrObjectEntityName = 'FiasAddressObjectEntity';
    private const str housesEntityName = 'FiasHouseEntity';
    private const str steadsEntityName = 'FiasSteadEntity';
    private const str roomsEntityName = 'FiasRoomEntity';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@FIAS:ImportFias";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup      dialogGroup;
        FormBuildControl formBuildControl;

        dialog = new DialogRunbase("@GLS105893", this);

        dialogGroup = dialog.addGroup(dialogGroupName);
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());
        
        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), fileUploadName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileTypesAccepted(availableTypes);
        dialogFileUpload.fileNameLabel("@SYS308842");
        
        dialogFullImport = dialog.addFieldValue(enumStr(NoYes), isFullImport);
        dialogFullImport.label("@FIAS:IsFullImport");
        
        dialogImportHouses = dialog.addFieldValue(enumStr(NoYes), importHousesSteads);
        dialogImportHouses.label("@FIAS:IncludesHouses");
        
        dialogImportRooms = dialog.addFieldValue(enumStr(NoYes), importRooms);
        dialogImportRooms.label("@FIAS:IncludesRooms");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    private void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, FileUploadName);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);

        this.setDialogOkButtonEnabled(dialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        /// Disables the dialog Ok button until the file upload is complete.
        FileUpload fileUpload = this.getFormControl(_dialog, FileUploadName);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);

        // Allows to overrive control methods
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Fld2_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean Fld2_1_modified()
    {
        Object control;
        boolean ret;

        control = dialog.formRun().controlCallingMethod();
        ret = control.modified();

        // Rooms cannot be added when there are no Houses
        if (ret)
        {
            if (control.value() == NoYes::Yes)
            {
                dialogImportRooms.enabled(true);
            }
            else
            {
                dialogImportRooms.value(NoYes::No);
                dialogImportRooms.enabled(false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    private void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, okButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns form control for supplied dialog by name
    /// </summary>
    /// <param name = "_dialog">Dialog object</param>
    /// <param name = "_controlName">Name of control</param>
    /// <returns></returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        FileUpload fileUpload = this.getFormControl(dialog, FileUploadName);
        FileUploadTemporaryStorageResult fileUploadResult = fileUpload.getFileUploadResult();

        if (fileUploadResult != null && fileUploadResult.getUploadStatus())
        {
            uploadFileURL = fileUploadResult.getDownloadUrl();
            uploadFileName = fileUploadResult.getFileName();
            uploadFileID = fileUploadResult.getFileId();
        }

        isFullImport = dialogFullImport.value();
        importHousesSteads = dialogImportHouses.value();
        importRooms = dialogImportRooms.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, uploadFileURL, uploadFileName, uploadFileID, isFullImport, importHousesSteads, importRooms];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case currentVersion:
                [version, uploadFileURL, uploadFileName, uploadFileID, isFullImport, importHousesSteads, importRooms] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ListEnumerator fileEnumerators;
        DMFDefinitionGroup definitionGroup = this.getDefinitionGroup();
        hasAddrObjFile = false;
        executions = new List(Types::String);

        try
        {
            List executionIds = new List(Types::String);

            ttsbegin;

            // Determine if source to target should happen on initial import based on if we are in batch or not.
            boolean isRunInBatch = this.parmInBatch();

            if (isRunInBatch)
            {
                // As batch job may start to run after long time, the file URL need to refresh to avoid expiration.
                this.refreshUploadFileURL();
            }

            // Unzipping loaded files
            fiasFiles = DataFileImportExportUtils_W::getUnzippedFiles(uploadFileURL, conNull());

            // Iterating through files
            fileEnumerators = fiasFiles.getEnumerator();
            while (fileEnumerators.moveNext())
            {
                SharedServiceUnitFileID     importFileId;
                DMFDefinitionGroupExecution execution;
                str                         targetEntityName;
                str                         importFileName;
                NoYes                       isTransformed;

                [importFileId, importFileName] = fileEnumerators.current();
                targetEntityName = this.getEntityFromFilename(importFileName);
                this.getOrVerifyVersionId(importFileName);

                // Apply transforms to XML
                if (strUpr(this.getExtention(importFileName)) == 'XML')
                {
                    DMFLocalFilePath transformedFile = this.applyTransforms(
                        importFileId,
                        definitionGroup,
                        targetEntityName);
                    isTransformed = NoYes::Yes;

                    importFileId = transformedFile;
                }
                else
                {
                    isTransformed = NoYes::No;
                }

                // Create execution.
                DMFExecutionId executionId = DMFUtil::setupNewExecution(definitionGroup.DefinitionGroupName);

                // Find execution
                execution = DMFDefinitionGroupExecution::find(
                    definitionGroup.DefinitionGroupName,
                    this.findDMFDefinitionGroupEntity(definitionGroup, targetEntityName).Entity,
                    executionId,
                    true);
                execution.FileFirstRowHeader = NoYes::Yes;
                execution.FilePath = importFileId;
                execution.IsTransformed = isTransformed;
                execution.ExecuteTargetStep = !isRunInBatch;
                execution.update();

                executions.addEnd(importFileId);
                executionIds.addEnd(executionId);
            }

            // Validating import files
            if (!this.validateData())
            {
                throw error("@FIAS:ImportValidationError");
            }

            // FIAS tables must be empty before import
            this.clearFiasTables();

            // Write cannot be called in an outer transaction scope, terminating transaction
            ttscommit;

            // Actual import
            ListEnumerator executionEnumerator = executionIds.getEnumerator();
            while (executionEnumerator.moveNext())
            {
                DMFExecutionId executionId = executionEnumerator.current();

                DMFQuickImportExport::doPGImport(
                    definitionGroup.DefinitionGroupName,
                    executionId,
                    !isRunInBatch);

                if (isRunInBatch)
                {
                    DMFDefinitionGroupExecution executionSourceToTarget;

                    update_recordset executionSourceToTarget
                        setting IsSelected = NoYes::Yes
                        where executionSourceToTarget.ExecutionId == executionId;

                    DMFWriteExecutionParameters executionParameters = DMFWriteExecutionParameters::construct();
                    executionParameters.parmSelectedData(NoYes::No);
                    executionParameters.parmErrorStatus(NoYes::No);

                    DMFExecution dmfExecution = DMFExecution::find(executionId, true);
                    Args args = new Args();
                    args.record(dmfExecution);
                    args.parmObject(executionParameters);
                    args.parmEnum(NoYes::No);

                    new MenuFunction(menuItemActionStr(DMFEntityWriterBatch), MenuItemType::Action).run(args);
                }
            }

            ttsbegin;

            // Validating post-import data
            if (!this.validatePostImportData())
            {
                throw error("@FIAS:PostImportValidationError");
            }
        
            // Setting variables
            regionSet = this.getRegionSet();
            regionCode = LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).CountryRegionId;
        
            // Start post-processing
            FiasImporter_RU::run(regionSet, regionCode, versionId, isFullImport, importHousesSteads, importRooms);

            // Logging operation
            this.createLogs();

            ttscommit;
        }
        finally
        {
            // Deleting files
            ListEnumerator execEnumerator = executions.getEnumerator();
            while (execEnumerator.moveNext())
            {
                this.deleteFile(execEnumerator.current());
            }
            this.deleteFile(uploadFileID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshUploadFileURL</Name>
				<Source><![CDATA[
    private void refreshUploadFileURL()
    {
        SharedServiceUnitNotFoundException sharedServiceUnitNotFoundException;
        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
        var strategy = new FileUploadTemporaryStorageStrategy();
        try
        {
            var uploadedBlobInfo = blobStorageService.GetData(
                uploadFileID,
                FileUploadTemporaryStorageStrategy::AzureStorageCategory,
                BlobUrlPermission::Read,
                System.TimeSpan::FromMinutes(strategy.getBlobLinkExpirationTimeSpanInMinutes()),
                false);

            uploadFileURL = uploadedBlobInfo.BlobLink;
        }
        catch (sharedServiceUnitNotFoundException)
        {
            if (sharedServiceUnitNotFoundException.get_Id() && sharedServiceUnitNotFoundException.get_Name())
            {
                // throw specific error message if the error is caused by expiration.
                throw error(strFmt('@ApplicationPlatform:FileUploadFileExpiredMessage', 
                    uploadFileName,
                    sharedServiceUnitNotFoundException.get_ExpirationDate().ToLocalTime().ToString()));
            }
            else
            {
                throw error(sharedServiceUnitNotFoundException.get_Message());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateData</Name>
				<Source><![CDATA[
    private boolean validateData()
    {
        boolean     ret;

        ret = true;

        if (!hasAddrObjFile)
        {
            ret = false;
        }

        if (isFullImport == NoYes::No
            && versionId <= this.getPreviousFiasVersion())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostImportData</Name>
				<Source><![CDATA[
    private boolean validatePostImportData()
    {
        boolean     ret;

        ret = true;

        if (importHousesSteads && !this.validateImportHouses())
        {
        ret = false;
        }

        if (importRooms && (!this.validateImportRooms() || !importHousesSteads))
        {
        ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinitionGroup</Name>
				<Source><![CDATA[
    private DMFDefinitionGroup getDefinitionGroup()
    {
        DMFDefinitionGroup definitionGroup;
        str defGroupName;

        if (isFullImport == NoYes::Yes)
        {
            defGroupName = importFiasFull;
        }
        else
        {
            defGroupName = importFiasDelta;
        }

        select firstonly definitionGroup
            where definitionGroup.DefinitionGroupName == defGroupName;

        return definitionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTransforms</Name>
				<Source><![CDATA[
    private DMFLocalFilePath applyTransforms(
        SharedServiceUnitFileID _uploadedStatement,
        DMFDefinitionGroup _definitionGroup,
        str _entityName)
    {
        DMFDefinitionGroupEntity definitionGroupEntity = this.findDMFDefinitionGroupEntity(_definitionGroup, _entityName);
        DMFExecutionId executionId = DMFUtil::setupNewExecution(_definitionGroup.DefinitionGroupName);

        DMFDefinitionGroupExecution executionGroup = DMFDefinitionGroupExecution::find(
            _definitionGroup.DefinitionGroupName,
            definitionGroupEntity.Entity,
            executionId,
            true);

        executionGroup.IsTransformed = NoYes::No;
        DMFLocalFilePath filePath = executionGroup.applyTransforms(_uploadedStatement);

        DMFExecution execution = DMFExecution::find(executionId, true);
        execution.delete();

        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFromFilename</Name>
				<Source><![CDATA[
    private str getEntityFromFilename(str fileName)
    {
        if (strContains(fileName, addrObjectMark))
        {
            hasAddrObjFile = true;
            return addrObjectEntityName;
        }
        if (strContains(fileName, housesMark))
        {
            return housesEntityName;
        }
        if (strContains(fileName, steadsMark))
        {
            return steadsEntityName;
        }
        if (strContains(fileName, roomsMark))
        {
            return roomsEntityName;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrVerifyVersionId</Name>
				<Source><![CDATA[
    private void getOrVerifyVersionId(str fileName)
    {
        str shortFileName = subStr(fileName, 1, 7);
        
        switch (shortFileName) 
        {
            case 'AS_ADDR':
                shortFileName = strReplace(fileName, 'AS_ADDROBJ_', '');
                break;
            case 'AS_HOUS':
                shortFileName = strReplace(fileName, 'AS_HOUSE_', '');
                break;
            case 'AS_STEA':
                shortFileName = strReplace(fileName, 'AS_STEAD_', '');
                break;
            case 'AS_ROOM':
                shortFileName = strReplace(fileName, 'AS_ROOM_', '');
                break;
        }

        if (versionId == 0)
        {
            versionId = str2int(subStr(shortFileName, 1, 8));
        }
        else
        {
            if (versionId != str2int(subStr(shortFileName, 1, 8)))
            {
                checkFailed("@FIAS:VersionValidationError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFile</Name>
				<Source><![CDATA[
    private void deleteFile(SharedServiceUnitFileID fileId)
    {
        FileUploadTemporaryStorageResult result =
                new FileUploadTemporaryStorageResult('', '', true, '', '', fileId);
        result.deleteResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtention</Name>
				<Source><![CDATA[
    private str getExtention(str fileName)
    {
        str path, name, extention;
        [path, name, extention] = fileNameSplit(fileName);

        return extention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegionSet</Name>
				<Source><![CDATA[
    private Set getRegionSet()
    {
        Set result = new Set(Types::String);
        FiasAddressObject addrObj;

        while select RegionCode from addrObj
            group by addrObj.RegionCode
            where addrObj.RegionCode != ''
        {
            result.add(addrObj.RegionCode);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDMFDefinitionGroupEntity</Name>
				<Source><![CDATA[
    private DMFDefinitionGroupEntity findDMFDefinitionGroupEntity(DMFDefinitionGroup _definitionGroup, str entityName)
    {
        DMFDefinitionGroupEntity definitionGroupEntity;
        DMFEntity dmfEntity;

        select RecId, Entity from definitionGroupEntity exists join dmfEntity
            where definitionGroupEntity.DefinitionGroup == _definitionGroup.DefinitionGroupName
                && definitionGroupEntity.Entity == entityName
                && dmfEntity.EntityName == definitionGroupEntity.Entity;

        if (!definitionGroupEntity)
        {
            throw error(strFmt("@DMF:DMFNoEntityExists", _definitionGroup.DefinitionGroupName));
        }

        return definitionGroupEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousFiasVersion</Name>
				<Source><![CDATA[
    private LogisticsAddressImportVersionId_RU getPreviousFiasVersion()
    {
        FiasImportLog_RU fiasImportLog;

        select firstonly fiasImportLog 
            order by fiasImportLog.FiasVersion desc;

        return fiasImportLog.FiasVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFiasTables</Name>
				<Source><![CDATA[
    private void clearFiasTables()
    {   
        FiasAddressObject fiasAddrObj;
        FiasHouse fiasHouse;
        FiasStead fiasStead;
        FiasRoom fiasRoom;

        delete_from fiasAddrObj;
        delete_from fiasHouse;
        delete_from fiasStead;
        delete_from fiasRoom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogs</Name>
				<Source><![CDATA[
    private void createLogs()
    {
        FiasImportLog_RU importLog;

        importLog.ImportDate = DateTimeUtil::getToday(Timezone::GMT_COORDINATEDUNIVERSALTIME);
        importLog.FiasVersion = versionId;
        importLog.Regions = this.getRegionSetStr();
        importLog.IsFullImport = isFullImport;
        importLog.HadSteadsAndHouses = importHousesSteads;
        importLog.HadRooms = importRooms;

        importLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegionSetStr</Name>
				<Source><![CDATA[
    private str getRegionSetStr()
    {
        str regionStr = '';

        if (isFullImport || !regionSet)
        {
            regionSet = this.getRegionSet();
        }
        SetEnumerator se = regionSet.getEnumerator();
        while (se.moveNext())
        {
            regionStr += se.current() + ', ';
        }
        regionStr = subStr(regionStr, 0, strLen(regionStr) - 2);

        return regionStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImportHouses</Name>
				<Source><![CDATA[
    private boolean validateImportHouses()
    {
        FiasHouse   fiasHouse;
        FiasStead   fiasStead;
        boolean     result;

        select firstonly fiasHouse;
        select firstonly fiasStead;
        
        result = fiasHouse.RecId || fiasStead.RecId;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImportRooms</Name>
				<Source><![CDATA[
    private boolean validateImportRooms()
    {
        FiasRoom    fiasRoom;
        boolean     result;
        
        select firstonly fiasRoom;
        
        result = fiasRoom.RecId > 0;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FiasBatchImporter_RU    fiasImporter;
        fiasImporter =  new FiasBatchImporter_RU();

        if (fiasImporter.prompt())
        {
            fiasImporter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>