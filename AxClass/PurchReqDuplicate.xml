<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqDuplicate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqDuplicate
{
    PurchReqTable               purchReqTable;
    PurchReqTable               newPurchReqTable;
    PurchReqLine                purchReqLine;
    PurchReqId                  targetPurchReqId;
    PurchReqAutoCreate_PurchReq autoCreate;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqTable</Name>
				<Source><![CDATA[
    public PurchReqTable newPurchReqTable()
    {
        return newPurchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqTable</Name>
				<Source><![CDATA[
    public PurchReqTable parmPurchReqTable(PurchReqTable _purchReqTable = purchReqTable)
    {
        purchReqTable = _purchReqTable;
        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetPurchReqId</Name>
				<Source><![CDATA[
    public PurchReqId parmTargetPurchReqId(PurchReqId _purchReqId = targetPurchReqId)
    {
        if (!prmisDefault(_purchReqId))
        {
            targetPurchReqId = _purchReqId;
        }
        return targetPurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PurchReqDuplicate::validateOnBehalfPermission(purchReqTable.RecId);

        if (purchReqTable.RecId)
        {
            autoCreate = PurchReqAutoCreate::newAutoCreate(purchReqTable);
            autoCreate.parmTargetPurchReqId(targetPurchReqId);
            autoCreate.parmIsCurrentWorkerPreparer(true);

            ttsbegin;
            autoCreate.create();
            ttscommit;

            newPurchReqTable = autoCreate.newPurchReqTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReqDuplicate construct()
    {
        return new PurchReqDuplicate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchReqDuplicate purchReqDuplicate = PurchReqDuplicate::construct();
        Dialog dialog = new Dialog("@SYS311567");
        dialog.windowType(FormWindowType::PopUp);

        Object formCaller = _args.caller();

        if (_args && _args.dataset() == tableNum(PurchReqTable))
        {
            purchReqDuplicate.parmPurchReqTable(_args.record());
            NumberSeq numSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchReqId(), true, true);

            if (!numSeq)
            {
                if (dialog.run())
                {
                    DialogField purchReqId = dialog.addField(extendedTypeStr(PurchReqId), "@SYS108785");

                    if (purchReqId.value() == '')
                    {
                        throw error(strFmt("@SYS304394","@SYS108785"));
                    }

                    purchReqDuplicate.parmTargetPurchReqId(purchReqId.value());
                }
                else
                {
                    return;
                }
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                purchReqDuplicate.run();
            }
        }

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(PurchReqTable), MenuItemType::Display);
        
        Args newargs = new Args(formStr(PurchReqTable));
        newargs.record(purchReqDuplicate.newPurchReqTable());
        newargs.caller(formCaller);
        menuFunction.run(newargs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDuplicate</Name>
				<Source><![CDATA[
    static PurchReqTable newDuplicate(PurchReqTable _fromPurchReqTable,
                    PurchReqId _purchReqId = '')
    {
        PurchReqDuplicate purchReqDuplicate = PurchReqDuplicate::construct();

        purchReqDuplicate.parmPurchReqTable(_fromPurchReqTable);
        purchReqDuplicate.parmTargetPurchReqId(_purchReqId);
        purchReqDuplicate.run();

        return purchReqDuplicate.newPurchReqTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOnBehalfPermission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the originator has permissions to create purchase requisitions on behalf of the requisitioner.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The record ID of the <c>PurchReqTable</c> record.
    /// </param>

    public static void validateOnBehalfPermission(recId _purchReqTableRecId)
    {
        PurchReqLine    purchReqLine;
        boolean         onBehalfAllowed = true;

        while select Requisitioner, PurchReqTable from purchReqLine
                where (purchReqLine.PurchReqTable == _purchReqTableRecId)

        {
            onBehalfAllowed = onBehalfAllowed && purchReqLine.checkSubmitOnBehalfMyself();
        }

        if (!onBehalfAllowed)
        {
            throw error("@SYS107513");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>