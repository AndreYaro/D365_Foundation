<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateReturnOriginalTransactionIdService_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailUpdateReturnOriginalTransactionIdService_IN</c> class to update return invoices with original transaction ids.
/// </summary>
public class RetailUpdateReturnOriginalTransactionIdService_IN extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates return invoices with original transaction id.
    /// </summary>
    /// <param name = "_dataContract">Data cotract instance of the <c>RetailUpdateReturnOriginalTransactionIdContract_IN</c> class.</param>
    public void run(RetailUpdateReturnOriginalTransactionIdContract_IN _dataContract)
    {
        RetailChannelTable retailChannelTable;
        SetEnumerator selectedStoreEnumerator;
        SetEnumerator oMInternalOrgRecIds;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set descendants;
        SetEnumerator descendantsEnumerator;
        FromDate fromDate;
        ToDate toDate;
        TransitDocumentType_IN transitDocumentType = TransitDocumentType_IN::findType(tableNum(TaxDocumentTransitDocument));

        fromDate = _dataContract.fromDate();
        toDate = _dataContract.toDate() ? _dataContract.toDate() : dateMax();

        oMInternalOrgRecIds = _dataContract.parmSelectedOMInternalOrgRecIds().getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            // Get all the descendents for selected hierarchy node
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                        oMInternalOrgRecIds.current(),
                                        _dataContract.parmOMHierarchyRecId(),
                                        DateTimeUtil::utcNow(),
                                        operatingUnitType
                                        );

            // Start traversing on the descendants
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if(retailChannelTable.RecId
                   && retailChannelTable.ChannelType == RetailChannelType::RetailStore
                   && !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        if (!selectedStoreRecIds.elements())
        {
            throw error("@SYS107537");
        }

        // Start processing for selected stores
        selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
        while (selectedStoreEnumerator.moveNext())
        {
            RetailStoreTable storeTable = RetailStoreTable::findRecId(selectedStoreEnumerator.current());
            
            this.updateReturnInvoices(fromDate, toDate, storeTable.StoreNumber, transitDocumentType);
            this.logWarningForBlindReturnInvoices(fromDate, toDate, storeTable.StoreNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update return invoices with original transaction ids.
    /// </summary>
    /// <param name = "_fromDate">The begin date of the return invoice date range filter.</param>
    /// <param name = "_toDate">The end date of the return invoice date range filter.</param>
    /// <param name = "_storeNumber">The store of return invoices.</param>
    /// /// <param name = "_transitDocumentType">The transit document type references.</param>
    protected void updateReturnInvoices(FromDate _fromDate, ToDate _toDate, RetailStoreId _storeNumber, TransitDocumentType_IN _transitDocumentType)
    {
        CustInvoiceJour custInvoiceJour;
        RetailTransactionTable retailTransactionTableReturn;
        RetailTransactionSalesTrans retailTransactionSalesTransBlindReturns, retailTransactionSalesTransReturns;
        TaxDocumentTransitRelation taxDocumentTransitRelation;
        TaxDocumentTransitDocument taxDocumentTransitDocument;
        TaxDocumentExtension_IN taxDocumentExtension;

        while select RecId from custInvoiceJour
        where custInvoiceJour.InvoiceDate >= _fromDate
            && custInvoiceJour.InvoiceDate <= _toDate
            && custInvoiceJour.SalesId != ''
        exists join retailTransactionTableReturn
        where retailTransactionTableReturn.salesOrderId == custInvoiceJour.SalesId
            && retailTransactionTableReturn.entryStatus == RetailEntryStatus::Posted
            && retailTransactionTableReturn.store == _storeNumber
        exists join retailTransactionSalesTransReturns
        where retailTransactionSalesTransReturns.Channel == retailTransactionTableReturn.Channel
            && retailTransactionSalesTransReturns.store == retailTransactionTableReturn.store
            && retailTransactionSalesTransReturns.terminalId == retailTransactionTableReturn.terminal
            && retailTransactionSalesTransReturns.transactionId == retailTransactionTableReturn.transactionId
            && retailTransactionSalesTransReturns.transactionStatus != RetailEntryStatus::Voided
            && retailTransactionSalesTransReturns.returnTransactionId
            && retailTransactionSalesTransReturns.qty > 0
        notexists join retailTransactionSalesTransBlindReturns
        where retailTransactionSalesTransBlindReturns.Channel == retailTransactionTableReturn.Channel
            && retailTransactionSalesTransBlindReturns.store == retailTransactionTableReturn.store
            && retailTransactionSalesTransBlindReturns.terminalId == retailTransactionTableReturn.terminal
            && retailTransactionSalesTransBlindReturns.transactionId == retailTransactionTableReturn.transactionId
            && retailTransactionSalesTransBlindReturns.transactionStatus != RetailEntryStatus::Voided
            && !retailTransactionSalesTransBlindReturns.returnTransactionId
            && retailTransactionSalesTransBlindReturns.qty > 0
        {
            RecId originalInvoiceRecId = this.getOriginalInvoiceRecId(custInvoiceJour.RecId);
            if (!originalInvoiceRecId)
            {
                this.logWarningForNotUpdatedInvoice(custInvoiceJour.RecId);
                continue;
            }

            while select TableId from taxDocumentTransitRelation
                where taxDocumentTransitRelation.TransactionRecId == custInvoiceJour.RecId
                    && taxDocumentTransitRelation.TransactionType == tablenum(CustInvoiceJour)
                    && taxDocumentTransitRelation.TransitDocumentType == _transitDocumentType.RecId
                join TableId from taxDocumentTransitDocument
                    where taxDocumentTransitDocument.RecId == taxDocumentTransitRelation.TransitDocumentRecId
                join RecId from taxDocumentExtension
                    where taxDocumentExtension.TaxDocumentGUID == taxDocumentTransitDocument.TaxDocument
                        && taxDocumentExtension.RefTaxDocumentExtension == 0
            {
                this.populateGstOriginalReference(originalInvoiceRecId, taxDocumentExtension.RecId, _transitDocumentType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoiceRecId</Name>
				<Source><![CDATA[
    private RecId getOriginalInvoiceRecId(RecId _returnRecId)
    {
        Set fromPJobReplicatedTransactions = this.FindOriginalInvoiceByReturnTransaction(_returnRecId);

        if (fromPJobReplicatedTransactions.elements() == 1)
        {
            SetEnumerator se = fromPJobReplicatedTransactions.getEnumerator();
            return se.moveNext() ? se.current() : 0;
        }
        else if (fromPJobReplicatedTransactions.elements() == 0)
        {
            Set fromCustomerOrderDirectTransactions = this.FindOriginalInvoiceByInventTrans(_returnRecId);

            if (fromCustomerOrderDirectTransactions.elements() == 1)
            {
                SetEnumerator se = fromCustomerOrderDirectTransactions.getEnumerator();
                return se.moveNext() ? se.current() : 0;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarningForBlindReturnInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write to log about blind transactions, which were excluded from the updates query
    /// </summary>
    /// <param name = "_fromDate">The begin date of the return invoice date range filter.</param>
    /// <param name = "_toDate">The end date of the return invoice date range filter.</param>
    /// <param name = "_storeNumber">The store of return invoices.</param>
    protected void logWarningForBlindReturnInvoices(FromDate _fromDate, ToDate _toDate, RetailStoreId _storeNumber)
    {
        CustInvoiceJour custInvoiceJour;
        RetailTransactionTable retailTransactionTableReturn;
        RetailTransactionSalesTrans retailTransactionSalesTransBlindReturns;

        while select RecId from custInvoiceJour
            where custInvoiceJour.InvoiceDate >= _fromDate
                && custInvoiceJour.InvoiceDate <= _toDate
                && custInvoiceJour.SalesId != ''
            exists join retailTransactionTableReturn
            where retailTransactionTableReturn.salesOrderId == custInvoiceJour.SalesId
                && retailTransactionTableReturn.entryStatus != RetailEntryStatus::Voided
                && retailTransactionTableReturn.store == _storeNumber
            exists join retailTransactionSalesTransBlindReturns
            where retailTransactionSalesTransBlindReturns.Channel == retailTransactionTableReturn.Channel
                && retailTransactionSalesTransBlindReturns.store == retailTransactionTableReturn.store
                && retailTransactionSalesTransBlindReturns.terminalId == retailTransactionTableReturn.terminal
                && retailTransactionSalesTransBlindReturns.transactionId == retailTransactionTableReturn.transactionId
                && retailTransactionSalesTransBlindReturns.transactionStatus != RetailEntryStatus::Voided
                && !retailTransactionSalesTransBlindReturns.returnTransactionId
                && retailTransactionSalesTransBlindReturns.qty > 0
        {
            this.logWarningForNotUpdatedInvoice(custInvoiceJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarningForNotUpdatedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the message to info log
    /// </summary>
    /// <param name = "_custInvoiceJourRecId">RecId of return invoice from <c>CustInvoiceJour</c></param>
    protected void logWarningForNotUpdatedInvoice(RefRecId _custInvoiceJourRecId)
    {
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_custInvoiceJourRecId);
        CustTable custTable = CustTable::find(custInvoiceJour.InvoiceAccount);

        info(strFmt("@RetailUpdateReturnOriginalTransactionId:OriginalGstTransactionNotIdentified", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate, custTable.AccountNum, custTable.name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceByReturnTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try to find the original invoice through retail transaction
    /// </summary>
    /// <param name = "_custInvoiceJourRecId">RecId of return invoice from <c>CustInvoiceJour</c></param>
    /// <returns>Container with reference to original invoice</returns>
    protected Set findOriginalInvoiceByReturnTransaction(RefRecId _custInvoiceJourRecId)
    {
        CustInvoiceJour custInvoiceJourReturn, custInvoiceJourOriginal;
        RetailTransactionTable retailTransactionTableReturn, retailTransactionTableOriginal;
        RetailTransactionSalesTrans retailTransactionSalesTrans;
        Set custInvoiceJourOriginalRecIds = new Set (Types::Int64);

        while select TableId from custInvoiceJourReturn
            where custInvoiceJourReturn.RecId == _custInvoiceJourRecId
        join TableId from retailTransactionTableReturn
            where retailTransactionTableReturn.salesOrderId == custInvoiceJourReturn.SalesId
        join TableId from retailTransactionSalesTrans
            where retailTransactionSalesTrans.Channel == retailTransactionTableReturn.Channel
                && retailTransactionSalesTrans.store == retailTransactionTableReturn.store
                && retailTransactionSalesTrans.terminalId == retailTransactionTableReturn.terminal
                && retailTransactionSalesTrans.transactionId == retailTransactionTableReturn.transactionId
                && retailTransactionSalesTrans.transactionStatus != RetailEntryStatus::Voided
                && retailTransactionSalesTrans.returnTransactionId
                && retailTransactionSalesTrans.qty > 0
        join TableId from retailTransactionTableOriginal
            where retailTransactionTableOriginal.store == retailTransactionSalesTrans.returnStore
                && retailTransactionTableOriginal.terminal == retailTransactionSalesTrans.returnTerminalId
                && retailTransactionTableOriginal.transactionId == retailTransactionSalesTrans.returnTransactionId
                && retailTransactionTableOriginal.entryStatus != RetailEntryStatus::Voided
        join RecId from custInvoiceJourOriginal
            where custInvoiceJourOriginal.SalesId == retailTransactionTableOriginal.salesOrderId
        {
            custInvoiceJourOriginalRecIds.add(custInvoiceJourOriginal.RecId);
        }

        return custInvoiceJourOriginalRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoiceByInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the original invoice through sales order
    /// </summary>
    /// <param name = "_custInvoiceJourRecId">RecId of return invoice from <c>CustInvoiceJour</c></param>
    /// <returns>Container with reference to original invoice</returns>
    protected Set findOriginalInvoiceByInventTrans(RefRecId _custInvoiceJourRecId)
    {
        CustInvoiceJour custInvoiceJourReturn, custInvoiceJourOriginal;
        SalesLine salesLineReturn, salesLineReturnCheck;
        CustInvoiceTrans custInvoiceTrans;
        Set custInvoiceJourOriginalRecIds = new Set (Types::Int64);

        while select TableId from custInvoiceJourReturn
            where custInvoiceJourReturn.RecId == _custInvoiceJourRecId
        join TableId from salesLineReturn
            where salesLineReturn.SalesId == custInvoiceJourReturn.SalesId
                && salesLineReturn.InventTransIdReturn
                && salesLineReturn.SalesQty < 0
        join TableId from custInvoiceTrans
            where custInvoiceTrans.InventTransId == salesLineReturn.InventTransIdReturn
        join RecId from custInvoiceJourOriginal
            where custInvoiceJourOriginal.SalesId == custInvoiceTrans.SalesId
                && custInvoiceJourOriginal.InvoiceId == custInvoiceTrans.InvoiceId
                && custInvoiceJourOriginal.InvoiceDate == custInvoiceTrans.InvoiceDate
                && custInvoiceJourOriginal.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup
        {
            custInvoiceJourOriginalRecIds.add(custInvoiceJourOriginal.RecId);
        }

        return custInvoiceJourOriginalRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateGstOriginalReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update return tax document of type <c>TaxDocumentExtension_IN</c> with reference to original tax document of type <c>TaxDocumentExtension_IN</c>
    /// </summary>
    /// <param name = "_custInvoiceJourOriginalRecId">RecId of original invoice from <c>CustInvoiceJour</c></param>
    /// <param name = "_taxDocumentExtensionReturn">RecId of return tax document from <c>TaxDocumentExtension_IN</c></param>
    /// <param name = "_transitDocumentType">The transit document type references.</param>
    protected void populateGstOriginalReference(RefRecId _custInvoiceJourOriginalRecId, RefRecId _taxDocumentExtensionReturnRecId, TransitDocumentType_IN _transitDocumentType)
    {
        TaxDocumentTransitRelation transitRelation;
        TaxDocumentTransitDocument transitDocument;
        TaxDocumentExtension_IN taxDocumentExtensionOriginal;
        TaxDocumentExtension_IN taxDocumentExtensionReturn;

        select firstonly RecId, TaxTransactionDate from taxDocumentExtensionOriginal
        exists join transitDocument
            where transitDocument.TaxDocument == taxDocumentExtensionOriginal.TaxDocumentGUID
        exists join transitRelation
            where transitRelation.TransitDocumentRecId == transitDocument.RecId
                && transitRelation.TransitDocumentType == _transitDocumentType.RecId
                && transitRelation.TransactionType == tableNum(CustInvoiceJour)
                && transitRelation.TransactionRecId == _custInvoiceJourOriginalRecId;

        if (taxDocumentExtensionOriginal)
        {
            ttsbegin;

            taxDocumentExtensionReturn = TaxDocumentExtension_IN::find(_taxDocumentExtensionReturnRecId, true);

            taxDocumentExtensionReturn.RefTaxDocumentExtension = taxDocumentExtensionOriginal.RecId;
            taxDocumentExtensionReturn.RefTaxTransactionDate = taxDocumentExtensionOriginal.TaxTransactionDate;

            taxDocumentExtensionReturn.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>