<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionCopy_SiteActive</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class DimensionCopy_SiteActive extends DimensionCopy
{
    LegalEntityDataAreaId   legalEntityDataAreaId;
    LegalEntityRecId        legalEntityDataAreaIdRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    public DimensionDefault copy(DimensionDefault _defaultDimension)
    {
        DimensionDefault                    dimension;

        dimension = DimensionCopy_SiteActive::copyOnServer(_defaultDimension, dimensionDefaultMap, this.parmLegalEntityDataAreaId());

        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityDataAreaId</Name>
				<Source><![CDATA[
    protected LegalEntityDataAreaId parmLegalEntityDataAreaId()
    {
        if (!legalEntityDataAreaIdRecId || legalEntityDataAreaIdRecId != this.parmLegalEntityRecId())
        {
            legalEntityDataAreaId = CompanyInfo::getDataArea(this.parmLegalEntityRecId());
        }
        return legalEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static DimensionCopy_SiteActive construct()
    {
        return new DimensionCopy_SiteActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static DimensionCopy_SiteActive newStandard()
    {
        return DimensionCopy_SiteActive::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOnServer</Name>
				<Source><![CDATA[
    private static DimensionDefault copyOnServer(
        DimensionDefault        _defaultDimension,
        DimensionDefaultMap     _dimensionDefaultMap,
        LegalEntityDataAreaId   _legalEntityDataAreaId
    )
    {
        DimensionDefault dimension;
        boolean cacheEnabled = appl.ttsLevel() > 0 && InventDimensionDefaultTransScopeCacheFlight::instance().isEnabled();
        str owner, cacheKey;
        SysGlobalCache transactionCache;

        changecompany(_legalEntityDataAreaId)
        {
            InventParameters inventParameters = InventParameters::find();
            Name siteDimensionAttributeName = DimensionAttribute::find(inventParameters.SiteDimensionAttribute).Name;
            DimensionAttributeValueSet siteDimensionAttributeValue = DimensionAttributeValueSet::find(_defaultDimension);
            FieldId fieldId = DimensionAttributeValueSet::getDimensionValueFieldId(siteDimensionAttributeName);
            boolean hasSiteDimensionAttributeValue = siteDimensionAttributeValue.(fieldId);

            DimensionAttributeRecId dimensionAttributeRecId = (!hasSiteDimensionAttributeValue || inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked) ? inventParameters.SiteDimensionAttribute : 0;

            if (cacheEnabled)
            {
                owner    = classStr(DimensionCopy_SiteActive);
                cacheKey = strFmt("%1#%2#%3#%4", _legalEntityDataAreaId, _defaultDimension, _dimensionDefaultMap.DefaultDimension, dimensionAttributeRecId);

                transactionCache = appl.transactionScope().parmTransactionScopeCache();

                if (transactionCache && transactionCache.isSet(owner, cacheKey))
                {
                    DimensionDefault defaultDimension = transactionCache.get(owner, cacheKey);

                    if (defaultDimension)
                    {
                        return defaultDimension;
                    }
                }
            }

            dimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(
                        _defaultDimension,
                        _dimensionDefaultMap.DefaultDimension,
                        dimensionAttributeRecId);

            DimensionDefault derivedDimension = LedgerDimensionFacade::serviceApplyDerivedDimensionsForAttribute(dimension, dimensionAttributeRecId, Ledger::current());

            boolean precedenceEnabled = DimensionAttributeDerivedDimensions::derivedDimensionPrecedenceEnabled();

            if (precedenceEnabled && DimensionAttributeDerivedDimensions::dimensionAttributeHasDerivedDimensionPrecedence(dimensionAttributeRecId))
            {
                dimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(derivedDimension, dimension);
            }
            else
            {
                dimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimension, derivedDimension);
            }
        }

        if (cacheEnabled && transactionCache)
        {
            transactionCache.set(owner, cacheKey, dimension);
        }

        return dimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>