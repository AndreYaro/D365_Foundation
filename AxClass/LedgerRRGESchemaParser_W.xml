<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGESchemaParser_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGESchemaParser_W
{
    XmlSchema           schema;
    str                 targetNamespace;
    Map                 elements;
    str                 xml;
    str                 encoding;
    str                 rootElementName;
    Map                 globalElements;
    Map                 globalAttributes;

    private const str   RootElementTax	    = 'Файл';
    private const str   RootElementPFRF	    = 'ФайлПФР';
    private const str   XsdNameSpace	    = 'http://www.w3.org/2001/XMLSchema';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map elements()
    {
        return elements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encoding</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str encoding()
    {
        return encoding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        globalElements      = new Map(Types::String, Types::Class);
        globalAttributes    = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void parse(str _documentName, str _xsd)
    {
        XmlSchemaElement    schemaElement;
        XmlDocument         xmlSchema;
        XmlDeclaration      xmlSchemaDeclaration;
        XmlSchemaElement    firstSchemaElement;

        XmlSchemaElement findSchemaElement(str _elementName)
        {
            return schema.elements().item(XmlQualifiedName::construct(_elementName, targetNamespace));
        }

        xml         = _xsd;
        elements    = new Map(Types::String, Types::Class);

        schema      = XmlSchema::newXml(xml);
        schema.compile();

        if (schema.validationError())
        {
            throw error(schema.validationError().message());
        }

        xmlSchema               = XmlDocument::newXml(xml);
        xmlSchemaDeclaration    = xmlSchema.firstChild();
        encoding                = xmlSchemaDeclaration.encoding();
        targetNamespace         = schema.targetNamespace();
        firstSchemaElement      = this.preparse();

        if (_documentName)
        {
            schemaElement = findSchemaElement(_documentName);
        }
        else
        {
            schemaElement = findSchemaElement(RootElementTax);
            if (!schemaElement)
            {
                schemaElement = findSchemaElement(RootElementPFRF);
            }

            if (!schemaElement)
            {
                schemaElement = firstSchemaElement;
            }
        }

        if (schemaElement == null)
        {
            throw error(strFmt("@SYS94966", _documentName));
        }

        rootElementName = schemaElement.name();

        this.processElement(schemaElement, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparse</Name>
				<Source><![CDATA[
    private XmlSchemaElement preparse()
    {
        Object                      schemaObject;
        XmlSchemaElement            schemaElement;
        XmlSchemaAttribute          schemaAttribute;
        XmlSchemaObjectEnumerator   objectEnumerator = schema.items().getEnumerator();
        XmlSchemaElement            firstSchemaElement;

        while (objectEnumerator.moveNext())
        {
            schemaObject    = objectEnumerator.current();

            switch(classIdGet(schemaObject))
            {
                case classNum(XmlSchemaElement)     :
                    schemaElement   = schemaObject;
                    globalElements.insert(schemaElement.qualifiedName().toString(), schemaObject);
                    if (!firstSchemaElement)
                    {
                        firstSchemaElement = schemaElement;
                    }
                    break;
                case classNum(XmlSchemaAttribute)   :
                    schemaAttribute = schemaObject;
                    globalAttributes.insert(schemaAttribute.qualifiedName().toString(), schemaObject);
                    break;
            }
        }

        return firstSchemaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAttributes</Name>
				<Source><![CDATA[
    private void processAttributes(XmlSchemaObjectCollection _complexTypeAttributes,
                                   LedgerRRGEXsdElement_W    _element)
    {
        XmlSchemaObjectEnumerator   objectEnumerator;
        XmlSchemaAttribute          xmlSchemaAttribute;
        XmlQualifiedName            qname;

        LedgerRRGEXsdAttribute_W    attribute;
        LedgerRRGEXsdElement_W      xsdDataTypeElement;
        LedgerRRGEXsdElement_W      element;

        element          = _element;
        objectEnumerator = _complexTypeAttributes.getEnumerator();

        while (objectEnumerator.moveNext())
        {
            xmlSchemaAttribute = objectEnumerator.current();

            if (xmlSchemaAttribute)
            {
                qname = xmlSchemaAttribute.refName();

                if (qname)
                {
                    if (qname.name() != '' || qname.namespace() != '')
                    {
                        if (globalAttributes.exists(qname.toString()))
                        {
                            xmlSchemaAttribute = globalAttributes.lookup(qname.toString());
                        }
                    }
                }

                xsdDataTypeElement  = new LedgerRRGEXsdElement_W('', '', null, null);
                this.processSimpleType(xmlSchemaAttribute.attributeSchemaType(), xsdDataTypeElement);

                attribute           = new LedgerRRGEXsdAttribute_W(xmlSchemaAttribute, xsdDataTypeElement.parmXsdDatatype());

                element.attributes().addEnd(attribute);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processComplexType</Name>
				<Source><![CDATA[
    private void processComplexType(XmlSchemaComplexType    _complexType,
                                    LedgerRRGEXsdElement_W  _element)
    {
        XmlSchemaParticle           particle            = _complexType.particle();
        XmlSchemaObjectCollection   attributes          = _complexType.attributes();
        XmlSchemaParticle           contentTypeParticle = _complexType.contentTypeParticle();
        LedgerRRGEXsdElement_W      element             = _element;

        if (particle)
        {
            this.processGroupBase(particle, element);
        }
        else if (contentTypeParticle)
        {
            this.processGroupBase(contentTypeParticle, element);
        }

        if (attributes)
        {
            this.processAttributes(attributes, element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processElement</Name>
				<Source><![CDATA[
    private void processElement(XmlSchemaElement        _schemaElement,
                                LedgerRRGEXsdElement_W  _parent,
                                boolean                 _optional = false)
    {
        LedgerRRGEXsdElement_W  element;
        XmlQualifiedName        qname;
        XmlSchemaType           schemaType;
        str                     xpath;
        str                     parentXPath;
        int                     linePosition[2];
        int                     lineNumber[2];

        if (_parent)
        {
            parentXPath = _parent.xpath();
        }
        else
        {
            parentXPath = '';
        }

        qname = _schemaElement.refName();
        if (qname)
        {
            if (qname.name() != '' || qname.namespace() != '')
            {
                if (globalElements.exists(qname.toString()))
                {
                    _schemaElement = globalElements.lookup(qname.toString());
                }
            }
        }

        xpath = parentXpath + '/' + _schemaElement.name();

        if (elements.exists(xpath))
        {
            lineNumber[1]   = _schemaElement.lineNumber();
            linePosition[1] = _schemaElement.linePosition();

            element         = elements.lookup(xpath);
            _schemaElement  = element.schemaElement();
            lineNumber[2]   = _schemaElement.lineNumber();
            linePosition[2] = _schemaElement.linePosition();

            throw error(strFmt("@SYS94967", lineNumber[1], linePosition[1], lineNumber[2], linePosition[2]));
        }

        element = new LedgerRRGEXsdElement_W(_schemaElement.name(), xpath, _schemaElement, _parent);
        element.parmOptional(_optional);

        schemaType = element.schemaType();

        if (classNum(XmlSchemaComplexType) == classIdGet(schemaType))
        {
            this.processComplexType(element.schemaType(), element);
        }
        else
        {
            this.processSimpleType(element.schemaType(), element);
        }

        elements.insert(element.xpath(), element);

        if (_parent)
        {
            _parent.children().addEnd(element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGroupBase</Name>
				<Source><![CDATA[
    private void processGroupBase(XmlSchemaGroupBase        _groupBase,
                                  LedgerRRGEXsdElement_W    _element)
    {
        XmlSchemaObjectEnumerator   objectEnumerator;
        XmlSchemaParticle           particle;
        int                         classId;
        boolean                     isOptionalElement;

        objectEnumerator = _groupBase.items().getEnumerator();

        while(objectEnumerator.moveNext())
        {
            particle = objectEnumerator.current();

            if (particle)
            {
                classId = classIdGet(particle);
                switch(classId)
                {
                    case classNum(XmlSchemaElement):
                        isOptionalElement = (classIdGet(_groupBase) == classNum(XmlSchemaChoice));
                        this.processElement(particle, _element, isOptionalElement);
                        break;
                    case classNum(XmlSchemaChoice):
                    case classNum(XmlSchemaSequence):
                    case classNum(XmlSchemaAll):
                        this.processGroupBase(particle, _element);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSimpleType</Name>
				<Source><![CDATA[
    private void processSimpleType(XmlSchemaSimpleType      _schemaSimpleType,
                                   LedgerRRGEXsdElement_W   _element)
    {
        XmlSchemaSimpleTypeContent  content;
        XmlQualifiedName            qname;

        qname = _schemaSimpleType.qualifiedName();

        if (qname.namespace() == XsdNamespace)
        {
            this.resolveXsdDataType(qname, _element);
        }
        else
        {
            content         = _schemaSimpleType.content();

            if (classIdGet(content) == classNum(XmlSchemaSimpleTypeRestriction))
            {
                this.processSimpleTypeRestriction(content, _element);
            }

            this.resolveXsdDataType(qname, _element);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSimpleTypeRestriction</Name>
				<Source><![CDATA[
    private void processSimpleTypeRestriction(XmlSchemaSimpleTypeRestriction    _restriction,
                                              LedgerRRGEXsdElement_W            _element)
    {
        XmlSchemaType       schemaType;
        XmlQualifiedName    qname;
       

        schemaType = _restriction.baseType();
        if (schemaType)
        {
            this.processSimpleType(schemaType, _element);
        }
        else
        {
            qname = _restriction.baseTypeName();
            if (qname.namespace() == XsdNamespace)
            {
                this.resolveXsdDataType(qname, _element);
            }
            else
            {
                schemaType = schema.schemaTypes().item(qname);
                this.processSimpleType(schemaType, _element);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveXsdDataType</Name>
				<Source><![CDATA[
    private void resolveXsdDataType(XmlQualifiedName        _qname,
                                    LedgerRRGEXsdElement_W  _element)
    {
        if (_qname.namespace() == XsdNamespace)
        {
            _element.parmXsdDatatype(_qname.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootElementName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str rootElementName()
    {
        return rootElementName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xml</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str xml(int _indent = 0)
    {
        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>annotation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str annotation(XmlSchemaAnnotated _object)
    {
        str                         ret;
        XmlSchemaObject             item;
        XmlSchemaAnnotation         annotation;
        XmlSchemaObjectEnumerator   enumerator;
        XmlSchemaDocumentation      documentation;
       

        if (_object)
        {
            annotation = _object.annotation();
            if (annotation)
            {
                enumerator = annotation.items().getEnumerator();
                while (enumerator.moveNext())
                {
                    item = enumerator.current();
                    if (item is XmlSchemaDocumentation)
                    {
                        documentation    = item;
                        ret             += documentation.markup();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGESchemaParser_W construct()
    {
        return new LedgerRRGESchemaParser_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGESchemaParser_W newFileName(str _rootElement, Filename _filename)
    {
        FileIOPermission            permission;
        XmlDocument                 xmlDocument;
       

        permission  = new FileIOPermission(_filename, 'r');
        permission.assert();

        xmlDocument = XmlDocument::newFile(_filename);

        return LedgerRRGESchemaParser_W::newXml(_rootElement, xmlDocument.xml());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXml</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGESchemaParser_W newXml(str _rootElement, str _xsd)
    {
        LedgerRRGESchemaParser_W    parser;

        parser  = LedgerRRGESchemaParser_W::construct();
        parser.parse(_rootElement, _xsd);

        return parser;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>