<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjQuotationWFTypeEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAProjQuotationWFTypeEventHandler</c> class is used as an event handler for the project
/// quotation workflow types.
/// </summary>

class PsaProjQuotationWFTypeEventHandler implements WorkflowCanceledEventHandler,
                                                    WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>QuotationStatus</c> field on the <c>SalesQuotationTable</c> table to the
    ///    <c>SalesQuotationStatus::Created</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    A <c>WorkflowEventArgs</c> instance.
    /// </param>
    /// <remarks>
    ///    This method is called from workflow framework when the workflow is cancelled.
    /// </remarks>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowEventArgs.parmWorkflowContext();
        switch (workflowContext.parmTableId())
        {
            case tableNum(SalesQuotationTable):
                PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(), SalesQuotationStatus::Created);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when an workflow is approved at all levels.
    /// </summary>
    /// <param name = "_workflowEventArgs">
    /// The value to use to get the workflow context of the workflow item that fired the event.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowEventArgs.parmWorkflowContext();
        switch (workflowContext.parmTableId())
        {
            case tableNum(SalesQuotationTable):
                if (SalesQuotationTable::findRec(workflowContext.parmRecId()).QuotationStatus != SalesQuotationStatus::Cancelled)
                {
                    PSAProjQuotationStateChangeManager::updateStatus(workflowContext.parmRecId(), SalesQuotationStatus::Approved);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>