<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_CustRemittance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalEngine_CustRemittance</c> class supports journals for remitting bills of
///    exchange. This class extends <see cref="T:LedgerJournalEngine" />.
/// </summary>
public class LedgerJournalEngine_CustRemittance extends LedgerJournalEngine_CustBillOfExchange
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCustOffsetAccount</Name>
				<Source><![CDATA[
    protected void initCustOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustPostingProfile</Name>
				<Source><![CDATA[
    public void initCustPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        ledgerJournalTrans.PostingProfile = CustParameters::find().PostingProfileBills;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact   &&
            _ledgerJournalTrans.Amount()      != _ledgerJournalTrans.orig().Amount())
        {
            ret = checkFailed("@SYS81393");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    public void settleTransUpdate(LedgerJournalTrans ledgerJournalTrans)
    {
        SpecTrans       specTrans;
        CustTransOpen   custTransOpen;

        super(ledgerJournalTrans);

        select firstonly crossCompany RecId from specTrans
            where   specTrans.SpecCompany   == ledgerJournalTrans.dataAreaId &&
                    specTrans.SpecRecId     == ledgerJournalTrans.RecId     &&
                    specTrans.SpecTableId   == ledgerJournalTrans.TableId
            exists join custTransOpen
            where   custTransOpen.dataAreaId == specTrans.RefCompany        &&
                    custTransOpen.TableId   == specTrans.RefTableId         &&
                    custTransOpen.RecId     == specTrans.RefRecId           &&
                    custTransOpen.AmountCur != specTrans.Balance01;

        if (specTrans)
        {
            ledgerJournalTrans.AmountCur2DebCred(0);
            ledgerJournalTrans.write();
            if (ledgerJournalTrans_ds)
            {
                ledgerJournalTrans_ds.refresh();
            }

            SpecTransManager::constructServer(ledgerJournalTrans, false).deleteAll();

            throw error("@SYS81393");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>