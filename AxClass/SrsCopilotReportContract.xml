<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsCopilotReportContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The report data contract for Copilot exectuion.
/// </summary>
[DataContractAttribute]
public class SrsCopilotReportContract implements SysPackable
{
    str callerName;
    str runId;
    str contractName;
    str contractJson;

    #define.currentVersion(1)

    #localmacro.currentList
        callerName,
        runId,
        contractName,
        contractJson
    #endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data contract into container.
    /// </summary>
    /// <returns>The packed container for contract.</returns>
    public container pack()
    {
        callerName = this.parmCallerName();
        runId = this.parmRunId();
        contractName = this.parmContractName();
        contractJson = this.parmContractJson();

        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the container into data contract.
    /// </summary>
    /// <param name = "_pack">The packed container object.</param>
    /// <returns>The unpacked data contract from container.</returns>
    public boolean unpack(container _pack)
    {
        boolean ret;
        Integer version = RunBase::getVersion(_pack);

        switch (version)
        {
            case #currentVersion:
                [version, #currentList] = _pack;

                this.parmCallerName(callerName);
                this.parmRunId(runId);
                this.parmContractName(contractName);
                this.parmContractJson(contractJson);

                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caller name member to validate origin of the request.
    /// </summary>
    /// <param name = "_callerName">Caller's name to set.</param>
    /// <returns>The caller's name.</returns>
    [DataMemberAttribute('CallerName')]
    public str parmCallerName(str _callerName = callerName)
    {
        callerName = _callerName;
        return callerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run id for the current execution.
    /// </summary>
    /// <param name = "_runId">The run id to set.</param>
    /// <returns>The run id.</returns>
    [DataMemberAttribute('RunId')]
    public str parmRunId(str _runId = runId)
    {
        runId = _runId;
        return runId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The RDP data contract name and type.
    /// </summary>
    /// <param name = "_contractName">The data contract name to set.</param>
    /// <returns>The RDP data contract name and type.</returns>
    [DataMemberAttribute('ContractName')]
    public str parmContractName(str _contractName = contractName)
    {
        contractName = _contractName;
        return contractName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractJson</Name>
				<Source><![CDATA[
    /// <summary>
    /// The RDP data contract JSON object.
    /// </summary>
    /// <param name = "_contractJson">The JSON object to set.</param>
    /// <returns>The RDP data contract JSON object.</returns>
    [DataMemberAttribute('ContractJson')]
    public str parmContractJson(str _contractJson = contractJson)
    {
        contractJson = _contractJson;
        return contractJson;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>