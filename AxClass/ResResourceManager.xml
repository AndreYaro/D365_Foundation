<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource manager class.
/// </summary>
public class ResResourceManager implements ResIResourceManager
{
    ResIReserveProcessor    reserveProcessor;
    ResICancelProcessor     cancelProcessor;
    ResIConfirmProcessor    confirmProcessor;
    List schedules;
    real capacity;
    real taskRemainingEffortHours;
    ResReservationType type;
    AVTimeframeType timeFrameType;
    boolean executeRollUp;
    boolean syncSpecificTimeScale;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReserveProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reserve processor to be used.
    /// </summary>
    /// <param name = "_processor">Reserve processor.</param>
    /// <returns>Instance of <c>ResReserveProcessor</c> class.</returns>
    public ResIReserveProcessor ReserveProcessor(ResIReserveProcessor _processor = reserveProcessor)
    {
        reserveProcessor = _processor;
        return reserveProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CancelProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the cancel processor to be used.
    /// </summary>
    /// <param name = "_processor">Cancel processor.</param>
    /// <returns>Instance of <c>ResCancelProcessor</c> class.</returns>
    public ResICancelProcessor CancelProcessor(ResICancelProcessor _processor = cancelProcessor)
    {
        cancelProcessor = _processor;
        return cancelProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConfirmProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the confirm processor to be used.
    /// </summary>
    /// <param name = "_processor">Confirm processor.</param>
    /// <returns>Instance of <c>ResConfirmProcessor</c> class.</returns>
    public ResIConfirmProcessor ConfirmProcessor(ResIConfirmProcessor _processor = confirmProcessor)
    {
        confirmProcessor = _processor;
        return confirmProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Schedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules to be reserved, canceled or confirmed.
    /// </summary>
    /// <param name = "_schedules">List of schedules.</param>
    /// <returns>List of schedules.</returns>
    public List Schedules(List _schedules = schedules)
    {
        schedules = _schedules;
        
        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Capacity shared by the specified schedules.
    /// </summary>
    /// <param name = "_capacity">Capacity amount to split, front-load or duplicate in schedules.</param>
    /// <returns>Capacity amount.</returns>
    public real Capacity(real _capacity = capacity)
    {
        capacity = _capacity;
        return capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskRemainingEffortHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get task remaning effort hours which should be set after confirmation operation.
    /// </summary>
    /// <returns>Task remaining effor hours.</returns>
    public real getTaskRemainingEffortHours()
    {
        return taskRemainingEffortHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReservationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if schedule is booking or assignment.
    /// </summary>
    /// <param name = "_type">Reservation type.</param>
    /// <returns>ResReservationType enum value.</returns>
    public ResReservationType ReservationType(ResReservationType _type = type)
    {
        type = _type;
        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSyncSpecificTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get of set if update a specific time scale in synchronous and the rest to run asynchronous.
    /// </summary>
    /// <param name = "_syncSpecificTimeScale">Whether update all time scale synchronously.</param>
    /// <returns>true to update a specific time scale in synchronous and the rest to run asynchronous; otherwise all time scale will run synchronously.</returns>
    public boolean parmSyncSpecificTimeScale(boolean _syncSpecificTimeScale = syncSpecificTimeScale)
    {
        syncSpecificTimeScale = _syncSpecificTimeScale;
        return syncSpecificTimeScale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TimeFrameType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the time frame type.
    /// </summary>
    /// <param name = "_timeFrameType">Specified the time frame type.</param>
    /// <returns>The specified time frame type.</returns>
    public AVTimeframeType TimeFrameType(AVTimeframeType _timeFrameType = timeFrameType)
    {
        timeFrameType = _timeFrameType;
        return timeFrameType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ExecuteRollUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the executeRollUp is needed after reservation of resource.
    /// </summary>
    /// <param name = "_executeRollUp">Whether to execute rollup after reservation.</param>
    /// <returns>The specified executeRollUp.</returns>
    boolean ExecuteRollUp(boolean _executeRollUp = true)
    {
        executeRollUp = _executeRollUp;
        return executeRollUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimizedSchedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Minimize schedules by combining schedules when possible when syncSpecificTimeScale parameter is set to true.
    /// </summary>
    /// <param name = "_schedules">Schedules list.</param>
    /// <returns>Minimized schedules list.</returns>
    protected List getMinimizedSchedules(List _schedules)
    {
        List result = _schedules;

        ResTmpScheduling tmpScheduling;
        tmpScheduling.skipDatabaseLog(true);

        this.insertSchedulesToTmpTable(tmpScheduling, schedules);
        this.minimizeSizeOfTmpTable(tmpScheduling, timeFrameType);
        this.splitSchedulesByEffectiveDates(tmpScheduling);
        result = this.setupScheduleListFromTmpTable(tmpScheduling);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSchedulesByEffectiveDates</Name>
				<Source><![CDATA[
    private void splitSchedulesByEffectiveDates(ResTmpScheduling _tmpScheduling)
    {
        // Split the existing records according to the resource effective dates.
        List splitScheduleByEffectiveDatesList = new List(Types::Container);

        while select _tmpScheduling
            where _tmpScheduling.Resource != 0
        {
            ResResourcesCalendarView resourceCalendarView;
            
            // Get the resource effective date ranges by the scheduling start and end dates.
            while select ValidFrom, ValidTo, Calendar from resourceCalendarView
                where resourceCalendarView.Resource == _tmpScheduling.Resource
                    && resourceCalendarView.ValidFrom <= _tmpScheduling.End
                    && resourceCalendarView.ValidTo >= _tmpScheduling.Start
            {
                if (_tmpScheduling.Start < resourceCalendarView.ValidFrom && _tmpScheduling.End > resourceCalendarView.ValidTo)
                {
                    splitScheduleByEffectiveDatesList.addEnd([_tmpScheduling, resourceCalendarView.Calendar, resourceCalendarView.ValidFrom, resourceCalendarView.ValidTo]);
                }
                else if (_tmpScheduling.Start < resourceCalendarView.ValidFrom)
                {
                    splitScheduleByEffectiveDatesList.addEnd([_tmpScheduling, resourceCalendarView.Calendar, resourceCalendarView.ValidFrom, _tmpScheduling.End]);
                }
                else if (_tmpScheduling.End > resourceCalendarView.ValidTo)
                {
                    splitScheduleByEffectiveDatesList.addEnd([_tmpScheduling, resourceCalendarView.Calendar, _tmpScheduling.Start, resourceCalendarView.ValidTo]);
                }
            }
        }

        // Split the schedules by resource effective date if the list is not empty
        // One schedule record may split to multiple records if the schedule date range cross multiple resource effective date ranges.
        ListEnumerator splitScheduleByEffectiveDatesEnum = splitScheduleByEffectiveDatesList.getEnumerator();

        ttsbegin;
        while (splitScheduleByEffectiveDatesEnum.moveNext())
        {
            container splitScheduleCon = splitScheduleByEffectiveDatesEnum.current();

            ResTmpScheduling tmpScheduling = conPeek(splitScheduleCon, 1);
            CalendarRecId calendar = conPeek(splitScheduleCon, 2);
            utcdatetime newStartDateTime = conPeek(splitScheduleCon, 3);
            utcdatetime newEndDateTime = conPeek(splitScheduleCon, 4);
                
            // Delete the original record if exists.
            select firstonly forupdate _tmpScheduling
                where _tmpScheduling.RecId == tmpScheduling.RecId;

            if (_tmpScheduling.RecId)
            {
                _tmpScheduling.delete();
            }

            // Add a new record according to the new start and end dates.
            _tmpScheduling.clear();
            _tmpScheduling.data(tmpScheduling);
            _tmpScheduling.Calendar = calendar;
            _tmpScheduling.Start = newStartDateTime;
            _tmpScheduling.End = newEndDateTime;
            _tmpScheduling.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSchedulesToTmpTable</Name>
				<Source><![CDATA[
    private void insertSchedulesToTmpTable(ResTmpScheduling _tmpScheduling, List _schedules)
    {
        ListEnumerator schedulesEnumerator = _schedules.getEnumerator();

        while (schedulesEnumerator.moveNext())
        {
            ResIReservationSchedule schedule = schedulesEnumerator.current();

            _tmpScheduling.Activity = schedule.activity();
            _tmpScheduling.resource = schedule.resource();
            _tmpScheduling.ActivityResource = schedule.activityResource();
            _tmpScheduling.ActivityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                schedule.activity(), schedule.resource(), schedule.activityResource());
            _tmpScheduling.CommitType = schedule.commitment();
            _tmpScheduling.Start = schedule.start();
            _tmpScheduling.End = schedule.end();
            _tmpScheduling.ProcessRollUpByAssignmentRequest = schedule.parmProcessRollUpByAssignmentRequest();
            _tmpScheduling.ReservationType = schedule.reservationType();
            _tmpScheduling.Capacity = schedule.capacity();
            _tmpScheduling.ResourceCategory = schedule.resourceCategory();
            _tmpScheduling.IsExistingTeamMember = schedule.parmIsExistingTeamMember();

            CalendarRecId calendar;
            if (schedule.activityResource())
            {
                calendar = ActivityResourceFacade::getCalendarByActivityAndDate(
                    schedule.activityResource(), schedule.activity(), DateTimeUtil::date(schedule.start()));
            }
            else
            {
                calendar = ResourceFacade::getCalendarByActivityAndDate(
                    schedule.resource(), schedule.activity(), DateTimeUtil::date(schedule.start()));
            }
            _tmpScheduling.Calendar = calendar;

            _tmpScheduling.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimizeSizeOfTmpTable</Name>
				<Source><![CDATA[
    private void minimizeSizeOfTmpTable(ResTmpScheduling _tmpScheduling, AVTimeframeType _timescale)
    {
        if (syncSpecificTimeScale)
        {
            // Compressing the number of records by detecting the scheduling chain.
            List recordDeleteList = new List (Types::Int64);
            Map recordEndDateMap = new Map(Types::Int64, Types::UtcDateTime);

            utcdatetime expectedNextTimeFrame;
            utcdatetime previousEndDate;
            ActivityResourceId previousActivityResourceId;
            RecId previousRecord;

            while select Start, End, RecId, ActivityResourceId from _tmpScheduling
                order by _tmpScheduling.ActivityResourceId, _tmpScheduling.Start
            {
                if (!previousActivityResourceId)
                {
                    previousActivityResourceId = _tmpScheduling.ActivityResourceId;
                }

                if (previousActivityResourceId != _tmpScheduling.ActivityResourceId)
                {
                    if (recordEndDateMap.exists(previousRecord))
                    {
                        recordEndDateMap.remove(previousRecord);
                    }
                    previousActivityResourceId = _tmpScheduling.ActivityResourceId;
                    recordEndDateMap.insert(previousRecord, previousEndDate);
                    previousRecord = 0;
                    previousEndDate = DateTimeUtil::minValue();
                    expectedNextTimeFrame = DateTimeUtil::minValue();
                }

                if (!previousRecord)
                {
                    previousRecord = _tmpScheduling.RecId;
                }

                if (expectedNextTimeFrame != DateTimeUtil::minValue() && _tmpScheduling.Start != expectedNextTimeFrame)
                {
                    // Chain broke and updating the end date of the previous record to the previous end date.
                    if (recordEndDateMap.exists(previousRecord))
                    {
                        recordEndDateMap.remove(previousRecord);
                    }
                    recordEndDateMap.insert(previousRecord, previousEndDate);

                    previousRecord = _tmpScheduling.RecId;

                }
                else if (previousRecord != _tmpScheduling.RecId)
                {
                    // Chain detected and update the end date of the previous record to this end date.
                    if (recordEndDateMap.exists(previousRecord))
                    {
                        recordEndDateMap.remove(previousRecord);
                    }
                    recordEndDateMap.insert(previousRecord, _tmpScheduling.End);

                    recordDeleteList.addEnd(_tmpScheduling.RecId);
                }

                expectedNextTimeFrame = ResUtil::getNextDateTimeByTimeScale(_tmpScheduling.Start, _timescale);
                previousEndDate = _tmpScheduling.End;
            }

            ListEnumerator recordDeleteListEnumerator = recordDeleteList.getEnumerator();

            while (recordDeleteListEnumerator.moveNext())
            {
                delete_from _tmpScheduling
                    where _tmpScheduling.RecId == recordDeleteListEnumerator.current();
            }

            MapEnumerator recordEndDateMapEnumerator = recordEndDateMap.getEnumerator();

            while (recordEndDateMapEnumerator.moveNext())
            {
                ttsbegin;
                select forupdate _tmpScheduling
                    where _tmpScheduling.RecId == recordEndDateMapEnumerator.currentKey();

                _tmpScheduling.End = recordEndDateMapEnumerator.currentValue();
                _tmpScheduling.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupScheduleListFromTmpTable</Name>
				<Source><![CDATA[
    private List setupScheduleListFromTmpTable(ResTmpScheduling _tmpScheduling)
    {
        List minimizedSchedules = new List(Types::Class);

        while select _tmpScheduling
        {
            ResIReservationSchedule schedule = ResReservationSchedule::construct();
            schedule.resource(_tmpScheduling.resource);
            schedule.commitment(_tmpScheduling.CommitType);
            schedule.Start(_tmpScheduling.Start);
            schedule.End(_tmpScheduling.End);
            schedule.parmProcessRollUpByAssignmentRequest(_tmpScheduling.ProcessRollUpByAssignmentRequest);
            schedule.parmIsExistingTeamMember(_tmpScheduling.IsExistingTeamMember);
            schedule.activityResource(_tmpScheduling.ActivityResource);
            schedule.reservationType(_tmpScheduling.ReservationType);
            schedule.activity(_tmpScheduling.Activity);
            schedule.capacity(_tmpScheduling.Capacity);
            schedule.resourceCategory(_tmpScheduling.ResourceCategory);
            schedule.parmCalendar(_tmpScheduling.Calendar);
            minimizedSchedules.addEnd(schedule);
        }

        return minimizedSchedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Reserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves the specified schedules using the specified Reserve processor.
    /// </summary>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <returns>true when the reserve operation succeeds; otherwise, false.</returns>
    public boolean Reserve(boolean _updateRollUpAsync = false)
    {
        if (!reserveProcessor)
        {
            reserveProcessor = ResRemainingCapacity::construct();
        }

        if (reserveProcessor.getReserveProcessorType() != ResBookingType::Manual)
        {
            schedules = this.getMinimizedSchedules(schedules);
            reserveProcessor.Capacity(capacity);
        }

        reserveProcessor.Schedules(schedules);
        reserveProcessor.TimeFrameType(timeFrameType);
        boolean succeeded = reserveProcessor.Reserve();

        if (succeeded)
        {
            ResTmpRollUpResource tmpRollUp;
            boolean hasReservation = ResUtil::getSchedulesCollectionDateRanges(schedules, tmpRollUp);
            if (hasReservation)
            {
                this.addBookingRecordsForAssignmentScenario(tmpRollUp);

                if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && executeRollup)
                {
                    this.updateRollUpsV2(schedules, tmpRollUp, false, _updateRollUpAsync, syncSpecificTimeScale, timeFrameType);
                }
            }
        }

        return succeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Confirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirm the specified schedules soft reservation.
    /// </summary>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <returns>true when the confirm operation succeeds. otherwise, false.</returns>
    public boolean Confirm(boolean _updateRollUpAsync = false)
    {
        if (!confirmProcessor)
        {
            confirmProcessor = ResConfirmProcessor::construct();
        }

        schedules = this.getMinimizedSchedules(schedules);

        confirmProcessor.Schedules(schedules);
        boolean succeeded = confirmProcessor.Confirm();

        if (succeeded)
        {
            taskRemainingEffortHours = confirmProcessor.getTaskRemainingEffortHours();

            ResTmpRollUpResource tmpRollUp;
            boolean hasReservation = ResUtil::getSchedulesCollectionDateRanges(schedules, tmpRollUp);
            if (hasReservation)
            {
                this.addBookingRecordsForAssignmentScenario(tmpRollUp);

                if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && executeRollUp)
                {
                    this.updateRollUpsV2(schedules, tmpRollUp, false, _updateRollUpAsync, syncSpecificTimeScale, timeFrameType);
                }
            }
        }

        return succeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the specified schedules.
    /// </summary>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <returns>true when the cancel operation succeeds. otherwise, false.</returns>
    public boolean Cancel(boolean _updateRollUpAsync = false)
    {
        if (!cancelProcessor)
        {
            cancelProcessor = ResCancelEntireDay::construct();
        }

        schedules = this.getMinimizedSchedules(schedules);

        cancelProcessor.Schedules(schedules);
        cancelProcessor.ReservationType(type);
        boolean succeeded = cancelProcessor.Cancel();

        if (succeeded)
        {
            this.removeResourceFromTeamForQuotation();

            if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && executeRollup)
            {
                ResTmpRollUpResource tmpRollUp;
                boolean hasReservation = ResUtil::getSchedulesCollectionDateRanges(schedules, tmpRollUp);
                if (hasReservation)
                {
                    this.updateRollUpsV2(schedules, tmpRollUp, true, _updateRollUpAsync, syncSpecificTimeScale, timeFrameType);
                }
            }
        }
        
        return succeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeResourceFromTeamForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove resource from quotation team if it has no other WBS task assignment reference for the quotation.
    /// </summary>
    private void removeResourceFromTeamForQuotation()
    {
        ListEnumerator scheduleEnum = schedules.getEnumerator();
        while (scheduleEnum.moveNext())
        {
            ResReservationSchedule schedule = scheduleEnum.current();

            // Remove resource from the quotation team if that resource does not have any reservation.
            if (ActivityFacade::getActivityType(schedule.Activity()) == PSARSEntityType::Quotation)
            {
                // If this activity resource has no reservation for this quotation,
                // delete it from the project team table.

                ResBooking          resBooking;
                select firstonly RecId from resBooking
                    where resBooking.ActivityResource == schedule.activityResource();

                ResAssignmentView   resAssignment;
                select firstonly RecId from resAssignment
                    where resAssignment.ActivityResource == schedule.activityResource();

                if (!resBooking && !resAssignment)
                {
                    ttsbegin;
                    PSAProjSchedRole    projectTeamMember;
                    delete_from projectTeamMember
                        where projectTeamMember.RecId == schedule.activityResource();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Replace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swap resources.
    /// </summary>
    /// <param name = "_resource">Resource that will replace the resources in the specified schedules.</param>
    /// <returns>true if resource is swapped; otherwise, false.</returns>
    /// <remarks>This feature has not been implemented.</remarks>
    public boolean Replace(ResourceRecId _resource)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRollUpsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update roll-ups for specified schedules and add hard book records for assignment scenario if the backing hard booking records are missing.
    /// </summary>
    /// <param name = "_schedules">Reservation schedules.</param>
    /// <param name = "_tmpRollUp">Temp table buffer <c>ResTmpRollUpResource</c> for storing the schedules collection date ranges.</param>
    /// <param name = "_cancelOperation">Cancel reservation operation.</param>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <param name = "_syncSpecificTimeScale">true to update a specific time scale in synchronous and the rest to run asynchronous; otherwise all time scale will run synchronously.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    protected void updateRollUpsV2(List _schedules, ResTmpRollUpResource _tmpRollUp, boolean _cancelOperation = false, boolean _updateRollUpAsync = false,
        boolean _syncSpecificTimeScale = false, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && _schedules)
        {
            this.updateReservationRollUp(_tmpRollUp, _cancelOperation, _updateRollUpAsync, _syncSpecificTimeScale, _syncTimeScaleType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBookingRecordsForAssignmentScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add booking records for assignment scenario.
    /// </summary>
    /// <param name = "_tmpRollUp"><c>ResTmpRollUpResource</c> temp table buffer.</param>
    private void addBookingRecordsForAssignmentScenario(ResTmpRollUpResource _tmpRollUp)
    {
        while select Activity, Resource, ActivityResourceId, Start, End, CommitType, ReservationType from _tmpRollUp
        {
            if (_tmpRollUp.ReservationType == ResReservationType::Assignment)
            {
                ResUtil::addBookingHoursFromAssignmentHours(_tmpRollUp.Activity, ResUtil::getActivityResourceRecId(_tmpRollUp.ActivityResourceId),
                    _tmpRollUp.Start, _tmpRollUp.End, _tmpRollup.CommitType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationRollUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates roll-ups cache table by each activity resource ID specified in <c>ResTmpRollUpResource</c> table buffer.
    /// </summary>
    /// <param name = "_tmpRollUp"><c>ResTmpRollUpResource</c> table buffer.</param>
    /// <param name = "_cancelOperation">Cancel reservation operation.</param>
    /// <param name = "_updateRollUpAsync">Update <c>ResRollUp</c> table in async.</param>
    /// <param name = "_syncSpecificTimeScale">true to update a specific time scale in synchronous and the rest to run asynchronous; otherwise all time scale will run synchronously.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    public void updateReservationRollUp(ResTmpRollUpResource _tmpRollUp, boolean _cancelOperation, boolean _updateRollUpAsync = false,
        boolean _syncSpecificTimeScale = false, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
        {
            // updateRollUpAsync and syncSpecificTimeScaleLocal cannot be both set to true. updateRollUpAsync will take priority.
            boolean updateRollUpAsync = _updateRollUpAsync;
            boolean syncSpecificTimeScaleLocal = !updateRollUpAsync ? _syncSpecificTimeScale : false;
        
            // If there are more than one activity resource, then it will limit the number of process running in async.
            if (syncSpecificTimeScaleLocal || updateRollUpAsync)
            {
                select count(RecId) from _tmpRollUp;

                int numberOfReosurces = int642int(_tmpRollUp.RecId);

                // If both updateRollUpAsync and syncTimeScaleType are true, then
                if (!updateRollUpAsync)
                {
                    syncSpecificTimeScaleLocal = numberOfReosurces <= 1;
                }
                else
                {
                    updateRollUpAsync = numberOfReosurces <= ResUtil::numberOfAsyncProcessAllow;
                }
            }

            while select ActivityResourceId, Start, End from _tmpRollUp
            {
                container arguments;

                ActivityResourceId collectionId = _tmpRollUp.ActivityResourceId;
                boolean isPlannedResource = ResUtil::isPlannedResourceFromActivityResourceId(collectionId);
                utcdatetime start = _tmpRollUp.Start;
                utcdatetime end = _tmpRollUp.End;

                // Extend ResRollup records to the beginning of the month and end of month for planned resource.
                if (isPlannedResource)
                {
                    start = AVTimeframe::getTimeframe(start, AVTimeframeType::Month).start();
                    end = AVTimeframe::getTimeframe(end, AVTimeframeType::Month).end();
                }

                boolean activityResourceExists = true;
                if (_cancelOperation)
                {
                    // Activity resource could be removed for the project quotation scenario if the resource
                    // No longer has any reservation in this quotation. If so, then rollup should remove
                    // the records as those records will no longer be needed.
                    ActivityResourceRecId activityResource = ResUtil::getActivityResourceRecId(collectionId);
                    activityResourceExists = PSAProjSchedRole::findByRecId(activityResource).RecId != 0;
                }

                if (updateRollUpAsync)
                {
                    arguments = [collectionId, start, end];

                    if (_cancelOperation)
                    {
                        if (activityResourceExists)
                        {
                            Global::runAsync(classNum(ResRollUpWriter),
                            staticMethodStr(ResRollUpWriter, cancelRollUpForSpecificActivityResourceIdAsync), arguments);
                        }
                        else
                        {
                            Global::runAsync(classNum(ResRollUpWriter),
                            staticMethodStr(ResRollUpWriter, removeAndUpdateRollUpForSpecificActivityResourceIdAsync), arguments);
                        }
                    }
                    else
                    {
                        Global::runAsync(classNum(ResRollUpWriter),
                        staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
                    }
                }
                else
                {
                    if (_cancelOperation)
                    {
                        if (activityResourceExists)
                        {
                            ResRollUpWriter::cancelRollUpForSpecificActivityResourceId(collectionId,
                            start, end, syncSpecificTimeScaleLocal, _syncTimeScaleType);
                        }
                        else
                        {
                            ResRollUpWriter::removeRollUpForSpecificActivityResourceId(collectionId);
                            ResRollUpWriter::updateRollUpForSpecificActivityResourceId(collectionId,
                            start, end, syncSpecificTimeScaleLocal, _syncTimeScaleType);
                        }
                    }
                    else
                    {
                        ResRollUpWriter::updateRollUpForSpecificActivityResourceId(collectionId,
                        start, end, syncSpecificTimeScaleLocal, _syncTimeScaleType);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new ResourceManager instance.
    /// </summary>
    protected void new()
    {
        schedules = new List(Types::Class);
        type = ResReservationType::Booking;
        timeFrameType = AVTimeframeType::Day;
        executeRollUp = true;
        syncSpecificTimeScale = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resource manager constructor.
    /// </summary>
    /// <returns>Instance of <c>ResResourceManager</c>.</returns>
    public static ResIResourceManager construct()
    {
        ResIResourceManager manager = new ResResourceManager();
        return manager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>