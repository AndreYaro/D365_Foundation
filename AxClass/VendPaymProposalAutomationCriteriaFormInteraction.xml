<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymProposalAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendPaymProposalAutomationCriteriaFormInteraction</c> class is the Vendor payment proposal specific uptake of the 
/// <c>CustVendPaymProposalAutomationCriteriaFormInteraction</c> class.
/// </summary>
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'VendPaymProposalAutomation')]
[Export(identifierStr(Dynamics.AX.Application.CustVendPaymProposalAutomationCriteriaFormInteraction))]
internal final class VendPaymProposalAutomationCriteriaFormInteraction extends CustVendPaymProposalAutomationCriteriaFormInteraction
{
    private VendPaymProposalAutomationCriteria automationCriteria;
    private VendPaymProposalAutomationCriteria automationCriteriaExistingSeriesCached;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentCriteria</Name>
				<Source><![CDATA[
    internal VendPaymProposalAutomationCriteria getCurrentCriteria()
    {
        return formState.controls.automationCriteria_ds.cursor() as VendPaymProposalAutomationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForSeries</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected Common findAutomationCriteriaRecordForSeries(ProcessScheduleSeriesData _processScheduleSeries)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = VendPaymProposalAutomationCriteria::findByScheduleSeries(_processScheduleSeries.getSeriesRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForOccurrence</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected Common findAutomationCriteriaRecordForOccurrence(ProcessScheduleOccurrenceData _processScheduleOccurrence)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = VendPaymProposalAutomationCriteria::findByScheduleOccurrence(_processScheduleOccurrence.getOccurrenceRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleSeries</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void setScheduleSeries(RecId _processScheduleSeries)
    {
        this.getCurrentCriteria().ProcessScheduleSeries = _processScheduleSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleOccurrence</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void setScheduleOccurrence(RecId _processScheduleOccurrence)
    {
        this.getCurrentCriteria().ProcessScheduleOccurrence = _processScheduleOccurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetToDateOffsetDays</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void resetToDateOffsetDays()
    {
        this.getCurrentCriteria().ToDateOffsetDays = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMinimumPaymentDateOffsetDays</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void resetMinimumPaymentDateOffsetDays()
    {
        this.getCurrentCriteria().MinimumPaymentDateOffsetDays = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSummarizedPaymentDateOffsetDays</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void resetSummarizedPaymentDateOffsetDays()
    {
        this.getCurrentCriteria().SummarizedPaymentDateOffsetDays = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOffsetAccount</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void resetOffsetAccount()
    {
        this.getCurrentCriteria().DefaultOffsetAccount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSavedIncludeInvoicesFromOtherCompaniesValue</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected NoYes getSavedIncludeInvoicesFromOtherCompaniesValue()
    {
        return this.getCurrentCriteria().IncludeInvoicesFromOtherCompanies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOccurrenceFromSeries</Name>
				<Source><![CDATA[
    protected void defaultOccurrenceFromSeries()
    {
        VendPaymProposalAutomationCriteria automationCriteriaExistingSeries = this.findExistingCriteriaFromSeries();

        if (automationCriteriaExistingSeries.RecId != 0)
        {
            VendPaymProposalAutomationCriteria currentCriteria = this.getCurrentCriteria();
        
            currentCriteria.JournalName = automationCriteriaExistingSeries.JournalName;
            currentCriteria.PaymProposalType = automationCriteriaExistingSeries.PaymProposalType;
            currentCriteria.UseToDateOffsetDays = automationCriteriaExistingSeries.UseToDateOffsetDays;
            currentCriteria.ToDateOffsetDays = automationCriteriaExistingSeries.ToDateOffsetDays;
            currentCriteria.UseMinimumPaymentDateOffsetDays = automationCriteriaExistingSeries.UseMinimumPaymentDateOffsetDays;
            currentCriteria.MinimumPaymentDateOffsetDays = automationCriteriaExistingSeries.MinimumPaymentDateOffsetDays;
            currentCriteria.AmountLimit = automationCriteriaExistingSeries.AmountLimit;
            currentCriteria.PaymentCurrencyCode = automationCriteriaExistingSeries.PaymentCurrencyCode;
            currentCriteria.PaymentWeekDayFixed = automationCriteriaExistingSeries.PaymentWeekDayFixed;
            currentCriteria.DefaultOffsetAccountType = automationCriteriaExistingSeries.DefaultOffsetAccountType;
            currentCriteria.DefaultOffsetAccount = automationCriteriaExistingSeries.DefaultOffsetAccount;
            currentCriteria.UseSummarizedPaymentDateOffsetDays = automationCriteriaExistingSeries.UseSummarizedPaymentDateOffsetDays;
            currentCriteria.SummarizedPaymentDateOffsetDays = automationCriteriaExistingSeries.SummarizedPaymentDateOffsetDays;
            currentCriteria.BalanceCheck = automationCriteriaExistingSeries.BalanceCheck;
            currentCriteria.DeleteCredit = automationCriteriaExistingSeries.DeleteCredit;
            currentCriteria.IncludeInvoicesFromOtherCompanies = automationCriteriaExistingSeries.IncludeInvoicesFromOtherCompanies;
            currentCriteria.ProposeSeparatePaymentPerCompany = automationCriteriaExistingSeries.ProposeSeparatePaymentPerCompany;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingCriteriaFromSeries</Name>
				<Source><![CDATA[
    internal VendPaymProposalAutomationCriteria findExistingCriteriaFromSeries()
    {
        if (automationCriteriaExistingSeriesCached.RecId == 0)
        {
            automationCriteriaExistingSeriesCached = VendPaymProposalAutomationCriteria::findByScheduleSeries(this.formState.initialSchedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        }

        return automationCriteriaExistingSeriesCached;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>