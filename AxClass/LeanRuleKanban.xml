<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleKanban</c> class is the base class for all the different rule types.
/// </summary>
/// <remarks>
///    The initialization and main usage of this class is the respective hierarchy for all rule tables.The
///    class implements the <c>LeanRuleTypeProctedInterface</c> class because it is use as a protected
///    element by the <c>LeanRuleStatus</c> object hierarchy. The usage is through the interface to avoid
///    coupling.
/// </remarks>
abstract public class LeanRuleKanban implements LeanRuleTypeProtectedInterface
{
    LeanRuleData    leanRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds additional filters to the query object based on the current selection in the form and any
    ///    replenishment strategy constraints.
    /// </summary>
    /// <param name="_filterQuery">
    ///    The query object to which the additional filtering is added.
    /// </param>
    /// <param name="_lookupParm">
    ///    The lookup parameters that are used for the additional filtering criteria.
    /// </param>
    /// <remarks>
    ///    This method is defined in the <c>KanbanFlowElementsValidationStrategy</c> interface.
    /// </remarks>
    public void addFilter(
        Query                                _filterQuery,
        LeanProductionFlowActivityLookupParm _lookupParm)
    {
        KanbanFlow                  kanbanFlow = _lookupParm.parmLeanRuleData().parmKanbanFlowWrapper().parmKanbanFlow();
        utcdatetime                 filterFrom = _lookupParm.parmLeanRuleActiveFromDateTime();
        utcdatetime                 filterTo   = _lookupParm.parmLeanRuleActiveToDateTime();

        if (_filterQuery.name() != queryStr(PlanPlanActivitiesLookup))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        QueryBuildDataSource qbdsPlanPlanActivitiesAggregate = _filterQuery.dataSourceTable(tableNum(PlanPlanActivitiesAggregate));

        // add generic filtering on the version's validity periods
        SysQuery::findOrCreateRange(qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, ValidFrom)).value(queryRange(DateTimeUtil::minValue(), filterFrom));

        QueryBuildRange validToRange = SysQuery::findOrCreateRange(qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, ValidTo));
        validToRange.value(strFmt('%1, %2', queryRange(filterFrom, DateTimeUtil::maxValue()), SysQuery::valueEmptyString()));

        if (filterTo != utcDateTimeNull())
        {
            validToRange.value(strFmt('%1, %2', queryRange(filterTo, DateTimeUtil::maxValue()), validToRange.value()));
        }

        // get the elements
        PlanActivity firstPlanActivity = kanbanFlow.firstPlanActivity();
        PlanActivity lastPlanActivity = kanbanFlow.lastPlanActivity();

        // for Withdrawal kanbans the activities shown should always be of type Transfer
        if (_lookupParm.parmLeanRuleData().parmKanbanRule().KanbanType == LeanKanbanType::Withdrawal)
        {
            SysQuery::findOrCreateRange(qbdsPlanPlanActivitiesAggregate,
                                        fieldNum(PlanPlanActivitiesAggregate,PlanActivityType)).value(SysQuery::value(enum2int(PlanActivityType::Transfer)));
        }

        switch (_lookupParm.parmKanbanFlowElementRole())
        {
            case KanbanFlowElementRole::Destination:
                this.addFilterLastActivity(_lookupParm, qbdsPlanPlanActivitiesAggregate, kanbanFlow, firstPlanActivity);
                break;

            case KanbanFlowElementRole::Source:
                this.addFilterFirstActivity(_lookupParm, qbdsPlanPlanActivitiesAggregate, kanbanFlow, lastPlanActivity);
               break;
        }

        if (   _lookupParm.isInReplacementMode()
            && (!_lookupParm.parmIsMultiActivityFlow()
            ||  _lookupParm.parmKanbanFlowElementRole() == KanbanFlowElementRole::Destination))
        {
            this.addFilterReplacingRule(_lookupParm, qbdsPlanPlanActivitiesAggregate, kanbanFlow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterFirstActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds filtering conditions when the first activity is selected.
    /// </summary>
    /// <param name="_lookupParm">
    ///    The <c>LeanProductionFlowActivityLookupParm</c> lookup parameters.
    /// </param>
    /// <param name="_qbdsPlanPlanActivitiesAggregate">
    ///    The main data source.
    /// </param>
    /// <param name="_kanbanFlow">
    ///    The <c>KanbanFlow</c> record on which to filter.
    /// </param>
    /// <param name="_lastPlanActivity">
    ///    The preselected last <c>PlanActivity</c> object.
    /// </param>
    protected void addFilterFirstActivity(
        LeanProductionFlowActivityLookupParm _lookupParm,
        QueryBuildDataSource                 _qbdsPlanPlanActivitiesAggregate,
        KanbanFlow                           _kanbanFlow,
        PlanActivity                         _lastPlanActivity)
    {
        QueryBuildRange         qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, PlanRecId));

        // for MF kanbans the first activity should be of type Process
        if (_lookupParm.parmLeanRuleData().parmKanbanRule().KanbanType == LeanKanbanType::Manufacturing)
        {
            SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate,
                                        fieldNum(PlanPlanActivitiesAggregate,PlanActivityType)).value(SysQuery::value(enum2int(PlanActivityType::Process)));
        }

        // if a last activity was already selected
        if (_lastPlanActivity.RecId
            && _lookupParm.parmIsMultiActivityFlow())
        {
            // exclude the first activity from the list
            SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate,
                                        fieldNum(PlanPlanActivitiesAggregate,PlanActivityRecId)).value(SysQuery::valueNot(_lastPlanActivity.RecId));

            if (_lastPlanActivity.PlanActivityType == PlanActivityType::Transfer)
            {
                QueryBuildDataSource qbdsPlanActivitiesCrossProductionFlow = _qbdsPlanPlanActivitiesAggregate.addDataSource(tableNum(PlanActivitiesCrossProductionFlow));
                qbdsPlanActivitiesCrossProductionFlow.addLink(fieldNum(PlanPlanActivitiesAggregate, PlanActivityRecId),
                                                    fieldNum(PlanActivitiesCrossProductionFlow, IndependentPlanActivity));
                qbdsPlanActivitiesCrossProductionFlow.joinMode(JoinMode::OuterJoin);
                qbdsPlanActivitiesCrossProductionFlow.fetchMode(QueryFetchMode::One2One);

                // add a filter on the join condition to only fetch the correct records from the cross-pf activities
                SysQuery::findOrCreateRange(qbdsPlanActivitiesCrossProductionFlow, fieldNum(PlanActivitiesCrossProductionFlow, DependentPlanActivity)).value(SysQuery::value(_lastPlanActivity.RecId));

                // fetch all activities that:
                //  - belong to the last activity's plan
                //  - all activities that are in other plan references but
                //    have a direct relationship with the last activity as an dependent one
                qbr.value(strFmt('((%1.%2 == %3) || (%4.%5 == %6))',
                                    _qbdsPlanPlanActivitiesAggregate.name(),
                                    fieldStr(PlanPlanActivitiesAggregate, PlanRecId),
                                    PlanPlanActivity::find(_kanbanFlow.LastPlanPlanActivity).Plan,
                                    qbdsPlanActivitiesCrossProductionFlow.name(),
                                    fieldStr(PlanActivitiesCrossProductionFlow, DependentPlanActivity),
                                    _lastPlanActivity.RecId));
            }
            else
            {
                // we only filter on the last activity's plan
                qbr.value(SysQuery::value(PlanPlanActivity::find(_kanbanFlow.LastPlanPlanActivity).Plan));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterLastActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filtering conditions when last activity is being selected.
    /// </summary>
    /// <param name="_lookupParm">
    /// The <c>LeanProductionFlowActivityLookupParm</c> lookup parameters.
    /// </param>
    /// <param name="_qbdsPlanPlanActivitiesAggregate">
    /// The main data source.
    /// </param>
    /// <param name="_kanbanFlow">
    /// The <c>KanbanFlow</c> record being filtered on.
    /// </param>
    /// <param name="_firstPlanActivity">
    /// The pre-selected first <c>PlanActivity</c>.
    /// </param>
    protected void addFilterLastActivity(
        LeanProductionFlowActivityLookupParm _lookupParm,
        QueryBuildDataSource                 _qbdsPlanPlanActivitiesAggregate,
        KanbanFlow                           _kanbanFlow,
        PlanActivity                         _firstPlanActivity)
    {
        QueryBuildRange qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, PlanRecId));

        // last activity should never be selected for single-activity flow
        if (!_lookupParm.parmIsMultiActivityFlow())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // if a first activiti was already selected
        if (_firstPlanActivity.RecId)
        {
            // exclude the first activity from the list
            SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate,
                                        fieldNum(PlanPlanActivitiesAggregate, PlanActivityRecId)).value(SysQuery::valueNot(_firstPlanActivity.RecId));

            if (LeanProductionFlowActivity::findPlanActivity(_firstPlanActivity.RecId).FeederBridge == NoYes::Yes)
            {
                QueryBuildDataSource qbdsPlanActivitiesCrossProductionFlow = _qbdsPlanPlanActivitiesAggregate.addDataSource(tableNum(PlanActivitiesCrossProductionFlow));
                qbdsPlanActivitiesCrossProductionFlow.addLink(fieldNum(PlanPlanActivitiesAggregate, PlanActivityRecId),
                                                    fieldNum(PlanActivitiesCrossProductionFlow, DependentPlanActivity));
                qbdsPlanActivitiesCrossProductionFlow.joinMode(JoinMode::OuterJoin);
                qbdsPlanActivitiesCrossProductionFlow.fetchMode(QueryFetchMode::One2One);

                // add a filter on the join condition to only fetch the correct records from the cross-pf activities
                SysQuery::findOrCreateRange(qbdsPlanActivitiesCrossProductionFlow, fieldNum(PlanActivitiesCrossProductionFlow, IndependentPlanActivity)).value(SysQuery::value(_firstPlanActivity.RecId));

                // add a filter on the WHERE clause to fetch all activities that:
                //  - belong to the first activity's plan
                //  - all Transfer activities that are in other plan references but
                //    have a direct relationship with the first activity as an independent one
                qbr.value(strFmt('((%1.%2 == %3) || ((%4.%5 == %6) && (%4.%7 == %8)))',
                                                    _qbdsPlanPlanActivitiesAggregate.name(),
                                                    fieldStr(PlanPlanActivitiesAggregate, PlanRecId),
                                                    PlanPlanActivity::find(_kanbanFlow.FirstPlanPlanActivity).Plan,
                                                    qbdsPlanActivitiesCrossProductionFlow.name(),
                                                    fieldStr(PlanActivitiesCrossProductionFlow, IndependentPlanActivity),
                                                    _firstPlanActivity.RecId,
                                                    fieldStr(PlanActivitiesCrossProductionFlow, DependentPlanActivityType),
                                                    enum2int(PlanActivityType::Transfer)));
            }
            else
            {
                // we only filter on the first activity's plan
                qbr.value(SysQuery::value(PlanPlanActivity::find(_kanbanFlow.FirstPlanPlanActivity).Plan));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterReplacingRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the filtering conditions in case the lookup is used to replace a rule.
    /// </summary>
    /// <param name="_lookupParm">
    ///    The <c>LeanProductionFlowActivityLookupParm</c> lookup parameters.
    /// </param>
    /// <param name="_qbdsPlanPlanActivitiesAggregate">
    ///    The main data source.
    /// </param>
    /// <param name="_kanbanFlow">
    ///    The <c>KanbanFlow</c> record on which to filter.
    /// </param>
    protected void addFilterReplacingRule(
        LeanProductionFlowActivityLookupParm _lookupParm,
        QueryBuildDataSource                 _qbdsPlanPlanActivitiesAggregate,
        KanbanFlow                           _kanbanFlow)
    {
        PlanActivityLocation planActivityLocation = _lookupParm.parmReplacedRuleData().kanbanFlow().lastPlanActivity().receiptLocation();

        // first - make sure we show activities with the same receipt location
        QueryBuildRange qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, InventLocationId));
        qbr.value(SysQuery::value(planActivityLocation.InventLocationId));

        qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, InventLocationDataAreaId));
        qbr.value(SysQuery::value(planActivityLocation.InventLocationDataAreaId));

        qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, wmsLocationId));
        qbr.value(SysQuery::value(planActivityLocation.wmsLocationId));

        qbr = SysQuery::findOrCreateRange(_qbdsPlanPlanActivitiesAggregate, fieldNum(PlanPlanActivitiesAggregate, wmsLocationDataAreaId));
        qbr.value(SysQuery::value(planActivityLocation.wmsLocationDataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowManualKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the replenishment strategy allows for creating manual kanbans.
    /// </summary>
    /// <returns>
    ///    true if the replenishment strategy allows for creating manual kanbans; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The default base implementation returns false.
    /// </remarks>
    public abstract boolean allowManualKanbans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canJobResetFromStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a job that is related to the rule can be reset from a specified status.
    /// </summary>
    /// <param name="_status">
    ///    The <c>LeanKanbanJobStatus</c> object from which to reset.
    /// </param>
    /// <returns>
    ///    true if the kanban job can be reset from the status; otherwise, false.
    /// </returns>
    public boolean canJobResetFromStatus(LeanKanbanJobStatus _status)
    {
        boolean ret;

        switch (_status)
        {
            case LeanKanbanJobStatus::NotPlanned:
                ret = false;
                break;
            default:
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a rule can be triggered.
    /// </summary>
    /// <returns>
    ///    true if the rule can be triggered; otherwise, false.
    /// </returns>
    public boolean canTrigger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHandlingUnitEmptyPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default for the handling unit empty policy field.
    /// </summary>
    protected void defaultHandlingUnitEmptyPolicy()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();

        if (kanbanRule.kanbanFlow().isLastLocationKanbanSupermarket())
        {
            kanbanRule.HandlingUnitEmptyPolicy = LeanHandlingUnitEmptyPolicy::Manual;
        }
        else
        {
            kanbanRule.HandlingUnitEmptyPolicy = LeanHandlingUnitEmptyPolicy::HandlingUnit;
        }

        leanRuleData.parmKanbanRule(kanbanRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultKanbanTypeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets default values that are based on the kanban type.
    /// </summary>
    protected void defaultKanbanTypeValues()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
        KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        if (kanbanRule.KanbanType == LeanKanbanType::Withdrawal)
        {
            kanbanRule.TriggerLevel                 = 0;
            kanbanRule.CardAssignmentType           = KanbanCardAssignmentType::Automatic;
            kanbanRuleVariable.MaximumPlannedOrders = 0;
        }

        leanRuleData.parmKanbanRule(kanbanRule);
        leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the duplication of the <c>Kanban</c>.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to be duplicated.
    /// </param>
    /// <remarks>
    /// Must be implemented in sub-classes.
    /// </remarks>
    abstract public void duplicateKanban(Kanban _kanban)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanCreationForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form for manually creating kanbans.
    /// </summary>
    /// <returns>
    ///    The name of the kanban creation form.
    /// </returns>
    /// <remarks>
    ///    Must be implemented in sub-classes.
    /// </remarks>
    abstract public str getKanbanCreationForm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the maximum kanban quantity that is allowed by the rule.
    /// </summary>
    /// <returns>
    ///    The maximum kanban quantity allowed by the rule.
    /// </returns>
    /// <remarks>
    ///    Used during kanban creation.
    /// </remarks>
    public abstract KanbanQuantity getMaxKanbanQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the minimum kanban quantity that is allowed by the rule.
    /// </summary>
    /// <returns>
    ///    The minimum kanban quantity allowed by the rule.
    /// </returns>
    /// <remarks>
    ///    Used during kanban creation.
    /// </remarks>
    public abstract KanbanQuantity getMinKanbanQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUrgencyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the urgency level of the rule.
    /// </summary>
    /// <remarks>
    ///    The urgency level of the rule is updated based on any changes to the minimum alert level.
    /// </remarks>
    protected void handleUrgencyUpdate()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
        KanbanRule origKanbanRule = leanRuleData.orig().parmKanbanRule();

        if (origKanbanRule.MinimumAlertLevel != kanbanRule.MinimumAlertLevel)
        {
            kanbanRule.UrgencyLevel += kanbanRule.MinimumAlertLevel - origKanbanRule.MinimumAlertLevel;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields default data.
    /// </summary>
    /// <remarks>
    ///    This method is created to support the effect of calling the <c>modifiedField</c> method during data
    ///    initialization.
    /// </remarks>
    public void initFields()
    {
        this.defaultHandlingUnitEmptyPolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the implemented of the interface with the context it operates on.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The object that holds all the rule data.
    /// </param>
    /// <param name="_triggerBuffer">
    ///    The buffer on which the initial status method was called.
    /// </param>
    public void initializeContext(
        LeanRuleData _leanRuleData,
        Common       _triggerBuffer)
    {
        leanRuleData = _leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a rule of the required type the rule entities hierarchy.
    /// </summary>
    /// <remarks>
    ///    Called by the <c>LeanRulesEngine::createRule</c>.
    /// </remarks>
    public void insert()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
        ttsbegin;
        // insert the corresponding record
        kanbanRule.doInsert();
        leanRuleData.parmKanbanRule(kanbanRule);
        ttscommit;

        // Clear cache
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualKanbansNeedCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether manual kanbans require circulating cards.
    /// </summary>
    /// <returns>
    ///    true if circulating cards are required for manual kanbans; otherwise, false.
    /// </returns>
    public boolean manualKanbansNeedCards()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the change in a field's value.
    /// </summary>
    /// <param name="_tableId">
    /// The id of the table which contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The id of the field which value has changed.
    /// </param>
    /// <remarks>
    /// If a particular status doesn't allow the change, an error will be thrown.
    /// </remarks>
    public void modifiedField(
        tableId _tableId,
        fieldId _fieldId)
    {
        if (_tableId == tableNum(KanbanRule))
        {
            switch (_fieldId)
            {
                case fieldNum(KanbanRule, ReplenishmentStrategy):
                    this.defaultHandlingUnitEmptyPolicy();
                    break;
                case fieldNum(KanbanRule, KanbanType):
                    this.defaultKanbanTypeValues();
                    break;
            }
        }

        if (_tableId == tableNum(KanbanFlow))
        {
            switch (_fieldId)
            {
                case fieldNum(KanbanFlow, FirstPlanPlanActivity),
                     fieldNum(KanbanFlow, LastPlanPlanActivity):
                    this.defaultHandlingUnitEmptyPolicy();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsReprint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Kanban Card must be reprinted if it is reassigned to the <paramref
    ///    name="_newKanbanRule" />.
    /// </summary>
    /// <param name="_newKanbanRule">
    ///    The new target rule of a Kanban Card.
    /// </param>
    /// <returns>
    ///    true if there are differences that need the reprint of the card; otherwise, false.
    /// </returns>
    public boolean needsReprint(KanbanRule _newKanbanRule)
    {
        KanbanFlow currentKanbanFlow = leanRuleData.kanbanFlow();
        KanbanFlow newKanbanFlow = _newKanbanRule.ruleData().kanbanFlow();

        // here we only need to check if the first activity has changed
        return newKanbanFlow.FirstPlanPlanActivity != currentKanbanFlow.FirstPlanPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the lead time for the kanban rule.
    /// </summary>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether user interaction should be skipped.
    /// </param>
    public void refreshLeadTime(boolean _silent = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresAutoPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether auto-planning is necessary.
    /// </summary>
    /// <returns>
    ///    true if auto-planning is required by the rule; otherwise, false.
    /// </returns>
    public boolean requiresAutoPlanning()
    {
        return leanRuleData.parmKanbanRule().TriggerLevel > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the rule record in the database.
    /// </summary>
    public void update()
    {
        KanbanRule kanbanRule = leanRuleData.parmKanbanRule();

        ttsbegin;
        // update urgency level
        this.handleUrgencyUpdate();

        // update the corresponding record
        kanbanRule.selectForUpdate(true);
        kanbanRule.doUpdate();

        leanRuleData.parmKanbanRule(kanbanRule);
        ttscommit;

        // Clear cache
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the integer fields of the <c>KanbanRule</c> buffer.
    /// </summary>
    /// <returns>
    ///    true if the fields are valid; otherwise, false.
    /// </returns>
    protected boolean validateFields()
    {
        boolean     result     = true;
        KanbanRule  kanbanRule = leanRuleData.parmKanbanRule();

        result = kanbanRule.validateWrite(false) && result;

        // check the Register as empty setting
        if (!this.validateRegisterAsEmpty())
        {
            result = false;
        }

        // check alert levels
        if (kanbanRule.MaximumAlertLevel < kanbanRule.MinimumAlertLevel)
        {
            // Rule %1 cannot be saved
            result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));

            // The alert levels contain invalid values
            checkFailed("@SYS133249");
        }

        // check circulating cards
        if (kanbanRule.UsesCirculatingCards)
        {
            if (   !kanbanRule.CardsNumberSequence
                || !kanbanRule.CardAssignmentType)
            {
                // Rule %1 cannot be saved
                result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));

                // Rule is using circulating cards and one or more of the mandatory fields are missing
                checkFailed("@SYS133250");
            }

            if (result)
            {
                result = NumberSequenceTable::find(kanbanRule.CardsNumberSequence).Manual == NoYes::No;

                if (!result)
                {
                    // The number sequence for kanban rules cannot be manual
                    checkFailed("@SYS133815");
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrintType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the kanban rule has the correct print type.
    /// </summary>
    /// <returns>
    ///    true if the rule print type settings are correct; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Called by validateWrite().
    /// </remarks>
    protected boolean validatePrintType()
    {
        boolean     result      = true;
        KanbanRule  kanbanRule  = leanRuleData.parmKanbanRule();

        switch (kanbanRule.KanbanType)
        {
            case LeanKanbanType::Manufacturing:
                break;

            case LeanKanbanType::Withdrawal:
                if (kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Prepare ||
                    kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Plan)
                {
                    // Rule %1 cannot be saved
                    result = checkFailed(strFmt("@SYS133242", kanbanRule.RuleId));

                    // Rule has invalid settings for Auto print: %1
                    checkFailed(strFmt("@SYS133243", kanbanRule.PrintKanbanAutomatically));
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegisterAsEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the register of the kanban rule is set as empty.
    /// </summary>
    /// <returns>
    ///    true if the register is set as empty is correct; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Called by validateWrite().
    /// </remarks>
    protected boolean validateRegisterAsEmpty()
    {
        boolean             result = true;
        KanbanRule          kanbanRule = leanRuleData.parmKanbanRule();

        // The "When the source requirement is registered" register as empty setting is only valid for events
        if (   kanbanRule.HandlingUnitEmptyPolicy == LeanHandlingUnitEmptyPolicy::SourceRequirement
            && kanbanRule.ReplenishmentStrategy   != LeanReplenishmentStrategy::Event)
        {
            result = checkFailed("@SYS314034");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a selected source or destination.
    /// </summary>
    /// <param name="_lookupParm">
    ///    An instance of the <c>LeanProductionFlowActivityLookupParm</c> class that contains the data to
    ///    validate and also to the context in which the validation should occur.
    /// </param>
    /// <returns>
    ///    true if the selection is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is defined in the <c>KanbanFlowElementsValidationStrategy</c> interface.
    /// </remarks>
    public boolean validateSelection(LeanProductionFlowActivityLookupParm _lookupParm)
    {
        boolean                 result = false;
        KanbanFlow              kanbanFlow = _lookupParm.parmLeanRuleData().kanbanFlow();
        Query                   query = new Query(queryStr(PlanPlanActivitiesLookup));

        // extend the query the same way as for filtering the lookup
        this.addFilter(query, _lookupParm);

        // determine the actual RecId which has to also match
        RefRecId filterRecId = _lookupParm.parmKanbanFlowElementRole() == KanbanFlowElementRole::Source ?
                                         kanbanFlow.FirstPlanPlanActivity :
                                         kanbanFlow.LastPlanPlanActivity;

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(PlanPlanActivitiesAggregate));
        QueryBuildRange queryRange = SysQuery::findOrCreateRange(qbds, fieldNum(PlanPlanActivitiesAggregate, PlanPlanActivityRecId));
        queryRange.value(SysQuery::value(filterRecId));

        QueryRun queryRun = new QueryRun(query);

        // if executing the query returned something, this means that
        // the value is valid (ranges on the selected element's recIds
        // were added in the addFilter() call, besides all other validation ranges)
        result = queryRun.next();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the writing of a particular <c>LeanRuleKanban</c> type object.
    /// </summary>
    /// <param name="_showWarnings">
    /// Boolean value indicating whether optional warnings should be shown.
    /// </param>
    /// <returns>
    ///    true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        boolean result = true;

        // check the validity of the KanbanRule fields
        result = this.validateFields() && result;

        // check the validity of the selected print type
        result = this.validatePrintType() && result;

        // check item
        result = KanbanItemCheckKanbanRule::newStandard(
                                                leanRuleData.parmKanbanRule(),
                                                leanRuleData.parmLeanCoverage().ItemId,
                                                leanRuleData.parmKanbanFlowWrapper().parmKanbanFlow(),
                                                true,
                                                false).isAllowed() && result;
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Factory method for creating objects from the <c>LeanRuleKanban</c> hierarchy.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    An object that contains all rule-related state.
    /// </param>
    /// <returns>
    ///    An instance of a class that belongs to the <c>LeanRuleKanban</c> hierarchy.
    /// </returns>
    public static LeanRuleKanban newLeanRuleData(LeanRuleData _leanRuleData)
    {
        LeanRuleKanban result;

        // check input args
        if (!_leanRuleData)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // create the type based on the ReplenishmentStrategy
        switch (_leanRuleData.parmKanbanRule().ReplenishmentStrategy)
        {
            case LeanReplenishmentStrategy::Fixed:
                result = LeanRuleFixed::newStandard();
                break;
            case LeanReplenishmentStrategy::Scheduled:
                result = LeanRuleScheduled::newStandard();
                break;
            case LeanReplenishmentStrategy::Event:
                result = LeanRuleEvent::newStandard();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        result.initializeContext(_leanRuleData, null);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
