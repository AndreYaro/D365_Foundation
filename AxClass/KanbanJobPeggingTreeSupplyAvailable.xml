<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPeggingTreeSupplyAvailable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobPeggingTreeSupplyAvailable</c> class is used to verify whether the supply of a
///    pegging tree of a kanban job is available.
/// </summary>
public class KanbanJobPeggingTreeSupplyAvailable
{
    KanbanJob   kanbanJob;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
    public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggingTreeAvailableFromIssueOrPick</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies the supply availability of the pegging tree of the kanban job picking list or kanban job
    ///    issue specified.
    /// </summary>
    /// <param name="_common">
    ///    A record buffer of a kanban children pegging tree node, that is the <c>KanbanJobPickingList</c>
    ///    table or the <c>KanbanJobIssue</c> table.
    /// </param>
    /// <returns>
    ///    true if the supply is available; otherwise, false.
    /// </returns>
    private boolean peggingTreeAvailableFromIssueOrPick(Common _common)
    {
        boolean                 available = true;

        if (   _common.TableId != tablenum(KanbanJobPickingList)
            && _common.TableId != tablenum(KanbanJobIssue))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Explore the pegging tree child nodes (KanbanJobPickingList or KanbanJobIssue -> Kanban)
        ReqPeggingTreeNode treeNode = ReqPeggingTreeNode::newStandard(_common);
        List               children = treeNode.listChildren();
        ListEnumerator     le       = children.getEnumerator();
        while (available && le.moveNext())
        {
            Common childBuffer = le.current();
            available = this.peggingTreeAvailableFromKanban(childBuffer, true);
        }

        return available;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggingTreeAvailableFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies the supply availability of the pegging tree of the kanban that the kanban job belongs to.
    /// </summary>
    /// <param name="_kanban">
    ///    A buffer of the <c>Kanban</c> table.
    /// </param>
    /// <param name="_verifyCurrentKanban">
    ///    A Boolean value that indicates whether the kanban jobs are contained in the current kanban should
    ///    be verified as well.
    /// </param>
    /// <returns>
    ///    true if the supply is available; otherwise, false.
    /// </returns>
    private boolean peggingTreeAvailableFromKanban(Kanban _kanban, boolean _verifyCurrentKanban)
    {
        TransDate               todaysDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime()); //UTC
        KanbanJob               kanbanJobLocal;
        boolean                 available = true;

        if (_kanban.checkValid(_kanban.RecId))
        {
            // We will usually skip the top kanban that starts the call
            if (_verifyCurrentKanban)
            {
                while select RecId, DueDateTime, Status from kanbanJobLocal
                    where kanbanJobLocal.Kanban == _kanban.RecId
                {
                    if (kanbanJobLocal.Status == LeanKanbanJobStatus::NotPlanned)
                    {
                        if (DateTimeUtil::date(kanbanJobLocal.DueDateTime) < todaysDate)
                        {
                            available = false;
                        }
                    }
                    else
                    {
                        utcdatetime expectedDateTime = KanbanJobSchedule::findJob(kanbanJobLocal.RecId).ExpectedDateTime;
                        if (DateTimeUtil::date(kanbanJobLocal.DueDateTime) < DateTimeUtil::date(expectedDateTime))
                        {
                            available = false;
                        }
                    }
                }
            }

            // Explore the pegging tree child nodes (Kanban -> KanbanJobPickingList or KanbanJobIssue)
            ReqPeggingTreeNode treeNode = ReqPeggingTreeNode::newStandard(_kanban);
            List children = treeNode.listChildren();
            ListEnumerator le = children.getEnumerator();
            while (available && le.moveNext())
            {
                available = this.peggingTreeAvailableFromIssueOrPick(le.current());
            }
        }

        return available;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the supply availability of the pegging tree of the kanban job.
    /// </summary>
    /// <returns>
    /// true if the supply of the pegging tree is available; otherwise, false.
    /// </returns>
    public boolean run()
    {
        return this.peggingTreeAvailableFromKanban(kanbanJob.kanban(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobPeggingTreeSupplyAvailable construct()
    {
        return new KanbanJobPeggingTreeSupplyAvailable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A buffer of the <c>KanbanJob</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobPeggingTreeSupplyAvailable</c> class.
    /// </returns>
    public static KanbanJobPeggingTreeSupplyAvailable newKanbanJob(KanbanJob _kanbanJob)
    {
        KanbanJobPeggingTreeSupplyAvailable kanbanJobPeggingTreeSupplyAvailable = KanbanJobPeggingTreeSupplyAvailable::construct();

        kanbanJobPeggingTreeSupplyAvailable.parmKanbanJob(_kanbanJob);

        return kanbanJobPeggingTreeSupplyAvailable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
