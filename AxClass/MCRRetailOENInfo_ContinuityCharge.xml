<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRetailOENInfo_ContinuityCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for continuity charge.
/// </summary>
class MCRRetailOENInfo_ContinuityCharge extends RetailOENInfo
{
    #MCRRetailOENInfo

    MCRContinuityPayment mcrContinuityPayment;
    MCRCustPaymTable     mcrCustPaymTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::MCRContinuityCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    protected void initParameterMap()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        super();
        parameterMap.insert(#TodaysDate, RetailENInfo::formatDatetimeData(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), languageId));
        parameterMap.insert(#AccountNum, mcrContinuityPayment.CustAccount);
        parameterMap.insert(#CreatedDate, RetailENInfo::formatDatetimeData(DateTimeUtil::date(mcrContinuityPayment.createdDateTime), languageId));
        parameterMap.insert(#CCVendor, mcrCustPaymTable.CardTypeId);
        parameterMap.insert(#CCNum, mcrCustPaymTable.getCCNumMasked());
        parameterMap.insert(#Amount, num2Str(mcrCustPaymTable.Amount, 0, 2, 1, 3));
        parameterMap.insert(#CompanyName, companyInfo.name());
        parameterMap.insert(#CompanyPhone, companyInfo.phone());
        parameterMap.insert(#URL, companyInfo.url());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetting</Name>
				<Source><![CDATA[
    public void initSetting(RefRecId _refRecId)
    {
        MCRChannelUser                  mcrChannelUser;
        RetailChannelTable              retailChannelTable;

        select firstOnly notificationSetting
            where notificationSetting.EventNotificationType == this.EventNotificationType()
            join notificationProfile
            where notificationProfile.RecId == notificationSetting.EventNotificationProfile
            exists join retailChannelTable
            where retailChannelTable.EventNotificationProfileId == notificationProfile.ProfileId
            exists join mcrChannelUser
            where mcrChannelUser.Channel == retailChannelTable.RecId
                && mcrChannelUser.User == curUserId();

        select firstOnly mcrContinuityPayment
            where mcrContinuityPayment.RecId == _refRecId
            join firstOnly mcrCustPaymTable
            where mcrCustPaymTable.RecId == mcrContinuityPayment.mcrCustPaymTableRecID
               && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard;

        this.resolveSalesOrder(_refRecId);

        this.initParameterMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="refRecId">
    /// Continuity payment record id.
    /// </param>
    public void resolveSalesOrder(RefRecId refRecId)
    {
        this.parmSalesOrder(SalesTable::find(mcrContinuityPayment.SalesID));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>