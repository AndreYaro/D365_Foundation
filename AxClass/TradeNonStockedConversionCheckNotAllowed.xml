<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckNotAllowed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionCheckNotAllowed</c> class checks for transactions that are not
///    allowed.
/// </summary>
class TradeNonStockedConversionCheckNotAllowed
extends TradeNonStockedConversionCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks.
    /// </summary>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    public boolean check()
    {
        boolean ok;

        ok = this.checkBOM();
        ok = this.checkBOMVersion()     && ok;
        ok = this.checkRouteVersion()   && ok;
        ok = this.checkReqTrans()       && ok;
        ok = this.checkForecastInvent() && ok;
        ok = this.checkWarehouseItems() && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWarehouseItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the items to convert are not warehouse enabled.
    /// </summary>
    /// <returns>true if no item is warehouse enabled; otherwise, false.</returns>
    private boolean checkWarehouseItems()
    {
        boolean     ok = true;
        WHSInventEnabled whsInventEnabled;
        TradeNonStockedConversionItem conversionItem;

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            while select crosscompany ItemId from whsInventEnabled
                join conversionItem
                    where conversionItem.ItemIdDataAreaId     == whsInventEnabled.DataAreaId
                    &&    conversionItem.ItemId               == whsInventEnabled.ItemId
                    &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                    &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                    &&   (!this.singleItemCheck()
                    ||    (conversionItem.ItemIdDataAreaId     == tradeNonStockedConversionItem.ItemIdDataAreaId
                    &&     conversionItem.ItemId               == tradeNonStockedConversionItem.ItemId))
            {
                ok = false;
                this.writeLog(conversionItem,
                              tablenum(WHSInventEnabled),
                              fieldnum(WHSInventEnabled, ItemId),
                              whsInventEnabled.ItemId);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>BOM</c> table for transactions that are not allowed.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkBOM()
    {
        boolean     ok = true;
        BOM         bom;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany BOMId, ItemId from bom
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == bom.DataAreaId
                &&    conversionItem.ItemId               == bom.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId     == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId               == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(BOM),
                          fieldnum(BOM, bomId),
                          bom.bomId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>BOMVersion</c> table for transactions that are not allowed.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkBOMVersion()
    {
        boolean     ok = true;
        BOMVersion  bomVersion;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany bomId from bomVersion
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == bomVersion.DataAreaId
                &&    conversionItem.ItemId               == bomVersion.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(BOMVersion),
                          fieldnum(BOMVersion, bomId),
                          bomVersion.bomId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForecastInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the<c>ForecastInvent</c> table for transactions that are not allowed.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkForecastInvent()
    {
        boolean         ok = true;
        ForecastInvent  forecastInvent;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany ItemId from forecastInvent
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == forecastInvent.DataAreaId
                &&    conversionItem.ItemId               == forecastInvent.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(ForecastInvent),
                          fieldnum(ForecastInvent, ItemId),
                          forecastInvent.ItemId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>ReqTrans</c> table for transactions that are not allowed.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkReqTrans()
    {
        boolean         ok = true;
        ReqTrans        reqTrans;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany RefId from reqTrans
            where (reqTrans.RefType     == ReqRefType::BOMPlannedOrder
            ||     reqTrans.RefType     == ReqRefType::ItemPlannedOrder
            ||     reqTrans.RefType     == ReqRefType::PlannedKanban
            ||     reqTrans.RefType     == ReqRefType::PlannedKanbanLine)
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == reqTrans.DataAreaId
                &&    conversionItem.ItemId               == reqTrans.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(ReqTrans),
                          fieldnum(ReqTrans, RefId),
                          reqTrans.RefId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>RouteVersion</c> table for transactions that are not allowed.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkRouteVersion()
    {
        boolean         ok = true;
        RouteVersion    routeVersion;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany RouteId from routeVersion
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == routeVersion.DataAreaId
                &&    conversionItem.ItemId               == routeVersion.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(RouteVersion),
                          fieldnum(RouteVersion, RouteId),
                          routeVersion.RouteId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the issue type.
    /// </summary>
    /// <returns>
    ///    An element in the <c>TradeNonStockedConversionIssue</c> enumeration type.
    /// </returns>
    protected TradeNonStockedConversionIssue issueType()
    {
        return TradeNonStockedConversionIssue::RecordNotAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks in the <c>TradeNonStockedConversionCheckNotAllowed</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// An <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_tradeNonStockedConversionItem">
    /// An <c>TradeNonStockedConversionItem</c> record; optional.
    /// </param>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    static public boolean checkAll(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem  = null)
    {
        boolean ok;

        TradeNonStockedConversionCheckNotAllowed tradeNonStockedConversionCheckNotAllowed = TradeNonStockedConversionCheckNotAllowed::construct();
        tradeNonStockedConversionCheckNotAllowed.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionCheckNotAllowed.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);
        ok = tradeNonStockedConversionCheckNotAllowed.check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeNonStockedConversionCheckNotAllowed construct()
    {
        return new TradeNonStockedConversionCheckNotAllowed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>