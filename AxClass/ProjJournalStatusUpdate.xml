<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjJournalStatusUpdate</Name>
  <SourceCode>
    <Declaration><![CDATA[
class ProjJournalStatusUpdate extends ProjJournalCheckPost implements BatchRetryable
{
    ProjJournalStatusNameId statusNameId;
    NextPrevious            nextPrevious;

   #define.CurrentVersion(1)

    #localmacro.CurrentList
        statusNameId,
        nextPrevious
    #endmacro
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>checkJournal</Name>
        <Source><![CDATA[
    /// <summary>
    /// Validates the project budget for the project journal.
    /// </summary>
    /// <param name="_journalTransList">
    /// An instance of the <c>JournalTransList</c> class that holds a list of the project journal lines.
    /// </param>
    /// <returns>
    /// true the if journal is valid; otherwise, false.
    /// </returns>
    public boolean checkJournal(JournalTransList _journalTransList)
    {
        ProjJournalTable projJournalTable = journalTableData.journalTable();
        boolean          ret              = true;

        if (this.parmNextPrevious() == NextPrevious::Next &&
            ProjJournalStatusLine::find(projJournalTable.StatusNameId,this.statusNew()).Check)
        {
            ret = super(_journalTransList);
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialogCaption</Name>
        <Source><![CDATA[
    public str dialogCaption()
    {
        return strfmt("@SYS69012",this.parmJournalId());
    }

]]></Source>
      </Method>
      <Method>
        <Name>infoResult</Name>
        <Source><![CDATA[
    public void infoResult()
    {
        ProjJournalTable projJournalTable = journalTableData.journalTable();
        ProjJournalStatusType projJournalStatusType;

        if (! showInfoResult)
        {
            return;
        }

        if (! journalTableData.journalErrorTransList().count())
        {
            info(strfmt("@SYS70300",projJournalTable.Status));
        }
        else
        {
            if (this.parmNextPrevious() == NextPrevious::Next)
            {
                projJournalStatusType = ProjJournalStatusLine::statusNxt(projJournalTable.StatusNameId, projJournalTable.Status);
            }
            else
            {
                projJournalStatusType = ProjJournalStatusLine::statusPrev(projJournalTable.StatusNameId, projJournalTable.Status);
            }

            info("@SYS62651");
            info(strfmt("@SYS62650",journalTableData.journalErrorTransList().count()));
            info(strfmt("@SYS50616",projJournalStatusType));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmNextPrevious</Name>
        <Source><![CDATA[
    public NextPrevious parmNextPrevious(NextPrevious _nextPrevious = nextPrevious)
    {
        nextPrevious = _nextPrevious;

        return nextPrevious;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmStatusNameId</Name>
        <Source><![CDATA[
    public ProjJournalStatusNameId parmStatusNameId(ProjJournalStatusNameId _statusNameId = statusNameId)
    {
        statusNameId = _statusNameId;

        return statusNameId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>runEnd</Name>
        <Source><![CDATA[
    public Integer runEnd(boolean _deleteErrors = false)
    {
        ProjJournalTable projJournalTable = journalTableData.journalTable();

        if (!journalTableData.journalErrorTransList().count())
        {
            projJournalTable.setStatus(this.parmNextPrevious());
            projJournalTable.update();
        }

        super();

        return 0;
    }

]]></Source>
      </Method>
      <Method>
        <Name>statusNew</Name>
        <Source><![CDATA[
    private ProjJournalStatusType statusNew()
    {
        ProjJournalTable projJournalTable = journalTableData.journalTable();

        if (this.parmNextPrevious() == NextPrevious::Previous)
        {
            return ProjJournalStatusLine::statusPrev(projJournalTable.StatusNameId, projJournalTable.Status);
        }

        return ProjJournalStatusLine::statusNxt(projJournalTable.StatusNameId, projJournalTable.Status);
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    private static void main(Args _args)
    {
        ProjJournalStatusUpdate journalStatusUpdate;
        JournalForm             journalForm;

        journalForm      = JournalForm::fromArgs(_args);

        journalStatusUpdate = ProjJournalStatusUpdate::newFromForm(_args, journalForm);

        journalForm.runbaseMainStart();

        if (!journalStatusUpdate.prompt())
        {
            //if (! journalStatusUpdate.batchInfo().parmBatch().RecId)
            if (! journalStatusUpdate.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalStatusUpdate.parmJournalId());
            }
            return;
        }

        try
        {
            journalStatusUpdate.runOperation();
            journalForm.runbaseMainEnd(journalStatusUpdate,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalStatusUpdate,true);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>newFromForm</Name>
        <Source><![CDATA[
    private static ProjJournalStatusUpdate newFromForm(Args _args, JournalForm _journalForm)
    {
        ProjJournalStatusUpdate     journalStatusUpdate = new ProjJournalStatusUpdate();
        ProjJournalTable            journalTable = _journalForm.journalTableData().journalTable();
        ;
        journalStatusUpdate.getLast();
        journalStatusUpdate.parmAutoBlock(false);
        journalStatusUpdate.parmShowInfoResult(true);
        journalStatusUpdate.parmJournalCheckPostType(JournalCheckPostType::Check);
        journalStatusUpdate.parmNextPrevious(_args.parmEnum());
        journalStatusUpdate.parmJournalTableId(journalTable.TableId);
        journalStatusUpdate.parmJournalId(journalTable.JournalId);
        journalStatusUpdate.parmStatusNameId(journalTable.StatusNameId);

        _journalForm.journalTransData();

        return journalStatusUpdate;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>