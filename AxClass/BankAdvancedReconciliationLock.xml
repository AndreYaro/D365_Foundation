<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAdvancedReconciliationLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Locking class for advanced bank reconciliation, to prevent marking as reconciled or running matching rule for the same bank account in parallel.
/// </summary>
internal final class BankAdvancedReconciliationLock
{
    private const str LockNameFormat = "BankAdvancedReconciliation_%1"; // %1 is bank account table recid.

    private boolean lockAcquired;
    private ReqReaderWriterLock lock;
    private str lockName;
    private CompanyBankAccountId bankAccount;
    private RecId bankAccountRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(CompanyBankAccountId _bankAccount)
    {
        bankAccount = _bankAccount;
        bankAccountRecId = BankAccountTable::find(bankAccount).RecId;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        lock = ReqReaderWriterLock::construct();
        lockName = strFmt(LockNameFormat, bankAccountRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enters the lock.
    /// </summary>
    internal void enterLock(int64 _batchJobId = 0)
    {
        if (bankAccountRecId)
        {
            lockAcquired = lock.tryEnterWriterLock(lockName);
        }

        if (!lockAcquired)
        {
            this.checkRunningBatchAndThrowError(_batchJobId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRunningBatchAndThrowError</Name>
				<Source><![CDATA[
    private void checkRunningBatchAndThrowError(int64 _batchJobId)
    {
        Batch batch;
        while select Parameters, BatchJobId from batch
            where batch.ClassNumber == classNum(BankReconciliationMatchRuleAutoBatch)
                && batch.Status == BatchStatus::Executing
                && batch.BatchJobId != _batchJobId
        {
            container parameters = batch.Parameters;
            for (int i = 1; i <= conLen(parameters); i++)
            {
                var parameter = conPeek(parameters, i);
                if (parameter
                    && typeOf(parameter) == Types::Container
                    && parameter != conNull())
                {
                    Common common;
                    try
                    {
                        common = con2Buf(parameter);
                    }
                    catch(Exception::Error)
                    {
                        continue;
                    }

                    if (common && common is BankReconciliationHeader)
                    {
                        BankReconciliationHeader header = common;
                        if (header.AccountId == bankAccount)
                        {
                            throw error(strFmt("@Bank:MatchingRuleAlreadyRunning", batch.BatchJobId, bankAccount));
                        }
                    }
                }
            }
        }

        while select Parameters, BatchJobId from batch
            where batch.ClassNumber == classNum(BankReconciliationHeaderReconcileInBatch)
                && batch.Status == BatchStatus::Executing
                && batch.BatchJobId != _batchJobId
        {
            container parameters = batch.Parameters;
            var parameter = conPeek(parameters, 2);
            if (parameter && typeOf(parameter) == Types::Int64)
            {
                RecId headerRecId = parameter;

                if (headerRecId)
                {
                    BankReconciliationHeader header = BankReconciliationHeader::find(headerRecId);
                    if (header && header.AccountId == bankAccount)
                    {
                        throw error(strFmt("@Bank:MatchingRuleAlreadyRunning", batch.BatchJobId, bankAccount));
                    }
                }
            }
        }

        throw error(strFmt("@Bank:BankAdvancedReconciliationInParallelErrorMessage", bankAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exitLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exits the lock.
    /// </summary>
    internal void exitLock()
    {
        if (lockAcquired)
        {
            lock.exit(lockName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLockAcquired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the lock is acquired.
    /// </summary>
    /// <returns>true if the lock is acquired, otherwise false.</returns>
    internal boolean isLockAcquired()
    {
        return lockAcquired;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>