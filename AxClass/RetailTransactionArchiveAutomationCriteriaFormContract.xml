<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionArchiveAutomationCriteriaFormContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Defines contract for <c>RetailTransactionArchiveAutomationCriteriaForm</c>. This is more like a Model that handles logic for data source
/// on the form.
/// </summary>
internal final class RetailTransactionArchiveAutomationCriteriaFormContract
{
    private FromDateTime startDateTime;
    private ToDateTime endDateTime;
    private DataAreaId retailTransactionDataAreaId;
    private const str EmptyString = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static RetailTransactionArchiveAutomationCriteriaFormContract construct()
    {
        RetailTransactionArchiveAutomationCriteriaFormContract contract = new RetailTransactionArchiveAutomationCriteriaFormContract();

        // setting defaults
        contract.parmStartDateTime(DateTimeUtil::minValue());
        contract.parmEndDateTime(DateTimeUtil::minValue());
        contract.parmRetailTransactionDataAreaId(EmptyString);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FromDateTime parmStartDateTime(FromDateTime _startDateTime = startDateTime)
    {
        startDateTime = _startDateTime;
        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ToDateTime parmEndDateTime(ToDateTime _endDateTime = endDateTime)
    {
        endDateTime = _endDateTime;
        return endDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTransactionDataAreaId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal DataAreaId parmRetailTransactionDataAreaId(DataAreaId _retailTransactionDataAreaId = retailTransactionDataAreaId)
    {
        retailTransactionDataAreaId = _retailTransactionDataAreaId;
        return retailTransactionDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validate()
    {
        return this.checkParmsValuesAreValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParmsValuesAreValid</Name>
				<Source><![CDATA[
    private boolean checkParmsValuesAreValid()
    {
        boolean isValid = true;

        if (isValid && !this.parmStartDateTime())
        {
            isValid = checkFailed("@Retail:RetailTransactionArchiveAutomationCriteriaFromDateTimeValidationMessage");
        }

        if (isValid && !this.parmEndDateTime())
        {
            isValid = checkFailed("@Retail:RetailTransactionArchiveAutomationCriteriaToDateTimeValidationMessage");
        }

        if (isValid && !this.parmRetailTransactionDataAreaId())
        {
            isValid = checkFailed("@Retail:RetailTransactionArchiveAutomationCriteriaDataAreaIdValidationMessage");
        }

        if (isValid && DateTimeUtil::getDifference(this.parmEndDateTime(), this.parmStartDateTime()) <= 0)
        {
            isValid = checkFailed("@Retail:RetailTransactionArchiveAutomationStartDateBeforeEndDateValidationMessage");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>