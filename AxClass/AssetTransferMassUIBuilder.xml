<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransferMassUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransferMassUIBuilder</c> class is customizing the UI for mass transfer functionality,
///     so as to display the "to financial dimensions" via DimensionEntryControl
///     and also the lookups for "due from" and "due to".
/// </summary>
public class AssetTransferMassUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField             dialogDimensionEntry;
    DimensionEntryControl   dimensionEntryControl;
    DialogField             actionField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(
        IdentifierName  _methodName,
        Object          _dataContract = this.dataContractObject())
    {
        DialogField field;

        if (_methodName == methodStr(AssetTransferMassReportContract, parmTargetDefaultDimension))
        {
            dialogDimensionEntry = DimensionEntryControlBuild::addToDialog(this.dialog(), classstr(LedgerDimensionEntryController));
        }
        else
        {
            field = super(_methodName, _dataContract);
        }

        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        AssetTransferMassContract   dataContract;
        DimensionDefault            dimension;

        super();

        if (dimensionEntryControl)
        {
            dimension = dimensionEntryControl.saveAttributeValueSet();
        }

        dataContract    = this.dataContractObject();

        dataContract.parmTargetDefaultDimension(dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the lookup method to show only selected main accounts.
    /// </summary>
    /// <param name="_control">
    ///     Reference of the string control.
    /// </param>
    public void lookupMainAccount(FormStringControl _control)
    {
        str                     lookupStr;
        SysTableLookup          sysTableLookup;
        Query                   lookupQuery;
        QueryBuildDataSource    qbds;

        lookupStr = strFmt("%1,%2,%3",
                        queryValue(DimensionLedgerAccountType::Asset),
                        queryValue(DimensionLedgerAccountType::BalanceSheet),
                        queryValue(DimensionLedgerAccountType::Liability));

        // Display the MainAccountId, Name, and Type fields in the lookup form.
        sysTableLookup = SysTablelookup::newParameters(tableNum(MainAccount), _control, true);
        sysTableLookup.addLookupfield(fieldNum(MainAccount, MainAccountId));
        sysTableLookup.addLookupMethod(tableMethodStr(MainAccount, localizedName));
        sysTableLookup.addLookupfield(fieldNum(MainAccount, Type));

        // Create a custom Query that filters on the Type field.
        lookupQuery = new Query();
        qbds = lookupQuery.addDataSource(tableNum(MainAccount));
        qbds.addRange(fieldNum(MainAccount, Type)).value(lookupStr);
        MainAccount::addSecureRangeForChartOfAccounts(qbds);
        sysTableLookup.parmQuery(lookupQuery);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers override methods for dialog controls and handles visibility for fields conditionally.
    /// </summary>
    public void postBuild()
    {
        DialogField dueToAccountField;
        DialogField dueFromAccountField;

        super();

        dueToAccountField   = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(AssetTransferMassReportContract, parmDueToAccount));
        dueFromAccountField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(AssetTransferMassReportContract, parmDueFromAccount));
        actionField         = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(AssetTransferMassContract, parmAction));

        actionField.frameType(FormFrameType::None);
        actionField.registerOverrideMethod(methodStr(FormRadioControl, modified), methodStr(AssetTransferMassController, actionModified), this.controller());

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            dueToAccountField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(AssetTransferMassUIBuilder, lookupMainAccount), this);
            dueFromAccountField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(AssetTransferMassUIBuilder, lookupMainAccount), this);
        }
        else
        {
            dueToAccountField.visible(false);
            dueFromAccountField.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates financial dimension controls dynamically from the <c>DimensionEntryControl</c> control.
    /// </summary>
    public void postRun()
    {
        super();

        if (dialogDimensionEntry)
        {
            dimensionEntryControl = dialogDimensionEntry.control();
            dimensionEntryControl.parmControlLabelText("@SYS313215");
            dimensionEntryControl.parmDisplayValues(true);
            dimensionEntryControl.parmCompany(curext());
            dimensionEntryControl.reactivate(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>