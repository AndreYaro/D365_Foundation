<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalJour_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProjProposalJour))]
public final class ProjProposalJour_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate fields of this invoice proposal with corresponding fields from the invoice project and currency code passed in.
    ///    Initializes usual exporter related data if proposal meets specific conditions.
    /// </summary>
    /// <param name="_projInvoiceTable">
    ///    The invoice project used to initialize the invoice proposal.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    ///    The funding source name for invoice proposal.
    /// </param>
    /// <param name="_currencyId">
    ///    The currency code used; optional.
    /// </param>
    public void initFromProjInvoiceTable(
        ProjInvoiceTable _projInvoiceTable,
        ProjFundingSourceRefId _projFundingSourceRefId,
        CurrencyCode _currencyId)
    {
        next initFromProjInvoiceTable(
            _projInvoiceTable,
            _projFundingSourceRefId,
            _currencyId);

        if (CustTable::find(this.InvoiceAccount).UsualExporter_IT
            && CustParameters::find().AutomaticIntentLetterAssignment_IT
            && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;
            TransDate refDate = this.InvoiceDate ? this.InvoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findActiveIntentLetterByType(
                this.InvoiceAccount,
                IntentLetterType_IT::Amount,
                refDate);

            if (custIntentLetter)
            {
                if (usExpExemptionTaxGroup)
                {
                    this.IntentLetterId_IT = custIntentLetter.InternalLetterId;
                    this.TaxGroupId = usExpExemptionTaxGroup;
                    info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
                }
            }
            else
            {
                select firstonly RecId from custIntentLetter
                    where custIntentLetter.AccountNum == this.InvoiceAccount
                        && custIntentLetter.IntentLetterType != IntentLetterType_IT::Period
                        && custIntentLetter.Status == IntentLetterStatus_IT::Open
                        && custIntentLetter.FromDate <= refDate
                        && custIntentLetter.ToDate >= refDate;

                if (custIntentLetter)
                {
                    info("@ExtendedItallianLocalization:IntentLettersArePresent");
                }
            }

            if (!custIntentLetter
                && usExpExemptionTaxGroup
                && this.TaxGroupId == usExpExemptionTaxGroup)
            {
                warning("@ExtendedItallianLocalization:UsExpTaxGroupUsedButNoActiveLetters");
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            this.PrintDynamicQRCode_IN = _projInvoiceTable.PrintDynamicQRCode_IN;
        }

        if (CFDISharedLogic_MX::mustInitCFDIEInvoicePeriod(this.InvoiceAccount))
        {
            this.CFDIEInvoicePeriod_MX = EInvoiceCFDIParameters_MX::find().EInvoiceGlobalPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = next validateWrite();

        if (ret
            && this.IntentLetterId_IT
            && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ret = this.validateIntentLetterId_IT();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntentLetterId_IT</Name>
				<Source><![CDATA[
    private boolean validateIntentLetterId_IT()
    {
        boolean ret = true;
        CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findInternalId(this.IntentLetterId_IT);

        if (custIntentLetter.Status != IntentLetterStatus_IT::Open)
        {
            ret = checkFailed(strfmt("@ExtendedItallianLocalization:LeterIsInStatus", custIntentLetter.InternalLetterId, custIntentLetter.Status));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        next update();

        if (this.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjProposalCost projProposalCost;
            update_recordset projProposalCost
                setting TaxGroupID = this.TaxGroupId
                where projProposalCost.ProposalId == this.ProposalId;

            ProjProposalEmpl projProposalEmpl;
            update_recordset projProposalEmpl
                setting TaxGroupID = this.TaxGroupId
                where projProposalEmpl.ProposalId == this.ProposalId;

            ProjProposalItem projProposalItem;
            update_recordset projProposalItem
                setting TaxGroupID = this.TaxGroupId
                where projProposalItem.ProposalId == this.ProposalId;

            ProjProposalOnAcc projProposalOnAcc;
            update_recordset projProposalOnAcc
                setting TaxGroupID = this.TaxGroupId
                where projProposalOnAcc.ProposalId == this.ProposalId;

            ProjProposalRevenue projProposalRevenue;
            update_recordset projProposalRevenue
                setting TaxGroupID = this.TaxGroupId
                where projProposalRevenue.ProposalId == this.ProposalId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjProposalJour, IntentLetterId_IT):
                if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                {
                    if (this.IntentLetterId_IT)
                    {
                        if (CustIntentLetter_IT::findInternalId(this.IntentLetterId_IT).Status == IntentLetterStatus_IT::Open)
                        {
                            this.TaxGroupId = CustParameters::find().UsualExporterExemptionTaxGroup_IT;
                            info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
                        }
                    }
                    else
                    {
                        this.TaxGroupId = CustTable::find(this.InvoiceAccount).TaxGroup;
                    }
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            this.TaxId = TaxRegistration::getPrimaryAddressRestrictedTaxRegistrationNumber(
                CompanyInfo::findDataArea(this.DataAreaId),
                TaxRegistrationTypesList::TAXID,
                this.InvoiceDate).RecId;
        }

        next insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>
    internal DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>ProjProposalJour</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that is applied to the <c>defaultDimension</c> field on the <c>ProjProposalJour</c>
    /// table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>ProjProposalJour</c> table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    internal DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>