<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjTransactionReversalDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// LedgerExchAdjHist plugin for the transaction reversal dialog.
/// </summary>
[ExportMetadataAttribute(enumStr(TransactionReversalSourceType), TransactionReversalSourceType::LedgerExchAdj)]
[ExportAttribute('Dynamics.AX.Application.TransactionReversalBaseDialog')]
internal final class LedgerExchAdjTransactionReversalDialog extends TransactionReversalBaseDialog
{
    LedgerExchAdjHist ledgerExchAdjHist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        super();

        ledgerExchAdjHist = this.parmFormRun().args().record() as LedgerExchAdjHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessingValidate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean preProcessingValidate()
    {
        GeneralJournalEntry generalJournalEntry = LedgerExchAdjHist::findRelatedGeneralJournalEntry(ledgerExchAdjHist);

        boolean isReversalAllowed = super();

        if (isReversalAllowed)
        {
            isReversalAllowed = LedgerExchAdjTransactionReversal::validateEligibleForReverse(
                generalJournalEntry,
                ledgerExchAdjHist);

            if (isReversalAllowed)
            {
                isReversalAllowed = LedgerExchAdjTransactionReversal::validateFutureForeignCurrencyRevaluationTransactionsExist(generalJournalEntry, false);
            }
        }

        return isReversalAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReversalAndPopulateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateReversalAndPopulateReversalTable()
    {
        boolean isValidReversal = true;

        changecompany(ledgerExchAdjHist.LegalEntity)
        {
            this.populateReversalTable();

            if (this.determineIfReversalCollidesWithActiveReversal() || this.determineIfReversalCollidesWithActiveBatchReversal())
            {
                isValidReversal = checkFailed("@GeneralLedger:TransactionReversalTransactionsInReversalWarning");
            }
        }

        return isValidReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateReversalTable()
    {
        changecompany(ledgerExchAdjHist.LegalEntity)
        {
            ttsbegin;

            GeneralJournalEntry generalJournalEntry = LedgerExchAdjHist::findRelatedGeneralJournalEntry(ledgerExchAdjHist);
            GeneralJournalAccountEntry generalJournalAccountEntry;

            select firstonly generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;
        
            TransactionReversalExecutionDetail reversalExecutionDetail = this.initWorkTable(this.getExecutionId(), ledgerExchAdjHist, generalJournalEntry, generalJournalAccountEntry);
            reversalExecutionDetail.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int64 lineCount()
    {
        GeneralJournalAccountEntry gjae;
        GeneralJournalEntry gje;
        TransactionReversalExecutionDetail reversalExecutionDetail;
        
        changecompany(ledgerExchAdjHist.LegalEntity)
        {
            select count(RecId) from gjae
                join RecId from gje
                join reversalExecutionDetail
                where gje.SubledgerVoucher == reversalExecutionDetail.SubledgerVoucher
                    && gje.AccountingDate == reversalExecutionDetail.TransactionDate
                    && gje.RecId == gjae.GeneralJournalEntry
                    && reversalExecutionDetail.ExecutionId == this.getExecutionId();
        }

        return gjae.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentlyProcessingReversalContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransactionReversalContract getCurrentlyProcessingReversalContract()
    {
        guid stagedReversalExecutionId = this.getExecutionId();
        guid activeReversalExecutionId;

        changecompany(ledgerExchAdjHist.LegalEntity)
        {
            activeReversalExecutionId = TransactionReversalExecutionDetail::getActiveReversalExecutionId(stagedReversalExecutionId);
        }

        return TransactionReversalContract::newFromExecutionId(activeReversalExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormAfterReversal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void refreshFormAfterReversal()
    {
        if (formHasMethod(this.parmFormRun().args().caller(), identifierStr(refreshForm)))
        {
            this.parmFormRun().args().caller().refreshForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTable</Name>
				<Source><![CDATA[
    private TransactionReversalExecutionDetail initWorkTable(
        guid _executionId,
        LedgerExchAdjHist _ledgerExchAdjHist,
        GeneralJournalEntry _generalJournalEntry,
        GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        TransactionReversalExecutionDetail reversalExecutionDetail;

        reversalExecutionDetail.ExecutionId = _executionId;
        reversalExecutionDetail.PostingType = _generalJournalAccountEntry.PostingType;
        reversalExecutionDetail.ReferenceRecId = _ledgerExchAdjHist.RecId;
        reversalExecutionDetail.ReferenceTableId = _ledgerExchAdjHist.TableId;
        reversalExecutionDetail.Status = TransactionReversalStatus::Waiting;
        reversalExecutionDetail.Result = strFmt("@GeneralLedger:TransactionReversalNoReverseMessage", _generalJournalEntry.JournalNumber, _generalJournalEntry.SubledgerVoucher, _generalJournalAccountEntry.PostingType);
        reversalExecutionDetail.SubledgerVoucher = _generalJournalEntry.SubledgerVoucher;
        reversalExecutionDetail.TransactionDate = _generalJournalEntry.AccountingDate;
        reversalExecutionDetail.JournalNumber = _generalJournalEntry.JournalNumber;
        reversalExecutionDetail.TransactionAmount = conPeek(GeneralJournalAccountEntry::sumOfPostedAmountByGJE(_generalJournalEntry.RecId), 1);
        reversalExecutionDetail.JournalCategory = _generalJournalEntry.JournalCategory;

        return reversalExecutionDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>