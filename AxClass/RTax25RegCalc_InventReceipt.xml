<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_InventReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_InventReceipt extends RTax25RegCalc implements BatchRetryable
{
    int                                 maxThreads;
    BatchHeader                         batchHeader;
    RTax25RegCalc_InventReceiptMultiply calc, calcFinal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        super();

        calcFinal = RTax25RegCalc_InventReceiptMultiply::construct(0, registerJournalTrans.RecId, this.isInBatch());

        if (maxThreads > 1)
        {
            // Get the header for this batch.
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            calcFinal.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            calcFinal.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + "@SYP4860779");
            batchHeader.addRuntimeTask(calcFinal, this.parmCurrentBatch().RecId);

            this.distributeTrans();

            batchHeader.save();
        }
        else
        {
            calc = RTax25RegCalc_InventReceiptMultiply::construct(1, registerJournalTrans.RecId, this.isInBatch());
            calc.runOperation();
            calcFinal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU            correctedPeriodDate;
        RTax25LedgerRun             ledgerRun;
        Map                         exceptions;
        RefRecId                    profitTableRecId;

        LedgerDimensionAccount  ledgerDimension,  offsetLedgerDimension;
        RecId                   mainAccountId,    offsetMainAccountId;
        DimensionDefault        defaultDimension, offsetDefaultDimension;

        InventTransPosting         inventTransPosting;
        InventTrans                inventTrans;
        InventSettlement           inventSettlement;
        LedgerVoucherReportDate_RU ledgerVoucherReportDate;

        boolean checkAccounts(inventTrans _inventTrans, InventTransPosting _inventTransPosting)
        {
            // Define profit code and check
            // Notice purchases have no correct operation account
            if (_inventTrans.Qty > 0)
            {
                ledgerDimension       = _inventTransPosting.LedgerDimension;
                offsetLedgerDimension = _inventTransPosting.OffsetLedgerDimension;
            }
            else
            {
                ledgerDimension       = _inventTransPosting.OffsetLedgerDimension;
                offsetLedgerDimension = _inventTransPosting.LedgerDimension;
            }

            mainAccountId          = LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerDimension).RecId;
            defaultDimension       = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(ledgerDimension);
            offsetMainAccountId    = LedgerDimensionFacade::getMainAccountFromLedgerDimension(offsetLedgerDimension).RecId;
            offsetDefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetLedgerDimension);

            if (exceptions.exists([ledgerDimension, offsetLedgerDimension]))
            {
                profitTableRecId = exceptions.lookup([ledgerDimension, offsetLedgerDimension]);
            }
            else
            {
                profitTableRecId = 0;
                if (ledgerRun.checkException(registerId, mainAccountId, offsetMainAccountId, defaultDimension, offsetDefaultDimension))
                {
                    profitTableRecId = RTax25ProfitTable::findDefaultDimension(defaultDimension, false, registerId).RecId;
                    if (!profitTableRecId)
                    {
                        profitTableRecId = RTax25ProfitTable::findDefaultDimension(offsetDefaultDimension, false, registerId).RecId;
                    }
                    if (!profitTableRecId)
                    {
                        if (!defaultDimension && !offsetDefaultDimension)  // AX6_300566
                        {
                            profitTableRecId = ledgerRun.checkAccountsInRange(mainAccountId, defaultDimension, offsetMainAccountId, offsetDefaultDimension);
                        }
                    }
                }
                exceptions.insert([ledgerDimension, offsetLedgerDimension], profitTableRecId);
            }

            return profitTableRecId != 0;
        }

        exceptions = new Map(Types::Container, Types::Int64);

        ledgerRun      = RTax25LedgerRun::newRegisterId(this, "", registerId);

        while select ReportingDate from ledgerVoucherReportDate
                order by ReportingDate asc
                where ledgerVoucherReportDate.AccountingDate >= _fromDateCalc &&
                      ledgerVoucherReportDate.AccountingDate <= _toDateCalc   &&
                      ledgerVoucherReportDate.ReportingDate  <= _toDateCorr
            join LedgerDimension, OffsetLedgerDimension from inventTransPosting
                where inventTransPosting.InventTransPostingType == InventTransPostingType::Financial        &&
                      inventTransPosting.Voucher                == ledgerVoucherReportDate.Voucher          &&
                      inventTransPosting.TransDate              == ledgerVoucherReportDate.AccountingDate
            join Qty from inventTrans
                where inventTrans.DateFinancial     == inventTransPosting.TransDate         &&
                      inventTrans.Voucher           == inventTransPosting.Voucher           &&
                      inventTrans.InventTransOrigin == inventTransPosting.InventTransOrigin
        {
            if (checkAccounts(inventTrans, inventTransPosting))
            {
                correctedPeriodDate = dateEndQtr(ledgerVoucherReportDate.ReportingDate);
                break;
            }
        }

        while select TableId from inventSettlement
            where inventSettlement.Cancelled    == NoYes::No                                    &&
                  inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur &&
                  inventSettlement.SettleModel  != InventSettleModel::PhysicalValue
            join ReportingDate from ledgerVoucherReportDate
                order by ReportingDate asc
                where ledgerVoucherReportDate.AccountingDate == inventSettlement.TransDate  &&
                      ledgerVoucherReportDate.Voucher        == inventSettlement.Voucher    &&
                      ledgerVoucherReportDate.AccountingDate >= _fromDateCalc               &&
                      ledgerVoucherReportDate.AccountingDate <= _toDateCalc                 &&
                      ledgerVoucherReportDate.ReportingDate  <= _toDateCorr
            join Qty from inventTrans
                where inventTrans.RecId == inventSettlement.TransRecId
            join ledgerDimension, OffsetLedgerDimension from inventTransPosting
                where inventTransPosting.TransDate         == inventTrans.DateFinancial &&
                      inventTransPosting.Voucher           == inventTrans.Voucher       &&
                      inventTransPosting.InventTransOrigin == inventTrans.InventTransOrigin

        {
            if (checkAccounts(inventTrans, inventTransPosting))
            {
                if (!correctedPeriodDate || correctedPeriodDate > ledgerVoucherReportDate.ReportingDate)
                {
                    correctedPeriodDate = dateEndQtr(ledgerVoucherReportDate.ReportingDate);
                }

                break;
            }
        }

        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTask(ItemId  _itemFrom, ItemId  _itemTo, int _startCount)
    {
        calc = RTax25RegCalc_InventReceiptMultiply::construct(_startCount, registerJournalTrans.RecId, this.isInBatch());
        calc.parmItemRange(_itemFrom, _itemTo);
        calc.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        calc.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + strfmt("@SYP4860775", _itemFrom, _itemTo));
        batchHeader.addRuntimeTask(calc, this.parmCurrentBatch().RecId);
        batchHeader.addDependency(calcFinal, calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void distributeTrans()
    {
        InventTrans                         inventTrans;
        int                                 restInvTrans, itemCount, regCount, loop, interval, avgCount, restThreads, itemFromIdx;
        Array                               itemList = new Array(Types::Container);

        Query                               query = new Query();
        QueryBuildDataSource                qbds = query.addDataSource(tableNum(InventTrans));
        QueryRun                            queryRun;

        qbds.addGroupByField(fieldNum(InventTrans, ItemId));
        qbds.addSortField(fieldNum(InventTrans, ItemId), SortOrder::Ascending);
        qbds.addSelectionField(fieldNum(InventTrans, ItemId));
        qbds.addSelectionField(fieldNum(InventTrans, RecId), SelectionField::Count);

        qbds  = qbds.addDataSource(tableNum(InventTransPostingReportingView_RU));
        qbds.addRange(fieldNum(InventTransPostingReportingView_RU, InventTransPostingType)).value(queryValue(InventTransPostingType::Financial));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);

        rTax25PeriodIterator.applyExtendedRange(qbds);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tableNum(inventTrans));
            itemCount++;
            restInvTrans += inventTrans.RecId;

            itemList.value(itemCount, [inventTrans.ItemId, inventTrans.RecId]);
        }

        if (itemCount <= maxThreads)
        {
            regCount = 1;
            for (loop = 1; loop <= itemCount; loop++)
            {
                this.createTask(conpeek(itemList.value(loop), 1), conpeek(itemList.value(loop), 1), regCount);
                regCount += conpeek(itemList.value(loop), 2);
            }
        }
        else
        {
            regCount    = 1;
            itemFromIdx = 1;
            restThreads = maxThreads;
            avgCount    = restThreads ? (restInvTrans / restThreads) : 0;
            for (loop = 1; loop <= itemCount; loop++)
            {
                interval += conpeek(itemList.value(loop), 2);
                if (interval >= avgCount || loop == itemCount)
                {
                    this.createTask(conpeek(itemList.value(itemFromIdx), 1), conpeek(itemList.value(loop), 1), regCount);
                    if (loop == itemCount)
                        break;
                    regCount     += interval;
                    itemFromIdx   = loop + 1;
                    restInvTrans -= interval;
                    restThreads--;
                    avgCount      = restThreads ? (restInvTrans / restThreads) : 0;
                    interval      = 0;
                    if (restThreads == 1)
                    {
                        this.createTask(conpeek(itemList.value(itemFromIdx), 1), conpeek(itemList.value(itemCount), 1), regCount);
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        super(_registerJournalTrans, _batch);

        if (this.isInBatch())
        {
            maxThreads     = RTax25RegisterParameters::find(registerId, 3).Parameter ?
                             str2int(RTax25RegisterParameters::find(registerId, 3).Parameter) :
                             0;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    public void postCalc()
    {
    //   super(); do not change the register status
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>