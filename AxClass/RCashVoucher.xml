<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
// RCash Ii
final class rCashVoucher
{
    LedgerJournalTrans       ledgerJournalTrans;
    LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
    RCashTrans               cashTrans;
    RCashTable               cashTable;
    RCashParameters          cashParameters;

    RCashTransSetStatus      callerTransSetStatus;
    boolean                  numSeqOk;

    ReasonRefRecID           reasonRefRecID;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumSeqCode</Name>
				<Source><![CDATA[
    private Num allocateNumSeqCode(boolean _eraseNum = false)
    {
        NumberSequenceReference numberSequenceReference = RCashParameters::numRefDocId(ledgerJournalTrans);
        NumberSequenceGroupId   numberSequenceGroup     = RCashTable::find(ledgerJournalTrans.parmAccount()).NumberSequenceGroup;
        NumberSequenceGroupRef  numberSequenceGroupRef;
        NumberSequenceTable     numberSequenceTableNum;
        RefRecId                scopeId                 = NumberSeqScopeFactory::createDefaultScope().getId();
        Num                     num;

        if (numberSequenceGroup)
        {
            numberSequenceGroupRef = NumberSequenceGroupRef::findNaturalKey(numberSequenceReference.NumberSequenceDatatype, scopeId, numberSequenceGroup);

            if (numberSequenceGroupRef.NumberSequenceId)
            {
                numberSequenceReference.NumberSequenceId = numberSequenceGroupRef.NumberSequenceId;
            }
        }

        if (! numberSequenceReference.NumberSequenceId)
        {
            numSeqOk = checkFailed("@SYS54052");
            return "";
        }

        if (! _eraseNum)
        {
            numberSequenceTableNum = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);
            if (numberSequenceTableNum.Manual)
            {
                if (! ledgerJournalTrans_RCash.CashDocId)
                {
                    numSeqOk = checkFailed("@GLS104456");
                    return "";
                }
                num = ledgerJournalTrans_RCash.CashDocId;
            }
            else
            {
                num = NumberSeq::newGetNumFromCode(numberSequenceTableNum.NumberSequence).num();
            }

            if (! RCashVoucher::checkReuseNum(ledgerJournalTrans, ledgerJournalTrans_RCash, num))
            {
               NumberSeq::releaseNumber(numberSequenceReference.NumberSequenceId, num);
               num      = "";
               numSeqOk = false;
            }
        }
        else
        {
            NumberSeq::releaseNumber(numberSequenceReference.NumberSequenceId, ledgerJournalTrans_RCash.CashDocId);
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxPayment</Name>
				<Source><![CDATA[
    private boolean checkMaxPayment(RCashTrans _cashTrans)
    {
        RCashTrans                       counterAgentTrans;
        boolean                          ok = true;
        boolean                          agreement = (cashParameters.CheckAgreement == RCashCheckContract::Agreement);
        AmountMST                        amountPos, amountNeg;
        ErrorTxt                         errorTxt;
        Query                            query;
        QueryBuildDataSource             qbds;
        QueryRun                         qr;
        RecId                            dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        AmountMST countAmount(boolean _negative = false)
        {
            if (_negative)
            {
                findOrCreateRange_W(qbds, fieldNum(RCashTrans, AmountMST), '< 0.0');
            }
            else
            {
                findOrCreateRange_W(qbds, fieldNum(RCashTrans, AmountMST), '0.0..');
            }

            if (agreement)
            {
                SysQuery::addDimensionAttributeRange(query,
                    qbds.name(),
                    fieldStr(RCashTrans, OffsetLedgerDimension),
                    DimensionComponent::DimensionAttribute,
                    ledgerJournalTrans.OffsetAccountAgreementId_RU ?
                        ledgerJournalTrans.OffsetAccountAgreementId_RU :
                        SysQuery::valueEmptyString(),
                    DimensionAttribute::find(dimAttrRecId).Name);
            }
            else
            {
                qbds.addRange(fieldNum(RCashTrans, TransDate)).value(queryValue(_cashTrans.TransDate));
            }

            qr = new QueryRun(Query);
            if (qr.next())
            {
                counterAgentTrans = qr.get(tableNum(RCashTrans));
            }

            return counterAgentTrans.AmountMST;
        }

        if (agreement && !dimAttrRecId)
        {
            return ok;
        }

        query = new Query();
        qbds  = Query.addDataSource(tablenum(RCashTrans));
        qbds.addSelectionField(fieldNum(RCashTrans, AmountMST), SelectionField::Sum);
        qbds.addRange(fieldNum(RCashTrans, AccountNum)).value(queryValue(_cashTrans.AccountNum));
        qbds.addRange(fieldNum(RCashTrans, TransStatus)).value(strFmt("@GLS107148", RCashTransStatus::Confirmed, RCashTransStatus::Approved));
        qbds.addRange(fieldNum(RCashTrans, DocType)).value(SysQuery::valueNot(RCashDocType::ExchRateDifference));
        qbds.addRange(fieldNum(RCashTrans, OffsetAccountType)).value(queryValue(_cashTrans.OffsetAccountType));
        qbds.addRange(fieldNum(RCashTrans, OffsetLedgerDimensionNum)).value(queryValue(_cashTrans.OffsetLedgerDimensionNum));
        qbds.addRange(fieldNum(RCashTrans, RecId)).value(SysQuery::valueNot(_cashTrans.RecId));

        if (_cashTrans.OffsetAccountType == LedgerJournalACType::Bank ||
            _cashTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            return true;
        }

        amountPos = countAmount();
        amountNeg = abs(countAmount(true));

        if (_cashTrans.AmountMST > 0.0)
        {
            amountPos += _cashTrans.AmountMST;
        }
        else
        {
            amountNeg += abs(_cashTrans.AmountMST);
        }

        if (amountPos > cashParameters.PaymentMax || amountNeg > cashParameters.PaymentMax)
        {
            errorTxt = strFmt((agreement ? "@GLS106617" : "@GLS104452"), _cashTrans.OffsetAccountType, _cashTrans.offsetAccountNum());
            switch (cashParameters.MandatoryPaymentLimit)
            {
                case ErrorTolerance::Accept :
                    ok = true;
                    break;
                case ErrorTolerance::Warning :
                    info(errorTxt);
                    ok = true;
                    break;
                case ErrorTolerance::Error :
                    ok = checkFailed(errorTxt);
                    break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxRemain</Name>
				<Source><![CDATA[
    private boolean checkMaxRemain(RCashTrans _cashTrans)
    {
        RCashCheckRemain    checkRemain = new RCashCheckRemain();

        checkRemain.parmCashTable(cashTable);
        checkRemain.parmToDate(_cashTrans.TransDate);

        return checkRemain.check(cashTable,
                                 _cashTrans.CurrencyCode,
                                 _cashTrans.AmountMST,
                                 _cashTrans.AmountCur,
                                 false,
                                 _cashTrans.CashPayTransType == RCashPayLedgerTransType::CashWithdraw
                                 );
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNegativeCur</Name>
				<Source><![CDATA[
    private boolean checkNegativeCur(RCashTrans _cashTrans)
    {
        RCashBalanceCur balanceCur;
        boolean         ret = true;
        ;

        if (_cashTrans.AmountCur > 0 || cashTable.NegativeCash)
            return true;

        balanceCur = new RCashBalanceCur(_cashTrans.TransDate);
        balanceCur.calc(_cashTrans.AccountNum, _cashTrans.CurrencyCode);

        if ((balanceCur.amountCur() + _cashTrans.AmountCur) < 0)
        {
            ret = checkFailed(strFmt("@GLS104516", _cashTrans.AccountNum, _cashTrans.CurrencyCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    private boolean checkParameters()
    {
        boolean                 ok = true;

        if (! ledgerJournalTrans)
        {
            ok = checkFailed("@SYS19386");
        }
        if (! ledgerJournalTrans.LedgerDimension || ! cashTable )
        {
            ok = checkFailed(strFmt("@SYS17167", ledgerJournalTrans.parmAccount()));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumDestinations_UA</Name>
				<Source><![CDATA[
    private boolean checkSumDestinations_UA(RCashTrans _cashTrans)
    {
        boolean     ok = true;

        if (RCashDestinationTrans::existLedgerJournalTransRecId(ledgerJournalTrans.RecId))
        {
            if (abs((select sum(AmountCur) from rCashDestinationTrans
                     where rCashDestinationTrans.LedgerJournalTransRecId == ledgerJournalTrans.RecId).AmountCur) != abs(_cashTrans.AmountCur))
            {
                ok = checkFailed(strFmt("@GLS104882", _cashTrans.Voucher));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(RCashTrans _cashTrans)
    {
        boolean ok = true;
        ;
        if (ledgerJournalTrans.CurrencyCode != cashTable.CurrencyCode &&
            cashTable.MultiCurrencyCode     != NoYes::Yes)
        {
            ok = checkFailed(strFmt("@SYS19244",
                                    ledgerJournalTrans.CurrencyCode,
                                    ledgerJournalTrans.parmAccount()));
        }

        if (! ledgerJournalTrans_RCash.CashDocId)
        {
            ok = RCashVoucher::checkTransDate(ledgerJournalTrans, ledgerJournalTrans_RCash) && ok;
        }

        ok = this.checkMaxPayment(_cashTrans)       && ok;
        ok = this.checkMaxRemain(_cashTrans)        && ok;
        ok = this.checkNegativeCur(_cashTrans)      && ok;
        ok = this.checkSumDestinations_UA(_cashTrans)   && ok; //Nast;UA_Cash

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTrans</Name>
				<Source><![CDATA[
    public RCashTrans createOrUpdateTrans(RCashTransStatus _transStatus)
    {
        RCashTrans  rCashTrans      = cashTrans.orig();

        if (_transStatus == RCashTransStatus::None &&  ! cashParameters.ConfirmationEnabled)
            return null;

        if (! cashTrans.RecId)
        {
            cashTrans = this.initCashTrans(cashTrans);
        }

        cashTrans.TransStatus = _transStatus;

        if ((_transStatus == RCashTransStatus::Confirmed          ||
             _transStatus == RCashTransStatus::Approved)          &&
             rCashTrans.TransStatus != RCashTransStatus::Approved  && // reset status
            ! this.checkTrans(cashTrans))
            return null;

        numSeqOk = true;
        if (! cashTrans.RecId)
        {
            if (! cashTrans.DocId)
            {
                cashTrans.DocId = this.allocateNumSeqCode();
            }
            else
            {
                cashTrans.ManualDocId = true;
            }
            numSeqOk = numSeqOk && RCashVoucher::checkReuseNum(ledgerJournalTrans, ledgerJournalTrans_RCash, cashTrans.DocId);
        }

        if (! numSeqOk || ! cashTrans.DocId)
        {
            return null; // Fatal docId generation nerror
        }

    //    ledgerJournalTrans.NoEdit = NoYes::Yes;
    //    ledgerJournalTrans.update();

        if ((_transStatus == RCashTransStatus::Confirmed    ||
             _transStatus == RCashTransStatus::None) &&
             rCashTrans.TransStatus == RCashTransStatus::Approved)
        {
            cashTrans.AmountCur = 0;
            cashTrans.AmountMST = 0;
            RCashVoucher::updateBalances(cashTrans);
            cashTrans.AmountCur = rCashTrans.AmountCur;
            cashTrans.AmountMST = rCashTrans.AmountMST;
        }
        else
        {
            if (_transStatus == RCashTransStatus::Approved)
            {
                RCashVoucher::updateBalances(cashTrans);
            }
        }

        if (! cashTrans.RecId)
        {
            this.updateDestinationTransRef();
        }

        cashTrans.write();

        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    public boolean deleteTrans()
    {
        boolean ret = true;

        if (cashTrans.TransStatus   != RCashTransStatus::Confirmed &&
            cashTrans.TransStatus   != RCashTransStatus::Approved)
            return true;

        if (cashTrans)
        {
            if (! cashTrans.ManualDocId)
            {
                this.allocateNumSeqCode(true);
            }
            cashTrans.AmountCur = 0;
            cashTrans.AmountMST = 0;
            RCashVoucher::updateBalances(cashTrans); // decrease balance
            cashTrans.delete();

            cashTrans.clear();
            this.updateDestinationTransRef();
        }
        else
        {
            ret = checkFailed(strFmt("@SYS19286", ledgerJournalTrans_RCash.CashDocId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashTrans</Name>
				<Source><![CDATA[
    public RCashTrans initCashTrans(RCashTrans _cashTrans)
    {
        #ISOCountryRegionCodes
        _cashTrans.initFromLedgerJournalTrans(ledgerJournalTrans, ledgerJournalTrans_RCash);
        _cashTrans.DocType = RCashVoucher::docType(ledgerJournalTrans);

        if (callerTransSetStatus)
        {
            _cashTrans.DocTaxValue         = callerTransSetStatus.parmDocTaxValue();
            _cashTrans.DocSalesTaxValue    = callerTransSetStatus.parmDocSalesTaxValue();
            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                _cashTrans.RepresPersonCard_LT = callerTransSetStatus.parmRepresPersonCard_LT();
            }
            // </GEELT>
        }

        _cashTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(this.summaryLedgerDimension(), ledgerJournalTrans.DefaultDimension);

        return _cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LedgerJournalTrans           _ledgerJournalTrans,
                    LedgerJournalTrans_RCash     _ledgerJournalTrans_RCash,
                    RCashTransSetStatus          _caller = null)
    {
        ;
        ledgerJournalTrans       = _ledgerJournalTrans;
        ledgerJournalTrans_RCash = _ledgerJournalTrans_RCash;
        cashTable = RCashTable::find(ledgerJournalTrans.parmAccount());
        cashParameters = RCashParameters::find();

        if (_caller && classIdGet(_caller) != classNum(RCashTransSetStatus))
            throw error(Error::wrongUseOfFunction(funcName()));

        callerTransSetStatus = _caller;

        if (! this.checkParameters())
            throw error("@SYS18447");

        cashTrans = RCashTrans::find(ledgerJournalTrans.parmAccount(),
                                     ledgerJournalTrans_RCash.CashDocId,
                                     ledgerJournalTrans_RCash.DocType,
                                     ledgerJournalTrans.TransDate,
                                     true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecID</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonRefRecID(ReasonRefRecID _reasonRefRecID = reasonRefRecID)
    {
        ;
        reasonRefRecID = _reasonRefRecID;

        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher,
                     AmountCur     _taxAmount = 0)
    {
        #ISOCountryRegionCodes
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerJournalTrans_RCash    ledgerJournalTransLocal_RCash;
        CurrencyExchangeHelper      exchangeRateHelper;

        ttsbegin;

        if (ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::RCash &&
            ! cashTrans)
        {
            cashTrans = this.createOrUpdateTrans(RCashTransStatus::Approved);
            if (cashTrans)
            {
                ledgerJournalTransLocal_RCash = LedgerJournalTrans_RCash::find(ledgerJournalTrans.RecId,true);
                ledgerJournalTrans_RCash.CashDocId    = cashTrans.DocId;
                ledgerJournalTrans_RCash.DocType      = cashTrans.DocType;

                ledgerJournalTransLocal_RCash.RefRecId   = ledgerJournalTrans.RecId;
                ledgerJournalTransLocal_RCash.CashDocId  = cashTrans.DocId;
                ledgerJournalTransLocal_RCash.DocType    = cashTrans.DocType;
                ledgerJournalTransLocal_RCash.write();
            }
        }

        if (! cashTrans)
            throw error("@GLS104496");

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(ledgerJournalTrans ? ledgerJournalTrans.ExchRate : 0);
        exchangeRateHelper.parmExchangeRate2(ledgerJournalTrans ? ledgerJournalTrans.ExchRateSecond : 0);
        exchangeRateHelper.parmReportingExchangeRate1(ledgerJournalTrans ? ledgerJournalTrans.ReportingCurrencyExchRate : 0);
        exchangeRateHelper.parmReportingExchangeRate2(ledgerJournalTrans ? ledgerJournalTrans.ReportingCurrencyExchRateSecondary : 0);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    _ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::RCash,
                    cashTrans.LedgerDimension,
                    ledgerJournalTrans.CurrencyCode,
                    ledgerJournalTrans.amount() + _taxAmount,
                    exchangeRateHelper);

        ledgerVoucherTransObject.parmTaxParentReferenceTableId(cashTrans.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId(cashTrans.RecId);

        if (ledgerJournalTrans)
        {
            ledgerVoucherTransObject.parmQty(ledgerJournalTrans.Qty);
            ledgerVoucherTransObject.parmTransTxt(ledgerJournalTrans.Txt);
            ledgerVoucherTransObject.parmPaymentReference(ledgerJournalTrans.PaymReference);
            ledgerVoucherTransObject.parmPaymMode(ledgerJournalTrans.PaymMode);
            ledgerVoucherTransObject.parmReasonRefRecID(reasonRefRecID);
        }

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        cashTrans.Posted = NoYes::Yes;
        cashTrans.update();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU])
            && LedgerJournalTrans_RCash::find(ledgerJournalTrans.RecId).RoundOffCashAmount_HU)
        {
            this.postRoundingTrans(ledgerJournalTrans, _ledgerVoucher, cashTrans);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRoundingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the cash round off transactions.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///     The <c>LedgerVoucher</c> class object.
    /// </param>
    /// <param name="_cashTrans">
    ///     The <c>RCashTrans</c> table buffer.
    /// </param>
    protected void postRoundingTrans(LedgerJournalTrans  _ledgerJournalTrans, LedgerVoucher _ledgerVoucher, RCashTrans _cashTrans = null)
    {
        LedgerVoucherTransObject        ledgerVoucherTransObject;
        CurrencyExchangeHelper          exchangeRateHelper;
        RoundOff                        cashRoundOffAmount;
        LedgerJournalTrans_RCash        ledgerJournalTransLocal_Rcash = LedgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId, false);

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans ? _ledgerJournalTrans.ExchRate : 0);
        exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans ? _ledgerJournalTrans.ExchRateSecond : 0);
        exchangeRateHelper.parmReportingExchangeRate1(_ledgerJournalTrans ? _ledgerJournalTrans.ReportingCurrencyExchRate : 0);
        exchangeRateHelper.parmReportingExchangeRate2(_ledgerJournalTrans ? _ledgerJournalTrans.ReportingCurrencyExchRateSecondary : 0);

        cashRoundOffAmount =  _ledgerJournalTrans.AmountCurDebit ? ledgerJournalTransLocal_Rcash.RoundOffCashAmount_HU : -ledgerJournalTransLocal_Rcash.RoundOffCashAmount_HU;

        if (cashRoundOffAmount && cashTrans.RecId)
        {
            cashTrans.AmountCur = (_cashTrans.AmountCur ? _cashTrans.AmountCur : cashTrans.AmountCur) + cashRoundOffAmount;
            cashTrans.AmountMST = (_cashTrans.AmountMST ? _cashTrans.AmountMST : cashTrans.AmountMST)
                + exchangeRateHelper.calculateTransactionToAccounting(_ledgerJournalTrans.CurrencyCode, cashRoundOffAmount,  true);
            RCashVoucher::updateBalances(cashTrans);
            cashTrans.update();
        }

        LedgerDimensionDefaultAccount cashLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
            RCashLedgerAccount::summaryLedgerDimension(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.PostingProfile),
            _ledgerJournalTrans.DefaultDimension);

        // round off transaction
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            _ledgerVoucher.findLedgerVoucherObject(),
            LedgerPostingType::LedgerJournal,
            cashLedgerDimension,
            _ledgerJournalTrans.CurrencyCode,
            cashRoundOffAmount,
            exchangeRateHelper);

        ledgerVoucherTransObject.parmTaxParentReferenceTableId(_cashTrans? _cashTrans.TableId : _ledgerJournalTrans.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId(_cashTrans? _cashTrans.RecId : _ledgerJournalTrans.RecId);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        LedgerDimensionDefaultAccount roundOffLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
            RCashLedgerAccount::roundOffLedgerDimension(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.PostingProfile),
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
                ? LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension)
                : _ledgerJournalTrans.OffsetDefaultDimension);

        // offset round off transaction
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            _ledgerVoucher.findLedgerVoucherObject(),
            LedgerPostingType::LedgerJournal,
            roundOffLedgerDimension,
            _ledgerJournalTrans.CurrencyCode,
            -cashRoundOffAmount,
            exchangeRateHelper);
        ledgerVoucherTransObject.parmTaxParentReferenceTableId(_cashTrans? _cashTrans.TableId : _ledgerJournalTrans.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId(_cashTrans? _cashTrans.RecId : _ledgerJournalTrans.RecId);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return RCashLedgerAccount::summaryLedgerDimension(ledgerJournalTrans.parmAccount(), ledgerJournalTrans.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDestinationTransRef</Name>
				<Source><![CDATA[
    private void updateDestinationTransRef()
    {
        RCashDestinationTrans rCashDestinationTrans;
        ;

        ttsbegin;

        while select forupdate rCashDestinationTrans
            where rCashDestinationTrans.LedgerJournalTransRecId == ledgerJournalTrans.RecId
        {
            rCashDestinationTrans.AccountNum = cashTrans.AccountNum;
            rCashDestinationTrans.TransDate  = cashTrans.TransDate;
            rCashDestinationTrans.DocType    = cashTrans.DocType;
            rCashDestinationTrans.DocId      = cashTrans.DocId;

            rCashDestinationTrans.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReuseNum</Name>
				<Source><![CDATA[
    public static boolean checkReuseNum(LedgerJournalTrans       _ledgerJournalTrans,
                                        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash,
                                        Num                      _docNum = "")
    {
        RCashTrans              cashTrans;
        boolean                 ret = true;
        ReuseVoucher            validationLevel;
        ErrorTxt                errorTxt;
        Num                     docNum;
        FiscalCalendarRecId     calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        ;

        docNum = _docNum ? _docNum : _ledgerJournalTrans_RCash.CashDocId;

        if (_ledgerJournalTrans_RCash.DocType == RCashDocType::ExchRateDifference)
        {
            return true;
        }

        validationLevel = RCashParameters::find().CheckReuseDoc;

        if (! RCashParameters::find().EarlierDatePosting)
        {
            if (validationLevel == ReuseVoucher::NoDuplicateInYear)
            {
                select firstonly DocId, TransDate from cashTrans
                    where cashTrans.DocId       >  docNum                                                         &&
                          cashTrans.DocType     == _ledgerJournalTrans_RCash.DocType                              &&
                          cashTrans.AccountNum  == _ledgerJournalTrans.parmAccount()                              &&
                          cashTrans.TransDate   < _ledgerJournalTrans.TransDate                                   &&
                          cashTrans.ManualDocId == false                                                          &&
                          cashTrans.TransDate   >= LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,
                                                       _ledgerJournalTrans.TransDate)                             &&
                          cashTrans.TransDate   <= LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId,
                                                       _ledgerJournalTrans.TransDate);
            }
            else
            {
                select firstonly DocId, TransDate from cashTrans
                    where cashTrans.DocId       >  docNum                                                         &&
                          cashTrans.DocType     == _ledgerJournalTrans_RCash.DocType                              &&
                          cashTrans.AccountNum  == _ledgerJournalTrans.parmAccount()                              &&
                          cashTrans.TransDate   < _ledgerJournalTrans.TransDate                                   &&
                          cashTrans.ManualDocId == false;
            }

            if (cashTrans.RecId)
            {
                error(strFmt("@GLS107276",cashTrans.TransDate,cashTrans.DocId,docNum));
                return false;
            }
        }

        select firstonly DocId, TransDate from cashTrans
            where cashTrans.DocId       == docNum                               &&
                  cashTrans.DocType     == _ledgerJournalTrans_RCash.DocType    &&
                  cashTrans.AccountNum  == _ledgerJournalTrans.parmAccount()    &&
                  cashTrans.TransDate   == _ledgerJournalTrans.TransDate;
        errorTxt = strFmt("@GLS104254", cashTrans.DocId, cashTrans.TransDate);

        if (cashTrans.TransDate == _ledgerJournalTrans.TransDate)
        {
            ret = false;
            error(errorTxt);
        }
        else
        {
            select firstonly DocId, TransDate from cashTrans
                order by TransDate asc
                where cashTrans.DocId       == docNum                               &&
                      cashTrans.DocType     == _ledgerJournalTrans_RCash.DocType    &&
                      cashTrans.AccountNum  == _ledgerJournalTrans.parmAccount();
            errorTxt = strFmt("@GLS104254", cashTrans.DocId, cashTrans.TransDate);
            switch (validationLevel)
            {
                case ReuseVoucher::AcceptDuplicate :
                    break;
                case ReuseVoucher::WarnDuplicate :
                    if (cashTrans.DocId)
                    {
                        info(errorTxt);
                    }
                    break;

                case ReuseVoucher::NoDuplicate :
                    if (cashTrans.DocId)
                    {
                        ret = checkFailed(errorTxt);
                    }
                    break;
                case ReuseVoucher::NoDuplicateInYear :

                select firstonly DocId, TransDate from cashTrans
                    order by TransDate asc
                        where cashTrans.DocId       == docNum                                                        &&
                              cashTrans.DocType     == _ledgerJournalTrans_RCash.DocType                             &&
                              cashTrans.AccountNum  == _ledgerJournalTrans.parmAccount()                             &&
                              cashTrans.TransDate   >= LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,
                                                           _ledgerJournalTrans.TransDate)                            &&
                              cashTrans.TransDate   <= LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId,
                                                           _ledgerJournalTrans.TransDate);

                    if (cashTrans.DocId)
                    {
                        ret = checkFailed(strFmt("@GLS104254", cashTrans.DocId, cashTrans.TransDate));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransDate</Name>
				<Source><![CDATA[
    public static boolean checkTransDate(LedgerJournalTrans       _ledgerJournalTrans,
                                         LedgerJournalTrans_RCash _ledgerJournalTrans_RCash)
    {
        RCashTrans  cashTrans;
        boolean     ret = true;

        if (! RCashParameters::find().EarlierDatePosting)
        {
            select firstonly TransDate from cashTrans
               where  cashTrans.AccountNum   == _ledgerJournalTrans.parmAccount()   &&
                      cashTrans.DocType      == _ledgerJournalTrans_RCash.DocType   &&
                      cashTrans.DocId        != _ledgerJournalTrans_RCash.CashDocId &&
                      cashTrans.TransDate    > _ledgerJournalTrans.TransDate        &&
                      cashTrans.TransStatus  == RCashTransStatus::Approved ;    //RU-628-81-DHU3
            ret = cashTrans.TransDate ?
                  checkFailed(strFmt("@GLS104561", cashTrans.TransDate)) :
                  true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docType</Name>
				<Source><![CDATA[
    public static RCashDocType docType(LedgerJournalTrans _ledgerJournalTrans)
    {
        RCashDocType ret;

        if (_ledgerJournalTrans.AmountCurDebit)
        {
            ret = _ledgerJournalTrans.AmountCurDebit > 0 ?
                    RCashDocType::ReimbursementSlip :
                    RCashDocType::Correction;
        }
        else
        {
            if (_ledgerJournalTrans.AmountCurCredit)
            {
                ret = _ledgerJournalTrans.AmountCurCredit > 0 ?
                      RCashDocType::DisbursementSlip :
                      RCashDocType::Correction;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalances</Name>
				<Source><![CDATA[
    public static boolean updateBalances(RCashTrans _cashTrans)
    {
        RCashBalances              balances;
        FiscalCalendarPeriod       fiscalCalendarPeriod;
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;
        RCashTrans                 oldCashTrans;
        boolean                    ret  = true;
        AmountCur                  amountCur;
        AmountMST                  amountMST;
        recId                      mainAccountId;

        oldCashTrans = RCashTrans::find(_cashTrans.AccountNum,
                                        _cashTrans.DocId,
                                        _cashTrans.DocType,
                                        _cashTrans.TransDate);

        if (oldCashTrans.TransStatus == RCashTransStatus::None ||
            oldCashTrans.TransStatus == RCashTransStatus::Confirmed)
        {
            amountCur = _cashTrans.AmountCur;
            amountMST = _cashTrans.AmountMST;
        }
        else
        {
            amountCur = _cashTrans.AmountCur - oldCashTrans.AmountCur;
            amountMST = _cashTrans.AmountMST - oldCashTrans.AmountMST;
        }
        if (amountCur == 0 && amountMST == 0)
            return true;

        ttsbegin;

        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(CompanyInfoHelper::fiscalCalendarRecId(),
                                                                           _cashTrans.TransDate);

        if (!fiscalCalendarPeriod)
            ret = checkFailed(strFmt("@SYS17614", _cashTrans.TransDate));

        ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriodByPeriodTypeDate(CompanyInfoHelper::fiscalCalendarRecId(),
                                                                                       _cashTrans.TransDate);

        if (ledgerFiscalCalendarPeriod.Status !=  FiscalPeriodStatus::Open)
            ret = checkFailed(strFmt("@SYS17615", _cashTrans.TransDate));

        mainAccountId = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_cashTrans.LedgerDimension).RecId;

        select firstonly forupdate balances
            order by AccountNum, PeriodStart desc
            where balances.AccountNum       == _cashTrans.AccountNum          &&
                  balances.MainAccountId    == mainAccountId                  &&
                  balances.PeriodStart      == fiscalCalendarPeriod.StartDate &&
                  balances.CurrencyCode     == _cashTrans.CurrencyCode;

        balances.AccountNum      = _cashTrans.AccountNum;
        balances.CurrencyCode    = _cashTrans.CurrencyCode;
        balances.PeriodStart     = fiscalCalendarPeriod.StartDate;
        balances.MainAccountId   = mainAccountId;

        if (_cashTrans.DocType != RCashDocType::ExchRateDifference)
        {
           balances.AmountCur   += amountCur;
           balances.AmountMST   += amountMST;
        }
        else
        {
           balances.ExchAdjustment  += amountMST;
        }

        balances.write();

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>