<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaKeyPerformanceIndicatorsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAKeyPerformanceIndicatorsDP</c> class is the report data provider class for the
/// <c>SMAKeyPerformanceIndicator</c> report.
/// </summary>
/// <remarks>
/// This is the report data provider class for the <c>SMAKeyPerformanceIndicator</c> SSRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(SMAKeyPerformanceIndicatorsContract))
]
public class SmaKeyPerformanceIndicatorsDP extends SRSReportDataProviderBase
{
    SMATmpKeyPerformanceIndicators smaTmpKeyPerformanceIndicators;

    // KPI Goal parameter values
    real goalOpenedOrders;
    real goalClosedOrders;
    real goalAgreements;
    real goalCompliance;
    real goalCustomerReturns;

    // dates used for query ranges
    date currentDay;
    date prevMonth;
    date prevPrevMonth;

    // Status value is defined as:
    // good: if (goalValue <= currentValue)
    // fair: if (goalValue*limit <= currentValue < goalValue)
    // poor: if (goalValue*limit > currentValue)
    #define.positiveIndicatorStatusLimit(0.95)

    // Status value is defined as:
    // good: if (goalValue >= currentValue)
    // fair: if (goalValue*limit >= currentValue > goalValue)
    // poor: if (goalValue*limit < currentValue)
    #define.negativeIndicatorStatusLimit(1.05)

    // Trend value is defined as:
    // up:   if (highLimit*previusValue < currentValue)
    // flat: if (lowLimit*previusValue <= currentValue <= highLimit*previusValue)
    // down: if (lowLimit*previusValue > currentValue)
    #define.indicatorTrendLowLimit(0.95)
    #define.indicatorTrendHighLimit(1.05)

    #define.indicatorStatusGood(1)
    #define.indicatorStatusFair(0)
    #define.indicatorStatusPoor(-1)

    #define.indicatorTrendUp(1)
    #define.indicatorTrendFlat(0)
    #define.indicatorTrendDown(-1)

    // value used to convert from percents to rate (100% == 1.0)
    #define.percentValueRate(100.0)

    // Some values to use as a correction coefficient

    // default value for Service Orders Opened KPI
    // by default it is 0

    // default value for Service Orders Closed KPI
    // by default it is 0

    // default value for New Customer Returns KPI
    // by default it is 0

    // default value for SLAMetricsMet KPI
    // by default it is 100% => 1.0
    #define.slaMetricsMetDefaultValue(1.0)

    // default value for New Service Agreement KPI
    // by default it is 0

    // value used to convert from percents to rate (100% == 1.0)
    #define.percentValueRate(100.0)

    // Formats used by .NET
    #define.FormatDecimal('N')
    #define.FormatPercentRounded('P0')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGeneralCountKPIValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a general KPI value as a row in the data table.
    /// </summary>
    /// <param name="_kpiName">
    /// The name of the label for the KPI that is to be added.
    /// </param>
    /// <param name="_goalValue">
    /// The goal value for the KPI.
    /// </param>
    /// <param name="_queryName">
    /// The query name that is used to get the KPI value.
    /// </param>
    /// <param name="_tableId">
    /// The table ID for which to apply the range.
    /// </param>
    /// <param name="_rangeField">
    /// The field ID for which to apply the range.
    /// </param>
    /// <param name="_firstFromRange">
    /// The first from range.
    /// </param>
    /// <param name="_firstToRange">
    /// The first to range.
    /// </param>
    /// <param name="_secondFromRange">
    /// The second from range.
    /// </param>
    /// <param name="_secondToRange">
    /// The second to range.
    /// </param>
    /// <param name="_indicatorType">
    /// The type of KPI, which can be positive or negative.
    /// </param>
    /// <param name="_isCustomerReturn">
    /// A Boolean value that specifies whether the specified KPI is the KPI for customer returns.
    /// </param>
    protected void addGeneralCountKPIValue(
        Name                _kpiName,
        real                _goalValue,
        str                 _queryName,
        tableId             _tableId,
        fieldId             _rangeField,
        date                _firstFromRange,
        date                _firstToRange,
        date                _secondFromRange,
        date                _secondToRange,
        SMAKPIIndicatorType _indicatorType,
        boolean             _isCustomerReturn)
    {
        real currentKPIValue;
        real previousKPIValue;

        currentKPIValue     = this.getGeneralCountKPIValue(
                                        _queryName,
                                        _tableId,
                                        _rangeField,
                                        _firstFromRange,
                                        _firstToRange,
                                        _isCustomerReturn);

        previousKPIValue     = this.getGeneralCountKPIValue(
                                        _queryName,
                                        _tableId,
                                        _rangeField,
                                        _secondFromRange,
                                        _secondToRange,
                                        _isCustomerReturn);

        this.insertIntoTable(_kpiName,
            _goalValue,
            currentKPIValue,
            this.getStatusIndicator(_goalValue, currentKPIValue, _indicatorType),
            this.getTrendIndicator(previousKPIValue, currentKPIValue),
            #formatDecimal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralRatioKPIValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a KPI value as a row to the input data table.
    /// </summary>
    /// <param name="_kpiName">
    /// The name of the label for the KPI to be added.
    /// </param>
    /// <param name="_goalValue">
    /// The goal value for the KPI.
    /// </param>
    /// <param name="_defaultValue">
    /// The default value for the KPI, which is used when there are no data in the database.
    /// </param>
    /// <remarks>
    /// This method is applicable for KPI that are the ratio of two values that can be retrieved from two
    /// Microsoft Dynamics AX queries. The value is calculated as the first query divided by the second
    /// query.
    /// </remarks>
    protected void addGeneralRatioKPIValue(
        Name        _kpiName,
        real        _goalValue,
        real        _defaultValue)
    {
        real currentFirst;
        real currentSecond;
        real previousFirst;
        real previousSecond;

        real currentKPIValue;
        real previousKPIValue;

        // Run queries to get current and previous First and Second values
        currentFirst    = this.getGeneralRatioKPIValue(
                                prevMonth,
                                currentDay,
                                true /*compliance between 0 : 100*/);

        currentSecond   = this.getGeneralRatioKPIValue(
                                prevPrevMonth,
                                prevMonth,
                                true /*compliance between 0 : 100*/);

        previousFirst   = this.getGeneralRatioKPIValue(
                                prevMonth,
                                currentDay,
                                false /*compliance > 0 */);

        previousSecond  = this.getGeneralRatioKPIValue(
                                prevPrevMonth,
                                prevMonth,
                                false /*compliance > 0 */);

        // Do we have all needed data in the database to calculate KPI, if not - use default
        currentKPIValue     = _defaultValue;
        previousKPIValue    = _defaultValue;

        // The queries should returns at most one record that contain First/Second value
        // check is there to avoid divide by zero error
        currentKPIValue = previousFirst != 0.0 ? (currentFirst / previousFirst) : _defaultValue;

        previousKPIValue = previousSecond != 0.0 ? (currentSecond / previousSecond) : _defaultValue;

        this.insertIntoTable(_kpiName,
            _goalValue,
            currentKPIValue,
            this.getStatusIndicator(_goalValue, currentKPIValue, SMAKPIIndicatorType::Positive),
            this.getTrendIndicator(previousKPIValue, currentKPIValue),
            #formatPercentRounded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralCountKPIValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of a key performance indicator for a specific range.
    /// </summary>
    /// <param name="_queryName">
    /// The name of the underlying query.
    /// </param>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_rangeField">
    /// The field ID of the range.
    /// </param>
    /// <param name="_fromRange">
    /// The from date range.
    /// </param>
    /// <param name="_toRange">
    /// The to date range.
    /// </param>
    /// <param name="_isCustomerReturn">
    /// A Boolean value that indicates that it is the customer return key performance indicator.
    /// </param>
    /// <returns>
    /// The value of the key performance indicator.
    /// </returns>
    protected real getGeneralCountKPIValue(
        str         _queryName,
        tableId     _tableId,
        fieldId     _rangeField,
        date        _fromRange,
        date        _toRange,
        boolean     _isCustomerReturn = false)
    {
        Query           query;
        QueryRun        qr;
        QueryBuildRange qbr;

        // specific for customer returns
        CustInvoiceTrans    custInvoiceTrans;

        real result;

        query = new Query(_queryName);

        qbr = SysQuery::findOrCreateRange(query.dataSourceTable(_tableId), _rangeField);

        qbr.value(queryRange(_fromRange,_toRange));

        if (_isCustomerReturn)
        {
            qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(CustInvoiceJour)), fieldnum(CustInvoiceJour, ReturnItemNum));

            qbr.value(SysQuery::valueNotEmptyString());
        }

        qr = new QueryRun(query);

        while (qr.next())
        {
            if (_isCustomerReturn)
            {
                custInvoiceTrans = qr.get(_tableId);
                result = custInvoiceTrans.Qty;
            }
            else
            {
                result = any2real(qr.get(_tableId).RecId);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralRatioKPIValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of a key performance indicator for a specified range.
    /// </summary>
    /// <param name="_fromRange">
    /// The from date range.
    /// </param>
    /// <param name="_toRange">
    /// The to date range.
    /// </param>
    /// <param name="_complianceMetSla">
    /// A Boolean value that indicates that the range value to use for the query.
    /// </param>
    /// <returns>
    /// The value of the key performance indicator.
    /// </returns>
    protected real getGeneralRatioKPIValue(
        date        _fromRange,
        date        _toRange,
        boolean     _complianceMetSla)
    {
        Query           query;
        QueryRun        qr;
        QueryBuildRange qbr;
        tableId         tableId = tablenum(SMAServiceOrderTable);

        real result;

        query = new Query(querystr(SMAServiceOrdersComplianceCountSRS));

        qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableId), fieldnum(SMAServiceOrderTable,SignOffDateTime));

        qbr.value(queryRange(_fromRange,_toRange));

        qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableId), fieldnum(SMAServiceOrderTable,Compliance));

        if (_complianceMetSla)
        {
            qbr.value('((Compliance > 0.0) && (Compliance <= 100.0))');
        }
        else
        {
            // complience filled
            qbr.value('(Compliance > 0.0)');
        }

        qr = new QueryRun(query);

        while (qr.next())
        {
            result = any2real(qr.get(tableId).RecId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSMATmpKeyPerformanceIndicators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and returns a data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('SMATmpKeyPerformanceIndicators')
    ]
    public SMATmpKeyPerformanceIndicators getSMATmpKeyPerformanceIndicators()
    {
        select smaTmpKeyPerformanceIndicators;
        return smaTmpKeyPerformanceIndicators;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status indicator value.
    /// </summary>
    /// <param name="goalValue">
    /// The goal value.
    /// </param>
    /// <param name="currentValue">
    /// The current value.
    /// </param>
    /// <param name="indicatorType">
    /// The type of the KPI: positive or negative.
    /// </param>
    /// <returns>
    /// Status indicator of the KPI: <c>Good</c>, <c>Fair</c>, or <c>Poor</c>.
    /// </returns>
    public int getStatusIndicator(real goalValue, real currentValue, SMAKPIIndicatorType indicatorType)
    {
        int indicator = #indicatorStatusFair;

        switch (indicatorType)
        {
            case SMAKPIIndicatorType::Positive:

                // 'Positive' KPI is 'more is better'
                // Status value is defined as:
                // Good: if (goalValue <= currentValue)
                // Fair: if (goalValue*limit <= currentValue < goalValue)
                // Poor: if (goalValue*limit > currentValue)
                if (currentValue >= goalValue)
                {
                    indicator = #IndicatorStatusGood;
                }
                else if (currentValue < #PositiveIndicatorStatusLimit * goalValue)
                {
                    indicator = #IndicatorStatusPoor;
                }
                break;

            case SMAKPIIndicatorType::Negative:

                // 'Negative' KPI is 'more is worse'
                // Status value is defined as:
                // Good: if (goalValue >= currentValue)
                // Fair: if (goalValue*limit >= currentValue > goalValue)
                // Poor: if (goalValue*limit < currentValue)
                if (currentValue <= goalValue)
                {
                    indicator = #IndicatorStatusGood;
                }
                else if (currentValue > #NegativeIndicatorStatusLimit * goalValue)
                {
                    indicator = #IndicatorStatusPoor;
                }
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return indicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrendIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the trend indicator.
    /// </summary>
    /// <param name="_prevValue">
    /// The value for the previous time period
    /// </param>
    /// <param name="_currentValue">
    /// The value for the current time period.
    /// </param>
    /// <returns>
    /// The indicator of the trend, which can be up, flat, or down.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An unexpected indicator type was found.
    /// </exception>
    public int getTrendIndicator(
        real _prevValue,
        real _currentValue)
    {
        int indicator = #indicatorTrendFlat;

        // Trend value is defined as:
        // up:      if (highLimit*previusValue < currentValue)
        // flat:    if (lowLimit*previusValue <= currentValue <= highLimit*previusValue)
        // down:    if (lowLimit*previusValue > currentValue)

        if (_currentValue > #IndicatorTrendHighLimit * _prevValue)
        {
            indicator = #indicatorTrendUp;
        }

        if (_currentValue < #indicatorTrendLowLimit * _prevValue)
        {
            indicator = #indicatorTrendDown;
        }

        return indicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDateRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the date ranges used multiple times.
    /// </summary>
    protected void initializeDateRanges()
    {
        // dates used for query ranges
        currentDay      = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        prevMonth       = prevmth(currentDay);
        prevPrevMonth   = prevmth(prevMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    /// <param name="_name">
    /// The KPI name.
    /// </param>
    /// <param name="_goal">
    /// The KPI goal value.
    /// </param>
    /// <param name="_actual">
    /// The actual KPI value.
    /// </param>
    /// <param name="_status">
    /// The status of the KPI.
    /// </param>
    /// <param name="_trend">
    /// The trend of the KPI.
    /// </param>
    /// <param name="_format">
    /// The format that is used to display the key performance indicator.
    /// </param>
    public  void insertIntoTable(
        Name            _name   ,
        SMAKPIGoal      _goal   ,
        SMAKPIActual    _actual ,
        SMAKPIStatus    _status ,
        SMAKPITrend     _trend  ,
        str             _format)
    {
        smaTmpKeyPerformanceIndicators.Name         = _name;
        smaTmpKeyPerformanceIndicators.Goal         = _goal;
        smaTmpKeyPerformanceIndicators.Actual       = _actual;
        smaTmpKeyPerformanceIndicators.Status       = _status;
        smaTmpKeyPerformanceIndicators.Trend        = _trend;
        smaTmpKeyPerformanceIndicators.FormatString = _format;
        smaTmpKeyPerformanceIndicators.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        // initialize the range values that will be used multiple times
        this.initializeDateRanges();

        // read the parameter values entered by the user for the KPI goals
        this.readParameterValues();

        // add Service Orders Opened KPI
        this.addGeneralCountKPIValue(
            "@SYS320851",
            goalOpenedOrders,
            querystr(SMAOpenedServiceOrdersCountSRS),
            tablenum(SMAServiceOrderTable),
            fieldnum(SMAServiceOrderTable, CreatedDateTime),
            prevMonth,
            currentDay,
            prevPrevMonth,
            prevMonth,
            SMAKPIIndicatorType::Positive,
            false);

        // add Service Orders Closed KPI
        this.addGeneralCountKPIValue(
            "@SYS320852",
            goalClosedOrders,
            querystr(SMAClosedServiceOrdersCountSRS),
            tablenum(SMAServiceOrderTable),
            fieldnum(SMAServiceOrderTable, SignOffDateTime),
            prevMonth,
            currentDay,
            prevPrevMonth,
            prevMonth,
            SMAKPIIndicatorType::Positive,
            false);

        // add New Service Agreements KPI
        this.addGeneralCountKPIValue(
            "@SYS320853",
            goalAgreements,
            querystr(SMANewServiceAgreementsCountSRS),
            tablenum(SMAAgreementTable),
            fieldnum(SMAAgreementTable, CreatedDateTime),
            prevyr(currentDay),
            currentDay,
            prevyr(prevyr(currentDay)),
            prevyr(currentDay),
            SMAKPIIndicatorType::Positive,
            false);

        // add SLA fulfilled KPI, note this is a kind of 'ratio' values
        // SLAFulfilled = COUNT(Services met SLA)/COUNT(Services exceeded SLA)
        this.addGeneralRatioKPIValue(
            "@SYS320854",
            goalCompliance / #percentValueRate,
            #slaMetricsMetDefaultValue);

        // add Customer Returns Agreements KPI, note this is a negative indicator - 'more is worse'
        this.addGeneralCountKPIValue(
            "@SYS320855",
            goalCustomerReturns,
            querystr(SMANewRMACountSRS),
            tablenum(CustInvoiceTrans),
            fieldnum(CustInvoiceTrans, ReturnArrivalDate),
            prevMonth,
            currentDay,
            prevPrevMonth,
            prevMonth,
            SMAKPIIndicatorType::Negative,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the parameters set in the report dialog.
    /// </summary>
    protected void readParameterValues()
    {
        SMAKeyPerformanceIndicatorsContract contract = this.parmDataContract();
        // KPI Goal parameter values
        goalOpenedOrders    = contract.parmGoalOpened();
        goalClosedOrders    = contract.parmGoalClosed();
        goalAgreements      = contract.parmGoalAgreements();
        goalCompliance      = contract.parmGoalCompliance();
        goalCustomerReturns = contract.parmGoalCustomer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>