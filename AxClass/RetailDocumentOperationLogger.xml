<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailDocumentOperationLogger</c> class is used to log events of document operation service to CommerceHQEventSource.
/// </summary>
[Wrappable(false)]
internal final class RetailDocumentOperationLogger
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logOperationStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the operation has been started.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    public static void logOperationStarted(guid requestId, int64 operationRecId, str operationName)
    {
        eventSource.EventWriteDocumentOperationStarted(requestId, operationRecId, operationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationSucceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the operation is succeeded.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "elapsedTimeInMs">The elapsed time in milliseconds.</param>
    public static void logOperationSucceeded(guid requestId, int64 operationRecId, str operationName, int64 elapsedTimeInMs)
    {
        eventSource.EventWriteDocumentOperationSucceeded(requestId, operationRecId, operationName, elapsedTimeInMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the operation is failed.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    /// <param name = "elapsedTimeInMs">The elapsed time in milliseconds.</param>
    public static void logOperationFailed(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationProcessingErrorCode errorCode, int64 elapsedTimeInMs)
    {
        eventSource.EventWriteDocumentOperationFailed(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationProcessingErrorCode), errorCode), elapsedTimeInMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation warning.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    public static void logOperationWarning(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationProcessingErrorCode errorCode)
    {
        eventSource.EventWriteDocumentOperationWarning(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationProcessingErrorCode), errorCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationCommitWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation commit warning.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    public static void logOperationCommitWarning(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationCommitResultCode detailCode)
    {
        eventSource.EventWriteDocumentOperationWarning(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationCommitResultCode), detailCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationCommitError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation commit error.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    public static void logOperationCommitError(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationCommitResultCode detailCode)
    {
        eventSource.EventWriteDocumentOperationError(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationCommitResultCode), detailCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation error.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    public static void logOperationError(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationProcessingErrorCode errorCode)
    {
        eventSource.EventWriteDocumentOperationError(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationProcessingErrorCode), errorCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationRetriableError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation retriable error.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "errorCode">The error code.</param>
    public static void logOperationRetriableError(guid requestId, int64 operationRecId, str operationName, RetailDocumentOperationProcessingErrorCode errorCode)
    {
        eventSource.EventWriteDocumentOperationRetriableError(requestId, operationRecId, operationName, enum2Symbol(enumNum(RetailDocumentOperationProcessingErrorCode), errorCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logConfigurationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log configuration error.
    /// </summary>
    /// <param name = "errorMessage">The error message.</param>
    public static void logConfigurationError(str errorMessage)
    {
        eventSource.EventWriteDocumentOperationConfigurationError(errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logConfigurationWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log configuration warning.
    /// </summary>
    /// <param name = "warningMessage">The warning message.</param>
    public static void logConfigurationWarning(str warningMessage)
    {
        eventSource.EventWriteDocumentOperationConfigurationWarning(warningMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log operation message.
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "message">The message.</param>
    public static void logOperationMessage(guid requestId, int64 operationRecId, str operationName, str message)
    {
        eventSource.EventWriteDocumentOperationGenericMessage(requestId, operationRecId, operationName, message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationProcessInternalStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the processor is going to start the processInternal method
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    public static void logOperationProcessInternalStart(guid requestId, int64 operationRecId, str operationName)
    {
        eventSource.EventWriteDocumentOperationProcessInternalStart(requestId, operationRecId, operationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationProcessInternalFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the processor is going to start the processInternal method
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "elapsedTimeInMs">The elapsed time in milliseconds.</param>
    public static void logOperationProcessInternalFinished(guid requestId, int64 operationRecId, str operationName, int64 elapsedTimeInMs)
    {
        eventSource.EventWriteDocumentOperationProcessInternalFinished(requestId, operationRecId, operationName, elapsedTimeInMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOperationProcessInternalException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the processor got exception when executing the processInternal method
    /// </summary>
    /// <param name = "requestId">The request id.</param>
    /// <param name = "operationRecId">The operation RecId.</param>
    /// <param name = "operationName">The operation name.</param>
    /// <param name = "exception">The exception call stack in string format.</param>
    /// <param name = "errorMessage">The error message.</param>
    public static void logOperationProcessInternalException(guid requestId, int64 operationRecId, str operationName, str exception, str errorMessage)
    {
        eventSource.EventWriteDocumentOperationProcessInternalException(requestId, operationRecId, operationName, exception, errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logNumberOfOperationsByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the number of operations in specific status
    /// </summary>
    /// <param name = "status">The status of operation.</param>
    /// <param name = "number">The number of operations by given status.</param>
    public static void logNumberOfOperationsByStatus(RetailDocumentOperationStatus status, int64 number)
    {
        eventSource.EventWriteNumberOfDocumentOperationsByStatus(enum2Symbol(enumNum(RetailDocumentOperationStatus), status), number);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchTaskWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log when the batch task has been finished.
    /// </summary>
    /// <param name = "batchTaskId">The batch task id.</param>
    /// <param name = "message">The warning message.</param>
    public static void logBatchTaskWarning(int64 batchTaskId, str message)
    {
        eventSource.EventWriteDocumentOperationBatchTaskWarning(batchTaskId, message);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>