<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineReallocationDemandWorkUpdator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineReallocationDemandWorkUpdator</c> class is responsible for updating the demand work when
/// a replenishment work line was short picked.
/// </summary>
public class WHSWorkLineReallocationDemandWorkUpdator
{
    private WHSWorkLine shortPickedWorkline;
    private InventQty   reallocatedInventQty;
    private LineNum     firstReallocatedWorkLineNum;
    private boolean     adjustLoadLineQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineReallocationDemandWorkUpdator construct()
    {
        return new WHSWorkLineReallocationDemandWorkUpdator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromShortPickedWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineReallocationDemandWorkUpdator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_shortPickedWorkLine">The replenishment short picked work line</param>
    /// <param name = "_reallocatedInventQty">The reallocated quantity of the replenishment work line</param>
    /// <param name = "_firstReallocatedWorkLineNum">The line number of the first reallocated work line for the short picked work line</param>
    /// <returns>A new instance of the <c>WHSWorkLineReallocationDemandWorkUpdator</c> class></returns>
    public static WHSWorkLineReallocationDemandWorkUpdator newFromShortPickedWorkLine(
                                                                WHSWorkLine     _shortPickedWorkLine,
                                                                InventQty       _reallocatedInventQty,
                                                                LineNum         _firstReallocatedWorkLineNum)
    {
        WHSWorkLineReallocationDemandWorkUpdator demandWorkUpdator = WHSWorkLineReallocationDemandWorkUpdator::construct();

        demandWorkUpdator.setShortPickedWorkLine(_shortPickedWorkLine);
        demandWorkUpdator.setReallocatedInventQty(_reallocatedInventQty);
        demandWorkUpdator.setFirstReallocatedWorkLineNum(_firstReallocatedWorkLineNum);

        return demandWorkUpdator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShortPickedWorkLine</Name>
				<Source><![CDATA[
    private void setShortPickedWorkLine(WHSWorkLine _shortPickedWorkLine)
    {
        shortPickedWorkLine = _shortPickedWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReallocatedInventQty</Name>
				<Source><![CDATA[
    private void setReallocatedInventQty(InventQty _reallocatedInventQty)
    {
        reallocatedInventQty = _reallocatedInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFirstReallocatedWorkLineNum</Name>
				<Source><![CDATA[
    private void setFirstReallocatedWorkLineNum(LineNum _firstReallocatedWorkLineNum)
    {
        firstReallocatedWorkLineNum = _firstReallocatedWorkLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustLoadLineQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmAdjustLoadLineQty(boolean _adjustLoadLineQty = adjustLoadLineQty)
    {
        adjustLoadLineQty = _adjustLoadLineQty;
        return adjustLoadLineQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates, if it is needed based on the quantity that has been short picked and reallocated, the demand work.
    /// </summary>
    public void update()
    {
        Qty alreadyPickedReplenishmentRunningQty = shortPickedWorkline.InventQtyWork;
        Qty totalDemandInventQty = WHSReplenWorkLink::getDemandReplenishmentInventQty(shortPickedWorkline);

        if (alreadyPickedReplenishmentRunningQty < totalDemandInventQty)
        {
            WHSReplenWorkLink   replenWorkLink;
            WHSWorkLine         workLineToUpdate;
            Qty                 initialDemandRunningQtyToReallocate = totalDemandInventQty - alreadyPickedReplenishmentRunningQty;
            Qty                 demandReallocatedRunningQty = min(initialDemandRunningQtyToReallocate, reallocatedInventQty);
            Qty                 demandAlreadyReplenishedRunningQty = alreadyPickedReplenishmentRunningQty;

            WHSWorkLine         currentReplReallocatedWorkLine;
            Qty                 currentReallocatedWorkLineQtyLeftToAddToReplLink = 0;

            if (demandReallocatedRunningQty > 0)
            {
                currentReplReallocatedWorkLine = WHSWorkLine::find(shortPickedWorkline.WorkId, firstReallocatedWorkLineNum);
                currentReallocatedWorkLineQtyLeftToAddToReplLink = currentReplReallocatedWorkLine.InventQtyWork;
            }

            ttsbegin;

            /*
            The demand work lines are ordered in desc order. When executing the replenishment short pick work, the order was asc.
            This enables us to identify the picked and not picked demand quantities for each work line
            */
            while select sum(InventQty) from replenWorkLink
                group by workLineToUpdate.WorkId, workLineToUpdate.LineNum, workLineToUpdate.ItemId, workLineToUpdate.LoadLineRefRecId
                order by workLineToUpdate.WorkId desc, workLineToUpdate.LineNum desc, workLineToUpdate.ItemId desc, workLineToUpdate.LoadLineRefRecId desc
                where replenWorkLink.ReplenWorkId   == shortPickedWorkline.WorkId
                    && replenWorkLink.ReplenLineNum == shortPickedWorkline.LineNum
                join workLineToUpdate
                where workLineToUpdate.WorkId       == replenWorkLink.DemandWorkId
                    && workLineToUpdate.LineNum     == replenWorkLink.DemandLineNum
                    && workLineToUpdate.WorkStatus  != WHSWorkStatus::Cancelled
            {
                /*
                The demand quantity from the current work line which has already been replenished, when executing the
                replenishment short picking work.
                */
                Qty currentDemandAlreadyReplenishedQty = min(demandAlreadyReplenishedRunningQty, replenWorkLink.InventQty);
                demandAlreadyReplenishedRunningQty -= currentDemandAlreadyReplenishedQty;

                /*
                The demand quantity from the current work line which has already been deducted, when executing the
                replenishment short picking work because it was not possible to pick it as part of the first repl. pick line processing.
                */
                Qty currentDemandAlreadyReducedQty = min(replenWorkLink.InventQty - currentDemandAlreadyReplenishedQty, initialDemandRunningQtyToReallocate);
                initialDemandRunningQtyToReallocate -= currentDemandAlreadyReducedQty;

                /*
                Some or all the quantity that was deducted during short picking could have been reallocated. If not,
                this quantity is 0 and the required cancelations will occur.
                */
                Qty currentDemandReallocatedQty = min(currentDemandAlreadyReducedQty, demandReallocatedRunningQty);

                if (demandReallocatedRunningQty > 0)
                {
                    demandReallocatedRunningQty -= currentDemandReallocatedQty;
                }

                WHSWorkLine localWorkLineToUpdate = WHSWorkLine::find(workLineToUpdate.WorkId, workLineToUpdate.LineNum, true);

                if (currentDemandReallocatedQty == 0 && localWorkLineToUpdate.InventQtyWork == 0)
                {
                    this.cancelWorkLine(localWorkLineToUpdate);
                    localWorkLineToUpdate.reread();
                }
                else if (currentDemandReallocatedQty)
                {
                    this.increaseCurrentAndFollowingWorkLines(localWorkLineToUpdate.WorkId, localWorkLineToUpdate.LineNum, currentDemandReallocatedQty);
                    localWorkLineToUpdate.reread();

                    if (this.parmAdjustLoadLineQty())
                    {
                        WHSLoadLine::updateWorkCreatedQtyAndQty(localWorkLineToUpdate.LoadLineRefRecId, currentDemandReallocatedQty, localWorkLineToUpdate.InventDimId);
                    }
                    else
                    {
                        WHSLoadLine::updateWorkCreatedQty(localWorkLineToUpdate.LoadLineRefRecId, currentDemandReallocatedQty);
                    }
                }

                WHSReplenWorkLink::decreaseReplenWorkLinkInventQty(localWorkLineToUpdate, currentDemandAlreadyReducedQty, shortPickedWorkline);
                if (currentDemandReallocatedQty > 0)
                {
                    [currentReplReallocatedWorkLine, currentReallocatedWorkLineQtyLeftToAddToReplLink] = this.createReplenWorkLinkRecords(
                                                                                                                currentDemandReallocatedQty,
                                                                                                                currentReallocatedWorkLineQtyLeftToAddToReplLink,
                                                                                                                currentReplReallocatedWorkLine,
                                                                                                                localWorkLineToUpdate);
                }
                else
                {
                    /*
                    If there is no new replenishment work link created for the demand work line,   
                    we need check if work line and work satisfy the conditions to unfreeze and do it if conditions are satisfied.
                    Because replenishment work link between localWorkLineToUpdate and current short pick line might be removed, 
                    demand work link and header cannot be unblocked when the replenishment is completed.(The link is not there)
                    */
                    this.unfreezeWorkHeaderAndLines(localWorkLineToUpdate);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unfreezeWorkHeaderAndLines</Name>
				<Source><![CDATA[
    private void unfreezeWorkHeaderAndLines(WHSWorkLine _demandWorkLine)
    {
        boolean unfreezed = (_demandWorkLine.WorkStatus == WHSWorkStatus::Cancelled);

        if (_demandWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            && _demandWorkLine.ReplenDemand == NoYes::Yes
            && !_demandWorkLine.hasUnFinishedReplenWork())
        {
            _demandWorkLine.ReplenDemand = NoYes::No;
            _demandWorkLine.update();
            unfreezed = true;
        }

        if (unfreezed)
        {
            WHSWorkTable demandWork = _demandWorkLine.whsWorkTable();
            
            /*
            If the work is not cancelled and has no more unfinished replenishment work and the wave is already released,
            then unfreeze the work.
            */            
            if (demandWork.WorkStatus != WHSWorkStatus::Cancelled
                && demandWork.Frozen)
            {
                WHSWorkBlocking::newFromWorkId(demandWork.WorkId)
                    .tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::UnProcessedReplenishmentWork);
            }                        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkLine</Name>
				<Source><![CDATA[
    private void cancelWorkLine(WHSWorkLine _workLineToCancel)
    {
        if (_workLineToCancel.isTheOnlyInitialPickWorkLine())
        {
            WHSWorkTable::cancelWork(_workLineToCancel.WorkId, true, false, UnknownNoYes::No);
        }
        else
        {
            _workLineToCancel.selectForUpdate(true);
            _workLineToCancel.WorkStatus = WHSWorkStatus::Cancelled;
            _workLineToCancel.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplenWorkLinkRecords</Name>
				<Source><![CDATA[
    private container createReplenWorkLinkRecords(
                            Qty _totalReplLinksInventQty,
                            Qty _currentReallocatedWorkLineQtyLeftToAddToReplLink,
                            WHSWorkLine _replenishmentWorkLine,
                            WHSWorkLine _demandWorkLine)
    {
        WHSWorkLine replenishmentWorkLine                               = _replenishmentWorkLine;
        WHSWorkLine demandWorkLine                                      = _demandWorkLine;
        Qty         currentReallocatedWorkLineQtyLeftToAddToReplLink    = _currentReallocatedWorkLineQtyLeftToAddToReplLink;
        Qty         replenLinksToCreateRunningQty                       = _totalReplLinksInventQty;

        while (replenLinksToCreateRunningQty > 0)
        {
            Qty replLinkInventQty = min(currentReallocatedWorkLineQtyLeftToAddToReplLink, replenLinksToCreateRunningQty);
            currentReallocatedWorkLineQtyLeftToAddToReplLink -= replLinkInventQty;
            replenLinksToCreateRunningQty -= replLinkInventQty;

            WHSReplenWorkLink::insertReplenWorkLink(replLinkInventQty,
                                                    replenishmentWorkLine.WorkId,
                                                    replenishmentWorkLine.LineNum,
                                                    demandWorkLine.WorkId,
                                                    demandWorkLine.LineNum);

            if (!currentReallocatedWorkLineQtyLeftToAddToReplLink)
            {
                replenishmentWorkLine = WHSWorkLine::find(replenishmentWorkLine.WorkId, replenishmentWorkLine.LineNum + 1);
                currentReallocatedWorkLineQtyLeftToAddToReplLink = replenishmentWorkLine.InventQtyWork;
            }
        }

        return [replenishmentWorkLine, currentReallocatedWorkLineQtyLeftToAddToReplLink];
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseCurrentAndFollowingWorkLines</Name>
				<Source><![CDATA[
    private void increaseCurrentAndFollowingWorkLines(WHSWorkId _workId, LineNum _lineNum, Qty _inventQtyToIncrease)
    {
        WHSWorkLine         currentWorkLineToUpdate;

        LineNum firstPutLineNum = WHSWorkTable::getFirstPutWorkLine(_workId).LineNum;

        while select forupdate currentWorkLineToUpdate
            where currentWorkLineToUpdate.WorkId    == _workId
                && currentWorkLineToUpdate.LineNum   >= _lineNum
                && (currentWorkLineToUpdate.LineNum  == _lineNum
                || currentWorkLineToUpdate.LineNum   >= firstPutLineNum
                || currentWorkLineToUpdate.WorkType  == WHSWorkType::Print
                || currentWorkLineToUpdate.WorkType  == WHSWorkType::Custom)
        {
            currentWorkLineToUpdate.adjustWorkLineQuantities(_inventQtyToIncrease, true, WHSWorkStatus::Cancelled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>