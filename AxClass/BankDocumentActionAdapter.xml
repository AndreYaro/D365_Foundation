<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentActionAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class delegates the actions on bank document list form.
/// </summary>
class BankDocumentActionAdapter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMenuFunctionAccess</Name>
				<Source><![CDATA[
    private static void checkMenuFunctionAccess(MenuFunction _menuFunction)
    {
        // Check access rights
        if (!_menuFunction || !_menuFunction.checkAccessRights())
        {
            // Not enough access rights to menu item %1.
            throw error(strFmt("@SYS104222", _menuFunction.name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameterFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Throws the exception for the failure of the parameter validation.
    /// </summary>
    /// <param name="_functionName">
    ///     Given method name.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The error of the parameter validation.
    /// </exception>
    private static void checkParameterFailed(MethodName _functionName)
    {
        throw error(Error::wrongUseOfFunction(_functionName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferForOpenBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets buffer for opening bank account transaction form.
    /// </summary>
    /// <param name="_documentView">
    /// The bank document table view.
    /// </param>
    /// <returns>
    /// The buffer for opening bank account transaction form.
    /// </returns>
    private static Common getBufferForOpenBankAccountTrans(BankDocumentTableView _documentView)
    {
        Common common = _documentView;
        if (_documentView.SourceRelationType == tableNum(BankAccountTrans))
        {
            BankDocument bankDocument = BankDocument::newFromDocumentView(_documentView);
            BankDocumentTableMap documentMap = bankDocument.parmBankDocumentTableMap();
            common = documentMap;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!args)
        {
            BankDocumentActionAdapter::checkParameterFailed(funcName());
        }

        Common record = args.record();
        if (!record || record.RecId == 0)
        {
            BankDocumentActionAdapter::checkParameterFailed(funcName());
        }

        int paramEnumType = args.parmEnumType();
        int paramEnum = args.parmEnum();

        if (paramEnumType != enumNum(BankDocumentActionType) || paramEnum == 0)
        {
            BankDocumentActionAdapter::checkParameterFailed(funcName());
        }

        switch (record.TableId)
        {
            case tableNum(BankDocumentTableView):
                BankDocumentActionAdapter::performBankDocumentActions(paramEnum, record, args);
                break;

            default:
                BankDocumentActionAdapter::checkParameterFailed(funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens bank account transaction form.
    /// </summary>
    /// <param name="_documentView">
    ///     Given <c>BankDocumentTableView</c> buffer.
    /// </param>
    /// <param name="_args">
    ///     Args of caller.
    /// </param>
    private static void openBankAccountTrans(BankDocumentTableView _documentView, Args _args)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(BankAccountTrans), MenuItemType::Display);
        BankDocumentActionAdapter::checkMenuFunctionAccess(menuFunction);

        if (_args)
        {
            _args.record(BankDocumentActionAdapter::getBufferForOpenBankAccountTrans(_documentView));
            menuFunction.run(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openOrigDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens original document form, i.e. the bank check, the bank deposit slip, etc.
    /// </summary>
    /// <param name="_documentView">
    ///     Given <c>BankDocumentTableView</c> buffer.
    /// </param>
    /// <param name="_args">
    ///     Args of caller.
    /// </param>
    private static void openOrigDocument(BankDocumentTableView _documentView, Args _args)
    {
        BankDocumentDocType bankDocumentDocType = BankDocumentDocType::construct(_documentView.DocumentType);

        MenuFunction menuFunction = bankDocumentDocType.origDocumentMenuFunction();
        Common origDocumentBuffer = bankDocumentDocType.origDocumentBuffer(_documentView);
        BankDocumentActionAdapter::checkMenuFunctionAccess(menuFunction);

        if (_args)
        {
            _args.record(origDocumentBuffer);
            menuFunction.run(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBankDocumentActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs actions for bank document.
    /// </summary>
    /// <param name="_paramEnum">
    ///     The type of action
    /// </param>
    /// <param name="_documentView">
    ///     The given <c>BankDocumentTableView</c> buffer.
    /// </param>
    /// <param name="_args">
    ///     Args of the caller.
    /// </param>
    private static void performBankDocumentActions(
        int _paramEnum,
        BankDocumentTableView _documentView,
        Args _args)
    {
        switch (_paramEnum)
        {
            case BankDocumentActionType::OpenOrigDocument:
                BankDocumentActionAdapter::openOrigDocument(_documentView, _args);
                break;

            case BankDocumentActionType::OpenBankAccountTrans:
                BankDocumentActionAdapter::openBankAccountTrans(_documentView, _args);
                break;

            default:
                BankDocumentActionAdapter::checkParameterFailed(funcName());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>