<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentCGUGroupTestMethod1_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetImpairmentCGUGroupTestMethod1_JP</c> represents the impairment recognition test
/// in method 1. It inherits from class <c>AssetImpairmentCGUGroupTest_JP</c>.
/// </summary>
class AssetImpairmentCGUGroupTestMethod1_JP extends AssetImpairmentCGUGroupTest_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateStep1Internal</Name>
				<Source><![CDATA[
    protected void allocateStep1Internal()
    {
        AssetImpairmentTestResultDocument_JP    resultDoc;
        AssetImpairmentTestResultDocument_JP    resultDocPriority;
        AssetImpairmentTestResultDocEntry_JP    resultDocEntry;
        AssetImpairmentTestResultDocEntry_JP    resultDocEntryPriority;
        AssetImpairmentAdjustment_JP            priorityAllocatableAmt = -1 * sharedAssetsSubtotalImpairAdj;
        AssetImpairmentSharedAssetAllocBasis_JP prorationMethod;
        List                                    entryList;
        ListEnumerator                          le;
        AssetImpairmentAllocationEntry_JP       allocEntry;
        AssetImpairmentAdjustment_JP            sharedAssetsSubtotalImpairAdjLoc = sharedAssetsSubtotalImpairAdj;
        AssetImpairmentAdjustment_JP            cguSubtotalImpairAdjLoc = cguSubtotalImpairAdj;
        CurrencyCode                            currencyCode = Ledger::accountingCurrency();

        if (sharedAssetsSubtotalImpairAdj == 0)
        {
            update_recordSet resultDocEntry
                setting ImpairmentAdjustment = 0
            exists join firstOnly resultDoc
                where resultDocEntry.ResultDocument == resultDoc.RecId
                      && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                      && resultDoc.CGU == 0;
        }
        else
        {
            while select AllocationPriority from resultDocEntry
                    group by resultDocEntry.AllocationPriority
                    order by resultDocEntry.AllocationPriority
                join firstOnly resultDoc
                    where resultDocEntry.ResultDocument == resultDoc.RecId
                          && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                          && resultDoc.CGU == 0
            {
                entryList = new List(Types::Class);

                while select resultDocEntryPriority
                        where resultDocEntryPriority.AllocationPriority == resultDocEntry.AllocationPriority
                    join RecId from resultDocPriority
                        where resultDocEntryPriority.ResultDocument == resultDocPriority.RecId
                              && resultDocPriority.AssetImpairmentTestResult_JP == testResult.RecId
                              && resultDocPriority.CGU == 0
                {
                    prorationMethod = resultDocEntryPriority.ProrationMethodOverride;

                    if (prorationMethod == AssetImpairmentSharedAssetAllocBasis_JP::NBVSubNetSellPrice)
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId,
                                                                               resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice,
                                                                               resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice,
                                                                               0));
                    }
                    else
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntryPriority.RecId,
                                                                               resultDocEntryPriority.NetBookValue,
                                                                               resultDocEntryPriority.NetBookValue - resultDocEntryPriority.NetSellingPrice,
                                                                               0));
                    }
                }

                priorityAllocatableAmt = AssetImpairmentAccountingHelper_JP::allocateEntries(entryList, priorityAllocatableAmt, currencyCode);

                le = entryList.getEnumerator();
                while (le.moveNext())
                {
                    allocEntry = le.current();
                    update_recordSet resultDocEntryPriority
                        setting ImpairmentAdjustment = -1 * allocEntry.parmCurrent()
                    where resultDocEntryPriority.RecId == allocEntry.parmEntryRecId();
                }

                if (priorityAllocatableAmt <= 0)
                {
                    break;
                }
            }

            sharedAssetsSubtotalImpairAdjLoc += priorityAllocatableAmt;
            cguSubtotalImpairAdjLoc -= priorityAllocatableAmt;

            // if the shared assets impairment amount still have some left, then allocate to CGU
            if (priorityAllocatableAmt)
            {
                entryList = new List(Types::Class);

                while select resultDoc
                        where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                              && resultDoc.CGU != 0
                              && resultDoc.ImpairmentAdjustment > resultDoc.RecoverableAmount - resultDoc.NetBookValue
                              && resultDoc.NetBookValue > resultDoc.RecoverableAmount
                {
                    if (resultDoc.NotRecoverable)
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDoc.RecId,
                                                                               resultDoc.NetBookValue,
                                                                               resultDoc.NetBookValue,
                                                                               abs(resultDoc.ImpairmentAdjustment)));
                    }
                    else
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDoc.RecId,
                                                                                resultDoc.NetBookValue - resultDoc.RecoverableAmount,
                                                                                resultDoc.NetBookValue - resultDoc.RecoverableAmount,
                                                                                abs(resultDoc.ImpairmentAdjustment)));
                    }
                }

                priorityAllocatableAmt = AssetImpairmentAccountingHelper_JP::allocateEntries(entryList, priorityAllocatableAmt, currencyCode);

                le = entryList.getEnumerator();
                while (le.moveNext())
                {
                    allocEntry = le.current();
                    update_recordSet resultDoc
                        setting ImpairmentAdjustment = -1 * allocEntry.parmCurrent()
                    where resultDoc.RecId == allocEntry.parmEntryRecId();
                }
            }

            if (priorityAllocatableAmt)
            {
                sharedAssetImpairmentAdjExceeded = true;
                error("@SYP4880519");
            }
        }

        sharedAssetsSubtotalImpairAdj = sharedAssetsSubtotalImpairAdjLoc;
        cguSubtotalImpairAdj = cguSubtotalImpairAdjLoc;

        select firstOnly forUpdate resultDoc
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                  && resultDoc.CGU == 0;

        resultDoc.ImpairmentAdjustment = sharedAssetsSubtotalImpairAdj;
        resultDoc.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateStep2Internal</Name>
				<Source><![CDATA[
    protected void allocateStep2Internal()
    {
        AssetDocumentTable_JP                   document;
        AssetImpairmentTestResultDocument_JP    resultDoc;
        AssetImpairmentTestResultDocEntry_JP    resultDocEntry;
        AssetImpairmentTestResultDocEntry_JP    holdingEntry;
        AssetImpairmentTestResultDocEntry_JP    holdingBackEntry;
        AssetImpairmentAdjustment_JP            cguAllocatableAmt;
        AssetImpairmentAdjustment_JP            leftAmt;
        List                                    entryList;
        AssetImpairmentAllocationEntry_JP       allocEntry;
        ListEnumerator                          le;
        CurrencyCode                            currencyCode = Ledger::accountingCurrency();

        if (cguSubtotalImpairAdj == 0)
        {
            update_recordSet resultDocEntry
                setting ImpairmentAdjustment    = 0,
                        ImpairmentAmtCalculated = 0,
                        ImpairmentAmtFrom       = 0,
                        ImpairmentAmtTo         = 0
            exists join resultDoc
                where resultDocEntry.ResultDocument == resultDoc.RecId
                      && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                      && resultDoc.CGU != 0;
        }
        else
        {
            while select forUpdate resultDoc
                    where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                          && resultDoc.ImpairmentAdjustment != 0
                          && resultDoc.CGU != 0
                  join document where resultDoc.AssetDocumentTable_JP == document.RecId
            {
                cguAllocatableAmt = -1 * resultDoc.ImpairmentAdjustment;
                entryList = new List(Types::Class);

                while select RecId, NetBookValue, FairValue, ImpairmentAdjustment from resultDocEntry
                    where resultDocEntry.ResultDocument == resultDoc.RecId
                          && resultDocEntry.ImpairmentAllocationMethod != AssetImpairmentAllocationMethod_JP::Neglected
                {
                    if (resultDoc.ImpairmentAllocBasis == AssetImpairmentCGUAssetAllocBasis_JP::NetBookValue)
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntry.RecId, resultDocEntry.NetBookValue, resultDocEntry.NetBookValue - resultDocEntry.FairValue, resultDocEntry.ImpairmentAdjustment));
                    }
                    else
                    {
                        entryList.addEnd(new AssetImpairmentAllocationEntry_JP(resultDocEntry.RecId, resultDocEntry.NetBookValue - resultDocEntry.FairValue, resultDocEntry.NetBookValue - resultDocEntry.FairValue, resultDocEntry.ImpairmentAdjustment));
                    }
                }

                cguAllocatableAmt = AssetImpairmentAccountingHelper_JP::allocateEntries(entryList, cguAllocatableAmt, currencyCode);

                if (cguAllocatableAmt)
                {
                    warning(strFmt("@SYP4880443", document.Description));
                    resultDoc.ImpairmentAdjExceeded = true;
                    resultDoc.update();
                    leftAmt += cguAllocatableAmt;
                }

                le = entryList.getEnumerator();
                while (le.moveNext())
                {
                    allocEntry = le.current();
                    resultDocEntry = AssetImpairmentTestResultDocEntry_JP::find(allocEntry.parmEntryRecId(), true);
                    resultDocEntry.ImpairmentAdjustment = -1 * allocEntry.parmCurrent();
                    resultDocEntry.ImpairmentAmtCalculated = -1 * allocEntry.parmCurrent();
                    resultDocEntry.update();
                }

                // Deal with holding assets
                while select sum(ImpairmentAmtCalculated), HoldingEntry from resultDocEntry
                    group by resultDocEntry.HoldingEntry
                    where resultDocEntry.ResultDocument == resultDoc.RecId
                          && resultDocEntry.HoldingEntry != 0
                {
                    holdingEntry = AssetImpairmentTestResultDocEntry_JP::find(resultDocEntry.HoldingEntry, true);
                    holdingEntry.ImpairmentAmtFrom = resultDocEntry.ImpairmentAmtCalculated;
                    holdingEntry.ImpairmentAdjustment += holdingEntry.ImpairmentAmtFrom;
                    holdingEntry.update();

                    update_recordSet holdingBackEntry
                        setting ImpairmentAmtTo = holdingBackEntry.ImpairmentAmtCalculated,
                                ImpairmentAdjustment = holdingBackEntry.ImpairmentAdjustment - holdingBackEntry.ImpairmentAmtCalculated
                        where holdingBackEntry.HoldingEntry == holdingEntry.RecId;
                }
            }

            if (leftAmt)
            {
                error("@SYP4880518");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCGUAssetsNbvForEntrysAndSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total NBV of asset books in one CGU.
    /// </summary>
    /// <param name="_resultDoc">
    /// The <c>AssetImpairmentTestResultDocument_JP</c> record representing a CGU.
    /// </param>
    /// <returns>
    /// The total NBV.
    /// </returns>
    private AssetNetBookValue calculateCGUAssetsNbvForEntrysAndSum(AssetImpairmentTestResultDocument_JP _resultDoc)
    {
        AssetSumCalc_Trans                   sumCalc_Trans;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;
        AssetDocumentEntry_JP                docEntry;
        AssetImpairmentCGU_JP                cgu;
        AssetNetBookValue                    sumNbv;
        AssetTransDate                       lastTransDate;
        boolean                              hasFutureTrans;

        ttsBegin;

        while select forUpdate resultDocEntry
                where resultDocEntry.ResultDocument == _resultDoc.RecId
                      && resultDocEntry.IsSharedAsset == NoYes::No
              join docEntry
                where docEntry.RecId == resultDocEntry.AssetDocumentEntry_JP
        {
            sumCalc_Trans = AssetSumCalc_Trans::newAssetYear(docEntry.AssetId, docEntry.BookId, testResult.TestDate);
            resultDocEntry.FairValue = AssetBook::find(docEntry.AssetId, docEntry.BookId).AssetFairValue;

            resultDocEntry.NetBookValue = sumCalc_Trans.netBookValue();
            resultDocEntry.update();

            if (!hasFutureTrans)
            {
                lastTransDate = sumCalc_Trans.parmLastTransDate_JP();

                // According to PM, the warning message only popup when there are transactions AFTER the test date.
                // If there are transaction posted on the same day as the test date, no warning message will popup.
                if (lastTransDate > testResult.TestDate)
                {
                    hasFutureTrans = true;
                }
            }

            sumNbv += sumCalc_Trans.netBookValue();
        }

        if (hasFutureTrans)
        {
            cgu = AssetImpairmentCGU_JP::find(_resultDoc.CGU);
            warning(strFmt("@SYP4880637", testResult.TestDate, cgu.Number));
        }

        ttsCommit;

        return sumNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSharedAssetsNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total NBV of shared assets and goodwill.
    /// </summary>
    /// <param name="_resultDoc">
    /// The <c>AssetImpairmentTestResultDocument_JP</c> record representing shared assets and goodwill.
    /// </param>
    /// <returns>
    /// The total NBV.
    /// </returns>
    private AssetNetBookValue calculateSharedAssetsNetBookValue(AssetImpairmentTestResultDocument_JP _resultDoc)
    {
        AssetSumCalc                         sumCalc;
        AssetSumCalc_Trans                   sumCalc_Trans;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;
        AssetDocumentEntry_JP                docEntry;
        AssetNetBookValue                    sumNbv;
        AssetImpairmentCGUSharedAssets_JP    sharedAssets;
        AssetTransDate                       lastTransDate;
        boolean                              hasFutureTrans;

        while select forUpdate resultDocEntry
                where resultDocEntry.ResultDocument == _resultDoc.RecId
              join docEntry
                where docEntry.RecId == resultDocEntry.AssetDocumentEntry_JP
              join NetSellingPrice from sharedAssets
                where sharedAssets.CGUGroup == cguGroup.RecId
                      && sharedAssets.AssetId == docEntry.AssetId
                      && sharedAssets.BookId == docEntry.BookId
        {
            sumCalc = AssetImpairmentAccountingHelper_JP::createAssetSumCalcWithType(docEntry.AssetId, docEntry.BookId, testResult.TestDate);

            resultDocEntry.NetBookValue = sumCalc.netBookValue();
            resultDocEntry.NetSellingPrice = sharedAssets.NetSellingPrice;
            resultDocEntry.update();

            if (!hasFutureTrans)
            {
                sumCalc_Trans = sumCalc as AssetSumCalc_Trans;
                lastTransDate = sumCalc_Trans.parmLastTransDate_JP();

                // According to PM, the warning message only popup when there are transactions AFTER the test date.
                // If there are transaction posted on the same day as the test date, no warning message will popup.
                if (lastTransDate > testResult.TestDate)
                {
                    hasFutureTrans = true;
                }
            }

            sumNbv += sumCalc.netBookValue();
        }

        if (hasFutureTrans)
        {
            warning(strFmt("@SYP4880638", testResult.TestDate));
        }

        return sumNbv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSharedAssetsSubtotalRecovAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the subtotal recoverable amount of shared assets and goodwill.
    /// </summary>
    /// <returns>
    /// The subtotal recoverable amount of shared assets and goodwill.
    /// </returns>
    protected AssetRecoverableAmount_JP calculateSharedAssetsSubtotalRecovAmt()
    {
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;
        AssetImpairmentTestResultDocument_JP resultDoc;

        if (testResult.NetSellingPriceAsRecovable)
        {
            select sum(NetSellingPrice) from resultDocEntry
            join firstOnly RecId from resultDoc
                where resultDoc.RecId == resultDocEntry.ResultDocument
                      && resultDoc.AssetImpairmentTestResult_JP == testResult.RecId;

            return resultDocEntry.NetSellingPrice;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep1Internal</Name>
				<Source><![CDATA[
    protected void calculateStep1Internal()
    {
        AssetImpairmentTestResultDocument_JP resultDocument;
        AssetRecoverableAmount_JP            recovAmtTmp;
        AssetRecoverableAmount_JP            cguSubtotalRecovAmtLoc;
        AssetImpairmentAdjustment_JP         cguSubtotalImpairAdjLoc;
        container                            recovAmtCont;
        AssetImpairmentCGU_JP                cgu;
        boolean                              recovGTUndisc;

        while select forUpdate resultDocument
                where resultDocument.AssetImpairmentTestResult_JP == testResult.RecId
                      && resultDocument.CGU != 0
              join Number from cgu
                where cgu.RecId == resultDocument.CGU
        {
            recovAmtTmp = 0;

            if (resultDocument.DocTestResult == NoYesUnchanged::Yes)
            {
                if (!resultDocument.NotRecoverable && resultDocument.RecoverableAmount == 0)
                {
                    // @SYP4880614: The impairment calculation process has failed. You will need to provide recoverable amount for the cash generating units that requires an impairment before you can calculate the impairment amount and allocate the amount to fixed assets for posting.
                    // @SYP4860083: Please check the "Not recoverable" checkbox if the recoverable amount of the cash generating unit is 0.
                    throw error("@SYP4880614" + "@SYP4860083");
                }
                else
                {
                    recovAmtTmp = resultDocument.RecoverableAmount;
                    if (recovAmtTmp > resultDocument.UndiscountedCashFlow)
                    {
                        recovGTUndisc = true;
                    }
                }

                resultDocument.ImpairmentAdjustment = resultDocument.RecoverableAmount - resultDocument.NetBookValue;
            }
            else if (resultDocument.DocTestResult == NoYesUnchanged::No)
            {
                if (resultDocument.NotRecoverable)
                {
                    recovAmtTmp = resultDocument.RecoverableAmount;
                }
                else
                {
                    if (resultDocument.RecoverableAmount)
                    {
                        recovAmtCont += cgu.Number;
                    }
                    recovAmtTmp = resultDocument.RecoverableAmount ? resultDocument.RecoverableAmount : resultDocument.NetBookValue;
                }

                resultDocument.ImpairmentAdjustment = 0;
            }

            resultDocument.update();

            cguSubtotalImpairAdjLoc += resultDocument.ImpairmentAdjustment;
            cguSubtotalRecovAmtLoc += recovAmtTmp;
        }

        this.notifyRecovAmtForNonImpairmentCGU(recovAmtCont);
        if (recovGTUndisc)
        {
            warning("@SYP4880636");
        }

        cguSubtotalRecovAmt = cguSubtotalRecovAmtLoc;
        sharedAssetsSubtotalRecovAmt = this.calculateSharedAssetsSubtotalRecovAmt();
        cguSubtotalImpairAdj = cguSubtotalImpairAdjLoc;
        grandTotalRecovAmt = cguSubtotalRecovAmt + sharedAssetsSubtotalRecovAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStep2Internal</Name>
				<Source><![CDATA[
    protected void calculateStep2Internal()
    {
        AssetImpairmentTestResultDocument_JP resultDoc;

        if (grandTotalTestResult == NoYesUnchanged::Yes)
        {
            grandTotalImpairAdj = grandTotalRecovAmt - grandTotalNbv;
            sharedAssetsSubtotalImpairAdj = grandTotalImpairAdj - cguSubtotalImpairAdj;

            select firstOnly forUpdate resultDoc
                    where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                          && resultDoc.CGU == 0;

            resultDoc.ImpairmentAdjustment = sharedAssetsSubtotalImpairAdj;
            resultDoc.update();
        }
        else
        {
            grandTotalImpairAdj = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRecovAmtForNonImpairmentCGU</Name>
				<Source><![CDATA[
    private void notifyRecovAmtForNonImpairmentCGU(container _cont)
    {
        int i;
        if (conLen(_cont))
        {
            info("@SYP4880617");
            for (i = 1 ; i <= conLen(_cont) ; i++)
            {
                info(strFmt("@SYP4880618", conPeek(_cont, i)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep1</Name>
				<Source><![CDATA[
    protected boolean testStep1()
    {
        boolean                              ret;
        boolean                              tempRet;
        AssetImpairmentTestResultDocument_JP resultDoc;
        AssetNetBookValue                    cguSubtotalNbvLoc;
        AssetUndiscountedCashFlow_JP         cguSubtotalUndiscCFLoc;

        while select forUpdate resultDoc
                where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                      && resultDoc.CGU != 0
        {
            resultDoc.NetBookValue = this.calculateCGUAssetsNbvForEntrysAndSum(resultDoc);
            tempRet = resultDoc.NetBookValue > resultDoc.UndiscountedCashFlow;
            ret = ret || tempRet;
            resultDoc.DocTestResult = tempRet ? NoYesUnchanged::Yes : NoYesUnchanged::No;
            resultDoc.update();
            cguSubtotalNbvLoc += resultDoc.NetBookValue;
            cguSubtotalUndiscCFLoc += resultDoc.UndiscountedCashFlow;
        }

        cguSubtotalNbv = cguSubtotalNbvLoc;
        cguSubtotalUndiscCF = cguSubtotalUndiscCFLoc;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStep2</Name>
				<Source><![CDATA[
    protected boolean testStep2()
    {
        boolean                              tempRet;
        AssetNetBookValue                    grandTotalNbvLoc;
        NoYesUnchanged                       totalTestResultLoc;
        AssetImpairmentTestResultDocument_JP resultDoc;

        select firstOnly forUpdate resultDoc
            where resultDoc.AssetImpairmentTestResult_JP == testResult.RecId
                  && resultDoc.CGU == 0;

        resultDoc.NetBookValue = this.calculateSharedAssetsNetBookValue(resultDoc);
        sharedAssetsSubtotalNbv = resultDoc.NetBookValue;
        resultDoc.NetBookValue = sharedAssetsSubtotalNbv;
        sharedAssetsSubtotalRecovAmt = this.calculateSharedAssetsSubtotalRecovAmt();
        resultDoc.RecoverableAmount = sharedAssetsSubtotalRecovAmt;
        sharedAssetsSubtotalImpairAdj = 0;
        resultDoc.ImpairmentAdjustment = sharedAssetsSubtotalImpairAdj;
        resultDoc.update();

        grandTotalNbvLoc = cguSubtotalNbv + sharedAssetsSubtotalNbv;

        tempRet = grandTotalNbvLoc > cguSubtotalUndiscCF;
        totalTestResultLoc = tempRet ? NoYesUnchanged::Yes : NoYesUnchanged::No;

        grandTotalNbv = grandTotalNbvLoc;
        grandTotalUndiscCF = cguSubtotalUndiscCF;
        grandTotalTestResult = totalTestResultLoc;

        return tempRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of class <c>AssetImpairmentCGUGroupTestMethod1_JP</c>.
    /// </summary>
    /// <param name="_testResult">
    /// The <c>AssetImpairmentTestResult_JP</c> record that this test against.
    /// </param>
    /// <returns>
    /// An <c>AssetImpairmentCGUGroupTestMethod1_JP</c> instance.
    /// </returns>
    public static AssetImpairmentCGUGroupTest_JP construct(AssetImpairmentTestResult_JP _testResult)
    {
        return new AssetImpairmentCGUGroupTestMethod1_JP(_testResult);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>