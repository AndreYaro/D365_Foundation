<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilForecastBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilForecastBuilder</c> class encapsulates logic for building
/// up the load utilization forecast for the different load units.
/// </summary>
public class WmsSpaceUtilForecastBuilder
{
    WMSSpaceUtilSetupOptions    setupOptions;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustForecastForUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the space utilization forecast load on the specified date.
    /// </summary>
    /// <param name="_inventSiteId">
    /// A <c>InventSiteId</c> value.
    /// </param>
    /// <param name="_inventLocationId">
    /// A <c>InventLocationId</c> value.
    /// </param>
    /// <param name="_wmsStoreZoneId">
    /// A <c>InventLocationId</c> value.
    /// </param>
    /// <param name="_trackingDate">
    /// A <c>TransDate</c> value.
    /// </param>
    /// <param name="_palletCountAdjustment">
    /// A specified pallet count adjustment.
    /// </param>
    /// <param name="_volumeAdjustment">
    /// A specified volume count adjustment.
    /// </param>
    /// <param name="_weightAdjustment">
    /// A specified weight count adjustment.
    /// </param>
    /// <param name="_hasBackLog">
    /// A specified <c>NoYes</c> value, that means that the forecast should be adjusted for the backlog.
    /// </param>
    protected void adjustForecastForUnit(
        InventSiteId        _inventSiteId,
        InventLocationId    _inventLocationId,
        WMSStoreZoneId      _wmsStoreZoneId,
        TransDate           _trackingDate,
        WMSPalletCount      _palletCountAdjustment,
        Volume              _volumeAdjustment,
        WMSCurrentWeight    _weightAdjustment,
        NoYes               _hasBackLog)
    {
        WMSSpaceUtilForecast        forecast;
        WMSStorageLoadUnitMember    storageLoadUnitMember;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        ttsbegin;

        select firstonly forupdate forecast
            join storageLoadUnitMember
            where storageLoadUnitMember.wmsStorageLoadUnit == forecast.wmsStorageLoadUnit
                    && storageLoadUnitMember.InventLocationID == _inventLocationId
                    && storageLoadUnitMember.StoreZoneId == _wmsStoreZoneId
                    && forecast.TrackingDate == _trackingDate
                    && forecast.InventSiteId == _inventSiteId
                    && forecast.wmsReportSetup  == reportSetup;

        if (forecast)
        {
            forecast.CurrentVolume      += _volumeAdjustment;
            forecast.CurrentWeight      += _weightAdjustment;
            forecast.HasBacklog         = forecast.HasBacklog || _hasBackLog;

            forecast.setFullLoadFlags();

            forecast.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCurrentLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds current load data, as the first step in the space utilization forecast calculations.
    /// </summary>
    protected void buildCurrentLoad()
    {
        WMSStorageLoadUnit      storageLoadUnit;
        int                     currPalletCount;
        int                     maxPalletCount;
        Volume                  currVolume;
        Volume                  maxVolume;
        WMSCurrentWeight        currWeight;
        WMSCurrentWeight        maxWeight;
        WMSSpaceUtilForecast    forecast;
        RefRecId                reportSetup = setupOptions.parmReportSetupRecId();

        while select RecId, InventSiteId from storageLoadUnit
            where storageLoadUnit.wmsReportSetup == reportSetup
        {
           [currVolume, currPalletCount, currWeight] = this.getCurrentUnitLoad(storageLoadUnit.RecId);
           [maxVolume, maxPalletCount, maxWeight] = this.getMaxUnitLoad(storageLoadUnit.RecId);

            forecast.InventSiteId        = storageLoadUnit.InventSiteId;
            forecast.wmsStorageLoadUnit  = storageLoadUnit.RecId;
            forecast.CurrentVolume       = currVolume;
            forecast.MaxVolume           = maxVolume;
            forecast.CurrentWeight       = currWeight;
            forecast.MaxWeight           = maxWeight;
            forecast.TrackingDate        = setupOptions.parmFromDate();
            forecast.wmsReportSetup      = reportSetup;
            forecast.setFullLoadFlags();
            forecast.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds space utilization forecast.
    /// </summary>
    public void buildForecast()
    {
        this.deleteExistingForecast();

        this.buildCurrentLoad();

        this.buildProjectedLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectedLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds space utilization forecast, based on the planned forecast data.
    /// </summary>
    protected void buildProjectedLoad()
    {
        WMSSpaceUtilPlanForecast    plannedForecast;
        WMSSpaceUtilDatePeriods     datePeriods;
        TransDate                   nextPeriodStartDate;
        TransDate                   lastPeriodStartDate;
        WMSSpaceUtilForecast        forecast;
        WMSSpaceUtilForecast        forecastOrigin;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        select firstonly StartDate
            from datePeriods
            order by StartDate desc
            where datePeriods.wmsReportSetup == reportSetup;

        lastPeriodStartDate = datePeriods.StartDate;

        while select datePeriods
            order by StartDate
            where datePeriods.wmsReportSetup == reportSetup
        {
            while select sum(SupplyDemandDeltaVolume), sum(SupplyDemandDeltaPalletCount),
                            sum(SupplyDemandDeltaWeight), HasBacklog, TrackingDate, StoreZoneId, InventLocationID, InventSiteId
                from plannedForecast
                group by InventSiteId, InventLocationID, StoreZoneId, TrackingDate, HasBacklog
                where plannedForecast.TrackingDate      == datePeriods.StartDate
                      && plannedForecast.wmsReportSetup == reportSetup
            {
                if (plannedForecast.SupplyDemandDeltaPalletCount || plannedForecast.SupplyDemandDeltaVolume || plannedForecast.SupplyDemandDeltaWeight)
                {
                    this.adjustForecastForUnit(
                        plannedForecast.InventSiteId,
                        plannedForecast.InventLocationID,
                        plannedForecast.StoreZoneId,
                        plannedForecast.TrackingDate,
                        plannedForecast.SupplyDemandDeltaPalletCount,
                        plannedForecast.SupplyDemandDeltaVolume,
                        plannedForecast.SupplyDemandDeltaWeight,
                        plannedForecast.HasBacklog);
                }
            }

            nextPeriodStartDate = WMSSpaceUtilDatePeriods::findNextPeriodStartDate(datePeriods.EndDate);

            if (datePeriods.StartDate != lastPeriodStartDate)
            {
                insert_recordset forecastOrigin(
                        inventSiteId, WMSStorageLoadUnit, maxVolume, currentVolume, currentWeight, maxWeight, isFullVolumeLoad, isFullWeightLoad, trackingDate, wmsReportSetup)
                select  InventSiteId, wmsStorageLoadUnit, MaxVolume, CurrentVolume, CurrentWeight, MaxWeight, IsFullVolumeLoad, IsFullWeightLoad, nextPeriodStartDate, wmsReportSetup
                    from forecast
                    where forecast.TrackingDate         == datePeriods.StartDate
                          && forecast.wmsReportSetup    == reportSetup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInputBlockingLocationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and adjusts a query with the input blocking location check.
    /// </summary>
    /// <param name="_qbdsWMSLocation">
    /// An instance of the <c>QueryBuildDataSource</c> class.
    /// </param>
    protected void checkInputBlockingLocationPolicy(QueryBuildDataSource  _qbdsWMSLocation)
    {
        if (setupOptions.parmIsInputBlockingLocationPolicyEnabled())
        {
            _qbdsWMSLocation.addRange(fieldNum(WMSLocation, InputBlockingCauseId)).value(SysQuery::valueEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and adjusts a query with all specified location types.
    /// </summary>
    /// <param name="_qbdsWMSLocation">
    /// An instance of the <c>QueryBuildDataSource</c> class.
    /// </param>
    protected void checkLocationTypes(QueryBuildDataSource  _qbdsWMSLocation)
    {
        container   locationTypes = setupOptions.parmLocationTypes();
        str         locationTypeRange;
        int         locationTypesCount;
        int         locationTypeIndex;

        locationTypesCount = conLen(locationTypes);

        if (locationTypesCount != 0)
        {
            for (locationTypeIndex = 1; locationTypeIndex <= locationTypesCount; locationTypeIndex++)
            {
                if (locationTypeIndex > 1)
                {
                    locationTypeRange += ",";
                }

                locationTypeRange += strFmt('"%1"', SysQuery::value(conPeek(locationTypes, locationTypeIndex)));
            }

            _qbdsWMSLocation.addRange(fieldNum(WMSLocation, LocationType)).value(locationTypeRange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes existing space utilization forecast.
    /// </summary>
    protected void deleteExistingForecast()
    {
        WMSSpaceUtilForecast    forecast;
        RefRecId                reportSetup = setupOptions.parmReportSetupRecId();

        delete_from forecast
            where forecast.wmsReportSetup == reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUnitLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current load for the specified storage load unit.
    /// </summary>
    /// <param name="_storageUnitLoadRecId">
    /// A reference to the storage load unit.
    /// </param>
    /// <returns>
    /// A container that contains load data.
    /// </returns>
    protected container getCurrentUnitLoad(RecId _storageUnitLoadRecId)
    {
        WMSLocationLoad         wmsLocationLoad;
        QueryBuildDataSource    qbdsWMSLocation;
        QueryBuildDataSource    qbdsWMSLocationLoad;
        QueryBuildDataSource    qbdsWMSStoreZoneArea;
        QueryBuildRange         qbdsRange;
        Query                   query;
        QueryRun                queryRun;

        query = new Query();

        qbdsWMSLocationLoad = query.addDataSource(tableNum(WMSLocationLoad));
        qbdsWMSLocationLoad.addSelectionField(fieldNum(WMSLocationLoad, CurrentPalletCountAdjusted), SelectionField::Sum);
        qbdsWMSLocationLoad.addSelectionField(fieldNum(WMSLocationLoad, CurrentVolumeAdjusted), SelectionField::Sum);
        qbdsWMSLocationLoad.addSelectionField(fieldNum(WMSLocationLoad, CurrentWeightAdjusted), SelectionField::Sum);

        qbdsWMSLocation = qbdsWMSLocationLoad.addDataSource(tableNum(WMSLocation));
        qbdsWMSLocation.joinMode(JoinMode::ExistsJoin);
        qbdsWMSLocation.relations(true);
        this.checkInputBlockingLocationPolicy(qbdsWMSLocation);
        this.checkLocationTypes(qbdsWMSLocation);

        if (setupOptions.parmStorageLoadUnitType() == WMSSpaceUtilStorageLoadUnitType::Warehouse)
        {
            qbdsRange = qbdsWMSLocation.addRange(fieldNum(WMSLocation, DataAreaId));
            qbdsRange.value(this.getStorageUnitLoadMemberRange(_storageUnitLoadRecId, '', qbdsWMSLocation.name()));
        }
        else
        {
            qbdsWMSStoreZoneArea = qbdsWMSLocation.addDataSource(tableNum(WMSStoreZoneArea));
            qbdsWMSStoreZoneArea.joinMode(JoinMode::ExistsJoin);
            qbdsWMSStoreZoneArea.relations(true);

            qbdsRange = qbdsWMSStoreZoneArea.addRange(fieldNum(WMSStoreZoneArea, DataAreaId));
            qbdsRange.value(this.getStorageUnitLoadMemberRange(_storageUnitLoadRecId, qbdsWMSStoreZoneArea.name(), qbdsWMSLocation.name()));
        }

        queryRun = new QueryRun(query);
        queryRun.next(); // we are selecting SUMs so it will be a record
        wmsLocationLoad     = queryRun.get(tableNum(WMSLocationLoad));

        return [wmsLocationLoad.CurrentVolumeAdjusted, wmsLocationLoad.CurrentPalletCountAdjusted, wmsLocationLoad.CurrentWeightAdjusted];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxUnitLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the maximum load for the specified storage load unit.
    /// </summary>
    /// <param name="_storageUnitLoadRecId">
    /// A reference to the storage load unit.
    /// </param>
    /// <returns>
    /// A container that contains load data.
    /// </returns>
    protected container getMaxUnitLoad(RecId _storageUnitLoadRecId)
    {
        WMSLocation             wmsLocation;
        QueryBuildDataSource    qbdsWMSLocation;
        QueryBuildDataSource    qbdsWMSStoreZoneArea;
        QueryBuildRange         qbdsRange;
        Query                   query;
        QueryRun                queryRun;

        query = new Query();

        qbdsWMSLocation = query.addDataSource(tableNum(WMSLocation));
        qbdsWMSLocation.addSelectionField(fieldNum(WMSLocation, MaxVolume), SelectionField::Sum);
        qbdsWMSLocation.addSelectionField(fieldNum(WMSLocation, MaxPalletCount), SelectionField::Sum);
        qbdsWMSLocation.addSelectionField(fieldNum(WMSLocation, MaxWeight), SelectionField::Sum);

        this.checkInputBlockingLocationPolicy(qbdsWMSLocation);
        this.checkLocationTypes(qbdsWMSLocation);

        if (setupOptions.parmStorageLoadUnitType() == WMSSpaceUtilStorageLoadUnitType::Warehouse)
        {
            qbdsRange = qbdsWMSLocation.addRange(fieldNum(WMSLocation, DataAreaId));
            qbdsRange.value(this.getStorageUnitLoadMemberRange(_storageUnitLoadRecId, '', qbdsWMSLocation.name()));
        }
        else
        {
            qbdsWMSStoreZoneArea = qbdsWMSLocation.addDataSource(tableNum(WMSStoreZoneArea));
            qbdsWMSStoreZoneArea.joinMode(JoinMode::ExistsJoin);
            qbdsWMSStoreZoneArea.relations(true);

            qbdsRange = qbdsWMSStoreZoneArea.addRange(fieldNum(WMSStoreZoneArea, DataAreaId));
            qbdsRange.value(this.getStorageUnitLoadMemberRange(_storageUnitLoadRecId, qbdsWMSStoreZoneArea.name(), qbdsWMSLocation.name()));
        }

        queryRun = new QueryRun(query);
        queryRun.next(); // we are selecting SUMs so it will be a record
        wmsLocation     = queryRun.get(tableNum(WMSLocation));

        return [wmsLocation.MaxVolume, wmsLocation.MaxPalletCount, wmsLocation.MaxWeight];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageUnitLoadMemberRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the generic range clause to account for all storage load unit members.
    /// </summary>
    /// <param name="_storageUnitLoadRecId">
    /// A reference to the storage load unit.
    /// </param>
    /// <param name="_wmsStoreZoneAreaName">
    /// A specified store area name.
    /// </param>
    /// <param name="_wmsLocationName">
    /// A specified inventory location name.
    /// </param>
    /// <returns>
    /// The generic range clause to account for all storage load unit members.
    /// </returns>
    protected str getStorageUnitLoadMemberRange(RecId _storageUnitLoadRecId, str _wmsStoreZoneAreaName, str _wmsLocationName)
    {
        str                         zoneRange;
        str                         memberClause;
        int                         clauseCount;
        WMSStorageLoadUnitMember    storageLoadUnitMember;

        zoneRange += "(";

        while select storageLoadUnitMember
            where storageLoadUnitMember.wmsStorageLoadUnit == _storageUnitLoadRecId
        {
            if (clauseCount > 0)
            {
                zoneRange += " || ";
            }

            memberClause = strFmt('(%1.%2 == "%3")',
                _wmsLocationName,
                fieldStr(WMSLocation, InventLocationId),
                queryValue(storageLoadUnitMember.InventLocationID));
            

            zoneRange += memberClause;

            clauseCount++;
        }

        zoneRange += ")";

        return zoneRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupOptions</Name>
				<Source><![CDATA[
        public WMSSpaceUtilSetupOptions parmSetupOptions(WMSSpaceUtilSetupOptions _setupOptions = setupOptions)
    {
        setupOptions = _setupOptions;

        return setupOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSSpaceUtilForecastBuilder construct()
    {
        return new WMSSpaceUtilForecastBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>