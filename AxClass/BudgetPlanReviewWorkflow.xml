<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanReviewWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanReviewWorkflow</c> class is the helper class for the <c>SubmitToWorkflow</c> and
/// <c>ResubmitToWorkflow</c> classes for the budget plan workflow.
/// </summary>
public class BudgetPlanReviewWorkflow
{
    BudgetPlanHeader            budgetPlanHeader;
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    WorkflowWorkItemTable       workflowWorkItemTable;
    MenuItemName                menuItemName;
    UserId                      targetUser;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box for submitting a budget plan workflow.
    /// </summary>
    /// <returns>
    /// true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         ok;

        if (this.parmMenuItemName() == menuitemActionStr(BudgetPlanReviewSubmit))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (this.parmMenuItemName() == menuitemActionStr(BudgetPlanReviewResubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                this.parmWorkflowWorkItemTable(),
                WorkflowWorkItemActionType::Resubmit,
                new MenuFunction(menuitemActionStr(BudgetPlanReviewResubmit), MenuItemType::Action));

            workflowWorkItemActionDialog.run();

            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            this.parmTargetUser(workflowWorkItemActionDialog.parmTargetUser());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetPlanReviewWorkflow</c> class.
    /// </summary>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record to submit.
    /// </param>
    /// <param name="_menuItemName">
    /// The menu item name of the caller.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// The <c>WorkflowVersionTable</c> record.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// The <c>WorkflowWorkItemTable</c> record.
    /// </param>
    public void initialize(
        BudgetPlanHeader            _budgetPlanHeader,
        MenuItemName                _menuItemName,
        WorkflowVersionTable        _workflowVersionTable,
        WorkflowWorkItemTable       _workflowWorkItemTable)
    {
        this.parmBudgetPlanHeader(_budgetPlanHeader);
        this.parmMenuItemName(_menuItemName);
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemTable(_workflowWorkItemTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Protected default constructor that Construct factory methods used to instantiate the
    /// <c>BudgetPlanReviewWorkflow</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader = budgetPlanHeader)
    {
        budgetPlanHeader = _budgetPlanHeader;

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmMenuItemName(MenuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetUser</Name>
				<Source><![CDATA[
    public UserId parmTargetUser(UserId _targetUser = targetUser)
    {
        targetUser = _targetUser;

        return targetUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemTable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the budget plan workflow document.
    /// </summary>
    public void resubmit()
    {
        if (this.parmWorkflowWorkItemTable())
        {
            BudgetPlanWorkflowHelper::setWorkflowStatus(
                this.parmBudgetPlanHeader().RecId,
                BudgetPlanWorkflowStatus::InReview);

            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                this.parmWorkflowWorkItemTable(),
                this.parmWorkflowComment(),
                this.parmTargetUser(),
                WorkflowWorkItemActionType::Resubmit,
                this.parmMenuItemName());

            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget plan document.
    /// </summary>
    public void submit()
    {
        if (BudgetPlan::isReadyForReview(this.parmBudgetPlanHeader().RecId))
        {
            if (this.validateWorkflowVersionTable())
            {
                Workflow::activateFromWorkflowConfigurationId(
                    this.parmWorkflowVersionTable().ConfigurationId,
                    this.parmBudgetPlanHeader().RecId,
                    this.parmWorkflowComment(),
                    NoYes::No);

                BudgetPlanWorkflowHelper::startWorkflow(this.parmBudgetPlanHeader().RecId);
            }
            else
            {
                // The referenced workflow is no longer valid.
                // Do not submit the workflow and set the status to none.
                BudgetPlanWorkflowHelper::setWorkflowStatus(
                    this.parmBudgetPlanHeader().RecId,
                    BudgetPlanWorkflowStatus::Canceled);
            }

            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form data source that is associated to the <c>BudgetPlanHeader</c> record.
    /// </summary>
    public void updateFormDataSource()
    {
        FormDataSource budgetPlanHeader_ds;

        budgetPlanHeader_ds = FormDataUtil::getFormDataSource(this.parmBudgetPlanHeader());

        if (budgetPlanHeader_ds)
        {
            budgetPlanHeader_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>WorkflowVersionTable</c> table reference from the
    /// <c>BudgetPlanningWorkflow</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>WorkflowVersionTable</c> table is valid; otherwise, false.
    /// </returns>
    protected boolean validateWorkflowVersionTable()
    {
        boolean                             isValid = true;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetPlanningWorkflow              budgetPlanningWorkflow;

        budgetPlanningProcessAdministration = BudgetPlanningProcessAdministration::findByProcessOrganization(
            this.parmBudgetPlanHeader().BudgetPlanningProcess,
            this.parmBudgetPlanHeader().BudgetingOrganization);

        if (budgetPlanningProcessAdministration.RecId)
        {
            budgetPlanningWorkflow = BudgetPlanningWorkflow::find(budgetPlanningProcessAdministration.BudgetPlanningWorkflow);

            if (!budgetPlanningWorkflow.Workflow
                || !BudgetPlanWorkflowHelper::validateWorkflowTableSequenceNumber(budgetPlanningWorkflow.Workflow))
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanReviewWorkflow</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanReviewWorkflow</c> class.
    /// </returns>
    public static BudgetPlanReviewWorkflow construct()
    {
        BudgetPlanReviewWorkflow budgetPlanReviewWorkflow;

        budgetPlanReviewWorkflow = new BudgetPlanReviewWorkflow();

        return budgetPlanReviewWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a budget transaction workflow document and starts the corresponding workflow.
    /// </summary>
    /// <param name="args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args args)
    {
        BudgetPlanReviewWorkflow    budgetPlanReviewWorkflow;
        BudgetPlanHeader            budgetPlanHeader;

        if (args.record()
            && args.record().TableId == tableNum(BudgetPlanHeader))
        {
            budgetPlanHeader = args.record() as BudgetPlanHeader;
        }

        if (budgetPlanHeader
            && (args.menuItemName()    == menuitemActionStr(BudgetPlanReviewSubmit)
                || args.menuItemName() == menuitemActionStr(BudgetPlanReviewResubmit)))
        {
            if (!BudgetPlan::validateLedgerDimensionsByBudgetPlan(budgetPlanHeader.RecId))
            {
                throw error("@SYS4000363");
            }

            budgetPlanReviewWorkflow = BudgetPlanReviewWorkflow::construct();

            budgetPlanReviewWorkflow.initialize(
                budgetPlanHeader,
                args.menuItemName(),
                BudgetPlanWorkflowHelper::getWorkflowVersionTable(budgetPlanHeader.RecId),
                args.caller().getActiveWorkflowWorkItem());

            if (budgetPlanReviewWorkflow.dialogOk())
            {
                switch (args.menuItemName())
                {
                    case menuitemActionStr(BudgetPlanReviewSubmit) :
                        budgetPlanReviewWorkflow.submit();
                        break;

                    case menuitemActionStr(BudgetPlanReviewResubmit) :
                        budgetPlanReviewWorkflow.resubmit();
                        break;

                    default :
                        break;
                }

                args.caller().updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>