<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentDraftReplenishmentOrderJournalCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConsignmentDraftReplenishmentOrderJournalCleanUp</c> class is used when deleting draft replenishment order journals.
/// </summary>
public class ConsignmentDraftReplenishmentOrderJournalCleanUp extends RunBaseBatch implements BatchRetryable
{
    SalesPurchParmCleanUpMode   cleanUpMode;
    TransDate                   cleanUpDate;

    DialogField                 dialogCleanUpMode;
    DialogField                 dialogCleanUpDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanUpMode,
        cleanUpDate
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDraftReplenishmentOrderJournalTables</Name>
				<Source><![CDATA[
    private void deleteDraftReplenishmentOrderJournalTables(utcdatetime _cleanUpDateTime)
    {
        ConsignmentDraftReplenishmentOrderJournalHeader draftReplenishmentOrderJournalHeader;
        ConsignmentDraftReplenishmentOrderJournalLine   draftReplenishmentOrderJournalLine;

        draftReplenishmentOrderJournalHeader.skipDataMethods(true);
        draftReplenishmentOrderJournalHeader.skipDeleteActions(true);

        if (cleanUpMode == SalesPurchParmCleanUpMode::All)
        {
            delete_from draftReplenishmentOrderJournalHeader
                where draftReplenishmentOrderJournalHeader.CreatedDateTime    <= _cleanUpDateTime;
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::Executed)
        {
            delete_from draftReplenishmentOrderJournalHeader
                where draftReplenishmentOrderJournalHeader.CreatedDateTime    <= _cleanUpDateTime        &&
                      draftReplenishmentOrderJournalHeader.ParmJobStatus      == ParmJobStatus::Executed;
        }
        if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting)
        {
            delete_from draftReplenishmentOrderJournalHeader
                where draftReplenishmentOrderJournalHeader.CreatedDateTime    <= _cleanUpDateTime        &&
                    draftReplenishmentOrderJournalHeader.ParmJobStatus        == ParmJobStatus::Waiting;
        }
        else
        {
            delete_from draftReplenishmentOrderJournalHeader
                where draftReplenishmentOrderJournalHeader.CreatedDateTime    <= _cleanUpDateTime        &&
                      (draftReplenishmentOrderJournalHeader.ParmJobStatus     == ParmJobStatus::Executed ||
                       draftReplenishmentOrderJournalHeader.ParmJobStatus     == ParmJobStatus::ContainErrors);
        }

        draftReplenishmentOrderJournalLine.skipDataMethods(true);
        draftReplenishmentOrderJournalLine.skipDeleteActions(true);

        delete_from draftReplenishmentOrderJournalLine
            notexists join draftReplenishmentOrderJournalHeader
            where draftReplenishmentOrderJournalLine.ParmId == draftReplenishmentOrderJournalHeader.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTables</Name>
				<Source><![CDATA[
    private void deleteTables()
    {
        utcdatetime cleanUpDateTime = datetoendUtcDateTime(cleanUpDate, DateTimeUtil::getUserPreferredTimeZone());

        this.deleteDraftReplenishmentOrderJournalTables(cleanUpDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        var dialog = super();

        dialogCleanUpMode = dialog.addFieldValue(enumStr(SalesPurchParmCleanUpMode), cleanUpMode);
        dialogCleanUpDate = dialog.addFieldValue(extendedTypeStr(TransDate), cleanUpDate, "@SYS75241", "@SYS75242");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cleanUpMode = dialogCleanUpMode.value();
        cleanUpDate = dialogCleanUpDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes draft replenishment order journals.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (!this.validateCleanUpMode())
        {
            return;
        }

        try
        {
            ttsbegin;

            this.deleteTables();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!cleanUpDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret && this.validateCleanUpMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCleanUpMode</Name>
				<Source><![CDATA[
    private boolean validateCleanUpMode()
    {
        boolean ret = true;
 
        if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting
            && !SalesPurchParmCleanUpForWaitingFlight::instance().isEnabled())
        {
            ret = checkFailed("@SCM:CleanupWaitingDraftConsignmentReplenishmentOrderJournalsNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ConsignmentDraftReplenishmentOrderJournalCleanUp construct()
    {
        return new ConsignmentDraftReplenishmentOrderJournalCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS75176";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ConsignmentDraftReplenishmentOrderJournalCleanUp    draftReplenishmentOrderJournalCleanUp = ConsignmentDraftReplenishmentOrderJournalCleanUp::newStandard(args);

        if (draftReplenishmentOrderJournalCleanUp.prompt())
        {
            draftReplenishmentOrderJournalCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    private static ConsignmentDraftReplenishmentOrderJournalCleanUp newStandard(Args _args)
    {
        ConsignmentDraftReplenishmentOrderJournalCleanUp    draftReplenishmentOrderJournalCleanUp = ConsignmentDraftReplenishmentOrderJournalCleanUp::construct();
        draftReplenishmentOrderJournalCleanUp.getLast();
        draftReplenishmentOrderJournalCleanUp.init();

        return draftReplenishmentOrderJournalCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>