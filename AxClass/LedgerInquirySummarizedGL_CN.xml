<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquirySummarizedGL_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerInquirySummarizedGL_CN</c> class provides main logic process for the <c>LedgerSummarizedGL</c> SSRS report.
/// </summary>
public class LedgerInquirySummarizedGL_CN extends LedgerInquirySum_CN implements BatchRetryable
{
    NoYes   isFiscalYearClosed;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method to do nothing for <c>LedgerSummarizedGL</c> SSRS report.
    /// </summary>
    protected void createQueryRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsFiscalYearClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the isFiscalYearClosed value.
    /// </summary>
    /// <returns>
    /// isFiscalYearClosed value
    /// </returns>
    public NoYes getIsFiscalYearClosed()
    {
        return isFiscalYearClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalYearClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether is the closing period in the fiscal year in which the period end date falls.
    /// </summary>
    /// <returns>
    /// Yes if the closing period, No otherwise.
    /// </returns>
    private NoYes isFiscalYearClosed()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalClosingPeriod;
        boolean ret = NoYes::No;

        fiscalClosingPeriod = LedgerFiscalCalendar::findYearEndClosingPeriodByDate(
            CompanyInfoHelper::fiscalCalendarRecId(),
            periodEnd);

        if (fiscalClosingPeriod.RecId && fiscalClosingPeriod.EndDate == periodEnd)
        {
            select firstonly RecId from generalJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generaljournalEntry.FiscalCalendarPeriod == fiscalClosingPeriod.RecId;

            if (generalJournalAccountEntry.RecId)
            {
                ret = NoYes::Yes;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method for <c>LedgerSummarizedGL</c> SSRS report.
    /// </summary>
    /// <param name="_queryRun">
    /// An query run object
    /// </param>
    /// <param name="_fromLevel">
    /// From account level
    /// </param>
    /// <param name="_toLevel">
    /// To account level
    /// </param>
    protected void new(QueryRun _queryRun, Level _fromLevel, Level _toLevel)
    {
        super();
        queryRun = _queryRun;
        fromAccountLevel = _fromLevel;
        toAccountLevel = _toLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method for <c>LedgerSummarizedGL</c> SSRS report.
    /// </summary>
    public void preProcess()
    {
        super();

        isFiscalYearClosed = this.isFiscalYearClosed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This static method is used to construct the <c>LedgerInquirySummarizedGL_CN</c> class for SSRS reprot.
    /// </summary>
    /// <param name="_queryRun">
    /// An query run object
    /// </param>
    /// <param name="_fromLevel">
    /// From account level
    /// </param>
    /// <param name="_toLevel">
    /// To account level
    /// </param>
    /// <returns>
    /// An instance of the <c>LedgerInquirySummarizedGL_CN</c> class
    /// </returns>
    public static LedgerInquirySummarizedGL_CN construct(QueryRun _queryRun, Level _fromLevel, Level _toLevel)
    {
        LedgerInquirySummarizedGL_CN ledgerInquirySum = new LedgerInquirySummarizedGL_CN(_queryRun, _fromLevel, _toLevel);

        return ledgerInquirySum;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
