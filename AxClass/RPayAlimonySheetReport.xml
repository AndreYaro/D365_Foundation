<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAlimonySheetReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayAlimonySheetReport extends RunBaseBatch implements BatchRetryable
{
    DialogField     fieldStartPeriod,
                    fieldEndPeriod,
                    fieldStartPayment,
                    fieldEndPayment,
                    fieldSheetNum;
    ReportPeriod_RU startPeriod,
                    endPeriod;
    TransDate       startPayment,
                    endPayment;
    RpaySheetNum    paySheetNum;

    QueryRun        queryRun;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        startPeriod,
        endPeriod,
        startPayment,
        endPayment,
        paySheetNum
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@RUP2797";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        NumberSeq       numberSeq;
        ;
        numberSeq     = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(), true);
        paySheetNum   = numberSeq.num();

        fieldSheetNum = dialog.addField(extendedTypeStr(RpaySheetNum));
        fieldSheetNum.value(paySheetNum);

        dialog.addGroup("@RUP937");
        fieldStartPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS4083");
        fieldEndPeriod   = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS5418");
        fieldStartPeriod.value(startPeriod ? startPeriod : RPayParameters::payPeriod());
        fieldEndPeriod.value(endPeriod     ? endPeriod   : RPayParameters::payPeriod());

        dialog.addGroup("@RUP490");
        fieldStartPayment = dialog.addField(extendedTypeStr(TransDate), "@SYS4083");
        fieldEndPayment   = dialog.addField(extendedTypeStr(TransDate), "@SYS5418");
        fieldStartPayment.value(startPayment ? startPayment : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        fieldEndPayment.value(endPayment     ? endPayment   : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPayment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate endPayment()
    {
        return endPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU endPeriod()
    {
        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (! fieldStartPeriod.value())
        {
            return checkFailed("@RUP881");
        }

        if (! fieldEndPeriod.value())
        {
            return checkFailed("@RUP882");
        }

        if (fieldStartPeriod.value() > fieldEndPeriod.value())
        {
            return checkFailed("@RUP883");
        }

        if (fieldStartPayment.value() > fieldEndPayment.value())
        {
            return checkFailed("@SYS16982");
        }

        startPeriod  = endmth(fieldStartPeriod.value());
        endPeriod    = endmth(fieldEndPeriod.value());
        startPayment = fieldStartPayment.value();
        endPayment   = fieldEndPayment.value();
        paySheetNum  = fieldSheetNum.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query initQuery()
    {
        Query                    query;

        QueryBuildRange          qbr;
        QueryBuildDataSource     qbds;
        ;
        query = new Query(queryStr(RPayAlimonySheetQuery));

        qbr = query.dataSourceTable(tablenum(rPayStandardDeductionTable)).rangeField(fieldnum(rPayStandardDeductionTable, DeductionType));
        qbr.value(queryValue(RPayStandardDeductionType::Alimony));
        qbr.status(RangeStatus::Locked);

        qbds = query.dataSourceTable(tableNum(rPayEmplStandardDeductionTable));

        qbds.sortClear();
        qbds.addSortField(fieldnum(rPayEmplStandardDeductionTable, RecipientType), SortOrder::Ascending);
        qbds.addSortField(fieldnum(rPayEmplStandardDeductionTable, Recipient), SortOrder::Ascending);
        qbr  = qbds.rangeField(fieldnum(rPayEmplStandardDeductionTable, AlimonyPaymentType));
        qbr.value(queryValue(RPayAlimPaymentType::Sheet));
        qbr.status(RangeStatus::Locked);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun ? queryRun.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RpaySheetNum paySheetNum()
    {
        return paySheetNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        OxmlExcelReport_RPayAlimonySheet   report = new OxmlExcelReport_RPayAlimonySheet();

        this.updateQuery();

        report.setQueryRun(this.queryRun());
        report.parmPaysheetNum(paySheetNum);

        report.parmStartPeriod(startPeriod);
        report.parmEndPeriod(endPeriod);

        report.parmStartPaymentDate(startPayment);
        report.parmEndPaymentDate(endPayment);

        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPayment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate startPayment()
    {
        return startPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU startPeriod()
    {
        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQR] = packedClass;
                if (SysQuery::isPackedOk(packedQR))
                {
                    queryRun = new QueryRun(packedQR);
                }
                else
                {
                    this.initQueryRun();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        query = this.queryRun().query();

        qbds = query.dataSourceTable(tableNum(RPayEmplStandardDeductionTable));

        qbds.sortClear();
        qbds.addSortField(fieldnum(RPayEmplStandardDeductionTable, RecipientType), SortOrder::Ascending);
        qbds.addSortField(fieldnum(RPayEmplStandardDeductionTable, Recipient), SortOrder::Ascending);

        qbr = query.dataSourceTable(tablenum(RPayTrans)).rangeField(fieldnum(RPayTrans,PayPeriod));
        qbr.value(SysQuery::range(startPeriod, endPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    /// <remarks>
    /// Validates the report dialog parameters.
    /// </remarks>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! fieldStartPeriod.value())
            {
                return checkFailed("@RUP881");
            }

            if (! fieldEndPeriod.value())
            {
                return checkFailed("@RUP882");
            }

            if (fieldStartPeriod.value() > fieldEndPeriod.value())
            {
                return checkFailed("@RUP883");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2797";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayAlimonySheetReport alimonySheetReport = new RPayAlimonySheetReport();
        ;
        if (alimonySheetReport.prompt())
        {
            alimonySheetReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>