<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalTableType</c> class is the abstract base class for the
///    <c>LedgerJournalTable</c> strategies.
/// </summary>
/// <remarks>
///    The <c>LedgerJournalTableType</c> class hierarchy implements the strategy pattern to the
///    polymorphic execution of defaulting and validation logic for the journal types stored in the
///    <c>LedgerJournalTable</c>.
/// </remarks>
//  Internal Notes:
//      1) We did not code a replace journal number method.
//      The approach of this class is to take vouchers only when they are needed, but it is possible these
//      vouchers may need to replaced.  When a journal number is taken it is taken on a user connection so
//      it is independent from the root transaction.  When the root transaction fails, the kernel will
//      automatically re-use these vouchers.  Therefore, the create sceario is handled by the kernel
//      and we do not need to expose a replace voucher number method.
//
abstract class LedgerJournalTableType
{
    LedgerJournalOperation operation;
    LedgerJournalName ledgerJournalName;
    LedgerJournalTable ledgerJournalTable;
    boolean isInteractiveContext;
    CurrencyCode companyCurrencyCode;

    private static const str defaultPrefix = 'default';
    private static const str modifiedPrefix = 'modified';
    private static const str validatePrefix = 'validate';
    private static const str InvalidJournalType = 'Invalid Journal Type';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultBankRemittanceType</Name>
				<Source><![CDATA[
    protected void defaultBankRemittanceType()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, BankRemittanceType)))
            {
                this.defaultFieldValue(fieldnum(LedgerJournalTable, BankRemittanceType), BankRemittanceType::None);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrencyCode</Name>
				<Source><![CDATA[
    protected void defaultCurrencyCode()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, CurrencyCode)))
            {
                //
                // We are intentionally not using ledgerJournalTable.parmCurrencyCode to bypass value mapping.
                // The table should always contain the internal value.
                //
                this.initializeLedgerJournalName();
                CurrencyCode currencyCode = this.determineDefaultCurrencyCode();

                if (currencyCode)
                {
                    this.defaultFieldValue(fieldnum(LedgerJournalTable, CurrencyCode), currencyCode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrentOperationsTax</Name>
				<Source><![CDATA[
    protected void defaultCurrentOperationsTax()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, CurrentOperationsTax)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, CurrentOperationsTax), this.determineDefaultCurrentOperationsTax());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCustVendNegInstProtestProcess</Name>
				<Source><![CDATA[
    protected void defaultCustVendNegInstProtestProcess()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, CustVendNegInstProtestProcess)))
            {
                this.defaultFieldValue(fieldnum(LedgerJournalTable, CustVendNegInstProtestProcess), CustVendNegInstProtestProcess::OpenPaym);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDetailSummaryPosting</Name>
				<Source><![CDATA[
    protected void defaultDetailSummaryPosting()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, DetailSummaryPosting)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, DetailSummaryPosting), this.determineDefaultDetailSummaryPosting());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    protected void defaultDimension()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, DefaultDimension)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, DefaultDimension), this.determineDefaultDimension());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocumentNum</Name>
				<Source><![CDATA[
    protected void defaultDocumentNum()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, DocumentNum)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, DocumentNum), this.determineDefaultDocumentNum());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRate</Name>
				<Source><![CDATA[
    protected void defaultExchRate()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, ExchRate)))
            {
                this.defaultCurrencyCode();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, ExchRate), this.determineDefaultExchRate());
                this.defaultFieldValue(fieldnum(LedgerJournalTable, ReportingCurrencyExchRate), this.determineDefaultReportingCurrencyExchRate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRateSecondary</Name>
				<Source><![CDATA[
    protected void defaultExchRateSecondary()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, ExchrateSecondary)))
            {
                this.defaultCurrencyCode();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, ExchrateSecondary), this.determineDefaultExchRateSecondary());
                this.defaultFieldValue(fieldNum(LedgerJournalTable, ReportingCurrencyExchRateSecondary), this.determineDefaultReportingCurrencyExchRateSecondary());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds with the field being defaulted.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        SysDictClass sysDictClass;

        FieldName fieldName = fieldid2name(tablenum(LedgerJournalTable), _fieldId);
        MethodName methodName = defaultPrefix + fieldName;

        sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            sysDictClass.callObject(methodName, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFixedExchRate</Name>
				<Source><![CDATA[
    protected void defaultFixedExchRate()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, FixedExchRate)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, FixedExchRate), this.determineDefaultFixedExchRate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFixedOffsetAccount</Name>
				<Source><![CDATA[
    protected void defaultFixedOffsetAccount()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, FixedOffsetAccount)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, FixedOffsetAccount), this.determineDefaultFixedOffsetAccount());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGroupBlockId</Name>
				<Source><![CDATA[
    protected void defaultGroupBlockId()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, GroupBlockId)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, GroupBlockId), this.determineDefaultBlockUserGroupId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultJournalNum</Name>
				<Source><![CDATA[
    protected void defaultJournalNum()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            //
            // The journal number is always determined once.  If the consumer provided a value, we need to ignore
            // it and determine the next journal number.
            //
            if (this.isConsumerStateTracked())
            {
                if (ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, JournalNum)) != FieldState::Defaulted)
                {
                    ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, JournalNum), FieldState::NotSet);
                }
            }

            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, JournalNum)))
            {
                this.defaultFieldValue(fieldnum(LedgerJournalTable, JournalNum), this.determineDefaultJournalNum());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values for the journal type.
    /// </summary>
    /// <remarks>
    ///    This method is abstract because each journal has a specific default journal type.
    /// </remarks>
    protected abstract void defaultJournalType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerJournalInclTax</Name>
				<Source><![CDATA[
    protected void defaultLedgerJournalInclTax()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, LedgerJournalInclTax)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, LedgerJournalInclTax), this.determineDefaultLedgerJournalInclTax());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the override sales tax field.
    /// </summary>
    internal void defaultOverrideSalesTax()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, OverrideSalesTax)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, OverrideSalesTax), this.determineDefaultOverrideSalesTax());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLinesLimitBeforeDistribution</Name>
				<Source><![CDATA[
    protected void defaultLinesLimitBeforeDistribution()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, LinesLimitBeforeDistribution)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, LinesLimitBeforeDistribution), this.determineDefaultLinesLimitBeforeDist());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultName</Name>
				<Source><![CDATA[
    protected void defaultName()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, Name)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, Name), this.determineDefaultName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultnumberSequenceId</Name>
				<Source><![CDATA[
    protected void defaultnumberSequenceId()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, NumberSequenceTable)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, NumberSequenceTable), this.determineDefaultNumberSequenceTable());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccount</Name>
				<Source><![CDATA[
    protected void defaultOffsetAccount()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, OffsetLedgerDimension)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, OffsetLedgerDimension), this.determineDefaultOffsetLedgerDimension());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccountType</Name>
				<Source><![CDATA[
    protected void defaultOffsetAccountType()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, OffsetAccountType)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, OffsetAccountType), this.determineDefaultOffsetAccounType());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymentsGenerated_IT</Name>
				<Source><![CDATA[
    protected void defaultPaymentsGenerated_IT()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, PaymentsGenerated_IT)))
            {
                this.defaultFieldValue(fieldnum(LedgerJournalTable, PaymentsGenerated_IT), this.determineDefaultPaymentsGenerated_IT());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPostedDateTime</Name>
				<Source><![CDATA[
    protected void defaultPostedDateTime()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            //
            // The posted date time can never be set when a journal is being created.  If the consumer provided a value, we need
            // to ignore it.
            //
            if (this.isConsumerStateTracked())
            {
                if (ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, PostedDateTime)))
                {
                    ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, PostedDateTime), FieldState::NotSet);
                }
            }

            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, PostedDateTime)))
            {
                this.defaultFieldValue(fieldnum(LedgerJournalTable, PostedDateTime), DateTimeUtil::minValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default field values for a <c>LedgerJournalTable</c> row.
    /// </summary>
    public void defaultRow()
    {
        this.defaultJournalNum();
        this.defaultName();
        this.defaultnumberSequenceId();
        this.defaultJournalType();
        this.defaultPaymentsGenerated_IT();
        this.defaultOffsetAccount();
        this.defaultPostedDateTime();
        this.defaultOffsetAccountType();
        this.defaultGroupBlockId();
        this.defaultDimension();
        this.defaultCurrencyCode();
        this.defaultFixedExchRate();
        this.defaultDetailSummaryPosting();
        this.defaultDocumentNum();
        this.defaultExchRateSecondary();
        this.defaultExchRate();
        this.defaultFixedOffsetAccount();
        this.defaultCurrentOperationsTax();
        this.defaultLedgerJournalInclTax();
        this.defaultOverrideSalesTax();
        this.defaultBankRemittanceType();
        this.defaultCustVendNegInstProtestProcess();
        this.defaultVoucherAllocatedAtPosting();
        this.defaultLinesLimitBeforeDistribution();
        this.defaultWorkflowApprovalStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVoucherAllocatedAtPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the allocate voucher at posting field.
    /// </summary>
    protected void defaultVoucherAllocatedAtPosting()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, VoucherAllocatedAtPosting)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, VoucherAllocatedAtPosting), this.determineDefaultVoucherAllocAtPosting());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkflowApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the workflow approval status field.
    /// </summary>
    protected void defaultWorkflowApprovalStatus()
    {
        if (operation == LedgerJournalOperation::Create)
        {
            //
            // The workflow approval status can never be set when a journal is being created.  If the consumer provided a value, we
            // need to ignore it.
            //
            if (this.isConsumerStateTracked())
            {
                if (ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, WorkflowApprovalStatus)) != FieldState::Defaulted)
                {
                    ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, WorkflowApprovalStatus), FieldState::NotSet);
                }
            }

            if (!ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, WorkflowApprovalStatus)))
            {
                this.initializeLedgerJournalName();
                this.defaultFieldValue(fieldnum(LedgerJournalTable, WorkflowApprovalStatus), this.determineDefaultWorkflowApprovalStatus());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultBlockUserGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default GroupBlockId value.
    /// </summary>
    /// <returns>
    /// The default GroupBlockId value.
    /// </returns>
    protected JournalBlockUserGroupId determineDefaultBlockUserGroupId()
    {
        return ledgerJournalName.BlockUserGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default currency code.
    /// </summary>
    /// <returns>
    /// The default currency code.
    /// </returns>
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        return ledgerJournalName.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrentOperationsTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default CurrentOperationsTax value.
    /// </summary>
    /// <returns>
    /// The default CurrentOperationsTax value.
    /// </returns>
    protected CurrentOperationsTax determineDefaultCurrentOperationsTax()
    {
        return ledgerJournalName.CurrentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDetailSummaryPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default DetailSummaryPosting value.
    /// </summary>
    /// <returns>
    /// The default DetailSummaryPosting value.
    /// </returns>
    protected DetailSummary determineDefaultDetailSummaryPosting()
    {
        return ledgerJournalName.DetailSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default DefaultDimension value.
    /// </summary>
    /// <returns>
    /// The default DefaultDimension value.
    /// </returns>
    protected DimensionDefault determineDefaultDimension()
    {
        return ledgerJournalName.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default DocumentNum value.
    /// </summary>
    /// <returns>
    /// The default DocumentNum value.
    /// </returns>
    protected DocumentNum determineDefaultDocumentNum()
    {
        return ledgerJournalName.DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default exchange rate.
    /// </summary>
    /// <returns>
    /// The default exchange rate.
    /// </returns>
    protected ExchRate determineDefaultExchRate()
    {
        ExchRate exchRate;
        CurrencyCode currencyCode;

        currencyCode = ledgerJournalTable.CurrencyCode;

        if (currencyCode)
        {
            if (Currency::exist(currencyCode))
            {
                if (currencyCode == CompanyInfoHelper::standardCurrency())
                {
                    exchRate = 100;
                }
                else
                {
                    exchRate = ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), currencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                }
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReportingCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default reporting currency exchange rate.
    /// </summary>
    /// <returns>
    /// The default reporting currency exchange rate.
    /// </returns>
    private ReportingCurrencyExchRate determineDefaultReportingCurrencyExchRate()
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate;
        CurrencyCode currencyCode = ledgerJournalTable.CurrencyCode;

        if (currencyCode)
        {
            if (Currency::exist(currencyCode))
            {
                if (currencyCode == CompanyInfoHelper::standardCurrency())
                {
                    reportingCurrencyExchRate = 100.0;
                }
                else
                {
                    reportingCurrencyExchRate = this.getExchangeRateHelper(currencyCode).getExchangeRate1();
                }
            }
        }

        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The default secondary exchange rate.
    /// </returns>
    protected ExchRate determineDefaultExchRateSecondary()
    {
        ExchRate exchRateSecondary;
        CurrencyCode currencyCode;

        currencyCode = ledgerJournalTable.CurrencyCode;

        if (currencyCode)
        {
            if (Currency::exist(currencyCode))
            {
                exchRateSecondary = ExchangeRateHelper::getExchangeRate2_Static(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), currencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }

        return exchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReportingCurrencyExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default reporting currency secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The default reporting currency secondary exchange rate.
    /// </returns>
    private ReportingCurrencyExchRateSecondary determineDefaultReportingCurrencyExchRateSecondary()
    {
        ReportingCurrencyExchRateSecondary reportingCurrencyExchRateSecond;
        CurrencyCode currencyCode;

        currencyCode = ledgerJournalTable.CurrencyCode;

        if (currencyCode)
        {
            if (Currency::exist(currencyCode))
            {
                reportingCurrencyExchRateSecond = this.getExchangeRateHelper(currencyCode).getExchangeRate2();
            }
        }

        return reportingCurrencyExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateHelper</Name>
				<Source><![CDATA[
    private ExchangeRateHelper getExchangeRateHelper(CurrencyCode _currencyCode)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
                                                    Ledger::current(),
                                                    _currencyCode,
                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
        exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());

        return exchangeRateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default fixed secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The default fixed secondary exchange rate.
    /// </returns>
    protected FixedExchRate determineDefaultFixedExchRate()
    {
        return ledgerJournalName.FixedExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default FixedOffsetAccount value.
    /// </summary>
    /// <returns>
    /// The default FixedOffsetAccount value.
    /// </returns>
    protected FixedOffsetAccount determineDefaultFixedOffsetAccount()
    {
        return ledgerJournalName.FixedOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default JournalNum value.
    /// </summary>
    /// <returns>
    /// The default JournalNum value.
    /// </returns>
    protected LedgerJournalId determineDefaultJournalNum()
    {
        NumberSequenceReference numberSequenceReference;
        LedgerJournalId journalNum;
        NumberSeq journalNumberSeq;

        numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(LedgerJournalId));

        Debug::assert(numberSequenceReference != null);

        journalNumberSeq = NumberSeq::newGetNum(numberSequenceReference, false);
        journalNum = journalNumberSeq.num();

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLedgerJournalInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default LedgerJournalInclTax value.
    /// </summary>
    /// <returns>
    /// The default LedgerJournalInclTax value.
    /// </returns>
    protected LedgerJournalInclTax determineDefaultLedgerJournalInclTax()
    {
        return ledgerJournalName.LedgerJournalInclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default override sales tax value.
    /// </summary>
    /// <returns>
    /// The default override sales tax value.
    /// </returns>
    internal TaxIntegrationOverrideSalesTax determineDefaultOverrideSalesTax()
    {
        return ledgerJournalName.OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLinesLimitBeforeDist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default LinesLimitBeforeDistribution value.
    /// </summary>
    /// <returns>
    /// The default LinesLimitBeforeDistribution value.
    /// </returns>
    protected LedgerJournalLinesLimit determineDefaultLinesLimitBeforeDist()
    {
        return ledgerJournalName.LinesLimitBeforeDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default Name value.
    /// </summary>
    /// <returns>
    /// The default Name value.
    /// </returns>
    protected JournalDescription determineDefaultName()
    {
        return ledgerJournalName.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultNumberSequenceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default NumberSequenceTable value.
    /// </summary>
    /// <returns>
    /// The default NumberSequenceTable value.
    /// </returns>
    protected RefRecId determineDefaultNumberSequenceTable()
    {
        if (this.determineDefaultVoucherAllocAtPosting())
        {
            ledgerJournalTable.NumberSequenceTable = LedgerParameters::numRefLedgerTempVoucher().numberSequenceTable().RecId;
        }
        else
        {
            ledgerJournalTable.NumberSequenceTable = ledgerJournalName.NumberSequenceTable;
        }

        return ledgerJournalTable.NumberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOffsetAccounType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default OffsetAccountType value.
    /// </summary>
    /// <returns>
    /// The default OffsetAccountType value.
    /// </returns>
    protected LedgerJournalACType determineDefaultOffsetAccounType()
    {
        return ledgerJournalName.OffsetAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default OffsetLedgerDimension value.
    /// </summary>
    /// <returns>
    /// The default OffsetLedgerDimension value.
    /// </returns>
    protected DimensionDynamicDefaultAccount determineDefaultOffsetLedgerDimension()
    {
        return ledgerJournalName.parmOffsetLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymentsGenerated_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default PaymentsGenerated_IT value.
    /// </summary>
    /// <returns>
    /// The default PaymentsGenerated_IT value.
    /// </returns>
    protected NoYes determineDefaultPaymentsGenerated_IT()
    {
        return ledgerJournalName.GeneratePayments_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVoucherAllocAtPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default VoucherAllocatedAtPosting value.
    /// </summary>
    /// <returns>
    /// The default VoucherAllocatedAtPosting value.
    /// </returns>
    protected VoucherAllocatedAtPosting determineDefaultVoucherAllocAtPosting()
    {
        return ledgerJournalName.VoucherAllocatedAtPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultWorkflowApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default WorkflowApprovalStatus value.
    /// </summary>
    /// <returns>
    /// The default WorkflowApprovalStatus value.
    /// </returns>
    protected LedgerJournalWFApprovalStatus determineDefaultWorkflowApprovalStatus()
    {
        LedgerJournalWFApprovalStatus workflowApprovalStatus;

        if (ledgerJournalName.checkWorkflowApprovalEnabled(true))
        {
            // Workflow approval is enabled for the journal.
            workflowApprovalStatus = LedgerJournalWFApprovalStatus::NotSubmitted;
        }
        else
        {
            // Workflow approval is disabled for the journal.
            workflowApprovalStatus = LedgerJournalWFApprovalStatus::None;
        }

        return workflowApprovalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCompanyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the company currency code value.
    /// </summary>
    protected void initializeCompanyCurrency()
    {
        if (companyCurrencyCode == '' || companyCurrencyCode != ledgerJournalTable.CurrencyCode)
        {
            companyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger journal name value.
    /// </summary>
    /// <param name = "_throwError">
    /// Determines if an error should be thrown if validation fails; optional.
    /// </param>
    protected void initializeLedgerJournalName(boolean _throwError = true)
    {
        boolean isValid = true;
        if (!ledgerJournalTable.JournalName)
        {
            isValid = checkFailed("@SYS63354");
        }

        if (ledgerJournalName.JournalName != ledgerJournalTable.JournalName)
        {
            ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);
        }

        if (isValid && ledgerJournalName.RecId == 0)
        {
            isValid = checkFailed(strfmt("@SYS22462", ledgerJournalTable.JournalName));
        }

        if (isValid && !this.isJournalNameValidJournalType())
        {
            isValid = checkFailed(strfmt("@SYS114718", ledgerJournalTable.JournalName, ledgerJournalTable.JournalType));
        }

        if (!isValid && _throwError)
        {
            throw error("@SYS98197");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsumerStateTracked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the consumer state is being tracked.
    /// </summary>
    /// <returns>
    ///    true if consumer state is being tracked; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When this class is used in the context of a service, consumer state is tracked. When this
    ///    class is used in the context of an AX client form, consumer state is not tracked. It is sometimes
    ///    important to understand these contexts because the logic that is used to provide default values can
    ///    be different.
    /// </remarks>
    protected boolean isConsumerStateTracked()
    {
        if (!isInteractiveContext)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalNameValidJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the ledger journal name that is assigned to the <c>LedgerJournalTable</c> is valid
    ///    for the journal type.
    /// </summary>
    /// <returns>
    ///    true if the ledger journal name is valid; otherwise, false
    /// </returns>
    protected abstract boolean isJournalNameValidJournalType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a value for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field identifier that corresponds to the field being validated.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = true;

        FieldName fieldName = fieldid2name(tablenum(LedgerJournalTable), _fieldId);
        MethodName methodName = validatePrefix + fieldName;
        SysDictClass sysDictClass = new SysDictClass(classidget(this));

        if (sysDictClass.hasObjectMethod(methodName))
        {
            isValid = sysDictClass.callObject(methodName, this);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ledger journal name value.
    /// </summary>
    /// <returns>
    /// true if the journal name is valid for the current user; otherwise, false.
    /// </returns>
    protected boolean validateJournalName()
    {
        boolean isValid = true;

        this.initializeLedgerJournalName(false);

        // validate user is in group who has access to journal
        if (!ledgerJournalName.BlockUserGroupId)
        {
            isValid = true;
        }
        else if (!UserInfoHelp::userInUserGroup(curuserid(), ledgerJournalName.BlockUserGroupId))
        {
            isValid = checkFailed(strfmt("@SYS117895", ledgerJournalTable.JournalName));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>LedgerJournalTableType</c> class derivative.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    ///    An instance of the <c>LedgerJournalTable</c> table that is used to initialize the
    ///    <c>LedgerJournalTableType</c> derivative.
    /// </param>
    /// <returns>
    ///    A <c>LedgerJournalTableType</c> class derivative.
    /// </returns>
    /// <remarks>
    ///    The <c>LedgerJournalTableType</c> class derivatives are based on the journal type.
    /// </remarks>
    public static LedgerJournalTableType construct(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTableType strategy;
        LedgerJournalOperation operation;
        boolean isInteractiveContext;

        operation = _ledgerJournalTable.RecId == 0 ? LedgerJournalOperation::Create : LedgerJournalOperation::Update;

        if (operation == LedgerJournalOperation::Create)
        {
            switch (_ledgerJournalTable.JournalType)
            {
                case LedgerJournalType::Daily:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable) ? true : false;
                    strategy = LedgerJournalTableType_Daily::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::VendInvoiceRegister:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable) ? true : false;
                    strategy = LedgerJournalTableType_VendInvoiceRegister::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::PurchaseLedger:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable) ? true : false;
                    strategy = LedgerJournalTableType_PurchaseLedger::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::CustPayment:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable);
                    strategy = LedgerJournalTableType_CustPayment::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::Payment:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable);
                    strategy = LedgerJournalTableType_VendPayment::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::Assets:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable) ? true : false;
                    strategy = LedgerJournalTableType_Asset::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                case LedgerJournalType::Cost:
                    isInteractiveContext = FormDataUtil::isFormDataSource(_ledgerJournalTable) ? true : false;
                    strategy = LedgerJournalTableType_Cost::construct(_ledgerJournalTable, operation, isInteractiveContext);

                    break;

                default :
                    break; // return a null strategy
            }
        }
        // else return a null strategy

        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetCheckRequiredAtLineItemEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget funds available check is required for a journal at its line item
    ///    entry time.
    /// </summary>
    /// <param name="_journalType">
    ///    The <c>LedgerJournalType</c> enumeration value for the journal from which the journal line is
    ///    created.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The data area for the legal entity in which the journal is created.
    /// </param>
    /// <returns>
    ///    true if the budget funds available check is required; otherwise, false.
    /// </returns>
    public static boolean isBudgetCheckRequiredAtLineItemEntry(
        LedgerJournalType _journalType,
        DataAreaId _journalLegalEntityDataArea)
    {
        LedgerRecId ledgerRecId;
        boolean isBudgetCheckRequired = false;

        if (BudgetControlConfiguration::isControlConfigured())
        {
            if (BudgetSourceLedgerJournalTrans::isBudgetControlSourceIntegrator(_journalType))
            {
                if (_journalLegalEntityDataArea != '')
                {
                    ledgerRecId = Ledger::primaryLedger(CompanyInfo::current(_journalLegalEntityDataArea));

                    if (Ledger::isLedgerBudgetControlEnabled(ledgerRecId))
                    {
                        switch (_journalType)
                        {
                            case LedgerJournalType::Daily:
                                isBudgetCheckRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::DailyJournal);
                                break;

                            case LedgerJournalType::Allocation:
                                isBudgetCheckRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::AllocationJournal);
                                break;

                            case LedgerJournalType::Assets:
                                isBudgetCheckRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::FixedAssetJournal);
                                break;

                            case LedgerJournalType::Cost:
                                isBudgetCheckRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::ProjectExpenseJournal);
                                break;

                            // AP invoice related journal types
                            case LedgerJournalType::Approval:
                            case LedgerJournalType::PurchaseLedger:
                            case LedgerJournalType::VendInvoiceRegister:
                                isBudgetCheckRequired = BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::VendorInvoiceJournal);
                                break;

                            default:
                                break;
                        }
                    }
                }
            }
        }

        return isBudgetCheckRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetCheckRequiredForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget funds available check is required for a ledger account accounting
    ///    entry on a journal line.
    /// </summary>
    /// <param name="_journalType">
    ///    The <c>LedgerJournalType</c> enumeration value for the journal from which the journal line is
    ///    created.
    /// </param>
    /// <param name="_journalLegalEntityDataArea">
    ///    The <c>DataAreaId</c> type for the legal entity to which the ledger account on a journal line will
    ///    be posted.
    /// </param>
    /// <returns>
    ///    true if the budget funds available check is required; otherwise, false.
    /// </returns>
    public static boolean isBudgetCheckRequiredForJournalType(
        LedgerJournalType _journalType,
        dataAreaId _journalLegalEntityDataArea)
    {
        LedgerRecId ledgerRecId;
        boolean isBudgetCheckRequired = false;

        if (BudgetControlConfiguration::isControlConfigured())
        {
            if (BudgetSourceLedgerJournalTrans::isBudgetControlSourceIntegrator(_journalType))
            {
                if (_journalLegalEntityDataArea != '')
                {
                    ledgerRecId = Ledger::primaryLedger(CompanyInfo::current(_journalLegalEntityDataArea));

                    if (Ledger::isLedgerBudgetControlEnabled(ledgerRecId))
                    {
                        switch (_journalType)
                        {
                            case LedgerJournalType::Daily:
                                isBudgetCheckRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::DailyJournal);
                                break;

                            case LedgerJournalType::Allocation:
                                isBudgetCheckRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::AllocationJournal);
                                break;

                            case LedgerJournalType::Assets:
                                isBudgetCheckRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::FixedAssetJournal);
                                break;

                            case LedgerJournalType::Cost:
                                isBudgetCheckRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::ProjectExpenseJournal);
                                break;

                            // AP invoice related journal types
                            case LedgerJournalType::Approval:
                            case LedgerJournalType::PurchaseLedger:
                            case LedgerJournalType::VendInvoiceRegister:
                                isBudgetCheckRequired = BudgetControlConfiguration::isSourceIntegratorEnabled(
                                    ledgerRecId,
                                    BudgetControlSourceIntegrator::VendorInvoiceJournal);
                                break;

                            default:
                                break;
                        }
                    }
                }
            }
        }

        return isBudgetCheckRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of the field.
    /// </summary>
    /// <param name = "_fieldId">The field ID.</param>
    /// <param name = "_fieldValue">The field value.</param>
    protected void defaultFieldValue(FieldId _fieldId, anytype _fieldValue)
    {
        ledgerJournalTable.(_fieldId) = _fieldValue;
        ledgerJournalTable.fieldState(_fieldId, FieldState::Defaulted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>