<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalCloseReversalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerFiscalCloseReversalController</c> class acts as a controller for the
///    <c>LedgerFiscalCloseReversalService</c> service.
/// </summary>
internal final class LedgerFiscalCloseReversalController extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@GeneralLedger:ReverseFiscalClose";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysOperationController construct(Args _args, SysOperationExecutionMode sysOperationExecutionMode = SysOperationExecutionMode::Asynchronous)
    {
        SysOperationController controller = new LedgerFiscalCloseReversalController(
            classStr(LedgerFiscalCloseReversalService),
            methodStr(LedgerFiscalCloseReversalService, run),
            sysOperationExecutionMode);

        controller.parmArgs(_args);

        LedgerFiscalCloseReversalContract contract = controller.getDataContractObject();

        if (_args.record() is LedgerFiscalCloseHistory)
        {
            LedgerFiscalCloseHistory historyRecord;

            select firstonly LegalEntity, FiscalCalendarYear from historyRecord
                where historyRecord.RecId == _args.record().RecId;

            contract.parmLegalEntity(historyRecord.LegalEntity);
            contract.parmFiscalCalendarYear(historyRecord.FiscalCalendarYear);
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerFiscalCloseReversalController controller = LedgerFiscalCloseReversalController::construct(_args);

        if (controller.prompt())
        {
            controller.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>