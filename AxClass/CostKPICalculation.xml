<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostKPICalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostKPICalculation</c> class calculates costing KPI values.
/// </summary>
public class CostKPICalculation
{
    KPIValue                     accuracy,
                                 turn,
                                 inventoryDays;

    CostAmount                   beginningBalance,
                                 endingBalance;

    CostInventoryStatementModel  inventoryStatementModel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccuracy</Name>
				<Source><![CDATA[
    public KPIValue parmAccuracy()
    {
        return accuracy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTurn</Name>
				<Source><![CDATA[
    public KPIValue parmTurn()
    {
        return turn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryDays</Name>
				<Source><![CDATA[
    public KPIValue parmInventoryDays()
    {
        return inventoryDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostKPICalculation construct()
    {
        return new CostKPICalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of <c>CostKPICalculation</c> class.
    /// </summary>
    /// <param name = "_inventoryStatementModel">An instance of <c>CostInventoryStatementModel</c> class to be initialized.</param>
    public void initialize(CostInventoryStatementModel _inventoryStatementModel)
    {
        inventoryStatementModel = _inventoryStatementModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CostKPICalculation</c> class.
    /// </summary>
    /// <param name = "_inventoryStatementModel">An instance of <c>CostInventoryStatementModel</c> class used as a calculation input.</param>
    /// <returns>An instance of <c>CostKPICalculation</c> class.</returns>
    public static CostKPICalculation newFromParameters(CostInventoryStatementModel _inventoryStatementModel)
    {
        var costKPICalculation = CostKPICalculation::construct();
        costKPICalculation.initialize(_inventoryStatementModel);

        return costKPICalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateKPIValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the turn, accuracy and inventory days KPI values.
    /// </summary>
    public void calculateKPIValues()
    {
        endingBalance = inventoryStatementModel.parmEndingBalance();

        this.calculateAccuracy();
        this.calculateTurn();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccuracy</Name>
				<Source><![CDATA[
    private void calculateAccuracy()
    {
        var countingAmount = inventoryStatementModel.parmDisposedAmountFromCounting();

        if (endingBalance == 0 && countingAmount == 0)
        {
            accuracy = 100;
        }
        else if (abs(countingAmount) < abs(endingBalance))
        {
            accuracy = (1 - abs(countingAmount / endingBalance)) * 100;
        }
        else
        {
            accuracy = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTurn</Name>
				<Source><![CDATA[
    private void calculateTurn()
    {
        var costOfMaterial = (inventoryStatementModel.parmConsumedAmount() + inventoryStatementModel.parmSoldAmount());
        var averageBalance = (inventoryStatementModel.parmBeginningBalance() + endingBalance) / 2;

        turn = averageBalance > 0 && costOfMaterial < 0 ? abs(costOfMaterial) / averageBalance : 0;
        inventoryDays = turn != 0 ? (date2Num(inventoryStatementModel.getToDate()) - date2Num(inventoryStatementModel.getFromDate()) + 1) / turn : 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>