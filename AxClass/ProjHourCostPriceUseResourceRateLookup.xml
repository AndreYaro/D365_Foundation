<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHourCostPriceUseResourceRateLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to lookup hour cost price from <c>ProjHourCostPrice</c> by <c>ProjPriceParameters</c> object
/// for use resource rate is true condition.
/// </summary>
class ProjHourCostPriceUseResourceRateLookup extends ProjPriceLookup
{
    protected ProjPriceParameters priceParameters;
    protected container allowVariableValueFieldsLookupByDefaultValueCon;
    
    protected const ResourceRecId resourceRecIdDefaultValue = 0;
    protected const ResourceCategoryRecId resourceCategoryRecIdDefaultValue = 0;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initResourceRelatedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize parameters realted to resource record identifier if resource record identifier is defined.
    /// </summary>
    protected void initResourceRelatedParameters()
    {
        // If resource is specified, look up resource category by resource record ID.
        if (priceParameters.parmResourceRecId())
        {
            priceParameters.parmResourceCategoryRecId(
                ResourceFacade::getResourceCategory(
                    priceParameters.parmResourceRecId(),
                    priceParameters.parmTransDate()));
        }

        // If resource category value is the default team member, then set it to 0 as ProjHourCostPrice
        // should not allow user to set field ResourceCategory as the default team member.
        if (priceParameters.parmResourceCategoryRecId() == ResourceCategoryFacade::defaultResourceCategory())
        {
            priceParameters.parmResourceCategoryRecId(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablefieldlNumsToParameterValuesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the map of <c>ProjHourCostPrice</c> table fields ID with the <c>ProjPriceParameters</c> class parameter values.
    /// </summary>
    protected void initTablefieldlNumsToParameterValuesMap()
    {
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, TransDate), priceParameters.parmTransDate());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, IsResourceRate), true);
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, Resource), priceParameters.parmResourceRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, ResourceCategory), priceParameters.parmResourceCategoryRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueFieldsToDefaultLookupValuesMap</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the map of <c>ProjHourCostPrice</c> table variable values fields ID with default lookup values.
    /// Default value will be used to lookup if the field is not specified in the lookup fields container precedence list.
    /// </summary>
    protected void initVariableValueFieldsToDefaultLookupValuesMap()
    {
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, Resource), resourceRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, ResourceCategory), resourceCategoryRecIdDefaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFixedValueFieldList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the list of the fixed values lookup fields for <c>ProjHourCostPrice</c> table
    /// when use resource rate is enabled.
    /// These fields value should not change once it's initialize during the entire lookup process.
    /// </summary>
    /// <remarks>Each table field nums specified in this list should not appear in variableValueFieldsToDefaultLookupValuesMap as key.</remarks>
    protected void initFixedValueFieldList()
    {
        fixedValueFieldsList.addEnd(fieldNum(ProjHourCostPrice, TransDate));
        fixedValueFieldsList.addEnd(fieldNum(ProjHourCostPrice, IsResourceRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueLookupFieldsConPrecedenceList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize this <c>ProjHourCostPrice</c> table fields container list which specified the specific query lookup order
    /// when use resource rate is enabled.
    /// Each container includes the combination of variable value fields to lookup. Value to lookup for each field in the container
    /// will be specified by the parameter value in <c>ProjPriceParameters</c> object.
    /// </summary>
    protected void initVariableValueLookupFieldsConPrecedenceList()
    {
        variableValueFieldsLookupConPrecedenceList.addEnd([fieldNum(ProjHourCostPrice, Resource)]);
        variableValueFieldsLookupConPrecedenceList.addEnd([fieldNum(ProjHourCostPrice, ResourceCategory)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllowVariableValueFieldsLookupByDefaultValueContainer</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initial the container which contains the variable value fields which allows to be looked up
    /// even the field has default value.
    /// </summary>
    protected void initAllowVariableValueFieldsLookupByDefaultValueContainer()
    {
        // Adding resource category in this container due to that if a resource is not associated with
        // any role, then it can find a match in table ProjHourCostPrice with by ResourceCategory set to 0.
        allowVariableValueFieldsLookupByDefaultValueCon = [fieldNum(ProjHourCostPrice, ResourceCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>ProjHourCostPriceUseResourceRateLookup</c> object.
    /// </summary>
    /// <param name = "_priceParameters"><c>ProjPriceParameters</c> object for parameters specification.</param>
    /// <returns><c>ProjHourCostPriceLookup</c> object.</returns>
    public static ProjHourCostPriceUseResourceRateLookup construct(ProjPriceParameters _priceParameters)
    {
        ProjHourCostPriceUseResourceRateLookup hourCostPriceLookup = new ProjHourCostPriceUseResourceRateLookup();
        hourCostPriceLookup.priceParameters = _priceParameters;
        hourCostPriceLookup.initResourceRelatedParameters();
        hourCostPriceLookup.initTablefieldlNumsToParameterValuesMap();
        hourCostPriceLookup.initVariableValueFieldsToDefaultLookupValuesMap();
        hourCostPriceLookup.initFixedValueFieldList();
        hourCostPriceLookup.initVariableValueLookupFieldsConPrecedenceList();
        hourCostPriceLookup.initAllowVariableValueFieldsLookupByDefaultValueContainer();
        return hourCostPriceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjHourCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the <c>ProjHourCostPrice</c> table record according to the
    /// <c>ProjPriceParameters</c> class parameters specification.
    /// </summary>
    /// <returns>Hour cost price.</returns>
    public ProjHourCostPrice getProjHourCostPrice()
    {
        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(classStr(ProjHourCostPriceUseResourceRateLookup));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(methodStr(ProjHourCostPriceUseResourceRateLookup, getProjHourCostPrice)))
        {
            return this.findHourCostPriceOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query build date source with the fixed values fields by specific fields.
    /// </summary>
    /// <param name = "_fieldId">Specific field identifier for matching.</param>
    /// <param name = "_qbdsProjHourCostPrice">Query build datasource for the project hour cost price table query filter.</param>
    /// <returns>true if specific field identifier matches the expected value; otherwise, false.</returns>
    protected boolean buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(FieldId _fieldId, QueryBuildDataSource _qbdsProjHourCostPrice)
    {
        boolean buildBySpecificFieldId = false;

        if (_fieldId == fieldNum(ProjHourCostPrice, TransDate))
        {
            buildBySpecificFieldId = true;
            _qbdsProjHourcostPrice.addRange(_fieldId)
                .value(queryRange(
                    dateNull(),
                    fieldNumToParmValueMap.lookup(fieldNum(ProjHourCostPrice, TransDate))));
        }

        return buildBySpecificFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryByLookupFieldsCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to determine whether it should query by the specified lookup fields in the container.
    /// Be default, if any field in the container has default value, it will be return as false.
    /// Unless the field can be found in allowVariableValueFieldsLookupByDefaultValueCon.
    /// </summary>
    /// <param name = "_lookupFieldsCon">Lookup fields container.</param>
    /// <returns>true to query by lookup fields in the container; otherwise, fasle.</returns>
    protected boolean shouldQueryByLookupFieldsCon(container _lookupFieldsCon)
    {
        boolean shouldQueryByLookup = true;

        for (int i = 1; i <= conlen(_lookupFieldsCon); i++)
        {
            FieldId currentfield = conPeek(_lookupFieldsCon, i);

            if (!conFind(allowVariableValueFieldsLookupByDefaultValueCon, currentfield) &&
                fieldNumToParmValueMap.lookup(currentfield) 
                    == variableValueFieldsToDefaultLookupValuesMap.lookup(currentfield))
            {
                return false;
            }
        }

        return shouldQueryByLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByFixedValueLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to build hour cost price query by the fixed values lookup fields.
    /// </summary>
    /// <returns>Hour cost price query.</returns>
    protected Query buildQueryByFixedValueLookupFields()
    {
        Query query = new Query();
        query.firstOnly1(true);
        
        QueryBuildDataSource qbdsProjHourCostPrice = query.addDataSource(targetTableNum);
        qbdsProjHourCostPrice.addSortField(fieldNum(ProjHourCostPrice, TransDate), SortOrder::Descending);
        
        ListEnumerator fixedValuesLookupFieldsListEnum = fixedValueFieldsList.getEnumerator();
        while (fixedValuesLookupFieldsListEnum.moveNext())
        {
            if (!this.buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(
                fixedValuesLookupFieldsListEnum.current(), qbdsProjHourCostPrice))
            {
                qbdsProjHourCostPrice.addRange(fixedValuesLookupFieldsListEnum.current())
                    .value(queryValue(fieldNumToParmValueMap.lookup(fixedValuesLookupFieldsListEnum.current())));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to lookup hour cost price according to the specified query.
    /// </summary>
    /// <param name = "_priceQuery">Specified price lookup query.</param>
    /// <returns>Hour cost price table buffer.</returns>
    protected Common find(Query _priceQuery)
    {
        ProjHourCostPrice hourCostPriceTable;

        QueryRun queryRun = new QueryRun(_priceQuery);

        while (queryRun.next())
        {
            ProjHourCostPrice costPriceBuffer = queryRun.get(targetTableNum) as ProjHourCostPrice;
            hourCostPriceTable.data(costPriceBuffer);
        }

        return hourCostPriceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
        targetTableNum = tableNum(ProjHourCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHourCostPriceOperation</Name>
				<Source><![CDATA[
    private ProjHourCostPrice findHourCostPriceOperation()
    {
        ProjHourCostPrice hourCostPriceTable;
        select firstonly RecId from hourCostPriceTable;

        // Only execute the lookup if the table has at least one record.
        if (hourCostPriceTable)
        {
            hourCostPriceTable.clear();
            // Lookup the resource with use resoruce rate is set to true.
            hourCostPriceTable = this.findPriceLoop() as ProjHourCostPrice;
        }

        return hourCostPriceTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>