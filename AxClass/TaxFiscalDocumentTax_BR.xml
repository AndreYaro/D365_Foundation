<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocumentTax_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>Tax</c> implementation for tax fiscal document feature.
/// </summary>
class TaxFiscalDocumentTax_BR extends Tax
{
    TaxFiscalDocumentCalcTax_BR      fiscalDocumentCalcTax;
    TaxFiscalDocumentLine_BR         fiscalDocLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amount for the document.
    /// </summary>
    /// <returns>
    /// Total tax amount of the document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TaxAmount calc()
    {
        AmountCur               baseAmount;
        AmountCur               lineAmount;
        DiscAmount              lineEndDisc;
        Currency                sourceCurrency;
        TaxFiscalDocument_BR    taxFiscalDocument;

        if (!headingRecId)
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        sourceCurrency = Currency::find(sourceCurrencyCode);

        fiscalDocumentCalcTax.initCursor();

        fiscalDocLine = fiscalDocumentCalcTax.nextLine();
        taxFiscalDocument = fiscalDocLine.taxFiscalDocument();

        while (fiscalDocumentCalcTax.lineExist())
        {
            [baseAmount, lineAmount, lineEndDisc] = fiscalDocumentCalcTax.amounts();

            this.insertLineInInternal(baseAmount,
                                        fiscalDocumentCalcTax.transQty() * -1,
                                        '',
                                        '',
                                        0,
                                        taxFiscalDocument.DefaultDimension,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(fiscalDocumentCalcTax.operationAccount(), taxFiscalDocument.DefaultDimension),
                                        fiscalDocumentCalcTax.operationPosting()
                                        );

            this.prepareTaxWorkTransForTaxTransferPosting(baseAmount);

            fiscalDocLine = fiscalDocumentCalcTax.nextLine();
            taxFiscalDocument = fiscalDocLine.taxFiscalDocument();
        }

        return baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxationCode_BR</Name>
				<Source><![CDATA[
    protected TaxationCodeTable_BR determineTaxationCode_BR(TaxCode _taxCode, TaxOnItem _taxOnItem, TaxGroupData _taxGroupData)
    {
        TaxationCodeTable_BR ret;

        ret = super(_taxCode, _taxOnItem, _taxGroupData);

        if (!ret)
        {
            ret = TaxationCodeTable_BR::findRecId(TaxTable::find(_taxCode).TaxationCodeTable_BR);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class parameters.
    /// </summary>
    /// <param name="_fiscalDocumentCalcTax">
    /// <c>TaxFiscalDocumentCalcTax_BR</c> object to retrieve the parameters to calculate
    /// the taxes from.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Object could not be initialized due to problems in the parameters.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(TaxFiscalDocumentCalcTax_BR   _fiscalDocumentCalcTax)
    {
        boolean                 moreLines;
        TransDate               taxCalculationDate;

        fiscalDocumentCalcTax   = _fiscalDocumentCalcTax;
        taxModuleType           = TaxModuleType::Voucher;

        headingTableId          = fiscalDocumentCalcTax.tableId();
        headingRecId            = fiscalDocumentCalcTax.recID();

        sourceCurrencyCode      = fiscalDocumentCalcTax.currencyCode();

        fiscalDocumentCalcTax.initCursor();
        moreLines = true;

        while (moreLines)
        {
            fiscalDocLine = fiscalDocumentCalcTax.nextLine();

            if (fiscalDocumentCalcTax.lineExist())
            {
                taxDate             = fiscalDocumentCalcTax.invoiceDate();
                taxCalculationDate  = fiscalDocumentCalcTax.invoiceDate();

                this.insertTaxWorkTrans(taxCalculationDate);

                if (! this.checkTaxCodesByLine())
                    throw error("@SYS22772");
            }
            else
                moreLines = false;
        }

        if (! this.checkTaxCodesInTotal())
            throw error("@SYS22772");
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>TmpTaxWorkTrans</c> records with the appropriate
    /// configuration for tax fiscal document.
    /// </summary>
    /// <param name="_taxCalculationDate">
    /// Calculation date of the taxes.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertTaxWorkTrans(TransDate _taxCalculationDate)
    {
        Set taxCodeCombination = new Set(Types::String);

        void insertTrans(TaxCode _taxTable)
        {
            TaxTable taxTable = TaxTable::find(_taxTable);

            taxWorkTrans.HeadingRecId          = headingRecId;
            taxWorkTrans.HeadingTableId        = headingTableId;
            taxWorkTrans.SourceTableId         = this.sourceTableId();
            taxWorkTrans.SourceRecId           = this.sourceRecId();
            taxWorkTrans.Voucher               = voucher;
            taxWorkTrans.TransDate             = taxDate;
            taxWorkTrans.TaxCode               = _taxTable;
            taxWorkTrans.Source                = taxModuleType;
            taxWorkTrans.SourceCurrencyCode    = sourceCurrencyCode;
            taxWorkTrans.TaxDirection          = TaxDirection::TaxTransaction;
            taxWorkTrans.TaxAutogenerated      = NoYes::Yes;
            taxWorkTrans.TaxReports            = NoYes::Yes;
            taxWorkTrans.ExemptTax             = NoYes::No;
            taxWorkTrans.LedgerDimension       = LedgerDimensionFacade::serviceCreateLedgerDimension(fiscalDocLine.getLedgerDimension(), fiscalDocLine.taxFiscalDocument().DefaultDimension);
            taxWorkTrans.CalculationDate       = _taxCalculationDate;
            taxWorkTrans.TaxType_BR            = taxTable.TaxType_BR;
            taxWorkTrans.TaxationCode_BR       = TaxationCodeTable_BR::findRecId(TaxTable::find(taxWorkTrans.TaxCode).TaxationCodeTable_BR).TaxationCode;
            taxWorkTrans.insert();

            taxCodeCombination.add(taxWorkTrans.TaxCode);
        }

        if (BrazilParameters::find().TaxTransferCOFINS)
        {
            insertTrans(BrazilParameters::find().TaxTransferCOFINS);
        }

        if (BrazilParameters::find().TaxTransferPIS)
        {
            insertTrans(BrazilParameters::find().TaxTransferPIS);
        }

        insertTrans(fiscalDocLine.TaxCode);

        update_recordset taxWorkTrans
            setting TaxCodeCombinationId = this.findTaxCodeCombinationId(taxCodeCombination)
            where taxWorkTrans.HeadingRecId == headingRecId
               && taxWorkTrans.HeadingTableId == headingTableId
               && taxWorkTrans.SourceTableId == this.sourceTableId()
               && taxWorkTrans.SourceRecId == this.sourceRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxWorkTransForTaxTransferPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the <c>TmpTaxWorkTrans</c> record before posting the tax fiscal document.
    /// </summary>
    /// <param name="_baseAmount">
    /// Amount to be transferred.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void prepareTaxWorkTransForTaxTransferPosting(AmountCur _baseAmount)
    {
        int sign;
        TaxFiscalDocument_BR taxFiscalDocument = fiscalDocLine.TaxFiscalDocument();
        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();

        if (taxFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
        {
            sign = 1;
        }
        else
        {
            sign = -1;
        }

        while select forupdate taxWorkTrans
            where taxWorkTrans.HeadingRecId == headingRecId
               && taxWorkTrans.HeadingTableId == headingTableId
               && taxWorkTrans.SourceTableId == this.sourceTableId()
               && taxWorkTrans.SourceRecId == this.sourceRecId()
        {
            if (taxWorkTrans.TaxType_BR == TaxType_BR::ICMS)
            {
                taxWorkTrans.TaxAmount          = sign * CurrencyExchangeHelper::mstAmount(_baseAmount, sourceCurrencyCode, fiscalDocumentCalcTax.invoiceDate());
                //Feature Sales Tax Conversion
                if (this.isTaxCurrencyConversionFeatureEnabled())
                {
                    taxWorkTrans.TaxAmountCur       = sign * handler.transCurrencyToTaxCurrency(sourceCurrencyCode, taxWorkTrans.CurrencyCode, _baseAmount,
                                                        taxWorkTrans.ExchRate, taxWorkTrans.ReportingCurrencyExchRate, fiscalDocumentCalcTax.invoiceDate());
                }
                else
                {
                    taxWorkTrans.TaxAmountCur       = sign * CurrencyExchangeHelper::curAmount(sign * taxWorkTrans.TaxAmount, taxWorkTrans.CurrencyCode, fiscalDocumentCalcTax.invoiceDate());
                }
                taxWorkTrans.TaxAmountRep           = sign * handler.transCurrencyToReportingCurrency(sourceCurrencyCode, _baseAmount,
                                                                                                        taxWorkTrans.ReportingCurrencyExchRate, fiscalDocumentCalcTax.invoiceDate());
                taxWorkTrans.SourceTaxAmountCur = sign * _baseAmount;
            }
            else
            {
                taxWorkTrans.TaxAmount          = 0;
                taxWorkTrans.TaxAmountCur       = 0;
                taxWorkTrans.TaxAmountRep       = 0;
                taxWorkTrans.SourceTaxAmountCur = 0;
            }

            taxWorkTrans.TaxBaseAmount  = 0;
            taxWorkTrans.TaxBaseAmountCur = 0;
            taxWorkTrans.TaxBaseAmountRep = 0;
            taxWorkTrans.TaxBaseAmountOrig = 0;
            taxWorkTrans.TaxBaseAmountRaw = 0;
            taxWorkTrans.TaxReductionPct_BR  = 0;
            taxWorkTrans.TaxTributarySubstitution = TaxSubstitutionEnum_BR::None;
            taxWorkTrans.SourceBaseAmountCur = 0;
            taxWorkTrans.SourceBaseAmountCurCalculated = 0;
            taxWorkTrans.SourceBaseAmountCurRaw = 0;
            taxWorkTrans.SourceBaseAmountCurRegulated = 0;
            taxWorkTrans.SourceExemptBaseAmount_BR = 0;
            taxWorkTrans.SourceExemptBaseAmountMST_BR = 0;
            taxWorkTrans.SourceExemptTaxAmount_BR = 0;
            taxWorkTrans.SourceExemptTaxAmountMST_BR = 0;

            taxWorkTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>RecId</c> of the transaction that is to be taxed. For instance, if the tax is called from a <c>FiscalDocLine_BR</c>, this method will return the <c>RecId</c> of that <c>FiscalDocLine_BR</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is eing overridden in this derived class.
    /// </remarks>
    public RecId sourceRecId()
    {
        return fiscalDocLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>TableId</c> of the transaction that is to be taxed. That is, if the tax is called from a <c>FiscalDocLine_BR</c>, this method will return the <c>TableId </c>of the <c>FiscalDocLine_BR</c>.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is being overridden in this derived class.
    /// </remarks>
    public TableId sourceTableId()
    {
        return fiscalDocLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_fiscalDocumentCalcTax">
    /// <c>TaxFiscalDocumentCalcTax_BR</c> to retrieve the parameters to calculate the taxes.
    /// </param>
    /// <returns>
    /// A new instance of <c>TaxFiscalDocumentTax_BR</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxFiscalDocumentTax_BR construct(TaxFiscalDocumentCalcTax_BR _fiscalDocumentCalcTax)
    {
        TaxFiscalDocumentTax_BR    taxfiscalDocument;

        taxfiscalDocument = new TaxFiscalDocumentTax_BR();

        taxfiscalDocument.init(_fiscalDocumentCalcTax);

        return taxfiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWithoutCreditDebitOther</Name>
				<Source><![CDATA[
    protected void calculateWithoutCreditDebitOther()
    {
        TaxFiscalDocument_BR taxFiscalDocument = fiscalDocLine.taxFiscalDocument();
        LogisticsPostalAddress establishmentPostalAddress = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId).postalAddress();
        
        if (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer
            && FBParametersPerState_BR::find(establishmentPostalAddress).EnableDocumentAdjustment)
        {
            taxWorkTrans.SourceOtherBaseAmount_BR = taxWorkTrans.SourceBaseAmountCur;
            taxWorkTrans.SourceOtherBaseTaxAmount_BR = taxWorkTrans.SourceTaxAmountCur;
            
            taxWorkTrans.SourceOtherBaseAmountMST_BR = 0;
            taxWorkTrans.SourceOtherTaxAmountMST_BR = taxWorkTrans.TaxBaseAmount;
            
            if (taxWorkTrans.TaxReductionPct_BR != 0)
            {
                taxWorkTrans.SourceExemptBaseAmount_BR = taxWorkTrans.TaxBaseAmountOrig - taxWorkTrans.SourceBaseAmountCur;
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>