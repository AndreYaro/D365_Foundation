<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceDiscResearchCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPriceDiscResearchCalc</c> class calculates differnces and percent diferences for base prices in Retail extension of trade agreements journal lines.
/// </summary>
class RetailPriceDiscResearchCalc
{
    PriceDiscJournalNum        priceDiscJournalNum;
    TmpRetailPriceDiscAdmTrans tmpRetailPriceDiscAdmTrans;

    #LOCALMACRO.BasisValuesForUpdates
        OrigCurBasePrice,
        OtherGroupPrice,
        InventCost,
        BasePrice,
        SalesPrice
    #ENDMACRO

    #LOCALMACRO.BasisPercentValuesForUpdates
        OtherGroupPricePercent,
        InventCostPercent,
        BasePricePercent,
        SalesPricePercent
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNotPriceDataLines</Name>
				<Source><![CDATA[
    private void addNotPriceDataLines()
    {
        PriceDiscAdmTrans           priceDiscAdmTrans;
        RetailPriceDiscAdmTrans     retailPriceDiscAdmTrans;
        InventTable                 inventTable;
        RetailAdditionalDataStatus  additionalDataStatusDummyLine = RetailAdditionalDataStatus::DummyLine;

        select count(RecId) from priceDiscAdmTrans
            where priceDiscAdmTrans.ItemCode == PriceDiscProductCodeType::Table    &&
                  priceDiscAdmTrans.JournalNum == priceDiscJournalNum;

        if (tmpRetailPriceDiscAdmTrans.RecId < priceDiscAdmTrans.RecId)
        {
            insert_recordset tmpRetailPriceDiscAdmTrans (AdditionalDataStatus, PriceDiscAdmTrans, Product)
                select additionalDataStatusDummyLine, RecId from priceDiscAdmTrans
                    where priceDiscAdmTrans.ItemCode == PriceDiscProductCodeType::Table    &&
                          priceDiscAdmTrans.JournalNum == priceDiscJournalNum
                    join Product from inventTable
                        where inventTable.ItemId == priceDiscAdmTrans.ItemRelation
                    notexists join retailPriceDiscAdmTrans
                        where retailPriceDiscAdmTrans.PriceDiscAdmTrans == priceDiscAdmTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDifferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates differences and percents between the base prices value and the line price.
    /// </summary>
    /// <param name="_filterRecId">
    /// Record id of <c>PriceDiscAdmTrans</c> for filtering set of records for update.
    /// </param>
    /// <remarks>
    /// If _filterRecId equal 0 then all records id updated.
    /// </remarks>
    private void calcDifferences(PriceDiscAdmTransRecId _filterRecId = 0)
    {
        RetailPriceDiscAdmTable retailPriceDiscAdmTable =  RetailPriceDiscAdmTable::findByPriceDiscAdmTable(PriceDiscAdmTable::find(priceDiscJournalNum).RecId);

        #localmacro.UpdateNonZeroPercent
            if (retailPriceDiscAdmTable.Save%1)
            {
                update_recordSet tmpRetailPriceDiscAdmTrans setting
                    %1Percent = tmpRetailPriceDiscAdmTrans.%1Deviation / tmpRetailPriceDiscAdmTrans.%1 * 100
                    where tmpRetailPriceDiscAdmTrans.%1 != 0 &&
                          (!_filterRecId || tmpRetailPriceDiscAdmTrans.PriceDiscAdmTrans == _filterRecId);
            }
        #endmacro

        #localmacro.DeviationCalc
            %1Deviation = tmpRetailPriceDiscAdmTrans.Amount - tmpRetailPriceDiscAdmTrans.%1
        #endmacro

        update_recordSet tmpRetailPriceDiscAdmTrans setting
            #DeviationCalc(SalesPrice),
            #DeviationCalc(BasePrice),
            #DeviationCalc(InventCost),
            #DeviationCalc(OtherGroupPrice)
            where !_filterRecId || tmpRetailPriceDiscAdmTrans.PriceDiscAdmTrans == _filterRecId;

        #UpdateNonZeroPercent(SalesPrice)
        #UpdateNonZeroPercent(BasePrice)
        #UpdateNonZeroPercent(InventCost)
        #UpdateNonZeroPercent(OtherGroupPrice)
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean up <c>TmpRetailPriceDiscAdmTrans</c> content.
    /// </summary>
    private void clearTable()
    {
        delete_from tmpRetailPriceDiscAdmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpRetailPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a tmpTable with differences and base prices for price/discount journal.
    /// </summary>
    /// <returns>
    /// A temporary table that contains differences and base prices for price/discount journal.
    /// </returns>
    public TmpRetailPriceDiscAdmTrans getTmpRetailPriceDiscAdmTrans()
    {
        return tmpRetailPriceDiscAdmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    private void insertRecords(PriceDiscAdmTransRecId _filterRecId = 0)
    {
        PriceDiscAdmTrans           priceDiscAdmTrans;
        RetailPriceDiscAdmTrans     retailPriceDiscAdmTrans;
        real                        realMax = realMax();
        InventTable                 inventTable;

        // We fill percent fields by realMax() and change it by percent if denominator is not zero
        insert_recordset tmpRetailPriceDiscAdmTrans (
            RetailCategoryPriceRuleRecId,
            BasePriceOrigCurrencyCode,
            #BasisValuesForUpdates,
            #BasisPercentValuesForUpdates,
            Amount,
            PriceDiscAdmTrans,
            Product)
            select RetailCategoryPriceRuleRecId,
                   BasePriceOrigCurrencyCode,
                   #BasisValuesForUpdates,
                   realMax,
                   realMax,
                   realMax,
                   realMax
                from retailPriceDiscAdmTrans
                where (!_filterRecId || retailPriceDiscAdmTrans.PriceDiscAdmTrans == _filterRecId)
            join Amount, RecId from priceDiscAdmTrans
            where priceDiscAdmTrans.RecId == retailPriceDiscAdmTrans.PriceDiscAdmTrans &&
                    priceDiscAdmTrans.ItemCode == PriceDiscProductCodeType::Table    &&
                    priceDiscAdmTrans.JournalNum == priceDiscJournalNum
            join Product from inventTable
                where inventTable.ItemId == priceDiscAdmTrans.ItemRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>RetailPriceDiscResearchCalc</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscJournalNum</Name>
				<Source><![CDATA[
    public PriceDiscJournalNum parmPriceDiscJournalNum(PriceDiscJournalNum _priceDiscJournalNum = priceDiscJournalNum)
    {
        priceDiscJournalNum = _priceDiscJournalNum;

        return priceDiscJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates value in a line of the <c>TmpRetailPriceDiscAdmTrans</c>.
    /// </summary>
    /// <param name="_cursor">
    /// A cursor that refers to the line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Given buffer does not allow to find a line of the <c>TmpRetailPriceDiscAdmTrans</c>.
    /// </exception>
    public void recalcRecord(Common _cursor)
    {
        PriceDiscAdmTransRecId      priceDiscAdmTransRecId = RetailPriceDiscResearchCalc::getSourcePriceDiscAdmTransRecId(_cursor);
        RetailPriceDiscAdmTrans     retailPriceDiscAdmTrans;
        PriceDiscAdmTrans           priceDiscAdmTrans;
        real                        realMax = realMax();

        ttsBegin;

        #localmacro.UpdateChangedField
            %1 = retailPriceDiscAdmTrans.%1,
            %1Percent = realMax
        #endmacro

        update_recordSet tmpRetailPriceDiscAdmTrans
            setting
                #UpdateChangedField(SalesPrice),
                #UpdateChangedField(BasePrice),
                #UpdateChangedField(InventCost),
                #UpdateChangedField(OtherGroupPrice),
                OrigCurBasePrice = retailPriceDiscAdmTrans.OrigCurBasePrice,
                Amount = priceDiscAdmTrans.Amount
            where tmpRetailPriceDiscAdmTrans.priceDiscAdmTrans == priceDiscAdmTransRecId
            join #BasisValuesForUpdates from retailPriceDiscAdmTrans
                where retailPriceDiscAdmTrans.PriceDiscAdmTrans == priceDiscAdmTransRecId
            join Amount from priceDiscAdmTrans
            where priceDiscAdmTrans.RecId == priceDiscAdmTransRecId;

        this.calcDifferences(priceDiscAdmTransRecId);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreateTable</Name>
				<Source><![CDATA[
    private void recreateTable()
    {
        ttsBegin;
        this.clearTable();

        this.insertRecords();

        this.calcDifferences();

        this.addNotPriceDataLines();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upadtes a tmpTable with differences and base prices for price/discount journal.
    /// </summary>
    public void refreshTable()
    {
        this.recreateTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upadtes a tmpTable with differences and base prices for price/discount journal.
    /// </summary>
    /// <param name="_priceDiscJournalNum">
    /// The number of price/discount journal.
    /// </param>
    public void updateTable(PriceDiscJournalNum _priceDiscJournalNum)
    {
        if (_priceDiscJournalNum != priceDiscJournalNum)
        {
            priceDiscJournalNum = _priceDiscJournalNum;
            this.recreateTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceDiscResearchCalc construct()
    {
        RetailPriceDiscResearchCalc retailPriceDiscResearchCalc = new RetailPriceDiscResearchCalc();

        retailPriceDiscResearchCalc.clearTable();

        return retailPriceDiscResearchCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataForJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a filled temporary table with differences and base prices for the price/discount journal.
    /// </summary>
    /// <param name="_priceDiscJournalNum">
    /// The number of price/discount journal.
    /// </param>
    /// <returns>
    /// A temporary table that contains differences and base prices for price/discount journal.
    /// </returns>
    public static TmpRetailPriceDiscAdmTrans getDataForJournalNum(PriceDiscJournalNum _priceDiscJournalNum)
    {
        RetailPriceDiscResearchCalc retailPriceDiscResearchCalc = RetailPriceDiscResearchCalc::construct();

        retailPriceDiscResearchCalc.updateTable(_priceDiscJournalNum);

        return retailPriceDiscResearchCalc.getTmpRetailPriceDiscAdmTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourcePriceDiscAdmTransRecId</Name>
				<Source><![CDATA[
    private static PriceDiscAdmTransRecId getSourcePriceDiscAdmTransRecId(Common _cursor)
    {
        PriceDiscAdmTransRecId      priceDiscAdmTransRecId;
        RetailPriceDiscAdmTrans     retailPriceDiscAdmTrans;
        TmpRetailPriceDiscAdmTrans  tmpRetailPriceDiscAdmTrans;

        switch (_cursor.TableId)
        {
            case tableNum(RetailPriceDiscAdmTrans):
                retailPriceDiscAdmTrans = _cursor;
                priceDiscAdmTransRecId = retailPriceDiscAdmTrans.PriceDiscAdmTrans;
                break;
            case tableNum(TmpRetailPriceDiscAdmTrans):
                tmpRetailPriceDiscAdmTrans = _cursor;
                priceDiscAdmTransRecId = tmpRetailPriceDiscAdmTrans.PriceDiscAdmTrans;
                break;
            case tableNum(PriceDiscAdmTrans):
                priceDiscAdmTransRecId = _cursor.RecId;
                break;
            default:
                throw error("@SYS18626");
        }
        return priceDiscAdmTransRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>