<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost_Receive</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost_Receive extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean            ret;
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        ret = ret && rhrmOrderTrans.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMOrderTable     rhrmOrderTable = journalTableData.journalTable();
        RPayHistory        payHistory;

        super(_journalTransData);

        payHistory.HistType             = RPayHistType::Employment;
        payHistory.Number               = rhrmOrderTrans.EmplId;
        payHistory.EndDate              = rhrmOrderTrans.EndDate;
        payHistory.StartDate            = rhrmOrderTrans.StartDate;
        payHistory.HrmOrganizationId    = rhrmOrderTrans.OrganizationId;
        payHistory.OperationType        = RHRMJournalType::Receive;
        payHistory.hrmStaffListRefRecId = rhrmOrderTrans.StaffListRefRecId;
        payHistory.AttachDocDate        = rhrmOrderTrans.AttachDocDate;
        payHistory.AttachDocNum         = rhrmOrderTrans.AttachDocNum;
        payHistory.HrmKindOfWork        = rhrmOrderTrans.KindOfWork;
        payHistory.Reason               = rhrmOrderTable.Reason;
        payHistory.TradeCategory        = rhrmOrderTrans.TradeCategory;
        payHistory.HrmOrderNum          = rhrmOrderTable.OrderNum;
        payHistory.HrmOrderDate         = rhrmOrderTable.TransDate;
        payHistory.HcmTitle             = rhrmOrderTrans.HcmTitle;
        payHistory.MonthProbation       = rhrmOrderTrans.MonthProbation;
        payHistory.OrderTransRecId      = rhrmOrderTrans.RecId;
        payHistory.GradeScaleId         = rhrmOrderTrans.GradeScaleId;
        payHistory.GradeId              = rhrmOrderTrans.GradeId;
        payHistory.TransTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        payHistory.insert();

        this.updateEmplTable(rhrmOrderTrans);

        if (updateTbl && isConfigurationkeyEnabled(configurationkeynum(RPayTbl)))
        {
            this.updateTimesheetEmploy(payHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateEmplTable(RHRMOrderTrans _orderTrans)
    {
        RHRMEmplTable       emplTable = RHRMEmplTable::find(_orderTrans.EmplId, true);

        emplTable.PayEmploymentDate     = _orderTrans.StartDate;
        emplTable.PayResignedDate       = dateNull();
        emplTable.HcmTitle              = _orderTrans.HcmTitle;
        emplTable.PersonnelCategoryId   = RHRMPersonTitleTable::find(_orderTrans.HcmTitle).PersonnelCategoryId;
        emplTable.PayHRMOrganizationId  = _orderTrans.OrganizationId;
        emplTable.TermDate              = _orderTrans.EndDate;
        emplTable.KindOfWork            = _orderTrans.KindOfWork;
        emplTable.LabourContractDate    = _orderTrans.AttachDocDate;
        emplTable.LabourContract        = _orderTrans.AttachDocNum;

        emplTable.doUpdate();

        this.fillPayrollRates(_orderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetEmploy</Name>
				<Source><![CDATA[
    private void updateTimesheetEmploy(RPayHistory _rPayHistory)
    {
        if (updateTbl)
        {
            this.updateTimesheet(_rPayHistory.emplId(),
                                 _rPayHistory.StartDate,
                                 dateEndMth(_rPayHistory.StartDate));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>