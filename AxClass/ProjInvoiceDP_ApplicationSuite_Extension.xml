<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension class of Project invoice report data provider.
/// </summary>
[ExtensionOf(classStr(ProjInvoiceDP))]
public final class ProjInvoiceDP_ApplicationSuite_Extension
{
    internal CustTrans prepaymentCustTransProforma;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printPrepaidCustTransProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the preapyment lines for proforma invoice
    /// </summary>
    protected void printPrepaidCustTransProforma()
    {
        const str strTrue = 'true';
        const str strFalse = 'false';

        next printPrepaidCustTransProforma();

        if (prepaymentCustTransProforma)
        {
            showCustTransOffset = strTrue;
            this.insertIntoProjInvoiceTmp(prepaymentCustTransProforma);
            showCustTransOffset = strFalse;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prepayment amounts.
    /// </summary>
    /// <returns>Prepayment amount of proforma invoice.</returns>
    protected AmountCur prepaidAmountProforma()
    {
        next prepaidAmountProforma();

        SalesTable salesTable;
        ProjProposalItem projProposalItem;
        select RecId, TableId from salesTable
            exists join projProposalItem where salesTable.SalesId == projProposalItem.SalesId
                && projProposalItem.ProposalId == projInvoiceJour.ProposalId;

        prepaymentCustTransProforma = this.getPrepaymentCustTransProforma(salesTable);

        return abs(prepaymentCustTransProforma.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepaymentCustTransProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans</c> record of the prepayment for proforma invoice.
    /// </summary>
    /// <param name = "_record">Source table buffer related to current invoice journal.</param>
    /// <returns><c>CustTrans</c> record of the prepayment.</returns>
    private CustTrans getPrepaymentCustTransProforma(Common _record)
    {
        CustTrans custTransLoc;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        select firstonly custTransLoc
            where custTransLoc.Prepayment == NoYes::Yes
            exists join custTransOpen
                where custTransOpen.RefRecId == custTransLoc.RecId
            exists join specTrans
                where specTrans.RefTableId == custTransOpen.TableId
                    && specTrans.RefRecId == custTransOpen.RecId
                    && specTrans.SpecTableId == _record.TableId
                    && specTrans.SpecRecId == _record.RecId;

        return custTransLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record.
    /// </param>
    protected void populateProjInvoiceLocalizationTmp(Common _cursor, char _lineSign)
    {
        next populateProjInvoiceLocalizationTmp(_cursor, _lineSign);

        if (isProforma)
        {
            projInvoiceLocalizationTmp.PrepaidAmount = prepaymentCustTransProforma.AmountCur;
            projInvoiceLocalizationTmp.RemainAmountToBePaid = projInvoiceJour.InvoiceAmount - abs(prepaymentCustTransProforma.AmountCur);
            projInvoiceLocalizationTmp.PrepaidAmountEuro = projInvoiceJour.amountCur2Euro(projInvoiceLocalizationTmp.PrepaidAmount);
            projInvoiceLocalizationTmp.RemainAmountToBePaidEuro = projInvoiceJour.amountMST2Euro(projInvoiceJour.invoiceAmountMST() - prepaymentCustTransProforma.AmountMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data in the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void populateProjInvoiceTmp(Common _cursor, char _lineSign)
    {
        next populateProjInvoiceTmp(_cursor, _lineSign);

        if (isProforma)
        {
            projInvoiceTmp.PrepaidNetAmount = prepaymentCustTransProforma.prepaidNetAmount();
            projInvoiceTmp.PrepaidTaxAmount = prepaymentCustTransProforma.prepaidTaxAmount();

            projInvoiceTmp.PrepaidAmount = prepaymentCustTransProforma.AmountCur;
            projInvoiceTmp.RemainAmountToBePaid = projInvoiceJour.InvoiceAmount - abs(prepaymentCustTransProforma.AmountCur);
            projInvoiceTmp.PrepaidAmountEuro = projInvoiceJour.amountMST2Euro(prepaymentCustTransProforma.AmountMST);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>