<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanJob_Process</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventMov_KanbanJob_Process extends InventMov_KanbanJob
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the balance sheet account for the movement.
    /// </summary>
    /// <returns>
    /// The ledger account.
    /// </returns>
    /// <remarks>
    /// This method is an override of a base class method. Use production receipt accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();
            
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountBalanceSheet = prodGroup.ReceiptLedgerDimension;
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
            cacheAccountBalanceSheet = prodGroup &&
                                    (prodGroup.ReceiptLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.ReceiptLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceipt));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the operations account for the movement.
    /// </summary>
    /// <returns>
    /// The ledger account.
    /// </returns>
    /// <remarks>
    /// This method overrides the base class method. Use the production receipt offset accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            cacheAccountOperations = prodGroup &&
                                    (prodGroup.ReceiptOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.ReceiptOffsetLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameterForOperations());
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameterForOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameterForOperations()
    {
        InventPostingItemLedgerDimensionParameters searchParameters = this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceiptOffsetAccount, '');

        searchParameters.ItemId = '';
        searchParameters.SearchTable = false;
        searchParameters.SearchGroupId = false;
        searchParameters.SearchCategory = false;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the physical account for the movement.
    /// </summary>
    /// <returns>
    /// The ledger account.
    /// </returns>
    /// <remarks>
    /// This method overrides a base class method. Use the production report finished accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        if (!cacheAccountPhysical)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountPhysical = prodGroup.ReportLedgerDimension;
                }
                else
                {
                    cacheAccountPhysical = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdReportFinished,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
            cacheAccountPhysical = prodGroup &&
                                (prodGroup.ReportLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                    prodGroup.ReportLedgerDimension :
                                    InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinished));
            }
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the batch production date for the movement.
    /// </summary>
    /// <param name="_inventTrans">
    ///    An <c>InventTrans</c> record that is used to determine the batch production date; optional.
    /// </param>
    /// <returns>
    ///    The batch production date.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventBatchProdDate batchProdDate(InventTrans _inventTrans = null)
    {
        InventTransOriginKanbanJobProcess   inventTransOriginKanbanJobProcess;

        if (!_inventTrans)
        {
            select firstonly _inventTrans
                where _inventTrans.InventDimId   == kanbanJob.InventDimId
                   && (_inventTrans.DatePhysical || _inventTrans.DateInvent)
                exists join inventTransOriginKanbanJobProcess
                    where inventTransOriginKanbanJobProcess.KanbanJob         == kanbanJob.RecId
                       && inventTransOriginKanbanJobProcess.InventTransOrigin == _inventTrans.InventTransOrigin;
        }

        if (_inventTrans.DatePhysical)
        {
            return _inventTrans.DatePhysical;
        }

        if (_inventTrans.DateInvent)
        {
            return _inventTrans.DateInvent;
        }

        return this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && kanbanJob.RecId)
        {
            InventTransOriginKanbanJobProcess::writeOriginOwnerRelationship(kanbanJob.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the corresponding owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void deleteOriginOwnerRelationship()
    {
        if (kanbanJob)
        {
            InventTransOriginKanbanJobProcess::deleteOwnerRelationship(kanbanJob.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginKanbanJobProcess::findInventTransOriginId(kanbanJob.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an inventory movement from the original <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class if it is in the database; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventMovement newMovement_Orig()
    {
        return kanbanJob.RecId ? new InventMov_KanbanJob_Process(kanbanJob.orig(),kanbanJob.orig().type()) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the physical offset account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method override a base class method. Use the production report finished offset accounts for
    ///    posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (!cacheOffsetAccountPhysical)
        {
            ProdGroup prodGroup = kanbanJob.kanban().prodGroup();

            cacheOffsetAccountPhysical = prodGroup &&
                                        (prodGroup.ReportOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.ReportOffsetLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinishedOffsetAccount));
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the balance sheet ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production receipt posting type for posting.
    /// </remarks>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical offset ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production report finished posting type for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::ProdReportFinishedOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production receipt offset posting type for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProdReceiptOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production receipt report finished posting type
    ///    for posting.
    /// </remarks>
    public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::ProdReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the serial production date for the movement.
    /// </summary>
    /// <param name="_inventTrans">
    ///    An <c>InventTrans</c> record that is used to determine the batch production date; optional.
    /// </param>
    /// <returns>
    ///    The batch production date.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventSerialProdDate serialProdDate(InventTrans _inventTrans = null)
    {
        InventTransOriginKanbanJobProcess   inventTransOriginKanbanJobProcess;

        if (!_inventTrans)
        {
            select firstonly _inventTrans
                where _inventTrans.InventDimId    == kanbanJob.InventDimId
                  && (_inventTrans.DatePhysical   || _inventTrans.DateInvent)
                exists join inventTransOriginKanbanJobProcess
                    where inventTransOriginKanbanJobProcess.KanbanJob         == kanbanJob.RecId
                       && inventTransOriginKanbanJobProcess.InventTransOrigin == _inventTrans.InventTransOrigin;
        }

        if (_inventTrans.DatePhysical)
        {
            return _inventTrans.DatePhysical;
        }

        if (_inventTrans.DateInvent)
        {
            return _inventTrans.DateInvent;
        }

        return this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction sign for the movement.
    /// </summary>
    /// <returns>
    ///    Always returns one.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the transaction type of the movement.
    /// </summary>
    /// <returns>
    ///    An <c>InventTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventTransType transType()
    {
        return InventTransType::KanbanJobProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_KanbanJob_Process</c> class based on the specified record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The record in the <c>KanbanJob</c> table for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_KanbanJob_Process</c> class.
    /// </returns>
    public static InventMov_KanbanJob_Process newFromKanbanJob(KanbanJob _kanbanJob)
    {
        return new InventMov_KanbanJob_Process(_kanbanJob);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>