<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceVolumeReporting_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>CustInvoiceVolumeReporting_BE</c> class is responsible for generating file and report for Invoice turnover report.
/// </summary>
public class CustInvoiceVolumeReporting_BE extends RunBaseBatch implements BatchRetryable
{
    const ModelName ERModelName = 'Invoice turnover report';
    const str Digits = '0123456789';

    DialogRunbase                       dialog;
    QueryRun                            queryRun;
    FromDate                            fromDate;
    ToDate                              toDate;
    ERFileName                          filename;
    ERFileName                          reportName;
    NoYes                               generateFile;
    NoYes                               generateReport;
    NoYes                               officialDeclaration;
    TaxIntervatDeclarationRef           replacedDeclaration;
    AmountMST                           minAmount;

    ERIFileDestination                  fileDestination;
    ERFormatMappingId                   erBinding;

    DialogGroup                         dialogGroupCriteria;
    DialogGroup                         dialogGroupExportOptions;

    DialogField                         dialogFromDate;
    DialogField                         dialogToDate;
    DialogField                         dialogGenerateFile;
    DialogField                         dialogFilename;
    DialogField                         dialogGenerateReport;
    DialogField                         dialogReportName;
    DialogField                         dialogOfficialDeclaration;
    DialogField                         dialogReplacedDeclaration;
    DialogField                         dialogMinAmount;
    DialogField                         dialogErBinding;

    CustInvoiceVolumeTmp_BE             custInvoiceVolumeTmp_BE;

    #ISOCountryRegionCodes
    #define.CurrentVersion(1)

    #localmacro.CurrentList
        fromDate,
        toDate,
        generatefile,
        filename,
        generateReport,
        reportName,
        officialDeclaration,
        replacedDeclaration,
        minAmount,
        erBinding
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return CustInvoiceVolumeReporting_BE::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogGroupCriteria       = dialog.addGroup("@TaxReportBE:Criteria");
        dialogFromDate            = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        dialogToDate              = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
        dialogMinAmount           = dialog.addFieldValue(extendedTypeStr(AmountMST), minAmount);

        dialogGroupExportOptions  = dialog.addGroup("@SYS55059");

        dialogGenerateFile = dialog.addFieldValue(extendedTypeStr(NoYesId), generateFile, "@SYS100854", "@SYS100855");
        dialogFilename = dialog.addFieldValue(extendedTypeStr(ERFileName), filename);

        dialogGenerateReport = dialog.addFieldValue(extendedTypeStr(NoYesId), generateReport, "@TaxReportBE:GenerateReport");
        dialogReportName = dialog.addFieldValue(extendedTypeStr(ERFileName), reportName, "@TaxReportBE:ReportFileName");

        dialogOfficialDeclaration = dialog.addFieldValue(extendedTypeStr(NoYesId), officialDeclaration, "@TaxReportBE:OfficialDeclaration");
        dialogReplacedDeclaration = dialog.addFieldValue(extendedTypeStr(TaxIntervatDeclarationRef), replacedDeclaration, "@TaxReportBE:ReplacedInvoiceTurnoverDeclaration");

        dialog.addGroup("@AccountsReceivable:ElectronicReporting");
        dialogErBinding     = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), erBinding);
        dialogErBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                             methodStr(CustInvoiceVolumeReporting_BE, erBinding_lookup),
                                                             this);
        dialogErBinding.control().mandatory(true);

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            this.parmFromDate(dialogFromDate.value());
            this.parmToDate(dialogToDate.value());
            this.parmMinAmount(dialogMinAmount.value());

            if (this.parmGenerateFile(dialogGenerateFile.value()))
            {
                this.parmFilename(dialogFilename.value());
            }

            if (this.parmGenerateReport(dialogGenerateReport.value()))
            {
                this.parmReportName(dialogReportName.value());
            }

            this.parmReplacedDeclaration(dialogReplacedDeclaration.value());
            this.parmOfficialDeclaration(dialogOfficialDeclaration.value());
            this.parmERBinding(dialogErBinding.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super(), queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when it calls the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        queryRun = new QueryRun(queryStr(CustInvoiceVolume_BE));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query run, which is used by the query prompt.
    /// </summary>
    /// <returns>
    /// The query run which is used by the query prompt.
    /// </returns>
    /// <remarks>
    /// Do not instantiate the <c>queryRun</c> whenever the method is called. This should be done in the
    /// <c>unpack</c> method and the <c>initParmDefault</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.processReport();
        this.runER(custInvoiceVolumeTmp_BE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper, packedQuery] = packedClass;
                if (packedQuery)
                {
                    queryRun      = new QueryRun(packedQuery);
                }

                if (packedSuper)
                {
                    return super(packedSuper);
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the necessary conditions.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object calling the method.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!fromDate || !toDate)
        {
            ret = checkFailed("@SYS95151");
        }

        if (fromDate && toDate && (fromDate > toDate))
        {
            ret = checkFailed("@SYS120590");
        }

        if (generateFile == NoYes::No && generateReport == NoYes::No)
        {
            ret = checkFailed("@TaxReportBE:NeedToPrintReportOrFile");
        }

        if (generateFile == NoYes::Yes)
        {
            NumberSequenceTable table = NumberSequenceTable::find(TaxParameters::numRefTaxCustInvoiceXML_BE().NumberSequenceId);
            if (!table || strkeep(table.Format, Digits))
            {
                ret = checkFailed(strfmt("@SYS28626", "@SYS125563"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TaxReportBE:InvoiceTurnoverReport";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        fileDestination = ERObjectsFactory::createFileDestinationBrowser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>CustInvoiceVolumeReporting_BE</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CstInvoiceVolumeReporting_BE</c> class.
    /// </returns>
    public static CustInvoiceVolumeReporting_BE construct()
    {
        return new CustInvoiceVolumeReporting_BE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustInvoiceVolumeReporting_BE CustInvoiceVolumeReporting_BE = CustInvoiceVolumeReporting_BE::construct();

        if (CustInvoiceVolumeReporting_BE.prompt())
        {
            CustInvoiceVolumeReporting_BE.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set file destination for report.
    /// </summary>
    /// <param name = "_fileDestination">File destination.</param>
    /// <returns></returns>
    public ERIFileDestination parmFileDestination(ERIFileDestination _fileDestination = fileDestination)
    {
        fileDestination = _fileDestination;
        return fileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set from date for the report.
    /// </summary>
    /// <param name = "_fromDate">From date.</param>
    /// <returns></returns>
    public FromDate parmFromDate(FromDate _fromDate = FromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set to date for the report.
    /// </summary>
    /// <param name = "_toDate">To date.</param>
    /// <returns></returns>
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set generate file parameter for the report.
    /// </summary>
    /// <param name = "_generateFile">Generate file.</param>
    /// <returns></returns>
    public NoYes parmGenerateFile(NoYes _generateFile = generateFile)
    {
        generateFile = _generateFile;
        return generateFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set generate report parameter for the report.
    /// </summary>
    /// <param name = "_generateReport">Generate report.</param>
    /// <returns></returns>
    public NoYes parmGenerateReport(NoYes _generateReport = generateReport)
    {
        generateReport = _generateReport;
        return generateReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set minimum amount for the report.
    /// </summary>
    /// <param name = "_minAmount">Minimum amount.</param>
    /// <returns></returns>
    public AmountMST parmMinAmount(AmountMST _minAmount = minAmount)
    {
        minAmount = _minAmount;
        return minAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set electronic reporting binding for the report.
    /// </summary>
    /// <param name = "_erBinding">Electronic reporting binding.</param>
    /// <returns>ER binding.</returns>
    public RecId parmERBinding(RecId _erBinding = erBinding)
    {
        erBinding = _erBinding;
        return erBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacedDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set replaced declaration for the report.
    /// </summary>
    /// <param name = "_replacedDeclaration">Replaced declaration.</param>
    /// <returns>Replaced declaration.</returns>
    public TaxIntervatDeclarationRef parmReplacedDeclaration(TaxIntervatDeclarationRef _replacedDeclaration = replacedDeclaration)
    {
        replacedDeclaration = _replacedDeclaration;
        return replacedDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set filename for the report.
    /// </summary>
    /// <param name = "_filename">Filename.</param>
    /// <returns>Flename.</returns>
    public ERFileName parmFilename(ERFileName _filename = fileName)
    {
        filename = _filename;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set report name for the report.
    /// </summary>
    /// <param name = "_reportname">Report name.</param>
    /// <returns>Flename.</returns>
    public ERFileName parmReportName(ERFileName _reportName = reportName)
    {
        reportName = _reportName;
        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialDeclaration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set official declaration parameter for report.
    /// </summary>
    /// <param name = "_officialDeclaration">Official declaration.</param>
    /// <returns></returns>
    public NoYes parmOfficialDeclaration(NoYes _officialDeclaration = officialDeclaration)
    {
        officialDeclaration = _officialDeclaration;
        return officialDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextNumberSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns next value in number sequence for declarant reference.
    /// </summary>
    /// <returns>Number sequence id.</returns>
    public Num nextNumberSequenceId()
    {
        return NumberSeq::newGetNum(TaxParameters::numRefTaxCustInvoiceXML_BE(), true).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryEnterpriseNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns company registration number.
    /// </summary>
    /// <returns>Registration number.</returns>
    public TaxRegistrationNumber getPrimaryEnterpriseNumber()
    {
        return companyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs export via ER solution.
    /// </summary>
    /// <param name = "_CustInvoiceVolumeTmp_BE">The <c>CustInvoiceVolumeTmp_BE</c> table record.</param>
    protected void runER(CustInvoiceVolumeTmp_BE _CustInvoiceVolumeTmp_BE)
    {
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding)
            .withFileDestination(fileDestination)
                .withParameter(new ERModelDefinitionDatabaseContext()
                    .addTemporaryTable(_CustInvoiceVolumeTmp_BE))
                        .withCreatingObjectParameter(ERModelName, classStr(CustInvoiceVolumeReporting_BE),  this).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>erBinding_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup to find available report formats.
    /// </summary>
    /// <param name = "_formControl">Control to show search results/</param>
    /// <returns>ER Binding.</returns>
    private Common erBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, ERModelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceVolumeTmp_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>CustInvoiceVolumeTmp_BE</c> temporary table.
    /// </summary>
    private void insertCustInvoiceVolumeTmp_BE(TmpCustVendVolume _tmpCustVendVolume)
    {
        TaxVATNumTable taxVATNumTable;
        LogisticsAddressCountryRegionId countryRegionId;

        select firstOnly CountryRegionId from taxVatNumTable
            where taxVatNumTable.VATNum == _tmpCustVendVolume.VATNum;

        if (taxVatNumTable)
        {
            countryRegionId = taxVatNumTable.CountryRegionId;
        }
        else
        {
            TaxRegistration taxRegistration;
            DirPartyPostalAddressView dirPartyPostalAddressView;
            DirPartyRecId party;
            utcdatetime minDateCheck = DateTimeUtil::minValue();
            utcdatetime maxDateCheck = DateTimeUtil::maxValue();

            if (_tmpCustVendVolume.SalesPurch == SalesPurch::Sales)
            {
                party = CustTable::find(_tmpCustVendVolume.AccountNum).Party;
            }
            else
            {
                party = VendTable::find(_tmpCustVendVolume.AccountNum).Party;
            }

            select firstonly validtimestate(minDateCheck, maxDateCheck) taxRegistration
                order by ValidTo desc
                where taxRegistration.RegistrationNumber == _tmpCustVendVolume.VATNum
            exists join dirPartyPostalAddressView
                where dirPartyPostalAddressView.PartyLocation == taxRegistration.DirPartyLocation
                    && dirPartyPostalAddressView.Party == party;

            countryRegionId = taxRegistration.showCountryId();
        }

        custInvoiceVolumeTmp_BE.vatNum          = strkeep(_tmpCustVendVolume.EnterpriseNumber, Digits);
        custInvoiceVolumeTmp_BE.ISOcode         = LogisticsAddressCountryRegion::find(countryRegionId).ISOcode;
        custInvoiceVolumeTmp_BE.TaxAmount       = _tmpCustVendVolume.TaxAmount;
        custInvoiceVolumeTmp_BE.SalesAmount     = _tmpCustVendVolume.AmountMST;
        custInvoiceVolumeTmp_BE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the data for report.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called at
    ///    runtime. The method should compute data and populate the data tables that will be returned to GER.
    /// </remarks>
    private void processReport()
    {
        TmpCustVendVolume               tmpCustVendVolumeLocal;

        CustVendCalcVolume custCalc = CustInvoiceVolumeReporting_BE::getCustVendCalcVolume(this.queryRun().query(), fromDate, toDate, minAmount);
        TmpCustVendVolume  tmpCustVendVolumeQR = custCalc.accumulateVolume();
        QueryRun           queryRun_CustInvoiceVolume = new QueryRun(this.queryRun().query());
        queryRun_CustInvoiceVolume.setCursor(tmpCustVendVolumeQR);

        while (queryRun_CustInvoiceVolume.next())
        {
            tmpCustVendVolumeLocal = queryRun_CustInvoiceVolume.get(tablenum(TmpCustVendVolume)) as TmpCustVendVolume;
            if (TaxEnterpriseBranchNumber_BE::checkVatObligation(tmpCustVendVolumeLocal.EnterpriseNumber)
				&& (tmpCustVendVolumeLocal.AmountMST >= minAmount || tmpCustVendVolumeLocal.AmountMST < 0))
            {
                if (strkeep(tmpCustVendVolumeLocal.EnterpriseNumber, Digits))
                {
                    this.insertCustInvoiceVolumeTmp_BE(tmpCustVendVolumeLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendCalcVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the query ranges and calls the <c>initCustVendCalcVolume</c> method to retrieve the
    ///    <c>CustVendCalcVolume</c> object.
    /// </summary>
    /// <param name="_query">
    ///    The query object that is used for the report.
    /// </param>
    /// <param name="_fromDate">
    ///    The value of the from date parameter.
    /// </param>
    /// <param name="_toDate">
    ///    The value of the to date parameter.
    /// </param>
    /// <param name="_minAmount">
    ///    The value of the minimum amount parameter.
    /// </param>
    /// <returns>
    ///    An object of the <c>CustVendCalcVolume</c> type.
    /// </returns>
    private static CustVendCalcVolume getCustVendCalcVolume(
        Query       _query,
        FromDate    _fromDate,
        ToDate      _toDate,
        AmountMST   _minAmount)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        int                     currentRange;
        int                     currentDataSource;
        str                     rangeAccount;
        str                     rangeCountryRegion;
        str                     rangeCountryRegionType;
        str                     rangeVATNum;

        for (currentDatasource = _query.dataSourceCount(); currentDatasource > 0; currentDatasource--)
        {
            queryBuildDataSource    = _query.dataSourceNo(currentDatasource);

            for (currentRange = queryBuildDataSource.rangeCount(); currentRange > 0 ; currentRange --)
            {
                queryBuildRange     = queryBuildDataSource.range(currentRange);

                if (tableid2name(queryBuildDataSource.table())                          == tablestr(CustTable)      &&
                    fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(CustTable, AccountNum))
                {
                    rangeAccount = queryBuildRange.value();
                }

                if (tableid2name(queryBuildDataSource.table())                          == tablestr(CustTable)      &&
                    fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()) == fieldstr(CustTable, vatNum))
                {
                    rangeVATNum = queryBuildRange.value();
                }

                if (tableid2name(queryBuildDataSource.table())  == tablestr(TmpCustVendVolume))
                {
                    switch (fieldid2name(queryBuildDataSource.table(), queryBuildRange.field()))
                    {
                        case fieldstr(TmpCustVendVolume, AmountMST):
                            queryBuildRange.value(strfmt('%1.., ..%2', queryValue(_minAmount), 0));
                            break;

                        case fieldstr(TmpCustVendVolume, CountryRegionId):
                            rangeCountryRegion = queryBuildRange.value();
                            break;

                        case fieldstr(TmpCustVendVolume, CountryRegionType):
                            rangeCountryRegionType = queryBuildRange.value();
                            break;
                    }
                }
            }
        }

        return CustInvoiceVolumeReporting_BE::initCustVendCalcVolume(_fromDate, _toDate, rangeAccount, rangeCountryRegion, rangeCountryRegionType, rangeVATNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendCalcVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes values in the <c>CustVendCalcVolume</c> class using the parameters.
    /// </summary>
    /// <param name="_fromDate">
    ///    The value of the from date parameter of the data contract.
    /// </param>
    /// <param name="_toDate">
    ///    The value of the to date parameter of the data contract.
    /// </param>
    /// <param name="_rangeAccount">
    ///    The account range value.
    /// </param>
    /// <param name="_rangeCountryRegion">
    ///    The country and region range value.
    /// </param>
    /// <param name="_rangeCountryRegionType">
    ///    The country and region type range value.
    /// </param>
    /// <param name="_rangeVATNum">
    ///    The <c>rangeVATNum</c> value.
    /// </param>
    /// <returns>
    ///    An object of the <c>CustVendCalcVolume</c> type.
    /// </returns>
    private static CustVendCalcVolume initCustVendCalcVolume(
        FromDate    _fromDate,
        ToDate      _toDate,
        str         _rangeAccount,
        str         _rangeCountryRegion,
        str         _rangeCountryRegionType,
        str         _rangeVATNum)
    {
        str                 dateRange;
        CustVendCalcVolume  custCalc = CustVendCalcVolume::construct(AccountVATNum::VATNum);

        if (_fromDate && _toDate)
        {
            dateRange =  queryRange(_fromDate, _toDate);
        }
        else if (_fromDate)
        {
            dateRange = strfmt('%1', _fromDate);
        }

        else if (_toDate)
        {
            dateRange = strfmt('%1', _toDate);
        }

        custCalc.useCalculationBE(true);
        custCalc.notCheckBillingClassification(true);

        custCalc.custInvoiceQuery(dateRange, _rangeCountryRegionType, _rangeCountryRegion, _rangeAccount, _rangeVATNum);
        custCalc.projInvoiceQuery(dateRange, _rangeCountryRegionType, _rangeCountryRegion, _rangeAccount, _rangeVATNum);

        custCalc.separateTaxAmount(true);
        custCalc.onlyDomesticInvoices(true);
        custCalc.useJournalVATNum(false);

        return custCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>