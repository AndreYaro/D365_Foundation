<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPeriodicCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalPeriodicCopy
{
    LedgerJournalTable  newLedgerJournalTable;
    LedgerJournalTable  oldJournalTable;
    LedgerJournalId     fromLedgerJournalId;
    LedgerJournalNameId fromLedgerJournalName;
    LedgerJournalNameId toLedgerJournalName;
    LedgerJournalId     toLedgerJournalId;
    CopyMove            copyMove;
    TransDate           endDate;
    TransDate           emptyDate;
    Name                toName;
    LedgerJournalEngine ledgerJournalEngine;

    // <GEERU><GCN>
    #ISOCountryRegionCodes
    // </GCN></GEERU>
    // <GEERU>
    NoYes               splitTrans;
    TransDate           dateFrom;
    PeriodUnit          periodIntervalUnit;
    Periods             periodQty,
                        periodIntervalQty;
    // </GEERU>
    Voucher_CN          newVoucher_CN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyOfficials_W</Name>
				<Source><![CDATA[
    private void copyOfficials_W(LedgerJournalTrans _ledgerJournalTrans,
                                 LedgerJournalTrans _ledgerJournalTransNew)
    {
        OfficialsServ_RU  officialServ;
        OfficialsTrans_RU officialsTrans,officialTransNew;

        if (_ledgerJournalTrans.OffSessionId_RU)
        {
            officialServ = new OfficialsServ_RU();
            _ledgerJournalTransNew.OffSessionId_RU = officialServ.newId();
            while select officialsTrans
                where officialsTrans.OffSessionId == _ledgerJournalTrans.OffSessionId_RU
            {
                officialTransNew = officialsTrans.data();
                officialTransNew.OffSessionId = _ledgerJournalTransNew.OffSessionId_RU;
                officialTransNew.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCalcDueDate</Name>
				<Source><![CDATA[
    TransDate journalCalcDueDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        TransDate   dueDate;
        PaymDayId   paymDayId;
        PaymTerm                                paymTerm;
        PaymCalendarProcessor                   paymCalendarProcessor;
        PaymCalendarSourceLedgerJournalTrans    paymCalendarSourceLedgerJournalTrans;
        PaymentDueDateUpdatePolicy              updatePolicy;

        dueDate = _ledgerJournalTrans.Due;

        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust) || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend))
        {
            if ((_ledgerJournalTrans.Due == dateNull()) && (_ledgerJournalTrans.parmLedgerDimension()))
            {
                dueDate = _ledgerJournalTrans.DocumentDate ? _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate;
                if (_ledgerJournalTrans.Invoice)
                {
                    switch (_ledgerJournalTrans.AccountType)
                    {
                        case LedgerJournalACType::Cust :
                            paymDayId = CustTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension()).PaymDayId;
                            break;

                        case LedgerJournalACType::Vend :
                            paymDayId = VendTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension()).PaymDayId;
                            break;

                        default :
                            paymDayId = '';
                    }

                    paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
                    dueDate = paymTerm.due(dueDate, paymDayId);

                    if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                    {
                        switch (_ledgerJournalTrans.AccountType)
                        {
                            case LedgerJournalACType::Cust:
                                updatePolicy = paymTerm.CustomerUpdateDueDate;
                                break;

                            case LedgerJournalACType::Vend:
                                updatePolicy = paymTerm.VendorUpdateDueDate;
                                break;

                            default:
                                updatePolicy = PaymentDueDateUpdatePolicy::NoUpdate;
                                break;
                        }

                        if (updatePolicy != PaymentDueDateUpdatePolicy::NoUpdate)
                        {
                            paymCalendarProcessor = PaymCalendarProcessor::construct();
                            paymCalendarSourceLedgerJournalTrans = PaymCalendarSourceLedgerJournalTrans::newCalendarSource(_ledgerJournalTrans);

                            dueDate = paymCalendarProcessor.adjustDate(dueDate, updatePolicy, paymCalendarSourceLedgerJournalTrans);
                        }
                    }
                }
            }
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSave</Name>
				<Source><![CDATA[
    void journalSave()
    {
        LedgerJournalTrans          ledgerJournalTransOld;
        LedgerJournalTrans_Project  ledgerJournalTransProjOld;
        LedgerJournalTrans_Asset    ledgerJournalTransAssetOld;
        TaxWorkRegulation           taxWorkRegulationOld;
        LedgerJournalTrans          ledgerJournalTransNew;

        // <GEERU>
        LedgerJournalTrans_RCash        ledgerJournalTransOld_RCash;
        LedgerJournalTrans_RAsset       ledgerJournalTransOld_RAsset;
        LedgerJournalTrans_RDeferrals   ledgerJournalTransOld_RDeferrals;
        // </GEERU>
        LedgerJournalTrans_Project  ledgerJournalTransProjNew;
        LedgerJournalTrans_Asset    ledgerJournalTransAssetNew;

        // <GEERU>
        LedgerJournalTrans_RCash        ledgerJournalTransNew_RCash;
        LedgerJournalTrans_RAsset       ledgerJournalTransNew_RAsset;
        LedgerJournalTrans_RDeferrals   ledgerJournalTransNew_RDeferrals;
        // </GEERU>
        TaxWorkRegulation           taxWorkRegulationNew;
        LedgerJournalPeriodicCopyTmp ledgerJournalPeriodicCopyTmp;
        LedgerJournalPeriodicCopyTempDB ledgerJournalPeriodicCopyTempDB;

        // This method is already called within a database transaction from the LedgerJournalSave.run method.
        if (!newLedgerJournalTable)
        {
            newLedgerJournalTable.JournalName = toLedgerJournalName;
            newLedgerJournalTable.JournalNum  = toLedgerJournalId;
            newLedgerJournalTable.Name        = toName;
            newLedgerJournalTable.JournalType = LedgerJournalType::Periodic;
            newLedgerJournalTable.insert();
        }

        while select ledgerJournalTransOld
            where ledgerJournalTransOld.JournalNum == fromLedgerJournalId
        outer join ledgerJournalTransProjOld
            where ledgerJournalTransOld.RecId == ledgerJournalTransProjOld.RefRecId
        outer join ledgerJournalTransAssetOld
            where ledgerJournalTransOld.RecId == ledgerJournalTransAssetOld.RefRecId
        // <GEERU>
        outer join ledgerJournalTransOld_RCash
            where ledgerJournalTransOld.RecId == ledgerJournalTransOld_RCash.RefRecId
        outer join ledgerJournalTransOld_RAsset
            where ledgerJournalTransOld.RecId == ledgerJournalTransOld_RAsset.RefRecId
        outer join ledgerJournalTransOld_RDeferrals
            where ledgerJournalTransOld.RecId == ledgerJournalTransOld_RDeferrals.RefRecId
        // </GEERU>
        {
            ledgerJournalTransNew               = ledgerJournalTransOld.data();
            this.clearUnsaveableFields(ledgerJournalTransNew);
            ledgerJournalTransNew.JournalNum    = toLedgerJournalId;

            ledgerJournalTransNew.LineNum = LedgerJournalTrans::lastLineNum(toLedgerJournalId) + 1;
            ledgerJournalTransNew.doInsert();
            
            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(ledgerJournalTransOld, ledgerJournalTransNew);
            }
            // </GTE>

            this.dispatchPaymentFeePopulate(ledgerJournalPeriodicCopyTempDB, ledgerJournalPeriodicCopyTmp, ledgerJournalTransOld.RecId, ledgerJournalTransNew.RecId);

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(ledgerJournalTransOld.TableId, ledgerJournalTransOld.RecId, ledgerJournalTransNew.TableId, ledgerJournalTransNew.RecId);
            }
            // </GEEPL>

            // Project
            if (ledgerJournalTransProjOld.RecId)
            {
                ledgerJournalTransProjNew           = ledgerJournalTransProjOld.data();
                ledgerJournalTransProjNew.RefRecId  = ledgerJournalTransNew.RecId;
                ledgerJournalTransProjNew.TransId   = ProjCostTrans::newTransId();

                ledgerJournalTransProjNew.doInsert();
            }

            // Asset
            if (ledgerJournalTransAssetOld.RecId)
            {
                ledgerJournalTransAssetNew           = ledgerJournalTransAssetOld.data();
                ledgerJournalTransAssetNew.RefRecId  = ledgerJournalTransNew.RecId;

                ledgerJournalTransAssetNew.doInsert();
            }

            //tax WorkRegulation
            while select taxWorkRegulationOld
                where taxWorkRegulationOld.HeadingRecId == ledgerJournalTransOld.RecId &&
                        taxWorkRegulationOld.HeadingTableId == ledgerJournalTransOld.TableId
            {
                taxWorkRegulationNew = taxWorkRegulationOld.data();
                taxWorkRegulationNew.HeadingTableId = ledgerJournalTransNew.TableId;
                taxWorkRegulationNew.HeadingRecId = ledgerJournalTransNew.RecId;
                taxWorkRegulationNew.doInsert();
            }

            // <GEERU>
            if (ledgerJournalTransOld_RCash.RecId)
            {
                ledgerJournalTransNew_RCash           = ledgerJournalTransOld_RCash.data();
                ledgerJournalTransNew_RCash.RefRecId  = ledgerJournalTransNew.RecId;

                this.copyOfficials_W(ledgerJournalTransOld, ledgerJournalTransNew);

                ledgerJournalTransNew_RCash.doInsert();
            }

            if (ledgerJournalTransOld_RAsset.RecId)
            {
                ledgerJournalTransNew_RAsset           = ledgerJournalTransOld_RAsset.data();
                ledgerJournalTransNew_RAsset.RefRecId  = ledgerJournalTransNew.RecId;
  
                ledgerJournalTransNew_RAsset.doInsert();
            }

            if (ledgerJournalTransOld_RDeferrals.RecId)
            {
                ledgerJournalTransNew_RDeferrals           = ledgerJournalTransOld_RDeferrals.data();
                ledgerJournalTransNew_RDeferrals.RefRecId  = ledgerJournalTransNew.RecId;

                ledgerJournalTransNew_RDeferrals.doInsert();
            }
            // </GEERU>
            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
            {
                this.splitLedgerJournaTrans_W(ledgerJournalTransNew);
            }
            // </GEEU>

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                LedgerJournalTransTaxExtensionIN LedgerJournalTransTaxExtensionINOld =
                    ledgerJournalTransOld.ledgerJournalTransTaxExtensionIN();
                if (LedgerJournalTransTaxExtensionINOld.RecId)
                {
                    LedgerJournalTransTaxExtensionIN LedgerJournalTransTaxExtensionINNew =
                        LedgerJournalTransTaxExtensionINOld.data();
                    LedgerJournalTransTaxExtensionINNew.LedgerJournalTrans =
                        ledgerJournalTransNew.RecId;
            
                    // No need to calculate tax at this point as this method
                    // is only called when saving periodic journal.
                    LedgerJournalTransTaxExtensionINNew.doInsert();
                }
            }
            // </GIN>

            this.copyLedgerJournalTransExtensionTH(ledgerJournalTransOld, ledgerJournalTransNew);

            if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(newLedgerJournalTable.JournalType))
            {
                LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(ledgerJournalTransOld, ledgerJournalTransNew, true);
            }
        }
        this.dispatchPaymentFeeCopy(ledgerJournalPeriodicCopyTempDB, ledgerJournalPeriodicCopyTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLedgerJournalTransExtensionTH</Name>
				<Source><![CDATA[
    private void copyLedgerJournalTransExtensionTH(LedgerJournalTrans _ledgerJournalTransOld, LedgerJournalTrans _ledgerJournalTransNew)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            LedgerJournalTransExtensionTH ledgerJournalTransExtensionTHOld = _ledgerJournalTransOld.ledgerJournalTransExtensionTH();

            if (ledgerJournalTransExtensionTHOld.RecId)
            {
                LedgerJournalTransExtensionTH ledgerJournalTransExtensionTHNew = ledgerJournalTransExtensionTHOld.data();
                ledgerJournalTransExtensionTHNew.LedgerJournalTrans = _ledgerJournalTransNew.RecId;
                ledgerJournalTransExtensionTHNew.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableCopy</Name>
				<Source><![CDATA[
    void journalTableCopy()
    {
        if (! toLedgerJournalId)
        {
            select firstonly forupdate oldJournalTable
                where oldJournalTable.JournalNum == fromLedgerJournalId;

            oldJournalTable.JournalNum  = toLedgerJournalId;
            oldJournalTable.JournalName = toLedgerJournalName;

            switch (copyMove)
            {
                case CopyMove::Move :
                    oldJournalTable.update();
                    break;

                case CopyMove::Copy :
                    oldJournalTable.insert();
                    break;
            }
        }

        this.journalVoucherCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransCopy</Name>
				<Source><![CDATA[
    void journalTransCopy(Voucher       _oldVoucher,
                          Voucher       _newVoucher,
                          TransDate     _oldTransDate,
                          TransDate     _newTransDate,
                          PeriodUnit    _freqCode,
                          Freq          _freqValue)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTrans  ledgerJournalTransNew;
        LedgerJournalTrans_Project  ledgerJournalTransProj;
        LedgerJournalTrans_Project  ledgerJournalTransProjNew;
        LedgerJournalTrans_Asset    ledgerJournalTransAsset;
        LedgerJournalTrans_Asset    ledgerJournalTransAssetNew;
        TaxWorkRegulation           taxWorkRegulation;
        TaxWorkRegulation           taxWorkRegulationNew;
        LedgerJournalPeriodicCopyTmp ledgerJournalPeriodicCopyTmp;
        LedgerJournalPeriodicCopyTempDB ledgerJournalPeriodicCopyTempDB;

        // <GEERU>
        LedgerJournalTrans_RAsset       ledgerJournalTrans_RAsset;
        LedgerJournalTrans_RAsset       ledgerJournalTransNew_RAsset;
        LedgerJournalTrans_RDeferrals   ledgerJournalTrans_RDeferrals;
        LedgerJournalTrans_RDeferrals   ledgerJournalTransNew_RDeferrals;
        LedgerJournalTrans_RCash        ledgerJournalTrans_RCash;
        LedgerJournalTrans_RCash        ledgerJournalTransNew_RCash;
        // </GEERU>

        QueryRun queryRun = new QueryRun(this.buildLedgerJournalTransQuery(
            _oldVoucher,
            _newVoucher,
            _oldTransDate,
            _newTransDate,
            _freqCode,
            _freqValue));

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
            ledgerJournalTransProj = queryRun.get(tableNum(LedgerJournalTrans_Project));
            ledgerJournalTransAsset = queryRun.get(tableNum(LedgerJournalTrans_Asset));
            ledgerJournalTrans_RAsset = queryRun.get(tableNum(LedgerJournalTrans_RAsset));
            ledgerJournalTrans_RDeferrals = queryRun.get(tableNum(LedgerJournalTrans_RDeferrals));
            ledgerJournalTrans_RCash = queryRun.get(tableNum(LedgerJournalTrans_RCash));

            if (!this.shouldCopyLedgerJournalTrans(ledgerJournalTrans))
            {
                continue;
            }

            ledgerJournalTransNew = this.initNewLedgerJournalTrans(ledgerJournalTrans, _newTransDate, _newVoucher);

            switch (copyMove)
            {
                case CopyMove::Move :
                    ledgerJournalTransNew.doUpdate();
                    break;
                case CopyMove::Copy :
                    ledgerJournalTable = ledgerJournalTransNew.ledgerJournalTable();
                    ledgerJournalTransNew.ReverseEntry = ledgerJournalTable.ReverseEntry;
                    ledgerJournalTransNew.ReverseDate = ledgerJournalTable.ReverseDate;
                    ledgerJournalTransNew.doInsert();

                    this.dispatchPaymentFeePopulate(ledgerJournalPeriodicCopyTempDB, ledgerJournalPeriodicCopyTmp, ledgerJournalTrans.RecId, ledgerJournalTransNew.RecId);

                    // <GIN>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        LedgerJournalTransTaxExtensionIN::copyLedgerJournalTransTaxExtensionIN(ledgerJournalTrans, ledgerJournalTransNew);
                    }
                    // </GIN>

                    this.copyLedgerJournalTransExtensionTH(ledgerJournalTrans, ledgerJournalTransNew);

                    if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTable.JournalType))
                    {
                        LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(ledgerJournalTrans, ledgerJournalTransNew, true);
                    }

                    // <GEEPL>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                    {
                        TaxServiceTariff::insertTaxServiceTariffForNewParent(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, ledgerJournalTransNew.TableId, ledgerJournalTransNew.RecId);
                    }
                    // </GEEPL>

                    // Project
                    if (ledgerJournalTransProj.RecId)
                    {
                        ledgerJournalTransProjNew               = ledgerJournalTransProj.data();
                        ledgerJournalTransProjNew.RefRecId      = ledgerJournalTransNew.RecId;
                        ledgerJournalTransProjNew.ProjTransDate = _newTransDate;

                        ledgerJournalTransProjNew.TransId   = ProjCostTrans::newTransId();

                        ledgerJournalTransProjNew.doInsert();
                    }
                    // FixedAssets
                    if (ledgerJournalTransAsset.RecId)
                    {
                        ledgerJournalTransAssetNew           = ledgerJournalTransAsset.data();
                        ledgerJournalTransAssetNew.RefRecId  = ledgerJournalTransNew.RecId;

                        ledgerJournalTransAssetNew.doInsert();
                    }

                    // Tax adjustments
                    while select taxWorkRegulation
                        where   taxWorkRegulation.HeadingRecId      ==  ledgerJournalTrans.RecId &&
                                taxWorkRegulation.HeadingTableId    ==  ledgerJournalTrans.TableId
                    {
                        taxWorkRegulationNew = taxWorkRegulation.data();
                        taxWorkRegulationNew.HeadingTableId = ledgerJournalTransNew.TableId;
                        taxWorkRegulationNew.HeadingRecId = ledgerJournalTransNew.RecId;
                        taxWorkRegulationNew.doInsert();
                    }

                    // <GEERU>
                    if (ledgerJournalTrans_RAsset.RecId)
                    {
                        ledgerJournalTransNew_RAsset          = ledgerJournalTrans_RAsset.data();
                        ledgerJournalTransNew_RAsset.RefRecId = ledgerJournalTransNew.RecId;
                        ledgerJournalTransNew_RAsset.doInsert();
                    }
                    if (ledgerJournalTrans_RDeferrals.RecId)
                    {
                        ledgerJournalTransNew_RDeferrals          = ledgerJournalTrans_RDeferrals.data();
                        ledgerJournalTransNew_RDeferrals.RefRecId = ledgerJournalTransNew.RecId;
                        ledgerJournalTransNew_RDeferrals.doInsert();
                    }
                    if (ledgerJournalTrans_RCash.RecId)
                    {
                        ledgerJournalTransNew_RCash             = ledgerJournalTrans_RCash.data();
                        ledgerJournalTransNew_RCash.RefRecId    = ledgerJournalTransNew.RecId;
                        ledgerJournalTransNew_RCash.CashDocId   = '';
                        ledgerJournalTransNew_RCash.TransStatus = RCashTransStatus::None;

                        ledgerJournalTransNew_RCash.doInsert();
                    }

                    this.copyOfficials_W(ledgerJournalTrans, ledgerJournalTransNew);
                    // </GEERU>
                    break;
            }
        }

        if (copyMove == CopyMove::Copy)
        {
            this.dispatchPaymentFeeCopy(ledgerJournalPeriodicCopyTempDB, ledgerJournalPeriodicCopyTmp);
        }

        if (ledgerJournalTransNew != null)
        {
            // A journal line for a voucher is moved or copied from periodic journal.
            // Use one of the journal lines to check budget for the new voucher.
            ledgerJournalTransNew.checkBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLedgerJournalTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for selecting records from <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name = "_oldVoucher">
    /// The old voucher value.
    /// </param>
    /// <param name = "_newVoucher">
    /// The new voucher value.
    /// </param>
    /// <param name = "_oldTransDate">
    /// The old transaction date value.
    /// </param>
    /// <param name = "_newTransDate">
    /// The new transaction date value.
    /// </param>
    /// <param name = "_freqCode">
    /// The period unit.
    /// </param>
    /// <param name = "_freqValue">
    /// The number of units.
    /// </param>
    /// <returns>
    /// The query object with the selected fields.
    /// </returns>
    [Wrappable(true)]
    protected final Query buildLedgerJournalTransQuery(
        Voucher _oldVoucher,
        Voucher _newVoucher,
        TransDate _oldTransDate,
        TransDate _newTransDate,
        PeriodUnit _freqCode,
        Freq _freqValue)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.update(true);
        qbdsLedgerJournalTrans.addSortField(fieldNum(LedgerJournalTrans, JournalNum), SortOrder::Ascending);
        qbdsLedgerJournalTrans.addSortField(fieldNum(LedgerJournalTrans, Voucher), SortOrder::Ascending);
        qbdsLedgerJournalTrans.addSortField(fieldNum(LedgerJournalTrans, LineNum), SortOrder::Ascending);
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, JournalNum)).value(queryValue(fromLedgerJournalId));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, Voucher)).value(queryValue(_oldVoucher));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, TransDate)).value(queryValue(_oldTransDate));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, FreqCode)).value(queryValue(_freqCode));
        qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, FreqValue)).value(queryValue(_freqValue));

        QueryBuildDataSource qbdsLedgerJournalTransProject = qbdsLedgerJournalTrans.addDataSource(tableNum(LedgerJournalTrans_Project));
        qbdsLedgerJournalTransProject.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_Project, RefRecId), qbdsLedgerJournalTrans.name());
        qbdsLedgerJournalTransProject.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource qbdsLedgerJournalTransAsset = qbdsLedgerJournalTransProject.addDataSource(tableNum(LedgerJournalTrans_Asset));
        qbdsLedgerJournalTransAsset.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_Asset, RefRecId), qbdsLedgerJournalTrans.name());
        qbdsLedgerJournalTransAsset.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource qbdsLedgerJournalTransRAsset = qbdsLedgerJournalTransAsset.addDataSource(tableNum(LedgerJournalTrans_RAsset));
        qbdsLedgerJournalTransRAsset.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_RAsset, RefRecId), qbdsLedgerJournalTrans.name());
        qbdsLedgerJournalTransRAsset.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource qbdsLedgerJournalTransRDeferrals = qbdsLedgerJournalTransRAsset.addDataSource(tableNum(LedgerJournalTrans_RDeferrals));
        qbdsLedgerJournalTransRDeferrals.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_RDeferrals, RefRecId), qbdsLedgerJournalTrans.name());
        qbdsLedgerJournalTransRDeferrals.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource qbdsLedgerJournalTransRCash = qbdsLedgerJournalTransRDeferrals.addDataSource(tableNum(LedgerJournalTrans_RCash));
        qbdsLedgerJournalTransRCash.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_RCash, RefRecId), qbdsLedgerJournalTrans.name());
        qbdsLedgerJournalTransRCash.joinMode(JoinMode::OuterJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to copy ledger journal lines.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    /// Returns true to copy ledger journal lines; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean shouldCopyLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name = "_newTransDate">
    /// The new Trans Date value.
    /// </param>
    /// <param name = "_newVoucher">
    /// The new Voucher value.
    /// </param>
    /// <returns>
    /// The new LedgerJournalTrans record.
    /// </returns>
    protected LedgerJournalTrans initNewLedgerJournalTrans(
        LedgerJournalTrans  _ledgerJournalTrans,
        TransDate _newTransDate,
        Voucher  _newVoucher)
    {
        // <GCN>
        LedgerChineseVoucherEnabled_CN  chineseVoucher_CN = LedgerParameters::isChineseVoucher_CN();
        // </GCN>

        LedgerJournalTrans  ledgerJournalTransNew = _ledgerJournalTrans.data();
        ledgerJournalTransNew.JournalNum    = toLedgerJournalId;
        ledgerJournalTransNew.Voucher       = _newVoucher;

        if (_ledgerJournalTrans.ReasonRefRecID)
        {
            // The existing reason reference can't be used as it can unintentionally impact other records, create a
            // new reference with the same reason code.
            ledgerJournalTransNew.ReasonRefRecID = 0;

            ReasonTableRef reasonTableRef;

            select Reason, ReasonComment from reasonTableRef
                    where reasonTableRef.RecId == _ledgerJournalTrans.ReasonRefRecID;
                
            if (reasonTableRef)
            {
                ledgerJournalTransNew.editReasonCode(true, reasonTableRef.Reason);
            }
        }

        // <GCN>
        if (chineseVoucher_CN)
        {
            ledgerJournalTransNew.Voucher_CN    = newVoucher_CN;
        }
        // </GCN>
        ledgerJournalTransNew.TransDate     = _newTransDate;
        if (!ledgerJournalTransNew.AcknowledgementDate)
        {
            ledgerJournalTransNew.AcknowledgementDate = _newTransDate;
        }
        ledgerJournalTransNew.Approved      = _ledgerJournalTrans.Approved;
        ledgerJournalTransNew.Approver      = HcmWorker::userId2Worker(curuserid());
        ledgerJournalEngine.paymentModified(ledgerJournalTransNew);
        ledgerJournalEngine.currencyModified(ledgerJournalTransNew);

        if (!ledgerJournalTransNew.parmOffsetLedgerDimension() || !ledgerJournalTransNew.DocumentNum)
        {
            LedgerJournalTable ledgerJournalTable = ledgerJournalTransNew.ledgerJournalTable();
            if (!ledgerJournalTransNew.parmOffsetLedgerDimension())
            {
                if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    ledgerJournalTransNew.setOffsetLedgerDimension(
                            ledgerJournalTable,
                            ledgerJournalTable.OffsetAccountType,
                            ledgerJournalTransNew.getOffsetLedgerDimensionForLedgerType(
                                ledgerJournalTable.parmOffsetLedgerDimension(), ledgerJournalTransNew.getOffsetCompany()));
                }
                else
                {
                    ledgerJournalTransNew.setOffsetLedgerDimension(
                            ledgerJournalTable,
                            ledgerJournalTable.OffsetAccountType,
                            ledgerJournalTable.parmOffsetLedgerDimension());
                }
            }
            if (!ledgerJournalTransNew.DocumentNum)
            {
                ledgerJournalTransNew.DocumentNum = ledgerJournalTable.DocumentNum;
            }
        }

        ledgerJournalTransNew.Due = this.journalCalcDueDate(ledgerJournalTransNew);

        // <GEEU>
        ledgerJournalTransNew.modifyVatDueDate_W();
        // </GEEU>

        // Ensure there are no duplicate lineNum values.
        ledgerJournalTransNew.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTransNew.JournalNum) + 1;

        return ledgerJournalTransNew;

    }

]]></Source>
			</Method>
			<Method>
				<Name>journalVoucherCopy</Name>
				<Source><![CDATA[
    void journalVoucherCopy()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTrans  ledgerJournalTrans_Local;
        Voucher             oldVoucher;
        Voucher             newVoucher;
        boolean             moreRecords;
        TransDate           transDate;
        boolean             recordsTransferred;
        boolean             generateNewVoucherNum;

        // <GCN>
        boolean             generateNewVoucherNum_CN;
        LedgerChineseVoucherEnabled_CN  chineseVoucher_CN;
        // </GCN>
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        NewVoucher          newVoucherLocal;
        boolean             isVoucherAllocatedAtPostingLocal;

        // <GCN>
        chineseVoucher_CN = LedgerParameters::isChineseVoucher_CN();
        // </GCN>

        ledgerJournalEngine = new LedgerJournalEngine(null);
        ledgerJournalEngine.newJournalActive(LedgerJournalTable::find(toLedgerJournalId), false);

        isVoucherAllocatedAtPostingLocal = ledgerJournalEngine.ledgerJournalTable().ledgerJournalName().VoucherAllocatedAtPosting;

        while select ledgerJournalTrans
            group by JournalNum, Voucher, TransDate, FreqCode, FreqValue
                // <GCN>
                ,
                LedgerVoucherType_CN
                // </GCN>
            where ledgerJournalTrans.JournalNum == fromLedgerJournalId
        {
            oldVoucher  = ledgerJournalTrans.Voucher;
            moreRecords = true;

            if (!endDate)
            {
                endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            if (ledgerJournalTrans.TransDate)
            {
                transDate = ledgerJournalTrans.TransDate;
            }
            else
            {
                if (emptyDate)
                {
                    transDate = emptyDate;
                }
                else
                {
                    transDate = endDate;
                }
            }
            recordsTransferred = false;

            while (transDate <= endDate && moreRecords)
            {
                // <GEERU>
                if ((countryRegion_RU && (ledgerJournalTrans.FreqValue == 0 || splitTrans)) ||
                    (!countryRegion_RU && ledgerJournalTrans.FreqValue == 0))
                {
                    moreRecords = false;
                }
                // </GEERU>

                generateNewVoucherNum = true;

                // <GCN>
                if (chineseVoucher_CN)
                {
                    generateNewVoucherNum_CN = !isVoucherAllocatedAtPostingLocal;
                }

                // </GCN>
                newVoucherLocal = ledgerJournalEngine.ledgerJournalTable().ledgerJournalName().NewVoucher;
                if (newVoucherLocal == NewVoucher::OneVoucher || newVoucherLocal == NewVoucher::Manually)
                {
                    select firstonly Voucher from ledgerJournalTrans_Local where ledgerJournalTrans_Local.JournalNum == toLedgerJournalId;
                    if (ledgerJournalTrans_Local.Voucher)
                    {
                        newVoucher = ledgerJournalTrans_Local.Voucher;
                        generateNewVoucherNum = false;
                    }

                    // <GCN>
                    if (chineseVoucher_CN
                        && ledgerJournalTrans_Local.Voucher_CN)
                    {
                        newVoucher_CN            = ledgerJournalTrans_Local.Voucher_CN;
                        generateNewVoucherNum_CN = false;
                    }
                    // </GCN>
                }

                if (generateNewVoucherNum)
                {
                    newVoucher = new JournalVoucherNum(JournalTableData::newTable(newLedgerJournalTable)).getNew(false);
                }

                // <GCN>
                if (chineseVoucher_CN
                    && generateNewVoucherNum_CN
                    && ledgerJournalTrans.LedgerVoucherType_CN)
                {
                    newVoucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(
                    LedgerVoucherType_CN::find(ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable, transDate).voucher();
                }
                // </GCN>

                this.journalTransCopy(oldVoucher,
                                      newVoucher,
                                      ledgerJournalTrans.TransDate,
                                      transDate,
                                      ledgerJournalTrans.FreqCode,
                                      ledgerJournalTrans.FreqValue);

                if (copyMove == CopyMove::Move)
                {
                    moreRecords = false;
                }
                else
                {
                    recordsTransferred = true;
                }

                transDate = this.newDate(ledgerJournalTrans, transDate);
            }

            this.updateLedgerJournalTrans(ledgerJournalTrans, recordsTransferred, transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table buffer that is the journal line to update.
    /// </param>
    /// <param name = "_recordsTransferred">
    /// A boolean value indicating transferred records.
    /// </param>
    /// <param name = "_transDate">
    /// The Transaction date.
    /// </param>
    [Wrappable(true)]
    protected final void updateLedgerJournalTrans(
        LedgerJournalTrans _ledgerJournalTrans,
        boolean _recordsTransferred,
        TransDate _transDate)
    {
        LedgerJournalTrans ledgerJournalTrans_Orig;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        // <GEERU>
        if ((countryRegion_RU && (copyMove == CopyMove::Copy && _recordsTransferred && ! splitTrans))
            || (!countryRegion_RU && (copyMove == CopyMove::Copy && _recordsTransferred)))
        // </GEERU>
        {
            while select forupdate ledgerJournalTrans_Orig
                where ledgerJournalTrans_Orig.JournalNum == _ledgerJournalTrans.JournalNum &&
                      ledgerJournalTrans_Orig.Voucher    == _ledgerJournalTrans.Voucher    &&
                      ledgerJournalTrans_Orig.TransDate  == _ledgerJournalTrans.TransDate  &&
                      ledgerJournalTrans_Orig.FreqCode   == _ledgerJournalTrans.FreqCode   &&
                      ledgerJournalTrans_Orig.FreqValue  == _ledgerJournalTrans.FreqValue
            {
                this.updateLedgerJournalTrans_TransDate(ledgerJournalTrans_Orig, _transDate, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans_TransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrappable function for CoC that updates <c>LedgerJournalTrans</c> if _shouldUpdate parameter is true.
    /// </summary>
    /// <param name = "_ledgerJournalTrans_Orig">Record to update</param>
    /// <param name = "_transDate">Trans date</param>
    /// <param name = "_shouldUpdate">If true then update; else skip updating.</param>
    protected void updateLedgerJournalTrans_TransDate(LedgerJournalTrans _ledgerJournalTrans_Orig, TransDate _transDate, boolean _shouldUpdate)
    {
        if (_shouldUpdate)
        {
            if (_ledgerJournalTrans_Orig.TransDate)
            {
                _ledgerJournalTrans_Orig.TransDate = _transDate;
            }

            _ledgerJournalTrans_Orig.LastTransferred = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            _ledgerJournalTrans_Orig.doUpdate();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalPeriodicCopy</c> object.
    /// </summary>
    /// <param name = "_toLedgerJournalName">The journal name to copy to.</param>
    /// <param name = "_toLedgerJournalId">The journal id to copy to. </param>
    /// <param name = "_copyMove">Whether to copy or move the journal.</param>
    /// <param name = "_fromLedgerJournalName">The journal name to copy from.</param>
    /// <param name = "_fromLedgerJournalId">The journal id to copy from</param>
    /// <param name = "_endDate">The end date.</param>
    /// <param name = "_emptyDate">The empty date.</param>
    /// <param name = "_name">The name.</param>
    /// <returns>A instance of a new <c>LedgerJournalPeriodicCopy</c> object.</returns>
    public static LedgerJournalPeriodicCopy construct(LedgerJournalNameId    _toLedgerJournalName     = '',
             LedgerJournalId        _toLedgerJournalId      = '',
             CopyMove               _copyMove               = CopyMove::Copy,
             LedgerJournalNameId    _fromLedgerJournalName  = '',
             LedgerJournalId        _fromLedgerJournalId    = '',
             TransDate              _endDate                = dateNull(),
             TransDate              _emptyDate              = dateNull(),
             Name                   _name                   = '')
    {
        return new LedgerJournalPeriodicCopy(_toLedgerJournalName,
                                            _toLedgerJournalId,
                                            _copyMove,
                                            _fromLedgerJournalName,
                                            _fromLedgerJournalId,
                                            _endDate,
                                            _emptyDate,
                                            _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(LedgerJournalNameId    _toLedgerJournalName     = '',
             LedgerJournalId        _toLedgerJournalId      = '',
             CopyMove               _copyMove               = CopyMove::Copy,
             LedgerJournalNameId    _fromLedgerJournalName  = '',
             LedgerJournalId        _fromLedgerJournalId    = '',
             TransDate              _endDate                = dateNull(),
             TransDate              _emptyDate              = dateNull(),
             Name                   _name                   = '')
    {
        fromLedgerJournalName   = _fromLedgerJournalName;
        fromLedgerJournalId     = _fromLedgerJournalId;
        toLedgerJournalName     = _toLedgerJournalName;
        toLedgerJournalId       = _toLedgerJournalId;
        copyMove                = _copyMove;
        endDate                 = _endDate;
        emptyDate               = _emptyDate;
        toName                  = _name;

        if (! fromLedgerJournalId)
        {
            throw error("@SYS26144");
        }

        if (! toLedgerJournalId)
        {
            toLedgerJournalId = JournalTableData::newTable(newLedgerJournalTable).nextJournalId();
        }
        else
        {
            newLedgerJournalTable = LedgerJournalTable::find(_toLedgerJournalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDate</Name>
				<Source><![CDATA[
    TransDate newDate(LedgerJournalTrans    _ledgerJournalTrans,
                      TransDate             _oldDate)
    {
        TransDate   oldDate;
        Futures     futures;

        oldDate = _oldDate ? _oldDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        futures = Futures::construct(oldDate,
                              _ledgerJournalTrans.FreqValue,
                              _ledgerJournalTrans.FreqCode);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitInfo_W</Name>
				<Source><![CDATA[
    final public void parmSplitInfo_W(
        NoYes      _splitTrans         = NoYes::No,
        Periods    _periodQty          = 0,
        Periods    _periodIntervalQty  = 0,
        TransDate  _dateFrom           = dateNull(),
        PeriodUnit _periodIntervalUnit = PeriodUnit::Day)
    {
        splitTrans         = _splitTrans;
        periodQty          = _periodQty;
        periodIntervalQty  = _periodIntervalQty;
        dateFrom           = _dateFrom;
        periodIntervalUnit = _periodIntervalUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLedgerJournaTrans_W</Name>
				<Source><![CDATA[
    public void splitLedgerJournaTrans_W(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans            ledgerJournalTransSplit;

        LedgerJournalTrans_Asset      ledgerJournalTransSplit_Asset;
        LedgerJournalTrans_Project    ledgerJournalTransSplit_Project;
        LedgerJournalTrans_RAsset     ledgerJournalTransSplit_RAsset;
        LedgerJournalTrans_RCash      ledgerJournalTransSplit_RCash;
        LedgerJournalTrans_RDeferrals ledgerJournalTransSplit_RDeferrals;
        TaxWorkRegulation             taxWorkRegulationSplit;

        Amount              assetSplitAmount,  assetRestAmount;

        Map                 taxRegSplit  = new Map(Types::Int64, Types::Container),
                            taxRegRemain = new Map(Types::Int64, Types::Container);
        Amount              taxAmountReg, taxBaseReg;

        Amount              splitedAmount,
                            restAmount,
                            splitedCostPrice,
                            restCostPrice;

        LineNum             lineNum;
        Futures             futures;
        Periods             localPeriodQty = periodQty;
        TransDate           localDateFrom  = dateFrom;

        if (splitTrans)
        {
            ledgerJournalTransSplit.data(_ledgerJournalTrans);

            splitedAmount = CurrencyExchangeHelper::amount((_ledgerJournalTrans.AmountCurCredit ? _ledgerJournalTrans.AmountCurCredit : _ledgerJournalTrans.AmountCurDebit) / periodQty, _ledgerJournalTrans.CurrencyCode);

            restAmount = (_ledgerJournalTrans.AmountCurCredit ?
                          _ledgerJournalTrans.AmountCurCredit :
                          _ledgerJournalTrans.AmountCurDebit) -
                         splitedAmount * (periodQty - 1);

            ledgerJournalTransSplit_Asset      = LedgerJournalTrans_Asset::find(ledgerJournalTransSplit.RecId, true);
            if (ledgerJournalTransSplit_Asset)
            {
                assetSplitAmount = CurrencyExchangeHelper::amount(ledgerJournalTransSplit_Asset.RevaluationAmount / periodQty, _ledgerJournalTrans.CurrencyCode);
                assetRestAmount  = ledgerJournalTransSplit_Asset.RevaluationAmount - assetSplitAmount * (periodQty - 1);
            }
            ledgerJournalTransSplit_Project    = LedgerJournalTrans_Project::find(ledgerJournalTransSplit.RecId, true);
            if (ledgerJournalTransSplit_Project)
            {
                splitedCostPrice = CurrencyExchangeHelper::price(ledgerJournalTransSplit_Project.CostPrice / periodQty, _ledgerJournalTrans.CurrencyCode);
                restCostPrice    = CurrencyExchangeHelper::price(ledgerJournalTransSplit_Project.CostPrice, _ledgerJournalTrans.CurrencyCode) - splitedCostPrice * (periodQty - 1);

                if (_ledgerJournalTrans.AccountType         == LedgerJournalACType::Project ||
                    _ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Project)
                {
                    splitedAmount = splitedCostPrice * abs(ledgerJournalTransSplit_Project.Qty);
                }
            }

            ledgerJournalTransSplit_RAsset     = LedgerJournalTrans_RAsset::find(ledgerJournalTransSplit.RecId,     true);
            ledgerJournalTransSplit_RCash      = LedgerJournalTrans_RCash::find(ledgerJournalTransSplit.RecId,      true);
            ledgerJournalTransSplit_RDeferrals = LedgerJournalTrans_RDeferrals::find(ledgerJournalTransSplit.RecId, true);

            while select TaxRegulationAmountCur, SourceBaseAmountCurRegulated, RecId from taxWorkRegulationSplit
                where taxWorkRegulationSplit.HeadingRecId   == _ledgerJournalTrans.RecId &&
                      taxWorkRegulationSplit.HeadingTableId == _ledgerJournalTrans.TableId
            {
                taxAmountReg = CurrencyExchangeHelper::amount(taxWorkRegulationSplit.TaxRegulationAmountCur / periodQty, _ledgerJournalTrans.CurrencyCode);
                taxBaseReg   = CurrencyExchangeHelper::amount(taxWorkRegulationSplit.SourceBaseAmountCurRegulated / periodQty, _ledgerJournalTrans.CurrencyCode);

                taxRegSplit.insert(taxWorkRegulationSplit.RecId,
                                   [ taxAmountReg,
                                     taxBaseReg ]);
                taxRegRemain.insert(taxWorkRegulationSplit.RecId,
                                    [ taxWorkRegulationSplit.TaxRegulationAmountCur       - taxAmountReg * (periodQty - 1),
                                      taxWorkRegulationSplit.SourceBaseAmountCurRegulated - taxBaseReg   * (periodQty - 1) ]);
            }

            lineNum = (select maxof(LineNum) from ledgerJournalTrans
                           where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum).LineNum;

            futures = Futures::construct(dateFrom, periodIntervalQty, periodIntervalUnit);

            while (localPeriodQty > 1)
            {
                ledgerJournalTransSplit.data(_ledgerJournalTrans);

                ledgerJournalTransSplit.TransDate = localDateFrom;

                if (ledgerJournalTransSplit.AmountCurCredit)
                {
                    ledgerJournalTransSplit.AmountCurCredit = splitedAmount;
                }
                else
                {
                    ledgerJournalTransSplit.AmountCurDebit = splitedAmount;
                }

                lineNum++;

                ledgerJournalTransSplit.LineNum = lineNum;

                this.copyOfficials_W(_ledgerJournalTrans, ledgerJournalTransSplit);

                ledgerJournalTransSplit.insert();
                LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(
                    _ledgerJournalTrans,
                    ledgerJournalTransSplit,
                    true);

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    TaxServiceTariff::insertTaxServiceTariffForNewParent(_ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId, ledgerJournalTransSplit.TableId, ledgerJournalTransSplit.RecId);
                }
                // </GEEPL>

                this.splitMiscTrans_W(ledgerJournalTransSplit_Asset,
                                      [ fieldnum(LedgerJournalTrans_Asset,      RefRecId),
                                        fieldnum(LedgerJournalTrans_Asset,      RevaluationAmount) ],
                                      [ ledgerJournalTransSplit.RecId,
                                        assetSplitAmount ]);

                this.splitMiscTrans_W(ledgerJournalTransSplit_Project,
                                      [ fieldnum(LedgerJournalTrans_Project,    RefRecId),
                                        fieldnum(LedgerJournalTrans_Project,    CostPrice),
                                        fieldnum(LedgerJournalTrans_Project,    ProjTransDate),
                                        fieldnum(LedgerJournalTrans_Project,    TransId)],
                                      [ ledgerJournalTransSplit.RecId,
                                        splitedCostPrice,
                                        localDateFrom,
                                        this.getProjCostTransNewTransId(ledgerJournalTransSplit_Project)]);

                this.splitMiscTrans_W(ledgerJournalTransSplit_RAsset,
                                        [ fieldnum(LedgerJournalTrans_RAsset,     RefRecId) ],
                                        [ ledgerJournalTransSplit.RecId ]);

                this.splitMiscTrans_W(ledgerJournalTransSplit_RCash,
                                      [ fieldnum(LedgerJournalTrans_RCash,      RefRecId) ],
                                      [ ledgerJournalTransSplit.RecId ]);

                this.splitMiscTrans_W(ledgerJournalTransSplit_RDeferrals,
                                      [ fieldnum(LedgerJournalTrans_RDeferrals, RefRecId) ],
                                      [ ledgerJournalTransSplit.RecId ]);

                while select forupdate taxWorkRegulationSplit
                    where taxWorkRegulationSplit.HeadingRecId   == _ledgerJournalTrans.RecId &&
                          taxWorkRegulationSplit.HeadingTableId == _ledgerJournalTrans.TableId
                {
                    [ taxAmountReg, taxBaseReg ] = taxRegSplit.lookup(taxWorkRegulationSplit.RecId);
                    this.splitMiscTrans_W(taxWorkRegulationSplit,
                                          [ fieldnum(TaxWorkRegulation, HeadingRecId),
                                            fieldnum(TaxWorkRegulation, TaxRegulationAmountCur),
                                            fieldnum(TaxWorkRegulation, SourceBaseAmountCurRegulated) ],
                                          [ ledgerJournalTransSplit.RecId,
                                            taxAmountReg,
                                            taxBaseReg ]);
                }

                localDateFrom = futures.next();

                localPeriodQty --;
            }

            lineNum++;

            _ledgerJournalTrans.TransDate = localDateFrom;

            if (_ledgerJournalTrans.AmountCurCredit)
            {
                _ledgerJournalTrans.AmountCurCredit = restAmount;
            }
            else
            {
                _ledgerJournalTrans.AmountCurDebit = restAmount;
            }

            _ledgerJournalTrans.LineNum = lineNum;
            _ledgerJournalTrans.update();

            this.updMiscTrans_W(ledgerJournalTransSplit_Asset,
                                [ fieldnum(LedgerJournalTrans_Asset, RevaluationAmount) ],
                                [ assetRestAmount ]);

            this.updMiscTrans_W(ledgerJournalTransSplit_Project,
                                [ fieldnum(LedgerJournalTrans_Project, CostPrice), fieldnum(LedgerJournalTrans_Project, ProjTransDate), fieldnum(LedgerJournalTrans_Project, TransId)],
                                [ restCostPrice, _ledgerJournalTrans.TransDate, this.getProjCostTransNewTransId(ledgerJournalTransSplit_Project) ]);

            while select forupdate taxWorkRegulationSplit
                where taxWorkRegulationSplit.HeadingRecId   == _ledgerJournalTrans.RecId &&
                      taxWorkRegulationSplit.HeadingTableId == _ledgerJournalTrans.TableId
            {
                [ taxAmountReg, taxBaseReg ] = taxRegRemain.lookup(taxWorkRegulationSplit.RecId);
                this.updMiscTrans_W(taxWorkRegulationSplit,
                                      [ fieldnum(TaxWorkRegulation, TaxRegulationAmountCur),
                                        fieldnum(TaxWorkRegulation, SourceBaseAmountCurRegulated) ],
                                      [ taxAmountReg,
                                        taxBaseReg ]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitMiscTrans_W</Name>
				<Source><![CDATA[
    private void splitMiscTrans_W(Common _trans, container _fields, container _values)
    {
        Common newTrans;
        int    conPos, len;

        if (!_trans)
        {
            return;
        }
        newTrans = _trans.data();

        len = conlen(_fields);
        for (conPos = 1; conPos <= len; conPos ++)
        {
            newTrans.(conpeek(_fields, conPos)) = conpeek(_values, conPos);
        }

        newTrans.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updMiscTrans_W</Name>
				<Source><![CDATA[
    private void updMiscTrans_W(Common _trans, container _fields, container _values)
    {
        int conPos, len;

        if (!_trans)
        {
            return;
        }

        len = conlen(_fields);
        for (conPos = 1; conPos <= len; conPos ++)
        {
            _trans.(conpeek(_fields, conPos)) = conpeek(_values, conPos);
        }

        _trans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentFeeCopy</Name>
				<Source><![CDATA[
    private void paymentFeeCopy(LedgerJournalPeriodicCopyTmp _ledgerJournalPeriodicCopyTmp)
    {
        CustVendPaymJournalFee custVendPaymJournalFeeOld;
        CustVendPaymJournalFee custVendPaymJournalFeeNew;
        LedgerJournalPeriodicCopyTmp ledgerJournalPeriodicCopyTmpLine;
        LedgerJournalPeriodicCopyTmp ledgerJournalPeriodicCopyTmpFee;

        ledgerJournalPeriodicCopyTmpLine.setTmpData(_ledgerJournalPeriodicCopyTmp);
        ledgerJournalPeriodicCopyTmpFee.setTmpData(_ledgerJournalPeriodicCopyTmp);

        while select custVendPaymJournalFeeOld
            join ledgerJournalPeriodicCopyTmpLine
                where custVendPaymJournalFeeOld.RefRecId == ledgerJournalPeriodicCopyTmpLine.LedgerJournalTransRecIdOld
            join ledgerJournalPeriodicCopyTmpFee
                where custVendPaymJournalFeeOld.feeTransRecId == ledgerJournalPeriodicCopyTmpFee.LedgerJournalTransRecIdOld
        {
            custVendPaymJournalFeeNew.data(custVendPaymJournalFeeOld);
            custVendPaymJournalFeeNew.RefRecId = ledgerJournalPeriodicCopyTmpLine.LedgerJournalTransRecIdNew;
            custVendPaymJournalFeeNew.feeTransRecId = ledgerJournalPeriodicCopyTmpFee.LedgerJournalTransRecIdNew;
            custVendPaymJournalFeeNew.insert(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentFeeCopyWithTempDB</Name>
				<Source><![CDATA[
    private void paymentFeeCopyWithTempDB(LedgerJournalPeriodicCopyTempDB _ledgerJournalPeriodicCopyTmp)
    {
        CustVendPaymJournalFee custVendPaymJournalFeeOld;
        CustVendPaymJournalFee custVendPaymJournalFeeNew;
        LedgerJournalPeriodicCopyTempDB ledgerJournalPeriodicCopyTmpLine;
        LedgerJournalPeriodicCopyTempDB ledgerJournalPeriodicCopyTmpFee;

        ledgerJournalPeriodicCopyTmpLine.linkPhysicalTableInstance(_ledgerJournalPeriodicCopyTmp);
        ledgerJournalPeriodicCopyTmpFee.linkPhysicalTableInstance(_ledgerJournalPeriodicCopyTmp);

        while select custVendPaymJournalFeeOld
            join ledgerJournalPeriodicCopyTmpLine
                where custVendPaymJournalFeeOld.RefRecId == ledgerJournalPeriodicCopyTmpLine.LedgerJournalTransRecIdOld
            join ledgerJournalPeriodicCopyTmpFee
                where custVendPaymJournalFeeOld.feeTransRecId == ledgerJournalPeriodicCopyTmpFee.LedgerJournalTransRecIdOld
        {
            custVendPaymJournalFeeNew.data(custVendPaymJournalFeeOld);
            custVendPaymJournalFeeNew.RefRecId = ledgerJournalPeriodicCopyTmpLine.LedgerJournalTransRecIdNew;
            custVendPaymJournalFeeNew.feeTransRecId = ledgerJournalPeriodicCopyTmpFee.LedgerJournalTransRecIdNew;
            custVendPaymJournalFeeNew.insert(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispatchPaymentFeeCopy</Name>
				<Source><![CDATA[
    private void dispatchPaymentFeeCopy(LedgerJournalPeriodicCopyTempDB _ledgerJournalPeriodicCopyTempDB, LedgerJournalPeriodicCopyTmp _ledgerJournalPeriodicCopyTmp)
    {
        if (!LedgerJournalPeriodPaymentFeeCopyPerfEnhanceFlight::instance().isEnabled())
        {
            this.paymentFeeCopy(_ledgerJournalPeriodicCopyTmp);
        }
        else
        {
            this.paymentFeeCopyWithTempDB(_ledgerJournalPeriodicCopyTempDB);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispatchPaymentFeePopulate</Name>
				<Source><![CDATA[
    private void dispatchPaymentFeePopulate(LedgerJournalPeriodicCopyTempDB _ledgerJournalPeriodicCopyTempDB, LedgerJournalPeriodicCopyTmp _ledgerJournalPeriodicCopyTmp, RecId _ledgerJournalTransRecId, RecId _ledgerJournalTransNewRecId)
    {
        if (!LedgerJournalPeriodPaymentFeeCopyPerfEnhanceFlight::instance().isEnabled())
        {
            _ledgerJournalPeriodicCopyTmp.clear();
            _ledgerJournalPeriodicCopyTmp.LedgerJournalTransRecIdOld = _ledgerJournalTransRecId;
            _ledgerJournalPeriodicCopyTmp.LedgerJournalTransRecIdNew = _ledgerJournalTransNewRecId;
            _ledgerJournalPeriodicCopyTmp.insert();
        }
        else
        {
            _ledgerJournalPeriodicCopyTempDB.clear();
            _ledgerJournalPeriodicCopyTempDB.LedgerJournalTransRecIdOld = _ledgerJournalTransRecId;
            _ledgerJournalPeriodicCopyTempDB.LedgerJournalTransRecIdNew = _ledgerJournalTransNewRecId;
            _ledgerJournalPeriodicCopyTempDB.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearUnsaveableFields</Name>
				<Source><![CDATA[
    private void clearUnsaveableFields(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.CustTransId = 0;
        _ledgerJournalTrans.VendTransId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCostTransNewTransId</Name>
				<Source><![CDATA[
    private Num getProjCostTransNewTransId(Common _common)
    {

        Num transId;

        if (_common)
        {
            transId = ProjCostTrans::newTransId();
        }
        
        return transId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>