<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PMFSeqAcceptChanges</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles confirming the sequence record.
/// </summary>
public class PMFSeqAcceptChanges extends RunBase
{
    PMFSeqReqRouteChanges   changes;
    FormDataSource          datasource;

    Map                     mapSeqReqChangeMark;
    Map                     mapSeqReqChangeDelete;
    Map                     mapReqRouteUpdated;

    boolean                 isPmfSequencingWithOverlapFlightEnabled;

    #define.CurrentVersion(2)
    #localMacro.CurrentList
        mapSeqReqChangeMark.pack()
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceptCapResChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates capacity reservations of a planned order based
    /// on the sequenced capacity reservations and removes the
    /// sequenced capacity reservations from PMFSeqWrkCtrCapRes.
    /// </summary>
    /// <param name="_refId">
    /// RefId of the planned order for which changes are being accepted.
    /// </param>
    /// <param name="_planVersionRecId">
    /// RecId of the plan version of the planned order for which changes are being accepted.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void acceptCapResChange(
        WrkCtrRefId _refId,
        RecId       _planVersionRecId)
    {
        WrkCtrCapRes                wrkCtrCapRes;
        WrkCtrCapResProperty        wrkCtrCapResProperty;
        PMFSeqWrkCtrCapRes          seqWrkCtrCapRes;
        WrkCtrCapResTimestamp       newTimestamp;

        PmfSeqWrkCtrCapResProperty  propertiesSelect;
        WrkCtrCapResProperty        propertiesInsert;

        wrkCtrCapRes.skipDeleteActions(true);
        seqWrkCtrCapRes.skipDeleteActions(true);

        ttsBegin;

        newTimestamp = WrkCtrScheduler::incrementWrkCtrCapResTimestampUsingConnection();
        
        delete_from wrkCtrCapResProperty
            exists join wrkCtrCapRes
            where   wrkCtrCapResProperty.CapResRefRecId == wrkCtrCapRes.RecId 
                &&  wrkCtrCapRes.PlanVersion == _planVersionRecId
                &&  wrkCtrCapRes.RefId       == _refId
                &&  wrkCtrCapRes.RefType     == WrkCtrCapRefType::PlannedOrder;

        delete_from wrkCtrCapRes
            where   wrkCtrCapRes.PlanVersion == _planVersionRecId
                &&  wrkCtrCapRes.RefId       == _refId
                &&  wrkCtrCapRes.RefType     == WrkCtrCapRefType::PlannedOrder;
        
        insert_recordset wrkCtrCapRes (
                LoadType, TransDate, PlanVersion, ProperTyId, JobId,
                JobType, Locked, OprNum, RefId, RefType, WrkCtrLoadPct,
                WrkCtrId, WrkCtrSec, OprPriority, EndTime, StartTime,
                IntvQr, IntvMth, IntvWk, OrigJobRecId, Timestamp)
            select LoadType, TransDate, PlanVersion, PropertyId, JobId,
                JobType, Locked, OprNum, RefId, RefType, WrkCtrLoadPct,
                WrkCtrId, WrkCtrSec, OprPriority, EndTime, StartTime,
                IntvQr, IntvMth, IntvWk, OrigJobRecId, newTimestamp
                from seqWrkCtrCapRes
                where seqWrkCtrCapRes.PlanVersion   == _planVersionRecId
                  &&  seqWrkCtrCapRes.RefId         == _refId
                  &&  seqWrkCtrCapRes.RefType       == WrkCtrCapRefType::PlannedOrder;

        insert_recordset propertiesInsert (SchedulingPropertyId, CapResRefRecId)
            select SchedulingPropertyId
            from propertiesSelect
                join seqWrkCtrCapRes
                    where seqWrkCtrCapRes.PlanVersion   == _planVersionRecId
                       && seqWrkCtrCapRes.RecId         == propertiesSelect.CapResRefRecId
                    join RecId
                       from wrkCtrCapRes
                        where wrkCtrCapRes.PlanVersion  == seqWrkCtrCapRes.PlanVersion
                           && wrkCtrCapRes.RefId        == seqWrkCtrCapRes.RefId
                           && wrkCtrCapRes.RefType      == seqWrkCtrCapRes.RefType
                           && wrkCtrCapRes.OprNum       == seqWrkCtrCapRes.OprNum
                           && wrkCtrCapRes.OprPriority  == seqWrkCtrCapRes.OprPriority
                           && wrkCtrCapRes.OrigJobRecId == seqWrkCtrCapRes.OrigJobRecId
                           && wrkCtrCapRes.TransDate    == seqWrkCtrCapRes.TransDate
                           && wrkCtrCapRes.StartTime    == seqWrkCtrCapRes.StartTime
                           && wrkCtrCapRes.EndTime      == seqWrkCtrCapRes.EndTime;

        delete_from seqWrkCtrCapRes
            where   seqWrkCtrCapRes.PlanVersion == _planVersionRecId
                &&  seqWrkCtrCapRes.RefId       == _refId
                &&  seqWrkCtrCapRes.RefType     == WrkCtrCapRefType::PlannedOrder;

        delete_from propertiesSelect
            notExists join seqWrkCtrCapRes
                where propertiesSelect.CapResRefRecId == seqWrkCtrCapRes.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts changed schedule for a sequenced planned order.
    /// </summary>
    /// <param name="_change">
    /// The <c>PMFSeqReqRouteChanges</c> with the schedule change for the planned order.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void acceptChange(PMFSeqReqRouteChanges _change)
    {
        ReqRoute                reqRoute;
        ReqRoute                otherReqRoute;
        utcDateTime             fromDateTime;
        utcDateTime             toDateTime;
        PMFSeqReqRouteChanges   otherChange;

        ttsBegin;

        reqRoute = _change.reqRoute(true);

        if (reqRoute)
        {
            fromDateTime = _change.NewFromDateTime;
            toDateTime   = _change.NewToDateTime;

            reqRoute.FromDate       = DateTimeUtil::date(fromDateTime);
            reqRoute.FromTime       = DateTimeUtil::time(fromDateTime);
            reqRoute.ToDate         = DateTimeUtil::date(toDateTime);
            reqRoute.ToTime         = DateTimeUtil::time(toDateTime);
            reqRoute.PMFSequenced   = true;
            reqRoute.update();

            mapReqRouteUpdated.insert(reqRoute.RecId, reqRoute);

            while select otherChange
                where otherChange.PlanVersion == _change.PlanVersion
                    && otherChange.RefId      == _change.RefId
                    && otherChange.RecId      != _change.RecId
            {
                fromDateTime = otherChange.NewFromDateTime;
                toDateTime   = otherChange.NewToDateTime;

                otherReqRoute = otherChange.reqRoute(true);

                otherReqRoute.FromDate       = DateTimeUtil::date(fromDateTime);
                otherReqRoute.FromTime       = DateTimeUtil::time(fromDateTime);
                otherReqRoute.ToDate         = DateTimeUtil::date(toDateTime);
                otherReqRoute.ToTime         = DateTimeUtil::time(toDateTime);
                otherReqRoute.update();

                mapSeqReqChangeDelete.insert(otherChange.RecId, otherChange);
            }

            this.updateReqPo(reqRoute);
            this.acceptCapResChange(reqRoute.RefId, reqRoute.PlanVersion);
            this.updateReqRouteJobs(reqRoute.RefId, reqRoute.PlanVersion);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal map variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initMaps()
    {
        mapSeqReqChangeMark     = new Map(extendedTypeId2Type(extendedTypenum(recId)),Types::Record);
        mapSeqReqChangeDelete   = new Map(extendedTypeId2Type(extendedTypenum(recId)),Types::Record);
        mapReqRouteUpdated      = new Map(extendedTypeId2Type(extendedTypenum(recId)),Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatasource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormDataSource parmDatasource(FormDataSource _datasource = datasource)
    {
        if (!prmisdefault(_datasource))
        {
            datasource = _datasource;
        }

        return datasource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapSeqReqRouteChanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmMapSeqReqRouteChanges(Map _mapSeqReq = mapSeqReqChangeMark)
    {
        if (!prmisdefault(_mapSeqReq))
        {
            mapSeqReqChangeMark = _mapSeqReq;
        }

        return mapSeqReqChangeMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all changes.
    /// </summary>
    /// <remarks>
    /// The base method will accept the changes. This method assumes a transaction has been started.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processChanges()
    {
        PMFSeqReqRouteChanges   topChange;
        MapEnumerator           mi;

        isPmfSequencingWithOverlapFlightEnabled = PmfSequencingWithOverlapFlight::instance().isEnabled();

        mi = mapSeqReqChangeMark.getEnumerator();
        while (mi.moveNext())
        {
            topChange = mi.currentValue();

            this.acceptChange(topChange);
            mapSeqReqChangeDelete.insert(topChange.RecId, topChange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOnRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets any class variables when having to retry the main transaction.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void resetOnRetry()
    {
        mapSeqReqChangeDelete   = new Map(extendedTypeId2Type(extendedTypenum(recId)),Types::Record);
        mapReqRouteUpdated      = new Map(extendedTypeId2Type(extendedTypenum(recId)),Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        PMFSeqReqRouteChanges   delChange;
        MapEnumerator           md;

        try
        {
            ttsBegin;
            this.processChanges();
            ttsCommit;
        }
        catch(Exception::Deadlock)
        {
            this.resetOnRetry();
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                this.resetOnRetry();
                retry;
            }
            else
            {
                throw;
            }
        }
        catch(Exception::Error)
        {
            throw error("@PSC349");
        }

        ttsBegin;
        md = mapSeqReqChangeDelete.getEnumerator();
        while (md.moveNext())
        {
            delete_from delChange
                where delChange.RecId == md.currentKey();
        }
        ttsCommit;

        if (datasource)
        {
            datasource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMapsFromDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the internal maps from the <c>FormDataSource</c>.
    /// </summary>
    /// <remarks>
    /// This is used to allow the class to run from both a form and a List Page.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setMapsFromDatasource()
    {
        PMFSeqReqRouteChanges   buffer;

        if (datasource && mapSeqReqChangeMark.elements() == 0)
        {
            buffer = datasource.getFirst(1);

            while (buffer.RecId)
            {
                changes.data(buffer);
                mapSeqReqChangeMark.insert(changes.RecId,changes);
                buffer = datasource.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                mapSeqReqChangeMark = Map::create(conPeek(_packedClass, 2));
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqPo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReqPO</c> record upon confirmation of the sequenced planned order.
    /// </summary>
    /// <param name="_reqRoute">
    /// The requirement route to be confirmed.
    /// </param>
    /// <returns>
    /// The <c>ReqPO</c> that was updated or an empty buffer if <paramref name="_reqRoute"/> does not refer to a valid planned order.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReqPO updateReqPo(ReqRoute _reqRoute)
    {
        ReqPO       reqPO;
        ReqTrans    reqTransPO;
        ReqRoute    reqRouteFirst;
        ReqRoute    reqRouteLast;

        ttsBegin;

        reqPO = ReqPO::find(_reqRoute.PlanVersion, _reqRoute.RefId, true);

        if (reqPO)
        {
            reqTransPO = reqPO.reqTrans(true);

            reqPO.PMFSequenced = true;

            reqRouteFirst = ReqRoute::findFirst(_reqRoute.PlanVersion, _reqRoute.RefId);
            reqPO.ReqDateOrder  = reqRouteFirst.FromDate;
            reqPO.ReqTimeOrder  = reqRouteFirst.FromTime;
            reqPO.SchedFromDate = reqRouteFirst.FromDate;

            reqRouteLast = ReqRoute::findLast(_reqRoute.PlanVersion, _reqRoute.RefId);
            reqPO.ReqDateDlv    = reqRouteLast.ToDate;
            reqPO.ReqDate       = reqRouteLast.ToDate;
            reqPO.ReqTime       = reqRouteLast.ToTime;
            reqPO.SchedToDate   = reqRouteLast.ToDate;
            reqPO.ReqPOStatus   = ReqPOStatus::Approved;

            if (!reqPO.validateWrite())
            {
                throw error("@PSC353");
            }
            reqPO.doUpdate();

            reqTransPO.ReqDate  = reqPO.ReqDate;
            reqTransPO.ReqTime  = reqPO.ReqTime;
            reqTransPO.update();

            // Update raw material dates
            WrkCtrScheduler_Req::saveDerivedTransactions(ReqPlanData::newReqPlanVersion(reqPO.PlanVersion),
                                                        reqTransPO,
                                                        true,
                                                        reqRouteFirst.FromDate,
                                                        reqRouteFirst.FromTime,
                                                        reqRouteLast.ToDate,
                                                        reqRouteLast.ToTime,
                                                        reqPO);
        }

        ttsCommit;

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqRouteJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ReqRouteJob records of the planned order with given RefId and PlanVersion,
    /// based on the sequenced capacity reservations that were already copied to the WrkCtrCapRes table.
    /// </summary>
    /// <param name="_refId">
    /// The Id of the planned order for which jobs should be updated.
    /// </param>
    /// <param name="_planVersion">
    /// The plan version of the planned order.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown if there is a mismatch between capacity reservations and jobs, i.e.,
    /// there is a certain number of expected jobs (based on sequenced capacity reservations)
    /// but the number of jobs found differs (jobs in ReqRouteJob).
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateReqRouteJobs(InventRefId _refId, RecId _planVersion)
    {
        ReqRouteJob     reqRouteJob;
        WrkCtrCapRes    wrkCtrCapRes;
        WrkCtrCapRes    wrkCtrCapResGrouped;
        int             jobNum;
        
        ttsBegin;

        // update each job with new start/end date/time and resource
        while select forUpdate reqRouteJob
            // the important sorting is NumPrimary, NumSecondary, but the following sorting is used to hit the index
            order by PlanVersion, ReqPOId, OprNum, NumType, NumPrimary, OprPriority, NumSecondary
            where  reqRouteJob.ReqPOId      == _refId
                && reqRouteJob.PlanVersion  == _planVersion
                && (!isPmfSequencingWithOverlapFlightEnabled || reqRouteJob.JobType != RouteJobType::Overlap)
        {
            reqRouteJob.FromDate = dateMax();
            reqRouteJob.ToDate   = dateNull();
            reqRouteJob.WrkCtrId = '';

            jobNum = 1;

            // special care for multiple resource requirements originating multiple reservations
            // for what looks like the same job, but having different resources assigned
            while select WrkCtrId
                from wrkCtrCapResGrouped
                order by WrkCtrId
                group by WrkCtrId
                where  wrkCtrCapResGrouped.RefId        == _refId
                    && wrkCtrCapResGrouped.RefType      == WrkCtrCapRefType::PlannedOrder
                    && wrkCtrCapResGrouped.LoadType     == WrkCtrCapacityType::JobSched
                    && wrkCtrCapResGrouped.PlanVersion  == _planVersion
                    && wrkCtrCapResGrouped.OprNum       == reqRouteJob.OprNum
                    && wrkCtrCapResGrouped.OprPriority  == reqRouteJob.OprPriority
                    && wrkCtrCapResGrouped.JobType      == reqRouteJob.JobType
            {
                if (    (reqRouteJob.OprPriority == RouteOprPriority::Primary && reqRouteJob.NumPrimary   == jobNum)
                    ||  (reqRouteJob.OprPriority != RouteOprPriority::Primary && reqRouteJob.NumSecondary == jobNum))
                {
                    reqRouteJob.WrkCtrId = wrkCtrCapResGrouped.WrkCtrId;

                    while select forupdate WrkCtrId, TransDate, StartTime, EndTime, JobId
                        from wrkCtrCapRes
                        where  wrkCtrCapRes.RefId       == _refId
                            && wrkCtrCapRes.RefType     == WrkCtrCapRefType::PlannedOrder
                            && wrkCtrCapRes.LoadType    == WrkCtrCapacityType::JobSched
                            && wrkCtrCapRes.PlanVersion == _planVersion
                            && wrkCtrCapRes.OprNum      == reqRouteJob.OprNum
                            && wrkCtrCapRes.OprPriority == reqRouteJob.OprPriority
                            && wrkCtrCapRes.JobType     == reqRouteJob.JobType
                            && wrkCtrCapRes.WrkCtrId    == reqRouteJob.WrkCtrId
                    {
                        if ((wrkCtrCapRes.TransDate < reqRouteJob.FromDate) || (wrkCtrCapRes.TransDate == reqRouteJob.FromDate && wrkCtrCapRes.StartTime < reqRouteJob.FromTime))
                        {
                            reqRouteJob.FromDate = wrkCtrCapRes.TransDate;
                            reqRouteJob.FromTime = wrkCtrCapRes.StartTime;
                        }

                        if ((wrkCtrCapRes.TransDate > reqRouteJob.ToDate) || (wrkCtrCapRes.TransDate == reqRouteJob.ToDate && wrkCtrCapRes.EndTime > reqRouteJob.ToTime))
                        {
                            reqRouteJob.ToDate = wrkCtrCapRes.TransDate;
                            reqRouteJob.ToTime = wrkCtrCapRes.EndTime;
                        }

                        wrkCtrCapRes.JobId = int642str(reqRouteJob.RecId);
                        wrkCtrCapRes.doUpdate();
                    }
                }

                jobNum += 1;
            }

            // update only if relevant data was found in capacity reservations
            if (reqRouteJob.WrkCtrId != '')
            {
                reqRouteJob.doUpdate();
            }
        }

        if (isPmfSequencingWithOverlapFlightEnabled)
        {
            ReqRouteJob     reqRouteJobOverlap;
        
            while select forUpdate reqRouteJobOverlap
                order by PlanVersion, ReqPOId, OprNum, NumType, NumPrimary, OprPriority, NumSecondary
                where  reqRouteJobOverlap.ReqPOId      == _refId
                    && reqRouteJobOverlap.PlanVersion  == _planVersion
                    && reqRouteJobOverlap.JobType      == RouteJobType::Overlap
            {
                select firstonly reqRouteJob
                    where  reqRouteJob.ReqPOId      == reqRouteJobOverlap.ReqPOId
                        && reqRouteJob.PlanVersion  == reqRouteJobOverlap.PlanVersion
                        && reqRouteJob.OprNum       == reqRouteJobOverlap.OprNum
                        && reqRouteJob.NumPrimary   == reqRouteJobOverlap.NumPrimary
                        && reqRouteJob.OprPriority  == reqRouteJobOverlap.OprPriority
                        && reqRouteJob.NumSecondary == reqRouteJobOverlap.NumSecondary
                        && reqRouteJob.JobType      == RouteJobType::Process;

                reqRouteJobOverlap.FromDate = reqRouteJob.FromDate;
                reqRouteJobOverlap.FromTime = reqRouteJob.FromTime;
                reqRouteJobOverlap.WrkCtrId = reqRouteJob.WrkCtrId;

                select firstonly reqRouteJob
                    order by OprNum, JobType
                    where  reqRouteJob.ReqPOId      == reqRouteJobOverlap.ReqPOId
                        && reqRouteJob.PlanVersion  == reqRouteJobOverlap.PlanVersion
                        && ((reqRouteJob.OprNum     == reqRouteJobOverlap.OprNum
                        &&   reqRouteJob.JobType     > RouteJobType::Overlap)
                        || reqRouteJob.OprNum       == reqRouteJobOverlap.reqRoute().OprNumNext);

                reqRouteJobOverlap.ToDate = reqRouteJob.FromDate;
                reqRouteJobOverlap.ToTime = reqRouteJob.FromTime;

                reqRouteJobOverlap.doUpdate();
            }            
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PMFSeqAcceptChanges construct()
    {
        return new PMFSeqAcceptChanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard description for this runbase class.
    /// </summary>
    /// <returns>
    /// The description for this runbase class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str description()
    {
        return "@PSC743";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PMFSeqAcceptChanges         approve;

        approve = PMFSeqAcceptChanges::newFromForm(_args, _args.parmEnum());

        approve.initMaps();
        approve.setMapsFromDatasource();

        if (approve.parmMapSeqReqRouteChanges().elements() == 0)
        {
            if (!approve.parmMapSeqReqRouteChanges().exists(_args.record().RecId))
            {
                approve.parmMapSeqReqRouteChanges().insert(_args.record().RecId,_args.record());
            }
        }

        approve.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>PMFSeqAcceptChanges</c> from caller.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> from the caller.
    /// </param>
    /// <param name="_firm">
    /// Indicates if the <c>ReqPO</c> record should be firmed after accepting the suggested change; optional.
    /// </param>
    /// <returns>
    /// An instance of the appropriate class based on <paramref name="_firm"/>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PMFSeqAcceptChanges newFromForm(
        Args                    _args,
        boolean                 _firm = false)
    {
        PMFSeqAcceptChanges        PMFSeqAcceptChanges;

        if (_firm)
        {
            PMFSeqAcceptChanges = PMFSeqAcceptFirmChanges::construct();
        }
        else
        {
            PMFSeqAcceptChanges = PMFSeqAcceptChanges::construct();
        }

        PMFSeqAcceptChanges.parmDatasource(FormDataUtil::getFormDataSource(_args.record()));

        return PMFSeqAcceptChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>