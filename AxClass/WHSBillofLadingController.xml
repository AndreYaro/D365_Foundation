<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBillofLadingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSBillofLadingController</c> class is used to run print management for <c>WHSBillofLading</c> report.
/// </summary>
class WHSBillofLadingController extends SrsPrintMgmtController implements BatchRetryable
{
    private static const str UsePrintManagementParameterName = 'UsePrintManagement';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::WHS, PrintMgmtNodeType::WHS, PrintMgmtDocumentType::WHSBOL);

        printMgmtReportRun.parmReportRunController(this);

        if (WHSBillOfLadingUseReportPrintManagementParamFlightV2::instance().isEnabled())
        {
            SRSPrintDestinationSettings printDestinationSettings = this.parmReportContract().parmPrintSettings();

            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(printDestinationSettings);
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(printDestinationSettings);
        }
        else
        {
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(this.getDefaultPrintJobSettings()));
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(this.getDefaultPrintJobSettings()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintJobSettings</Name>
				<Source><![CDATA[
    protected container getDefaultPrintJobSettings()
    {
        return SysOperationHelper::base64Decode("");
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    private void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::SalesTable));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

            PrintMgmtReportFormat       printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::WHSBOL);

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported as default, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        if (WHSBillOfLadingUseReportPrintManagementParamFlightV2::instance().isEnabled())
        {
            SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
            if (rdlContract.parameterExists(WHSBillofLadingController::UsePrintManagementParameterName))
            {
                boolean usePrintManagement = rdlContract.getParameter(WHSBillofLadingController::UsePrintManagementParameterName).getValueTyped();
                printMgmtReportRun.parmForcePrintJobSettings(!usePrintManagement);
            }
        }

        if (isValidReference(_transTable))
        {
            // Load from the print management settings
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
            if (printMgmtReportRun.getPrintSettingsCount() == 0)
            {
                // Print with default settings.  We also default to print one original in PDF format when we are trying to
                // print using Print Mgmt information, but don't have a valid table reference.
                // This covers the reprint case where the original transaction record may not be present.

                SRSPrintDestinationSettings printDestinationSettings = printMgmtReportRun.parmDefaultOriginalPrintJobSettings();
                printDestinationSettings.printMediumType(SRSPrintMediumType::File);
                printDestinationSettings.fileFormat(SRSReportFileFormat::PDF);
                printDestinationSettings.fileName("@WAX2173");

                setSettingDetail(PrintMgmtDocInstanceType::Original, printDestinationSettings);
            }

            WHSBillOfLadingPrintMultipleShipmentsContext context = WHSBillOfLadingPrintMultipleShipmentsContext::current();
            if (context && context.parmPrintBillOfLadingCollectionId())
            {
                this.parmFileURLsCollectionId(context.parmPrintBillOfLadingCollectionId());
            }
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLadingList</Name>
				<Source><![CDATA[
    private RecordSortedList billOfLadingList()
    {
        RecordSortedList    billOfLadingList = new RecordSortedList(tableNum(WHSBillOfLading));

        Query               queryLocal    = this.getFirstQuery();
        QueryRun            queryRunLocal = new QueryRun(queryLocal);

        billOfLadingList.sortOrder(fieldNum(WHSBillOfLading, RecId));

        while (queryRunLocal.next())
        {
            if (queryRunLocal.changed(tableNum(WHSBillOfLading)))
            {
                WHSBillOfLading whsBillOfLading = queryRunLocal.get(tableNum(WHSBillOfLading));

                billOfLadingList.ins(whsBillOfLading);
            }
        }

        return billOfLadingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        this.setRanges();

        RecordSortedList    billOfLadingList = this.billOfLadingList();
        WHSBillOfLading     whsBillOfLading;
        LanguageId          languageId = Global::currentUserLanguage();

        while (billOfLadingList.next(whsBillOfLading) && !this.parmCancelRun())
        {
            this.loadPrintSettings(whsBillOfLading, this.findRelatedTable(whsBillOfLading), languageId);
        }

        this.outputReports();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTable</Name>
				<Source><![CDATA[
    protected Common findRelatedTable(WHSBillOfLading _whsBillOfLading)
    {
        return WHSShipmentTable::find(_whsBillOfLading.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    private void setRanges()
    {
        Query                q                    = this.getFirstQuery();

        QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(q, tableNum(WHSBillOfLading));
        QueryBuildRange      queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSBillOfLading, BillOfLadingId));

        if (this.parmArgs().parm())
        {
            queryBuildRange.value(queryValue(this.parmArgs().parm()));
        }
        else if (this.parmArgs().record() && this.parmArgs().dataset() == tableNum(WHSBillOfLading))
        {
            WHSBillOfLading billOfLading = this.parmArgs().record();
            queryBuildRange.value(billOfLading.BillOfLadingId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller, sets the print management, assigns parameter values and runs the report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        WHSBillofLadingController srsReportRun = new WHSBillofLadingController();
        srsReportRun.parmArgs(_args);
        srsReportRun.parmReportName(srsReportRun.reportName());
        srsReportRun.parmShowDialog(_args.parmEnum());
        srsReportRun.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    protected SRSCatalogItemName reportName()
    {
        return ssrsReportStr(WHSBillOfLading, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>