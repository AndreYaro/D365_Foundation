<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankDocument</c> class is the business class of bank document.
/// </summary>
abstract class BankDocument extends Object
{
    BankDocumentTable       documentTable;
    BankDocumentTableMap    documentMap;

    BankAccountTable        bankAccountTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank account.
    /// </summary>
    /// <returns>
    ///     Bank account.
    /// </returns>
    public CompanyBankAccountId getBankAccount()
    {
        return documentMap.parmBankAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    private BankAccountTable getBankAccountTable()
    {
        if (!bankAccountTable)
        {
            bankAccountTable = BankAccountTable::find(this.getBankAccount());
        }

        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document amount.
    /// </summary>
    /// <returns>
    ///     The Bank document amount.
    /// </returns>
    /// <remarks>
    ///     If there is any correction amount, the returned amount includes the correction amount.
    /// </remarks>
    public AmountCur getBankCurrencyAmount()
    {
        return this.getOriginalBankCurrencyAmount() + documentTable.getCorrectionBankCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document currency.
    /// </summary>
    /// <returns>
    ///     Bank document currency.
    /// </returns>
    public CurrencyCode getBankCurrencyCode()
    {
        return this.getBankAccountTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document table.
    /// </summary>
    /// <returns>
    /// The bank document table.
    /// </returns>
    public BankDocumentTable getBankDocumentTable()
    {
        return documentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank transaction type.
    /// </summary>
    /// <returns>
    ///     Bank transaction type.
    /// </returns>
    abstract public BankTransactionType getBankTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether bank document is cancelled.
    /// </summary>
    /// <returns>
    ///     Returns true if bank document is cancelled. Otherwise, returns false.
    /// </returns>
    public NoYesId getCancelled()
    {
        return documentTable.IsCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the correction amount.
    /// </summary>
    /// <returns>
    ///     The correction amount.
    /// </returns>
    public BankReconciliationCorrectionAmount getCorrectionBankCurrencyAmount()
    {
        return documentTable.getCorrectionBankCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBankDocumentState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current bank document state.
    /// </summary>
    /// <returns>
    /// Current bank document state.
    /// </returns>
    public BankDocumentState getCurrentBankDocumentState()
    {
        BankDocumentState bankDocumentState;

        bankDocumentState = BankDocumentState::newFromBankDocument(this);

        return bankDocumentState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document description.
    /// </summary>
    /// <returns>
    ///     Bank document description.
    /// </returns>
    abstract public TransTxt getDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document number.
    /// </summary>
    /// <returns>
    ///     Bank document number.
    /// </returns>
    abstract public Num getDocumentNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document type.
    /// </summary>
    /// <returns>
    ///     Bank document type.
    /// </returns>
    abstract public BankDocumentBookType getDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the bank document is matched.
    /// </summary>
    /// <returns>
    /// Whether the bank document is matched.
    /// </returns>
    public boolean getIsMatched()
    {
        return BankReconciliationMatchingItem::findValidByDocumentRecId(documentTable.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reconield status.
    /// </summary>
    /// <returns>
    /// The reconciled status.
    /// </returns>
    public NoYesId getIsReconciled()
    {
        return documentTable.IsReconciled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the original bank document amount.
    /// </summary>
    /// <returns>
    ///     The Bank document amount.
    /// </returns>
    /// <remarks>
    ///     The amount does not include correction amount.
    /// </remarks>
    public AmountCur getOriginalBankCurrencyAmount()
    {
        return documentMap.parmBankCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank document original status.
    /// </summary>
    /// <returns>
    ///     Bank document original status.
    /// </returns>
    public abstract BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document posted status.
    /// </summary>
    /// <returns>
    ///     Bank document posted status.
    /// </returns>
    public JournalPosted getPosted()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document reference.
    /// </summary>
    /// <returns>
    ///     Bank document reference.
    /// </returns>
    abstract public PaymReference getReference()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document related party account.
    /// </summary>
    /// <returns>
    ///     Bank document related party account.
    /// </returns>
    public AccountNum getRelatedPartyAccount()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company which the related party is from.
    /// </summary>
    /// <returns>
    /// The company which the related party is from.
    /// </returns>
    public CompanyId getRelatedPartyCompany()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related party name.
    /// </summary>
    /// <returns>
    /// The related party name.
    /// </returns>
    public DirPartyName getRelatedPartyName()
    {
        DirPartyName    relatedPartyName;
        AccountNum      relatedPartyAccount;
        CompanyId       company;

        relatedPartyAccount = this.getRelatedPartyAccount();
        company = this.getRelatedPartyCompany();
        if (!company)
        {
            company = curext();
        }

        if (relatedPartyAccount)
        {
            switch (this.getRelatedPartyType())
            {
                case DirPartyRoleType::Customer:
                    changeCompany(company)
                    {
                        relatedPartyName = CustTable::find(relatedPartyAccount).name();
                    }
                    break;

                case DirPartyRoleType::Vendor:
                    changeCompany(company)
                    {
                        relatedPartyName = VendTable::find(relatedPartyAccount).name();
                    }
                    break;
            }
        }

        return relatedPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document related party type.
    /// </summary>
    /// <returns>
    ///     Bank document related party type.
    /// </returns>
    public BankReconciliationRelatedPartyType getRelatedPartyType()
    {
        return DirPartyRoleType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the counter currency if it is provided in the bank document.
    /// </summary>
    /// <returns>
    /// The counter currency.
    /// </returns>
    public CurrencyCode getTransactionCurrency()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the counter amount if it is provided in the bank document.
    /// </summary>
    /// <returns>
    /// The counter amount.
    /// </returns>
    public AmountCur getTransactionCurrencyAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets bank document transaction date.
    /// </summary>
    /// <returns>
    ///     Bank document transaction date.
    /// </returns>
    abstract public TransDate getTransactionDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads source buffer of bank document.
    /// </summary>
    abstract protected void loadSourceBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentTableMap</Name>
				<Source><![CDATA[
    public BankDocumentTableMap parmBankDocumentTableMap(BankDocumentTableMap _documentMap = documentMap)
    {
        documentMap = _documentMap;
        documentTable = BankDocumentTable::findBySource(_documentMap.TableId, _documentMap.RecId);
        this.loadSourceBuffer();

        return documentMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankDocumentTableSource</Name>
				<Source><![CDATA[
    public void setBankDocumentTableSource(
        BankDocumentTable _documentTable,
        BankDocumentTableMap _documentMap)
    {
        documentTable = _documentTable;
        documentMap = _documentMap;

        this.loadSourceBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankAccountTransReconcileStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes bank account transactions reconciled field.
    /// </summary>
    /// <param name="_changeType">
    /// The document status change type.
    /// </param>
    protected void processBankAccountTransReconcileStatus(
        BankDocumentStatusChangeType    _changeType)
    {
        BankAccountTrans    bankAccountTrans;
        NoYes               isReconciled;
        NoYes               isIncluded;
        boolean             isReconcileStatusChanged;

        switch (_changeType)
        {
            case BankDocumentStatusChangeType::Reconcile:
                isReconciled = NoYes::Yes;
                isIncluded   = NoYes::Yes;
                isReconcileStatusChanged = true;
                break;

            case BankDocumentStatusChangeType::ReverseReconcile:
                isReconciled = NoYes::No;
                isIncluded   = NoYes::No;
                isReconcileStatusChanged = true;
                break;
        }

        if (isReconcileStatusChanged)
        {
            ttsBegin;

            if (documentTable.SourceRelationType == tableNum(BankAccountTrans))
            {
                bankAccountTrans = documentMap;
                if (bankAccountTrans.Reconciled != isReconciled)
                {
                    bankAccountTrans.selectForUpdate(true);
                    bankAccountTrans.Reconciled = isReconciled;
                    bankAccountTrans.Included = isIncluded;
                    bankAccountTrans.update();
                }
            }
            else
            {
                update_recordSet bankAccountTrans
                    setting
                        Reconciled = isReconciled, Included = isIncluded
                    where   bankAccountTrans.SourceTableId  == documentTable.SourceRelationType
                        &&  bankAccountTrans.SourceRecId    == documentTable.SourceRecId
                        &&  bankAccountTrans.Reconciled     != isReconciled;
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new bank document based on the given <c>BankDocumentTableMap</c> buffer.
    /// </summary>
    /// <param name="_documentMap">
    /// The given <c>BankDocumentTableMap</c> buffer.
    /// </param>
    /// <returns>
    /// A new bank document.
    /// </returns>
    public static BankDocument construct(BankDocumentTableMap _documentMap)
    {
        BankDocument            document;

        if (BankDocumentTable::findBySource(_documentMap.TableId, _documentMap.RecId))
        {
            document = SysExtensionAppClassFactory::getClassFromSysAttribute(
                classStr(BankDocument),
                new BankDocumentAttribute(_documentMap.parmBankDocumentBookType()));

            if (document != null)
            {
                document.parmBankDocumentTableMap(_documentMap);
            }
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new bank document for the given <c>BankDocumentTable</c> record.
    /// </summary>
    /// <param name = "_documentTable">A <c>BankDocumentTable</c> record.</param>
    /// <returns>A new bank document.</returns>
    public static BankDocument newFromBankDocumentTable(BankDocumentTable _documentTable)
    {
        BankDocumentTableMap documentTableMap = _documentTable.getBankDocumentTableMap();

        BankDocument document = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(BankDocument),
            new BankDocumentAttribute(documentTableMap.parmBankDocumentBookType()));

        if (document != null)
        {
            document.setBankDocumentTableSource(_documentTable, documentTableMap);
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankDocumentTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs the instance of the <c>BankDocumentTableType</c> class
    ///     by given <c>BankDocumentTable</c> record Id.
    /// </summary>
    /// <param name="_recId">
    ///     Given <c>BankDocumentTable</c> record Id.
    /// </param>
    /// <returns>
    ///     An instance of the <c>BankDocumentTableType</c> class.
    /// </returns>
    public static BankDocument newFromBankDocumentTableRecId(RecId _recId)
    {
        BankDocumentTable bankDocumentTable = BankDocumentTable::find(_recId);

        return BankDocument::newFromBankDocumentTable(bankDocumentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDocumentView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs the instance of the <c>BankDocumentTableType</c> class by given <c>BankDocumentTableView</c> buffer.
    /// </summary>
    /// <param name="_documentView">
    ///     Given <c>BankDocumentTableView</c> buffer.
    /// </param>
    /// <returns>
    ///     An instance of the <c>BankDocumentTableView</c> class.
    /// </returns>
    public static BankDocument newFromDocumentView(BankDocumentTableView _documentView)
    {        
        return BankDocument::newFromBankDocumentTableRecId(_documentView.BankDocumentTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceBlankLedgerDimensionForTransactionCorrection</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount replaceBlankLedgerDimensionForTransactionCorrection(BankTransType _bankTransType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBankTransactionCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts bank account transaction correction amount.
    /// </summary>
    /// <param name="_bankAccountTransRecId">
    /// The bank account transaction record id.
    /// </param>
    /// <param name="_correctionAmount">
    /// The correction amount.
    /// </param>
    public static void postBankTransactionCorrection(RefRecId _bankAccountTransRecId, AmountCur _correctionAmount)
    {
        BankAccountTrans            bankAccountTransLocal;

        ttsBegin;

        bankAccountTransLocal = BankAccountTrans::findByRecId_CN(_bankAccountTransRecId, true);

        //update corrected amount
        bankAccountTransLocal.AmountCorrect = _correctionAmount;

        if (!bankAccountTransLocal.BankTransType)
        {
            setPrefix(strFmt("@Bank:BankTransactionTypeShouldBeSpecified",
                bankAccountTransLocal.TransDate,
                bankAccountTransLocal.AmountCur,
                _correctionAmount));

            // Please update it under path Cash and bank management ->
            // Bank statement reconciliation -> Bank transaction ->
            // Update bank transaction type first.
            throw error(
                strFmt("@Bank:PleaseUpdateItFirst",
                    strFmt("%1 -> %2 -> %3 -> %4",
                        "@SYS334036",
                        "@CashManagement:BankStatementReconciliation",
                        "@SYS23684",
                        "@CashManagement:UpdateBankTransType"))
            );
        }

        BankTransType bankTransType = BankTransType::find(bankAccountTransLocal.BankTransType);
        bankAccountTransLocal.LedgerDimension = bankTransType.LedgerDimension;
        if (!bankAccountTransLocal.LedgerDimension)
        {
            bankAccountTransLocal.LedgerDimension = BankDocument::replaceBlankLedgerDimensionForTransactionCorrection(bankTransType);
            if (!bankAccountTransLocal.LedgerDimension)
            {
                throw error("@SYS25151");
            }
        }

        bankAccountTransLocal.update();
        BankAccountReconcile::postBankTransactionCorrection(bankAccountTransLocal.RecId);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseBankTransactionCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses bank account transaction correction amount.
    /// </summary>
    /// <param name="_bankAccountTransRecId">
    /// The bank account transaction record id.
    /// </param>
    internal static void reverseBankTransactionCorrection(RefRecId _bankAccountTransRecId)
    {
        ttsBegin;

        TransDate cancelDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        BankAccountTrans bankAccountTransToReverse = BankAccountTrans::findByRecId_CN(_bankAccountTransRecId, true);
        
        TransactionReversal_Bank transactionReversal_Bank = TransactionReversalBankFactory::newFromBankTrans(
            bankAccountTransToReverse,
            cancelDate,
            '',
            '');

        Args args = new Args();
        args.record(bankAccountTransToReverse);

        transactionReversal_Bank.reversal(args);

        bankAccountTransToReverse.AmountCorrect = 0.0;
        bankAccountTransToReverse.LedgerDimension = 0;
        bankAccountTransToReverse.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndToEndId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of payment.
    /// </summary>
    /// <returns>
    /// The unique identification of payment.
    /// </returns>
    public PaymentEndToEndId getEndToEndId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment identification.
    /// </summary>
    /// <returns>
    /// The payment identification.
    /// </returns>
    public PaymId getPaymId()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>