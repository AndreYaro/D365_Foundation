<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeReportController_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalizeReportController_DE</c> class handles the business logic for the
///    <c>LedgerJournalizeReport_DE</c> report.
/// </summary>
class LedgerJournalizeReportController_DE extends SrsReportRunController implements BatchRetryable
{
    LedgerJournalizeNum     journal;
    PageNo                  oldEndPage;
    #define.PageNo('PageNo')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDE00012, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract    rdlContract;
        LedgerJournalizeReportContract_DE contract = this.parmReportContract().parmRdpContract() as LedgerJournalizeReportContract_DE;
        this.processReportParameters(contract);
        rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract)
        {
            rdlContract.setValue(#PageNo, oldEndPage);
        }

        //register event here to overcome the issue with missing registered
        //events in controller objects on client/server sides
        this.renderingCompleted += eventhandler(LedgerJournalizeReportController_DE::renderingComplete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the  report.
    /// </summary>
    /// <param name="_contract">
    /// Gets the <c>LedgerJournalizeReportContract_DE</c> object.
    /// </param>
    public void processReportParameters(LedgerJournalizeReportContract_DE _contract)
    {
        LedgerJournalizeReport  ledgerJournalizeReport;

        // When args object is initialized.
        if (this.parmArgs().record())
        {
            ledgerJournalizeReport = this.parmArgs().record();
            journal                = ledgerJournalizeReport.JournalizeNum;
            oldEndPage             = LedgerJournalizeReport::priorReportLastPage(ledgerJournalizeReport);
        }

        // Assigning the value to parameter Journal.
        _contract.parmJournalizeNum(journal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPageNo</Name>
				<Source><![CDATA[
    public void setLastPageNo(PageNo  _lastPageNo)
    {
        LedgerJournalizeReport::updatePageNum(journal, _lastPageNo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !_args.record())
        {
            throw error("@SYS82774");
        }
        LedgerJournalizeReportController_DE controller = new LedgerJournalizeReportController_DE();
        controller.parmReportName(ssrsReportStr(LedgerJournalizeReport_DE, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo  executionInfo           = _eventArgs.parmReportExecutionInfo();
        LedgerJournalizeReportController_DE controller  = _sender;

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            controller.setLastPageNo(executionInfo.parmPrintedPhysicalPages());
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>