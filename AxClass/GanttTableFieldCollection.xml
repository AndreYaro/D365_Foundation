<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTableFieldCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttTableFieldCollection
{
    tableId         tableId;
    Map             mapFields;
    MapEnumerator   mapEnumeratorGlobal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the fields map that is used to store field information from a list of fields.
    /// </summary>
    /// <param name="_listFields">
    ///    A list that contains the <c>GanttTableField</c> instances that describe the fields to add to the
    ///    field collection.
    /// </param>
    public void createFromList(List _listFields)
    {
        ListEnumerator  listEnumerator;
        GanttTableField ganttTableField;
        if (this.elements())
        {
            this.removeAll();
        }

        listEnumerator = _listFields.getEnumerator();
        while (listEnumerator && listEnumerator.moveNext())
        {
            ganttTableField = listEnumerator.current();
            mapFields.insert(ganttTableField.id(), ganttTableField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of fields in the collection.
    /// </summary>
    /// <returns>
    ///    An int value that contains the field count.
    /// </returns>
    public int elements()
    {
        return mapFields.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a field by its ID in the field collection.
    /// </summary>
    /// <param name="_fieldId">
    ///    A <c>FieldId</c> value indicating which field to look up.
    /// </param>
    /// <returns>
    ///    A <see cref="T:GanttTableField" /> instance that contains the field data.
    /// </returns>
    public GanttTableField findFieldId(fieldId _fieldId)
    {
        if (mapFields.exists (_fieldId))
        {
            return mapFields.lookup(_fieldId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldName</Name>
				<Source><![CDATA[
    public GanttTableField findFieldName(FieldName  _fieldName,
                                         boolean    _throwErrorIfNotFound = false,
                                         TableName  _tableName            = '')
    {
        GanttTableField ganttTableField;
        ganttTableField = this.findFieldId(fieldname2id(tableId, _fieldName));

        if (!ganttTableField && _throwErrorIfNotFound)
        {
            throw error(GanttTableField::txtNotExist(_tableName, _fieldName));
        }

        return ganttTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first field in the field collection.
    /// </summary>
    /// <returns>
    ///    A <see cref="T:GanttTableFieldCollection" /> that contains the field data.
    /// </returns>
    public GanttTableField findFirst()
    {
        mapEnumeratorGlobal = mapFields.getEnumerator();

        if (mapEnumeratorGlobal && mapEnumeratorGlobal.moveNext())
        {
            return mapEnumeratorGlobal.currentValue();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the next field in the field collection.
    /// </summary>
    /// <returns>
    ///    A <see cref="T:GanttTableField" /> that contains the field data.
    /// </returns>
    public GanttTableField findNext()
    {
        if (mapEnumeratorGlobal == null)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        if (mapEnumeratorGlobal.moveNext())
        {
            return mapEnumeratorGlobal.currentValue();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a specific field in the field collection from the current table that is associated with the
    ///    collection.
    /// </summary>
    /// <param name="_fieldId">
    ///    A <c>FieldId</c> value that identifies which field to add to the collection.
    /// </param>
    /// <returns>
    ///    true if the method was successful; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <c>_fieldId</c> parameter is null.
    /// </exception>
    public boolean insertFieldId(fieldId _fieldId)
    {
        GanttTableField ganttTableField;

        if (!_fieldId)
        {
            throw error(strfmt("@SYS27147", classstr(GanttTableFieldCollection)));
        }

        ganttTableField = GanttTableField::newFieldData(tableId, _fieldId);

        return mapFields.insert(ganttTableField.id(), ganttTableField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(tableId _tableId)
    {
        tableId     = _tableId;
        mapFields   = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all fields from the field collection.
    /// </summary>
    public void removeAll()
    {
        mapFields = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttTableFieldCollection construct(tableId _tableId)
    {
        return new GanttTableFieldCollection(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>listAddFieldId</Name>
				<Source><![CDATA[
    public static List listAddFieldId(tableId   _tableId,
                                      fieldId   _fieldId,
                                      List      _addToEndOfList = null)
    {
        GanttTableField ganttTableField;

        if (!_tableId || !_fieldId)
        {
            throw error(strfmt("@SYS27147", classstr(GanttTableFieldCollection)));
        }

        ganttTableField = GanttTableField::newFieldData(_tableId, _fieldId);

        if (_addToEndOfList == null)
        {
            _addToEndOfList = new List(Types::Class);
        }

        _addToEndOfList.addEnd(ganttTableField);

        return _addToEndOfList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listAddFieldName</Name>
				<Source><![CDATA[
    public static List listAddFieldName(tableId     _tableId,
                                        FieldName   _fieldName,
                                        List        _addToEndOfList = null)
    {
        fieldId fieldId;

        fieldId = fieldname2id(_tableId, _fieldName);

        if (!_tableId || !fieldId || !_fieldName)
        {
            throw error(strfmt("@SYS27147", classstr(GanttTableFieldCollection)));
        }

        return GanttTableFieldCollection::listAddFieldId(_tableId, fieldId, _addToEndOfList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>listAllFields</Name>
				<Source><![CDATA[
    /* There is no remove() method on Lists, therefore if you want to exclude some fields,
    then add their ids to Set and pass it here using parameter _setExcludeFieldIds.
    Lists are used in order to keep fields sequance.
    */
    static public List listAllFields(tableId   _tableId,
                                     boolean   _includeSystemFields = true,
                                     List      _addToList           = null,
                                     Set       _setExcludeFieldIds  = null)
    {
        fieldId         fieldId;
        DictTable       dictTable   = new DictTable(_tableId);

        int             i;
        GanttTableField ganttTableField;

        if (_addToList == null)
        {
            _addToList = new List(Types::Class);
        }

        for (i=1; i<=dictTable.fieldCnt(); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i);

            if (_setExcludeFieldIds && _setExcludeFieldIds.in(fieldId))
            {
                continue;
            }

            ganttTableField = GanttTableField::newFieldData(_tableId, fieldId);

            if (_includeSystemFields)
            {
                _addToList.addEnd(ganttTableField);
            }
            else
            {
                if (!ganttTableField.isSystem())
                {
                    _addToList.addEnd(ganttTableField);
                }
            }
        }

        return _addToList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listDefaultFields</Name>
				<Source><![CDATA[
    public static List listDefaultFields(tableId _tableId,
                                         Set     _setExcludeFieldIds = null)
    {
        #define.recId('recId')

        List listDefaultFields;
        // add all user-created fields
        listDefaultFields = GanttTableFieldCollection::listAllFields(_tableId, false, null, _setExcludeFieldIds);

        // add RecId field
        listDefaultFields = GanttTableFieldCollection::listAddFieldName(_tableId, #recId, listDefaultFields);

        return listDefaultFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>