<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimDBTriggerBuilderForWHSInventReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimDBTriggerBuilderForWHSInventReserve</c> class is responsible for synchronizing the update trigger to table <c>InventDim</c> on updating
/// <c>WHSInventReserve</c>.
/// </summary>
final internal class InventDimDBTriggerBuilderForWHSInventReserve extends ApplicationSQLObjects
{
    public static const str inventDimUpdateTriggerName = 'INVENTDIMUPDATETRIGGERFORWHSINVENTRESERVE';
    private static const str insertedTableName = 'INSERTED';
    private static const str deletedTableName = 'DELETED';

    private str inventReserveTableName;
    private str inventReservePartition;
    private str inventReserveDataAreaId;
    private str inventReserveInventDimId;
    private str inventReserveConfigId;
    private str inventReserveInventBatchId;
    private str inventReserveInventColorId;
    private str inventReserveInventLocationId;
    private str inventReserveInventSerialId;
    private str inventReserveInventSiteId;
    private str inventReserveInventSizeId;
    private str inventReserveInventStatusId;
    private str inventReserveInventStyleId;
    private str inventReserveInventVersionId;
    private str inventReserveLicensePlateId;
    private str inventReserveWMSLocationId;
    private str inventReserveWMSPalletId;
    private str inventReserveInventGtdId_RU;
    private str inventReserveInventOwnerId_RU;
    private str inventReserveInventProfileId_RU;
    private str inventReserveInventDimension1;
    private str inventReserveInventDimension2;
    private str inventReserveInventDimension3;
    private str inventReserveInventDimension4;
    private str inventReserveInventDimension5;
    private str inventReserveInventDimension6;
    private str inventReserveInventDimension7;
    private str inventReserveInventDimension8;
    private str inventReserveInventDimension9;
    private str inventReserveInventDimension10;
    private str inventReserveInventDimension11;
    private str inventReserveInventDimension12;

    private str inventDimTableName;
    private str inventDimPartition;
    private str inventDimDataAreaId;
    private str inventDimRecId;
    private str inventDimInventDimId;
    private str inventDimConfigId;
    private str inventDimInventBatchId;
    private str inventDimInventColorId;
    private str inventDimInventLocationId;
    private str inventDimInventSerialId;
    private str inventDimInventSiteId;
    private str inventDimInventSizeId;
    private str inventDimInventStatusId;
    private str inventDimInventStyleId;
    private str inventDimInventVersionId;
    private str inventDimLicensePlateId;
    private str inventDimWMSLocationId;
    private str inventDimWMSPalletId;
    private str inventDimInventGtdId_RU;
    private str inventDimInventOwnerId_RU;
    private str inventDimInventProfileId_RU;
    private str inventDimInventDimension1;
    private str inventDimInventDimension2;
    private str inventDimInventDimension3;
    private str inventDimInventDimension4;
    private str inventDimInventDimension5;
    private str inventDimInventDimension6;
    private str inventDimInventDimension7;
    private str inventDimInventDimension8;
    private str inventDimInventDimension9;
    private str inventDimInventDimension10;
    private str inventDimInventDimension11;
    private str inventDimInventDimension12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSqlObjects</Name>
				<Source><![CDATA[
    protected boolean createSqlObjects()
    {
        boolean isSuccessful = super();

        if (WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
        {
            WHSInventReserveInventDimEnable::markDataUpgradeIncomplete();
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTriggers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates triggers on <c>InventDim</c> table.
    /// </summary>
    protected boolean createTriggers()
    {
        //If skip feature toggle is on, skip creating triggers
        if (WHSInventReserveSkipDBTriggerCreationFlight::instance().isEnabled())
        {
            //Adding this just in case feature is on and off.
            this.dropTrigger(InventDimDBTriggerBuilderForWHSInventReserve::inventDimUpdateTriggerName);

            return true;
        }

        boolean isSuccessful;

        var logger = InventInstrumentationLogger::createLogger(classStr(InventDimDBTriggerBuilderForWHSInventReserve));
        var activity = logger.activity(methodStr(InventDimDBTriggerBuilderForWHSInventReserve, createTriggers));
        using (var activityContext = logger.activityContext(activity))
        {
            if (InventSumInventDimDBTriggerSkipCreationFlight::instance().isEnabled())
            {
                var helper = InventSumInventDimTriggerSQLStatementHelper::construct();
                isSuccessful = helper.existTrigger(InventDimDBTriggerBuilderForWHSInventReserve::inventDimUpdateTriggerName)
                            || this.createInventDimUpdateTrigger();
            }
            else
            {
                isSuccessful = this.createInventDimUpdateTrigger();
            }
        }
        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimUpdateTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the update trigger on table <c>InventDim</c>.
    /// </summary>
    /// <returns>
    /// True if the trigger creation was successful; otherwise, false.
    /// </returns>
    private boolean createInventDimUpdateTrigger()
    {
        // Drop the trigger.
        boolean isSuccessful = this.dropTrigger(InventDimDBTriggerBuilderForWHSInventReserve::inventDimUpdateTriggerName);

        if (isSuccessful && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            SysSQLStatementText sqlStatementText = this.getInventDimUpdateTriggerSqlStmt();
            isSuccessful = this.executeSQLStatement(sqlStatementText);
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimUpdateTriggerSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL statement to create update trigger on <c>InventDim</c>.
    /// </summary>
    /// <returns>The SQL statement to create update trigger.</returns>
    /// <remarks>
    /// CREATE TRIGGER INVENTDIMUPDATETRIGGERFORWHSINVENTRESERVE ON dbo.INVENTDIM
    /// AFTER UPDATE
    /// AS
    /// BEGIN
    ///     SET NOCOUNT ON;
    ///     IF (UPDATE(CONFIGID) OR UPDATE(INVENTSIZEID) OR UPDATE(INVENTCOLORID) OR UPDATE(INVENTSTYLEID) OR UPDATE(INVENTVERSIONID)
    ///        OR UPDATE(INVENTSITEID) OR UPDATE(INVENTLOCATIONID) OR UPDATE(INVENTBATCHID) OR UPDATE(WMSLOCATIONID) OR UPDATE(WMSPALLETID)
    ///        OR UPDATE(LICENSEPLATEID) OR UPDATE(INVENTSTATUSID) OR UPDATE(INVENTSERIALID) OR UPDATE(INVENTDIMENSION1) OR UPDATE(INVENTDIMENSION2)
    ///        OR UPDATE(INVENTDIMENSION3) OR UPDATE(INVENTDIMENSION4) OR UPDATE(INVENTDIMENSION5) OR UPDATE(INVENTDIMENSION6) OR UPDATE(INVENTDIMENSION7)
    ///        OR UPDATE(INVENTDIMENSION8) OR UPDATE(INVENTDIMENSION9) OR UPDATE(INVENTDIMENSION10) OR UPDATE(INVENTDIMENSION11) OR UPDATE(INVENTDIMENSION12)
    ///        OR UPDATE(INVENTGTDID_RU) OR UPDATE(INVENTPROFILEID_RU) OR UPDATE(INVENTOWNERID_RU))
    ///     BEGIN
    ///         UPDATE WHSINVENTRESERVE
    ///         SET WHSINVENTRESERVE.CONFIGID = INVENTDIM.CONFIGID,
    ///             WHSINVENTRESERVE.INVENTSIZEID = INVENTDIM.INVENTSIZEID,
    ///             WHSINVENTRESERVE.INVENTCOLORID = INVENTDIM.INVENTCOLORID,
    ///             WHSINVENTRESERVE.INVENTSTYLEID = INVENTDIM.INVENTSTYLEID,
    ///             WHSINVENTRESERVE.INVENTVERSIONID = INVENTDIM.INVENTVERSIONID,
    ///             WHSINVENTRESERVE.INVENTSITEID = INVENTDIM.INVENTSITEID,
    ///             WHSINVENTRESERVE.INVENTLOCATIONID = INVENTDIM.INVENTLOCATIONID,
    ///             WHSINVENTRESERVE.INVENTBATCHID = INVENTDIM.INVENTBATCHID,
    ///             WHSINVENTRESERVE.WMSLOCATIONID = INVENTDIM.WMSLOCATIONID,
    ///             WHSINVENTRESERVE.WMSPALLETID = INVENTDIM.WMSPALLETID,
    ///             WHSINVENTRESERVE.LICENSEPLATEID = INVENTDIM.LICENSEPLATEID,
    ///             WHSINVENTRESERVE.INVENTSTATUSID = INVENTDIM.INVENTSTATUSID,
    ///             WHSINVENTRESERVE.INVENTSERIALID = INVENTDIM.INVENTSERIALID,
    ///             WHSINVENTRESERVE.INVENTDIMENSION1 = INVENTDIM.INVENTDIMENSION1,
    ///             WHSINVENTRESERVE.INVENTDIMENSION2 = INVENTDIM.INVENTDIMENSION2,
    ///             WHSINVENTRESERVE.INVENTDIMENSION3 = INVENTDIM.INVENTDIMENSION3,
    ///             WHSINVENTRESERVE.INVENTDIMENSION4 = INVENTDIM.INVENTDIMENSION4,
    ///             WHSINVENTRESERVE.INVENTDIMENSION5 = INVENTDIM.INVENTDIMENSION5,
    ///             WHSINVENTRESERVE.INVENTDIMENSION6 = INVENTDIM.INVENTDIMENSION6,
    ///             WHSINVENTRESERVE.INVENTDIMENSION7 = INVENTDIM.INVENTDIMENSION7,
    ///             WHSINVENTRESERVE.INVENTDIMENSION8 = INVENTDIM.INVENTDIMENSION8,
    ///             WHSINVENTRESERVE.INVENTDIMENSION9 = INVENTDIM.INVENTDIMENSION9,
    ///             WHSINVENTRESERVE.INVENTDIMENSION10 = INVENTDIM.INVENTDIMENSION10,
    ///             WHSINVENTRESERVE.INVENTDIMENSION11 = INVENTDIM.INVENTDIMENSION11,
    ///             WHSINVENTRESERVE.INVENTDIMENSION12 = INVENTDIM.INVENTDIMENSION12,
    ///             WHSINVENTRESERVE.INVENTGTDID_RU = INVENTDIM.INVENTGTDID_RU,
    ///             WHSINVENTRESERVE.INVENTPROFILEID_RU = INVENTDIM.INVENTPROFILEID_RU,
    ///             WHSINVENTRESERVE.INVENTOWNERID_RU = INVENTDIM.INVENTOWNERID_RU
    ///         FROM WHSINVENTRESERVE
    ///         JOIN INVENTDIM
    ///             ON WHSINVENTRESERVE.PARTITION = INVENTDIM.PARTITION
    ///             AND WHSINVENTRESERVE.DATAAREAID = INVENTDIM.DATAAREAID
    ///             AND WHSINVENTRESERVE.INVENTDIMID = INVENTDIM.INVENTDIMID
    ///         JOIN INSERTED
    ///             ON INVENTDIM.RECID = INSERTED.RECID
    ///         JOIN DELETED
    ///             ON INSERTED.RECID = DELETED.RECID;
    ///     END
    ///     SET NOCOUNT OFF;
    /// END
    /// </remarks>
    private SysSQLStatementText getInventDimUpdateTriggerSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'CREATE TRIGGER ' + InventDimDBTriggerBuilderForWHSInventReserve::inventDimUpdateTriggerName + ' ON ' + inventDimTableName;
        sqlStmt += ' AFTER UPDATE AS BEGIN\r\n';
        sqlStmt += ' SET NOCOUNT ON;';
        sqlStmt += ' IF (UPDATE(CONFIGID) OR UPDATE(INVENTSIZEID) OR UPDATE(INVENTCOLORID) OR UPDATE(INVENTSTYLEID) OR UPDATE(INVENTVERSIONID)';
        sqlStmt += ' OR UPDATE(INVENTSITEID) OR UPDATE(INVENTLOCATIONID) OR UPDATE(INVENTBATCHID) OR UPDATE(WMSLOCATIONID) OR UPDATE(WMSPALLETID)';
        sqlStmt += ' OR UPDATE(LICENSEPLATEID) OR UPDATE(INVENTSTATUSID) OR UPDATE(INVENTSERIALID) OR UPDATE(INVENTDIMENSION1) OR UPDATE(INVENTDIMENSION2)';
        sqlStmt += ' OR UPDATE(INVENTDIMENSION3) OR UPDATE(INVENTDIMENSION4) OR UPDATE(INVENTDIMENSION5) OR UPDATE(INVENTDIMENSION6) OR UPDATE(INVENTDIMENSION7)';
        sqlStmt += ' OR UPDATE(INVENTDIMENSION8) OR UPDATE(INVENTDIMENSION9) OR UPDATE(INVENTDIMENSION10) OR UPDATE(INVENTDIMENSION11) OR UPDATE(INVENTDIMENSION12)';
        sqlStmt += ' OR UPDATE(INVENTGTDID_RU) OR UPDATE(INVENTPROFILEID_RU) OR UPDATE(INVENTOWNERID_RU)) BEGIN';
        sqlStmt += ' UPDATE ' + inventReserveTableName + ' SET ';

        if (inventReserveInventDimension1 && inventDimInventDimension1)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension1 + ' = ' + inventDimTableName + '.' + inventDimInventDimension1 + ', ';
        }

        if (inventReserveInventDimension2 && inventDimInventDimension2)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension2 + ' = ' + inventDimTableName + '.' + inventDimInventDimension2 + ', ';
        }

        if (inventReserveInventDimension3 && inventDimInventDimension3)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension3 + ' = ' + inventDimTableName + '.' + inventDimInventDimension3 + ', ';
        }

        if (inventReserveInventDimension4 && inventDimInventDimension4)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension4 + ' = ' + inventDimTableName + '.' + inventDimInventDimension4 + ', ';
        }

        if (inventReserveInventDimension5 && inventDimInventDimension5)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension5 + ' = ' + inventDimTableName + '.' + inventDimInventDimension5 + ', ';
        }

        if (inventReserveInventDimension6 && inventDimInventDimension6)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension6 + ' = ' + inventDimTableName + '.' + inventDimInventDimension6 + ', ';
        }

        if (inventReserveInventDimension7 && inventDimInventDimension7)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension7 + ' = ' + inventDimTableName + '.' + inventDimInventDimension7 + ', ';
        }

        if (inventReserveInventDimension8 && inventDimInventDimension8)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension8 + ' = ' + inventDimTableName + '.' + inventDimInventDimension8 + ', ';
        }

        if (inventReserveInventDimension9 && inventDimInventDimension9)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension9 + ' = ' + inventDimTableName + '.' + inventDimInventDimension9 + ', ';
        }

        if (inventReserveInventDimension10 && inventDimInventDimension10)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension10 + ' = ' + inventDimTableName + '.' + inventDimInventDimension10 + ', ';
        }

        if (inventReserveInventDimension11 && inventDimInventDimension11)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension11 + ' = ' + inventDimTableName + '.' + inventDimInventDimension11 + ', ';
        }

        if (inventReserveInventDimension12 && inventDimInventDimension12)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventDimension12 + ' = ' + inventDimTableName + '.' + inventDimInventDimension12 + ', ';
        }

        if (inventReserveInventGtdId_RU && inventDimInventGtdId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventGtdId_RU + ' = ' + inventDimTableName + '.' + inventDimInventGtdId_RU + ', ';
        }

        if (inventReserveInventProfileId_RU && inventDimInventProfileId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventProfileId_RU + ' = ' + inventDimTableName + '.' + inventDimInventProfileId_RU + ', ';
        }

        if (inventReserveInventOwnerId_RU && inventDimInventOwnerId_RU)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventOwnerId_RU + ' = ' + inventDimTableName + '.' + inventDimInventOwnerId_RU + ', ';
        }

        if (inventReserveConfigId && inventDimConfigId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveConfigId + ' = ' + inventDimTableName + '.' + inventDimConfigId + ', ';
        }

        if (inventReserveInventSizeId && inventDimInventSizeId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventSizeId + ' = ' + inventDimTableName + '.' + inventDimInventSizeId + ', ';
        }

        if (inventReserveInventColorId && inventDimInventColorId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventColorId + ' = ' + inventDimTableName + '.' + inventDimInventColorId + ', ';
        }

        if (inventReserveInventStyleId && inventDimInventStyleId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventStyleId + ' = ' + inventDimTableName + '.' + inventDimInventStyleId + ', ';
        }

        if (inventReserveInventVersionId && inventDimInventVersionId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventVersionId + ' = ' + inventDimTableName + '.' + inventDimInventVersionId + ', ';
        }

        if (inventReserveWMSLocationId && inventDimWMSLocationId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveWMSLocationId + ' = ' + inventDimTableName + '.' + inventDimWMSLocationId + ', ';
        }
        if (inventReserveWMSPalletId && inventDimWMSPalletId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveWMSPalletId + ' = ' + inventDimTableName + '.' + inventDimWMSPalletId + ', ';
        }

        if (inventReserveLicensePlateId && inventDimLicensePlateId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveLicensePlateId + ' = ' + inventDimTableName + '.' + inventDimLicensePlateId + ', ';
        }

        if (inventReserveInventStatusId && inventDimInventStatusId)
        {
            sqlStmt += inventReserveTableName + '.' + inventReserveInventStatusId + ' = ' + inventDimTableName + '.' + inventDimInventStatusId + ', ';
        }

        // The following dimension has the same configurtion key as WHSInventReserve - LogisticsBasic
        sqlStmt += inventReserveTableName + '.' + inventReserveInventSiteId + ' = ' + inventDimTableName + '.' + inventDimInventSiteId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventLocationId + ' = ' + inventDimTableName + '.' + inventDimInventLocationId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventBatchId + ' = ' + inventDimTableName + '.' + inventDimInventBatchId + ', ';
        sqlStmt += inventReserveTableName + '.' + inventReserveInventSerialId + ' = ' + inventDimTableName + '.' + inventDimInventSerialId + ' ';
        
        sqlStmt += 'FROM ' + inventReserveTableName + ' JOIN ' + inventDimTableName + ' ';
        sqlStmt += 'ON ' + inventReserveTableName + '.' + inventReservePartition + ' = ' + inventDimTableName + '.' + inventDimPartition + ' ';
        sqlStmt += 'AND ' + inventReserveTableName + '.' + inventReserveDataAreaId + ' = ' + inventDimTableName + '.' + inventDimDataAreaId + ' ';
        sqlStmt += 'AND ' + inventReserveTableName + '.' + inventReserveInventDimId + ' = ' + inventDimTableName + '.' + inventDimInventDimId + ' ';

        sqlStmt += 'JOIN ' + InventDimDBTriggerBuilderForWHSInventReserve::insertedTableName + ' ';
        sqlStmt += 'ON ' + inventDimTableName + '.' + inventDimRecId + ' = ' + InventDimDBTriggerBuilderForWHSInventReserve::insertedTableName + '.' + inventDimRecId + ' ';
 
        sqlStmt += 'JOIN ' + InventDimDBTriggerBuilderForWHSInventReserve::deletedTableName + ' ';
        sqlStmt += 'ON ' + InventDimDBTriggerBuilderForWHSInventReserve::insertedTableName + '.' + inventDimRecId + ' = ' + InventDimDBTriggerBuilderForWHSInventReserve::deletedTableName + '.' + inventDimRecId + ' ';
        sqlStmt += ';\r\n';     

        sqlStmt += 'END ';
        sqlStmt += 'SET NOCOUNT OFF; ';

        sqlStmt += 'END';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = InventDimDBTriggerBuilderForWHSInventReserve::contruct();

        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>InventDimDBTriggerBuilderForWHSInventReserve</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>InventDimDBTriggerBuilderForWHSInventReserve</c> class.</returns>
    public static InventDimDBTriggerBuilderForWHSInventReserve contruct()
    {
        return new InventDimDBTriggerBuilderForWHSInventReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);        
        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            SysDictTable inventReserveDictTable     = new SysDictTable(tableNum(WHSInventReserve));
            inventReserveTableName                  = inventReserveDictTable.name(DbBackend::Sql);
            inventReservePartition                  = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, Partition)).name(DbBackend::Native);
            inventReserveDataAreaId                 = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, DataAreaId)).name(DbBackend::Native);
            inventReserveInventDimId                = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimId)).name(DbBackend::Native);
            inventReserveConfigId                   = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, Configid)).name(DbBackend::Native);
            inventReserveInventBatchId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventBatchId)).name(DbBackend::Native);
            inventReserveInventColorId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventColorId)).name(DbBackend::Native);
            inventReserveInventLocationId           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventLocationId)).name(DbBackend::Native);
            inventReserveInventSerialId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSerialId)).name(DbBackend::Native);
            inventReserveInventSiteId               = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSiteId)).name(DbBackend::Native);
            inventReserveInventSizeId               = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventSizeId)).name(DbBackend::Native);
            inventReserveInventStatusId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventStatusId)).name(DbBackend::Native);
            inventReserveInventStyleId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventStyleId)).name(DbBackend::Native);
            inventReserveInventVersionId            = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventVersionId)).name(DbBackend::Native);
            inventReserveLicensePlateId             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, LicensePlateId)).name(DbBackend::Native);
            inventReserveWMSLocationId              = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, wMSLocationId)).name(DbBackend::Native);
            inventReserveWMSPalletId                = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, wMSPalletId)).name(DbBackend::Native);
            inventReserveInventGtdId_RU             = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventGtdId_RU)).name(DbBackend::Native);
            inventReserveInventOwnerId_RU           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventOwnerId_RU)).name(DbBackend::Native);
            inventReserveInventProfileId_RU         = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventProfileId_RU)).name(DbBackend::Native);
            inventReserveInventDimension1           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension1)).name(DbBackend::Native);
            inventReserveInventDimension2           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension2)).name(DbBackend::Native);
            inventReserveInventDimension3           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension3)).name(DbBackend::Native);
            inventReserveInventDimension4           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension4)).name(DbBackend::Native);
            inventReserveInventDimension5           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension5)).name(DbBackend::Native);
            inventReserveInventDimension6           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension6)).name(DbBackend::Native);
            inventReserveInventDimension7           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension7)).name(DbBackend::Native);
            inventReserveInventDimension8           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension8)).name(DbBackend::Native);
            inventReserveInventDimension9           = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension9)).name(DbBackend::Native);
            inventReserveInventDimension10          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension10)).name(DbBackend::Native);
            inventReserveInventDimension11          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension11)).name(DbBackend::Native);
            inventReserveInventDimension12          = inventReserveDictTable.fieldObject(fieldNum(WHSInventReserve, InventDimension12)).name(DbBackend::Native);

            SysDictTable inventDimDictTable     = new SysDictTable(tableNum(InventDim));
            inventDimTableName                  = inventDimDictTable.name(DbBackend::Sql);
            inventDimPartition                  = inventDimDictTable.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Native);
            inventDimDataAreaId                 = inventDimDictTable.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Native);
            inventDimRecId                      = inventDimDictTable.fieldObject(fieldNum(InventDim, RecId)).name(DbBackend::Native);
            inventDimInventDimId                = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Native);
            inventDimConfigId                   = inventDimDictTable.fieldObject(fieldNum(InventDim, Configid)).name(DbBackend::Native);
            inventDimInventBatchId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventBatchId)).name(DbBackend::Native);
            inventDimInventColorId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Native);
            inventDimInventLocationId           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventLocationId)).name(DbBackend::Native);
            inventDimInventSerialId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSerialId)).name(DbBackend::Native);
            inventDimInventSiteId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Native);
            inventDimInventSizeId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Native);
            inventDimInventStatusId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStatusId)).name(DbBackend::Native);
            inventDimInventStyleId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Native);
            inventDimInventVersionId            = inventDimDictTable.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Native);
            inventDimLicensePlateId             = inventDimDictTable.fieldObject(fieldNum(InventDim, LicensePlateId)).name(DbBackend::Native);
            inventDimWMSLocationId              = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSLocationId)).name(DbBackend::Native);
            inventDimWMSPalletId                = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSPalletId)).name(DbBackend::Native);
            inventDimInventGtdId_RU             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventGtdId_RU)).name(DbBackend::Native);
            inventDimInventOwnerId_RU           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventOwnerId_RU)).name(DbBackend::Native);
            inventDimInventProfileId_RU         = inventDimDictTable.fieldObject(fieldNum(InventDim, InventProfileId_RU)).name(DbBackend::Native);
            inventDimInventDimension1           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension1)).name(DbBackend::Native);
            inventDimInventDimension2           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension2)).name(DbBackend::Native);
            inventDimInventDimension3           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension3)).name(DbBackend::Native);
            inventDimInventDimension4           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension4)).name(DbBackend::Native);
            inventDimInventDimension5           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension5)).name(DbBackend::Native);
            inventDimInventDimension6           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension6)).name(DbBackend::Native);
            inventDimInventDimension7           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension7)).name(DbBackend::Native);
            inventDimInventDimension8           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension8)).name(DbBackend::Native);
            inventDimInventDimension9           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension9)).name(DbBackend::Native);
            inventDimInventDimension10          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension10)).name(DbBackend::Native);
            inventDimInventDimension11          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension11)).name(DbBackend::Native);
            inventDimInventDimension12          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension12)).name(DbBackend::Native);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTriggers</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void buildTriggers()
    {
        #OCCRetryCount
        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            try
            {
                var builder = InventDimDBTriggerBuilderForWHSInventReserve::contruct();
                builder.createSqlObjects();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>