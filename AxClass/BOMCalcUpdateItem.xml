<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcUpdateItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomCalcUpdateItem
{
    // Transfer cost price
    NoYes                       costPriceTransfer;
    NoYes                       costPriceInclInUnitPrice;
    NoYes                       costPriceRoundOff;

    // Transfer sales price
    NoYes                       salesPriceTransfer;
    NoYes                       salesPriceInclInUnitPrice;
    NoYes                       salesPriceRoundOff;

    CostingVersionId            costingVersionId;
    TransDate                   calcDate;
    BOMCalcCostingVersionUpdate calcCostingVersionUpdate;
    InventSiteId                siteId;

    // Temporary calculation data to be transferred to the item
    BOMCalcTable                bomCalcTableTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allParamEmpty</Name>
				<Source><![CDATA[
    boolean allParamEmpty()
    {
        // all parameters are empty
        if (!costPriceTransfer && !salesPriceTransfer)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    void initFromBuffer(BOMCalcTable _bomCalcTable)
    {
        bomCalcTableTmp.data(_bomCalcTable);
        bomCalcTableTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(
        NoYes                       _costPriceTransfer,
        NoYes                       _costPriceInclInUnitPrice,
        NoYes                       _costPriceRoundOff,
        NoYes                       _salesPriceTransfer,
        NoYes                       _salesPriceInclInUnitPrice,
        NoYes                       _salesPriceRoundOff,
        CostingVersionId            _costingVersionId,
        TransDate                   _calcDate,
        BOMCalcCostingVersionUpdate _calcCostingVersionUpdate,
        InventSiteId                _newSiteId
        )
    {
        // Transfer cost price
        this.parmCostPriceTransfer(_costPriceTransfer);
        this.parmCostPriceInclInUnitPrice(_costPriceInclInUnitPrice);
        this.parmCostPriceRoundOff(_costPriceRoundOff);

        // Transfer sales price
        this.parmSalesPriceTransfer(_salesPriceTransfer);
        this.parmSalesPriceInclInUnitPrice(_salesPriceInclInUnitPrice);
        this.parmSalesPriceRoundOff(_salesPriceRoundOff);

        this.parmCostingVersionId(_costingVersionId);
        this.parmCalcDate(_calcDate);
        this.parmCalcCostingVersionUpdate(_calcCostingVersionUpdate);

        this.parmSiteId(_newSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needOptimization</Name>
				<Source><![CDATA[
    boolean needOptimization()
    {
        while select count(RecId) from bomCalcTableTmp
            group by ItemId
        {
            if (bomCalcTableTmp.RecId > 1)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        bomCalcTableTmp.setTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimizeBuffer</Name>
				<Source><![CDATA[
    void optimizeBuffer()
    {
        Map         mapMaxCalcIdPerItem         = new Map(Types::String, Types::String);
        Set         setUseCombinationCostPrice  = new Set(Types::String);
        InventTable inventTableDimCombination;
        str         key;
        str         value;
        str         lastValue;

        // init set
        while select ItemId from inventTableDimCombination
            where inventTableDimCombination.ItemDimCostPrice == NoYes::Yes
        {
            setUseCombinationCostPrice.add(inventTableDimCombination.ItemId);
        }

        // init map
        while select maxof(PriceCalcId) from bomCalcTableTmp
            group by ItemId, InventDimId
        {
            // split by dimentions if item parameter 'Use combination cost price' is marked
            if (setUseCombinationCostPrice.in(bomCalcTableTmp.ItemId))
            {
                key = bomCalcTableTmp.ItemId + ' ' + bomCalcTableTmp.InventDimId;
                mapMaxCalcIdPerItem.insert(key, bomCalcTableTmp.PriceCalcId);
            }
            else
            {
                key = bomCalcTableTmp.ItemId;
                if (mapMaxCalcIdPerItem.exists(key))
                {
                    lastValue = mapMaxCalcIdPerItem.lookup(key);
                }
                else
                {
                    lastValue = '';
                }
                value = bomCalcTableTmp.PriceCalcId > lastValue ? bomCalcTableTmp.PriceCalcId : lastValue;
                mapMaxCalcIdPerItem.insert(key, value);
            }
        }

        // delete previous item's calculation data and leave only latest
        while select forupdate bomCalcTableTmp
        {
            if (setUseCombinationCostPrice.in(bomCalcTableTmp.ItemId))
            {
                key = bomCalcTableTmp.ItemId + ' ' + bomCalcTableTmp.InventDimId;
            }
            else
            {
                key = bomCalcTableTmp.ItemId;
            }

            if (mapMaxCalcIdPerItem.lookup(key) != bomCalcTableTmp.PriceCalcId)
            {
                bomCalcTableTmp.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcCostingVersionUpdate</Name>
				<Source><![CDATA[
    public BOMCalcCostingVersionUpdate parmCalcCostingVersionUpdate(BOMCalcCostingVersionUpdate _calcCostingVersionUpdate = calcCostingVersionUpdate)
    {
        calcCostingVersionUpdate = _calcCostingVersionUpdate;
        return calcCostingVersionUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDate</Name>
				<Source><![CDATA[
    public TransDate parmCalcDate(TransDate _calcDate = calcDate)
    {
        calcDate = _calcDate;
        return calcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostingVersionId</Name>
				<Source><![CDATA[
    public CostingVersionId parmCostingVersionId(CostingVersionId _costingVersionId = costingVersionId)
    {
        costingVersionId = _costingVersionId;
        return costingVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceInclInUnitPrice</Name>
				<Source><![CDATA[
    // Include misc. charges in cost price
    public NoYes parmCostPriceInclInUnitPrice(NoYes _costPriceInclInUnitPrice = costPriceInclInUnitPrice)
    {
        costPriceInclInUnitPrice = _costPriceInclInUnitPrice;
        return costPriceInclInUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceRoundOff</Name>
				<Source><![CDATA[
    // Round off the cost price
    public NoYes parmCostPriceRoundOff(NoYes _costPriceRoundOff = costPriceRoundOff)
    {
        costPriceRoundOff = _costPriceRoundOff;
        return costPriceRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceTransfer</Name>
				<Source><![CDATA[
    // Transfer cost price ans misc. charges
    public NoYes parmCostPriceTransfer(NoYes _costPriceTransfer = costPriceTransfer)
    {
        costPriceTransfer = _costPriceTransfer;
        return costPriceTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceInclInUnitPrice</Name>
				<Source><![CDATA[
    // Include misc. charges in sales price
    public NoYes parmSalesPriceInclInUnitPrice(NoYes _salesPriceInclInUnitPrice = salesPriceInclInUnitPrice)
    {
        salesPriceInclInUnitPrice = _salesPriceInclInUnitPrice;
        return salesPriceInclInUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceRoundOff</Name>
				<Source><![CDATA[
    // Round off the sales price
    public NoYes parmSalesPriceRoundOff(NoYes _salesPriceRoundOff = salesPriceRoundOff)
    {
        salesPriceRoundOff = _salesPriceRoundOff;
        return salesPriceRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceTransfer</Name>
				<Source><![CDATA[
    // Transfer sales price ans misc. charges
    public NoYes parmSalesPriceTransfer(NoYes _salesPriceTransfer = salesPriceTransfer)
    {
        salesPriceTransfer = _salesPriceTransfer;
        return salesPriceTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;
        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        InventTable inventTable;

        setprefix(BOMCalcUpdateItem::description());

        try
        {
            if (!this.validate())
            {
                throw Exception::Error;
            }

            if (this.allParamEmpty())
            {
                return;
            }

            ttsbegin;

            if (this.needOptimization())
            {
                this.optimizeBuffer();
            }

            while select bomCalcTableTmp
            {
                inventTable = InventTable::find(bomCalcTableTmp.ItemId);

                if (costPriceTransfer)
                {
                    this.updateCostPrice(inventTable);
                }

                if (salesPriceTransfer)
                {
                    this.updateSalesPrice(inventTable);
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostPrice</Name>
				<Source><![CDATA[
    void updateCostPrice(InventTable _inventTable)
    {
        #OCCRetryCount
        InventTableModule       inventTableModuleInvent;
        InventItemPriceSim      inventItemPriceSim;
        PriceConvertFactory     priceConvertFactory;
        PriceConvert            priceConvert;

        inventTableModuleInvent = _inventTable.inventTableModuleInvent(true);

        priceConvertFactory = PriceConvertFactory::newItemPrice(bomCalcTableTmp.ItemId,
                                                                bomCalcTableTmp.UnitId,
                                                                bomCalcTableTmp.CostPrice / bomCalcTableTmp.calcQty(),
                                                                1,
                                                                bomCalcTableTmp.CostMarkup,
                                                                bomCalcTableTmp.Qty,
                                                                '',
                                                                bomCalcTableTmp.CostPriceSecCur_RU / bomCalcTableTmp.calcQty(),
                                                                bomCalcTableTmp.CostMarkupSecCur_RU);
        priceConvertFactory.parmNewUnitId(inventTableModuleInvent.UnitId);
        priceConvertFactory.parmInventDimId(bomCalcTableTmp.InventDimId);
        priceConvert = priceConvertFactory.priceConvert();

        Counter logCount = infologLine();
        try
        {
            inventItemPriceSim = InventItemPriceSim::find(bomCalcTableTmp.ItemId,
                                                          costingVersionId,
                                                          calcDate,
                                                          CostingVersionPriceType::Cost,
                                                          bomCalcTableTmp.InventDimId,
                                                          siteId,
                                                          true);

            if (calcCostingVersionUpdate     == BOMCalcCostingVersionUpdate::Overwrite
                || (calcCostingVersionUpdate == BOMCalcCostingVersionUpdate::MissingOnly
                &&  !inventItemPriceSim))
            {
                inventItemPriceSim.initFromBOMCalcTable(bomCalcTableTmp);
                inventItemPriceSim.initLine(costingVersionId, CostingVersionPriceType::Cost, calcDate);

                inventItemPriceSim.PriceUnit = inventTableModuleInvent.PriceUnit;
                inventItemPriceSim.UnitID    = inventTableModuleInvent.UnitId;

                // Update Item cost price
                this.updateInventItemPriceSim(priceConvert.parmPrice(),
                                              priceConvert.parmMarkup(),
                                              priceConvert.parmPriceQty(),
                                              inventItemPriceSim,
                                              costPriceInclInUnitPrice,
                                              costPriceRoundOff,
                                              priceConvert.parmPriceSecCur_RU(),
                                              priceConvert.parmMarkupSecCur_RU());
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if ((_inventTable.PmfProductType == PmfProductType::Co_Product || _inventTable.PmfProductType == PmfProductType::By_Product)
                && xSession::currentRetryCount() < #RetryNum
                && xSession::lastDuplicateKeyViolatingTable() == inventItemPriceSim.TableId
                && BomCalcCoProductHandleDuplicateKeyFlight::instance().isEnabled())
            {
                retry;
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
            infolog.clear(logCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventItemPriceSim</Name>
				<Source><![CDATA[
    void updateInventItemPriceSim(
        Price               _price,
        Price               _markup,
        Qty                 _qty,
        InventItemPriceSim  _inventItemPriceSim,
        boolean             _includeInUnitPrice = false,
        boolean             _roundOff = true,
        Price               _priceSecCur = 0,
        Price               _markupSecCur = 0)
    {
        InventItemCostGroupRollupSim    costGroupRollupSim;
        BOMCalcSumItemCost              bomCalcSumItemCost;
        PriceConvertFactory             priceConvertFactory;
        PriceConvert                    priceConvert;
        #ISOCountryRegionCodes

        priceConvertFactory = PriceConvertFactory::newItemPrice(_inventItemPriceSim.ItemId,
                                                                _inventItemPriceSim.UnitID,
                                                                _price,
                                                                1,
                                                                _markup,
                                                                _qty,
                                                                '',
                                                                _priceSecCur,
                                                                _markupSecCur);

        if (!_inventItemPriceSim.PriceUnit)
        {
            _inventItemPriceSim.PriceUnit = 1;
        }

        priceConvertFactory.parmNewPriceUnit(_inventItemPriceSim.PriceUnit);
        priceConvertFactory.parmRounding(_roundOff);
        priceConvertFactory.parmInventDimId(_inventItemPriceSim.InventDimId);
        priceConvert = priceConvertFactory.priceConvert();

        _inventItemPriceSim.Price               = priceConvert.parmPrice();
        _inventItemPriceSim.PriceQty            = priceConvert.parmPriceQty();
        _inventItemPriceSim.Markup              = priceConvert.parmMarkup();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _inventItemPriceSim.PriceSecCur_RU      = priceConvert.parmPriceSecCur_RU();
            _inventItemPriceSim.MarkupSecCur_RU     = priceConvert.parmMarkupSecCur_RU();
        }

        _inventItemPriceSim.PriceAllocateMarkup = _includeInUnitPrice ? NoYes::Yes : NoYes::No;
        _inventItemPriceSim.FromDate            = calcDate;

        if (_inventItemPriceSim.RecId)
        {
            // Remove existing rollup records
            delete_from costGroupRollupSim
                where costGroupRollupSim.InventItemPriceSimRefRecId == _inventItemPriceSim.RecId;
        }

        _inventItemPriceSim.write();

        // Now create the actual rollup records
        if (_inventItemPriceSim.isStdCostPrice())
        {
            if (   InventParameters::isCostBreakdownActivated()
                && (InventTable::find(_inventItemPriceSim.ItemId).modelGroup().inventModelType().stdCostBased()
                ||  InventStdCostConvItem::itemWillBeConverted(_inventItemPriceSim.ItemId, _inventItemPriceSim.VersionId)))
            {
                bomCalcSumItemCost = BOMCalcSumItemCost::newInventItemPriceSim(_inventItemPriceSim);
                bomCalcSumItemCost.transferToItemPrice();
            }
            else
            {
                costGroupRollupSim.initFromInventItemPriceSim(_inventItemPriceSim);
                costGroupRollupSim.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    void updateSalesPrice(InventTable _inventTable)
    {
        InventTableModule       inventTableModuleSales;
        InventItemPriceSim      inventItemPriceSim;
        PriceConvertFactory     priceConvertFactory;
        PriceConvert            priceConvert;

        inventTableModuleSales  = _inventTable.inventTableModuleSales(true);

        priceConvertFactory = PriceConvertFactory::newItemPrice(bomCalcTableTmp.ItemId,
                                                                bomCalcTableTmp.UnitId,
                                                                bomCalcTableTmp.SalesPrice / bomCalcTableTmp.calcQty(),
                                                                1,
                                                                bomCalcTableTmp.SalesMarkup,
                                                                bomCalcTableTmp.Qty,
                                                                '',
                                                                // same as cost price
                                                                bomCalcTableTmp.CostPriceSecCur_RU / bomCalcTableTmp.calcQty(),
                                                                bomCalcTableTmp.CostMarkupSecCur_RU);
        priceConvertFactory.parmNewUnitId(inventTableModuleSales.UnitId);
        priceConvertFactory.parmInventDimId(bomCalcTableTmp.InventDimId);
        priceConvert = priceConvertFactory.priceConvert();

        // Update Item sales price
        inventItemPriceSim = InventItemPriceSim::find(bomCalcTableTmp.ItemId,
                                                costingVersionId,
                                                calcDate,
                                                CostingVersionPriceType::Sales,
                                                bomCalcTableTmp.InventDimId,
                                                siteId,
                                                true);

        if (   calcCostingVersionUpdate  == BOMCalcCostingVersionUpdate::Overwrite
            || (calcCostingVersionUpdate == BOMCalcCostingVersionUpdate::MissingOnly
            &&  !inventItemPriceSim))
        {
            inventItemPriceSim.initFromBOMCalcTable(bomCalcTableTmp);
            inventItemPriceSim.initLine(costingVersionId, CostingVersionPriceType::Sales, calcDate);

            inventItemPriceSim.PriceUnit = inventTableModuleSales.PriceUnit;
            inventItemPriceSim.UnitID    = inventTableModuleSales.UnitId;

            this.updateInventItemPriceSim(priceConvert.parmPrice(),
                                          priceConvert.parmMarkup(),
                                          priceConvert.parmPriceQty(),
                                          inventItemPriceSim,
                                          salesPriceInclInUnitPrice,
                                          salesPriceRoundOff,
                                          priceConvert.parmPriceSecCur_RU(),
                                          priceConvert.parmMarkupSecCur_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        // no calculation data for transfer
        if (!bomCalcTableTmp)
        {
            return checkFailed("@SYS95181");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcUpdateItem construct()
    {
        BOMCalcUpdateItem   bomCalcUpdateItem;

        bomCalcUpdateItem = new BOMCalcUpdateItem();

        return bomCalcUpdateItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS95173";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>