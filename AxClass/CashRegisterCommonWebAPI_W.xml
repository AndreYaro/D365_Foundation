<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterCommonWebAPI_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Net;
using System.Net.Security;

/// <summary>
/// The <c>CashRegisterCommonWebAPI_W</c> class is the class grouping several over-the-web communication
/// methods like sending an HTTP POST or GET requests and transforming the response to X++ data structures.
/// </summary>
public class CashRegisterCommonWebAPI_W
{
    const str methodPost = 'POST';
    const str methodGet = 'GET';

    /// <summary>
    /// Collection of certififcates which will be used for http-request.
    /// </summary>
    X509Certificate2Collection certificates;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares <c>HttpWebRequest</c> for request.
    /// </summary>
    /// <param name = "_webRequest">Web Request.</param>
    /// <param name = "_request"><c>CashRegisterWebRequest_W</c> object.</param>
    /// <param name = "_delegateClass"><c>CashRegisterCertificateValidationDelegate_W</c> object.</param>
    private void prepareRequest(System.Net.HttpWebRequest _webRequest,
                CashRegisterWebRequest_W _request,
                CashRegisterCertificateValidationDelegate_W _delegateClass)
    {
        if (strLen(_request.parmMethod()) > 0)
        {
            _webRequest.set_Method(_request.parmMethod());
        }

        System.Net.WebHeaderCollection headers = _webRequest.get_Headers();
        if (strLen(_request.parmHeader()) > 0)
        {
            headers.Add(_request.parmHeader());
            _webRequest.set_Headers(headers);
        }

        if (strLen(_request.parmContentType()) > 0)
        {
            _webRequest.set_ContentType(_request.parmContentType());
        }

        if (_request.parmRegisterCertififcateThumbprint())
        {
            const str delegateCertificateValidationCallBack = 'serverCertificateValidationCallBack';
            _delegateClass = CashRegisterCertificateValidationDelegate_W::construct(_request.parmRegisterCertififcateThumbprint());
            System.Type delegateClassType = _delegateClass.GetType();
            System.Reflection.MethodInfo methodInfo = delegateClassType.GetMethod(delegateCertificateValidationCallBack);
            System.Type certValidationDelegateType = System.Type::GetType('System.Net.Security.RemoteCertificateValidationCallback, System');

            if (certValidationDelegateType)
            {
                _webRequest.ServerCertificateValidationCallback = System.Delegate::CreateDelegate(certValidationDelegateType, _delegateClass, methodInfo);
            }
        }

        this.initCertificate(_request.parmCertificate(), _webRequest);

        Binary requestContent = _request.parmContent();
        if (requestContent)
        {
            System.IO.MemoryStream stream = requestContent.getMemoryStream();
            CashRegisterCommonWebAPI_W::writeRequestData(_webRequest, stream.ToArray());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs web request to Cash Register Fiscal Services.
    /// </summary>
    /// <param name="_request">
    /// Cash Register web request.
    /// </param>
    /// <returns>
    /// Web response.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Something wrong with web request.
    /// </exception>
    public CashRegisterWebResponse_W generateRequest(CashRegisterWebRequest_W _request)
    {
        System.Net.HttpWebResponse response = null;
        System.Net.WebException webException = null;
        CLRObject webResponse = null;
        str errorString;

        try
        {
            System.Net.HttpWebRequest request = null;
            CashRegisterCertificateValidationDelegate_W delegateClass;

            request = System.Net.WebRequest::Create(_request.parmUrl()) as System.Net.HttpWebRequest;
            this.prepareRequest(request, _request, delegateClass);

            webResponse = request.GetResponse();
            response = webResponse as System.Net.HttpWebResponse;
        }
        catch (Exception::CLRError)
        {
            System.Exception exception = ClrInterop::getLastException();
            if (exception)
            {
                CLRObject clrExceptionMessage = exception.get_message();
                errorString = CLRInterop::getAnyTypeForObject(clrExceptionMessage);
                exception = exception.get_InnerException();

                while(exception)
                {
                    if (exception is System.Net.WebException)
                    {
                        // There is a response body in the answer. This body will be attached in log.
                        webException = exception as System.Net.WebException;
                        webResponse = webException.get_Response();
                        response = webResponse as System.Net.HttpWebResponse;
                    }

                    clrExceptionMessage = exception.get_Message();
                    errorString += '\n' + CLRInterop::getAnyTypeForObject(clrExceptionMessage);
                    exception = exception.get_InnerException();
                }
            }
        }

        CashRegisterWebResponse_W cashRegisterWebResponse;
        if (response)
        {
            str responseData = CashRegisterCommonWebAPI_W::readResponseData(response);
            response.Close();

            int httpStatusCode = response.get_StatusCode();

            str contentType = response.get_ContentType();
            cashRegisterWebResponse = new CashRegisterWebResponse_W(httpStatusCode, responseData, contentType);
        }
        else
        {
            cashRegisterWebResponse = new CashRegisterWebResponse_W(0, errorString);
        }

        return cashRegisterWebResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeGetRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the GET method.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to.
    /// </param>
    /// <returns>
    /// Returns instance of the <c>EMWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public CashRegisterWebResponse_W makeGetRequest(
        str _requestUrl, 
        X509Certificate2 _certificate = null, 
        str _certificateThumbprint = '',
        str _contentType = ''
        )
    {
        CashRegisterWebRequest_W request = CashRegisterWebRequest_w::newUrl(_requestUrl);
        request.parmCertificate(_certificate);
        request.parmRegisterCertififcateThumbprint(_certificateThumbprint);

        if (!prmisDefault(_contentType))
        {
            request.parmContentType(_contentType);
        }
        request.parmMethod(methodGet);

        return this.generateRequest(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makePostRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the POST method.
    /// This method allows to provide the raw data using the <c>_postData</c> parameter.
    /// Note that the data will be encoded with the UTF-8 encoding.
    /// Optionally, a custom HTTP header can be set through the <c>_header</c> parameter.
    /// The default content type can be overriden using the optional <c>_contentType</c> parameter.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to.
    /// </param>
    /// <param name="_postData">
    /// The raw data. Note that the data will be encoded with the UTF-8 encoding.
    /// </param>
    /// <param name="_header">
    /// The optional HTTP header to include into the request.
    /// </param>
    /// <param name="_contentType">
    /// The optional parameter. If supplued, will override the default content type.
    /// </param>
    /// <returns>
    /// Instance of the <c>RetailWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public CashRegisterWebResponse_W makePostRequest(
        str _requestUrl,
        str _postData = null, 
        X509Certificate2 _certificate = null,
        str _certififcateThumbprint = '',
        str _header = '',
        str _contentType = '')
    {
        CashRegisterWebRequest_W request = CashRegisterWebRequest_W::newUrl(_requestUrl);

        request.parmMethod(methodPost);
        request.parmHeader(_header);
        request.parmContentType(_contentType);
        request.parmCertificate(_certificate);
        request.parmRegisterCertififcateThumbprint(_certififcateThumbprint);
        if (_postData != null && _postData)
        {
            request.setContentBytes(System.Text.UTF8Encoding::UTF8.GetBytes(_postData));
        }

        return this.generateRequest(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new <c>CashRegisterCommonWebAPI_W</c> object.
    /// </summary>
    /// <returns>Generated object.</returns>
    public static CashRegisterCommonWebAPI_W construct()
    {
        return new CashRegisterCommonWebAPI_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readResponseData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the body of response.
    /// </summary>
    /// <param name = "response">Web response.</param>
    /// <returns>The content of Web response's body as a string.</returns>
    private static str readResponseData(System.Net.HttpWebResponse response)
    {
        const int batchSize = 1024;
        str responseData;

        if (response)
        {

            System.IO.Stream receiveStream = response.GetResponseStream();
            str contentEncoding = response.get_ContentEncoding();
            System.Text.Encoding encode;
            if (contentEncoding)
            {
                encode = System.Text.Encoding::GetEncoding(contentEncoding);
            }
            else
            {
                encode = new System.Text.UTF8Encoding();
            }

            System.IO.StreamReader readStream = new System.IO.StreamReader(receiveStream, encode);
            System.Char[] read = new System.Char[batchSize]();
            int countRead = readStream.Read(read, 0, batchSize);
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            System.String readString;

            while (countRead > 0)
            {
                readString = new System.String(read, 0, countRead);
                sb.Append(readString);
                countRead = readStream.Read(read, 0, batchSize);
            }

            readStream.Close();

            responseData = sb.ToString();
        }

        return responseData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRequestData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes Web requests body into byres array.
    /// </summary>
    /// <param name = "_request">Web request.</param>
    /// <param name = "_bytes">Byte array.</param>
    private static void writeRequestData(System.Net.HttpWebRequest _request, System.Byte[] _bytes)
    {
        _request.set_ContentLength(_bytes.get_Length());

        System.IO.Stream stream = _request.GetRequestStream();
        stream.Write(_bytes, 0, _bytes.get_Length());
        stream.Close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the request from the list of client certificate subjects.
    /// </summary>
    /// <param name="_certificate">
    /// The certificate.
    /// </param>
    /// <param name="_request">
    /// The request object.
    /// </param>
    protected void initCertificate(X509Certificate2 _certificate, System.Net.HttpWebRequest _request)
    {
        if (_certificate)
        {
            if (!certificates)
            {
                certificates = new X509Certificate2Collection();
            }

            str res = _certificate.GetCertHashString(); 

            certificates.Add(_certificate);
            _request.set_ClientCertificates(certificates);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>