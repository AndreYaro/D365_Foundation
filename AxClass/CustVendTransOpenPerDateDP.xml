<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenPerDateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendTransOpenPerDateDP</c> class contains the logic that is specific to the
///    <c>CustVendTransOpenPerDate</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustVendTransOpenStatementQuery)),
    SRSReportParameterAttribute(classstr(CustVendTransOpenPerDateContract))
]
public class CustVendTransOpenPerDateDP extends CustVendTransOpenStmtDP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setCustVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    protected void setCustVendTransOpenStmtTmp(CustVendTable _custVendTable, CustVendTrans _custVendTrans)
    {
        AmountCur amountCurOpen;
        AmountMST amountMSTOpen;
        CustTransDetails custTransDetails;

        super(_custVendTable, _custVendTrans);

        amountCurOpen = custVendTransOpenStmtTmp.AmountCur - custVendTransOpenStmtTmp.SettledAmountCur;
        amountMSTOpen = custVendTransOpenStmtTmp.AmountMST - custVendTransOpenStmtTmp.SettledAmountMST;

        custVendTransOpenStmtTmp.TransText = _custVendTrans.Txt;
        custVendTransOpenStmtTmp.DueDate   = custVendTransDetails.firstDueDate();

        if (_custVendTrans.TableId == tablenum(CustTrans))
        {
            custTransDetails = custVendTransDetails;
            custVendTransOpenStmtTmp.CollectionLetterCode = custTransDetails.collectionLetterCode();
            custVendTransOpenStmtTmp.MainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(CustLedgerAccounts::summaryLedgerDimension(custVendTransOpenStmtTmp.AccountNum, _custVendTrans.PostingProfile));
        }
        else
        {
            custVendTransOpenStmtTmp.ApprovedBy  = _custVendTrans.Approver ? HcmWorker::worker2Name(_custVendTrans.Approver) : '';
            custVendTransOpenStmtTmp.MainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(custVendTransOpenStmtTmp.AccountNum, _custVendTrans.PostingProfile));
        }

        if ((amountCurOpen > 0 && _custVendTrans.Correct == NoYes::No) ||
            (amountCurOpen < 0 && _custVendTrans.Correct == NoYes::Yes))
        {
            custVendTransOpenStmtTmp.BalanceDebitAmountCur  = amountCurOpen;
            custVendTransOpenStmtTmp.BalanceDebitAmountMST  = amountMSTOpen;

            custVendTransOpenStmtTmp.BalanceCreditAmountCur = 0;
            custVendTransOpenStmtTmp.BalanceCreditAmountMST = 0;
        }
        else
        {
            custVendTransOpenStmtTmp.BalanceDebitAmountCur  = 0;
            custVendTransOpenStmtTmp.BalanceDebitAmountMST  = 0;

            custVendTransOpenStmtTmp.BalanceCreditAmountCur = -1 * amountCurOpen;
            custVendTransOpenStmtTmp.BalanceCreditAmountMST = -1 * amountMSTOpen;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any open transactions based on the passed in buffer.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record that is used to determine whether there are any open transactions.
    /// </param>
    /// <returns>
    /// true if there is any open transaction then it returns; otherwise, false.
    /// </returns>
    // <GEEU>
    protected boolean existsOpenTransactions(CustVendTrans _custVendTrans)
    {
        return (custVendTransOpenStmtTmp.BalanceDebitAmountMST || custVendTransOpenStmtTmp.BalanceCreditAmountMST);
    }
    // </GEEU>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>