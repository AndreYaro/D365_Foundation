<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequePrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankChequePrint
{
    TmpChequePrintout       tmpChequePrintout;
    PrintJobSettingsPacked  printJobSettingsPacked;
    CustVendCheque          custVendCheque;

    NoYes                   usePrintManagement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendCheque</Name>
				<Source><![CDATA[
    public CustVendCheque parmCustVendCheque(CustVendCheque _custVendCheque = custVendCheque)
    {
        ;
        custVendCheque = _custVendCheque;

        return custVendCheque;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintJobSettingsPacked</Name>
				<Source><![CDATA[
    public PrintJobSettingsPacked parmPrintJobSettingsPacked(PrintJobSettingsPacked _printJobSettingsPacked = printJobSettingsPacked)
    {
        ;
        printJobSettingsPacked = _printJobSettingsPacked;

        return printJobSettingsPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpChequePrintout</Name>
				<Source><![CDATA[
    public TmpChequePrintout parmTmpChequePrintout(TmpChequePrintout _tmpChequePrintout = tmpChequePrintout)
    {
        ;
        tmpChequePrintout = _tmpChequePrintout;

        return tmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintManagement_BR</Name>
				<Source><![CDATA[
    public NoYes parmUsePrintManagement_BR(NoYes _usePrintManagement = usePrintManagement)
    {
        usePrintManagement = _usePrintManagement;

        return usePrintManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        if (tmpChequePrintout)
        {
            BankChequeLayout bankChequeLayout = BankChequeLayout::find(tmpChequePrintout.AccountId);

            if (bankChequeLayout.UseGER)
            {
                TmpChequePrintout::sendToGER(bankChequeLayout, tmpChequePrintout);
            }
            else
            {
                str menuOutputName = this.determineReportMenuOutput(tmpChequePrintout.ChequeFormType);

                if (menuOutputName)
                {
                    this.runReport(menuOutputName);
                }
                else
                {
                    throw error("@SYS26828");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineReportMenuOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the report menu item.
    /// </summary>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>The menu item name</returns>
    protected str determineReportMenuOutput(ChequeFormType _chequeFormType)
    {
        str menuOutput; 

        switch (_chequeFormType)
        {
            case ChequeFormType::USStyle :
                menuOutput = menuitemoutputstr(Cheque_US);
                break;

            case ChequeFormType::UKStyle :
                menuOutput = menuitemoutputstr(Cheque_UK);
                break;

            case ChequeFormType::DEStyle :
                menuOutput = menuitemoutputstr(Cheque_DE);
                break;

            case ChequeFormType::DKStyle :
                menuOutput = menuitemoutputstr(Cheque_DK);
                break;

            case ChequeFormType::ESStyle :
                menuOutput = menuitemoutputstr(Cheque_ES);
                break;

            case ChequeFormType::MXStyle :
                menuOutput = menuitemoutputstr(Cheque_MX);
                break;

            case ChequeFormType::CAStyle :
                menuOutput = menuitemoutputstr(Cheque_CA);
                break;
            case ChequeFormType::FRStyle :
                menuOutput = menuitemoutputstr(Cheque_FR);
                break;
            // <GBR>
            case ChequeFormType::BRStyle :
                if (this.parmUsePrintManagement_BR())
                {
                    menuOutput = menuitemOutputStr(ChequePrintMgmt_BR);
                }
                else
                {
                    menuOutput = menuitemOutputStr(Cheque_BR);
                }
                break;
            // </GBR>
            default:
                EventHandlerResult eventResult = new EventHandlerResult();
                this.printDocumentDelegate(tmpChequePrintout.ChequeFormType, eventResult);
                if (eventResult.hasResult())
                {
                    menuOutput = eventResult.result();
                }
        }

        return menuOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the printDocument method for executing cheque form types.
    /// </summary>
    /// <param name = "_chequeFormType">The cheque form type used for execution.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> instance to be assigned to prior to exiting the method once the work is completed.</param>
    delegate void printDocumentDelegate(ChequeFormType _chequeFormType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    private void runReport(str  _menuItemOutputStr)
    {
        MenuFunction    menuFunction;
        Args            args;
        ;

        args = new Args();
        args.caller(this);

        menuFunction = new MenuFunction(_menuItemOutputStr, MenuItemType::Output);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLayoutFieldRights</Name>
				<Source><![CDATA[
    public static void checkLayoutFieldRights(BankChequeLayout  _bankChequeLayout,
                                              fieldId           _fieldId)
    {
        BankChequeLayout    bankChequeLayoutCheckAccessRights;
        ;

        if (!hasFieldAccess(_bankChequeLayout.TableId, _fieldId, AccessType::View))
            throw error("@SYS57330");

        bankChequeLayoutCheckAccessRights.recordLevelSecurity();

        select firstonly RecId from bankChequeLayoutCheckAccessRights
            where bankChequeLayoutCheckAccessRights.BankAccount == _bankChequeLayout.BankAccount;

        if (!bankChequeLayoutCheckAccessRights.RecId)
            throw error("@SYS57330");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankChequePrint construct(TmpChequePrintout       _tmpChequePrintout,
                                            PrintJobSettingsPacked  _printJobSettingsPacked = connull(),
                                            CustVendCheque          _custVendCheque = null)
    {
        BankChequePrint bankChequePrint = new BankChequePrint();
        ;

        bankChequePrint.parmTmpChequePrintout       (_tmpChequePrintout);
        bankChequePrint.parmPrintJobSettingsPacked  (_printJobSettingsPacked);
        bankChequePrint.parmCustVendCheque          (_custVendCheque);

        return bankChequePrint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>