<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceEntity_Tax_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FreeTextInvoiceEntity_Tax_Extension</c> is used to deal with tax related logics for FreeTextInvoiceEntity.
/// </summary>
[ExtensionOf(tableStr(FreeTextInvoiceEntity))]
internal final class FreeTextInvoiceEntity_Tax_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertFreeTextInvoiceHeaderV2</Name>
				<Source><![CDATA[
    protected static void insertFreeTextInvoiceHeaderV2(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FreeTextInvoiceSourceDocumentHeaderStaging _sourceDocumentFTIMap,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpHeaderDefaultDimension)
    {
        next insertFreeTextInvoiceHeaderV2(
            _dmfDefinitionGroupExecution,
            _sourceDocumentFTIMap,
            _dimCacheTmpHeaderDefaultDimension);

        FreeTextInvoiceStaging staging;
        CustTable custTable;
        CustInvoiceTable custInvoiceTable;
        custInvoiceTable.skipDataMethods(true);

        update_recordset custInvoiceTable
            setting TaxGroup = custTable.TaxGroup,
                    OverrideSalesTax = custTable.OverrideSalesTax
                where custInvoiceTable.TaxGroup == ''
                    join staging
                        where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                            && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                    join TaxGroup, OverrideSalesTax from custTable
                       where custInvoiceTable.InvoiceAccount == custTable.AccountNum;

        FreeTextInvoiceEntity::updateVATDueDate(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVATDueDate</Name>
				<Source><![CDATA[
    private static void updateVATDueDate(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            CustInvoiceTable custInvoiceTable;
            FreeTextInvoiceStaging staging;
            TaxGroupHeading taxGroupHeading;
            custInvoiceTable.skipDataMethods(true);

            // VAT Due Date = Sales Date
            update_recordset custInvoiceTable
                setting VatDueDate_W = custInvoiceTable.SalesDate_W
                    where custInvoiceTable.VatDueDate_W == datenull()
                        join staging
                            where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                        join taxGroupHeading
                            where taxGroupHeading.taxGroup == custInvoiceTable.TaxGroup
                                && taxGroupHeading.fillVATDueDate_W == FillVATDueDate_W::SalesDate;

            // VAT Due Date = Document Date
            update_recordset custInvoiceTable
                setting VatDueDate_W = custInvoiceTable.DocumentDate
                    where custInvoiceTable.VatDueDate_W == datenull()
                        join staging
                            where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                        join taxGroupHeading
                            where taxGroupHeading.taxGroup == custInvoiceTable.TaxGroup
                                 && taxGroupHeading.fillVATDueDate_W == FillVATDueDate_W::DocumentDate;

            // VAT Due Date = Posting Date / last Delivery Date
            update_recordset custInvoiceTable
                setting VatDueDate_W = custInvoiceTable.InvoiceDate
                    where custInvoiceTable.VatDueDate_W == datenull()
                        join staging
                            where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                        join taxGroupHeading
                            where taxGroupHeading.taxGroup == custInvoiceTable.TaxGroup
                                 && (taxGroupHeading.fillVATDueDate_W == FillVATDueDate_W::PostingDate
                                    || taxGroupHeading.fillVATDueDate_W == FillVATDueDate_W::LastDeliveryDate);

            // VAT Due Date based on Customized posting date or document date
            while select forupdate custInvoiceTable
                where custInvoiceTable.VatDueDate_W == datenull()
                    join staging
                        where custInvoiceTable.InvoiceId == staging.FreeTextNumber
                            && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                    join taxGroupHeading
                        where taxGroupHeading.taxGroup == custInvoiceTable.TaxGroup
                             && taxGroupHeading.fillVATDueDate_W == FillVATDueDate_W::Customized
            {
                custInvoiceTable.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateCustomized(
                    taxGroupHeading,
                    custInvoiceTable.InvoiceDate,
                    custInvoiceTable.DocumentDate);
                custInvoiceTable.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>