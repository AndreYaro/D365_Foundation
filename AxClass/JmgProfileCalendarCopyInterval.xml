<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileCalendarCopyInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProfileCalendarCopyInterval</c> class is used to copy profile calendar entries for a specified date interval.
/// </summary>
public class JmgProfileCalendarCopyInterval extends RunBase
{
    FormDataSource          formDataSource;
    Object                  workPlannerForm;

    DialogField             df_RelationType;
    DialogField             df_RelationNumber;
    DialogField             df_DateFrom;
    DialogField             df_DateTo;
    DialogField             df_DateStart;
    DialogField             df_Repeats;
    DialogField             df_Overwrite;

    JmgProfileCalendarType  copyRelationType;
    JmgRelationNumber       copyRelationNumber;
    JmgDate                 copyDateFrom;
    JmgDate                 copyDateTo;
    JmgDate                 copyDateStart;
    int                     copyRepeats;
    NoYesId                 doOverwrite;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class can be run as a batch job.
    /// </summary>
    /// <returns>
    ///    true if the class can be run as a batch job; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase       dialog = new DialogRunbase(JmgProfileCalendarCopy::description(), this);
        JmgProfileCalendar  jmgProfileCalendar;

        df_RelationType     = dialog.addField(enumstr(JmgProfileCalendarType));
        df_RelationNumber   = dialog.addField(extendedtypestr(JmgRelationNumber));
        df_DateFrom         = dialog.addField(extendedtypestr(JmgDate),"@SYS5209");
        df_DateTo           = dialog.addField(extendedtypestr(JmgDate),"@SYS14656");
        df_DateStart        = dialog.addField(extendedtypestr(JmgDate),"@SYS2168");
        df_Repeats          = dialog.addField(extendedtypestr(Integer),"@SYS39043","@SYS39055");
        df_Overwrite        = dialog.addField(extendedtypestr(NoYesId),"@SYS3074");

        if (formDataSource)
        {
            jmgProfileCalendar = formDataSource.cursor();
            df_RelationType.value(jmgProfileCalendar.ProfileCalendarType);
            df_RelationNumber.value(jmgProfileCalendar.RelationNumber);
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values that are entered in the dialog by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise; false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        copyRelationType    = df_RelationType.value();
        copyRelationNumber  = df_RelationNumber.value();
        copyDateFrom        = df_DateFrom.value();
        copyDateTo          = df_DateTo.value();
        copyDateStart       = df_DateStart.value();
        copyRepeats         = df_Repeats.value();
        doOverwrite         = df_Overwrite.value();

        ret = super();
        if (ret)
        {
            switch (copyRelationType)
            {
                case JmgProfileCalendarType::ProfileGroup :
                    if (copyRelationNumber && (!(select jmgProfileGroup where jmgProfileGroup.ProfileGroupId == copyRelationNumber).RecId))
                        ret = checkFailed(strfmt("@SYS14690",copyRelationNumber));
                    break;
                case JmgProfileCalendarType::Employee :
                    if (copyRelationNumber && (!(JmgEmployee::find(HcmWorker::findByPersonnelNumber(copyRelationNumber).RecId).RecId)))
                        ret = checkFailed(strfmt("@SYS8607",copyRelationNumber));
                    break;
                case JmgProfileCalendarType::All :
                    copyRelationNumber = '';
                    break;
            }
        }

        // Validate from and to dates.
        if (ret && !copyDateFrom)
        {
            ret = checkFailed("@SYS39559");
        }
        if (ret && !copyDateTo)
        {
            ret = checkFailed("@SYS71278");
        }

        if (ret && copyDateFrom > copyDateTo)
        {
            ret = checkFailed("@SYS16982");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        JmgProfileCalendar  jmgProfileCalendar;
        JmgWorkPlannerForm  jmgWorkPlannerForm;
        int                 cyklus = (copyDateTo - copyDateFrom) + 1;

        if ((! doOverwrite) &&
            ((select firstonly jmgProfileCalendar
                     where  jmgProfileCalendar.RelationNumber       == copyRelationNumber   &&
                            jmgProfileCalendar.ProfileCalendarType  == copyRelationType     &&
                            jmgProfileCalendar.Date                 >= copyDateStart        &&
                            jmgProfileCalendar.Date                 <  copyDateStart+(copyRepeats*cyklus)).RecId))
        {
            throw error("@SYS38961");
        }

        if (workPlannerForm)
        {
            jmgWorkPlannerForm  = workPlannerForm.getWorkPlannerForm(copyRelationType);
        }
        JmgProfileCalendarCopyInterval::copyProfileCalender(copyRelationType, copyRelationNumber, copyDateFrom, copyDateTo, copyDateStart, copyRepeats, jmgWorkPlannerForm);

        if (formDataSource)
        {
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the arguments to use when running the class.
    /// </summary>
    /// <param name="args">
    /// The arguments to use when running the class.
    /// </param>
    void setParameters(Args args)
    {
        FormRun caller;
        formDataSource  = args.caller().datasource(tablestr(JmgProfileCalendar));

        caller          = args.caller();
        if (caller && caller.name() == formstr(JmgWorkPlanner))
        {
            workPlannerForm = caller;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProfileCalender</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates profile calendar entries based on the specified values.
    /// </summary>
    /// <param name="_copyRelationType">
    ///    The relation type to create profile calendar entries.
    /// </param>
    /// <param name="_copyRelationNumber">
    ///    The relation number to use for creating profile calendar entries.
    /// </param>
    /// <param name="_copyDateFrom">
    ///    The start date of the interval from which to copy profile calendar entries.
    /// </param>
    /// <param name="_copyDateTo">
    ///    The stop date of the interval from which to copy profile calendar entries.
    /// </param>
    /// <param name="_copyDateStart">
    ///    The date from which to start creating profile calendar entries.
    /// </param>
    /// <param name="_copyRepeats">
    ///    The number of times the profile calendar entries in the time interval is copied.
    /// </param>
    /// <param name="_jmgWorkPlannerForm">
    ///    A reference to the <c>JmgWorkPlannerForm</c> class, from where the copy function is called.
    /// </param>
    static void copyProfileCalender( JmgProfileCalendarType _copyRelationType,
                                            JmgRelationNumber      _copyRelationNumber,
                                            JmgDate                _copyDateFrom,
                                            JmgDate                _copyDateTo,
                                            JmgDate                _copyDateStart,
                                            Qty                    _copyRepeats,
                                            JmgWorkPlannerForm     _jmgWorkPlannerForm)
    {
        JmgProfileCalendar  jmgProfileCalendar;
        JmgProfileCalendar  jmgProfileCalendarNew;
        JmgDate             wrkDate;
        int                 cyklus;
        int                 i;
        int                 j;
        JmgDate             fDate;
        JmgDate             tDate;

        ttsbegin;
        cyklus = (_copyDateTo - _copyDateFrom) + 1;

        if (!_jmgWorkPlannerForm)
        {
            delete_from jmgProfileCalendar
                where   jmgProfileCalendar.RelationNumber       == _copyRelationNumber   &&
                        jmgProfileCalendar.ProfileCalendarType  == _copyRelationType     &&
                        jmgProfileCalendar.Date                 >= _copyDateStart        &&
                        jmgProfileCalendar.Date             <  _copyDateStart + (_copyRepeats * cyklus);

            jmgProfileCalendarNew.ProfileCalendarType = _copyRelationType;
            jmgProfileCalendarNew.RelationNumber = _copyRelationNumber;

            while select jmgProfileCalendar
                   where jmgProfileCalendar.ProfileCalendarType == _copyRelationType   &&
                         jmgProfileCalendar.RelationNumber      == _copyRelationNumber &&
                         jmgProfileCalendar.Date                >= _copyDateFrom       &&
                         jmgProfileCalendar.Date                <= _copyDateTo
            {
                for (wrkDate = _copyDateStart + (jmgProfileCalendar.Date - _copyDateFrom); wrkDate < _copyDateStart + (_copyRepeats * cyklus); wrkDate += cyklus)
                {
                    jmgProfileCalendarNew.Date      = wrkDate;
                    jmgProfileCalendarNew.ProfileId = jmgProfileCalendar.ProfileId;
                    jmgProfileCalendarNew.insert();
                }
            }
        }
        else if (_jmgWorkPlannerForm.isLabelShowing(_copyRelationNumber))
        {
            for (i = 0; i < (_copyDateTo - _copyDateFrom) + 1; i++)
            {
                for (j = 0; j < _copyRepeats; j++)
                {
                    fDate = _copyDateFrom + i;
                    tDate = _copyDateStart + i + ((_copyDateTo - _copyDateFrom) + 1) * j;

                    _jmgWorkPlannerForm.setProfileAt(_jmgWorkPlannerForm.dateToColumn(tDate),
                                                     _jmgWorkPlannerForm.labelToRow(_copyRelationNumber),
                                                     _jmgWorkPlannerForm.getProfileAt(_jmgWorkPlannerForm.dateToColumn(fDate), _jmgWorkPlannerForm.labelToRow(_copyRelationNumber)));
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS39044";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        Object                          obj;
        JmgProfileCalendarCopyInterval  jmgProfileCalendarCopyInterval;
        FormRun                         formRun;

        obj = args.caller();
        if (obj &&
            SysDictClass::isEqualOrSuperclass(obj.handle(),classnum(FormRun)))
        {
            formRun = obj;
            if (formRun.name() == formstr(JmgProfileCalendar) ||
                formRun.name() == formstr(JmgWorkPlanner))
            {
                jmgProfileCalendarCopyInterval = new JmgProfileCalendarCopyInterval();
                jmgProfileCalendarCopyInterval.setParameters(args);

                if (jmgProfileCalendarCopyInterval.prompt())
                {
                    jmgProfileCalendarCopyInterval.runOperation();
                    args.parmEnum(NoYes::Yes);
                }
                else
                {
                    args.parmEnum(NoYes::No);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>