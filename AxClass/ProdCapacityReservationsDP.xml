<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCapacityReservationsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdCapacityReservationsDP</c> class is the Report Data Provider class for the
///    <c>ProdCapacityReservations</c> report.
/// </summary>
[SRSReportParameterAttribute(classstr(ProdCapacityReservationsContract))]
public class ProdCapacityReservationsDP extends SRSReportDataProviderBase
{
    ProdCapacityReservationsTmp prodCapacityReservationsTmp;

    ProdUnitId      prodUnitId;
    WrkCtrId        resourceGroupId;
    WrkCtrId        resourceId;
    ReqPlanIdSched  reqPlanIdSched;
    date            fromDate;
    date            toDate;

    #TimeConstants

    #SRSScmAllValue
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the capacity hours information about a work center in a specified single date and master
    /// plan.
    /// </summary>
    /// <param name="_capacitySum">
    /// The instance of the <c>WrkCtrCapacitySum</c> class to calculate the capacity hours.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The number of capacity hours if available; otherwise, 0.
    /// </returns>
    private CapacityHours capacity(WrkCtrCapacitySum _capacitySum, WrkCtrId _wrkCtrId, date _date)
    {
        CapacityHours result = 0;

        if (_capacitySum.find(_wrkCtrId,_date,false))
        {
            result = _capacitySum.rec_Capacity() / #SecondsPerHour;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParamValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given value is equal to the 'All' value
    /// and replaces it with empty string if so.
    /// </summary>
    /// <param name="param">
    /// String to check.
    /// </param>
    /// <returns>
    /// Sanitized string.
    /// </returns>
    private str getParamValue(str param)
    {
        return (param == #SRSScmAll) ? "" : param;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdCapacityReservationsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>ProdCapacityReservationsTmp</c> temporary table
    /// </summary>
    /// <returns>
    ///    Data from the <c>ProdCapacityReservationsTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdCapacityReservationsTmp))
    ]
    public ProdCapacityReservationsTmp getProdCapacityReservationsTmp()
    {
        select prodCapacityReservationsTmp;
        return prodCapacityReservationsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for processing the report.
    /// </summary>
    private void initializeParameters()
    {
        ProdCapacityReservationsContract contract = this.parmDataContract() as ProdCapacityReservationsContract;

        prodUnitId      = this.getParamValue(contract.parmProdUnitId());
        resourceGroupId = this.getParamValue(contract.parmResourceGroupId());
        resourceId      = this.getParamValue(contract.parmResourceId());
        reqPlanIdSched  = contract.parmReqPlanIdSched();
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a line of data in the temporary table.
    /// </summary>
    /// <param name="_date">
    /// The date field.
    /// </param>
    /// <param name="_hours">
    /// The capacity in hours field.
    /// </param>
    /// <param name="_reservedHours">
    /// The reserved hours field.
    /// </param>
    /// <param name="_percentage">
    /// The percentage field.
    /// </param>
    /// <param name="_avgFlag">
    /// A flag that specifies whether that record is containing the average of the data set.
    /// </param>
    /// <param name="_insertPercentage">
    /// A flag that specifies whether the percentage should be inserted or an empty string instead.
    /// </param>
    private void insertData(date _date,
                            CapacityHours _hours,
                            CapacityReservedHours _reservedHours,
                            real _percentage,
                            boolean _avgFlag,
                            boolean _insertPercentage)
    {
        prodCapacityReservationsTmp.Date                    = _date;
        prodCapacityReservationsTmp.CapacityHours           = _hours;
        prodCapacityReservationsTmp.CapacityReservedHours   = _reservedHours;
        prodCapacityReservationsTmp.Percentage              = _insertPercentage ? strfmt('%1', _percentage*100) : "@SYS179950";
        prodCapacityReservationsTmp.AverageFlg              = _avgFlag ? NoYes::Yes : NoYes::No;

        prodCapacityReservationsTmp.insert();
        prodCapacityReservationsTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    ///    Note that this is a framework class. Customizing this class may cause problems with future upgrades
    ///    to the software.
    /// </remarks>
    public void processReport()
    {
       // helper classes to do the job
        WrkCtrCapacitySum       capacitySum = new WrkCtrCapacitySum(true,true);
        WrkCtrReservedSum       reservedSum = WrkCtrReservedSum::newForm();

        WrkCtrResourceGroup     wrkCtrResourceGroup;

        // storage for all resource groups being processed
        container               resourceGroups = connull();

        CapacityHours           capacityHours = 0;
        CapacityReservedHours   reservedHours = 0;

        date                    tmpDate;
        int i;

        real                    percentageSum = 0;
        real                    currentPercentage = 0;
        int                     elementsCount = 0;

        this.initializeParameters();

        // take care about wrong dates
        if (toDate < fromDate)
        {
            tmpDate = fromDate;
            fromDate = toDate;
            toDate = tmpDate;
        }

        // Searching by ALL production units and ALL resource groups and ALL resources is not
        // supported due to performance concerns
        if ( resourceGroupId == "" && prodUnitId == ""
        && resourceId == ""
        )
        {
            throw error("@SYS91571");
        }

        // use resource id if present
        if ( resourceId != "" )
        {
            resourceGroups += resourceId;
        }
        else
        if ( resourceGroupId != "" )
        {
            // if it's not the All value we use the passed ID
             resourceGroups += resourceGroupId;
        }
        else
        {
            // if the value for the resource group is All (empty), then we
            // just get all the resource groups for this production unit
            while select WrkCtrId
                from wrkCtrResourceGroup
                where wrkCtrResourceGroup.ProdUnitId == prodUnitId
            {
                resourceGroups += wrkCtrResourceGroup.WrkCtrId;
            }
        }

        // we are doing the aggregation based on the date field
        for (tmpDate = fromDate; tmpDate <= toDate; ++tmpDate)
        {
            capacityHours = 0;
            reservedHours = 0;

            // we process the resource groups - if it's not All it will be only 1 resource group
            // otherwise we'll have more entries in the container
            for (i = 1; i <= conlen(resourceGroups); ++i)
            {
                // get the next resource group
                WrkCtrId tmpWrkCtrId = conpeek(resourceGroups, i);

                // sum up the available and the reserved hours
                capacityHours += this.capacity(capacitySum,tmpWrkCtrId,tmpDate);
                reservedHours += this.reserved(reservedSum,reqPlanIdSched,tmpWrkCtrId,tmpDate);
            }

            // if there's any free capacity - do the average calculations
            if (capacityHours > 0)
            {
                currentPercentage   = reservedHours / capacityHours;
                percentageSum       += currentPercentage;
                elementsCount++;
            }

            // insert the result. if current percentage is 0, then
            // an empty string will be inserted in the result table
            this.insertData(tmpDate,
                            capacityHours,
                            reservedHours,
                            currentPercentage,
                            false,
                            capacityHours > 0);
        }

        // add the last record, which contains the data for the aggregation table (the AverageFlg = 1)
        this.insertData(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        0,
                        0,
                        elementsCount == 0 ? 0 : percentageSum / elementsCount,
                        true,
                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the total reserved hours information about a work center in a given a single date and
    /// master plan.
    /// </summary>
    /// <param name="_reservedSum">
    /// The instance of the <c>WrkCtrReservedSum</c> class that is used to calculate the reserved hours.
    /// </param>
    /// <param name="_reqPlanId">
    /// The master plan ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The number of total reserved hours if available; otherwise, 0.
    /// </returns>
    private CapacityReservedHours reserved(WrkCtrReservedSum _reservedSum, ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        return this.reservedDetail(_reservedSum,_reqPlanId,_wrkCtrId,_date) +
               this.reservedRough(_reservedSum,_reqPlanId,_wrkCtrId,_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reserved hours detail information about a work center in a given a single date and
    /// master plan.
    /// </summary>
    /// <param name="_reservedSum">
    /// The instance of the <c>WrkCtrReservedSum</c> class that is used to calculate the reserved hours.
    /// </param>
    /// <param name="_reqPlanId">
    /// The master plan ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The number of capacity reserved hours detail if available; otherwise, 0.
    /// </returns>
    private CapacityReservedHoursDetail reservedDetail(WrkCtrReservedSum _reservedSum, ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        ReqPlanVersion              reqPlanVersion =
                                                     ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion();
        CapacityReservedHoursDetail result = 0;

        if (_reservedSum.find(reqPlanVersion.RecId,_wrkCtrId,_date))
        {
            result = _reservedSum.rec_ReservedJob() / 3600;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedRough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reserved hours rough information about a work center in a given single date and master
    /// plan.
    /// </summary>
    /// <param name="_reservedSum">
    /// The instance of the <c>WrkCtrReservedSum</c> class that is used to calculate the reserved hours.
    /// </param>
    /// <param name="_reqPlanId">
    /// The master plan ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The number of capacity reserved hours rough if available; otherwise, 0.
    /// </returns>
    private CapacityReservedHoursRough reservedRough(WrkCtrReservedSum _reservedSum, ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        ReqPlanVersion              reqPlanVersion =
                                                     ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion();
        CapacityReservedHoursRough  result = 0;

        if (_reservedSum.find(reqPlanVersion.RecId,_wrkCtrId,_date))
        {
            result = _reservedSum.rec_ReservedOperation() / #SecondsPerHour;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>