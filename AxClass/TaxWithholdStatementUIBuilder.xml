<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdStatementUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdStatementUIBuilder</c> class is base UI builder class for the
/// <c>TaxWithholdStatement</c> reports.
/// </summary>
class TaxWithholdStatementUIBuilder extends SrsReportDataContractExtendUIBuilder_CN
{
    //Parameters in group Identification
    DialogField     dialogFieldEarilerFiled;
    DialogField     dialogFieldReceiptNumber;
    DialogField     dialogFieldTANNumber;
    DialogField     dialogFieldPeriodEnd;
    DialogField     dialogFieldStatement;
    DialogField     dialogFieldTaxwithholdDate;

    //Parameters in group Efiling
    DialogField     dialogFieldEfiling;
    DialogField     dialogFieldCorrectEfiling;
    DialogField     dialogFieldFileName;
    DialogField     dialogFieldConsolidatedFileName;
    DialogField     dialogFieldEfilingFiled;
    DialogField     dialogFieldDesignation;
    DialogField     dialogFieldFullName;
    DialogField     dialogFieldStatementFiledearlier;
    DialogField     dialogResponsiblePerson;
    DialogField     dialogFieldTANName;
    DialogField     dialogFieldBranchDivision;
    HcmWorkerRecId  hcmWorker;
    DirPartyName    name;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctEfilingModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a Generate Corrected e-file modified
    /// </summary>
    /// <param name="_correctEfiling">
    /// The generate corrected e-file control.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean correctEfilingModified(FormCheckBoxControl   _correctEfiling)
    {
        if (dialogFieldCorrectEfiling.value() == NoYes::Yes)
        {
            dialogFieldFileName.allowEdit(true);
            dialogFieldEfilingFiled.allowEdit(true);
            dialogFieldTANName.allowEdit(true);
            dialogFieldBranchDivision.allowEdit(true);
            if (dialogFieldEarilerFiled.value() == NoYes::Yes)
            {
                dialogFieldConsolidatedFileName.allowEdit(true);
            }
        }
        else
        {
            dialogFieldFileName.allowEdit(false);
            dialogFieldEfilingFiled.allowEdit(false);
            dialogFieldEfilingFiled.value(false);
            dialogFieldConsolidatedFileName.allowEdit(false);
            dialogFieldConsolidatedFileName.value('');
            dialogFieldTANName.allowEdit(false);
            dialogFieldBranchDivision.allowEdit(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>efilingModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a generate file modified.
    /// </summary>
    /// <param name="_efilingControl">
    /// The generate file control.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean efilingModified(FormCheckBoxControl   _efilingControl)
    {
        if (dialogFieldEfiling.value() == NoYes::Yes)
        {
            dialogFieldFileName.allowEdit(true);
            dialogFieldEfilingFiled.allowEdit(true);
            dialogFieldTANName.allowEdit(true);
            dialogFieldBranchDivision.allowEdit(true);
        }
        else
        {
            dialogFieldFileName.allowEdit(false);
            dialogFieldEfilingFiled.allowEdit(false);
            dialogFieldEfilingFiled.value(false);
            dialogFieldTANName.allowEdit(false);
            dialogFieldBranchDivision.allowEdit(false);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOverrideMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the attributes of the lookup fields to allow them to always pass the validation and
    /// override dialog field lookup.
    /// </summary>
    protected void modifyOverrideMethod()
    {
        //register the Modified method of dialogFieldEarilerFiled with local method earilerFiledModified
        this.overrideDialogFieldMethod(
            dialogFieldEarilerFiled,
            methodStr(FormCheckBoxControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, statementFiledEarlierModified));

        //register the Modified method of dialogFieldEfiling with local method efilingModified
        this.overrideDialogFieldMethod(
            dialogFieldEfiling,
            methodStr(FormCheckBoxControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, efilingModified));

        //register the Modified method of dialogFieldCorrectEfiling with local method correctEfilingModified
        this.overrideDialogFieldMethod(
            dialogFieldCorrectEfiling,
            methodStr(FormCheckBoxControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, correctEfilingModified));

        //register the Modified method of dialogFieldTaxwithholdDate with local method taxWithholdDateModified
        this.overrideDialogFieldMethod(
            dialogFieldTaxwithholdDate,
            methodStr(FormDateControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, taxWithholdDateModified));

        //register the Lookup method of dialogFieldReceiptNumber with local method receiptNumberLookup
        this.overrideDialogFieldLookup(
            dialogFieldReceiptNumber,
            methodStr(TaxWithholdStatementUIBuilder, receiptNumberLookup));

        //register the Modified method of dialogFieldReceiptNumber with local method receiptNumberModified
        this.overrideDialogFieldMethod(
            dialogFieldReceiptNumber,
            methodStr(FormStringControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, receiptNumberModified));

        //register the Modified method of dialogResponsiblePerson with local method responsiblePersonModified
         this.overrideDialogFieldLookup(
            dialogResponsiblePerson,
            methodStr(TaxWithholdStatementUIBuilder, responsiblePersonLookup));

        this.overrideDialogFieldMethod(
            dialogResponsiblePerson,
            methodStr(FormStringControl, Modified),
            methodStr(TaxWithholdStatementUIBuilder, responsiblePersonModified));

         // Override the validate method of the Responsible Person field.
         this.overrideDialogFieldMethod(
             dialogResponsiblePerson,
            methodStr(FormStringControl, validate),
            methodStr(TaxWithholdStatementUIBuilder, responsiblePersonValidate));

        //register the property of dialogFieldReceiptNumber to remove the validation
        this.overrideDialogFieldValidateAlwaysPass(dialogFieldReceiptNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dialog fields after the fields have been built.
    /// </summary>
    public void postBuild()
    {
        TaxWithholdStatementContract statementContract;
        super();

        //from binding info, get the dialog fields
        dialogFieldEarilerFiled         = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmStatementFiledEarlier));
        dialogFieldReceiptNumber        = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmProvisionalReceiptNumber));
        dialogFieldTANNumber            = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmTaxAccountNumber));
        dialogFieldPeriodEnd            = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmPeriodEnd));
        dialogFieldStatement            = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmStatement));
        dialogFieldTaxwithholdDate      = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmTaxWithholdDate));

        dialogFieldEfiling              = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmEfiling));
        dialogFieldCorrectEfiling       = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmCorrectedEfiling));
        dialogFieldFileName             = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmFileName));
        dialogFieldConsolidatedFileName = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmConsolidatedFileName));
        dialogFieldEfilingFiled         = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmEfilingFiled));
        dialogFieldDesignation          = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmDesignation));
        dialogFieldFullName             = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmFullName));
        dialogFieldStatementFiledearlier = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmStatementFiledEarlier));
        dialogResponsiblePerson         = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmResponsiblePerson));
        dialogFieldTANName              = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmTANName));
        dialogFieldBranchDivision       = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxWithholdStatementContract, parmBranchDivision));

        //Initialize dialogField
        statementContract = this.dataContractObject() as TaxWithholdStatementContract;
        switch (statementContract.parmTaxType())
        {
            case TaxWithholdType_IN::TDS:
                dialogFieldStatement.hideFirstEntry(true);
                dialogFieldStatement.allowEdit(true);
                dialogFieldStatement.value(TaxWithholdStatement_IN::Form26Q);
                //Designation of the person responsible for deducting TDS.
                dialogFieldDesignation.helpText("@GLS6340");
                //Responsible person for deducting TDS
                dialogResponsiblePerson.helpText("@SYS4082472");
                //Person responsible for deducting TDS.
                dialogFieldFullName.helpText("@GLS6339");
                // Whether TDS Statement filed earlier.
                dialogFieldStatementFiledearlier.helpText("@GLS6335");
                break;
            case TaxWithholdType_IN::TCS:
                dialogFieldStatement.value(TaxWithholdStatement_IN::Form27EQ);
                dialogFieldStatement.allowEdit(false);
                //Designation of the person responsible for collecting TCS.
                dialogFieldDesignation.helpText("@GLS5833");
                //Responsible person for collecting TCS
                dialogResponsiblePerson.helpText("@SYS4082473");
                //Person responsible for collecting TCS.
                dialogFieldFullName.helpText("@GLS5522");
                // Whether TCS Statement filed earlier.
                dialogFieldStatementFiledearlier.helpText("@GLS6352");
                break;
            default:
                break;
        }

        if (dialogFieldEarilerFiled.value() == NoYes::No)
        {
            dialogFieldCorrectEfiling.allowEdit(false);
            dialogFieldFileName.allowEdit(false);
            dialogFieldConsolidatedFileName.allowEdit(false);
            dialogFieldEfilingFiled.allowEdit(false);
            dialogFieldEfiling.allowEdit(true);
        }
        else
        {
            dialogFieldTANNumber.allowEdit(false);
            dialogFieldStatement.allowEdit(false);
            dialogFieldTaxwithholdDate.allowEdit(false);
            dialogFieldEfiling.allowEdit(false);

            if (dialogFieldCorrectEfiling.value() == NoYes::Yes)
            {
                dialogFieldCorrectEfiling.allowEdit(true);
                dialogFieldFileName.allowEdit(true);
                dialogFieldEfilingFiled.allowEdit(true);
                dialogFieldConsolidatedFileName.allowEdit(true);
            }
            else
            {
                dialogFieldFileName.allowEdit(false);
                dialogFieldEfilingFiled.allowEdit(false);
                dialogFieldConsolidatedFileName.allowEdit(false);
                dialogFieldConsolidatedFileName.value('');
            }
        }
        dialogFieldPeriodEnd.allowEdit(false);
        dialogFieldFullName.allowEdit(false);
        dialogFieldTANName.allowEdit(false);
        dialogFieldBranchDivision.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptNumberLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the lookup interaction for the Provisional receipt number lookup controls.
    /// </summary>
    /// <param name="_receiptNumberControl">
    /// The provisional receipt number control.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void receiptNumberLookup(FormStringControl _receiptNumberControl)
    {
        SysTableLookup                  sysTableLookup = SysTableLookup::newParameters(tableNum(TaxWithholdProvisionalReceipt_IN), _receiptNumberControl);
        Query                           query;
        QueryBuildDataSource            qbds;
        TaxWithholdStatementContract    statementContract;

        query   = new Query();
        qbds    = query.addDataSource(tableNum(TaxWithholdProvisionalReceipt_IN));
        statementContract = this.dataContractObject() as TaxWithholdStatementContract;
        if (statementContract.parmTaxType() == TaxWithholdType_IN::TCS)
        {
            qbds.addRange(fieldNum(TaxWithholdProvisionalReceipt_IN, Statement)).value(enum2str(TaxWithholdStatement_IN::Form27EQ));
        }
        else
        {
            qbds.addRange(fieldNum(TaxWithholdProvisionalReceipt_IN, Statement)).value(queryRange(TaxWithholdStatement_IN::Form26Q, TaxWithholdStatement_IN::Form27Q));
        }
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdProvisionalReceipt_IN, ProvisionalReceiptNumber));
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdProvisionalReceipt_IN, PrintingDate));
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdProvisionalReceipt_IN, CorrectionType));
        sysTableLookup.addLookupfield(fieldNum(TaxWithholdProvisionalReceipt_IN, TaxWithholdRegNumber));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptNumberModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax withhold provisional receipt number modified.
    /// </summary>
    /// <param name="_receiptNumberControl">
    /// The tax withhold provisional receipt number control.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean receiptNumberModified(FormStringControl  _receiptNumberControl)
    {
        TaxWithholdProvisionalReceipt_IN        taxWithholdProvisionalReceipt;
        TaxWithholdProvisionalReceiptNumber_IN  provisionalReceiptNumber = dialogFieldReceiptNumber.value();

        if (provisionalReceiptNumber)
        {
            select firstOnly TaxWithholdRegNumber, Statement, ToDate, PeriodEnd from taxWithholdProvisionalReceipt
                where   taxWithholdProvisionalReceipt.ProvisionalReceiptNumber  == provisionalReceiptNumber;

            dialogFieldTANNumber.value(TaxWithholdRegNumbers_IN::find(taxWithholdProvisionalReceipt.TaxWithholdRegNumber).RegistrationNumber);
            dialogFieldStatement.value(taxWithholdProvisionalReceipt.Statement);

            if (dialogFieldEarilerFiled.value() == NoYes::Yes)
            {
                dialogFieldTANNumber.allowEdit(false);
                dialogFieldStatement.allowEdit(false);

                dialogFieldTaxwithholdDate.value(taxWithholdProvisionalReceipt.ToDate);
                dialogFieldTaxwithholdDate.allowEdit(false);
                this.modifyTaxWithholdDate();
            }
            else
            {
                dialogFieldTaxwithholdDate.value('');
            }
        }
        else
        {
            dialogFieldTANNumber.allowEdit(true);
            if (dialogFieldStatement.value() != TaxWithholdStatement_IN::Form27EQ)
            {
                dialogFieldStatement.allowEdit(true);
            }
            else
            {
                dialogFieldStatement.allowEdit(false);
            }
            dialogFieldTaxwithholdDate.allowEdit(true);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsiblePersonLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds lookup for responsible person.
    /// </summary>
    /// <param name="_control">
    /// The control behind the changed report id field.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void responsiblePersonLookup(FormStringControl _control)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(HcmWorker), _control, true);
        Query                   query;
        QueryBuildDataSource    qbdsDim;

        query = new Query();
        qbdsDim = query.addDataSource(tableNum(HcmWorker));

        if (query != null)
        {
            sysTableLookup.addLookupfield(fieldNum(HcmWorker, PersonnelNumber), true);
            sysTableLookup.addLookupfield(fieldNum(HcmWorker, Person));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsiblePersonModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax withhold provisional receipt number modified.
    /// </summary>
    /// <param name="_responsiblePersonControl">
    /// The tax withhold provisional receipt number control.
    /// </param>
    /// <returns>
    /// return result
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean responsiblePersonModified(FormStringControl  _responsiblePersonControl)
    {
        HcmWorker       hcmWorkerLoc;
        DirPerson       dirPerson;
        DirPartyTable   dirPartyTable;

        if (dialogResponsiblePerson.value())
        {
            hcmWorkerLoc = HcmWorker::findByPersonnelNumber(dialogResponsiblePerson.value());
            dirPerson = DirPerson::find(hcmWorkerLoc.Person);
            dirPartyTable = DirPartyTable::findRec(dirPerson.RecId);
            dialogFieldFullName.value(dirPartyTable.Name);
        }
        else
        {
           dialogResponsiblePerson.value('');
           dialogFieldFullName.value('');
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsiblePersonValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the date interval is valid.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value is valid; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The responsible person must exist in the <c>HCMWorker</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean responsiblePersonValidate(FormStringControl _control)
    {
        boolean     ret = true;
        HcmWorker   hcmWorkerRecid = HcmWorker::findByPersonnelNumber(dialogResponsiblePerson.value());

        if (_control.modified() && dialogResponsiblePerson.value() && !hcmWorkerRecid)
        {
            ret = checkFailed(strfmt("@SYS4083080"));

            if (!ret)
            {
                dialogResponsiblePerson.value('');
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementFiledEarlierModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a statement filed earlier modified.
    /// </summary>
    /// <param name="_earilerFiledControl">
    /// The statement filed earlier control.
    /// </param>
    /// <returns>
    /// Always returns <c>true</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean statementFiledEarlierModified(FormCheckBoxControl   _earilerFiledControl)
    {
        if (dialogFieldEarilerFiled.value() == NoYes::Yes)
        {
            dialogFieldCorrectEfiling.allowEdit(true);
            dialogFieldEfiling.allowEdit(false);
            dialogFieldEfiling.value(false);
        }
        else
        {
            dialogFieldReceiptNumber.value('');
            dialogFieldCorrectEfiling.allowEdit(false);
            dialogFieldCorrectEfiling.value(false);
            dialogFieldEfiling.allowEdit(true);
            dialogFieldTaxwithholdDate.allowEdit(true);
            dialogFieldTANNumber.allowEdit(true);

            if (dialogFieldStatement.value() != TaxWithholdStatement_IN::Form27EQ)
            {
                dialogFieldStatement.allowEdit(true);
            }
            dialogFieldConsolidatedFileName.allowEdit(false);
            dialogFieldConsolidatedFileName.value('');
        }

        dialogFieldFileName.allowEdit(false);
        dialogFieldEfilingFiled.allowEdit(false);
        dialogFieldEfilingFiled.value(false);
        dialogFieldTANName.allowEdit(false);
        dialogFieldBranchDivision.allowEdit(false);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax withhold date modified.
    /// </summary>
    /// <param name="_taxWithholdDate">
    /// The tax withhold date control.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean taxWithholdDateModified(FormDateControl _taxWithholdDate)
    {
        TransDate               fromdate;
        TransDate               todate;
        TaxWithholdPeriodEnd_IN periodEnd;

        TaxWithholdStatementContract statementContract;

        [periodEnd, fromdate, todate] = TaxWithholdStatementReportHelper::getFromToDateAndPeriodEnd(dialogFieldTaxwithholdDate.value());

        dialogFieldPeriodEnd.value(periodEnd);

        if (this.dataContractObject())
        {
            statementContract = this.dataContractObject() as TaxWithholdStatementContract;
            statementContract.parmPeriodEnd(periodEnd);
            statementContract.parmFromDate(fromdate);
            statementContract.parmToDate(toDate);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTaxWithholdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs modify tax withhold date.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifyTaxWithholdDate()
    {
        TransDate               fromdate;
        TransDate               todate;
        TaxWithholdPeriodEnd_IN periodEnd;

        TaxWithholdStatementContract statementContract;

        [periodEnd, fromdate, todate] = TaxWithholdStatementReportHelper::getFromToDateAndPeriodEnd(dialogFieldTaxwithholdDate.value());

        dialogFieldPeriodEnd.value(periodEnd);

        if (this.dataContractObject())
        {
            statementContract = this.dataContractObject() as TaxWithholdStatementContract;
            statementContract.parmPeriodEnd(periodEnd);
            statementContract.parmFromDate(fromdate);
            statementContract.parmToDate(toDate);
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>