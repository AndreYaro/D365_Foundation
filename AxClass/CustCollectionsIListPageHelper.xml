<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsIListPageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionsIListPAgeHelper</c> defines the methods needed for the collections list pages
/// </summary>
interface CustCollectionsIListPageHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAgingPeriodValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the buckets of the aging period definition.
    /// </summary>
    /// <param name="_agingPeriodName">
    ///    The aging period definition at which to look.
    /// </param>
    /// <returns>
    ///    true if there is at least one bucket, but not more than six; otherwise, false.
    /// </returns>
    public boolean checkAgingPeriodValid(CustVendReportName _agingPeriodName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForAging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current aging period definition, and displays appropriate warnings.
    /// </summary>
    /// <returns>
    ///    true if the current aging period definition is valid; otherwise, false.
    /// </returns>
    public boolean checkForAging()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPoolExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks to see whether a given pool exists before trying to use it.
    /// </summary>
    /// <param name="_poolID">
    ///    The <c>CustCollectionsPoolId</c> object to check for.
    /// </param>
    /// <returns>
    ///    true if the pool exists in the current pool list; otherwise, false.
    /// </returns>
    public boolean checkPoolExists(CustCollectionsPoolId _poolID)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPoolLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the lookup form for a custom <c>CustCollectionsPool</c> object.
    /// </summary>
    public void createPoolLookup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentAgent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current user as an instance of the <c>CustCollectionsAgent</c> class.
    /// </summary>
    /// <returns>
    ///    The current user as an instance of the <c>CustCollectionsAgent</c> class.
    /// </returns>
    public CustCollectionsAgent getCurrentAgent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPoolQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Uses the <c>PoolFilter</c> value to get the current pool query from a <c>Map</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> object that contains the customer grouping of the current pool.
    /// </returns>
    public Query getCurrentPoolQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAgingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>Name</c> value of the <c>StatRepInterval</c> object that the list page should filter by.
    /// </summary>
    /// <returns>
    ///    The <c>CustVendReportName</c> object of the correct <c>StatRepInterval</c> value.
    /// </returns>
    /// <remarks>
    ///    This method first tries to find the correct name by looking at the pool query. If it cannot be
    ///    found on the pool query, it looks for what default is set on the <c>CustParameters</c> form. If
    ///    there is not one set there, it tries to get the first available <c>StatRepInterval</c> value.
    /// </remarks>
    public CustVendReportName getDefaultAgingPeriod()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPoolId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CustCollectionsPoolId</c> value of the first <c>CustCollectionsPool</c> object in the
    ///    map of the class.
    /// </summary>
    /// <returns>
    ///    The <c>CustCollectionsPoolId</c> value of the first <c>CustCollectionsPool</c> object in the map of
    ///    the class.
    /// </returns>
    public CustCollectionsPoolId getFirstPoolId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialFilterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the initial value for the pool filter for the collections list pages.
    /// </summary>
    /// <param name="_lastValue">
    ///    The <c>CustCollectionsPoolId</c> value that was selected when the form was last open.
    /// </param>
    /// <param name="_poolFormValue">
    ///    The <c>CustCollectionsPoolId</c> value from the collections pools form.
    /// </param>
    /// <returns>
    ///    The correct pool to use when a collections list page loads.
    /// </returns>
    public CustCollectionsPoolId getInitialFilterValue(CustCollectionsPoolId _lastValue, CustCollectionsPoolId _poolFormValue = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPools</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the pool filter on the form with pools assigned to the current agent.
    /// </summary>
    public void loadPools()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadUnassignedPools</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the pool filter on the form with pools not assigned to the current agent.
    /// </summary>
    /// <remarks>
    ///    This is run only when the <c>CustCollectionsAgent.ShowAll</c> value is checked or the agent has no
    ///    pools assigned.
    /// </remarks>
    public void loadUnassignedPools()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the company that the listpage helper will query when performing cross company queries
    /// </summary>
    /// <param name = "_company">The company to perform queries with</param>
    public void updateCompany(SelectableDataArea _company = curExt())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCrossCompany</Name>
				<Source><![CDATA[
    public boolean isCrossCompany()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>