<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCRuntimeComponent</c> class is the runtime class for a component.
/// </summary>
class PCRuntimeComponent implements PCRuntimeInterface, PCRuntimeAttributeCollection
{
    int             instanceId;
    PCName          displayName;
    PCSolverName    solverName;
    PCClassRecId    componentRecId;
    boolean         isHidden;
    str             name; // has to be unique across the entire model.

    List            attributes;
    List            subcomponents;
    List            attributeGroups;
    List            priceElements;
    Map             subComponentMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a visitor instance.
    /// </summary>
    /// <param name="_visitor">
    /// A runtime visitor.
    /// </param>
    public void accept(PCRuntimeVisitor _visitor)
    {
        _visitor.visitStart(this);

        this.acceptCollection(_visitor, this.getAttributes());

        this.acceptCollection(_visitor, this.getAttributeGroups());

        this.acceptCollection(_visitor, this.getPriceElements());

        this.acceptCollection(_visitor, this.getSubcomponents());

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a visitor instance for a collection of child elements.
    /// </summary>
    /// <param name="_visitor">
    /// A runtime visitor.
    /// </param>
    /// <param name="_list">
    /// A collection of child elements.
    /// </param>
    protected void acceptCollection(PCRuntimeVisitor _visitor, List _list)
    {
        ListEnumerator le = _list.getEnumerator();

        while (le.moveNext())
        {
            le.current().accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an attribute to a component.
    /// </summary>
    /// <param name="_runtimeAttribute">
    /// A runtime attribute.
    /// </param>
    public void addAttribute(PCRuntimeAttribute _runtimeAttribute)
    {
        attributes.addEnd(_runtimeAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an attribute group to a component.
    /// </summary>
    /// <param name="_runtimeAttributeGroup">
    /// A runtime attribute group.
    /// </param>
    public void addAttributeGroup(PCRuntimeAttributeGroup _runtimeAttributeGroup)
    {
        attributeGroups.addEnd(_runtimeAttributeGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a price element to a component.
    /// </summary>
    /// <param name="_runtimePriceElement">
    /// A runtime price element.
    /// </param>
    public void addPriceElement(PCRuntimePriceElement _runtimePriceElement)
    {
        priceElements.addEnd(_runtimePriceElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubcomponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a subcomponent to a component.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component.
    /// </param>
    public void addSubcomponent(PCRuntimeComponent _runtimeComponent)
    {
        subcomponents.addEnd(_runtimeComponent);

        subComponentMap.insert(_runtimeComponent.parmName(), _runtimeComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the attribute groups of a component.
    /// </summary>
    /// <returns>
    /// The attribute groups.
    /// </returns>
    public List getAttributeGroups()
    {
        return attributeGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ungrouped attributes in a component.
    /// </summary>
    /// <returns>
    /// The ungrouped attributes in the component.
    /// </returns>
    public List getAttributes()
    {
        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the price elements in a component.
    /// </summary>
    /// <returns>
    /// The price elements in the component.
    /// </returns>
    public List getPriceElements()
    {
        return priceElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubcomponentByUniqueName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a subcomponent by its unique name.
    /// </summary>
    /// <param name="_componentUniqueName">
    /// The unique name of a subcomponent.
    /// </param>
    /// <returns>
    /// The runtime subcomponent.
    /// </returns>
    public PCRuntimeComponent getSubcomponentByUniqueName(str _componentUniqueName)
    {
        return subComponentMap.lookup(_componentUniqueName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubcomponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the subcomponents.
    /// </summary>
    /// <returns>
    /// The subcomponents of the component.
    /// </returns>
    public List getSubcomponents()
    {
        return subcomponents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        attributes      = new List(Types::Class);
        attributeGroups = new List(Types::Class);
        priceElements   = new List(Types::Class);
        subcomponents   = new List(Types::Class);
        subComponentMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComponentRecId</Name>
				<Source><![CDATA[
        public PCClassRecId parmComponentRecId(PCClassRecId _componentRecId = componentRecId)
    {
        componentRecId = _componentRecId;

        return componentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayName</Name>
				<Source><![CDATA[
        public PCName parmDisplayName(PCName _displayName = displayName)
    {
        displayName = _displayName;

        return displayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInstanceId</Name>
				<Source><![CDATA[
        public int parmInstanceId(int _instanceId = instanceId)
    {
        instanceId = _instanceId;

        return instanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsHidden</Name>
				<Source><![CDATA[
        public boolean parmIsHidden(boolean _isHidden = isHidden)
    {
        isHidden = _isHidden;

        return isHidden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
        public str parmName(str _name = name)
    {
        name = _name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSolverName</Name>
				<Source><![CDATA[
        public PCSolverName parmSolverName(PCSolverName _solverName = solverName)
    {
        solverName = _solverName;

        return solverName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubcomponentDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the display name for a subcomponent.
    /// </summary>
    /// <param name="_componentUniqueName">
    /// The unique name of the subcomponent.
    /// </param>
    /// <param name="_displayName">
    /// The display name of the subcomponent.
    /// </param>
    public void setSubcomponentDisplayName(str _componentUniqueName, PCName _displayName)
    {
        PCRuntimeComponent runtimeComponent = subComponentMap.lookup(_componentUniqueName);

        runtimeComponent.parmDisplayName(_displayName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCRuntimeComponent construct()
    {
        return new PCRuntimeComponent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRuntimeComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a runtime component.
    /// </summary>
    /// <param name="_displayName">
    /// The display name of the component.
    /// </param>
    /// <param name="_instanceId">
    /// The instance ID of the component.
    /// </param>
    /// <param name="_componentRecId">
    /// The record ID of the component.
    /// </param>
    /// <returns>
    /// A new instance of the runtime component.
    /// </returns>
    public static PCRuntimeComponent newRuntimeComponent(PCName _displayName, int _instanceId, PCClassRecId _componentRecId)
    {
        PCRuntimeComponent runtimeComponent = PCRuntimeComponent::construct();

        runtimeComponent.parmDisplayName(_displayName);
        runtimeComponent.parmInstanceId(_instanceId);
        runtimeComponent.parmComponentRecId(_componentRecId);

        return runtimeComponent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>