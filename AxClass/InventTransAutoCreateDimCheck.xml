<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransAutoCreateDimCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransAutoCreateDimCheck</c> is responsible for verifying
/// whether the specified inventory dimension can be automatically generated.
/// </summary>
class InventTransAutoCreateDimCheck
{
    InventAutoDimCheckUpdateAdapter inventUpdateAdapter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustAutoCreateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether a batch number must be automatically assigned.
    /// </summary>
    /// <returns>
    /// true if the batch number must be automatically assigned; otherwise, false.
    /// </returns>
    public boolean mustAutoCreateBatch()
    {
        return !inventUpdateAdapter.parmInventDim().InventBatchId
            && this.mustAutoCreateFromNumberGroup(inventUpdateAdapter.parmInventTable().BatchNumGroupId, fieldNum(inventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAutoCreateDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the specified inventory dimension must be automatically assigned.
    /// </summary>
    /// <param name="_inventDimFieldId">
    /// ID of the inventory dimension field.
    /// </param>
    /// <returns>
    /// true if the dimension must be automatically assigned; otherwise, false.
    /// </returns>
    public boolean mustAutoCreateDim(FieldId _inventDimFieldId)
    {
        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventSerialId):
                return this.mustAutoCreateSerial();

            case fieldNum(InventDim, InventBatchId):
                return this.mustAutoCreateBatch();

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAutoCreateFromNumberGroup</Name>
				<Source><![CDATA[
private boolean mustAutoCreateFromNumberGroup(InventNumGroupId _numGroupId, FieldId _inventDimFieldId)
    {
        if (_numGroupId && inventUpdateAdapter.parmInventDimGroupSetup().isDimensionActive(_inventDimFieldId))
        {
            InventNumGroup inventNumGroup = InventNumGroup::find(_numGroupId);
            if (!inventNumGroup)
            {
                throw error(strFmt("@SYS3312", inventNumGroup.NumGroupId));
            }

            return !inventNumGroup.ManualAllocation
                && inventNumGroup.OnlyInventTransaction
                && inventNumGroup.isTransTypeActivated(inventUpdateAdapter.parmInventTransType())
                && (
                    ( inventNumGroup.PhysicalUpdate &&  inventUpdateAdapter.parmIsPhysicalUpdate()) ||
                    (!inventNumGroup.PhysicalUpdate && !inventUpdateAdapter.parmIsPhysicalUpdate()));
        }

        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>mustAutoCreateSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether a serial number must be automatically assigned.
    /// </summary>
    /// <returns>
    /// true if the serial number must be automatically assigned; otherwise, false.
    /// </returns>
    public boolean mustAutoCreateSerial()
    {
        return !inventUpdateAdapter.parmInventDim().inventSerialId
            && this.mustAutoCreateFromNumberGroup(inventUpdateAdapter.parmInventTable().SerialNumGroupId, fieldNum(inventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpdateAdapter</Name>
				<Source><![CDATA[
        public InventAutoDimCheckUpdateAdapter parmInventUpdateAdapter(InventAutoDimCheckUpdateAdapter _inventUpdateAdapter = inventUpdateAdapter)
    {
        inventUpdateAdapter = _inventUpdateAdapter;
        return inventUpdateAdapter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransAutoCreateDimCheck construct()
    {
        return new InventTransAutoCreateDimCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovementDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransAutoCreateDimCheck</c> class
    /// according to the specified parameters related to an inventory update.
    /// </summary>
    /// <param name="_movement">
    /// An inventory movement.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions.
    /// </param>
    /// <param name="_physicalUpdate">
    /// A value indicating whether a physical update is being performed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransAutoCreateDimCheck</c> class.
    /// </returns>
    public static InventTransAutoCreateDimCheck newFromMovementDim(InventMovement _movement, InventDim _inventDim, boolean _physicalUpdate)
    {
        InventAutoDimCheckUpdateAdpt_MovementDim adapter = InventAutoDimCheckUpdateAdpt_MovementDim::construct();
        adapter.parmIsPhysicalUpdate(_physicalUpdate);
        adapter.parmMovement(_movement);
        adapter.parmInventDim(_inventDim);

        return InventTransAutoCreateDimCheck::newFromUpdateAdapter(adapter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransAutoCreateDimCheck</c> class
    /// based on the inventory update adapter.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventory transaction that is being updated.
    /// </param>
    /// <param name="_inventTable">
    /// The item that the transaction refers to.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions of the transaction.
    /// </param>
    /// <param name="_physicalUpdate">
    /// A boolean value indicating whether the transaction is being updated physically.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransAutoCreateDimCheck</c> class.
    /// </returns>
    public static InventTransAutoCreateDimCheck newFromTransItemDim(
        InventTrans _inventTrans,
        InventTable _inventTable,
        InventDim   _inventDim,
        boolean     _physicalUpdate)
    {
        InventAutoDimCheckUpdateAdpt_InventTrans adapter = InventAutoDimCheckUpdateAdpt_InventTrans::construct();
        adapter.parmIsPhysicalUpdate(_physicalUpdate);
        adapter.parmInventTrans(_inventTrans);
        adapter.parmInventTable(_inventTable);
        adapter.parmInventDim(_inventDim);

        return InventTransAutoCreateDimCheck::newFromUpdateAdapter(adapter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromUpdateAdapter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransAutoCreateDimCheck</c> class
    /// based on the inventory update adapter.
    /// </summary>
    /// <param name="_inventUpdate">
    /// The inventory update adapter that provides necessary information about the inventory update.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransAutoCreateDimCheck</c> class.
    /// </returns>
    public static InventTransAutoCreateDimCheck newFromUpdateAdapter(InventAutoDimCheckUpdateAdapter _inventUpdate)
    {
        InventTransAutoCreateDimCheck check = InventTransAutoCreateDimCheck::construct();

        check.parmInventUpdateAdapter(_inventUpdate);

        return check;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
