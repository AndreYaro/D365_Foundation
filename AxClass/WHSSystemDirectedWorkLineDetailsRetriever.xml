<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSystemDirectedWorkLineDetailsRetriever</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSSystemDirectedWorkLineDetailsRetriever
{
    private NumberOfRecords requestedWorkHeaders;
    private NumberOfRecords foundWorkHeaders;
    private Set evaluatedWorkHeaders;
    private WHSMenuItemName menuItemName;
    private InventSiteId inventSiteId;
    private InventLocationId inventLocationId;
    private WHSUserId userId;
    private container skipWorkId;
    private WHSSeqNum sequenceNumber;
    private WHSSeqNum startSequenceNumber;
    private WHSSeqNum endSequenceNumber;
    private Set workClassIdSet;
    private List systemDirectedWorkLineDetailsList;
    private WhsWorkExecute workExecute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        workClassIdSet = new Set(Types::String);
        evaluatedWorkHeaders = new Set(Types::String);
        systemDirectedWorkLineDetailsList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSSystemDirectedWorkLineDetailsRetriever construct()
    {
        return new WHSSystemDirectedWorkLineDetailsRetriever();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestedWorkHeaders</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final NumberOfRecords parmRequestedWorkHeaders(NumberOfRecords _requestedWorkHeaders)
    {
        requestedWorkHeaders = _requestedWorkHeaders;

        return requestedWorkHeaders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final WHSMenuItemName parmMenuItemName(WHSMenuItemName _menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final InventSiteId parmInventSiteId(InventSiteId _inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final InventLocationId parmInventLocationId(InventLocationId _inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final WHSUserId parmUserId(WHSUserId _userId)
    {
        userId = _userId;

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final container parmSkipWorkId(container _skipWorkId)
    {
        skipWorkId = _skipWorkId;

        return skipWorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSequenceNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final WHSSeqNum parmSequenceNumber(WHSSeqNum _sequenceNumber)
    {
        sequenceNumber = _sequenceNumber;

        return sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workClassIdSet</Name>
				<Source><![CDATA[
    protected Set workClassIdSet()
    {
        return workClassIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecute</Name>
				<Source><![CDATA[
    private WhsWorkExecute workExecute()
    {
        if (!workExecute)
        {
            workExecute = this.constructWorkExecute();
        }

        return workExecute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWorkExecute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WhsWorkExecute constructWorkExecute()
    {
        return new WhsWorkExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSystemDirectedWorkLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the eligible work lines for system directed menu items.
    /// </summary>
    /// <returns>
    /// A list of the <c>WHSSystemDirectedWorkLineDetails</c> classes that provide the work line and the
    /// sequence number of the system directed work sequence query where the work lines were found.
    /// </returns>
    [Wrappable(true)]
    public final List retrieveSystemDirectedWorkLineDetails()
    {
        this.validateInputParameters();

        this.initWorkClassIdSet();

        this.initSequenceNumbers();
        this.populateWorkLineDetailsFromSystemDirectedWorkSequenceQueries();

        if (this.mustRestartFromZeroSequence())
        {
            this.initSequenceNumbersForRestart();
            this.populateWorkLineDetailsFromSystemDirectedWorkSequenceQueries();
        }

        return systemDirectedWorkLineDetailsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInputParameters</Name>
				<Source><![CDATA[
    private void validateInputParameters()
    {
        if (requestedWorkHeaders <= 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkClassIdSet</Name>
				<Source><![CDATA[
    private void initWorkClassIdSet()
    {
        WHSRFMenuItemLine menuItemLine;

        while select WorkClassId from menuItemLine
            where menuItemLine.MenuItemName == menuItemName
        {
            workClassIdSet.add(menuItemLine.WorkClassId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceNumbers</Name>
				<Source><![CDATA[
    private void initSequenceNumbers()
    {
        startSequenceNumber = sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRestartFromZeroSequence</Name>
				<Source><![CDATA[
    private boolean mustRestartFromZeroSequence()
    {
        return sequenceNumber != 0
            && systemDirectedWorkLineDetailsList.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceNumbersForRestart</Name>
				<Source><![CDATA[
    private void initSequenceNumbersForRestart()
    {
        startSequenceNumber = 0;
        endSequenceNumber = sequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkLineDetailsFromSystemDirectedWorkSequenceQueries</Name>
				<Source><![CDATA[
    private void populateWorkLineDetailsFromSystemDirectedWorkSequenceQueries()
    {
        WHSSystemDirectedWorkLineDetails systemDirectedWorkLineDetails;

        using (var workQueryingPerfTask = WHSInstrumentationSystemDirectedWorkQueryingPerformanceTask::newProcessWorkSequenceQuery(WHSRFMenuItemTable::find(menuItemName), InventLocation::find(inventLocationId), sequenceNumber))
        {
            WHSSystemDirectedWorkSequenceQuery systemDirectedWorkSequenceQuery;

            while select PackedQueryRun, SequenceNumber from systemDirectedWorkSequenceQuery
                order by SequenceNumber asc
                where systemDirectedWorkSequenceQuery.MenuItemName		== menuItemName
                    && systemDirectedWorkSequenceQuery.SequenceNumber	>= startSequenceNumber
                    && (endSequenceNumber == 0 || systemDirectedWorkSequenceQuery.SequenceNumber < endSequenceNumber)
            {
                List returnWorkLines = this.populateFirstOpenWorkLinesSystemDirectedFromQueryRun(new QueryRun(systemDirectedWorkSequenceQuery.PackedQueryRun), true);

                ListEnumerator returnWorkLinesEnumerator = returnWorkLines.getEnumerator();

                while (returnWorkLinesEnumerator.moveNext())
                {
                    WHSWorkLine returnWorkLine = returnWorkLinesEnumerator.current();

                    if (returnWorkLine)
                    {
                        systemDirectedWorkLineDetails = WHSSystemDirectedWorkLineDetails::newFromWorkLineSequenceNumber(returnWorkLine, systemDirectedWorkSequenceQuery.SequenceNumber);
                        systemDirectedWorkLineDetailsList.addEnd(systemDirectedWorkLineDetails);
                    }
                }

                if (this.isRequestedNumberOfWorkHeadersFound())
                {
                    break;
                }
            }

            if (!systemDirectedWorkLineDetails)
            {
                systemDirectedWorkLineDetails = WHSSystemDirectedWorkLineDetails::newDefault();
            }

            workQueryingPerfTask.setEndingSequenceNumber(systemDirectedWorkLineDetails.SequenceNumber);
            workQueryingPerfTask.setWorkLine(systemDirectedWorkLineDetails.WorkLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestedNumberOfWorkHeadersFound</Name>
				<Source><![CDATA[
    private boolean isRequestedNumberOfWorkHeadersFound()
    {
        return foundWorkHeaders >= requestedWorkHeaders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFirstOpenWorkLinesSystemDirectedFromQueryRun</Name>
				<Source><![CDATA[
    private List populateFirstOpenWorkLinesSystemDirectedFromQueryRun(QueryRun _queryRun, boolean _mustDirectlyUpdateWorkUser)
    {
        List workLines = new List(Types::Record);

        using (var populateFirstOpenLinePerformanceTask = WHSInstrumentationSystemDirectedPopulateFirstOpenLinePerformanceTask::newFromParameters(_mustDirectlyUpdateWorkUser))
        {
            QueryBuildDataSource qbdsWorkTable = this.buildWorkTableQuery(_queryRun.query());
            this.excludePartialCycleCountWorkForBlindCycleCount(qbdsWorkTable);
            this.buildWorkLineQuery(_queryRun.query());

            populateFirstOpenLinePerformanceTask.setQueryContainsWorkTableDataSource(qbdsWorkTable != null);
            
            while (_queryRun.next())
            {
                WHSWorkTable workTable = _queryRun.get(tableNum(WHSWorkTable));
                populateFirstOpenLinePerformanceTask.increaseMainLoopIterationCount();

                if (evaluatedWorkHeaders.in(workTable.WorkId))
                {
                    populateFirstOpenLinePerformanceTask.increaseWorkHeadersAlreadyEvaluated();
                    continue;
                }
                else
                {
                    evaluatedWorkHeaders.add(workTable.WorkId);
                }

                WHSWorkLine workLine = this.getFirstOpenWorkLineAndUpdateWorkLockedByUserIfRequired(workTable.WorkId, _mustDirectlyUpdateWorkUser);

                if (workLine.RecId)
                {
                    workLines.addEnd(workLine);
                    foundWorkHeaders++;
                    populateFirstOpenLinePerformanceTask.increaseWorkLinesFound();

                    if (this.isRequestedNumberOfWorkHeadersFound())
                    {
                        break;
                    }
                }
            }            
        }

        return workLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkTableQuery</Name>
				<Source><![CDATA[
    private QueryBuildDataSource buildWorkTableQuery(Query _query)
    {
        return this.workExecute().buildWorkTableQuery(menuItemName, userId, _query, inventSiteId, inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludePartialCycleCountWorkForBlindCycleCount</Name>
				<Source><![CDATA[
    private void excludePartialCycleCountWorkForBlindCycleCount(QueryBuildDataSource _qbdsWorkTable)
    {
        if (!WHSRFMenuItemCycleCount::find(menuItemName).BlindItem)
        {
            _qbdsWorkTable.addRange(fieldNum(WHSWorkTable, IsPartialCycleCountWork)).value(SysQuery::value(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkLineQuery</Name>
				<Source><![CDATA[
    private QueryBuildDataSource buildWorkLineQuery(Query _query)
    {
        return this.workExecute().buildWorkLineQuery(workClassIdSet, _query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOpenWorkLineAndUpdateWorkLockedByUserIfRequired</Name>
				<Source><![CDATA[
    private WHSWorkLine getFirstOpenWorkLineAndUpdateWorkLockedByUserIfRequired(WHSWorkId _workId, boolean _mustDirectlyUpdateWorkUser)
    {
        WHSWorkLine workLine;

        if (_mustDirectlyUpdateWorkUser)
        {
            workLine = this.getFirstOpenWorkLineAndUpdateWorkLockedByUser(_workId);
        }
        else
        {
            workLine = this.getFirstOpenWorkLineAndValidateForSystemDirected(_workId);
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOpenWorkLineAndUpdateWorkLockedByUser</Name>
				<Source><![CDATA[
    private WHSWorkLine getFirstOpenWorkLineAndUpdateWorkLockedByUser(WHSWorkId _workId)
    {
        UserConnection  conn;
        WHSWorkTable    workTable;
        WHSWorkLine		workLine;
     
        try
        {
            conn = new UserConnection();

            workTable.setConnection(conn);

            conn.ttsbegin();
    
            workTable.readPast(true);

            select firstonly pessimisticLock workTable
                where workTable.WorkId == _workId;
    
            if (workTable && this.isWorkEligibleForSystemDirected(workTable))
            {
                workLine = this.workExecute().getFirstOpenLine(workTable.WorkId, userId, false);
                
                // Validate work class again for first open line
                if (this.isWorkLineValid(workLine))
                {
                    workTable.LockedUser = userId;
                    workTable.update();
                }
                else
                {
                    workLine.clear();
                }
            }

            conn.ttscommit();
        }
        finally
        {
            conn.finalize();
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOpenWorkLineAndValidateForSystemDirected</Name>
				<Source><![CDATA[
    private WHSWorkLine getFirstOpenWorkLineAndValidateForSystemDirected(WHSWorkId _workId)
    {
        WHSWorkLine workLine;

        // Re-find the workTable in case the query becomes out of date.
        // This often occurs when the work user is updated, so this should also be rechecked
        // despite it being included in the work table query by default.
        WHSWorkTable workTable = WHSWorkTable::find(_workId);

        if (this.isWorkEligibleForSystemDirected(workTable))
        {
            workLine = this.workExecute().getFirstOpenLine(workTable.WorkId, userId, false);

            // Validate work class again for first open line
            if (!this.isWorkLineValid(workLine))
            {
                workLine.clear();
            }
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkEligibleForSystemDirected</Name>
				<Source><![CDATA[
    private boolean isWorkEligibleForSystemDirected(WHSWorkTable _workTable)
    {
        return this.workExecute().isWorkEligibleForSystemDirected(skipWorkId, _workTable, userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkLineValid</Name>
				<Source><![CDATA[
    private boolean isWorkLineValid(WHSWorkLine _workLine)
    {
        return _workLine
            && (!workClassIdSet.elements() || workClassIdSet.in(_workLine.WorkClassId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>