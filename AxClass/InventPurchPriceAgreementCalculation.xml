<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPurchPriceAgreementCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventPurchPriceAgreementCalculation</c> class is responsible for price calculation from purchase agreements.
/// </summary>
public final class InventPurchPriceAgreementCalculation
{
    public InventPurchPriceAgreementCalculationParameters  parameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeResult</Name>
				<Source><![CDATA[
    private InventPurchPriceAgreementCalculationResult initializeResult()
    {
        InventPurchPriceAgreementCalculationResult result = InventPurchPriceAgreementCalculationResult::construct();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calulates price from purchase agreements.
    /// </summary>
    /// <returns>
    ///     The result of price calculation from purchase agreements.
    /// </returns>
    public InventPurchPriceAgreementCalculationResult purchPriceAgreement()
    {
        VendTable           vendTable;
        InventTableModule   inventTableModule;

        PriceDisc           priceDisc;

        #ISOCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        PriceUnit           priceUnit;

        InventPurchPriceAgreementCalculationResult result = this.initializeResult();

        if (!parameters.currencyCode)
        {
            parameters.currencyCode = CompanyInfoHelper::standardCurrency();
        }
        
        inventTableModule= InventTableModule::find(parameters.inventTable.ItemId, ModuleInventPurchSales::Purch);

        if (parameters.unit  != inventTableModule.UnitId)
        {
            parameters.qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(parameters.inventTable.ItemId,
                                                                                         parameters.inventDim.inventDimId,
                                                                                         parameters.qty,
                                                                                         parameters.unit,
                                                                                         inventTableModule.UnitId,
                                                                                         NoYes::Yes);
        }

        vendTable= VendTable::find(parameters.accountNum);

        priceDisc = parameters.inventTable.callCreatePriceDiscInstance(parameters.inventTable.callCreateAndInitPriceDiscParameters(ModuleInventPurchSales::Purch,
                                  parameters.inventTable.ItemId,
                                  parameters.inventDim,
                                  inventTableModule.UnitId,
                                  parameters.priceDate,
                                  parameters.qty,
                                  vendTable.AccountNum,
                                  parameters.currencyCode));

        if (!priceDisc.findPrice(vendTable.PriceGroup, false))
        {
            // Price agreement is not found
            if (countryRegion_RU)
            {
                result.costPrice = 0;
                result.costPriceUnit = 1;
                result.costMarkup = 0;
                result.priceDiscFromDate = dateNull();
                result.priceDiscToDate = dateNull();
                result.costPriceSecCur = 0;
                result.costMarkupSecCur = 0;
            }
            else
            {
                result.costPrice = 0;
                result.costPriceUnit = 1;
                result.costMarkup = 0;
                result.priceDiscFromDate = dateNull();
                result.priceDiscToDate = dateNull();
            }

            return result;
        }

        InventPurchPriceCalculation priceCalc = this.calculatePriceAndMarkupForPurchaseAgreement(priceDisc, parameters.includeLineDisc, vendTable);

        if (countryRegion_RU)
        {
            result.costPrice = ExchangeRateHelper::mstPrice(priceCalc.price, parameters.currencyCode);
            result.costPriceUnit = priceCalc.priceUnit;
            result.costMarkup = ExchangeRateHelper::mstPrice(priceCalc.priceMarkup, parameters.currencyCode);
            result.priceDiscFromDate = priceDisc.priceTable().FromDate;
            result.priceDiscToDate = priceDisc.priceTable().ToDate;
            result.costPriceSecCur = priceCalc.priceSecCur;
            result.costMarkupSecCur = priceCalc.priceMarkupSecCur;
        }
        else
        {
            result.costPrice = ExchangeRateHelper::mstPrice(priceCalc.price, parameters.currencyCode);
            result.costPriceUnit = priceCalc.priceUnit;
            result.costMarkup = ExchangeRateHelper::mstPrice(priceCalc.priceMarkup, parameters.currencyCode);
            result.priceDiscFromDate = priceDisc.priceTable().FromDate;
            result.priceDiscToDate = priceDisc.priceTable().ToDate;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create new instance from an <c>InventPurchPriceAgreementCalculation</c> class.
    /// </summary>
    /// <param name = "_parameters">
    ///     The parameters class to create the instance from.
    ///     </param>
    /// <returns>
    ///     A new instance.
    /// </returns>
    [Hookable(false)]
    static public InventPurchPriceAgreementCalculation newFromParameters(InventPurchPriceAgreementCalculationParameters _parameters)
    {
        InventPurchPriceAgreementCalculation instance = new InventPurchPriceAgreementCalculation();
        instance.parameters = _parameters;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePriceAndMarkupForPurchaseAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates price and price markup.
    /// </summary>
    /// <param name = "_priceDisc">
    ///     An instance of the <c>PriceDisc</c> class.
    /// </param>
    /// <param name = "_includeLineDisc">
    ///     A boolean value indicating whether to include line discount for price calculation.
    /// </param>
    /// <param name = "_vendTable">
    ///     A <c>VendTable</c> table buffer to use for line discount calculation.
    /// </param>
    /// <returns>
    ///     Result of price calculation.
    /// </returns>
    protected InventPurchPriceCalculation calculatePriceAndMarkupForPurchaseAgreement(
        PriceDisc   _priceDisc,
        boolean     _includeLineDisc,
        VendTable   _vendTable)
    {
        Price               price;
        PriceMarkup         priceMarkup;

        Price               priceSecCur;
        PriceMarkup         priceMarkupSecCur;
        #ISOCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        PriceUnit           priceUnit;

        price       = _priceDisc.price();
        priceMarkup = _priceDisc.markup();
        priceUnit   = _priceDisc.priceUnit();

        if (countryRegion_RU)
        {
            priceSecCur       = _priceDisc.priceSecCur_RU();
            priceMarkupSecCur = _priceDisc.markupSecCur_RU();
        }

        if (_includeLineDisc && _priceDisc.findLineDisc(parameters.inventTable.purchLineDisc(), _vendTable.LineDisc))
        {
            DiscAmount  lineDiscAmount  = _priceDisc.lineDiscAmount();
            DiscPct     lineDiscPct     = _priceDisc.lineDiscPct();

            price       = ((price - lineDiscAmount) / (priceUnit ? priceUnit : 1)) * ((100 - lineDiscPct) / 100);
            price       = price * (priceUnit ? priceUnit : 1);
            priceMarkup = priceMarkup * ((100 - lineDiscPct) / 100);
        }

        InventPurchPriceCalculation result = InventPurchPriceCalculation::construct();
        
        result.price = price;
        result.priceMarkup = priceMarkup;
        result.priceUnit = priceUnit;
        result.priceSecCur = priceSecCur;
        result.priceMarkupSecCur = priceMarkupSecCur;

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>