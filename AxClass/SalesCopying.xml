<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCopying</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllHeader, tableStr(SalesTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllLines, tableStr(SalesTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalHeader, tableStr(SalesTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyJournalLines, tableStr(SalesTable))]
public class SalesCopying
{
    SalesTable              salesTable;
    SalesParameters         salesParameters;
    CustInvoiceJour         custInvoiceJour;
    SalesPurchCopy          salesPurchCopy;

    TmpFrmVirtual           tmpFrmVirtualLines;
    TmpFrmVirtual           tmpFrmVirtualHeader;

    Qty                     qtyFactor;

    NoYes                   reverseSign;
    NoYes                   recalculateAmount;
    NoYes                   copyMarkup;
    NoYes                   copyPrecisely;
    NoYes                   deleteLines;
    NoYes                   startingLineNum;

    LineNum                 lineNum;
    boolean                 needRereadSalesTable;

    boolean                 convertCurrency;
    TradeCurencyConversion  tradeCurencyConversion;
    // <GEEU>
    NoYes                   createCorrectionLine;
    RefRecId                reasonTableRef;
    // </GEEU>
    // <GEERU>
    NoYes                   copyExchRate;
    // </GEERU>
    // <GIN>
    NoYes                   taxAsPerOriginalInv;
    SalesReturnType_IN      salesReturnType;
    // </GIN>
    // <GTH>
    TaxUnrealizedSalesNoteFormat noteFormat_TH;
    // </GTH>
    // <GIN><GEERU><GEEU>
    #ISOCountryRegionCodes

    internal SalesInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHeaderAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the header record against the matching agreement.
    /// </summary>
    /// <param name="_header">
    ///   A header record.
    /// </param>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkHeaderAgreement(Common _header)
    {
        AgreementHeaderExtRecId_RU  agreementHeaderExt = this.headerAgreementExt(_header);
        boolean                     ret = true;

        RecId agreementHeaderExtRU = salesTable.salesTable_RU().AgreementHeaderExt_RU;

        if (agreementHeaderExt && agreementHeaderExtRU && agreementHeaderExt != agreementHeaderExtRU)
        {
            ret = checkFailed("@GLS222708");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the line is valid to use.
    /// </summary>
    /// <param name="_salesLine">
    ///    The sales line to be validated.
    /// </param>
    /// <returns>
    ///    true if the line is valid; otherwise, false.
    /// </returns>
    protected boolean checkLine(SalesLine _salesLine)
    {
        //Validate category used in the line exists and is active
        if (_salesLine.SalesCategory)
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_salesLine.SalesCategory);

            if (ecoResCategory)
            {
                //Category is not active
                if (!ecoResCategory.IsActive)
                {
                    throw error(strFmt("@SYS309006", ecoResCategory.Name));
                }
            }
            else
            {
                //Category does not exist
                throw error("@SYS309007");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the line record against the matching agreement.
    /// </summary>
    /// <param name="_line">
    /// A line record.
    /// </param>
    /// <param name="_newAgreementHeaderExt">
    /// The ID of an agreement header extension record; optional.
    /// </param>
    /// <returns>
    /// true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkLineAgreement(Common _line, AgreementHeaderExtRecId_RU _newAgreementHeaderExt = 0)
    {
        AgreementHeaderExtRecId_RU agreementHeaderExt = this.lineAgreementExt(_line);
        boolean                    ret                = true;

        if (agreementHeaderExt)
        {
            RecId agreementHeaderExtRU = salesTable.salesTable_RU().AgreementHeaderExt_RU;

            if (!((agreementHeaderExtRU && agreementHeaderExt == agreementHeaderExtRU) ||
                (!agreementHeaderExtRU && _newAgreementHeaderExt && agreementHeaderExt == _newAgreementHeaderExt)))
            {
                ret = checkFailed("@GLS222710");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLinesAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates all line records against the matching agreement.
    /// </summary>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkLinesAgreement()
    {
        AgreementHeaderExtRecId_RU  agreementHeaderExt;
        boolean                     ret = true;

        select count(RecId) from tmpFrmVirtualHeader;

        if (tmpFrmVirtualHeader.RecId == 1)
        {
            select firstonly tmpFrmVirtualHeader;

            agreementHeaderExt = this.headerAgreementExt();
        }

        while select tmpFrmVirtualLines order by LineNum
        {
            ret = this.checkLineAgreement(null, agreementHeaderExt);

            if (! ret)
            {
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    public void copy()
    {
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            if (!this.kittingCanCopy())
            {
                return;
            }
        }

        using (var activityContext = instrumentationLogger.salesCopyingActivities().copy())
        {
            boolean canAbort = appl.ttsLevel() == 0;

            ttsbegin;

            this.deleteSettlement();

            if (deleteLines)
            {
                this.deleteLines();
            }

            this.createReturnAgreementHeaderLink();

            this.copyHeader();

            if (salesTable.returnItem())
            {
                var orderCreditNotification = MCRCustCreditTable::getOrderCreditNotificationMessageIfExists(custInvoiceJour.SalesId);
                if (orderCreditNotification != '')
                {
                    info(orderCreditNotification);
                }
            }

            if (this.copyLines())
            {
                this.updateHeader();

                ttscommit;
            }
            else
            {
                if (canAbort)
                {
                    ttsabort;
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all the lines from the given source record.
    /// </summary>
    /// <returns>true if the lines were copied sucessfully; otherwise, false.</returns>
    protected boolean copyLines()
    {
        #isoCountryRegionCodes
        SalesLine       salesLine;

        using (var activityContext = instrumentationLogger.salesCopyingActivities().copyLines())
        {
            while select tmpFrmVirtualLines order by LineNum
            {
                salesLine.clear();

                if (startingLineNum)
                {
                    salesLine.LineNum = lineNum;
                    lineNum += 0.01;
                }

                SalesLineCopyFromSource salesLineCopyFromSource = SalesLineCopyFromSource::construct(salesLine, salesTable, tmpFrmVirtualLines, this);
                if (!salesLineCopyFromSource.canCopy())
                {
                    continue;
                }

                if (!this.checkLine(salesLine))
                {
                    return false;
                }

                this.copyLine(salesLine,salesLineCopyFromSource);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the original transaction exchange rate to a new document.
    /// </summary>
    /// <param name="_exchRate">
    /// The original transaction exchange rate.
    /// </param>
    /// <param name="_sourceTableId">
    /// The original transaction table Id.
    /// </param>
    /// <param name="_sourceRecordId">
    /// The original transaction record Id.
    /// </param>
    public void copyExchRate(ExchRate _exchRate,
        RefTableId    _sourceTableId = 0,
        RefRecId      _sourceRecordId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the original reporting currency exchange rate of the transaction to a new document.
    /// </summary>
    /// <param name="_reportingCurrencyExchRate">The original reporting currency exchange rate.</param>
    internal void copyReportingCurrencyExchangeRate(ReportingCurrencyExchRate _reportingCurrencyExchRate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies sales order header.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the validation of the source header fails an exception is thrown.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the validation of the source header fails an exception is thrown.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the validation of the destination sales order fails an exception is thrown.
    /// </exception>
    void copyHeader()
    {
        CustInvoiceJour originalInvoice;

        using (var activityContext = instrumentationLogger.salesCopyingActivities().copyHeader())
        {
            ttsbegin;

            while select forupdate tmpFrmVirtualHeader
            {
                Common fromTrans = this.copyFromSourceTable(tmpFrmVirtualHeader);

                using (SysInstrumentationActivityContext activityContextRecord = instrumentationLogger.salesCopyingActivities().copyHeaderRecord(fromTrans))
                {
                    // <GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        SalesTable_RU salesTableRU = salesTable.salesTable_RU();

                        AgreementHeaderExt_RU agreementHeaderExt   = AgreementHeaderExt_RU::findByDefaultDimension(salesTable.DefaultDimension);
                        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(agreementHeaderExt.AgreementHeader);
                        if (salesAgreementHeader && salesAgreementHeader.CustAccount == salesTable.CustAccount)
                        {
                            salesTableRU.AgreementHeaderExt_RU = AgreementHeaderExt_RU::findByDefaultDimension(salesTable.DefaultDimension).RecId;
                            salesTable.MatchingAgreement = salesAgreementHeader.RecId;
                        }
                        else
                        {
                            salesTableRU.AgreementHeaderExt_RU = 0;
                            salesTable.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(salesTable.DefaultDimension);
                        }

                        salesTable.packSalesTable_RU(salesTableRU);
                    }
                    // </GEERU>

                    if (copyMarkup)
                    {
                        Markup::delete(salesTable);
                    }

                    if (convertCurrency)
                    {
                        salesTable.convertCurrencyCode(salesTable.CurrencyCode, tradeCurencyConversion);
                    }

                    if (salesTable.validateWrite())
                    {
                        if (!salesTable.returnItem())
                        {
                            this.setPriceDiscHeaderChangePolicy(tmpFrmVirtualHeader.TableNum, salesTable);
                        }
                        else if (custInvoiceJour.SalesId && SalesCopyingSetReturnAddressFromInventLocationFlight::instance().isEnabled())
                        {
                            this.setReturnItemInventLocationId(salesTable, SalesTable::find(custInvoiceJour.SalesId));
                        }
                        this.headerPreUpdate();
                        salesTable.update();
                    }
                    else
                    {
                        salesTable.reread();
                        throw error("@SYS18722");
                    }

                    activityContext
                        .addCustomProperty(tableStr(SalesTable), int642Str(salesTable.RecId));

                    tmpFrmVirtualHeader.delete();

                    if (copyMarkup)
                    {
                        Markup::copy(reverseSign, fromTrans, salesTable);
                    }
                    else if (this.tmpFrmVirtualHeader.tableNum == tableNum(CustInvoiceJour)
                        && salesTable.isRetailSale() && salesTable.returnItem())
                    {
                        select firstonly originalInvoice
                        where originalInvoice.RecId == this.tmpFrmVirtualHeader.RecordNo;

                        RetailRefundChargeLines::CreateRefundChargeLinesPerCustInvoiceJour(originalInvoice, salesTable);
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSourceTable</Name>
				<Source><![CDATA[
    protected Common copyFromSourceTable(TmpFrmVirtual _tmpFrmVirtualHeader)
    {
        SalesTableCopyFromSource salesTableCopyFromSource = SalesTableCopyFromSource::construct(salesTable, _tmpFrmVirtualHeader, this);

        return salesTableCopyFromSource.copy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnItemInventLocationId</Name>
				<Source><![CDATA[
    protected void setReturnItemInventLocationId(SalesTable _salesTable, SalesTable _salesTableOrig)
    {
        _salesTable.InventLocationId = _salesTableOrig.InventLocationId;
        _salesTable.InventSiteId = _salesTableOrig.InventSiteId;
        _salesTable.setReturnAddressFromInventLocationId(_salesTable.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReasonTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ReasonTableRef</c> record for a specified cancel reason or cancel reason comment.
    /// </summary>
    /// <param name="_reasonTableRef">
    /// The <c>RefRecId</c> value of the record.
    /// </param>
    /// <returns>
    /// The record ID of the created reason table record.
    /// </returns>
    public ReasonRefRecID copyReasonTableRef(RefRecId _reasonTableRef)
    {
        return _reasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnAgreementHeaderLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between a return order header and an agreement header based on copying from lines.
    /// </summary>
    protected void createReturnAgreementHeaderLink()
    {
        SalesLine               localSalesLine;
        SalesAgreementHeader    salesAgreementHeader;
        boolean                 updateSalesTable;

        if (!salesTable.returnItem())
        {
            return;
        }

        if (salesTable.MatchingAgreement)
        {
            select firstonly RecId from localSalesLine where localSalesLine.SalesId == salesTable.SalesId;
            if (!localSalesLine.RecId)
            {
                salesAgreementHeader.removeAgreementReleaseHeaderMatch(salesTable);
                salesTable.MatchingAgreement = 0;
                updateSalesTable = true;
            }
        }

        if (!salesTable.MatchingAgreement)
        {
            while select tmpFrmVirtualLines
            {
                AgreementLine agreementLine = AgreementLine::findCustInvoiceTrans(tmpFrmVirtualLines.RecordNo);

                if (agreementLine.Agreement)
                {
                    salesTable.MatchingAgreement = agreementLine.Agreement;
                    updateSalesTable = true;

                    agreementLine.agreementHeader().createAgreementReleaseHeaderMatch(salesTable);
                    break;
                }
            }
        }

        if (updateSalesTable)
        {
            salesTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSalesLineChecked</Name>
				<Source><![CDATA[
    boolean IsSalesLineChecked(SalesLine salesLine)
    {
        select firstonly RecId from tmpFrmVirtualLines
            where tmpFrmVirtualLines.RecordNo == salesLine.RecId;

        return tmpFrmVirtualLines.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesLine</c> can be deleted.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    /// <returns></returns>
    protected boolean mustDeleteLine(SalesLine _salesLine)
    {
        // This method is meant to be an extension point to control the line deletion.              
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    void deleteLines()
    {
        SalesLine   salesLine;
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            while select forupdate salesLine
                order by lineNum desc
            where salesLine.SalesId == salesTable.SalesId
            {
                if (this.IsSalesLineChecked(salesLine))
                {
                    continue;
                }

                if (!this.mustDeleteLine(salesLine))
                {
                    continue;
                }

                if (!this.kittingAllowDelete(salesLine))
                {
                    continue;
                }

                if (salesLine.validateDelete() && this.loadLineValidateDelete(salesLine))
                {
                    salesLine.delete();
                }
                else
                {
                    throw error("@SYS18722");
                }
            }
        }
        else
        {
            while select forupdate salesLine
            where salesLine.SalesId == salesTable.SalesId
            {
                if (this.IsSalesLineChecked(salesLine))
                {
                    continue;
                }

                if (!this.mustDeleteLine(salesLine))
                {
                    continue;
                }

                if (salesLine.validateDelete() && this.loadLineValidateDelete(salesLine))
                {
                    salesLine.delete();
                }
                else
                {
                    throw error("@SYS18722");
                }
            }
        }

        salesTable.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLineValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Precheck whether loadline related to the <c>SalesLine</c> can be deleted.
    /// </summary>
    /// <param name = "_salesLine">A <c>SalesLine</c> record.</param>
    /// <returns>true if the sales line can be deleted; otherwise, false.</returns>
    private boolean loadLineValidateDelete(SalesLine _salesLine)
    {
        if (hasGUI())
        {
            WHSLoadLine whsLoadLine;

            select firstonly whsLoadLine
                   where whsLoadLine.InventTransId == _salesLine.InventTransId;

            return !whsLoadLine.RecId || whsLoadLine.validateDelete();
        }

        return true;          
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSettlement</Name>
				<Source><![CDATA[
    void deleteSettlement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerAgreementExt</Name>
				<Source><![CDATA[
    private AgreementHeaderExtRecId_RU headerAgreementExt(Common _header = null)
    {
        AgreementHeaderExtRecId_RU  agreementHeaderExt;
        TableId                     tableId;
        RecId                       recId;

        if (_header)
        {
            tableId = _header.TableId;
            recId   = _header.RecId;
        }
        else
        {
            tableId = tmpFrmVirtualHeader.TableNum;
            recId   = tmpFrmVirtualHeader.RecordNo;
        }

        if (tableId && recId)
        {
            switch (tableId)
            {
                case tableNum(SalesTable):
                    SalesTable fromSalesTable = SalesTable::findRecId(recId);
                    agreementHeaderExt = fromSalesTable.salesTable_RU().AgreementHeaderExt_RU;
                    break;
                case tableNum(CustPackingSlipJour):
                    CustPackingSlipJour fromCustPackingSlipJour = CustPackingSlipJour::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustPackingSlipJour.DefaultDimension).RecId;
                    break;
                case tableNum(CustConfirmJour):
                    CustConfirmJour fromCustConfirmJour = CustConfirmJour::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustConfirmJour.DefaultDimension).RecId;
                    break;
                case tableNum(CustQuotationJour):
                    CustQuotationJour fromCustQuotationJour = CustQuotationJour::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustQuotationJour.DefaultDimension).RecId;
                    break;
                case tableNum(ProjInvoiceJour):
                    ProjInvoiceJour fromProjInvoiceJour = ProjInvoiceJour::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromProjInvoiceJour.DefaultDimension).RecId;
                    break;
                case tableNum(CustInvoiceJour):
                    CustInvoiceJour fromCustInvoiceJour = CustInvoiceJour::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustInvoiceJour.DefaultDimension).RecId;
                    break;
                case tableNum(CustInvoice4PaymJour_RU):
                    CustInvoice4PaymJour_RU fromCustInvoice4PaymJour_RU = CustInvoice4PaymJour_RU::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustInvoice4PaymJour_RU.DefaultDimension).RecId;
                    break;
            }
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerPreUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Called just before the header record is updated.
    /// </summary>
    protected void headerPreUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on an <c>CustInvoiceTrans</c> table buffer.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> table buffer that is to be initialized.
    /// </param>
    /// <param name="_custInvoiceTrans">
    ///    The <c>CustInvoiceTrans</c> table buffer that is to be initialized from.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    protected void initFromCustInvoiceTrans_W(SalesLine         _salesLine,
                                              CustInvoiceTrans  _custInvoiceTrans,
                                              boolean           _copyPrecisely,
                                              boolean           _copyPriceDisc,
                                              boolean           _copyQty,
                                              Qty               _qty)
    {
        _salesLine.initFromCustInvoiceTrans(_custInvoiceTrans,
                                            _copyPrecisely,
                                            _copyPriceDisc,
                                            _copyQty,
                                            _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initilalizes the header record with values from the passed in <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///   A <c>CustInvoiceJour</c> record.
    /// </param>
    public void initHeaderFromCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        salesTable.initFromCustInvoiceJour(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(SalesTable     _salesTable,
                        TmpFrmVirtual  _tmpFrmVirtualLines,
                        TmpFrmVirtual  _tmpFrmVirtualHeader,
                        Qty            _qtyFactor            = 1,
                        NoYes          _reverseSign          = NoYes::No,
                        NoYes          _recalculateAmount    = NoYes::No,
                        NoYes          _copyMarkup           = NoYes::No,
                        NoYes          _copyPrecisely        = NoYes::No,
                        NoYes          _deleteLines          = NoYes::No,
                        NoYes          _createCorrectionLine = NoYes::No,
                        NoYes          _copyExchRate         = NoYes::No)
    {
        salesTable          = _salesTable;
        tmpFrmVirtualLines  = _tmpFrmVirtualLines;
        tmpFrmVirtualHeader = _tmpFrmVirtualHeader;
        qtyFactor           = _qtyFactor;
        reverseSign         = _reverseSign;
        recalculateAmount   = _recalculateAmount;
        copyMarkup          = _copyMarkup;
        copyPrecisely       = _copyPrecisely;
        deleteLines         = _deleteLines;
        // <GEEU>
        createCorrectionLine = _createCorrectionLine;
        // </GEEU>
        // <GEERU>
        copyExchRate         = _copyExchRate;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes object members based on <c>SalesOrderCopyingContract</c>.
    /// </summary>
    /// <param name="_salesOrderCopyingContract">
    /// An instance of <c>SalesOrderCopyingContract</c> containing copying parameters.
    /// </param>
    public void initParametersFromContract(SalesOrderCopyingContract _salesOrderCopyingContract)
    {
        this.initParameters(
            SalesTable::find(_salesOrderCopyingContract.parmCallingTableSalesId(), true),
            _salesOrderCopyingContract.parmTmpFrmVirtualLines(),
            _salesOrderCopyingContract.parmTmpFrmVirtualHeader(),
            _salesOrderCopyingContract.parmQtyFactor(),
            _salesOrderCopyingContract.parmReverseSign(),
            _salesOrderCopyingContract.parmRecalculateAmount(),
            _salesOrderCopyingContract.parmCopyMarkup(),
            _salesOrderCopyingContract.parmCopyPrecisely(),
            _salesOrderCopyingContract.parmDeleteLines(),
            _salesOrderCopyingContract.parmCreateCorrectionLine(),
            _salesOrderCopyingContract.parmCopyExchangeRate()
        );

        this.parmSalesPurchCopy(_salesOrderCopyingContract.parmSalesPurchCopy());
        this.parmConvertCurrency(_salesOrderCopyingContract.parmConvertCurrency());
        this.parmTradeCurrencyConversion(_salesOrderCopyingContract.parmTradeCurencyConversion());
        this.parmReasonTableRef(_salesOrderCopyingContract.parmReasonTableRef());
        this.parmCustInvoiceJour(_salesOrderCopyingContract.parmCustInvoiceJournal());
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.parmTaxAsPerOrginalInvoice_IN(_salesOrderCopyingContract.parmTaxAsPerOrginalInvoice_IN());
            this.parmSalesReturnType_IN(_salesOrderCopyingContract.parmSalesReturnType_IN());
        }
        // </GIN>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.parmNoteFormat_TH(_salesOrderCopyingContract.parmNoteFormat_TH());
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAgreementExt</Name>
				<Source><![CDATA[
    private AgreementHeaderExtRecId_RU lineAgreementExt(Common _line = null)
    {
        AgreementHeaderExtRecId_RU agreementHeaderExt;

        TableId                    tableId;
        RecId                      recId;

        if (_line)
        {
            tableId = _line.TableId;
            recId   = _line.RecId;
        }
        else
        {
            tableId = tmpFrmVirtualLines.TableNum;
            recId   = tmpFrmVirtualLines.RecordNo;
        }

        if (tableId && recId)
        {
            switch (tableId)
            {
                case tableNum(SalesLine):
                    SalesLine fromSalesLine = SalesLine::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromSalesLine.DefaultDimension).RecId;
                    break;

                case tableNum(CustInvoiceTrans):
                    CustInvoiceTrans fromCustInvoiceTrans = CustInvoiceTrans::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustInvoiceTrans.DefaultDimension).RecId;
                    break;

                case tableNum(CustPackingSlipTrans):
                    CustPackingSlipTrans fromCustPackingSlipTrans = CustPackingSlipTrans::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustPackingSlipTrans.DefaultDimension).RecId;
                    break;

                case tableNum(CustConfirmTrans):
                    CustConfirmTrans fromCustConfirmTrans = CustConfirmTrans::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustConfirmTrans.DefaultDimension).RecId;
                    break;

                case tableNum(CustQuotationTrans):
                    CustQuotationTrans fromCustQuotationTrans = CustQuotationTrans::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustQuotationTrans.DefaultDimension).RecId;
                    break;

                case tableNum(CustInvoice4PaymTrans_RU):
                    CustInvoice4PaymTrans_RU fromCustInvoice4PaymTrans = CustInvoice4PaymTrans_RU::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromCustInvoice4PaymTrans.DefaultDimension).RecId;
                    break;

                case tableNum(ProjInvoiceItem):
                    ProjInvoiceItem fromProjInvoiceItem = ProjInvoiceItem::findRecId(recId);
                    agreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(fromProjInvoiceItem.DefaultDimension).RecId;
                    break;
            }
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCorrectionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a correction line.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line for which to make the correction.
    /// </param>
    /// <param name="_qty">
    /// The sales quantity for the correction line.
    /// </param>
    /// <param name="_cwQty">
    /// The sales CW quantity for the correction line.
    /// </param>
    [SysObsolete('Use SalesLineCopyFromSource.makeCorrectionLine() instead', false, 30\11\2017)]
    protected void makeCorrectionLine(SalesLine _salesLine, Qty _qty, PdsCWInventQty _cwQty = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marking customer transaction settlement record .
    /// </summary>
    /// <param name="_custVendInvoiceTrans">
    /// Buffer of CustVendInvoiceTrans.
    /// </param>
    public void markForSettlement(CustVendInvoiceTrans _custVendInvoiceTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsSalesCopying_CreditNote_Object</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the credit note is for sales copying.
    /// </summary>
    /// <returns>
    /// true if the credit note is designated for sales copying; otherwise, false.
    /// </returns>
    public boolean mcrIsSalesCopying_CreditNote_Object()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetReturnValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the return values for the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which this method sets return values.
    /// </param>
    public void mcrSetReturnValues(SalesLine _salesLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        salesParameters = SalesParameters::find();
        startingLineNum = NoYes::No;
        lineNum         = 0;

        instrumentationLogger = SalesInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertCurrency</Name>
				<Source><![CDATA[
    public boolean parmConvertCurrency(boolean _convertCurrency = convertCurrency)
    {
        convertCurrency = _convertCurrency;
        return convertCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    public CustInvoiceJour parmCustInvoiceJour(CustInvoiceJour     _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyFactor</Name>
				<Source><![CDATA[
    public Qty parmQtyFactor()
    {
        return qtyFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseSign</Name>
				<Source><![CDATA[
    public NoYes parmReverseSign()
    {
        return reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateAmount</Name>
				<Source><![CDATA[
    public NoYes parmRecalculateAmount()
    {
        return recalculateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyMarkup</Name>
				<Source><![CDATA[
    public NoYes parmCopyMarkup()
    {
        return copyMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmcopyPrecisely</Name>
				<Source><![CDATA[
    public NoYes parmcopyPrecisely()
    {
        return copyPrecisely;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
    public NoYes parmDeleteLines()
    {
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateCorrectionLine</Name>
				<Source><![CDATA[
    public NoYes parmCreateCorrectionLine()
    {
        return createCorrectionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyExchRate</Name>
				<Source><![CDATA[
    public NoYes parmCopyExchRate()
    {
        return copyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchCopy</Name>
				<Source><![CDATA[
    public SalesPurchCopy parmSalesPurchCopy(SalesPurchCopy _salesPurchCopy = salesPurchCopy)
    {
        salesPurchCopy = _salesPurchCopy;

        return salesPurchCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonTableRef</Name>
				<Source><![CDATA[
    public RefRecId parmReasonTableRef(RefRecId _reasonTableRef = reasonTableRef)
    {
        reasonTableRef =_reasonTableRef;

        return reasonTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesReturnType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>SalesReturnType_IN</c> Parameter.
    /// </summary>
    /// <param name="_salesReturnType">
    /// The Value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>SalesReturnType_IN</c> Parameter.
    /// </returns>
    public SalesReturnType_IN parmSalesReturnType_IN(SalesReturnType_IN  _salesReturnType = salesReturnType)
    {
        salesReturnType = _salesReturnType;

        return salesReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartingLineNum</Name>
				<Source><![CDATA[
    void parmStartingLineNum(LineNum _lineNum)
    {
        lineNum = _lineNum;
        startingLineNum = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAsPerOrginalInvoice_IN</Name>
				<Source><![CDATA[
    public NoYes parmTaxAsPerOrginalInvoice_IN(NoYes    _taxAsPerOriginalInv = taxAsPerOriginalInv)
    {
        taxAsPerOriginalInv = _taxAsPerOriginalInv;

        return taxAsPerOriginalInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeCurrencyConversion</Name>
				<Source><![CDATA[
    public TradeCurencyConversion parmTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion = tradeCurencyConversion)
    {
        tradeCurencyConversion = _tradeCurrencyConversion;
        return tradeCurencyConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    void promptConvertCurrencyCode()
    {
        SalesTable      salesTableNew;
        while select tmpFrmVirtualHeader
        {
            switch (tmpFrmVirtualHeader.TableNum)
            {
                case tableNum(SalesTable):
                    Common fromTrans = SalesTable::findRecId(tmpFrmVirtualHeader.RecordNo);
                    salesTableNew.initFromSalesTable(fromTrans);
                    break;
                case tableNum(CustInvoiceJour):
                    fromTrans = CustInvoiceJour::findRecId(tmpFrmVirtualHeader.RecordNo);
                    salesTableNew.initFromCustInvoiceJour(fromTrans);
                    break;
                case tableNum(CustPackingSlipJour):
                    fromTrans = CustPackingSlipJour::findRecId(tmpFrmVirtualHeader.RecordNo);
                    salesTableNew.initFromCustPackingSlipJour(fromTrans);
                    break;
                case tableNum(CustConfirmJour):
                    fromTrans = CustConfirmJour::findRecId(tmpFrmVirtualHeader.RecordNo);
                    salesTableNew.initFromCustConfirmJour(fromTrans);
                    break;
                case tableNum(CustQuotationJour):
                    fromTrans = CustQuotationJour::findRecId(tmpFrmVirtualHeader.RecordNo);
                    salesTableNew.initFromCustQuotationJour(fromTrans);
                    break;
            }

            if (salesTable.CurrencyCode == salesTableNew.CurrencyCode)
            {
                return; // same currency code
            }

            if (!deleteLines && SalesLine::exist(salesTable.SalesId))
            {
                [convertCurrency, tradeCurencyConversion] = SalesTable::promptConvertCurrencyCode();
                return; // Now we have prompted - no need to prompt again.
            }

            if (!copyMarkup && MarkupTrans::exist(salesTable.TableId, salesTable.RecId))
            {
                [convertCurrency, tradeCurencyConversion] = SalesTable::promptConvertCurrencyCode();
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveSettlement</Name>
				<Source><![CDATA[
    public boolean promptRemoveSettlement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturn</Name>
				<Source><![CDATA[
    void setInventTransIdReturn(SalesLine _salesLine, Common _fromTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight quantity and calculates the <c>SalesQty</c> and <c>QtyOrdered</c> fields on
    /// the provided <c>SalesLine</c> table record.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> table record to be modified.
    /// </param>
    /// <param name="_reverseSign">
    /// A Boolean value which indicates whether the inventory sign should be reversed.
    /// </param>
    /// <param name="_qtyFactor">
    /// A factor to determine new quantities.
    /// </param>
    public void setPdsCWQty(
        SalesLine   _salesLine,
        boolean     _reverseSign,
        real        _qtyFactor)
    {
        _salesLine.PdsCWQty      = _reverseSign ? -_salesLine.PdsCWQty : _salesLine.PdsCWQty;
        _salesLine.PdsCWQty      = decRound(
            _salesLine.PdsCWQty * _qtyFactor,
            UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(_salesLine.pdsCWUnitId())));

        _salesLine.SalesQty      = PdsCatchWeight::inventQty(_salesLine.ItemId, _salesLine.PdsCWQty, _salesLine.SalesUnit);
        _salesLine.QtyOrdered    = PdsCatchWeight::inventQty(_salesLine.ItemId, _salesLine.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscHeaderChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the price discount policies for the header of the new sales orders.
    /// </summary>
    /// <param name="_tmpFrmVirtualId">
    ///    The ID of the original table to copy from.
    /// </param>
    /// <param name="_salesTable">
    ///    A buffer of the table <c>SalesTable</c>.
    /// </param>
    void setPriceDiscHeaderChangePolicy(RefTableId _tmpFrmVirtualId, SalesTable _salesTable)
    {
        switch (_tmpFrmVirtualId)
        {
            case tableNum(SalesTable)           :
            case tableNum(CustInvoiceJour)      :
            case tableNum(CustPackingSlipJour)  :
            case tableNum(CustConfirmJour)      :
                _salesTable.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
                break;

            case tableNum(SalesQuotationTable)    :
                _salesTable.setPriceDiscChangePolicy(PriceDiscSystemSource::SalesQuotation);
                break;

            case tableNum(ProjInvoiceJour)    :
                _salesTable.setPriceDiscChangePolicy(PriceDiscSystemSource::Project);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefCustVendCreditInvoicingTable</Name>
				<Source><![CDATA[
    protected void setRefCustVendCreditInvoicingTable(SalesTable _salesTable, CustInvoiceJour _custInvoiceJour)
    {
        str correctedInvoicesInfo;

        const str semicolon = ';';
        const str space = ' ';
        const str emptyString = '';

        if (_custInvoiceJour && this.isCreditNote())
        {
            if (CustVendCreditInvoicingTable::useCreditInvoicingReporting())
            {
                CustVendCreditInvoicingTable custVendCreditInvoicingTable = CustVendCreditInvoicingTable::findRefId(_salesTable.TableId, _salesTable.RecId, true);

                if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL]))
                {
                    Set set = new Set(Types::Int64);

                    while select RecordNo from tmpFrmVirtualLines
                    {
                        CustInvoiceTrans custInvoiceTransLocal = CustInvoiceTrans::findRecId(tmpFrmVirtualLines.RecordNo);
                        if (custInvoiceTransLocal)
                        {
                            set.add(custInvoiceTransLocal.custInvoiceJour().RecId);
                        }
                    }

                    SetEnumerator se = set.getEnumerator();
                    while (se.moveNext())
                    {
                        CustInvoiceJour custInvoiceJourLocal = CustInvoiceJour::findRecId(se.current());
                        correctedInvoicesInfo += correctedInvoicesInfo ? semicolon + space : emptyString;
                        correctedInvoicesInfo += strFmt("@SYS26868", custInvoiceJourLocal.InvoiceId, custInvoiceJourLocal.InvoiceDate);
                    }
                }

                custVendCreditInvoicingTable.CustVendInvoiceAccount = _salesTable.InvoiceAccount;
                custVendCreditInvoicingTable.AccountType = LedgerJournalACType::Cust;
                custVendCreditInvoicingTable.CustVendCorrectedInvoiceId = _custInvoiceJour.InvoiceId;
                custVendCreditInvoicingTable.RefTableId = _salesTable.TableId;
                custVendCreditInvoicingTable.RefRecId = _salesTable.RecId;
                custVendCreditInvoicingTable.CustVendCorrectedInvoiceDate = _custInvoiceJour.InvoiceDate;
                if (!FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance()))
                {
                    custVendCreditInvoicingTable.ReasonRefRecID = reasonTableRef;
                }
                custVendCreditInvoicingTable.IsSalesPurchCopying = NoYes::Yes;
                custVendCreditInvoicingTable.CustVendCorrectedInvoicesInfo = correctedInvoicesInfo;
                custVendCreditInvoicingTable.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInvoiceTrans</Name>
				<Source><![CDATA[
    boolean settleInvoiceTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceCreditCopy</Name>
				<Source><![CDATA[
    void updateInvoiceCreditCopy(SalesLine salesLine, CustVendInvoiceTrans custVendInvoiceTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCopyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates header before copying.
    /// </summary>
    /// <param name="_header">header to be copied.</param>
    /// <returns>true if the header can be copied; otherwise, false.</returns>
    public boolean validateCopyHeader(Common _header)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCopyHeader_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates header before copying.
    /// </summary>
    /// <param name="_header">header to be copied.</param>
    /// <returns>true if the header can be copied; otherwise, false.</returns>
    protected boolean validateCopyHeader_BR(Common _header)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustProjectRevenue_PSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the project revenue for the specified invoice line.
    /// </summary>
    /// <param name="_fromProjInvoiceItem">
    /// The project invoice line for which to adjust the revenue.
    /// </param>
    [SysObsolete('Use SalesLineCopyFromProjInvoiceItem.adjustProjectRevenue_PSA() instead', false, 30\11\2017)]
    protected static void adjustProjectRevenue_PSA(ProjInvoiceItem _fromProjInvoiceItem)
    {
        ProjProposalItem          projProposalItem;
        ProjRevenueTransSale      projRevenueTransSale;
        ProjProposalRevenue       projProposalRevenue;
        ProjProposalRevenueDetail projProposalRevenueDetail;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projProposalItem = ProjProposalItem::findInvent(_fromProjInvoiceItem.InventTransId);

            select RecId from projProposalRevenueDetail
            join forupdate RecId, TransStatus from projRevenueTransSale
                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
            join RecId from projProposalRevenue
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                   && projProposalRevenue.ProposalId             == projProposalItem.ProposalId
                   && projProposalRevenue.psaContractLineNum     == projProposalItem.psaContractLineNum
                   && (projProposalRevenue.IsRetained == NoYes::Yes
                    || projProposalRevenue.IsReleased == NoYes::Yes);

            if (projRevenueTransSale)
            {
                projRevenueTransSale.TransStatus = (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote) ? ProjTransStatus::Invoiced :
                                                    ProjTransStatus::MarkedCreditnote;
                projRevenueTransSale.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLinesAgreementServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all line records against the matching agreement
    /// </summary>
    /// <param name="_packedSalesOrderCopyingContract">
    /// Packed instance of <c>SalesOrderCopyingContract</c>
    /// </param>
    /// <param name="_isCreditNote">
    /// Determines if copying is a credit note scenario.
    /// </param>
    /// <returns>
    /// Returns true if the validation passes; Otherwise, false.
    /// </returns>
    public static boolean checkLinesAgreementServer(container _packedSalesOrderCopyingContract, boolean _isCreditNote)
    {
        SalesOrderCopyingContract contract = SalesOrderCopyingContract::newContract(_packedSalesOrderCopyingContract, _isCreditNote);
        SalesCopying salesCopying = SalesCopying::construct(contract.parmSalesPurchCopy());
        salesCopying.initParametersFromContract(contract);
        return salesCopying.checkLinesAgreement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesCopying construct(SalesPurchCopy _salesPurchCopy)
    {
        SalesPurchCopyFactoryAttribute attr = new SalesPurchCopyFactoryAttribute(_salesPurchCopy, tableStr(SalesTable));
        SalesCopying salesCopying = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesCopying), attr) as SalesCopying;

        if (classIdGet(salesCopying) == classNum(SalesCopying)
            && _salesPurchCopy != SalesPurchCopy::CopyAllHeader
            && _salesPurchCopy != SalesPurchCopy::CopyAllLines
            && _salesPurchCopy != SalesPurchCopy::CopyJournalHeader
            && _salesPurchCopy != SalesPurchCopy::CopyJournalLines)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        salesCopying.salesPurchCopy =  _salesPurchCopy;
        return salesCopying;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs Sales Order copying
    /// </summary>
    /// <param name="_packedSalesOrderCopyingContract">
    /// Packed <c>SalesOrderCopyingContract</c>.
    /// </param>
    /// <param name="_isCreditNote">
    /// Determines if copying is a credit note scenario.
    /// </param>
    public static void copyServer(container _packedSalesOrderCopyingContract, boolean _isCreditNote)
    {
        SalesOrderCopyingContract salesOrderCopyingContract = SalesOrderCopyingContract::newContract(_packedSalesOrderCopyingContract, _isCreditNote);
        SalesCopying salesCopying = SalesCopying::construct(salesOrderCopyingContract.parmSalesPurchCopy());
        salesCopying.initParametersFromContract(salesOrderCopyingContract);
        salesCopying.copy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCodeOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are lines requiring currency conversion on destination record and prompts user about conversion details.
    /// </summary>
    /// <param name="_packedSalesOrderCopyingContract">
    /// Packed copying parameters represented by an instance of <c>SalesOrderCopyingContract</c>.
    /// </param>
    /// <param name="_isCreditNote">
    /// Determines if the <c>_packedSalesOrderCopyingContract</c> contains a <c>SalesCopying_CreditNote</c> instance.
    /// </param>
    /// <returns>
    /// A <c>Container</c> with a <c>Boolean</c> value determining if currency should be converted
    /// and a <c>TradeCurrencyConversion</c> enum value determining which currenty conversion type to use.
    /// </returns>
    public static container promptConvertCurrencyCodeOnServer(container _packedSalesOrderCopyingContract, boolean _isCreditNote)
    {
        SalesOrderCopyingContract salesOrderCopyingContract = SalesOrderCopyingContract::newContract(_packedSalesOrderCopyingContract, _isCreditNote);
        SalesCopying salesCopying = SalesCopying::construct(salesOrderCopyingContract.parmSalesPurchCopy());
        salesCopying.initParametersFromContract(salesOrderCopyingContract);
        salesCopying.promptConvertCurrencyCode();
        return [salesCopying.parmConvertCurrency(), salesCopying.parmTradeCurrencyConversion()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefInvoice_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets original invoice id and original invoice date for credit note.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line of the credit note.
    /// </param>
    /// <param name="_invoiceJour">
    /// The original invoice journal.
    /// </param>
    public void setRefInvoice_MY(SalesLine _salesLine, CustVendInvoiceJour _invoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailSalesDiscountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy retail discount lines.
    /// </summary>
    /// <param name = "_originalInventTransId">Original invent trans id.</param>
    /// <param name = "_salesLine">The new sales line.</param>
    /// <param name = "_reverseSign">The reverse sign.</param>
    /// <param name = "_originalQty">The quantity originally ordered.</param>
    /// <param name = "_qty">The new quantity.</param>
    private void createRetailSalesDiscountLine(InventTransId _originalInventTransId, SalesLine _salesLine, NoYes _reverseSign, SalesQty _originalQty, SalesQty _qty)
    {
        RetailSalesDiscountLine discountLine;
        RetailSalesDiscountLine salesDiscountLine;

        while select * from salesDiscountLine
            where salesDiscountLine.InventTransId == _originalInventTransId
        {
            discountLine.clear();
            discountLine.InventTransId = _salesLine.InventTransId;
            discountLine.initFromRetailSalesDiscountLineWithQty(salesDiscountLine, _originalQty, _qty, _salesLine.CurrencyCode);
            discountLine.Amount = _reverseSign ? -1 * discountLine.Amount : discountLine.Amount;

            discountLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy retail sales line.
    /// </summary>
    /// <param name = "_transId">The original transaction id.</param>
    /// <param name = "_toSalesLineRecId">The new sales line.</param>
    /// <param name = "_reverseSign">The reverse sign.</param>
    private void updateRetailSalesLine(TradeInventTransId _transId, RefRecId _toSalesLineRecId, NoYes _reverseSign)
    {
        SalesLine origSalesLine = SalesLine::findInventTransId(_transId);

        if (origSalesLine)
        {
            RetailSalesLine origRetailSalesLine = RetailSalesLine::findBySalesLine(origSalesLine.RecId);

            if (origRetailSalesLine)
            {
                ttsbegin;
                RetailSalesLine retailSalesLine = RetailSalesLine::findBySalesLine(_toSalesLineRecId, true);
                retailSalesLine.LineDscAmount = _reverseSign ? -1 * origRetailSalesLine.LineDscAmount : origRetailSalesLine.LineDscAmount;
                retailSalesLine.LinePercentageDiscount = origRetailSalesLine.LinePercentageDiscount;
                retailSalesLine.LineManualDiscountAmount = _reverseSign ? -1 * origRetailSalesLine.LineManualDiscountAmount : origRetailSalesLine.LineManualDiscountAmount;
                retailSalesLine.LineManualDiscountPercentage = origRetailSalesLine.LineManualDiscountPercentage;
                retailSalesLine.PeriodicDiscount = origRetailSalesLine.PeriodicDiscount;
                retailSalesLine.PeriodicPercentageDiscount = origRetailSalesLine.PeriodicPercentageDiscount;
                retailSalesLine.TenderDiscount = origRetailSalesLine.TenderDiscount;
                retailSalesLine.TenderDiscountPercentage = origRetailSalesLine.TenderDiscountPercentage;
                retailSalesLine.TotalDiscount = origRetailSalesLine.TotalDiscount;
                retailSalesLine.TotalPctDiscount = origRetailSalesLine.TotalPctDiscount;
                retailSalesLine.IsPriceOverridden = origRetailSalesLine.IsPriceOverridden;
                retailSalesLine.OriginalPrice = origRetailSalesLine.OriginalPrice;
                retailSalesLine.PriceOverrideReasonCode = origRetailSalesLine.PriceOverrideReasonCode;

                retailSalesLine.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoteFormat_TH</Name>
				<Source><![CDATA[
    public TaxUnrealizedSalesNoteFormat parmNoteFormat_TH(TaxUnrealizedSalesNoteFormat _noteFormat_TH = noteFormat_TH)
    {
        noteFormat_TH = _noteFormat_TH;
        return noteFormat_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies one line from the given source record.
    /// </summary>
    /// <param name = "_salesLine">
    /// A sales Line to be copied.
    /// </param>
    /// <param name = "_salesLineCopyFromSource">
    /// A <c>SalesLineCopyFromSource</c> class is responsible for copying.
    /// </param>
    protected void copyLine(SalesLine _salesLine, SalesLineCopyFromSource _salesLineCopyFromSource)
    {
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.salesCopyingActivities().copyLine(_salesLineCopyFromSource))
        {
            _salesLineCopyFromSource.copy();

            NoYes searchPrice = reCalculateAmount? NoYes::Yes : NoYes::No;
            boolean searchMarkup = !copyMarkup && RetailRefundChargeLines::shouldSearchMarkupForSalesLineCopy(salesTable);

            using (SalesFindSalesCopyInventTransByInvoiceIdContext context = SalesFindSalesCopyInventTransByInvoiceIdContext::construct())
            {
                if (_salesLineCopyFromSource is SalesLineCopyFromCustInvoiceTrans
                    && SalesFindSalesCopyInventTransByInvoiceIdFlight::instance().isEnabled())
                {
                    CustInvoiceTrans custInvoiceTrans = _salesLineCopyFromSource.retrieveSource();
                    context.parmInvoiceId(custInvoiceTrans.InvoiceId);
                }
                _salesLine.createLine(true, false, false, !copyPrecisely, searchMarkup, searchPrice, salesTable.Reservation == ItemReservation::Automatic, true);
            }

            // Add new line to the salesTable may change the record, need reread.
            if (!needRereadSalesTable && _salesLine.SalesId == salesTable.SalesId)
            {
                needRereadSalesTable = true;
            }
            // Reread is needed for intercompany scenario.
            _salesLine.reread();

            activityContext
                .addCustomProperty(tableStr(SalesLine), int642Str(_salesLine.RecId))
                .addCustomProperty(tableStr(SalesTable), int642Str(salesTable.RecId));

            _salesLineCopyFromSource.updateCopiedLine(_salesLine, salesTable);

            if (salesTable.isRetailSale() && salesTable.returnItem() && !copyMarkup)
            {
                RetailRefundChargeLines::CreateRefundChargeLinesPerCustInvoiceTrans(_salesLineCopyFromSource.retrieveSource(), _salesLine);
            }

            if (salesTable.isRetailSale() && MCRSalesLine::findSalesLine(_salesLine.RecId, true).RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::None && RetailPricingResetOverrideWorkflowStateInCopyFlight::instance().isEnabled())
            {
                MCRSalesLine::updateWorkflowState(_salesLine.RecId, RetailPriceOverrideWorkflowState::NotSubmitted);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales table record.
    /// </summary>
    protected void updateHeader()
    {
        if (needRereadSalesTable)
        {
            salesTable.reread();
        }
        //force credit limit check to execute and update salesTable.Estimated if eligible
        salesTable.Touched = NoYes::Yes;
        salesTable.CreditNoteReasonCode = reasonTableRef;

        if (salesTable.validateWrite())
        {
            salesTable.update();
        }
        else
        {
            salesTable.reread();

            if (!salesTable.calcEstimateForced())
            {
                throw error("@SYS18722");
            }
        }

        this.setRefCustVendCreditInvoicingTable(salesTable, custInvoiceJour);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            select count(RecId) from tmpFrmVirtualLines;

            if (tmpFrmVirtualLines.RecId > 0)
            {
                salesTable.reread();

                salesTable.mcrOpenSalesOrder();

                salesTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is for a credit note.
    /// </summary>
    ///  /// <returns>
    ///    true if the class is for a credit note; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean isCreditNote()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanCopy_delegate</Name>
				<Source><![CDATA[
    delegate void kittingCanCopy_delegate(TmpFrmVirtual _tmpFrmVirtualLines, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanCopy</Name>
				<Source><![CDATA[
    public boolean kittingCanCopy()
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingCanCopy_delegate(tmpFrmVirtualLines, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingAllowDelete_delegate</Name>
				<Source><![CDATA[
    delegate void kittingAllowDelete_delegate(SalesLine _salesLine, EventHandlerResult _eventhandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingAllowDelete</Name>
				<Source><![CDATA[
    protected boolean kittingAllowDelete(SalesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingAllowDelete_delegate(_salesLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>