<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessPartnerPromoteBusinessPartnerProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Create prospect for promoting business partner.
/// </summary>
internal final class RetailBusinessPartnerPromoteBusinessPartnerProcessor extends RetailBusinessPartnerOperationProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected void processInternal(RetailBusinessPartnerOperation _operation)
    {
        smmBusRelTypeGroup          relTypeGroup;
        DirPartyTable               party;
        DirPartyRecId               partyRecId;
        LogisticsElectronicAddress  electronicAddress;
        DataAreaId                  dataAreaId;

        eventSource.WriteProcessingB2BOperationProcessInternalStarted(_operation.RecId);

        dataAreaId = RetailChannelTable::findByRecId(_operation.Channel).DefaultCustDataAreaId;
        if (!dataAreaId)
        {
            eventSource.WriteProcessingB2BProspectCreateDataAreaIdNotFound(_operation.RecId);
            throw error(strFmt(strFmt("@Retail:RetailB2BProspectDataAreaIdNotFound", _operation.RecId)));
        }
        else
        {
            eventSource.WriteProcessingB2BProspectCreateOperationAssociatedDataAreaId(dataAreaId);
        }

        
        CustHierarchy custHierarchy;

        select firstonly custHierarchy
                where custHierarchy.CustHierarchyId == _operation.BusinessPartnerID;

        if (!custHierarchy)
        {
            throw error(strFmt('@Retail:CannotFindCustHierarchyForCreatePromoteProspect', _operation.BusinessPartnerID));
        }

        RefRecId prospectRecId;
        RefRecId b2bProspectRecId;
        [prospectRecId, b2bProspectRecId] = RetailBusinessPartnerPromoteBusinessPartnerProcessor::createPromoteBusinessPartnerProspect(custHierarchy, dataAreaId, _operation.Channel);

        eventSource.WriteProcessingB2BOperationProcessInternalCompleted(_operation.RecId, prospectRecId, b2bProspectRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPromoteBusinessPartnerProspect</Name>
				<Source><![CDATA[
    internal static container createPromoteBusinessPartnerProspect(CustHierarchy _custHierarchy, DataAreaId _dataAreaId, RetailChannelRecId channelRecId)
    {
        smmBusRelTable prospect;
        DirOrganization dirOrganization = DirPartyTable::findRec(_custHierarchy.OrganizationParty, false, DirPartyType::Organization);
        smmBusRelTypeId b2bBusRelTypeId = smmBusRelTypeGroup::getB2BProspectType();
        RetailSmmBusRelTable b2bProspect;

        ttsbegin;

        // As prospects records are saving for current company.
        // So to fix the issue we get the dataAreaId from the prospect records for which the prospect created in channel.
        changecompany(_dataAreaId)
        {
            prospect.initValue();
            prospect.BusRelTypeId = b2bBusRelTypeId;
            prospect.Party = dirOrganization.RecId;
            prospect.BusRelAccount = smmParameters::getNumber(smmNumbSeqUsed::BusRel);
            prospect.insert();

            DocuTypeId type = DocuType::typeNote();
            var docType = DocuType::find(type);

            if (!docType)
            {
                throw error(strFmt("@Retail:DocuTypeDoesNotExist", type));
            }

            b2bProspect.clear();
            b2bProspect.initValue();
            b2bProspect.B2BProspectStatus = RetailB2BProspectStatus::Pending;
            b2bProspect.smmBusRelTable = prospect.RecId;
            b2bProspect.CompanyName = dirOrganization.Name;
            b2bProspect.RetailChannel = channelRecId;
            b2bProspect.CompanySize = dirOrganization.NumberOfEmployees;
            b2bProspect.ProspectType = RetailProspectType::BuyerSeller;
            b2bProspect.BusinessPartnerId = _custHierarchy.CustHierarchyId;
            b2bProspect.IsPromoteProspect = NoYes::Yes;
            b2bProspect.insert();
        }

        ttscommit;

        return [prospect.RecId, b2bProspect.RecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>