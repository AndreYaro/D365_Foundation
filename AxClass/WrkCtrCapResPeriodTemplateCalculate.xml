<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrCapResPeriodTemplateCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrCapResPeriodTemplateCalculate</c> class summarizes capacity load hours according to the specified period template.
/// </summary>
/// <remarks>
///    The result is saved as records in the temporary <c>WrkCtrCapResPeriodTmp</c> table.
/// </remarks>
public class WrkCtrCapResPeriodTemplateCalculate implements WorkPeriodTemplateCalculable
{
    WrkCtrCapResPeriodTmp   wrkCtrCapResPeriodTmp;

    TransDate               fromDate;
    TransDate               toDate;
    RefRecId                workPeriodTemplateId;
    FormDataSource          workCalendarDateDataSource;
    container               periods;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a single temporary <c>WrkCtrCapResPeriodTmp</c> record that corresponds to one time period.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date of the time period.
    /// </param>
    /// <param name="_toDate">
    ///    The to date of the time period.
    /// </param>
    /// <param name="_periodDescription">
    ///    A string that contains the description of the period.
    /// </param>
    /// <param name="_workDays">
    ///    An integer that contains the number of working days between the from date and the to date. Both
    ///    days are inclusive.
    /// </param>
    public void addPeriod(
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PeriodTemplateDescription   _periodDescription,
        PeriodTemplateOpenDays      _workDays)
    {
        if (_toDate     < this.parmFromDate()
         || _fromDate   > this.parmToDate())
        {
            return; // ignore periods outside of our date range
        }

        periods += [[max(_fromDate, this.parmFromDate()), min(_toDate, this.parmToDate()), _periodDescription]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCapacityLoadByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the periods and retrieves the results as temporary records.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_fromDate">
    ///    A date that defines the lower limit for the period template.
    /// </param>
    /// <param name="_toDate">
    ///    A date that defines the upper limit for the period template.
    /// </param>
    /// <param name="_workCalendarDateDataSource">
    ///    Form data source for <c>WorkCalendarDate</c> table that contains data for calculation.
    /// </param>
    /// <returns>
    ///    The handle of the table buffer of the <c>wrkCtrCapResPeriodTmp</c> object variable that contains all
    ///    created periods.
    /// </returns>
    public WrkCtrCapResPeriodTmp calcCapacityLoadByPeriod(
        RefRecId            _workPeriodTemplateRecId,
        TransDate           _fromDate,
        TransDate           _toDate,
        FormDataSource      _workCalendarDateDataSource)
    {
        this.parmFromDate(_fromDate);
        this.parmToDate(_toDate);
        this.parmWorkPeriodTemplateId(_workPeriodTemplateRecId);
        this.parmWorkCalendarDateDataSource(_workCalendarDateDataSource);

        this.calcPeriods();

        return this.parmWrkCtrCapResPeriodTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates all periods defined by the period template.
    /// </summary>
    protected void calcPeriods()
    {
        WorkCalendarDate                workCalendarDate;
        FormDataSource                  dataSource = this.parmWorkCalendarDateDataSource();
        Object                          dataSourceObject;

        this.createPeriodRecords();

        for (workCalendarDate = dataSource.getFirst();
                workCalendarDate;
                workCalendarDate = dataSource.getNext())
        {
            select firstonly forupdate wrkCtrCapResPeriodTmp
                order by FromDate
                where (wrkCtrCapResPeriodTmp.FromDate   <= workCalendarDate.TransDate || !wrkCtrCapResPeriodTmp.FromDate)
                   && (wrkCtrCapResPeriodTmp.ToDate     >= workCalendarDate.TransDate || !wrkCtrCapResPeriodTmp.ToDate);

            if (wrkCtrCapResPeriodTmp)
            {
                dataSourceObject = dataSource;

                wrkCtrCapResPeriodTmp.CapacityHours                 += dataSourceObject.capacity(workCalendarDate);
                wrkCtrCapResPeriodTmp.CapacityReservedHours         += dataSourceObject.reserved(workCalendarDate);
                wrkCtrCapResPeriodTmp.CapacityReservedHoursDetail   += dataSourceObject.reservedDetail(workCalendarDate);
                wrkCtrCapResPeriodTmp.CapacityReservedHoursRough    += dataSourceObject.reservedRough(workCalendarDate);
                wrkCtrCapResPeriodTmp.CapacityRemainHours           += dataSourceObject.remain(workCalendarDate);
                wrkCtrCapResPeriodTmp.CapacityRemainHoursDetail     += dataSourceObject.remainDetail(workCalendarDate);

                wrkCtrCapResPeriodTmp.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates period records in the temporary table.
    /// </summary>
    protected void createPeriodRecords()
    {
        int             i;

        periods = WrkCtrCapResPeriodTemplateCalculate::createPeriodsOnServer(this.parmWorkPeriodTemplateId(), this.parmFromDate(), this.parmToDate());
        for (i = 1; i <= conLen(periods); i++)
        {
            wrkCtrCapResPeriodTmp.clear();
            [wrkCtrCapResPeriodTmp.FromDate, wrkCtrCapResPeriodTmp.ToDate, wrkCtrCapResPeriodTmp.Description] = conPeek(periods, i);
            wrkCtrCapResPeriodTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the periods as a container.
    /// </summary>
    /// <returns>
    /// A container with periods.
    /// </returns>
    /// <remarks>
    /// The container contains containers for each period and each period container contains from and to
    /// dates and period description.
    /// </remarks>
    protected container getPeriods()
    {
        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCalendarDateDataSource</Name>
				<Source><![CDATA[
        public FormDataSource parmWorkCalendarDateDataSource(FormDataSource _workCalendarDateDataSource = workCalendarDateDataSource)
    {
        workCalendarDateDataSource = _workCalendarDateDataSource;

        return workCalendarDateDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplateId</Name>
				<Source><![CDATA[
        public RefRecId parmWorkPeriodTemplateId(RefRecId _workPeriodTemplateId = workPeriodTemplateId)
    {
        workPeriodTemplateId = _workPeriodTemplateId;

        return workPeriodTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrCapResPeriodTmp</Name>
				<Source><![CDATA[
        public WrkCtrCapResPeriodTmp  parmWrkCtrCapResPeriodTmp(WrkCtrCapResPeriodTmp _wrkCtrCapResPeriodTmp = wrkCtrCapResPeriodTmp)
    {
        wrkCtrCapResPeriodTmp = _wrkCtrCapResPeriodTmp;
        return wrkCtrCapResPeriodTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WrkCtrCapResPeriodTemplateCalculate construct()
    {
        return new WrkCtrCapResPeriodTemplateCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates period records in the temporary table.
    /// </summary>
    /// <param name="_workPeriodTemplateRecId">
    ///    An integer that contains the period template record ID.
    /// </param>
    /// <param name="_fromDate">
    ///    A date that defines the lower limit for the period template.
    /// </param>
    /// <param name="_toDate">
    ///    A date that defines the upper limit for the period template.
    /// </param>
    /// <returns>
    ///    A container with periods.
    /// </returns>
    protected static container createPeriodsOnServer(
        RefRecId            _workPeriodTemplateRecId,
        TransDate           _fromDate,
        TransDate           _toDate)
    {
        WorkPeriodTemplateCalculate             workPeriodTemplateCalculate;
        WrkCtrCapResPeriodTemplateCalculate     wrkCtrCapResPeriodTemplateCalculate = WrkCtrCapResPeriodTemplateCalculate::construct();

        wrkCtrCapResPeriodTemplateCalculate.parmFromDate(_fromDate);
        wrkCtrCapResPeriodTemplateCalculate.parmToDate(_toDate);

        workPeriodTemplateCalculate = WorkPeriodTemplateCalculate::newStandard(_workPeriodTemplateRecId, _fromDate, ForwardBackward::Forward);
        workPeriodTemplateCalculate.calcPeriods(wrkCtrCapResPeriodTemplateCalculate);

        return wrkCtrCapResPeriodTemplateCalculate.getPeriods();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>