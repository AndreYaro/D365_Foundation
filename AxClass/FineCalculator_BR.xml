<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FineCalculator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The FineCalculator_BR class is used to calculate Fine Amount using the Fine Data from
/// <c>CustFineSetup_BR</c> or <c>VendFineSetup_BR</c>
/// </summary>
class FineCalculator_BR
{
    CustVendFine_BR         custVendFineData;          // Mapping with Fine Data

    date                    paymentDate;                // Payment Date
    date                    origDueDate;                // Initial Due Date
    AmountCur               originalAmount;             // Amount to be calculated
    CurrencyCode            currencyCode;               // Currency used

    date                    newDueDate;

    AmountCur               calculatedAmount;           // Calculated Amount (with Fine)
    AmountCur               prevCalcFineAmount;

    PaymCalendarIDerivationSource  calendarDerivation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the fine calculation
    /// </summary>
    /// <returns>
    /// The Fine Amount
    /// </returns>
    public AmountCur calculate()
    {
        PaymCalendarProcessor paymCalendarProc;

        paymCalendarProc = PaymCalendarProcessor::construct();
        newDueDate = paymCalendarProc.adjustDate(newDueDate,
                                                 PaymentDueDateUpdatePolicy::Next,
                                                 calendarDerivation);

        if (paymentDate && paymentDate > newDueDate)
        {
            calculatedAmount = custVendFineData && custVendFineData.FinePct > 0
                ? (custVendFineData.FinePct/100) * originalAmount
                : prevCalcFineAmount;
        }
        else
        {
            calculatedAmount = 0;
        }

        return CurrencyExchangeHelper::amount(calculatedAmount, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the initialization for the <c>InterestCalculator_Br</c> class.
    /// </summary>
    /// <param name="_custVendFineData">
    /// Mapping used to get the Fine Basic Information (percent, days, days of grace..)
    /// </param>
    /// <param name="_paymentDate">
    /// Payment Date used to calculate the Fine
    /// </param>
    /// <param name="_origdueDate">
    /// Due Date used to calculate the Fine
    /// </param>
    /// <param name="_originalAmount">
    /// Amount used to calculate the Fine
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used.
    /// </param>
    /// <param name="_calendarDerivation">
    /// <c>PaymCalendarIDerivationSource</c> used to account for holidays.
    /// </param>
    /// <param name="_prevCalcFineAmount">
    /// Previous Fine amount calculated.
    /// </param>
    public void new(CustVendFine_BR         _custVendFineData,
                    date                    _paymentDate,
                    date                    _origdueDate,
                    AmountCur               _originalAmount,
                    CurrencyCode            _currencyCode,
                    PaymCalendarIDerivationSource _calendarDerivation,
                    AmountCur               _prevCalcFineAmount = 0)
    {
        custVendFineData        = _custVendFineData;
        paymentDate             = _paymentDate;
        origDueDate             = _origdueDate;
        newDueDate              = _origdueDate + _custVendFineData.Days;
        originalAmount          = _originalAmount;
        currencyCode            = _currencyCode;
        calendarDerivation      = _calendarDerivation;
        calculatedAmount        = 0;
        prevCalcFineAmount      = _prevCalcFineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>