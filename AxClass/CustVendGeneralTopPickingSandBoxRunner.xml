<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingSandBoxRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendGeneralTopPickingSandBoxRunner
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>proxyRun</Name>
				<Source><![CDATA[
    internal static container proxyRun(container _payload)
    {
        ClassId currentClassId;
        container currentWorkingPayload;
        str methodName;
        [currentClassId, currentWorkingPayload, methodName] = _payload;

        DictClass dictClass = new DictClass(currentClassId);
        Object obj = dictClass.makeObject();
        return [dictClass.callObject(methodName, obj, currentWorkingPayload)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>asyncEntry</Name>
				<Source><![CDATA[
    internal static boolean asyncEntry(ClassId _classId, container _workingPayload, str _methodName)
    {
        CustVendGeneralTopPickingLogger custVendGeneralTopPickingLogger = CustVendGeneralTopPickingLogger::createLogger();
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingSandboxExecution))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));
            custVendGeneralTopPickingLogger.logInformation(strFmt('ClassName %1 Method %2 is invoked', classId2Name(_classId), _methodName));

            var task = runAsync(classNum(CustVendGeneralTopPickingSandBoxRunner),
            staticMethodStr(CustVendGeneralTopPickingSandBoxRunner, proxyRun),
            [_classId, _workingPayload, _methodName]);
            AsyncTaskResult asyncTaskResult = AsyncTaskResult::getAsyncTaskResult(task);
            container infologData = asyncTaskResult.getInfologData();
            SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infoLogData);
            while (sysInfologEnumerator.moveNext())
            {
                Exception ex = sysInfologEnumerator.currentException();
                switch (ex)
                {
                    case Exception::Info:
                        info(sysInfologEnumerator.currentMessage(), sysInfologEnumerator.currentHelpUrl());
                        break;
                    case Exception::Warning:
                        warning(sysInfologEnumerator.currentMessage(), sysInfologEnumerator.currentHelpUrl());
                        break;
                    default:
                        error(sysInfologEnumerator.currentMessage(), sysInfologEnumerator.currentHelpUrl());
                        break;
                }
            }
            if (asyncTaskResult.getException())
            {
                custVendGeneralTopPickingLogger.logError(strFmt('ClassName %1 Method %2 finished with exception', classId2Name(_classId), _methodName));
                return false;
            }
            container resultSet = asyncTaskResult.getResult();
            custVendGeneralTopPickingLogger.logInformation(strFmt('ClassName %1 Method %2 finished successfully', classId2Name(_classId), _methodName));
            return conPeek(resultSet, 1);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>