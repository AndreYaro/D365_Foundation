<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementIntDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAccountStatementIntDP</c> class declares the variables that are used in the
/// <c>CustAccountStatementInt</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustAccountStatementInt)),
    SRSReportParameterAttribute(classStr(CustAccountStatementIntContract))
]
public class CustAccountStatementIntDP extends SrsReportDataProviderPreProcessTempDB
{
    //
    // Instrumentation
    //
    private CustAccountStatementMonitor monitor;

    //
    // Contract parameters
    //
    TransDate fromDate;
    TransDate toDate;
    TransDate assessmentDate;
    DiscCurrency details;
    NoYes onlyOpen;
    NoYes includeReversed;
    NoYes printPaymentSchedule;
    NoYes withoutTransact;
    NoYes offsetAccount;
    NoYes newPage;

    BankLCBankDocumentType bankLCBankDocumentType;

    CustTrans custTrans;
    CustTable custTable;
    TransactionReversalTrans transactionReversalTrans;

    TmpCustVendTransOpen tmpCustVendTransOpen;

    CustVendAccountStatementIntTmp custAccountStatementIntTmp;
    CustVendAccountStatementIntTmpProcessing custAccountStatementIntTmpProcessing;

    Integer numberOfTransOpen;
    CurrencyCode companyCurrencyCode;

    NoYes inclTransWitNoBillingClass;
    List billingClassification;
    CustBillingClassification custBillingClassification;

    boolean printPaymentScheduleMark;

    CustVendTransDetails custVendTransDetails;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessmentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the user-entered values for the dates that are used in this report.
    /// </summary>
    /// <returns>
    ///    The assessment date to use for this report.
    /// </returns>
    private TransDate assessmentDate()
    {
        return assessmentDate ? assessmentDate : toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccountStatementIntTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustVendAccountStatementIntTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustVendAccountStatementIntTmp))
    ]
    public CustVendAccountStatementIntTmp getCustVendAccountStatementIntTmp()
    {
        select custAccountStatementIntTmp;
        return custAccountStatementIntTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    /// <remarks>
    ///    Adds the data source, ranges, and sortings by using the selected parameters.
    /// </remarks>
    private Query initCustTransQuery()
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(CustAccountStatementIntDP));
        monitor = CustAccountStatementMonitor::construct(logger);

        Query query = this.parmQuery();
        QueryBuildDataSource custTransDataSource;
        QueryBuildDataSource transactionReversalTransDataSource;
        QueryBuildDataSource ds;

        custTransDataSource = SysQuery::findOrCreateDataSource(query, tableNum(CustTrans), tableNum(CustTable));
        custTransDataSource.relations(true);
        custTransDataSource.joinMode(JoinMode::OuterJoin);

        transactionReversalTransDataSource = custTransDataSource.addDataSource(tableNum(TransactionReversalTrans));
        transactionReversalTransDataSource.addLink(fieldNum(CustTrans, RecId), fieldNum(TransactionReversalTrans, RefRecId));
        transactionReversalTransDataSource.addLink(fieldNum(CustTrans, TableId), fieldNum(TransactionReversalTrans, RefTableId));
        transactionReversalTransDataSource.fetchMode(QueryFetchMode::One2One);
        transactionReversalTransDataSource.joinMode(JoinMode::OuterJoin);

        if (fromDate || toDate)
        {
            custTransDataSource.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(fromDate, toDate));
        }

        custTransDataSource.addSortField(fieldNum(CustTrans, TransDate));
        custTransDataSource.addSortField(fieldNum(CustTrans, Voucher));
        custTransDataSource.addSortField(fieldNum(CustTrans, RecId));

        if (CustParameters::isBillingClassificationEnabled()
            && !BrazilParameters::isEnabled()
            && (billingClassification || inclTransWitNoBillingClass))
        {
            CustBillingClassificationReportManager::setBillingClassificationRanges(custTransDataSource, billingClassification, inclTransWitNoBillingClass, fieldNum(CustTrans, CustBillingClassification));
        }

        if (!includeReversed)
        {
            ds = custTransDataSource.addDataSource(tableNum(TransactionReversalTrans));
            ds.joinMode(JoinMode::NoExistsJoin);
            ds.addLink(fieldNum(CustTrans, TableId), fieldNum(TransactionReversalTrans, RefTableId));
            ds.addLink(fieldNum(CustTrans, RecId), fieldNum(TransactionReversalTrans, RefRecId));
            ds.addRange(fieldNum(TransactionReversalTrans, Reversed)).value(enum2str(NoYes::Yes));
        }

        if (BankLCExportFeatureChecker::checkBankLCExportEnabled() && bankLCBankDocumentType != BankLCBankDocumentType::All)
        {
            ds = custTransDataSource.addDataSource(tableNum(BankLCCustTrans));
            ds.joinMode(JoinMode::ExistsJoin);
            ds.addLink(fieldNum(CustTrans, BankLCExportLine), fieldNum(BankLCCustTrans, BankLCExportLine));
            ds.addRange(fieldNum(BankLCCustTrans, BankDocumentType)).value(
                    SysQuery::value(BankLCCustVendTransHelper::convertDocumentType(bankLCBankDocumentType)));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustAccountStatementIntTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates values into the <c>CustVendAccountStatementIntTmp</c> temporary table buffer.
    /// </summary>
    /// <param name="_blSchedule">
    ///    true if <c>blSchedule</c> parameter will be retrieved and assigned; otherwise, false.
    /// </param>
    /// <param name="_curExchHelper">
    ///    A <c>CurrencyExchangeHelper</c> object to use when performing currency conversions.
    /// </param>
    protected void populateCustAccountStatementIntTmp(
         boolean _blSchedule,
         CurrencyExchangeHelper _curExchHelper)
    {
        BankLCCustTrans bankLCCustTrans;
        #define.NewPageGroupBy('Group1')

        // <GBR>
        TmpTaxWithhold tmpTaxWithhold;
        // </GBR>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            // Get TmpTaxWithhold
            tmpTaxWithhold = TaxWithhold::calculateTmpTaxWithhold(custTrans, custTrans.TransDate);

            custAccountStatementIntTmp.FiscalEstablishmentId = custTrans.fiscalEstablishmentId_BR();
            custAccountStatementIntTmp.TaxWithHoldAmount_BR = tmpTaxWithhold.TaxWithholdAmount;
        }
        // </GBR>
        else if (custTrans.CustBillingClassification)
        {
            custAccountStatementIntTmp.BillingClassification = CustBillingClassification::find(custTrans.CustBillingClassification).BillingClassification;
        }

        if (printPaymentSchedule)
        {
            custAccountStatementIntTmp.SumAmountMST = custTrans.AmountMST - custTrans.SettleAmountMST;
        }
        else
        {
            custAccountStatementIntTmp.SumAmountMST = custTrans.AmountMST;
        }

        custAccountStatementIntTmp.IsDetail = 'No';
        custAccountStatementIntTmp.TransOpen = numberOfTransOpen;

        if (details == DiscCurrency::Currency)
        {
            custAccountStatementIntTmp.AmountMST = tmpCustVendTransOpen.AmountMST;
        }
        else
        {
            custAccountStatementIntTmp.AmountMST = 0.0;
        }

        if (numberOfTransOpen > 1 && !printPaymentSchedule)
        {
            custAccountStatementIntTmp.MarkForPaymentSchedule = '*';
            printPaymentScheduleMark = true;
        }
        else
        {
            custAccountStatementIntTmp.MarkForPaymentSchedule = '';
        }

        if (printPaymentScheduleMark)
        {
            custAccountStatementIntTmp.PaymentScheduleMark = SysLabel::labelId2String2("@SYS67766");
        }

        if (_blSchedule)
        {
            custAccountStatementIntTmp.Txt = 'Detail';
            custAccountStatementIntTmp.IsDetail = 'Yes';
            custAccountStatementIntTmp.SumAmountMST = 0.0;

            custAccountStatementIntTmp.AmountMST = tmpCustVendTransOpen.AmountMST;

            custAccountStatementIntTmp.TransDate = dateNull();
            custAccountStatementIntTmp.Voucher = '';
            custAccountStatementIntTmp.Invoice = '';
            custAccountStatementIntTmp.AmountCur = TmpCustVendTransOpen.AmountCur;
            custAccountStatementIntTmp.DueDate = tmpCustVendTransOpen.DueDate;
            custAccountStatementIntTmp.PossibleCashDisc = 0.0;
            custAccountStatementIntTmp.UtilizedCashDisc = 0.0;
            custAccountStatementIntTmp.RemainAmountCur = 0.0;
            custAccountStatementIntTmp.TmpDueDate = tmpCustVendTransOpen.DueDate;
            custAccountStatementIntTmp.RemainAmountMST = tmpCustVendTransOpen.AmountMST;
            custAccountStatementIntTmp.CurrencyCode = '';
        }
        else
        {
            custAccountStatementIntTmp.CurrencyCode = custTrans.CurrencyCode;
            custAccountStatementIntTmp.Txt = custTrans.Txt;
            custAccountStatementIntTmp.TransDate = custTrans.TransDate;
            custAccountStatementIntTmp.DocumentNum = custTrans.DocumentNum;
            custAccountStatementIntTmp.Voucher = custTrans.Voucher;

            if (offsetAccount)
            {
                custAccountStatementIntTmp.OffsetAccount = custVendTransDetails.offsetAccount(custTrans.Voucher, custTrans.TransDate);
            }

            custAccountStatementIntTmp.Invoice = custTrans.Invoice;
            custAccountStatementIntTmp.AmountMST = this.printingAmountMST();
            custAccountStatementIntTmp.RemainAmountMST = custTrans.remainAmountMST();
            custAccountStatementIntTmp.AmountCur = custTrans.AmountCur;
            custAccountStatementIntTmp.RemainAmountCur = custTrans.remainAmountCur();

            if (numberOfTransOpen <= 1)
            {
                custAccountStatementIntTmp.DueDate = custTrans.DueDate;

                if (tmpCustVendTransOpen.RecId)
                {
                    custAccountStatementIntTmp.TmpDueDate = tmpCustVendTransOpen.DueDate;
                }
                else
                {
                    custAccountStatementIntTmp.TmpDueDate = custTrans.DueDate;
                }
            }
            else
            {
                custAccountStatementIntTmp.DueDate = dateNull();
                custAccountStatementIntTmp.TmpDueDate = dateNull();
            }

            custAccountStatementIntTmp.PossibleCashDisc = (custAccountStatementIntTmpProcessing.PossibleCashDisc == 0 ? 0 :
                    _curExchHelper.calculateTransactionToTransaction(_curExchHelper.parmLedgerRecId(), custTrans.CurrencyCode,
                            companyCurrencyCode, custAccountStatementIntTmpProcessing.PossibleCashDisc, 0, true));
        }

        custAccountStatementIntTmp.UtilizedCashDisc = (custAccountStatementIntTmpProcessing.UtilizedCashDisc == 0 ? 0 :
                _curExchHelper.calculateTransactionToTransaction(_curExchHelper.parmLedgerRecId(), custTrans.CurrencyCode,
                        companyCurrencyCode, custAccountStatementIntTmpProcessing.UtilizedCashDisc, 0, true));

        custAccountStatementIntTmp.TraceNum = transactionReversalTrans.TraceNum;
        custAccountStatementIntTmp.Reversed = transactionReversalTrans.Reversed ? 'R' : '';
        custAccountStatementIntTmp.LetterRemarks = FormLetterRemarks::find(CompanyInfo::languageId(), FormTextType::CustACStatement).Txt;

        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        select firstonly RecId from generalJournalEntry
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == custTrans.Voucher
                && subledgerVoucherGeneralJournalEntry.AccountingDate == custTrans.TransDate
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == custTrans.DataAreaId
                && generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;

        if (generalJournalEntry)
        {
            custAccountStatementIntTmp.GeneralJournalEntry = generalJournalEntry.RecId;
        }

        if (BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            if (custTrans.BankLCExportLine != 0)
            {
                select firstonly BankDocumentType, BankLCNumber
                    from bankLCCustTrans
                    where bankLCCustTrans.BankLCExportLine == custTrans.BankLCExportLine;

                custAccountStatementIntTmp.BankDocumentType = bankLCCustTrans.BankDocumentType;
                custAccountStatementIntTmp.BankLCNumber = bankLCCustTrans.BankLCNumber;
            }
            else
            {
                custAccountStatementIntTmp.BankDocumentType = BankDocumentType::None;
                custAccountStatementIntTmp.BankLCNumber = '';
            }
        }

        if (newPage == NoYes::Yes)
        {
            // In order to have a page break between each instance of Account Num and Invoice Account group,
            // combine them in the code and use it as a group by field in report design.
            custAccountStatementIntTmp.NewPageGroupBy = custAccountStatementIntTmp.AccountNum + custAccountStatementIntTmp.InvoiceAccount;
        }
        else
        {
            // We should not have page break between each instance of Account Num and Invoice Account group.
            // so set a constant value for all rows and use it as a group by field in report design.
            custAccountStatementIntTmp.NewPageGroupBy = #NewPageGroupBy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAccountStatementIntTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>CustVendAccountStatementIntTmp</c> temporary table.
    /// </summary>
    /// <param name="_blSchedule">
    ///    A Boolean value that indicates whether the <c>blSchedule</c> parameter will be retrieved and
    ///    assigned.
    /// </param>
    /// <param name="_curExchHelper">
    ///    A <c>CurrencyExchangeHelper</c> object to use when performing currency conversions.
    /// </param>
    /// <param name="_ril">
    ///    A <c>RecordInsertList</c> object to which the <c>CustVendAccountStatementIntTmp</c> record
    ///    will be added.
    /// </param>
    protected void insertCustAccountStatementIntTmp(
            boolean _blSchedule,
            CurrencyExchangeHelper _curExchHelper,
            RecordInsertList _ril)
    {
        this.populateCustAccountStatementIntTmp(_blSchedule, _curExchHelper);

        _ril.add(custAccountStatementIntTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the opening balance amount.
    /// </summary>
    /// <returns>
    ///    The opening balance amount.
    /// </returns>
    private AmountMST openingBalance()
    {
        if (fromDate)
        {
            if (onlyOpen)
            {
                return custTable.openBalanceMST(dateNull(), fromDate -1, assessmentDate);
            }
            else
            {
                return custTable.balanceMST(dateNull(), fromDate -1);
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printingAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the printing <c>AmountMST</c> value.
    /// </summary>
    /// <returns>
    ///    The <c>AmountMST</c> value.
    /// </returns>
    /// <remarks>
    ///    The returned value is used by the <c>processReport</c> method.
    /// </remarks>
    protected AmountMST printingAmountMST()
    {
        return onlyOpen ? custTrans.remainAmountMST() : custTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the
    /// <c>CustAccountStatementInt</c>Microsoft SQL Server Reporting Services report.
    /// </remarks>
    public void processReport()
    {
        CustAccountStatementIntContract contract = this.parmDataContract();
        QueryRun queryRun;
        boolean recordAdded;

        QueryBuildDataSource custAccountStatementIntTmpProcDS;

        RecordInsertList procRil = new RecordInsertList(tableNum(CustVendAccountStatementIntTmpProcessing), true, true, true, false, true, custAccountStatementIntTmpProcessing);
        RecordInsertList tmpRil = new RecordInsertList(tableNum(CustVendAccountStatementIntTmp), true, true, true, false, true, custAccountStatementIntTmp);

        CurrencyExchangeHelper curExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate() ? contract.parmToDate() : dateMax();
        assessmentDate = contract.parmAssessmentDate();
        onlyOpen = contract.parmOnlyOpen();
        offsetAccount = contract.parmOffsetAccount();
        includeReversed = contract.parmIncReversed();
        printPaymentSchedule = contract.parmSPaySchedule();
        withoutTransact = contract.parmWithoutTrans();
        details = contract.parmDetails();
        newPage = contract.parmNewPage();

        printPaymentScheduleMark = false;

        if (CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification())
            && !BrazilParameters::isEnabled())
        {
            billingClassification = contract.parmBillingClassification();
            inclTransWitNoBillingClass = contract.parmInclTransWithNoBillingClass();
        }

        if (BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            bankLCBankDocumentType = contract.parmBankLCBankDocumentType();
        }

        companyCurrencyCode = Ledger::accountingCurrency();

        custVendTransDetails = new CustVendTransDetails(custTrans, this.assessmentDate());

        queryRun = new QueryRun(this.initCustTransQuery());

        // pre-run through the query only to grab the trans recs we will be using. this allows us to calculate
        // several thing later using set-based operations instead of nested queries.
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(CustTrans)))
            {
                custTrans = queryRun.get(tableNum(CustTrans));

                if (custTrans)
                {
                    custAccountStatementIntTmpProcessing.CustVendTransRefRecId = custTrans.RecId;
                    procRil.add(custAccountStatementIntTmpProcessing);
                }
            }
        }
        procRil.insertDatabase();

        // perform our set-based calculations
        custVendTransDetails.calcCashDiscounts(custAccountStatementIntTmpProcessing);

        // join our processing table against our global query for insertion into the report backing table
        custAccountStatementIntTmpProcDS = SysQuery::findOrCreateDataSource(queryRun.query(), tableNum(CustTrans)).addDataSource(tableNum(CustVendAccountStatementIntTmpProcessing));
        custAccountStatementIntTmpProcDS.addLink(fieldNum(CustTrans, RecId), fieldNum(CustVendAccountStatementIntTmpProcessing, CustVendTransRefRecId));
        custAccountStatementIntTmpProcDS.fetchMode(QueryFetchMode::One2One);
        custAccountStatementIntTmpProcDS.joinMode(JoinMode::OuterJoin);
        queryRun.setCursor(custAccountStatementIntTmpProcessing);

        // reset and perform our core query loop
        queryRun.reset();
        custTrans = null;

        using (SysInstrumentationActivityContext activityContext = monitor.enterProcessRecords_Internal())
        {
            int lineCount;

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(CustTable)))
                {
                    if (custTable && !recordAdded && withoutTransact)
                    {
                        this.insertCustAccountStatementIntTmp(false, curExchHelper, tmpRil);
                    }

                    custTable.data(queryRun.get(tableNum(CustTable)));
                    recordAdded = false;
                    numberOfTransOpen = 0;

                    custAccountStatementIntTmp.Name = custTable.name();
                    custAccountStatementIntTmp.Address = custTable.address();
                    custAccountStatementIntTmp.AccountNum = custTable.AccountNum;
                    custAccountStatementIntTmp.OrganizationNumber = custTable.OrgId;
                    custAccountStatementIntTmp.InvoiceAccount = custTable.InvoiceAccount == '' ? custTable.AccountNum : custTable.InvoiceAccount;
                    custAccountStatementIntTmp.CustGroup = custTable.CustGroup;
                    custAccountStatementIntTmp.Currency = custTable.Currency;
                    custAccountStatementIntTmp.PaymentTxt = PaymTerm::find(custTable.PaymTermId).Description;
                    custAccountStatementIntTmp.CashDiscName = CashDisc::txt(custTable.CashDisc, CompanyInfo::languageId());

                    custAccountStatementIntTmp.OpeningBalance = this.openingBalance();
                }

                if (queryRun.changed(tableNum(CustTrans)))
                {
                    custTrans.data(queryRun.get(tableNum(CustTrans)));
                    custAccountStatementIntTmpProcessing.data(queryRun.get(tableNum(CustVendAccountStatementIntTmpProcessing)));
                    transactionReversalTrans.data(queryRun.get(tableNum(TransactionReversalTrans)));

                    if (custTrans)
                    {
                        custTrans.transactionPerDate(this.assessmentDate());

                        if (onlyOpen && this.printingAmountMST() == 0)
                        {
                            continue;
                        }

                        tmpCustVendTransOpen = custVendTransDetails.calcTmpCustVendTransOpen(custTrans, onlyOpen);
                        numberOfTransOpen = custVendTransDetails.numberOfTransOpen();

                        // This section is mainly intended to set the value of the tmpCustVendTransOpen.DueDate
                        // field. This value will be used to set the DueDate of the invoices / payments
                        // on the report when issuing the send(_custTrans) command.
                        if (numberOfTransOpen == 1 || (numberOfTransOpen > 1 && !printPaymentSchedule))
                        {
                            if (printPaymentSchedule)
                            {
                                select firstonly tmpCustVendTransOpen;
                            }
                            else
                            {
                                if (custTrans.Invoice)
                                {
                                    // For invoices, use the due date of the invoice, not the maximum due date.
                                    tmpCustVendTransOpen.DueDate = custTrans.DueDate;
                                }
                                else
                                {
                                    select firstonly tmpCustVendTransOpen order by DueDate desc;
                                }
                            }
                        }
                        this.insertCustAccountStatementIntTmp(false, curExchHelper, tmpRil);
                        recordAdded = true;
                    }
                }

                if (numberOfTransOpen > 1 && printPaymentSchedule)
                {
                    while select tmpCustVendTransOpen
                        order by DueDate
                    {
                        this.insertCustAccountStatementIntTmp(true, curExchHelper, tmpRil);
                        recordAdded = true;
                    }
                }

                lineCount++;
            }

            monitor.exitProcessRecords_Internal(activityContext, lineCount);
        }

        if (custTable && !recordAdded && withoutTransact)
        {
            this.insertCustAccountStatementIntTmp(false, curExchHelper, tmpRil);
        }

        // flush remaining records to the database
        tmpRil.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>