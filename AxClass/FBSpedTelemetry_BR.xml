<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedTelemetry_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>FBSpedTelemetry_BR</c> provides methods for telemetry recording of SPED of Brazil.
/// </summary>
internal class FBSpedTelemetry_BR implements System.IDisposable
{
    private System.Diagnostics.Stopwatch stopwatch;
    private str featureReference;
    private str event;
    private str callerFuncName;
    private str featureVersion;
    private boolean isSuccess;
    private int64 processedElementsCnt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>FBSpedTelemetry_BR</c>.
    /// </summary>
    /// <param name = "_featureReference">>A feature reference ID.</param>
    /// <param name = "_event">An event description.</param>
    /// <param name = "_callerFuncName">An object which calls the event.</param>
    /// <param name = "_featureVersion">A feature version.</param>
    /// <returns>The instance of the <c>FBSpedTelemetry_BR</c> class.</returns>
    public static FBSpedTelemetry_BR construct(
        str _featureReference,
        str _event,
        str _callerFuncName,
        str _featureVersion)
    {
        return new FBSpedTelemetry_BR(
            _featureReference,
            _event,
            _callerFuncName,
            _featureVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        str _featureReference,
        str _event,
        str _callerFuncName,
        str _featureVersion)
    {
        super();

        featureReference = _featureReference;
        event = _event;
        callerFuncName = _callerFuncName;
        featureVersion = _featureVersion;
        isSuccess = false;

        this.eventStart();
        stopwatch = System.Diagnostics.Stopwatch::StartNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        stopwatch.Stop();
        this.eventFinish();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessedElementsCnt</Name>
				<Source><![CDATA[
    public int64 parmProcessedElementsCnt(int64 _processedElementsCnt = processedElementsCnt)
    {
        processedElementsCnt = _processedElementsCnt;
        return processedElementsCnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSuccess</Name>
				<Source><![CDATA[
    public boolean parmIsSuccess(boolean _isSuccess = isSuccess)
    {
        isSuccess = _isSuccess;
        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventStart</Name>
				<Source><![CDATA[
    private void eventStart()
    {
        GlobalizationInstrumentationHelper::featureProcessingStartEvent(
            featureReference,
            event,
            callerFuncName,
            featureVersion,
            SysCountryRegionCode::countryInfo(),
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventFinish</Name>
				<Source><![CDATA[
    private void eventFinish()
    {
        GlobalizationInstrumentationHelper::featureProcessingFinishEvent(
            featureReference,
            strFmt('%1#Finish', event),
            callerFuncName,
            featureVersion,
            SysCountryRegionCode::countryInfo(),
            stopwatch.ElapsedMilliseconds,
            false,
            isSuccess,
            processedElementsCnt ? stopwatch.ElapsedMilliseconds / processedElementsCnt : 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>