<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorVendInvoice_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a <c>FiscalDocumentParmData_BR</c> object and its
/// components for a vendor invoice posting scenario.
/// </summary>
public class FiscalDocParmDataCreatorVendInvoice_BR extends FiscalDocumentParmDataCreator_BR
{
    VendInvoiceInfoTable        vendInvoiceInfoTable;
    VendInvoiceJour             vendInvoiceJour;
    PurchTotals                 purchTotals;
    PurchTable                  purchTable;
    PurchParmUpdate             purchParmUpdate;
    VendTrans                   vendTrans;
    SalesCarrier                salesCarrier;

    FiscalDocumentType_BR       fiscalDocumentType;
    RecordSortedList            vendInvoiceTransList;

    FiscalEstablishment_BR      fiscalEstablishment;

    Map                         summedTaxes;

    // Import declaration variables
    Amount                              di_markupSumOthers;
    Amount                              di_totalAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustFiscalDocumentForCIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the fiscal document for CIF presentation
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Fiscal document line information
    /// </param>
    /// <param name="_othersMarkupParmData">
    /// Fiscal document miscellaneous charge information
    /// </param>
    protected void adjustFiscalDocumentForCIF(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentMiscChargeParmData_BR _othersMarkupParmData)
    {
        LineAmount      lineAmount;
        lineAmount      lineDiscount;
        ListEnumerator  lineTaxes;
        ListIterator    lineCharges;

        FiscalDocumentTaxTransParmData_BR   lineTax;
        MarkupSum                           othersMarkupSum;
        FiscalDocumentMiscChargeParmData_BR lineCharge;

        // add import tax, insurance and freight in the line amount and remove them from misc. charges
        lineAmount      = _fiscalDocumentLineParmData.parmLineAmount();
        lineDiscount    = _fiscalDocumentLineParmData.parmLineDiscount();

        lineTaxes = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

        while (lineTaxes.moveNext())
        {
            lineTax = lineTaxes.current();

            switch (lineTax.parmType())
            {
                case TaxType_BR::ImportTax:
                    lineAmount += lineTax.parmTaxAmountOther() + lineTax.parmTaxAmount();
                    break;
                case TaxType_BR::PIS:
                case TaxType_BR::COFINS:
                    othersMarkupSum += lineTax.parmTaxAmountOther() + lineTax.parmTaxAmount();
                    break;
                case TaxType_BR::ICMS:
                case TaxType_BR::IPI:
                    di_totalAmount += lineTax.parmTaxAmountOther() ? lineTax.parmTaxAmountOther() : lineTax.parmTaxAmount();
                    break;
                default:
                    break;
            }
        }

        lineCharges = new ListIterator(_fiscalDocumentLineParmData.parmListOfMiscCharges());

        while (lineCharges.more())
        {
            lineCharge = lineCharges.value();

            switch (lineCharge.parmType())
            {
                case MarkupClassification_BR::Freight:
                case MarkupClassification_BR::Insurance:
                    lineAmount          += lineCharge.parmAmount();
                    lineCharges.delete();
                    break;
                case MarkupClassification_BR::SISCOMEX:
                case MarkupClassification_BR::Others:
                    di_markupSumOthers  += lineCharge.parmAmount();
                    di_totalAmount      += lineCharge.parmAmount();
                    lineCharges.next();
                    break;
                default:
                    lineCharges.next();
                    break;
            }
        }

        di_markupSumOthers  += othersMarkupSum;
        di_totalAmount      += lineAmount + othersMarkupSum - lineDiscount;

        _othersMarkupParmData.parmAmount(othersMarkupSum);

        _fiscalDocumentLineParmData.parmLineAmount(lineAmount);

        _fiscalDocumentLineParmData.parmUnitPrice(lineAmount / _fiscalDocumentLineParmData.parmQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFiscalDocumentForFOB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the fiscal document for FOB presentation
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Fiscal document line information
    /// </param>
    /// <param name="_othersMarkupParmData">
    /// Fiscal document miscellaneous charge information
    /// </param>
    protected void adjustFiscalDocumentForFOB(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, FiscalDocumentMiscChargeParmData_BR _othersMarkupParmData)
    {
        LineAmount      lineAmount;
        lineAmount      lineDiscount;
        ListEnumerator  lineTaxes;
        ListIterator    lineCharges;

        FiscalDocumentTaxTransParmData_BR   lineTax;
        MarkupSum                           othersMarkupSum;
        FiscalDocumentMiscChargeParmData_BR lineCharge;

        // add import tax, insurance and freight in the line amount and remove them from misc. charges
        lineAmount      = _fiscalDocumentLineParmData.parmLineAmount();
        lineDiscount    = _fiscalDocumentLineParmData.parmLineDiscount();

        lineTaxes = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();

        while (lineTaxes.moveNext())
        {
            lineTax = lineTaxes.current();

            switch (lineTax.parmType())
            {
                case TaxType_BR::ImportTax:
                case TaxType_BR::PIS:
                case TaxType_BR::COFINS:
                    othersMarkupSum += lineTax.parmTaxAmountOther() + lineTax.parmTaxAmount();
                    break;
                case TaxType_BR::ICMS:
                case TaxType_BR::IPI:
                    di_totalAmount += lineTax.parmTaxAmountOther() ? lineTax.parmTaxAmountOther() : lineTax.parmTaxAmount();
                    break;
                default:
                    break;
            }
        }

        lineCharges = new ListIterator(_fiscalDocumentLineParmData.parmListOfMiscCharges());

        while (lineCharges.more())
        {
            lineCharge = lineCharges.value();

            switch (lineCharge.parmType())
            {
                case MarkupClassification_BR::Freight:
                case MarkupClassification_BR::Insurance:
                    di_totalAmount += lineCharge.parmAmount();
                    lineCharges.next();
                    break;
                case MarkupClassification_BR::SISCOMEX:
                case MarkupClassification_BR::Others:
                    di_markupSumOthers  += lineCharge.parmAmount();
                    di_totalAmount      += lineCharge.parmAmount();
                    lineCharges.next();
                    break;
                default:
                    lineCharges.next();
                    break;
            }
        }

        di_markupSumOthers  += othersMarkupSum;
        di_totalAmount      += lineAmount + othersMarkupSum - lineDiscount;

        _othersMarkupParmData.parmAmount(othersMarkupSum);

        _fiscalDocumentLineParmData.parmLineAmount(lineAmount);

        _fiscalDocumentLineParmData.parmUnitPrice(lineAmount / _fiscalDocumentLineParmData.parmQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFiscalDocumentForImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fiscal document adjustments for import process
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// Fiscal document information
    /// </param>
    protected void adjustFiscalDocumentForImport(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        ListEnumerator                      listOfLinesEnumerator;
        FiscalDocumentLineParmData_BR       fiscalDocumentLineParmData;

        InternationalTradeModality_BR       internationalTradeModality = BrazilParameters::find().InternationTradeModality;

        di_totalAmount          = 0;
        di_markupSumOthers      = 0;
        listOfLinesEnumerator   = _fiscalDocumentParmData.parmLines().getEnumerator();

        while (listOfLinesEnumerator.moveNext())
        {
            fiscalDocumentLineParmData = listOfLinesEnumerator.current();

            this.adjustFiscalDocumentLineForImport(fiscalDocumentLineParmData, internationalTradeModality);
        }

        if (internationalTradeModality == InternationalTradeModality_BR::CIF)
        {
            _fiscalDocumentParmData.parmTotalMarkupFreightAmount(0);
            _fiscalDocumentParmData.parmTotalMarkupInsuranceAmount(0);
        }

        _fiscalDocumentParmData.parmTotalMarkupOtherAmount(di_markupSumOthers);
        _fiscalDocumentParmData.parmTotalAmount(di_totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFiscalDocumentLineForImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fiscal document line taxes adjustments for import process
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Fiscal document line information
    /// </param>
    /// <param name="_internationalTradeModality">
    /// Defines baseline method to calculate line amount
    /// </param>
    protected void adjustFiscalDocumentLineForImport(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, InternationalTradeModality_BR _internationalTradeModality)
    {
        FiscalDocumentMiscChargeParmData_BR othersMarkupParmData;

        othersMarkupParmData    = this.getOthersMarkupParmData(_fiscalDocumentLineParmData.parmListOfMiscCharges());

        if (_internationalTradeModality == InternationalTradeModality_BR::CIF)
        {
            this.adjustFiscalDocumentForCIF(_fiscalDocumentLineParmData, othersMarkupParmData);
        }
        else if (_internationalTradeModality == InternationalTradeModality_BR::FOB)
        {
            this.adjustFiscalDocumentForFOB(_fiscalDocumentLineParmData, othersMarkupParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        boolean ret;
        
        if (vendInvoiceJour.PurchaseType == PurchaseType::ReturnItem)
        {
            FiscalReferenceParm_BR            fiscalReferenceParm;

            select firstOnly RecId from fiscalReferenceParm
                where fiscalReferenceParm.SourceRecId == vendInvoiceInfoTable.RecId
                    && fiscalReferenceParm.SourceTableId == vendInvoiceInfoTable.TableId;
            
            ret = fiscalReferenceParm.RecId != 0;
        }
        else
        {
            VendInvoiceInfoLine               vendInvoiceInfoLine;
            FDTaxTransPresumedUncommitted_BR  fdTaxTransPresumedUncommitted;

            select firstOnly RecId from fdTaxTransPresumedUncommitted
                exists join vendInvoiceInfoLine
                    where vendInvoiceInfoLine.RecId == fdTaxTransPresumedUncommitted.SourceRecId64
                        && vendInvoiceInfoLine.TableId == fdTaxTransPresumedUncommitted.SourceTableId
                        && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;

            ret = fdTaxTransPresumedUncommitted.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR ret;

        ret = super();

        if (ret.parmImportDeclaration())
        {
            this.adjustFiscalDocumentForImport(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fiscalEstablishment()
    {
        VendInvoiceTrans vendInvoicetrans;

        select firstOnly vendInvoicetrans
            where vendInvoicetrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                && vendInvoicetrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                && vendInvoicetrans.PurchID == vendInvoiceJour.PurchId;

        return InventSite::find(vendInvoicetrans.inventDim().InventSiteId).fiscalEstablishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return vendInvoiceInfoTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal reference exchange rate value
    /// </summary>
    /// <returns>
    /// The exchange rate vaue
    /// </returns>
    protected ExchRate fiscalReferenceSourceExchRate()
    {
        return vendInvoiceInfoTable.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscal reference secundary exchange rate value
    /// </summary>
    /// <returns>
    /// The secundary exchange rate value
    /// </returns>
    protected ExchRate fiscalReferenceSourceExchRateSecondary()
    {
        return vendInvoiceInfoTable.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected recId fiscalReferenceSourceRecId()
    {
        return vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected tableId fiscalReferenceSourceTableId()
    {
        return vendInvoiceInfoTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document number.
    /// </summary>
    /// <returns>
    /// The fiscal document number.
    /// </returns>
    protected Num getFiscalDocumentNumber()
    {
        return vendInvoiceInfoTable.Num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOthersMarkupParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new instance of <c>FiscalDocumentMiscChargeParmData_BR</c>
    /// </summary>
    /// <param name="_lineMiscChargesParmData">
    /// List of miscellaneous charge line information objects
    /// </param>
    /// <returns>
    /// An instance of <c>FiscalDocumentMiscChargeParmData_BR</c>
    /// </returns>
    protected FiscalDocumentMiscChargeParmData_BR getOthersMarkupParmData(List _lineMiscChargesParmData)
    {
        FiscalDocumentMiscChargeParmData_BR miscCharge;

        miscCharge  = new FiscalDocumentMiscChargeParmData_BR();
        miscCharge.parmType(MarkupClassification_BR::Others);

        _lineMiscChargesParmData.addEnd(miscCharge);

        return miscCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return vendTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        List                                    installments = new List(Types::Class);
        VendPaymSched                           vendPaymSched;
        VendPaymSchedLine                       vendPaymSchedLine;
        FiscalDocumentCustVendTransParmData_BR  custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        FiscalDocumentInstallmentParmData_BR    installmentParmData;
        PrimaryMethod_BR                        primaryMethod;
        int i;

        if (vendInvoiceInfoTable.PaymMode)
        {
            primaryMethod = VendPaymModeTable::find(vendInvoiceInfoTable.PaymMode).PrimaryMethod_BR;
        }

        if (!primaryMethod)
        {
            primaryMethod = BrazilParameters::find().PurchPrimaryMethod_BR;
        }

        custVendTransParmData.parmAmount(vendTrans.AmountMST);
        custVendTransParmData.parmDueDate(vendTrans.DueDate);
        custVendTransParmData.parmDocumentType(primaryMethod);

        while select DueDate, DueAmount
            from vendPaymSchedLine
            join recId from vendPaymSched
            where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
                && vendPaymSched.ExtRecId == vendInvoiceJour.RecId
                && vendPaymSched.ExtTableId == vendInvoiceJour.TableId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            i++;
            installmentParmData.parmInstallmentNumber(i);
            installmentParmData.parmDueDate(vendPaymSchedLine.DueDate);
            installmentParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(vendPaymSchedLine.DueAmount, vendInvoiceJour.CurrencyCode, vendInvoiceJour.ExchRate));

            custVendTransParmData.addInstallment(installmentParmData);
        }

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR           fiscalDocument          = new FiscalDocumentParmData_BR();
        VendInvoiceInfoTable_W              vendInvoiceInfoTable_W  = vendInvoiceInfoTable.vendInvoiceInfoTable_W();

        fiscalDocument.parmFiscalEstablishmentID                (this.fiscalEstablishment().FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentName              (this.fiscalEstablishment().Name);
        fiscalDocument.parmFiscalEstablishmentPostalAddress     (this.fiscalEstablishment().postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF           (this.fiscalEstablishment().CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE                (this.fiscalEstablishment().IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum            (this.fiscalEstablishment().CCMNum_BR);
        fiscalDocument.parmFiscalEstablishmentPhone             (this.fiscalEstablishment().phone());

        fiscalDocument.parmThirdPartyName                   (vendInvoiceJour.vendTable_InvoiceAccount().name());
        fiscalDocument.parmThirdPartyCNPJCPF                (vendInvoiceJour.vendTable_InvoiceAccount().CNPJCPFNum_BR);
        fiscalDocument.parmThirdPartyIE                     (vendInvoiceJour.vendTable_InvoiceAccount().IENum_BR);
        fiscalDocument.parmThirdPartyCCMNum                 (vendInvoiceJour.vendTable_InvoiceAccount().CCMNum_BR);
        fiscalDocument.parmThirdPartyPostalAddress          (DirParty::primaryPostalAddress(vendInvoiceJour.vendTable_InvoiceAccount().Party).RecId);
        fiscalDocument.parmThirdPartyPhone                  (vendInvoiceJour.vendTable_InvoiceAccount().phone());
        fiscalDocument.parmThirdPartyFax                    (vendInvoiceJour.vendTable_InvoiceAccount().teleFax());
        fiscalDocument.parmThirdPartyEmail                  (vendInvoiceJour.vendTable_InvoiceAccount().email());
        fiscalDocument.parmThirdPartyIcmsContributor        (vendInvoiceJour.vendTable_InvoiceAccount().ICMSContributor_BR);
        fiscalDocument.parmThirdPartyForeignerId            (vendInvoiceJour.vendTable_InvoiceAccount().ForeignerId_BR);

        if (vendInvoiceInfoTable.hasToIssueFiscalDocument_BR())
        {
            if (vendInvoiceInfoTable.vendTable_InvoiceAccount().NonTaxable_BR)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00033, funcName());
            }
            if (vendInvoiceJour.PurchaseType == PurchaseType::ReturnItem || vendInvoiceJour.InvoiceAmount < 0)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00093, funcName());
            }

            fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::OwnEstablishment);
            fiscalDocument.parmFiscalDocumentType(fiscalDocumentType);
            fiscalDocument.parmModel(fiscalDocumentType.FiscalDocumentModel);
            fiscalDocument.parmFiscalDocumentSeries(FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));
            fiscalDocument.parmSpecie(fiscalDocumentType.FiscalDocumentSpecie);
            fiscalDocument.parmFiscalDocumentNumber(this.getInvoiceIdWithoutSeriesPrefix(this.getFiscalDocumentNumber(), fiscalDocument.parmFiscalDocumentSeries()));
        }
        else
        {
            fiscalDocument.parmFiscalDocumentIssuer(FiscalDocumentIssuer_BR::ThirdParty);
            fiscalDocument.parmModel(vendInvoiceInfoTable_W.FiscalDocumentModel_BR);
            fiscalDocument.parmFiscalDocumentSeries(vendInvoiceInfoTable_W.FiscalDocumentSeries_BR);
            fiscalDocument.parmSpecie(vendInvoiceInfoTable_W.FiscalDocumentSpecie_BR);
            fiscalDocument.parmFiscalDocumentNumber(this.getFiscalDocumentNumber());
            fiscalDocument.parmFiscalDocumentAccessKey(vendInvoiceInfoTable_W.AccessKey_BR);
        }

        fiscalDocument.parmAccountingDate                   (vendInvoiceJour.InvoiceDate);
        fiscalDocument.parmFiscalDocumentAccountNum         (vendInvoiceJour.InvoiceAccount);
        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Vendor);
        fiscalDocument.parmCFPSId                           (vendInvoiceInfoTable_W.CFPSId_BR);
        fiscalDocument.parmFinalUser                        (vendInvoiceJour.VendFinalUser_BR);
        if (fiscalDocument.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00083, funcName());
        }
        fiscalDocument.parmPresenceType                     (vendInvoiceInfoTable_W.PresenceType_BR);
        fiscalDocument.parmPaymentAmount                    (vendInvoiceInfoTable_W.ImportDeclaration_BR ? vendInvoiceJour.getVendTransAmountMST() : vendInvoiceJour.InvoiceAmountMST);
        fiscalDocument.parmPaymentMethod                    (FiscalDocumentParmDataCreator_BR::nfePaymentMethod_BR(vendInvoiceJour, this.getFiscalDocumentPurpose()));
    
        fiscalDocument.parmDeliveryCNPJCPF                  (vendInvoiceInfoTable.deliveryCNPJCPFNUM_BR());
        fiscalDocument.parmDeliveryIE                       (vendInvoiceInfoTable.deliveryIENum_BR());
        fiscalDocument.parmDeliveryLogisticsPostalAddress   (LogisticsPostalAddress::findRecId(vendInvoiceJour.DeliveryPostalAddress).RecId);

        fiscalDocument.parmDeliveryMode                     (vendInvoiceJour.DlvMode);
        fiscalDocument.parmDeliveryTerm                     (vendInvoiceJour.DlvTerm);

        if (vendInvoiceJour.PurchaseType != PurchaseType::ReturnItem
            && vendInvoiceJour.InvoiceAmount >= 0)
        {
            fiscalDocument.parmDirection                    (FiscalDocDirection_BR::Incoming);
        }
        else
        {
            fiscalDocument.parmDirection                    (FiscalDocDirection_BR::Outgoing);
        }

        fiscalDocument.parmFiscalDocumentDate               (vendInvoiceJour.DocumentDate);

        fiscalDocument.parmInventoryVoucher                 (vendInvoiceJour.CostLedgerVoucher);
        fiscalDocument.parmRefRecId                         (vendInvoiceJour.RecId);
        fiscalDocument.parmRefTableId                       (vendInvoiceJour.TableId);

        fiscalDocument.parmSalesCarrier                     (salesCarrier.RecId);
        fiscalDocument.parmSalesCarrierPostalAddress        (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);

        var freightTerms = FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(vendInvoiceInfoTable_W.DlvFreightType_BR);
        fiscalDocument.parmFreightChargeTerms               (freightTerms);

        fiscalDocument.parmVehicleLicensePlateNumber        (vendInvoiceInfoTable_W.DlvNoOfCarrier_BR);
        fiscalDocument.parmVehicleLicensePlateState         (vendInvoiceInfoTable_W.DlvStateRegistered_BR);
        fiscalDocument.parmPackingBrand                     (vendInvoiceInfoTable_W.DlvTransportBrand_BR);

        fiscalDocument.parmVoucher                          (vendInvoiceJour.LedgerVoucher);

        fiscalDocument.parmTotalAmount                      (vendInvoiceJour.InvoiceAmountMST);

        fiscalDocument.parmTotalMarkupFreightAmount         (purchtotals.markupFreightAmountMST_BR());
        fiscalDocument.parmTotalMarkupInsuranceAmount       (purchtotals.markupInsuranceAmountMST_BR());
        fiscalDocument.parmTotalMarkupOtherAmount           (purchtotals.markupOthersAmountMST_BR());
        fiscalDocument.parmTotalMarkupSiscomexAmount        (purchTotals.markupSiscomexAmountMST_BR());

        fiscalDocument.parmImportDeclaration                (vendInvoiceInfoTable_W.ImportDeclaration_BR);

        fiscalDocument.parmTypeOfCTe                        (vendInvoiceInfoTable_W.TypeOfCTe_BR);

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        VendInvoiceTrans                    vendInvoiceTrans;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        InventTable                         inventTable;
        FiscalDocumentLineParmData_BR       fiscalDocumentLineParmData;
        LogisticsPostalAddress              logisticsPostalAddress;
        List                                ret = new List(Types::Class);

        AmountMST                           journalDiscAmountMST;
        AmountMST                           lineGrossAmountMST;
        AmountMST                           endDiscMST;
        AmountMST                           endDiscAlreadyAllocatedMST;
        AmountCur                           purchBalance;

        boolean                             ok;

        purchBalance    = vendInvoiceJour.SalesBalance;
        endDiscMST      = vendInvoiceJour.EndDiscMST;

        boolean isAnyICMSAsset;
        boolean isAnyService;

        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading = this.getTaxBenefitCodeSetupHeading();

        for(ok = vendInvoiceTransList.first(vendInvoiceTrans);
            ok;
            ok = vendInvoiceTransList.next(vendInvoiceTrans))
        {
            vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine);
            inventTable         = vendInvoiceTrans.inventTable();

            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            if (InventTable.ItemType == ItemType::Item)
            {
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Product);
                fiscalDocumentLineParmData.parmFiscalClassification (inventTable.TaxFiscalClassification_BR);
            }
            else
            {
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Service);
                fiscalDocumentLineParmData.parmServiceCode          (vendInvoiceinfoLine.vendInvoiceInfoLine_W().TaxServiceCode_BR);
                isAnyService = true;
            }
            fiscalDocumentLineParmData.parmItemId                   (vendInvoiceTrans.ItemId);
            fiscalDocumentLineParmData.parmDescription              (vendInvoiceTrans.itemName());
            fiscalDocumentLineParmData.parmCFOP                     (CFOPTable_BR::find(vendInvoiceInfoLine.vendInvoiceInfoLine_W().CFOPTable_BR).CFOPId);
            fiscalDocumentLineParmData.parmQuantity                 (vendInvoiceTrans.Qty);
            fiscalDocumentLineParmData.parmUnit                     (vendInvoiceTrans.PurchUnit);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);

            fiscalDocumentLineParmData.parmBenefitCode              (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        vendInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Vendor,
                                                                        vendInvoiceJour.InvoiceAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Purchase));
            fiscalDocumentLineParmData.parmAdjustmentCode53         (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        vendInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Vendor,
                                                                        vendInvoiceJour.InvoiceAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Purchase));
            fiscalDocumentLineParmData.parmObservationCode          (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        vendInvoiceTrans.ItemId,
                                                                        CustVendType_BR::Vendor,
                                                                        vendInvoiceJour.InvoiceAccount,
                                                                        fiscalDocumentLineParmData.parmCFOP(),
                                                                        SalesPurchTrntype_BR::Purchase));

            if (vendInvoiceJour.PurchaseType != PurchaseType::ReturnItem
                && ICMSSTAdditionalInfoFeature::isEnabled()
                && vendInvoiceInfoLine.hasICMSSTTax_BR())
            {
                VendInvoiceInfoLine_BR vendInvoiceInfoLine_BR = vendInvoiceInfoLine.vendInvoiceInfoLine_BR();
                fiscalDocumentLineParmData.parmRespWithholdingICMSST(vendInvoiceInfoLine_BR.RespWithholdingICMSST);
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentMode(vendInvoiceInfoLine_BR.ICMSSTCollectionPaymentMode);
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentNumber(vendInvoiceInfoLine_BR.ICMSSTCollectionPaymentNumber);
                fiscalDocumentLineParmData.parmHasICMSSTAdditionalInfo(NoYes::Yes);
                fiscalDocumentLineParmData.parmNfeVbcstretVicmsstretTagsReported(vendInvoiceInfoLine_BR.NfeVbcstretVicmsstretTagsReported);
            }

            lineGrossAmountMST = vendInvoiceTrans.grossAmountMST();

            CurrencyCode currencyCode = Ledger::accountingCurrency();

            journalDiscAmountMST = purchBalance > 0 ? CurrencyExchange::round(endDiscMST * (vendInvoiceTrans.LineAmount / purchBalance), currencyCode) : 0.00;
            endDiscAlreadyAllocatedMST += journalDiscAmountMST;

            fiscalDocumentLineParmData.parmLineAmount               (lineGrossAmountMST);
            fiscalDocumentLineParmData.parmLineDiscount             (lineGrossAmountMST - vendInvoiceTrans.LineAmountMST + journalDiscAmountMST);

            if (fiscalDocumentLineParmData.parmQuantity())
            {
                fiscalDocumentLineParmData.parmUnitPrice(fiscalDocumentLineParmData.parmLineAmount() / fiscalDocumentLineParmData.parmQuantity());
            }

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (FiscalDocParmDataCreatorVendInvoice_BR::getFinancialDimension(vendInvoiceTrans));
            fiscalDocumentLineParmData.parmOrigin                   (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode            (inventTable.ExceptionCode_BR);
            fiscalDocumentLineParmData.parmInventTransId            (vendInvoiceTrans.InventTransId);

            fiscalDocumentLineParmData.parmDIAddition               (vendInvoiceInfoLine.vendInvoiceInfoLine_W().DIAddition_BR);
            fiscalDocumentLineParmData.parmAssetId                  (VendInvoiceInfoLine_Asset::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLine.RecId).AssetId);

            if (fiscalDocumentLineParmData.parmAssetId())
            {
                AssetTable asset = AssetTable::find(fiscalDocumentLineParmData.parmAssetId());
                isAnyICMSAsset = isAnyICMSAsset ? isAnyICMSAsset : (asset.ICMSCreditInstallments_BR || asset.TaxICMSOutgoing_BR);
            }

            fiscalDocumentLineParmData.parmFreightNature            (vendInvoiceInfoLine.vendInvoiceInfoLine_W().FreightNature_BR);

            this.setLineParmDataRefRecord(fiscalDocumentLineParmData, vendInvoiceTrans);

            this.initTagsReplacer(fiscalDocumentLineParmData.parmTextTagReplacer());
            fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addTexts(vendInvoiceInfoLine));
            ret.addEnd(fiscalDocumentLineParmData);
        }

        // header discount rounding differences are added to the last line
        if (fiscalDocumentLineParmData)
        {
            fiscalDocumentLineParmData.parmLineDiscount(fiscalDocumentLineParmData.parmLineDiscount() + endDiscMST - endDiscAlreadyAllocatedMST);
        }

        if (isAnyICMSAsset)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00082, funcName());
        }
        if (isAnyService)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00081, funcName());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBenefitCodeSetupHeading</Name>
				<Source><![CDATA[
    private TaxBenefitCodeSetupHeading_BR getTaxBenefitCodeSetupHeading()
    {
        LogisticsPostalAddress logisticsPostalAddress;

        if (FiscalDocUseFiscalEstablishmentAddressForAdjustmentCodeFlight::instance().isEnabled()
            || vendInvoiceInfoTable.hasToIssueFiscalDocument_BR())
        {
            logisticsPostalAddress = this.fiscalEstablishment().postalAddress();
        }
        else
        {
            logisticsPostalAddress = DirParty::primaryPostalAddress(vendInvoiceJour.vendTable_InvoiceAccount().Party);
        }

        return TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(
            logisticsPostalAddress.CountryRegionId,
            logisticsPostalAddress.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        int installmentNum;

        List list = new List(Types::Class);

        FiscalDocumentInstallmentParmData_BR installment;

        VendPaymSched       vendPaymSched;
        VendPaymSchedLine   vendPaymSchedLine;

        select firstonly recId from vendPaymSched
            where vendPaymSched.ExtTableId ==  this.vendPaymSchedRefTableId()
                && vendPaymSched.ExtRecId == this.vendPaymSchedRefRecId();

        if (vendPaymSched)
        {
            while select DueDate, DueAmount from vendPaymSchedLine
                    where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId
            {
                installmentNum++;

                installment = new FiscalDocumentInstallmentParmData_BR();

                installment.parmDueDate(vendPaymSchedLine.DueDate);
                installment.parmAmount(CurrencyExchangeHelper::amountCur2MST(vendPaymSchedLine.DueAmount, vendInvoiceJour.CurrencyCode, vendInvoiceJour.ExchRate));
                installment.parmInstallmentNumber(installmentNum);

                list.addEnd(installment);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List                                    shipmentStatList = new List(Types::Class);
        FiscalDocumentShipmentStatParmData_BR   shipmentStatParmData;
        PurchShippingStat_BR                    shippingStat;

        while select sum(GrossWeight),
                     sum(NetWeight),
                     sum(VolumeQuantity) from shippingStat
            group by shippingStat.VolumeType
            where shippingStat.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId
        {
            shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();
            shipmentStatParmData.parmGrossWeight(shippingStat.GrossWeight);
            shipmentStatParmData.parmNetWeight(shippingStat.NetWeight);
            shipmentStatParmData.parmVolumeQuantity(shippingStat.VolumeQuantity);
            shipmentStatParmData.parmVolumeType(shippingStat.VolumeType);

            shipmentStatList.addEnd(shipmentStatParmData);
        }

        if (!shipmentStatList.empty())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00024, funcName());
        }

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagsReplacer</Name>
				<Source><![CDATA[
    private void initTagsReplacer(FiscalDocumentTextTagReplacer_BR _replacer)
    {
        VendTable                           vendTable = vendInvoiceJour.vendTable_InvoiceAccount();
        PurchImportDeclaration_BR           importDeclaration;
        VendInvoiceInfoTable_W              vendInvoiceInfoTable_W = vendInvoiceInfoTable.vendInvoiceInfoTable_W();

        _replacer.parmVendor_Address(DirParty::primaryPostalAddress(vendInvoiceJour.vendTable_InvoiceAccount().Party).Address);
        _replacer.parmVendor_CnpjCpf(vendTable.CNPJCPFNum_BR);
        _replacer.parmVendor_IE(vendTable.IENum_BR);
        _replacer.parmVendor_Name(vendTable.name());

        if (vendInvoiceInfoTable_W.ImportDeclaration_BR)
        {
            importDeclaration       = PurchImportDeclaration_BR::find(vendInvoiceInfoTable_W.ImportDeclaration_BR);

            _replacer.parmDI_Date(importDeclaration.DIDate);
            _replacer.parmDI_Number(importDeclaration.DINumber);

            if (summedTaxes.exists(TaxType_BR::PIS))
            {
                _replacer.parmPIS(summedTaxes.lookup(TaxType_BR::PIS));
            }

            if (summedTaxes.exists(TaxType_BR::COFINS))
            {
                _replacer.parmCOFINS(summedTaxes.lookup(TaxType_BR::COFINS));
            }

            if (summedTaxes.exists(TaxType_BR::ImportTax))
            {
                _replacer.parmImportTax(summedTaxes.lookup(TaxType_BR::ImportTax));
            }

            _replacer.parmFreight(purchTotals.markupFreightAmountMST_BR());
            _replacer.parmInsurance(purchTotals.markupInsuranceAmountMST_BR());
            _replacer.parmSiscomex(purchTotals.markupSiscomexAmountMST_BR());

            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), vendInvoiceJour.CurrencyCode);
            _replacer.parmExchRate(exchangeRateHelper.displayStoredExchangeRate(vendInvoiceJour.ExchRate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTaxTrans</Name>
				<Source><![CDATA[
    protected void initTaxTransParmDataFromTaxTrans(FiscalDocumentParmData_BR          _fiscalDocumentParmData,
                                                    FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData,
                                                    TaxTrans                           _taxTrans,
                                                    TaxTrans_BR                        _taxTrans_BR)
    {
        TaxAmount   taxAmount;

        super(_fiscalDocumentParmData, _fiscalDocumentTaxTransParmData, _taxTrans, _taxTrans_BR);

        if (_fiscalDocumentParmData.parmImportDeclaration())
        {
            if (summedTaxes.exists(_fiscalDocumentTaxTransParmData.parmType()))
            {
                taxAmount = summedTaxes.lookup(_fiscalDocumentTaxTransParmData.parmType());
                summedTaxes.remove(_fiscalDocumentTaxTransParmData.parmType());
            }

            taxAmount += _fiscalDocumentTaxTransParmData.parmTaxAmountOther() + _fiscalDocumentTaxTransParmData.parmTaxAmount();

            summedTaxes.insert(_fiscalDocumentTaxTransParmData.parmType(), taxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        summedTaxes = new Map(Types::Enum, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        this.initTagsReplacer(_fiscalDocumentParmData.parmTextTagReplacer());
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addTexts(vendInvoiceInfoTable));
        super(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineParmDataRefRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference to the original buffer in the <c>FiscalDocumentLineParmData_BR</c> parm data object.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// <c>FiscalDocumentLineParmData_BR</c> where the references will be set.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// <c>VendInvoiceTrans</c> to which the references will point to.
    /// </param>
    protected void setLineParmDataRefRecord(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, VendInvoiceTrans _vendInvoiceTrans)
    {
        _fiscalDocumentLineParmData.parmRefTableId      (_vendInvoiceTrans.TableId);
        _fiscalDocumentLineParmData.parmRefRecId        (_vendInvoiceTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>PurchParmUpdate</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_purchParmUpdate">
    ///     The <c>PurchParmUpdate</c> table buffer to be set.
    /// </param>
    public void setPurchParmUpdate(PurchParmUpdate _purchParmUpdate)
    {
        purchParmUpdate = _purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>PurchTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_purchTable">
    ///     The <c>PurchTable</c> table buffer to be set.
    /// </param>
    public void setPurchTable(PurchTable _purchTable)
    {
        PurchTable_BR   purchTable_BR = _purchTable.purchTable_BR();

        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>PurchTotals</c> class that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_purchTotals">
    ///     The <c>PurchTotals</c> instance to be set.
    /// </param>
    public void setPurchTotals(PurchTotals _purchTotals)
    {
        purchTotals = _purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>VendInvoiceInfoTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///     The <c>VendInvoiceInfoTable</c> table buffer to be set.
    /// </param>
    public void setVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        vendInvoiceInfoTable    = _vendInvoiceInfoTable;

        this.initFiscalDocTypeFromVendInvInfoTable(_vendInvoiceInfoTable);

        this.initSalesCarrierFromVendInvoiceInfoTable(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>VendInvoiceJour</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    ///     The <c>VendInvoiceJour</c> table buffer to be set.
    /// </param>
    public void setVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        vendInvoiceJour = _vendInvoiceJour;

        vendTrans = vendInvoiceJour.vendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendInvoiceTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the list of <c>VendInvoiceTrans</c> table buffers that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_vendInvoiceTransList">
    ///     The <c>List</c> of <c>VendInvoiceJour</c> table buffers to be set.
    /// </param>
    public void setVendInvoiceTransList(RecordSortedList _vendInvoiceTransList)
    {
        vendInvoiceTransList = _vendInvoiceTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaymSchedRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID that <c>VendPaymSched</c> buffer points to.
    /// </summary>
    /// <returns>
    /// The record ID that <c>VendPaymSched</c> buffer points to.
    /// </returns>
    protected RecId vendPaymSchedRefRecId()
    {
        return vendInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaymSchedRefTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID that <c>VendPaymSched</c> buffer points to.
    /// </summary>
    /// <returns>
    /// The table ID that <c>VendPaymSched</c> buffer points to.
    /// </returns>
    protected TableId vendPaymSchedRefTableId()
    {
        return vendInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    protected FDPresumedSourceDocumentType_BR getFDPresumedSourceDocumentType()
    {
        return vendInvoiceJour.PurchaseType == PurchaseType::ReturnItem ? FDPresumedSourceDocumentType_BR::PurchOrderReturn : FDPresumedSourceDocumentType_BR::VendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the purpose of the fiscal document generated from the vendor invoice
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document being posted
    /// </returns>
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR            fiscalDocumentPurpose;
        VendInvoiceTrans                    vendInvoiceTrans;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;

        vendInvoiceTransList.first(vendInvoiceTrans);
        vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine);

        if (CFOPTable_BR::find(vendInvoiceInfoLine.vendInvoiceInfoLine_W().CFOPTable_BR).Purpose == CFOPPurpose_BR::ReturnOrder)
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Return;
        }
        else
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Regular;
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalDocTypeFromVendInvInfoTable</Name>
				<Source><![CDATA[
    private void initFiscalDocTypeFromVendInvInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        fiscalDocumentType = FiscalDocumentType_BR::findRecID(vendInvoiceInfoTable.vendInvoiceInfoTable_W().FiscalDocumentType_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesCarrierFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private void initSalesCarrierFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        salesCarrier = SalesCarrier::find(vendInvoiceInfoTable.vendInvoiceInfoTable_W().BOLCarrierName_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given vendInvoiceTrans.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The vendInvoiceTrans record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static LedgerDimensionAccount getFinancialDimension(VendInvoiceTrans _vendInvoiceTrans)
    {
        return FiscalDocParmDataCreatorVendInvoice_BR::getLedgerDimension(_vendInvoiceTrans, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimensionFromVendInvoiceTransAndPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given vendInvoiceTrans and purchLine.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The vendInvoiceTrans record.
    /// </param>
    /// <param name="_purchLine">
    /// The purchLine record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static LedgerDimensionAccount getFinancialDimensionFromVendInvoiceTransAndPurchLine(VendInvoiceTrans _vendInvoiceTrans, PurchLine _purchLine)
    {
        return FiscalDocParmDataCreatorVendInvoice_BR::getLedgerDimension(_vendInvoiceTrans, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    private static LedgerDimensionAccount getLedgerDimension(VendInvoiceTrans _vendInvoiceTrans, PurchLine _purchLine)
    {
        RecId ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_vendInvoiceTrans.LedgerDimension);

        if (!ledgerDimensionMerged)
        {
            if (!_purchLine)
            {
                _purchLine = _vendInvoiceTrans.purchLine();
            }

            if (_purchLine)
            {
                RecId defaultDimension;

                if (_purchLine.isStocked())
                {
                    defaultDimension = _purchLine.ledgerDimensionItem(InventAccountType::PurchReceipt);
                }
                else if ((_purchLine.AssetId) && (AssetParameters::canUserCreateAssetAcquisition()))
                {
                    AssetBook assetBook = AssetBook::find(_purchLine.AssetId, _purchLine.AssetBookId);
                    AssetTransType assetTransType = AssetPost::assetTransTypePurch2AssetTransType(_purchLine.AssetTransTypePurch);

                    defaultDimension = AssetLedgerAccounts::assetLedgerDimension(_purchLine.AssetId, _purchLine.AssetBookId, assetTransType, assetBook.PostingProfile);
                }
                else
                {
                    defaultDimension = _purchLine.ledgerDimensionItem(InventAccountType::PurchExpense);
                }

                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultDimension);
            }
            else
            {
                AccountingDistribution accountingDistribution;
                SourceDocumentLine sourceDocumentLine;

                select firstOnly LedgerDimension from accountingDistribution
                    exists join sourceDocumentLine
                        where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                            && sourceDocumentLine.RecId == _vendInvoiceTrans.SourceDocumentLine;

                ledgerDimensionMerged = accountingDistribution.LedgerDimension;
            }
        }

        return ledgerDimensionMerged;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>