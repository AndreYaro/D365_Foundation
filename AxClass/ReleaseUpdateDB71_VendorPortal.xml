<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB71_VendorPortal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to upgrade the old vendor portal model to the new one.
/// </summary>
public class ReleaseUpdateDB71_VendorPortal extends ReleaseUpdateDB
{
    private TransDate documentDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the version of the upgrade script: R1Update3
    /// </summary>
    /// <returns>Script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::R1Update3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the module name of an upgrade class.
    /// </summary>
    /// <returns>
    ///    The module name.
    /// </returns>
    public ReleaseUpdateModule moduleName()
    {
        return "@SCM:VendorPortal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncVendorPortal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create records in the new tables based on <c>PurchConfirmationRequestJour</c> and <c>purchaseOrderResponse</c>.
    /// </summary>
    [
        UpgradeScriptDescriptionAttribute(classStr(ReleaseUpdateDB71_VendorPortal)),
        UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
        UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
        UpgradeScriptTableAttribute(tableStr(PurchaseOrderResponseHeader), true, true, true, false),
        UpgradeScriptTableAttribute(tableStr(PurchaseOrderResponseHeaderHistory), true, true, true, false),
        UpgradeScriptTableAttribute(tableStr(PurchaseOrderResponseLine), true, true, true, false),
        UpgradeScriptTableAttribute(tableStr(PurchaseOrderResponseLineHistory), true, true, true, false),
        UpgradeScriptTableAttribute(tableStr(PurchaseOrderResponseVersion), true, true, true, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncVendorPortal()
    {
        PurchConfirmationRequestJour purchConfirmationRequestJour;
        PurchTableVersion purchTableVersion;
        PurchaseOrderResponseHeader responseHeader;

        while select * from purchConfirmationRequestJour
            where purchConfirmationRequestJour.VendVendorCollaborationType != VendVendorCollaborationType::Disabled
            join purchTableVersion
                order by VersionDateTime asc
                where purchTableVersion.RecId == purchConfirmationRequestJour.PurchTableVersion
        {
            responseHeader = this.createResponse(purchTableVersion, purchConfirmationRequestJour.purchTable(), purchConfirmationRequestJour.DocumentDate);
            this.checkIfVendorRespondedAndUpdateResponseVersion(purchTableVersion, responseHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponse</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseHeader createResponse(PurchTableVersion _purchTableVersion, PurchTable _purchTable, TransDate _documentDate)
    {
        ttsbegin;
        PurchaseOrderResponseHeader responseHeader = this.createPurchaseOrderResponseHeader(_purchTableVersion, _purchTable, _documentDate);
        this.createPurchaseOrderResponseLines(responseHeader, _purchTableVersion, _purchTable);
        this.updateEarliestDeliveryDate(responseHeader.RecId);
        ttscommit;

        return responseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfVendorRespondedAndUpdateResponseVersion</Name>
				<Source><![CDATA[
    private void checkIfVendorRespondedAndUpdateResponseVersion(PurchTableVersion _purchTableVersion, PurchaseOrderResponseHeader _currentResponseHeader)
    {
        PurchaseOrderResponse purchaseOrderResponse;

        select firstonly purchaseOrderResponse
            where purchaseOrderResponse.PurchTableVersion == _purchTableVersion.RecId;

        if (purchaseOrderResponse)
        {
            PurchaseOrderResponseVersion purchaseOrderResponseVersion = this.updateResponseVersion(purchaseOrderResponse, _currentResponseHeader);
            if (purchaseOrderResponseVersion.ResponseState == PurchaseOrderResponseState::Rejected)
            {
                _currentResponseHeader.rejectExistingLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResponseVersion</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseVersion updateResponseVersion(PurchaseOrderResponse _purchaseOrderResponse, PurchaseOrderResponseHeader _currentResponseHeader)
    {
        ttsbegin;

        PurchaseOrderResponseVersion purchaseOrderResponseVersion = _currentResponseHeader.findLatestResponseVersion(true);
        if (purchaseOrderResponseVersion)
        {
            purchaseOrderResponseVersion.PurchTableVersion = _purchaseOrderResponse.PurchTableVersion;
            purchaseOrderResponseVersion.RespondingPerson = _purchaseOrderResponse.RespondingPerson;
            purchaseOrderResponseVersion.ResponseDateTime = _purchaseOrderResponse.ResponseDateTime;
            purchaseOrderResponseVersion.ResponseNote = _purchaseOrderResponse.ResponseNote;
            if (_purchaseOrderResponse.ResponseState == PurchaseOrderResponseState::NoResponse)
            {
                purchaseOrderResponseVersion.ResponseState = PurchaseOrderResponseState::Pending;
            }
            else
            {
                purchaseOrderResponseVersion.ResponseState = _purchaseOrderResponse.ResponseState;
            }
            purchaseOrderResponseVersion.update();
        }

        ttscommit;

        return purchaseOrderResponseVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseHeader</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseHeader createPurchaseOrderResponseHeader(PurchTableVersion _purchTableVersion, PurchTable _purchTable, TransDate _documentDate)
    {
        PurchaseOrderResponseHeader purchaseOrderResponseHeader =
            _purchTable.responseHeader(true);

        if (purchaseOrderResponseHeader)
        {
            purchaseOrderResponseHeader.archiveExistingAndCreateNewVersion(_purchTableVersion.RecId);
            this.assignHeaderValues(purchaseOrderResponseHeader, _purchTableVersion, _purchTable, _documentDate);
            purchaseOrderResponseHeader.update();
        }
        else
        {
            this.assignHeaderValues(purchaseOrderResponseHeader, _purchTableVersion, _purchTable, _documentDate);
            purchaseOrderResponseHeader.doInsert();
            this.createResponseVersion(purchaseOrderResponseHeader.RecId, _purchTableVersion.RecId);
        }

        return purchaseOrderResponseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignHeaderValues</Name>
				<Source><![CDATA[
    private void assignHeaderValues(PurchaseOrderResponseHeader _purchaseOrderResponseHeader, PurchTableVersion _purchTableVersion, PurchTable _purchTable, TransDate _documentDate)
    {
        this.initFromPurchTableVersion(_purchaseOrderResponseHeader, _purchTableVersion, _purchTable);
        _purchaseOrderResponseHeader.DocumentDate = _documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createResponseVersion</Name>
				<Source><![CDATA[
    private void createResponseVersion(PurchaseOrderResponseHeaderRecId _purchaseOrderResponseHeaderRecId, PurchTableVersionRecId _purchTableVersionRecId)
    {
        VersioningDocument versioningPurchaseOrderResponse =
            VersioningPurchaseOrderResponse::newFromResponse(_purchaseOrderResponseHeaderRecId, _purchTableVersionRecId);

        versioningPurchaseOrderResponse.sendToVendor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTableVersion</Name>
				<Source><![CDATA[
    private void initFromPurchTableVersion(PurchaseOrderResponseHeader _purchaseOrderResponseHeader, PurchTableVersion _purchTableVersion, PurchTable _purchTable)
    {
        if (this.isLatestVersion(_purchTableVersion, _purchTable))
        {
            _purchaseOrderResponseHeader.initFromPurchTableLastVersion(_purchTable);
        }
        else
        {
            this.initPurchaseOrderResponseHeaderFromPurchTableHistory(_purchaseOrderResponseHeader, _purchTableVersion, _purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchaseOrderResponseHeaderFromPurchTableHistory</Name>
				<Source><![CDATA[
    private void initPurchaseOrderResponseHeaderFromPurchTableHistory(PurchaseOrderResponseHeader _purchaseOrderResponseHeader, PurchTableVersion _purchTableVersion, PurchTable _purchTable)
    {
        PurchTableHistory purchTableHistory;

        utcdatetime         minValue = DateTimeUtil::minValue();
        utcdatetime         maxValue = DateTimeUtil::maxValue();

        select firstonly validTimeState(minValue, maxValue) purchTableHistory
            where _purchTableVersion.VersionDateTime >= purchTableHistory.ValidFrom
               && _purchTableVersion.VersionDateTime <= purchTableHistory.ValidTo
                && _purchTableVersion.PurchId == purchTableHistory.PurchId;

        this.initFromPurchTableHistory(_purchaseOrderResponseHeader, purchTableHistory, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTableHistory</Name>
				<Source><![CDATA[
    private void initFromPurchTableHistory(PurchaseOrderResponseHeader _purchaseOrderResponseHeader, PurchTableHistory _purchTableHistory, PurchTable _purchTable)
    {
        _purchaseOrderResponseHeader.CurrencyCode = _purchTableHistory.CurrencyCode;
        _purchaseOrderResponseHeader.DeliveryPostalAddress = _purchTableHistory.DeliveryPostalAddress;
        _purchaseOrderResponseHeader.DiscPercent = _purchTableHistory.DiscPercent;
        _purchaseOrderResponseHeader.DlvMode = _purchTableHistory.DlvMode;
        _purchaseOrderResponseHeader.DlvTerm = _purchTableHistory.DlvTerm;
        _purchaseOrderResponseHeader.InvoiceAccount = _purchTableHistory.InvoiceAccount;
        _purchaseOrderResponseHeader.OrderAccount = _purchTableHistory.OrderAccount;
        _purchaseOrderResponseHeader.Payment = _purchTableHistory.Payment;
        _purchaseOrderResponseHeader.PaymMode = _purchTableHistory.PaymMode;
        _purchaseOrderResponseHeader.PurchId = _purchTableHistory.PurchId;
        _purchaseOrderResponseHeader.PurchStatus = _purchTableHistory.PurchStatus;
        _purchaseOrderResponseHeader.VendorRef = _purchTableHistory.VendorRef;
        this.setResponseId(_purchaseOrderResponseHeader, _purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResponseId</Name>
				<Source><![CDATA[
    private void setResponseId(PurchaseOrderResponseHeader _purchaseOrderResponseHeader, PurchTable _purchTable)
    {
        _purchaseOrderResponseHeader.ResponseId = strFmt('%1-R%2', _purchTable.PurchId, this.getResponseNumber(_purchTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseNumber</Name>
				<Source><![CDATA[
    private NumberOfRecords getResponseNumber(PurchTable _purchTable)
    {
        PurchaseOrderResponseHeader responseHeader;

        select count(RecId) from responseHeader
            where responseHeader.PurchId == _purchTable.PurchId;

        return responseHeader.RecId + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseLines</Name>
				<Source><![CDATA[
    private void createPurchaseOrderResponseLines(PurchaseOrderResponseHeader _responseHeader, PurchTableVersion _purchTableVersion, PurchTable _purchTable)
    {
        _responseHeader.deleteExistingLines();

        if (this.isLatestVersion(_purchTableVersion, _purchTable))
        {
            this.createPurchaseOrderResponseLinesFromPurchLine(_responseHeader, _purchTable);
        }
        else
        {
            this.createPurchaseOrderResponseLinesFromPurchLineHistory(_responseHeader, _purchTableVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseLinesFromPurchLine</Name>
				<Source><![CDATA[
    private void createPurchaseOrderResponseLinesFromPurchLine(PurchaseOrderResponseHeader _responseHeader, PurchTable _purchTable)
    {
        RecordInsertList orderResponseLineList = new RecordInsertList(tableNum(PurchaseOrderResponseLine));
        PurchLine purchLine;

        while select purchLine
            where purchLine.PurchId ==  _purchTable.PurchId
               && purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
               && purchLine.IsDeleted == NoYes::No
        {
            PurchaseOrderResponseLine purchaseOrderResponseLine;
            purchaseOrderResponseLine.initFromPurchLineLastVersion(purchLine);
            purchaseOrderResponseLine.PurchaseOrderResponseHeader = _responseHeader.RecId;
            orderResponseLineList.add(purchaseOrderResponseLine);
        }

        orderResponseLineList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseLinesFromPurchLineHistory</Name>
				<Source><![CDATA[
    private void createPurchaseOrderResponseLinesFromPurchLineHistory(PurchaseOrderResponseHeader _responseHeader, PurchTableVersion _purchTableVersion)
    {
        RecordInsertList orderResponseLineList = new RecordInsertList(tableNum(PurchaseOrderResponseLine));
        PurchLineHistory    purchLineHistory;

        utcdatetime minValue = DateTimeUtil::minValue();
        utcdatetime maxValue = DateTimeUtil::maxValue();

        while select validTimeState(minValue, maxValue) purchLineHistory
            where _purchTableVersion.VersionDateTime >= purchLineHistory.ValidFrom
               && _purchTableVersion.VersionDateTime <= purchLineHistory.ValidTo
               && _purchTableVersion.PurchId == purchLineHistory.PurchId
               && purchLineHistory.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
        {
            PurchaseOrderResponseLine purchaseOrderResponseLine;
            this.initFromPurchLineHistory(purchaseOrderResponseLine, purchLineHistory);
            purchaseOrderResponseLine.PurchaseOrderResponseHeader = _responseHeader.RecId;
            orderResponseLineList.add(purchaseOrderResponseLine);
        }
        orderResponseLineList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatestVersion</Name>
				<Source><![CDATA[
    private boolean isLatestVersion(PurchTableVersion _purchTableVersion, PurchTable _purchTable)
    {
        return _purchTableVersion.RecId == PurchTableVersion::findLatest(_purchTable.PurchId, _purchTable.DataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLineHistory</Name>
				<Source><![CDATA[
    private void initFromPurchLineHistory(PurchaseOrderResponseLine _purchaseOrderResponseLine, PurchLineHistory _purchLineHistory)
    {
        _purchaseOrderResponseLine.ConfirmedDlv = _purchLineHistory.ConfirmedDlv;
        _purchaseOrderResponseLine.DeliveryDate = _purchLineHistory.DeliveryDate;
        _purchaseOrderResponseLine.DeliveryPostalAddress = _purchLineHistory.DeliveryPostalAddress;
        _purchaseOrderResponseLine.ExternalItemId = _purchLineHistory.ExternalItemId;
        _purchaseOrderResponseLine.InventDimId = _purchLineHistory.InventDimId;
        _purchaseOrderResponseLine.ItemId = _purchLineHistory.ItemId;
        _purchaseOrderResponseLine.LineAmount = _purchLineHistory.LineAmount;
        _purchaseOrderResponseLine.LineDisc = _purchLineHistory.LineDisc;
        _purchaseOrderResponseLine.LineNumber = _purchLineHistory.LineNumber;
        _purchaseOrderResponseLine.LinePercent = _purchLineHistory.LinePercent;
        _purchaseOrderResponseLine.Name = _purchLineHistory.Name;
        _purchaseOrderResponseLine.PriceUnit = _purchLineHistory.PriceUnit;
        _purchaseOrderResponseLine.ProcurementCategory = _purchLineHistory.ProcurementCategory;
        _purchaseOrderResponseLine.PurchLine = _purchLineHistory.RecId;
        _purchaseOrderResponseLine.PurchPrice = _purchLineHistory.PurchPrice;
        _purchaseOrderResponseLine.PurchQty = _purchLineHistory.PurchQty;
        _purchaseOrderResponseLine.PurchUnit = _purchLineHistory.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEarliestDeliveryDate</Name>
				<Source><![CDATA[
    private void updateEarliestDeliveryDate(PurchaseOrderResponseHeaderRecId _responseHeaderRecId)
    {
        PurchaseOrderResponseLine purchaseOrderResponseLine;

        select firstonly DeliveryDate from purchaseOrderResponseLine
            order by DeliveryDate
            where purchaseOrderResponseLine.PurchaseOrderResponseHeader == _responseHeaderRecId;

        PurchaseOrderResponseHeader purchaseOrderResponseHeader = PurchaseOrderResponseHeader::find(_responseHeaderRecId, true);
        purchaseOrderResponseHeader.EarliestDlvDate = purchaseOrderResponseLine.DeliveryDate;
        purchaseOrderResponseHeader.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>