<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCReleaseUpdateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for update scripting.
/// </summary>
class PCReleaseUpdateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dbFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the database field name.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_fieldId">
    /// The Field ID.
    /// </param>
    /// <param name="_tableAlias">
    /// The table alias.
    /// </param>
    /// <param name="_fieldNameGenerationMode">
    /// Field name generation mode.
    /// </param>
    /// <returns>
    /// A database field name.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// throws error if field could not be found in the database.
    /// </exception>
    public str dbFieldName(TableId _tableId, FieldId _fieldId, str _tableAlias, FieldNameGenerationMode _fieldNameGenerationMode)
    {
        SysDictField    sysDictField = this.sysDictField(_tableId, _fieldId);
        str             fieldNameSQL = sysDictField.name(DbBackend::Sql, 0, _fieldNameGenerationMode, _tableAlias);

        if (!fieldNameSQL)
        {
            throw error("@SYS129416");
        }
        return fieldNameSQL;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>sysDictField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDictField</c> instance.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_fieldId">
    /// A Field ID.
    /// </param>
    /// <returns>
    /// A <c>SysDictField</c> instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the table ID is incorrect.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the field ID is incorrect.
    /// </exception>
    public SysDictField sysDictField(TableId _tableId, FieldId _fieldId)
    {
        SysDictField sysDictField = new SysDictField(_tableId, _fieldId);
        if (sysDictField)
        {
            return sysDictField;
        }
        if (!SysDictTable::newTableId(_tableId))
        {
            throw error(strFmt("@SYS55416",_tableId));
        }
        throw error(strFmt("@SYS55418",_fieldId, tableId2name(_tableId)));
    }
]]></Source>
			</Method>
			<Method>
				<Name>whereField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SQL where clause.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <param name="_tableAlias">
    /// A table alias.
    /// </param>
    /// <returns>
    /// A where clause.
    /// </returns>
    public str whereField(TableId _tableId, FieldId _fieldId, str _tableAlias)
    {
        return this.dbFieldName(_tableId, _fieldId, _tableAlias, FieldNameGenerationMode::WhereClause);
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCReleaseUpdateHelper construct()
    {
        return new PCReleaseUpdateHelper();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>