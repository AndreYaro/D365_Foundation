<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdBOMType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdBOMType extends InventType
{
    ProdBOM  prodBOM;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    public boolean canInventUpdExpected()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production bills of materials record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production bills of materials record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production bills of materials record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production bills of materials record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeggedSupply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a production BOM line is categorized as pegged supply.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean isPeggedSupply()
    {
        return BOMTypeBase::construct(prodBOM.ProdLineType).isPeggedSupply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeProduced</Name>
				<Source><![CDATA[
    public boolean mustBeProduced()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    public boolean mustInventUpdEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdBOM _prodBOM)
    {
        prodBOM  = _prodBOM;

        super(prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the production order type.
    /// </summary>
    /// <returns>
    ///    A <c>ProdType</c> enumeration value.
    /// </returns>
    public ProdType prodType()
    {
        return ProdType::Standard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackStatus</Name>
				<Source><![CDATA[
    public void setBackStatus()
    {
        if (prodBOM.RemainBOMPhysical != 0)
        {
            prodBOM.BackorderStatus     = ProdBackStatus::Release;
            prodBOM.EndConsump          = NoYes::No;
        }
        else
        {
            prodBOM.BackorderStatus= ProdBackStatus::Completed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>ProdBOM</c> reservation.
    /// </summary>
    /// <remarks>
    ///    The base class method does nothing.
    /// </remarks>
    public void setReservation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a production bills of materials record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a production bills of materials record has been updated.
    /// </summary>
    /// <param name="_prodBOMOrig">
    /// The original production bills of materials which is updated.
    /// </param>
    public void updated(ProdBOM _prodBOMOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ok = prodBOM.validateDelete(true);

        if (prodBOM.RemainBOMFinancial)
        {
            ok = checkFailed("@SYS14038");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether data is valid and ready to be written.
    /// </summary>
    /// <returns>
    /// Returns true if data is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ok = prodBOM.validateWrite(true);

        if (!prodBOM.checkOprNum())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdBOMType construct(ProdBOM _prodBOM)
    {
        switch (_prodBOM.ProdLineType)
        {
            case    BOMType::Phantom        : return new ProdBOMType_Phantom(_prodBOM);
            case    BOMType::Vendor         : return new ProdBOMType_Vendor(_prodBOM);
            case    BOMType::PeggedSupply   : return new ProdBOMType_PeggedSupply(_prodBOM);
        }
        return new ProdBOMType(_prodBOM);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>