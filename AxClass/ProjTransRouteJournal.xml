<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRouteJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTransRouteJournal extends ProjTransEmpl
{
    ProdJournalRoute       prodJournalRoute;
    ProdJournalRouteProj   prodJournalRouteProj;
    ProdRouteTrans         prodRouteTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityId activityNumber()
    {
        return prodJournalRouteProj.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(
        boolean _chargeable = false)
    {
        boolean ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return (prodJournalRouteProj.TransType == ProdRouteTransType::Time ? prodJournalRoute.CategoryHoursId : prodJournalRoute.CategoryQtyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return (prodJournalRouteProj.TransType == ProdRouteTransType::Time ? prodJournalRoute.HourPrice : prodJournalRoute.QtyPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return prodJournalRouteProj.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return prodJournalRoute.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    public NoYes ledgerSalesPosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return prodJournalRouteProj.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleCommittedCost</Name>
				<Source><![CDATA[
    public boolean mustHandleCommittedCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdJournalRouteProj _prodJournalRouteProj,ProdJournalRoute _prodJournalRoute)
    {
        prodJournalRouteProj = _prodJournalRouteProj;
        prodJournalRoute = _prodJournalRoute;

        super(_prodJournalRouteProj,_prodJournalRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdRouteTrans</Name>
				<Source><![CDATA[
    public ProdRouteTrans parmProdRouteTrans(ProdRouteTrans _prodRouteTrans = prodRouteTrans)
    {
        prodRouteTrans = _prodRouteTrans;

        return prodRouteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRoute</Name>
				<Source><![CDATA[
    public ProdRoute prodRoute()
    {
        return prodJournalRoute.prodRoute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteProj</Name>
				<Source><![CDATA[
    public ProdRouteProj prodRouteProj()
    {
        ProdRouteProj   prodRouteProj;
        ItemCalcType    calcType;

        if (prodJournalRoute.JobType==RouteJobType::Setup && prodJournalRouteProj.TransType==ProdRouteTransType::Time)
        {
            calcType=ItemCalcType::Setup;
        }
        else if (prodJournalRoute.JobType==RouteJobType::Process && prodJournalRouteProj.TransType==ProdRouteTransType::Time)
        {
            calcType=ItemCalcType::Process;
        }
        else if (prodJournalRouteProj.TransType==ProdRouteTransType::Qty)
        {
            calcType=ItemCalcType::Qty;
        }

        select firstonly prodRouteProj
        where prodRouteProj.ProdId==prodJournalRoute.ProdId
        &&    prodRouteProj.OprNum==prodJournalRoute.OprNum
        &&    prodRouteProj.OprPriority == prodRouteTrans.OprPriority
        &&    prodRouteProj.CalcType ==calcType;

        return prodRouteProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return prodJournalRouteProj.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        return (prodJournalRouteProj.TransType == ProdRouteTransType::Time ? prodJournalRoute.Hours : (prodJournalRoute.QtyGood + prodJournalRoute.QtyError));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return prodJournalRouteProj.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return ResourceFacade::findByWorker(this.worker());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the resource category record ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource category record ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return ResourceFacade::getResourceCategory(this.resource(), prodJournalRoute.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return prodJournalRouteProj.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProdJournalRouteProj));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    public TaxGroup taxGroup()
    {
        return prodJournalRouteProj.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return prodJournalRoute.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return prodJournalRouteProj.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        ;
        return ProjJournalTransMapForm::construct(prodJournalRouteProj, prodJournalRoute).validateWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProdWorker worker()
    {
        return prodJournalRoute.Worker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>