<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTransVarianceMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostTransVarianceMap</c> class is a wrapper class for a map that stores an instance of
///    an <c>inventCostTransVarianceList</c> class to a specific key.
/// </summary>
/// <remarks>
///    This class is used, to handle the <c>costTransVarianceMap</c> objects that are used in the
///    inventory cost transaction framework.It makes sure that the maps are initialized in the same way,
///    and provides some additional helper functions.
/// </remarks>

class InventCostTransVarianceMap
{
    Map costTransVarianceMap;
    /// <summary>
    ///    Adds the <c>InventCostTransVariance</c> records for a specified <c>RecordSortedList</c> object to
    ///    the <c>KeyCostTransVarianceMap</c> map.
    /// </summary>
    /// <param name="_parmKey">
    ///    A string value which is used as the key value in the map.
    /// </param>
    /// <param name="_sourceVarianceList">
    ///    A <c>RecordSortedList</c> object containing the <c>InventCostTransVariance</c> records that need to
    ///    be added to the <c>KeyCostTransVarianceMap</c> map.
    /// </param>
    /// <remarks>
    ///    The specified <c>RecordSortedList</c> object for which all the records belong to one key will be
    ///    added to the <c>KeyCostTransVarianceMap</c> map. The specified <paramref name="_parmkey" /> value
    ///    will be used as a key value. If an entry already exists for the key, the given
    ///    <c>RecordSortedList</c> object and the stored <c>RecordSortedList</c> object will be merged.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public void add(str                           _parmKey,
                    InventCostTransVarianceList   _sourceVarianceList)
    {
        if (_sourceVarianceList)
        {
            // First of all, check if there exists already a entry for
            // this key. In this case, the two recordSortedLists has to be merged
            if (this.exists(_parmKey))
            {
                // Get the list out of the map and summarize the currently
                /// stored list with the the given list
                InventCostTransVarianceList inventCostTransVarianceList = this.lookup(_parmKey);
                inventCostTransVarianceList.summarize(_sourceVarianceList);

                // Now set the summarized list to the map
                this.insert(_parmKey, inventCostTransVarianceList);
            }
            else
            {
                // this is the first entry for this key, so just simple set the given
                // recordSortedList as the value of the map
                this.insert(_parmKey, _sourceVarianceList);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountPosted</Name>
				<Source><![CDATA[
    public CostAmount costAmountPosted()
    {
        CostAmount                      costAmountPosted;

        MapEnumerator varianceMapEnumerator = costTransVarianceMap.getEnumerator();

        while (varianceMapEnumerator.moveNext())
        {
            InventCostTransVarianceList costTransVarianceList = varianceMapEnumerator.currentValue();
            costAmountPosted += costTransVarianceList.costAmountPosted();
        }

        return costAmountPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a specific key for an instance of the <c>InventCostTransVarianceList</c> class
    ///    already exists.
    /// </summary>
    /// <param name="_parmKey">
    ///    The key that is to be checked.
    /// </param>
    /// <returns>
    ///    true if the key already exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This limits the exists function of a map so that it can only be used with a string value as a key.
    /// </remarks>

    public boolean exists(str   _parmKey)
    {
        return costTransVarianceMap.exists(_parmKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    public MapEnumerator getEnumerator()
    {
        return costTransVarianceMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventCostTransVarianceMap</c> map.
    /// </summary>
    /// <remarks>
    ///    The map is initialized using the following criteria:
    ///    <list type="table">
    ///       <item>
    ///          <description>
    ///             Key
    ///          </description>
    ///          <description>
    ///             A composite key retrieved by the <c>buildKey</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Value
    ///          </description>
    ///          <description>
    ///             An instance of the <c>InventCostTransVarianceList</c> class that stores all
    ///             <c>InventCostTransVariance</c> records belonging to the key.
    ///          </description>
    ///       </item>
    ///    </list>
    ///    This is the default criteria for the
    ///    <c>
    ///       CostTransVarianceMap
    ///    </c>
    ///     map in the InventCost framework.
    /// </remarks>

    protected void init()
    {
        // Initialize Map - Key:   A composit key retrieved by the buildKey method
        //                - Value: A inventCostTransVarianceList class sotring all inventCostTransVariance records belonging to the key
        costTransVarianceMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public boolean insert(str _parmKey, InventCostTransVarianceList _inventCostTransVarianceList)
    {
        return costTransVarianceMap.insert(_parmKey, _inventCostTransVarianceList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    public InventCostTransVarianceList lookup(str _parmKey)
    {
        return costTransVarianceMap.lookup(_parmKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostTransVarianceMap</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to ensure that the <c>construct</c> method is used.
    /// </remarks>

    protected void new()
    {
        // Initialize the map
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    public boolean remove(str _parmKey)
    {
        return costTransVarianceMap.remove(_parmKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarize</Name>
				<Source><![CDATA[
    public void summarize(InventCostTransVarianceMap  _sourceMap)
    {
        // Enumerators

        // iterate over the source map
        if (_sourceMap)
        {
            MapEnumerator sourceMapEnumerator = _sourceMap.getEnumerator();

            while (sourceMapEnumerator.moveNext())
            {
                // I need to add the inventCostTransVarianceList of the source list to the map
                this.add(sourceMapEnumerator.currentKey(), sourceMapEnumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildKey</Name>
				<Source><![CDATA[
    public static str buildKey(InventCostTrans  _costTrans)
    {
        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            CostParameters costParameters = CostParameters::find();
            if (costParameters.DimensionDefaultingSource == DimensionDefaultingSource::Posting)
            {
                return queryValue(_costTrans.TransDate)     + '#' +
                       _costTrans.ItemId                    + '#' +
                       _costTrans.FinancialInventDimId      + '#' +
                       _costTrans.InventTransId             + '#' +
                       _costTrans.Voucher                   + '#' +
                       int2str(_costTrans.CostTransState)   + '#' +
                       int2str(enum2Int(_costTrans.CostTransRefType)) + '#' +
                       int2str(_costTrans.CostTransType)    + '#' +
                       _costTrans.TransRefId                + '#' +
                       int2str(_costTrans.DefaultDimension);
            }
        }

        return queryValue(_costTrans.TransDate)     + '#' +
               _costTrans.ItemId                    + '#' +
               _costTrans.FinancialInventDimId      + '#' +
               _costTrans.InventTransId             + '#' +
               _costTrans.Voucher                   + '#' +
               int2str(_costTrans.CostTransState)   + '#' +
               int2str(enum2Int(_costTrans.CostTransRefType)) + '#' +
               int2str(_costTrans.CostTransType)    + '#' +
               _costTrans.TransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostTransVarianceMap construct()
    {
        return new InventCostTransVarianceMap();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>