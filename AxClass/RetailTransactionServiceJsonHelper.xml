<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceJsonHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Collections;
using System.IO;
using System.Text;
using Microsoft.Dynamics.Commerce.Runtime.DataModel;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using TS = Microsoft.Dynamics.Commerce.Runtime.TransactionService.Serialization;
using DM = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailTransactionServiceJsonHelper</c> class provides JSON helper methods for RetailTransactionService APIs.
/// </summary>
class RetailTransactionServiceJsonHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SerializeToJson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serialize the given object, and types to JSON.
    /// </summary>
    /// <param name = "_objectToSerialize">The object to serialize.</param>
    /// <param name = "_typeArray">An array of the types contained in the object to serialize.</param>
    /// <returns>The objest serialized in a JSON formatted string.</returns>
    internal static str SerializeToJson(System.Object _objectToSerialize, System.Type[] _typeArray)
    {
        System.Runtime.Serialization.Json.DataContractJsonSerializer serializer = new System.Runtime.Serialization.Json.DataContractJsonSerializer(
            _objectToSerialize.GetType(),
            _typeArray);

        System.String result;
        using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
        {
            serializer.WriteObject(ms, _objectToSerialize);
            result = System.Text.Encoding::UTF8.GetString(ms.ToArray());
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeInventoryInfoListFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a List of InventoryInfo objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A list of InventoryInfo objects.</returns>
    internal static ArrayList DeserializeInventoryInfoListFromJSON(System.String jsonObject)
    {
        TS.InventoryInfo inventoryInfo = new TS.InventoryInfo();
        ArrayList inventoryInfoList = new ArrayList();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {

            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(inventoryInfo.GetType(), 0);
            inventoryInfoList.Add(InventoryInfo);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(inventoryInfoList.GetType(), typeArray);
            inventoryInfoList = serializer.ReadObject(ms) as ArrayList;
        }

        return inventoryInfoList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeClientBookChangesFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserialize the JSON object to <c>ClientBookChanges</c> class.
    /// </summary>
    /// <param name = "jsonObject">The JSON object.</param>
    /// <returns>Client book changes.</returns>
    internal static ClientBookChanges DeserializeClientBookChangesFromJSON(System.String jsonObject)
    {
        ClientBookChanges clientBookChanges = new ClientBookChanges();
        ClientBookChange clientBookChange = new ClientBookChange();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[2]();
            typeArray.SetValue(clientBookChanges.GetType(), 0);
            typeArray.SetValue(clientBookChange.GetType(), 1);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(clientBookChanges.GetType(), typeArray);
            clientBookChanges = serializer.ReadObject(ms) as ClientBookChanges;
        }

        return clientBookChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeCustomerTimelineItemFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a CustomerTimelineItem object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The CustomerTimelineItem object.</returns>
    internal static CustomerTimelineItem DeserializeCustomerTimelineItemFromJSON(System.String jsonObject)
    {
        CustomerTimelineItem item = new CustomerTimelineItem();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms) as CustomerTimelineItem;
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeCustomerTimelineItemListFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a CustomerTimelineItem list.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The CustomerTimelineItem list.</returns>
    internal static ArrayList DeserializeCustomerTimelineItemListFromJSON(System.String jsonObject)
    {
        CustomerTimelineItem item = new CustomerTimelineItem();
        ArrayList itemList = new ArrayList();

        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);
            itemList.Add(item);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(itemList.GetType(), typeArray);
            itemList = serializer.ReadObject(ms) as ArrayList;
        }

        return itemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeGetCustomerTimelineItemsCriteriaFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a GetCustomerTimelineItemsCriteria object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The GetCustomerTimelineItemsCriteria object.</returns>
    internal static GetCustomerTimelineItemsCriteria DeserializeGetCustomerTimelineItemsCriteriaFromJSON(System.String jsonObject)
    {
        GetCustomerTimelineItemsCriteria criteria = new GetCustomerTimelineItemsCriteria();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(criteria.GetType(), 0);
        
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(criteria.GetType(), typeArray);
            criteria = serializer.ReadObject(ms) as GetCustomerTimelineItemsCriteria;
        }

        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeQueryResultSettingsFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a QueryResultSettings object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The QueryResultSettings object.</returns>
    internal static QueryResultSettings DeserializeQueryResultSettingsFromJSON(System.String jsonObject, int64 defaultTopValue = 100)
    {
        PagingInfo paging = new PagingInfo(defaultTopValue);
        QueryResultSettings settings = new QueryResultSettings(paging);
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(settings.GetType(), 0);
        
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(settings.GetType(), typeArray);
            settings = serializer.ReadObject(ms) as QueryResultSettings;
        }

        return settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeChecklistListFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a List of Checklist objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A list of Checklist objects.</returns>
    internal static ArrayList DeserializeChecklistListFromJSON(System.String jsonObject)
    {
        DM.Checklist checklist = new DM.Checklist();
        // Need a size for the .net array constructor
        int arraySize = 1;
        DM.Checklist[] checklistArray = new DM.Checklist[arraySize]();

        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(checklist.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(checklistArray.GetType(), typeArray);
            // ArrayList is not generic, so use an array to hold the intermediate data
            checklistArray = serializer.ReadObject(ms);
        }

        return new ArrayList(checklistArray);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeChecklistTaskListFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a List of ChecklistTask objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A list of ChecklistTask objects.</returns>
    internal static ArrayList DeserializeChecklistTaskListFromJSON(System.String jsonObject)
    {
        DM.ChecklistTask checklistTask = new DM.ChecklistTask();
        // Need a size for the .net array constructor
        int arraySize = 1;
        DM.ChecklistTask[] checklistTaskArray = new DM.ChecklistTask[arraySize]();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(checklistTask.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(checklistTaskArray.GetType(), typeArray);
            // ArrayList is not generic, so use an array to hold the intermidiate data
            checklistTaskArray = serializer.ReadObject(ms);
        }

        return new ArrayList(checklistTaskArray);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeChecklistTaskFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a ChecklistTask object.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A ChecklistTask objects.</returns>
    internal static DM.ChecklistTask DeserializeChecklistTaskFromJSON(System.String jsonObject)
    {
        DM.ChecklistTask checklistTask = new DM.ChecklistTask();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(checklistTask.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(checklistTask.GetType(), typeArray);
            // ArrayList is not generic, so use an array to hold the intermidiate data
            checklistTask = serializer.ReadObject(ms);
        }

        return checklistTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeChecklistSearchCriteriaFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a ChecklistSearchCriteria objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A ChecklistSearchCriteria objects.</returns>
    internal static DM.ChecklistSearchCriteria DeserializeChecklistSearchCriteriaFromJSON(System.String jsonObject)
    {
        DM.ChecklistSearchCriteria searchCriteria = new DM.ChecklistSearchCriteria();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(searchCriteria.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(searchCriteria.GetType(), typeArray);
            searchCriteria = serializer.ReadObject(ms) as DM.ChecklistSearchCriteria;
        }

        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeTaskSearchCriteriaFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a TaskSearchCriteria objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON object provided as a string.</param>
    /// <returns>A TaskSearchCriteria objects.</returns>
    internal static DM.TaskSearchCriteria DeserializeTaskSearchCriteriaFromJSON(System.String jsonObject)
    {
        DM.TaskSearchCriteria searchCriteria = new DM.TaskSearchCriteria();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(searchCriteria.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(searchCriteria.GetType(), typeArray);
            searchCriteria = serializer.ReadObject(ms) as DM.TaskSearchCriteria;
        }

        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeInventoryInboundOutboundCommitDocumentFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a InventoryInboundOutboundCommitDocument object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The InventoryInboundOutboundCommitDocument object.</returns>
    internal static DM.InventoryInboundOutboundCommitDocument DeserializeInventoryInboundOutboundCommitDocumentFromJSON(System.String jsonObject)
    {
        InventoryInboundOutboundCommitDocument item = new InventoryInboundOutboundCommitDocument();
        using(MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms) as InventoryInboundOutboundCommitDocument;
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeContactsFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the JSON string to a list of <c>ContactInfo</c> objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON string.</param>
    /// <returns>A list of <c>ContactInfo</c> objects.</returns>
    internal static ArrayList DeserializeContactsFromJSON(System.String jsonObject)
    {
        DM.ContactInfo contactInfo = new DM.ContactInfo();
        int arraySize = 1;
        DM.ContactInfo[] contacts = new DM.ContactInfo[arraySize]();

        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(contactInfo.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(contacts.GetType(), typeArray);
            contacts = serializer.ReadObject(ms);
        }

        return new ArrayList(contacts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeEmailMessagesFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the JSON string to a list of <c>EmailMessage</c> objects.
    /// </summary>
    /// <param name = "jsonObject">The JSON string.</param>
    /// <returns>A list of <c>EmailMessage</c> objects.</returns>
    internal static ArrayList DeserializeEmailMessagesFromJSON(System.String jsonObject)
    {
        int arraySize = 1;
        DM.EmailMessage[] emailMessages = new DM.EmailMessage[arraySize]();
        DM.EmailMessage emailMessage = new DM.EmailMessage();

        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(emailMessage.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(emailMessages.GetType(), typeArray);
            emailMessages = serializer.ReadObject(ms);
        }

        return new ArrayList(emailMessages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeInventoryAdjustmentCommitDocumentFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a InventoryAdjustmentCommitDocument object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The InventoryAdjustmentCommitDocument object.</returns>
    internal static DM.InventoryAdjustmentCommitDocument DeserializeInventoryAdjustmentCommitDocumentFromJSON(System.String jsonObject)
    {
        InventoryAdjustmentCommitDocument item = new InventoryAdjustmentCommitDocument();
        using(MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms) as InventoryAdjustmentCommitDocument;
        }

        return item;
    }

]]></Source>
			</Method>
            <Method>
				<Name>DeserializeSalesOrdersLookupCriteriaFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a SalesOrdersLookupCriteria object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The SalesOrdersLookupCriteria object.</returns>
    internal static DM.SalesOrdersLookupCriteria DeserializeSalesOrdersLookupCriteriaFromJSON(System.String jsonObject)
    {
        DM.SalesOrdersLookupCriteria item = new DM.SalesOrdersLookupCriteria();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms) as DM.SalesOrdersLookupCriteria;
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeProductWarehouseAvailabilityCountCommitDocumentFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the given string to a ProductWarehouseAvailabilityCountCommitDocument object.
    /// </summary>
    /// <param name = "jsonObject">The json object provided as a string.</param>
    /// <returns>The ProductWarehouseAvailabilityCountCommitDocument object.</returns>
    internal static DM.ProductWarehouseAvailabilityCountCommitDocument DeserializeProductWarehouseAvailabilityCountCommitDocumentFromJSON(System.String jsonObject)
    {
        ProductWarehouseAvailabilityCountCommitDocument item = new ProductWarehouseAvailabilityCountCommitDocument();
        using(MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms) as ProductWarehouseAvailabilityCountCommitDocument;
        }

        return item;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>