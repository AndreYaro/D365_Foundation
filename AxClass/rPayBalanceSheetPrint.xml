<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayBalanceSheetPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayBalanceSheetPrint extends OXMLExcelReport_RPay implements BatchRetryable
{
    RHRMEmplTable               emplTable;
    RPayTmpBalanceSheetSum      tmpEmplSumReport;
    RPayTmpCalculate            paytmpcalculate;
    RPayBalanceSheetId          balanceSheet;
    container                   columnData;
    container                   printerSettings;
    date                        globalFromDate;
    date                        globalToDate;
    Query                       query;
    QueryRun                    queryRun;
    QueryBuildDataSource        queryBuildDataSource1;
    RPayTmpBalanceSheetSum      payTmpBalanceSheetSum;
    Range                       emplRange;

    List                        list;

    RPayBalHeader               payBalHeader;
    RecordSortedList            payBalColList;
    Counter                     numOfCol;
    Counter                     numOfBalanceClasses;
    Counter                     sumCol;
    Counter                     colNum[];
    Counter                     colSum[];
    NoYes                       calc100;
    NoYes                       factorOk;
    Name                        factorText;
    Column                      balanceList[];
    boolean                     totalLine;
    RPayBalanceSheetAmount     sumAmount;
    #DEFINE.MaxCol(21)
    #DEFINE.CurrentVersion(10)

    #define.RowTitle('RowTitle')
    #define.CellsByDefault(3)
    #define.ReportPrintDate('ReportPrintDate')
    #define.RowTable('RowTable')
    #define.ColName('ColName_')
    #define.ColValueName('ColValue_')
    #define.ReportHead('ReportHead')
    #define.Body('Body')
    #define.Total('Total')
    #define.WorksheetReportName('Report')

    #LOCALMACRO.CurrentList
        balanceSheet,
        globalFromDate,
        globalToDate,
        columnData,
        printerSettings
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allCollAreZero</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allCollAreZero(RPayBalanceSheetAmount _balAmount)
    {
        Column column;

        for (column=1;column <=numOfCol;column++)
        {
            if (_balAmount[column])
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RPayBalanceSheetId balanceSheet(
        boolean            _set          = false,
        RPayBalanceSheetId _balanceSheet = balanceSheet)
    {
        if (_set)
        {
            balanceSheet = _balanceSheet;
        }

        return balanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceSheetName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Description balanceSheetName()
    {
        select firstonly Name from payBalHeader index hint BalanceSheetIdx
            where payBalHeader.BalanceSheet == balanceSheet;

        return payBalHeader.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcColumns</Name>
				<Source><![CDATA[
    private void calcColumns(RPayTmpBalanceSheetSum _tmpEmplSum)
    {
        Column         column;
        Counter        counter;
        RPayBalColumns payBalColumns;

        for (column=1;column <= numOfCol; column++)
        {
            payBalColumns = this.payBalColumns(column);

            if (payBalColumns.Type == RPayColumnType::HundredPct)
            {
                if (payBalColumns.PercentColumn)
                {
                    _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.PercentColumn] * payBalColumns.Percent / 100;
                }
            }

            if (payBalColumns.Type == RPayColumnType::CalcExpression)
            {
                if (payBalColumns.OperandColumn1 &&
                    payBalColumns.OperandColumn2)
                {
                    switch (payBalColumns.CalcExpression)
                    {
                        case CalcExpression::AminusB:
                            _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] -
                                                              _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2];
                            break;

                        case CalcExpression::AplusB:
                            _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] +
                                                              _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2];
                            break;

                        case CalcExpression::AsumB:
                            _tmpEmplSum.RealColumns[column] = 0;
                            for (counter=payBalColumns.OperandColumn1; counter <= payBalColumns.OperandColumn2; counter++)
                                _tmpEmplSum.RealColumns[column] += _tmpEmplSum.RealColumns[counter];
                            break;

                        case CalcExpression::ATimesB:
                            _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] *
                                                              _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2];
                            break;

                        case CalcExpression::ADividedByB:
                            if (_tmpEmplSum.RealColumns[payBalColumns.OperandColumn2])
                                _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] /
                                                                  _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2];
                            else
                                _tmpEmplSum.RealColumns[column] = 0;
                            break;

                        case CalcExpression::ADividedByBpct:
                            _tmpEmplSum.RealColumns[column] = percent(_tmpEmplSum.RealColumns[payBalColumns.OperandColumn1],
                                                                      _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2]);
                            break;

                        case CalcExpression::ApctOfB:
                            _tmpEmplSum.RealColumns[column] = percent(_tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] -_tmpEmplSum.RealColumns[payBalColumns.OperandColumn2],
                                                                      _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2]);
                            break;

                        case CalcExpression::BpctOfA:
                            _tmpEmplSum.RealColumns[column] = percent(_tmpEmplSum.RealColumns[payBalColumns.OperandColumn1] - _tmpEmplSum.RealColumns[payBalColumns.OperandColumn2],
                                                                      _tmpEmplSum.RealColumns[payBalColumns.OperandColumn1]);
                            break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplTrans</Name>
				<Source><![CDATA[
    private void calcEmplTrans()
    {
        RPayBalanceSheetCol   payBalanceSheetCol;
        RPayBalColumns        payBalColumns;
        Column                column;

        for (column = 1; column <= numOfCol; column++)
        {
            payBalColumns      = this.payBalColumns(column);
            payBalanceSheetCol = RPayBalanceSheetCol::construct(this,payBalColumns);
            if (payBalanceSheetCol)
            {
                payBalanceSheetCol.sumUpTrans(payTmpBalanceSheetSum,
                                              column,
                                              queryRun,
                                              payBalColumns.Code,
                                              payBalColumns.FromDate ? payBalColumns.FromDate : this.globalFromDate(),
                                              payBalColumns.ToDate ? payBalColumns.ToDate : this.globalToDate(),
                                              this.payTmpDate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumEmpl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTmpBalanceSheetSum calcSumEmpl(RHRMEmplTable _emplSpec)
    {
        RPayTmpBalanceSheetSum    tmpEmplSum;
        Column                    column;

        while select payTmpBalanceSheetSum
            where payTmpBalanceSheetSum.EmplId == _emplSpec.EmployeeId
        {
            for (column = 1; column <= numOfCol; column++)
            {
                tmpEmplSum.RealColumns [column] += payTmpBalanceSheetSum.RealColumns[column];
                tmpEmplSum.StringColumns[column] = payTmpBalanceSheetSum.StringColumns[column];
            }

            tmpEmplSum.EmplId = _emplSpec.EmployeeId;
            tmpEmplSum.write();
        }

        return tmpEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>col2Name</Name>
				<Source><![CDATA[
    private str col2Name(int _col)
    {
        return #ColName + int2str(_col);
    }

]]></Source>
			</Method>
			<Method>
				<Name>col2ValueName</Name>
				<Source><![CDATA[
    private str col2ValueName(int _col)
    {
        return #ColValueName + int2str(_col);
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnClear</Name>
				<Source><![CDATA[
    private void columnClear()
    {
        Column column;
        ;
        columnData = conNull();

        for (column = 1; column < #MaxCol; column++)
        {
            columnData = conIns(columnData,column,RPayTmpBalanceSheetCol::packNull());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container columnData(Column _column, container _columnData = conNull())
    {
        if (_column > #MaxCol)
        {
            throw error(strFmt("@RUP270",#MaxCol));
        }

        if (! prmisDefault(_columnData))
        {
            columnData = conPoke(columnData,_column,_columnData);
        }

        return conPeek(columnData,_column);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPointsToTwips</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets twips by points.
    /// </summary>
    /// <param name="_pointWidth">
    /// The point width
    /// </param>
    /// <returns>
    /// The twips.
    /// </returns>
    #define.value256(256)
    #define.value128(128)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected real convertPointsToTwips(int _pointWidth)
    {
        return decRound((_pointWidth * #value256 - #value128) / (#value256 * document.workbook().maximumDigitWidth()), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RPayBalColumns      payBalColumns;
        Column              column;
        list = new List(Types::Class);

        this.loadInfo();
        this.calcEmplTrans();

        this.initSectionMap();
        this.initReportDesign();

        this.execute(#ReportHead);

        queryRun.reset();

        while (queryRun.next())
        {
            emplTable  = queryRun.get(tableNum(RHRMEmplTable));
            tmpEmplSumReport = this.calcSumEmpl(emplTable);

            if (payBalHeader.SkipZero)
            {
                this.printoutEmpl();
            }
            else
            {
                if (!this.allCollAreZero(tmpEmplSumReport.RealColumns))
                {
                    this.printoutEmpl();
                }
            }
        }

        totalLine = true;

        for (column=1;column <= numOfCol; column++)
        {
            payBalColumns     = this.payBalColumns(column);
            sumAmount[column] = payBalColumns.Total ? sumAmount[column] : 0;
            tmpEmplSumReport.StringColumns[column] = "";
        }

        tmpEmplSumReport.RealColumns = sumAmount;
        this.printoutEmpl();

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTxt</Name>
				<Source><![CDATA[
    private str dateTxt(RPayBalColumns _payBalColumns)
    {
        if (this.typeToBeCounted(_payBalColumns.Type))
        {
            return strFmt("@RUP271",_payBalColumns.FromDate ? _payBalColumns.FromDate : this.globalFromDate(),_payBalColumns.ToDate ? _payBalColumns.ToDate : this.globalToDate());
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args      dialogArgs   = new Args();
        FormRun   dialog;

        dialogArgs.name(formStr(RPayBalanceSheetPrint));
        dialogArgs.caller(this);

        dialog = classfactory.formRunClass(dialogArgs);
        dialog.init();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayBalanceSheetReport';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + curUserId() + #Dash + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        RPayBalColumns      payBalColumns;
        Column              column;

        for (column = 1; column <= numOfCol; column++)
        {
            payBalColumns = this.payBalColumns(column);

            switch (payBalColumns.Type)
            {
                case RPayColumnType::TextField:
                    if (totalLine)
                    {
                        this.insertValueToSection(this.col2ValueName(column), '');
                    }
                    else
                    {
                        this.insertValueToSection(this.col2ValueName(column), tmpEmplSumReport.StringColumns[column]);
                    }
                    break;
                case RPayColumnType::EmplId:
                    if (totalLine)
                    {
                        this.insertValueToSection(this.col2ValueName(column), '');
                    }
                    else
                    {
                        this.insertValueToSection(this.col2ValueName(column), emplTable.EmployeeId);
                    }
                    break;
                case RPayColumnType::EmplName:
                    if (totalLine)
                    {
                        this.insertValueToSection(this.col2ValueName(column), '');
                    }
                    else
                    {
                        this.insertValueToSection(this.col2ValueName(column), emplTable.name());
                    }
                    break;
                case RPayColumnType::Department:
                    if (totalLine)
                    {
                        this.insertValueToSection(this.col2ValueName(column), '');
                    }
                    else
                    {
                        this.insertValueToSection(this.col2ValueName(column), emplTable.PayHRMOrganizationId);
                    }
                    break;
                case RPayColumnType::Counter,
                     RPayColumnType::Rate,
                     RPayColumnType::CTypeQtyDay,
                     RPayColumnType::CTypeQtyHour,
                     RPayColumnType::CTypeAmount,
                     RPayColumnType::CalcExpression,
                     RPayColumnType::HundredPct:
                        this.insertValueToSection(this.col2ValueName(column), tmpEmplSumReport.RealColumns[column]);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #ReportHead:
                this.fillReportHeader();
                break;
            case #Body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        RPayBalColumns  payBalColumns;
        int             column;
        str             colText, tmpText;

        this.insertValueToSection(#ReportPrintDate, date2StrUsr(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::None));
        this.insertValueToSection('CompanyNameTxt', CompanyInfo::find().Name);
        this.insertValueToSection('Title', payBalHeader.Name);

        for (column = 1; column <= numOfCol; column++)
        {
            payBalColumns = this.payBalColumns(column);

            switch (payBalColumns.Type)
            {
                case RPayColumnType::EmplId:
                    colText = extendedTypeId2pname(extendedTypeNum(RHRMEmplId));
                    break;
                case RPayColumnType::EmplName:
                    colText = extendedTypeId2pname(extendedTypeNum(EmplName));
                    break;
                case RPayColumnType::Department:
                    colText = extendedTypeId2pname(extendedTypeNum(RpayHRMOrganizationId));
                    break;
                case RPayColumnType::Counter,
                     RPayColumnType::Rate,
                     RPayColumnType::CTypeQtyDay,
                     RPayColumnType::CTypeQtyHour,
                     RPayColumnType::CTypeAmount,
                     RPayColumnType::CalcExpression,
                     RPayColumnType::HundredPct:

                    colText = payBalColumns.Name;
                    tmpText = this.dateTxt(payBalColumns);

                    if (tmpText)
                    {
                        colText += ' ' + tmpText;
                    }
                    break;
            }

            this.insertValueToSection(this.col2Name(column), colText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatColumns</Name>
				<Source><![CDATA[
    #define.Value1000(1000)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void formatColumns(RPayTmpBalanceSheetSum _tmpEmplSum)
    {
        Column         column;
        RPayBalColumns payBalColumns;

        this.calcColumns(_tmpEmplSum);

        for (column=1;column <= numOfCol; column++)
        {
            payBalColumns = this.payBalColumns(column);

            if (payBalColumns.Type == RPayColumnType::HundredPct)
            {
                if (payBalColumns.PercentColumn)
                {
                    _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[payBalColumns.PercentColumn] * payBalColumns.Percent / 100;
                }
            }

            if (payBalColumns.UnitThousand)
            {
                _tmpEmplSum.RealColumns[column] = _tmpEmplSum.RealColumns[column] / #Value1000;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>globalFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate globalFromDate(
        boolean   _set            = false,
        TransDate _globalFromDate = globalFromDate)
    {
        if (_set)
        {
            globalFromDate = _globalFromDate;
        }
        return globalFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>globalToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate globalToDate(
        boolean   _set          = false,
        TransDate _globalToDate = globalToDate)
    {
        if (_set)
        {
            globalToDate = _globalToDate;
        }
        return globalToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDesign</Name>
				<Source><![CDATA[
    private void initReportDesign()
    {
        OXMLWorksheet_RU    worksheet;
        str                 worksheetName;
        int                 rowDateNo, rowTableNo, rowBodyNo;
        RPayBalColumns      payBalColumns;
        Column              column;

        worksheet = document.workbook().getWorksheet(#WorksheetReportName);
        [worksheetName, rowDateNo]  = worksheet.workbook().definedNames().lookup(([#RowTitle, #localSheetIdUndefined]));
        [worksheetName, rowTableNo] = worksheet.workbook().definedNames().lookup(([#RowTable, #localSheetIdUndefined]));
        [worksheetName, rowBodyNo]  = worksheet.workbook().definedNames().lookup(([#Body, #localSheetIdUndefined]));

        if (numOfCol > #CellsByDefault)
        {
            worksheet.rowTemplate(rowDateNo).multiplyCell(#CellsByDefault, numOfCol - #CellsByDefault);
        }

        document.workbook().addDefinedName(#ReportPrintDate,  worksheet.name(), rowDateNo, max(numOfCol, #CellsByDefault), rowDateNo, max(numOfCol, #CellsByDefault));

        worksheet.parmSaveColumnWidths(true);
        for (column = 1; column <= numOfCol; column++)
        {
            payBalColumns = this.payBalColumns(column);

            if (payBalColumns.Width)
            {
                worksheet.columnWidth(column, payBalColumns.Width);
            }

            document.workbook().addDefinedName(this.col2Name(column),  worksheet.name(), rowTableNo, column, rowTableNo, column);
            document.workbook().addDefinedName(this.col2ValueName(column),  worksheet.name(), rowBodyNo, column, rowBodyNo, column);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#ReportHead);
        this.addSection(#Body);
        this.addSection(#Total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInfo</Name>
				<Source><![CDATA[
    private void loadInfo()
    {
        RPayBalanceSheetCol     payBalanceSheetCol;
        RPayBalColumns          payBalColumns;
        Column                  colIdx[];
        Column                  col;
        RPayTmpBalanceSheetCol  payTmpBalanceSheetCol;

        select firstonly payBalHeader
            order by BalanceSheet
            where payBalHeader.BalanceSheet == balanceSheet;

        payBalColList = new RecordSortedList(tableNum(RPayBalColumns));
        payBalColList.sortOrder(fieldNum(RPayBalColumns,Column));

        numOfCol = 0;
        while select payBalColumns
            order by BalanceSheet, Column
            where payBalColumns.BalanceSheet == balanceSheet
        {
            payTmpBalanceSheetCol.unpack(this.columnData(payBalColumns.Column));

            numOfCol ++;

            colIdx[payBalColumns.Column] = numOfCol;
            payBalColumns.Column = numOfCol;

            if (payBalColumns.Type >= RPayColumnType::Counter)
            {
                if (payTmpBalanceSheetCol.FromDate || payTmpBalanceSheetCol.ToDate)
                {
                    payBalColumns.FromDate = payTmpBalanceSheetCol.FromDate;
                    payBalColumns.ToDate   = payTmpBalanceSheetCol.ToDate;
                }

                if (payBalColumns.Printout && payBalColumns.Type == RPayColumnType::HundredPct)
                {
                    calc100 = NoYes::Yes;
                }
            }

            payBalColList.ins(payBalColumns);

            if (this.typeToBeCounted(payBalColumns.Type))
            {
                payBalanceSheetCol = RPayBalanceSheetCol::construct(this, payBalColumns);
                this.savePayBalance(payBalanceSheetCol,numOfCol);
            }
        }

        for (col = 1; col <= numOfCol; col++)
        {
            payBalColumns = this.payBalColumns(col);

            if (payBalColumns.Type == RPayColumnType::CalcExpression)
            {
                if (payBalColumns.OperandColumn1)
                {
                    payBalColumns.OperandColumn1 = colIdx[payBalColumns.OperandColumn1];
                }

                if (payBalColumns.OperandColumn2)
                {
                    payBalColumns.OperandColumn2 = colIdx[payBalColumns.OperandColumn2];
                }
            }

            if (payBalColumns.Type == RPayColumnType::HundredPct)
            {
                if (payBalColumns.PercentColumn)
                {
                    payBalColumns.PercentColumn = colIdx[payBalColumns.PercentColumn];
                }
            }

            payBalColList.ins(payBalColumns,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        query = new Query("@RUP274");
        queryBuildDataSource1 = query.addDataSource(tableNum(RHRMEmplTable));
        queryBuildDataSource1.addRange(fieldNum(RHRMEmplTable,EmployeeId));
        queryBuildDataSource1.addSortField(fieldNum(RHRMEmplTable,EmployeeId));
        queryRun = new QueryRun(query);
        this.columnClear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numofc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter numofc()
    {
        return numOfCol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>payBalColumns</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayBalColumns payBalColumns(Column _column)
    {
        RPayBalColumns payBalColumns;

        payBalColumns.Column = _column;
        payBalColList.find(payBalColumns);

        return payBalColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payBalHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayBalHeader payBalHeader()
    {
        return payBalHeader.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>payTmpDate</Name>
				<Source><![CDATA[
    private RPayTmpCalculate payTmpDate(NoYes set = false, RPayTmpCalculate _paytmpcalculate = paytmpcalculate)
    {
        if (set)
        {
            paytmpcalculate = _paytmpcalculate;
        }
        return paytmpcalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCol</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Column  printCol(Column _col)
    {
        return this.payBalColumns(_col).Printout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printColTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Column  printColTotal(Column _col)
    {
        return this.payBalColumns(_col).Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettings</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container printerSettings(container _printerSettings = printerSettings)
    {
        if (!prmisDefault(_printerSettings))
        {
            printerSettings = _printerSettings;
        }

        return printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutEmpl</Name>
				<Source><![CDATA[
    private void printoutEmpl()
    {
        Column column;

        if (!totalLine)
        {
            this.formatColumns(tmpEmplSumReport);
        }

        for (column=1;column <= this.numofc(); column++)
        {
            sumAmount[column] += tmpEmplSumReport.RealColumns[column];
        }

        this.execute(#Body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePayBalance</Name>
				<Source><![CDATA[
    private void savePayBalance(RPayBalanceSheetCol _payBalanceSheetCol,
                                Column              _column)
    {
        ;
        list.addEnd(_payBalanceSheetCol);
        numOfBalanceClasses++;
        balanceList[_column] = numOfBalanceClasses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayBalanceSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return max(#CellsByDefault, numOfCol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeToBeCounted</Name>
				<Source><![CDATA[
    private boolean typeToBeCounted(RPayColumnType _payColumnType)
    {
        return  (_payColumnType >= RPayColumnType::Counter) && (_payColumnType <= RPayColumnType::CTypeAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer    version = conPeek(_packedClass,1);
        container  packedQuery;
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean    oK = true;
        return oK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP275";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayBalanceSheetPrint payBalanceSheetPrint = new RPayBalanceSheetPrint();

        payBalanceSheetPrint.payTmpDate(true, args.record());

        if (payBalanceSheetPrint.prompt())
        {
            payBalanceSheetPrint.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>