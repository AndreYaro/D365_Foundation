<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlQtyToScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlQtyToScrap</c> class is responsible for handling the quantity to scrap controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#QtyToScrap)]
class WhsControlQtyToScrap extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        Qty qtyToScrap = WHSWorkExecuteDisplay::str2numDisplay(data);

        if (qtyToScrap < 0)
        {
            return this.fail("@WAX1172");
        }

        if (!super())
        {
            return false;
        }

        fieldValues.parmQtyToScrap(qtyToScrap);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that quantity to scrap does not exceed the total quantity of the item.
    /// </summary>
    /// <param name="_qtyToScrap">
    /// Scrapped quantity to be validated.
    /// </param>
    /// <param name="_uomToScrap">
    /// UOM of the scrapped quantity.
    /// </param>
    /// <param name="_itemId">
    /// Item id of the scrapped items.
    /// </param>
    /// <param name="_prodId">
    /// Production order id.
    /// </param>
    /// <returns>
    /// true if it is valid; otherwise, false.
    /// </returns>
    static public boolean validateQty(
        Qty                   _qtyToScrap,
        UnitOfMeasureSymbol   _uomToScrap,
        ItemId                _itemId,
        ProdId                _prodId)
    {
        boolean             ret = true;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        ProdBOM             prodBOM;
        Qty                 pickedQty;
        Qty                 availQty;
        WrkCtrTable         wrkCtrTable;
        InventDim           bomInventDim;
        InventDim           scrapInventDim;

        select firstonly prodBOM
            where prodBOM.ProdId    == _prodId   &&
                  prodBOM.ItemId    == _itemId;

        while select StatusIssue, Qty from inventTrans
            join  RecId, InventTransId from inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId  &&
                  inventTransOrigin.InventTransId   == prodBOM.InventTransId
        {
            if (inventTrans.StatusIssue == StatusIssue::Picked)
            {
                pickedQty = pickedQty - inventTrans.Qty;
            }
        }

        wrkCtrTable = WrkCtrTable::find(ProdRoute::find(_prodId, prodBOM.OprNum, RouteOprPriority::Primary).displayWrkCtrId());

        bomInventDim = prodBOM.inventDim();

        scrapInventDim.InventSiteId         = bomInventDim.InventSiteId;
        scrapInventDim.InventLocationId       = wrkCtrTable.inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).InventLocationId;
        scrapInventDim.wmsLocationId          = wrkCtrTable.inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).wmsLocationId;
        scrapInventDim.LicensePlateId    = bomInventDim.LicensePlateId;
        scrapInventDim.InventStatusId    = bomInventDim.InventStatusId;
        scrapInventDim = InventDim::findOrCreate(scrapInventDim);

        availQty = WHSInventOnHand::getWorkPhysicalAvailHandlingQty(_itemId, 
																	scrapInventDim.InventDimId, 
																	true);

        if (_qtyToScrap > pickedQty + availQty)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>