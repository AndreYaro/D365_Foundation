<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_ParmTransExpected</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchCalcTax_ParmTransExpected extends PurchCalcTax_ParmTransInvoice
{
    tableId  parmTransTableId;
    recId    parmTransRecId;

    VendInvoiceInfoSubTable markupSubTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    public boolean allowSingleLineAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    public void initCursor()
    {
        super();

        // Expected totals should always use the misc charges from the PO
        queryMarkupTransFrom = tablenum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    protected void initCursorMarkup(tableId  tableId,
                                    recId    recId)
    {
        MarkupTrans localMarkupTrans;

        markupTrans.selectForUpdate(update);

        // Expected totals should only include mics charges from the PO that are connected to a misc charge from the invoice
        select nofetch markupTrans
            where markupTrans.TransTableId  == tableId  &&
                  markupTrans.TransRecId    == recId    &&
                 !markupTrans.IsDeleted
            exists join localMarkupTrans
                where localMarkupTrans.OrigTableId == markupTrans.TableId &&
                      localMarkupTrans.OrigRecId   == markupTrans.RecId &&
                      localMarkupTrans.TransTableId == parmTransTableId &&
                      localMarkupTrans.TransRecId == parmTransRecId &&
                      !localMarkupTrans.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void initCursorMarkupHeader(tableId tableId,
                                recId   recId)
    {
        PurchTable  localPurchTable;

        // Initialize the parmTrans tableId and recId
        next markupSubTable;

        if (markupSubTable && markupSubTable.isNonPO())
        {
            // Skip any non-PO subTable records
            next markupSubTable;
        }
        parmTransTableId = markupSubTable.TableId;
        parmTransRecId = markupSubTable.RecId;

        if (markupSubTable)
        {
            localPurchTable = PurchTable::find(markupSubTable.OrigPurchId);
        }

        // Expected totals should always use the misc charges from the PO
        this.initCursorMarkup(localPurchTable.TableId, localPurchTable.RecId);
        queryMarkupTransFrom = tablenum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax is included in the item price for the purchase order document.
    /// </summary>
    /// <returns>
    /// true if the tax is included in the item price; otherwise false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        if (parmLine)
        {
            // Note: Don't pass purchTable from this class, as it may not be the header's purchTable
            if (parmLine.VendDocumentLineMap::includeTax(null, parmTable) == NoYes::Yes)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void  new(
            VendDocumentTableMap    _parmTable,
            ParmId            _parmId,
            PurchId           _sumPurchId,
            DocumentStatus    _documentStatus)
    {
        Debug::assert(_parmTable != null);

        super(_parmTable, _parmId, _sumPurchId, _documentStatus);

        purchTable.DocumentStatus = _documentStatus;

        // Set up the table cursor for subTable records of the current invoice
        select nofetch markupSubTable
            where markupSubTable.ParmId     == parmTable.ParmId  &&
                  markupSubTable.TableRefId == parmTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    public Common nextLine()
    {
        super();

        if (purchLine)
        {
            // Initialize the parmTrans tableId and recId
            parmTransTableId = parmLine.TableId;
            parmTransRecId = parmLine.RecId;

            purchTable = purchLine.purchTable();

            // Expected totals should always use the misc charges from the PO
            this.initCursorMarkup(purchLine.TableId, purchLine.RecId);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    public MarkupTrans nextMarkupLine()
    {
        if (queryMarkupTransFrom == tablenum(PurchTable))
        {
            next markupTrans;

            // If there is a record, return it
            if (markupTrans)
            {
                return markupTrans;
            }

            // If there isn't a record, and there was a subTable record,
            // initialize the markupTrans cursor with the next subTable record
            if (markupSubTable)
            {
                this.initCursorMarkupHeader(purchTable.TableId, purchTable.RecId);
            }
            else
            {
                // If there are no more subTable records, return empty markupTrans
                return markupTrans;
            }
        }

        next markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    public AmountCur transLineAmount()
    {
        Debug::assert(parmLine != null);

        PurchLine purchLineLoc = parmLine.purchLine();

        // Get the extended PO line amount for the invoice quantity
        if (markupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            return purchLineLoc.interCompanyLineAmount(this.transQty(), this.invoiceDate(), tax);
        }
        else if (Project::Enabled() && purchLineLoc.ProjId && purchLineLoc.hasRetentionTerms())
        {
            AmountCur retentionLineAmount = this.transRetentionLineAmount();
            AmountCur transLineAmount = retentionLineAmount ? retentionLineAmount : purchLineLoc.calcLineAmount(this.transQty());
            return transLineAmount;
        }
        else
        {
            return purchLineLoc.calcLineAmount(this.transQty());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    public AmountCur  transLineAmountInclTax()
    {
        Debug::assert(parmLine != null);

        // Get the extended PO line amount for the invoice quantity
        return parmLine.purchLine().calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup transTaxGroup()
    {
        return parmLine.purchLine().TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup transTaxItemGroup()
    {
        return parmLine.purchLine().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///   Overridden to always return false, as we do not want the expected taxes to use the purchase
    ///   order or invoice uncommitted taxes.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxWithholdUncommitted_IN</Name>
				<Source><![CDATA[
    public boolean useTaxWithholdUncommitted_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCalcTax_ParmTransExpected construct(Common           _source,
                                                           ParmId           _parmId         = '',
                                                           PurchId          _sumPurchId     = '',
                                                           DocumentStatus   _documentStatus = DocumentStatus::None)
    {
        return new PurchCalcTax_ParmTransExpected (_source, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding the range to the query to exclude non PO lines
    /// </summary>
    /// <returns>queryRun</returns>
    public Object queryBuild()
    {
        QueryRun queryRun;
        Query query;
        QueryBuildDataSource qbds;

        queryRun = super();
        query = queryRun.query();
        qbds = query.dataSourceTable(tableNum(VendInvoiceInfoLine));
        qbds.addRange(fieldNum(VendInvoiceInfoLine, OrigPurchId)).value(SysQuery::valueNotEmptyString());

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>