<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

[ExtensionOf(classStr(LedgerJournalCheckPost))]
public final class LedgerJournalCheckPost_ApplicationSuite_Extension
{
    public boolean checkJournalValue_IT;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postJournalInterCompany</Name>
				<Source><![CDATA[
    protected boolean postJournalInterCompany(
        CompanyId _companyId,
        LedgerJournalId _ledgerJournalId,
        boolean _isOffset)
    {
        boolean ok = next postJournalInterCompany(_companyId, _ledgerJournalId, _isOffset);

        if (ok && FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            LedgerJournalTable ledgerJournalTableInterCompany = LedgerJournalTable::find(_ledgerJournalId, true);

            if (ledgerJournalTableInterCompany.SimulationPosted_IT == NoYes::Yes)
            {
                SimulationJournalReOpen_IT simulationJournalReOpen = SimulationJournalReOpen_IT::construct(ledgerJournalTable.JournalNum);
                simulationJournalReOpen.parmIsPostingLedger(true);
                simulationJournalReOpen.runOperation();
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalForPosted</Name>
				<Source><![CDATA[
    protected void updateJournalForPosted()
    {
        next updateJournalForPosted();

        if (!errorJournalDeleted
            && ledgerJournalTable.SimulationPosted_IT
            && FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            SimulationJournalReOpen_IT simulationJournalReOpen = SimulationJournalReOpen_IT::construct(ledgerJournalTable.JournalNum);
            simulationJournalReOpen.parmIsPostingLedger(true);
            simulationJournalReOpen.run();
        }

        if (FeatureStateProvider::isFeatureEnabled(InvoiceCaptureFeature::instance())
            && VendInvoiceCapturedInvoiceInfoQueryStringFlight::instance().isEnabled())
        {
            this.updateVendInvoiceCapturedInvoiceInfo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalCheckPost</c> object.
    /// </summary>
    /// <param = "_ledgerJournalType">The journal type.</param>
    /// <param = "_approval">Whether the value is an approval.</param>
    /// <returns>A new instance of the <c>LedgerJournalCheckPost</c> object.</returns>
    public static LedgerJournalCheckPost construct_Simulation_IT(
        LedgerJournalType _ledgerJournalType,
        NoYes _approval = NoYes::No,
        NoYes _simulation = NoYes::No)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost;

        if (_approval == NoYes::Yes)
        {
            ledgerJournalCheckPost = LedgerJournalCheckPost::construct(_ledgerJournalType, _approval);
        }
        else
        {
            switch (_ledgerJournalType)
            {
                case LedgerJournalType::Daily :
                    if (_simulation)
                    {
                        ledgerJournalCheckPost = new LedgerJournalCheckPost_simulation_IT();
                    }
                    else
                    {
                        ledgerJournalCheckPost = LedgerJournalCheckPost::construct(_ledgerJournalType, _approval);
                    }

                    break;

                default :
                    ledgerJournalCheckPost = LedgerJournalCheckPost::construct(_ledgerJournalType, _approval);
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            ledgerJournalCheckPost.rboParameters(NoYes::No, '', '', '');
        }

        return ledgerJournalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>LedgerJournalCheckPost</c> object.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <param name = "_post">The posting parameter.</param>
    /// <param name = "_transferErrors">The transfer errors parameter.</param>
    /// <param name = "_simulation">The simulation parameter.</param>
    /// <returns>The <c>LedgerJournalCheckPost</c> object.</returns>
    public static LedgerJournalCheckPost newLedgerJournalTable_Simulation_IT(
        LedgerJournalTable _ledgerJournalTable,
        NoYes _post,
        NoYes _transferErrors = NoYes::No,
        NoYes _simulation = NoYes::No)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::construct_Simulation_IT(
            _ledgerJournalTable.JournalType,
            NoYes::No,
            _simulation);

        ledgerJournalCheckPost.parmJournalNum( _ledgerJournalTable.JournalNum);
        ledgerJournalCheckPost.parmPost(_post);
        ledgerJournalCheckPost.parmTransferErrors(_transferErrors);
        ledgerJournalCheckPost.parmDetailSummaryPosting(_ledgerJournalTable.DetailSummaryPosting);

        return ledgerJournalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTrans_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>LedgerJournalCheckPost</c> object.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_journalVoucher">The journal voucher.</param>
    /// <param name = "_post">The posting parameter.</param>
    /// <param name = "_transferErrors">The transfer errors parameter.</param>
    /// <param name = "_approval">The approval parameter.</param>
    /// <param name = "_simulation">The simulation parameter.</param>
    /// <returns>The <c>LedgerJournalCheckPost</c> object.</returns>
    public static LedgerJournalCheckPost newLedgerJournalTrans_Simulation_IT(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalVoucher _journalVoucher,
        NoYes _post,
        NoYes _transferErrors = NoYes::No,
        NoYes _approval = NoYes::No,
        NoYes _simulation = NoYes::No)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::construct_Simulation_IT(
            _ledgerJournalTrans.ledgerJournalTable().JournalType,
            _approval,
            _simulation);


        ledgerJournalCheckPost.parmJournalNum( _ledgerJournalTrans.JournalNum);

        if (_journalVoucher == LedgerJournalVoucher::Voucher)
        {
            ledgerJournalCheckPost.parmVoucher( _ledgerJournalTrans.Voucher);
        }

        ledgerJournalCheckPost.parmPost(_post);
        ledgerJournalCheckPost.parmTransferErrors(_transferErrors);
        ledgerJournalCheckPost.parmDetailSummaryPosting(_ledgerJournalTrans.ledgerJournalTable().DetailSummaryPosting);

        return ledgerJournalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalValue_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>checkJournalValue</c> variable.
    /// </summary>
    /// <returns>The <c>checkJournalValue</c> variable.</returns>
    public boolean checkJournalValue_IT()
    {
        return checkJournalValue_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeOnErrorPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method extends <c>LedgerJournalCheckPost.finalizeOnError</c> for Italian context
    /// releasing preallocated Tax Book vouchers if an error occurred during posting the journal.
    /// </summary>
    protected void finalizeOnErrorPre()
    {
        #isoCountryRegionCodes
        
        if (MultipleTaxIdReportingHelper::isLegalEntityOrAddressInCountryRegion([#isoIT], MultipleTaxIdScope::VATDeclaration)
            && LedgerJournalTable::find(ledgerJournalId).ledgerJournalName().taxBookSectionId())
        {
            this.releaseTaxBookVouchers_IT(this, ledgerJournalId);
        }

        next finalizeOnErrorPre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTaxBookVouchers_IT</Name>
				<Source><![CDATA[
    private void releaseTaxBookVouchers_IT(LedgerJournalCheckPost _ledgerJournalCheckPost, LedgerJournalId _ledgerJournalId)
    {
        Map tmpVoucherMap = _ledgerJournalCheckPost.parmTmpVoucherMap();
        LedgerJournalName ledgerJournalNameLocal = LedgerJournalTable::find(_ledgerJournalId).ledgerJournalName();

        if (ledgerJournalNameLocal
            && ledgerJournalNameLocal.taxBookSectionId()
            && tmpVoucherMap
            && tmpVoucherMap.elements())
        {
            MapEnumerator voucherMapEnumerator;

            // if called from post & transfer only vouchers with errors will be released
            if (_ledgerJournalCheckPost.parmInTransfer())
            {
                if (_ledgerJournalCheckPost.parmErrorTmpVoucherMap()
                    && _ledgerJournalCheckPost.parmErrorTmpVoucherMap().elements())
                {
                    voucherMapEnumerator = _ledgerJournalCheckPost.parmErrorTmpVoucherMap().getEnumerator();
                }
            }
            else
            {
                voucherMapEnumerator = tmpVoucherMap.getEnumerator();
            }

            while (voucherMapEnumerator && voucherMapEnumerator.moveNext())
            {
                NumberSeq::releaseNumber(ledgerJournalNameLocal.NumberSequenceTable, voucherMapEnumerator.currentKey());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceCapturedInvoiceInfo</Name>
				<Source><![CDATA[
    private void updateVendInvoiceCapturedInvoiceInfo()
    {
        VendInvoiceCapturedInvoiceInfo vendInvoiceCapturedInvoiceInfo;
        select forupdate vendInvoiceCapturedInvoiceInfo
            where vendInvoiceCapturedInvoiceInfo.RefTableId == ledgerJournalTable.TableId
                && vendInvoiceCapturedInvoiceInfo.RefRecId == ledgerJournalTable.RecId;
        if (vendInvoiceCapturedInvoiceInfo.RecId != 0)
        {
            LedgerJournalTrans ledgerJournalTrans;
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTrans.Invoice != "";
            RequestQueryParameterCollection queryParameters = new RequestQueryParameterCollection();
            queryParameters.AddRequestQueryParameter(tableStr(VendInvoiceJour), fieldStr(VendInvoiceJour, InvoiceId), ledgerJournalTrans.Invoice);
            vendInvoiceCapturedInvoiceInfo.QueryString = VendInvoiceCapturedInvoiceInfoEntity::generateQueryString(menuItemDisplayStr(VendInvoiceJournal), queryParameters);
            vendInvoiceCapturedInvoiceInfo.doUpdate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>