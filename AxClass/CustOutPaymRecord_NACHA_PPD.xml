<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaymRecord_NACHA_PPD</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaymRecord_NACHA_PPD extends CustOutPaymRecord_NACHA
{
    //***** NACHA PPD Record Layout *****
    //
    //      Field                           Offset  Value
    //--    ------------------------------- ------- -----------
    //01    recordTypeCode                  01 - 01 6
    //02    transactionCode                 02 - 03
    //03    receivingDFI_Identification     04 - 11
    //04    checkDigit                      12 - 12
    //05    DFI_AccountNumber               13 - 29
    //06    amount                          30 - 39
    //07    identificationNumber            40 - 54
    //08    individualName                  55 - 76
    //09    discretionaryData               77 - 78
    //10    addendaRecordIndicator          79 - 79 0 (ZERO)
    //11    traceNumber                     80 - 94

    #define.interfaceName('Standard NACHA - PPD')
    #define.formatType('PPD')

    //Offsets:
    #define.individualNameOffset(55)

    //Field Lengths:
    #define.individualNameLength(22)

    container nacha_ppd_Record;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPPDFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds debug field information to the output file.
    /// </summary>
    private void addPPDFieldPositions()
    {
        #define.pPDRecordLayout         ('ABBCCCCCCCCDEEEEEEEEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHIIJKKKKKKKKKKKKKKK - PPD RECEIVABLES RECORD')
        #define.pPDTraceNumber          ('                                                                               KKKKKKKKKKKKKKK - Trace Number [Journal ID + Line Number]')
        #define.pPDAddendaIndicator     ('                                                                              J - Addenda Record Indicator = "0"')
        #define.pPDDiscretionayData     ('                                                                            II - Discretionary Data <BLANK>')
        #define.pPDIndividualName       ('                                                      HHHHHHHHHHHHHHHHHHHHHH - Individual Name')
        #define.pPDIdentificationNumber ('                                       GGGGGGGGGGGGGGG - Identification Number')
        #define.pPDAmount               ('                             FFFFFFFFFF - Amount [$$$$$$$$cc]')
        #define.pPDDFIAccountNumber     ('            EEEEEEEEEEEEEEEEE - DFI Account Number')
        #define.pPDCheckDigit           ('           D - Check Digit')
        #define.pPDReceivingDFI_ID      ('   CCCCCCCC - Receiving DFI Identification')
        #define.pPDTransactionCode      (' BB - Transaction Code = "27" for AR Checking, "37" for AR Savings')
        #define.pPDRecordTypeCode       ('A - Record Type Code = "6:')

        file.write(#pPDRecordLayout);
        file.write(#pPDTraceNumber);
        file.write(#pPDAddendaIndicator);
        file.write(#pPDDiscretionayData);
        file.write(#pPDIndividualName);
        file.write(#pPDIdentificationNumber);
        file.write(#pPDAmount);
        file.write(#pPDDFIAccountNumber);
        file.write(#pPDCheckDigit);
        file.write(#pPDReceivingDFI_ID);
        file.write(#pPDTransactionCode);
        file.write(#pPDRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null, RunbaseProgress _progress = null)
    {
        boolean ok = super(_ledgerJournalTrans, _progress);

        if (!this.parmIsPrenote())
        {
            if (CustPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, CustPaymentValidate::PaymReference)
                && !_ledgerJournalTrans.PaymReference)
            {
                ok = checkFailed("@SYS24523");
            }
        }

        if (ok)
        {
            // Only transactions with Credit Amounts can be used from Accounts Receivable
            if (custVendPaym.paymAmountInSendersCurrency() >= 0)
            {
                if (!this.parmIsPrenote())
                    ok = checkFailed("@SYS98766");
            }

            changecompany(_ledgerJournalTrans.Company)
            {
                custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByLedgerDimension(custVendPaym.ledgerJournalTrans().parmLedgerDimension()).BankAccount);
                if (!custBankAccount)
                {
                    ok = checkFailed(strfmt("@SYS98117", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                else
                {
                    unchecked (Uncheck::TableSecurityPermission)
                    {
                        if (!custBankAccount.AccountNum)
                        {
                            ok = checkFailed(strfmt("@SYS98697", custBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                        }
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the 'Receiving Company Name/ID' in the NACHA PPD detail record. This field will contain the
    ///    receiver's company name.
    /// </summary>
    // Receiving Company Name/Id
    protected void fillField08()
    {
        this.strInsert(substr(custVendPaym.recieversCompanyName(), 1, #individualNameLength), #individualNameOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls each fillFieldXX() method to populate the whole PPD payment record.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10();
        this.fillField11();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the PPD payment output record.
    /// </summary>
    protected void initRecord()
    {
        #define.blankRoutingNumber('0')
        #define.blank(' ')

        nacha_ppd_Record = connull();
        transactionAmount = 0;
        bankRoutingNumber = strrep(#blankRoutingNumber, 8);
        outputRecord = strrep(#blank, 94);

        custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByCompany(custVendPaym.ledgerJournalTrans().Company, custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the specification to be displayed in the user interface.
    /// </summary>
    /// <returns>
    ///    The name of the specification to be displayed in the user interface.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the
    ///    totals for the transaction.
    /// </summary>
    public void output()
    {
        this.initRecord();
        this.fillRecord();
        custVendOutPaym.addDetailRecord(#formatType, bankRoutingNumber, transactionAmount, 0);

        nacha_ppd_Record = conins(nacha_ppd_Record, 1, outputRecord);

        file.writeExp(nacha_ppd_Record);

        if (custVendOutPaym.isDebug())
        {
            this.addPPDFieldPositions();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>