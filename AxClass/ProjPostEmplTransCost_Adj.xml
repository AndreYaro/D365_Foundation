<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostEmplTransCost_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostEmplTransCost_Adj extends ProjPostEmplTransCost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used with this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension that is used for posting the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        if (ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(projTrans.projId())) == ProjLedgerStatus::BalanceSheet)
        {
            return projTrans.statusAccountLedgerDimension(_fundingSourceId);
        }

        return projTrans.costAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type that is associated with the posting project costs that are based
    /// on the current project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from this one.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        if (ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(projTrans.projId())) == ProjLedgerStatus::BalanceSheet)
        {
            return LedgerPostingType::ProjWIPCostvalue;
        }
        else if (projTrans.isIntercompany())
        {
            return LedgerPostingType::IntercompanyCost;
        }

        return LedgerPostingType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        //  if the project parameter AlwaysRegulationTrans is set to 'No' fields are updated on the original transaction
        if (this.parmadjustBufferCost())
        {
            projEmplTransCost.CostPrice = this.parmadjustBufferCost().CostPrice;
            projEmplTransCost.LineAmount = this.parmadjustBufferCost().LineAmount;
            projEmplTransCost.DefaultDimension = this.parmadjustBufferCost().DefaultDimension;
            projEmplTransCost.FundingSource = this.parmadjustBufferCost().FundingSource;
            projEmplTransCost.PSAIndirectCost = this.parmadjustBufferCost().PSAIndirectCost;
        }
        else
        {
            //  if the project parameter AlwaysRegulationTrans is set to 'Yes', the old transactions is updated
            if (this.parmTransStatus() == ProjTransStatus::Adjusted)
            {
                if (this.mustSetTransStatus())
                {
                    projEmplTransCost.TransStatus = ProjTransStatus::Adjusted;
                }

                if (projEmplTransCost.LedgerStatusCost != ProjLedgerStatus::Operations
                 && projEmplTransCost.LedgerStatusCost != ProjLedgerStatus::Never  )
                {
                    projEmplTransCost.LedgerStatusCost  = ProjLedgerStatus::None;
                }
            }
        }

        projEmplTransCost.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        DimensionDefault    ret;
        ProjTransPosting    projTransPosting;

        if (this.postingType() == LedgerPostingType::ProjPayrollAllocation && this.parmAdjRefTransId())
        {
            select firstOnly DefaultDimension from projTransPosting
                where projTransPosting.TransId == this.parmAdjRefTransId()
                    && projTransPosting.PostingType == LedgerPostingType::ProjPayrollAllocation
                    && projTransPosting.ProjFundingSource == this.parmProjFundingSource();
        }

        ret = projTransPosting.DefaultDimension ? projTransPosting.DefaultDimension : super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether transaction status change is needed.
    /// </summary>
    /// <returns>true if transaction status change is needed, otherwise, false</returns>
    protected boolean mustSetTransStatus()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>