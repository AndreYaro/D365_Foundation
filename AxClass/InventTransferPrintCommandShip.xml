<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferPrintCommandShip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferPrintCommandShip</c> class is responsible for printing transfer order shipment reports.
/// </summary>
[InventTransferPrintAttribute(InventTransferUpdateType::Shipment)]
public class InventTransferPrintCommandShip extends InventTransferPrintCommand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    public void printout()
    {
        MenuFunction        menuFunction;
        Args                args = new Args();

        InventTransferPrintDataProviderShip dataProviderShip = this.parmPrintDataProvider() as InventTransferPrintDataProviderShip;

        if (this.parmInventTransferParmTable().PrintTransferShipment)
        {
            menuFunction = new MenuFunction(menuitemOutputStr(InventTransferShip), MenuItemType::Output);
            args.object(dataProviderShip);
            args.record(this.parmInventTransferParmTable());
            menuFunction.run(args);
        }

        // <GTE><GIN>
        if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && this.parmInventTransferParmTable().inventTransferParmTable_IN().PrintGSTTransferInvoice
            && TaxGSTInvoiceHelper_IN::isGSTInvoice(this.parmInventTransferParmTable()))

        {
            menuFunction = new MenuFunction(menuitemOutputStr(TaxGSTSTOInvoice_IN), MenuItemType::Output);
            args.caller(this);
            args.record(dataProviderShip.parmInventTransferJour());
            menuFunction.run(args);
            
        }
        // </GTE></GIN>

        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && this.parmInventTransferParmTable().inventTransferParmTable_IN().PrintExciseTransferInvoice)
        {
            menuFunction = new MenuFunction(menuitemOutputStr(ExciseTransferInvoice_IN), MenuItemType::Output);
            args.record(dataProviderShip.parmInventTransferJour());
            menuFunction.run(args);
        }
        // </GIN>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventTransferJour inventTransferJour = dataProviderShip.parmInventTransferJour();

            if (this.parmInventTransferParmTable().PrintBillOfLading_RU && inventTransferJour.BillOfLadingId_RU)
            {
                menuFunction = new MenuFunction(menuitemOutputStr(WMSBillOfLadingOriginal), MenuItemType::Output);
                args.record(WMSBillOfLading::find_RU(inventTransferJour.BillOfLadingId_RU));
                menuFunction.run(args);
            }

            if (this.parmInventTransferParmTable().PrintInvoice_RU &&
                this.parmInventTransferParmTable().ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU)
            {
                PrintoutTableReports_RU::createTransferInvoiceM15(inventTransferJour);
                menuFunction = new MenuFunction(menuitemOutputStr(InventTransferInvoiceM15_RU), MenuItemType::Output);
                args.record(inventTransferJour);
                menuFunction.run(args);
            }
            if (this.parmInventTransferParmTable().PrintTransportInvoice_RU && inventTransferJour.BillOfLadingId_RU)
            {
                menuFunction = new MenuFunction(menuitemOutputStr(WMSTransportInvoiceReport_RU), MenuItemType::Output);
                args.record(WMSBillOfLading::find_RU(inventTransferJour.BillOfLadingId_RU));
                menuFunction.run(args);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>