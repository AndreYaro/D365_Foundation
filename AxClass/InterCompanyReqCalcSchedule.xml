<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyReqCalcSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanyReqCalcSchedule </c>class controls the execution of several master scheduling in
/// the intercompany companies.
/// </summary>
class InterCompanyReqCalcSchedule extends RunBaseBatch implements BatchRetryable
{
    #req

    // Parameters

    NumberOf                numberOfIteration;
    ReqCalcUpdate           reqCalcUpdateFirst;
    ReqCalcUpdate           reqCalcUpdateSubSeq;
    ReqProcessNumThreads    maxChildThreads;
    boolean                 isTaskTraceEnabled;
    ReqPlanManager          reqPlanManager;

    ReqIntercompanyPlanningGroupRecId    intercompanyGroup;

    Set                     lockedPlanVersions;

    // Dialog

    Dialog                  dialog;
    DialogGroup             dialogIntercompanyGroupGroup;
    DialogGroup             dialogIteration;
    DialogField             dialogIntercompanyGroup;
    DialogField             dialogNumberOfIteration;
    DialogGroup             dialogPrinciple;
    DialogField             dialogReqCalcUpdateFirst;
    DialogField             dialogReqCalcUpdateSubSeq;
    DialogField             dflmaxChildThreads;
    DialogField             dflIsTaskTraceEnabled;
    private Set             dataAreaIds;

    private boolean reqBatchTasksSchedulingFixToggleEnabled;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        numberOfIteration,
        reqCalcUpdateFirst,
        reqCalcUpdateSubSeq,
        maxChildThreads,
        isTaskTraceEnabled,
        intercompanyGroup
    #ENDMACRO

    #DEFINE.Version2(2)
    #LOCALMACRO.Version2List
        numberOfIteration,
        reqCalcUpdateFirst,
        reqCalcUpdateSubSeq,
        maxChildThreads,
        isTaskTraceEnabled
    #ENDMACRO

    #DEFINE.Version1(1)
    #LOCALMACRO.Version1List
        numberOfIteration,
        reqCalcUpdateFirst,
        reqCalcUpdateSubSeq
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateTypeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether net change is used in the first iteration of an intercompany master planning run.
    /// </summary>
    /// <param name="_intercompanyGroup">
    ///    A <c>ReqIntercompanyPlanningGroupRecId</c> value that indicates the group for which to check
    ///    whether a net change is run.
    /// </param>
    /// <param name="_reqCalcUpdate">
    ///    A <c>ReqCalcUpdate</c> enumeration value that indicates for which update type the check is
    ///    performed.
    /// </param>
    /// <param name="_throwOnError">
    ///    A Boolean value that indicates whether to throw an error exception in the infolog or post and
    ///    infolog warning.
    /// </param>
    /// <returns>
    ///    A Boolean that indicates whether net change is used in the first iteration of an intercompany
    ///    master planning run.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is called without specifying an intercompany planning group.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Net change is not allowed to be used for the configuration defined by the given intercompany
    ///    planning group.
    /// </exception>
    public boolean checkUpdateTypeAllowed(ReqIntercompanyPlanningGroupRecId  _intercompanyGroup,
                                          ReqCalcUpdate                      _reqCalcUpdate,
                                          boolean                            _throwOnError = false)
    {
        ReqIntercompanyPlanningGroupMember  intercompanyGroupMember;
        ReqParameters                       reqParameters;
        str                                 errorString;        

        if (    _reqCalcUpdate != ReqCalcUpdate::NetChange
            &&  _reqCalcUpdate != ReqCalcUpdate::NetChangeMinimized)
        {
            return true;
        }

        if (!_intercompanyGroup)
        {
            errorString = strFmt("@SYS118115", funcName());
            if (_throwOnError)
            {
                throw error(errorString);
            }
            else
            {
                return checkFailed(errorString);
            }
        }

        select firstonly crosscompany IntercompanyPlanDataAreaId, IntercompanyPlanId from intercompanyGroupMember
        where intercompanyGroupMember.PlanningGroup == _intercompanyGroup
        exists join reqParameters
        where   reqParameters.DataAreaId                    == intercompanyGroupMember.IntercompanyPlanDataAreaId
        &&      reqParameters.CurrentReqPlanIdSchedDynamic  != intercompanyGroupMember.IntercompanyPlanId;

        if (intercompanyGroupMember)
        {
            errorString = strFmt("@SYS343740", intercompanyGroupMember.IntercompanyPlanId, intercompanyGroupMember.IntercompanyPlanDataAreaId);

            if (_throwOnError)
            {
                throw error(errorString);
            }
            else
            {
                return checkFailed(errorString);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqCalcScheduleItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>ReqCalcScheduleItemTable</c> instance that is used for running master planning in each
    ///    company.
    /// </summary>
    /// <returns>
    ///    A new <c>ReqCalcScheduleItemTable</c> instance.
    /// </returns>
    protected ReqCalcScheduleItemTable createReqCalcScheduleItemTable()
    {
        return ReqCalcScheduleItemTable::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup           parametersGroup;

        dialog = super();

        dialogIntercompanyGroup     = dialog.addFieldValue(extendedTypeStr(ReqIntercompanyPlanningGroupRecId), intercompanyGroup);

        dialogPrinciple             = dialog.addGroup("@SCM:PlanningMethod");
        dialogNumberOfIteration     = dialog.addFieldValue(extendedTypeStr(NumberOf),numberOfIteration,'@SCM:ReqInterCompanyIterations',"@SYS342510");
        dialogReqCalcUpdateFirst    = dialog.addFieldValue(enumStr(ReqCalcUpdate),reqCalcUpdateFirst,"@SYS93943");
        dialogReqCalcUpdateSubSeq   = dialog.addFieldValue(enumStr(ReqCalcUpdate),reqCalcUpdateSubSeq,"@SYS93944");

        // Check task process duration
        parametersGroup = dialog.addGroup("@SYS331796");

        dflIsTaskTraceEnabled   = dialog.addFieldValue(enumStr(NoYes), isTaskTraceEnabled, "@SYS107551", "@SYS107552");
        parametersGroup.addFieldname(dflIsTaskTraceEnabled.name());
        dflmaxChildThreads      = dialog.addFieldValue(extendedTypeStr(ReqProcessNumThreads), maxChildThreads);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            intercompanyGroup   = dialogIntercompanyGroup.value();
            numberOfIteration   = dialogNumberOfIteration.value();
            reqCalcUpdateFirst  = dialogReqCalcUpdateFirst.value();
            reqCalcUpdateSubSeq = dialogReqCalcUpdateSubSeq.value();
            maxChildThreads = dflmaxChildThreads.value();
            isTaskTraceEnabled = dflIsTaskTraceEnabled.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlansToLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set of master plans that must be locked.
    /// </summary>
    /// <returns>
    /// The set of master plans.
    /// </returns>
    protected Set getPlansToLock()
    {
        Set                                 set = new Set(Types::Record);
        ReqParameters                       reqParameters;
        ReqIntercompanyPlanningGroupMember  intercompanyGroupMember;

        while select IntercompanyPlanDataAreaId, IntercompanyPlanId, CopyToDynamicPlan, CopyToStaticPlan from intercompanyGroupMember
        where intercompanyGroupMember.PlanningGroup   == intercompanyGroup
        {
            changecompany (intercompanyGroupMember.IntercompanyPlanDataAreaId)
            {
                set.add(ReqPlan::findReqPlanId(intercompanyGroupMember.IntercompanyPlanId));

                reqParameters = ReqParameters::find();
                if (intercompanyGroupMember.IntercompanyPlanId == reqParameters.CurrentReqPlanIdSchedStatic
                    && reqParameters.AutoCopyStaticPlan
                    && reqParameters.CurrentReqPlanIdSchedDynamic)
                {
                    set.add(ReqPlan::findReqPlanId(reqParameters.CurrentReqPlanIdSchedDynamic));
                }

                if (intercompanyGroupMember.CopyToDynamicPlan && reqParameters.CurrentReqPlanIdSchedDynamic)
                {
                    set.add(ReqPlan::findReqPlanId(reqParameters.CurrentReqPlanIdSchedDynamic));
                }

                if (intercompanyGroupMember.CopyToStaticPlan && reqParameters.CurrentReqPlanIdSchedStatic)
                {
                    set.add(ReqPlan::findReqPlanId(reqParameters.CurrentReqPlanIdSchedStatic));
                }
            }
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockPlanVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Acquires the lock on all specified master plans.
    /// </summary>
    /// <param name="_planSet">
    ///     The set of master plans.
    /// </param>
    /// <returns>
    ///     The set of locked plan versions.
    /// </returns>
    protected Set lockPlanVersions(Set _planSet)
    {
        SetEnumerator   enumerator = _planSet.getEnumerator();
        Set             planVersionSet = new Set(Types::Record);
        ReqPlanVersion  lockedPlanVersion;
        ReqPlan         plan;

        while (enumerator.moveNext())
        {
            plan = enumerator.current();
            lockedPlanVersion = reqPlanManager.acquireUpdateLockOnActiveVersionInCmp(plan.DataAreaId, plan.ReqPlanId);
            if (lockedPlanVersion)
            {
                //if the locking of the plan succeeded
                planVersionSet.add(lockedPlanVersion);
            }
        }

        return planVersionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        reqPlanManager = ReqPlanManager::construct();
		
		reqCalcUpdateFirst  = ReqCalcUpdate::Regeneration;
        reqCalcUpdateSubSeq = ReqCalcUpdate::NetChange;

        reqBatchTasksSchedulingFixToggleEnabled = ReqBatchTasksSchedulingFixToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyGroup</Name>
				<Source><![CDATA[
    public ReqIntercompanyPlanningGroupRecId parmIntercompanyGroup(ReqIntercompanyPlanningGroupRecId _intercompanyGroup = intercompanyGroup)
    {
        intercompanyGroup = _intercompanyGroup;
        return intercompanyGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfIterations</Name>
				<Source><![CDATA[
    public NumberOf parmNumberOfIterations(NumberOf _numberOfIteration = numberOfIteration)
    {
        numberOfIteration = _numberOfIteration;
        return numberOfIteration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqCalcUpdateFirst</Name>
				<Source><![CDATA[
    public ReqCalcUpdate parmReqCalcUpdateFirst(ReqCalcUpdate _reqCalcUpdateFirst = reqCalcUpdateFirst)
    {
        reqCalcUpdateFirst = _reqCalcUpdateFirst;
        return reqCalcUpdateFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqCalcUpdateSubSeq</Name>
				<Source><![CDATA[
    public ReqCalcUpdate parmReqCalcUpdateSubSeq(ReqCalcUpdate _reqCalcUpdateSubSeq = reqCalcUpdateFirst)
    {
        reqCalcUpdateSubSeq = _reqCalcUpdateSubSeq;
        return reqCalcUpdateSubSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanManager</Name>
				<Source><![CDATA[
    public ReqPlanManager parmReqPlanManager(ReqPlanManager _reqPlanManager = reqPlanManager)
    {
        reqPlanManager = _reqPlanManager;

        return reqPlanManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        int             iteration;
        CompanyInfo     companyInfo;
        ReqCalcUpdate   reqCalcUpdate;
        boolean         isLastIteration;

        ReqIntercompanyPlanningGroupMember intercompanyGroupMember;

        try
        {
            setPrefix("@SYS93946");

            dataAreaIds = new Set(Types::String);

            if (!intercompanyGroup)
            {
                throw error("@SYS334915");
            }

            lockedPlanVersions = this.lockPlanVersions(this.getPlansToLock());

            this.runCheckUpdateTypeAllowedForReqCalcUpdt(numberOfIteration, intercompanyGroup, true);

            for (iteration = 1; iteration <= numberOfIteration; iteration++)
            {
                setPrefix(strFmt("@SYS96655",iteration));

                isLastIteration = iteration == numberOfIteration;

                reqCalcUpdate = iteration == 1 ? reqCalcUpdateFirst : reqCalcUpdateSubSeq;

                while select SequenceNumber, IntercompanyPlanId, CopyToDynamicPlan, CopyToStaticPlan from intercompanyGroupMember
                    order by SequenceNumber
                    where intercompanyGroupMember.PlanningGroup == intercompanyGroup
                    join DataArea from companyInfo
                    where companyInfo.RecId == intercompanyGroupMember.LegalEntity
                {
                    this.runReqCalcInOneCompany(
                        companyInfo.DataArea,
                        intercompanyGroupMember.IntercompanyPlanId,
                        reqCalcUpdate,
                        intercompanyGroupMember.CopyToStaticPlan && isLastIteration,
                        intercompanyGroupMember.CopyToDynamicPlan && isLastIteration);
                }
            }

            Set planVersionsToCleanup = lockedPlanVersions.clone();
            this.unlockPlanVersions(lockedPlanVersions);

            if (   reqCalcUpdateFirst == ReqCalcUpdate::Regeneration
                || (numberOfIteration > 1 && reqCalcUpdateSubSeq == ReqCalcUpdate::Regeneration))
            {
                this.processBackgroundCleanupTasks(planVersionsToCleanup);
            }


            info("@SYS28664");
        }
        finally
        {
            if (reqPlanManager)
            {
                reqPlanManager.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeprecatedFunctionality</Name>
				<Source><![CDATA[
    private void checkDeprecatedFunctionality()
    {
        if (!ReqDeprecatedFunctionalitySharedParameters::find().IsIntercompanyGroupDownstreamDemandDeprecated)
        {
            warning("@SCM:ReqDeprecatedIntercompanyGroupDownstreamDemandWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCheckUpdateTypeAllowedForReqCalcUpdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether net change can be used in the first and second iteration of an intercompany master
    /// planning run.
    /// </summary>
    /// <param name="_numberOfIterations">
    /// The <c>NumberOf</c> value that indicates the number of iterations.
    /// </param>
    /// <param name="_intercompanyGroup">
    /// A <c>ReqIntercompanyPlanningGroupRecId</c> value that indicates the group for which to check
    /// whether net change can be run.
    /// </param>
    /// <param name="_throwOnError">
    /// Set to true in order to throw an error exception in the Infolog, set to false to post an Infolog
    /// warning instead.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether a net change can be used both in the first and in the second
    /// iteration of an intercompany master planning run.
    /// </returns>
    /// <remarks>
    /// This method also checks for the special case of one iteration.
    /// </remarks>
    public boolean runCheckUpdateTypeAllowedForReqCalcUpdt(NumberOf                            _numberOfIterations,
                                                           ReqIntercompanyPlanningGroupRecId  _intercompanyGroup,
                                                           boolean                            _throwOnError = false)
    {
        boolean     ret;

        ret = this.checkUpdateTypeAllowed(_intercompanyGroup, reqCalcUpdateFirst, _throwOnError);

        // No need to validate update mode when there is only 1 iteration, as the selected principle for the first and only iteration is OK
        if (_numberOfIterations > 1)
        {
            // Check whether is it allowed to run the selected update mode
            ret = ret && this.checkUpdateTypeAllowed(_intercompanyGroup, reqCalcUpdateSubSeq, _throwOnError);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReqCalcInOneCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes master planning in one company as part of an intercompany master planning run.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID in which to execute master planning.
    /// </param>
    /// <param name="_planId">
    /// The master plan ID to execute the planning in.
    /// </param>
    /// <param name="_reqCalcUpdate">
    /// The master planning update mode (regeneration, net change, etc.).
    /// </param>
    /// <param name="_copyToStaticPlan">
    /// A Boolean value specifying whether to perform copying to the static plan.
    /// </param>
    /// <param name="_copyToDynamicPlan">
    /// A Boolean value specifying whether to perform copying to the dynamic plan.
    /// </param>
    [SuppressBPWarning('BPUpgradeCodeRunBaseRunCalled', 'The code cannot run in the new session because of event subscriptions.')]
    protected void runReqCalcInOneCompany(dataAreaId    _companyId,
                                          ReqPlanId     _planId,
                                          ReqCalcUpdate _reqCalcUpdate,
                                          boolean       _copyToStaticPlan,
                                          boolean       _copyToDynamicPlan)
    {
        dataAreaIds.add(_companyId);

        changecompany(_companyId)
        {
            setPrefix(strFmt("@SYS93821", TradeInterCompany::curCompanyName()));

            var reqCalcScheduleItemTable = this.createReqCalcScheduleItemTable();
            reqCalcScheduleItemTable.parmReqPlanId(_planId);
            reqCalcScheduleItemTable.parmReqCalcUpdate(_reqCalcUpdate);
            reqCalcScheduleItemTable.parmAutoReserveCoverage(false);
            reqCalcScheduleItemTable.parmInterCompanyCalc(true);
            reqCalcScheduleItemTable.parmIntercompanyGroup(intercompanyGroup);
            reqCalcScheduleItemTable.parmClearLog(false);
            reqCalcScheduleItemTable.parmMaxChildThreads(maxChildThreads);
            reqCalcScheduleItemTable.parmIsTaskTraceEnabled(isTaskTraceEnabled);
            reqCalcScheduleItemTable.parmReqPlanManager(reqPlanManager);
            reqCalcScheduleItemTable.parmDoNotDisposeReqPlanManager(true);
            reqCalcScheduleItemTable.parmAutoUpdateDynamicPlan(_copyToDynamicPlan);
            reqCalcScheduleItemTable.parmAutoUpdateStaticPlan(_copyToStaticPlan);
            reqCalcScheduleItemTable.planVersionSwitched += eventhandler(this.updatePlanVersionLocks);
            // We should not be attempting restart/resume as the feature does not yet support intercompany MRP.
            // For this we would have to restart/resume IntercompanyRqCalcSchedule class, and retrieve the stage in which the intercompany run crashed.
            reqCalcScheduleItemTable.parmReqCalcInstanceIsRestartable(false);

            if (this.isInBatch())
            {
                if (reqBatchTasksSchedulingFixToggleEnabled)
                {
                    reqCalcScheduleItemTable.parmCurrentBatch(this.parmCurrentBatch());
                    reqCalcScheduleItemTable.parmInBatch(true);
                }
                else
                {
                    reqCalcScheduleItemTable.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
                }
            }

            //the object has a special setup therefore run method should be called instead of runOperation
            reqCalcScheduleItemTable.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockPlanVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the lock on all specified master plan versions.
    /// </summary>
    /// <param name="_planVersionSet">
    ///     The set of master plan versions.
    /// </param>
    protected void unlockPlanVersions(Set _planVersionSet)
    {
        SetEnumerator enumerator = _planVersionSet.getEnumerator();

        while (enumerator.moveNext())
        {
            reqPlanManager.releaseLockOnPlanVersion(enumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            case #Version2:
                [version, #Version2List] = packedClass;
                break;
            case #Version1:
                [version, #Version1List] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanVersionLocks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the locks when master plan versions are activated or deactivated.
    /// </summary>
    /// <param name="_deactivatedVersion">
    /// The deactivated master plan version.
    /// </param>
    /// <param name="_activatedVersion">
    /// The activated master plan version.
    /// </param>
    public void updatePlanVersionLocks(ReqPlanVersion _deactivatedVersion, ReqPlanVersion _activatedVersion)
    {
        if (!lockedPlanVersions.in(_activatedVersion))
        {
            reqPlanManager.acquireUpdateLockOnPlanVersion(_activatedVersion);
            lockedPlanVersions.add(_activatedVersion);
        }

        if (lockedPlanVersions.in(_deactivatedVersion))
        {
            reqPlanManager.releaseLockOnPlanVersion(_deactivatedVersion);
            lockedPlanVersions.remove(_deactivatedVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && !intercompanyGroup)
        {
            ret = checkFailed("@SYS334915");
        }

        if (ret && dialogNumberOfIteration.value() > 30)
        {
            ret = checkFailed("@SYS96344");
        }

        if (ret && dialogNumberOfIteration.value() <= 0)
        {
            ret = checkFailed("@SYS112843");
        }

        ret = ret && this.runCheckUpdateTypeAllowedForReqCalcUpdt(dialogNumberOfIteration.value(), intercompanyGroup)
                  && ReqCalc::validateMaxChildThreads(this, this.maxChildThreads);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InterCompanyReqCalcSchedule construct()
    {
        return new InterCompanyReqCalcSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS93946";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InterCompanyReqCalcSchedule::promptAndRun(new InterCompanyReqCalcSchedule());
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndRun</Name>
				<Source><![CDATA[
    public static void promptAndRun(InterCompanyReqCalcSchedule _interCompanyReqCalcSchedule)
    {
        if (!_interCompanyReqCalcSchedule.prompt())
            return;

        _interCompanyReqCalcSchedule.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBackgroundCleanupTasks</Name>
				<Source><![CDATA[
    private void processBackgroundCleanupTasks(Set _planVersionsToCleanup)
    {
        ReqBackgroundJobService reqBackgroundJobService = ReqBackgroundJobService::newBatchHeader();

        reqBackgroundJobService.parmTriggeredBy(classStr(InterCompanyReqCalcSchedule));
        reqBackgroundJobService.parmDataAreaIds(dataAreaIds);
        reqBackgroundJobService.batchHeader().parmCaption("@SCM:MRPIntercompanyBackgroundJobCaption");
        reqBackgroundJobService.parmGroupId(this.parmCurrentBatch().GroupId);

        SetEnumerator enumerator = _planVersionsToCleanup.getEnumerator();
        while (enumerator.moveNext())
        {
            reqBackgroundJobService.addPlanVersionCleanupTask(enumerator.current());
        }

        reqBackgroundJobService.addOrphanedPlanVersionCleanupTask();

        reqBackgroundJobService.start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>