<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationProcessorBase</c> class is a base retail document operation processor contains shared operation updating logic.
/// Subclasses should focus on implementing processing logic (business) - processInternal().
/// </summary>
internal abstract class RetailDocumentOperationProcessorBase
{
    // the following constants are the expected indexes of the container returned by the processInternal
    internal const int IsSuccessIndex = 1;
    internal const int ErrorMessageIndex = 2;
    internal const int ResponseDocumentIndex = 3;
    
    protected int64 operationRecId;
    protected boolean isRetriable = true;

    protected RetailDocumentOperation retailDocumentOperation;
    protected RetailDocumentOperationConfigurationBase operationConfiguration;
    protected RetailDocumentOperationProcessingErrorCode errorCode;
    protected str errorMessage;
    protected container responseContainer;
    protected container requestContainer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shared protected constructor for all subclasses, reducing duplicate code.
    /// </summary>
    /// <param name = "_parameters">The parameters for a processor.</param>
    protected void new(RetailDocumentOperationProcessorParameters _parameters)
    {
        this.operationRecId = _parameters.getOperationRecId();
        if (this.operationRecId)
        {
            this.retailDocumentOperation = RetailDocumentOperation::findByOperationRecId(this.operationRecId);
            if (!retailDocumentOperation.RecId)
            {
                throw error(enum2Str(RetailDocumentOperationProcessingErrorCode::OperationNotFound));
            }
            this.operationConfiguration = RetailDocumentOperationConfigurationManager::instance.getOperationConfiguration(this.retailDocumentOperation.OperationName);

            if (_parameters.getCachedRequestContainer() != conNull())
            {
                this.requestContainer = _parameters.getCachedRequestContainer();
            }
            else
            {
                this.requestContainer = this.retailDocumentOperation.RequestContainer;
            }
        }
        else
        {
            throw error(enum2Str(RetailDocumentOperationProcessingErrorCode::OperationNotFound));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts processing document, shared method of all subclasses.
    /// </summary>
    /// <exception cref="Exception::Error">The input document is invalid or failed to be processed.</exception>
    public void process()
    {
        System.Diagnostics.Stopwatch documentOperationStopWatch = new System.Diagnostics.Stopwatch();
        System.Exception exception;
        Counter infologline = infolog.num();
        int fromLine = Global::infologLine();

        try
         {
            changecompany (this.retailDocumentOperation.Company)
            {
                this.markStatusAsProcessing();
                documentOperationStopWatch.Start();
                RetailDocumentOperationLogger::logOperationProcessInternalStart(this.retailDocumentOperation.RequestId, this.operationRecId, this.retailDocumentOperation.OperationName);
                this.responseContainer = this.processInternal();
                documentOperationStopWatch.Stop();
                RetailDocumentOperationLogger::logOperationProcessInternalFinished(this.retailDocumentOperation.RequestId, this.operationRecId, this.retailDocumentOperation.OperationName, documentOperationStopWatch.ElapsedMilliseconds);
                this.markStatusAsCompleted(true);
            }
        }
        catch (exception)
        {
            RetailDocumentOperationLogger::logOperationProcessInternalException(this.retailDocumentOperation.RequestId, this.operationRecId, this.retailDocumentOperation.OperationName, RetailDocumentOperationProcessorBase::exceptionToString(exception), this.errorMessage);
            if (this.errorCode == RetailDocumentOperationProcessingErrorCode::OperationNotFound)
            {
                // if operation not found, throw it directly. 
                // no way to update it
                throw error(this.errorMessage);
            }

            if (!this.errorMessage)
            {
                this.errorCode = RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed;
                this.errorMessage = RetailTransactionServiceUtilities::getInfologMessages(fromLine) + exception.Message;
            }

            this.markStatusAsCompleted(false);
            throw error(this.errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the processing error code.
    /// </summary>
    /// <returns>The processing error Code.</returns>
    public RetailDocumentOperationProcessingErrorCode getErrorCode()
    {
        return this.errorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the processing error message. 
    /// </summary>
    /// <returns>The processing error message.</returns>
    public str getErrorMessage()
    {
        return this.errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the response container after processing.
    /// </summary>
    /// <returns>The response container.</returns>
    public container getResponseContainer()
    {
        return this.responseContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the request container after processing.
    /// </summary>
    /// <returns>The request container.</returns>
    public container getRequestContainer()
    {
        return this.requestContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operation record id.
    /// </summary>
    /// <returns>The operation record id.</returns>
    public int64 getOperationRecId()
    {
        return this.operationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operation request id.
    /// </summary>
    /// <returns>The operation request id.</returns>
    public guid getRequestId()
    {
        return this.retailDocumentOperation.RequestId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operation name.
    /// </summary>
    /// <returns>The operation name.</returns>
    public str getOperationName()
    {
        return this.retailDocumentOperation.OperationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts to process the request document and save result, should be implement in subclasses.
    /// </summary>
    /// <returns>A container object to indicate result documents.</returns>
    /// <exception cref="Exception::Error">The input document is invalid or failed to be processed.</exception>
    protected abstract container processInternal()
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>markStatusAsProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to update the status to processing.
    /// </summary>
    protected void markStatusAsProcessing()
    {
        Batch batch = BatchHeader::getCurrentBatchTask();
        RetailDocumentOperation record = RetailDocumentOperation::findByOperationRecId(this.operationRecId, true);

        if (!record)
        {
            this.throwsException(false, '', RetailDocumentOperationProcessingErrorCode::OperationNotFound);
        }
        else if (record.Status != RetailDocumentOperationStatus::Committed && record.Status != RetailDocumentOperationStatus::Queued)
        {
            this.throwsException(false, '', RetailDocumentOperationProcessingErrorCode::OperationNotReadyForProcessing);
        }
        else
        {
            if (batch != null)
            {
                // if the processor is executed in batch context, set the batch task id accordingly.
                record.BatchId = batch.RecId;
            }
            record.updateAsProcessing();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markStatusAsCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to update the status to succeeded or failed.
    /// </summary>
    /// <param name = "_succeeded">true if the input document is processed successfully; otherwise, false.</param>
    protected void markStatusAsCompleted(boolean _succeeded)
    {
        RetailDocumentOperation record = RetailDocumentOperation::findByOperationRecId(this.operationRecId, true);
        if (!record)
        {
            this.throwsException(false, '' , RetailDocumentOperationProcessingErrorCode::OperationNotFound);
        }
        else if (record.Status != RetailDocumentOperationStatus::Processing)
        {
            this.throwsException(false, '' , RetailDocumentOperationProcessingErrorCode::OperationNotUnderProcessing);
        }

        if (_succeeded)
        {
            record.updateAsSucceeded(this.responseContainer);
        }
        else
        {
            if (this.isRetriable)
            {
                record.updateAsRetriableError(this.errorCode, this.errorMessage);
            }
            else
            {
                record.updateAsFailed(this.errorCode, this.errorMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwsException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Utility function to save and throw exceptions.
    /// </summary>
    /// <param name = "_isRetriable">Is retriable.</param>
    /// <param name = "_errorMessage">Error Message.</param>
    /// <param name = "_errorCode">Error code.</param>
    protected void throwsException(boolean _isRetriable = true, str _errorMessage = '', RetailDocumentOperationProcessingErrorCode _errorCode = RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed)
    {
        this.errorCode = _errorCode;
        this.isRetriable = _isRetriable;
        str errorCodeStr = enum2Str(_errorCode);
        if (_errorMessage)
        {
            this.errorMessage = _errorMessage;
        }
        else
        {
            this.errorMessage = errorCodeStr;
        }

        throw error(errorCodeStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionToString</Name>
				<Source><![CDATA[
    private static str exceptionToString(System.Exception _exception)
    {
        if (_exception != null)
        {
            str exceptionType = _exception.GetType().FullName;
            str stackTrace = _exception.StackTrace != null ? _exception.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            str exceptionToLog = strFmt("Exception Type: %1 / Exception stacktrace: %2", exceptionType, stackTrace);

            return exceptionToLog;
        }
        else
        {
            return strFmt('%1 was called with a null exception. Printing the current call stack: %2', funcName(),  System.Environment::StackTrace);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>