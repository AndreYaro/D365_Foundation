<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableChangeReviewWorkspaceAIProviderDataverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

internal class PurchTableChangeReviewWorkspaceAIProviderDataverse extends PurchTableChangeReviewWorkspaceAIProvider
{
    private const str metricNamespace = 'PurchCopilot';
	private const str solutionName = 'msdyn_SCMAIApp';
	private const str checkSolutionActivity = 'CheckSolution';
	private const str solutionMissingTelemetryLog = 'The dataverse solution is not present in the environment.';
    private const str failedToCheckSolutionTelemetryLog = 'Failed to check solution.';
    private const str failedToCheckSolutionExceptionTelemetryLog = 'Failed to check solution. Exception: %1\n StackTrace: %2';
    private const str failedToGenerateAISummaryTelemetryLog = 'Failed to generate AI summary.';
    private const str failedToGenerateAISummaryExceptionTelemetryLog = 'Failed to generate AI summary. Exception: %1\n StackTrace: %2';
	private const str activityNameLowImpact = 'Summarize.LowImpact';
	private const str activityNameHighImpact = 'Summarize.HighImpact';
	private const str activityNameDownstreamImpact = 'Summarize.DownstreamImpact';
	private const str activityNameComposeMessage = 'ComposeMessage';
    private const str checkSolutionAvailablePropertyKey = 'IsSolutionAvailable';
    private const str checkSolutionNamePropertyKey = 'SolutionName';
    private const str currentUserIdPropertyKey = 'CurUserGuid';

    private boolean isDataverseSolutionAvailable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    public boolean isEnabled()
    {
        return isDataverseSolutionAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getService</Name>
				<Source><![CDATA[
    private static IOrganizationService getService()
    {
        return SysDataverseUtility::GetOrganizationServiceForCurrentUser(classStr(PurchTableChangeReviewWorkspaceAIProviderDataverse));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        if (!PurchTableChangeReviewWorkspaceAIProviderFlight::instance().isEnabled())
        {
            // Can avoid all those calls if the whole AI feature is disabled.
            isDataverseSolutionAvailable = false;
            return;
        }

        SysInstrumentationLogger logger;
        System.Exception ex;
		try
		{
			logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(PurchTableChangeReviewWorkspaceAIProviderDataverse));

			using (var context = logger.activityContext(checkSolutionActivity, metricNamespace))
			{
				if (SysDataverseUtility::IsDataverseLinked())
				{
					IOrganizationService orgService = PurchTableChangeReviewWorkspaceAIProviderDataverse::getService();
                    context.addCustomProperty(checkSolutionNamePropertyKey, solutionName);
					
                    if (orgService && SysDataverseUtility::CheckSolutionExistence(orgService, solutionName))
					{
						isDataverseSolutionAvailable = true;
                        context.addCustomProperty(checkSolutionAvailablePropertyKey, "true");
					}
					else
					{
						logger.logWarning(solutionMissingTelemetryLog);
                        context.addCustomProperty(checkSolutionAvailablePropertyKey, "false");
					}
				}
			}
		}
        catch(ex)
        {
            if (logger)
            {
                logger.logWarning(strFmt(failedToCheckSolutionExceptionTelemetryLog, ex.Message, ex.StackTrace));
            }
        }
		catch
		{
            if (logger)
            {
                logger.logWarning(failedToCheckSolutionTelemetryLog);
            } 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeLowImpact</Name>
				<Source><![CDATA[
    public void summarizeLowImpact(FormRun _formRun, str _formMethodStr, PurchTableChangeReviewDataProvider _provider)
    {
        _formRun.runAsync(classNum(PurchTableChangeReviewWorkspaceAIProviderDataverse), staticMethodStr(PurchTableChangeReviewWorkspaceAIProviderDataverse,summarizeLowImpactAsync),
            [_provider.getLowImpactOrdersCount(), _provider.getLowImpactChangeCount(), _provider.buildOrderTable(false), _provider.getLanguage()], System.Threading.CancellationToken::None, _formMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeHighImpact</Name>
				<Source><![CDATA[
    public void summarizeHighImpact(FormRun _formRun, str _formMethodStr, PurchTableChangeReviewDataProvider _provider)
    {
        _formRun.runAsync(classNum(PurchTableChangeReviewWorkspaceAIProviderDataverse), staticMethodStr(PurchTableChangeReviewWorkspaceAIProviderDataverse,summarizeHighImpactAsync),
            [_provider.getHighImpactOrdersCount(), _provider.getHighImpactChangeCount(), _provider.buildOrderTable(true), _provider.getLanguage()], System.Threading.CancellationToken::None, _formMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeDownstreamImpact</Name>
				<Source><![CDATA[
    public void summarizeDownstreamImpact(FormRun _formRun, str _formMethodStr, PurchTableChangeReviewDataProvider _provider)
    {
        _formRun.runAsync(classNum(PurchTableChangeReviewWorkspaceAIProviderDataverse), staticMethodStr(PurchTableChangeReviewWorkspaceAIProviderDataverse,summarizeDownstreamImpactAsync),
            [_provider.getHighImpactOrdersCount(), _provider.buildImpactTable(), _provider.getLanguage()], System.Threading.CancellationToken::None, _formMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>composeMessage</Name>
				<Source><![CDATA[
    public str composeMessage(boolean _isEmail, str _name, PurchId _purchId, PurchTableChangeReviewDataProvider _provider)
    {
        OrganizationRequest request = new OrganizationRequest('msdyn_PurchTableChangeReviewComposeMessage');
		
        ParameterCollection requestParameters = request.get_Parameters();
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewComposeMessageIsEmail', _isEmail ? 1 : 0);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewComposeMessageRecipientName', _name);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewComposeMessageOrderNumber', _purchId);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewComposeMessageSummaryTable', _provider.getRequirementsTable(_purchId));
        requestParameters.AddOrUpdateIfNotNull('language', _provider.getLanguage());

		str summary =  PurchTableChangeReviewWorkspaceAIProviderDataverse::executeRequest(activityNameComposeMessage, request, 'msdyn_PurchTableChangeReviewComposeMessageResult');

		return summary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLanguageSupported</Name>
				<Source><![CDATA[
    public boolean isLanguageSupported()
    {
        // English is always supported.
        if (strStartsWith(new xInfo().language(), 'en'))
        {
            return true;
        }

        // If not English, than multi-language support flight must be enabled.
        if (!PurchTableChangeReviewWorkspaceAIProviderMultilingualSupportFlight::instance().isEnabled())
        {
            return false;
        }

        // Japanese is not supported for now unless enabled by a flight.
        if (   strStartsWith(new xInfo().language(), 'ja')
            && !PurchTableChangeReviewWorkspaceAIProviderJapanSupportFlight::instance().isEnabled())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeLowImpactAsync</Name>
				<Source><![CDATA[
    public static container summarizeLowImpactAsync(container _parameters)
    {
        int orderCount, changeCount;
        str orderTable;
        LanguageId language;

        [orderCount, changeCount, orderTable, language] = _parameters;

        OrganizationRequest request = new OrganizationRequest('msdyn_PurchTableChangeReviewGenerateLowImpactSummary');
        ParameterCollection requestParameters = request.get_Parameters();
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateLowImpactSummaryChangedOrders', orderCount);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateLowImpactSummaryChangedLines', changeCount);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateLowImpactSummarySummaryTable', orderTable);
        requestParameters.AddOrUpdateIfNotNull('language',  language);

		str summary =  PurchTableChangeReviewWorkspaceAIProviderDataverse::executeRequest(activityNameLowImpact, request, 'msdyn_PurchTableChangeReviewGenerateLowImpactSummaryResult');

        return [summary];
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeHighImpactAsync</Name>
				<Source><![CDATA[
    public static container summarizeHighImpactAsync(container _parameters)
    {
        int orderCount, changeCount;
        str orderTable;
        LanguageId language;

        [orderCount, changeCount, orderTable, language] = _parameters;

        OrganizationRequest request = new OrganizationRequest('msdyn_PurchTableChangeReviewGenerateHighImpactSummary');
        ParameterCollection requestParameters = request.get_Parameters();
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateHighImpactSummaryChangedOrders', orderCount);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateHighImpactSummaryChangedLines', changeCount);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateHighImpactSummarySummaryTable', orderTable);
        requestParameters.AddOrUpdateIfNotNull('language',  language);

		str summary =  PurchTableChangeReviewWorkspaceAIProviderDataverse::executeRequest(activityNameHighImpact, request, 'msdyn_PurchTableChangeReviewGenerateHighImpactSummaryResult');

		return [summary];
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeDownstreamImpactAsync</Name>
				<Source><![CDATA[
    public static container summarizeDownstreamImpactAsync(container _parameters)
    {
        int orderCount;
        str orderTable;
        LanguageId language;

        [orderCount, orderTable, language] = _parameters;

        OrganizationRequest request = new OrganizationRequest('msdyn_PurchTableChangeReviewGenerateDownstreamImpactSummary');
        ParameterCollection requestParameters = request.get_Parameters();
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateDownstreamImpactSummaryChangedOrders', orderCount);
		requestParameters.AddOrUpdateIfNotNull('msdyn_PurchTableChangeReviewGenerateDownstreamImpactSummarySummaryTable', orderTable);
        requestParameters.AddOrUpdateIfNotNull('language',  language);

		str summary =  PurchTableChangeReviewWorkspaceAIProviderDataverse::executeRequest(activityNameDownstreamImpact, request, 'msdyn_PurchTableChangeReviewGenerateDownstreamImpactSummaryResult');

        return [summary];
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRequest</Name>
				<Source><![CDATA[
    private static str executeRequest(str _requestName, OrganizationRequest _request, str _outputParameterName)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(PurchTableChangeReviewWorkspaceAIProviderDataverse));
        System.Exception ex;
        str requestResponse = "";
		
        try
		{
			using (var context = logger.activityContext(_requestName, metricNamespace))
			{
                context.addCustomProperty(currentUserIdPropertyKey, guid2Str(curUserGuid()));
				IOrganizationService orgService = PurchTableChangeReviewWorkspaceAIProviderDataverse::getService();
				OrganizationResponse response = orgService.Execute(_request);
				ParameterCollection results = response.get_Results();
                requestResponse = results.get_Item(_outputParameterName);
                
                return requestResponse;
			}
		}
        catch(ex)
        {
            if (logger)
            {
                logger.logWarning(strFmt(failedToGenerateAISummaryExceptionTelemetryLog, ex.Message, ex.StackTrace));
            }

            return requestResponse;
        }
		catch
		{
            if (logger)
            {
                logger.logWarning(failedToGenerateAISummaryTelemetryLog);
            }

            return requestResponse;
		}
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>