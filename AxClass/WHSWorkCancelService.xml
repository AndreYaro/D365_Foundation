<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCancelService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that cancels the works
/// </summary>
internal final class WHSWorkCancelService extends SysOperationServiceBase
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the canceling of the works.
    /// </summary>
    /// <param name = "_dataContract">The data contract which contains information about the works that will be canceled</param>
    [Hookable(false)]
    internal void execute(WHSWorkCancelDataContract _dataContract)
    {
        List selectedWorkIds = _dataContract.parmSelectedWorkIds();
        ListEnumerator listEnumerator = selectedWorkIds.getEnumerator();
        boolean errorOccurred = false;

        UnknownNoYes cancelReplenishmentWorkWithDependentWork = this.cancelReplenishmentWorkWithDependentWork(_dataContract.parmCancelReplenishmentWorkWithDependentWork());

        while (listEnumerator.moveNext())
        {
            WHSWorkId workId = listEnumerator.current();

            if (this.cancelWork(workId, cancelReplenishmentWorkWithDependentWork) == false)
            {
                errorOccurred = true;
            }
        }

        if (errorOccurred && this.isExecutingInBatch())
        {
            throw error("@WAX:SomeWorksHaveNotBeenCanceled");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelReplenishmentWorkWithDependentWork</Name>
				<Source><![CDATA[
    private UnknownNoYes cancelReplenishmentWorkWithDependentWork(NoYes _cancelDemandWorkLine)
    {
        return WHSValidateReplenWorkBeforeCancelFlight::instance().isEnabled()
                ? (_cancelDemandWorkLine == NoYes::Yes ? UnknownNoYes::Yes : UnknownNoYes::No)
                : UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    private boolean cancelWork(WHSWorkId _workId, UnknownNoYes _cancelReplenishmentWorkWithDependentWork)
    {
        boolean ret = true;

        try
        {
            WHSWorkTable::cancelWorkValidateWorkNotAssignedToActiveCluster(_workId, _cancelReplenishmentWorkWithDependentWork);
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw;
            }

            if (xSession::currentRetryCount() >= #RetryNum)
            {
                ret = false;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                ret = false;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                ret = false;
            }
            else
            {
                retry;
            }
        }
        catch
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>