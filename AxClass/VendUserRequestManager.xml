<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendUserRequestManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendUserRequestManager extends UserRequestManager
{
    ContactPerson contactPerson;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAddUserRequestCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether user request creation is enabled based on the current state of the
    /// <c>UserRequestManager</c> object.
    /// </summary>
    /// <returns>
    /// true if the user request can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> table can override this method to check the status.
    /// </remarks>
    public boolean allowAddUserRequestCreate()
    {
        boolean ret;

        ret = !this.allowInactivateUserRequestCreate();

        ret = ret && contactPerson.Party != DirPersonUser::current().PersonParty;

        if (ret)
        {
            ret = VendTable::findByPartyRecId(contactPerson.ContactForParty).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInactivateUserRequestCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether user request creation is enabled based on the current state of the
    /// <c>UserRequestManager</c> object
    /// </summary>
    /// <returns>
    /// true if the user request can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sub types of <c>UserRequest</c> table can override this method to check the status.
    /// </remarks>
    public boolean allowInactivateUserRequestCreate()
    {
        UserExternalParty userExternalParty;
        DirPersonUser personUser;
        boolean ret;

        if (contactPerson.RecId != 0 && contactPerson.Party != DirPersonUser::current().PersonParty)
        {
            select firstonly RecId from personUser
                exists join userExternalParty
                where personUser.User == userExternalParty.User
                && personUser.PersonParty == contactPerson.Party
                && userExternalParty.ExternalEntityType == UserExternalPartyEntityType::Vendor
                && userExternalParty.LegalEntity ==
                                                    contactPerson.companyInfo().RecId
                && userExternalParty.ExternalParty == contactPerson.ContactForParty;

            return personUser.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateUserRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates user relations to the user for the user request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to associate user relations.
    /// </param>
    protected void associateUserRelations(UserRequest _userRequest)
    {
        VendUserRequest vendUserRequest = _userRequest as VendUserRequest;

        super(_userRequest);

        if (!UserExternalParty::existRelation(
            vendUserRequest.User,
            UserExternalPartyEntityType::Vendor,
            vendUserRequest.vendorParty(),
            vendUserRequest.VendorDataAreaId))
        {
            UserExternalParty::createRelation(
                vendUserRequest.User,
                UserExternalPartyEntityType::Vendor,
                vendUserRequest.vendorParty(),
                vendUserRequest.VendorDataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an external entity type that is associated with the <c>VendUserRequestManager</c> object.
    /// </summary>
    /// <returns>
    /// The <c>UserExternalPartyEntityType::Vendor</c> external entity type.
    /// </returns>
    public UserExternalPartyEntityType entityType()
    {
        return UserExternalPartyEntityType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default company for new users.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to get the default company.
    /// </param>
    /// <returns>
    /// The ID of the company account.
    /// </returns>
    protected DataAreaId getDefaultCompany(UserRequest _userRequest)
    {
        VendUserRequest vendUserRequest = _userRequest as VendUserRequest;

        return vendUserRequest.VendorDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDomain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the domain for the user request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to get the domain.
    /// </param>
    /// <returns>
    /// The domain for the user request.
    /// </returns>
    /// <remarks>
    /// For claims-based requests, the domain will be the claims provider name.
    /// </remarks>
    public NetworkDomain getDomain(UserRequest _userRequest)
    {
        NetworkDomain domain;

        if (_userRequest.AuthenticationMode == UserRequestAuthenticationMode::ActiveDirectory
            || _userRequest.AuthenticationMode == UserRequestAuthenticationMode::AzureAcs)
        {
            domain = super(_userRequest);
        }
        else
        {
            domain = UserRequestParameters::find().VendorProviderName;
        }

        return domain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewUserEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the e-mail template ID for the new user notification.
    /// </summary>
    /// <returns>
    /// The e-mail template ID.
    /// </returns>
    public SysEmailSystemId getNewUserEmailTemplate()
    {
        return UserRequestParameters::find().VendorNewUserEmailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPortalSiteUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint portal base URL for the user request.
    /// </summary>
    /// <returns>
    /// The SharePoint portal base URL.
    /// </returns>
    public URL getPortalSiteUrl()
    {
        return UserRequestParameters::find().editVendorSelfServiceWebsiteUrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactiveUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inactivates the user who is associated to the request.
    /// </summary>
    /// <param name="_userRequest">
    /// The user request for which to inactivate the user.
    /// </param>
    public void inactiveUser(UserRequest _userRequest)
    {
        VendUserRequest     request = _userRequest as VendUserRequest;

        UserExternalParty::removeRelation(_userRequest.User,
                                        this.entityType(),
                                        request.vendorParty(),
                                        request.VendorDataAreaId);

        super(_userRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>UserRequestManager</c> object by using a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record.
    /// </param>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> table can override this method to initialize the request.
    /// </remarks>
    public void initFrom(Common _relatedRecord)
    {
        if (_relatedRecord is ContactPerson)
        {
            contactPerson = _relatedRecord as ContactPerson;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a table ID that is related to the <c>UserRequestManager</c> object.
    /// </summary>
    /// <returns>
    /// The table ID that inherits from the <c>UserRequest</c> table.
    /// </returns>
    public TableId tableId()
    {
        return tableNum(VendUserRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustUserRequestManager</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CustUserRequestManager</c> class.
    /// </returns>
    public static VendUserRequestManager construct()
    {
        return new VendUserRequestManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>