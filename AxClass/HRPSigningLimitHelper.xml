<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPSigningLimitHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HRPSigningLimitHelper
{
    boolean isEditMode;
    HRPLimitRequest limitRequest;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HRPSigningLimitHelper construct(Args _args)
    {
        if (!_args || !_args.caller())
        {
            // Form cannot be called directly.
            throw error("@SYS96590");
        }

        HRPSigningLimitHelper signingLimitHelper = new HRPSigningLimitHelper();

        if (_args.menuItemName() == MenuItemDisplayStr(EssPersonSigningLimitEdit))
        {
            signingLimitHelper.isEditMode(true);
            signingLimitHelper.parmLimitRequest(_args.record());
        }

        return signingLimitHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method determines the state of the <c>EssSigningLimitEntry</c> form.
    /// </summary>
    /// <param name="_isEditMode">
    ///    This parameter is set to true if the <c>HRPLimitRequest</c> record is being edited; otherwise false.
    /// </param>
    public boolean isEditMode(boolean _isEditMode = isEditMode)
    {
        isEditMode = _isEditMode;
        return isEditMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLimitRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method sets the <c>HRPLimitRequest</c> record that's being edited.
    /// </summary>
    /// <param name="_limitRequest">
    ///    The <c>HRPLimitRequest</c> record.
    /// </param>
    public HRPLimitRequest parmLimitRequest(HRPLimitRequest _limitRequest = limitRequest)
    {
        limitRequest = _limitRequest;
        return limitRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAgreementTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>HRPLimitTmpAgreement</c> temp table.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    /// Accepts recId from <c>HcmPositionWorkerAssignmentRecId</c> table as parameter.
    /// </param>
    /// <param name="_documentType">
    /// Accepts refRecId of SigningLimitDocument from <c>HRPLimitRequest</c> table as parameter.
    /// </param>
    /// <returns>
    /// A <c>HRPLimitTmpAgreement</c> Tmp table
    /// </returns>
    public HRPLimitTmpAgreement populateAgreementTmpTable(HcmPositionWorkerAssignmentRecId _positionWorkerAssignmentRecId, RefRecId _documentType)
    {
        HRPLimitAgreementAttestation limitAgreementAttestation;
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreement limitAgreement;
        RefRecId jobOrCompensationRecId, ruleId;
        HRPLimitTmpAgreement limitTmpAgreement;
        NoYes isAttested;

        if (isEditMode)
        {
            isAttested = NoYes::Yes;
            insert_recordset limitTmpAgreement(AgreementName, URL, AttestationPeriod, AgreementDetailRecId, IsAttested)
             select AgreementName, URL from limitAgreement
                join AttestationPeriod, RecID, isAttested from limitAgreementDetail
                join limitAgreementAttestation
                    where limitAgreementAttestation.SigningLimitRequest == limitRequest.RecId
                    && limitAgreement.RecId == limitAgreementDetail.SigningLimitAgreement
                    && limitAgreementDetail.RecId == limitAgreementAttestation.LimitAgreementDetail;
        }
        else
        {
            ruleId = HRPLimitAgreementAttestation::getActiveLimitAgreementRule();

            if (ruleId)
            {
                jobOrCompensationRecId = this.getJobOrCompensationRecId(_positionWorkerAssignmentRecId);

                //fetch limit agreement rule details for the given document type
                while select RecId, SigningLimitAgreementRule, SigningLimitDocument from limitAgreementDetail
                        where limitAgreementDetail.SigningLimitAgreementRule == ruleId
                            && limitAgreementDetail.SigningLimitDocument == _documentType
                    join AgreementName, URL from limitAgreement
                        where limitAgreement.RecId == limitAgreementDetail.SigningLimitAgreement
                {                    
                    if (this.allowInsertLimitTmpAgreement(limitAgreementDetail, jobOrCompensationRecId))
                    {
                        limitTmpAgreement.AgreementName = limitAgreement.AgreementName;
                        limitTmpAgreement.URL = limitAgreement.URL;
                        limitTmpAgreement.AttestationPeriod = limitAgreementDetail.AttestationPeriod;
                        limitTmpAgreement.IsAttested = NoYes::No;
                        limitTmpAgreement.AgreementDetailRecId = limitAgreementDetail.RecId;
                        limitTmpAgreement.insert();
                    }
                }
            }
        }

        return limitTmpAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInsertLimitTmpAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not to allow a <c>HRPLimitTmpAgreement</c> buffer to be inserted.
    /// </summary>
    /// <param name = "_limitAgreementDetail">
    /// The <c>HRPLimitAgreementDetail</c> buffer.
    /// </param>
    /// <param name = "_jobOrCompensationRecId">
    /// The job or compensation record ID.
    /// </param>
    /// <returns>
    /// Returns true if a <c>HRPLimitTmpAgreement</c> buffer is to be inserted; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean allowInsertLimitTmpAgreement(HRPLimitAgreementDetail _limitAgreementDetail, RefRecId _jobOrCompensationRecId)
    {
        boolean allowInsertLimitTmpAgreement = !this.isExceptionToRuleGranted(_limitAgreementDetail, _jobOrCompensationRecId);

        return allowInsertLimitTmpAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExceptionToRuleGranted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is an exception to the signing limit request.
    /// </summary>
    /// <param name = "_limitAgreementDetail">
    /// The <c>HRPLimitAgreementDetail</c> buffer.
    /// </param>
    /// <param name = "_jobOrCompensationRecId">
    /// The job or compensation record ID.
    /// </param>
    /// <returns>
    /// Returns true if a job exception or a compensation exception exists for the selected signing limit agreement detail; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean isExceptionToRuleGranted(HRPLimitAgreementDetail _limitAgreementDetail, RefRecId _jobOrCompensationRecId)
    {
        HRPLimitAgreementJobException jobException;
        HRPLimitAgreementCompException compException;
        boolean isExceptionGranted;

        switch (HRPLimitRequest::getLimitBasis())
        {
            case HRPAuthorityBasis::Job:
                //Retrieve job exception
                select firstonly RecId from jobException
                    where jobException.LimitAgreementDetail == _limitAgreementDetail.RecId
                        && jobException.Job == _jobOrCompensationRecId;

                isExceptionGranted = (jobException.RecID != 0);
                break;

            case HRPAuthorityBasis::Compensation:
                //Retrieve compensation exception
                select firstonly RecId from compException
                    where compException.LimitAgreementDetail == _limitAgreementDetail.RecId
                        && compException.CompensationLevel == _jobOrCompensationRecId;

                isExceptionGranted = (compException.RecID != 0);
                break;
        }

        return isExceptionGranted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobOrCompensationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve all the limt agreements.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    /// The record ID from the <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <returns>
    /// A <c>RefRecId</c> of which contain either job recid or compensation recid.
    /// </returns>
    private RefRecId getJobOrCompensationRecId(HcmPositionWorkerAssignmentRecId _positionWorkerAssignmentRecId)
    {
        HcmPositionWorkerAssignment     positionWorkerAssignment;
        HcmJobDetail                    jobDetail;
        HcmPositionDetail               positionDetail;
        HcmJob                          job;
        RefRecId                        jobOrCompensationId;

        //retrieve position worker assignment
        positionWorkerAssignment = HcmPositionWorkerAssignment::find(_positionWorkerAssignmentRecId);

        switch (HRPLimitRequest::getLimitBasis())
        {
            case HRPAuthorityBasis::Job:

                select firstonly Job from positionDetail
                    where positionDetail.Position == positionWorkerAssignment.Position;

                jobOrCompensationId = positionDetail.Job;
                break;

            case HRPAuthorityBasis::Compensation:

                select firstonly CompensationLevel from jobDetail
                    join RecId from job
                        where jobDetail.Job == job.RecId
                    join RecId from positionDetail
                        where job.RecId == positionDetail.Job
                        && positionDetail.Position == positionWorkerAssignment.Position;

                jobOrCompensationId = jobDetail.CompensationLevel;
                break;
        }

        return jobOrCompensationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLimitAgreementAttestation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c>HRPLimitAgreementAttestation</c>
    /// </summary>
    /// <param name="_limitRequest">
    /// Accepts recId from <c>HrpLimitRequest</c> table as parameter.
    /// </param>
    /// <param name="_limitTmpAgreement"> used to filter records
    /// A <c>HRPLimitTmpAgreement</c> used to select records from
    /// </param>
    public void createLimitAgreementAttestation(HRPLimitRequest _limitRequest, HRPLimitTmpAgreement _limitTmpAgreement)
    {
        HRPLimitAgreementAttestation limitAgreementAttestation;
        RecId limitRequestRecId = _limitRequest.RecId;
        ValidFromDateTime effectiveDateTime = _limitRequest.EffectiveDateTime;
        utcdatetime validFrom = DateTimeUtil::utcNow();
        utcdatetime validTo = _limitRequest.ExpirationDateTime;

        select firstonly RecId from limitAgreementAttestation where limitAgreementAttestation.SigningLimitRequest == _limitRequest.RecId;

        if (limitAgreementAttestation.RecId && isEditMode)
        {
            delete_from limitAgreementAttestation
                where limitAgreementAttestation.SigningLimitRequest == _limitRequest.RecId;
        }

        insert_recordset limitAgreementAttestation
            (SigningLimitRequest, LimitAgreementDetail, AttestationDateTime, ValidFrom, ValidTo)
        select limitRequestRecId, AgreementDetailRecId, effectiveDateTime,
            validFrom, validTo from _limitTmpAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttestationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the AttestedDateTime field of the HRPLimitAgreementAttestation Table
    /// </summary>
    /// <param name="_limitAgreementTmpConfirmation">
    /// A <c>HRPLimitAgreementTmpConfirmation</c> used to add filter Limit agreements
    /// </param>
    public void updateAttestationDateTime(HRPLimitAgreementTmpConfirmation _limitAgreementTmpConfirmation)
    {
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreementAttestation    limitAgreementAttestation, limitAggAttest, limitAggUpdateExpired;
        utcdatetime dateFrom = DateTimeUtil::minValue();
        utcdatetime dateTo = DateTimeUtil::maxValue();
        utcdatetime currentDateTime = DateTimeUtil::utcNow();

        while select AttestationRecId from _limitAgreementTmpConfirmation
        {
            select validtimestate(dateFrom, dateTo) RecId, SigningLimitRequest, LimitAgreementDetail from limitAggAttest
                 where limitAggAttest.RecId == _limitAgreementTmpConfirmation.AttestationRecId
            join RecId, AttestationPeriod from limitAgreementDetail
                where limitAgreementDetail.RecId == limitAggAttest.LimitAgreementDetail;

            select forupdate validtimestate(dateFrom, dateTo) limitAggUpdateExpired where limitAggUpdateExpired.RecId == limitAggAttest.RecId;

            ttsbegin;
            limitAggUpdateExpired.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            limitAggUpdateExpired.AttestationDateTime   = currentDateTime;
            limitAggUpdateExpired.SigningLimitRequest   = limitAggAttest.SigningLimitRequest;
            limitAggUpdateExpired.LimitAgreementDetail  = limitAggAttest.LimitAgreementDetail;
            limitAggUpdateExpired.ValidTo = DateTimeUtil::addMonths(currentDateTime, limitAgreementDetail.AttestationPeriod);
            limitAggUpdateExpired.update();
            limitAggUpdateExpired.ValidFrom = currentDateTime;
            limitAggUpdateExpired.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLimitAgreementConfirmationTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>HRPLimitAgreementTmpConfirmation</c> tmp table
    /// </summary>
    /// <param name="_limitRequestRecId">
    /// Accepts recId from <c>HrpLimitRequest</c> table as parameter.
    /// </param>
    /// <returns>
    /// A <c>HRPLimitAgreementTmpConfirmation</c> tmp table
    /// </returns>
    public HRPLimitAgreementTmpConfirmation populateLimitAgreementConfirmationTmpTable(RefRecId _limitRequestRecId)
    {
        HRPLimitAgreementTmpConfirmation limitAgreementTmpConfirmation;
        HRPLimitAgreement limitAgreement;
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreementAttestation limitAgreementAttestation;
        HRPLimitRequest limitRequestLocal;
        HRPLimitDocument limitDocument;
        NoYes isAttested;

        insert_recordset limitAgreementTmpConfirmation(SigningLimitType, LimitRequestRecId, AttestationDateTime, AttestationRecId,
              AttestationPeriod, IsAttested, AgreementName, URL, SigningLimitDocument)
            select SigningLimitType, RecId from limitRequestLocal
                where limitRequestLocal.RecId == _limitRequestRecId
            join AttestationDateTime, RecId from limitAgreementAttestation
                where limitAgreementAttestation.SigningLimitRequest == limitRequestLocal.RecId
            join AttestationPeriod, isAttested  from limitAgreementDetail
               where limitAgreementDetail.RecId == limitAgreementAttestation.LimitAgreementDetail
            join AgreementName, URL from limitAgreement
               where limitAgreement.RecId == limitAgreementDetail.SigningLimitAgreement
            join DocumentType from limitDocument
                where limitDocument.RecId == limitRequestLocal.SigningLimitDocument;

        return limitAgreementTmpConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLimitAgreementAttested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method determines if all the agreements have been attested by user in <c>EssSigningLimitEntry</c> form.
    /// </summary>
    /// <param name="_limitTmpAgreement">
    ///    Accepts <c>HRPLimitTmpAgreement</c> table as parameter.
    /// </param>
    /// <returns>
    ///    true if agreements have been attested; otherwise, false.
    /// </returns>
    public boolean isLimitAgreementAttested(HRPLimitTmpAgreement _limitTmpAgreement)
    {
        HRPLimitTmpAgreement limitAgreementTmpLocal;

        limitAgreementTmpLocal.setTmpData(_limitTmpAgreement);

        select firstonly RecId, IsAttested from limitAgreementTmpLocal
            where limitAgreementTmpLocal.IsAttested == NoYes::No;

        return !limitAgreementTmpLocal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLimitAgreementConfirmationAttested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method determines if all the agreements have been attested by user in <c>EssSigningLimitAgreementConfirmation</c> form.
    /// </summary>
    /// <param name="_limitAgreementTmpConfirmation">
    ///    Accepts <c>HRPLimitAgreementTmpConfirmation</c> table as parameter.
    /// </param>
    /// <returns>
    ///    true if agreements have been attested; otherwise, false.
    /// </returns>
    public boolean isLimitAgreementConfirmationAttested(HRPLimitAgreementTmpConfirmation _limitAgreementTmpConfirmation)
    {
        HRPLimitAgreementTmpConfirmation limitAgreementConfirmationTmpLocal;

        limitAgreementConfirmationTmpLocal.setTmpData(_limitAgreementTmpConfirmation);

        select firstonly RecId, IsAttested from limitAgreementConfirmationTmpLocal
            where limitAgreementConfirmationTmpLocal.IsAttested == NoYes::No;

        return !limitAgreementConfirmationTmpLocal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRequestAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts or updates limit request amount into <c>HRPLimitRequestAmount</c> table.
    /// </summary>
    /// <param name="_amount">
    ///    Accepts amount as entered by user as parameter.
    /// </param>
    /// <param name="_currency">
    ///    Accepts currency as entered by user as parameter.
    /// </param>
    public void insertRequestAmount(AmountCur _amount, CurrencyCode _currency)
    {
        HRPLimitRequestAmount   limitRequestAmount;

        if (limitRequest.RecId)
        {
            select firstonly forupdate limitRequestAmount where limitRequestAmount.SigningLimitRequest == limitRequest.RecId;

            ttsbegin;
            limitRequestAmount.Amount = _amount;
            limitRequestAmount.Currency = _currency;

            if (limitRequestAmount.RecId)
            {
                limitRequestAmount.update();
            }
            else
            {
                limitRequestAmount.SigningLimitRequest = limitRequest.RecId;
                limitRequestAmount.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>