<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransForm
{
    #resAppl

    FormRun                     formRun;

    ImageListAppl               imageListAppl;

    ReqTrans                    reqTrans;
    FormDataSource              reqTrans_ds;

    ReqTransCov                 reqTransCov;
    FormDataSource              reqTransCov_ds;

    ReqTrans                    reqTransSettled;
    FormDataSource              reqTransSettled_ds;

    // parameters

    ReqPlanId                   reqPlanId;
    ReqPlanType                 reqPlanType;

    FormWindowControl           ctrlWindowActionAdvPost;
    FormWindowControl           ctrlWindowActionIncDec;
    FormWindowControl           ctrlWindowFuturesPost;
    FormWindowControl           ctrlWindowReqRefTypeTrans;
    FormWindowControl           ctrlWindowReqRefTypeCov;

    FormGroupControl            ctrlGroupSettlement;
    Integer                     reqTransCovframeOption;

    #Define.CurrentVersion(5)
    #Localmacro.CurrentList
        reqPlanId,
        reqTransCovframeOption,
        formList
    #endMacro

    // Query ranges

    QueryBuildRange             rangeReceiptRecId;
    QueryBuildRange             rangeIssueRecId;

    QueryBuildRange             rangePlanVersion;

    Object                      formRunObject;

    container                   formList;

    // The reqPlanData object is mainly used to cache reqSetupDim objects
    ReqPlanData                 reqPlanData;

    // The dummyQuery is used to keep a reference to ranges and data sources; otherwise the garbage collector will clear them.
    Query                       dummyQuery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRuleRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the required trans data source is empty.
    /// </summary>
    /// <returns>
    ///    true if the data source is empty; otherwise false.
    /// </returns>
    public boolean checkRuleRecordExists()
    {
        return reqTrans ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMasterPlan</Name>
				<Source><![CDATA[
    public boolean isMasterPlan()
    {
        return reqPlanType == ReqPlanType::SchedPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReqPlanIdSched</Name>
				<Source><![CDATA[
    ReqPlanId defaultReqPlanIdSched()
    {
        return ReqPlanSched::defaultDynamicId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCovActionQtyAdd</Name>
				<Source><![CDATA[
    public ActionQtyAdd displayCovActionQtyAdd(ReqTransCov _reqTransCov)
    {
        return reqTrans.Qty >= 0 ? _reqTransCov.ActionQtyAdd : -_reqTransCov.ActionQtyAdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCovQty</Name>
				<Source><![CDATA[
    public ReqQtySettled displayCovQty(ReqTransCov _reqTransCov)
    {
        return reqTrans.Qty >= 0 ? _reqTransCov.Qty : -_reqTransCov.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCWCovActionQtyAdd</Name>
				<Source><![CDATA[
    public PdsCWActionQtyAdd displayCWCovActionQtyAdd(ReqTransCov _reqTransCov)
    {
        return reqTrans.pdsCWReqQty() >= 0 ? _reqTransCov.pdsCWActionQtyAdd() : -_reqTransCov.pdsCWActionQtyAdd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCWCovQty</Name>
				<Source><![CDATA[
    public PdsCWSettled displayCWCovQty(ReqTransCov _reqTransCov)
    {
        return reqTrans.pdsCWReqQty() >= 0 ? _reqTransCov.pdsCWSettled() : -_reqTransCov.pdsCWSettled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageActionAdvPost</Name>
				<Source><![CDATA[
    public int displayImageActionAdvPost(ReqTrans _reqTrans)
    {
        if (! _reqTrans.ActionMarked)
        {
            return -1;
        }

        switch (_reqTrans.ActionType)
        {
            case ActionType::Advance            :
            case ActionType::AdvanceAppreciate  :
            case ActionType::AdvanceDepreciate  :
                return imageListAppl.image(#ImageReqTransAdvance);

            case ActionType::Postpone           :
            case ActionType::PostponeAppreciate :
            case ActionType::PostponeDepreciate :
                return imageListAppl.image(#ImageReqTransPostPone);

            case ActionType::Cancel             :
                return imageListAppl.image(#ImageReqTransCancel);
        }
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageActionIncDec</Name>
				<Source><![CDATA[
    public int displayImageActionIncDec(ReqTrans _reqTrans)
    {
        if (! _reqTrans.ActionMarked)
        {
            return -1;
        }

        switch (_reqTrans.ActionType)
        {
            case ActionType::Appreciate         :
            case ActionType::AdvanceAppreciate  :
            case ActionType::PostponeAppreciate :
                return imageListAppl.image(#ImageReqTransIncrease);

            case ActionType::Depreciate         :
            case ActionType::AdvanceDepreciate  :
            case ActionType::PostponeDepreciate :
                return imageListAppl.image(#ImageReqTransDecrease);

            case ActionType::Cancel             :
                return imageListAppl.image(#ImageReqTransCancel);
        }
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageFuturesOK</Name>
				<Source><![CDATA[
    public int displayImageFuturesOK(ReqTrans _reqTrans)
    {
        if (! _reqTrans.FuturesMarked)
        {
            return imageListAppl.image(#Image_OK);
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageFuturesPost</Name>
				<Source><![CDATA[
    public int displayImageFuturesPost(ReqTrans _reqTrans)
    {
        if (_reqTrans.FuturesMarked)
        {
            return imageListAppl.image(#ImageReqTransFuture);
        }

        if (_reqTrans.ActionType == ActionType::Cancel)
        {
            return imageListAppl.image(#ImageReqTransCancel);
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageReqRefType</Name>
				<Source><![CDATA[
    int displayImageReqRefType(
        ReqRefType          _reqRefType,
        boolean             _isForecastPurch = false
        )
    {
        #ResAppl
        switch (_reqRefType)
        {
            case ReqRefType::None :
                return -1;

            case ReqRefType::InventOnHand :
                return imageListAppl.image(#ImageReqRefInventOnhand);

            case ReqRefType::Purch :
                return imageListAppl.image(#ImageReqRefPurch);

            case ReqRefType::Quarantine :
                return imageListAppl.image(#ImageReqRefPurch);

            case ReqRefType::Production :
                return imageListAppl.image(#ImageReqRefProduction);

            case ReqRefType::Kanban :
                return imageListAppl.image(#ImageReqRefKanban);

            case ReqRefType::Sales :
                return imageListAppl.image(#ImageReqRefSales);

            case ReqRefType::ProdLine :
                return imageListAppl.image(#ImageReqRefProdLine);

            case ReqRefType::KanbanLine :
                return imageListAppl.image(#ImageReqRefKanbanLine);

            case ReqRefType::InventJournal :
                return imageListAppl.image(#ImageReqRefInventJournal);

            case ReqRefType::TransferOrderReceive :
                return imageListAppl.image(#ImageReqRefTransferOrderReceive);

            case ReqRefType::TransferOrderShip :
                return imageListAppl.image(#ImageReqRefTransferOrderShip);

            case ReqRefType::SalesForecast :
                return imageListAppl.image(#ImageReqRefSalesForecast);

            case ReqRefType::SalesQuotation :
                return imageListAppl.image(#ImageReqRefProdLine);

            case ReqRefType::BOMPlannedOrder :

            case ReqRefType::PmfCoProduct :
            case ReqRefType::PmfPlannedProdBatch :
                if (_isForecastPurch)
                {
                    return imageListAppl.image(#ImageReqRefBOMPlannedOrderForecast);
                }
                return imageListAppl.image(#ImageReqRefBOMPlannedOrder);

            case ReqRefType::PlannedKanban :
                return imageListAppl.image(#ImageKanbanJobPlanned);

            case ReqRefType::BOMLine :
            case ReqRefType::PlannedKanbanLine :
                return imageListAppl.image(#ImageReqRefBOMLine);

            case ReqRefType::ItemPlannedOrder :
            case ReqRefType::RequisitionLine :
                if (_isForecastPurch)
                {
                    return imageListAppl.image(#ImageReqRefItemPlannedOrderForecast);
                }
                return imageListAppl.image(#ImageReqRefItemPlannedOrder);

            case ReqRefType::TransferPlannedOrder :
                if (_isForecastPurch)
                {
                    return imageListAppl.image(#ImageReqRefTransferPlannedOrderForecast);
                }

                return imageListAppl.image(#ImageReqRefTransferPlannedOrder);

            case ReqRefType::TransferDemand :
                return imageListAppl.image(#ImageReqRefTransferDemand);

            case ReqRefType::PmfFormulaLine :
                return imageListAppl.image(#ImageReqRefBOMLine);
            case ReqRefType::PlannedIntercompanyDemand :
                return imageListAppl.image(#ImageReqRefTransIntercompanyDemand);
            case ReqRefType::ConsignmentReplenishmentOrder :
                return imageListAppl.image(#ImageReqRefInventJournal);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFindRecord</Name>
				<Source><![CDATA[
    public void doFindRecord(ReqTrans _reqTrans)
    {
        reqTrans_ds.findRecord(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReread</Name>
				<Source><![CDATA[
    public void doReread()
    {
        reqTrans_ds.reread();
        reqTrans_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    public void doResearch()
    {
        reqTrans_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        this.formInitSysLastValue();

        if (ctrlWindowActionIncDec)
        {
            ctrlWindowActionIncDec.imageList(imageListAppl.imageList());
        }

        if (ctrlWindowActionAdvPost)
        {
            ctrlWindowActionAdvPost.imageList(imageListAppl.imageList());
        }

        if (ctrlWindowFuturesPost)
        {
            ctrlWindowFuturesPost.imageList(imageListAppl.imageList());
        }

        if (ctrlWindowReqRefTypeTrans)
        {
            ctrlWindowReqRefTypeTrans.imageList(imageListAppl.imageList());
        }

        if (ctrlWindowReqRefTypeCov)
        {
            ctrlWindowReqRefTypeCov.imageList(imageListAppl.imageList());
        }

        this.initFromCaller();

        if (ctrlGroupSettlement)
        {
            ctrlGroupSettlement.optionValue(reqTransCovframeOption);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes last used values.
    /// </summary>
    public void formInitSysLastValue()
    {
        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formPreClose</Name>
				<Source><![CDATA[
    public void formPreClose(boolean _saveLast = true)
    {
        if (ctrlGroupSettlement)
        {
            reqTransCovframeOption =  ctrlGroupSettlement.optionValue();
        }

        if (_saveLast)
        {
            xSysLastValue::saveLast(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun()
    {
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller()
    {
        ReqPlan reqPlan;

        if (reqPlanType == ReqPlanType::ForecastPlan)
        {
            reqPlanId = ReqPlanForecast::defaultId();
        }
		else
        {
            reqPlanId = ReqCalc::argsReqPlanId(formRun.args());
        }

        if (!reqPlanId)
        {
            reqPlanId = this.defaultReqPlanIdSched();
        }

        reqPlan = ReqPlan::findReqPlanId(reqPlanId);
        if (!reqPlan.RecId)
        {
            throw error(reqPlanType == ReqPlanType::ForecastPlan ? "@SYS28503" : "@SYS28502");
        }

        this.setPlanType(reqPlan.PlanType);

        reqPlanData = ReqPlanData::newReqPlanId(reqPlanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        reqTransCovframeOption = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return formRun.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>list2Value</Name>
				<Source><![CDATA[
    public void list2Value()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    public void new(FormRun    _formRun)
    {
        formRun         = _formRun;
        formRunObject   = _formRun;

        imageListAppl   = new ImageListAppl_Req();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.value2List();

        return [#CurrentVersion,#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGroupSettlement</Name>
				<Source><![CDATA[
    public FormGroupControl parmCtrlGroupSettlement(FormGroupControl _ctrlGroupSettlement = ctrlGroupSettlement)
    {
        ctrlGroupSettlement = _ctrlGroupSettlement;
        return ctrlGroupSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlWindowActionAdvPost</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlWindowActionAdvPost(FormWindowControl _ctrlWindowActionAdvPost = ctrlWindowActionAdvPost)
    {
        ctrlWindowActionAdvPost = _ctrlWindowActionAdvPost;
        return ctrlWindowActionAdvPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlWindowActionIncDec</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlWindowActionIncDec(FormWindowControl _ctrlWindowActionIncDec = ctrlWindowActionIncDec)
    {
        ctrlWindowActionIncDec = _ctrlWindowActionIncDec;
        return ctrlWindowActionIncDec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlWindowFuturesPost</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlWindowFuturesPost(FormWindowControl _ctrlWindowFuturesPost = ctrlWindowFuturesPost)
    {
        ctrlWindowFuturesPost = _ctrlWindowFuturesPost;
        return ctrlWindowFuturesPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlWindowReqRefTypeCov</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlWindowReqRefTypeCov(FormWindowControl _ctrlWindowReqRefTypeCov = ctrlWindowReqRefTypeCov)
    {
        ctrlWindowReqRefTypeCov = _ctrlWindowReqRefTypeCov;
        return ctrlWindowReqRefTypeCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlWindowReqRefTypeTrans</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlWindowReqRefTypeTrans(FormWindowControl _ctrlWindowReqRefTypeTrans = ctrlWindowReqRefTypeTrans)
    {
        ctrlWindowReqRefTypeTrans = _ctrlWindowReqRefTypeTrans;
        return ctrlWindowReqRefTypeTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormList</Name>
				<Source><![CDATA[
    public container parmFormList(container _formList = formList)
    {
        formlist = _formList;
        return formList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;
        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqPlanData</c> class.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>ReqPlanData</c> class.
    /// </returns>
    public ReqPlanData reqPlanData()
    {
        return reqPlanData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanType</Name>
				<Source><![CDATA[
    public ReqPlanType reqPlanType()
    {
        return reqPlanType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanVersionRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the master plan version ID.
    /// </summary>
    /// <returns>
    ///     The ID of the active master plan version.
    /// </returns>
    public RefRecId reqPlanVersionRefRecId()
    {
        return
               ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    public ReqTrans reqTrans()
    {
        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans_DS</Name>
				<Source><![CDATA[
    FormDataSource reqTrans_DS()
    {
        return reqTrans_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransCovDSExecuteQueryPre</Name>
				<Source><![CDATA[
    public void reqTransCovDSExecuteQueryPre(RecId _recId = reqTrans.RecId)
    {
        rangeReceiptRecId.value(reqTrans.Qty >= 0 ? queryValue(_recId) : SysQuery::valueUnlimited());
        rangeIssueRecId.value(  reqTrans.Qty >= 0 ? SysQuery::valueUnlimited() : queryValue(_recId));

        reqTransCov_ds.query().dataSourceTable(tableNum(ReqTrans)).clearLinks();

        if (reqTrans.Qty >= 0)
        {
            reqTransCov_ds.query().dataSourceTable(tableNum(ReqTrans)).addLink(fieldNum(ReqTransCov,IssueRecId),fieldNum(ReqTrans,RecId));
        }
        else
        {
            reqTransCov_ds.query().dataSourceTable(tableNum(ReqTrans)).addLink(fieldNum(ReqTransCov,ReceiptRecId),fieldNum(ReqTrans,RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransCovDSInitPost</Name>
				<Source><![CDATA[
    public void reqTransCovDSInitPost(
        ReqTransCov _reqTransCov,
        ReqTrans    _reqTransSettled
        )
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbsCov;
        QueryBuildDataSource    qbsTrans;
        #query

        reqTransCov        = _reqTransCov;
        reqTransCov_ds     = FormDataUtil::getFormDataSource(_reqTransCov);

        reqTransSettled    = _reqTransSettled;
        reqTransSettled_ds = FormDataUtil::getFormDataSource(_reqTransSettled);

        qbsCov = query.addDataSource(tableNum(ReqTransCov));
        qbsCov.name(reqTransCov_ds.name());

        rangeReceiptRecId   = qbsCov.addRange(fieldNum(ReqTransCov,ReceiptRecId));
        rangeIssueRecId     = qbsCov.addRange(fieldNum(ReqTransCov,IssueRecId));

        qbsTrans = qbsCov.addDataSource(tableNum(ReqTrans));
        qbsTrans.name(reqTransSettled_ds.name());

        qbsTrans.joinMode(JoinMode::InnerJoin);

        qbsTrans.addSortIndex(indexNum(ReqTrans,recId));
        qbsTrans.indexIsHint(true);
        query.literals(#queryForcePlaceholders);

        reqTransCov_ds.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSExecuteQueryPre</Name>
				<Source><![CDATA[
    public void reqTransDSExecuteQueryPre()
    {
        rangePlanVersion.value(queryValue(this.reqPlanVersionRefRecId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSInitPost</Name>
				<Source><![CDATA[
    public void reqTransDSInitPost(ReqTrans _reqTrans)
    {
        reqTrans        = _reqTrans;
        reqTrans_ds     = FormDataUtil::getFormDataSource(_reqTrans);

        if (!rangePlanVersion)
        {
            rangePlanVersion = SysQuery::findOrCreateRange(reqTrans_ds.query().dataSourceTable(tableNum(ReqTrans)), fieldNum(ReqTrans, PlanVersion));
        }

        // In order to keep a reference to the query object otherwise lower objects for example QueryBuildRange will be garbage collected.
        dummyQuery = reqTrans_ds.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanType</Name>
				<Source><![CDATA[
    public void setPlanType(ReqPlanType _reqPlanType)
    {
        reqPlanType = _reqPlanType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPlanId</Name>
				<Source><![CDATA[
    public void setReqPlanId(ReqPlanId _reqPlanId)
    {
        reqPlanId = _reqPlanId;

        if (ReqPlan::findReqPlanId(reqPlanId).PlanType != reqPlanType)
        {
            this.setPlanType(ReqPlan::findReqPlanId(reqPlanId).PlanType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqPlanData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the reqPlanData object to cache reqSetupDim objects correctly.
    /// </summary>
    /// <param name = "_reqPlanId">The master plan id.</param>
    [Hookable(false)]
    internal void updateReqPlanData(ReqPlanId _reqPlanId)
    {
        reqPlanData = ReqPlanData::newReqPlanId(_reqPlanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer  version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        this.list2Value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>value2List</Name>
				<Source><![CDATA[
    public void value2List()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>