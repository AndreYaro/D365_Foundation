<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransLedgerDimensionPopulateAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
internal class AssetTransLedgerDimensionPopulateAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@FixedAssets:FA_FixAssetTransLedgerDimensionOpportunityLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@FixedAssets:FA_FixAssetTransLedgerDimensionOpportunitySummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return AllowAssetTransDataMaintenanceFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::FixedAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(AssetTransLedgerDimensionPopulateTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {    
        boolean isMissingLedgerDimensionExists = this.isAssetTransWithoutLedgerDimensionExist();
 
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(isMissingLedgerDimensionExists);

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetTransWithoutLedgerDimensionExist</Name>
				<Source><![CDATA[
    private boolean isAssetTransWithoutLedgerDimensionExist()
    {
        AssetTrans assetTrans;
        AssetBookTable assetBookTable;
        AssetBook assetBook;

        select firstonly crosscompany RecId
            from assetTrans
            join assetBookTable
            where assetTrans.BookId == assetBookTable.BookId
                && assetBookTable.CurrentOperationsTax != CurrentOperationsTax::None
            join assetBook
                where assetBook.AssetId == assetTrans.AssetId
                && assetBook.BookId == assetTrans.BookId
                && (assetBook.Status == AssetStatus::Open
                    || assetBook.Status == AssetStatus::Suspended
                    || assetBook.Status == AssetStatus::TransferredToLowValuePool                    
                    || assetBook.Status == AssetStatus::Acquired_CZ)
                && assetTrans.LedgerDimension == 0;

        return assetTrans.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>