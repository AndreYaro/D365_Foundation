<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class UnitOfMeasureEventHandler
{
    // --------------------------

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preInsertOrUpdateUnitOfMeasure</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(UnitOfMeasure), delegatestr(UnitOfMeasure, preInsertDelegate)),
     SubscribesTo(tablestr(UnitOfMeasure), delegatestr(UnitOfMeasure, preUpdateDelegate))]
    static void preInsertOrUpdateUnitOfMeasure(UnitOfMeasure _record, EventHandlerResult _result)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            _result.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(UnitOfMeasure), delegatestr(UnitOfMeasure, validateFieldDelegate))]
    static void validateField(UnitOfMeasure _record, FieldId _fieldIdToCheck, EventHandlerResult _result)
    {
        switch (_fieldIdToCheck)
        {
            case fieldNum(UnitOfMeasure, DecimalPrecision)  :
                if ((select firstonly RecId from pdsCatchWeightItem
                         where pdsCatchWeightItem.PdsCWUnitId == _record.Symbol).RecId
                            && _record.DecimalPrecision != 0)
                {
                    _result.result(checkFailed("@PDS308"));
                }

                break;

                // Prevent creation of a unitId that matches a container type code
            case fieldNum(UnitOfMeasure, Symbol):
                if ((select RecId from whsContainerType
                        where whsContainerType.ContainerTypeCode == _record.Symbol).RecId)
                {
                    _result.result(checkFailed("@WAX3795"));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UnitOfMeasure_onValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Verifies that a unit id does not match an existing container type code.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(UnitOfMeasure), DataEventType::ValidatedWrite)]
    public static void UnitOfMeasure_onValidatedWrite(Common sender, DataEventArgs e)
    {
        ValidateEventArgs   event           = e as ValidateEventArgs;
        UnitOfMeasure       unitOfMeasure   = sender as UnitOfMeasure;
        boolean             result          = event.parmValidateResult();

        WHSContainerType    containerType;

        select firstOnly ContainerTypeCode from containerType
            where containerType.ContainerTypeCode == unitOfMeasure.Symbol;

        if (containerType.RecId != 0)
        {
            result = checkFailed("@WAX:ErrorUnitIdMatchesContainerType");
        }

        event.parmValidateResult(result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertUnitOfMeasureTranslation</Name>
				<Source><![CDATA[
    // --------------------------

    [SubscribesTo(tablestr(UnitOfMeasureTranslation), delegatestr(UnitOfMeasureTranslation, preInsertDelegate)),
     SubscribesTo(tablestr(UnitOfMeasureTranslation), delegatestr(UnitOfMeasureTranslation, preUpdateDelegate))]
    static void preInsertUnitOfMeasureTranslation(UnitOfMeasureTranslation _record, EventHandlerResult _result)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            _result.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertUnitOfMeasureConversion</Name>
				<Source><![CDATA[
    // --------------------------

    [SubscribesTo(tablestr(UnitOfMeasureConversion), delegatestr(UnitOfMeasureConversion, preInsertDelegate)),
     SubscribesTo(tablestr(UnitOfMeasureConversion), delegatestr(UnitOfMeasureConversion, preUpdateDelegate))]
    static void preInsertUnitOfMeasureConversion(UnitOfMeasureConversion _record, EventHandlerResult _result)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            _result.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnitOfMeasureLookupFromLookupForm</Name>
				<Source><![CDATA[
    // --------------------------

    [SubscribesTo(classStr(UnitOfMeasureHelper), delegatestr(UnitOfMeasureHelper, newUnitOfMeasureLookupFromLookupFormDelegate))]
    static void newUnitOfMeasureLookupFromLookupForm(FormRun _formRun, EventHandlerResult _result)
    {
        if (!_formRun || !_formRun.args() || !_formRun.args().caller())
        {
            throw(error(Error::wrongUseOfFunction(funcname())));
        }

        // The event could already have been processed successfully by another event handler, in that case their result should be used
        if (_result.hasResult())
        {
            return;
        }

        UnitOfMeasureLookup unitOfMeasureLookup = UnitOfMeasureLookup_Symbol::construct();
        unitOfMeasureLookup.parmShowConvertibleUnitsTab(false);
        unitOfMeasureLookup.parmUnitOfMeasure(0);
        unitOfMeasureLookup.parmProduct(0);
        unitOfMeasureLookup.parmFormRun(_formRun);
        unitOfMeasureLookup.parmCallerFormStringControl(SysTableLookup::getCallerStringControl(_formRun.args()));

        Object caller = _formRun.args().caller();

        if (    caller.name() == formstr(InventOnHandMovement)
            ||  caller.name() == formstr(InventOnHandItem)
            ||  caller.name() == formstr(InventOnhandInterCompany)
            ||  caller.name() == formstr(InventOnHandReserve)
            ||  caller.name() == formstr(PmfMultiDimProcessInventory)
            )
        {
            unitOfMeasureLookup.parmShowConvertibleUnitsTab(true);
            unitOfMeasureLookup.parmUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(caller.otherUnit()));
            unitOfMeasureLookup.parmProduct(InventTable::itemProduct(caller.selectedItemId()));
            _result.result(unitOfMeasureLookup);
            return;
        }

        if (_formRun.args().dataset())
        {
            switch (_formRun.args().dataset())
            {
                case tablenum(InventTableModule):
                    InventTableModule inventTableModule = _formRun.args().record() as InventTableModule;
                    switch (inventTableModule.ModuleType)
                    {
                        case ModuleInventPurchSales::Invent :
                            _result.result(unitOfMeasureLookup);
                            return;

                        default                             :
                            unitOfMeasureLookup.parmShowConvertibleUnitsTab(true);
                            unitOfMeasureLookup.parmProduct(InventTable::itemProduct(inventTableModule.ItemId));
                            if (caller.name() == formstr(EcoResProductDetailsExtended))
                            {
                                FormRun callerFormRun   = _formRun.args().caller() as FormRun;
                                Counter  formDataSourceCounter;
                                for (formDataSourceCounter = 1; formDataSourceCounter <= callerFormRun.dataSourceCount(); formDataSourceCounter++)
                                {
                                    if (callerFormRun.dataSource(formDataSourceCounter).name() == identifierstr('Invent'))
                                    {
                                        inventTableModule = callerFormRun.dataSource(formDataSourceCounter).cursor() as InventTableModule;
                                        unitOfMeasureLookup.parmUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId));
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                unitOfMeasureLookup.parmUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(
                                    InventTable::find(inventTableModule.ItemId).inventUnitId()));
                            }
                            _result.result(unitOfMeasureLookup);
                            return;
                    }

                case tablenum(PriceDiscTable):
                    PriceDiscTable priceDiscTable = _formRun.args().record() as PriceDiscTable;
                    if (priceDiscTable.ItemCode != PriceDiscProductCodeType::Table || !priceDiscTable.ItemRelation)
                    {
                        _result.result(unitOfMeasureLookup);
                        return;
                    }
                    UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, priceDiscTable.ItemRelation, 0, priceDiscTable.InventDimId, false);
                    _result.result(unitOfMeasureLookup);
                    return;

                case tablenum(SuppItemTable):
                    SuppItemTable suppItemTable = _formRun.args().record() as SuppItemTable;
                    if (suppItemTable.ItemCode != TableGroupAll::Table || !suppItemTable.ItemRelation)
                    {
                        _result.result(unitOfMeasureLookup);
                        return;
                    }
                    UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, suppItemTable.ItemRelation, 0, suppItemTable.InventDimId, false);
                    _result.result(unitOfMeasureLookup);
                    return;
                case tablenum(PdsCatchWeightItem):
                    PdsCatchWeightItem catchWeightItem = _formRun.args().record() as PdsCatchWeightItem;
                    if (catchWeightItem.ItemId)
                    {
                        UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, catchWeightItem.ItemId, 0, null, true);
                    }
                    _result.result(unitOfMeasureLookup);
                    return;
                case tableNum(WHSLocationLimitVariant):
                    WHSLocationLimitVariant locationLimitVariant = _formRun.args().record() as WHSLocationLimitVariant;
                    EcoResDistinctProductVariantRecId productVariantRecId = InventDimCombination::findByInventDim(locationLimitVariant.ItemId, InventDim::find(locationLimitVariant.InventDimIDProductDim)).DistinctProductVariant;
                    UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, locationLimitVariant.ItemId, productVariantRecId, null, true);
                    _result.result(unitOfMeasureLookup);
                    return;
                case tableNum(PriceDiscAdmTrans):
                    PriceDiscAdmTrans item = _formRun.args().record() as PriceDiscAdmTrans;

                    if (item.ItemRelation)
                    {
                        UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, item.ItemRelation, 0, item.InventDimId, false);
                    }
                    _result.result(unitOfMeasureLookup);
                    return;
                default:
                    FieldId itemIdField = fieldname2id(_formRun.args().dataset(), fieldstr(InventTable, ItemId));
                    if (itemIdField)
                    {
                        ItemId itemId = _formRun.args().record().(itemIdField);
                        InventDimId inventDimId;
                        if (itemId)
                        {
                            FieldId inventDimIdField = fieldname2id(_formRun.args().dataset(), fieldstr(InventDim, InventDimId));
                            if (inventDimIdField)
                            {
                                inventDimId = _formRun.args().record().(inventDimIdField);
                            }
                            UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, itemId, 0, inventDimId, false);
                        }
                        _result.result(unitOfMeasureLookup);
                        return;
                    }
                    break;
            }
        }

        if (_formRun.args().dataset())
        {
            InventMovement inventMovement = InventMovement::constructNoThrow(_formRun.args().record());
            if (inventMovement)
            {
                UnitOfMeasureEventHandler::setupUnitOfMeasureLookup(unitOfMeasureLookup, inventMovement.itemId(), 0, inventMovement.inventDimId(), false);
                _result.result(unitOfMeasureLookup);
                return;
            }
        }

        _result.result(unitOfMeasureLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupUnitOfMeasureLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the unit of measure lookup parameters
    /// </summary>
    /// <param name = "_unitOfMeasureLookup">A <c>UnitOfMeasureLookup</c> instance containing the unit of measure lookup parameters for query.</param>
    /// <param name = "_itemId">The item number.</param>
    /// <param name = "_productRecId">The product record id of either product or product variant.</param>
    /// <param name = "_inventDimId">The inventory dimension id.</param>
    /// <param name = "_zeroDecimalOnly">Show zero decimals only.</param>
    private static void setupUnitOfMeasureLookup(UnitOfMeasureLookup _unitOfMeasureLookup, ItemId _itemId, RefRecId _productRecId, InventDimId _inventDimId, boolean _zeroDecimalOnly)
    {
        _unitOfMeasureLookup.parmShowConvertibleUnitsTab(true);
        _unitOfMeasureLookup.parmShowZeroDecimalOnly(_zeroDecimalOnly);
        _unitOfMeasureLookup.parmUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(
                            InventTable::find(_itemId).inventUnitId()));
        UnitOfMeasureEventHandler::addProductVariantIdToUnitOfMeasureLookup(_unitOfMeasureLookup, _itemId, _inventDimId);    

        if (!_unitOfMeasureLookup.parmProduct())
        {
            if (!_productRecId)
            {
                _productRecId = InventTable::itemProduct(_itemId);
            }
            _unitOfMeasureLookup.parmProduct(_productRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductVariantIdToUnitOfMeasureLookup</Name>
				<Source><![CDATA[
    private static void addProductVariantIdToUnitOfMeasureLookup(UnitOfMeasureLookup _unitOfMeasureLookup, ItemId _itemId, InventDimId _inventDimId)
    {
        if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
        {
            if (_inventDimId)
            {
                InventDim inventDim = InventDim::find(_inventDimId);
                if (inventDim)
                {
                    EcoResDistinctProductVariantRecId productVariantRecId = InventDimCombination::findByInventDim(_itemId, inventDim).DistinctProductVariant;
                    if (productVariantRecId)
                    {
                        _unitOfMeasureLookup.parmProduct(productVariantRecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnitOfMeasureConverterFromProduct</Name>
				<Source><![CDATA[
    // ---------------------------------

    [SubscribesTo(classStr(UnitOfMeasureHelper), delegatestr(UnitOfMeasureHelper, newUnitOfMeasureConverterFromProductDelegate))]
    static void newUnitOfMeasureConverterFromProduct(
        EcoResProductRecId      _product,
        EventHandlerResult      _result)
    {
        if (_product != 0)
        {
            UnitOfMeasureConverter_Product unitOfMeasureConverter_Product = UnitOfMeasureConverter_Product::construct();
            unitOfMeasureConverter_Product.parmProduct(_product);

            _result.result(unitOfMeasureConverter_Product as UnitOfMeasureConverter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnitOfMeasureConverterFromPackedClass</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(UnitOfMeasureHelper), delegatestr(UnitOfMeasureHelper, newUnitOfMeasureConverterFromPackedClassDelegate))]
    static void newUnitOfMeasureConverterFromPackedClass(container _packedClass, EventHandlerResult _result)
    {
        ClassId classId = conPeek(_packedClass, 2);

        switch (classId)
        {
            case classNum(UnitOfMeasureConverter)           :
                _result.result(UnitOfMeasureConverter::construct());
                break;

            case classNum(UnitOfMeasureConverter_Product)   :
                 _result.result(UnitOfMeasureConverter_Product::construct());
                break;

            default                                         :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUnitOfMeasureCalculator</Name>
				<Source><![CDATA[
    // --------------------------

    [SubscribesTo(classStr(UnitOfMeasureHelper), delegatestr(UnitOfMeasureHelper, constructUnitOfMeasureCalculatorDelegate))]
    static void constructUnitOfMeasureCalculator(EventHandlerResult _result)
    {
        _result.result(UnitOfMeasureCalculator_Product::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUnitOfMeasureCalculatorFromFormRun</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(UnitOfMeasureHelper), delegatestr(UnitOfMeasureHelper, newUnitOfMeasureCalculatorFromFormRunDelegate))]
    static void newUnitOfMeasureCalculatorFromFormRun(FormRun _formRun, EventHandlerResult _result)
    {
        UnitOfMeasureCalculator unitOfMeasureCalculator;
        UnitOfMeasureCalculator_Product unitOfMeasureCalculator_Product;
        UnitOfMeasureCalculator_DropDialog_Prod unitOfMeasureCalculator_DropDialog_Prod;

        FormRun                 callerFormRun;

        if (_formRun.args() && _formRun.args().caller())
        {
            callerFormRun   = _formRun.args().caller() as FormRun;
            if (    callerFormRun           == null
                ||  callerFormRun.name()    != formStr(UnitOfMeasureConversion))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            else
            {
                unitOfMeasureCalculator_DropDialog_Prod = UnitOfMeasureCalculator_DropDialog_Prod::construct();
                //UoM calculator must not use variants as we do not define unit conversions for variants.
                unitOfMeasureCalculator_DropDialog_Prod.parmProductLookup(EcoResProductLookup::newExcludeDistinctProductVariants());
                unitOfMeasureCalculator = unitOfMeasureCalculator_DropDialog_Prod;
            }
        }
        else
        {
            unitOfMeasureCalculator_Product = UnitOfMeasureCalculator_Product::construct();
            //UoM calculator must not use variants as we do not define unit conversions for variants.
            unitOfMeasureCalculator_Product.parmProductLookup(EcoResProductLookup::newExcludeDistinctProductVariants());
            unitOfMeasureCalculator = unitOfMeasureCalculator_Product;
        }

        unitOfMeasureCalculator.parmFormRun(_formRun);

        _result.result(unitOfMeasureCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInit_RU</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(UnitOfMeasure), formMethodStr(UnitOfMeasure, init))]
    public static void postInit_RU(XppPrePostArgs _args)
    {
        const str controlName = 'InventBaileeCalcUnitOperation_RU';

        FormRun formRun = _args.getThis();
        int controlId = formRun.controlId(controlName);
        FormControl formControl = formRun.control(controlId);

        #ISOCountryRegionCodes
        formControl.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlExtCodeValueTable_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(UnitOfMeasure, ExtCodeValueTable), FormControlEventType::Clicked)]
    public static void ctrlExtCodeValueTable_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        Box::infoOnce("@SYS310565", "@SYS310566", _sender.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureConverter_Post_convertibleUnitsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the product master ID for the query if _product argument is a product variant ID
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance containing the unit of measure lookup query</param>
    [PostHandlerFor(classStr(UnitOfMeasureConverter), staticMethodStr(UnitOfMeasureConverter, convertibleUnitsQuery))]
    public static void unitOfMeasureConverter_Post_convertibleUnitsQuery(XppPrePostArgs _args)
    {
        Query query = _args.getReturnValue();
        RefRecId productId = _args.getArg(literalStr(_product));

        if (productId)
        {
            EcoResProduct ecoResProduct = EcoResProduct::find(productId);
            if(ecoResProduct.isDistinctProductVariant())
            {
                EcoResDistinctProductVariant productVariant = ecoResProduct as EcoResDistinctProductVariant;

                FieldId _fieldNumProduct = fieldNum(UnitOfMeasureConversion, Product);
                str queryValueProductMasterId = queryValue(productVariant.ProductMaster);

                query.dataSourceName(identifierStr(UnitOfMeasureConversion_Direct)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionFromBase_OneBaseTarget)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionToBase_OneBaseTarget)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionFromBase_OneBaseThis)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionToBase_OneBaseThis)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionFromBase_TwoBase)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionBaseBase_TwoBase)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
                query.dataSourceName(identifierStr(UnitOfMeasureConversionToBase_TwoBase)).addRange(_fieldNumProduct).value(queryValueProductMasterId);
            }
        }

        _args.setReturnValue(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>