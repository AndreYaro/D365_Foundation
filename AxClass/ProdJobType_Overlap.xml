<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobType_Overlap</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJobType_Overlap extends ProdJobType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcWrkCtrHours</Name>
				<Source><![CDATA[
    public Hours calcWrkCtrHours(BOMCalcData    _itemCalcData,
                                 RouteMap       _primaryRoute,
                                 RouteOprMap    _primaryOpr,
                                 WrkCtrId       _wrkCtrId,
                                 RouteMap       _route,
                                 RouteOprMap    _opr,
                                 ItemId         _itemId         = '', // BOM itemId and inventDimId
                                 InventDimId    _inventDimId    = '') // must be specified when called with Route and RouteOpr tables
    {
        RouteOprQtyOverlap          calcOverlapQty;
        RouteOprQtyOverlap          calcQty;

        // Overlap is always zero if the transfer batch is zero
        if (!_primaryOpr.TransferBatch)
        {
            return 0;
        }

        RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(_primaryOpr.Formula);

        // there is no OverlapQty field on RouteOpr table, thus it needs to be calculated
        if (_primaryOpr.TableId == tablenum(RouteOpr))
        {
            // in order to find the next operation we need to have itemId and configId of the BOM item
            EcoResItemConfigurationName configId = InventDim::find(_inventDimId).ConfigId;

            ProdRouteOverlapCalc prodRouteOverlapCalc = ProdRouteOverlapCalc::newRouteMapBOMData(_primaryRoute,
                                                                                                 _primaryOpr,
                                                                                                 _itemCalcData,
                                                                                                 _itemId,
                                                                                                 configId,
                                                                                                 false,  // update ProdRoute
                                                                                                 false,  // show the calculated overlap qty
                                                                                                 false); // inform when the overlap qty is changed
            // run overlap calculation
            prodRouteOverlapCalc.run();
            calcOverlapQty = prodRouteOverlapCalc.getCalcOverlapQty();
            calcQty = prodRouteOverlapCalc.calcQty( _primaryRoute, _primaryOpr, _itemCalcData);
        }
        else
        if (_primaryOpr.TableId == tablenum(ProdRoute))
        {
            calcOverlapQty = _primaryOpr.OverlapQty;
            ProdRoute prodRoute = _primaryOpr;
            calcQty = prodRoute.CalcQty;
        }

        if (!calcOverlapQty)
        {
            return 0;
        }

        Hours processHours = routeCalcConsumption.calcWrkCtrProcessTime(_itemCalcData,
                                                                        _primaryRoute,
                                                                        _primaryOpr,
                                                                        _wrkCtrId);

        Hours overlapHours = processHours * calcOverlapQty / (calcQty ? calcQty : calcOverlapQty);

        return overlapHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteJobSetup</Name>
				<Source><![CDATA[
    RouteJobSetup initRouteJobSetup(RouteJobSetup routeJobSetup = null)
    {
        routeJobSetup.Activation        = NoYes::Yes;
        routeJobSetup.SchedCapacity     = NoYes::No;
        routeJobSetup.SchedWorkTime     = NoYes::No;
        routeJobSetup.JobCtrlTime       = NoYes::No;

        return routeJobSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a working time flag is set for the overlap job in the route group setup.
    /// </summary>
    /// <param name="routeGroup">
    ///    A <c>RouteGroup</c> table for the overlap job
    /// </param>
    /// <returns>
    ///    false for the overlap job
    /// </returns>
    public NoYes scheduleWorkTime(RouteGroup routeGroup)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a capacity flag is set for the overlap job in the route group setup.
    /// </summary>
    /// <param name="routeGroup">
    ///    A <c>RouteGroup</c> table for the overlap job
    /// </param>
    /// <returns>
    ///    false for the overlap job
    /// </returns>
    public NoYes scheduleCapacity(RouteGroup routeGroup)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustJobBeControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a job management flag is set for the overlap job in the route group setup.
    /// </summary>
    /// <param name="routeGroup">
    ///    A <c>RouteGroup</c> table for the overlap job
    /// </param>
    /// <returns>
    ///    false for the overlap job
    /// </returns>
    public NoYes mustJobBeControlled(RouteGroup routeGroup)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWrkCtrHoursResourceIndependent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the calculation of work center hours depends on the resource.
    /// </summary>
    /// <param name="_primaryOpr">
    ///    A <c>RouteOprMap</c> map for the primary operation.
    /// </param>
    /// <returns>
    ///    true if the calculation of work center hours is resource independent; otherwise, false.
    /// </returns>
    public boolean isWrkCtrHoursResourceIndependent(RouteOprMap _primaryOpr)
    {
        return RouteCalcConsumption::construct(_primaryOpr.Formula).isWrkCtrHoursResourceIndependent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numType</Name>
				<Source><![CDATA[
    Integer numType()
    {
        return 40;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeJobType</Name>
				<Source><![CDATA[
    RouteJobType routeJobType()
    {
        return RouteJobType::Overlap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedulePrevJobLink</Name>
				<Source><![CDATA[
    SchedJobLink schedulePrevJobLink()
    {
        return SchedJobLink::SS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditJobCtrlTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field <c>JobCtrlTime</c> is currently editable for the given <c>RouteJobSetup</c>.
    /// </summary>
    /// <param name = "_routeJobSetup">A <c>RouteJobSetup</c> record.</param>
    /// <returns>
    /// true if the field is editable; otherwise, false.
    /// </returns>
    public NoYes allowEditJobCtrlTime(RouteJobSetup _routeJobSetup)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSchedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field <c>SchedCapacity</c> is currently editable for the given <c>RouteJobSetup</c>.
    /// </summary>
    /// <param name = "_routeJobSetup">A <c>RouteJobSetup</c> record.</param>
    /// <returns>
    /// true if the field is editable; otherwise, false.
    /// </returns>
    public NoYes allowEditSchedCapacity(RouteJobSetup _routeJobSetup)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSchedWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field <c>SchedWorkTime</c> is currently editable for the given <c>RouteJobSetup</c>.
    /// </summary>
    /// <param name = "_routeJobSetup">A <c>RouteJobSetup</c> record.</param>
    /// <returns>
    /// true if the field is editable; otherwise, false.
    /// </returns>
    public NoYes allowEditSchedWorkTime(RouteJobSetup _routeJobSetup)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRouteJobSetupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets fields that depend on certain values from other fields.
    /// </summary>
    /// <param name = "_routeJobSetup">A <c>RouteJobSetup</c> record.</param>
    public void resetRouteJobSetupFields(RouteJobSetup _routeJobSetup)
    {
        _routeJobSetup.JobCtrlTime   = NoYes::No;
        _routeJobSetup.SchedWorkTime = NoYes::No;
        _routeJobSetup.SchedCapacity = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedulePrevJobLinkType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the link type that is set between the previous job type and the overlap job type.
    /// </summary>
    /// <returns>
    ///    A <c>SchedJobLinkType</c> enumeration value that defines whether the link type is soft or hard.
    /// </returns>
    public SchedJobLinkType schedulePrevJobLinkType()
    {
        return SchedJobLinkType::Hard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>