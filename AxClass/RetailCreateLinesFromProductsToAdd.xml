<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreateLinesFromProductsToAdd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create product lines according to caller.
/// </summary>
class RetailCreateLinesFromProductsToAdd
{
    Common common;
    TmpRetailProductsToAdd  tmpProductsToAdd, tmpProductsToAddInsert;

    InventJournalFormTrans_Movement journalFormTrans;
    MapIterator     mapLinesIterator;
    Set             lineSet, deletedTmpProductsSet;
    int64           lineRecID;
    Map             mapLines;
    MenuItemName    callerMenuItemName;
    Args            callerArgs;
    Map             mapRecId;
    RecordSortedList    recordList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the record into <c>InventJournalTrans</c> table.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///  A record buffer that contains information about a selected counting journal.
    /// </param>
    /// <param name="_tmpProductsToAdd">
    ///  The record buffer that contain all the selected products to add.
    /// </param>
    /// <remarks>
    ///  This method creates the counting journal lines for all selected products on the Add products form.
    /// </remarks>
    private void createInventJournalTrans(Common _inventJournalTrans, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        InventJournalTable      journalTable;
        InventJournalTrans      journalTrans;
        JournalTableData        journalTableData;
        JournalTransData        journalTransData;
        JournalTransMap         journalTrans_Last;
        InventJournalTrans      inventJournalTrans_Last;
        lineSet = new Set(Types::Int64);

        journalTable = journalFormTrans.journalTable();

        select firstonly inventJournalTrans_Last
            where inventJournalTrans_Last.JournalId == journalTable.JournalId &&
                    inventJournalTrans_Last.JournalType == InventJournalType::Count;
        journalTrans_Last.data(inventJournalTrans_Last);

        setPrefix("@SYS74342");

        using (InventJournalCountSkipCountingReasonCodeValidationContext context = new InventJournalCountSkipCountingReasonCodeValidationContext())
        {
            context.isSkipCountingReasonCodeValidation = true;
            while select _tmpProductsToAdd
            {
                setPrefix(strFmt("@SYS24300", _tmpProductsToAdd.ItemId));

                try
                {
                    if (mapLines.exists(_tmpProductsToAdd.RecId) && !deletedTmpProductsSet.in(_tmpProductsToAdd.RecId)) //check wheather the line already exists on Add product dialog
                    {
                        lineRecID = mapLines.lookup(_tmpProductsToAdd.RecId);

                        select forUpdate journalTrans
                        where journalTrans.RecId == lineRecID;

                        Qty oldQty = journalTrans.Qty;
                        if (journalTable.JournalType == InventJournalType::Count && RetailInventCountAddItemUseCountedQtyFlight::instance().isEnabled())
                        {
                            oldQty = journalTrans.Counted;
                        }

                        if (journalTrans.RecId &&
                        (journalTrans.InventDimId != _tmpProductsToAdd.InventDim || oldQty != _tmpProductsToAdd.Quantity))
                        {
                            if (this.validateInventDim(journalTrans.ItemId, journalTrans.inventDim()) &&
                            journalTrans.validateField(fieldNum(InventJournalTrans, ItemId)) &&
                            journalTrans.validateWrite())
                            {
                                RetailCreateLinesFromProductsToAdd::updateExistingInventJournalTrans(journalTrans, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                                journalTrans.update();
                            }
                            else
                            {
                                throw error("@RET490477") ;
                            }
                        }
                    }

                    else
                    {
                        journalTrans = RetailCreateLinesFromProductsToAdd::initInventJournalTrans(journalTable, _tmpProductsToAdd.ItemId, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                        if (this.validateInventDim(journalTrans.ItemId,
                            InventDim::find(journalTrans.InventDimId)) &&
                            journalTrans.validateField(fieldNum(InventJournalTrans, ItemId)) &&
                            journalTrans.validateWrite())
                        {
                            journalTableData = journalFormTrans.journalTableData();
                            journalTransData = journalTableData.journalStatic().newJournalTransData(journalTrans, journalTableData);

                            // set field voucher.
                            if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
                            {
                                journalTransData.initVoucher(journalTrans_Last.Voucher, false, true);
                            }

                            InventMovement::setAutoReserving(journalTrans);

                            journalTransData.insert();

                            ttsBegin;
                            journalTable.selectForUpdate(true);
                            journalTableData.journalTable().update();
                            ttsCommit;

                            if (journalTrans.RecId)
                            info("@RET260034");
                        }
                    }
                    _tmpProductsToAdd.delete();
                    lineSet.add(journalTrans.RecId);
                }
                catch (Exception::Error)
                {
                    lineSet.add(journalTrans.RecId);
                    checkFailed("@SYS18447");
                }
            }
        }
        

        // add lines which are selected on the Add product form .
        mapLinesIterator = new MapIterator(mapLines);

        while (mapLinesIterator.more())
        {
            try
            {
                if (!lineSet.in(mapLinesIterator.value()))
                {
                    select forUpdate journalTrans
                        where journalTrans.RecId == mapLinesIterator.value();

                    setPrefix(strFmt("@SYS24300", journalTrans.ItemId));

                    if (journalTrans.validateDelete())
                    {
                        journalTrans.delete();
                    }
                    else
                    {
                        throw error("@RET490478");
                    }
                }
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            mapLinesIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes invent journal trans based on set of parameters.
    /// </summary>
    /// <param name = "_journalTable">Invent journal table record.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_qty">Transaction quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    /// <returns>Invent journal trans.</returns>
    [HookableAttribute(true)]
    private static InventJournalTrans initInventJournalTrans(InventJournalTable _journalTable, ItemId _itemId, Qty _qty, InventDimId _inventDimId)
    {
        InventJournalTrans journalTrans;

        journalTrans.initValue();
        journalTrans.initFromInventJournalTable(_journalTable);
        journalTrans.JournalId      = _journalTable.JournalId;
        journalTrans.JournalType    = InventJournalType::Count;
        journalTrans.ItemId         = _itemId;
        journalTrans.initFromInventTable(InventTable::find(journalTrans.ItemId),
                                                        false,
                                                        true,
                                                        true);
        journalTrans.LineNum        = InventJournalTrans::lastLineNum(journalTrans.JournalId) + 1;
        journalTrans.setInventDimId(_inventDimId);

        journalTrans.Qty            = _qty;
        journalTrans.inventMovement().journalSetQty();
        journalTrans.CostAmount     = journalTrans.calcCostAmount();

        journalTrans.InventOnHand   = InventOnhand::newBOMReportFinish(journalTrans).physicalInvent();

        if (journalTrans.Qty)
        {
            journalTrans.Counted    =  journalTrans.Qty;
            journalTrans.inventMovement().journalSetCounted();
        }

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating an existing invent journal trans once quantity/invent dim id has been modified.
    /// </summary>
    /// <param name = "_journalTrans">Invent journal trans.</param>
    /// <param name = "_qty">Transaction quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    [HookableAttribute(true)]
    private static void updateExistingInventJournalTrans(InventJournalTrans _journalTrans, Qty _qty, InventDimId _inventDimId)
    {
        _journalTrans.setInventDimId(_inventDimId);

        _journalTrans.Qty = _qty;
        _journalTrans.inventMovement().journalSetQty();

        _journalTrans.CostAmount     = _journalTrans.calcCostAmount();
        _journalTrans.InventOnHand   = InventOnhand::newBOMReportFinish(_journalTrans).physicalInvent();

        if (_journalTrans.Qty)
        {
            _journalTrans.Counted    =  _journalTrans.Qty;
            _journalTrans.inventMovement().journalSetCounted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the record into <c>InventTransferLine</c> table.
    /// </summary>
    /// <param name="_inventTransferTable">
    ///  A record buffer that contains information about a selected transfer order.
    /// </param>
    /// <param name="_tmpProductsToAdd">
    ///  The record buffer that contain all the selected products to add.
    /// </param>
    /// <remarks>
    ///  This method creates the transfer lines for all selected products on the Add products form.
    /// </remarks>
    private void createInventTransferLine(Common _inventTransferTable, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        InventTransferLine  inventTransferLine;
        lineSet = new Set(Types::Int64);

        setPrefix("@SYS74342");

        while select _tmpProductsToAdd
        {
            setPrefix(strFmt("@SYS24300", _tmpProductsToAdd.ItemId));

            try
            {
                if (mapLines.exists(_tmpProductsToAdd.RecId) && !deletedTmpProductsSet.in(_tmpProductsToAdd.RecId)) //check wheather the line already exists on Add product dialog
                {
                    lineRecID = mapLines.lookup(_tmpProductsToAdd.RecId);

                    select forupdate inventTransferLine
                        where inventTransferLine.RecId == lineRecID;

                    if (inventTransferLine.RecId &&
                        (inventTransferLine.InventDimId != _tmpProductsToAdd.InventDim || inventTransferLine.QtyTransfer != _tmpProductsToAdd.Quantity))
                    {
                        RetailCreateLinesFromProductsToAdd::updateExistingInventTransferLine(inventTransferLine, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                        this.updateSingleInventTransferLine(inventTransferLine, _tmpProductsToAdd);
                    }
                }
                else
                {
                    inventTransferLine = RetailCreateLinesFromProductsToAdd::initInventTransferLine(_inventTransferTable, _tmpProductsToAdd.ItemId, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                    this.createSingleInventTransferLine(inventTransferLine, _tmpProductsToAdd);
                }
                _tmpProductsToAdd.delete();
                lineSet.add(inventTransferLine.RecId);
            }
            catch (Exception::Error)
            {
                lineSet.add(inventTransferLine.RecId);
                checkFailed("@SYS18447");
            }
        }

        // add lines which are selected on the Add product form .
        mapLinesIterator = new MapIterator(mapLines);

        while (mapLinesIterator.more())
        {
            try
            {
                if (!lineSet.in(mapLinesIterator.value()))
                {
                    select forUpdate inventTransferLine
                        where inventTransferLine.RecId == mapLinesIterator.value();

                    setPrefix(strFmt("@SYS24300", inventTransferLine.ItemId));

                    if (inventTransferLine.validateDelete())
                    {
                        inventTransferLine.delete();
                    }
                    else
                    {
                        throw error("@RET490478");
                    }
                }
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            mapLinesIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record in <c>InventTransferLine</c> table.
    /// </summary>
    /// <param name = "_inventTransferLine">
    /// The <c>InventTransferLine</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    protected void createSingleInventTransferLine(InventTransferLine _inventTransferLine, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        if (this.validateInventDim(_inventTransferLine.ItemId, InventDim::find(_inventTransferLine.InventDimId))
            && _inventTransferLine.validateWrite())
        {
            ttsbegin;
            _inventTransferLine.insert();

                if (_inventTransferLine.inventTransferTable().StockTransferCostPriceHandlingImprovement_IN)
            {
                InventTransferLine_IN inventTransferLineIN = InventTransferLine_IN::findByinventTransferLine(_inventTransferLine.RecId, true);
                if (inventTransferLineIN)
                {
                    inventTransferLineIN.recalculateStockTransferValue(_inventTransferLine, _inventTransferLine.inventDim());
                    inventTransferLineIN.update();
                }
            }
            ttscommit;

            if (_inventTransferLine.RecId)
            {
                info("@RET260034");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>InventTransferLine</c> table record.
    /// </summary>
    /// <param name = "_inventTransferLine">
    /// The <c>InventTransferLine</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    protected void updateSingleInventTransferLine(InventTransferLine _inventTransferLine, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        if (this.validateInventDim(_inventTransferLine.ItemId, _inventTransferLine.inventDim()) &&
            _inventTransferLine.validateWrite())
        {
            _inventTransferLine.update();
        }
        else
        {
            throw error("@RET490477") ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferLine</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates and initializes invent transfer line based on set of parameters.
    /// </summary>
    /// <param name = "_inventTransferTable">Invent transfer table record.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_qty">Transaction quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    /// <returns>Invent transfer line.</returns>
    [HookableAttribute(true)]
    private static InventTransferLine initInventTransferLine(InventTransferTable _inventTransferTable, ItemId _itemId, Qty _qty, InventDimId _inventDimId)
    {
        InventTransferLine	inventTransferLine;
        InventDim           newInventDim, tmpInventDim;

        inventTransferLine.initValue();
        inventTransferLine.ItemId = _itemId;
        inventTransferLine.initFromInventTable(InventTable::find(inventTransferLine.ItemId));
        inventTransferLine.initFromInventTableModule(InventTableModule::find(inventTransferLine.ItemId, ModuleInventPurchSales::Invent));
        inventTransferLine.initFromInventTransferTable(_inventTransferTable, true);

        newInventDim = InventDim::find(inventTransferLine.InventDimId);
        tmpInventDim = InventDim::find(_inventDimId);

        // set new inventory dimension without InventLocationId and InventSiteId.
        newInventDim.configId        = tmpInventDim.configId;
        newInventDim.InventVersionId = tmpInventDim.InventVersionId;
        newInventDim.wMSLocationId   = tmpInventDim.wMSLocationId;
        newInventDim.inventBatchId   = tmpInventDim.inventBatchId;
        newInventDim.InventColorId   = tmpInventDim.InventColorId;
        newInventDim.InventSizeId    = tmpInventDim.InventSizeId;
        newInventDim.inventSerialId  = tmpInventDim.inventSerialId;
        newInventDim.InventStyleId   = tmpInventDim.InventStyleId;
        newInventDim.InventStatusId  = tmpInventDim.InventStatusId;

        newInventDim = InventDim::findOrCreate(newInventDim);
        inventTransferLine.InventDimId = newInventDim.inventDimId;

        inventTransferLine.QtyTransfer      = _qty;

        inventTransferLine.LineNum      = InventTransferLine::lastLineNum(inventTransferLine.TransferId) + 1.0;

        InventMovement::setMinMaxQty(inventTransferLine);

        inventTransferLine.QtyRemainReceive = inventTransferLine.QtyTransfer;
        inventTransferLine.QtyRemainShip    = inventTransferLine.QtyTransfer;

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating an existing invent transfer line once quantity/invent dim id has been modified.
    /// </summary>
    /// <param name = "_inventTransferLine">Invent transfer line.</param>
    /// <param name = "_qty">Transaction quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    [HookableAttribute(true)]
    private static void updateExistingInventTransferLine(InventTransferLine _inventTransferLine, Qty _qty, InventDimId _inventDimId)
    {
        _inventTransferLine.InventDimId = _inventDimId;
        _inventTransferLine.QtyTransfer = _qty;

        InventMovement::bufferSetRemainQty(_inventTransferLine,InventMovSubType::None);
        InventMovement::bufferSetRemainQty(_inventTransferLine,InventMovSubType::TransferOrderTransitFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodicDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create periodic discount.
    /// </summary>
    /// <param name = "_periodicDiscount">Period discount record.</param>
    /// <param name = "_tmpProductsToAdd">
    /// The record buffer that contain all the selected products to add.
    /// </param>
    protected void createPeriodicDiscount(RetailPeriodicDiscount _periodicDiscount,
                                         TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        this.createPeriodicDiscountBase(_periodicDiscount, _tmpProductsToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createThresholdDiscountApplyingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create threshold discount with discount applying lines.
    /// </summary>
    /// <param name = "_thresholdTier">Threshold discount tier record.</param>
    /// <param name = "_tmpProductsToAdd">
    /// The record buffer that contain all the selected products to add.
    /// </param>
    private void createThresholdDiscountApplyingLines(RetailDiscountThresholdTiers _thresholdTier,
                                         TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        RetailPeriodicDiscount          periodicDiscount;
        RetailGroupMemberLine           groupMemberLine, updateGroupMemberLine;
        RetailPeriodicDiscountLine      periodicDiscountLine;

        periodicDiscount = RetailPeriodicDiscount::findByOfferId(_thresholdTier.OfferId);

        this.createPeriodicDiscountBase(periodicDiscount, _tmpProductsToAdd, true, _thresholdTier.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodicDiscountBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create periodic discount.
    /// </summary>
    /// <param name = "_periodicDiscount">Period discount record.</param>
    /// <param name = "_tmpProductsToAdd">Products to add.</param>
    /// <param name = "_isThresholdWithApplyingLine">If the lines to create is threshold discount applying lines.</param>
    /// <param name = "_thresholdTierId">Threshold tier rec id.</param>
    private void createPeriodicDiscountBase(RetailPeriodicDiscount _periodicDiscount,
        TmpRetailProductsToAdd _tmpProductsToAdd,
        boolean _isThresholdWithApplyingLine = false,
        RecId  _thresholdTierId  = 0)

    {
        RetailGroupMemberLine           groupMemberLine, updateGroupMemberLine;
        RetailPeriodicDiscountLine      periodicDiscountLine;

        lineSet = new Set(Types::Int64);

        while select _tmpProductsToAdd
        {
            try
            {
                ttsBegin;
                if (mapLines.exists(_tmpProductsToAdd.RecId) && !deletedTmpProductsSet.in(_tmpProductsToAdd.RecId)) //check wheather the line already exists on discount
                {
                    lineRecID = mapLines.lookup(_tmpProductsToAdd.RecId); //find discount record ID through keyvalue.

                    select forUpdate periodicDiscountLine
                        where periodicDiscountLine.RecId == lineRecID
                    join forUpdate updateGroupMemberLine
                        where updateGroupMemberLine.RecId == periodicDiscountLine.RetailGroupMemberLine;

                    if (periodicDiscountLine.RecId &&
                        (updateGroupMemberLine.Variant != _tmpProductsToAdd.EcoResDistinctProductVariant))
                    {
                        updateGroupMemberLine.Variant = _tmpProductsToAdd.EcoResDistinctProductVariant;

                        periodicDiscountLine.Name = updateGroupMemberLine.getDescription(); // update dicount line name too.

                        if (periodicDiscountLine.validateWrite() &&
                                updateGroupMemberLine.validateWrite())
                        {
                            updateGroupMemberLine.update();
                            periodicDiscountLine.update();
                        }
                        else
                        {
                            throw error("@RET490477") ;
                        }
                    }
                }
                else
                {
                    periodicDiscountLine = this.getPeriodicDiscountLineByDiscountType(_periodicDiscount, _isThresholdWithApplyingLine, _thresholdTierId);

                    periodicDiscountLine.initValue();
                    periodicDiscountLine.OfferId = _periodicDiscount.OfferId;
                    periodicDiscountLine.LineNum = RetailPeriodicDiscountLine::nextLineNum(periodicDiscountLine.OfferId);

                    if (periodicDiscountLine.RetailGroupMemberLine)
                    {
                        groupMemberLine = RetailGroupMemberLine::find(periodicDiscountLine.RetailGroupMemberLine, true);
                        groupMemberLine.Product = _tmpProductsToAdd.EcoResProduct;
                        groupMemberLine.Variant = _tmpProductsToAdd.EcoResDistinctProductVariant;
                        groupMemberLine.update();

                        periodicDiscountLine.Name = InventTable::findByProduct(groupMemberLine.Product).itemName();
                        periodicDiscountLine.Description = periodicDiscountLine.Name;
                        periodicDiscountLine.UnitOfMeasure = UnitOfMeasure::findBySymbol(
                                                                InventTableModule::find(InventTable::findByProduct(groupMemberLine.Product).ItemId,
                                                                ModuleInventPurchSales::Sales).UnitId).RecId;

                        if (periodicDiscountLine.checkDiscountLine(groupMemberLine))
                        {
                            periodicDiscountLine.insert();
                        }
                        else
                        {
                            periodicDiscountLine.delete();
                        }
                    }
                }

                lineSet.add(periodicDiscountLine.RecId);

                ttsCommit;
            }
            catch (Exception::Error)
            {
                lineSet.add(periodicDiscountLine.RecId);
                checkFailed("@SYS18447");
            }
        }

        // add lines which are selected on the Add product form .
        mapLinesIterator = new MapIterator(mapLines);

        while (mapLinesIterator.more())
        {
            try
            {
                if (!lineSet.in(mapLinesIterator.value()))
                {
                    select forUpdate periodicDiscountLine
                        where periodicDiscountLine.RecId == mapLinesIterator.value();

                    setPrefix(strFmt("@SYS24300", periodicDiscountLine.groupMemberLine().Product));

                    if (periodicDiscountLine.validateDelete())
                    {
                        periodicDiscountLine.delete();
                    }
                    else
                    {
                        throw error("@RET490478");
                    }
                }
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            mapLinesIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodicDiscountLineByDiscountType</Name>
				<Source><![CDATA[
    private RetailPeriodicDiscountLine getPeriodicDiscountLineByDiscountType(RetailPeriodicDiscount _periodicDiscount, boolean _isThresholdDiscountApplyingLine = false, RecId _thresholdTierId = 0)
    {
        RetailPeriodicDiscountLine              periodicDiscountLine;
        RetailDiscountLineOffer                 discountLineOffer;
        RetailDiscountLineMultibuy              discountLineMultiBuy;
        RetailDiscountLineMixAndMatch           discountLineMixMatch;
        RetailDiscountLineThresholdApplying     discountLineThresholdApplying;

        switch (_periodicDiscount.PeriodicDiscountType)
        {
            case RetailDiscountOfferTypeBase::DiscountOffer:
            case RetailDiscountOfferTypeBase::Promotion:
            case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                discountLineOffer.discPct = _periodicDiscount.DiscountPercentValue;
                periodicDiscountLine = discountLineOffer;
                break;

            case RetailDiscountOfferTypeBase::Multibuy:
                periodicDiscountLine = discountLineMultiBuy;
                break;

            case RetailDiscountOfferTypeBase::MixAndMatch:
            case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                periodicDiscountLine = discountLineMixMatch;
                break;

            case RetailDiscountOfferTypeBase::Threshold:
            default:
                if (_isThresholdDiscountApplyingLine)
                {
                    discountLineThresholdApplying.Tier = _thresholdTierId;

                    periodicDiscountLine = discountLineThresholdApplying;
                    periodicDiscountLine.IsDiscountApplyingLine = NoYes::Yes;
                    break;
                }

                EventHandlerResult result = new EventHandlerResult();

                this.getPeriodicDiscountLineByDiscountTypeDelegate(_periodicDiscount, result);

                if (result.hasResult())
                {
                    periodicDiscountLine = result.result();
                }

                break;
        }

        return periodicDiscountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodicDiscountLineByDiscountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for retrieving the correct period discount line object based on the periodic discount type.
    /// </summary>
    /// <param name = "_periodicDiscount">Period discount record.</param>
    /// <param name = "_result">Subscribers must return the proper period discount line object.</param>
    delegate void getPeriodicDiscountLineByDiscountTypeDelegate(RetailPeriodicDiscount _periodicDiscount, EventHandlerResult _result)
    {
        // Subscriber will provide proper implementation to this method
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method creates record in the following tables:
    /// 1. <c>SalesLine</c>
    /// 2. <c>PurchLine</c>
    /// 3. <c>InventTransferLine</c>
    /// 4. <c>InventJournalTrans</c>
    /// 5. <c>RetailPeriodicDiscountLine</c>
    /// </summary>
    /// <param name="_tmpProductsToAdd">
    /// The record buffer that contain all the selected products to add.
    /// </param>
    public void createProducts(TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        switch (common.TableId)
        {
            case tableNum (SalesTable):
                this.createSalesLine(SalesTable::findRecId(common.RecId), _tmpProductsToAdd);
                break;
            case tableNum (PurchTable):
                this.createPurchLine(PurchTable::findRecId(common.RecId), _tmpProductsToAdd);
                break;
            case tableNum (InventTransferTable):
                this.createInventTransferLine(common, _tmpProductsToAdd);
                break;
            case tableNum (InventJournalTrans):
                this.createInventJournalTrans(common, _tmpProductsToAdd);
                break;
            case tableNum (RetailPeriodicDiscount):
                this.createPeriodicDiscount(common, _tmpProductsToAdd);
                break;
            case tableNum (RetailDiscountThresholdTiers):
                this.createThresholdDiscountApplyingLines(common, _tmpProductsToAdd);
                break;
            case tableNum (TmpRetailLabelsToPrint):
                this.createTmpAddProducts(_tmpProductsToAdd);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record into <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_purchTable">
    /// A record buffer that contains information about a selected purchase order.
    /// </param>
    /// <param name="_tmpProductsToAdd">
    /// The record buffer that contain all the selected products to add.
    /// </param>
    /// <remarks>
    /// This method creates the purch lines for all selected products on the Add products form.
    /// </remarks>
    private void createPurchLine(PurchTable _purchTable, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        PurchLine   purchLine;
        boolean     doSearchForAgreementLine;

        lineSet = new Set(Types::Int64);

        setPrefix("@SYS74342");
        doSearchForAgreementLine = (_purchTable.MatchingAgreement != 0);

        while select _tmpProductsToAdd
        {            
            setPrefix(strFmt("@SYS24300", _tmpProductsToAdd.ItemId));
            try
            {
                ttsbegin;

                if (mapLines.exists(_tmpProductsToAdd.RecId) && !deletedTmpProductsSet.in(_tmpProductsToAdd.RecId)) //check wheather the line already exists on Add product dialog
                {
                    lineRecID = mapLines.lookup(_tmpProductsToAdd.RecId); //find purchLine record ID through keyvalue.

                    purchLine = PurchLine::findRecId(lineRecID, true);

                    if (purchLine.RecId &&
                        (purchLine.InventDimId != _tmpProductsToAdd.InventDim || purchLine.PurchQty != _tmpProductsToAdd.Quantity))
                    {
                        RetailCreateLinesFromProductsToAdd::updateExistingPurchLine(purchLine, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                        this.updateSinglePurchLine(purchLine, _tmpProductsToAdd);
                    }
                }
                else
                {
                    purchLine = RetailCreateLinesFromProductsToAdd::initPurchLine(_purchTable.PurchId, InventTable::findByProduct(_tmpProductsToAdd.EcoResProduct).ItemId, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                    using (var context = EcoResProductForceInitDimensionDefaultingContext::construct())
                    {
                        this.createSinglePurchLine(purchLine, _tmpProductsToAdd, doSearchForAgreementLine);
                    }

                    _tmpProductsToAdd.delete();
                }

                lineSet.add(purchLine.RecId);
                ttscommit;
            }
            catch (Exception::Error)
            {
                lineSet.add(purchLine.RecId); //still add into set if any exception occured.
                checkFailed("@SYS18447");
            }
        }

        // add lines which are selected on the Add product form .
        mapLinesIterator = new MapIterator(mapLines);

        while (mapLinesIterator.more())
        {
            try
            {
                ttsbegin;
                if (!lineSet.in(mapLinesIterator.value()))
                {
                    purchLine = PurchLine::findRecId(mapLinesIterator.value(), true);

                    setPrefix(strFmt("@SYS24300", purchLine.ItemId));

                    if (purchLine.validateDelete())
                    {
                        purchLine.deleteWithoutUpdatingDeliveryScheduleLines();
                    }
                    else
                    {
                        throw error("@RET490478");
                    }
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            mapLinesIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSinglePurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record in <c>PurchLine</c> table.
    /// </summary>
    /// <param name = "_purchLine">
    /// The <c>PurchLine</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    /// <param name = "_doSearchForAgreementLine">
    /// The boolean value.
    /// </param>
    protected void createSinglePurchLine(PurchLine _purchLine, TmpRetailProductsToAdd _tmpProductsToAdd, boolean _doSearchForAgreementLine)
    {
        if (this.validateInventDim(_purchLine.ItemId, InventDim::find(_purchLine.InventDimId)))
        {
            _purchLine.createLine(true, // validation
                                true, // initFromPurchTable
                                true, // initFromInventTableModule
                                true, // calcInventQty
                                true, // searchMarkup
                                true, // searchPrice
                                true, // ignorePurchTableInventDim
                                _doSearchForAgreementLine); // searchAgreementLine

            this.updateLineForFixedAssets(_purchLine);

            if (_purchLine.RecId)
            {
                info("@RET260034");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineForFixedAssets</Name>
				<Source><![CDATA[
    private void updateLineForFixedAssets(PurchLine _purchLIne)
    {
        if (_purchLine.RecId
            && _purchLine.allowCreateFixedAsset())
        {
            AssetGroupId assetGroup =_purchLIne.getAssetGroupBasedOnAssetRule();

            if (assetGroup)
            {
                _purchLine.AssetGroup = assetGroup;
                _purchLine.CreateFixedAsset = NoYes::Yes;
                _purchLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSinglePurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>PurchLine</c> table record.
    /// </summary>
    /// <param name = "_purchLine">
    /// The <c>PurchLine</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    protected void updateSinglePurchLine(PurchLine _purchLine, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        if (_purchLine.validateWrite())
        {
            _purchLine.updateWithoutUpdatingDeliveryScheduleLines();
        }
        else
        {
            throw error("@RET490477") ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes purchase line based on set of parameters.
    /// </summary>
    /// <param name = "_purchId">Purch id.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_qty">Line quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    /// <returns>Purch line.</returns>
    [HookableAttribute(true)]
    private static PurchLine initPurchLine(PurchId _purchId, ItemId _itemId, Qty _qty, InventDimId _inventDimId)
    {
        PurchLine purchLine;

        purchLine.initValue();
        
        purchLine.PurchId	= _purchId;
        purchLine.ItemId	= _itemId;
        purchLine.PurchQty  = _qty;
        purchLine.PurchUnit = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Purch).UnitId;
        purchLine.setInventDimId(_inventDimId);

        InventMovement::setMinMaxQty(purchLine);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating an existing purchase line once quantity/invent dim id has been modified.
    /// </summary>
    /// <param name = "_purchLine">Purchase line.</param>
    /// <param name = "_qty">Line quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    [HookableAttribute(true)]
    private static void updateExistingPurchLine(PurchLine _purchLine, Qty _qty, InventDimId _inventDimId)
    {
        _purchLine.setInventDimId(_inventDimId);
        _purchLine.PurchQty = _qty;

        PurchLine::modifyPurchQty(_purchLine, _purchLine.inventDim());

        if (_purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            InventMovement::bufferSetRemainQty(_purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates record into <c>SalesLine</c> table.
    /// </summary>
    /// <param name="_salesTable">
    ///  A record buffer that contains information about a selected sales order.
    /// </param>
    /// <param name="_tmpProductsToAdd">
    ///  The record buffer that contain all the selected products to add.
    /// </param>
    /// <remarks>
    ///  This method creates the sales lines for all selected products on the Add products form.
    /// </remarks>
    private void createSalesLine(SalesTable _salesTable, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        salesLine   salesLine;
        lineSet = new Set(Types::Int64);

        setPrefix("@SYS74342");

        while select _tmpProductsToAdd
        {
            boolean isValidDlvMode = true;
            setPrefix(strFmt("@SYS24300", _tmpProductsToAdd.ItemId));

            try
            {
                ttsbegin;
                if (mapLines.exists(_tmpProductsToAdd.RecId) && !deletedTmpProductsSet.in(_tmpProductsToAdd.RecId)) //check wheather the line already exists on purchase order
                {
                    lineRecID = mapLines.lookup(_tmpProductsToAdd.RecId); //find salesLine record ID through keyvalue.

                    salesLine = SalesLine::findRecId(lineRecID, true);

                    if (salesLine.RecId &&
                        (salesLine.InventDimId != _tmpProductsToAdd.InventDim || salesLine.SalesQty != _tmpProductsToAdd.Quantity))
                    {
                        RetailCreateLinesFromProductsToAdd::updateExistingSalesLine(salesLine, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                        this.updateSingleSalesLine(salesLine, _tmpProductsToAdd);
                    }
                }
                else
                {
                    salesLine = RetailCreateLinesFromProductsToAdd::initSalesLine(_salesTable.SalesId, _tmpProductsToAdd.ItemId, _tmpProductsToAdd.Quantity, _tmpProductsToAdd.InventDim);

                    using (var context = EcoResProductForceInitDimensionDefaultingContext::construct())
                    {
                        // If the line is part of a Retail Channel sales order, then perform delivery mode validation.
                        if (RetailDeliveryOptionsValidationForProductToAddToggle::instance().IsEnabled() &&
                            _salesTable.retailSalesTable().RetailChannel &&
                            isConfigurationkeyEnabled(configurationKeyNum(TradeMultiShipTo)))
                        {
                            isValidDlvMode = RetailShippingDeliveryMode::validateDeliveryOptionForProductToAdd(_salesTable, _tmpProductsToAdd.ItemId, _tmpProductsToAdd.inventDim().inventDimId);

                            if (!isValidDlvMode)
                            {
                                throw error("@SYS18447");
                            }

                        }

                        this.createSingleSalesLine(salesLine, _salesTable, _tmpProductsToAdd);
                    }

                    _tmpProductsToAdd.delete();
                }

                // Updates retail sales order line discounts in price details.
                salesLine.updateRetailDiscounts();

                if (_tmpProductsToAdd.Catalog)
                {
                    RetailSalesLine retailSalesLine = RetailSalesLine::findBySalesLine(salesLine.RecId, true);
                    if (retailSalesLine)
                    {
                        retailSalesLine.Catalog = _tmpProductsToAdd.Catalog;
                        retailSalesLine.update();
                    }
                }

                lineSet.add(salesLine.RecId);
                ttscommit;
            }
            catch (Exception::Error)
            {
                lineSet.add(salesLine.RecId); //still add into set if any exception occured.
                if (isValidDlvMode)
                {
                    checkFailed("@SYS18447");
                }
            }
        }

        // add lines which are selected on the Add product form .
        mapLinesIterator = new MapIterator(mapLines);

        while (mapLinesIterator.more())
        {
            try
            {
                ttsbegin;
                if (!lineSet.in(mapLinesIterator.value()))
                {
                    salesLine = SalesLine::findRecId(mapLinesIterator.value(), true);

                    setPrefix(strFmt("@SYS24300", salesLine.ItemId));

                    if (salesLine.validateDelete())
                    {
                        salesLine.deleteWithoutUpdatingDeliveryScheduleLines();
                    }
                    else
                    {
                        throw error("@RET490478");
                    }
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }

            mapLinesIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record in <c>SalesLine</c> table.
    /// </summary>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> record buffer.
    /// </param>
    /// <param name = "_salesTable">
    /// The <c>SalesTable</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    protected void createSingleSalesLine(SalesLine _salesLine, SalesTable _salesTable, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        boolean  doSearchForAgreementLine = (_salesTable.MatchingAgreement != 0);

        if (this.validateInventDim(_salesLine.ItemId, InventDim::find(_salesLine.InventDimId)))
        {
            ttsbegin;
            _salesLine.createLine( true, //  validation
                                true, // initFromSalesTable
                                true, // initFromInventTableModule
                                true, // calcInventQty
                                true, // searchMarkup
                                true, // searchPrice
                                _salesTable.Reservation == ItemReservation::Automatic, // checkReservation
                                true, // skipCreditLimitCheck
                                true, // ignoreSalesTableInventDim
                                true, // setlinenum
                                doSearchForAgreementLine); // searchAgreementLine

            if (SalesLineCTPDeliveryDateControlRecalculateFeature::instance().isEnabled()
                && SalesParameters::find().DeliveryDateCTPCalculateOnAddLines)
            {
                _salesLine.recalculateSalesLineCTPDeliveryDate();
            }
            ttscommit;

            if (_salesLine.RecId)
            {
                info("@RET260034");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>SalesLine</c> table record.
    /// </summary>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> record buffer.
    /// </param>
    /// <param name = "_tmpProductsToAdd">
    /// The <c>TmpRetailProductsToAdd</c> record buffer.
    /// </param>
    protected void updateSingleSalesLine(SalesLine _salesLine, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        if (_salesLine.validateWrite())
        {
            _salesLine.updateWithoutUpdatingDeliveryScheduleLines();
        }
        else
        {
            throw error("@RET490477") ;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes sales line based on set of parameters.
    /// </summary>
    /// <param name = "_salesId">Sales id.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_qty">Line quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    /// <returns>Sales line.</returns>
    [HookableAttribute(true)]
    private static SalesLine initSalesLine(SalesId _salesId, ItemId _itemId, Qty _qty, InventDimId _inventDimId)
    {
        SalesLine salesLine;

        salesLine.initValue();
        
        salesLine.SalesId           = _salesId;
        salesLine.ItemId            = _itemId;
        salesLine.SalesQty          = _qty;
        salesLine.SalesUnit         = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Sales).UnitId;
        salesLine.setInventDimId(_inventDimId);

        InventMovement::setMinMaxQty(salesLine);

        // sets the default values for the below fields. The fields are dependent among them so don't change this order.
        salesLine.defaultField(fieldNum(SalesLine, DeliveryType));
        salesLine.defaultField(fieldNum(SalesLine, SourcingVendAccount));
        salesLine.defaultField(fieldNum(SalesLine, SourcingOrigin));
        salesLine.defaultField(fieldNum(SalesLine, SourcingCompanyId));
        salesLine.defaultField(fieldNum(SalesLine, SourcingInventSiteId));
        salesLine.defaultField(fieldNum(SalesLine, SourcingInventLocationId));

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating an existing sales line once quantity/invent dim id has been modified.
    /// </summary>
    /// <param name = "_salesLine">Sales line.</param>
    /// <param name = "_qty">Line quantity.</param>
    /// <param name = "_inventDimId">Invent dimension id.</param>
    [HookableAttribute(true)]
    private static void updateExistingSalesLine(SalesLine _salesLine, Qty _qty, InventDimId _inventDimId)
    {
        _salesLine.setInventDimId(_inventDimId);
        _salesLine.SalesQty = _qty;

        SalesLine::modifySalesQty(_salesLine, _salesLine.inventDim());

        if (_salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            InventMovement::bufferSetRemainQty(_salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpAddProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save record <c>TmpRetailProductsToAdd</c> into data set.
    /// </summary>
    /// <param name="_tmpProductsToAdd">
    /// The data buffer for the products selected to be added.
    /// </param>
    private void createTmpAddProducts(TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        recordList = new RecordSortedList(tableNum(TmpRetailProductsToAdd));
        recordList.sortOrder(fieldNum(TmpRetailProductsToAdd, RecID));

        while select _tmpProductsToAdd
        {
            recordList.ins(_tmpProductsToAdd);
            _tmpProductsToAdd.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAddProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get data set <c>TmpRetailProductsToAdd</c> from caller form RetailPrintLabels.
    /// </summary>
    /// <returns>
    /// The data set <c>TmpRetailProductsToAdd</c> generated by method createTmpAddProducts.
    /// </returns>
    public RecordSortedList getTmpAddProducts()
    {
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>journalFormTrans</c> parameter.
    /// </summary>
    /// <param name="_journalFormTrans">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>journalFormTrans</c> parameter.
    /// </returns>
    JournalForm journalForm(InventJournalFormTrans_Movement _journalFormTrans = journalFormTrans)
    {
        journalFormTrans = _journalFormTrans;

        return journalFormTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAssortmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert existing lines in temporary table of selected products.
    /// </summary>
    /// <param name = "_assortmentTable">Assortment record.</param>
    /// <param name = "_tmpProductsToAdd">Temporary table of selected products.</param>
    /// <returns>Map of previously selected product and assortment lines rec id.</returns>
    public static Map loadAssortmentLines(RetailAssortmentTable _assortmentTable, TmpRetailProductsToAdd _tmpProductsToAdd)
    {
        RetailAssortmentTable           assortmentTable;
        RetailAssortmentProductLine     assortmentProductLine;
        RetailGroupMemberLine           groupMemberLine;
        EcoResProduct                   ecoResProduct; 
        Map                             mapOfPreSelectedProducts = new Map(Types::Int64, Types::Int64); //TMPRETAILPRODUCTSTOADD.RECID, Common.RecID

		// Select product/variant related to existing assortment lines
        while select RecId, RetailGroupMemberLineId from assortmentProductLine
                where   assortmentProductLine.AssortmentRecId == _assortmentTable.RecId
                    &&  assortmentProductLine.Status == _assortmentTable.Status
                join Product, Variant from groupMemberLine
                    where   groupMemberLine.RecId == assortmentProductLine.RetailGroupMemberLineId
                        &&  (groupMemberLine.Product || groupMemberLine.Variant)
                outer join ecoResProduct
                    where ecoResProduct.RecId == groupMemberLine.Product
        {
            RetailCreateLinesFromProductsToAdd::loadExistingLines(ecoResProduct, mapOfPreSelectedProducts, _tmpProductsToAdd, 0, '', groupMemberLine.Variant, assortmentProductLine.RecId, false);
        }

        return mapOfPreSelectedProducts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCountJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpretailProductsToAdd</c> for counting journal.
    /// </summary>
    private void loadCountJournalLines()
    {
        InventJournalTrans  selectedJournalTrans, journalTrans;
        InventTable         inventTable;
        EcoResProduct       ecoResProduct;

        selectedJournalTrans = callerArgs.record();

        while select journalTrans
            where journalTrans.JournalId == selectedJournalTrans.JournalId
            join Product from inventTable
                where inventTable.ItemId == journalTrans.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
        {
            this.loadLines(ecoResProduct, journalTrans.Counted, journalTrans.InventDimId, 0, journalTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpRetailProductsToAdd</c> for discounts.
    /// </summary>
    /// <param name = "_retailPeriodicDiscount">Periodic discounts record.</param>
    [Replaceable(true)]
    protected void loadDiscountLines(RetailPeriodicDiscount  _retailPeriodicDiscount)
    {
        RetailPeriodicDiscountLine      periodicDiscountLine;
        RetailGroupMemberLine           groupMemberLine;
        EcoResProduct                   ecoResProduct;

        while select RecId, RetailGroupMemberLine from periodicDiscountLine
            where periodicDiscountLine.OfferId == _retailPeriodicDiscount.OfferId &&
                periodicDiscountLine.IsDiscountApplyingLine == NoYes::No
            join Product, Variant, InventDimId from groupMemberLine
                where groupMemberLine.RecId == periodicDiscountLine.RetailGroupMemberLine
                    && (groupMemberLine.Product || groupMemberLine.Variant || groupMemberLine.InventDimId)
            outer join ecoResProduct
                where ecoResProduct.RecId == groupMemberLine.Product
        {
            this.loadLines(
                ecoResProduct,
                0,
                groupMemberLine.InventDimId ? groupMemberLine.InventDimId : InventDim::inventDimIdBlank(),
                groupMemberLine.Variant,
                periodicDiscountLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadThresholdDiscountApplyingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpRetailProductsToAdd</c> for discounts.
    /// </summary>
    /// <param name = "_retailDiscountThresholdTiers">Threshold discounts tier record.</param>
    [Replaceable(true)]
    protected void loadThresholdDiscountApplyingLines(RetailDiscountThresholdTiers  _retailDiscountThresholdTiers)
    {
        RetailDiscountLineThresholdApplying      thresholdApplyingLine;
        RetailGroupMemberLine           groupMemberLine;
        EcoResProduct                   ecoResProduct;

        while select RecId, RetailGroupMemberLine from thresholdApplyingLine
            where thresholdApplyingLine.OfferId == _retailDiscountThresholdTiers.OfferId &&
                thresholdApplyingLine.Tier == _retailDiscountThresholdTiers.RecId &&
                thresholdApplyingLine.IsDiscountApplyingLine == NoYes::Yes
            join Product, Variant, InventDimId from groupMemberLine
                where groupMemberLine.RecId == thresholdApplyingLine.RetailGroupMemberLine
                    && (groupMemberLine.Product || groupMemberLine.Variant || groupMemberLine.InventDimId)
            outer join ecoResProduct
                where ecoResProduct.RecId == groupMemberLine.Product
        {
            this.loadLines(
                ecoResProduct,
                0,
                groupMemberLine.InventDimId ? groupMemberLine.InventDimId : InventDim::inventDimIdBlank(),
                groupMemberLine.Variant,
                thresholdApplyingLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert item lines in temporary table of selected products.
    /// </summary>
    /// <param name = "_ecoResProduct">Product proeprties.</param>
    /// <param name = "_lineQty">Product quantity.</param>
    /// <param name = "_lineInventDimId">Product dimention id.</param>
    /// <param name = "_variantID">Product variant id.</param>
    /// <param name = "_lineRecID">Product line rec id.</param>
    /// <param name = "_recId">Product redId.</param>
    /// <returns>Map of selected products</returns>
    protected Map loadLines(EcoResProduct     _ecoResProduct,
                            Qty             _lineQty            = 0,
                            InventDimId     _lineInventDimId    = '',
                            RefRecId        _variantID          = 0,
                            RefRecId        _lineRecID          = 0,
                            RecId           _recId              = 0)
    {
        return this.loadLinesByCatalog(_ecoResProduct, _lineQty, _lineInventDimId, _variantID, _lineRecID, _recId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLinesByCatalog</Name>
				<Source><![CDATA[
    private final Map loadLinesByCatalog(EcoResProduct     _ecoResProduct,
                                        Qty             _lineQty,
                                        InventDimId     _lineInventDimId,
                                        RefRecId        _variantID,
                                        RefRecId        _lineRecID,
                                        RecId           _recId,
                                        CatalogRefRecId _catalogRecId)
    {
        InventDim       tmpInventDim;
        InventDimCombination    inventDimCombination;

        tmpProductsToAddInsert.clear();

        tmpProductsToAddInsert.EcoResProduct        = _ecoResProduct.RecId;
        tmpProductsToAddInsert.EcoResProductName    = _ecoResProduct.productName();
        tmpProductsToAddInsert.Quantity             = _lineQty;
        tmpProductsToAddInsert.Catalog              = _catalogRecId;

        // If calling from those forms where Variant ID is specified like RetailCategory...etc.
        if (_variantId)
        {
            tmpProductsToAddInsert.EcoResDistinctProductVariant = _variantId;

            inventDimCombination = InventDimCombination::findByDistinctProductVariant(_variantId);
            tmpInventDim    = inventDimCombination.inventDim();
            tmpProductsToAddInsert.InventDim    = tmpInventDim.InventDimId;

            if (tmpProductsToAddInsert.EcoResProduct == 0)
            {
                _ecoResProduct = EcoResProduct::find(inventDimCombination.inventTable().Product);
                tmpProductsToAddInsert.EcoResProduct        = _ecoResProduct.RecId;
                tmpProductsToAddInsert.EcoResProductName    = _ecoResProduct.productName();
            }
        }

        // If calling from RetailAddProductsVariants, assign invent dim for dimension based discount.
        if (callerMenuItemName  == menuitemDisplayStr(RetailAddProductsVariants))
        {
            if (_variantId == 0 && _lineInventDimId)
            {
                tmpProductsToAddInsert.InventDim = _lineInventDimId;
            }
        }

        // If calling from those forms where Inventory dimension is specified Not Variant Id like SalesTable, PurchTable... etc.
        if (callerMenuItemName  != menuitemDisplayStr(RetailAddProductsVariants))
        {
            if (_variantId == 0 && _lineInventDimId)
            {
                tmpProductsToAddInsert.InventDim    = _lineInventDimId;
            }

            tmpProductsToAddInsert.ItemId  = InventTable::findByProduct(tmpProductsToAddInsert.EcoResProduct).ItemId;
        }

        if (_catalogRecId && !tmpProductsToAddInsert.EcoResDistinctProductVariant
            && tmpProductsToAddInsert.ItemId && tmpProductsToAddInsert.InventDim)
        {
            tmpInventDim = InventDim::find(tmpProductsToAddInsert.InventDim);
            tmpProductsToAddInsert.EcoResDistinctProductVariant = InventDimCombination::findByInventDim(tmpProductsToAddInsert.ItemId, tmpInventDim).DistinctProductVariant;
        }

        tmpProductsToAddInsert.insert();

        mapLines.insert(tmpProductsToAddInsert.RecId, _lineRecID); //inserts the caller identification.

        if (_recId)
        {
            mapRecId.insert(_recId, tmpProductsToAddInsert);
        }

        return mapLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExistingLines</Name>
				<Source><![CDATA[
    private static void loadExistingLines(EcoResProduct      _ecoResProduct,
                            Map                     _mapLines,
                            TmpRetailProductsToAdd  _tmpProductsToAddInsert,
                            Qty             _lineQty            = 0,
                            InventDimId     _lineInventDimId    = '',
                            RefRecId        _variantID          = 0,
                            RefRecId        _lineRecID          = 0,
                            boolean         _isInventDimNotVariantId = true)
    {
        RetailCreateLinesFromProductsToAdd::initTmpProductsToAdd(_ecoResProduct, _tmpProductsToAddInsert, _lineQty, _lineInventDimId, _variantID, _isInventDimNotVariantId);

        _tmpProductsToAddInsert.insert();

        _mapLines.insert(_tmpProductsToAddInsert.RecId, _lineRecID); // inserts the caller identification.
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpProductsToAdd</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private static void initTmpProductsToAdd(   EcoResProduct           _ecoResProduct,
                                                TmpRetailProductsToAdd  _tmpProductsToAddInsert,
                                                Qty                     _lineQty            = 0,
                                                InventDimId             _lineInventDimId    = '',
                                                RefRecId                _variantID          = 0,
                                                boolean                 _isInventDimNotVariantId = true)
    {
        InventDim       tmpInventDim;
        InventDimCombination    inventDimCombination;
        
        _tmpProductsToAddInsert.clear();

        _tmpProductsToAddInsert.EcoResProduct        = _ecoResProduct.RecId;
        _tmpProductsToAddInsert.EcoResProductName    = _ecoResProduct.productName();
        _tmpProductsToAddInsert.Quantity             = _lineQty;

        // If calling from those forms where Variant ID is specified like RetailCategory...etc.
        if (_variantId)
        {
            _tmpProductsToAddInsert.EcoResDistinctProductVariant = _variantId;

            inventDimCombination = InventDimCombination::findByDistinctProductVariant(_variantId);
            tmpInventDim    = inventDimCombination.inventDim();
            _tmpProductsToAddInsert.InventDim    = tmpInventDim.InventDimId;

            if (_tmpProductsToAddInsert.EcoResProduct == 0)
            {
                _ecoResProduct = EcoResProduct::find(inventDimCombination.inventTable().Product);

                _tmpProductsToAddInsert.EcoResProduct        = _ecoResProduct.RecId;
                _tmpProductsToAddInsert.EcoResProductName    = _ecoResProduct.productName();
            }
        }

        // If calling from those forms where Inventory dimension is specified Not Variant Id like SalesTable, PurchTable... etc.
        if (_isInventDimNotVariantId)
        {
            if (_variantId == 0 && _lineInventDimId)
            {
                _tmpProductsToAddInsert.InventDim = _lineInventDimId;
            }

            _tmpProductsToAddInsert.ItemId = InventTable::findByProduct(_tmpProductsToAddInsert.EcoResProduct).ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLinesFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Loads the caller lines.
    /// </summary>
    /// <param name="_callerArgs">
    ///  An instance of <c>Args</c>.
    /// </param>
    /// <param name="_tmpProductsToAdd">
    ///  An instance of table <c>TmpRetailProductsToAdd</c>.
    /// </param>
    public void loadLinesFromCaller(Args _callerArgs,
                                    TmpRetailProductsToAdd    _tmpProductsToAdd)
    {
        TableId     callerTableId;

        callerArgs          = _callerArgs;
        callerTableId       = _callerArgs.dataset();
        callerMenuItemName  = _callerArgs.menuItemName();
        tmpProductsToAddInsert  = _tmpProductsToAdd;

        mapLines = new Map(Types::Int64, Types::Int64); //TMPRETAILPRODUCTSTOADD.RECID, Common.RecID
        deletedTmpProductsSet = new Set(Types::Int64); //TMPRETAILPRODUCTSTOADD.RECID, used to save the deleted tmpproducts

        switch (callerTableId)
        {
            case tableNum(TmpRetailLabelsToPrint):
                this.loadTmpAddProducts();
                break;

            case tableNum(PurchTable):
                this.loadPurchLines();
                break;

            case tableNum(SalesTable):
                this.loadSalesLine();
                break;

            case tableNum(RetailPeriodicDiscount):
                this.loadDiscountLines(callerArgs.record());
                break;

            case tableNum(RetailDiscountThresholdTiers):
                this.loadThresholdDiscountApplyingLines(callerArgs.record());
                break;

            case tableNum(InventTransferTable):
                this.loadTransferLines();
                break;

            case tableNum(RetailSpecialCategoryMember):
                this.loadSpecialCategory();
                break;

            case tableNum(InventJournalTrans):
                this.loadCountJournalLines();
                break;

            case tableNum(RetailPackageTable):
                this.loadPackageLines();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDeletedTmpProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes temp procucts.
    /// </summary>
    /// <param name = "_tmpRetailProducts">The temp products to be deleted.</param>
    public void saveDeletedTmpProducts(TmpRetailProductsToAdd _tmpRetailProducts)
    {
        if (!deletedTmpProductsSet.in(_tmpRetailProducts.RecId))
        {
            deletedTmpProductsSet.add(_tmpRetailProducts.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPackageLines</Name>
				<Source><![CDATA[
    // load package lines to Add product dialog
    private void loadPackageLines()
    {
        EcoResProduct               ecoResProduct;
        RetailPackageTable          packageTable;
        RetailPackageLines          packageLines;
        InventTable                 inventTable;

        packageTable = callerArgs.record();

        while select ItemId, Qty, InventDimId, RecId from packageLines order by LineNum
            where packageLines.PackageId == packageTable.PackageId
            join product from inventTable
                where inventTable.ItemId == packageLines.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
        {
            this.loadLines(ecoResProduct, packageLines.Qty, packageLines.InventDimId, 0, packageLines.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpretailProductsToAdd</c> for purchase order.
    /// </summary>
    private void loadPurchLines()
    {
        PurchLine       purchLineTmp;
        EcoResProduct   ecoResProduct;
        PurchTable      purchTableLocal;
        InventTable     inventTable;

        purchTableLocal = callerArgs.record();

        while select ItemId, InventDimId, RecId, PurchQty from purchLineTmp order by LineNumber
            where purchLineTmp.PurchId == purchTableLocal.PurchId &&
                    purchLineTmp.IsDeleted == NoYes::No
            join Product from inventTable
                where inventTable.ItemId == purchLineTmp.ItemId
            join ecoResProduct
                where ecoResProduct.recid == inventTable.Product
        {
            this.loadLines(ecoResProduct, purchLineTmp.PurchQty, purchLineTmp.InventDimId, 0, purchLineTmp.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpretailProductsToAdd</c> for sales order.
    /// </summary>
    private void loadSalesLine()
    {
        SalesLine       salesLineTmp;
        SalesTable      salesTableLocal;
        InventTable     inventTable;
        EcoResProduct   ecoResProduct;

        salesTableLocal = callerArgs.record();

        if (B2B2BDataHelper::shouldRespectCatalog(salesTableLocal.RetailChannelTable))
        {
            RetailSalesLine retailSalesLine;

            while select ItemId, SalesQty, InventDimId, RecId from salesLineTmp order by LineNum
            where salesLineTmp.SalesId == salesTableLocal.SalesId
            join product from inventTable
                where inventTable.ItemId == salesLineTmp.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
            outer join Catalog from retailSalesLine
                where retailSalesLine.SalesLine == salesLineTmp.RecId
            {
                this.loadLinesByCatalog(ecoResProduct, salesLineTmp.SalesQty, salesLineTmp.InventDimId, 0, salesLineTmp.RecId, 0, retailSalesLine.Catalog);
            }
        }
        else
        {
            while select ItemId, SalesQty, InventDimId, RecId from salesLineTmp order by LineNum
            where salesLineTmp.SalesId == salesTableLocal.SalesId
            join product from inventTable
                where inventTable.ItemId == salesLineTmp.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
            {
                this.loadLines(ecoResProduct, salesLineTmp.SalesQty, salesLineTmp.InventDimId, 0, salesLineTmp.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSpecialCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpretailProductsToAdd</c> for Special category.
    /// </summary>
    public void loadSpecialCategory()
    {
        RetailSpecialCategoryMember specialCategoryMemberSelected, specialCategoryMember;
        EcoResProduct   ecoResProduct;
        RetailGroupMemberLine   categoryMemberLine;

        specialCategoryMemberSelected = callerArgs.record();

        while select specialCategoryMember
            where specialCategoryMember.Category == specialCategoryMemberSelected.Category
            join Product, Variant from categoryMemberLine
                where categoryMemberLine.RecId == specialCategoryMember.RetailGroupMember
                 && (categoryMemberLine.Product || categoryMemberLine.Variant)
            outer join ecoResProduct
                where ecoResProduct.RecId == categoryMemberLine.Product
        {
            this.loadLines(ecoResProduct, 0, '', categoryMemberLine.Variant, specialCategoryMember.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTmpAddProducts</Name>
				<Source><![CDATA[
    private void loadTmpAddProducts()
    {
        EcoResProduct               ecoResProduct;
        InventTable                 inventTable;
        TmpRetailLabelsToPrint      tmpRetailLabelsToPrint;
        FormDataSource  formDS  = FormDataUtil::getFormDataSource(callerArgs.record());
        Object          fDS     = formDS;

        mapRecId = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

        for (tmpRetailLabelsToPrint = formDS.getFirst(true) ? formDS.getFirst(true): formDS.cursor();
            tmpRetailLabelsToPrint;
            tmpRetailLabelsToPrint = formDS.getNext())
        {
            while select Product, RecId from inventTable
                where inventTable.ItemId == tmpRetailLabelsToPrint.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
            {
                this.loadLines(ecoResProduct, tmpRetailLabelsToPrint.Quantity, tmpRetailLabelsToPrint.InventDim, 0, ecoResProduct.RecId, tmpRetailLabelsToPrint.RecId);
            }
        }

        fDS.updateLines(mapRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into table <c>TmpretailProductsToAdd</c> for Inventory transfer order.
    /// </summary>
    private void loadTransferLines()
    {
        InventTransferTable inventTransferTable;
        InventTransferLine  inventTransferLine;
        InventTable         inventTable;
        EcoResProduct       ecoResProduct;

        inventTransferTable = callerArgs.record();

        while select ItemId, QtyTransfer, InventDimId, RecId from inventTransferLine
            where inventTransferLine.TransferId == inventTransferTable.TransferId
            join Product from inventTable
                where inventTable.ItemId == inventTransferLine.ItemId
            join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
        {
            this.loadLines(ecoResProduct, inventTransferLine.QtyTransfer, inventTransferLine.InventDimId, 0, inventTransferLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Map</c> of products to be added.
    /// </summary>
    /// <returns>Returns a <c>Map</c> of Products to be added.</returns>
    public Map mapLines()
    {
        return mapLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerCommon</Name>
				<Source><![CDATA[
    public Common parmCallerCommon(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates inventory dimension for a product.
    /// </summary>
    /// <param name="_itemId">An <c>ItemId</c> to validate.</param>
    /// <param name="_inventDim">The buffer <c>InventDim</c> to validate.</param>
    /// <returns>
    ///  true, if all mandatory and active dimensions filled it; false.
    /// </returns>
    private boolean validateInventDim(ItemId _itemId, InventDim _inventDim)
    {
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        List                mandatoryFields     = inventDimGroupSetup.activeMandatoryFields();
        ListEnumerator      enumerator          = mandatoryFields.getEnumerator();
        FieldId             inventDimFieldId;
        boolean             ret = true;

        while (ret && enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            switch (inventDimFieldId)
            {
                case fieldNum(InventDim, ConfigId):
                    if (!_inventDim.ConfigId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventVersionId):
                    if (!_inventDim.InventVersionId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventSiteId):
                    if (!_inventDim.InventSiteId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventBatchId):
                    if (!_inventDim.InventBatchId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventColorId):
                    if (!_inventDim.InventColorId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventLocationId):
                    if (!_inventDim.InventLocationId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventSerialId):
                    if (!_inventDim.InventSerialId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventSizeId):
                    if (!_inventDim.InventSizeId)
                        ret = false;
                        break;
                case fieldNum(InventDim, InventStyleId):
                    if (!_inventDim.InventStyleId)
                        ret = false;
                        break;
                case fieldNum(InventDim, wmsLocationId):
                    if (!_inventDim.wmsLocationId)
                        ret = false;
                        break;
            }

            if (ret == false)
                ret = checkFailed(strFmt("@RET260015", fieldId2name(tableNum(InventDim), inventDimFieldId)));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>