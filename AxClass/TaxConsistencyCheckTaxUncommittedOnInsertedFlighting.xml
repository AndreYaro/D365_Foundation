<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxConsistencyCheckTaxUncommittedOnInsertedFlighting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;

/// <summary>
/// The <c>TaxConsistencyCheckTaxUncommittedOnInsertedFlighting</c> class is used to determine whether the feature is enabled that
/// checks consistency when <c>TaxUncommitted</c> is inserted.
/// The feature is enabled when the flighting is enabled. If any problem occurs, disable the flighting to revert the change.
/// </summary>
/// <remarks>
/// This flighting is available from 10.0.15, disabled by default, and will not be removed.
/// This flighting will be enabled when any customer has the issue of <c>SourceDocumentLine</c> referring to inserted <c>TaxUncommitted</c>.
/// </remarks>
[TaxFlighting(TaxFlightingGroup::IndirectTax)]
internal class TaxConsistencyCheckTaxUncommittedOnInsertedFlighting implements IFeatureLifecycle
{
    private static TaxConsistencyCheckTaxUncommittedOnInsertedFlighting instance = new TaxConsistencyCheckTaxUncommittedOnInsertedFlighting();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static TaxConsistencyCheckTaxUncommittedOnInsertedFlighting instance()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PrivatePreview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>