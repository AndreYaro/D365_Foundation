<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchNotStockedPostCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchNotStockedPostCheck</c> class is used to check whether purchase order lines when
/// packing slip posting or invoice posting a purchase order line.
/// </summary>
class PurchNotStockedPostCheck extends TradeNotStockedPostCheck
{
    PurchLine            purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateFinancialAfterPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the financial update of the not stocked order line after posting.
    /// </summary>
    /// <returns>
    /// true if the financial update of the not stocked is valid; otherwise, false.
    /// </returns>
    public boolean checkUpdateFinancialAfterPosting()
    {
        boolean ok = true;

        if (this.parmQtyPhysicalToBeJournalUpdated() > 0.0 && this.mustBeReceived())
        {
            ok = checkFailed("@SYS342171");
        }

        if (this.parmQtyPhysicalToBeJournalUpdated() < 0.0 && this.mustBeDeducted())
        {
            ok = checkFailed("@SYS342170");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineRegisteredQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the registered quantity for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The registered quantity for the purchase order line.
    /// </returns>
    protected UnitQty lineRegisteredQty()
    {
        return purchLine.registeredInPurchUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the purchase quantity on the purchase order line.
    /// </summary>
    /// <returns>
    /// The purchase quantity on the purchase order line.
    /// </returns>
    protected UnitQty lineUnitQty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDeducted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line must be deducted before it is invoiced.
    /// </summary>
    /// <returns>
    ///    true if the order line must be deducted before it is invoiced; otherwise, false.
    /// </returns>
    protected boolean mustBeDeducted()
    {
        if (purchLine.isCategoryBased())
        {
            return (VendParameters::find().editUseInvoiceMatching()
                 && EcoResCategory::getProcCategoryDeductionRequirement(purchLine.ProcurementCategory, CompanyInfo::current()));
        }
        else
        {
            return InventMovement::construct(purchLine).mustBeDeducted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line must be received before it is invoiced.
    /// </summary>
    /// <returns>
    /// true if the order line must be received before it is invoiced; otherwise, false.
    /// </returns>
    protected boolean mustBeReceived()
    {
        if (purchLine.isCategoryBased())
        {
            return (VendParameters::find().editUseInvoiceMatching()
                 && EcoResCategory::getProcCategoryReceivingRequirement(purchLine.ProcurementCategory, CompanyInfo::current()));
        }
        else
        {
            return InventMovement::construct(purchLine).mustBeReceived();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the over-delivery percent that is defined on the purchase order line.
    /// </summary>
    /// <returns>
    ///    The over-delivery percent that is defined on the purchase order line.
    /// </returns>
    protected Percent overDeliveryPct()
    {
        return purchLine.overDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public Common parmSalesPurchLine(Common _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;
        purchLine      = salesPurchLine as PurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase order line should be delivered in total.
    /// </summary>
    /// <returns>
    ///    true the purchase order line should be delivered in total; otherwise, false.
    /// </returns>
    protected boolean postComplete()
    {
        return purchLine.Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPostedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physically posted quantity for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The physically posted quantity for the purchase order line.
    /// </returns>
    protected UnitQty qtyPostedPhysical()
    {
        return purchLine.receivedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the under-delivery percent that is defined on the purchase order line.
    /// </summary>
    /// <returns>
    ///    The under-delivery percent that is defined on the purchase order line.
    /// </returns>
    protected Percent underDeliveryPct()
    {
        return purchLine.underDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PurchNotStockedPostCheck construct()
    {
        return new PurchNotStockedPostCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemainPhysicalQtyZero</Name>
				<Source><![CDATA[
    protected boolean isRemainPhysicalQtyZero()
    {
        return purchLine.RemainPurchPhysical == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the purchase unit on the purchase order line.
    /// </summary>
    /// <returns>
    /// The purchase unit on the purchase order line.
    /// </returns>
    protected UnitOfMeasureSymbol salesPurchUnit()
    {
        return purchLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysicalBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the physical update of the not stocked order line before posting.
    /// </summary>
    /// <returns>
    ///    true if the physical update of the not stocked is OK; otherwise, false.
    /// </returns>
    public boolean checkUpdatePhysicalBeforePosting()
    {
        boolean             ok = true;

        ok = super();

        if (this.salesPurchUnit() != null &&
            this.parmQtyPhysicalNow() != decRound(this.parmQtyPhysicalNow(), UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.salesPurchUnit()))))
        {
            if (PurchParameters::find().DecimalPrecisionCheckQty)
            {
                ok = checkFailed(strFmt("@SCM:ViolateDecimalPrecisionRule", this.salesPurchUnit()));
            }
            else
            {
                warning(strFmt("@SCM:ViolateDecimalPrecisionRule", this.salesPurchUnit()));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>