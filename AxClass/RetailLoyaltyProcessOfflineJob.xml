<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyProcessOfflineJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailLoyaltyProcessOfflineJob</c> class process offline loyalty transactions.
/// </summary>
public class RetailLoyaltyProcessOfflineJob extends RunBaseBatch implements BatchRetryable
{
    #define.DefaultBatchSize(1000)

    BatchHeader batchHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    private void createTask(Array _transRecIds)
    {
        RetailLoyaltyProcessOfflineTask task = new RetailLoyaltyProcessOfflineTask();

        task.parmPackedTransactionRecIdList(_transRecIds.pack());

        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
        }
        else
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBatchSize</Name>
				<Source><![CDATA[
    private int getDefaultBatchSize()
    {
        return #DefaultBatchSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTasks</Name>
				<Source><![CDATA[
    private void prepareTasks()
    {
        RetailTransactionLoyaltyRewardPointTrans trans;
        RetailLoyaltyCardRewardPointTrans loyaltyCardTrans;

        int batchSize = this.getDefaultBatchSize();
        Array transRecIds = new Array(Types::Int64);
        int currentBatchSize = 0;
        str previousCardNumber = '';

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineJob), funcName(), 'Start');

        while select crossCompany RecId, CardNumber, dataAreaId, Channel, storeId, terminalId, LineNum, transactionId from trans
                order by trans.CardNumber, trans.EntryDate, trans.EntryTime
            where (trans.EntryType == RetailLoyaltyRewardPointEntryType::Earn || trans.EntryType == RetailLoyaltyRewardPointEntryType::ReturnEarned || trans.EntryType == RetailLoyaltyRewardPointEntryType::Redeem)
            notExists join loyaltyCardTrans
                where loyaltyCardTrans.loyaltyTransDataAreaId == trans.dataAreaId &&
                    loyaltyCardTrans.Channel == trans.Channel &&
                    loyaltyCardTrans.storeId == trans.storeId &&
                    loyaltyCardTrans.terminalId == trans.terminalId &&
                    loyaltyCardTrans.transactionId == trans.transactionId &&
                    loyaltyCardTrans.LoyaltyTransLineNum == trans.LineNum

        {
            SalesTable salesTable;
            RetailTransactionTable retailTransactionTable;

            // Getting Sales Order Id.
            select firstonly salesOrderId from retailTransactionTable 
                where retailTransactionTable.DataAreaId == trans.DataAreaId &&
                    retailTransactionTable.Channel == trans.Channel &&
                    retailTransactionTable.transactionId == trans.transactionId &&
                    retailTransactionTable.terminal == trans.terminalId &&
                    retailTransactionTable.store == trans.storeId
                exists join loyaltyCardTrans
                 where loyaltyCardTrans.loyaltyTransDataAreaId == trans.DataAreaId &&
                    loyaltyCardTrans.terminalId == trans.terminalId &&
                    loyaltyCardTrans.storeId == trans.storeId &&
                    loyaltyCardTrans.Channel == trans.Channel &&
                    loyaltyCardTrans.SalesId == retailTransactionTable.salesOrderId;

            salesTable = salesTable::find(retailTransactionTable.salesOrderId);

            // Skip for customer orders.
            if (salesTable.getRetailSalesOrderType() == RetailSalesOrderType::CustomerOrder)
            {
                continue;
            }

            // Create batch if it reaches the size limit
            // Make sure the transactions of the same card are added to the same batch
            if (trans.CardNumber != previousCardNumber)
            {
                if (currentBatchSize >= batchSize)
                {
                    this.createTask(transRecIds);

                    // Reset buffer
                    currentBatchSize = 0;
                    transRecIds = new Array(Types::Int64);
                }

                previousCardNumber = trans.CardNumber;
            }

            currentBatchSize++;
            transRecIds.value(currentBatchSize, trans.RecId);
        }

        // Process last partially filled buffer
        if (currentBatchSize > 0)
        {
            this.createTask(transRecIds);
        }

        if (batchHeader)
        {
            batchHeader.save();
        }

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineJob), funcName(), 'End');
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.prepareTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYP4861348";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailLoyaltyProcessOfflineJob scheduler = new RetailLoyaltyProcessOfflineJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLoyaltyProcessOfflineJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLoyaltyProcessOfflineJob</c>
    /// cannot be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>