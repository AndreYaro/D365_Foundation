<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttControlScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Specialized scheduling engine for use with the data structures of the gantt control.
/// </summary>
public class GanttControlScheduler extends WrkCtrScheduler
{
    List            activities;
    List            updatedActivities;
    List            links;
    List            calendars;
    Map             calendarMap;
    SchedDirection  direction;
    utcdatetime     referenceDateTime;
    Map             activityIdToJobNum;
    Map             jobNumToActivityId;
    Set             oppositeDirection;
    GanttWrkCtrSchedulingInteropDataProvider dataProvider;
    private Map capacityReservationsByActivityId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// The activities to schedule.
    /// </summary>
    /// <param name = "_activities">A list of <c>GanttControlTaskActivity</c> instances.</param>
    /// <returns>A list of the activities to schedule.</returns>
    public List parmActivities(List _activities = activities)
    {
        if (!prmisdefault(_activities))
        {
            activities = _activities;
        }
        return activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// The links between activities.
    /// </summary>
    /// <param name = "_links">A list of <c>GanttControlLink</c> instances.</param>
    /// <returns>A list of activity links.</returns>
    public List parmLinks(List _links = links)
    {
        if (!prmisdefault(_links))
        {
            links = _links;
        }
        return links;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOppositeDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// The activities that should be scheduled in the direction opposite to the global one.
    /// </summary>
    /// <param name = "_oppositeDirection">A Set containing the IDs of the activities that should be scheduled in the opposite direction.</param>
    /// <returns>The activities that should be scheduled in the opposite direction.</returns>
    public Set parmOppositeDirection(Set _oppositeDirection = oppositeDirection)
    {
        if (!prmisdefault(_oppositeDirection))
        {
            oppositeDirection = _oppositeDirection;
        }
        return oppositeDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendars</Name>
				<Source><![CDATA[
    /// <summary>
    /// The calendar information for the activities.
    /// </summary>
    /// <param name = "_calendars">A list of <c>GanttControlCalendar</c> instances.</param>
    /// <returns>A list of calendars.</returns>
    public List parmCalendars(List _calendars = calendars)
    {
        if (!prmisdefault(_calendars))
        {
            calendars = _calendars;

            calendarMap = new Map(Types::String, Types::Class);
            if (calendars)
            {
                ListEnumerator calendarEnumerator = calendars.getEnumerator();
                while (calendarEnumerator.moveNext())
                {
                    GanttControlCalendar calendar = calendarEnumerator.current();
                    calendarMap.insert(calendar.parmId(), calendar);
                }
            }
        }
        return calendars;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchedDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// The direction to schedule the activities.
    /// </summary>
    /// <param name = "_direction">The scheduling direction.</param>
    /// <returns>The direction to schedule the activities.</returns>
    public SchedDirection parmSchedDirection(SchedDirection _direction = direction)
    {
        if (!prmisdefault(_direction))
        {
            direction = _direction;
        }
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// The date and time for which to schedule forward or backwards from/to.
    /// </summary>
    /// <param name = "_referenceDateTime">The scheduling utc datetime.</param>
    /// <returns>The scheduling date and time.</returns>
    public utcdatetime parmReferenceDateTime(utcdatetime _referenceDateTime = referenceDateTime)
    {
        if (!prmisdefault(_referenceDateTime))
        {
            referenceDateTime = _referenceDateTime;
        }
        return referenceDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttControlScheduler construct()
    {
        return new GanttControlScheduler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEngine</Name>
				<Source><![CDATA[
    protected WrkCtrSchedulerEngineInterface createEngine(Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingOptions _loggingOptions = null)
    {
        dataProvider = GanttWrkCtrSchedulingInteropDataProvider::newGanttDataHandler(this);
        return WrkCtrSchedulerJobSchedulingEngine::newSchedulingEngine(wrkCtrSchedulerRuntimes, this, _loggingOptions, dataProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the gantt scheduler.
    /// </summary>
    /// <param name = "_activitiesToSchedule">A list of <c>GanttControlTaskActivity</c> instances.</param>
    /// <param name = "_calendars">A list of <c>GanttControlCalendar</c> instances.</param>
    /// <param name = "_direction">The scheduling direction.</param>
    /// <param name = "_referenceDateTime">The date and time for which to schedule forward or backwards from/to.</param>
    /// <param name = "_links">A list of <c>GanttControlLink</c> instances.</param>
    /// <param name = "_oppositeDirection">A set of activity IDs that should be scheduled in the opposite direction.</param>
    /// <returns>A new instance of the scheduler.</returns>
    public static GanttControlScheduler newGanttScheduler(List           _activitiesToSchedule,
                                                          List           _calendars,
                                                          SchedDirection _direction = SchedDirection::Forward,
                                                          utcdatetime    _referenceDateTime = DateTimeUtil::minValue(),
                                                          List           _links = new List(Types::Class),
                                                          Set            _oppositeDirection = new Set(Types::String))
    {
        boolean applyTZOffset = GanttControlSchedulerTimeZoneFlight::instance().isEnabled();
        
        if (applyTZOffset && ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled())
        {
            if (ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
                ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone)
            {
                applyTZOffset = false;
            }
        }

        GanttControlScheduler scheduler = GanttControlScheduler::construct();
        scheduler.parmActivities(_activitiesToSchedule);
        scheduler.parmCalendars(_calendars);
        scheduler.parmSchedDirection(_direction);
        scheduler.parmReferenceDateTime(applyTZOffset ?
            DateTimeUtil::applyTimeZoneOffset(_referenceDateTime, DateTimeUtil::getUserPreferredTimeZone()):
            _referenceDateTime);
        scheduler.parmLinks(_links);
        scheduler.parmOppositeDirection(_oppositeDirection);

        return scheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a calendar based on calendar id.
    /// </summary>
    /// <param name = "_calendarId">The id of the calendar.</param>
    /// <returns>The calendar found.</returns>
    public GanttControlCalendar getCalendar(str _calendarId)
    {
        if (calendarMap && calendarMap.exists(_calendarId))
        {
            return calendarMap.lookup(_calendarId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the activities into the engine.
    /// </summary>
    protected void loadActivities()
    {
        updatedActivities = new List(Types::Class);
        capacityReservationsByActivityId = new Map(Types::Int64, Types::Class);

        activityIdToJobNum = new Map(Types::String, Types::Int64);
        jobNumToActivityId = new Map(Types::Int64, Types::String);
        int64 jobNum = 0;
        
        WrkCtrSchedulerGoal goal = (direction == SchedDirection::Forward ? WrkCtrSchedulerGoal::EarliestEndTime : WrkCtrSchedulerGoal::LatestStartTime);
        WrkCtrSchedulerGoal otherGoal = (direction == SchedDirection::Backward ? WrkCtrSchedulerGoal::EarliestEndTime : WrkCtrSchedulerGoal::LatestStartTime);

        ListEnumerator activityEnumerator = activities.getEnumerator();
        while (activityEnumerator.moveNext())
        {
            if (activityEnumerator.current() is GanttControlTaskActivitySchedulable)
            {
                GanttControlTaskActivitySchedulable activity = activityEnumerator.current();
                jobNum++;
                activityIdToJobNum.insert(activity.parmId(), jobNum);
                jobNumToActivityId.insert(jobNum, activity.parmId());

                // Add the job
                scheduleEngine.addJobInfo(jobNum,
                                          goal,
                                          activity.parmCalendarId() != '',
                                          true);

                scheduleEngine.addJobResourceCapacity(jobNum,
                                                      activity.parmId(),
                                                      activity.parmCapacityRequired(),
                                                      1, //LoadPct
                                                      DateTimeUtil::minValue(),
                                                      new Map(Types::String, Types::String), //_requirementProperties,
                                                      false, // Finite capacity
                                                      false  // ignoreResourceEfficiency
                                                      );
               
                if (oppositeDirection.in(activity.parmId()))
                {
                    scheduleEngine.addJobGoal(jobNum, 1, otherGoal);

                    // Lower prio when scheduling in the other direction
                    scheduleEngine.addJobBindPriority(jobNum, 1, 1);
                }
                else
                {
                    if (goal == WrkCtrSchedulerGoal::EarliestEndTime)
                    {
                        scheduleEngine.addConstraintJobStartsAt(jobNum, 0, referenceDateTime);
                    }
                    else if (goal == WrkCtrSchedulerGoal::LatestStartTime)
                    {
                        scheduleEngine.addConstraintJobEndsAt(jobNum, 0, referenceDateTime);
                    }

                    scheduleEngine.addJobBindPriority(jobNum, 1, 2);
                }
            }
            else
            {
                throw error("@SYS83964");
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the links into the engine.
    /// </summary>
    protected void loadLinks()
    {
        if (links)
        {
            ListEnumerator linkEnumerator = links.getEnumerator();
            while (linkEnumerator.moveNext())
            {
                GanttControlLink link = linkEnumerator.current();
                scheduleEngine.addJobLink(activityIdToJobNum.lookup(link.parmFromActivityId()),
                                          activityIdToJobNum.lookup(link.parmToActivityId()),
                                          this.ganttToSchedLink(link.parmLinkType()),
                                          SchedJobLinkType::Soft);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceEfficiency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a resource efficiency percent.
    /// </summary>
    /// <param name = "_activity">A resource</param>
    /// <returns>A resource efficiency</returns>
    protected Percent getResourceEfficiency(GanttControlTaskActivitySchedulable _activity)
    {
        Percent efficiencyPct = 100;

        if (_activity.parmCalendarId() != '')
        {
            WrkCtrTable resource = WrkCtrTable::find(_activity.parmCalendarId());
            if (resource)
            {
                efficiencyPct = resource.EffectivityPct;
            }
        }

        return efficiencyPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the resources into the engine.
    /// </summary>
    protected void loadResources()
    {
        ListEnumerator activityEnumerator = activities.getEnumerator();
        while (activityEnumerator.moveNext())
        {
            Percent efficiencyPct = 100;
            if (activityEnumerator.current() is GanttControlTaskActivitySchedulable)
            {
                efficiencyPct = this.getResourceEfficiency(activityEnumerator.current());

            }
            str resId = activityEnumerator.current().parmId();
            scheduleEngine.addResource(resId, false, 1, WrkCtrSchedulerWorkingTimesType::Resource, true, false, efficiencyPct / 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttToSchedLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts between a <c>GanttLinkType</c> and <c>SchedJobLink</c> type.
    /// </summary>
    /// <param name = "ganttType">The gantt link type.</param>
    /// <returns>A scheduling engine link type.</returns>
    protected SchedJobLink ganttToSchedLink(GanttLinkType _ganttLinkType)
    {
        switch (_ganttLinkType)
        {
            case GanttLinkType::SS:
                return SchedJobLink::SS;
            case GanttLinkType::SF:
                return SchedJobLink::SF;
            case GanttLinkType::FS:
                return SchedJobLink::FS;
            case GanttLinkType::FF:
                return SchedJobLink::FF;
            default:
                return SchedJobLink::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the scheduling process.
    /// </summary>
    /// <remarks>
    /// This method is an override.
    /// </remarks>
    public void run()
    {
        this.init();

        try
        {
            scheduleEngine.clearAllCachedData();

            this.loadResources();
            this.loadActivities();
            this.loadLinks();
                
            int errorCode = scheduleEngine.run(-1, -1);

            if (errorCode == 0)
            {
                // Save the results
                scheduleEngine.WriteScheduledData();
            }
            else
            {
                throw error("@SYS134375");
            }
        }
        catch (Exception::CLRError)
        {
            warning(WrkCtrSchedulerJobSchedulingEngine::getLastClrException());
            throw error("@SYS135501");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJobData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the job data to the list of activity modifications.
    /// </summary>
    /// <param name="_jobId">
    /// A <c>RecId</c> field that identifies the job for which the data is written back to the database.
    /// </param>
    /// <param name="_resourceId">
    /// An identifier of the resource on which the job was scheduled.
    /// </param>
    /// <param name="_fromDate">
    /// A <c>Date</c> value that represents the start schedule date for the job.
    /// </param>
    /// <param name="_fromTime">
    /// A <c>Date</c> value that represents the start schedule time for the job.
    /// </param>
    /// <param name="_toDate">
    /// A <c>Date</c> value that represents the ending schedule date for the job.
    /// </param>
    /// <param name="_toTime">
    /// A <c>Date</c> value that represents the ending schedule time for the job.
    /// </param>
    /// <param name="_runtime">
    /// A <c>Date</c> value that represents the runtime of the scheduled job.
    /// </param>
    /// <param name="_reservationProperties">
    /// A <c>Container</c> with the reservation properties for the job.
    /// </param>
    /// <param name="_capacityReservations">
    /// A <c>Container</c> value with the capacity reservations for the scheduled job.
    /// </param>
    /// <param name="_physicalUpdateJobs">
    /// A boolean value indicating whether to do a physical database update,
    /// or update only the relevant internal maps and write capacity reservations; optional.
    /// </param>
    /// <remarks>
    /// This method is an override.
    /// </remarks>
    public void writeJobData(RecId          _jobId,
                             WrkCtrId       _resourceId,
                             date           _fromDate,
                             TimeOfDay      _fromTime,
                             date           _toDate,
                             TimeOfDay      _toTime,
                             Seconds        _runtime,
                             container      _reservationProperties,
                             container      _capacityReservations,
                             boolean        _physicalUpdateJobs = true)
    {
        str activityId = jobNumToActivityId.lookup(_jobId);
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(_fromDate, _fromTime);
        utcdatetime toDateTime   = DateTimeUtil::newDateTime(_toDate,   _toTime);
        boolean isGanttControlSchedulerTimeZoneFlightEnabled = GanttControlSchedulerTimeZoneFlight::instance().isEnabled();
        boolean removeTZOffset = isGanttControlSchedulerTimeZoneFlightEnabled;

        if (removeTZOffset && ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled())
        {
            if (ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
                ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone)
            {
                removeTZOffset = false;
            }
        }

        GanttControlActivityModification modification = new GanttControlActivityModification();
        modification.parmActivityId(activityId);
        modification.parmModificationType(GanttControlActivityModificationType::Move);
        modification.parmNewFromDateTime(removeTZOffset ?
            DateTimeUtil::removeTimeZoneOffset(fromDateTime, DateTimeUtil::getUserPreferredTimeZone()) :
            fromDateTime);
        modification.parmNewToDateTime(removeTZOffset ?
            DateTimeUtil::removeTimeZoneOffset(toDateTime, DateTimeUtil::getUserPreferredTimeZone()) :
            toDateTime);

        updatedActivities.addEnd(modification);

        if (isGanttControlSchedulerTimeZoneFlightEnabled)
        {
            this.initCapacityReservations(activityId, _capacityReservations);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCapacityReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves capacity reservations from container and saves them as list of
    /// the <c>WrkCtrSchedulerCapacityReservation</c> instances
    /// </summary>
    /// <param name = "_activityId">An activity id</param>
    /// <param name = "_capacityReservationContainer">A container of capacity reservations</param>
    private void initCapacityReservations(str _activityId, container _capacityReservationContainer)
    {
        int i;
        int capacityReservationCount = conLen(_capacityReservationContainer);
        List capResList = new List(Types::Class);

        for (i = 1; i <= capacityReservationCount; i += WrkCtrSchedulerCapacityReservation::CapacityReservationFields)
        {
            WrkCtrSchedulerCapacityReservation schedulerCapacityReservation = WrkCtrSchedulerCapacityReservation::construct(_capacityReservationContainer, i, false);
            capResList.addEnd(schedulerCapacityReservation);
        }

        capacityReservationsByActivityId.add(str2Int64(_activityId), capResList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of <c>GanttControlActivityModification</c> containing the scheduled jobs.
    /// </summary>
    /// <returns>A list of the modifications for the activities.</returns>
    /// <remarks>If scheduling could not be completed then an empty list is returned.</remarks>
    public List getModifications()
    {
        if (!updatedActivities || updatedActivities.elements() != activities.elements())
        {
            return new List(Types::Class);
        }

        return updatedActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityReservationsByActivityId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a map of the capacity reservations.
    /// </summary>
    /// <returns>A map of the capacity reservations.</returns>
    public Map getCapacityReservationsByActivityId()
    {
        if (!capacityReservationsByActivityId || !capacityReservationsByActivityId.elements())
        {
            return new Map(Types::Int64, Types::Class);
        }

        return capacityReservationsByActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstActivityError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a container with the first job that failed to schedule and the reason why it failed.
    /// </summary>
    /// <returns>A container with the result in the format [ActivityId, errorMessage].</returns>
    public container getFirstActivityError()
    {
        ListEnumerator activityEnumerator = activities.getEnumerator();
        while (activityEnumerator.moveNext())
        {
            GanttControlTaskActivity activity = activityEnumerator.current();
            int64 jobId = activityIdToJobNum.lookup(activity.parmId());

            container result = scheduleEngine.getJobSchedulingSequenceResult(jobId);
            WrkCtrJobSchedulingError schedulingError = conPeek(result, 1);

            if (schedulingError != WrkCtrJobSchedulingError::None)
            {
                str failedJob = jobNumToActivityId.exists(conPeek(result, 2)) ?
                    jobNumToActivityId.lookup(conPeek(result, 2)) : activity.parmId();
                return [failedJob, schedulingError];
            }
        }

        return ['', WrkCtrJobSchedulingError::None];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>