<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPEGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPEGenerator</c> class provides the base functionality to generate premium earning lines.
/// </summary>
public abstract class PayrollPEGenerator
{
    boolean                   doOverrideExistingPremiumEarningLines;
    PayrollPremiumEarningCode premiumEarningCode;
    Set                       earningStatementSet;
    PayrollEarningStatement   earningStatement;
    boolean                   canContinue;
    RecordInsertList          premiumEarningLineInsertList;
    boolean                   isPremiumEarningLineInserted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExistPremiumEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the premium earning statement line already exists for the premium code in the earning statement.
    /// </summary>
    /// <returns>
    /// true if premium earning line already exists for the premium code.
    /// </returns>
    protected boolean checkExistPremiumEarningLine()
    {
        PayrollEarningStatementLine payrollEarningStatementLine;

        return (select firstOnly RecId from payrollEarningStatementLine
            order by PaymentStatus desc
                where payrollEarningStatementLine.EarningStatement == earningStatement.RecId
                    && payrollEarningStatementLine.PremiumEarningCode == premiumEarningCode.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistPremiumEarningLineByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the premium earning statement line having payment status processed already exists for the premium code in the earning statement
    /// </summary>
    /// <returns>
    /// true if premium earning line having payment status processed already exists for the premium code.
    /// </returns>
    protected boolean checkExistPremiumEarningLineByStatus()
    {
        PayrollEarningStatementLine payrollEarningStatementLine;

        return (select firstOnly RecId from payrollEarningStatementLine
            order by PaymentStatus desc
                where payrollEarningStatementLine.EarningStatement == earningStatement.RecId
                    && payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Processed
                        && payrollEarningStatementLine.PremiumEarningCode == premiumEarningCode.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicyRulesForEarningStmtLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates an earning statement line based on the premium earning policy rule.
    /// </summary>
    /// <param name="_premiumEarningCodePolicyRuleType">
    /// The policy rule type of the premium earning code.
    /// </param>
    /// <param name="_earningDate">
    /// The earning date on the earning statement line being evaluated.
    /// </param>
    /// <param name="_earningStatementLineRecId">
    /// The earning statement line being evaluated.
    /// </param>
    /// <returns>
    /// true if the earning statement line is evaluated successfully; otherwise, false.
    /// </returns>
    private boolean evaluatePolicyRulesForEarningStmtLine(
        RefRecId _premiumEarningCodePolicyRuleType,
        TransDate _earningDate,
        PayrollEarningStatementLineRecId _earningStatementLineRecId)
    {
        // Store the current legal entity in an array
        int64 organizationIdsArray[1];
        organizationIdsArray[1] = CompanyInfo::current();

        // Gets the policy rule active for the given policy rule type and earning date
        RecId policyRuleRecId = SysPolicies::getPolicyRuleID(
            organizationIdsArray,
            _premiumEarningCodePolicyRuleType,
            SysPolicyTypeEnum::PayrollPremiumEarningGenerationPolicy,
            _earningDate,
            true
        );

        // Assume the earning line is invalid until it satisfies a premium earning policy rule
        boolean isValidEarningStatementLine = false;

        if (policyRuleRecId)
        {
            // Get the payroll premium earning policy rule
            PayrollPremiumEarningGenerationRule premiumEarningGenerationRule;

            select firstonly validTimeState(_earningDate, _earningDate) PremiumEarningExpressionTable from premiumEarningGenerationRule
                where premiumEarningGenerationRule.RecId == policyRuleRecId;

            // If a rule exists, evaluate the earning statement line against it
            if (premiumEarningGenerationRule.RecId)
            {
                // Get the expression from the policy rule
                ExpressionTable expressionTable = ExpressionTable::findRecId(premiumEarningGenerationRule.PremiumEarningExpressionTable);

                // Evaluates whether the earning statement line satisfies the premium earning expression rule
                ExpressionResultType expressionEvaluationResult = SysExpression::evaluate(
                    curExt(),
                    tableNum(PayrollEarningStatementLine),
                    _earningStatementLineRecId,
                    expressionTable,
                    ExpressionDataSources::newExpressionDataSources(),
                    _earningDate
                );

                // If the earning statement line satisfies the expression rule, it is valid
                if (expressionEvaluationResult == ExpressionResultType::True)
                {
                    isValidEarningStatementLine = true;
                }
            }
        }

        return isValidEarningStatementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePremiumEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the generation of a premium line in the calling class for a earning statement if it passes the validation.
    /// </summary>
    /// <returns>
    /// true if the the line is validated ; otherwise false.
    /// </returns>
    private boolean generatePremiumEarningLine()
    {
        boolean                     canGeneratePremiumEarningLine;
        PayrollEarningStatementLine premiumEarningStatementLine;

        premiumEarningLineInsertList = new RecordInsertList(tableNum(PayrollEarningStatementLine));

        while select premiumEarningStatementLine
            where premiumEarningStatementLine.EarningStatement == earningStatement.RecId
                && premiumEarningStatementLine.PremiumEarningCode != premiumEarningCode.RecId
        {
            canGeneratePremiumEarningLine = this.validateEarningStatementLine(
                                                premiumEarningStatementLine.EarningDate,
                                                premiumEarningStatementLine.RecId);

            if (canGeneratePremiumEarningLine)
            {
                this.insertPremiumEarningLine(premiumEarningStatementLine);

                if (!canContinue)
                {
                    break;
                }
            }
        }

        premiumEarningLineInsertList.insertDatabase();

        return canGeneratePremiumEarningLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePremiumEarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates premium earnings.
    /// </summary>
    public void generatePremiumEarnings()
    {
        boolean                        doesExist;
        boolean                        arePremiumEarningLinesOverridden;
        boolean                        isProcessed;

        doesExist = this.checkExistPremiumEarningLine();
        isProcessed = this.checkExistPremiumEarningLineByStatus();

        if (doOverrideExistingPremiumEarningLines)
        {
            if (doesExist)
            {
                if (isProcessed)
                {
                    return;
                }

                this.overrideExistingPremiumEarningLines();
                arePremiumEarningLinesOverridden = true;
            }

            this.generatePremiumEarningLine();
        }
        else if (!doesExist)
        {
            this.generatePremiumEarningLine();
        }

        if (arePremiumEarningLinesOverridden || isPremiumEarningLineInserted)
        {
            earningStatementSet.add(earningStatement.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPremiumEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will be an abstract method. The method will insert new lines in the PayrollEarningStatementLine table.
    /// It will be implemented by the child classes for the specific implementation.
    /// </summary>
    /// <param name="_payrollEarningStatementLine">
    /// The <c>PayrollEarningStatementLine</c> table record.
    /// </param>
    protected abstract void insertPremiumEarningLine(PayrollEarningStatementLine _payrollEarningStatementLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideExistingPremiumEarningLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the existing premium earning lines for a specific earning statement and premium code based on the selection of user.
    /// </summary>
    /// <remarks>
    /// The method will delete lines from the <c>PayrollEarningStatementLine</c> table if it finds a matching premium earning code
    /// </remarks>
    protected void overrideExistingPremiumEarningLines()
    {
        PayrollEarningStatementLine payrollEarningStatementLine;

        delete_from payrollEarningStatementLine
            where payrollEarningStatementLine.EarningStatement == earningStatement.RecId
                && payrollEarningStatementLine.PremiumEarningCode == premiumEarningCode.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningStatement</Name>
				<Source><![CDATA[
    public PayrollEarningStatement parmEarningStatement(PayrollEarningStatement _earningStatement = earningStatement)
    {
        earningStatement = _earningStatement;

        return earningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningStatementSet</Name>
				<Source><![CDATA[
    public Set parmEarningStatementSet(Set _earningStatementSet = earningStatementSet)
    {
        earningStatementSet = _earningStatementSet;

        return earningStatementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideExistingPremiumEarningLines</Name>
				<Source><![CDATA[
    public boolean parmOverrideExistingPremiumEarningLines(boolean _doOverrideExistingPremiumEarningLines = doOverrideExistingPremiumEarningLines)
    {
        doOverrideExistingPremiumEarningLines = _doOverrideExistingPremiumEarningLines;

        return doOverrideExistingPremiumEarningLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPremiumEarningCode</Name>
				<Source><![CDATA[
    public PayrollPremiumEarningCode parmPremiumEarningCode(PayrollPremiumEarningCode _premiumEarningCode = premiumEarningCode)
    {
        premiumEarningCode = _premiumEarningCode;

        return premiumEarningCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEarningStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the premium code is active for the earning statement line and evaluates the policy rule for the earning statement line.
    /// </summary>
    /// <param name="_earningDate">
    /// The earning date on the earning statement line being evaluated.
    /// </param>
    /// <param name="_earningStatementLineRecId">
    /// The record ID of the <c>PayrollEarningStatementLine</c> table record.
    /// </param>
    /// <returns>
    /// true if the earning statement line is evaluated successfully; otherwise, false.
    /// </returns>
    private boolean validateEarningStatementLine(
        TransDate _earningDate,
        PayrollEarningStatementLineRecId _earningStatementLineRecId)
    {
        boolean isValidEarningStatementLine = false;

        // Checks if an active interval record is present for the given premium code
        PayrollPremiumEarningCodeActiveInterval activeInterval = PayrollPremiumEarningCodeActiveInterval::findByPremiumEarningCode(
            premiumEarningCode.RecId,
            _earningDate,
            _earningDate
        );

        if (activeInterval)
        {
            // Calls the method which evaluates the given earning statement line for w.r.t. policy rule type for the selected premium code
            isValidEarningStatementLine = this.evaluatePolicyRulesForEarningStmtLine(
                premiumEarningCode.PolicyRuleType,
                _earningDate,
                _earningStatementLineRecId
            );
        }

        return isValidEarningStatementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a derived class of the <c>PayrollPEGenerator</c> class based on the specified parameter.
    /// </summary>
    /// <param name="_payOutBasis">
    /// The <c>PayrollPayoutBasis</c> of the premium earning code.
    /// </param>
    /// <returns>
    /// An instance of the <c>PayrollPEGenerator</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The element of the <c>PayrollPayoutBasis</c> enum that passed into the method was not expected.
    /// </exception>
    public static PayrollPEGenerator construct(PayrollPayoutBasis _payOutBasis)
    {
        PayrollPEGenerator payrollPEGenerator;

        switch (_payOutBasis)
        {
            case PayrollPayoutBasis::EarningStatement:
                payrollPEGenerator = new PayrollPEGeneratorPerEarningStmnt();
                break;

            case PayrollPayoutBasis::EarningStatementLine:
                payrollPEGenerator = new PayrollPEGeneratorPerEarningStmntLine();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return payrollPEGenerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>