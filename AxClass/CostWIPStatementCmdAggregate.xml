<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostWIPStatementCmdAggregate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostWIPStatementCmdAggregate</c> aggregates amounts for the WIP statement.
/// </summary>
public class CostWIPStatementCmdAggregate extends CostStatementCmdAggregate
{
    CostWIPStatementCmdMapQuery         WIPStatementCmdMapQuery;

    CostAmount                          beginningBalance,
                                        consumedMaterialsCost,
                                        consumedManufacturingCost,
                                        consumedOutsourcingCost,
                                        consumedIndirectCost,
                                        manufacturedCost,
                                        variances,
                                        endingBalance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBeginningBalance</Name>
				<Source><![CDATA[
    public CostAmount parmBeginningBalance()
    {
        return beginningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetConversionCost</Name>
				<Source><![CDATA[
    public CostAmount parmNetConversionCost()
    {
        return consumedMaterialsCost + consumedManufacturingCost + consumedOutsourcingCost + consumedIndirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetCostOfGoodsManufactured</Name>
				<Source><![CDATA[
    public CostAmount parmNetCostOfGoodsManufactured()
    {
        return manufacturedCost + variances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedMaterialCost</Name>
				<Source><![CDATA[
    public CostAmount parmConsumedMaterialCost()
    {
        return consumedMaterialsCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedManufacturingCost</Name>
				<Source><![CDATA[
    public CostAmount parmConsumedManufacturingCost()
    {
        return consumedManufacturingCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedOutsourcingCost</Name>
				<Source><![CDATA[
    public CostAmount parmConsumedOutsourcingCost()
    {
        return consumedOutsourcingCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumedIndirectCost</Name>
				<Source><![CDATA[
    public CostAmount parmConsumedIndirectCost()
    {
        return consumedIndirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManufacturedCost</Name>
				<Source><![CDATA[
    public CostAmount parmManufacturedCost()
    {
        return manufacturedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariances</Name>
				<Source><![CDATA[
    public CostAmount parmVariances()
    {
        return variances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndingBalance</Name>
				<Source><![CDATA[
    public CostAmount parmEndingBalance()
    {
        return endingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classifyByCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Classifies by the line category level 2 and adds the amount to the statement.
    /// </summary>
    /// <param name = "_category">
    /// The category to classify.
    /// </param>
    /// <param name = "_amount">
    /// The amount to add to the statement.
    /// </param>
    protected void classifyByCategory(CostStatementLineCategoryLevel2 _category, CostAmount _amount)
    {
        switch (_category)
        {
            case CostStatementLineCategoryLevel2::ConsumedMaterialsCost:
                consumedMaterialsCost += _amount;
                break;
            case CostStatementLineCategoryLevel2::ConsumedManufacturingCost:
                consumedManufacturingCost += _amount;
                break;
            case CostStatementLineCategoryLevel2::ConsumedOutsourcingCost:
                consumedOutsourcingCost += _amount;
                break;
            case CostStatementLineCategoryLevel2::ConsumedIndirectCost:
                consumedIndirectCost += _amount;
                break;
            case CostStatementLineCategoryLevel2::ManufacturedCost:
                manufacturedCost += _amount;
                break;
            case CostStatementLineCategoryLevel2::Variances:
                variances += _amount;
                break;
            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the WIP value.
    /// </summary>
    public void execute()
    {
        CostAmount  amount      = CurrencyExchangeHelper::amount(WIPStatementCmdMapQuery.parmAmount());
        TransDate   transDate   = WIPStatementCmdMapQuery.parmTransDate();

        if (transDate < fromDate)
        {
            beginningBalance += amount;
            endingBalance += amount;
        }
        else if (transDate <= toDate)
        {
            this.classifyByCategory(WIPStatementCmdMapQuery.parmCategory(), amount);
            endingBalance += amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostWIPStatementCmdMapQuery</Name>
				<Source><![CDATA[
    protected CostWIPStatementCmdMapQuery parmCostWIPStatementCmdMapQuery(CostWIPStatementCmdMapQuery _WIPStatementCmdMapQuery = WIPStatementCmdMapQuery)
    {
        WIPStatementCmdMapQuery = _WIPStatementCmdMapQuery;

        return WIPStatementCmdMapQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostWIPStatementCmdAggregate construct()
    {
        return new CostWIPStatementCmdAggregate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostWIPStatementCmdAggregate</c> class.
    /// </summary>
    /// <param name="_WIPStatementCmdMapQuery">
    /// The instance of the <c>CostWIPStatementCmdMapQuery</c> class that maps the query result.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostWIPStatementCmdAggregate</c> class.
    /// </returns>
    public static CostWIPStatementCmdAggregate newFromParameters(CostWIPStatementCmdMapQuery   _WIPStatementCmdMapQuery)
    {
        CostWIPStatementCmdAggregate WIPStatementCmdAggregate = CostWIPStatementCmdAggregate::construct();
        WIPStatementCmdAggregate.parmCostWIPStatementCmdMapQuery(_WIPStatementCmdMapQuery);

        return WIPStatementCmdAggregate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
