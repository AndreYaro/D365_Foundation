<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildLoadLineCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for creating load lines based on a record in the <c>TMSProposedLoadContent</c> table.
/// </summary>
abstract class TMSLoadBuildLoadLineCreator
{
    TMSProposedLoadContent proposedLoadContent;
    WHSLoadId              loadId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds one or more records in the <c>WHSLoadLine</c> table based on records in the <c>TMSProposedLoadContent</c> table.
    /// </summary>
    /// <returns>
    /// True if all remaining quantities were assigned to <c>WHSLoadLine</c> lines; otherwise, false to indicate load line creation failed to assigned proposed quantity to lines.
    /// </returns>
    /// <remarks>
    /// The method calculates quantities for one or more records in <c>WHSLoadLine</c> table based on records in the <c>TMSProposedLoadContent</c> table.
    /// </remarks>
    public boolean buildLoadLines()
    {
        WHSLoadLine                         loadline;
        WHSInventTransSumDim                inventTransSumDim;
        WHSQtyOnLoadView                    qtyOnLoadView;
        InventQty                           inventQtyRemainingNotOnLoad;
        Qty                                 qtyProposed;
        InventQty                           inventQtyProposed;
        InventQty                           inventQtyRemainingOfProposed;
        Qty                                 qtyForLoadLine;
        InventQty                           inventQtyForLoadLine;
        UnitOfMeasureSymbol                 inventUnitOfMeasure;
        EcoResReleasedProductUnitConverter  ecoResReleasedProductUnitConverter;
        InventTransOrigin                   inventTransOrigin;
        Qty                                 summedQuantityOnLoadLines = 0;

        ecoResReleasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        inventTransOrigin = inventTransOrigin::findByInventTransId(proposedLoadContent.InventTransId);

        inventUnitOfMeasure = InventTableModule::find(inventTransOrigin.ItemId,ModuleInventPurchSales::Invent).UnitId;

        qtyProposed         = proposedLoadContent.Pieces;

        inventQtyProposed = ecoResReleasedProductUnitConverter.convert(qtyProposed,
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(proposedLoadContent.PiecesUOM),
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitOfMeasure),
                                            NoYes::No,
                                            inventTransOrigin.ItemId,
                                            inventTransOrigin.ItemInventDimId);

        inventQtyRemainingOfProposed = inventQtyProposed;

        while select inventTransSumDim
            where inventTransSumDim.InventTransId == proposedLoadContent.InventTransId
        {
            select SumOfInventQty, SumOfPickedQty from qtyOnLoadView
                where qtyOnLoadView.InventTransId   == inventTransSumDim.InventTransId
                    && qtyOnLoadView.InventDimId    == inventTransSumDim.InventDimId;

            inventQtyRemainingNotOnLoad = this.getNumericValueInventQty(inventTransSumDim.SumOfQty) - (qtyOnLoadView.SumOfInventQty - qtyOnLoadView.SumOfPickedQty);

            if (inventQtyRemainingNotOnLoad > 0)
            {
                inventQtyForLoadLine = min(inventQtyRemainingNotOnLoad, inventQtyRemainingOfProposed);

                qtyForLoadLine = ecoResReleasedProductUnitConverter.convert(inventQtyForLoadLine,
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitOfMeasure),
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(proposedLoadContent.PiecesUOM),
                                                NoYes::No,
                                                inventTransOrigin.ItemId,
                                                inventTransOrigin.ItemInventDimId);

                loadline = this.initLoadLineFromParameters(inventQtyForLoadLine, qtyForLoadLine, proposedLoadContent.PiecesUOM, inventTransSumDim.InventDimId);
                loadline.LoadId = this.parmLoadId();
                loadline.insert(false, false);

                summedQuantityOnLoadLines += qtyForLoadLine;

                inventQtyRemainingOfProposed -=  inventQtyForLoadLine;

                if (inventQtyRemainingOfProposed == 0)
                {
                    break; //done creating all load lines for all inventdim's
                }
            }
        }

        return (inventQtyRemainingOfProposed == 0);
    }
]]></Source>
			</Method>
			<Method>
				<Name>getNumericValueInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the numeric value of a Qty as this method can be overriden in child classes with opposite trans direction
    /// </summary>
    /// <param name="_inventQty">
    /// The quantity to be assessed
    /// </param>
    /// <returns>
    /// Numeric value according to order type
    /// </returns>
    protected InventQty getNumericValueInventQty(InventQty _inventQty)
    {
        return -(_inventQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method to be overriden to initialize record in <c> WHSLoadLine </c> based on <c>TMSLoadBuildSupplyDemandType</c>
    /// </summary>
    /// <param name="_loadLine">
    /// <c> WHSLoadLine </c> buffer
    /// </param>
    abstract protected void initLoadLine(WHSLoadLine _loadLine)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>initLoadLineFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generic method the create record in <c> WHSLoadLine </c>
    /// </summary>
    /// <param name="_inventQty">
    /// The Invent Quantity
    /// </param>
    /// <param name="_qty">
    /// The Ordered Quantity
    /// </param>
    /// <param name="_pieceUOM">
    /// The Unit Of Meassure for Ordered Quantity
    /// </param>
    /// <param name="_inventDimId">
    /// The InventDimId on source document line
    /// </param>
    /// <returns>
    /// <c> WHSLoadLine </c> buffer
    /// </returns>
    protected WHSLoadline initLoadLineFromParameters(InventQty _inventQty, Qty _qty, WHSUOM _pieceUOM, InventDimId _inventDimId)
    {
        WHSLoadLine loadline;

        this.initloadline(loadline);

        loadline.InventDimId        = _inventDimId;
        loadline.InventQty          = _inventQty;

        loadline.UOM                = _pieceUOM;
        loadline.Qty                = _qty;
        loadline.QtyLeftToStructure = _qty;

        loadline.setPackingQty();

        return loadline;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    protected WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;

        return loadId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmProposedLoadContent</Name>
				<Source><![CDATA[
    public TMSProposedLoadContent parmProposedLoadContent(TMSProposedLoadContent _proposedLoadContent = proposedLoadContent)
    {
        proposedLoadContent = _proposedLoadContent;

        return proposedLoadContent;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>