<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CfopAttributesDeterminer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CfopAttributesDeterminer_BR</c> class determining attributes to CFOP.
/// </summary>
abstract class CfopAttributesDeterminer_BR
{
    CFOPAddressInformation_BR   originAddress;
    CFOPAddressInformation_BR   destinationAddress;

    CustVendLocation_BR         location;
    FiscalDocDirection_BR       direction;

    RecId                       addressDestinationPostalAddress;
    Common                      addressOriginEntity;

    FiscalEstablishment_BR      fiscalEstablishment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDetermineLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// It verifies if is possible to identify the location of the CFOP code
    /// </summary>
    /// <returns>
    /// It returns true if all the required information (country/State from Origin/Destination address) is available
    /// </returns>
    public boolean canDetermineLocation()
    {
        boolean ret = false;

        originAddress       = this.getOriginAddressInfo();
        destinationAddress  = this.getDestinationAddressInfo();

        if (originAddress.parmCountryRegionId()
            && destinationAddress.parmCountryRegionId()
            && originAddress.parmCountryRegionId() != destinationAddress.parmCountryRegionId())
        {
            ret = true;
        }
        else if (originAddress.parmCountryRegionId()
                 && originAddress.parmStateId()
                 && destinationAddress.parmCountryRegionId()
                 && destinationAddress.parmStateId())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// If defines the Direction requested to CFOP based on transaction typ
    /// </summary>
    protected void defineDirection()
    {
        direction = this.isItemOutgoingOperation() ? FiscalDocDirection_BR::Outgoing : FiscalDocDirection_BR::Incoming;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// It defines the Location requested to CFOP based on Address Information
    /// </summary>
    protected void defineLocation()
    {
        location = originAddress.getLocationRelativeTo(destinationAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressOriginEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Defines the Common  used to identify the logistic postal address for
    /// Origin Address
    /// </summary>
    /// <returns>
    /// Returns the common that should be used
    /// </returns>
    public abstract Common getAddressOriginEntity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define CFOP attributes (Direction/Location)
    /// Based on the Country/State information of Origin and Destination address, define Location
    /// Based on transaction define Direction
    /// </summary>
    /// <remarks>
    /// It depends if the trade is sending service/goods or receveing  services/goods
    /// It also depends if the trade is done with an outside partner,
    /// with a partner in the same state or different state
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If there is no information about the Country/Sate from Origin/Destination address an error message is showed.
    /// </exception>
    public void getCFOPAttributes()
    {
        if (this.canDetermineLocation())
        {
            this.defineLocation();
        }

        this.defineDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Returns the CFOP used by the concrete class
    /// </summary>
    /// <returns>
    /// CFOPTable_BR
    /// </returns>
    abstract CFOPTable_BR getCFOPTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationAddressInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the CFOPAddressInformation_BR with  CFOP address information about the Destination
    /// </summary>
    /// <returns>
    /// An CFOPAddressInformation_BR object  that contains the Destination address (Country/State)
    /// </returns>
    protected CFOPAddressInformation_BR getDestinationAddressInfo()
    {
        LogisticsPostalAddress  logisticsPostalAddress;

        CFOPAddressInformation_BR   cfopAddressInformation;

        logisticsPostalAddress = LogisticsPostalAddress::findRecId(this.getDestinationPostalAddressRecId());

        cfopAddressInformation = new CFOPAddressInformation_BR(logisticsPostalAddress);

        return cfopAddressInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Defines the RecId used to identify the logistic postal address for
    /// Destination Address
    /// </summary>
    /// <returns>
    /// Returns the RecId used for postal address
    /// </returns>
    public abstract RecId getDestinationPostalAddressRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// It returns the Direction requested to CFOP
    /// </summary>
    /// <returns>
    /// It returns the direction
    /// </returns>
    public FiscalDocDirection_BR getDirection()
    {
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// It returns the Location requested to CFOP
    /// </summary>
    /// <returns>
    /// It returns the Location
    /// </returns>
    public CustVendLocation_BR getLocation()
    {
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define the Operation Type ID
    /// </summary>
    /// <returns>
    /// Returnts the operation ID
    /// </returns>
    public abstract SalesPurchOperationTypeRecId_BR getOperationId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddressInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the CFOPAddressInformation_BR with the CFOP address information about the Origin Address
    /// </summary>
    /// <param name="_roleType">
    /// Role type used to search for address
    /// </param>
    /// <returns>
    /// An CFOPAddressInformation_BR object  that contains the Origin address information (Country/State)
    /// </returns>
    protected CFOPAddressInformation_BR getOriginAddressInfo(LogisticsLocationRoleType    _roleType = LogisticsLocationRoleType::None)
    {
        LogisticsPostalAddress      logisticsPostalAddress;
        CFOPAddressInformation_BR   cfopAddressInformation;
        Common                      dirPartyOriginEntity;
        FieldId                     partyFieldId;

        dirPartyOriginEntity = this.getAddressOriginEntity();

        if (_roleType)
        {
            logisticsPostalAddress = LogisticsLocationEntity::findPostalAddress(dirPartyOriginEntity, _roleType);
        }

        if (!logisticsPostalAddress)
        {
            partyFieldId = DirParty::getPartyFieldId(dirPartyOriginEntity.TableId, false);
            if (partyFieldId)
            {
                logisticsPostalAddress  = DirParty::primaryPostalAddress(dirPartyOriginEntity.(partyFieldId));
            }
            else
            {
                if (dirPartyOriginEntity.TableId == tableNum(FiscalEstablishment_BR))
                {
                    fiscalEstablishment = dirPartyOriginEntity;
                    logisticsPostalAddress  = LogisticsPostalAddress::findByLocation(DirPartyLocation::findRec(fiscalEstablishment.DirPartyLocation).Location);
                }
                else if (dirPartyOriginEntity.TableId == tableNum(PurchLine))
                {
                    logisticsPostalAddress  = LogisticsPostalAddress::findRecId(dirPartyOriginEntity.(fieldNum(PurchLine, DeliveryPostalAddress)));
                }
                else if (dirPartyOriginEntity.TableId == tableNum(PurchTable))
                {
                    logisticsPostalAddress  = LogisticsPostalAddress::findRecId(dirPartyOriginEntity.(fieldNum(PurchTable, DeliveryPostalAddress)));
                }
            }
        }

        cfopAddressInformation = new CFOPAddressInformation_BR(logisticsPostalAddress);

        return cfopAddressInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the Transaction Type (Sales/Purch/Transfer)
    /// </summary>
    /// <returns>
    /// It returns the Transaction Type
    /// </returns>
    abstract SalesPurchTrntype_BR getTransactionType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOutgoingOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the transactions is sending services/goods
    /// </summary>
    /// <returns>
    /// True if the services/goods are sent, otherwise false if the transaction is receveing services/goods.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If transaction type cannot be recognized.
    /// </exception>
    [Replaceable]
    public boolean isItemOutgoingOperation()
    {
        SalesPurchTrntype_BR    transactionType;
        boolean                 isReturnedItem;
        boolean                 ret;

        transactionType = this.getTransactionType();
        isReturnedItem  = this.isReturnedItem();

        switch (transactionType)
        {
            case SalesPurchTrntype_BR::Sales:
            case SalesPurchTrntype_BR::ItemRequirement:
                ret = !isReturnedItem;
                break;

            case SalesPurchTrntype_BR::Purchase:
                ret = isReturnedItem;
                break;

            case SalesPurchTrntype_BR::FreeTextInvoice:
                ret = true;
                break;

            case SalesPurchTrntype_BR::ThirdPartyTransfer :
            case SalesPurchTrntype_BR::FiscalEstablishmentTransfer :
                ret =  !isReturnedItem;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction type is working with returned items.
    /// </summary>
    /// <returns>
    /// Boolean value indicating whether the transaction is for returned items.
    /// </returns>
    /// <remarks>
    ///     This method must be overwritten in case the transaction has returned process involved
    /// </remarks>
    public boolean isReturnedItem()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object with ranges determined by a given <c>CFOPAttributesDeterminer_BR</c> class.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> object built.
    /// </returns>
    public Query lookupQuery()
    {
        QueryBuildDataSource    qbds;
        Query                   query;

        query = new Query();

        qbds = query.addDataSource(tablenum(CFOPTable_BR));
        qbds.addRange(fieldnum(CFOPTable_BR, Direction)).value(queryValue(this.getDirection()));
        qbds.addRange(fieldnum(CFOPTable_BR, CustVendLocation)).value(queryValue(this.getLocation()));

        qbds = qbds.addDataSource(tablenum(CFOPMatrix_BR));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldnum(CFOPMatrix_BR, Transactiontype)).value(queryValue(this.getTransactionType()));
        qbds.addRange(fieldnum(CFOPMatrix_BR, SalesPurchOperationType_BR)).value(queryValue(this.getOperationId()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>FiscalEstablishment_BR</c> object
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// A <c>FiscalEstablishment_BR</c> object; optional
    /// </param>
    public void parmFiscalEstablishment(FiscalEstablishment_BR _fiscalEstablishment = fiscalEstablishment)
    {
        fiscalEstablishment = _fiscalEstablishment;

        this.getCFOPAttributes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for instantiate the correct class according to the transaction that is being performed
    /// </summary>
    /// <param name="_originalTable">
    /// It identifies the type of Data that is requiring the CFOP information
    /// </param>
    /// <returns>
    /// Returns na instance of this object to be used for CFOP process
    /// </returns>
    public static CFOPAttributesDeterminer_BR construct(Common _originalTable)
    {
        CFOPAttributesDeterminer_BR  cfopAttributes;

        switch (_originalTable.TableId)
        {
            case tablenum(PurchLine):
                cfopAttributes = new PurchLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tableNum(PurchReqLine):
                cfopAttributes = new PurchReqLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tableNum(PurchRFQLine):
                cfopAttributes = new PurchRFQLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tablenum(SalesLine):
                cfopAttributes = new SalesLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tableNum(SalesQuotationLine):
                cfopAttributes = new SalesQuotLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tablenum(CustInvoiceLine):
                cfopAttributes = new CustInvLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tableNum(VendInvoiceInfoLine):
                cfopAttributes = new VendInvLineCFOPAttributesDeterminer_BR(_originalTable);
                break;

            case tableNum(TaxFiscalDocumentLine_BR):
                cfopAttributes = new TaxTransferCFOPAttrDeterminer_BR(_originalTable);
                break;

            case tableNum(inventTransferLineFiscalInfo_BR):
                cfopAttributes = new InventTransferLineCFOPAttribDeterm_BR(_originalTable);
                break;

            default :
                throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }

        cfopAttributes.getCFOPAttributes();

        return cfopAttributes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>