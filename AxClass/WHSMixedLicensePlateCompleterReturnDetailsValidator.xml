<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateCompleterReturnDetailsValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMixedLicensePlateCompleterReturnDetailsValidator</c> class is responsible for validating
/// the <c>WHSReturnLineDetail</c> record during mixed license plate completion.
/// </summary>
internal final class WHSMixedLicensePlateCompleterReturnDetailsValidator
{
    private WHSInstrumentationLogger instrumentationLogger;

    private WHSMixedLicensePlateReceipt mixedLicensePlateReceipt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMixedLicensePlateReceipt</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateCompleterReturnDetailsValidator newFromMixedLicensePlateReceipt(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        WHSMixedLicensePlateCompleterReturnDetailsValidator validator = new WHSMixedLicensePlateCompleterReturnDetailsValidator();
        validator.mixedLicensePlateReceipt = _mixedLicensePlateReceipt.data();

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnLineDetails</Name>
				<Source><![CDATA[
    internal void validateReturnLineDetails()
    {
        using (var activityContext = this.instrumentationLogger().mixedLicensePlateCompleterReturnDetailsValidatorActivities().validateReturnLineDetails())
        {
            this.instrumentationLogger().logRecordInformation(mixedLicensePlateReceipt);

            WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;
            WHSMixedLicensePlateReceiptPlannedLine mixedLicensePlateReceiptPlannedLine;

            while select mixedLicensePlateReceiptLine
                where mixedLicensePlateReceiptLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId
                join mixedLicensePlateReceiptPlannedLine
                    where mixedLicensePlateReceiptPlannedLine.MixedLicensePlateReceiptLineRecId == mixedLicensePlateReceiptLine.RecId
            {
                this.validateReturnLineDetailQuantity(mixedLicensePlateReceiptLine, mixedLicensePlateReceiptPlannedLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnLineDetailQuantity</Name>
				<Source><![CDATA[
    private void validateReturnLineDetailQuantity(
        WHSMixedLicensePlateReceiptLine         _mixedLicensePlateReceiptLine,
        WHSMixedLicensePlateReceiptPlannedLine  _mixedLicensePlateReceiptPlannedLine)
    {
        using (var activityContext = this.instrumentationLogger().mixedLicensePlateCompleterReturnDetailsValidatorActivities().validateReturnLineDetailQuantity())
        {
            this.instrumentationLogger().logRecordInformation(_mixedLicensePlateReceiptLine);
            this.instrumentationLogger().logRecordInformation(_mixedLicensePlateReceiptPlannedLine);

            WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator overflowQuantityCalculator = WHSMixedLicensePlateCompleterReturnDetailsOverflowQuantityCalculator::newFromMixedLicensePlateLineAndPlannedLine(_mixedLicensePlateReceiptLine, _mixedLicensePlateReceiptPlannedLine);

            InventQty returnInventQtyOverflow = overflowQuantityCalculator.calculateOverflowReturnInventoryQuantity();

            if (returnInventQtyOverflow > 0)
            {
                UnitOfMeasureSymbol inventUOM = overflowQuantityCalculator.inventUOM();
                WHSReturnID returnID = overflowQuantityCalculator.returnID();

                throw error(strFmt("@WAX:WHSMixedLicensePlateCompleterReturnDetailsValidator_ReturnQtyExceeded_Error", mixedLicensePlateReceipt.LicensePlateId, _mixedLicensePlateReceiptLine.LineNum, returnID, returnInventQtyOverflow, inventUOM));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>