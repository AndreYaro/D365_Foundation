<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryCostObjectFlowModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryCostObjectFlowModel</c> class provides inventory flow data on inventory cost object level.
/// </summary>
class CostInventoryCostObjectFlowModel  extends CostFlowModel implements CostISetInventoryCostObject
{
    ItemId      itemId;
    InventDim   inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setCostObject</Name>
				<Source><![CDATA[
    public void setCostObject(ItemId _itemId, InventDim _inventDim)
    {
        itemId = _itemId;
        inventDim = _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        query = new Query();

        var periodsProvider = this.parmPeriodsProvider();

        List periods = periodsProvider.providePeriods();
        ListEnumerator listEnumerator = periods.getEnumerator();

        date firstDate = dateMax();
        date lastDate = dateNull();

        while (listEnumerator.moveNext())
        {
            CostSelectPeriodState period = listEnumerator.current();
            firstDate = min(firstDate, period.parmFromDate());
            lastDate = max(lastDate, period.parmToDate());
        }

        this.addInventTransValueQuery(query, firstDate, lastDate);
        this.addInventCostTransVarianceQuery(query, firstDate, lastDate);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransValueQuery</Name>
				<Source><![CDATA[
    private void addInventTransValueQuery(Query _query, date _fromDate, date _toDate)
    {
        var qbdsInventValue = _query.addDataSource(tableNum(InventValueReportView));
        qbdsInventValue.addSelectionField(fieldNum(InventValueReportView, Amount), SelectionField::Sum);
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, TransDate));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementLineCategoryLevel2));
        qbdsInventValue.addGroupByField(fieldNum(InventValueReportView, StatementType));
        qbdsInventValue.addRange(fieldNum(InventValueReportView, TransDate)).value(queryRange(_fromDate, dateMax()));

        if (itemId)
        {
            qbdsInventValue.addSelectionField(fieldNum(InventValueReportView, Qty), SelectionField::Sum);
            qbdsInventValue.addRange(fieldNum(InventValueReportView, ItemId)).value(itemId);
        }

        this.addLinkToInventDim(qbdsInventValue,
                                fieldNum(InventValueReportView, ItemId),
                                fieldNum(InventValueReportView, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventCostTransVarianceQuery</Name>
				<Source><![CDATA[
    private void addInventCostTransVarianceQuery(Query _query, date _fromDate, date _toDate)
    {
        var qbdsInventCostTransVarianceView = _query.addDataSource(tableNum(InventCostTransVarianceView));
        qbdsInventCostTransVarianceView.unionType(UnionType::UnionAll);
        qbdsInventCostTransVarianceView.addSelectionField(fieldNum(InventCostTransVarianceView, CostAmountPosted), SelectionField::Sum);
        qbdsInventCostTransVarianceView.addGroupByField(fieldNum(InventCostTransVarianceView, TransDate));
        qbdsInventCostTransVarianceView.addGroupByField(fieldNum(InventCostTransVarianceView, CostTransRefType));
        qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, TransDate)).value(queryRange(_fromDate, _toDate));
        qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, IsPosted)).value(queryValue(NoYes::Yes));

        if (itemId)
        {
            qbdsInventCostTransVarianceView.addRange(fieldNum(InventCostTransVarianceView, ItemId)).value(itemId);
        }

        this.addLinkToInventDim(qbdsInventCostTransVarianceView,
                                fieldNum(InventCostTransVarianceView, ItemId),
                                fieldNum(InventCostTransVarianceView, FinancialInventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkToInventDim</Name>
				<Source><![CDATA[
    private void addLinkToInventDim(QueryBuildDataSource _qbds,
                                    FieldId _itemIdField,
                                    FieldId _inventDimIdField)
    {
        var qbdsInventTable = _qbds.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(_itemIdField, fieldNum(InventTable, ItemId));
        qbdsInventTable.addGroupByField(fieldNum(InventTable, TableId));
        qbdsInventTable.addRange(fieldNum(InventTable, ItemType)).value(queryValue(ItemType::Item));

        InventDim inventDimBlank;

        if (!InventDim::isInventDimEqual(inventDim, inventDimBlank, inventDim::dimFieldsList()))
        {
            var qbdsInventDim = qbdsInventTable.addDataSource(tableNum(InventDim));
            qbdsInventDim.addLink(_inventDimIdField, fieldNum(InventDim, InventDimId), _qbds.name());
            qbdsInventTable.addGroupByField(fieldNum(InventDim, TableId));
            InventDim::queryAddRange(qbdsInventDim, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostInventoryCostObjectFlowModel construct()
    {
        return new CostInventoryCostObjectFlowModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostStatementType</Name>
				<Source><![CDATA[
    protected CostStatementType parmCostStatementType()
    {
        return CostStatementType::Inventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapQuery</Name>
				<Source><![CDATA[
    protected InventAgingICommand getMapQuery(QueryRun _queryRun)
    {
        return CostInventoryStatementCmdMapQuery::newFromQueryRun(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCmdAggregate</Name>
				<Source><![CDATA[
    protected CostStatementCmdAggregate getCmdAggregate(InventAgingICommand _mapQuery, CostSelectPeriodState _period)
    {
        var aggregator = CostInventoryStatementCmdAggregate::newFromParameters(_mapQuery);
        aggregator.parmFromDate(_period.parmFromDate());
        aggregator.parmToDate(_period.parmToDate());
        aggregator.parmUseCurrentBalance(true);
        return aggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBalances</Name>
				<Source><![CDATA[
    protected void addBalances(CostStatementCmdAggregate _aggregator)
    {
        var inventoryCmdAggregator = _aggregator as CostInventoryStatementCmdAggregate;

        if (!inventoryCmdAggregator)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var monthName = this.getLabelForDateRange(inventoryCmdAggregator.parmFromDate(), inventoryCmdAggregator.parmToDate());

        this.addBalance("@SCM:CostStatementBeginningBalance",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmBeginningBalanceAmount());
        this.addBalance("@SCM:CostStatementProcured",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmProcuredAmount());
        this.addBalance("@SCM:CostStatementManufacturedCost",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmManufacturedAmount());
        this.addBalance("@SCM:CostStatementDisposed",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmDisposedAmount());
        this.addBalance("@SCM:CostStatementConsumedMaterialCost",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmConsumedAmount());
        this.addBalance("@SCM:CostStatementTransferred",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmTransferredAmount());
        this.addBalance("@SCM:CostStatementSold",
                        periodChangeLines,
                        monthName,
                        inventoryCmdAggregator.parmSoldAmount());

        this.addBalance("@SCM:CostStatementEndingBalance",
                        endingBalanceLines,
                        monthName,
                        inventoryCmdAggregator.parmEndingBalanceAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodsProvider</Name>
				<Source><![CDATA[
    protected CostFlowChartAggregationPeriodsProvider parmPeriodsProvider()
    {
        var periodsProvider = CostFlowChartAggregationPeriodsProvider_Months::construct();

        periodsProvider.parmToDate(toDate);

        return periodsProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>