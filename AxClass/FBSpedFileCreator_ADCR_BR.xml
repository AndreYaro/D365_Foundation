<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_ADCR_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSpedFileCreator_ADCR_BR</c> class generates the SPED ADCR - PR file.
/// </summary>
public class FBSpedFileCreator_ADCR_BR extends FBSpedFileCreatorBase_BR
{
    private FBSpedADCRSetupParameters_BR parameters;
    private FBSpedADCRCollectedDataTmp_BR adcrCollectedDataTmp;
    private KeySum collectionR9000;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateFileContent</Name>
				<Source><![CDATA[
    protected void populateFileContent()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10026, funcName());

        this.collectData();

        this.createRecord0000();
        this.createRecord1000(); // + all other records for block 1
        this.createRecord9000();
        this.createRecord9999();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    private void createRecord0000()
    {
        FiscalEstablishment_BR fiscalEstablishment = fbBookingPeriod.fiscalEstablishment();

        str bookingPeriod = strFmt(
            '%1%2',
            strRFix(int2Str(fbBookingPeriod.PeriodMonth), 2, '0'),
            fbBookingPeriod.PeriodYear);

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('0000'); // REG - A01
        spedRecord.addFieldNumericFilledWithZeros(parameters.Version, 3); // COD_VERSAO - A02
        spedRecord.addFieldString(bookingPeriod, 6); // MES_ANO - A03
        spedRecord.addFieldNumeric(this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 0, 14); // CNPJ - A04
        spedRecord.addFieldNumeric(this.keepNumbers(fiscalEstablishment.IENum_BR), 0, 10); // IE - A05
        spedRecord.addFieldString(fiscalEstablishment.Name, 100); // NOME - A06
        spedRecord.addFieldNumeric(parameters.FileType, 0, 1); // CD_FIN - A07
        spedRecord.addFieldString(parameters.SpecialRegimeNumber, 10); // N_REG_ESPECIAL - A08
        spedRecord.addFieldEmpty(); // CNPJ_CD - A09
        spedRecord.addFieldEmpty(); // IE_CD - A10

        if (parameters.Version > FBSpedADCRVersion_BR::v100)
        {
            str restitutionTypeStr1200 = '';
            if (this.foundOutgoingFinalConsumer())
            {
                restitutionTypeStr1200 = this.isCollectInTaxAssessment() ? '2' : this.getRestitutionTypeStr(parameters.RestitutionType1200);
            }

            spedRecord.addFieldString(restitutionTypeStr1200); // OPÇÃO_R1200 - A11

            spedRecord.addFieldString(
                this.foundOutgoingOtherState()
                ? this.getRestitutionTypeStr(parameters.RestitutionType1300)
                : ''); // OPÇÃO_R1300 - A12

            spedRecord.addFieldEmpty(); // OPÇÃO_R1400 - A13

            spedRecord.addFieldString(
                this.foundOutgoingSimpleNational()
                ? this.getRestitutionTypeStr(parameters.RestitutionType1500)
                : ''); // OPÇÃO_R1500 - A14
        }

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord0220</Name>
				<Source><![CDATA[
    protected void createRecord0220(FBSpedRecord_BR _parentRecord, InventTable _inventTable)
    {
        //this record is not needed for report SPED ADCR - PR
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1000</Name>
				<Source><![CDATA[
    private void createRecord1000()
    {
        FBInventBalance_BR fbInventBalance;
        while select ItemId from fbInventBalance
            group by fbInventBalance.ItemId
            where fbInventBalance.BookingPeriod == fbBookingPeriod.RecId
        exists join adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == fbInventBalance.ItemId
        {
            InventTable inventTable = InventTable::find(fbInventBalance.ItemId);
            UnitOfMeasureSymbol unitOfMeasureSymbolDef = inventTable.inventTableModuleInvent().UnitId;

            GlobalTradeItemNumber productGTINCode = InventItemGTIN::find(
                fbInventBalance.ItemId,
                InventDim::inventDimIdBlank(),
                unitOfMeasureSymbolDef).GlobalTradeItemNumber;

            TaxValue taxValueICMS = this.getItemTaxValue(
                InventTable::find(fbInventBalance.ItemId).inventTableModuleSales().TaxItemGroupId,
                TaxType_BR::ICMS);

            TaxSubstitutionCode_BR taxSubstitutionCode = TaxSubstitutionCodeTable_BR::getTaxSubstitutionCode(
                inventTable.ItemId,
                inventTable.TaxFiscalClassification_BR);

            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1000'); // REG - B01
            spedRecord.addFieldNumeric(this.getIndicatorFCP(fbInventBalance.ItemId), 0, 1); // IND_FECOP - B02
            spedRecord.addFieldString(fbInventBalance.ItemId, 60); // COD_ITEM - B03
            spedRecord.addFieldNumeric(productGTINCode, 0, 14); // COD_BARRAS - B04
            spedRecord.addFieldEmpty(); // COD_ANP - B05
            spedRecord.addFieldNumeric(this.keepNumbers(inventTable.TaxFiscalClassification_BR), 0, 8); // NCM - B06
            spedRecord.addFieldNumeric(taxSubstitutionCode, 0, 7); // CEST - B07
            spedRecord.addFieldString(inventTable.defaultProductName(), 150); // DESCR_ITEM - B08
            spedRecord.addFieldString(unitOfMeasureSymbolDef, 10); // UNID_ITEM - B09
            spedRecord.addFieldNumeric(taxValueICMS, 2, 2); // ALIQ_ICMS_ITEM - B10

            TaxValue fcpRate = this.getFCPRate(fbInventBalance.ItemId);
            if (fcpRate)
            {
                spedRecord.addFieldNumeric(fcpRate, 2, 1); // ALIQ_FECOP - B11
            }
            else
            {
                spedRecord.addFieldEmpty(); // ALIQ_FECOP - B11
            }

            spedRecord.addFieldNumeric(this.getTotalQuantityOfIncoming(fbInventBalance.ItemId), 3, 9); // QTD_TOT_ENTRADA - B12
            spedRecord.addFieldNumeric(this.getTotalQuantityOfOutgoing(fbInventBalance.ItemId), 3, 9); // QTD_TOT_SAIDA - B13

            this.addRecord(spedRecord);

            this.createRecord1100(spedRecord, fbInventBalance.ItemId);
            this.createRecord1200(spedRecord, fbInventBalance.ItemId);
            this.createRecord1300(spedRecord, fbInventBalance.ItemId);
            this.createRecord1500(spedRecord, fbInventBalance.ItemId);
        }

        this.createRecord1999();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1100</Name>
				<Source><![CDATA[
    private void createRecord1100(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        select firstonly RecId from adcrCollectedDataTmp
            where adcrCollectedDataTmp.IsIncoming
                && adcrCollectedDataTmp.ItemId == _itemId;
        if (!adcrCollectedDataTmp)
        {
            return;
        }

        select minof(ItemPrice) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming;
        Amount itemPriceMin = adcrCollectedDataTmp.ItemPrice;

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1100'); // REG - D01
        spedRecord.addFieldNumeric(this.getTotalQuantityOfIncoming(_itemId), 3, 9); // QTD_TOT_ENTRADA - D02
        spedRecord.addFieldNumeric(itemPriceMin, 2, 9); // MENOR_VL_UNIT_ITEM - D03
        spedRecord.addFieldNumeric(this.getTaxBaseAmountIPerItemIncoming(_itemId), 2, 9); // VL_BC_ICMSST_UNIT_MED - D04
        spedRecord.addFieldNumeric(this.getTaxAmountIncoming(_itemId), 2, 9); // VL_TOT_ICMS_SUPORT_ENTR - D05
        spedRecord.addFieldNumeric(this.getTaxAmountIPerItemIncoming(_itemId), 2, 9); // VL_UNIT_MED_ICMS_SUPORT_ENTR - D06

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord1110(spedRecord, _itemId);
        this.createRecord1120(spedRecord, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1110</Name>
				<Source><![CDATA[
    private void createRecord1110(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;

        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && !adcrCollectedDataTmp.IsReturn
        join fiscalDocument
            where fiscalDocument.RecId == adcrCollectedDataTmp.FiscalDocument_BR
        join CFOP, LineNum, RespWithholdingICMSST from fiscalDocumentLine
            where fiscalDocumentLine.RecId == adcrCollectedDataTmp.FiscalDocumentLine_BR
        {
            RespWithholdingICMSST_BR personResponsibleICMSST = this.getPersonResponsibleICMSST(
                fiscalDocumentLine.RespWithholdingICMSST,
                fiscalDocument.FiscalDocumentIssuer);

            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1110'); // REG - E01
            spedRecord.addFieldString(this.getDataInString(fiscalDocument.FiscalDocumentDate), 8); // DT_DOC - E02
            spedRecord.addFieldNumeric(enum2int(personResponsibleICMSST), 0, 1); // COD_RESP_RET - E03
            spedRecord.addFieldNumericFilledWithZeros(adcrCollectedDataTmp.TaxationCode_ICMSST, 3); // CST_CSOSN - E04
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44); // CHAVE - E05
            spedRecord.addFieldNumeric(fiscalDocument.FiscalDocumentNumber, 0, 9); // N_NF - E06
            spedRecord.addFieldNumeric(this.getCNPJIssuer(fiscalDocument), 0, 14); // CNPJ_EMIT - E07
            spedRecord.addFieldString(this.getStateIssuer(fiscalDocument), 2); // UF_EMIT - E08
            spedRecord.addFieldNumeric(this.getCNPJReceiver(fiscalDocument), 0, 14); // CNPJ_DEST - E09
            spedRecord.addFieldString(this.getStateReceiver(fiscalDocument), 2); // UF_DEST - E10
            spedRecord.addFieldNumeric(this.keepNumbers(fiscalDocumentLine.CFOP), 0, 4); // CFOP - E11
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0, 3); // N_ITEM - E12
            spedRecord.addFieldString(adcrCollectedDataTmp.Unit, 10); // UNID_ITEM - E13
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.Quantity, 3, 9); // QTD_ENTRADA - E14
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.ItemPrice, 2, 9); // VL_UNIT_ITEM - E15
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxBaseAmount_ICMSST, 2, 9); // VL_BC_ICMS_ST - E16
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMSST, 2, 9); // VL_ICMS_SUPORT_ENTR - E17

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1120</Name>
				<Source><![CDATA[
    private void createRecord1120(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;

        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && adcrCollectedDataTmp.IsReturn
        join fiscalDocument
            where fiscalDocument.RecId == adcrCollectedDataTmp.FiscalDocument_BR
        join CFOP, LineNum from fiscalDocumentLine
            where fiscalDocumentLine.RecId == adcrCollectedDataTmp.FiscalDocumentLine_BR
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1120'); // REG - E01d
            spedRecord.addFieldString(this.getDataInString(fiscalDocument.FiscalDocumentDate), 8); // DT_DOC - E02d
            spedRecord.addFieldNumericFilledWithZeros(adcrCollectedDataTmp.TaxationCode_ICMSST, 3); // CST_CSOSN - E03d
            spedRecord.addFieldString(fiscalDocument.AccessKey, 44); // CHAVE - E04d
            spedRecord.addFieldNumeric(fiscalDocument.FiscalDocumentNumber, 0, 9); // N_NF - E05d
            spedRecord.addFieldNumeric(this.getCNPJIssuer(fiscalDocument), 0, 14); // CNPJ_EMIT - E06d
            spedRecord.addFieldString(this.getStateIssuer(fiscalDocument), 2); // UF_EMIT - E07d
            spedRecord.addFieldNumeric(this.getCNPJReceiver(fiscalDocument), 0, 14); // CNPJ_DEST - E08d
            spedRecord.addFieldString(this.getStateReceiver(fiscalDocument), 2); // UF_DEST - E09d
            spedRecord.addFieldNumeric(this.keepNumbers(fiscalDocumentLine.CFOP), 0, 4); // CFOP - E10d
            spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0, 3); // N_ITEM - E11d
            spedRecord.addFieldString(adcrCollectedDataTmp.Unit, 10); // UNID_ITEM - E12d
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.Quantity, 3, 9); // QTD_DEVOLVIDA - E13d
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.ItemPrice, 2, 9); // VL_UNIT_ITEM - E14d
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxBaseAmount_ICMSST, 2, 9); // VL_BC_ICMS_ST - E15d
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMSST, 2, 9); // VL_ICMS_SUPORT_ENTR - E16d

            spedRecord = this.fillSpedRecordReturnedPart(spedRecord, adcrCollectedDataTmp.FiscalDocument_BR);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1200</Name>
				<Source><![CDATA[
    private void createRecord1200(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        if (!this.foundOutgoingFinalConsumer(_itemId))
        {
            return;
        }

        TaxAmount taxAmountPerItemIncoming = this.getTaxAmountIPerItemIncoming(_itemId);

        select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                && !adcrCollectedDataTmp.IsReturn;
        Qty qtyTotal = adcrCollectedDataTmp.Quantity;
        TaxAmount taxAmountTotal = adcrCollectedDataTmp.TaxAmount_ICMS;

        select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                && adcrCollectedDataTmp.IsReturn;
        qtyTotal -= adcrCollectedDataTmp.Quantity;
        taxAmountTotal -= adcrCollectedDataTmp.TaxAmount_ICMS;

        Amount diffTaxAmounts = (qtyTotal * taxAmountPerItemIncoming) - taxAmountTotal;
        Amount diffTaxAmountsPositive = diffTaxAmounts > 0 ? diffTaxAmounts : 0;
        Amount diffTaxAmountsNegative = diffTaxAmounts < 0 ? abs(diffTaxAmounts) : 0;

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1200'); // REG - F01
        spedRecord.addFieldNumeric(qtyTotal, 3, 9); // QTD_TOT_SAIDA - F02
        spedRecord.addFieldNumeric(taxAmountTotal, 2, 9); // VL_TOT_ICMS_EFETIVO - F03
        spedRecord.addFieldNumeric(qtyTotal * taxAmountPerItemIncoming, 2, 9); // VL_CONFRONTO_ICMS_ENTRADA - F04

        spedRecord.addFieldNumeric(
            parameters.RestitutionType1200 == FBSpedRestitutionTypes_BR::TaxAdjustment && parameters.Version > FBSpedADCRVersion_BR::v100
            ? qtyTotal * taxAmountPerItemIncoming
            : diffTaxAmountsPositive, 2, 9); // RESULT_RECUPERAR_RESSARCIR - F05

        spedRecord.addFieldNumeric(diffTaxAmountsNegative, 2, 9); // RESULT_COMPLEMENTAR - F06

        TaxValue taxValueICMS = this.getItemTaxValue(InventTable::find(_itemId).inventTableModuleSales().TaxItemGroupId, TaxType_BR::ICMS);
        if (taxValueICMS)
        {
            TaxValue fcpRate = this.getFCPRate(_itemId);

            real assessmentICMSSTToRefunding = (diffTaxAmountsPositive * taxValueICMS) - (fcpRate / taxValueICMS);
            collectionR9000.updateNow('F07', assessmentICMSSTToRefunding);
            spedRecord.addFieldNumeric(assessmentICMSSTToRefunding, 2, 9); // APUR_ICMSST_RECUPERAR_RESSARCIR - F07

            real assessmentICMSSTToComplementing = abs((diffTaxAmountsNegative * taxValueICMS) - (fcpRate / taxValueICMS));
            collectionR9000.updateNow('F08', assessmentICMSSTToComplementing);
            spedRecord.addFieldNumeric(assessmentICMSSTToComplementing, 2, 9); // APUR_ICMSST_COMPLEMENTAR - F08

            real assessmentFCPToRefunding = diffTaxAmountsPositive * fcpRate / taxValueICMS;
            collectionR9000.updateNow('F09', assessmentFCPToRefunding);
            spedRecord.addFieldNumeric(assessmentFCPToRefunding, 2, 9); // APUR_FECOP_RESSARCIR - F09

            real assessmentFCPToComplementing = diffTaxAmountsNegative * fcpRate / taxValueICMS;
            collectionR9000.updateNow('F10', assessmentFCPToComplementing);
            spedRecord.addFieldNumeric(assessmentFCPToComplementing, 2, 9); // APUR_FECOP_COMPLEMENTAR - F10
        }
        else
        {
            collectionR9000.updateNow('F07', 0);
            spedRecord.addFieldNumeric(0, 2, 9); // APUR_ICMSST_RECUPERAR_RESSARCIR - F07

            collectionR9000.updateNow('F08', 0);
            spedRecord.addFieldNumeric(0, 2, 9); // APUR_ICMSST_COMPLEMENTAR - F08

            collectionR9000.updateNow('F09', 0);
            spedRecord.addFieldNumeric(0, 2, 9); // APUR_FECOP_RESSARCIR - F09

            collectionR9000.updateNow('F10', 0);
            spedRecord.addFieldNumeric(0, 2, 9); // APUR_FECOP_COMPLEMENTAR - F10
        }

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord1210(spedRecord, _itemId);
        this.createRecord1220(spedRecord, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1210</Name>
				<Source><![CDATA[
    private void createRecord1210(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                && !adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1210'); // REG - G01
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMS, 2, 9); // VL_ICMS_EFET - G15

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1220</Name>
				<Source><![CDATA[
    private void createRecord1220(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                && adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1220'); // REG - G01d
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMS, 2, 9); // VL_ICMS_EFETIVO - G15d
            spedRecord = this.fillSpedRecordReturnedPart(spedRecord, adcrCollectedDataTmp.FiscalDocument_BR);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1300</Name>
				<Source><![CDATA[
    private void createRecord1300(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        if (!this.foundOutgoingOtherState(_itemId))
        {
            return;
        }

        select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingOtherState
                && !adcrCollectedDataTmp.IsReturn;
        Qty qtyTotal = adcrCollectedDataTmp.Quantity;
        TaxAmount taxAmountTotal = adcrCollectedDataTmp.TaxAmount_ICMS;

        select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingOtherState
                && adcrCollectedDataTmp.IsReturn;
        qtyTotal -= adcrCollectedDataTmp.Quantity;
        taxAmountTotal -= adcrCollectedDataTmp.TaxAmount_ICMS;

        Amount diffTaxAmounts = (qtyTotal * this.getTaxAmountIPerItemIncoming(_itemId)) - taxAmountTotal;
        Amount diffTaxAmountsPositive = diffTaxAmounts >= 0 ? diffTaxAmounts : 0;

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1300'); // REG - H01
        spedRecord.addFieldNumeric(qtyTotal, 3, 9); // QTD_TOT_SAIDA - H02
        spedRecord.addFieldNumeric(taxAmountTotal, 2, 9); // VL_TOT_ICMS_EFETIVO - H03
        spedRecord.addFieldNumeric(qtyTotal * this.getTaxAmountIPerItemIncoming(_itemId), 2, 9); // VL_CONFRONTO_ICMS_ENTRADA - H04
        spedRecord.addFieldNumeric(diffTaxAmountsPositive, 2, 9); // RESULT_RECUPERAR_RESSARCIR - H05

        real assessmentOfFCPForRefunded = this.getTaxBaseAmountIPerItemIncoming(_itemId) * (this.getFCPRate(_itemId) / 100) * qtyTotal;
        collectionR9000.updateNow('H07', assessmentOfFCPForRefunded);

        real assessmentICMSSTToRefunding = abs(diffTaxAmountsPositive - assessmentOfFCPForRefunded);
        collectionR9000.updateNow('H06', assessmentICMSSTToRefunding);

        spedRecord.addFieldNumeric(assessmentICMSSTToRefunding, 2, 9); // APUR_ICMSST_RECUPERAR_RESSARCIR - H06
        spedRecord.addFieldNumeric(assessmentOfFCPForRefunded, 2, 9); // APUR_FECOP_RESSARCIR - H07

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord1310(spedRecord, _itemId);
        this.createRecord1320(spedRecord, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1310</Name>
				<Source><![CDATA[
    private void createRecord1310(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingOtherState
                && !adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1310'); // REG - I01
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMS, 2, 9); // VL_ICMS_EFET - I15

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1320</Name>
				<Source><![CDATA[
    private void createRecord1320(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingOtherState
                && adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1320'); // REG - I01d
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);
            spedRecord.addFieldNumeric(adcrCollectedDataTmp.TaxAmount_ICMS, 2, 9); // VL_ICMS_EFETIVO - I15d
            spedRecord = this.fillSpedRecordReturnedPart(spedRecord, adcrCollectedDataTmp.FiscalDocument_BR);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1500</Name>
				<Source><![CDATA[
    private void createRecord1500(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        if (!this.foundOutgoingSimpleNational(_itemId))
        {
            return;
        }

        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingSimpleNational
                && !adcrCollectedDataTmp.IsReturn;
        Qty qtyTotal = adcrCollectedDataTmp.Quantity;

        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingSimpleNational
                && adcrCollectedDataTmp.IsReturn;
        qtyTotal -= adcrCollectedDataTmp.Quantity;

        TaxValue taxValueICMS = this.getItemTaxValue(InventTable::find(_itemId).inventTableModuleSales().TaxItemGroupId, TaxType_BR::ICMS);
        TaxValue markupValue = this.getMarkupValue(_itemId);
        TaxValue percentageOfReduction = this.getPercentageOfReduction(markupValue);

        TaxAmount taxAmountRecoveredPerUnit = (markupValue != -100 && percentageOfReduction != 0)
            ? (this.getTaxAmountIPerItemIncoming(_itemId) / (1 + markupValue / 100)) * (markupValue / percentageOfReduction) * taxValueICMS
            : 0;

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1500'); // REG - L01
        spedRecord.addFieldNumeric(qtyTotal, 2, 9); // QTD_TOT_SAIDA - L02
        spedRecord.addFieldNumeric(taxAmountRecoveredPerUnit, 2, 9); // VL_ICMSST_UNIT_ENTR - L03

        real assessmentICMSSTToRefunding = qtyTotal * taxAmountRecoveredPerUnit;
        collectionR9000.updateNow('L04', assessmentICMSSTToRefunding);
        spedRecord.addFieldNumeric(assessmentICMSSTToRefunding, 2, 9); // APUR_ICMSST_RECUPERAR_RESSARCIR - L04

        this.addChildRecord(_parentRecord, spedRecord);

        this.createRecord1510(spedRecord, _itemId);
        this.createRecord1520(spedRecord, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1510</Name>
				<Source><![CDATA[
    private void createRecord1510(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingSimpleNational
                && !adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1510'); // REG - M01
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1520</Name>
				<Source><![CDATA[
    private void createRecord1520(FBSpedRecord_ADCR_BR _parentRecord, ItemId _itemId)
    {
        while select adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsOutgoingSimpleNational
                && adcrCollectedDataTmp.IsReturn
        {
            FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1520'); // REG - M01d
            spedRecord = this.fillSpedRecordOutgoing(spedRecord, adcrCollectedDataTmp);
            spedRecord = this.fillSpedRecordReturnedPart(spedRecord, adcrCollectedDataTmp.FiscalDocument_BR);

            this.addChildRecord(_parentRecord, spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord1999</Name>
				<Source><![CDATA[
    private void createRecord1999()
    {
        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('1999'); // REG - R01
        spedRecord.addFieldNumeric(spedFile.totalRecordsInBlock('1') + 1); // QTD_LIN - R02
        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9000</Name>
				<Source><![CDATA[
    private void createRecord9000()
    {
        real assessmentICMSSTToRefunding_finalConsumer = this.getSumByKey('F07');
        real assessmentICMSSTToComplementing_finalConsumer = this.getSumByKey('F08');
        real diffBetweenAssessmentICMSSTTs = assessmentICMSSTToRefunding_finalConsumer - assessmentICMSSTToComplementing_finalConsumer;
        real diffBetweenAssessmentICMSSTTsPositive = diffBetweenAssessmentICMSSTTs > 0 ? diffBetweenAssessmentICMSSTTs : 0;
        real diffBetweenAssessmentICMSSTTsNegative = diffBetweenAssessmentICMSSTTs < 0 ? abs(diffBetweenAssessmentICMSSTTs) : 0;
        real assessmentFCPToRefunding_finalConsumer = this.getSumByKey('F09');
        real assessmentFCPToComplementing_finalConsumer = this.getSumByKey('F10');
        real assessmentICMSSTToRefunding_OtherState = this.getSumByKey('H06');
        real assessmentOfFCPForRefunded_OtherState = this.getSumByKey('H07');
        real assessmentICMSSTToRefunding_SimpleNational = this.getSumByKey('L04');
        real diffBetweenAssessmentFCPs = assessmentFCPToRefunding_finalConsumer
            + assessmentOfFCPForRefunded_OtherState
            - assessmentFCPToComplementing_finalConsumer;

        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('9000'); // REG - X01
        spedRecord.addFieldNumeric(diffBetweenAssessmentICMSSTTsPositive, 2, 9); // REG1200_ICMSST_RECUPERAR_RESSARCIR - X02
        spedRecord.addFieldNumeric(diffBetweenAssessmentICMSSTTsNegative, 2, 9); // REG1200_ICMSST_COMPLEMENTAR - X03
        spedRecord.addFieldNumeric(assessmentICMSSTToRefunding_OtherState, 2, 9); // REG1300_ICMSST_RECUPERAR_RESSARCIR - X04
        spedRecord.addFieldNumeric(0, 2, 9); // REG1400_ICMSST_RECUPERAR_RESSARCIR - X05
        spedRecord.addFieldNumeric(assessmentICMSSTToRefunding_SimpleNational, 2, 9); // REG1500_ICMSST_RECUPERAR_RESSARCIR - X06
        spedRecord.addFieldNumeric(diffBetweenAssessmentFCPs > 0 ? diffBetweenAssessmentFCPs : 0, 2, 9); // REG9000_FECOP_RESSARCIR - X07
        spedRecord.addFieldNumeric(diffBetweenAssessmentFCPs < 0 ? abs(diffBetweenAssessmentFCPs) : 0, 2, 9); // REG9000_FECOP_COMPLEMENTAR - X08

        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord9999</Name>
				<Source><![CDATA[
    protected void createRecord9999()
    {
        FBSpedRecord_ADCR_BR spedRecord = FBSpedRecord_ADCR_BR::constructEmpty('9999'); // REG - Z01
        spedRecord.addFieldNumeric(spedFile.totalRecords() + 1); // QTD_LIN - Z02
        this.addRecord(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectData</Name>
				<Source><![CDATA[
    private void collectData()
    {
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;

        collectionR9000  = KeySum::construct(1, 1);

        ttsBegin;

        while select fiscalDocument
        join fiscalDocumentLine
            where fiscalDocumentLine.fiscalDocument == fiscalDocument.RecId
        exists join fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            if (this.hasSuitableTaxes(fiscalDocumentLine.RecId) && this.isOutgoing(fiscalDocument))
            {
                this.fillCollectedTable(fiscalDocument, fiscalDocumentLine);
            }
        }

        FBInventBalance_BR fbInventBalance;
        FBBookingPeriod_BR fbBookingPeriodAll;
        while select ItemId from fbInventBalance
            group by fbInventBalance.ItemId
            where fbInventBalance.BookingPeriod == fbBookingPeriod.RecId
        {
            Qty minRequiredQtyIncomingFD = this.getTotalQuantityOfOutgoing(fbInventBalance.ItemId);
            Qty counterQty = 0;

            while select fiscalDocument
            join fiscalDocumentLine
                where fiscalDocumentLine.fiscalDocument == fiscalDocument.RecId
                    && fiscalDocumentLine.ItemId == fbInventBalance.ItemId
            join RecId from fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
            join RecId from fbBookingPeriodAll
                order by fbBookingPeriodAll.PeriodYear desc, fbBookingPeriodAll.PeriodMonth desc, fiscalDocument.FiscalDocumentDate desc
                where fbBookingPeriodAll.RecId == fbBookingPeriodFiscalDocument.FBBookingPeriod_BR
                    && fbBookingPeriodAll.FiscalEstablishmentId == fbBookingPeriod.FiscalEstablishmentId
                    && fbBookingPeriodAll.FiscalEstablishmentDataArea == fbBookingPeriod.FiscalEstablishmentDataArea
                    && ((fbBookingPeriodAll.PeriodYear == fbBookingPeriod.PeriodYear && fbBookingPeriodAll.PeriodMonth <= fbBookingPeriod.PeriodMonth)
                        || fbBookingPeriodAll.PeriodYear < fbBookingPeriod.PeriodYear)
            {
                if (counterQty < minRequiredQtyIncomingFD
                    || (fbBookingPeriodAll.RecId == fbBookingPeriod.RecId && minRequiredQtyIncomingFD > 0))
                {
                    if (this.hasSuitableTaxes(fiscalDocumentLine.RecId) && this.isIncoming(fiscalDocument))
                    {
                        counterQty += EcoResProductUnitConverter::convertForReleasedProduct(
                            fiscalDocumentLine.ItemId,
                            InventTable::getInventDimId(fiscalDocumentLine.ItemId),
                            fiscalDocumentLine.Quantity,
                            UnitOfMeasure::unitOfMeasureIdBySymbol(fiscalDocumentLine.Unit),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(fiscalDocumentLine.ItemId).inventTableModuleInvent().UnitId),
                            NoYes::Yes);

                        this.fillCollectedTable(fiscalDocument, fiscalDocumentLine);
                    }
                }
                else
                {
                    break;
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCollectedTable</Name>
				<Source><![CDATA[
    private void fillCollectedTable(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans_ICMS;
        select sum(TaxAmountOther) from fiscalDocumentTaxTrans_ICMS
            group by TaxationCode
            where fiscalDocumentTaxTrans_ICMS.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTrans_ICMS.Type == TaxType_BR::ICMS
                && (fiscalDocumentTaxTrans_ICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTrans_ICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode500);

        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans_ICMSST;
        select sum(TaxAmountOther), sum(TaxBaseAmountOther) from fiscalDocumentTaxTrans_ICMSST
            group by TaxationCode
            where fiscalDocumentTaxTrans_ICMSST.FiscalDocumentLine == _fiscalDocumentLine.RecId
                && fiscalDocumentTaxTrans_ICMSST.Type == TaxType_BR::ICMSST
                && (fiscalDocumentTaxTrans_ICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTrans_ICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode500);

        adcrCollectedDataTmp.clear();
        adcrCollectedDataTmp.FiscalDocument_BR = _fiscalDocument.RecId;
        adcrCollectedDataTmp.FiscalDocumentLine_BR = _fiscalDocumentLine.RecId;
        adcrCollectedDataTmp.ItemPrice = _fiscalDocumentLine.UnitPrice;
        adcrCollectedDataTmp.TaxAmount_ICMSST = fiscalDocumentTaxTrans_ICMSST.TaxAmountOther;
        adcrCollectedDataTmp.TaxBaseAmount_ICMSST = fiscalDocumentTaxTrans_ICMSST.TaxBaseAmountOther;
        adcrCollectedDataTmp.TaxAmount_ICMS = fiscalDocumentTaxTrans_ICMS.TaxAmountOther;
        adcrCollectedDataTmp.IsIncoming = this.isIncoming(_fiscalDocument);
        adcrCollectedDataTmp.IsOutgoingFinalConsumer = this.isOutgoingFinalConsumer(_fiscalDocument, _fiscalDocumentLine.CFOP);
        adcrCollectedDataTmp.IsOutgoingOtherState = this.isOutgoingOtherState(_fiscalDocument, _fiscalDocumentLine.CFOP);
        adcrCollectedDataTmp.IsOutgoingSimpleNational = this.isOutgoingSimpleNational(_fiscalDocument);

        adcrCollectedDataTmp.IsReturn = adcrCollectedDataTmp.IsIncoming
            ? this.isReturnFiscalDocumentForIncoming(_fiscalDocument.Direction, _fiscalDocument.RefTableId)
            : this.isReturnFiscalDocumentForOutgoing(_fiscalDocument.Direction, _fiscalDocument.RefTableId);

        adcrCollectedDataTmp.ItemId = _fiscalDocumentLine.ItemId;
        adcrCollectedDataTmp.TaxationCode_ICMS = fiscalDocumentTaxTrans_ICMS.TaxationCode;
        adcrCollectedDataTmp.TaxationCode_ICMSST = fiscalDocumentTaxTrans_ICMSST.TaxationCode;

        UnitOfMeasureSymbol unitOfMeasureSymbolDef = InventTable::find(_fiscalDocumentLine.ItemId).inventTableModuleInvent().UnitId;
        adcrCollectedDataTmp.Unit = unitOfMeasureSymbolDef;

        adcrCollectedDataTmp.Quantity = EcoResProductUnitConverter::convertForReleasedProduct(
            _fiscalDocumentLine.ItemId,
            InventTable::getInventDimId(_fiscalDocumentLine.ItemId),
            _fiscalDocumentLine.Quantity,
            UnitOfMeasure::unitOfMeasureIdBySymbol(_fiscalDocumentLine.Unit),
            UnitOfMeasure::unitOfMeasureIdBySymbol(unitOfMeasureSymbolDef),
            NoYes::Yes);

        adcrCollectedDataTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncoming</Name>
				<Source><![CDATA[
    private boolean isIncoming(FiscalDocument_BR _fiscalDocument)
    {
        return (_fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                || this.isReturnFiscalDocumentForIncoming(_fiscalDocument.Direction, _fiscalDocument.RefTableId))
            && !this.isReturnFiscalDocumentForOutgoing(_fiscalDocument.Direction, _fiscalDocument.RefTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutgoing</Name>
				<Source><![CDATA[
    private boolean isOutgoing(FiscalDocument_BR _fiscalDocument)
    {
        return (_fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing
                || this.isReturnFiscalDocumentForOutgoing(_fiscalDocument.Direction, _fiscalDocument.RefTableId))
            && !this.isReturnFiscalDocumentForIncoming(_fiscalDocument.Direction, _fiscalDocument.RefTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutgoingFinalConsumer</Name>
				<Source><![CDATA[
    private boolean isOutgoingFinalConsumer(FiscalDocument_BR _fiscalDocument, SalesPurchCFOPId_BR _cfop)
    {
        CustTable custTable;
        select firstonly SimpleNational_BR from custTable
            where custTable.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;

        return this.isOutgoing(_fiscalDocument)
            && _fiscalDocument.FinalUser
            && match('5.*', _cfop)
            && !custTable.SimpleNational_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutgoingOtherState</Name>
				<Source><![CDATA[
    private boolean isOutgoingOtherState(FiscalDocument_BR _fiscalDocument, SalesPurchCFOPId_BR _cfop)
    {
        CustTable custTable;
        select firstonly SimpleNational_BR from custTable
            where custTable.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;

        return this.isOutgoing(_fiscalDocument)
            && !_fiscalDocument.FinalUser
            && match('6.*', _cfop)
            && !custTable.SimpleNational_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutgoingSimpleNational</Name>
				<Source><![CDATA[
    private boolean isOutgoingSimpleNational(FiscalDocument_BR _fiscalDocument)
    {
        CustTable custTable;
        select firstonly SimpleNational_BR from custTable
            where custTable.AccountNum == _fiscalDocument.FiscalDocumentAccountNum;

        return this.isOutgoing(_fiscalDocument)
            && custTable.SimpleNational_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnFiscalDocumentForOutgoing</Name>
				<Source><![CDATA[
    private boolean isReturnFiscalDocumentForOutgoing(FiscalDocDirection_BR _direction, RefTableId _refTableId)
    {
        return _direction == FiscalDocDirection_BR::Incoming
            && !(_refTableId == tableNum(PurchComplementaryInvoiceHeader)
                || _refTableId == tableNum(VendInvoiceJour)
                || _refTableId == tableNum(VendPackingSlipJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnFiscalDocumentForIncoming</Name>
				<Source><![CDATA[
    private boolean isReturnFiscalDocumentForIncoming(FiscalDocDirection_BR _direction, RefTableId _refTableId)
    {
        return _direction == FiscalDocDirection_BR::Outgoing
            && (_refTableId == tableNum(PurchComplementaryInvoiceHeader)
                || _refTableId == tableNum(VendInvoiceJour)
                || _refTableId == tableNum(VendPackingSlipJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSuitableTaxes</Name>
				<Source><![CDATA[
    private boolean hasSuitableTaxes(RefRecId _fiscalDocumentLineRecId)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;
        select firstonly RecId from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.FiscalDocumentLine == _fiscalDocumentLineRecId
                && (fiscalDocumentTaxTrans.Type == TaxType_BR::ICMS
                    || fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSST)
                && (fiscalDocumentTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTrans.TaxationCode == FiscalBooksConstants_BR::TaxationCode500);

        return fiscalDocumentTaxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSpedRecordOutgoing</Name>
				<Source><![CDATA[
    private FBSpedRecord_ADCR_BR fillSpedRecordOutgoing(
        FBSpedRecord_ADCR_BR _spedRecord,
        FBSpedADCRCollectedDataTmp_BR _adcrCollectedDataTmpLocal)
    {
        FiscalDocument_BR fiscalDocument;
        select firstonly fiscalDocument
            where fiscalDocument.RecId == _adcrCollectedDataTmpLocal.FiscalDocument_BR;

        FiscalDocumentLine_BR fiscalDocumentLine;
        select firstonly CFOP, LineNum from fiscalDocumentLine
            where fiscalDocumentLine.RecId == _adcrCollectedDataTmpLocal.FiscalDocumentLine_BR;

        _spedRecord.addFieldString(this.getDataInString(fiscalDocument.FiscalDocumentDate), 8); // DT_DOC - 2
        _spedRecord.addFieldNumericFilledWithZeros(adcrCollectedDataTmp.TaxationCode_ICMS, 3); // CST_CSOSN - 3
        _spedRecord.addFieldString(fiscalDocument.AccessKey, 44); // CHAVE - 4
        _spedRecord.addFieldNumeric(fiscalDocument.FiscalDocumentNumber, 0, 9); // N_NF - 5
        _spedRecord.addFieldNumeric(this.getCNPJIssuer(fiscalDocument), 0, 14); // CNPJ_EMIT - 6
        _spedRecord.addFieldString(this.getStateIssuer(fiscalDocument), 2); // UF_EMIT - 7
        _spedRecord.addFieldNumeric(this.getCNPJReceiver(fiscalDocument), 0, 14); // CNPJ_CPF_DEST - 8
        _spedRecord.addFieldString(this.getStateReceiver(fiscalDocument), 2); // UF_DEST - 9
        _spedRecord.addFieldNumeric(this.keepNumbers(fiscalDocumentLine.CFOP), 0, 4); // CFOP - 10
        _spedRecord.addFieldNumeric(fiscalDocumentLine.LineNum, 0, 3); // N_ITEM - 11
        _spedRecord.addFieldString(_adcrCollectedDataTmpLocal.Unit, 10); // UNID_ITEM - 12
        _spedRecord.addFieldNumeric(_adcrCollectedDataTmpLocal.Quantity, 3, 9); // QTD_SAIDA / QTD_DEVOLVIDA - 13
        _spedRecord.addFieldNumeric(_adcrCollectedDataTmpLocal.ItemPrice, 2, 9); // VL_UNIT_ITEM - 14

        return _spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSpedRecordReturnedPart</Name>
				<Source><![CDATA[
    private FBSpedRecord_ADCR_BR fillSpedRecordReturnedPart(FBSpedRecord_ADCR_BR _spedRecord, RefRecId _fiscalDocumentRecId)
    {
        FiscalDocumentReferenced_BR fiscalDocumentReferenced;
        FiscalDocument_BR fiscalDocumentOriginal;
        FiscalDocumentLine_BR fiscalDocumentLineOriginal;

        select firstOnly AccessKey from fiscalDocumentOriginal
        join ItemId from fiscalDocumentLineOriginal
            where fiscalDocumentLineOriginal.FiscalDocument == fiscalDocumentOriginal.RecId
        exists join fiscalDocumentReferenced
            where fiscalDocumentOriginal.RecId == fiscalDocumentReferenced.ReferencedFiscalDocument
                && fiscalDocumentReferenced.FiscalDocument == _fiscalDocumentRecId;

        _spedRecord.addFieldString(fiscalDocumentOriginal.AccessKey, 44); // CHAVE_REF - 16 / 17
        _spedRecord.addFieldNumeric(fiscalDocumentLineOriginal.ItemId, 0, 3); // N_ITEM_REF - 17 / 18

        return _spedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantityOfIncoming</Name>
				<Source><![CDATA[
    private Qty getTotalQuantityOfIncoming(ItemId _itemId)
    {
        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && !adcrCollectedDataTmp.IsReturn;
        Qty total = adcrCollectedDataTmp.Quantity;

        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && adcrCollectedDataTmp.IsReturn;
        total -= adcrCollectedDataTmp.Quantity;

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantityOfOutgoing</Name>
				<Source><![CDATA[
    private Qty getTotalQuantityOfOutgoing(ItemId _itemId)
    {
        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && (adcrCollectedDataTmp.IsOutgoingFinalConsumer
                    || adcrCollectedDataTmp.IsOutgoingOtherState
                    || adcrCollectedDataTmp.IsOutgoingSimpleNational)
                && !adcrCollectedDataTmp.IsReturn;
        Qty total = adcrCollectedDataTmp.Quantity;

        select sum(Quantity) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && (adcrCollectedDataTmp.IsOutgoingFinalConsumer
                    || adcrCollectedDataTmp.IsOutgoingOtherState
                    || adcrCollectedDataTmp.IsOutgoingSimpleNational)
                && adcrCollectedDataTmp.IsReturn;
        total -= adcrCollectedDataTmp.Quantity;

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataInString</Name>
				<Source><![CDATA[
    private str getDataInString(TransDate _date)
    {
        return date2str(
            _date,
            DateFormat::DMY,
            DateDay::Digits2,
            DateSeparator::None,
            DateMonth::Digits2,
            DateSeparator::None,
            DateYear::Digits4,
            DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonResponsibleICMSST</Name>
				<Source><![CDATA[
    private RespWithholdingICMSST_BR getPersonResponsibleICMSST(
        RespWithholdingICMSST_BR _respWithholdingICMSST,
        FiscalDocumentIssuer_BR _fiscalDocumentIssuer)
    {
        RespWithholdingICMSST_BR personResponsibleICMSST;

        if (_respWithholdingICMSST == RespWithholdingICMSST_BR::Blank)
        {
            if (_fiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty)
            {
                personResponsibleICMSST = RespWithholdingICMSST_BR::Direct;
            }
            else
            {
                personResponsibleICMSST = RespWithholdingICMSST_BR::OwnDeclarant;
            }
        }
        else
        {
            personResponsibleICMSST = _respWithholdingICMSST;
        }

        return personResponsibleICMSST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFCPRate</Name>
				<Source><![CDATA[
    private TaxValue getFCPRate(ItemId _itemId)
    {
        TaxPovertyFundSetupHeading_BR taxPovertyFundSetupHeading;
        TaxPovertyFundSetupData_BR taxPovertyFundSetupData;

        select firstonly TaxPercentage from taxPovertyFundSetupData
            where taxPovertyFundSetupData.ItemRelation == _itemId
        exists join taxPovertyFundSetupHeading
            where taxPovertyFundSetupHeading.RecId == taxPovertyFundSetupData.TaxPovertyFundSetupHeading_BR
                && taxPovertyFundSetupHeading.StateId == FiscalBooksConstants_BR::StatePR;

        TaxValue fcpRate = taxPovertyFundSetupData.TaxPercentage;

        if (!fcpRate)
        {
            FiscalDocument_BR fiscalDocument;
            select firstonly TaxPercentage from taxPovertyFundSetupData
                where taxPovertyFundSetupData.TaxPercentage
            exists join fiscalDocument
                where fiscalDocument.FiscalDocumentAccountNum == taxPovertyFundSetupData.AccountRelation
            exists join adcrCollectedDataTmp
                where adcrCollectedDataTmp.FiscalDocument_BR == fiscalDocument.RecId
                    && adcrCollectedDataTmp.ItemId == _itemId
            exists join taxPovertyFundSetupHeading
                where taxPovertyFundSetupHeading.RecId == taxPovertyFundSetupData.TaxPovertyFundSetupHeading_BR
                    && taxPovertyFundSetupHeading.StateId == FiscalBooksConstants_BR::StatePR;

                fcpRate = taxPovertyFundSetupData.TaxPercentage;
        }

        return fcpRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupValue</Name>
				<Source><![CDATA[
    private TaxValue getMarkupValue(ItemId _itemId)
    {
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;
        FiscalDocumentLine_BR fiscalDocumentLine;

        select avg(TaxSubstitutionMarkupPct) from fiscalDocumentTaxTrans
            where (fiscalDocumentTaxTrans.Type == TaxType_BR::ICMS
                    || fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSST)
                && (fiscalDocumentTaxTrans.TaxationCode ==FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTrans.TaxationCode ==FiscalBooksConstants_BR::TaxationCode500)
        exists join fiscalDocumentLine
            where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
        exists join adcrCollectedDataTmp
            where adcrCollectedDataTmp.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                && adcrCollectedDataTmp.ItemId == _itemId;

        return fiscalDocumentTaxTrans.TaxSubstitutionMarkupPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndicatorFCP</Name>
				<Source><![CDATA[
    private boolean getIndicatorFCP(ItemId _itemId)
    {
        FiscalDocumentTaxTransPovertyFund_BR fdTaxTransPovertyFund;
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;

        select firstonly RecId from fdTaxTransPovertyFund
            where fdTaxTransPovertyFund.TaxPovertyFundAmount != 0
        exists join fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.RecId == fdTaxTransPovertyFund.FiscalDocumentTaxTrans_BR
                && (fiscalDocumentTaxTrans.Type == TaxType_BR::ICMS
                    || fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSST)
                && (fiscalDocumentTaxTrans.TaxationCode ==FiscalBooksConstants_BR::TaxationCode60
                    || fiscalDocumentTaxTrans.TaxationCode ==FiscalBooksConstants_BR::TaxationCode500)
        exists join adcrCollectedDataTmp
            where adcrCollectedDataTmp.FiscalDocumentLine_BR == fiscalDocumentTaxTrans.FiscalDocumentLine
                && adcrCollectedDataTmp.ItemId == _itemId;

        return fdTaxTransPovertyFund.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCNPJIssuer</Name>
				<Source><![CDATA[
    private CNPJCPFNum_BR getCNPJIssuer(FiscalDocument_BR _fiscalDocument)
    {
        return _fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty
            ? _fiscalDocument.ThirdPartyCNPJCPF
            : _fiscalDocument.FiscalEstablishmentCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateIssuer</Name>
				<Source><![CDATA[
    private LogisticsAddressStateId getStateIssuer(FiscalDocument_BR _fiscalDocument)
    {
        LogisticsPostalAddressRecId refRecId = _fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty
            ? _fiscalDocument.ThirdPartyPostalAddress
            : _fiscalDocument.FiscalEstablishmentPostalAddress;

        return LogisticsPostalAddress::findRecId(refRecId).State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCNPJReceiver</Name>
				<Source><![CDATA[
    private CNPJCPFNum_BR getCNPJReceiver(FiscalDocument_BR _fiscalDocument)
    {
        return _fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty
            ? _fiscalDocument.FiscalEstablishmentCNPJCPF
            : _fiscalDocument.ThirdPartyCNPJCPF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateReceiver</Name>
				<Source><![CDATA[
    private CNPJCPFNum_BR getStateReceiver(FiscalDocument_BR _fiscalDocument)
    {
        LogisticsPostalAddressRecId refRecId = _fiscalDocument.FiscalDocumentIssuer == FiscalDocumentIssuer_BR::ThirdParty
            ? _fiscalDocument.FiscalEstablishmentPostalAddress
            : _fiscalDocument.ThirdPartyPostalAddress;

        return LogisticsPostalAddress::findRecId(refRecId).State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumByKey</Name>
				<Source><![CDATA[
    private real getSumByKey(str _keyValue)
    {
        real value;
        for (int idx = 1; idx <= collectionR9000.numOfTrans(); idx++)
        {
            if (_keyValue == collectionR9000.index2Key(idx))
            {
                value = collectionR9000.index2Data(idx);
                break;
            }
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountIncoming</Name>
				<Source><![CDATA[
    private Amount getTaxAmountIncoming(ItemId _itemId)
    {
        select sum(TaxAmount_ICMSST) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && !adcrCollectedDataTmp.IsReturn;
        TaxAmount taxAmountTotal = adcrCollectedDataTmp.TaxAmount_ICMSST;

        select sum(TaxAmount_ICMSST) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && adcrCollectedDataTmp.IsReturn;
        taxAmountTotal -= adcrCollectedDataTmp.TaxAmount_ICMSST;

        return taxAmountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountIPerItemIncoming</Name>
				<Source><![CDATA[
    private Amount getTaxAmountIPerItemIncoming(ItemId _itemId)
    {
        Qty qtyTotal = this.getTotalQuantityOfIncoming(_itemId);
        TaxAmount taxAmountTotal = this.getTaxAmountIncoming(_itemId);

        return qtyTotal ? taxAmountTotal / qtyTotal : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmountIPerItemIncoming</Name>
				<Source><![CDATA[
    private Amount getTaxBaseAmountIPerItemIncoming(ItemId _itemId)
    {
        select sum(TaxBaseAmount_ICMSST) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && !adcrCollectedDataTmp.IsReturn;
        TaxAmount taxBaseAmountTotal = adcrCollectedDataTmp.TaxBaseAmount_ICMSST;

        select sum(TaxBaseAmount_ICMSST) from adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == _itemId
                && adcrCollectedDataTmp.IsIncoming
                && adcrCollectedDataTmp.IsReturn;
        taxBaseAmountTotal -= adcrCollectedDataTmp.TaxBaseAmount_ICMSST;

        Qty qtyTotal = this.getTotalQuantityOfIncoming(_itemId);

        return qtyTotal ? taxBaseAmountTotal / qtyTotal : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageOfReduction</Name>
				<Source><![CDATA[
    private TaxValue getPercentageOfReduction(TaxValue _taxValue)
    {
        TaxValue percentageOfReduction;

        switch (_taxValue)
        {
            case 18:
                percentageOfReduction = 70;
                break;

            case 12:
                percentageOfReduction = 50;
                break;

            default:
                percentageOfReduction = 0;
        }

        return percentageOfReduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRestitutionTypeStr</Name>
				<Source><![CDATA[
    private str getRestitutionTypeStr(FBSpedRestitutionTypes_BR _restitutionTypes)
    {
        str strType = '';

        switch(_restitutionTypes)
        {
            case FBSpedRestitutionTypes_BR::TaxAdjustment:
                strType = '0';
                break;

            case FBSpedRestitutionTypes_BR::VendorReimbursement:
                strType = '1';
                break;
        }

        return strType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCollectInTaxAssessment</Name>
				<Source><![CDATA[
    private boolean isCollectInTaxAssessment()
    {
        boolean ret = false;

        FBInventBalance_BR fbInventBalance;
        while select ItemId from fbInventBalance
            group by fbInventBalance.ItemId
            where fbInventBalance.BookingPeriod == fbBookingPeriod.RecId
        exists join adcrCollectedDataTmp
            where adcrCollectedDataTmp.ItemId == fbInventBalance.ItemId
        {
            select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
                where adcrCollectedDataTmp.ItemId == fbInventBalance.ItemId
                    && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                    && !adcrCollectedDataTmp.IsReturn;
            Qty qtyTotal = adcrCollectedDataTmp.Quantity;
            TaxAmount taxAmountTotal = adcrCollectedDataTmp.TaxAmount_ICMS;

            select sum(Quantity), sum(TaxAmount_ICMS) from adcrCollectedDataTmp
                where adcrCollectedDataTmp.ItemId == fbInventBalance.ItemId
                    && adcrCollectedDataTmp.IsOutgoingFinalConsumer
                    && adcrCollectedDataTmp.IsReturn;
            qtyTotal -= adcrCollectedDataTmp.Quantity;
            taxAmountTotal -= adcrCollectedDataTmp.TaxAmount_ICMS;

            Amount diffTaxAmounts = (qtyTotal * this.getTaxAmountIPerItemIncoming(fbInventBalance.ItemId)) - taxAmountTotal;
            if (diffTaxAmounts < 0)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundOutgoingFinalConsumer</Name>
				<Source><![CDATA[
    private boolean foundOutgoingFinalConsumer(ItemId _itemId = '')
    {
        select firstonly RecId from adcrCollectedDataTmp
            where adcrCollectedDataTmp.IsOutgoingFinalConsumer
                && (!_itemId || adcrCollectedDataTmp.ItemId == _itemId);

        return adcrCollectedDataTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundOutgoingOtherState</Name>
				<Source><![CDATA[
    private boolean foundOutgoingOtherState(ItemId _itemId = '')
    {
        select firstonly RecId from adcrCollectedDataTmp
            where adcrCollectedDataTmp.IsOutgoingOtherState
                && (!_itemId || adcrCollectedDataTmp.ItemId == _itemId);

        return adcrCollectedDataTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundOutgoingSimpleNational</Name>
				<Source><![CDATA[
    private boolean foundOutgoingSimpleNational(ItemId _itemId = '')
    {
        select firstonly RecId from adcrCollectedDataTmp
            where adcrCollectedDataTmp.IsOutgoingSimpleNational
                && (!_itemId || adcrCollectedDataTmp.ItemId == _itemId);

        return adcrCollectedDataTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FBSpedADCRFileContract_BR _contract, FBFile_BR _file)
    {
        fbBookingPeriod = _contract.parmBookingPeriod();
        fbFile = _file;

        parameters = FBSpedADCRSetupParameters_BR::findByFiscalEstablishmentId(
            fbBookingPeriod.FiscalEstablishmentId,
            fbBookingPeriod.FiscalEstablishmentDataArea);

        spedFile = new FBSpedFile_ADCR_BR();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>FBSpedFileCreator_ADCR_BR</c>.
    /// </summary>
    /// <param name = "_contract">An instance of <c>FBSpedADCRFileContract_BR</c> class representing
    /// the contract to be used to generate the sped ADCR file.</param>
    /// <param name = "_fbFile">An instance of <c>FBFile_BR</c> representing the disk file where the data should be written to.</param>
    /// <returns>The new instance of <c>FBSpedFileCreator_ADCR_BR</c>.</returns>
    public static FBSpedFileCreator_ADCR_BR construct(FBSpedADCRFileContract_BR _contract, FBFile_BR _fbFile)
    {
        return new FBSpedFileCreator_ADCR_BR(_contract, _fbFile);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>