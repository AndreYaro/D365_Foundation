<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
///    The <c>VendVendorRequestManager</c> class manages new Vendor requests.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class  VendVendorRequestManager
{ 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a new request ID based on the vendor request number sequence.
    /// </summary>
    /// <returns>
    ///    The new request ID.
    /// </returns>
    public VendRequestNumber newRequestId()
    {
        var numSeq = VendRequestManagementParameters::numRefVendRequestNumber();
        if (!numSeq.numberSequenceTable().NumberSequence)
        {
            throw error("@SCM:VendorRequestNumberSequenceError");
        }

        return NumberSeq::newGetNum(numSeq, true, true).num();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages submitting <c>VendVendorRequest</c> record to workflow.
    /// </summary>
    /// <param name = "_newVendor">
    ///    The <c>>VendVendorRequest</c>> record.
    /// </param>
    public abstract void submitToWorkFlow(VendVendorRequest _vendorRequest){}

]]></Source>
			</Method>
			<Method>
				<Name>approveRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages approving <c>VendVendorRequest</c> record.
    /// </summary>
    /// <param name = "_newVendor">
    ///    The <c>>VendVendorRequest</c>> record.
    /// </param>
    public abstract void approveRequest(VendVendorRequest _vendorRequest){}

]]></Source>
			</Method>
			<Method>
				<Name>rejectRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages rejecting <c>VendVendorRequest</c> record to workflow.
    /// </summary>
    /// <param name = "_newVendor">
    ///    The <c>>VendVendorRequest</c>> record.
    /// </param>
    public abstract void rejectRequest(VendVendorRequest _vendorRequest){}

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailToEmployeeRequestor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages sending e-mail to the employee the vendor request was sponsored by.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequest</c> record.
    /// </param>
    public abstract void sendEmailToEmployeeRequestor(VendVendorRequest _vendRequest){}

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitRequestToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the vendor request can be submitted to the workflow.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequest</c> record.
    /// </param>
    /// <param name="_workflowType">
    ///   The name of the workflow template.
    /// </param>
    /// <returns>
    ///    true if the vendor request can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitRequestToWorkflow(VendVendorRequest _vendRequest, str _workflowType = '')
    {
        return _vendRequest.RequestStatus == VendVendorRequestStatus::Draft || _vendRequest.RequestStatus == VendVendorRequestStatus::WorkflowCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the delete button should be enabled for the vendor request.
    /// </summary>
    /// <param name="_vendRequest">
    ///   A <c>VendVendorRequest</c> record to validate that delete is allowed for.
    /// </param>
    /// <returns>
    ///    true if the delete button should be enabled; otherwise, false.
    /// </returns>
    public boolean allowDelete(VendVendorRequest _vendRequest)
    {
        // Allow deleting requests that are not in an active workflow
        return _vendRequest.RequestStatus == VendVendorRequestStatus::Draft
            || _vendRequest.RequestStatus == VendVendorRequestStatus::WorkflowCanceled
            || _vendRequest.RequestStatus == VendVendorRequestStatus::Approved
            || _vendRequest.RequestStatus == VendVendorRequestStatus::Rejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the vendor request can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the vendor request can be deleted by the user; otherwise, false.
    /// </returns>
    public boolean validateDelete(VendVendorRequest _vendRequest)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRejectRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the vendor request can be rejected.
    /// </summary>
    /// <param name="_vendorRequest">
    ///    The <c>VendVendorRequest</c> record.
    /// </param>
    /// <returns>
    ///    true if the vendor request can be rejected; otherwise, false.
    /// </returns>
    public boolean canRejectRequest(VendVendorRequest _vendorRequest)
    {
        return true; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCompleteRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the vendor request can be completed.
    /// </summary>
    /// <param name="_vendorRequest">
    ///    The <c>VendVendorRequest</c> record.
    /// </param>
    /// <returns>
    ///    true if the vendor request can be completed; otherwise, false.
    /// </returns>
    public boolean canCompleteRequest(VendVendorRequest _vendorRequest)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>VendVendorRequestManager</c> class.
    /// </summary>
    /// <param name = "_entityType">
    ///   The <c>VendVendorRequestEntityType</c> data type which links the child classes to this one.
    /// </param>
    /// <returns>
    ///   An instance of the <c>VendVendorRequestManager</c> class.
    /// </returns>
    public static VendVendorRequestManager construct(VendVendorRequestEntityType _entityType)
    {       
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(enumstr(VendVendorRequestEntityType), enum2Symbol(enumNum(VendVendorRequestEntityType), enum2int(_entityType)));
        VendVendorRequestManager vendorRequestManager = SysPluginFactory::Instance(identifierstr(Dynamics.AX.Application), classstr(VendVendorRequestManager), metadataCollection);

        if (!vendorRequestManager)
        {
            throw error(strfmt("@SYS19384", classstr(VendVendorRequestManager)));
        }

        return vendorRequestManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorRequestWorkflowElementEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the <c>VendVendorRequest</c> record from workflow element event.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The parameter that is used to get the workflow context of the workflow item that fired the workflow event.
    /// </param>
    /// <returns>
    ///   The <c>VendVendorRequest</c> record.
    /// </returns>
    public static VendVendorRequest getVendorRequestWorkflowElementEvent(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequest::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId())  as VendVendorRequest;

        if (!vendorRequest)
        {
            throw error(Error::missingRecord(tableStr(VendVendorRequest)));
        }

        return vendorRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorRequestFromWorkflowEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the <c>VendVendorRequest</c> record from workflow event.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    The parameter that is used to get the workflow context that fired the workflow event.
    /// </param>
    /// <returns>
    ///   The <c>VendVendorRequest</c> record.
    /// </returns>
    public static VendVendorRequest getVendorRequestFromWorkflowEvent(WorkflowEventArgs _workflowEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequest::find(_workflowEventArgs.parmWorkflowContext().parmRecId())  as VendVendorRequest;

        if (!vendorRequest)
        {
            throw error(Error::missingRecord(tableStr(VendVendorRequest)));
        }

        return vendorRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the approval form for the vendor request as a string.
    /// </summary>
    /// <returns>
    ///    The approval form menu item.
    /// </returns>
    public abstract menuItemNameDisplay approvalMenuItem() {}

]]></Source>
			</Method>
			<Method>
				<Name>originalRequestMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the menu item of the original request associated with the vendor request.
    /// </summary>
    /// <returns>
    ///    The original request menu item.
    /// </returns>
    public abstract menuItemNameDisplay originalRequestMenuItem() {}

]]></Source>
			</Method>
			<Method>
				<Name>originalRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the original request associated with a vendor request.
    /// </summary>
    /// <param name="_vendorRequest">
    ///    The <c>VendVendorRequest</c> record.
    /// </param>
    /// <returns>
    ///    The original registration request submitted by the vendor. 
    ///    This method should return null if this vendor request was not
    ///    created based of a vendor registration request.
    /// </returns>
    public abstract anytype originalRequest(VendVendorRequest _vendorRequest) {}

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a table ID that is related to the <c>VendVendorRequestManager</c> object.
    /// </summary>
    /// <returns>
    ///    The table ID that inherits from the <c>VendVendorRequest</c> table.
    /// </returns>
    public abstract tableId tableId() {}

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToWorkflowSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of a vendor request to workflow submitted.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToWorkflowSubmitted(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToWorkflowSubmitted();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToPendingApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of a vendor request to pending approval.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToPendingApproval(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToPendingApproval();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToChangeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of a vendor request to change requested.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToChangeRequested(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToChangeRequested();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToRejected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of a vendor request to rejected.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToRejected(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToRejected();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates status of a vendor request to approved.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToApproved(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToApproved();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToReviewTaskPending</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of the vendor request to review task pending.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToReviewTaskPending(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToReviewTaskPending();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToReviewTaskCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of the vendor request to review task completed.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToReviewTaskCompleted(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToReviewTaskCompleted();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestStateToWorkflowCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates status of the vendor request to review task workflow canceled.
    /// </summary>
    /// <param name="_vendRequest">
    ///    The <c>VendVendorRequestRecId</c> of the <c>VendVendorRequest</c> record.
    /// </param>
    public void updateRequestStateToWorkflowCanceled(VendVendorRequestRecId _vendRequest)
    {
        ttsbegin;
        VendVendorRequest vendRequest = VendVendorRequest::find(_vendRequest, true);
        vendRequest.setRequestStateToWorkflowCanceled();
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>