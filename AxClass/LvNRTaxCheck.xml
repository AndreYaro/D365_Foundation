<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvNRTaxCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LvNRTaxCheck extends RunBaseBatch implements BatchRetryable
{
    Set errors;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00016, funcName());

        LvNRTaxTrans   lvNRTaxTrans;
        boolean        result   = true;
        boolean        found    = false;

        errors = new Set(Types::String);

        while select lvNRTaxTrans
        {
            found = true;
            result = this.validateTrans(lvNRTaxTrans) && result;
        }

        if (! found)
        {
            warning("@GLS113441");
        }
        else if (result)
        {
            info("@SYS4080940");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showError</Name>
				<Source><![CDATA[
    private void showError(str _text)
    {
        if (errors.add(_text))
        {
            warning(_text);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventTransTypeToModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the correct <c>ModuleInventPurchSales</c> enum value based on the <c>InventTransType</c> value.
    /// </summary>
    /// <param name = "_inventTransType">Inventory transaction type</param>
    /// <returns><c>ModuleInventPurchSales</c> value corresponding to the inventory transaction type</returns>
    protected ModuleInventPurchSales convertInventTransTypeToModuleType(InventTransType _inventTransType)
    {
        return _inventTransType == InventTransType::Sales ? ModuleInventPurchSales::Sales : ModuleInventPurchSales::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
    private boolean validateTrans(LvNRTaxTrans taxTrans)
    {
        boolean                     allOk = true;
        boolean                     ok;
        TaxTable                    salesTaxCode;
        LvNRTaxOnItem               nrTaxOnItems;
        InventPackagingUnit         inventPackagingUnit;
        InventPackagingUnitMaterial inventPackagingUnitMaterial;
        InventPackingUnitWeight     packingUnitWeight;
        str                         strError;

        //Check tax group.
        if (taxTrans.SalesTaxGroup && taxTrans.nrTaxGroup)
        {
            while select nrTaxOnItems
                where nrTaxOnItems.TaxGroup == taxTrans.nrTaxGroup
            {
                if (TaxGroupData::exist(taxTrans.SalesTaxGroup, nrTaxOnItems.TaxCode))
                {
                    ok = true;
                    break;
                }
            }
            if (! ok)
            {
                strError = strfmt("@GLS113444", taxTrans.nrTaxGroup, taxTrans.SalesTaxGroup);
                this.showError(strError);
                allOk = false;
            }
        }

        //Check unit
        salesTaxCode = TaxTable::find(taxTrans.TaxCode);
        if (salesTaxCode.TaxBase == TaxBaseType::AmountByUnit)
        {
            ModuleInventPurchSales moduleType = this.convertInventTransTypeToModuleType(taxTrans.InventTransType);
            UnitOfMeasureSymbol unit = InventTableModule::find(taxTrans.ItemId, moduleType).UnitId;
            if (unit != salesTaxCode.TaxUnit && (!UnitOfMeasureConverter::canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(unit),
                                                                                         UnitOfMeasure::unitOfMeasureIdBySymbol(salesTaxCode.TaxUnit),
                                                                                         0) 
                                                 && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(taxTrans.ItemId,
                                                                                                                                  taxTrans.InventDimId,
                                                                                                                                  unit,
                                                                                                                                  salesTaxCode.TaxUnit)))
            {
                strError = strfmt("@SYS92102", unit, salesTaxCode.TaxUnit);
                this.showError(strError);
                allOk = false;
            }
        }

        //Check packing material
        if (taxTrans.TransType == LvNRTransType::TaxOnPackingMaterials)
        {
            inventPackagingUnit = InventPackagingUnit::findFirstUnit(taxTrans.ItemId, InventDim::find(taxTrans.InventDimId), taxTrans.PackingUnit);
            inventPackagingUnitMaterial = InventPackagingUnitMaterial::find(inventPackagingUnit.RecId, taxTrans.PackingMaterialCode);
            packingUnitWeight = inventPackagingUnitMaterial.PackingUnitWeight;

            if (! inventPackagingUnitMaterial)
            {
                 strError = strfmt("@GLS113438", taxTrans.ItemId, inventPackagingUnit.Unit);
                 this.showError(strError);
                 allOk = false;
            }
            else if (! packingUnitWeight)
            {
                 strError = strfmt("@GLS113439", taxTrans.ItemId, inventPackagingUnit.Unit, taxTrans.PackingMaterialCode);
                 this.showError(strError);
                 allOk = false;
            }
            else
            {
                if (! InventPackagingMaterialFee::findForDate(taxTrans.PackingMaterialCode, taxTrans.TransDate))
                {
                    strError = strfmt("@GLS113440", taxTrans.ItemId, inventPackagingUnit.Unit, taxTrans.PackingMaterialCode);
                    this.showError(strError);
                    allOk = false;
                }
            }
        }
        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static LvNRTaxCheck construct()
    {
        return new LvNRTaxCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LvNRTaxCheck action = LvNRTaxCheck::construct();
        action.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>