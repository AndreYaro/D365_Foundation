<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseDetailFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>CaseDetailForm</c> class.
/// </summary>
class CaseDetailFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CaseDetailForm_onCreatingCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates responsibilities and updates the status log after a case has been created.
    /// </summary>
    /// <param name="_caseDetailBase">An instance of the <c>CaseDetailBase</c> table.</param>
    /// <param name="_caseDetailForm">An instance of the <c>CaseDetailForm</c> class.</param>
    /// <param name="_caseDetail">An instance of the <c>CaseDetail</c> table.</param>
    [SubscribesTo(classStr(CaseDetailForm), staticDelegateStr(CaseDetailForm, onCreatingCase))]
    public static void CaseDetailForm_onCreatingCase(CaseDetailBase _caseDetailBase, CaseDetailForm _caseDetailForm, CaseDetail _caseDetail)
    {
        CaseDetailFormEventHandler::copyResponsibilities(_caseDetailBase);

        if (_caseDetailBase is CaseDetail)
        {
            _caseDetail = CaseDetail::findRec(_caseDetailBase.RecId, true);

            if ((_caseDetail.Status == CaseStatus::Planned || _caseDetail.Status == CaseStatus::InProcess)
                && _caseDetail.ServiceLevelAgreementId
                && _caseDetail.ServiceLevelAgreementStatus != SMALogStatus::Open)
            {
                SMAServiceLevelAgreementLogEngineCommon logEngine = SMAServiceLevelAgreementLogEngineCommon::construct(SMALogStatus::Open, _caseDetail);
                logEngine.updateSLALog();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyResponsibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy all responsibilities related to the entity.
    /// </summary>
    /// <param name = "_caseDetail">An instance of the <c>CaseDetail</c> table.</param>
    public static void copyResponsibilities(CaseDetailBase _caseDetail)
    {
        smmResponsibilitiesEmplTable    smmResponsibilitiesEmplTable, smmResponsibilitiesEmplTableCopy;
        CaseCategoryHierarchyDetail     categoryDetail;
        RefRecId                        caseRecId = _caseDetail.RecId;
        RefTableId                      caseTableId = _caseDetail.TableId;

        categoryDetail = CaseCategoryHierarchyDetail::find(_caseDetail.CategoryRecId);

        insert_recordset smmResponsibilitiesEmplTableCopy (Worker, ResponsibilityId , RefTableId, RefRecId)
            select Worker, ResponsibilityId, caseTableId, caseRecId from smmResponsibilitiesEmplTable
                where smmResponsibilitiesEmplTable.RefTableId == categoryDetail.TableId &&
                      smmResponsibilitiesEmplTable.RefRecId == categoryDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailForm_initDataSourceOnEnumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CaseDetail</c> form data source.
    /// </summary>
    /// <param name = "_caseDetailForm">An instance of the <c>CaseDetailForm</c> class.</param>
    /// <param name = "_caseDetail_ds">An instance of the <c>CaseDetail</c> form data source.</param>
    /// <param name = "_args">An instance of the <c>Args</c> class.</param>
    [SubscribesTo(classStr(CaseDetailForm), delegateStr(CaseDetailForm, initDataSourceOnEnumType))]
    public static void CaseDetailForm_initDataSourceOnEnumType(CaseDetailForm _caseDetailForm, FormDataSource _caseDetail_ds, Args _args)
    {
        if (_args.parmEnum() == CaseListFilter::EngineeringChangeCases)
        {
            Common callerRecord = _args.record();
            _caseDetailForm.parmCallerRecord(callerRecord);

            QueryBuildDataSource qbds = _caseDetail_ds.query().dataSourceTable(tableNum(CaseDetailBase));
            InventTable inventTable;
            boolean allowCrossCompany;

            if (callerRecord && callerRecord.TableId == tableNum(InventTable))
            {
                // The caller is the Released product list page or Released product details form
                inventTable  = callerRecord as InventTable;
                allowCrossCompany = true;
                _caseDetail_ds.query().allowCrossCompany(allowCrossCompany);
                CaseDetailFormEventHandler::addCaseRangeBasedOnAssociation(qbds, EcoResProduct::find(inventTable.Product).RecId, CaseEntityType::Product);
                CaseDetailFormEventHandler::addCaseRangeBasedOnAssociation(qbds, inventTable.RecId, CaseEntityType::Item);
            }
            else if (callerRecord && callerRecord.TableId == tableNum(EcoResProduct))
            {
                // The caller is the product/product master list page or product details form
                allowCrossCompany = true;
                _caseDetail_ds.query().allowCrossCompany(allowCrossCompany);
                EcoResProduct ecoResProduct = callerRecord;

                // filtering by product
                CaseDetailFormEventHandler::addCaseRangeBasedOnAssociation(qbds, ecoResProduct.RecId, CaseEntityType::Product);

                CompanyInfo companyInfo;

                // filtering by products released products
                while select DataArea from companyInfo
                {
                    inventTable = inventTable::findByProductInCompany(ecoResProduct.RecId, companyInfo.DataArea);
                    if (inventTable)
                    {
                        CaseDetailFormEventHandler::addCaseRangeBasedOnAssociation(qbds, inventTable.RecId, CaseEntityType::Item);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailForm_updateCategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the category type on the <c>CaseDetailForm</c> class instance.
    /// </summary>
    /// <param name = "_caseDetailForm">An instance of the <c>CaseDetailForm</c> class.</param>
    /// <param name = "_tableId">The <c>TableId</c> of a <c>Common</c> buffer.</param>
    [SubscribesTo(classStr(CaseDetailForm), delegateStr(CaseDetailForm, updateCategoryType))]
    public static void CaseDetailForm_updateCategoryType(CaseDetailForm _caseDetailForm, int _tableId)
    {
        if (_tableId == tableNum(CustCollectionsCaseDetail))
        {
            _caseDetailForm.parmCategoryType(CaseCategoryType::Collections);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCaseRangeBasedOnAssociation</Name>
				<Source><![CDATA[
    private static void addCaseRangeBasedOnAssociation(QueryBuildDataSource _qbdsCase, RefRecId _associatedRecId, CaseEntityType _caseEntityType)
    {
        QueryBuildRange     caseRange;
        CaseAssociation     caseAssociation;
        boolean             rangeCreated = false;

        caseRange = SysQuery::findOrCreateRange(_qbdsCase, fieldNum(CaseDetailBase, RecId));

        // An associated record can have multiple cases.
        while select CaseRecId from caseAssociation
            where caseAssociation.RefRecId      == _associatedRecId
               && caseAssociation.EntityType    == _caseEntityType
        {
            caseRange = _qbdsCase.addRange(fieldNum(CaseDetailBase, RecId));
            caseRange.value(queryValue(caseAssociation.CaseRecId));
            rangeCreated = true;
        }

        if (!rangeCreated) //If there are no associated case records
        {
            _qbdsCase.addRange(fieldNum(CaseDetailBase, RecId)).value(SysQuery::valueEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailForm_checkForCreateCaseAssociationProcessAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>CreateCaseAssociation</c> method should conditionally terminated.
    /// </summary>
    /// <param name="_args">An instance of the <c>CaseDetailFormEventArgs</c> class.</param>
    [SubscribesTo(classStr(CaseDetailForm), staticDelegateStr(CaseDetailForm, checkForCreateCaseAssociationProcessAbort))]
    public static void CaseDetailForm_checkForCreateCaseAssociationProcessAbort(CaseDetailFormEventArgs _caseDetailFormEventArgs)
    {
        boolean isNewCase = _caseDetailFormEventArgs.parmIsNewCase();
        CaseDetailBase caseDetailBase = _caseDetailFormEventArgs.parmCaseDetailBase();
        List records = _caseDetailFormEventArgs.parmRecords();

        // check if any product association already exists for the case.
        if (!isNewCase
                && caseDetailBase.caseCategory().CategoryType == CaseCategoryType::EngineeringChange
                && caseDetailForm::engChgCaseAssociationCheck(records, caseDetailBase.RecId))
        {
            // Some of the selected products are already associated with the case.
            // The additional selections will be associated with the case. Do you want to continue?
            if (Box::yesNo("@SYS4009244", DialogButton::Yes) == DialogButton::No)
            {
                _caseDetailFormEventArgs.parmBreakStatementExecution(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailForm_updateArgsFromCategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Args</c> based upon the value of the <c>CaseCategoryType</c>.
    /// </summary>
    /// <param name="_categoryType">A <c>CaseCategoryType</c> value.</param>
    /// <param name="_args">An instace of the <c>Args</c> class.</param>
    [SubscribesTo(classStr(CaseDetailForm), staticDelegateStr(CaseDetailForm, updateArgsFromCategoryType))]
    public static void CaseDetailForm_updateArgsFromCategoryType(CaseCategoryType _categoryType, Args _args)
    {
        if (_categoryType == CaseCategoryType::Audit
                || _categoryType == CaseCategoryType::EngineeringChange
                )
        {
            // If _categoryType is EngineeringChange then General case category is NOT shown as part if the category tree control
            _args.parm('true');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseDetailForm_updateCaseDetailQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>CaseDetail_ds</c> query via the <c>CaseDetailFormEventArgs</c>.
    /// </summary>
    /// <param name = "_eventArgs">An instance of the <c>CaseDetailFormEventArgs</c> class.</param>
    [SubscribesTo(classStr(CaseDetailForm), delegateStr(CaseDetailForm, updateCaseDetailQuery))]
    public static void CaseDetailForm_updateCaseDetailQuery(CaseDetailFormEventArgs _eventArgs)
    {
        if (_eventArgs.parmCaseCategoryType() == CaseCategoryType::Audit)
        {
            if (_eventArgs.parmFormDataSource())
            {
                _eventArgs.parmFormDataSource().query().dataSourceTable(tableNum(CaseCategoryHierarchyDetail)).addRange(fieldNum(CaseCategoryHierarchyDetail, CategoryType)).value(enum2str(_eventArgs.parmCaseCategoryType()));
                _eventArgs.parmAddedRange(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>