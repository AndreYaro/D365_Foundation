<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostTransSale_AdjNeg</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostTransSale_AdjNeg extends ProjPostCostTransSale
{
    ProjCostTrans   projCostTransNew;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
        protected AmountCur adjustmentLedgerSalesAmount()
    {
        return this.parmAdjustmentLedgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is nonzero and the <c>parmEnterSalesAccrued</c> method returns
    /// true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        return  this.parmEnterSalesAccrued() && projTrans.transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjCostTrans _projCostTransNew, ProjCostTrans _projCostTransOrig, ProjCostTransSale _projCostTransSaleOrig)
    {
        projCostTransNew = _projCostTransNew;

        super(_projCostTransOrig, _projCostTransSaleOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjCostTransSale   locProjCostTransSale;

        TransDate getLedgerTransdate()
        {
            TransDate ret;

            if (ledgerVoucher)
            {
                ret = ledgerVoucher.lastTransDate();
            }

            return ret;
        }

        locProjCostTransSale.clear();
        locProjCostTransSale.TransId = projCostTransNew.TransId;
        if (this.parmAdjustment() && this.parmAdjustmentDate())
        {
            locProjCostTransSale.LedgerTransdate = this.parmAdjustmentDate();
        }
        else
        {
            locProjCostTransSale.LedgerTransdate = getLedgerTransdate();
        }

        locProjCostTransSale.SalesPrice     = projCostTransSale.SalesPrice;
        locProjCostTransSale.LineAmount     = projCostTransSale.LineAmount * -1;
        locProjCostTransSale.FundingSource  = projCostTransSale.FundingSource;
        locProjCostTransSale.DefaultDimension = projCostTransSale.DefaultDimension;
        locProjCostTransSale.TransStatus    = ProjTransStatus::Adjusted;

        if (! locProjCostTransSale.validateWrite())
        {
            throw error("@SYS21628");
        }

        locProjCostTransSale.insert();

        projTrans = ProjTrans::newProjCostTransSale(projCostTransNew, locProjCostTransSale);

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(locProjCostTransSale.TransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(locProjCostTransSale.TransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountMST</Name>
				<Source><![CDATA[
        protected AmountMST salesAmountMST()
    {
        return this.parmSalesAmountMST();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>