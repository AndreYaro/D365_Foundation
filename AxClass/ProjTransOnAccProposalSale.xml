<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransOnAccProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransOnAccProposalSale extends ProjTransOnAccProposal
{
    ProjProposalOnAccDetail projProposalOnAccDetail;
    ProjOnAccTransSale      projOnAccTransSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
        public DimensionDefault defaultDimension()
    {
        return projOnAccTransSale.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjProposalOnAcc _projProposalOnAcc, ProjProposalOnAccDetail _projProposalOnAccDetail, ProjOnAccTransSale _projOnAccTransSale)
    {
        projProposalOnAccDetail = _projProposalOnAccDetail;
        projOnAccTransSale = _projOnAccTransSale;

        super(_projProposalOnAcc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalOnAcc.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;

        if (invoiced)
        {
            select RecId from projInvoiceOnAcc
                 where projInvoiceOnAcc.ProjInvoiceId == ProjProposalJour::find(projProposalOnAcc.ProposalId).ProjInvoiceId
                    && projInvoiceOnAcc.TransId       == this.transId();

            select AmountMST from projInvoiceOnAccDetail
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId &&
                    projInvoiceOnAccDetail.SaleRefRecId == projProposalOnAccDetail.SaleRefRecId;

            if (projInvoiceOnAccDetail.AmountMST < 0)
            {
                if (this.salesPrice() < 0)
                {
                    return ProjOnAccTrans::find(this.transId()).Qty;
                }
                else
                {
                    return -ProjOnAccTrans::find(this.transId()).Qty;
                }
            }
            else
            {
                if (this.salesPrice() < 0)
                {
                    return -ProjOnAccTrans::find(this.transId()).Qty;
                }
                else
                {
                    return ProjOnAccTrans::find(this.transId()).Qty;
                }
            }
        }
        else
        {
            return ProjOnAccTrans::find(this.transId()).Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        return projProposalOnAccDetail.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
        public ProjTransStatus transStatus()
    {
        return projOnAccTransSale.TransStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>