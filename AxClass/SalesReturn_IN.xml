<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReturn_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the sales return order for India.
/// </summary>
class SalesReturn_IN
{
    SalesReturnInformation_IN salesReturnInformation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReturnableDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates return order details table if returntype is not None.
    /// </summary>
    /// <param name="_salesReturnType">
    /// The associated <c>SalesReturnType_IN</c> value.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The associated <c>CustInvoiceTrans</c> record.
    /// </param>
    /// <param name="_salesLine">
    /// The associated <c>SalesLine_IN</c> record.
    /// </param>
    public void createReturnableDetails(SalesReturnType_IN     _salesReturnType,
                                        CustInvoiceTrans       _custInvoiceTrans,
                                        SalesLine_IN           _salesLine)
    {
        SalesLineReturnDetails_IN           salesLineReturnDetails;
        SalesReturnCalculationDateType_IN   salesReturnCalculationDateType = SalesReturnCalculationDateType_IN::None;
        SalesReturnPeriodUnit_IN            salesReturnPeriodUnit = SalesReturnPeriodUnit_IN::None;
        SalesLine                           salesLineLoc;

        select firstonly RecId from salesLineLoc
            where salesLineLoc.RecId == _salesLine.SalesLine;

        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLineLoc);

        if (_salesReturnType != SalesReturnType_IN::None)
        {
            TaxInformation_IN taxInformationIN = TaxInformation_IN::find(transTaxInformation.TaxInformation);
            SalesReturnInformation_IN salesReturnInformationLoc = this.getReturnInformation(taxInformationIN);
            salesLineReturnDetails.Type = _salesReturnType;

            if (salesReturnInformationLoc.RecId != 0)
            {
                salesLineReturnDetails.BasisType = (str2enum(salesReturnCalculationDateType, enum2Value(salesReturnInformationLoc.BasisType)));
                if (_salesReturnType == SalesReturnType_IN::CustomerReturns)
                {
                    salesLineReturnDetails.Period     = salesReturnInformationLoc.Period;
                    salesLineReturnDetails.PeriodType =  (str2enum(salesReturnPeriodUnit , enum2Value(salesReturnInformationLoc.PeriodType)));
                }
                else
                {
                    salesLineReturnDetails.Period     = salesReturnInformationLoc.IncompletePeriod;
                    salesLineReturnDetails.PeriodType =  (str2enum(salesReturnPeriodUnit , enum2Value(salesReturnInformationLoc.IncompletePeriodType)));
                }
                if (salesReturnInformationLoc.BasisType ==  CustomerCalculationDateType_IN::InvoiceDate)
                {
                    salesLineReturnDetails.BasisDate = _custInvoiceTrans.InvoiceDate;
                }
                else if (salesReturnInformationLoc.BasisType ==  CustomerCalculationDateType_IN::DeliveryDate)
                {
                    SalesLine salesLineOrig = _custInvoiceTrans.salesLine();
                    salesLineReturnDetails.BasisDate = salesLineOrig.ReceiptDateConfirmed;
                }
            }
        }
        salesLineReturnDetails.CustInvoiceTrans = _custInvoiceTrans.RecId;
        salesLineReturnDetails.SalesLine_IN = _salesLine.RecId;
        salesLineReturnDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>SalesReturnInformation_IN</c>.
    /// </summary>
    /// <param name="_taxInformation">
    ///  The associated<c>TaxInformation_IN</c> info.
    /// </param>
    /// <returns>
    ///  <c>SalesReturnInformation_IN</c> table.
    /// </returns>
    public SalesReturnInformation_IN getReturnInformation(TaxInformation_IN _taxInformation)
    {
        return salesReturnInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks sales return rule is applicable or not for the specific <c>SalesLine</c>.
    /// </summary>
    /// <param name="_salesLine">
    /// The instance of the <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// Returns yes if sales return rule is applicable.
    /// </returns>
    public boolean isSalesReturn(SalesLine _salesLine)
    {
        NoYes                       isSalesReturn = NoYes::No;
        NoYes                       checkReturnOrder = NoYes::No;
        date                        returnableBasisDate;
        SalesLine                   salesLineOrig;

        SalesLine_IN salesLineIN = _salesLine.salesLine_IN();
        SalesLineReturnDetails_IN salesLineReturnDetails = SalesLineReturnDetails_IN::findbySalesLine(salesLineIN.RecId);

        if ( salesLineReturnDetails.RecId != 0
           && salesLineReturnDetails.Type!= SalesReturnType_IN::None
           && salesLineReturnDetails.BasisType  != SalesReturnCalculationDateType_IN::None
           && salesLineReturnDetails.PeriodType != SalesReturnPeriodUnit_IN::None)
        {
            select firstOnly RecId from salesLineOrig
                where salesLineOrig.InventTransId == _salesLine.InventTransIdReturn;

            if (_salesLine.InventTransIdReturn &&
                salesLineOrig.RecId != 0      &&
               (_salesLine.SalesType == SalesType::ReturnItem ||
               (_salesLine.SalesType == SalesType::Sales && _salesLine.LineAmount < 0)))
            {
                checkReturnOrder = NoYes::Yes;
            }

            if (!checkReturnOrder)
            {
                return checkReturnOrder;
            }
            else if (salesLineReturnDetails.Period && _salesLine.ReceiptDateConfirmed && salesLineReturnDetails.BasisDate)
            {
                switch (salesLineReturnDetails.PeriodType)
                {
                    case  SalesreturnPeriodUnit_IN::Day :
                        returnableBasisDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::newDateTime(salesLineReturnDetails.BasisDate, 0), salesLineReturnDetails.Period));
                        break;

                    case  SalesreturnPeriodUnit_IN::Month :
                        returnableBasisDate = DateTimeUtil::date(DateTimeUtil::addMonths(DateTimeUtil::newDateTime(salesLineReturnDetails.BasisDate, 0), salesLineReturnDetails.Period));
                        break;

                    case  SalesreturnPeriodUnit_IN::Year :
                        returnableBasisDate = DateTimeUtil::date(DateTimeUtil::addYears(DateTimeUtil::newDateTime(salesLineReturnDetails.BasisDate, 0), salesLineReturnDetails.Period));
                        break;

                    default :
                        break;
                }

                date orderReceiptDate = _salesLine.ReceiptDateConfirmed;

                if (orderReceiptDate > ReturnableBasisDate)
                {
                    isSalesReturn = NoYes::Yes;
                }
                else
                {
                    isSalesReturn = NoYes::No;
                }
            }
        }
        return isSalesReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialising the <c>SalesReturn_IN</c> class based on the tax type.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The Associated <c>TaxItemGroup</c>.
    /// </param>
    /// <returns>
    /// Instance of <c>SalesReturn_IN</c> class.
    /// </returns>
    static SalesReturn_IN construct(TaxItemGroup _taxItemGroup)
    {
        SalesReturn_IN salesReturn;

        if (SalesReturn_IN::existsTaxType(_taxItemGroup, TaxType_IN::VAT))
        {
            salesReturn  =  new SalesReturnVAT_IN();
        }
        else if (SalesReturn_IN::existsTaxType(_taxItemGroup, TaxType_IN::SalesTax))
        {
            salesReturn  =  new SalesReturnSalesTax_IN();
        }
        else
        {
            salesReturn  = new SalesReturn_IN();
        }
        return salesReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks atleast one taxCode, specific to particular tax type is existing or not in a <c>TaxItemGroup</c>.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The associated <c>TaxItemGroup</c> value.
    /// </param>
    /// <param name="_taxType">
    /// The associated <c>TaxType_IN</c> value.
    /// </param>
    /// <returns>
    /// Method returns true if atleast one taxCode, specific to particular tax type is existing in a TaxItemGroup
    /// </returns>
    public static boolean existsTaxType(TaxItemGroup _taxItemGroup, TaxType_IN _taxType)
    {
        TaxTable                    taxTable;
        TaxonItem                   taxonItem;

        select firstOnly RecId from taxonItem
            where taxonItem.TaxItemGroup    == _taxItemGroup
               exists join taxTable
            where taxTable.TaxCode     == taxonItem.TaxCode
                && taxTable.TaxType_IN == _taxType;

        return (taxonItem.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>