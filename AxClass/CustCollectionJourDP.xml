<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionJourDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SRSReportQueryAttribute(queryStr(CustCollectionLetterJour)),
    SRSReportParameterAttribute(classStr(CustCollectionJourContract))
]
public class CustCollectionJourDP extends SrsReportDataProviderPreProcess
{
    TmpTaxWorkTrans tmpTaxWorkTrans;
    CustCollectionJourTmp custCollectionJourTmp;
    CustFormletterParameters custFormletterParameters;
    CompanyInfo companyInfo;
    CustParameters custParameters;

    boolean inlineGIRO; // GIRO: Remove this when GIRO no longer prints as a separate report
    boolean formRemarks;
    boolean flag;
    boolean collecTrans;
    boolean isTaxAmountMSTVisible;
    boolean oneCollectionPerCustomer;
    boolean showFooter;
    boolean showFooterEuro;
    boolean payRef;
    boolean taxPrintTaxFreeBalance;

    str taxAmountLabel;
    str taxAmountMSTLabel;

    CurrencyCode currencyCode;
    TransDate dueDate;

    // Giro
    PaymentStubCollectionId giroType;
    PaymMoneyTransferSlip moneyTransferSlip;
    PaymMoneyTransferSlip_FI moneyTransferSlip_FI;
    PaymMoneyTransferSlip_BE moneyTransferSlip_BE;
    PaymMoneyTransferSlip_CH moneyTransferSlip_CH;
    InvoiceId invoiceId;

    // <GCN>
    boolean isTaxIntegrateEnable_CN;
    // </GCN>

    BillingClassification billingClassification;
    #ISOCountryRegionCodes
    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNo2_CH</Name>
				<Source><![CDATA[
    private str accountNo2_CH()
    {
        if (moneyTransferSlip_CH.ocr_AccountNo2())
        {
            return moneyTransferSlip_CH.ocr_AccountNo2() + '>';
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCheckId</Name>
				<Source><![CDATA[
    private str amountCheckId(CustCollectionLetterJour _custCollectionLetterJour)
    {
        return moneyTransferSlip.amountCheckId(_custCollectionLetterJour.sumAmountFeeInclTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDecimals_CH</Name>
				<Source><![CDATA[
    private str amountDecimals_CH(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (moneyTransferSlip_CH.checkCurrency() && _custCollectionLetterJour.sumAmountFeeInclTax() >= 0)
        {
            return moneyTransferSlip_CH.invoiceAmountPenny();
        }
        return 'xx';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNoDecimals_CH</Name>
				<Source><![CDATA[
    private str amountNoDecimals_CH(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (moneyTransferSlip_CH.checkCurrency() && _custCollectionLetterJour.sumAmountFeeInclTax() >= 0)
        {
            return moneyTransferSlip_CH.invoiceAmountMST();
        }
        return strRep('x', 8);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroupIdName_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name value of the <c>BankAccountTable</c> table.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    ///     A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <returns>
    ///     The name value of the <c>BankAccountTable</c> table.
    /// </returns>
    protected Description bankGroupIdName_CH(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (giroType == PaymentStub::ESR_red_bank)
        {
            return BankAccountTable::find(_custCollectionLetterJour.paymentBankAccountId()).Name;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankZipCode_CH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the bank postal addres zipcode and city value.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    ///     A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <returns>
    ///     A String that contains the bank postal addres zipcode and city value.
    /// </returns>
    protected str bankZipCode_CH(CustCollectionLetterJour _custCollectionLetterJour)
    {
        LogisticsPostalAddress address;

        if (giroType == PaymentStub::ESR_red_bank)
        {
            address = BankAccountTable::find(_custCollectionLetterJour.paymentBankAccountId()).postalAddress();
            return address.ZipCode + ' ' + address.City;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionAmountDecimals</Name>
				<Source><![CDATA[
    private str collectionAmountDecimals(CustCollectionLetterJour _custCollectionLetterJour)
    {
        str ret;
        AmountCur fees = _custCollectionLetterJour.sumAmountFeeInclTax();

        if (fees >= 0)
        {
            ret = System.String::Format("{0:00}", frac(abs(fees))*100);
        }
        else
        {
            ret = 'XX';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionAmountNoDecimals</Name>
				<Source><![CDATA[
    private str collectionAmountNoDecimals(CustCollectionLetterJour _custCollectionLetterJour)
    {
        AmountCur amount = _custCollectionLetterJour.sumAmountFeeInclTax();
        str ret;

        if (amount >= 0)
        {
            ret = System.String::Format("{0:#}", trunc(abs(amount)));
        }
        else
        {
            ret = 'XXXXXX';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionLetterTitle</Name>
				<Source><![CDATA[
    protected str collectionLetterTitle(CustCollectionLetterJour _custCollectionLetterJour)
    {
        LabelId labelId = literalStr("@SYS13960");

        if (!oneCollectionPerCustomer)
        {
            switch (_custCollectionLetterJour.CollectionLetterCode)
            {
                case CustCollectionLetterCode::CollectionLetter1:
                    labelId = literalStr("@SYS8660");
                    break;
                case CustCollectionLetterCode::CollectionLetter2:
                    labelId = literalStr("@SYS8658");
                    break;
                case CustCollectionLetterCode::CollectionLetter3:
                    labelId = literalStr("@SYS8659");
                    break;
                case CustCollectionLetterCode::CollectionLetter4:
                    labelId = literalStr("@SYS8661");
                    break;
                case CustCollectionLetterCode::Collection:
                    labelId = literalStr("@SYS11611");
                    break;
            }
        }

        return SysLabel::labelId2String(labelId, _custCollectionLetterJour.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeISO_CH</Name>
				<Source><![CDATA[
    private CurrencyCodeISO currencyCodeISO_CH()
    {
        if (moneyTransferSlip_CH.parmIsEUR())
        {
            return ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR);
        }
        else if (moneyTransferSlip_CH.parmIsCHF())
        {
            return ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::CHF);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodePaymId</Name>
				<Source><![CDATA[
    private PaymId encodePaymId(InvoiceId _invoiceId)
    {
        PaymId paymId = subStr(strKeep(_invoiceId, '0123456789'), 1, 10);
        int controlDigits = any2int(str2num(paymId)) mod 97;

        return strRep('0', 10 - strLen(paymId)) + paymId + (controlDigits < 10 ? '0' : '') + int2str(controlDigits);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiCreditorId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>fiCreditorID_DK</c> data type.
    /// </summary>
    /// <returns>
    ///    The <c>fiCreditorID_DK</c> data type.
    /// </returns>
    private str fiCreditorId()
    {
        CompanyInfoHelper::checkFICreditorIDEmpty(companyInfo.fiCreditorID_DK);
        return companyInfo.fiCreditorID_DK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustCollectionJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CustCollectionJourTmp</c> table data.
    /// </summary>
    /// <returns>
    ///    The <c>CustCollectionJourTmp</c> table data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustCollectionJourTmp))
    ]
    public CustCollectionJourTmp getCustCollectionJourTmp()
    {
        select custCollectionJourTmp;
        return custCollectionJourTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormTextTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>FormTextType</c> enumeration value given a <c>CustCollectionLetterCode</c> enumeration value.
    /// </summary>
    /// <param name = "_custCollectionLetterCode">The <c>CustCollectionLetterCode</c> enumeration value.</param>
    /// <param name = "_eventResult">An <c>EventHandlerResult</c> instance, where subscribers can provide default <c>FormTextType</c> enumeration value.</param>
    delegate void getFormTextTypeDelegate(CustCollectionLetterCode _custCollectionLetterCode, EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormTextType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FormTextType</c> enumeration value given a <c>CustCollectionLetterCode</c> enumeration value.
    /// </summary>
    /// <param name = "_custCollectionLetterCode">The <c>CustCollectionLetterCode</c> enumeration value.</param>
    /// <returns>The <c>FormTextType</c> enumeration value.</returns>
    protected FormTextType getFormTextType(CustCollectionLetterCode _custCollectionLetterCode)
    {
        switch (_custCollectionLetterCode)
        {
            case CustCollectionLetterCode::CollectionLetter1: return FormTextType::CustCollectionLetter1;
            case CustCollectionLetterCode::CollectionLetter2: return FormTextType::CustCollectionLetter2;
            case CustCollectionLetterCode::CollectionLetter3: return FormTextType::CustCollectionLetter3;
            case CustCollectionLetterCode::CollectionLetter4: return FormTextType::CustCollectionLetter4;
            case CustCollectionLetterCode::Collection: return FormTextType::CustCollectionLetter5;
            default :
                EventHandlerResult result = new EventHandlerResult();
                this.getFormTextTypeDelegate(_custCollectionLetterCode, result);
                if (result.hasResult())
                {
                    return result.result();
                }
        }
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes payment slips to use in Giro.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    ///     A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    protected void initGiro(CustCollectionLetterJour _custCollectionLetterJour)
    {
        moneyTransferSlip = PaymMoneyTransferSlip::construct(giroType);

        switch (giroType)
        {
            case PaymentStub::ESR_orange:
            case PaymentStub::ESR_red_bank:
                moneyTransferSlip_CH = moneyTransferSlip;
                break;

            case PaymentStub::FIK752:
                moneyTransferSlip.bankAccountId(_custCollectionLetterJour.paymentBankAccountId());
                break;

            case PaymentStub::BelSMS101:
            case PaymentStub::BelSMS102:
                moneyTransferSlip_BE = new PaymMoneyTransferSlip_BE();
                break;

            case PaymentStub::Finnish:
                moneyTransferSlip_FI = new PaymMoneyTransferSlip_FI();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustCollectionJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the core fields on the <c>CustCollectionJourTmp</c> table buffer in preparation for insert.
    /// </summary>
    /// <param name="_custCollectionLetterJour">
    /// A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <param name="_custTable">
    /// A <c>CustTable</c> buffer.
    /// </param>
    /// <param name="_custCollectionLetterTrans">
    /// A <c>CustCollectionLetterTrans</c> table buffer.
    /// </param>
    /// <param name="_formLetterRemarks">
    /// A <c>FormLetterRemarks</c> table buffer.
    /// </param>
    /// <param name="_taxSpec">
    /// A <c>TaxSpec</c> table buffer.
    /// </param>
    /// <param name="_postingsUntil">
    /// A Date parameter.
    /// </param>
    protected void populateCustCollectionJourTmp(
            CustCollectionLetterJour _custCollectionLetterJour,
            CustTable _custTable,
            CustCollectionLetterTrans _custCollectionLetterTrans,
            FormLetterRemarks _formLetterRemarks,
            TaxSpec _taxSpec,
            TransDate _postingsUntil)
    {
        AmountCur collectionAgencyFee, collectionAgencyFeeTaxAmount;
        container collectionAgencyDataCon;
        currencyCode collectionAgencyFeeCurrencyCode;

        custCollectionJourTmp.clear();

        if (flag)
        {
            custCollectionJourTmp.Flag = 1;
        }

        custCollectionJourTmp.DateOfCreation = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custCollectionJourTmp.CompanyName = companyInfo.name();
        custCollectionJourTmp.CompanyAddress = DirUtility::replaceAddressTokenLanguage(companyInfo.postalAddress(), _custTable.languageId());
        custCollectionJourTmp.CompanyLogo = CompanyImage::find(companyInfo.DataAreaId, companyInfo.TableId, companyInfo.RecId).Image;

        custCollectionJourTmp.PrintLogo = conLen(custCollectionJourTmp.CompanyLogo) == 0 ? NoYes::No : NoYes::Yes;

        if (companyInfo.PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            custCollectionJourTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                   _custCollectionLetterJour.LanguageId);
        }

        custCollectionJourTmp.CompanyPhone = companyInfo.phone();
        custCollectionJourTmp.CompanyTeleFax = companyInfo.teleFax();
        custCollectionJourTmp.CompanyGiro = companyInfo.Giro;
        custCollectionJourTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        custCollectionJourTmp.CompanyVATNum = TaxRegistration::getTaxRegNumFromJournal(
            _custCollectionLetterJour.TableId,
            _custCollectionLetterJour.RecId,
            _custCollectionLetterJour.CollectionLetterDate);
        custCollectionJourTmp.ShowCompanyVATNum = custFormletterParameters.PrintInterestNoteVATNum;

        custCollectionJourTmp.CustomerName = _custCollectionLetterJour.Name;
        custCollectionJourTmp.CustomerAddress = _custCollectionLetterJour.collectionAddress();       
        custCollectionJourTmp.CollectionLetterTitle = this.collectionLetterTitle(_custCollectionLetterJour);
        custCollectionJourTmp.CollectionLetterNum = _custCollectionLetterJour.CollectionLetterNum;
        custCollectionJourTmp.CollectionLetterDate = _custCollectionLetterJour.CollectionLetterDate;
        custCollectionJourTmp.CustCollectionLetterJour_AccountNum = _custCollectionLetterJour.AccountNum;
        custCollectionJourTmp.CollectionLetterDueDate = dueDate;
        custCollectionJourTmp.CollectionLetterCurrencyCode = _custCollectionLetterJour.CurrencyCode;
        custCollectionJourTmp.CollectionLetterPaymentReference = this.paymentReference(_custCollectionLetterJour, _custCollectionLetterTrans);
        custCollectionJourTmp.PayReference = payRef;
        custCollectionJourTmp.CollectionLetterOCRField = this.ocrField(_custCollectionLetterJour);
        custCollectionJourTmp.CustVATNum = custFormletterParameters.PrintInvoiceVATNum ? _custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custCollectionLetterTrans.TransDate) : '';
        custCollectionJourTmp.CustCollectnLetterJour_NPIBankPaymId = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]) ? _custCollectionLetterJour.PaymId : '';
        custCollectionJourTmp.CustCollectionLetterJour_Fee = _custCollectionLetterJour.Fee;
        custCollectionJourTmp.CurrencyCode = currencyCode;
        custCollectionJourTmp.PaymentCondition = PaymTerm::txt(_custCollectionLetterJour.PaymTermId, _custCollectionLetterJour.LanguageId);
        custCollectionJourTmp.ShowTotals = showFooter && !taxPrintTaxFreeBalance;
        custCollectionJourTmp.ShowTotalsTaxBalances = showFooter && taxPrintTaxFreeBalance;
        custCollectionJourTmp.ShowTotalsEuro = showFooterEuro && !taxPrintTaxFreeBalance;
        custCollectionJourTmp.ShowTotalsTaxBalancesEuro = showFooterEuro && taxPrintTaxFreeBalance;

        if (collecTrans)
        {
            custCollectionJourTmp.CustCollectionTrans_TransDate = _custCollectionLetterTrans.TransDate;
            custCollectionJourTmp.CustCollectionTrans_DueDate = _custCollectionLetterTrans.DueDate;
            custCollectionJourTmp.CustCollectionTrans_Invoice = _custCollectionLetterTrans.Invoice;
            custCollectionJourTmp.CustCollectionTrans_Txt = _custCollectionLetterTrans.Txt;
            custCollectionJourTmp.CustCollectionTrans_CurrencyCode = _custCollectionLetterTrans.CurrencyCode;

            // <GCN>
            if (!isTaxIntegrateEnable_CN)
            {
                // </GCN>
                custCollectionJourTmp.CustCollectionTrans_RemainAmount = _custCollectionLetterTrans.RemainAmount;
                // <GCN>
            }
            // </GCN>

            custCollectionJourTmp.CollectionLetterCode = _custCollectionLetterTrans.CollectionLetterCode;
        }

        if (_taxSpec)
        {
            custCollectionJourTmp.PrintCode = _taxSpec.taxWriteCode();
            custCollectionJourTmp.TaxCode = _taxSpec.taxCode();
            custCollectionJourTmp.TaxBaseAmount = -_taxSpec.taxBaseAmount();
            custCollectionJourTmp.TaxBaseQty = -_taxSpec.taxBaseQty();
            custCollectionJourTmp.TaxAmount = -_taxSpec.taxAmount();
            custCollectionJourTmp.TaxAmountMST = -_taxSpec.taxAmountMST();
            custCollectionJourTmp.TaxExemptDescription = _taxSpec.taxExemptDescription();
        }

        if (isTaxAmountMSTVisible)
        {
            custCollectionJourTmp.PrintTaxAmounts = 1;
        }

        custCollectionJourTmp.TaxAmountLabel = taxAmountLabel;
        custCollectionJourTmp.TaxAmountMSTLabel = taxAmountMSTLabel;

        if (formRemarks)
        {
            custCollectionJourTmp.FormLetterRemarks_Txt = _formLetterRemarks.Txt;
        }

        if (custParameters.EnableReferToCollectionAgency_W &&
                _custCollectionLetterJour.ReferToCollectionAgency_W)
        {
            collectionAgencyDataCon = _custCollectionLetterJour.collectionAgencyDataCon_W();
            collectionAgencyFee = conPeek(collectionAgencyDataCon,1);
            collectionAgencyFeeTaxAmount = conPeek(collectionAgencyDataCon,2);
            collectionAgencyFeeCurrencyCode = conPeek(collectionAgencyDataCon,3);

            if (formRemarks)
            {
                custCollectionJourTmp.FormLetterRemarks_Txt += '\n';
            }
            custCollectionJourTmp.FormLetterRemarks_Txt += strFmt(SysLabel::labelId2String(literalStr("@SYS4009968"), _custCollectionLetterJour.LanguageId),
                                                                        collectionAgencyFee,
                                                                        collectionAgencyFeeTaxAmount,
                                                                        collectionAgencyFee + collectionAgencyFeeTaxAmount,
                                                                        collectionAgencyFeeCurrencyCode);

            if (custParameters.CollectionGracePeriodForDuesTransfer_W != 0)
            {
                custCollectionJourTmp.FormLetterRemarks_Txt += '. ' + strFmt(SysLabel::labelId2String(literalStr("@SYS4009969"), _custCollectionLetterJour.LanguageId),
                                                                                custParameters.CollectionGracePeriodForDuesTransfer_W);
            }
        }

        custCollectionJourTmp.CustCollectionLetterJour_Notes = _custCollectionLetterJour.Notes;

        if (_postingsUntil != dateNull())
        {
            custCollectionJourTmp.PostingsUntil = SysLabel::labelId2String2(literalStr("@SYS77945"), _custCollectionLetterJour.LanguageId) + ' ' + date2str(_postingsUntil, -1, -1, -1, -1, -1, -1, DateFlags::FormatAll);
        }

        custCollectionJourTmp.Total = _custCollectionLetterJour.Fee + _custCollectionLetterJour.TaxAmount;

        custCollectionJourTmp.TaxableBalance = _custCollectionLetterJour.taxableBalance(tmpTaxWorkTrans);
        custCollectionJourTmp.TaxFreeBalance = _custCollectionLetterJour.taxFreeBalance(tmpTaxWorkTrans);
        custCollectionJourTmp.CustCollectionTaxAmount = _custCollectionLetterJour.TaxAmount;
        custCollectionJourTmp.TaxFreeBalanceEuro = _custCollectionLetterJour.taxFreeBalanceEuro(tmpTaxWorkTrans);
        custCollectionJourTmp.TaxableBalanceEuro = _custCollectionLetterJour.taxableBalanceEuro(tmpTaxWorkTrans);
        custCollectionJourTmp.FeeAmountEuro = _custCollectionLetterJour.amountMST2Euro(_custCollectionLetterJour.Fee);
        custCollectionJourTmp.TaxAmountEuro = _custCollectionLetterJour.amountMST2Euro(_custCollectionLetterJour.taxAmountCur());
        custCollectionJourTmp.FeeInclTaxEuro = _custCollectionLetterJour.amountMST2Euro(_custCollectionLetterJour.feeInclTax());
        custCollectionJourTmp.CurrencyCodeEuro = Currency::findEuroCurrencyCode();

        custCollectionJourTmp.GiroType = giroType;

        this.initCustCollectionJourTmp(_custCollectionLetterJour, _custTable, _custCollectionLetterTrans);

        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(custCollectionJourTmp.GiroType) && !inlineGIRO)
        {
            GiroReportTmp::populate(this.parmUserConnection(), custCollectionJourTmp);
            custCollectionJourTmp.GiroType = PaymentStub::None;
        }

        custCollectionJourTmp.BillingClassification = billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustCollectionJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the fields on the <c>CustCollectionJourTmp</c> table buffer in preparation for insert.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    ///     A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <param name = "_custTable">
    ///     A <c>CustTable</c> buffer.
    /// </param>
    /// <param name = "_custCollectionLetterTrans">
    ///     A <c>CustCollectionLetterTrans</c> table buffer.
    /// </param>
    protected void initCustCollectionJourTmp(
            CustCollectionLetterJour _custCollectionLetterJour,
            CustTable _custTable,
            CustCollectionLetterTrans _custCollectionLetterTrans)
    {
        switch (giroType)
        {
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                custCollectionJourTmp.CollectionName = _custTable.name();
                custCollectionJourTmp.CollectionAddress = _custCollectionLetterJour.collectionAddress();
                custCollectionJourTmp.CollectionAmountDecimals = this.collectionAmountDecimals(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionAmountNoDecimals = this.collectionAmountNoDecimals(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionLetterOCRField = moneyTransferSlip.ocrField(_custCollectionLetterJour.AccountNum,
                        _custCollectionLetterJour.CollectionLetterNum,
                        strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));

                custCollectionJourTmp.fiCreditorID_DK = this.fiCreditorId();
                if (giroType == PaymentStub::FIK752 && _custCollectionLetterJour.CurrencyCode != 'DKK')
                {
                    giroType = PaymentStub::FIK751;
                    custCollectionJourTmp.GiroType = PaymentStub::FIK751;
                    info("@SYS343346");
                }
                break;

            case PaymentStub::BBS:
                custCollectionJourTmp.RemainAmountToBePaid = _custCollectionLetterJour.sumCollectionAmountFee() + _custCollectionLetterJour.taxAmountCur();
                custCollectionJourTmp.CollectionName = _custTable.name();
                custCollectionJourTmp.CollectionAddress = _custCollectionLetterJour.collectionAddress();
                custCollectionJourTmp.CollectionLetterOCRField = this.ocrField(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionAmountDecimals = this.collectionAmountDecimals(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionAmountNoDecimals = this.collectionAmountNoDecimals(_custCollectionLetterJour);
                custCollectionJourTmp.AmountCheckId = this.amountCheckId(_custCollectionLetterJour);
                break;

            case PaymentStub::ESR_red_bank:
                custCollectionJourTmp.BankGroupIdName_CH = this.bankGroupIdName_CH(_custCollectionLetterJour);
                custCollectionJourTmp.BankZipCode_CH = this.bankZipCode_CH(_custCollectionLetterJour);
                custCollectionJourTmp.Description_CH = SysLabel::labelId2String2(literalStr("@SYS12128"), _custCollectionLetterJour.LanguageId);
                custCollectionJourTmp.PaymentRef1_CH = moneyTransferSlip_CH.ocr_paymentRef1();
                custCollectionJourTmp.PaymentRef2_CH = moneyTransferSlip_CH.ocr_paymentRef2();
                custCollectionJourTmp.BankAccountTable_AccountNum_CH = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        moneyTransferSlip.bankAccountNum() : "@AccountsReceivable:FiveAsterisk";
                custCollectionJourTmp.BankAccountTable_Clearing_CH = moneyTransferSlip.bankAccountTable().RegistrationNum;
                custCollectionJourTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                custCollectionJourTmp.CollectionAmountNoDecimals = this.amountNoDecimals_CH(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionAmountDecimals = this.amountDecimals_CH(_custCollectionLetterJour);
                custCollectionJourTmp.PaymentId2_PaymentId3_CH = moneyTransferSlip_CH.ocr_PaymentId2() + ' ' + moneyTransferSlip_CH.ocr_PaymentId3();
                custCollectionJourTmp.CustName_CH = _custTable.name();
                custCollectionJourTmp.CustAddress_CH = _custTable.postalAddress().Address;
                custCollectionJourTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                custCollectionJourTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                custCollectionJourTmp.AccountNo2_CH = this.accountNo2_CH();
                break;

            case PaymentStub::ESR_orange:
                custCollectionJourTmp.CollectionAmountNoDecimals = this.amountNoDecimals_CH(_custCollectionLetterJour);
                custCollectionJourTmp.CollectionAmountDecimals = this.amountDecimals_CH(_custCollectionLetterJour);
                custCollectionJourTmp.CurrencyCodeISO_CH = this.currencyCodeISO_CH();
                custCollectionJourTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                custCollectionJourTmp.PaymentId2_PaymentId3_CH = moneyTransferSlip_CH.ocr_PaymentId2() + ' ' + moneyTransferSlip_CH.ocr_PaymentId3();
                custCollectionJourTmp.CustName_CH = _custTable.name();
                custCollectionJourTmp.CustAddress_CH = _custTable.postalAddress().Address;
                custCollectionJourTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                custCollectionJourTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;

            case PaymentStub::Finnish:
                custCollectionJourTmp.AccountNum1_FI = moneyTransferSlip_FI.ocr_AccountNum1();
                custCollectionJourTmp.AccountNum2_FI = moneyTransferSlip_FI.ocr_AccountNum2();
                custCollectionJourTmp.AccountNum3_FI = moneyTransferSlip_FI.ocr_AccountNum3();
                custCollectionJourTmp.AccountNum4_FI = moneyTransferSlip_FI.ocr_AccountNum4();
                custCollectionJourTmp.AccountNum5_FI = moneyTransferSlip_FI.ocr_AccountNum5();
                custCollectionJourTmp.AccountNum6_FI = moneyTransferSlip_FI.ocr_AccountNum6();
                custCollectionJourTmp.InvoiceReferenceNumber = _custCollectionLetterJour.PaymId;
                custCollectionJourTmp.CollectionName = _custTable.name();
                custCollectionJourTmp.CollectionAddress = _custCollectionLetterJour.collectionAddress();
                custCollectionJourTmp.OcrLine_FI = moneyTransferSlip_FI.ocrLine(_custCollectionLetterJour.AccountNum,
                                                                                _custCollectionLetterJour.sumCollectionAmountFee(),
                                                                                _custCollectionLetterTrans.DueDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustCollectionJourTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>CustCollectionJourTmp</c> table.
    /// </summary>
    /// <param name="_custCollectionLetterJour">
    /// A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <param name="_custTable">
    /// A <c>CustTable</c> buffer.
    /// </param>
    /// <param name="_custCollectionLetterTrans">
    /// A <c>CustCollectionLetterTrans</c> table buffer.
    /// </param>
    /// <param name="_formLetterRemarks">
    /// A <c>FormLetterRemarks</c> table buffer.
    /// </param>
    /// <param name="_taxSpec">
    /// A <c>TaxSpec</c> table buffer.
    /// </param>
    /// <param name="_postingsUntil">
    /// A Date parameter.
    /// </param>
    protected void insertCustCollectionJourTmp(
            CustCollectionLetterJour _custCollectionLetterJour,
            CustTable _custTable,
            CustCollectionLetterTrans _custCollectionLetterTrans,
            FormLetterRemarks _formLetterRemarks,
            TaxSpec _taxSpec,
            TransDate _postingsUntil)
    {
        this.populateCustCollectionJourTmp(_custCollectionLetterJour, _custTable, _custCollectionLetterTrans, _formLetterRemarks, _taxSpec, _postingsUntil);
        
        if (isTaxIntegrateEnable_CN)
        {
            this.insertCustCollectionJourTmp_CN(_custCollectionLetterTrans);
        }
        else
        {
            custCollectionJourTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustCollectionJourTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the data population and insertion of <c>CustCollectionJourTmp</c> record(s).
    /// </summary>
    /// <param name="_custCollectionLetterTrans">
    /// A <c>CustCollectionLetterTrans</c> table buffer.
    /// </param>
    protected void insertCustCollectionJourTmp_CN(CustCollectionLetterTrans _custCollectionLetterTrans)
    {
        #characters
        boolean isExternalInvoice;

        TaxIntgrExportDocumentOperationView_CN taxIntgrExportDocumentOperationViewForExternal;
        TaxIntgrExportDocumentOperationView_CN taxIntgrExportDocumentOperationViewForCount;
        TaxIntgrExportDocumentOperationView_CN taxIntgrExportDocumentOperationViewForInvoice;

        if (collecTrans)
        {
            int externalInvoiceTotalCount;
            int externalInvoiceCount;
            AmountCur currentRemainAmount;

            select count(RecId) from taxIntgrExportDocumentOperationViewForCount
                    where taxIntgrExportDocumentOperationViewForCount.InvoiceId == _custCollectionLetterTrans.Invoice;

            externalInvoiceTotalCount = int642int(taxIntgrExportDocumentOperationViewForCount.RecId);

            currentRemainAmount = _custCollectionLetterTrans.RemainAmount;

            while select ExternalInvoiceId from taxIntgrExportDocumentOperationViewForExternal
                    where taxIntgrExportDocumentOperationViewForExternal.InvoiceId == _custCollectionLetterTrans.Invoice
            {
                externalInvoiceCount++;

                if (taxIntgrExportDocumentOperationViewForExternal.ExternalInvoiceId)
                {
                    int invoiceIdCount;
                    AmountCur remainAmount;
                    AmountCur splitAmount;
                    TaxMultiInvoiceId_CN taxMultiInvoiceId_CN;
                    CustCollectionLetterTrans custCollectionLetterTrans;

                    custCollectionJourTmp.TaxExternalInvoiceId_CN = taxIntgrExportDocumentOperationViewForExternal.ExternalInvoiceId;

                    while select InvoiceId, TransactionCurrencyAmount from taxIntgrExportDocumentOperationViewForInvoice
                            where taxIntgrExportDocumentOperationViewForInvoice.ExternalInvoiceId == custCollectionJourTmp.TaxExternalInvoiceId_CN
                    {
                        // For split case.
                        splitAmount = taxIntgrExportDocumentOperationViewForInvoice.TransactionCurrencyAmount;

                        // For merge case.
                        select firstonly RemainAmount from custCollectionLetterTrans
                                where custCollectionLetterTrans.Invoice == taxIntgrExportDocumentOperationViewForInvoice.InvoiceId;

                        remainAmount += custCollectionLetterTrans.RemainAmount;

                        if (invoiceIdCount)
                        {
                            taxMultiInvoiceId_CN += #comma;
                        }

                        taxMultiInvoiceId_CN += taxIntgrExportDocumentOperationViewForInvoice.InvoiceId;

                        invoiceIdCount++;
                    }

                    select firstonly InvoiceId from taxIntgrExportDocumentOperationViewForInvoice
                            order by taxIntgrExportDocumentOperationViewForInvoice.InvoiceDate desc
                            where taxIntgrExportDocumentOperationViewForInvoice.ExternalInvoiceId == custCollectionJourTmp.TaxExternalInvoiceId_CN;

                    if (taxIntgrExportDocumentOperationViewForInvoice.InvoiceId == _custCollectionLetterTrans.Invoice)
                    {
                        if (externalInvoiceTotalCount == 1)
                        {
                            custCollectionJourTmp.CustCollectionTrans_RemainAmount = remainAmount;
                        }
                        else if (externalInvoiceCount < externalInvoiceTotalCount)
                        {
                            custCollectionJourTmp.CustCollectionTrans_RemainAmount = splitAmount;
                            currentRemainAmount = currentRemainAmount - splitAmount;
                        }
                        else
                        {
                            custCollectionJourTmp.CustCollectionTrans_RemainAmount = currentRemainAmount;
                        }

                        custCollectionJourTmp.TaxMultiInvoiceId_CN = taxMultiInvoiceId_CN;
                        custCollectionJourTmp.insert();
                    }

                    isExternalInvoice = true;
                }
            }
        }

        if (!isExternalInvoice)
        {
            custCollectionJourTmp.CustCollectionTrans_RemainAmount = _custCollectionLetterTrans.RemainAmount;
            custCollectionJourTmp.TaxMultiInvoiceId_CN = _custCollectionLetterTrans.Invoice;
            custCollectionJourTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    private str ocrField(CustCollectionLetterJour _custCollectionLetterJour)
    {
        return moneyTransferSlip.ocrField(_custCollectionLetterJour.AccountNum, _custCollectionLetterJour.CollectionLetterNum,
                                          strLen(int2str(NumberSeq::highest(CustParameters::numRefCollectionLetterNum().NumberSequenceId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdReport</Name>
				<Source><![CDATA[
    private PaymId paymentIdReport(InvoiceId _invoiceId)
    {
        PaymId paymId = this.encodePaymId(_invoiceId);

        return strFmt('+++%1/%2/%3+++', subStr(paymId, 1, 3), subStr(paymId, 4, 4), subStr(paymId, 8, strLen(paymId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReference</Name>
				<Source><![CDATA[
    private PaymReference paymentReference(CustCollectionLetterJour _custCollectionLetterJour, CustCollectionLetterTrans _custCollectionLetterTrans)
    {
        if (!oneCollectionPerCustomer)
        {
            invoiceId = _custCollectionLetterTrans.Invoice;
        }
        else
        {
            CustCollectionLetterTrans custCollectionLetterTrans;

            select firstonly Invoice
            from custCollectionLetterTrans
            where custCollectionLetterTrans.CollectionLetterNum == _custCollectionLetterJour.CollectionLetterNum &&
                    custCollectionLetterTrans.AccountNum == _custCollectionLetterJour.AccountNum &&
                    custCollectionLetterTrans.CollectionLetterIssued &&
                    custCollectionLetterTrans.CollectionLetterCode != _custCollectionLetterJour.CollectionLetterCode;

            invoiceId = custCollectionLetterTrans.Invoice;
        }

        PaymReference paymRef;

        if (moneyTransferSlip_BE)
        {
            payRef = true;
            paymRef = this.paymentIdReport(invoiceId);
        }
        else
        {
            payRef = false;
        }

        return paymRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerBasedOnBlockedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the blocked value for a given account number from the <c>CustCollectionLetterJour</c> record based on it's blocked status.
    /// </summary>
    /// <param name = "_custTable">The current <c>CustCollectionLetterJour</c> record.</param>
    protected void updateCustomerBasedOnBlockedStatus(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (_custCollectionLetterJour.Block == NoYes::Yes && custParameters.CollectionLetterCodeUpdate == CustPostedPrinted::Printed)
        {
            CustTable custTable;            
            custTable.setConnection(this.parmUserConnection());
            custTable = CustTable::find(_custCollectionLetterJour.AccountNum, true);

            this.parmUserConnection().ttsbegin();

            if (custTable.Blocked == CustVendorBlocked::No)
            {
                custTable.Blocked = CustVendorBlocked::Invoice;
                custTable.update();
            }
        
            this.parmUserConnection().ttscommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates several tables.
    /// </summary>
    /// <param name="_custCollectionLetterJourRecId">
    /// A <c>CustCollectionLetterJour</c> table record identifier.
    /// </param>
    public void preProcessing(RecId _custCollectionLetterJourRecId)
    {
        TaxCustCollectionLetter taxCustCollectionLetter;
        CustCollectionLetter custCollectionLetter;
        CustCollectionLetterJour jour;
        LedgerPostingController controller = LedgerPostingController::construct();

        // make sure to use user connection, since transaction could be started somewhere in calling stack
        // and could be aborted.
        jour.setConnection(this.parmUserConnection());
        this.parmUserConnection().ttsbegin();

        jour = CustCollectionLetterJour::findRecId(_custCollectionLetterJourRecId, true);
        custCollectionLetter = new CustCollectionLetter(jour);
        taxCustCollectionLetter = new TaxCustCollectionLetter(NoYes::No, custCollectionLetter, '', dateNull());

        if (!jour.Updated ||
            (custParameters.CollectionLetterCodeUpdate == CustPostedPrinted::Printed &&
             jour.JournalPrinted))
        {
            // pass null because it is configured to not post to GL
            jour.TaxAmount = -taxCustCollectionLetter.calcAndPost(controller);
            jour.update();
        }

        this.parmUserConnection().ttscommit();

        tmpTaxWorkTrans = taxCustCollectionLetter.tmpTaxWorkTrans();

        this.updateCustomerBasedOnBlockedStatus(jour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEuroTotals</Name>
				<Source><![CDATA[
    private boolean printEuroTotals()
    {
        return custFormletterParameters.PrintEuroAmount && Currency::findEuroCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for the <c>CustCollectionJour</c>Microsoft SQL Server Reporting
    /// Services report.
    /// </summary>
    public void processReport()
    {
        CustCollectionJourContract contract = this.parmDataContract() as CustCollectionJourContract;
        CustCollectionLetterJour custCollectionLetterJour;
        CustTable custTable;
        CustCollectionLetterTrans custCollectionLetterTrans;
        FormTextType formTextType;
        FormLetterRemarks formLetterRemarks;
        TaxSpecPrintLevel taxSpecPrintLevel;
        TaxSpec taxSpec;

        // <GCN>
        isTaxIntegrateEnable_CN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && CustParameters::find().TaxIntegrationSystem_CN;
        // </GCN>

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        custCollectionJourTmp.setConnection(this.parmUserConnection());

        custParameters = CustParameters::find();
        companyInfo = CompanyInfo::find();

        custFormletterParameters = CustFormletterParameters::find();
        taxPrintTaxFreeBalance = custFormletterParameters.TaxPrintTaxFreeBalance;

        this.preProcessing(contract.parmRecordId());
        custCollectionLetterJour = CustCollectionLetterJour::findRecId(contract.parmRecordId());
        custTable = CustTable::find(custCollectionLetterJour.AccountNum);

        select firstonly RecId from custCollectionLetterTrans
                where custCollectionLetterTrans.CollectionLetterNum == custCollectionLetterJour.CollectionLetterNum &&
                        custCollectionLetterTrans.AccountNum == custCollectionLetterJour.AccountNum &&
                        custCollectionLetterTrans.CollectionLetterIssued;

        if (!this.doLinesExistForCollectionLetter(custCollectionLetterTrans))
        {
            // There is nothing to print since none of the lines have been selected to print collection letters.
            return;
        }

        showFooter = true;
        showFooterEuro = this.printEuroTotals();

        if (CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification())
                && (contract.parmBillingClassification() || contract.parmInclTransWithNoBillingClass()))
        {
            billingClassification = CustBillingClassification::find(custCollectionLetterJour.CustBillingClassification).BillingClassification;
        }

        currencyCode = '';

        select firstonly RecId from custCollectionLetterTrans
                where custCollectionLetterTrans.CollectionLetterNum == custCollectionLetterJour.CollectionLetterNum &&
                        custCollectionLetterTrans.AccountNum == custCollectionLetterJour.AccountNum &&
                        custCollectionLetterTrans.CollectionLetterIssued &&
                        custCollectionLetterTrans.CollectionLetterCode != custCollectionLetterJour.CollectionLetterCode;

        oneCollectionPerCustomer = this.isOneCollectionPerCustomer(custCollectionLetterTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            giroType = custTable.GiroTypeCollectionletter;
        }
        else
        {
            giroType = custCollectionLetterJour.GiroType;
        }

        this.initGiro(custCollectionLetterJour);
        dueDate = custCollectionLetterJour.DueDate;
        moneyTransferSlip.init(giroType);

        this.initMoneyTransferSlip(custCollectionLetterJour);

        formTextType = this.getFormTextType(custCollectionLetterJour.CollectionLetterCode);
        formLetterRemarks = FormLetterRemarks::find(custCollectionLetterJour.LanguageId, formTextType);

        if (formLetterRemarks)
        {
            formRemarks = true;
        }

        taxSpecPrintLevel = custFormletterParameters.TaxSpecPrintLevel;

        if (taxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            if (taxSpecPrintLevel == TaxSpecPrintLevel::Currency ||
                    custCollectionLetterJour.CurrencyCode == Ledger::accountingCurrency(companyInfo.RecId))
            {
                isTaxAmountMSTVisible = false;
                taxAmountMSTLabel = "@SYS22646";
                taxAmountLabel = "@SYS22646";
            }
            else
            {
                isTaxAmountMSTVisible = true;
                taxAmountMSTLabel = strFmt('%1 %2', literalStr("@SYS22646"), Ledger::accountingCurrency(companyInfo.RecId));
                taxAmountLabel = strFmt('%1 %2', literalStr("@SYS22646"), custCollectionLetterJour.CurrencyCode);
            }

            taxSpec = TaxSpec::construct('', naDate(), custCollectionLetterJour.RecId);
            taxSpec.parmLanguageId(custCollectionLetterJour.LanguageId);
            taxSpec.setTmpTaxWorkTrans(tmpTaxWorkTrans);

            if (custCollectionLetterJour.TaxWriteCode || custCollectionLetterJour.TaxAmount)
            {
                flag = true;
            }

            while (taxSpec.parmTaxSpec())
            {
                this.insertCustCollectionJourTmp(custCollectionLetterJour, custTable, null, formLetterRemarks, taxSpec, contract.parmPostingsUntil());
            }
        }

        this.createCustCollectionJourTmpData(custCollectionLetterJour, custTable, formLetterRemarks, contract);

        if (!custCollectionLetterJour.JournalPrinted)
        {
            this.updatePrinted(custCollectionLetterJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustCollectionJourTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the core fields on the <c>CustCollectionJourTmp</c> table for each transaction in custCollectionLetterTrans for the provided _custCollectionLetterJour.
    /// </summary>
    /// <param name="_custCollectionLetterJour">
    /// A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    /// <param name="_custTable">
    /// A <c>CustTable</c> buffer.
    /// </param>
    /// <param name="_formLetterRemarks">
    /// A <c>FormLetterRemarks</c> table buffer.
    /// </param>
    /// <param name="_contract">
    /// A <c>CustCollectionJourContract</c> class buffer.
    /// </param>
    protected void createCustCollectionJourTmpData(
        CustCollectionLetterJour _custCollectionLetterJour,
        CustTable _custTable,
        FormLetterRemarks _formLetterRemarks,
        CustCollectionJourContract _contract)
    {
        CustCollectionLetterTrans custCollectionLetterTrans;

        while select custCollectionLetterTrans
            order by CurrencyCode, CollectionLetterCode, TransDate
            where custCollectionLetterTrans.CollectionLetterNum == _custCollectionLetterJour.CollectionLetterNum &&
                  custCollectionLetterTrans.AccountNum == _custCollectionLetterJour.AccountNum &&
                  custCollectionLetterTrans.CollectionLetterIssued &&
                 !custCollectionLetterTrans.Fee
        {
            collecTrans = true;

            this.populateCustCollectionJourTmpData(_custCollectionLetterJour, _custTable, custCollectionLetterTrans, _formLetterRemarks, _contract);

            currencyCode = custCollectionLetterTrans.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMoneyTransferSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>PaymMoneyTransferSlip</c> class.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">
    ///     A <c>custCollectionLetterJour</c> table buffer.
    /// </param>
    protected void initMoneyTransferSlip(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (giroType == PaymentStub::ESR_red_bank || giroType == PaymentStub::ESR_orange)
        {
            moneyTransferSlip_CH.initOCRLineCollectionLetter_CH(_custCollectionLetterJour);
        }
        else if (giroType == PaymentStub::Finnish)
        {
            moneyTransferSlip_FI.initOCRLine_FI();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinted</Name>
				<Source><![CDATA[
    protected void updatePrinted(RecId _custCollectionJourRecId)
    {
        CustCollectionLetterJour jour;

        jour.setConnection(this.parmUserConnection());
        this.parmUserConnection().ttsbegin();

        jour = CustCollectionLetterJour::findRecId(_custCollectionJourRecId, true);

        jour.setPrinted();
        jour.update();

        if (custParameters.CollectionLetterCodeUpdate == CustPostedPrinted::Printed)
        {
            jour.updateCollectionLetterCodeCustTrans();
        }

        this.parmUserConnection().ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doLinesExistForCollectionLetter</Name>
				<Source><![CDATA[
    protected boolean doLinesExistForCollectionLetter(CustCollectionLetterTrans _custCollectionLetterTrans)
    {
        return _custCollectionLetterTrans.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustCollectionJourTmpData</Name>
				<Source><![CDATA[
    protected void populateCustCollectionJourTmpData(
        CustCollectionLetterJour _custCollectionLetterJour,
        CustTable _custTable,
        CustCollectionLetterTrans _custCollectionLetterTrans,
        FormLetterRemarks _formLetterRemarks,
        CustCollectionJourContract _contract)
    {
        this.insertCustCollectionJourTmp(_custCollectionLetterJour, _custTable, _custCollectionLetterTrans, _formLetterRemarks, null, _contract.parmPostingsUntil());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneCollectionPerCustomer</Name>
				<Source><![CDATA[
    protected boolean isOneCollectionPerCustomer(CustCollectionLetterTrans _custCollectionLetterTrans)
    {
        return _custCollectionLetterTrans.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>