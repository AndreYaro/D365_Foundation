<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixReportWithDimDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerMatrixReportWithDimDP_CN</c> class is the Report Data Provider class for the<c>LedgerMatrixReportWithDim_CN</c> Overview Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the Ledger <c>LedgerMatrixReportWithDim_CN</c> SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerMatrixReportWithDimContract_CN))
]
public class LedgerMatrixReportWithDimDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    //TMP table and Contract class
    LedgerMatrixReportTmp_CN                ledgerMatrixReportTmp;
    LedgerMatrixReportTmpParameter_CN       ledgerMatrixReportTmpParameter;
    LedgerMatrixReportWithDimContract_CN    contract;

    //Report parameters
    LedgerMatrixId_CN       ledgerMatrixId;
    Name                    dimensionAttributeType;
    DimensionValue          fromDimensionValue;
    DimensionValue          toDimensionValue;
    TransDate               fromDate;
    TransDate               toDate;
    CurrentOperationsTax    postingLayer;

    Query                   ledgerMatrixReportQuery;
    DimensionAttribute      dimensionAttribute;
    LedgerMatrixTable_CN    ledgerMatrixTable_CN;
    Set                     openingSet,
                            detailsTransSet;
    boolean                 isChineseVoucher;

    #define.notSymbol("!")
    #define.calcOpeningAmountMST(true)
    #define.otherDimensionNum("@SYS118908")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerMatrixReportTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportTmp_CN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmp_CN))
    ]
    public LedgerMatrixReportTmp_CN getLedgerMatrixReportTmp_CN()
    {
        return ledgerMatrixReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerMatrixReportTmpParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerMatrixReportTmpParameter_CN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerMatrixReportTmpParameter_CN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerMatrixReportTmpParameter_CN))
    ]
    public LedgerMatrixReportTmpParameter_CN getLedgerMatrixReportTmpParameter_CN()
    {
        return ledgerMatrixReportTmpParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the opening balance, debit or credit of a main account
    /// </summary>
    /// <param name="_mainAccoutRecid">
    /// Record id of main account.
    /// </param>
    /// <param name="_dimensionValue">
    /// Dimension attribute value
    /// </param>
    /// <param name="_debitCreditAmountOnly">
    /// whether calculates opening blance or debit, credit
    /// </param>
    /// <param name="_amountDisplaySign">
    /// calculte Debit or Credit amount
    /// </param>
    /// <returns>
    /// Opening balance, debit or credit of a main account
    /// </returns>
    private AmountCur getOpeningAmount(
        RefRecId                _mainAccoutRecid,
        DimensionValue          _dimensionValue,
        boolean                 _debitCreditAmountOnly  = false,
        AmountDisplaySign_CN    _amountDisplaySign      = AmountDisplaySign_CN::Debit)
    {
        Query                           query;
        QueryRun                        queryRun;
        LedgerMatrixReportWithDim_CN    ledgerMatrixReportWithDim_CN;
        AmountCur                       amountCur;

        query = new Query(queryStr(LedgerMatrixReportWithDimSum_CN));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, MainAccount)).value(queryValue(_mainAccoutRecid));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, AccountingDate)).value(queryRange(dateNull(), fromDate - 1));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, DimensionAttribute)).value(queryValue(dimensionAttribute.RecId));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, PostingLayer)).value(SysQuery::value(postingLayer));
        SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(ledgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, Ledger)).value(queryValue(Ledger::current()));

        if (_dimensionValue == #otherDimensionNum)
        {
            SysQuery::findOrCreateRange(
                query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
                fieldNum(LedgerMatrixReportWithDim_CN, DisplayValue)).value(#notSymbol + queryRange(fromDimensionValue, toDimensionValue));
        }
        else
        {
            SysQuery::findOrCreateRange(
                query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
                fieldNum(LedgerMatrixReportWithDim_CN, DisplayValue)).value(queryValue(_dimensionValue));
        }

        if (_debitCreditAmountOnly)
        {
            SysQuery::findOrCreateRange(
                query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
                fieldNum(LedgerMatrixReportWithDim_CN, IsCredit)).value(queryValue(_amountDisplaySign == AmountDisplaySign_CN::Credit ? NoYes::Yes : NoYes::No));
        }

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            ledgerMatrixReportWithDim_CN = queryRun.get(tableNum(LedgerMatrixReportWithDim_CN));
            amountCur = ledgerMatrixReportWithDim_CN.AccountingCurrencyAmount;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters before running report.
    /// </summary>
    protected void initParameters()
    {
        //Initial Contract class
        contract = this.parmDataContract() as LedgerMatrixReportWithDimContract_CN;

        //Get parameters from Contract
        ledgerMatrixId          = contract.parmLedgerMatrixId();
        dimensionAttributeType  = contract.parmDimensionAttribute();
        fromDimensionValue      = contract.parmFromDimensionValue();
        toDimensionValue        = contract.parmToDimensionValue();
        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        postingLayer            = contract.parmPostingLayer();

        openingSet      = new Set(Types::Container);
        detailsTransSet = new Set(Types::Container);

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(fromDate, toDate);

        dimensionAttribute = DimensionAttribute::findByLocalizedName(
            dimensionAttributeType,
            false);

        if (!fromDimensionValue)
        {
            //Set "From Dimension" value to first value when "From Dimension" is empty
            fromDimensionValue = this.setDimensionValue(SelectionField::Min);
        }
        if (!toDimensionValue)
        {
            //Set "To Dimension" value to last value when "To Dimension" is empty
            toDimensionValue = this.setDimensionValue(SelectionField::Max);
        }

        isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
        ledgerMatrixTable_CN = LedgerMatrixTable_CN::findByMatrixId(ledgerMatrixId);

        ledgerMatrixReportQuery = new Query(queryStr(LedgerMatrixReportWithDim_CN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailsTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the details transcation data
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account table date
    /// </param>
    /// <param name="_ledgerMatrixTable">
    /// The ledger matrix table data
    /// </param>
    /// <param name="_ledgerMatrixReportWithDim">
    /// The ledger matrix report with dimension view data
    /// </param>
    /// <param name="_selectedDimensionRow">
    /// Whether selected dimension
    /// </param>
    /// <param name="_lastTranscationContainer">
    /// The last transcation container data
    /// </param>
    /// <returns>
    /// The new last transcation container data
    /// </returns>
    protected container insertDetailsTransaction(
        MainAccount                     _mainAccount,
        LedgerMatrixTable_CN            _ledgerMatrixTable,
        LedgerMatrixReportWithDim_CN    _ledgerMatrixReportWithDim,
        int                             _selectedDimensionRow,
        container                       _lastTranscationContainer)
    {
        Description     dimensionName;
        MainAccountNum  lastMainAccountId;
        DimensionValue  lastDimensionValue;
        DimensionValue  currentDimensionValue;
        TransDate       lastAccountingDate;
        VoucherJournal  lastVoucher;
        VoucherJournal  currentVoucher;
        Amount          lastAmountBalance;

        [lastMainAccountId, lastDimensionValue, lastAccountingDate, lastVoucher, lastAmountBalance] = _lastTranscationContainer;

        if (_ledgerMatrixReportWithDim.AccountingCurrencyAmount && _ledgerMatrixReportWithDim.AccountingDate)
        {
            if (_selectedDimensionRow)
            {
                currentDimensionValue   = _ledgerMatrixReportWithDim.DisplayValue;
                dimensionName           = DimensionAttributeValue::find(_ledgerMatrixReportWithDim.AttributeValueRecId).getName();
            }
            else
            {
                currentDimensionValue = #otherDimensionNum;

                if (!lastDimensionValue)
                {
                    lastDimensionValue = #otherDimensionNum;
                }
            }

            if (isChineseVoucher)
            {
                currentVoucher = _ledgerMatrixReportWithDim.Voucher_CN;
            }
            else
            {
                currentVoucher = _ledgerMatrixReportWithDim.Voucher;
            }

            if (lastMainAccountId != _mainAccount.MainAccountId || lastDimensionValue != currentDimensionValue)
            {
                lastAmountBalance  = 0;
                lastMainAccountId  = _mainAccount.MainAccountId;
                lastDimensionValue = currentDimensionValue;

                ledgerMatrixReportTmp.OpeningAmountMST = this.getOpeningAmount(
                    _mainAccount.RecId,
                    currentDimensionValue,
                    #calcOpeningAmountMST,
                    _ledgerMatrixTable.SignDisplay);
                ledgerMatrixReportTmp.OpeningBalance = this.getOpeningAmount(
                    _mainAccount.RecId,
                    currentDimensionValue);
                lastAmountBalance = ledgerMatrixReportTmp.OpeningBalance;
            }

            //Keep last row balance
            if (lastAccountingDate != _ledgerMatrixReportWithDim.AccountingDate || lastVoucher != currentVoucher)
            {
                lastAccountingDate              = _ledgerMatrixReportWithDim.AccountingDate;
                lastVoucher                     = currentVoucher;
                ledgerMatrixReportTmp.Balance   = lastAmountBalance;
            }

            lastAmountBalance += _ledgerMatrixReportWithDim.AccountingCurrencyAmount;

            ledgerMatrixReportTmp.MainAccountId         = _mainAccount.MainAccountId;
            ledgerMatrixReportTmp.Name                  = _mainAccount.localizedName();
            ledgerMatrixReportTmp.SubLevelFor           = _ledgerMatrixTable.SignDisplay;
            ledgerMatrixReportTmp.TransDate             = _ledgerMatrixReportWithDim.AccountingDate;
            ledgerMatrixReportTmp.Month                 = mthOfYr(_ledgerMatrixReportWithDim.AccountingDate);
            ledgerMatrixReportTmp.Day                   = dayOfMth(_ledgerMatrixReportWithDim.AccountingDate);
            ledgerMatrixReportTmp.Voucher               = currentVoucher;
            ledgerMatrixReportTmp.Description           = _ledgerMatrixReportWithDim.Text;
            ledgerMatrixReportTmp.DimensionValue        = currentDimensionValue;
            ledgerMatrixReportTmp.DimensionName         = dimensionName;
            ledgerMatrixReportTmp.IsSelectedDimension   = _selectedDimensionRow;

            if (_ledgerMatrixReportWithDim.IsCredit == NoYes::No)
            {
                if (_ledgerMatrixTable.SignDisplay == AmountDisplaySign_CN::Debit)
                {
                    ledgerMatrixReportTmp.AmountMST = _ledgerMatrixReportWithDim.AccountingCurrencyAmount;
                }
                ledgerMatrixReportTmp.Debit = _ledgerMatrixReportWithDim.AccountingCurrencyAmount;
            }
            else if (_ledgerMatrixReportWithDim.IsCredit == NoYes::Yes)
            {
                if (_ledgerMatrixTable.SignDisplay == AmountDisplaySign_CN::Credit)
                {
                    ledgerMatrixReportTmp.AmountMST = _ledgerMatrixReportWithDim.AccountingCurrencyAmount;
                }
                ledgerMatrixReportTmp.Credit = _ledgerMatrixReportWithDim.AccountingCurrencyAmount * -1;
            }

            ledgerMatrixReportTmp.insert();
            ledgerMatrixReportTmp.clear();

            //Set detais record into Set
            this.setContainerData(
                _mainAccount,
                _ledgerMatrixTable,
                _ledgerMatrixReportWithDim,
                _selectedDimensionRow,
                true);
        }
        return [lastMainAccountId, lastDimensionValue, lastAccountingDate, lastVoucher, lastAmountBalance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHiddenRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert hidden record to display begin and subtotal row of selected dimension which is not in selected period range
    /// </summary>
    protected void insertHiddenRecord()
    {
        SetEnumerator           setEnum;
        container               openingContainer;
        RecId                   mainAccountRecId;
        MainAccountNum          mainAccountId;
        AccountName             mainAccountName;
        DimensionValue          dimensionValue;
        Description             dimensionName;

        setEnum = openingSet.getEnumerator();

        while (setEnum.moveNext())
        {
            //Opening container: {Main account record id, Main account num, Account name, Dimension value, Dimension name}
            openingContainer = setEnum.current();

            [mainAccountRecId, mainAccountId, mainAccountName, dimensionValue, dimensionName] = openingContainer;

            //Insert select dimension hidden record for unselected data range
            if (!detailsTransSet.in(openingContainer))
            {
                ledgerMatrixReportTmp.clear();

                ledgerMatrixReportTmp.OpeningBalance    = this.getOpeningAmount(
                    mainAccountRecId,
                    dimensionValue);
                ledgerMatrixReportTmp.OpeningAmountMST  = this.getOpeningAmount(
                    mainAccountRecId,
                    dimensionValue,
                    #calcOpeningAmountMST,
                    ledgerMatrixTable_CN.SignDisplay);

                ledgerMatrixReportTmp.MainAccountId     = mainAccountId;
                ledgerMatrixReportTmp.Name              = mainAccountName;
                ledgerMatrixReportTmp.SubLevelFor       = ledgerMatrixTable_CN.SignDisplay;
                ledgerMatrixReportTmp.DimensionValue    = dimensionValue;
                ledgerMatrixReportTmp.DimensionName     = dimensionName;
                if (ledgerMatrixReportTmp.DimensionValue != #otherDimensionNum)
                {
                    ledgerMatrixReportTmp.IsSelectedDimension = true;
                }

                ledgerMatrixReportTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixReportTmpParametersTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the ledgerMatrixReportTmpParameter temporary table.
    /// </summary>
    protected void insertMatrixReportTmpParametersTable()
    {
        MainAccount mainAccount;

        mainAccount = MainAccount::find(LedgerMatrixTable_CN::findByMatrixId(ledgerMatrixId).MainAccount);

        //Set the parameters table data
        ledgerMatrixReportTmpParameter.MatrixId         = ledgerMatrixId;
        ledgerMatrixReportTmpParameter.MainAccountId    = mainAccount.MainAccountId;
        ledgerMatrixReportTmpParameter.MainAccountName  = mainAccount.localizedName();
        ledgerMatrixReportTmpParameter.FromDate         = fromDate;
        ledgerMatrixReportTmpParameter.ToDate           = toDate;
        ledgerMatrixReportTmpParameter.DimensionType    = dimensionAttributeType;
        ledgerMatrixReportTmpParameter.FromDimension    = fromDimensionValue;
        ledgerMatrixReportTmpParameter.ToDimension      = toDimensionValue;
        ledgerMatrixReportTmpParameter.IsChineseVoucher = isChineseVoucher;
        ledgerMatrixReportTmpParameter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatrixReportTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the LedgerMatrixReportTmp temporary table.
    /// </summary>
    protected void insertMatrixReportTmpTable()
    {
        //Prepare Opening data
        this.prepareDataForOpening();

        //Prepare period transaction
        this.prepareDataForTransaction();

        //Insert hidden record to display begin and subtotal row of selected dimension which is not in selected period range
        this.insertHiddenRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataForOpening</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the related query to get data.
    /// </summary>
    private void prepareDataForOpening()
    {
        QueryRun                        queryRun;
        MainAccount                     mainAccount;
        LedgerMatrixTable_CN            ledgerMatrixTable;
        LedgerMatrixReportWithDim_CN    ledgerMatrixReportWithDim;

        boolean                         selectedDimensionRow;

        ledgerMatrixReportQuery = LedgerMatrixReportWithDimDP_CN::initQueryByDataContract(
            ledgerMatrixReportQuery,
            contract,
            false);

        queryRun = new QueryRun(ledgerMatrixReportQuery);
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(LedgerMatrixTable_CN)))
            {
                ledgerMatrixTable = queryRun.get(tableNum(LedgerMatrixTable_CN));
            }
            if (queryRun.changed(tableNum(MainAccount)))
            {
                mainAccount = queryRun.get(tableNum(MainAccount));
            }
            if (queryRun.changed(tableNum(LedgerMatrixReportWithDim_CN)))
            {
                ledgerMatrixReportWithDim = queryRun.get(tableNum(LedgerMatrixReportWithDim_CN));
            }

            if (ledgerMatrixReportWithDim.DisplayValue >= fromDimensionValue && ledgerMatrixReportWithDim.DisplayValue <= toDimensionValue)
            {
                selectedDimensionRow = true;
            }
            else
            {
                selectedDimensionRow = false;
            }

            //Set opening record into Set
            this.setContainerData(
                mainAccount,
                ledgerMatrixTable,
                ledgerMatrixReportWithDim,
                selectedDimensionRow,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the related query to get data.
    /// </summary>
    private void prepareDataForTransaction()
    {
        QueryRun                        queryRun;
        MainAccount                     mainAccount;
        LedgerMatrixTable_CN            ledgerMatrixTable;
        LedgerMatrixReportWithDim_CN    ledgerMatrixReportWithDim;

        boolean                         selectedDimensionRow;
        container                       lastTranscationContainer;

        ledgerMatrixReportQuery = LedgerMatrixReportWithDimDP_CN::initQueryByDataContract(
            ledgerMatrixReportQuery,
            contract,
            true);

        queryRun = new QueryRun(ledgerMatrixReportQuery);
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(LedgerMatrixTable_CN)))
            {
                ledgerMatrixTable = queryRun.get(tableNum(LedgerMatrixTable_CN));
            }
            if (queryRun.changed(tableNum(MainAccount)))
            {
                mainAccount = queryRun.get(tableNum(MainAccount));
            }
            if (queryRun.changed(tableNum(LedgerMatrixReportWithDim_CN)))
            {
                ledgerMatrixReportWithDim = queryRun.get(tableNum(LedgerMatrixReportWithDim_CN));
            }

            if (ledgerMatrixReportWithDim.DisplayValue >= fromDimensionValue && ledgerMatrixReportWithDim.DisplayValue <= toDimensionValue)
            {
                selectedDimensionRow = true;
            }
            else
            {
                selectedDimensionRow = false;
            }

            //Insert the details transaction on selected date
            lastTranscationContainer = this.insertDetailsTransaction(
                mainAccount,
                ledgerMatrixTable,
                ledgerMatrixReportWithDim,
                selectedDimensionRow,
                lastTranscationContainer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        //Initializes parameters
        this.initParameters();

        //Inserts LedgerMatrixReportTmpParameter_CN table data
        this.insertMatrixReportTmpParametersTable();

        //Inserts LedgerMatrixReportTmp_CN table data
        this.insertMatrixReportTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContainerData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set query record into Set
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account table date
    /// </param>
    /// <param name="_ledgerMatrixTable">
    /// The ledger matrix table data
    /// </param>
    /// <param name="_ledgerMatrixReportWithDim">
    /// The ledger matrix report with dimension view data
    /// </param>
    /// <param name="_selectedDimensionRow">
    /// Whether selected dimension
    /// </param>
    /// <param name="_selectedDate">
    /// Whether beginning date range or selected date range.
    /// </param>
    protected void setContainerData(
        MainAccount                     _mainAccount,
        LedgerMatrixTable_CN            _ledgerMatrixTable,
        LedgerMatrixReportWithDim_CN    _ledgerMatrixReportWithDim,
        int                             _selectedDimensionRow,
        boolean                         _selectedDate)
    {
        Description     dimensionName;
        DimensionValue  dimensionValue;
        container       con;

        if (_selectedDimensionRow)
        {
            dimensionValue  = _ledgerMatrixReportWithDim.DisplayValue;
            dimensionName   = DimensionAttributeValue::find(_ledgerMatrixReportWithDim.AttributeValueRecId).getName();
        }
        else
        {
            dimensionValue  = #otherDimensionNum;
        }

        //Container: {Main account record id, Main account num, Account name, Dimension value, Dimension name}
        con = [_mainAccount.RecId, _mainAccount.MainAccountId, _mainAccount.localizedName(), dimensionValue, dimensionName];

        if (_selectedDate)
        {
            detailsTransSet.add(con);
        }
        else
        {
            openingSet.add(con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// set "From Dimension" or "To Dimension "value they are empty
    /// </summary>
    /// <param name="_minOrMax">
    /// Judge From Dimension(Min Value) or To Dimension(Max Value)
    /// </param>
    /// <returns>
    /// Dimension Value
    /// </returns>
    private DimensionValue setDimensionValue(SelectionField _minOrMax)
    {
        Query       query;
        QueryRun    queryRun;
        Common      common;

        DimensionValue  dimensionValue;

        query = new Query();
        query.addDataSource(dimensionAttribute.BackingEntityType).addSelectionField(dimensionAttribute.ValueAttribute, _minOrMax);

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            common          = queryRun.get(dimensionAttribute.BackingEntityType);
            dimensionValue  = common.(dimensionAttribute.ValueAttribute);
        }

        return dimensionValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <param name="_selectedDateRange">
    /// Whether beginning date range or selected date range.
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    public static Query initQueryByDataContract(
        Query                                _query,
        LedgerMatrixReportWithDimContract_CN _contract,
        boolean                              _selectedDateRange = true)
    {
        LedgerMatrixId_CN       ledgerMatrixId;
        Name                    dimensionAttribute;
        FromDate                fromDate;
        ToDate                  toDate;
        RecId                   dimensionAttributeRecId;
        CurrentOperationsTax    postingLayer;

        ledgerMatrixId      = _contract.parmLedgerMatrixId();
        dimensionAttribute  = _contract.parmDimensionAttribute();
        fromDate            = _contract.parmFromDate();
        toDate              = _contract.parmToDate();
        postingLayer        = _contract.parmPostingLayer();

        [fromDate, toDate] = LedgerMatrixReportHelper_CN::getFromToDateForYear(fromDate, toDate);

        dimensionAttributeRecId = DimensionAttribute::findByLocalizedName(dimensionAttribute, false).RecId;

        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixTable_CN)),
            fieldNum(LedgerMatrixTable_CN, MatrixId)).value(ledgerMatrixId);
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, DimensionAttribute)).value(SysQuery::value(dimensionAttributeRecId));
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, AccountingDate)).value(_selectedDateRange
                ? queryRange(fromDate, toDate)
                : queryRange(dateNull(), fromDate - 1));
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, PostingLayer)).value(SysQuery::value(postingLayer));
        SysQuery::findOrCreateRange(
            _query.dataSourceTable(tableNum(ledgerMatrixReportWithDim_CN)),
            fieldNum(LedgerMatrixReportWithDim_CN, Ledger)).value(queryValue(Ledger::current()));

        if (LedgerParameters::isChineseVoucher_CN())
        {
            _query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)).addOrderByField(fieldNum(LedgerMatrixReportWithDim_CN, Voucher_CN));
        }
        else
        {
            _query.dataSourceTable(tableNum(LedgerMatrixReportWithDim_CN)).addOrderByField(fieldNum(LedgerMatrixReportWithDim_CN, Voucher));
        }

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>