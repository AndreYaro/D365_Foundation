<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostVendorInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts vendor invoices based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::VendorInvoice)]
public class DemoDataPostVendorInvoice extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVendorInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the vendor invoices to automatically post.
    /// </summary>
    /// <returns>The set of vendor invoices.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query findVendorInvoices()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(VendInvoiceInfoTable));

        // Static ranges
        qbds.addRange(fieldNum(VendInvoiceInfoTable, ParmId)).value(SysQuery::valueEmptyString());
        qbds.addRange(fieldNum(VendInvoiceInfoTable, Approved)).value(queryValue(NoYes::Yes));
        qbds.addRange(fieldNum(VendInvoiceInfoTable, ParmJobStatus)).value(queryValue(ParmJobStatus::Waiting));

        // Dynamic ranges
        str dateRange = DemoDataPostJournalHelper::buildDateRange(demoDataPostRunDocument.FromDocumentDate, demoDataPostRunDocument.ToDocumentDate);
        str idRange = DemoDataPostJournalHelper::buildIdentifierRange(fieldStr(VendInvoiceInfoTable, Num), demoDataPostRunDocument.FromDocumentId, demoDataPostRunDocument.ToDocumentId);

        if (dateRange)
        {
            qbds.addRange(fieldNum(VendInvoiceInfoTable, TransDate)).value(dateRange);
        }

        if (idRange)
        {
            qbds.addRange(fieldNum(VendInvoiceInfoTable, Num)).value(idRange);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post(Query _vendorQuery)
    {
        if (_vendorQuery == null)
        {
            throw error(strFmt("@DemoDataPost:ProcessDocumentsQueryFailure", demoDataPostRunDocument.RunId));
        }

        QueryRun vendorQueryRun = new QueryRun(_vendorQuery);

        DemoDataPostDocumentStatus status;
        DemoDataPostRunDocumentStatus documentStatus;
        PurchFormLetter_Invoice purchFormLetter;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        while (vendorQueryRun.next())
        {
            status = DemoDataPostDocumentStatus::Failed;

            vendInvoiceInfoTable = vendorQueryRun.get(tableNum(VendInvoiceInfoTable));

            documentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                vendInvoiceInfoTable.RecId,
                vendInvoiceInfoTable.TableId,
                vendInvoiceInfoTable.Num);

            try
            {
                if (vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
                {
                    LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(vendInvoiceInfoTable.PoolRecId, false);
                    purchFormLetter = PurchFormLetter_ApproveJournal::newApprovalFromSavedInvoice(vendInvoiceInfoTable, ledgerJournalTrans);
                    purchFormLetter.parmLedgerJournalTrans(ledgerJournalTrans);
                }
                else
                {
                    purchFormLetter = PurchFormLetter_Invoice::newFromSavedInvoice(vendInvoiceInfoTable);
                }

                purchFormLetter.purchParmUpdate(null);
                purchFormLetter.parmId('');
                purchFormLetter.initNewPurchParmUpdate();
                purchFormLetter.printFormLetter(false);
                purchFormLetter.usePrintManagement(false);
                purchFormLetter.printSalesFormLetter(false);
                purchFormLetter.printEUVatInvoice(false);
                purchFormLetter.proforma(false);
                purchFormLetter.reArrangeNow(false);

                purchFormLetter.update(vendInvoiceInfoTable, vendInvoiceInfoTable.Num);

                status = DemoDataPostDocumentStatus::Success;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
                {
                    retry;
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
            finally
            {
                ttsbegin;

                documentStatus.DocumentStatus = status;
                documentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                documentStatus.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        Query query = this.findVendorInvoices();

        this.post(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>