<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableChangeQtySched</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTableChangeQtySched extends RunBase
{
    DialogRunbase   dialog;

    DialogText      dialogText;

    DialogGroup     dgParent;
    DialogGroup     dgEstimate;
    DialogGroup     dgSchedule;

    DialogField     dfEstimate;
    DialogField     dfEstimateDefault;
    DialogField     dfEstimatePrompt;

    DialogField     dfSchedule;
    DialogField     dfScheduleDefault;
    DialogField     dfSchedulePrompt;

    ProdTable       prodTable;

    NoYes           estimateDefault, estimatePrompt;
    NoYes           scheduleDefault, schedulePrompt;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        estimateDefault,
        estimatePrompt,
        scheduleDefault,
        schedulePrompt
    #Endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description from the current class by calling the static description method on the
    ///    class if there is one.
    /// </summary>
    /// <returns>
    ///    The description from the current class.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to give a more precise description, for example, when you need some
    ///    internal variables to build the description text.The static <c>RunBase::description</c> method is
    ///    generally used to obtain the description of a class because you do not have to instantiate the
    ///    class to call it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        return strfmt("%1 : %2", fieldpname(ProdTable,ProdId), prodTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        boolean         showEstimate    = prodTable.CalcDate    != dateNull();
        boolean         showSchedule    = prodTable.SchedStatus != ProdSchedStatus::None;

        dialog = super();

        dialog.formBuildDesign().dialogSize(2);
        dialog.addText(strfmt("@SYS68110", fieldid2pname(prodTable.TableId, fieldnum(ProdTable, QtySched))));

        if (showSchedule)
        {
            dialog.addText("@SYS57924");
        }
        else
        {
            dialog.addText("@SYS57918");
        }

        if (showEstimate)
        {
            dgEstimate          = dialog.addGroup("@SYS38482");
            dgEstimate.columns(3);
            dfEstimate          = dialog.addFieldValue(enumstr(NoYes), NoYes::Yes, "@SYS84944");
            dfEstimateDefault   = dialog.addFieldValue(enumstr(NoYes), estimateDefault, "@SYS75582");
            dfEstimatePrompt    = dialog.addFieldValue(enumstr(NoYes), estimatePrompt, "@SYS13491");
        }

        if (showSchedule)
        {
            dgSchedule          = dialog.addGroup("@SYS21838");
            dgSchedule.columns(3);
            dfSchedule          = dialog.addFieldValue(enumstr(NoYes), NoYes::Yes, "@SYS69944");
            dfScheduleDefault   = dialog.addFieldValue(enumstr(NoYes), scheduleDefault, "@SYS75582");
            dfSchedulePrompt    = dialog.addFieldValue(enumstr(NoYes), schedulePrompt, "@SYS13491");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogActivateFields</Name>
				<Source><![CDATA[
    void dialogActivateFields()
    {
        if (dfEstimate)
        {
            dfEstimateDefault.allowEdit(dfEstimate.value());
            dfEstimatePrompt.allowEdit(dfEstimate.value());

            if (   dfEstimateDefault.value()
                && dfEstimatePrompt.value())
            {
                dfEstimateDefault.value(!estimateDefault);
                dfEstimatePrompt.value(!estimatePrompt);

                estimateDefault = dfEstimateDefault.value();
                estimatePrompt  = dfEstimatePrompt.value();
            }
            else if (   !dfEstimateDefault.value()
                     && !dfEstimatePrompt.value())
            {
                dfEstimateDefault.value(estimateDefault);
                dfEstimatePrompt.value(estimatePrompt);
            }

            if (dgSchedule)
            {
                if (!dfEstimate.value())
                {
                    dfSchedule.value(false);
                }

                dgSchedule.allowEdit(dfEstimate.value());

                dfScheduleDefault.allowEdit(dfSchedule.value());
                dfSchedulePrompt.allowEdit(dfSchedule.value());

                if (   dfScheduleDefault.value()
                    && dfSchedulePrompt.value())
                {
                    dfScheduleDefault.value(!scheduleDefault);
                    dfSchedulePrompt.value(!schedulePrompt);

                    scheduleDefault = dfScheduleDefault.value();
                    schedulePrompt  = dfSchedulePrompt.value();
                }
                else if (   !dfScheduleDefault.value()
                         && !dfSchedulePrompt.value())
                {
                    dfScheduleDefault.value(scheduleDefault);
                    dfSchedulePrompt.value(schedulePrompt);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld3_1_modified</Name>
				<Source><![CDATA[
    public boolean fld3_1_modified()  // fieldUpdateMethod
    {
        Object      control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld4_1_modified</Name>
				<Source><![CDATA[
    public boolean fld4_1_modified()  // fieldUpdateMethod
    {
        Object  control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld5_1_modified</Name>
				<Source><![CDATA[
    public boolean fld5_1_modified()  // fieldUpdateMethod
    {
        Object  control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld6_1_modified</Name>
				<Source><![CDATA[
    public boolean fld6_1_modified()  // fieldUpdateMethod
    {
        Object  control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld7_1_modified</Name>
				<Source><![CDATA[
    public boolean fld7_1_modified()  // fieldUpdateMethod
    {
        Object  control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld8_1_modified</Name>
				<Source><![CDATA[
    public boolean fld8_1_modified()  // fieldUpdateMethod
    {
        Object  control = dialog.formRun().controlCallingMethod();

        boolean ret = control.modified();

        if (ret)
        {
            this.dialogActivateFields();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dfEstimate)
        {
            estimateDefault = dfEstimateDefault.value();
            estimatePrompt  = dfEstimatePrompt.value();
        }

        if (dfSchedule)
        {
            scheduleDefault = dfScheduleDefault.value();
            schedulePrompt  = dfSchedulePrompt.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        estimatePrompt  = NoYes::Yes;
        schedulePrompt  = NoYes::Yes;
        estimateDefault = NoYes::No;
        scheduleDefault = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        prodTable = _prodTable;
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performActionFromDefaultValues</Name>
				<Source><![CDATA[
    void performActionFromDefaultValues()
    {
        if (this.mustReestimateFromDefaultValues())
        {
            prodTable.reestimate();
        }

        if (this.mustRescheduleFromDefaultValues())
        {
            prodTable.reschedule();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReestimateFromDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether production order must be re-estimated from default values.
    /// </summary>
    /// <returns>true if production order must be re-estimated; otherwise, false.</returns>
    protected boolean mustReestimateFromDefaultValues()
    {
        return dfEstimate
            && dfEstimate.value()
            && dfEstimateDefault.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRescheduleFromDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether production order must be re-scheduled from default values.
    /// </summary>
    /// <returns>true if production order must be re-scheduled; otherwise, false.</returns>
    protected boolean mustRescheduleFromDefaultValues()
    {
        return dfEstimate
            && dfEstimate.value()
            && dfSchedule
            && dfSchedule.value()
            && dfScheduleDefault.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performActionFromPrompt</Name>
				<Source><![CDATA[
    void performActionFromPrompt()
    {
        Args args = this.buildArgsForActionFromPrompt();

        this.performCostEstimationFromPrompt(args);

        this.performProdSchedulingFromPrompt(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildArgsForActionFromPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the <c>Args</c> instance to be used for performing actions from prompt.
    /// </summary>
    /// <returns>An <c>Args</c> instance to pass parameters with.</returns>
    protected Args buildArgsForActionFromPrompt()
    {
        Args args = new Args();

        args.record(prodTable);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEstimateCostFromPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether cost estimation must be performed from prompt.
    /// </summary>
    /// <returns>true if cost estimation must be performed from prompt; otherwise, false.</returns>
    protected boolean mustEstimateCostFromPrompt()
    {
        return dfEstimate
            && dfEstimate.value()
            && dfEstimatePrompt.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCostEstimationFromPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs cost estimation from prompt.
    /// </summary>
    /// <param name = "_args">An <c>Args</c> instance to pass parameters with.</param>
    protected void performCostEstimationFromPrompt(Args _args)
    {
        if (this.mustEstimateCostFromPrompt())
        {
            new MenuFunction(menuitemactionstr(ProdCostEstimation), MenuItemType::Action).run(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustScheduleProdFromPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether production order must be scheduled from prompt.
    /// </summary>
    /// <returns>true if production order must be scheduled from prompt; otherwise, false.</returns>
    protected boolean mustScheduleProdFromPrompt()
    {
        return dfSchedule
            && dfSchedule.value()
            && dfSchedulePrompt.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProdSchedulingFromPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs production order scheduling from prompt.
    /// </summary>
    /// <param name = "_args">An <c>Args</c> instance to pass parameters with.</param>
    protected void performProdSchedulingFromPrompt(Args _args)
    {
        if (this.mustScheduleProdFromPrompt())
        {
            if (prodTable.SchedStatus == ProdSchedStatus::JobScheduled)
            {
                new MenuFunction(menuitemactionstr(prodschedulingJob), MenuItemType::Action).run(_args);
            }
            else
            {
                new MenuFunction(menuitemactionstr(prodschedulingOperation), MenuItemType::Action).run(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        super();

        if (   this.validate()
            && this.prompt())
        {
            try
            {
                this.performActionFromDefaultValues();
                this.performActionFromPrompt();
            }

            catch (Exception::Deadlock)
            {
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (prodTable.status().isBefore(ProdStatus::CostEstimated))
        {
            ret = false;
        }

        if (prodTable.status().isAfterOrEqualTo(ProdStatus::ReportedFinished))
        {
            ret = checkFailed(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static prodTableChangeQtySched construct()
    {
        return new prodTableChangeQtySched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    public static prodTableChangeQtySched newProdTable(ProdTable _prodTable)
    {
        prodTableChangeQtySched prodTableChangeQtySched = prodTableChangeQtySched::construct();

        prodTableChangeQtySched.parmProdTable(_prodTable);

        return prodTableChangeQtySched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>