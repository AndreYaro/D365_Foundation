<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TsTimesheetValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyCurrency</Name>
				<Source><![CDATA[
    public static CurrencyCode getCompanyCurrency()
    {
        return Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserPreferredTimeZoneDate</Name>
				<Source><![CDATA[
    public static date getUserPreferredTimeZoneDate()
    {
        return DateTimeUtil::date(
                    DateTimeUtil::applyTimeZoneOffset(
                        DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone())
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReturnedLines</Name>
				<Source><![CDATA[
    public static boolean hasReturnedLines(TSTimesheetNbr _timesheetNbr)
    {
        TSTimesheetTable    timesheetTable;
        TSTimesheetLine     timesheetLine;
        boolean             ret = false;

        select firstonly RecId from timesheetLine
			exists join timesheetTable 
				where timesheetTable.TimesheetNbr == timesheetLine.TimesheetNbr &&
					timesheetTable.ApprovalStatus != TSAppStatus::Create &&
					timesheetLine.ApprovalStatus == TSAppStatus::Returned &&
					timesheetLine.TimesheetNbr == _timesheetNbr;

        if (timesheetLine.RecId != 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditableStatus</Name>
				<Source><![CDATA[
    public static boolean isEditableStatus(TSAppStatus _appStatus)
    {
        switch (_appStatus)
        {
            // Statuses which are not editable
            case TSAppStatus::Ledger:
            case TSAppStatus::Submitted:
            case TSAppStatus::All:
            case TSAppStatus::Pending:
            case TSAppStatus::Ready:
                return false;
            // Statuses which are editable
            case TSAppStatus::Approved:
            case TSAppStatus::Returned:
            case TSAppStatus::Create:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodFallsInRange</Name>
				<Source><![CDATA[
    private static boolean periodFallsInRange(date _periodFrom, date _periodTo, date rangeStart, date rangeEnd)
    {
        // Return true under any of these circumstances:

        // 1: The range is unbounded
        if (!rangeStart && !rangeEnd)
        {
            return true;
        }

        // 2: The start is unbounded, and the timesheet period range is before the end
        if (!rangeStart && (_periodTo <= rangeEnd))
        {
            return true;
        }

        // 3: The end is unbounded, and the timesheet period range is after the start
        if (!rangeEnd && (rangeStart <= _periodFrom))
        {
            return true;
        }

        // 4: The timesheet period range falls within the range
        if ((rangeStart <= _periodFrom) && (_periodTo <= rangeEnd))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetIsEditable</Name>
				<Source><![CDATA[
    public static boolean timesheetIsEditable(TSTimesheetNbr _timesheetNbr)
    {
        TSAppStatus         tsAppStatus;
        TSTimesheetTable    tsTimesheetTable;

        if (!_timesheetNbr)
        {
            return false;
        }

        tsTimesheetTable = TSTimesheetTable::find(_timesheetNbr);
        if(!tsTimesheetTable)
        {
            return false;
        }

        tsAppStatus = tsTimesheetTable.ApprovalStatus;

        return TSTimesheetValidation::isEditableStatus(tsAppStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasAccessToTimesheet</Name>
				<Source><![CDATA[
    public static boolean userHasAccessToTimesheet(TSTimesheetTable _tsTimesheetTable)
    {
        TSAppEmplSub    tsAppEmplSub;
        boolean         result = false;

        if (_tsTimesheetTable.TimesheetNbr && _tsTimesheetTable.Resource)
        {
            TSResourceRecId currentResourceRecId = ResourceFacade::findByCurrentWorker();
  
            // Users can always see their own reports
            result = currentResourceRecId == _tsTimesheetTable.Resource;

            if (!result)
            {
                // Check if document is Pending Approval then check if the current user is a valid Workflow Approver of the said document
                if (_tsTimesheetTable.ApprovalStatus == TSAppStatus::Pending)
                {
                    result = TSTimesheetValidation::userIsValidWorkflowApprover(_tsTimesheetTable);
                }
                else
                {
                    // Determine all delegate ranges for this user
                    int i				= 1;
                    Array startDates	= new Array(Types::Date);
                    Array endDates		= new Array(Types::Date);
                    UserId curentUserId = curUserId();

                    while select DateFrom, DateTo from tsAppEmplSub
						where tsAppEmplSub.TimesheetResource == _tsTimesheetTable.Resource
							&& tsAppEmplSub.DelegatedUser    == curentUserId
                    {
                        startDates.value(i,tsAppEmplSub.DateFrom);
                        endDates.value(i,tsAppEmplSub.DateTo);
                        i++;
                    }

                    // Return the variant that accepts these date ranges
                    result = TSTimesheetValidation::userHasAccessToTimesheetWithDates(
                                                                            _tsTimesheetTable,
                                                                            startDates,
                                                                            endDates,
                                                                            startDates.lastIndex());
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasAccessToTimesheetNumber</Name>
				<Source><![CDATA[
    public static boolean userHasAccessToTimesheetNumber(TSTimesheetNbr _timesheetNbr)
    {
        return TSTimesheetValidation::userHasAccessToTimesheet(TSTimesheetTable::find(_timesheetNbr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasAccessToTimesheetWithDates</Name>
				<Source><![CDATA[
    public static boolean userHasAccessToTimesheetWithDates(TSTimesheetTable _tsTimesheetTable, Array _startDates, Array _endDates, int _numDates)
    {
        if (!_startDates || !_endDates || !_numDates)
        {
            return false;
        }
        
		if (!_tsTimesheetTable.TimesheetNbr || !_tsTimesheetTable.Resource)
        {
            return false;
        }

        if (_startDates.lastIndex() < _numDates || _endDates.lastIndex() != _startDates.lastIndex())
        {
            return false;
        }

        // Users can always see their own reports
        if (_tsTimesheetTable.Resource == ResourceFacade::findByCurrentWorker())
        {
            return true;
        }

        // Determine whether a specific timesheet fits within the supplied date ranges.
        // To do this, examine each date range.  The first matching one means success.
        // If none match, this means failure.
		
		int i;
		date start, end;
		date periodFrom;
		date periodTo;

        for (i=1; i<=_numDates; i++)
        {
            start = any2date(_startDates.value(i));
            end = any2date(_endDates.value(i));
            periodFrom  = _tsTimesheetTable.PeriodFrom;
            periodTo    = _tsTimesheetTable.PeriodTo;

            if (TSTimesheetValidation::periodFallsInRange(periodFrom, periodTo, start, end))
            {
                return true;
            }
        }

        // If none of these conditions match for any of the date ranges, then
        // this report does not match and must not be included.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasCurrentDelegateAccessFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether user has delegated access to timesheet resource.
    /// </summary>
    /// <param name = "_resourceRecId">The resource record id.</param>
    /// <returns>True if the user has delegate access to timesheet user;otherwise false.</returns>
    public static boolean userHasCurrentDelegateAccessFor(ResourceRecId  _resourceRecId)
    {
        boolean result = false;

        ResourceRecId currentResourceRecId = ResourceFacade::findByCurrentWorker();

        result = currentResourceRecId == _resourceRecId;
 
        if (!result)
        {
            TSAppEmplSub    tsApplEmplSub;
            date			userPreferredTimezoneDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            UserId          currentUser = curUserId();

            while select DateFrom, DateTo from tsApplEmplSub
                where tsApplEmplSub.DelegatedUser == currentUser &&
                    tsApplEmplSub.TimesheetResource == _resourceRecId
            {
                if (TSTimesheetValidation::periodFallsInRange(userPreferredTimezoneDate, userPreferredTimezoneDate, tsApplEmplSub.DateFrom, tsApplEmplSub.DateTo))
                {
                    result = true;
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userIsValidWorker</Name>
				<Source><![CDATA[
    public static boolean userIsValidWorker()
    {
        ProjWorkerRecId worker = HcmWorker::findByPersonnelNumber(DirPersonUserEx::currentWorkerPersonnelNumber()).RecId;

        if (!worker)
            return false;
        if (!HcmWorker::find(worker))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userIsValidWorkflowApprover</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks whether user has approver access to timesheet resource.
    /// </summary>
    /// <param name = "_tsTimesheetTable">A <c>TSTimesheetTable</c> buffer.</param>
    /// <returns>True if the user has approver access to timesheet resource;otherwise false.</returns>
    public static boolean userIsValidWorkflowApprover(TSTimesheetTable _tsTimesheetTable)
    {
        if (WorkflowWorkItem::isUserApprovalOwner(_tsTimesheetTable))
        {
            return true;
        }

        TSTimesheetLine tsTimesheetLine;
        while select tsTimesheetLine
            where tsTimesheetLine.TimesheetNbr == _tsTimesheetTable.TimesheetNbr
                && tsTimesheetLine.ApprovalStatus == TSAppStatus::Pending
        {
            if (WorkflowWorkItem::isUserApprovalOwner(tsTimesheetLine))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>