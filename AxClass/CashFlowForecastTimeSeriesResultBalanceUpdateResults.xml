<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastTimeSeriesResultBalanceUpdateResults</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastTimeSeriesResultBalanceUpdateResults extends SysQueryUpdateRecordSet
{
    private const TableId ResultBalanceTableId = tableNum(CashFlowForecastTimeSeriesResultBalance);
    private const str ResultViewQueryTableName = tableStr(CashFlowTimeSeriesResultView);

    private TimeSeriesId timeSeriesId;

    private FieldId accountingCurrencyFieldToUpdate;
    private FieldId enterpriseCurrencyFieldToUpdate;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResultviewFieldName</Name>
				<Source><![CDATA[
    private str getResultviewFieldName(FieldName _resultViewField)
    {
        return strFmt('%1.%2', ResultViewQueryTableName, _resultViewField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFieldValueMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeFieldValueMap()
    {
        this.insertFieldValueMapPair(ResultBalanceTableId, accountingCurrencyFieldToUpdate, this.getResultviewFieldName(fieldStr(CashFlowTimeSeriesResultView, AccountingCurrencyAmount)));
        this.insertFieldValueMapPair(ResultBalanceTableId, enterpriseCurrencyFieldToUpdate, this.getResultviewFieldName(fieldStr(CashFlowTimeSeriesResultView, EnterpriseCurrencyAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query initQuery()
    {
        Query resultsBalanceQuery = new Query();
        QueryBuildDataSource qbdsJoinBalance = resultsBalanceQuery.addDataSource(ResultBalanceTableId);
        
        QueryBuildDataSource qbdsResultView = qbdsJoinBalance.addDataSource(tableNum(CashFlowTimeSeriesResultView), ResultViewQueryTableName);
        qbdsResultView.addLink(fieldNum(CashFlowForecastTimeSeriesResultBalance, Company), fieldNum(CashFlowTimeSeriesResultView, Company));
        qbdsResultView.addLink(fieldNum(CashFlowForecastTimeSeriesResultBalance, AccountingDate), fieldNum(CashFlowTimeSeriesResultView, AccountingDate));
        qbdsResultView.addLink(fieldNum(CashFlowForecastTimeSeriesResultBalance, MainAccount), fieldNum(CashFlowTimeSeriesResultView, MainAccount));
        qbdsResultView.addLink(fieldNum(CashFlowForecastTimeSeriesResultBalance, DefaultDimension), fieldNum(CashFlowTimeSeriesResultView, DefaultDimension));
        qbdsResultView.joinMode(JoinMode::InnerJoin);

        qbdsResultView.addRange(fieldNum(CashFlowTimeSeriesResultView, TimeSeriesId)).value(queryValue(timeSeriesId));

        return resultsBalanceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDataMethods</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean skipDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipEvents</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean skipEvents()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean skipDatabaseLog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInFlow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CashFlowForecastTimeSeriesResultBalanceUpdateResults newForInFlow()
    {
        CashFlowForecastTimeSeriesResultBalanceUpdateResults updator = new CashFlowForecastTimeSeriesResultBalanceUpdateResults();
        updator.timeSeriesId = CashflowInsightsParameterConstants::InflowTimeSeriesId;
        updator.accountingCurrencyFieldToUpdate = fieldNum(CashFlowForecastTimeSeriesResultBalance, AccountingCurrencyAmountIn);
        updator.enterpriseCurrencyFieldToUpdate = fieldNum(CashFlowForecastTimeSeriesResultBalance, EnterpriseCurrencyAmountIn);

        return updator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForOutFlow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CashFlowForecastTimeSeriesResultBalanceUpdateResults newForOutFlow()
    {
        CashFlowForecastTimeSeriesResultBalanceUpdateResults updator = new CashFlowForecastTimeSeriesResultBalanceUpdateResults();
        updator.timeSeriesId = CashflowInsightsParameterConstants::OutflowTimeSeriesId;
        updator.accountingCurrencyFieldToUpdate = fieldNum(CashFlowForecastTimeSeriesResultBalance, AccountingCurrencyAmountOut);
        updator.enterpriseCurrencyFieldToUpdate = fieldNum(CashFlowForecastTimeSeriesResultBalance, EnterpriseCurrencyAmountOut);

        return updator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>