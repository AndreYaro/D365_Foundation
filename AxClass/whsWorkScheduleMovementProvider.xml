<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkScheduleMovementProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Schedules a movement work and provides a state data to the main <c>WhsWorkExecuteDisplayMovementByTemplate</c> class.
/// </summary>
class whsWorkScheduleMovementProvider
{
    #WHSRF
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findWorkIdFromPassAndUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>WHSWorkId</c> reference for a specified <c>WHSRFPassthrough</c> object and a <c>WHSUserId</c> user.
    /// </summary>
    /// <param name="_pass">
    /// A specified <c>WHSRFPassthrough</c> object.
    /// </param>
    /// <param name="_userId">
    /// A specified <c>WHSUserId</c> user.
    /// </param>
    /// <param name="_workExecute">
    /// An instance of <c>WHSWorkExecute</c> class.
    /// </param>
    /// <returns>
    /// A <c>WHSWorkId</c> work id.
    /// </returns>
    public WHSWorkId findWorkIdFromPassAndUser(WHSRFPassthrough _pass, WHSUserId _userId, WhsWorkExecute _workExecute = WhsWorkExecute::construct())
    {
        WHSWorkLine workLine;
        WHSWorkId   workId;

        if (_pass.exists(#WorkId))
        {
            if (_pass.exists(#LineNum))
            {
                workLine = WHSWorkLine::find(_pass.lookup(#WorkId), _pass.parmLineNum());
            }
            else
            {
                workLine = _workExecute.getFirstOpenLine(_pass.lookup(#WorkId), _userId);
            }
        }

        if (workLine)
        {
            workId = workLine.WorkId;
        }

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a next work execution mode for a movement by template execution process.
    /// </summary>
    /// <returns>
    /// A  <c>WHSWorkExecuteMode</c> value.
    /// </returns>
    public WHSWorkExecuteMode getNextMode()
    {
        return WHSWorkExecuteMode::MovementByTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a next step for a movement by template execution process.
    /// </summary>
    /// <returns>
    /// A next step value.
    /// </returns>
    public int getNextStep()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleMovementFromPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a movement for a specified <c>WHSRFPassthrough</c> object and a <c>WHSUserId</c> user.
    /// </summary>
    /// <param name="_pass">
    /// A specified <c>WHSRFPassthrough</c> object.
    /// </param>
    /// <param name="_userId">
    /// A specified <c>WHSUserId</c> user.
    /// </param>
    /// <param name="_workExecute">
    /// An instance of <c>WHSWorkExecute</c> class.
    /// </param>
    public void scheduleMovementFromPass(WHSRFPassthrough _pass, WHSUserId _userId, WhsWorkExecute _workExecute = WhsWorkExecute::construct())
    {
        WHSWorkId   workId;

        workId = this.findWorkIdFromPassAndUser(_pass, _userId, _workExecute);

        if (workId)
        {
            WHSWorkTable::lockUnlockWork(workId, '');
            WHSWorkTable::resetWork(workId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePassData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a specified <c>WHSRFPassthrough</c> object with a state when the movement is scheduled.
    /// </summary>
    /// <param name="_pass">
    /// A specified <c>WHSRFPassthrough</c> object.
    /// </param>
    public void updatePassData(WHSRFPassthrough _pass)
    {
        if (!_pass.exists(#WorkComplete))
        {
            _pass.insert(#WorkComplete, 1);
        }

        if (_pass.exists(#WorkId))
        {
            _pass.remove(#WorkId);
        }

        if (_pass.exists(#ItemId))
        {
            _pass.remove(#ItemId);
        }

        if (_pass.exists(#LicensePlateId))
        {
            _pass.remove(#LicensePlateId);
        }

        if (_pass.exists(#WMSLocationId))
        {
            _pass.remove(#WMSLocationId);
        }

        if (_pass.exists(#RFQtyLabel))
        {
            _pass.remove(#RFQtyLabel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WHSWorkScheduleMovementProvider construct()
    {
        return new WHSWorkScheduleMovementProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>