<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryLineSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AdvancedLedgerEntryLineSourceDocLineItem</c> class provides the information to handle the
///    distributions and sub-ledger journal account entries for an advanced ledger entry line.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_AdvancedLedgerEntry), SourceDocumentLine_AdvancedLedgerEntry::AdvancedLedgerEntryLine)
]
public class AdvancedLedgerEntryLineSourceDocLineItem extends SourceDocumentLineItem
    implements AdvancedLedgerEntryISourceDocumentLineItem, SourceDocumentLineItemIProjectRevenue, SourceDocumentLineItemIProductQuantity, AccountingFinTagIDistributionTaggable
{
    AdvancedLedgerEntryLine     advancedLedgerEntryLine;
    AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return advancedLedgerEntryLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledgal entity for the line.
    /// </summary>
    /// <returns>
    ///     Always return the current company value.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount map for the line.
    /// </summary>
    /// <returns>A new <c>SourceDocumentAmountMap</c> instance.</returns>
    /// <remarks>
    /// This map is cached on the <c>SourceDocumentLineItem</c> class in the
    /// parmSourceDocumentAmountMap method. All consumers should use that method
    /// to retrieve the map, as it will call this method as necessary.
    /// </remarks>
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap;
        SourceDocumentAmount    advancedLedgerEntryAmount;
        Amount                  lineAmount;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        // Extended price source document monetary amount
        lineAmount = advancedLedgerEntryLine.AmountCurCredit != 0 ? -advancedLedgerEntryLine.AmountCurCredit:advancedLedgerEntryLine.AmountCurDebit;

        if (ProjCategory::find(advancedLedgerEntryLine.ProjCategoryId).CategoryType == ProjCategoryType::Revenue)
        {
            lineAmount = advancedLedgerEntryLine.AmountCurCredit != 0 ? advancedLedgerEntryLine.AmountCurCredit: -advancedLedgerEntryLine.AmountCurDebit;
        }

        advancedLedgerEntryAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), lineAmount, MonetaryAmount::ExtendedPrice, false);
        sourceDocumentAmountMap.insert(advancedLedgerEntryAmount);

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_AdvancedLedgerEntry), BusinessEvent_AdvancedLedgerEntry::AdvancedLedgerEntryPosting);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        advancedLedgerEntryLine     = _sourceDocumentLineImplementation;

        if (_additionalInformation && _additionalInformation.exists(tableNum(AdvancedLedgerEntryHeader)))
        {
            advancedLedgerEntryHeader = _additionalInformation.lookup(tableNum(AdvancedLedgerEntryHeader));
        }
        else
        {
            advancedLedgerEntryHeader   = advancedLedgerEntryLine.advancedLedgerEntryHeaderRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return advancedLedgerEntryHeader.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        return advancedLedgerEntryHeader.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataMainAccDerivation</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataMainAccDerivation()
    {
        SourceDocumentLineStateContainer sourceDocumentLineStateContainer;

        sourceDocumentLineStateContainer = super();

        sourceDocumentLineStateContainer += [this.parmQuantity()];

        return sourceDocumentLineStateContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplate</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplate parmDistributionTemplate()
    {
        return AccountingDistributionTemplate::find(advancedLedgerEntryLine.AccountingDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFundingSourceId</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmFundingSourceId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean ret;

        ret = super();

        return ret && advancedLedgerEntryHeader.isAccountingDistributionEditable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefinitionId</Name>
				<Source><![CDATA[
    public JournalizingDefinitionId parmJournalizingDefinitionId()
    {
        return advancedLedgerEntryLine.JournalizingDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        return advancedLedgerEntryLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return advancedLedgerEntryLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId()
    {
        return advancedLedgerEntryLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return advancedLedgerEntryLine.ProjActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return advancedLedgerEntryLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return advancedLedgerEntryLine.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return advancedLedgerEntryLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return advancedLedgerEntryLine.ProjTaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        ProjLinePropertyId  projLinePropertyId;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            if (advancedLedgerEntryLine.ProjLinePropertyId && ProjLineProperty::exist(advancedLedgerEntryLine.ProjLinePropertyId))
            {
                projLinePropertyId = advancedLedgerEntryLine.ProjLinePropertyId;
            }
            else
            {
                projLinePropertyId = ProjLinePropertySetup::findLinePropertyId(advancedLedgerEntryLine.ProjId, advancedLedgerEntryLine.ProjCategoryId);
            }
        }

        return projLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return advancedLedgerEntryLine.ProjSalesCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        SalesPrice    salesPrice;

        salesPrice = advancedLedgerEntryLine.SalesPrice;

        if (ProjCategory::find(advancedLedgerEntryLine.ProjCategoryId).CategoryType == ProjCategoryType::Revenue)
        {
            salesPrice = advancedLedgerEntryLine.AmountCurDebit ? advancedLedgerEntryLine.AmountCurDebit:
                            advancedLedgerEntryLine.AmountCurCredit;
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return advancedLedgerEntryLine.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return advancedLedgerEntryLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return advancedLedgerEntryLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        return advancedLedgerEntryLine.AmountCurDebit != 0 ? DebitCredit::Debit : DebitCredit::Credit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return advancedLedgerEntryLine.TransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return advancedLedgerEntryLine.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return advancedLedgerEntryLine.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTagsToAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies financial tags to a list of allocations for the current source document line.
    /// </summary>
    /// <param name = "_allocations">The list of allocations.</param>
    /// <returns>The list of allocations with financial tags applied.</returns>
    public LedgerDimensionAllocationList applyTagsToAllocations(LedgerDimensionAllocationList _allocations)
    {
        LedgerDimensionAllocationListEnumerator ledgerDimensionAllocationListEnumerator = _allocations.getEnumerator();
        LedgerDimensionAllocationList returnList = LedgerDimensionAllocationList::construct();

        while (ledgerDimensionAllocationListEnumerator.moveNext())
        {
            LedgerDimensionAllocation currentItem = ledgerDimensionAllocationListEnumerator.current();
            currentItem.parmFinTag(advancedLedgerEntryLine.FinTag);
            returnList.addEnd(currentItem);
        }

        return returnList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>