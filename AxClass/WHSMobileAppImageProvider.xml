<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppImageProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppImageProvider</c> class is the parent class for providing the requested image to the warehouse mobile app.
/// </summary>
public abstract class WHSMobileAppImageProvider
{
    protected WHSMobileAppAttachedImageDetails imageDetails;
    protected EcoResProductImageSize imageSize;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>imageExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if requested image exists.
    /// </summary>
    /// <returns>
    /// True if an image exists, false otherwise.
    /// </returns>
    public boolean imageExists()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the requested image to the warehouse mobile app.
    /// </summary>
    /// <returns>
    /// A <c>WHSMobileAppImage</c> object of the requested image.
    /// </returns>
    public abstract WHSMobileAppImage getImage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromImageDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cosntructs image provider class based on the Image type
    /// </summary>
    /// <param name = "_serializedImageDetails">
    /// A serialized string of <c>WHSMobileAppAttachedImageDetails</c> class.
    /// </param>
    /// <returns>
    ///  A <c>WHSMobileAppImageProvider</c> object.
    /// </returns>
    public static WHSMobileAppImageProvider newFromImageDetails(str _serializedImageDetails)
    {
        WHSMobileAppAttachedImageDetails currentImageDetails = new WHSMobileAppAttachedImageDetails();
        currentImageDetails.deserialize(_serializedImageDetails);
        var typeAttribute = new WHSMobileAppImageTypeAttribute(currentImageDetails.parmImageType());
        var imageProvider = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSMobileAppImageProvider), typeAttribute);
        if (imageProvider)
        {
            imageProvider.parmImageDetails(currentImageDetails);
        }
        return imageProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageSize</Name>
				<Source><![CDATA[
    public EcoResProductImageSize parmImageSize(EcoResProductImageSize _imageSize = imageSize)
    {
        imageSize = _imageSize;
        return imageSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThumbnailImageSize</Name>
				<Source><![CDATA[
    public void setThumbnailImageSize(boolean _thumbnail)
    {
        imageSize = _thumbnail ? EcoResProductImageSize::Thumbnail : EcoResProductImageSize::Normal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageDetails</Name>
				<Source><![CDATA[
    public WHSMobileAppAttachedImageDetails parmImageDetails(WHSMobileAppAttachedImageDetails _imageDetails = imageDetails)
    {
        imageDetails = _imageDetails;
        return imageDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProvidedImageTypeSymbol</Name>
				<Source><![CDATA[
    protected str getProvidedImageTypeSymbol(WHSMobileAppProvidedImageType _imagetype)
    {
        return enum2Symbol(enumNum(WHSMobileAppProvidedImageType), _imagetype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeContainerImage</Name>
				<Source><![CDATA[
    protected str encodeContainerImage(container _image)
    {
        BinData binData = new BinData();
        binData.setData(_image);
        return binData.base64Encode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompanyLogo</Name>
				<Source><![CDATA[
    private static boolean isCompanyLogo(WHSMobileAppImageType _imageType)
    {
        return _imageType == WHSMobileAppImageType::CompanyLogo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>