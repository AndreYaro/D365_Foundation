<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineMultiStartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQuarantineMultiStartUp extends InventQuarantineMulti implements BatchRetryable
{
    #LOCALMACRO.CurrentList
        standardParmQuarantineOrder
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formStr(InventQuarantineParmStartUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventParmQuarantineOrder)
    {
        InventParmQuarantineOrder inventParmQuarantineOrder = _inventParmQuarantineOrder;
        super(inventParmQuarantineOrder);
        inventParmQuarantineOrder.Type      = InventQuarantineStatus::Started;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(queryStr(InventQuarantineMultiSelectStartUp)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    void runUpdate(InventParmQuarantineOrder      _inventParmQuarantineOrder)
    {
        InventQuarantineUpdStartUp inventQuarantineUpdStartUp = InventQuarantineUpdStartUp::newParmBuffer(_inventParmQuarantineOrder);
        inventQuarantineUpdStartUp.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQuarantineMultiStartUp construct()
    {
        InventQuarantineMultiStartUp inventQuarantineMultiStartUp = new InventQuarantineMultiStartUp();

        return inventQuarantineMultiStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS58429" + ' - ' + "@SYS12531";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            InventQuarantineMultiStartUp inventQuarantineMultiStartUp = InventQuarantineMultiStartUp::construct();
            RunBaseMultiParm::initFromForm(inventQuarantineMultiStartUp, _args);

            if (! inventQuarantineMultiStartUp.prompt())
            {
                return;
            }

            inventQuarantineMultiStartUp.runOnServer();

            if (_args && _args.caller())
            {
                Object sysFormRun_doRe = _args.caller();
                sysFormRun_doRe.doFormCache(inventQuarantineMultiStartUp.packRecs());
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>