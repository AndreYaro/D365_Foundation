<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenTransBalancesManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendOpenTransBalancesManager</c> class manages an instance of the
///    <c>CustVendTmpOpenTransBalances</c> table.
/// </summary>
/// <remarks>
///    The class supports adding and removing records from the table, and updating the amount and exchange
///    rate fields of the table. It also supports calculating the balances for a record in the table and
///    calculating the sum of each of the balance fields for all records in the table.
/// </remarks>
class CustVendOpenTransBalancesManager
{
    CustVendTmpOpenTransBalances tmpBalances;
    RoundOff mstRoundOff;
    RoundOff displayRoundOff;

    Amount estimatedCashDiscBalanceDisplayTotal;
    Amount estimatedCashDiscBalanceMstTotal;
    Amount transBalanceDisplayTotal;
    Amount transBalanceMstTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into an instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_transAmount">
    ///    The transaction amount in the currency of the transaction.
    /// </param>
    /// <param name="_estimatedCashDiscAmount">
    ///    The estimated cash discount amount in the currency of the transaction.
    /// </param>
    /// <param name="_transCurrency">
    ///    The currency of the transaction.
    /// </param>
    /// <param name="_transDate">
    ///    The date the transaction was posted.
    /// </param>
    /// <param name="_transExchRate">
    ///    The exchange rate of the transaction at time of posting.
    /// </param>
    /// <param name="_transToMstExchRate">
    ///    The exchange rate for translating from the currency of the transaction to the monetary standard
    ///    (MST).
    ///    If no adjustment is required, use 100.
    /// </param>
    /// <param name="_transMstToDisplayMstExchRate">
    ///    The exchange rate for translating from the monetary standard (MST) of the transaction company to
    ///    the monetary standard (MST) of the company of the currency to be displayed. If no adjustment is
    ///    required, use 100.
    /// </param>
    /// <param name="_mstToDisplayExchRate">
    ///    The exchange rate for translating from the monetary standard (MST) to the currency to be
    ///    displayed.
    ///    If no adjustment is required, use 100.
    /// </param>
    /// <remarks>
    ///    To avoid penny differences due to rounding multiple times, calculated amounts are stored
    ///    unrounded.
    ///    The <paramref name="_transExchRate" />, <paramref name="_transToMstExchRate" /> and
    ///    <paramref name="_mstToDisplayExchRate" /> exchange rates are divided by 100 prior to being used in
    ///    any calculations to adjust for how they are stored as a multiple of 100.
    /// </remarks>
    public void add(CompanyId _transCompany,
        RefRecId _transOpenRecId,
        Amount _transAmount,
        Amount _estimatedCashDiscAmount,
        CurrencyCode _transCurrency,
        TransDate _transDate,
        ExchRate _transExchRate,
        ExchRate _transToMstExchRate,
        ExchRate _transMstToDisplayMstExchRate,
        ExchRate _mstToDisplayExchRate)
    {
        ;

        // Assert that the exchange rate values passed in are not zero as they may be used in calculations as divisors
        Debug::assert(_transExchRate != 0);
        Debug::assert(_transToMstExchRate != 0);
        Debug::assert(_transMstToDisplayMstExchRate != 0);
        Debug::assert(_mstToDisplayExchRate != 0);

        tmpBalances.clear();
        tmpBalances.TransCompany = _transCompany;
        tmpBalances.TransOpenRecId = _transOpenRecId;
        tmpBalances.TransAmount = _transAmount;
        tmpBalances.EstimatedCashDiscAmount = _estimatedCashDiscAmount;
        tmpBalances.TransCurrency = _transCurrency;
        tmpBalances.TransDate = _transDate;
        tmpBalances.TransExchRate = _transExchRate;
        tmpBalances.TransToMstExchRate = _transToMstExchRate;
        tmpBalances.TransMstToDisplayMstExchRate = _transMstToDisplayMstExchRate;
        tmpBalances.MstToDisplayExchRate = _mstToDisplayExchRate;
        tmpBalances = this.calculateBalances(tmpBalances);

        tmpBalances.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <paramref name="_updateTmpBalances" /> table buffer balance fields
    ///    (<c>TransBalanceMst</c>, <c>TransBalanceDisplay</c>, <c>EstimatedCashDiscBalanceMst</c>,
    ///    <c>EstimatedCashDiscBalanceDisplay</c>).
    /// </summary>
    /// <param name="_updateTmpBalances">
    ///    The table buffer that will be updated.
    /// </param>
    /// <returns>
    ///    The table buffer that has its balance fields updated.
    /// </returns>
    /// <remarks>
    ///    This method uses the <c>calculateTotal</c> method to calculate the balance fields. The balance
    ///    fields are rounded to the appropriate round off amount.
    /// </remarks>
    protected CustVendTmpOpenTransBalances calculateBalances(CustVendTmpOpenTransBalances _updateTmpBalances)
    {
        Amount oldAmount;
        Amount newAmount;

        //TransBalanceMst
        oldAmount = _updateTmpBalances.TransBalanceMst;
        transBalanceMstTotal -= oldAmount;
        _updateTmpBalances.TransBalanceMst = this.calculateTotal(tmpBalances.TransAmount,
                                        tmpBalances.EstimatedCashDiscAmount,
                                        tmpBalances.TransToMstExchRate,
                                        tmpBalances.TransMstToDisplayMstExchRate,
                                        100);
        _updateTmpBalances.TransBalanceMst = round(_updateTmpBalances.TransBalanceMst, mstRoundOff);
        newAmount = _updateTmpBalances.TransBalanceMst;
        transBalanceMstTotal += newAmount;

        //TransBalanceDisplay
        oldAmount = _updateTmpBalances.TransBalanceDisplay;
        transBalanceDisplayTotal -= oldAmount;
        _updateTmpBalances.TransBalanceDisplay = this.calculateTotal(tmpBalances.TransAmount,
                                        tmpBalances.EstimatedCashDiscAmount,
                                        tmpBalances.TransToMstExchRate,
                                        tmpBalances.TransMstToDisplayMstExchRate,
                                        tmpBalances.MstToDisplayExchRate);
        _updateTmpBalances.TransBalanceDisplay = round(_updateTmpBalances.TransBalanceDisplay, displayRoundOff);
        newAmount = _updateTmpBalances.TransBalanceDisplay;
        transBalanceDisplayTotal += newAmount;

        //EstimatedCashDiscBalanceMst
        oldAmount = _updateTmpBalances.EstimatedCashDiscBalanceMst;
        estimatedCashDiscBalanceMstTotal -= oldAmount;
        _updateTmpBalances.EstimatedCashDiscBalanceMst = this.calculateTotal(0,
                                        tmpBalances.EstimatedCashDiscAmount,
                                        tmpBalances.TransToMstExchRate,
                                        tmpBalances.TransMstToDisplayMstExchRate,
                                        100);
        _updateTmpBalances.EstimatedCashDiscBalanceMst = round(_updateTmpBalances.EstimatedCashDiscBalanceMst, mstRoundOff);
        newAmount = _updateTmpBalances.EstimatedCashDiscBalanceMst;
        estimatedCashDiscBalanceMstTotal += newAmount;

        //EstimatedCashDiscBalanceDisplay
        oldAmount = _updateTmpBalances.EstimatedCashDiscBalanceDisplay;
        estimatedCashDiscBalanceDisplayTotal -= oldAmount;
        _updateTmpBalances.EstimatedCashDiscBalanceDisplay = this.calculateTotal(0,
                                        tmpBalances.EstimatedCashDiscAmount,
                                        tmpBalances.TransToMstExchRate,
                                        tmpBalances.TransMstToDisplayMstExchRate,
                                        tmpBalances.MstToDisplayExchRate);
        _updateTmpBalances.EstimatedCashDiscBalanceDisplay = round(_updateTmpBalances.EstimatedCashDiscBalanceDisplay, displayRoundOff);
        newAmount = _updateTmpBalances.EstimatedCashDiscBalanceDisplay;
        estimatedCashDiscBalanceDisplayTotal += newAmount;

        return _updateTmpBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total, based on the specified amounts and exchange rates.
    /// </summary>
    /// <param name="_transAmount">
    ///    The amount to be adjusted.
    /// </param>
    /// <param name="_discAmount">
    ///    The amount to subtract from the <paramref name="_transAmount" />.
    /// </param>
    /// <param name="_toMstExchRate">
    ///    The exchange rate to adjust the result of the amounts. If no adjustment is required, use 100.
    /// </param>
    /// <param name="_toDisplayMstExchRate">
    ///    The exchange rate to adjust the result of the amounts. If no adjustment is required, use 100.
    /// </param>
    /// <param name="_toDisplayExchRate">
    ///    The exchange rate to adjust the result of the amounts. If no adjustment is required, use 100.
    /// </param>
    /// <returns>
    ///    The result of the calculation.
    /// </returns>
    /// <remarks>
    ///    The total equals the <paramref name="_transAmount" /> minus the <paramref name="_discAmount" />
    ///    multiplied by the <paramref name="_toMstExchRate" />, the <paramref name="_toDisplayMstExchRate" />
    ///    and the <paramref name="_toDisplayExchRate" /> exchange rates.
    ///    The exchange rates are all divided by 100 as part of the calculation to adjust for how they are stored
    ///    in the database.
    /// </remarks>
    protected Amount calculateTotal(Amount _transAmount,
        Amount _discAmount,
        ExchRate _toMstExchRate,
        ExchRate _toDisplayMstExchRate,
        ExchRate _toDisplayExchRate)
    {
        Amount balance;

        balance =
            (_transAmount - _discAmount)
            * CurrencyExchange::calculateAmount(1, _toMstExchRate)
            * CurrencyExchange::calculateAmount(1, _toDisplayMstExchRate)
            * CurrencyExchange::calculateAmount(1, _toDisplayExchRate);

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTransOpenRecIdsMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a map that has <c>int64</c> keys that contain the <c>TransOpenRecId</c> for each record in the
    ///    instance of the <c>CustVendTmpOpenTransBalances</c> table and <c>real</c> values initialized to 0.
    /// </summary>
    /// <returns>
    ///    The map created from the temporary table instance.
    /// </returns>
    public Map getAllTransOpenRecIdsMap()
    {
        Map transOpenRecIds;
        ;

        transOpenRecIds = new Map(Types::Int64, Types::Real);

        while select tmpBalances
        {
            // Add TransOpenRecId to map
            transOpenRecIds.insert(tmpBalances.TransOpenRecId, 0);
        }

        return transOpenRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets class variables for the <c>CustVendOpenTransBalancesManager</c> class.
    /// </summary>
    /// <param name="_mstRoundOffAmount">
    ///    The rounding amount that is used to round the result of the <c>sumTransBalanceMst</c> and
    ///    <c>sumEstimatedCashDiscBalanceMst</c> methods.
    /// </param>
    /// <param name="_displayRoundOffAmount">
    ///    The rounding amount that is used to round the result of the <c>sumTransBalanceDisplay</c> and
    ///    <c>sumEstimatedCashDiscBalancesDisplay</c> methods.
    /// </param>
    protected void new(RoundOff _mstRoundOffAmount, RoundOff _displayRoundOffAmount)
    {
        ;

        mstRoundOff =_mstRoundOffAmount;
        displayRoundOff = _displayRoundOffAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the record that contains the specified <c>TransOpenRecId</c> from an instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The TransCompay of the record to be removed from the temporary table.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>TransOpenRecId</c> value to be removed from the temporary table.
    /// </param>
    public void remove(CompanyId _transCompany, RefRecId _transOpenRecId)
    {
        while select tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId
        {
            estimatedCashDiscBalanceDisplayTotal -= tmpBalances.EstimatedCashDiscBalanceDisplay;
            estimatedCashDiscBalanceMstTotal -= tmpBalances.EstimatedCashDiscBalanceMst;
            transBalanceDisplayTotal -= tmpBalances.TransBalanceDisplay;
            transBalanceMstTotal -= tmpBalances.TransBalanceMst;
        }

        delete_from tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all records from the instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    public void removeAll()
    {
        estimatedCashDiscBalanceDisplayTotal = 0;
        estimatedCashDiscBalanceMstTotal = 0;
        transBalanceDisplayTotal = 0;
        transBalanceMstTotal = 0;

        delete_from tmpBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllDisplayMstToDisplayExchRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the exchange rate used to translate from the monetary standard (MST) currency to the display
    ///    currency for each <c>CustVendTmpOpenTransBalances</c> record.
    /// </summary>
    /// <param name="_newDisplayCompany">
    ///    The company of the new display currency.
    /// </param>
    /// <param name="_newDisplayCurrency">
    ///    The new display currency.
    /// </param>
    /// <remarks>
    ///    If the <c>TransCurrency</c> of the record is the same as the <paramref name="_newDisplayCurrency"
    ///    />, the reciprocal of the <c>TransToMstExchRate</c> over <c>TransMstToDisplayMstExchRate</c> is
    ///    used. Otherwise, the exchange rate for the <c>TransDate</c> is found for the <paramref
    ///    name="_newDisplayCurrency" />. All balance fields are recalculated by using the
    ///    <c>calculateBalances</c> method.
    /// </remarks>
    public void resetAllDisplayMstToDisplayExchRates(CompanyId _newDisplayCompany, CurrencyCode _newDisplayCurrency)
    {
        ExchRate lookupExchRate;
        Map exchRates;

        // Set up map to track rates for dates of transactions in the temp table
        exchRates = new Map(Types::Date, Types::Real);

        changecompany(_newDisplayCompany)
        {
            while select TransDate from tmpBalances group by TransDate where tmpBalances.TransCurrency != _newDisplayCurrency
            {
                // Get reciprocal exchange rate for display currency
                lookupExchRate = ExchangeRateHelper::getCrossRateReciprocal_Static(Ledger::current(), _newDisplayCurrency, tmpBalances.TransDate);
                exchRates.insert(tmpBalances.TransDate, lookupExchRate);
            }
        }

        // Update temp table
        while select forupdate tmpBalances
        {
            if (tmpBalances.TransCurrency == _newDisplayCurrency)
            {
                // In the case where the display currency is the same as the transaction currency, the display currency amount
                // should be directly set to the transaction currency amount. To do this, cancel out all rates that have been
                // applied so far.
                tmpBalances.MstToDisplayExchRate = CurrencyEuroDenomination::prepareExchangeRateForStorage_Static(
                    ExchangeRateCalculation::calculateReciprocalExchangeRate(tmpBalances.TransToMstExchRate * tmpBalances.TransMstToDisplayMstExchRate),
                    ExchangeRateDisplayFactor::One);

                tmpBalances = this.calculateBalances(tmpBalances);
                tmpBalances.update();
            }
            else
            {
                // Set to exchange rate looked up & recalculate display balances
                lookupExchRate = exchRates.lookup(tmpBalances.TransDate);
                tmpBalances.MstToDisplayExchRate = lookupExchRate;
                tmpBalances = this.calculateBalances(tmpBalances);
                tmpBalances.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAllTransToTransMstExchRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the exchange rate that is used to translate from the currency of the transaction to the
    ///    monetary standard (MST) currency for each <c>CustVendTmpOpenTransBalances</c> record.
    /// </summary>
    /// <param name="_newDisplayCurrency">
    ///    The new display currency.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated by using the <c>calculateBalances</c> method.
    /// </remarks>
    public void resetAllTransToTransMstExchRates(CurrencyCode _newDisplayCurrency = '')
    {
        ;

        // Update temp table
        while select forupdate tmpBalances
        {
            if (tmpBalances.TransCurrency == _newDisplayCurrency)
            {
                // When the transaction currency is the same as the display currency, the mst balance
                // will be calculated using the exchange rate from the display currency to the accounting
                // currency of the display company.  This is handled in the updateAllTransMstToDisplayMstExchRates
                // method.  The rate of 100 ensures that no currency calculation occurs before that time.
                tmpBalances.TransToMstExchRate = 100;
            }
            else
            {
                // Set trans to MST exchange rate to transaction rate
                tmpBalances.TransToMstExchRate = tmpBalances.TransExchRate;
            }

            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumEstimatedCashBalanceDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the <c>EstimatedCashDiscBalanceDisplay</c> field for all records in the instance of
    ///    the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <returns>
    ///    The result of the calculation.
    /// </returns>
    public Amount sumEstimatedCashBalanceDisplay()
    {
        return estimatedCashDiscBalanceDisplayTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumEstimatedCashDiscBalanceMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the <c>EstimatedCashDiscBalanceMst</c> field for all records in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <returns>
    ///    The result of the calculation.
    /// </returns>
    public Amount sumEstimatedCashDiscBalanceMst()
    {
        return estimatedCashDiscBalanceMstTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransBalanceDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the <c>TransBalanceDisplay</c> field for all records in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <returns>
    ///    The result of the calculation.
    /// </returns>
    public Amount sumTransBalanceDisplay()
    {
        return transBalanceDisplayTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransBalanceMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the <c>TransBalanceMst</c> field for all records in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <returns>
    ///    The result of the calculation.
    /// </returns>
    public Amount sumTransBalanceMst()
    {
        return transBalanceMstTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllDisplayMstToDisplayExchRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>MstToDisplayExchRate</c> field to the value of the <paramref
    ///    name="_updateMstToDisplayExchRate" /> parameter for each record in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_newDisplayCurrency">
    ///    The new display currency.
    /// </param>
    /// <param name="_updateDisplayMstToDisplayExchRate">
    ///    The exchange rate used for updating the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateAllDisplayMstToDisplayExchRates(
        CurrencyCode _newDisplayCurrency,
        ExchRate _updateDisplayMstToDisplayExchRate)
    {
        // Update temp table
        while select forupdate tmpBalances
        {
            // Set new exchange rate & recalculate display balances
            if (tmpBalances.TransCurrency == _newDisplayCurrency)
            {
                // In the case where the display currency is the same as the transaction currency, the display currency amount
                // should be directly set to the transaction currency amount. To do this, cancel out all rates that have been
                // applied so far.
                tmpBalances.MstToDisplayExchRate = CurrencyEuroDenomination::prepareExchangeRateForStorage_Static(
                    ExchangeRateCalculation::calculateReciprocalExchangeRate(tmpBalances.TransToMstExchRate * tmpBalances.TransMstToDisplayMstExchRate),
                    ExchangeRateDisplayFactor::One);
            }
            else
            {
                tmpBalances.MstToDisplayExchRate = _updateDisplayMstToDisplayExchRate;
            }

            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllTransMstToDisplayMstExchRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransMstToDisplayMstExchRate</c> field for each record in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_newDisplayCompany">
    ///    The company of the new display currency.
    /// </param>
    /// <param name="_newDisplayMstCurrency">
    ///    The standard currency of the company of the new display currency.
    /// </param>
    /// <param name="_newExchRateDate">
    ///    The date to be used to find the exchange rate; optional.
    /// </param>
    /// <param name="_newDisplayCurrency">
    ///    The currency in which the balance fields will be displayed; optional.
    /// </param>
    /// <param name="_newDisplayExchRate">
    ///    The exchange rate for the display currency in from the display company; optional.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateAllTransMstToDisplayMstExchRates(
        CompanyId _newDisplayCompany,
        CurrencyCode _newDisplayMstCurrency,
        TransDate _newExchRateDate = dateNull(),
        CurrencyCode _newDisplayCurrency = '',
        ExchRate _newDisplayExchRate = 0)
    {
        Map companyCurrencyExchRates;
        ExchRate companyCurrencyExchRate;
        TransDate dateToCalculateRate;

        companyCurrencyExchRates = new Map(Types::String, Types::Real);

        dateToCalculateRate = _newExchRateDate == dateNull() ? tmpBalances.TransDate : _newExchRateDate;

        // Get transaction company currencies & exchange rates
        while select TransCompany, TransDate from tmpBalances group by TransCompany
        {
            // Find exchange rate in the transaction company for the new display currency
            changecompany(tmpBalances.TransCompany)
            {
                companyCurrencyExchRate = ExchangeRateHelper::getCrossRateReciprocal_Static(Ledger::current(), _newDisplayMstCurrency, dateToCalculateRate);
            }

            companyCurrencyExchRates.insert(tmpBalances.TransCompany, companyCurrencyExchRate);
        }

        // Update all TransMstToDisplayMstExchRate & recalculate balances
        while select forupdate tmpBalances
        {
            if (tmpbalances.TransCurrency == _newDisplayCurrency)
            {
                if (_newDisplayExchRate)
                {
                    // the accounting currency balance will be calculated using the exchange rate from the
                    // display / primary payment currency to the accounting currency of the display
                    // company. this rate is provided on the primary payment and should be used.
                    tmpbalances.TransMstToDisplayMstExchRate = _newDisplayExchRate;
                }
                else
                {
                    // When the transaction currency is the same as the display currency, the mst balance
                    // will be calculated using the exchange rate from the display currency to the accounting
                    // currency of the display company.
                    changecompany(_newDisplayCompany)
                    {
                        tmpbalances.TransMstToDisplayMstExchRate = ExchangeRateHelper::getCrossRate_Static(Ledger::current(), _newDisplayCurrency, dateToCalculateRate);
                    }
                }
            }
            else
            {
                tmpBalances.TransMstToDisplayMstExchRate = companyCurrencyExchRates.lookup(tmpBalances.TransCompany);
            }

            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllTransToTransMstExchRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransToMstExchRate</c> field for each record in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_newDisplayCurrency">
    ///    The currency in which the balance fields will be displayed.
    /// </param>
    /// <param name="_exchRateDate">
    ///    The date to be used to find the exchange rate.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateAllTransToTransMstExchRates(CurrencyCode _newDisplayCurrency,
        TransDate _exchRateDate)
    {
        // Update temp table
        while select forupdate tmpBalances
        {
            if (tmpBalances.TransCurrency == _newDisplayCurrency)
            {
                // When the transaction currency is the same as the display currency, the mst balance
                // will be calculated using the exchange rate from the display currency to the accounting
                // currency of the display company.  This is handled in the updateAllTransMstToDisplayMstExchRates
                // method.  The rate of 100 ensures that no currency calculation occurs before that time.
                tmpBalances.TransToMstExchRate = 100;
            }
            else
            {
                // Look up the exchange rate in the transaction's company
                changecompany(tmpBalances.TransCompany)
                {
                    tmpBalances.TransToMstExchRate = ExchangeRateHelper::getCrossRate_Static(Ledger::current(), tmpBalances.TransCurrency, _exchRateDate);
                }
            }

            this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisplayMstToDisplayExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>MstToDisplayExchRate</c> field to the value of the <paramref
    ///    name="_updateMstToDisplayExchRate" /> parameter for the record that corresponds to the <paramref
    ///    name="_transOpenRecId" /> parameter in the instance of the <c>CustVendTmpOpenTransBalances</c>
    ///    table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_updateMstToDisplayExchRate">
    ///    The exchange rate used for updating the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateDisplayMstToDisplayExchRate(CompanyId _transCompany, RefRecId _transOpenRecId, ExchRate _updateMstToDisplayExchRate)
    {
        ;

        select firstonly forupdate tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.MstToDisplayExchRate = _updateMstToDisplayExchRate;
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimatedCashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>EstimatedCashDiscAmount</c> field to the value of the <paramref
    ///    name="_updateEstimatedCashDiscAmount" /> for the record that corresponds to the <paramref
    ///    name="_transOpenRecId" /> in the instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_updateEstimatedCashDiscAmount">
    ///    The amount used for updating the temporary table record.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateEstimatedCashDiscAmount(CompanyId _transCompany, RefRecId _transOpenRecId, Amount _updateEstimatedCashDiscAmount)
    {
        ;

        select firstonly forupdate tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.EstimatedCashDiscAmount = _updateEstimatedCashDiscAmount;
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMstToDisplayExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>MstToDisplayExchRate</c> field to the value of the <paramref
    ///    name="_updateMstToDisplayExchRate" /> for the record that corresponds to the <paramref
    ///    name="_transOpenRecId " />in the instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_updateMstToDisplayExchRate">
    ///    The exchange rate used to update the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateMstToDisplayExchRate(RefRecId _transOpenRecId, ExchRate _updateMstToDisplayExchRate)
    {
        ;

        select firstonly forupdate tmpBalances where tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.MstToDisplayExchRate = _updateMstToDisplayExchRate;
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoundOffAmountDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the rounding amount specified for amounts in the display currency.
    /// </summary>
    /// <param name="_updateRoundOffAmountDisplay">
    ///    The rounding amount used to round the balances in the display currency.
    /// </param>
    /// <remarks>
    ///    Recalculates the balances for each record in the <c>CustVendTmpOpenTransBalances</c> table.
    /// </remarks>
    public void updateRoundOffAmountDisplay(RoundOff _updateRoundOffAmountDisplay)
    {
        ;

        displayRoundOff = _updateRoundOffAmountDisplay;

        while select forupdate tmpBalances
        {
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransAmount</c> field to the value of the <paramref name="_updateTransAmount" />for
    ///    the record that corresponds to the <paramref name="_transOpenRecId" /> in the instance of the
    ///    <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_updateTransAmount">
    ///    The amount used to update the temporary table record.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateTransAmount(CompanyId _transCompany, RefRecId _transOpenRecId, Amount _updateTransAmount)
    {
        ;

        select firstonly forupdate tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.TransAmount = _updateTransAmount;
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransMstToDisplayMstExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransMstToDisplayMstExchRate</c> field to the value of the <paramref
    ///    name="_updateTransMstToDisplayMstExchRate" /> parameter for the record that corresponds to the
    ///    <paramref name="_transCompany" /> parameter and the <paramref name="_transOpenRecId" /> parameter
    ///    in the instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> of the associated open transaction record.
    /// </param>
    /// <param name="_updateTransMstToDisplayMstExchRate">
    ///    The exchange rate used for updating the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated by using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateTransMstToDisplayMstExchRate(CompanyId _transCompany, RefRecId _transOpenRecId, ExchRate _updateTransMstToDisplayMstExchRate)
    {
        ;

        select firstonly forupdate tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.TransMstToDisplayMstExchRate = _updateTransMstToDisplayMstExchRate;
            tmpBalances = this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransToMstExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransToMstExchRate</c> field to the value of the <paramref
    ///    name="_updateTransToMstExchRate" /> for the record that corresponds to the <paramref
    ///    name="_transOpenRecId" /> in the instance of the <c>CustVendTmpOpenTransBalances</c> table.
    /// </summary>
    /// <param name="_transOpenRecId">
    ///    The <c>RecId</c> reference to the associated open transaction record.
    /// </param>
    /// <param name="_updateTransToMstExchRate">
    ///    The exchange rate used to update the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateTransToMstExchRate(RefRecId _transOpenRecId, ExchRate _updateTransToMstExchRate)
    {
        ;

        select firstonly forupdate tmpBalances where tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.TransToMstExchRate = _updateTransToMstExchRate;
            this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransToTransMstExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>TransToMstExchRate</c> field to the value of the <paramref
    ///    name="_updateTransToMstExchRate" /> parameter for the record that corresponds to the <paramref
    ///    name="_transOpenRecId" /> parameter in the instance of the <c>CustVendTmpOpenTransBalances</c>
    ///    table.
    /// </summary>
    /// <param name="_transCompany">
    ///    The company of the associated open transaction record.
    /// </param>
    /// <param name="_transOpenRecId">
    ///    The Record ID of the open transaction record.
    /// </param>
    /// <param name="_updateTransToMstExchRate">
    ///    The exchange rate that is used for updating the temporary table records.
    /// </param>
    /// <remarks>
    ///    All balance fields are recalculated by using the <c>calculateBalances</c> method.
    /// </remarks>
    public void updateTransToTransMstExchRate(CompanyId _transCompany, RefRecId _transOpenRecId, ExchRate _updateTransToMstExchRate)
    {
        ;

        select firstonly forupdate tmpBalances
            where tmpBalances.TransCompany == _transCompany &&
            tmpBalances.TransOpenRecId == _transOpenRecId;

        if (tmpBalances.RecId != 0)
        {
            tmpBalances.TransToMstExchRate = _updateTransToMstExchRate;
            this.calculateBalances(tmpBalances);
            tmpBalances.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>CustVendOpenTransBalancesManager</c> class.
    /// </summary>
    /// <param name="_mstRoundOffAmount">
    ///    The rounding amount used to round the balances in the monetary standard (MST) currency.
    /// </param>
    /// <param name="_displayRoundOffAmount">
    ///    The rounding amount used to round the balances in the display currency.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CustVendOpenTransBalancesManager</c> class.
    /// </returns>
    public static CustVendOpenTransBalancesManager construct(RoundOff _mstRoundOffAmount, RoundOff _displayRoundOffAmount)
    {
        ;

        return new CustVendOpenTransBalancesManager(_mstRoundOffAmount, _displayRoundOffAmount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
