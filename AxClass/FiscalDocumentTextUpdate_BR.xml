<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTextUpdate_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalDocumentTextUpdate_BR</c> provides functions to update text in Fiscal Document.
/// </summary>
public class FiscalDocumentTextUpdate_BR
{
    Common      mainRecord;
    DocuTypeId  docuTypeId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a Fiscal document text (records <c>DocuRef</c> and <c>DocuRefExt_BR</c>) to any <c>Common</c> record.
    /// </summary>
    /// <param name="_fromTextID">
    /// The Text ID from a Fiscal document source textParmData (table <c>FiscalDocumentSourceText_BR</c>).
    /// </param>
    /// <param name="_newType">
    /// The type (<c>FiscalDocumentTextType_BR</c>) to be assigned to the new Fiscal document text.
    /// </param>
    /// <returns>
    /// The newly created and inserted <c>DocuRefExt_BR</c> buffer.
    /// </returns>
    /// <remarks>
    /// The input params can be null or empty (no records will be inserted).
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown when the given Fiscal document source textParmData ID cannot be found at table <c>FiscalDocumentSourceText_BR</c>.
    /// </exception>
    public DocuRefExt_BR add(   FiscalDocumentTextID_BR     _fromTextID,
                                FiscalDocumentTextType_BR   _newType)
    {
            DocuRef                                 docuRef;
            DocuRefExt_BR                           docuRefExt;
            FiscalDocumentSourceText_BR             sourceText;
            FiscalDocSourceTextReferenceProcess_BR  sourceTextReferenceProcess;
            FiscalDocumentReferencedProcess_BR      fiscalDocumentReferencedProcess;

            if (docuTypeId
                && mainRecord
                && _fromTextID)
            {
                sourceText = FiscalDocumentSourceText_BR::findByTextID(_fromTextID);

                if (!sourceText)
                {
                    // Text ID %1 not found when copying %2 Fiscal document text to table %3
                    throw error(strFmt( "@GLS63742",
                                         _fromTextID,
                                         enum2str(_newType),
                                         tableId2pname(mainRecord.TableId)));
                }

                ttsBegin;

                docuRef.RefTableId      = mainRecord.TableId;
                docuRef.RefRecId        = mainRecord.RecId;
                docuRef.RefCompanyId    = mainRecord.dataAreaId;
                docuRef.TypeId          = docuTypeId;
                docuRef.Name           = sourceText.Name;
                docuRef.Notes          = sourceText.Notes;
                docuRef.Restriction    = sourceText.Restriction;
                docuRef.insert();

                docuRefExt.DocuRef      = docuRef.RecId;
                docuRefExt.FiscalInformation  = sourceText.FiscalInformation;
                docuRefExt.TextID             = sourceText.TextID;
                docuRefExt.Type         = _newType;
                docuRefExt.insert();

                while select sourceTextReferenceProcess
                    where sourceTextReferenceProcess.FiscalDocumentSourceText_BR == sourceText.RecId
                {
                    fiscalDocumentReferencedProcess.DocuRefExt_BR = docuRefExt.RecId;
                    fiscalDocumentReferencedProcess.Agency = sourceTextReferenceProcess.Agency;
                    fiscalDocumentReferencedProcess.ProcessNumber = sourceTextReferenceProcess.ProcessNumber;
                    fiscalDocumentReferencedProcess.ConcessionaryActType = sourceTextReferenceProcess.ConcessionaryActType;
                    fiscalDocumentReferencedProcess.insert();
                }

                ttsCommit;
            }

            return docuRefExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all Fiscal document texts from a <c>Common</c> record to the internal record that the class was linked to.
    /// </summary>
    /// <param name="_fromRecord">
    /// The record from where the Fiscal document text will be copied.
    /// </param>
    public void copy(   Common                      _fromRecord)
    {
        DocuRef                                 docuRef;
        DocuRefExt_BR                           docuRefExt;
        DocuRef                                 newDocuRef;
        DocuRefExt_BR                           newDocuRefExt;
        FiscalDocumentReferencedProcess_BR      origReferencedProcess;
        FiscalDocumentReferencedProcess_BR      newReferencedProcess;

        if (docuTypeId
            && mainRecord
            && _fromRecord)
        {
            ttsBegin;

            while select docuRef
                join docuRefExt
                where   docuRef.RefTableId      == _fromRecord.TableId
                    &&  docuRef.RefRecId        == _fromRecord.RecId
                    &&  docuRef.RefCompanyId    == _fromRecord.dataAreaId
                    &&  docuRef.TypeId          == docuTypeId
                    &&  docuRefExt.DocuRef      == docuRef.RecId
            {
                newDocuRef              = docuRef.data();
                newDocuRef.RefCompanyId = mainRecord.dataAreaId;
                newDocuRef.RefTableId   = mainRecord.TableId;
                newDocuRef.RefRecId     = mainRecord.RecId;
                newDocuRef.DocumentId   = newGuid();
                newDocuRef.insert();

                newDocuRefExt           = docuRefExt.data();
                newDocuRefExt.DocuRef   = newDocuRef.RecId;

                if (this.getFiscalDocumentTextType(_fromRecord) != FiscalDocumentTextType_BR::Blank)
                {
                    newDocuRefExt.Type = this.getFiscalDocumentTextType(_fromRecord);
                }

                newDocuRefExt.insert();

                while select origReferencedProcess
                    where origReferencedProcess.DocuRefExt_BR == docuRefExt.RecId
                {
                    newReferencedProcess = origReferencedProcess.data();
                    newReferencedProcess.DocuRefExt_BR = newDocuRefExt.RecId;
                    newReferencedProcess.insert();
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears  Fiscal document texts attached to a <c>Common</c> record.
    /// </summary>
    /// <param name="_typeOf">
    /// The type (<c>FiscalDocumentTextType_BR</c>) of Fiscal document text to be cleared.
    /// </param>
    public void delete(FiscalDocumentTextType_BR _typeOf)
    {
        DocuRef         docuRef;
        DocuRefExt_BR   docuRefExt;

        ttsBegin;

        if (docuTypeId
            && mainRecord)
        {
            while select forupdate
                docuRef join docuRefExt
                where   docuRef.RefTableId      == mainRecord.TableId
                    &&  docuRef.RefRecId        == mainRecord.RecId
                    &&  docuRef.RefCompanyId    == mainRecord.dataAreaId
                    &&  docuRef.TypeId          == docuTypeId
                    &&  docuRefExt.DocuRef      == docuRef.RecId
                    &&  docuRefExt.Type         == _typeOf
            {
                docuRef.delete();
                // DocuRefExt_BR is already deleted by DocuRef's DeleteAction
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentTextType</Name>
				<Source><![CDATA[
    private FiscalDocumentTextType_BR getFiscalDocumentTextType(Common _record)
    {
        switch (_record.TableId)
        {
            case tableNum(InventTable)    : return FiscalDocumentTextType_BR::Inventory;
            case tableNum(CustTable)      : return FiscalDocumentTextType_BR::CustVend;
            case tableNum(VendTable)      : return FiscalDocumentTextType_BR::CustVend;
            case tableNum(SalesParmTable) : return FiscalDocumentTextType_BR::FiscalReference;

            default: return FiscalDocumentTextType_BR::Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the object based on the mainRecord.
    /// </summary>
    public void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move all Fiscal document texts from a <c>Common</c> record to the internal record that the class was linked to.
    /// </summary>
    /// <param name="_fromRecord">
    /// The record from where the Fiscal document text will be moved.
    /// </param>
    public void move(   Common  _fromRecord)
    {
        DocuRef         docuRef;
        DocuRefExt_BR   docuRefExt;

        if (docuTypeId
            && mainRecord
            && _fromRecord)
        {
            update_recordSet docuRef
            setting     RefTableId      = mainRecord.TableId,
                        RefRecId        = mainRecord.RecId,
                        RefCompanyId    = mainRecord.dataAreaId
                join docuRefExt
                where   docuRef.RefTableId      == _fromRecord.TableId
                    &&  docuRef.RefRecId        == _fromRecord.RecId
                    &&  docuRef.RefCompanyId    == _fromRecord.dataAreaId
                    &&  docuRef.TypeId          == docuTypeId
                    &&  docuRefExt.DocuRef      == docuRef.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (BrazilParameters::find().FiscalDocumentTextDocuTypeId)
        {
            this.parmDocuTypeId(BrazilParameters::find().FiscalDocumentTextDocuTypeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuTypeId</Name>
				<Source><![CDATA[
    public DocuTypeId parmDocuTypeId(DocuTypeId _docuTypeId = docuTypeId)
    {
        if (!prmisDefault(_docuTypeId))
        {
            docuTypeId = _docuTypeId;
        }

        return docuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainRecord</Name>
				<Source><![CDATA[
    public Common parmMainRecord(Common _mainRecord = mainRecord)
    {
        if (!prmisDefault(_mainRecord))
        {
            mainRecord = _mainRecord;
        }

        return mainRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Fiscal document texts attached to the class' main record.
    /// </summary>
    /// <param name="_type">
    /// The type (<c>FiscalDocumentTextType_BR</c>) to be updated.
    /// </param>
    public void updateTexts( FiscalDocumentTextType_BR   _type)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>FiscalDocumentTextEngine_BR</c> given a <c>Common</c> record.
    /// </summary>
    /// <param name="_record">
    /// The <c>Common</c> record that the Fiscal document texts will be attached to.
    /// </param>
    /// <returns>
    /// The <c>FiscalDocumentTextEngine_BR</c> instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if the <c>_record</c> parameter is not a known table.
    /// </exception>
    public static FiscalDocumentTextUpdate_BR newFromRecord(Common _record)
    {
        FiscalDocumentTextUpdate_BR fiscalDocumentTextUpdate;

        switch (_record.TableId)
        {
            case tableNum(CustInvoiceTable):
            case tableNum(SalesTable):
            case tableNum(PurchTable):
            case tableNum(CustPackingSlipJour):
            case tableNum(VendInvoiceInfoTable):
            case tableNum(TaxFiscalDocument_BR):
            case tableNum(SalesComplementaryInvoiceHeader):
            case tableNum(PurchComplementaryInvoiceHeader):
            case tableNum(InventTransferTable):
                fiscalDocumentTextUpdate = new FiscalDocumentTextUpdateTable_BR();
                break;

            case tableNum(CustInvoiceLine):
            case tableNum(SalesLine):
            case tableNum(PurchLine):
            case tableNum(CustPackingSlipTrans):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(TaxFiscalDocumentLine_BR):
            case tableNum(InventTransferLine):
                fiscalDocumentTextUpdate = new FiscalDocumentTextUpdateLine_BR();
                break;

            default:
                fiscalDocumentTextUpdate = new FiscalDocumentTextUpdate_BR();
                break;
        }

        fiscalDocumentTextUpdate.parmMainRecord(_record);
        fiscalDocumentTextUpdate.init();

        return fiscalDocumentTextUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>