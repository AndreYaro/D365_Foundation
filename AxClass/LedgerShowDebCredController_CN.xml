<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerShowDebCredController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to handle the show debit/credit column and display negative amounts in red.
/// </summary>
class LedgerShowDebCredController_CN
{
    LedgerShowAmountDebitCredit_CN showDebitCreditColumn;
    LedgerNegativeAmountsInRed_CN  showNegativeInRed;

    List amountControls;
    List amountCreditControls;
    List amountDebitControls;

    TableId tableId;
    LedgerShowDebCredRecord_CN ledgerShowDebCredRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmountControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// add Amount Column control
    /// </summary>
    /// <param name="_control">
    /// Amount Column control
    /// </param>
    public void addAmountControl(FormRealControl _control)
    {
        amountControls.addEnd(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountCreditControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// add Credit Column control
    /// </summary>
    /// <param name="_control">
    /// Credit Column control
    /// </param>
    public void addAmountCreditControl(FormRealControl _control)
    {
        amountCreditControls.addEnd(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountDebitControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// add Debit Column control
    /// </summary>
    /// <param name="_control">
    /// Debit Column control
    /// </param>

    public void addAmountDebitControl(FormRealControl _control)
    {
        amountDebitControls.addEnd(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize controls according to parameter
    /// </summary>

    public void initControls()
    {
        //set visiblity
        this.setVisibilityOfControl(!showDebitCreditColumn, amountControls);
        this.setVisibilityOfControl(showDebitCreditColumn, amountCreditControls);
        this.setVisibilityOfControl(showDebitCreditColumn, amountDebitControls);

        //set sign display
        this.setSignDisplay(amountCreditControls);
        this.setSignDisplay(amountDebitControls);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor of the LedgerShowDRsCRsController.
    /// </summary>
    /// <param name="_table">
    /// the controlled datasource table id
    /// </param>

    protected void new(TableId _table)
    {
        LedgerParameters parm = LedgerParameters::find();
        SysUserInfo sysUserInfo = SysUserInfo::find();
        #isoCountryRegionCodes

        tableId = _table;

        switch (tableId)
        {
            case tableNum(VendTrans):
                showDebitCreditColumn = VendParameters::find().ShowAmountDebitCredit_JP;
                break;

            case tableNum(CustTrans):
                showDebitCreditColumn = CustParameters::find().ShowAmountDebitCredit_JP;
                break;

            default:
                showDebitCreditColumn   = parm.ShowAmountDebitCredit_CN;
                break;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]))
        {
            showNegativeInRed       = sysUserInfo.NegativeAmountsInRed_CN;

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00014, funcName());
        }

        amountControls          = new List(Types::Class);
        amountCreditControls    = new List(Types::Class);
        amountDebitControls     = new List(Types::Class);

        ledgerShowDebCredRecord = LedgerShowDebCredRecord_CN::construct(tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDebitCreditColumn</Name>
				<Source><![CDATA[
    public NoYes parmShowDebitCreditColumn(NoYes _showDebitCreditColumn = showDebitCreditColumn)
    {
        showDebitCreditColumn = _showDebitCreditColumn;

        return showDebitCreditColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowNegativeInRed</Name>
				<Source><![CDATA[
    public NoYes parmShowNegativeInRed(NoYes _showNegativeInRed = showNegativeInRed)
    {
        showNegativeInRed = _showNegativeInRed;

        return showNegativeInRed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the signDisplay Property of FormControls.
    /// </summary>
    /// <param name="_amountControls">
    /// list of controls been impacted
    /// </param>

    protected void setSignDisplay(List _amountControls)
    {
        Object o;
        FormBuildRealControl controlBuild;

        FormRealControl control;
        ListEnumerator  controlEnum;

        if (showNegativeInRed)
        {
            controlEnum = _amountControls.getEnumerator();
            while (controlEnum.moveNext())
            {
                o = controlEnum.current();
                control = o as FormRealControl;
                if (control)
                {
                    control.signDisplay(SignDisplay::None);
                    control.signDisplay(SignDisplay::None);
                }
                else
                {
                    controlBuild = o as FormBuildRealControl;
                    if (controlBuild)
                    {
                        controlBuild.signDisplay(SignDisplay::None);
                        controlBuild.signDisplay(SignDisplay::None);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityOfControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visiblity of the controls.
    /// </summary>
    /// <param name="_visible">
    /// is the control visible
    /// </param>
    /// <param name="_amountControls">
    /// list of controls been impacted
    /// </param>
    protected void setVisibilityOfControl(boolean _visible, List _amountControls)
    {
        Object o;
        FormBuildRealControl controlBuild;

        FormRealControl control;
        ListEnumerator  controlEnum;

        controlEnum = _amountControls.getEnumerator();
        while (controlEnum.moveNext())
        {
            o = controlEnum.current();
            control = o as FormRealControl;
            if (control)
            {
                control = controlEnum.current();
                control.visible(_visible);
            }
            else
            {
                controlBuild = o as FormBuildRealControl;
                if (controlBuild)
                {
                    controlBuild = controlEnum.current();
                    controlBuild.visible(_visible);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNegativeAmountsInRed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To display the debit/credit column which has negative amount in red color.
    /// </summary>
    /// <param name="_record">
    /// the current record
    /// </param>
    /// <param name="_options">
    /// The FormRowDisplayOption for the current record.
    /// </param>
    public void showNegativeAmountsInRed(
        Common _record,
        FormRowDisplayOption  _options)
    {
        Common          joinedRecord = _record;
        ListEnumerator  controlsEnum;
        FormRealControl control;

        if (showNegativeInRed)
        {
            while (joinedRecord.TableId && joinedRecord.TableId != tableId)
            {
                joinedRecord = joinedRecord.joinChild();
            }

            if (joinedRecord)
            {
                ledgerShowDebCredRecord.parmRecord(joinedRecord);

                if (ledgerShowDebCredRecord.transactionCurrencyCreditAmount() < 0)
                {
                    _options.textColor(LedgerShowDebCredController_CN::getNegativeColor());
                    controlsEnum = amountCreditControls.getEnumerator();
                    while (controlsEnum.moveNext())
                    {
                        control = controlsEnum.current();
                        _options.affectedElementsByControl(control.id());
                    }
                }

                if (ledgerShowDebCredRecord.transactionCurrencyDebitAmount() < 0)
                {
                    _options.textColor(LedgerShowDebCredController_CN::getNegativeColor());
                    controlsEnum = amountDebitControls.getEnumerator();
                    while (controlsEnum.moveNext())
                    {
                        control = controlsEnum.current();
                        _options.affectedElementsByControl(control.id());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor to create an instance of the LedgerShowDRsCRsController_CN.
    /// </summary>
    /// <param name="_table">
    /// the controlling table id
    /// </param>
    /// <returns>
    /// instance of the LedgerShowDRsCRsController_CN.
    /// </returns>
    public static LedgerShowDebCredController_CN construct(TableId _table)
    {
        LedgerShowDebCredController_CN showDRsCRsController;

        showDRsCRsController = new LedgerShowDebCredController_CN(_table);
        return showDRsCRsController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCreditBySign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the amount credit by the sign of the amount.
    /// </summary>
    /// <param name="_amount">
    /// the amount value.
    /// </param>
    /// <returns>
    /// Return amount * -1 if the amount is negative, else return 0.
    /// </returns>
    public static AmountCur getAmountCurCreditBySign(AmountCur _amount)
    {
        AmountCur displayAmount;

        if (_amount < 0)
        {
            displayAmount = _amount * (-1);
        }
        else
        {
            displayAmount = 0;
        }
        return displayAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurDebitBySign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the amount debit by the sign of the amount.
    /// </summary>
    /// <param name="_amount">
    /// The amountMST.
    /// </param>
    /// <returns>
    /// return the amount debit value.
    /// </returns>
    public static AmountCur getAmountCurDebitBySign(AmountCur _amount)
    {
        AmountCur displayAmount;

        if (_amount > 0)
        {
            displayAmount = _amount;
        }
        else
        {
            displayAmount = 0;
        }
        return displayAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNegativeColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static method to get the color to show the negative amount when the 'Negative Amounts In Red' is set.
    /// </summary>
    /// <returns>
    /// The color.
    /// </returns>
    public static int getNegativeColor()
    {
        return WinAPI::RGB2int(255, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNegativeAmountsInRedFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the parameter 'Show negative amount in red' is enabled and the country region code is CN.
    /// </summary>
    /// <returns>
    /// True if parameter is enabled and country region code is CN.
    /// </returns>
    public static boolean isNegativeAmountsInRedFeatureEnabled()
    {
        #isoCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && SysUserInfo::find().NegativeAmountsInRed_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShowCustDRsCRsFeatureEnabled_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the customer parameter 'Show amount in debit/credit column' is enabled, and the country region code is JP.
    /// </summary>
    /// <returns>
    /// True if parameter is enabled, and country region code is JP.
    /// </returns>
    public static boolean isShowCustDRsCRsFeatureEnabled_JP()
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && CustParameters::find().ShowAmountDebitCredit_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShowDRsCRsFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the parameter 'Show amount in debit/credit column' is enabled, and the country region code is CN.
    /// </summary>
    /// <returns>
    /// True if parameter is enabled, and country region code is CN.
    /// </returns>
    public static boolean isShowDRsCRsFeatureEnabled()
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoJP])
               && LedgerParameters::find().ShowAmountDebitCredit_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShowVendDRsCRsFeatureEnabled_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the vendor parameter 'Show amount in debit/credit column' is enabled, and the country region code is JP.
    /// </summary>
    /// <returns>
    /// True if parameter is enabled, and country region code is JP.
    /// </returns>
    public static boolean isShowVendDRsCRsFeatureEnabled_JP()
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && VendParameters::find().ShowAmountDebitCredit_JP;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>