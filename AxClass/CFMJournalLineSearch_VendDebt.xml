<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch_VendDebt</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::VendDebt)]
class CFMJournalLineSearch_VendDebt extends CFMJournalLineSearch_CustVendDebt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTransOpenFilters</Name>
				<Source><![CDATA[
    protected void addTransOpenFilters(QueryBuildDataSource qbdsTransOpen)
    {
        QueryBuildDataSource qbdsUncommittedValues;

        if (this.parmUseUncommittedValues())
        {
            qbdsUncommittedValues = qbdsTransOpen.addDataSource(tableNum(CFMAnalyticDataEditUncommitted));
            qbdsUncommittedValues.relations(true);
            qbdsUncommittedValues.fetchMode(QueryFetchMode::One2One);
            filter.setDateInterval(qbdsUncommittedValues, fieldNum(CFMAnalyticDataEditUncommitted, DueDate));

            qbdsUncommittedValues.addGroupByField(fieldNum(CFMAnalyticDataEditUncommitted, DueDate));
        }
        else
        {
            qbdsTransOpen.addGroupByField(fieldNum(VendTransOpen, DueDate));
            filter.setDateInterval(qbdsTransOpen, fieldNum(VendTransOpen, DueDate));
        }

        filter.setNotPaymentRequestFilter(qbdsTransOpen, fieldNum(VendTransOpen, RecId), this.sourceType());
        filter.setCashFlowDirectionFilterAmountSign(qbdsTransOpen, fieldNum(VendTransOpen, AmountCur), cashFlowDirection, true);

        QueryBuildDataSource qbdsTrans = qbdsTransOpen.addDataSource(tableNum(VendTrans));
        qbdsTrans.relations(true);
        qbdsTrans.fetchMode(QueryFetchMode::One2One);

        qbdsTrans.addGroupByField(fieldNum(VendTrans, DefaultDimension));

        if (this.parmUseUncommittedValues())
        {
            qbdsUncommittedValues.addGroupByField(fieldNum(CFMAnalyticDataEditUncommitted, PaymMode));
            qbdsUncommittedValues.addGroupByField(fieldNum(CFMAnalyticDataEditUncommitted, PaymentAccountNum));
        }
        else
        {
            qbdsTrans.addGroupByField(fieldNum(VendTrans, PaymMode));
        }
        qbdsTrans.addGroupByField(fieldNum(VendTrans, CurrencyCode));

        QueryBuildDataSource qbdsVendTable = qbdsTrans.addDataSource(tableNum(VendTable));
        qbdsVendTable.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendTable, AccountNum));
        qbdsVendTable.joinMode(JoinMode::InnerJoin);
        qbdsVendTable.addGroupByField(fieldNum(VendTable, Party));
        qbdsVendTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsCFMDirParty = qbdsVendTable.addDataSource(tableNum(CFMDirPartyTable));
        qbdsCFMDirParty.addLink(fieldNum(VendTable, Party), fieldNum(CFMDirPartyTable, DirPartyTable));
        qbdsCFMDirParty.joinMode(JoinMode::OuterJoin);
        qbdsCFMDirParty.addGroupByField(fieldNum(CFMDirPartyTable, PaymentPriority));
        qbdsCFMDirParty.fetchMode(QueryFetchMode::One2One);


        if (this.parmSourceRefRecId())
        {
            qbdsTransOpen.addRange(fieldNum(VendTransOpen, RecId)).value(queryValue(this.parmSourceRefRecId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscQuery</Name>
				<Source><![CDATA[
    protected Query cashDiscQuery()
    {
        Query query = new Query();

        filter.setOrgUnitFilterCrossCompany(query);

        QueryBuildDataSource qbdsTransOpen = query.addDataSource(tableNum(VendTransOpen));

        findOrCreateRange_W(qbdsTransOpen, fieldNum(VendTransOpen, UseCashDisc), SysQuery::valueNot(UseCashDisc::Never));

        QueryBuildDataSource qbdsCashDisc = qbdsTransOpen.addDataSource(tableNum(VendTransCashDisc));
        qbdsCashDisc.relations(true);
        qbdsCashDisc.joinMode(JoinMode::ExistsJoin);
        qbdsCashDisc.fetchMode(QueryFetchMode::One2One);

        if (this.parmUseUncommittedValues())
        {
            QueryBuildDataSource qbdsUncommittedValues = qbdsTransOpen.addDataSource(tableNum(CFMAnalyticDataEditUncommitted));
            qbdsUncommittedValues.relations(true);
            qbdsUncommittedValues.fetchMode(QueryFetchMode::One2One);
            filter.setDateInterval(qbdsUncommittedValues, fieldNum(CFMAnalyticDataEditUncommitted, DueDate));
        }
        else
        {
            filter.setDateInterval(qbdsTransOpen, fieldNum(VendTransOpen, DueDate));
        }

        filter.setNotPaymentRequestFilter(qbdsTransOpen, fieldNum(VendTransOpen, RecId), this.sourceType());
        filter.setCashFlowDirectionFilterAmountSign(qbdsTransOpen, fieldNum(VendTransOpen, AmountCur), cashFlowDirection, true);

        QueryBuildDataSource qbdsTrans = qbdsTransOpen.addDataSource(tableNum(VendTrans));
        qbdsTrans.relations(true);
        qbdsTrans.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsVendTable = qbdsTrans.addDataSource(tableNum(VendTable));
        qbdsVendTable.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendTable, AccountNum));
        qbdsVendTable.joinMode(JoinMode::InnerJoin);
        qbdsVendTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsCFMDirParty = qbdsVendTable.addDataSource(tableNum(CFMDirPartyTable));
        qbdsCFMDirParty.addLink(fieldNum(VendTable, Party), fieldNum(CFMDirPartyTable, DirPartyTable));
        qbdsCFMDirParty.joinMode(JoinMode::OuterJoin);
        qbdsCFMDirParty.fetchMode(QueryFetchMode::One2One);

        if (this.parmSourceRefRecId())
        {
            qbdsTransOpen.addRange(fieldNum(VendTransOpen, RecId)).value(queryValue(this.parmSourceRefRecId()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractCustVend parmContract = new CFMJournalProtoTransParmContractCustVend();

        Query queryTransOpen = _queryRun.query();
        QueryBuildDataSource qbdsTransOpen;
        Counter fieldCountTransOpen;
        NoYes aggregatedRecords;

        if (queryTransOpen)
        {
            qbdsTransOpen = queryTransOpen.dataSourceTable(tableNum(VendTransOpen));
            fieldCountTransOpen = queryTransOpen.groupByFieldCount(qbdsTransOpen);
            aggregatedRecords = fieldCountTransOpen != 0;
        }

        parmContract.parmAggregatedRecords(aggregatedRecords);

        parmContract.parmCustVendTrans(_queryRun.get(tableNum(VendTrans)));
        parmContract.parmCustVendTransOpen(_queryRun.get(tableNum(VendTransOpen)));
        parmContract.parmDirPartyMap(_queryRun.get(tablenum(VendTable)));
        parmContract.parmCFMDirParty(_queryRun.get(tablenum(CFMDirPartyTable)));

        this.initProtoTransParmContractUncommitted(_queryRun, parmContract);

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>neverCashDiscQuery</Name>
				<Source><![CDATA[
    protected Query neverCashDiscQuery()
    {
        Query query = new Query();

        filter.setOrgUnitFilterCrossCompany(query);

        QueryBuildDataSource qbdsTransOpen = query.addDataSource(tableNum(VendTransOpen));
        qbdsTransOpen.addGroupByField(fieldNum(VendTransOpen, dataAreaId));
        qbdsTransOpen.addSelectionField(fieldNum(VendTransOpen, AmountCur), SelectionField::Sum);

        findOrCreateRange_W(qbdsTransOpen, fieldNum(VendTransOpen, UseCashDisc), queryValue(UseCashDisc::Never));

        this.addTransOpenFilters(qbdsTransOpen);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noCashDiscQuery</Name>
				<Source><![CDATA[
    protected Query noCashDiscQuery()
    {
        Query query = new Query();

        filter.setOrgUnitFilterCrossCompany(query);

        QueryBuildDataSource qbdsTransOpen = query.addDataSource(tableNum(VendTransOpen));
        qbdsTransOpen.addGroupByField(fieldNum(VendTransOpen, dataAreaId));
        qbdsTransOpen.addSelectionField(fieldNum(VendTransOpen, AmountCur), SelectionField::Sum);

        findOrCreateRange_W(qbdsTransOpen, fieldNum(VendTransOpen, UseCashDisc), SysQuery::valueNot(UseCashDisc::Never));

        QueryBuildDataSource qbdsCashDisc = qbdsTransOpen.addDataSource(tableNum(VendTransCashDisc));
        qbdsCashDisc.relations(true);
        qbdsCashDisc.joinMode(JoinMode::NoExistsJoin);
        qbdsCashDisc.fetchMode(QueryFetchMode::One2One);

        this.addTransOpenFilters(qbdsTransOpen);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    protected CFMPaymentRequestSourceType sourceType()
    {
        return CFMPaymentRequestSourceType::VendInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>