<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxEmplDeduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for calculation employee income tax deductions.
/// </summary>
class rPayTaxEmplDeduction
{
    RPayTaxDeductionTable   deductionTable;
    RPayEmplTax             emplTax;

    StartDate               ariseStartDate;
    EndDate                 ariseEndDate;
    RHRMFamilyRecId         familyRecId;
    RpayTaxIncomeCode       incomeCode;

    #RPayModuleName
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ariseEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deduction arise end date.
    /// </summary>
    /// <returns>
    /// The end date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EndDate ariseEndDate()
    {
        return ariseEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ariseStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deduction arise start date.
    /// </summary>
    /// <returns>
    /// The start date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public StartDate ariseStartDate()
    {
        return ariseStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountOfRight</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayAmount calcAmountOfRight(RPayRateCriterion _incomeAmount)
    {
        RPayAmount rightAmountPeriod;
        RPayRateCallContext rateContext;

        rateContext = RPayRateCallContext::construct(emplTax.parmPayPeriod(), emplTax.parmEmplId(), _incomeAmount);
        rateContext.parmPersonId(emplTax.personId());

        if (deductionTable.RpayRateCodeEmpl)
        {
            if (deductionTable.RpayTaxDeductionCode == RPayRateTable::find(deductionTable.RpayRateCodeEmpl).getValue(rateContext))
            {
                if (deductionTable.RpaySequence)
                {
                    rightAmountPeriod = this.calcSequence(_incomeAmount);
                }
                else
                {
                    rightAmountPeriod = RPayRateTable::find(deductionTable.RpayRateCodeValue).getValue(rateContext);
                }
            }
        }
        else
        {
            if (deductionTable.RpaySequence)
            {
                rightAmountPeriod = this.calcSequence(_incomeAmount);
            }
            else
            {
               rightAmountPeriod = RPayRateTable::find(deductionTable.RpayRateCodeValue).getValue(rateContext);
            }
        }

        return rightAmountPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSequence</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected RPayAmount calcSequence(RPayRateCriterion _incomeAmount)
    {
            RPayCalculate_Tax   payCalculate;

            payCalculate = new RPayCalculate_Tax(RPayModuleTable::find(#ModuleNameTax));
            payCalculate.setSourceTable(RHRMEmplTable::find(emplTax.parmEmplId()));
            payCalculate.setSeqTable(RPaySeqTable::find(deductionTable.RpaySequence));
            payCalculate.payPeriod(emplTax.parmPayPeriod());
            payCalculate.setInitValue(_incomeAmount);
            payCalculate.setTaxDeductionTable(deductionTable);
            payCalculate.setIncomeTable(RPayTaxIncomeTable::find(incomeCode));
            payCalculate.setFamilyRecId(familyRecId);
            payCalculate.parmChildOrderNum(emplTax.parmChildCount());
            payCalculate.calcSequence();

            return payCalculate.getCurrentValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the deduction, discount, and relief codes table record.
    /// </summary>
    /// <returns>
    /// The <c>RPayTaxDeductionTable</c> table record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxDeductionTable deductionTable()
    {
        return deductionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init(RPayTaxDeductionTable _deductionTable, RPayEmplTax _emplTax, RpayTaxIncomeCode _incomeCode, RHRMFamilyRecId _familyRecId)
    {
        deductionTable  = _deductionTable;
        emplTax         = _emplTax;
        familyRecId     = _familyRecId;
        incomeCode      = _incomeCode;

        this.initApplicablePeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initApplicablePeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initApplicablePeriod()
    {
        RPayTaxEmplSum      taxEmplSum;
        RPayTaxEmplTrans    taxEmplTrans;

        switch (deductionTable.RpayPeriodFrequence)
        {
            case RPayRatePeriodFrequency::Unlimeted:
                if (deductionTable.RpayRateCodeEmpl)
                {
                    ariseStartDate = RPayController::getFirstPeriodFrequency(emplTax.parmPayPeriod(),
                                                                             deductionTable.RpayPeriodFrequence,
                                                                             deductionTable.RpayRateCodeEmpl);
                }
                else
                {
                    //try to identify begin date from stored data
                    if (deductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Other)
                    {
                        select firstonly CorrectedPeriod from taxEmplSum
                            order by CorrectedPeriod asc
                            where taxEmplSum.EmplId == emplTax.parmEmplId()
                               && taxEmplSum.PayPeriod < emplTax.parmSessionStartDate()
                            exists join taxEmplTrans
                                where  taxEmplTrans.TaxSumRecId         == taxEmplSum.RecId
                                    && taxEmplTrans.RpayTaxType         == RpayTaxType::Income
                                    && taxEmplTrans.RpayTaxIncDedCode   == incomeCode
                                    && taxEmplTrans.FamilyRecId         == familyRecId
                                    && taxEmplTrans.RpayTaxDeductionCode == deductionTable.RpayTaxDeductionCode;
                    }
                    else
                    {
                        select firstonly CorrectedPeriod from taxEmplSum
                            order by CorrectedPeriod asc
                            where taxEmplSum.EmplId == emplTax.parmEmplId()
                               && taxEmplSum.PayPeriod < emplTax.parmSessionStartDate()
                            exists join taxEmplTrans
                                where  taxEmplTrans.TaxSumRecId         == taxEmplSum.RecId
                                    && taxEmplTrans.RpayTaxType         == RpayTaxType::Deduction
                                    && taxEmplTrans.RpayTaxIncDedCode   == deductionTable.RpayTaxDeductionCode
                                    && taxEmplTrans.FamilyRecId         == familyRecId;
                    }
                    ariseStartDate = taxEmplSum.CorrectedPeriod;
                }

                ariseEndDate   = emplTax.parmPayPeriod();
                break;

            case RPayRatePeriodFrequency::None:
                ariseStartDate = dateNull();
                ariseEndDate   = emplTax.parmPayPeriod();
                break;

            default:
                ariseStartDate = RPayController::getFirstPeriodFrequency(emplTax.parmPayPeriod(),
                                                                         deductionTable.RpayPeriodFrequence,
                                                                         deductionTable.RpayRateCodeEmpl);
                ariseStartDate = max(ariseStartDate, emplTax.parmStartDateTax());
                ariseEndDate   = emplTax.parmPayPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static  RPayTaxEmplDeduction construct(RPayTaxDeductionTable _deductionTable,
                                                  RPayEmplTax           _emplTax,
                                                  RpayTaxIncomeCode     _incomeCode  = 0,
                                                  RHRMFamilyRecId       _familyRecId = 0)
    {
        RPayTaxEmplDeduction taxEmplDeduction;

        if (_emplTax == null)
        {
            throw error(Error::missingParameter(null));
        }

        taxEmplDeduction = new RPayTaxEmplDeduction();
        taxEmplDeduction.init(_deductionTable, _emplTax, _incomeCode, _familyRecId);

        return taxEmplDeduction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>