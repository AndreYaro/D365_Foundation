<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseSplitVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to control the visibility of fields in expense split form.
/// </summary>
class TrvExpenseSplitVisibilityManager extends TrvVisibilityManager
{
    TrvExpTrans             trvExpTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes the expense split visibility manager class.
    /// </summary>
    /// <param name = "_trvExpTrans">
	/// Expense table buffer.
	/// </param>
    /// <param name = "_trvExpenseSplitForm">
	/// Expense split form instance.
	/// </param>
    /// <param name = "_dataSourceName">
    /// Datasource name.
	/// </param>
    public void new(TrvExpTrans _trvExpTrans, FormRun _trvExpenseSplitForm, str _dataSourceName)
    {
        this.parmTrvExpenseRecord(_trvExpTrans);
        this.parmFormInstance(_trvExpenseSplitForm);
        this.parmDataSourceName(_dataSourceName);

        trvExpTrans = trvExpenseRecord;

        // Get admin custom fields only once to improve efficiency.
        trvAdminCustomFieldsContainer = TrvAdminCustomFieldsCacheHelper::getTransactionSplitFieldsCacheValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of transaction fields based on the setup and selected expense type.
    /// </summary>
    /// <param name = "_isVisible">
    /// Determines if we show or hide fields.
    /// </param>
    public void setFieldVisibilities(boolean _isVisible = true)
    {
        FormDataSource  formDataSource = trvExpenseForm.dataSource(dataSourceName);
        
        // If formDataSource is null return and skip execution of visibility logic.
        if (!formDataSource)
        {
            return;
        }
        
        this.setVisibilityForAdminCustomFields(trvAdminCustomFieldsContainer, formDataSource, trvExpTrans.isEditable(true, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAdminCustomFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility on the fields of the datasource.
    /// </summary>
    /// <param name = "_trvAdminCustomFieldsContainer">
    /// A container of <c>TrvAdminCustomFields</c> records for setting visibility.
    /// </param>
    /// <param name = "_formDataSource">
    /// An instance of the datasource on the calling form object.
    /// </param>
    /// <param name = "_isEditable">
    /// Specifies if the datasource is editable or read only.
    /// </param>
    void setVisibilityForAdminCustomFields(container _trvAdminCustomFieldsContainer, FormDataSource _formDataSource, boolean _isEditable = true)
    {
        TrvFieldVisibility              trvFieldVisibility;
        TableId                         trvExpenseRecordTableId = _formDataSource.table();
        TrvAdminCustomFields            trvAdminCustomFields;
        int                             rowCount;
        
        rowCount =  conlen(_trvAdminCustomFieldsContainer);

        // When setting visibilities we assume that if a control is hidden, it is irrelevant to the expense type and its visibility is not overriden by admin custom fields.
        for (int i = 1; i <= rowCount; i++)
        {
            trvAdminCustomFields = TrvAdminCustomFieldsCacheHelper::convertContainerToTableBuffer(_trvAdminCustomFieldsContainer, i);

            // Skip further execution if field is not on the current datasource table.
            if(trvAdminCustomFields.RefTableId != tableNum(TrvExpTrans))
            {
                continue;
            }

            switch (trvAdminCustomFields.RefFieldId)
            {
                case fieldNum (TrvExpTrans, ProjId) :
                    FormDataObject formDataObjectProjId = _formDataSource.object(fieldNum(TrvExpTransSplit, ProjId));
                    if (formDataObjectProjId)
                    {
                        this.setVisibilityForFormDataObject(formDataObjectProjId, trvAdminCustomFields.Visibility);
                    }

                    FormDataObject formDataObjectProjActivity = _formDataSource.object(fieldNum(TrvExpTransSplit, ProjActivityNumber));
                    if (formDataObjectProjActivity)
                    {
                        this.setVisibilityForFormDataObject(formDataObjectProjActivity, trvAdminCustomFields.Visibility);
                    }
                    
                    FormDataObject formDataObjectProjStatus = _formDataSource.object(fieldNum(TrvExpTransSplit, ProjStatusId));
                    if (formDataObjectProjStatus)
                    {
                        this.setVisibilityForFormDataObject(formDataObjectProjStatus, trvAdminCustomFields.Visibility);
                    }
                    break;

                case fieldNum (TrvExpTrans, IntercompanyLE) :
                    FormDataObject formDataObjectLegalEntity = _formDataSource.object(fieldNum(TrvExpTransSplit, IntercompanyLE));
                    if (formDataObjectLegalEntity)
                    {
                        this.setVisibilityForFormDataObject(formDataObjectLegalEntity, trvAdminCustomFields.Visibility);
                    }
                    break;
            }
        }

        _formDataSource.allowEdit(_isEditable);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForFormDataObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Sets visibility for each control.
    /// </summary>
    /// <param name = "_formDataObject">
	///	Form data object.
	/// </param>
    /// <param name = "_trvFieldVisibilty">
	///	Field visibility.
	/// </param>
    void setVisibilityForFormDataObject(FormDataObject _formDataObject, TrvFieldVisibility _trvFieldVisibilty)
    {
        if ((_formDataObject.visible() && _trvFieldVisibilty == TrvFieldVisibility::DoNotDisplay))
        {
            _formDataObject.visible(false);
        }
        // When a field is editable but the display setting is read only, override editability.
        else if ((_formDataObject.allowEdit() && _trvFieldVisibilty == TrvFieldVisibility::ReadOnly))
        {
            _formDataObject.allowEdit(false);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>