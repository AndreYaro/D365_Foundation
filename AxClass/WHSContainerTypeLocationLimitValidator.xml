<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerTypeLocationLimitValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>WHSContainerTypeLocationLimitValidator</c> class determines the validity of a container type stocking limit.
/// </summary>
class WHSContainerTypeLocationLimitValidator
{
    InventLocationId     inventLocationId;
    WMSLocationId        wmsLocationId;
    Qty                  locationLimitQty;
    UnitOfMeasureSymbol  locationLimitUnitId;
    WHSContainerTypeCode containerTypeCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countContainersOnIncomingWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Counts the containers with the unit of measure being checked on open or in progress work.
    /// </summary>
    /// <param name="_unitOfMeasure">
    ///  The unit of measure.
    /// </param>
    /// <returns>
    ///  Return the number of containers with the unit of measure being checked on open or in progress work.
    /// </returns>
    private int countContainersOnIncomingWork(UnitOfMeasure _unitOfMeasure)
    {
        WHSLicensePlate     licensePlate;
        WHSContainerType    containerType;
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;

        select count(RecId) from workTable
            where (workTable.WorkStatus       == WHSWorkStatus::Open
            ||     workTable.WorkStatus       == WHSWorkStatus::InProcess)
            &&     workTable.InventLocationId == inventLocationId
            exists join licensePlate
                where licensePlate.LicensePlateId == workTable.TargetLicensePlateId
            exists join workLine
                where workLine.WorkId        == workTable.WorkId
                &&    workLine.WorkType      == WHSWorkType::Put
                &&    workLine.WmsLocationId == wmsLocationId
            exists join containerType
                where containerType.ContainerTypeCode == licensePlate.ContainerTypeCode
                &&    containerType.UnitId            == _unitOfMeasure.Symbol;

        return int642int(workTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countContainersOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Counts the containers with the unit of measure being checked on license plates.
    /// </summary>
    /// <param name="_unitOfMeasure">
    ///  The unit of measure.
    /// </param>
    /// <returns>
    ///  Return the number of containers with the unit of measure being checked on license plates.
    /// </returns>
    private int countContainersOnLocation(UnitOfMeasure _unitOfMeasure)
    {
        WHSLicensePlate     licensePlate;
        InventSum           inventSum;
        WHSContainerType    containerType;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select count(RecId) from licensePlate
            where licensePlate.ContainerTypeCode != ''
            exists join inventSum
                where inventSum.PhysicalInvent  > 0
                &&    inventSum.ClosedQty           == NoYes::No
                &&    inventSum.LicensePlateId      == licensePlate.LicensePlateId
                &&    inventSum.InventLocationId    == inventLocationId
                &&    inventSum.WmsLocationId       == wmsLocationId
            exists join containerType
                where containerType.ContainerTypeCode == licensePlate.ContainerTypeCode
                &&    containerType.UnitId            == _unitOfMeasure.Symbol;
        }
        else
        {
            InventDim           inventDim;

            select count(RecId) from licensePlate
            where licensePlate.ContainerTypeCode != ''
            exists join inventDim
                where inventDim.LicensePlateId      == licensePlate.LicensePlateId
                &&    inventDim.InventLocationId    == inventLocationId
                &&    inventDim.WmsLocationId       == wmsLocationId
            exists join inventSum
                where inventSum.PhysicalInvent  > 0
                &&    inventSum.InventDimId     == inventDim.inventDimId
                &&    inventSum.ClosedQty       == NoYes::No
            exists join containerType
                where containerType.ContainerTypeCode == licensePlate.ContainerTypeCode
                &&    containerType.UnitId            == _unitOfMeasure.Symbol;
        }

        return int642int(licensePlate.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates the container type stocking limit for a warehouse location.
    /// </summary>
    /// <returns>
    ///  Returns true if the the container type stocking limit has not been exceeded; otherwise, false
    /// </returns>
    public boolean validate()
    {
        boolean     limitExceeded = false;

        UnitOfMeasureRecId locationLimitUnitRecId = UnitOfMeasure::findBySymbol(locationLimitUnitId).RecId;

        if (!locationLimitUnitRecId)
        {
            return checkFailed("@WAX:ErrorContainerTypeStockingLimitValidation");
        }

        // Initialize the container count with the container that is currently being located.
        Qty containerCountStockingLimitUnits = 1;

        QueryRun unitsQueryRun = new QueryRun(UnitOfMeasureConverter::convertibleUnitsQuery(locationLimitUnitRecId));

        while (unitsQueryRun.next() && !limitExceeded)
        {
            Qty containerCountCurrentUnits = 0;
            UnitOfMeasure unitOfMeasure = unitsQueryRun.get(tableNum(UnitOfMeasure));

            // Find all LPs in the location with the unit of measure being checked.
            containerCountCurrentUnits += this.countContainersOnLocation(unitOfMeasure);

            // Check open or in process put work.
            containerCountCurrentUnits += this.countContainersOnIncomingWork(unitOfMeasure);

            // Convert number of containers based on the stocking limit unit of measure.
            containerCountStockingLimitUnits += UnitOfMeasureConverter::convert(containerCountCurrentUnits, unitOfMeasure.RecId, locationLimitUnitRecId, NoYes::No);

            // Once the limit is met this location is invalid.
            limitExceeded = containerCountStockingLimitUnits > locationLimitQty;
        }

        return !limitExceeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSContainerTypeLocationLimitValidator construct()
    {
        return new WHSContainerTypeLocationLimitValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates an instance of <c>WHSContainerTypeLocationLimitValidator</c> from a set of parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    ///  The warehouse ID.
    /// </param>
    /// <param name="_wmsLocationId">
    ///  The warehouse location ID.
    /// </param>
    /// <param name="_locationLimitQty">
    ///  The limit quantity for a location stock limit.
    /// </param>
    /// <param name="_locationLimitUnitId">
    ///  The unit ID for a location stock limit.
    /// </param>
    /// <param name="_containerTypeCode">
    ///  The container type.
    /// </param>
    /// <returns>
    ///  Returns an instance of the <c>WHSContainerTypeLocationLimitValidator</c> class.
    /// </returns>
    public static WHSContainerTypeLocationLimitValidator newFromParameters(
        InventLocationId     _inventLocationId,
        WMSLocationId        _wmsLocationId,
        Qty                  _locationLimitQty,
        UnitOfMeasureSymbol  _locationLimitUnitId,
        WHSContainerTypeCode _containerTypeCode)
    {
        WHSContainerTypeLocationLimitValidator containerTypeLocationLimitValidator = WHSContainerTypeLocationLimitValidator::construct();

        containerTypeLocationLimitValidator.inventLocationId    = _inventLocationId;
        containerTypeLocationLimitValidator.wmsLocationId       = _wmsLocationId;
        containerTypeLocationLimitValidator.locationLimitQty    = _locationLimitQty;
        containerTypeLocationLimitValidator.locationLimitUnitId = _locationLimitUnitId;
        containerTypeLocationLimitValidator.containerTypeCode   = _containerTypeCode;

        return containerTypeLocationLimitValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>