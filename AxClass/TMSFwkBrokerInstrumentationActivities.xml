<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkBrokerInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for TMS executes transportation-specific calculations.
/// </summary>
internal final class TMSFwkBrokerInstrumentationActivities
{
    private TMSInstrumentationLogger logger;
    private const str ActivityNamePrefix = 'TMSFwkBroker.';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(TMSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static TMSFwkBrokerInstrumentationActivities newFromLogger(TMSInstrumentationLogger _logger)
    {
        return new TMSFwkBrokerInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateApportionment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calculateApportionment(TMSCommunicationType _communicationType)
    {
        var activity = logger.activity(ActivityNamePrefix + 'CalculateApportionment');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(logger.properties().BrokerCommunicationType, any2Str(_communicationType));
        
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAdhocApportionment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calculateAdhocApportionment(TMSCommunicationType _communicationType)
    {
        var activity = logger.activity(ActivityNamePrefix + 'CalculateAdhocApportionment');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(logger.properties().BrokerCommunicationType, any2Str(_communicationType));
        
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calculateRoute(TMSCommunicationType _communicationType)
    {
        var activity = logger.activity(ActivityNamePrefix + 'CalculateRoute');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(logger.properties().BrokerCommunicationType, any2Str(_communicationType));
        
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRateRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calculateRateRoute(TMSCommunicationType _communicationType)
    {
        var activity = logger.activity(ActivityNamePrefix + 'CalculateRateRoute');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(logger.properties().BrokerCommunicationType, any2Str(_communicationType));
        
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBaseRate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext calculateBaseRate(TMSCommunicationType _communicationType)
    {
        var activity = logger.activity(ActivityNamePrefix + 'CalculateBaseRate');
        SysInstrumentationActivityContext activityContext = logger.activityContext(activity);
        
        activityContext.addCustomProperty(logger.properties().BrokerCommunicationType, any2Str(_communicationType));
        
        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>