<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTableMethodIterator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTableMethodIterator
{
    RAssetStandards      rAssetStandards;
    RAssetTableInterval  deprIntervalMth,
                        deprInterval;
    RAssetTransDate      parmRunDate,
                        postingDate,
                        deprStartDate;
    RAssetAmount         sumDeprInterval,
                        parmPrevDepAmount,
                        parmAmountRevoluation;
    RAssetTableMethod    rAssetTableMethod;
    RAssetBudgetModelId  rAssetBudgetModelId;

    RAssetAmount         costLimit;
    RAssetDepStartDate   costLimitDate;

    Map                  bonusTrans;
    TransDate            startBonusPeriod;
    RAssetDepStartDate   deprStartDateVirtual;
    private boolean isDeprBonusCalculatedForPreviousPeriod;
    internal RAssetAmount deprBonusForPreviousPeriod;
    private NoYes calcToTransDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        public void calculate()
    {
        RAssetTransDate endBonusPeriod;

        if (rAssetStandards.isNonLinearDeprMethod(deprStartDate - 1))
        {
            this.calculate_TaxNonLinear();
            return;
        }

        if (! rAssetBudgetModelId)
        {
            endBonusPeriod         = deprStartDate - 1;
            parmAmountRevoluation -= this.calculateDepreciationBonus(startBonusPeriod, endBonusPeriod);
            deprBonusForPreviousPeriod -= this.calculateDeprBonusForPreviousPeriod(startBonusPeriod, endBonusPeriod);
            startBonusPeriod       = endBonusPeriod + 1;
        }

        rAssetTableMethod = RAssetTableMethod::construct(rAssetStandards, deprStartDate);
        rAssetTableMethod.virtualDepStartDate(this.virtualDepStartDate());

        while (deprStartDate <= postingDate)
        {
            rAssetTableMethod.parmPrevDepAmount(parmPrevDepAmount + sumDeprInterval);
            rAssetTableMethod.parmAmountRevoluation(parmAmountRevoluation);
            rAssetTableMethod.parmDeprBonusForPreviousPeriod(deprBonusForPreviousPeriod);
            rAssetTableMethod.parmBudgetModelId(this.parmBudgetModelId());

            if (calcToTransDate == NoYes::Yes)
            {
                rAssetTableMethod.parmPeriodEndDate(postingDate);
            }

            rAssetTableMethod.init(deprStartDate);
            sumDeprInterval += rAssetTableMethod.calc(deprStartDate);
            deprStartDate    = nextmth(deprStartDate);
            while (deprStartDate < postingDate &&
                RAssetSuspend::findSuspend(rAssetStandards.AssetId, deprStartDate))
            {
                deprStartDate =  endmth(nextmth(deprStartDate));
            }
        }
        sumDeprInterval    = RAssetTableMethod::roundAmount(rAssetStandards.AssetStandardId, sumDeprInterval);
        parmPrevDepAmount += sumDeprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate_TaxNonLinear</Name>
				<Source><![CDATA[
        private void calculate_TaxNonLinear()
    {
        if (costLimitDate)
        {
            rAssetTableMethod = new RAssetTableMethod_SL(rAssetStandards, deprStartDate);
        }
        else
        {
            rAssetTableMethod = new RAssetTableMethod_RB(rAssetStandards, deprStartDate);
        }

        rAssetTableMethod.virtualDepStartDate(this.virtualDepStartDate());
        while (deprStartDate < postingDate)
        {
            rAssetTableMethod.parmPrevDepAmount(parmPrevDepAmount + sumDeprInterval);
            rAssetTableMethod.parmAmountRevoluation(parmAmountRevoluation);
            rAssetTableMethod.parmBudgetModelId(this.parmBudgetModelId());

            if (costLimitDate)
            {
                rAssetTableMethod.init(deprStartDate, costLimitDate);
                rAssetTableMethod.totalInterval(rAssetTableMethod.totalInterval() -
                                                deprIntervalMth.interval(dateStartMth(rAssetStandards.startDepDate(this.parmBudgetModelId())),
                                                                         costLimitDate));
                rAssetTableMethod.amountToDepreciate(costLimit);
            }
            else
            {
                rAssetTableMethod.init(deprStartDate);
            }

            sumDeprInterval += rAssetTableMethod.calc(this.virtualDepStartDate() ? this.virtualDepStartDate() : deprStartDate);
            deprStartDate    = nextmth(deprStartDate);

            while (deprStartDate < postingDate &&
                RAssetSuspend::findSuspend(rAssetStandards.AssetId, deprStartDate))
            {
                deprStartDate =  endmth(nextmth(deprStartDate));
            }
        }

        sumDeprInterval    = RAssetTableMethod::roundAmount(rAssetStandards.AssetStandardId, sumDeprInterval);
        parmPrevDepAmount += sumDeprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDepreciationBonus</Name>
				<Source><![CDATA[
        protected RAssetDepreciationBonusCost calculateDepreciationBonus(TransDate  _startBonusPeriod,
                                                                     TransDate  _endBonusPeriod)
    {
        RAssetTrans                 rAssetTrans;
        RAssetDeprAccount           rAssetDeprAccount;
        RAssetDepreciationBonusCost retCost;
        AmountCur                   bonusValue;
        Map                         bonusDeprAccount;
        RAssetSumCalc               sumCalc   = RAssetSumCalc_Trans::newAssetPeriod(rAssetStandards.AssetId,
                                                                                    rAssetStandards.AssetStandardId,
                                                                                    _endBonusPeriod,
                                                                                    _startBonusPeriod);

        bonusTrans = new Map(Types::Int64, Types::Class);

        if (sumCalc.depreciationScheduledBonusValue() > RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
        {
            while select DepreciationBonusCost, RecId from rAssetTrans
                where rAssetTrans.AccountNum      == rAssetStandards.AssetId         &&
                      rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId &&
                      rAssetTrans.TransDate       >= _startBonusPeriod               &&
                      rAssetTrans.TransDate       <= _endBonusPeriod                 &&
                      (rAssetTrans.AssetTransType == RAssetTransType::Acquisition    ||
                       rAssetTrans.AssetTransType == RAssetTransType::Revaluation)   &&
                      ! rAssetTrans.LinkedTransRecId                                 &&
                      ! rAssetTrans.StornoRecId
            {
                bonusDeprAccount = new Map(Types::Int64, Types::Real);

                if ((select firstonly rAssetDeprAccount
                         where rAssetDeprAccount.AssetId         == rAssetStandards.AssetId &&
                               rAssetDeprAccount.AssetStandardId == rAssetStandards.AssetStandardId).RecId)
                {
                    while select rAssetDeprAccount
                        where rAssetDeprAccount.AssetId         == rAssetStandards.AssetId &&
                              rAssetDeprAccount.AssetStandardId == rAssetStandards.AssetStandardId
                    {
                        bonusValue = RAssetProposal::roundAmount(rAssetStandards.AssetStandardId,
                                                                 RAssetTable::find(rAssetStandards.AssetId),
                                                                 dateStartMth(_endBonusPeriod + 1),
                                                                 rAssetTrans.DepreciationBonusCost * rAssetDeprAccount.Percentage / 100,
                                                                 rAssetStandards.CurrencyCode);

                        if (bonusValue >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                        {
                            bonusDeprAccount.insert(rAssetDeprAccount.RecId, bonusValue);
                            retCost += rAssetTrans.DepreciationBonusCost * rAssetDeprAccount.Percentage / 100;
                        }
                    }
                }
                else
                {
                    bonusValue = RAssetProposal::roundAmount(rAssetStandards.AssetStandardId,
                                                             RAssetTable::find(rAssetStandards.AssetId),
                                                             dateStartMth(_endBonusPeriod + 1),
                                                             rAssetTrans.DepreciationBonusCost,
                                                             rAssetStandards.CurrencyCode);

                    if (bonusValue >= RAssetGroup::assetDepreciationMin(rAssetStandards.AssetGroup))
                    {
                        bonusDeprAccount.insert(0, bonusValue);
                        retCost += rAssetTrans.DepreciationBonusCost;
                    }
                }
                bonusTrans.insert(rAssetTrans.RecId, bonusDeprAccount);
            }
        }

        return retCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDeprBonusForPreviousPeriod</Name>
				<Source><![CDATA[
    internal RAssetAmount calculateDeprBonusForPreviousPeriod(
        TransDate _startBonusPeriod,
        TransDate _endBonusPeriod)
    {
        RAssetAmount localDeprBonusForPreviousPeriod;

        // calculate depreciation bonus for previous period
        if (!isDeprBonusCalculatedForPreviousPeriod
            && rAssetStandards.deprProfile(_endBonusPeriod + 1).DeprSumBase == RAssetDeprSumBase::ReplacementCost)
        {
            RAssetTrans rAssetTrans;

            select sum(AmountCur) from rAssetTrans
                where rAssetTrans.AccountNum == rAssetStandards.AssetId
                    && rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId
                    && rAssetTrans.TransDate <= _startBonusPeriod
                    && rAssetTrans.AssetTransType == RAssetTransType::Depreciation
                    && rAssetTrans.PostingType == RAssetPostingType::DepreciationBonus
                    && !rAssetTrans.LinkedTransRecId
                    && !rAssetTrans.StornoRecId;

            localDeprBonusForPreviousPeriod -= rAssetTrans.AmountCur;
            isDeprBonusCalculatedForPreviousPeriod = true;
        }

        return localDeprBonusForPreviousPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBonusTrans</Name>
				<Source><![CDATA[
        public Map getBonusTrans()
    {
        return bonusTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInterval</Name>
				<Source><![CDATA[
        protected void initInterval()
    {
        if (postingDate)
        {
            deprStartDate = postingDate + 1;
        }
        else
        {
            postingDate   = rAssetStandards.lastDepDate(this.parmBudgetModelId());
            deprStartDate = postingDate ? postingDate + 1 :
                            rAssetStandards.startDepDate(this.parmBudgetModelId());
        }

        while (deprStartDate < parmRunDate &&
            RAssetSuspend::findSuspend(rAssetStandards.AssetId, deprStartDate))
        {
             deprStartDate = nextmth(deprStartDate);
        }

        deprInterval = RAssetTableInterval::construct(rAssetStandards, deprStartDate);

        postingDate = deprInterval.getEndDate(deprStartDate);

        if (calcToTransDate == NoYes::Yes
            && rAssetStandards.assetGroup().InitDepStartDate == RAssetInitDepStartDate::AcquisitionDate
            && postingDate > parmRunDate)
        {
            postingDate = parmRunDate;
        }

        if (rAssetStandards.isNonLinearDeprMethod(deprStartDate - 1))
        {
            this.initInterval_TaxNonLinear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInterval_TaxNonLinear</Name>
				<Source><![CDATA[
        private void initInterval_TaxNonLinear()
    {
        RAssetSumCalc   assetSumCalc;

        if (rAssetBudgetModelId)
        {
            assetSumCalc = RAssetSumCalc_Budget::newAssetPeriod(rAssetStandards.AssetId,
                                                                rAssetStandards.AssetStandardId,
                                                                rAssetBudgetModelId,
                                                                deprStartDate);
        }
        else
        {
            assetSumCalc  = RAssetSumCalc_Trans::newAssetPeriod(rAssetStandards.AssetId,
                                                                rAssetStandards.AssetStandardId,
                                                                this.virtualDepStartDate() ? this.virtualDepStartDate() : deprStartDate);
        }

        if (! costLimitDate)
        {
            if (rAssetStandards.CostLimitDate && ! rAssetBudgetModelId)
            {
                costLimitDate = rAssetStandards.CostLimitDate;

                assetSumCalc.parmDateTo(costLimitDate - 1);
                costLimit = assetSumCalc.netBookValue();
            }
            else
            {
                if (assetSumCalc.netBookValue() - parmPrevDepAmount <
                    assetSumCalc.acquisitionValue() * rAssetStandards.costLimit(deprStartDate - 1) / 100)
                {
                    costLimitDate = deprStartDate;
                    costLimit     = assetSumCalc.netBookValue() - parmPrevDepAmount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue(RAssetStandards     _rAssetStandards,
                          RAssetTransDate     _runDate,
                          RAssetBudgetModelId _rAssetBudgetModelId = "")
    {

        rAssetStandards     = _rAssetStandards;

        if (calcToTransDate == NoYes::Yes
            && rAssetStandards.assetGroup().InitDepStartDate == RAssetInitDepStartDate::AcquisitionDate)
        {
            parmRunDate = _runDate;
        }
        else
        {
            parmRunDate         = endmth(prevmth(_runDate));
        }

        this.parmBudgetModelId(_rAssetBudgetModelId);
        deprIntervalMth     = new RAssetTableInterval_Month();
        startBonusPeriod    = rAssetStandards.LastDepDate ?
                              RAssetTrans::findLastType(rAssetStandards.AssetId,
                                                        rAssetStandards.AssetStandardId,
                                                        RAssetTransType::Depreciation,
                                                        false,
                                                        rAssetStandards.LastDepDate).TransDate :
                              dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextInterval</Name>
				<Source><![CDATA[
        public boolean nextInterval()
    {
        boolean      ret = false;

        sumDeprInterval = 0;

        if (calcToTransDate == NoYes::Yes
            && rAssetStandards.assetGroup().InitDepStartDate == RAssetInitDepStartDate::AcquisitionDate
            && postingDate == parmRunDate)
        {
            ret = false;
        }
        else
        {
            this.initInterval();

            if (postingDate <= parmRunDate)
            {
                ret = true;
            }
        }

        if (rAssetStandards.DisposalDate &&
            postingDate > rAssetStandards.DisposalDate)
        {
            ret = false;
        }

        if (rAssetStandards.assetDeprMethod(deprStartDate - 1) == RAssetDeprMethod::TaxNonLinearGroup)
        {
            ret = checkFailed(strfmt("@GLS117098", rAssetStandards.AssetId, deprStartDate));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountRevoluation</Name>
				<Source><![CDATA[
        public RAssetAmount parmAmountRevoluation(RAssetAmount _parmAmountRevoluation = parmAmountRevoluation)
    {
        parmAmountRevoluation = _parmAmountRevoluation;
        return parmAmountRevoluation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
        protected RAssetBudgetModelId parmBudgetModelId(RAssetBudgetModelId _rAssetBudgetModelId = rAssetBudgetModelId)
    {
        rAssetBudgetModelId = _rAssetBudgetModelId;
        return rAssetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcToTransDate</Name>
				<Source><![CDATA[
    internal NoYes parmCalcToTransDate(NoYes _calcToTransDate = calcToTransDate)
    {
        calcToTransDate = _calcToTransDate;
        return calcToTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeprStartDate</Name>
				<Source><![CDATA[
        public RAssetTransDate parmDeprStartDate(RAssetTransDate _deprStartDate = deprStartDate)
    {
        deprStartDate = _deprStartDate;
        return deprStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDate</Name>
				<Source><![CDATA[
        public RAssetTransDate parmPostingDate(RAssetTransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;
        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeprBonusForPreviousPeriod</Name>
				<Source><![CDATA[
    internal RAssetAmount parmDeprBonusForPreviousPeriod(RAssetAmount _deprBonusForPreviousPeriod = deprBonusForPreviousPeriod)
    {
        deprBonusForPreviousPeriod = _deprBonusForPreviousPeriod;
        return deprBonusForPreviousPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDeprInterval</Name>
				<Source><![CDATA[
        public RAssetAmount sumDeprInterval()
    {
        return sumDeprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>virtualDepStartDate</Name>
				<Source><![CDATA[
        public RAssetDepStartDate virtualDepStartDate(RAssetDepStartDate _periodVirtual = deprStartDateVirtual)
    {
        deprStartDateVirtual = _periodVirtual;

        return deprStartDateVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RassetTableMethodIterator construct(RAssetStandards     _rAssetStandards)
    {
        return new RassetTableMethodIterator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>