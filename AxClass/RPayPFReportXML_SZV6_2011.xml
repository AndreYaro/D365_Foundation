<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportXML_SZV6_2011</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportXML_SZV6_2011 extends RPayPFReportXML implements IRPayReportRunClass
{
    #define.ReportTitle("@RUP3096")

    RPayPFReportCtrl                reportData;
    IRPayPFReportCommand            totalFundCommand, seniorityCommand;

    IRPayPFReportDataIterator       fundDataIterator, seniorityIterator;
    Set                             keyDocChanged, keyFileChanged;
    Counter                         docPersonQty, docPersonQtyMax;

    #RPayPFReportSZV612XML
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkEmplIsInsured(_emplTable, false, _personCategory);
        }

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;

            if (_formType == #FormTypeSZV61)
            {
                ret = this.checkEmplHasSpecSen(_emplTable, false) && ret;
            }
            else if (_formType == #FormTypeSZV62)
            {
                ret = this.checkEmplDoesNotHaveSpecSen(_emplTable, false) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionTag</Name>
				<Source><![CDATA[
    protected str descriptionTag()
    {
        return 'ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>docQty</Name>
				<Source><![CDATA[
    protected int docQty(
        str 100             _docType,
        str 20              _personCategory = '',
        RPayPFSeniorityType _seniorityType = RPayPFSeniorityType::None)
    {
        return emplNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(str 100               _docType,
                              str 20                _personCategory,
                              RPayPFSeniorityType   _seniorityType  = RPayPFSeniorityType::None)
    {
        super(_docType, _personCategory, _seniorityType);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипСведений',       this.dataType());

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КодКатегории',      _personCategory);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйПериод');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Квартал',       this.getReportPeriodQtrStr(reportEndPeriod));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Год',           int2str(reportYear));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Название',      this.getReportPeriodName(reportStartPeriod, reportEndPeriod));

        if (reportType != RpayPensionFundExportKindOfCorrection::None &&
            this.needCorrectedPeriod())
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КорректируемыйОтчетныйПериод');

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Квартал',       this.getReportPeriodQtrStr(corrReportEndPeriod));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Год',           int2str(corrReportYear));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Название',      this.getReportPeriodName(corrReportStartPeriod, corrReportEndPeriod));
        }

        if (reportType == RpayPensionFundExportKindOfCorrection::Cancellative)
            return;

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВзносовНаСтраховую');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Начислено',     num2str(fundAmountIns, 1, 2, 1, 0));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Уплачено',      num2str(fundAmountIns, 1, 2, 1, 0));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВзносовНаНакопительную');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Начислено',     num2str(fundAmountSto, 1, 2, 1, 0));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Уплачено',      num2str(fundAmountSto, 1, 2, 1, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLine</Name>
				<Source><![CDATA[
    protected void fillLine(RHRMEmplTable       _emplTable,
                            str 20              _formType,
                            str 20              _personCategory,
                            RPayPFSeniorityType _seniorityType)
    {
        DirPersonName                   dirPersonName = _emplTable.personTable().dirPersonName();
        container                       seniorityCon;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        TransDate                       seniorityDateFrom, seniorityDateTo;
        Months                          senMonths;
        Days                            senDays;
        int senIdx;

        numInPack++;

        xmlLevel_3 = this.appendXMLElement(xmlLevel_2, #DocTypeSZV6);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НомерВпачке',           int2str(numInPack));
        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ВидФормы',              _formType);
        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипСведений',           this.dataType());
        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'РегистрационныйНомер',  companyInfo.PFRegNum_RU);
        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НаименованиеКраткое',   strreplace(strreplace(strupr(companyInfo.Name), '«', '\''), '»', '\''));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НалоговыйНомер');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ИНН',       CompanyInfoHelper::partyINN_RU(companyInfo));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'КПП',       CompanyInfoHelper::partyKPP_RU(companyInfo));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КодКатегории',          _personCategory);

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ОтчетныйПериод');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Квартал',       this.getReportPeriodQtrStr(reportEndPeriod));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Год',           int2str(reportYear));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Название',      this.getReportPeriodName(reportStartPeriod, reportEndPeriod));

        if (reportType != RpayPensionFundExportKindOfCorrection::None &&
            this.needCorrectedPeriod())
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'КорректируемыйОтчетныйПериод');

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Квартал',       this.getReportPeriodQtrStr(corrReportEndPeriod));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Год',           int2str(corrReportYear));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Название',      this.getReportPeriodName(corrReportStartPeriod, corrReportEndPeriod));
        }

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СтраховойНомер',    _emplTable.payPFRINN());

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ФИО');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Фамилия',       strupr(dirPersonName.LastName));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Имя',           strupr(dirPersonName.FirstName));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Отчество',      strupr(dirPersonName.MiddleName));

        if (reportType == RpayPensionFundExportKindOfCorrection::Cancellative)
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаЗаполнения',     date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));
            return;
        }

        if (this.needAddress())
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'АдресЗЛ');
            this.fillAddress(_emplTable, xmlLevel_4, true, true);
        }

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВзносовНаСтраховую');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Начислено',     num2str(fundAmountIns, 1, 2, 1, 0));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Уплачено',      num2str(fundAmountIns, 1, 2, 1, 0));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СуммаВзносовНаНакопительную');

            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Начислено',     num2str(fundAmountSto, 1, 2, 1, 0));
            xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Уплачено',      num2str(fundAmountSto, 1, 2, 1, 0));

        xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаЗаполнения',     date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));

        if (this.pensionAssignDate(_emplTable))
        {
            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаСоставленияНа',  date2str(this.pensionAssignDate(_emplTable), 123, 2, 2, 2, 2, 4, DateFlags::None));
        }

        // Вывод стажа
        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        while (seniorityIterator.more())
        {
            seniorityCon = seniorityIterator.value();
            [#seniorityValue] = seniorityCon;
            ++senIdx;

            xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СтажевыйПериод');

                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'НомерСтроки',           int2str(senIdx));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ДатаНачалаПериода',     date2str(seniorityDateFrom, 123, 2, 2, 2, 2, 4, DateFlags::None));
                xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ДатаКонцаПериода',      date2str(seniorityDateTo, 123, 2, 2, 2, 2, 4, DateFlags::None));

                if (insuranceTypeId)
                {
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'КоличествоЛьготныхСоставляющих',    int2str(1));
                    xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'ЛьготныйСтаж');

                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'НомерСтроки',           int2str(1));

                    xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ОсобенностиУчета');

                        xmlLevel_7 = this.appendXMLElement(xmlLevel_6, 'ДекретДети', insuranceTypeId);
                }

            seniorityIterator.moveNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTotals</Name>
				<Source><![CDATA[
    protected boolean fullTotals()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPeriodName</Name>
				<Source><![CDATA[
    private str 20 getReportPeriodName(ReportPeriod_RU _reportStartPeriod,
                                       ReportPeriod_RU _reportEndPeriod)
    {
        return 'С '   + date2str(dateStartMth(_reportStartPeriod), 123, 2, 2, 2, 2, 4, DateFlags::None) +
               ' ПО ' + date2str(dateEndMth(_reportEndPeriod), 123, 2, 2, 2, 2, 4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPeriodQtrStr</Name>
				<Source><![CDATA[
    private str 20 getReportPeriodQtrStr(ReportPeriod_RU _reportEndPeriod)
    {
        int     quarterSign;

        if (year(_reportEndPeriod) == #ReportYear2010)
        {
            quarterSign = (_reportEndPeriod == dateEndYr(_reportEndPeriod) ? 2 : 1);
        }
        else
        {
            quarterSign = mthOfYr(_reportEndPeriod) / 3;
        }

        return int2str(quarterSign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSenMap</Name>
				<Source><![CDATA[
    protected Map getSenMap(str 20              _formType,
                            str 20              _personCategory,
                            RPayPFSeniorityType _seniorityType,
                            RHRMEmplTable       _emplTable)
    {
        Map     emplMap;

        if (_formType == #FormTypeSZV61)
        {
            emplMap = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersSpecSenMap : workersSpecSenMap);
        }
        else if (_formType == #FormTypeSZV62)
        {
            emplMap = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersComSenMap : workersComSenMap);
        }
        else
        {
            throw error(strFmt("@SYS76766", funcName(), "@SYS83964"));
        }

        return emplMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.queryRun(queryRun.pack());
        parmContract.correctionType(reportType);

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();
        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);

        docPersonQtyMax = real2int(RPayRateTable::find(payTaxParameters.SZVPersonCounter).getValue(RPayRateCallContext::construct(reportEndPeriod)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewDocument</Name>
				<Source><![CDATA[
    protected boolean isNewDocument()
    {
        boolean ret;

        if (keyDocChanged.in([#parmKeyReport]) || !keyEmplId)
        {
            ret = false;
        }
        else
        {
            ret = true;
            keyDocChanged.add([#parmKeyReport]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewFile</Name>
				<Source><![CDATA[
    protected boolean isNewFile()
    {
        boolean ret;

        if (keyFileChanged.in([#parmKeyFile]) || !keyCategory || !keySpecialSeniority)
        {
            ret = false;
        }
        else
        {
            ret = true;
            keyFileChanged.add([#parmKeyFile]);
        }

        if (docPersonQtyMax && docPersonQtyMax <= docPersonQty && keySpecialSeniority != RPayPFSeniorityType::Special)
        {
            ret = true;
            docPersonQty = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minYearEnabled</Name>
				<Source><![CDATA[
    protected Yr minYearEnabled()
    {
        return #ReportYear2010;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAddress</Name>
				<Source><![CDATA[
    protected boolean needAddress()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCorrectedPeriod</Name>
				<Source><![CDATA[
    protected boolean needCorrectedPeriod()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pensionAssignDate</Name>
				<Source><![CDATA[
    protected TransDate pensionAssignDate(RHRMEmplTable _emplTable)
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayPFReportPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSZV612XML();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMEmplTable   emplTableLocal;
        container con;

        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
        {
            return;
        }

        keyDocChanged  = new Set(Types::Container);
        keyFileChanged = new Set(Types::Container);

        this.initEmployeesData();

        totalFundCommand.parmValue(connull());

        fundDataIterator = totalFundCommand.iterator();

        if (fundDataIterator.more())
        {
            this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
            progress.updateInterval(0);

            while (fundDataIterator.more())
            {
                con = fundDataIterator.value();
                [#parmKeyReport] = conpeek(con, 1);
                [#parmValue]     = conpeek(con, 2);

                if (this.isNewFile())
                {
                    if (xmlDoc)
                    {
                        new FileIOPermission(conpeek(this.fileName(), 1), #io_write).assert();
                        xmlDoc.save(conpeek(this.fileName(), 1));
                        xmlDoc = NULL;
                        CodeAccessPermission::revertAssert();
                        ++packageNum;
                    }

                    if (this.makeDocument())
                    {
                        //++packageNum;
                        this.fillHeader(#DocTypeSZV6, keyCategory, keySpecialSeniority);
                        keyDocChanged = new Set(Types::Container);
                    }
                }

                if (this.isNewDocument())
                {
                    emplTableLocal = RHRMEmplTable::find(keyEmplId);
                    progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));
                    progress.incCount();

                    if (keySpecialSeniority == RPayPFSeniorityType::Special)
                    {
                        this.fillLine(emplTableLocal, #FormTypeSZV61, keyCategory, keySpecialSeniority);
                    }
                    else
                    {
                        this.fillLine(emplTableLocal, #FormTypeSZV62, keyCategory, keySpecialSeniority);
                        docPersonQty++;
                    }
                }

                fundDataIterator.moveNext();
            }

            if (xmlDoc)
            {
                new FileIOPermission(conpeek(this.fileName(), 1), #io_write).assert();
                xmlDoc.save(conpeek(this.fileName(), 1));
                xmlDoc = NULL;
                CodeAccessPermission::revertAssert();
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>