<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdConsumptionDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdConsumptionDP_CN</c> class is the Report Data Provider class for production consumption variance report.
/// </summary>
/// <remarks>
/// This is the RDP class for production consumption variance report.
/// </remarks>
class ProdConsumptionDP_CN
{
    //TMP table
    ProdConsumptionTmp_CN              prodConsumptionTmp;

    //Report data
    ProdTable                          prodTable;
    ProdBOM                            prodBom;
    InventTrans                        inventTrans;

    private const real DecFormat = 0.01;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProdConsumptionReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the ProdConsumptionTmp table
    /// </summary>
    private void initProdConsumptionReport()
    {
        ProdVarRate_CN          bomVarRate;
        ProdVarRate_CN          consVarRate;

        ProdBOMQtyCons_CN       appBOMQty;
        ProdBOMQtyCons_CN       bomQty;

        //find the related tables.
        ProdBOM     prodBomLocal            = ProdBOM::findTransId(prodBom.InventTransId);
        InventTable inventTableProductLocal = InventTable::find(prodTable.ItemId);
        InventTable inventTableItemLocal    = InventTable::find(prodBomLocal.ItemId);
        BOM         bomLocal                = BOM::findRecId(prodBomLocal.BOMRefRecId);

        UnitOfMeasureSymbol inventTableModuleUnit = inventTableItemLocal.inventTableModuleInvent().UnitId;

        prodConsumptionTmp.ProdOrder           = prodTable.ProdId;
        prodConsumptionTmp.ProdId              = prodTable.ItemId;
        prodConsumptionTmp.ProductName         = inventTableProductLocal.itemName();
        prodConsumptionTmp.ProdUnit            = inventTableProductLocal.BOMUnitId;
        prodConsumptionTmp.ItemId              = prodBomLocal.ItemId;
        prodConsumptionTmp.ItemName            = inventTableItemLocal.itemName();
        prodConsumptionTmp.ItemUnit            = prodBomLocal.UnitId;

        //Get the engineering Bom qty / convert it from the engineering bom unit to production bom unit.
        if (prodBomLocal.UnitId != bomLocal.UnitId)
        {   
            bomQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTableItemLocal.ItemId,
                                                                                           bomLocal.InventDimId,
                                                                                           bomLocal.BOMQty,
                                                                                           bomLocal.UnitId,
                                                                                           prodBomLocal.UnitId,
                                                                                           NoYes::Yes);
        }
        else
        {
            bomQty = bomLocal.BOMQty;
        }

        //Get inventory qty / convert it from the inventory unit to production bom unit.
        ProdBOMQtyCons_CN consQty = - inventTrans.Qty;

        if (prodBomLocal.UnitId != inventTableModuleUnit)
        {
            consQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTableItemLocal.ItemId,
                                                                                           bomLocal.InventDimId,
                                                                                           consQty,
                                                                                           inventTableModuleUnit,
                                                                                           prodBomLocal.UnitId,
                                                                                           NoYes::Yes);
        }

        if (bomLocal.BOMQtySerie == 0)
        {
            appBOMQty = 0;
        }
        else
        {
            appBOMQty = ProdTable::find(prodTable.ProdId).QtySched * bomQty / bomLocal.BOMQtySerie ;
        }

        ProdBOMQtyCons_CN plannedQty = prodBomLocal.QtyBOMCalc;
        ProdBOMQtyCons_CN bomVarQty  = plannedQty - appBOMQty;
        ProdBOMQtyCons_CN consVarQty = consQty - plannedQty;

        if (appBOMQty == 0)
        {
            bomVarRate = 0;
            consVarRate = 0;
        }
        else
        {
            bomVarRate = 100 * bomVarQty / appBOMQty;
            consVarRate = 100 * consVarQty / appBOMQty;
        }

        prodConsumptionTmp.AppBOMQty    = appBOMQty;
        prodConsumptionTmp.PlannedQty   = plannedQty;
        prodConsumptionTmp.ConsQty      = consQty;
        prodConsumptionTmp.BOMVarQty    = bomVarQty;
        prodConsumptionTmp.ConsVarQty   = consVarQty;
        prodConsumptionTmp.BOMVarRate   = round(bomVarRate, DecFormat);
        prodConsumptionTmp.ConsVarRate  = round(consVarRate, DecFormat);
        prodConsumptionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertEmptyData</Name>
				<Source><![CDATA[
    private void checkAndInsertEmptyData()
    {
        select firstOnly recId from prodConsumptionTmp;
        if (prodConsumptionTmp.RecId == 0)
        {
            prodConsumptionTmp.clear();
            prodConsumptionTmp.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes the report business logic.
    /// </summary>
    /// <param name = "_contract"> Insntance of <C>ProdConsumptionContract_CN</C></param>
    public ProdConsumptionTmp_CN prepareData(ProdConsumptionContract_CN _contract)
    {
        //Execute the related query to get data;

        //Report parameters
        Range                              consumptionRate;

        //Get parameters from Contract
        ProdId    prodId   = _contract.parmProductionId();
        ItemId    itemId   = _contract.parmItemId();
        TransDate fromDate = _contract.parmFromDate();
        TransDate toDate   = _contract.parmToDate();

        Query queryTrans = new Query(queryStr(ProdConsumptionTrans_CN));

        //Gets the report main data fields which shall be printed in the report directly.
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(ProdTable)), fieldNum(ProdTable, ProdId)).value(prodId);
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(ProdBOM)), fieldNum(ProdBOM, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(ProdTable)), fieldNum(ProdTable, FinishedDate)).value(queryRange(fromDate, toDate));
        QueryRun queryRunTrans = new QueryRun(queryTrans);
        while (queryRunTrans.next())
        {
            prodTable       = queryRunTrans.get(tableNum(ProdTable));
            prodBom         = queryRunTrans.get(tableNum(ProdBOM));
            inventTrans     = queryRunTrans.get(tableNum(InventTrans));
            this.initProdConsumptionReport();
        }

        this.checkAndInsertEmptyData();

        return prodConsumptionTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>