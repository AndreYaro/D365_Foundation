<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentProperties</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CreditCardPaymentProperties</c> class contains a collection of name/value pairs identified by a namespace and name.
/// </summary>
using PortableSDK = Microsoft.Dynamics.Retail.PaymentSDK.Portable;

public class CreditCardPaymentProperties
{
    List list;

    public static str CryptoPurpose = "{2BA22AD6-71F9-48D5-B95D-74EB0F6684B3}";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new property.
    /// </summary>
    /// <param name="_property">
    /// A property.
    /// </param>
    /// <returns>
    /// The value that was added to the list.
    /// </returns>
    public CreditCardPaymentProperty add(CreditCardPaymentProperty _property)
    {
        return list.addEnd(_property);
    }

]]></Source>
			</Method>
			<Method>
				<Name>append</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all the properties from another collection of properties.
    /// </summary>
    /// <param name="_properties">
    /// A collection of properties.
    /// </param>
    public void append(CreditCardPaymentProperties _properties)
    {
        var enum = _properties.enumerator();

        while (enum.moveNext())
        {
            this.add(enum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of properties in the collection.
    /// </summary>
    /// <returns>
    /// A non-negative integer.
    /// </returns>
    public int count()
    {
        return list.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator over the collection of properties.
    /// </summary>
    /// <returns>
    /// An enumerator.
    /// </returns>
    public ListEnumerator enumerator()
    {
        return list.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a property for a given namespace and name.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// A property if found; otherwise null.
    /// </returns>
    public CreditCardPaymentProperty find(str _namespace, str _name)
    {
        var enum = list.getEnumerator();

        while (enum.moveNext())
        {
            CreditCardPaymentProperty property = enum.current();

            if (property.parmNamespace() == _namespace && property.parmName() == _name)
            {
                return property;
            }
            else if (property.parmValueType() == CreditCardPropertyDataType::PropertyList)
            {
                property = property.parmPropertyListValue().find(_namespace, _name);
                if (property)
                {
                    return property;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the collection is empty.
    /// </summary>
    /// <returns>
    /// true if there are no properties in the collection.
    /// </returns>
    public boolean isEmpty()
    {
        return list.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        list = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a property with a given namespace and name.
    /// </summary>
    /// <param name="_namespace">
    /// A namespace.
    /// </param>
    /// <param name="_name">
    /// A name.
    /// </param>
    /// <returns>
    /// true if the named property was removed; otherwise null.
    /// </returns>
    public boolean remove(str _namespace, str _name)
    {
        var hasRemoved = false;
        var iter = new ListIterator(list);

        while (iter.more())
        {
            CreditCardPaymentProperty property = iter.value();
            if (property.parmNamespace() == _namespace && property.parmName() == _name)
            {
                iter.delete();
                hasRemoved = true;
            }
            else if (property.parmValueType() == CreditCardPropertyDataType::PropertyList)
            {
                hasRemoved = property.parmPropertyListValue().remove(_namespace, _name);
            }
            if (hasRemoved)
            {
                break;
            }
            iter.next();
        }

        return hasRemoved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the collections of properties as an array.
    /// </summary>
    /// <returns>
    /// An array of properties.
    /// </returns>
    public PortableSDK.PaymentProperty[] toArray()
    {
        PortableSDK.PaymentProperty newProperty(CreditCardPaymentProperty _property)
        {
            return _property.toProperty();
        }

        var properties = new PortableSDK.PaymentProperty[list.elements()]();
        var enumerator = list.getEnumerator();

        for (var i = 0; enumerator.moveNext(); i++)
        {
            properties.set_Item(i, newProperty(enumerator.current()));
        }

        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the collections of properties as XML.
    /// </summary>
    /// <returns>
    /// A string formatted as XML.
    /// </returns>
    public str toXmlString()
    {
        return CreditCardPaymentProperties::convertPropertyArrayToXML(this.toArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CreditCardPaymentProperties construct()
    {
        return new CreditCardPaymentProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the collection from an array of properties.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    /// <returns>
    /// An instance of the <c>CreditCardPaymentProperties</c> class.
    /// </returns>
    public static CreditCardPaymentProperties fromProperties(PortableSDK.PaymentProperty[] _properties)
    {
        var properties = new CreditCardPaymentProperties();
        var n = _properties ? _properties.get_Count() : 0;
        
        if (n > 0)
        {
            PortableSDK.Hashtable hashTable = PortableSDK.PaymentProperty::ConvertToHashtable(_properties);

            for (var i = 0; i < n; i++)
            {
                var property = _properties.get_Item(i);
                if(property.get_ValueType() == PortableSDK.DataType::PropertyList)
                {
                    PortableSDK.PaymentProperty[] singleConnectorProperties = new PortableSDK.PaymentProperty[1]();
                    singleConnectorProperties.SetValue(property, 0);
                    hashTable = PortableSDK.PaymentProperty::ConvertToHashtable(singleConnectorProperties);
                }

                properties.add(CreditCardPaymentProperty::fromProperty(property, hashTable));
            }
        }

        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the collection from XML.
    /// </summary>
    /// <param name="_propertyValuesAsXmlString">
    /// Properties represented as an XML formatted string.
    /// </param>
    /// <returns>
    /// An instance of the <c>CreditCardPaymentProperties</c> class.
    /// </returns>
    public static CreditCardPaymentProperties fromXmlString(str _propertyValuesAsXmlString)
    {
        if (_propertyValuesAsXmlString)
        {
            return CreditCardPaymentProperties::fromProperties(PortableSDK.PaymentProperty::ConvertXMLToPropertyArray(_propertyValuesAsXmlString));
        }
        else
        {
            return new CreditCardPaymentProperties();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get current state of compress feature in feature configuration
    /// </summary>
    /// <returns>Compress payment properties feature state, enabled or disabled</returns>
    internal static boolean compressFeatureEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(RetailCompressPaymentTokensFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPropertyArrayToXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert properties to Xml and compress if RetailCompressPaymentTokensFeature enabled in configuration.
    /// </summary>
    /// <param name = "properties">Properties list to be converted in XML.</param>
    /// <returns>A string of properties in XML format.</returns>
    public static str convertPropertyArrayToXML(PortableSDK.PaymentProperty[] properties)
    {
        return CreditCardPaymentProperties::convertToXml(properties, CreditCardPaymentProperties::compressFeatureEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPropertyArrayToCompressedXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the payment properties to XML. The XML will be compressed.
    /// </summary>
    /// <param name = "properties">Properties list to be converted in XML.</param>
    /// <returns>A compressed string containing the properties in XML format.</returns>
    internal static str convertPropertyArrayToCompressedXML(PortableSDK.PaymentProperty[] _properties)
    {
        return CreditCardPaymentProperties::convertToXml(_properties, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the payment properties to XML.
    /// </summary>
    /// <param name = "_properties">The payment properties.</param>
    /// <param name = "_compress">Whether to compress the XML. Optional.</param>
    /// <returns>A string of properties in XML format.</returns>
    internal static str convertToXml(PortableSDK.PaymentProperty[] _properties, boolean _compress = false)
    {
        return PortableSDK.PaymentProperty::convertPropertyArrayToXML(_properties, _compress);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>