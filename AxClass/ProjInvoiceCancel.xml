<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceCancel extends RunBase
{
    ProjRevenueTrans            tProjRevenueTrans;          // < delete initial retainage for dummy fee transactions>
    ProjJournalTrans            tProjJournalTrans;          // < delete initial retainage for dummy fee journal line>
    ProjJournalTable            tProjJournalTable;          // < delete initial retainage for dummy fee journal>
    ProjProposalRevenueDetail   projProposalRevenueDetail;
    ProjRevenueTransSale        projRevenueTransSaleLoc;
    ProjRevenueTransSale        projRevenueTransSale;
    ProjRevenueTrans            projRevenueTransLoc;
    boolean skipCancel = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelProposal</Name>
				<Source><![CDATA[
    public void cancelProposal(ProjProposalJour _projProposalJour, boolean bValidate = true)
    {
        if (!skipCancel && _projProposalJour)
        {
            ProjProposalJour      projProposalJour;
        
            ttsbegin;

            select forupdate projProposalJour
                where projProposalJour.RecId    == _projProposalJour.RecId;

            if (projProposalJour && projProposalJour.LineProperty != ProjLinePropertyCode::Invoiced)
            {
                // Cancel contract line related.
                if (ProjInvoiceTable::find(projProposalJour.ProjInvoiceProjId).psaContractLines == NoYes::Yes)
                {
                    this.psaCancelContractLine(projProposalJour);
                }

                ProjProposalRevenue			projProposalRevenue;

                // < delete initial retainage when proposal canceled. >
                while select ProposalRefRecId,SaleRefRecId from projProposalRevenueDetail
                    join RecId from projRevenueTransSale
                    where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                            && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                            || projRevenueTransSale.TransStatus == ProjTransStatus::InvoiceProposal)
                    join RecId,ProposalId,IsRetained,IsReleased,TransId from projProposalRevenue
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                            && projProposalRevenue.ProposalId == projProposalJour.ProposalId
                            && (projProposalRevenue.IsRetained == NoYes::Yes
                            || projProposalRevenue.IsReleased == NoYes::Yes)
                {
                    delete_from projRevenueTransSaleLoc
                        where projRevenueTransSaleLoc.RecId == projProposalRevenueDetail.SaleRefRecId;

                    select firstonly projRevenueTransSaleLoc
                        where projRevenueTransSaleLoc.TransId == tProjRevenueTrans.TransId;

                    if (!projRevenueTransSaleLoc)
                    {
                        tProjRevenueTrans = ProjRevenueTrans::find(projProposalRevenue.TransId, true);

                        select forupdate tProjJournalTrans
                        where tProjJournalTrans.TransId == tProjRevenueTrans.TransId;

                        if (tProjJournalTrans)
                        {
                            tProjJournalTable = ProjJournalTable::find(tProjJournalTrans.JournalId, true);
                            tProjJournalTrans.delete();
                            tProjJournalTable.delete();
                        }
                        delete_from projRevenueTransLoc
                        where projRevenueTransLoc.TransId == tProjRevenueTrans.TransId;
                    }
                }

                TaxWorkRegulation	taxWorkRegulation;

                delete_from taxWorkRegulation
                where taxWorkRegulation.HeadingRecId    == projProposalJour.RecId
                   && taxWorkRegulation.HeadingTableId  == projProposalJour.TableId;

                ProjProposalItem	projProposalItem;

                while select forupdate projProposalItem
                    where projProposalItem.ProposalId == projProposalJour.ProposalId
                {
                    if (this.shouldUpdateSalesLineOnCancelProposal(projProposalItem) && bValidate)
                    {
                        SalesLine           tSalesline;
                        tSalesline = SalesLine::findInventTransId(projProposalItem.InventTransId, true);
                        this.setSalesLineQuantityOnCancelProposal(tSalesline, projProposalItem);

                        tSalesline.update();
                    }

                    projProposalItem.delete();
                }

                PSAProjProposalProj projProposalProj;

                delete_from projProposalProj
                    where projProposalProj.ProjProposalId == projProposalJour.ProposalId;

                delete_from projProposalRevenue
                    where projProposalRevenue.ProposalId  == projProposalJour.ProposalId;

                ProjProposalCost  projProposalCost;

                delete_from projProposalCost
                    where projProposalCost.ProposalId     == projProposalJour.ProposalId;

                ProjProposalEmpl  projProposalEmpl;

                delete_from projProposalEmpl
                    where projProposalEmpl.ProposalId     == projProposalJour.ProposalId;

                ProjProposalOnAcc  projProposalOnAcc;
            
                delete_from projProposalOnAcc
                    where projProposalOnAcc.ProposalId    == projProposalJour.ProposalId;

                if (projProposalJour.PSAInvoiceFormats == PSAInvoiceFormats::ManageInvoice)
                {
                    PSAProjInvoiceDetailLine    tpsaProjInvoiceDetailLine;  // Deleta invoice management lines

                    //  Delete invoice management lines
                    delete_from tpsaProjInvoiceDetailLine
                        where tpsaProjInvoiceDetailLine.ProposalId == projProposalJour.ProposalId;

                    PSAProjInvoiceDetailTrans   tpsaProjInvoiceDetailTrans; //Deleta invoice management lines

                    //  Delete invoice management lines
                    delete_from tpsaProjInvoiceDetailTrans
                        where tpsaProjInvoiceDetailTrans.ProposalId == projProposalJour.ProposalId;

                    //Re-select the record as it has been updated by the deletes
                    select forupdate projProposalJour
                        where projProposalJour.RecId    == _projProposalJour.RecId;
                }

                ProjProposalTransTable projProposalTransTable;

                delete_from projProposalTransTable
                    where projProposalTransTable.ProposalId == projProposalJour.ProposalId;

                CustPaymSched	custPaymSched;

                delete_from custPaymSched
                    where custPaymSched.ExtTableId        == tableNum(ProjProposalJour)
                    &&    custPaymSched.ExtRecId          == projProposalJour.RecId;

                if (ProjProposalTranSummariesRefresh::isInvoiceProposalLineEditPerfEnabled())
                {
                    projProposalJour.reread();
                }

                projProposalJour.LineProperty = ProjLinePropertyCode::Canceled;

                projProposalJour.update();

                // <GTE>
                if(TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    ProjProposalTotals projProposalTotals = new ProjProposalTotals(projProposalJour);
                    projProposalTotals.deleteTransitDocuments();
                }
                // </GTE>

                info(strFmt("@SYS66076",projProposalJour.ProposalId));
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the parameter to skip project proposal cancellation.
    /// </summary>
    /// <param name = "_skipCancel">
    /// True if proposal cancellation needs to be skipped; otherwise, false.
    /// </param>
    /// <returns>
    /// True if proposal cancellation will be be skipped; otherwise, false.
    /// </returns>
    public boolean parmSkipCancel(boolean _skipCancel = skipCancel)
    {
        skipCancel = _skipCancel;
        return skipCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSalesLineOnCancelProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesLine</c> should be updated while proposal cancellation.
    /// </summary>
    /// <param name = "_projProposalItem">
    /// <c>ProjProposalItem</c> table buffer.
    /// </param>
    /// <returns>
    /// true, If the <c>ItemType</c> of <c>ProjProposalItem</c> record is of type sales order; otherwise, false.
    /// </returns>
    protected boolean shouldUpdateSalesLineOnCancelProposal(ProjProposalItem _projProposalItem)
    {
        return _projProposalItem.ItemType == ProjItemType::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineQuantityOnCancelProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>SalesLine</c> proposal quantities on proposal calcellation.
    /// </summary>
    /// <param name = "_salesLine">
    /// <c>SalesLine</c> table buffer.
    /// </param>
    /// <param name = "_projProposalItem">
    /// <c>ProjProposalItem</c> table buffer.
    /// </param>
    protected void setSalesLineQuantityOnCancelProposal (SalesLine _salesLine, ProjProposalItem _projProposalItem)
    {
        _salesLine.psaProjProposalQty       -= _projProposalItem.DeliverNow;
        _salesLine.psaProjProposalInventQty -= _projProposalItem.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCancelContractLine</Name>
				<Source><![CDATA[
    // Description:     Cancel contract line related
    protected void psaCancelContractLine(ProjProposalJour _tProjProposalJour)
    {
        if (!_tProjProposalJour)
        {
            return;
        }
        
        ProjProposalRevenue                 projProposalRevenue;
        ProjProposalRevenue                 projProposalRevenueCheck;
        ProjProposalRevenueDetail           projProposalRevenueDetailCheck;
        ProjProposalJour                    projProposalJourCheck;
        PSAContractLineItems                psaContractLineItems;
        InventQty                           unitsToInvoice;

        while select ProposalRefRecId,SaleRefRecId from projProposalRevenueDetail
            join RecId from projRevenueTransSale
            where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                    && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                    || projRevenueTransSale.TransStatus == ProjTransStatus::InvoiceProposal)
            join RecId,ProposalId,IsRetained,IsReleased,TransId, psaContractLineNum from projProposalRevenue
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                    && projProposalRevenue.ProposalId == _tProjProposalJour.ProposalId
                    && (projProposalRevenue.IsRetained == NoYes::No
                    && projProposalRevenue.IsReleased == NoYes::No)
        {
            psaContractLineItems = PSAContractLineItems::find(projProposalRevenue.psaContractLineNum, true);
            if (psaContractLineItems.isLineTypeNotLumpSumAndTM())
            {
                this.reverseProjTransPosting(projProposalRevenue, _tProjProposalJour);

                delete_from projRevenueTransSaleLoc where
                        projRevenueTransSaleLoc.RecId == projProposalRevenueDetail.SaleRefRecId;

                tProjRevenueTrans = ProjRevenueTrans::find(projProposalRevenue.TransId);

                select firstonly projRevenueTransSaleLoc where
                       projRevenueTransSaleLoc.TransId == tProjRevenueTrans.TransId;

                if (!projRevenueTransSaleLoc)
                {
                    tProjRevenueTrans = ProjRevenueTrans::find(projProposalRevenue.TransId, true);

                    select forupdate tProjJournalTrans where
                           tProjJournalTrans.TransId == tProjRevenueTrans.TransId;

                    if (tProjJournalTrans)
                    {
                        tProjJournalTable = ProjJournalTable::find(tProjJournalTrans.JournalId, true);
                        tProjJournalTrans.delete();
                        tProjJournalTable.delete();
                    }
                    delete_from projRevenueTransLoc where
                          projRevenueTransLoc.TransId == tProjRevenueTrans.TransId;

                    PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalRevenue.psaContractLineNum, NoYes::No);
                }
                else
                {
                    // Check if there are other records as part of this ProjRevenueTrans, which have not been invoiced
                    select firstonly projRevenueTransSaleLoc where
                           projRevenueTransSaleLoc.TransId == tProjRevenueTrans.TransId
                    exists join projProposalRevenueDetailCheck where
                           projProposalRevenueDetailCheck.SaleRefRecId == projRevenueTransSaleLoc.RecId
                    exists join projProposalRevenueCheck where
                           projProposalRevenueCheck.RecId == projProposalRevenueDetailCheck.ProposalRefRecId
                    exists join projProposalJourCheck where
                           projProposalJourCheck.ProposalId    == projProposalRevenueCheck.ProposalId &&
                           projProposalJourCheck.ProjInvoiceId == '';

                    if (!projRevenueTransSaleLoc)
                    {
                        PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalRevenue.psaContractLineNum, NoYes::No);
                    }
                    else
                    {
                        tProjRevenueTrans = ProjRevenueTrans::find(projProposalRevenue.TransId, true);

                        select sum(LineAmount) from projRevenueTransSaleLoc where
                               projRevenueTransSaleLoc.TransId == tProjRevenueTrans.TransId;

                        tProjRevenueTrans.TotalSalesAmountCur = projRevenueTransSaleLoc.LineAmount;
                        tProjRevenueTrans.update();

                        unitsToInvoice = PSAContractLineItemsServer::computeQuantityForUOD(projProposalRevenue.psaContractLineNum, projRevenueTransSaleLoc.LineAmount);

                        if (unitsToInvoice > 0.0)
                        {
                            PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalRevenue.psaContractLineNum, NoYes::Yes, unitsToInvoice);
                        }
                        else
                        {
                            PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalRevenue.psaContractLineNum, NoYes::Yes);
                        }
                    }
                }
            }
        }

        ProjProposalCost    tProjProposalCost;        

        while select psaContractLineNum, TransId from tProjProposalCost where
                     tProjProposalCost.ProposalId == _tProjProposalJour.ProposalId
        {
            PSAContractLineItemsServer::updateUnitsOrPercentProposal(tProjProposalCost.psaContractLineNum, NoYes::No);           
        }

        ProjProposalItem tProjProposalItem;        

        while select psaContractLineNum, ProjTransId from tProjProposalItem where
                     tProjProposalItem.ProposalId == _tProjProposalJour.ProposalId
        {
            PSAContractLineItemsServer::updateUnitsOrPercentProposal(tProjProposalItem.psaContractLineNum, NoYes::No);
        }

        ProjProposalEmpl tProjProposalEmpl;        

        while select psaContractLineNum, TransId from tProjProposalEmpl
            where tProjProposalEmpl.ProposalId == _tProjProposalJour.ProposalId
        {
            PSAContractLineItemsServer::updateUnitsOrPercentProposal(tProjProposalEmpl.psaContractLineNum, NoYes::No);            
        }

        ProjOnAccTrans              tProjOnAccTrans;
        ProjOnAccTrans              projOnAccTransCreate;
        ProjOnAccTrans              projOnAccTransDelete;
        ProjOnAccTransSale          projOnAccTransSale;
        ProjOnAccTransSale          projOnAccTransSaleLoc;
        ProjOnAccTransSale          projOnAccTransSaleLoc2;
        ProjOnAccTransSale          projOnAccTransSaleDelete;
        ProjProposalOnAcc           tPprojProposalOnAcc;
        ProjProposalOnAcc           projProposalOnAccLoc;
        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjProposalOnAccDetail     projProposalOnAccDetailLoc;
        AmountCur                   onAccountAmount;

        while select ProposalRefRecId,SaleRefRecId from projProposalOnAccDetail
            join projOnAccTransSale
                where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                    && projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal
                        join RecId,ProposalId, TransId, psaContractLineNum from tPprojProposalOnAcc
                            where tPprojProposalOnAcc.RecId       == projProposalOnAccDetail.ProposalRefRecId
                                && tPprojProposalOnAcc.ProposalId == _tProjProposalJour.ProposalId
        {
            psaContractLineItems = PSAContractLineItems::find(tPprojProposalOnAcc.psaContractLineNum, true);

            if (psaContractLineItems.LineType == PSAContractLineType::Progress || psaContractLineItems.LineType == PSAContractLineType::UOD)
            {
                onAccountAmount = projOnAccTransSale.Amount;
                projOnAccTransSale.selectForUpdate(true);
                projOnAccTransSale.delete();

                tProjOnAccTrans = ProjOnAccTrans::find(tPprojProposalOnAcc.TransId);

                select firstonly RecId from projOnAccTransSaleLoc2 where
                    projOnAccTransSaleLoc2.TransId == tProjOnAccTrans.TransId;

                if (!projOnAccTransSaleLoc2)
                {
                    if (tProjOnAccTrans)
                    {
                        PSAContractLineItemsServer::updateUnitsOrPercentProposal(tProjOnAccTrans.PSAContractLineNum, NoYes::No);
                        tProjOnAccTrans.delete();
                    }
                }
                else
                {
                    // Check if there are other records as part of this ProjOnAccTrans, which have not been invoiced
                    select firstonly projOnAccTransSaleLoc
                        where projOnAccTransSaleLoc.TransId == tProjOnAccTrans.TransId
                            join ProposalRefRecId from projProposalOnAccDetailLoc
                                where projProposalOnAccDetailLoc.SaleRefRecId == projOnAccTransSaleLoc.RecId
                                    join ProposalId from projProposalOnAccLoc where
                                        projProposalOnAccLoc.RecId == projProposalOnAccDetailLoc.ProposalRefRecId
                                            join RecId from projProposalJourCheck where
                                                projProposalJourCheck.ProposalId == projProposalOnAccLoc.ProposalId &&
                                                projProposalJourCheck.ProjInvoiceId == '';

                    if (!projOnAccTransSaleLoc)
                    {
                        PSAContractLineItemsServer::updateUnitsOrPercentProposal(tPprojProposalOnAcc.psaContractLineNum, NoYes::No);
                    }
                    else
                    {
                        select sum(Amount) from projOnAccTransSaleLoc
                             where projOnAccTransSaleLoc.TransId == tProjOnAccTrans.TransId;

                        tProjOnAccTrans.TotalSalesAmountCur = projOnAccTransSaleLoc.Amount;
                        tProjOnAccTrans.doUpdate();

                        unitsToInvoice = PSAContractLineItemsServer::computeQuantityForUOD(projProposalOnAccLoc.psaContractLineNum, projRevenueTransSaleLoc.LineAmount);

                        if (unitsToInvoice > 0.0)
                        {
                            PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalOnAccLoc.psaContractLineNum, NoYes::Yes, unitsToInvoice);
                        }
                        else
                        {
                            PSAContractLineItemsServer::updateUnitsOrPercentProposal(projProposalOnAccLoc.psaContractLineNum, NoYes::Yes);
                        }
                    }
                }

                select firstOnly projOnAccTransDelete
                    where projOnAccTransDelete.PSAContractLineNum == psaContractLineItems.ContractLineNum
                        exists join RecId from projOnAccTransSaleDelete
                            where projOnAccTransSaleDelete.TransId == projOnAccTransDelete.TransId
                                && projOnAccTransSaleDelete.TransStatus == ProjTransStatus::Registered;

                if (projOnAccTransDelete)
                {
                    projOnAccTransDelete.selectForUpdate(true);
                    onAccountAmount += projOnAccTransDelete.TotalSalesAmountCur;
                    projOnAccTransDelete.delete();
                }

                projOnAccTransCreate.initFromBillingRule(psaContractLineItems);
                ProjOnAccTrans::createOnAccTrans(projOnAccTransCreate, onAccountAmount);
            }
        }

        while select psaContractLineNum, TransId from tPprojProposalOnAcc
            where tPprojProposalOnAcc.ProposalId == _tProjProposalJour.ProposalId
                join tProjOnAccTrans
                    where tProjOnAccTrans.TransId == tPprojProposalOnAcc.TransId
                          && (tProjOnAccTrans.TransactionOrigin != ProjOrigin::ProgressBillingRule
                          && tProjOnAccTrans.TransactionOrigin != ProjOrigin::UnitOfDeliveryBillingRule
                          && tProjOnAccTrans.TransactionOrigin != ProjOrigin::Milestone)
        {
            PSAContractLineItemsServer::updateUnitsOrPercentProposal(tPprojProposalOnAcc.psaContractLineNum, NoYes::No);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs proposal cancellation from form.
    /// </summary>
    /// <param name = "args">
    /// Data passed from form.
    /// </param>
    protected void runFromForm(Args args)
    {
        ProjProposalJour        projProposalJour;
        FormDataSource      formDataSource;

        if (args && args.dataset() == tableNum(ProjProposalJour) && FormDataUtil::getFormDataSource(args.record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(args.record());
            for (projProposalJour=formDataSource.getFirst(true) ? formDataSource.getFirst(true) : args.record();
            projProposalJour;
            projProposalJour=formDataSource.getNext())
            {
                this.cancelProposal(projProposalJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static boolean main(Args args)
    {
        ProjInvoiceCancel  projInvoiceCancel;

        if (!args || ! args.caller() || ! args.dataset())
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        if (Box::yesNo("@GLS360099", DialogButton::Yes, "@GLS360100") == DialogButton::No)
        {
            return false;
        }

        switch (args.record().TableId)
        {
            case (tableNum(ProjProposalJour)) :

                projInvoiceCancel = new ProjInvoiceCancel();
                projInvoiceCancel.runFromForm(args);
                break;

            default:
                throw error(strFmt("@SYS19306",funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProjTransPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the Ledger Postings for fee transactions associated with the invoice proposal.
    /// </summary>
    /// <param name="_projProposalRevenue">
    /// The ProjProposalRevenue record that needs to be deleted.
    /// </param>
    /// <param name="_tProjProposalJour">
    /// The ProjProposalJour record that needs to be deleted.
    /// </param>
    private void reverseProjTransPosting(ProjProposalRevenue _projProposalRevenue, ProjProposalJour _tProjProposalJour)
    {
        NumberSeq       numberSeq =  NumberSeq::newGetVoucher(ProjParameters::numRefProjPeriodVoucher());
        DetailSummary   detailSummary = ProjParameters::find().LineTotalAccrueRevenue == ProjLineTotal::Line ? DetailSummary::Detail : DetailSummary::Summary;

        TransactionTxt transTxt  = TransactionTxt::construct(LedgerTransTxt::ProjectPostingLedger);
        ProjPeriodPostingLedgerSales projPeriodPostingLedgerSales = new ProjPeriodPostingLedgerSales();

        ttsbegin;

        Voucher voucher = numberSeq.voucher();
        TransDate transactionDate = _projProposalRevenue.transDate();

        transTxt.setDate(transactionDate);
        transTxt.setVoucher(voucher);

        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(detailSummary,
                                                        SysModule::Project,
                                                        numberSeq.parmVoucherSequenceCode(),
                                                        projPeriodPostingLedgerSales.transactionLogType(),
                                                        projPeriodPostingLedgerSales.transactionLogTxt());

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                transactionDate,
                                                                SysModule::Project,
                                                                LedgerTransType::Project);
        ledgerVoucherObject.lastTransTxt(transTxt.txt());

        AcknowledgementDate acknowledgementDate = transactionDate;

        ledgerVoucherObject.parmAcknowledgementDate(acknowledgementDate);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        ProjRevenueTrans projRevenueTrans = ProjRevenueTrans::find(_projProposalRevenue.TransId, true);

        ProjRevenueTransSale    tProjRevenueTransSale;
        ProjFundingSource       projFundingSource;

        select firstOnly tProjRevenueTransSale
            exists join projFundingSource
                where tProjRevenueTransSale.TransId == projRevenueTrans.TransId &&
                    projFundingSource.RecId == _tProjProposalJour.FundingSource;

        ProjTrans projTrans = ProjTrans::newProjRevenueTransSale(projRevenueTrans, tProjRevenueTransSale);
        ProjPost::newEnterSalesAccrued_TrxDetail(projRevenueTrans, tProjRevenueTransSale, ledgerVoucher, true).postTrans();

        ledgerVoucher.end();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>