<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveFeatureEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransArchiveFeatureEventHandlers</c> class handles events to enable the inventory transaction archive feature.
/// </summary>
final internal static class InventTransArchiveFeatureEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateInventTransArchiveFeatureManagementStateWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::ValidatedWrite)]
    public static void validateInventTransArchiveFeatureManagementStateWrite(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(InventTransArchiveFeature::instance()))
        {
            InventTransTableFieldsExtensionValidator validator = InventTransTableFieldsExtensionValidator::construct();
            boolean ret = true;
            if (featureManagementState.IsEnabled == NoYes::Yes
            &&  featureManagementState.orig().IsEnabled == NoYes::No)
            {
                ret = validator.canEnableFeature();
                if (!ret)
                {
                    if (InventTransArchiveFeatureHelper::isFeatureEnabled())
                    {
                        checkFailed("@SCM:InventTransArchiveFeatureEnableErrorV2");
                    }
                    else
                    {
                        checkFailed("@SCM:InventTransArchiveFeatureEnableError");
                    }
                }
            }

            ValidateEventArgs validateEventArgs = _args as ValidateEventArgs;
            if (validateEventArgs)
            {
                validateEventArgs.parmValidateResult(ret);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTransArchiveFeatureManagementState</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Inserting)]
    public static void insertInventTransArchiveFeatureManagementState(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(InventTransArchiveFeature::instance())
            && featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
        {
            InventTransTableFieldsExtensionValidator validator = InventTransTableFieldsExtensionValidator::construct();
            if (!validator.canEnableFeature())
            {
                featureManagementState.IsEnabled = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransArchiveFeatureManagementState</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Updating)]
    public static void updateInventTransArchiveFeatureManagementState(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(InventTransArchiveFeature::instance())
            && featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
        {
            InventTransTableFieldsExtensionValidator validator = InventTransTableFieldsExtensionValidator::construct();

            boolean ret = validator.canEnableFeature();

            if (!ret)
            {
                featureManagementState.IsEnabled = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>