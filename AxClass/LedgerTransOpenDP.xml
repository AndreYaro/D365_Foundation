<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransOpenDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransOpenDP</c> class is the data provider for the <c>LedgerTransOpen</c> report.
/// </summary>
/// <remarks>
///    The base class of this class changed in Microsoft Dynamics AX 2012 R3. Please review the new
///    base class for more information.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerTransOpenContract)),
    SRSReportQueryAttribute(queryStr(LedgerTransOpen))
]
public class LedgerTransOpenDP extends SRSReportDataProviderPreProcessTempDB
{
    LedgerTransOpenTmp ledgerTransOpenTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransOpenTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerTransOpenTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>LedgerTransOpenTmp</c> table buffer.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerTransOpenTmp))
    ]
    public LedgerTransOpenTmp getLedgerTransOpenTmp()
    {
        select ledgerTransOpenTmp;
        return ledgerTransOpenTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (FeatureStateProvider::isFeatureEnabled(LedgerSSRSReportSkipReportTransactionParmFlight::instance()))
        {
            skipReportTransaction = true;
        }
        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        LedgerTransSettlement ledgerTransSettlement;

        LanguageId languageId;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        MainAccountTranslation mainAccountTranslation;

        Query query;
        QueryRun queryRun;
        QueryBuildDataSource ds;
        QueryBuildRange range;

        LedgerTransOpenContract contract;
        FromDate fromDate;
        ToDate toDate;

        contract = this.parmDataContract() as LedgerTransOpenContract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        query = this.parmQuery();
        if (SysQuery::queryHasRangesOrFilters(query))
        {
            // Add the date range here instead of in the controller so we can determine if the user added any ranges
            ds = query.dataSourceTable(tableNum(GeneralJournalEntry));
            range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, Ledger));
            range.value(SysQuery::value(Ledger::current()));
            range.status(RangeStatus::Hidden);

            range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, AccountingDate));
            range.value(queryRange(fromDate, toDate));

            // Taking settlement date into account when building query to display unsettled transactions
            ds = query.dataSourceTable(tableNum(LedgerTransSettlement));
            range = SysQuery::findOrCreateRange(ds, fieldNum(LedgerTransSettlement, SettleDate));
            range.value(queryRangeConcat(queryRange(fromDate, toDate), SysQuery::value(dateNull())));

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
                generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
                mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;

                ledgerTransOpenTmp.clear();

                ledgerTransOpenTmp.AccountingDate = generalJournalEntry.AccountingDate;
                ledgerTransOpenTmp.JournalNumber = generalJournalEntry.JournalNumber;
                ledgerTransOpenTmp.SubledgerVoucher = generalJournalEntry.SubledgerVoucher;
                ledgerTransOpenTmp.GeneralJournalEntry = generalJournalEntry.RecId;

                if (generalJournalAccountEntry.IsCredit)
                {
                    ledgerTransOpenTmp.AccountingCurrencyAmountCredit = -generalJournalAccountEntry.AccountingCurrencyAmount;
                    ledgerTransOpenTmp.TransactionCurrencyAmountCredit = -generalJournalAccountEntry.TransactionCurrencyAmount;
                    ledgerTransOpenTmp.ReportingCurrencyCreditAmount = -generalJournalAccountEntry.ReportingCurrencyAmount;
                }
                else
                {
                    ledgerTransOpenTmp.AccountingCurrencyAmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                    ledgerTransOpenTmp.TransactionCurrencyAmountDebit = generalJournalAccountEntry.TransactionCurrencyAmount;
                    ledgerTransOpenTmp.ReportingCurrencyDebitAmount = generalJournalAccountEntry.ReportingCurrencyAmount;
                }
                ledgerTransOpenTmp.TransactionCurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
                ledgerTransOpenTmp.Text = generalJournalAccountEntry.Text;
                ledgerTransOpenTmp.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;

                ledgerTransOpenTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
                ledgerTransOpenTmp.MainAccountId = mainAccountLedgerDimensionView.MainAccount;
                ledgerTransOpenTmp.Name = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
                ledgerTransOpenTmp.Type = mainAccountLedgerDimensionView.Type;

                ledgerTransOpenTmp.insert();
            }
        }
        else
        {
            boolean isLedgerSettlementsEnabled = LedgerTransSettlement::isLedgerSettlementsEnabled();

            // User entered no ranges so we can use set based operations by adding the from and to date filters
            insert_recordset ledgerTransOpenTmp
                (AccountingDate, JournalNumber, SubledgerVoucher, GeneralJournalEntry,
                TransactionCurrencyCode, Text, GeneralJournalAccountEntry,
                FullyQualifiedAccount, MainAccountId, Name, Type)
            select AccountingDate, JournalNumber, SubledgerVoucher, RecId from generalJournalEntry
                    where generalJournalEntry.AccountingDate >= fromDate
                        && generalJournalEntry.AccountingDate <= toDate
                        && generalJournalEntry.Ledger == Ledger::current()
            join TransactionCurrencyCode, Text, RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join FullyQualifiedAccount, MainAccount, Name, Type from mainAccountLedgerDimensionView
                    where mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
            notexists join ledgerTransSettlement
                    where isLedgerSettlementsEnabled
                        && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                        && (ledgerTransSettlement.SettleDate == dateNull()
                        || (ledgerTransSettlement.SettleDate >= fromDate
                        && ledgerTransSettlement.SettleDate <= toDate));

            languageId = DimensionCache::currentDimensionValueLanguageId();
            if (languageId)
            {
                update_recordset ledgerTransOpenTmp
                    setting Name = mainAccountTranslation.Name
                    join RecId from generalJournalAccountEntry
                        where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                    join RecId from dimensionAttributeValueCombination
                        where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                    join Name from mainAccountTranslation
                        where mainAccountTranslation.MainAccount == dimensionAttributeValueCombination.MainAccount
                            && mainAccountTranslation.LanguageId == languageId
                            && mainAccountTranslation.Name != '';
            }

            // Fill in the credit amount
            update_recordSet ledgerTransOpenTmp setting
                AccountingCurrencyAmountCredit = generalJournalAccountEntry.AccountingCurrencyAmount * -1,
                TransactionCurrencyAmountCredit = generalJournalAccountEntry.TransactionCurrencyAmount * -1,
                ReportingCurrencyCreditAmount = generalJournalAccountEntry.ReportingCurrencyAmount * -1
                join generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                        && generalJournalAccountEntry.IsCredit == true;

            // Fill in the debit amount
            update_recordSet ledgerTransOpenTmp setting
                AccountingCurrencyAmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount,
                TransactionCurrencyAmountDebit = generalJournalAccountEntry.TransactionCurrencyAmount,
                ReportingCurrencyDebitAmount = generalJournalAccountEntry.ReportingCurrencyAmount
                join generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerTransOpenTmp.GeneralJournalAccountEntry
                        && generalJournalAccountEntry.IsCredit == false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>