<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// PaymentRequest form view logic class.
/// </summary>
abstract class CFMPaymentRequestView
{
    CFMPaymentRequestViewModel paymentRequestViewModel;
    FormRun formRun;
    CFMPaymentRequestMVEventHandler modelViewEventHandler;

    FormComboBoxControl accountTypeCtrl;
    FormStringControl accountNumCtrl;
    FormStringControl agreementIdCtrl;
    FormStringControl agreementDocumentTitleCtrl;
    FormStringControl paymModeCtrl;
    FormStringControl paymSpecCtrl;
    FormStringControl invoiceAccountNumCtrl;
    FormStringControl formTitleCtrl;
    FormStringControl postingProfileCtrl;
    FormStringControl recepientBankAccountCtrl;
    FormComboBoxControl paymentAccountTypeCtrl;
    FormFunctionButtonControl confirmationButtonCtrl;
    FormFunctionButtonControl updateFromSourceButtonCtrl;
    FormFunctionButtonControl splitButtonCtrl;
    FormDropDialogButtonControl cancellationButtonCtrl;
    FormDropDialogButtonControl onHoldButtonCtrl;
    FormFunctionButtonControl requestOriginButtonCtrl;
    FormFunctionButtonControl requestOrderButtonCtrl;
    FormControl onEditButtonCtrl;
    FormDateControl dueDateCtrl;
    FormTabPageControl dimensionsCtrl;
    FormStringControl paymentAccountNumCtrl;
    FormCheckBoxControl prepaymentCtrl;
    FormControl paymentOrderTabCtrl;
    FormStringControl statusCodeCtrl;
    FormStringControl budgetCodeCtrl;
    FormStringControl baseCodeCtrl;
    FormStringControl typeCodeCtrl;

    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCalledFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the caller is a specified form.
    /// </summary>
    /// <param name="_args">
    /// An argument object that is passed from the caller.
    /// </param>
    /// <param name="_formName">
    /// The name of the form for which to check; optional.
    /// </param>
    /// <returns>
    /// true if the caller is the specified form; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value of the <paramref name="_formName" /> parameter is not specified, any form will be
    /// accepted.
    /// </remarks>
    public static boolean isCalledFromForm(Args _args, FormName _formName='')
    {
        if (_args)
        {
            Object caller = _args.caller();

            if (caller && caller is FormRun)
            {
                FormRun callerForm = caller;

                if (_formName == '' || callerForm.name() == _formName)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bindForm</Name>
				<Source><![CDATA[
    public void bindForm()
    {
        this.configureControls();
        this.registerOverloadMethods();
        this.initModelViewEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureControls</Name>
				<Source><![CDATA[
    protected void configureControls()
    {
        if (agreementDocumentTitleCtrl)
        {
            agreementDocumentTitleCtrl.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForm</Name>
				<Source><![CDATA[
    protected str createForm()
    {
        return formStr(CFMCreatePaymentRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlAccountNumJumpRef</Name>
				<Source><![CDATA[
    public void ctrlAccountNumJumpRef(FormStringControl _accountNumCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, AccountNum), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlAccountNumModified</Name>
				<Source><![CDATA[
    public boolean ctrlAccountNumModified(FormStringControl _accountNumCtrl)
    {
        boolean ret = _accountNumCtrl.modified();

        this.parmPaymentRequestViewModel().changeAccountNum();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlAccountTypeModified</Name>
				<Source><![CDATA[
    public int ctrlAccountTypeModified(FormComboBoxControl _accountTypeCtrl)
    {
        int ret = _accountTypeCtrl.selectionChange();

        this.parmPaymentRequestViewModel().changeAccountType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlAgreementIdJumpRef</Name>
				<Source><![CDATA[
    public void ctrlAgreementIdJumpRef(FormStringControl _agreementIdCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, AgreementId), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBaseCodeJumpRef</Name>
				<Source><![CDATA[
    public void ctrlBaseCodeJumpRef(FormStringControl _baseCodeCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestPaymentOrder, BaseCode), tableNum(CFMPaymentRequestPaymentOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBaseCodeLookup</Name>
				<Source><![CDATA[
    public void ctrlBaseCodeLookup(FormStringControl _baseCodeCtrl)
    {
        this.showLookup(fieldNum(CFMPaymentRequestPaymentOrder, BaseCode), tableNum(CFMPaymentRequestPaymentOrder), _baseCodeCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBudgetCodeJumpRef</Name>
				<Source><![CDATA[
    public void ctrlBudgetCodeJumpRef(FormStringControl _budgetCodeCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestPaymentOrder, BudgetReceiptClassCode), tableNum(CFMPaymentRequestPaymentOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBudgetCodeLookup</Name>
				<Source><![CDATA[
    public void ctrlBudgetCodeLookup(FormStringControl _budgetCodeCtrl)
    {
        this.showLookup(fieldNum(CFMPaymentRequestPaymentOrder, BudgetReceiptClassCode), tableNum(CFMPaymentRequestPaymentOrder), _budgetCodeCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInvoiceAccountNumJumpRef</Name>
				<Source><![CDATA[
    public void ctrlInvoiceAccountNumJumpRef(FormStringControl _invoiceAccountNumCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, InvoiceAccountNum), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlInvoiceAccountNumModified</Name>
				<Source><![CDATA[
    public boolean ctrlInvoiceAccountNumModified(FormStringControl _invoiceAccountNumCtrl)
    {
        boolean ret = _invoiceAccountNumCtrl.modified();

        this.parmPaymentRequestViewModel().changeInvoiceAccountNum();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPaymentAccountNumJumpRef</Name>
				<Source><![CDATA[
    public void ctrlPaymentAccountNumJumpRef(FormStringControl _paymentAccountNumCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, PaymentAccountNum), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPaymModeJumpRef</Name>
				<Source><![CDATA[
    public void ctrlPaymModeJumpRef(FormStringControl _paymModeCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, PaymMode), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPaymSpecJumpRef</Name>
				<Source><![CDATA[
    public void ctrlPaymSpecJumpRef(FormStringControl _paymSpecCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, PaymSpec), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPostingProfileJumpRef</Name>
				<Source><![CDATA[
    public void ctrlPostingProfileJumpRef(FormStringControl _postingProfileCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, PostingProfile), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlRecepientBankAccountIdJumpRef</Name>
				<Source><![CDATA[
    public void ctrlRecepientBankAccountIdJumpRef(FormStringControl _recepientBankAccountIdCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestTable, RecepientBankAccountId), tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlStatusCodeJumpRef</Name>
				<Source><![CDATA[
    public void ctrlStatusCodeJumpRef(FormStringControl _statusCodeCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestPaymentOrder, StatusCode), tableNum(CFMPaymentRequestPaymentOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlStatusCodeLookup</Name>
				<Source><![CDATA[
    public void ctrlStatusCodeLookup(FormStringControl _statusCodeCtrl)
    {
        this.showLookup(fieldNum(CFMPaymentRequestPaymentOrder, StatusCode), tableNum(CFMPaymentRequestPaymentOrder), _statusCodeCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTypeCodeJumpRef</Name>
				<Source><![CDATA[
    public void ctrlTypeCodeJumpRef(FormStringControl _typeCodeCtrl)
    {
        this.showDetailedForm(fieldNum(CFMPaymentRequestPaymentOrder, TypeCode), tableNum(CFMPaymentRequestPaymentOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTypeCodeLookup</Name>
				<Source><![CDATA[
    public void ctrlTypeCodeLookup(FormStringControl _typeCodeCtrl)
    {
        this.showLookup(fieldNum(CFMPaymentRequestPaymentOrder, TypeCode), tableNum(CFMPaymentRequestPaymentOrder), _typeCodeCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModelViewEventHandler</Name>
				<Source><![CDATA[
    protected CFMPaymentRequestMVEventHandler getModelViewEventHandler()
    {
        return CFMPaymentRequestMVEventHandler::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initModelViewEventHandler</Name>
				<Source><![CDATA[
    protected void initModelViewEventHandler()
    {
        modelViewEventHandler = this.getModelViewEventHandler();
        modelViewEventHandler.subscribe();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNumControl</Name>
				<Source><![CDATA[
    public FormStringControl parmAccountNumControl(FormStringControl _accountNumCtrl = accountNumCtrl)
    {
        accountNumCtrl = _accountNumCtrl;

        return accountNumCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeControl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmAccountTypeControl(FormComboBoxControl _accountTypeCtrl = accountTypeCtrl)
    {
        accountTypeCtrl = _accountTypeCtrl;
        return accountTypeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementDocumentTitleControl</Name>
				<Source><![CDATA[
    public FormStringControl parmAgreementDocumentTitleControl(FormStringControl _agreementDocumentTitleCtrl = agreementDocumentTitleCtrl)
    {
        agreementDocumentTitleCtrl = _agreementDocumentTitleCtrl;

        return agreementDocumentTitleCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementIdControl</Name>
				<Source><![CDATA[
    public FormStringControl parmAgreementIdControl(FormStringControl _agreementIdCtrl = agreementIdCtrl)
    {
        agreementIdCtrl = _agreementIdCtrl;

        return agreementIdCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancellationButtonControl</Name>
				<Source><![CDATA[
    public FormDropDialogButtonControl parmCancellationButtonControl(FormDropDialogButtonControl _cancellationButtonCtrl = cancellationButtonCtrl)
    {
        cancellationButtonCtrl = _cancellationButtonCtrl;
        return cancellationButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmationButtonControl</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmConfirmationButtonControl(FormFunctionButtonControl _confirmationButtonCtrl = confirmationButtonCtrl)
    {
        confirmationButtonCtrl = _confirmationButtonCtrl;
        return confirmationButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionsControl</Name>
				<Source><![CDATA[
    public FormTabPageControl parmDimensionsControl(FormTabPageControl _dimensionsCtrl = dimensionsCtrl)
    {
        dimensionsCtrl = _dimensionsCtrl;

        return dimensionsCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDateCtrlControl</Name>
				<Source><![CDATA[
    public FormDateControl parmDueDateCtrlControl(FormDateControl _dueDateCtrl = dueDateCtrl)
    {
        dueDateCtrl = _dueDateCtrl;

        return dueDateCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditButtonControl</Name>
				<Source><![CDATA[
    public FormControl parmEditButtonControl(FormControl _onEditButtonCtrl = onEditButtonCtrl)
    {
        onEditButtonCtrl = _onEditButtonCtrl;
        return onEditButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTitleControl</Name>
				<Source><![CDATA[
    public FormStringControl parmFormTitleControl(FormStringControl _formTitleCtrl = formTitleCtrl)
    {
        formTitleCtrl = _formTitleCtrl;
        return formTitleCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccountNumControl</Name>
				<Source><![CDATA[
    public FormStringControl parmInvoiceAccountNumControl(FormStringControl _invoiceAccountNumCtrl = invoiceAccountNumCtrl)
    {
        invoiceAccountNumCtrl = _invoiceAccountNumCtrl;

        return invoiceAccountNumCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnHoldButtonControl</Name>
				<Source><![CDATA[
    public FormDropDialogButtonControl parmOnHoldButtonControl(FormDropDialogButtonControl _onHoldButtonCtrl = onHoldButtonCtrl)
    {
        onHoldButtonCtrl = _onHoldButtonCtrl;
        return onHoldButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderButtonControl</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmOrderButtonControl(FormFunctionButtonControl _requestOrderButtonCtrl = requestOrderButtonCtrl)
    {
        requestOrderButtonCtrl = _requestOrderButtonCtrl;
        return requestOrderButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAccountNumControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentAccountNumControl(FormStringControl _paymentAccountNumCtrl = paymentAccountNumCtrl)
    {
        paymentAccountNumCtrl = _paymentAccountNumCtrl;
        return paymentAccountNumCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAccountTypeControl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmPaymentAccountTypeControl(FormComboBoxControl _paymentAccountTypeCtrl = paymentAccountTypeCtrl)
    {
        paymentAccountTypeCtrl = _paymentAccountTypeCtrl;
        return paymentAccountTypeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderBaseCodeControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentOrderBaseCodeControl(FormStringControl _baseCodeCtrl = baseCodeCtrl)
    {
        baseCodeCtrl = _baseCodeCtrl;

        return baseCodeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderBudgetCodeControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentOrderBudgetCodeControl(FormStringControl _budgetCodeCtrl = budgetCodeCtrl)
    {
        budgetCodeCtrl = _budgetCodeCtrl;

        return budgetCodeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderStatusCodeControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentOrderStatusCodeControl(FormStringControl _statusCodeCtrl = statusCodeCtrl)
    {
        statusCodeCtrl = _statusCodeCtrl;

        return statusCodeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderTabCtrl</Name>
				<Source><![CDATA[
    public FormTabPageControl parmPaymentOrderTabCtrl(FormTabPageControl _paymentOrderTabCtrl = paymentOrderTabCtrl)
    {
        paymentOrderTabCtrl = _paymentOrderTabCtrl;
        return paymentOrderTabCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentOrderTypeCodeControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentOrderTypeCodeControl(FormStringControl _typeCodeCtrl = typeCodeCtrl)
    {
        typeCodeCtrl = _typeCodeCtrl;

        return typeCodeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestViewModel</Name>
				<Source><![CDATA[
    public CFMPaymentRequestViewModel parmPaymentRequestViewModel(CFMPaymentRequestViewModel _viewModel = paymentRequestViewModel)
    {
        paymentRequestViewModel = _viewModel;
        return paymentRequestViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymModeControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymModeControl(FormStringControl _paymModeCtrl = paymModeCtrl)
    {
        paymModeCtrl = _paymModeCtrl;

        return paymModeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymSpecControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymSpecControl(FormStringControl _paymSpecCtrl = paymSpecCtrl)
    {
        paymSpecCtrl = _paymSpecCtrl;

        return paymSpecCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfileControl</Name>
				<Source><![CDATA[
    public FormStringControl parmPostingProfileControl(FormStringControl _postingProfileCtrl = postingProfileCtrl)
    {
        postingProfileCtrl = _postingProfileCtrl;
        return postingProfileCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrepaymentControl</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmPrepaymentControl(FormCheckBoxControl _prepaymentCtrl = prepaymentCtrl)
    {
        prepaymentCtrl = _prepaymentCtrl;

        return prepaymentCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecepientBankAccountControl</Name>
				<Source><![CDATA[
    public FormStringControl parmRecepientBankAccountControl(FormStringControl _recepientBankAccountCtrl = recepientBankAccountCtrl)
    {
        recepientBankAccountCtrl = _recepientBankAccountCtrl;
        return recepientBankAccountCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestOriginButtonControl</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmRequestOriginButtonControl(FormFunctionButtonControl _requestOriginButtonCtrl = requestOriginButtonCtrl)
    {
        requestOriginButtonCtrl = _requestOriginButtonCtrl;
        return requestOriginButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitButtonControl</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmSplitButtonControl(FormFunctionButtonControl _splitButtonCtrl = splitButtonCtrl)
    {
        splitButtonCtrl = _splitButtonCtrl;
        return splitButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateFromSourceButtonControl</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmUpdateFromSourceButtonControl(FormFunctionButtonControl _updateFromSourceButtonCtrl = updateFromSourceButtonCtrl)
    {
        updateFromSourceButtonCtrl = _updateFromSourceButtonCtrl;
        return updateFromSourceButtonCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverloadMethods</Name>
				<Source><![CDATA[
    protected void registerOverloadMethods()
    {
        if (accountTypeCtrl)
        {
            accountTypeCtrl.registerOverrideMethod(methodStr(FormComboBoxControl, selectionChange),
                methodStr(CFMPaymentRequestView, ctrlAccountTypeModified),
                this);
        }

        if (accountNumCtrl)
        {
            accountNumCtrl.registerOverrideMethod(methodStr(FormStringControl, modified),
                methodStr(CFMPaymentRequestView, ctrlAccountNumModified),
                this);

            accountNumCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlAccountNumJumpRef),
                this);
        }

        if (invoiceAccountNumCtrl)
        {
            invoiceAccountNumCtrl.registerOverrideMethod(methodStr(FormStringControl, modified),
                methodStr(CFMPaymentRequestView, ctrlInvoiceAccountNumModified),
                this);

            invoiceAccountNumCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlInvoiceAccountNumJumpRef),
                this);
        }

        if (paymentAccountNumCtrl)
        {
            paymentAccountNumCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlPaymentAccountNumJumpRef),
                this);
        }

        if (paymModeCtrl)
        {
            paymModeCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlPaymModeJumpRef),
                this);
        }

        if (paymSpecCtrl)
        {
            paymSpecCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlPaymSpecJumpRef),
                this);
        }

        if (agreementIdCtrl)
        {
            agreementIdCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlAgreementIdJumpRef),
                this);
        }

        if (recepientBankAccountCtrl)
        {
            recepientBankAccountCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlRecepientBankAccountIdJumpRef),
                this);
        }

        if (postingProfileCtrl)
        {
            postingProfileCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlPostingProfileJumpRef),
                this);
        }

        if (statusCodeCtrl)
        {
            statusCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlStatusCodeJumpRef),
                this);
        }

        if (statusCodeCtrl)
        {
            statusCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                methodStr(CFMPaymentRequestView, ctrlStatusCodeLookup),
                this);
        }

        if (budgetCodeCtrl)
        {
            budgetCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlBudgetCodeJumpRef),
                this);
        }

        if (budgetCodeCtrl)
        {
            budgetCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                methodStr(CFMPaymentRequestView, ctrlBudgetCodeLookup),
                this);
        }

        if (baseCodeCtrl)
        {
            baseCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlBaseCodeJumpRef),
                this);
        }

        if (baseCodeCtrl)
        {
            baseCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                methodStr(CFMPaymentRequestView, ctrlBaseCodeLookup),
                this);
        }

        if (typeCodeCtrl)
        {
            typeCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                methodStr(CFMPaymentRequestView, ctrlTypeCodeJumpRef),
                this);
        }

        if (typeCodeCtrl)
        {
            typeCodeCtrl.registerOverrideMethod(methodStr(FormStringControl, lookup),
                methodStr(CFMPaymentRequestView, ctrlTypeCodeLookup),
                this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDetailedForm</Name>
				<Source><![CDATA[
    private void showDetailedForm(FieldId _fieldId, TableId _tableId)
    {
        CFMPaymentRequestFormViewDetails viewDetailedForm = CFMPaymentRequestFormViewDetails::construct(this.parmPaymentRequestViewModel().parmPaymentRequestTable(), _fieldId, _tableId);
        viewDetailedForm.showForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLookup</Name>
				<Source><![CDATA[
    private void showLookup(FieldId _fieldId, TableId _tableId, FormControl _formControl)
    {
        CFMPaymentRequestFormViewDetails viewDetailedForm = CFMPaymentRequestFormViewDetails::construct(this.parmPaymentRequestViewModel().parmPaymentRequestTable(), _fieldId, _tableId, _formControl);
        viewDetailedForm.showLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>