<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalculatingWIPProportionally_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdCalculatingWIPProportionally_RU extends ProdCalculatingWIPEngine_RU
{
    Set oprNumSet;
    Map byProductRecIdMap;

    // initial data
    Map factAmountsMap;
    Map semiFinishedGoodsMap;
    Map calculatedRejectMap;

    // calculated data
    Map calculatedReleaseQtyMap;
    Map wipAmountMap;
    Map releaseAmountMap;
    Map issueAmountMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustReleaseAmounts</Name>
				<Source><![CDATA[
    protected void adjustReleaseAmounts()
    {
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdReleaseKindTable_RU prodReleaseKindTable;

        InventQty               qtyTotal;

        Amount                  releaseAmountNow;

        MapEnumerator mapEnumerator = releaseAmountMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            OprNum oprNum = mapEnumerator.currentKey();
            Amount releaseAmountTotal = mapEnumerator.currentValue();

            if (calculatedReleaseQtyMap.exists(oprNum))
            {
                qtyTotal = calculatedReleaseQtyMap.lookup(oprNum);
            }
            else
            {
                qtyTotal = 0;
            }

            if (!(qtyTotal && releaseAmountTotal))
            {
                continue;
            }

            InventQty qtyRemain = qtyTotal;
            Amount releaseAmountRemain = releaseAmountTotal;

            while select forupdate prodReleaseTrans
                where prodReleaseTrans.ProdId       == prodId                                                   &&
                      prodReleaseTrans.Cancelled    == NoYes::No                                                &&
                      prodReleaseTrans.Calculated   == NoYes::Yes                                               &&
                      prodReleaseTrans.DateCalc     <= calculationDate                                          &&
                      ((oprNum == firstOprNum && prodReleaseTrans.OprNum <= oprNum)                             ||
                       (oprNum != firstOprNum && prodReleaseTrans.OprNum == oprNum))
                exists join prodReleaseKindTable
                    where prodReleaseKindTable.ReleaseKindId        == prodReleaseTrans.ReleaseKindId           &&
                          prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::Calculated
            {
                InventQty inventQty = prodReleaseTrans.inventReleaseQty();
                if (inventQty >= qtyRemain)
                {
                    releaseAmountNow = releaseAmountRemain;
                }
                else
                {
                    releaseAmountNow = CurrencyExchangeHelper::amount(releaseAmountTotal * inventQty / qtyTotal, standardCurrency);
                    releaseAmountNow = releaseAmountNow > releaseAmountRemain ? releaseAmountRemain : releaseAmountNow;
                }

                releaseAmountRemain -= releaseAmountNow;
                qtyRemain           -= inventQty;

                this.createReleaseAdjust(prodReleaseTrans, releaseAmountNow, inventQty);

                if (releaseAmountRemain <= 0 || qtyRemain <= 0)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostFactAmounts</Name>
				<Source><![CDATA[
    protected void calcCostFactAmounts()
    {
        ProdBOM             prodBOM;
        ProdRouteTrans      prodRouteTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventSettlement    inventSettlement;

        SetEnumerator       setEnumerator = oprNumSet.getEnumerator();

        ProdIndirectTrans   prodIndirectTrans;

        if (! prodTable.prodParametersDim().NoPostProdIndirect_RU)
        {
            select sum(Amount) from prodIndirectTrans
                where prodIndirectTrans.TransRefId == prodId           &&
                      prodIndirectTrans.Calculated == NoYes::Yes       &&
                      prodIndirectTrans.DateCalc   <= calculationDate  &&
                      prodIndirectTrans.Canceled   == NoYes::No;
        }

        CostAmount costAmountIndirect = prodIndirectTrans.Amount;

        while (setEnumerator.moveNext())
        {
            CostAmount costAmount = 0;
            OprNum oprNum = setEnumerator.current();

            while select TableId from prodBOM
                where prodBOM.ProdId == prodId                                   &&
                      ((oprNum == firstOprNum && prodBOM.OprNum <= oprNum) ||
                       (oprNum != firstOprNum && prodBOM.OprNum == oprNum))
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == prodBOM.InventTransId
            join CostAmountPosted, RecId from inventTrans
                where inventTrans.InventTransOrigin   == inventTransOrigin.RecId &&
                        inventTrans.DateFinancial     != dateNull()              &&
                        inventTrans.DateFinancial     <= calculationDate
            {
                select sum(CostAmountAdjustment) from inventSettlement
                    where inventSettlement.TransRecId   == inventTrans.RecId &&
                          inventSettlement.TransDate    <= calculationDate &&
                          inventSettlement.Cancelled    == NoYes::No;

                costAmount += inventTrans.CostAmountPosted + inventSettlement.CostAmountAdjustment;
            }

            select sum(Amount) from prodRouteTrans
                where prodRouteTrans.TransRefId == prodId                           &&
                      prodRouteTrans.Calculated == NoYes::Yes                       &&
                      prodRouteTrans.DateCalc   <= calculationDate                  &&
                      prodRouteTrans.Cancelled  == NoYes::No                        &&
                      ((oprNum == firstOprNum && prodRouteTrans.OprNum <= oprNum)   ||
                       (oprNum != firstOprNum && prodRouteTrans.OprNum == oprNum));

            factAmountsMap.insert(oprNum, prodRouteTrans.Amount + costAmountIndirect - costAmount);
            costAmountIndirect = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInitialData</Name>
				<Source><![CDATA[
    protected void calcInitialData()
    {
        ProdRoute               prodRoute;
        ProdRouteTrans          prodRouteTrans;
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdReleaseKindTable_RU prodReleaseKindTable;

        while select prodRoute
            group by OprNum
            where prodRoute.ProdId == prodId
        {
            // build a oprNumSet set
            oprNumSet.add(prodRoute.OprNum);

            // build semiFinishedGoodsMap map
            select sum(QtyGood) from prodRouteTrans
                where prodRouteTrans.TransRefId == prodId                                               &&
                      prodRouteTrans.Cancelled  == NoYes::No                                            &&
                      prodRouteTrans.Calculated == NoYes::Yes                                           &&
                      prodRouteTrans.DateCalc   <= calculationDate                                      &&
                      ((prodRoute.OprNum == firstOprNum && prodRouteTrans.OprNum <= prodRoute.OprNum)   ||
                       (prodRoute.OprNum != firstOprNum && prodRouteTrans.OprNum == prodRoute.OprNum));
            semiFinishedGoodsMap.insert(prodRoute.OprNum, prodRouteTrans.QtyGood);

            // build a calculatedRejectMap map
            InventQty qtyError = 0;
            while select sum(ReleaseQty) from prodReleaseTrans
                group by ItemId, UnitId, ReleaseKindId, InventDimId
                where prodReleaseTrans.ProdId       == prodId                                                   &&
                      prodReleaseTrans.Cancelled    == NoYes::No                                                &&
                      prodReleaseTrans.Calculated   == NoYes::Yes                                               &&
                      prodReleaseTrans.DateCalc     <= calculationDate                                          &&
                      ((prodRoute.OprNum == firstOprNum && prodReleaseTrans.OprNum <= prodRoute.OprNum)         ||
                       (prodRoute.OprNum != firstOprNum && prodReleaseTrans.OprNum == prodRoute.OprNum))
                exists join prodReleaseKindTable
                    where prodReleaseKindTable.ReleaseKindId        == prodReleaseTrans.ReleaseKindId           &&
                          prodReleaseKindTable.IsReject             == NoYes::Yes                               &&
                          prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::Calculated
            {
                qtyError += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodReleaseTrans.ItemId,
                                                                                                  prodReleaseTrans.InventDimId,
                                                                                                  prodReleaseTrans.ReleaseQty,
                                                                                                  prodReleaseTrans.UnitId,
                                                                                                  prodInventTable.inventUnitId());
            }

            calculatedRejectMap.insert(prodRoute.OprNum, qtyError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReleaseQtyMaps</Name>
				<Source><![CDATA[
    protected void calcReleaseQtyMaps()
    {
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdReleaseKindTable_RU prodReleaseKindTable;

        InventByProductTable_RU inventByProductTable;

        InventDim               mainItemInventDim,
                                byProdItemInventDim;

        EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodInventTable.ItemId, prodTable.inventDim(), mainItemInventDim);
        mainItemInventDim = InventDim::findOrCreate(mainItemInventDim);

        while select forupdate prodReleaseTrans
            order by OprNum
            where prodReleaseTrans.ProdId       == prodId           &&
                  prodReleaseTrans.Cancelled    == NoYes::No        &&
                  prodReleaseTrans.Calculated   == NoYes::Yes       &&
                  prodReleaseTrans.DateCalc     <= calculationDate
            join prodReleaseKindTable
                where prodReleaseKindTable.ReleaseKindId == prodReleaseTrans.ReleaseKindId
        {
            OprNum oprNum = prodReleaseTrans.OprNum ? prodReleaseTrans.OprNum : firstOprNum;
            InventQty inventQty = prodReleaseTrans.inventReleaseQty();

            inventByProductTable.clear();

            InventTable inventTable = this.inventTable(prodReleaseTrans.ItemId);

            if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::ByProduct)
            {
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(inventTable.ItemId, prodReleaseTrans.inventDim(), byProdItemInventDim);
                byProdItemInventDim = InventDim::findOrCreate(byProdItemInventDim);

                inventByProductTable = InventByProductTable_RU::find(prodTable.ItemId, mainItemInventDim.InventDimId, prodReleaseTrans.ItemId, byProdItemInventDim.InventDimId);
                if (!inventByProductTable.RecId)
                {
                    throw error(strfmt("@GLS115870",
                                       prodTable.ItemId, prodTable.InventDimId, prodReleaseTrans.ItemId, prodReleaseTrans.InventDimId));
                }
            }

            if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::FixedPrice ||
                (inventByProductTable && inventByProductTable.ByProdCosting == ProdByProdCosting_RU::FixedPrice))
            {
                continue;
            }
            else if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::Calculated)
            {
                if (calculatedReleaseQtyMap.exists(oprNum))
                {
                    inventQty += calculatedReleaseQtyMap.lookup(oprNum);
                }
                calculatedReleaseQtyMap.insert(oprNum, inventQty);
            }
            else if (inventByProductTable && inventByProductTable.ByProdCosting == ProdByProdCosting_RU::Calculated)
            {
                InventQty qtyTotal = 0;
                container releaseTransByProductCon = connull();

                if (byProductRecIdMap.exists(inventByProductTable.RecId))
                {
                    [ qtyTotal, releaseTransByProductCon ] = byProductRecIdMap.lookup(inventByProductTable.RecId);
                }

                releaseTransByProductCon += prodReleaseTrans.RecId;
                byProductRecIdMap.insert(inventByProductTable.RecId, [ qtyTotal + inventQty, releaseTransByProductCon ]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
        super();

        oprNumSet               = new Set(Types::Integer);

        byProductRecIdMap       = new Map(Types::Int64, Types::Container);

        factAmountsMap          = new Map(Types::Integer, Types::Real);
        semiFinishedGoodsMap    = new Map(Types::Integer, Types::Real);
        calculatedRejectMap     = new Map(Types::Integer, Types::Real);

        calculatedReleaseQtyMap = new Map(Types::Integer, Types::Real);
        wipAmountMap            = new Map(Types::Integer, Types::Real);
        releaseAmountMap        = new Map(Types::Integer, Types::Real);
        issueAmountMap          = new Map(Types::Integer, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopProdRelease</Name>
				<Source><![CDATA[
    protected void loopProdRelease()
    {
        CostAmount              prevSemiFinishedGoodsQty;
        CostAmount              wipAmount,
                                wipAmountTotal;
        CostAmount              releaseAmount;
        CostAmount              issueAmount;

        InventQty               qtyTotal;

        Amount                  productAmountNow;

        int                     i;
        container               releaseTransByProductCon;

        this.calcReleaseQtyMaps();

        SetEnumerator setEnumerator = oprNumSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            OprNum oprNum = setEnumerator.current();
            CostAmount factAmounts = factAmountsMap.lookup(oprNum) + issueAmount;

            // calc a WIP amount
            if (oprNum == firstOprNum)
            {
                prevSemiFinishedGoodsQty = prodTable.QtyStUp;
            }

            InventQty wipQty = prevSemiFinishedGoodsQty - semiFinishedGoodsMap.lookup(oprNum) - calculatedRejectMap.lookup(oprNum);

            if (isEndJob || !wipQty)
            {
                wipAmount = 0;
            }
            else if (!prevSemiFinishedGoodsQty)
            {
                wipAmount = factAmounts;
            }
            else
            {
                wipAmount = factAmounts * wipQty / prevSemiFinishedGoodsQty;
                wipAmount = CurrencyExchangeHelper::amount(wipAmount, standardCurrency);
            }

            wipAmountMap.insert(oprNum, wipAmount);
            wipAmountTotal += wipAmount;

            // calc a release amount
            if (calculatedRejectMap.exists(oprNum) && prevSemiFinishedGoodsQty)
            {
                releaseAmount = factAmounts * calculatedRejectMap.lookup(oprNum) / prevSemiFinishedGoodsQty;
                releaseAmount = CurrencyExchangeHelper::amount(releaseAmount, standardCurrency);
            }
            else
            {
                releaseAmount = 0;
            }

            releaseAmountMap.insert(oprNum, releaseAmount);

            // calc a issue amount
            issueAmount = factAmounts - wipAmount - releaseAmount;
            issueAmount = CurrencyExchangeHelper::amount(issueAmount, standardCurrency);
            issueAmountMap.insert(oprNum, issueAmount);

            prevSemiFinishedGoodsQty = semiFinishedGoodsMap.lookup(oprNum);
        }

        receiptCostAmount = issueAmount;

        if (wipAmountTotal < 0)
        {
            if (!inventCostItemDim)
            {
                throw error(strfmt("@GLS115871", prodTable.ProdId));
            }

            error(strfmt("@GLS115871", prodTable.ProdId));
            receiptCostAmount = 0;
            return;
        }

        // adjust amounts for release lines
        this.adjustReleaseAmounts();

        if (receiptCostAmount <= 0)
        {
            receiptCostAmount = 0;
            return;
        }

        // calc inventByProduct amounts
        Amount receiptCostAmountLoc = receiptCostAmount;

        MapEnumerator mapEnumerator = byProductRecIdMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            InventByProductTable_RU inventByProductTable = InventByProductTable_RU::findRecId(mapEnumerator.currentKey());

            [qtyTotal, releaseTransByProductCon] = mapEnumerator.currentValue();

            if (!qtyTotal)
            {
                continue;
            }

            Amount productAmountTotal = CurrencyExchangeHelper::amount(receiptCostAmountLoc * inventByProductTable.Percentage / 100, standardCurrency);

            InventQty qtyRemain = qtyTotal;
            Amount productAmountRemain = productAmountTotal;

            for (i = 1; i <= conlen(releaseTransByProductCon); i++)
            {
                ProdReleaseTrans_RU prodReleaseTrans = ProdReleaseTrans_RU::findRecId(conpeek(releaseTransByProductCon, i), true);
                InventQty inventQty = prodReleaseTrans.inventReleaseQty();

                if (inventQty >= qtyRemain)
                {
                    productAmountNow = productAmountRemain;
                }
                else
                {
                    productAmountNow = CurrencyExchangeHelper::amount(productAmountTotal * inventQty / qtyTotal, standardCurrency);
                    productAmountNow = productAmountNow > productAmountRemain ? productAmountRemain : productAmountNow;
                }

                productAmountRemain -= productAmountNow;
                receiptCostAmount   -= productAmountNow;

                this.createReleaseAdjust(prodReleaseTrans, productAmountNow, inventQty);

                qtyRemain -= inventQty;
                if (productAmountRemain <= 0 || qtyRemain <= 0)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        return super() && prodTable.checkReleaseProportionallyFixedPrice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPProportionally_RU construct()
    {
        return new ProdCalculatingWIPProportionally_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>