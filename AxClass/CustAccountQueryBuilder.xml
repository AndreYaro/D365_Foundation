<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An AIF provider for cust accounts.
/// </summary>
/// <remarks>
/// Cust accounts AIF provider
/// </remarks>
public class CustAccountQueryBuilder extends AifQueryBuilder
{
    CustAccountQueryBuilderArgs args;
    #DEFINE.NoSuchCompany('NoSuchCompany')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the arguments object used by the Query Service.
    /// </summary>
    /// <returns>
    /// The arguments object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustAccountQueryBuilderArgs getArgs()
    {
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        DataAreaId              company;
        CustAccount             custAccount;
        DirPartyName            custName;
        Query                   custAccountQuery;
        QueryBuildDataSource    custAccountQbds;
        QueryBuildDataSource    dirPartyTableQbds;

        company = this.getArgs().parmCompany();
        custAccount = this.getArgs().parmCustAccount();
        custName = this.getArgs().parmCustName();

        custAccountQuery = new query();

        if (!company)
        {
            //Company cannot be empty
            throw AifFault::Fault("@SYS4007574", #NoSuchCompany);
        }

        custAccountQuery.allowCrossCompany(true);
        custAccountQuery.addCompanyRange(SysQuery::value(company));
        custAccountQbds = custAccountQuery.addDataSource(tableNum(CustTable));

        custAccountQbds.orderMode(OrderMode::OrderBy);
        custAccountQbds.addSelectionField(fieldNum(CustTable, AccountNum));
        custAccountQbds.addSortField(fieldNum(CustTable, AccountNum));

        if (custAccount)
        {
            custAccountQbds.addRange(fieldNum(CustTable,AccountNum)).value(custAccount);
        }

        dirPartyTableQbds = custAccountQbds.addDataSource(tableNum(DirPartyTable));
        dirPartyTableQbds.relations(true);
        dirPartyTableQbds.addSelectionField(fieldNum(DirPartyTable, Name));

        if (custName)
        {
            dirPartyTableQbds.addRange(fieldNum(DirPartyTable, Name)).value(custName);
        }

        query = custAccountQuery;
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgs</Name>
				<Source><![CDATA[
        public void setArgs(AifQueryBuilderArgs _args)
    {
        if (!_args || classIdGet(_args) != classNum(CustAccountQueryBuilderArgs))
        {
            // One or more arguments are invalid
            throw AifFault::fault("@SYS95118", 'parameters not valid');
        }
        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static CustAccountQueryBuilder construct()
    {
        return new CustAccountQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>