<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanCopyOverForecastStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanCopyOverForecastStrategy</c> class is responsible for copying the historical data into the forecast horizon.
/// </summary>
[ReqDemPlanForecastStrategyAttribute]
public class ReqDemPlanCopyOverForecastStrategy extends ReqDemPlanForecastStrategy
{
    ReqDemPlanDataProcessingHelper dataProcessingHelper;
    boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled;

    #localmacro.attributeFields
        Site, Warehouse, AllocationKey, ItemId, Configuration, Color, Size, Style, ProductVersion,
        CustGroupId, CustAccount, LogisticsCountryRegionCode, LogisticsAddressStateId
    #endmacro

    #localmacro.attributeFieldsWithStatusId
        #attributeFields, StatusId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustBuckets</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs bucket offset of the foreast to move historical data into the forecast horizon.
    /// </summary>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter temporary table.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_version">
    ///     Forecast version.
    /// </param>
    /// <param name="_historicalStartBucket">
    ///     Historical horizon start bucket.
    /// </param>
    /// <param name="_forecastStartBucket">
    ///     Forecast start bucket.
    /// </param>
    /// <param name="_forecastEndBucket">
    ///     Forecast end bucket.
    /// </param>
    /// <returns>
    ///     Temporary table with currently used buckets.
    /// </returns>
    private ReqDemPlanBucketTmp adjustBuckets(
        ReqDemPlanAllocationKeyFilterTmp     _allocationKeyFilter,
        ReqDemPlanCreateForecastDataContract _dataContract,
        RefRecId                             _version,
        BIDateDimensionsViewPeriods          _historicalStartBucket,
        BIDateDimensionsViewPeriods          _forecastStartBucket,
        BIDateDimensionsViewPeriods          _forecastEndBucket)
    {
        ReqDemPlanForecast          forecast;
        BIDateDimensionsViewPeriods datePeriods;
        ReqDemPlanBucketTmp         bucketTmp;
        ReqDemPlanBucketTmp         bucketTmpOriginal;

        #localmacro.adjustBuckets

        insert_recordset bucketTmp(DateValue, Bucket)
        select %1, %2
            from datePeriods
            group by %1, %2
                where datePeriods.DateKey   >= _dataContract.parmHistoricalStart()
                    && datePeriods.DateKey  < _forecastEndBucket.%1;

        insert_recordset bucketTmpOriginal(DateValue, Bucket)
            select DateValue, Bucket
                from bucketTmp;

        update_recordSet bucketTmp
            setting Bucket = bucketTmp.Bucket + _forecastStartBucket.%2 - _historicalStartBucket.%2;

        update_recordSet forecast
            setting ForecastDate = bucketTmpOriginal.DateValue
            where forecast.Version == _version
            join bucketTmp
                where forecast.ForecastDate == bucketTmp.DateValue
            join bucketTmpOriginal
                where bucketTmpOriginal.Bucket == bucketTmp.Bucket
            exists join _allocationKeyFilter
                where forecast.AllocationKey == _allocationKeyFilter.AllocateId
                    && _allocationKeyFilter.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData;

        #endmacro

        dataProcessingHelper.skipAll(forecast);
        dataProcessingHelper.skipAll(bucketTmp);
        dataProcessingHelper.skipAll(bucketTmpOriginal);

        switch (_dataContract.parmDateGranularity())
        {
            case ReqDemPlanDateGranularity::Day:
                #adjustBuckets(DateKey, CurrentDateKey)
                break;
            case ReqDemPlanDateGranularity::Week:
                #adjustBuckets(CurrentWeekStart, CurrentWeekKey)
                break;
            case ReqDemPlanDateGranularity::Month:
                #adjustBuckets(CurrentMonthStart, CurrentMonthKey)
                break;
            default:
                throw error("@DMP1061");
        }

        return bucketTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMinMaxValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies minumum and maximum boundary values of forecast quantity
    ///     to the records in the forecast table that exceeds those limits.
    /// </summary>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter temporary table.
    /// </param>
    /// <param name="_version">
    ///     Forecast version.
    /// </param>
    private void applyMinMaxValues(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilter, RefRecId _version)
    {
        ReqDemPlanForecast  forecast;

        #localmacro.updateQuantity
        update_recordSet forecast
            setting
                Qty                                         = _allocationKeyFilter.%1,
                OriginalQty                                 = _allocationKeyFilter.%1
        where forecast.Version                              == _version
        join _allocationKeyFilter
            where  forecast.AllocationKey                   == _allocationKeyFilter.AllocateId
                && _allocationKeyFilter.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData
                && forecast.Qty                             %2 _allocationKeyFilter.%1;
        #endmacro

        dataProcessingHelper.skipAll(forecast);

        #updateQuantity(MinValue, <)
        #updateQuantity(MaxValue, >)
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies historical data from the staging table into the forecast table.
    /// </summary>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter temporary table.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_historicalEndBucket">
    ///     Historical horizon end bucket.
    /// </param>
    private void copyForecast(
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilter,
        ReqDemPlanCreateForecastDataContract    _dataContract,
        BIDateDimensionsViewPeriods             _historicalEndBucket)
    {
        ReqDemPlanCubeFactView      stagingTableView;
        ReqDemPlanForecast          forecast;
        BIDateDimensionsViewPeriods datePeriods;
        DataAreaId                  dataAreaId = curext();

        #localmacro.copyOver

        insert_recordset forecast(%2, Qty, OriginalQty, ForecastDate)
        select %2, sum(TransactionQty), sum(TransactionQty)
            from stagingTableView
            group by
                %2
            where
                stagingTableView.TransactionDate    >= _dataContract.parmHistoricalStart()
                && stagingTableView.TransactionDate <  _historicalEndBucket.%1
            join %1 from datePeriods
                group by %1
                where datePeriods.DateKey == stagingTableView.TransactionDate
            exists join _allocationKeyFilter
                where stagingTableView.AllocationKey            == _allocationKeyFilter.AllocateId
                    && _allocationKeyFilter.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData;
        #endmacro
        
        dataProcessingHelper.skipAll(forecast);
        dataProcessingHelper.skipAll(stagingTableView);
        dataProcessingHelper.skipAll(datePeriods);

        if (ReqDemPlanForecastImportHandleStatusIdFlight::instance().isEnabled())
        {
            switch (_dataContract.parmDateGranularity())
            {
                case ReqDemPlanDateGranularity::Day:
                    #copyOver(DateKey, #attributeFieldsWithStatusId)
                    break;
                case ReqDemPlanDateGranularity::Week:
                    #copyOver(CurrentWeekStart, #attributeFieldsWithStatusId)
                    break;
                case ReqDemPlanDateGranularity::Month:
                    #copyOver(CurrentMonthStart, #attributeFieldsWithStatusId)
                    break;
                default:
                    throw error("@DMP1061");
            }
        }
        else
        {
            switch (_dataContract.parmDateGranularity())
            {
                case ReqDemPlanDateGranularity::Day:
                    #copyOver(DateKey, #attributeFields)
                    break;
                case ReqDemPlanDateGranularity::Week:
                    #copyOver(CurrentWeekStart, #attributeFields)
                    break;
                case ReqDemPlanDateGranularity::Month:
                    #copyOver(CurrentMonthStart, #attributeFields)
                    break;
                default:
                    throw error("@DMP1061");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(
        ReqDemPlanAllocationKeyFilterTmp     _allocationKeyFilterTable,
        ReqDemPlanCreateForecastDataContract _dataContract,
        RefRecId                             _version,
        ReqDemPlanTaskLoggerInterface           _logger)
    {
        if (this.isCopyOverForecastNeeded(_allocationKeyFilterTable))
        {
            Set             companies = new Set(Types::String);
            SetEnumerator   e;
            DataAreaId      company;

            reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();

            dataProcessingHelper = ReqDemPlanDataProcessingHelper::construct();

            while select crossCompany DataAreaId
                from _allocationKeyFilterTable
                group by _allocationKeyFilterTable.DataAreaId
                where _allocationKeyFilterTable.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData
            {
                companies.add(_allocationKeyFilterTable.company());
            }

            e = companies.getEnumerator();
            while (e.moveNext())
            {
                company = e.current();
                changecompany(company)
                {
                    // Create a copy of the allocation key filter table to ensure the cursor and selected company is correct
                    ReqDemPlanAllocationKeyFilterTmp allocationKeyFilterCopy;
                    allocationKeyFilterCopy.linkPhysicalTableInstance(_allocationKeyFilterTable);
                    this.executePerCompany(allocationKeyFilterCopy, _dataContract, _version);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePerCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes copy over for a specific company.
    /// </summary>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter temporary table.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_version">
    ///     Forecast version.
    /// </param>
    private void executePerCompany(
        ReqDemPlanAllocationKeyFilterTmp     _allocationKeyFilter,
        ReqDemPlanCreateForecastDataContract _dataContract,
        RefRecId                             _version)
    {
        BIDateDimensionsViewPeriods historicalStartBucket;
        BIDateDimensionsViewPeriods historicalEndBucket;
        BIDateDimensionsViewPeriods forecastStartBucket;
        BIDateDimensionsViewPeriods forecastEndBucket;
        ReqDemPlanBucketTmp         bucketTmp;
        ReqDemPlanDataProcessingHelper  dataHelper = new ReqDemPlanDataProcessingHelper();

        #localmacro.selectBuckets

        select historicalStartBucket
            where historicalStartBucket.DateKey == _dataContract.parmHistoricalStart();
        select firstOnly historicalEndBucket
            where historicalEndBucket.%1 == historicalStartBucket.%1 + _dataContract.parmForecastHorizon();

        select forecastStartBucket
            where forecastStartBucket.DateKey == _dataContract.parmForecastStartDate();
        select firstOnly forecastEndBucket
            where forecastEndBucket.%1 == forecastStartBucket.%1 + _dataContract.parmForecastHorizon();

        #endmacro

        int infologLineTry = infologLine();

        try
        {
            switch (_dataContract.parmDateGranularity())
            {
                case ReqDemPlanDateGranularity::Day:
                    #selectBuckets(CurrentDateKey)
                    break;
                case ReqDemPlanDateGranularity::Week:
                    #selectBuckets(CurrentWeekKey)
                    break;
                case ReqDemPlanDateGranularity::Month:
                    #selectBuckets(CurrentMonthKey)
                    break;
                default:
                    throw error("@DMP1061");
            }

            ttsbegin;

            this.copyForecast(_allocationKeyFilter, _dataContract, historicalEndBucket);

            bucketTmp = this.adjustBuckets(_allocationKeyFilter, _dataContract, _version,
                historicalStartBucket, forecastStartBucket, forecastEndBucket);

            this.fillMissingBuckets(_allocationKeyFilter, _dataContract, _version,
                bucketTmp, forecastStartBucket, forecastEndBucket);

            this.applyMinMaxValues(_allocationKeyFilter, _version);

            ttscommit;
        }
        #ReqDemPlanCatchRetryTransientSqlConnectionError(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, _dataContract, _allocationKeyFilter, null, infologLineTry)//null = no logger
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMissingBuckets</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates forecast buckets with minimum quantities for granularities with missing historical buckets.
    /// </summary>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter temporary table.
    /// </param>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_version">
    ///     Forecast version.
    /// </param>
    /// <param name="_bucketTmp">
    ///     Temporary table with currently used buckets.
    /// </param>
    /// <param name="_forecastStartBucket">
    ///     Forecast start bucket.
    /// </param>
    /// <param name="_forecastEndBucket">
    ///     Forecast end bucket.
    /// </param>
    public void fillMissingBuckets(
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilter,
        ReqDemPlanCreateForecastDataContract    _dataContract,
        RefRecId                                _version,
        ReqDemPlanBucketTmp                     _bucketTmp,
        BIDateDimensionsViewPeriods             _forecastStartBucket,
        BIDateDimensionsViewPeriods             _forecastEndBucket)
    {
        ReqDemPlanForecast          forecast;
        ReqDemPlanForecast          existingForecast;
        ReqDemPlanForecast          missingForecast;

        #localmacro.fill
            if (ReqDemPlanForecastImportHandleStatusIdFillMissingBucketsFlight::instance().isEnabled())
            {
                insert_recordset missingForecast(#attributeFieldsWithStatusId, ForecastDate, Qty, OriginalQty)
                select #attributeFieldsWithStatusId
                from forecast
                    group by #attributeFieldsWithStatusId
                    where forecast.Version == _version
                join DateValue from _bucketTmp
                    group by DateValue
                    where _bucketTmp.DateValue    >= _forecastStartBucket.%1
                        && _bucketTmp.DateValue   < _forecastEndBucket.%1
                join MinValue, MinValue from _allocationKeyFilter
                    group by MinValue
                    where forecast.AllocationKey == _allocationKeyFilter.AllocateId
                        && _allocationKeyFilter.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData
                notExists join existingForecast
                    where existingForecast.ForecastDate         == _bucketTmp.DateValue
                        && forecast.Version                     == existingForecast.Version
                        && forecast.AllocationKey               == existingForecast.AllocationKey
                        && forecast.ItemId                      == existingForecast.ItemId
                        && forecast.Site                        == existingForecast.Site
                        && forecast.Warehouse                   == existingForecast.Warehouse
                        && forecast.Color                       == existingForecast.Color
                        && forecast.Configuration               == existingForecast.Configuration
                        && forecast.Size                        == existingForecast.Size
                        && forecast.Style                       == existingForecast.Style
                        && forecast.ProductVersion              == existingForecast.ProductVersion
                        && forecast.CustAccount                 == existingForecast.CustAccount
                        && forecast.CustGroupId                 == existingForecast.CustGroupId
                        && forecast.LogisticsAddressStateId     == existingForecast.LogisticsAddressStateId
                        && forecast.LogisticsCountryRegionCode  == existingForecast.LogisticsCountryRegionCode
                        && forecast.StatusId                    == existingForecast.StatusId;
                        
            }
            else
            {
                insert_recordset missingForecast(#attributeFields, ForecastDate, Qty, OriginalQty)
                select #attributeFields
                from forecast
                    group by #attributeFields
                    where forecast.Version == _version
                join DateValue from _bucketTmp
                    group by DateValue
                    where _bucketTmp.DateValue    >= _forecastStartBucket.%1
                        && _bucketTmp.DateValue   < _forecastEndBucket.%1
                join MinValue, MinValue from _allocationKeyFilter
                    group by MinValue
                    where forecast.AllocationKey == _allocationKeyFilter.AllocateId
                        && _allocationKeyFilter.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData
                notExists join existingForecast
                    where existingForecast.ForecastDate         == _bucketTmp.DateValue
                        && forecast.Version                     == existingForecast.Version
                        && forecast.AllocationKey               == existingForecast.AllocationKey
                        && forecast.ItemId                      == existingForecast.ItemId
                        && forecast.Site                        == existingForecast.Site
                        && forecast.Warehouse                   == existingForecast.Warehouse
                        && forecast.Color                       == existingForecast.Color
                        && forecast.Configuration               == existingForecast.Configuration
                        && forecast.Size                        == existingForecast.Size
                        && forecast.Style                       == existingForecast.Style
                        && forecast.ProductVersion              == existingForecast.ProductVersion
                        && forecast.CustAccount                 == existingForecast.CustAccount
                        && forecast.CustGroupId                 == existingForecast.CustGroupId
                        && forecast.LogisticsAddressStateId     == existingForecast.LogisticsAddressStateId
                        && forecast.LogisticsCountryRegionCode  == existingForecast.LogisticsCountryRegionCode;
            }
            
        #endmacro

        dataProcessingHelper.skipAll(forecast);
        dataProcessingHelper.skipAll(existingForecast);
        dataProcessingHelper.skipAll(missingForecast);

        switch (_dataContract.parmDateGranularity())
        {
            case ReqDemPlanDateGranularity::Day:
                #fill(DateKey)
                break;
            case ReqDemPlanDateGranularity::Week:
                #fill(CurrentWeekStart)
                break;
            case ReqDemPlanDateGranularity::Month:
                #fill(CurrentMonthStart)
                break;
            default:
                throw error("@DMP1061");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanCopyOverForecastStrategy construct()
    {
        return new ReqDemPlanCopyOverForecastStrategy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopyOverForecastNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if there will be any need for copy over forecast generation, so that the initialization can proceed.
    /// </summary>
    /// <param name="_allocationKeyFilterTable">
    ///     Temporary table hodling the values for the allocation keys to be used.
    /// </param>
    /// <returns>
    ///     <c>True</c> if there are IAK with copy over forecast, <c>False</c> otherwise
    /// </returns>
    private boolean isCopyOverForecastNeeded(ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        select firstOnly RecId from _allocationKeyFilterTable where _allocationKeyFilterTable.ForecastingStrategy == ReqDemPlanForecastingStrategy::CopyOverHistoricalData;

        return _allocationKeyFilterTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>