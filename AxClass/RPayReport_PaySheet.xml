<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_PaySheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The pay sheet report.
/// </summary>
class RPayReport_PaySheet extends OXMLExcelReport_RPay implements BatchRetryable
{
    DialogField     dialogPayPeriod;
    ReportPeriod_RU payPeriod;
    RPaySheetTable  paySheetTable;
    QueryRun        queryRun;
    Counter         pageNumber;
    Counter         rowNumber;
    Amount          sumAmount;
    int             numOfLinesTotal;

    #define.pageWidth(19)

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')
    #define.Footer('FOOTER')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        payPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Prolog:
            case #Header:
            case #Footer:
                return conPeek(mapSections.lookup(_bookmark), #posSectionHeight);
        }

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        SetEnumerator       sheetTablesEnumerator;

        currentHeight = 0;
        pageNumber = 1;
        rowNumber = 1;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.updateQuery();

        //for each sheet table from set
        sheetTablesEnumerator = this.getRPaySeetsSet().getEnumerator();
        while (sheetTablesEnumerator.moveNext())
        {
            paySheetTable = RPaySheetTable::find(sheetTablesEnumerator.current());

            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPaySheetTrans)),
                                fieldNum(RPaySheetTrans, SheetTableRecId)).value(queryValue(sheetTablesEnumerator.current()));
            queryRun.reset();
            numOfLinesTotal = SysQuery::countLoops(this.queryRun());

            this.execute(#Prolog);
            this.execute(#Header);
            while (queryRun.next())
            {
                if (this.mustCreateNewPage())
                {
                    document.insertPageBreak(currentRow, curWorksheetNum);
                    currentHeight = 0;
                    pageNumber ++;
                    this.execute(#Header);
                }
                this.execute(#Body);
            }

            this.execute(#Footer);
            document.insertPageBreak(currentRow, curWorksheetNum);
            currentHeight = 0;
            pageNumber = 0;
            rowNumber = 1;
        }

        if (!this.isSectionPrinted())
        {
            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        this.updateQuery();
        dialog = super();

        dialog.addGroup("@SYS2163");
        dialogPayPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod ? payPeriod : RPayParameters::payPeriod());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    #define.fileName('RPaySheetReport')
    protected Filename fileName()
    {
        return #fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(payPeriod, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.num('num')
    #define.emplId('emplId')
    #define.fio('fio')
    #define.amount('amount')
    private void fillBody()
    {
        RPaySheetTrans sheetTrans = queryRun.get(tableNum(RPaySheetTrans));

        this.insertValueToSection(#num, rowNumber);
        this.insertValueToSection(#emplId, sheetTrans.Emplid);
        this.insertValueToSection(#fio, RHRMEmplTable::find(sheetTrans.Emplid).personTable().fio());
        this.insertValueToSection(#amount, sheetTrans.Amount);

        rowNumber++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.sumAmount('sumAmount')
    #define.pageNum('pageNum')
    #define.cashNum('cashNum')
    #define.cashDay('cashDay')
    #define.cashMth('cashMth')
    #define.cashYear('cashYear')
    #define.respName('respName')
    private void fillFooter()
    {
        this.insertValueToSection(#sumAmount, sumAmount);
        this.insertValueToSection(#pageNum, pageNumber);
        this.insertValueToSection(#respName, OfficialsTable_RU::findAccountant().Name);

        this.insertValueToSection(#cashNum, paySheetTable.CashOrderNum);
        if (paySheetTable.CashOrderDate)
        {
            this.insertValueToSection(#cashDay, dayOfMth(paySheetTable.CashOrderDate));
            this.insertValueToSection(#cashMth, RNumDateInWordConverter::construct().date2strMonth(paySheetTable.CashOrderDate));
            this.insertValueToSection(#cashYear, year(paySheetTable.CashOrderDate));
        }
        else
        {
            this.insertValueToSection(#cashDay, '');
            this.insertValueToSection(#cashMth, '');
            this.insertValueToSection(#cashYear, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.okpo('okpo')
    #define.companyName('companyName')
    #define.orgName('orgName')
    #define.corrAccount('corrAccount')
    #define.dateDayFrom('dateDayFrom')
    #define.dateMthFrom('dateMthFrom')
    #define.dateYearFrom('dateYearFrom')
    #define.dateDayTo('dateDayTo')
    #define.dateMthTo('dateMthTo')
    #define.dateYearTo('dateYearTo')
    #define.amountInWords('amountInWords')
    #define.centsInWords('centsInWords')
    #define.amountHeader('amountHeader')
    #define.centsHeader('centsHeader')
    #define.dirTitle('dirTitle')
    #define.dirName('dirName')
    #define.accName('accName')
    #define.docNum('docNum')
    #define.docDate('docDate')
    #define.periodFrom('periodFrom')
    #define.periodTo('periodTo')
    private void fillProlog()
    {
        QueryRun        localQueryRun = new QueryRun(queryRun.query());
        CompanyInfo     company = CompanyInfo::find();
        RPaySheetTrans  rpaySheetTrans;
        real            amountWOCents;
        real            cents;
        RPaytitleposting    titlePosting;

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct(CompanyInfo::languageId());

        this.insertValueToSection(#okpo, CompanyInfoHelper::partyOKPOasOfDate_RU(company, payPeriod));
        this.insertValueToSection(#companyName, company.Name);
        this.insertValueToSection(#orgName, RPayHRMOrganization::find(paySheetTable.HrmOrganisationId).description);
        this.insertValueToSection(#dateDayFrom, dayOfMth(paySheetTable.PaySheetDateFrom));
        this.insertValueToSection(#dateMthFrom, RNumDateInWordConverter::construct().date2strMonth(paySheetTable.PaySheetDateFrom));
        this.insertValueToSection(#dateYearFrom, year(paySheetTable.PaySheetDateFrom));
        this.insertValueToSection(#dateDayTo, dayOfMth(paySheetTable.PaySheetDateTo));
        this.insertValueToSection(#dateMthTo, RNumDateInWordConverter::construct().date2strMonth(paySheetTable.PaySheetDateTo));
        this.insertValueToSection(#dateYearTo, year(paySheetTable.PaySheetDateTo));

        localQueryRun.query().dataSourceTable(tableNum(RPaySheetTrans)).addSelectionField(fieldNum(RPaySheetTrans, Amount), SelectionField::Sum);
        localQueryRun.reset();
        if (localQueryRun.next())
        {
            rpaySheetTrans = localQueryRun.get(tableNum(RPaySheetTrans));
        }

        sumAmount = rpaySheetTrans.Amount;
        amountWOCents = roundDownDec(sumAmount, 0);
        cents = (sumAmount - roundDownDec(sumAmount, 0)) * 100;

        this.insertValueToSection(#amountHeader, amountWOCents);
        this.insertValueToSection(#centsHeader, cents);

        this.insertValueToSection(#amountInWords, converter.numeralsToTxt(amountWOCents));
        this.insertValueToSection(#centsInWords, cents);

        this.insertValueToSection(#docNum, paySheetTable.PaySheetNum);
        this.insertValueToSection(#docDate, date2StrUsr(paySheetTable.TransDate, DateFlags::None));
        this.insertValueToSection(#periodFrom, date2StrUsr(dateStartMth(paySheetTable.PayPeriod), DateFlags::None));
        this.insertValueToSection(#periodTo, date2StrUsr(paySheetTable.PayPeriod, DateFlags::None));

        //corr account is just from first employee
        select firstonly EmplId from rpaySheetTrans
            where rpaySheetTrans.SheetTableRecId == paySheetTable.RecId;
        titlePosting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                      '',
                                      rpaySheetTrans.Emplid,
                                      paySheetTable.HrmOrganisationId,
                                      RHRMEmplTable::find(rpaySheetTrans.Emplid).HcmTitle);
        this.insertValueToSection(#corrAccount, LedgerDimensionFacade::getMainAccountFromLedgerDimension(titlePosting.LedgerDimension));

        this.insertValueToSection(#dirTitle, OfficialsTable_RU::findDirector().Title);
        this.insertValueToSection(#dirName, OfficialsTable_RU::findDirector().getFIO());
        this.insertValueToSection(#accName, OfficialsTable_RU::findAccountant().getFIO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        payPeriod = dialogPayPeriod.value() ? endmth(dialogPayPeriod.value()) : RPayParameters::payPeriod();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPaySeetsSet</Name>
				<Source><![CDATA[
    private Set getRPaySeetsSet()
    {
        Set                 sheetTables = new Set(Types::Int64);
        QueryRun            localQueryRun;
        rpaySheetTrans      rpaySheetTrans;
        //we need to print separate reports for each RPaySheetTable
        localQueryRun = new QueryRun(queryRun.query());
        localQueryRun.query().dataSourceTable(tableNum(RPaySheetTrans)).addGroupByField(fieldNum(RPaySheetTrans, SheetTableRecId));
        localQueryRun.reset();
        while (localQueryRun.next())
        {
            rpaySheetTrans = localQueryRun.get(tableNum(RPaySheetTrans));
            sheetTables.add(rpaySheetTrans.SheetTableRecId);
        }

        return sheetTables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        payPeriod = RPayParameters::payPeriod();
        queryRun = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        QueryBuildDataSource    sheetTableQBDS;
        QueryBuildDataSource    sheetTransQBDS;
        Query                   query;

        query = new Query();

        sheetTransQBDS   = query.addDataSource(tablenum(RpaySheetTrans));
        sheetTransQBDS.addRange(fieldnum(RpaySheetTrans, SendToBank)).value(queryValue(NoYes::No));

        sheetTableQBDS   = sheetTransQBDS.addDataSource(tablenum(RPaySheetTable));
        sheetTableQBDS.relations(true);
        sheetTableQBDS.addRange(fieldnum(RPaySheetTable,PaySheetSost)).value(
                queryValue(RPaySheetSost::ForPaid) + "@SYS35667" + queryValue(RPaySheetSost::Paid));

        if (paySheetTable)
        {
            sheetTableQBDS.addRange(fieldnum(RPaySheetTable, RecId)).value(queryValue(paySheetTable.RecId));
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#body);
        if (rowNumber >= numOfLinesTotal)
        {
            requiredHeight += conPeek(mapSections.lookup(#Header), #posSectionHeight);
            requiredHeight += conPeek(mapSections.lookup(#Footer), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack(), args.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPaySheetReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.headerCells(24)
        #define.footerCells(12)
        #define.bodyCells(4)

        return #headerCells + #footerCells + #bodyCells*numOfLinesTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;
        container argsPack;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQR, argsPack] = packedClass;

                args = Args::create(argsPack);

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                queryRun = this.initQueryRun();
                payPeriod = endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(RPaySheetTable)).clearRange(fieldnum(RPaySheetTable, RecId));
        queryRun.query().dataSourceTable(tableNum(RPaySheetTable)).clearRange(fieldnum(RPaySheetTable, payPeriod));
        if (this.parmArgs().record())
        {
            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPaySheetTable)), fieldnum(RPaySheetTable, RecId), queryValue(this.parmArgs().record().RecId));
        }
        else
        {
            findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RPaySheetTable)), fieldNum(RPaySheetTable, payPeriod), queryValue(payPeriod));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP6342";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_PaySheet report = new RPayReport_PaySheet();
        Common rec = _args.record();
        report.parmArgs(_args);
        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>