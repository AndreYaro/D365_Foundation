<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRemainingCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reserve processor class that reserves remaining capacity available within the specified date range.
/// </summary>
public class ResRemainingCapacity extends ResReserveProcessor implements ResIReserveProcessor
{
    protected real unfilledActivityCapacity;
    protected real reserveUnitCapacity;
    protected real remainingCapacity;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>book</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books remaining capacity in the specified date range.
    /// </summary>
    /// <returns>True when the reserve operation succeeds.</returns>
    protected boolean book()
    {
        int64 rowCount;
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        ResourceRecId resource = schedule.Resource();
        CalendarRecId calendar = schedule.parmCalendar();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();

        if (!activityResource || !activity || !commitment || !calendar)
        {
            return false;
        }

        resource = resource ? resource : ActivityResourceFacade::getResource(activityResource);
        ResRollUpCoverage   rollUpCoverage  = resource ? ResRollUpCoverage::Availability : ResRollUpCoverage::Activity;
        ActivityResourceId  activityResourceId = this.getActivityResourceId(activityResource, resource, rollUpCoverage);
        AVTimeframeType     timeScale = this.TimeScale();

        // if cache table records do not exists, update cache table
        this.updateCachTable(rollUpCoverage, activityResourceId, schedule.Start(), schedule.end(), timeScale);

        if (timeScale == AVTimeframeType::Hour)
        {
            ResCalendarCapacityView calendarWorkHours;

            // Book remaining capacity hour by hour as hourly remaining capacity is calculated based on current activity.
            while select Capacity, Hour
            from calendarWorkHours
                where calendarWorkHours.Calendar == calendar
                && calendarWorkHours.Hour >= schedule.Start()
                && calendarWorkHours.Hour <= schedule.End()
                && calendarWorkHours.Capacity > 0
            {
                this.processRemainingBookActivityResource(rollUpCoverage, activityResourceId, timeScale, 
                    calendarWorkHours.Capacity, commitment, activityResource, calendar, 
                    activity, calendarWorkHours.Hour);
            }
            rowCount = calendarWorkHours.RowCount();
        }
        else
        {
            ResCalendarCapacityWorkDaysView calendarWorkDays;

            // Book remaining capacity day by day as daily remaining capacity is calculated based on current activity.
            while select Day, Capacity, Hours
            from calendarWorkDays
                where calendarWorkDays.Calendar == calendar
                && calendarWorkDays.Day >= schedule.Start()
                && calendarWorkDays.Day <= schedule.End()
                && calendarWorkDays.Capacity > 0
            {
                this.processRemainingBookActivityResource(rollUpCoverage, activityResourceId, timeScale, 
                    calendarWorkDays.Capacity, commitment, activityResource, calendar, activity, 
                    calendarWorkDays.Day, int642int(calendarWorkDays.Hours));
            }
            rowCount = calendarWorkDays.RowCount();
        }

        return rowCount && true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books remaining capacity in the specified date range of the resource
    /// </summary>
    /// <returns>True when the reserve operation succeeds</returns>
    protected boolean bookResource()
    {
        return this.book();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns remaining capacity in the specified date range.
    /// </summary>
    /// <returns>True when the reserve operation succeeds.</returns>
    protected boolean assign()
    {
        int64 rowCount;
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        CalendarRecId calendar = schedule.parmCalendar();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();
        Seconds requestedCapacity = this.getRequestedCalendarCapacity(calendar);
        unfilledActivityCapacity = ActivityFacade::getRemainingCapacityInSeconds(activity, commitment);
        ResourceRecId resource = schedule.Resource();

        if (!activityResource || !activity || !commitment || !calendar ||
            requestedCapacity <= 0)
        {
            return false;
        }

        PSARSEntityType entityType = schedule.activityType();
        if (this.isTaskDoneStaffing(unfilledActivityCapacity, commitment, entityType))
        {
            return false;
        }

        resource = resource ? resource : ActivityResourceFacade::getResource(activityResource);
        ResRollUpCoverage   rollUpCoverage = ResRollUpCoverage::Assignment;
        ActivityResourceId  activityResourceId = this.getActivityResourceId(activityResource, resource, rollUpCoverage);
        AVTimeframeType     timeScale = this.TimeScale();
        
        utcdatetime startHour = (schedule.start() < taskStartDateTime) ? taskStartDateTime : schedule.start();
        utcdatetime endHour = (schedule.end() >  taskEndDateTime) ? taskEndDateTime : schedule.end();

        // if cache table records do not exists, update cache table
        this.updateCachTable(rollUpCoverage, activityResourceId, startHour, endHour, timeScale);

        if (timeScale == AVTimeframeType::Hour)
        {
            ResCalendarCapacityView calendarWorkHours;

            // Assign remaining capacity hour by hour as hourly remaining capacity is calculated based on current activity.
            while select Capacity, Hour
            from calendarWorkHours
                where calendarWorkHours.Calendar == calendar
                && calendarWorkHours.Hour >= startHour
                && calendarWorkHours.Hour <= endHour
                && calendarWorkHours.Capacity > 0
            {
                this.processRemainingAssignActivityResource(rollUpCoverage, activityResourceId, timeScale, calendarWorkHours.Capacity, 
                    commitment, entityType, activityResource, calendar, activity, calendarWorkHours.Hour);
                if (this.isTaskDoneStaffing(unfilledActivityCapacity, commitment, entityType))
                {
                    return true;
                }
            }
            rowCount = calendarWorkHours.RowCount();
        }
        else
        {
            ResCalendarCapacityWorkDaysView calendarWorkDays;

            // Assign remaining capacity day by day as daily remaining capacity is calculated based on current activity.
            while select Day, Capacity, Hours
            from calendarWorkDays
                where calendarWorkDays.Calendar == calendar
                && calendarWorkDays.Day >= startHour
                && calendarWorkDays.Day <= endHour
                && calendarWorkDays.Capacity > 0
            {
                this.processRemainingAssignActivityResource(rollUpCoverage, activityResourceId, timeScale, calendarWorkDays.Capacity, 
                    commitment, entityType, activityResource, calendar, activity, calendarWorkDays.Day, 
                    int642int(calendarWorkDays.Hours));
                if (this.isTaskDoneStaffing(unfilledActivityCapacity, commitment, entityType))
                {
                    return true;
                }
            }
            rowCount = calendarWorkDays.RowCount();
        }
        return rowCount && true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns remaining capacity in the specified date range of the resource.
    /// </summary>
    /// <returns>True when the reserve operation succeeds.</returns>
    protected boolean assignResource()
    {
        return this.assign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemainingBookActivityResource</Name>
				<Source><![CDATA[
    private void processRemainingBookActivityResource(ResRollUpCoverage _rollUpCoverage, ActivityResourceId  _activityResourceId, 
        AVTimeframeType _timeScale, int _calendarCapacity, ResCommitType _commitment, ActivityResourceRecId _activityResource, 
        CalendarRecId _calendar, ActivityRecId _activity, utcdatetime _timeframe, int _hour = 1)
    {
        // calculate the activity resouce remaining capacity and update the value to remainingCapacity
        this.updateActivityResourceRemainingCapacity(_rollUpCoverage, _activityResourceId, _timeframe, _timeScale, _calendarCapacity);

        if (remainingCapacity > 0)
        {
            // Execute assignment by the specify calendar for the specify timeframe which hours 
            // is the sum of hours in that time frame.
            this.bookByCalendarCapacity(_activityResource, _commitment, _calendar, _activity, remainingCapacity, 
                _timeframe, _hour, _timeScale);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemainingAssignActivityResource</Name>
				<Source><![CDATA[
    private void processRemainingAssignActivityResource(ResRollUpCoverage _rollUpCoverage, ActivityResourceId  _activityResourceId, 
        AVTimeframeType _timeScale, int _calendarCapacity, ResCommitType _commitment, PSARSEntityType _entityType, 
        ActivityResourceRecId _activityResource, CalendarRecId _calendar, ActivityRecId _activity, 
        utcdatetime _timeframe, int _hour = 1)
    {
        // calculate the activity resouce remaining capacity and update the value to remainingCapacity
        this.updateActivityResourceRemainingCapacity(_rollUpCoverage, _activityResourceId, _timeframe, _timeScale, _calendarCapacity);

        if (remainingCapacity > 0)
        {
            // calculate the unit capacity to be assigned
            reserveUnitCapacity = this.getTaskAssignCapacity(remainingCapacity, unfilledActivityCapacity, _commitment, _entityType);

            // Execute assignment by the specify calendar for the specify timeframe which hours is the sum of hours in that time frame.
            this.assignByCalendarCapacity(_activityResource, _commitment, _calendar, _activity, reserveUnitCapacity, _timeframe, 
                _hour, _timeScale);

            // reduce unfilled activity capacity by the assigned capacity
            unfilledActivityCapacity -= reserveUnitCapacity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivityResourceRemainingCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get activity resource remaining capaicty by the specify parameters and update the value to global variable remainingCapacity.
    /// </summary>
    /// <param name = "_rollUpCoverage">Res roll up coverage type.</param>
    /// <param name = "_activityResourceId">Activity resoruce Id.</param>
    /// <param name = "_timeframe">Time frame to specify date time.</param>
    /// <param name = "_timeScale">Time scale type.</param>
    /// <param name = "_calendarCapacity">Calendar capacity for the specify time frame.</param>
    protected void updateActivityResourceRemainingCapacity(ResRollUpCoverage _rollUpCoverage, ActivityResourceId  _activityResourceId, 
        utcdatetime _timeframe, AVTimeframeType _timeScale, int _calendarCapacity)
    {
        // get used capacity for the specify activity resource and time scale from ResRollup table
        real usedCapacity = this.getUsedCapacity(_rollUpCoverage, _activityResourceId, _timeframe, _timeScale);
            
        // get the activity resource remaining capacity
        remainingCapacity = _calendarCapacity - usedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the ResRemainingCapacity processor.
    /// </summary>
    /// <returns>Instance of <c>ResRemainingCapacity</c>.</returns>
    public static ResIReserveProcessor construct()
    {
        ResIReserveProcessor processor = new ResRemainingCapacity();
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the remaining capacity reserve processor.
    /// </summary>
    protected void new()
    {
        super();
        reserveProcessorType = ResBookingType::RemainingCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUsedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get used capacity of the activity resource.
    /// </summary>
    /// <param name = "_rollUpCoverage">Roll up coverage type.</param>
    /// <param name = "_activityResourceId">Activity resource Id.</param>
    /// <param name = "_timeframe">Specific time.</param>
    /// <param name = "_timeScale">Specify time scale.</param>
    /// <returns>Used capacity of the resource</returns>
    protected real getUsedCapacity(ResRollUpCoverage _rollUpCoverage, ActivityResourceId _activityResourceId,
        utcdatetime _timeframe, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        #TimeConstants
        real usedCapacity;

        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            ResourceRecId resourceRecId;
            ActivityResourceRecId activityResourceRecId;
            
            switch (_rollUpCoverage)
            {
                case ResRollUpCoverage::Availability:
                    resourceRecId = ResUtil::getResourceRecId(_activityResourceId);
                    usedCapacity = ResUtil::getAvailabilityScheduledCapacity(resourceRecId, _timeframe, _timeScale);
                    break;

                case ResRollUpCoverage::Activity:
                    activityResourceRecId = ResUtil::getActivityResourceRecId(_activityResourceId);
                    usedCapacity = ResUtil::getActivityScheduledCapacity(activityResourceRecId, _timeframe, _timeScale);
                    break;

                case ResRollupCoverage::Assignment:
                    activityResourceRecId = ResUtil::getActivityResourceRecId(_activityResourceId);
                    resourceRecId = ResUtil::getResourceRecId(_activityResourceId);
                    usedCapacity = ResUtil::getAssignmentScheduledCapacity(resourceRecId, activityResourceRecId, _timeframe, _timeScale);
                    break;
            }
        }
        else
        {
            Query query = new Query(querystr(ResCachedActivityResourceUtilizationQuery));
            QueryBuildDataSource dataSource = query.dataSourceTable(tableNum(ResRollUp));
            dataSource.rangeField(fieldNum(ResRollUp, Coverage)).value(queryValue(_rollUpCoverage));
            dataSource.rangeField(fieldNum(ResRollUp, CollectionKey)).value(queryValue(_activityResourceId));
            dataSource.rangeField(fieldNum(ResRollUp, Timescale)).value(queryValue(_timeScale));
            dataSource.rangeField(fieldNum(ResRollUp, Timeframe)).value(queryRange(_timeframe, _timeframe));

            QueryRun queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                ResRollUp cacheTable = queryRun.get(tableNum(ResRollUp));
                usedCapacity = cacheTable.HardLocked * #SecondsPerHour;
            }
        }

        return usedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ResRollUp</c> table resource chart item cache table if records does not exist.
    /// </summary>
    /// <param name = "_rollUpCoverage">Roll up coverage type.</param>
    /// <param name = "_activityResourceId">Activity resource Id.</param>
    /// <param name = "_start">Specify start time.</param>
    /// <param name = "_end">Specify end time.</param>
    /// <param name = "_timeScale">Specify time scale.</param>
    protected void updateCachTable(ResRollUpCoverage _rollUpCoverage, ActivityResourceId _activityResourceId,
        utcdatetime _start, utcdatetime _end, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
        {
            Query query = new Query(querystr(ResCachedActivityResourceUtilizationQuery));
            QueryBuildDataSource dataSource = query.dataSourceTable(tableNum(ResRollUp));
            dataSource.rangeField(fieldNum(ResRollUp, Coverage)).value(queryValue(_rollUpCoverage));
            dataSource.rangeField(fieldNum(ResRollUp, CollectionKey)).value(queryValue(_activityResourceId));
            dataSource.rangeField(fieldNum(ResRollUp, Timescale)).value(queryValue(_timeScale));
            dataSource.rangeField(fieldNum(ResRollUp, Timeframe)).value(queryRange(_start, _end));

            QueryRun queryRun = new QueryRun(query);
            if (!queryRun.next())
            {
                ResRollUpWriter::updateRollUpForSpecificActivityResourceId(_activityResourceId, _start, _end);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedCalendarCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Total capacity that's requested to reserve.
    /// </summary>
    /// <param name = "_calendar">Calendar record identifier.</param>
    /// <returns>
    /// Total capacity that's requested to reserve.
    ///</returns>
    protected Seconds getRequestedCalendarCapacity(CalendarRecId _calendar)
    {
        ResCalendarCapacityView resCalendarCapacityView;

        select sum(capacity)
            from resCalendarCapacityView
                where resCalendarCapacityView.Calendar == _calendar
                && resCalendarCapacityView.Hour >= schedule.Start()
                && resCalendarCapacityView.Hour < schedule.End()
                && resCalendarCapacityView.Capacity > 0;

        return resCalendarCapacityView.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return activity resoure ID by activity reosurce record ID, resource record ID and coverage type.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_resource">Resource record ID.</param>
    /// <param name = "_coverage"><c>ResRollup</c> table recods coverage type.</param>
    /// <returns>Activity resource ID.</returns>
    protected ActivityResourceId getActivityResourceId(activityresourcerecid _activityResource, ResourceRecId _resource, 
        ResRollUpCoverage _coverage = ResRollUpCoverage::Availability)
    {
        ActivityResourceId activityResourceId;
        if (_coverage == ResRollUpCoverage::Availability && _resource)
        {
            // Return activity resource ID for availability coverage type and staffed resource.
            activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, '0', _resource, '0');
        }
        else
        {
            activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat,
                ActivityResourceFacade::getRootActivity(_activityResource), _resource, _activityResource);
        }
        
        return activityResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaskDoneStaffing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if task is done staffing which decided by remaining task capacity, commitment type and resource entity type.
    /// </summary>
    /// <param name = "_unfilledActivityCapacity">A real value representing the unfilled activity capacity.</param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_entityType">Schedulable entity type.</param>
    /// <returns>Whether the task is done staffing.</returns>
    protected boolean isTaskDoneStaffing(real _unfilledActivityCapacity, ResCommitType _commitment, PSARsEntityType _entityType)
    {
        return (_unfilledActivityCapacity <= 0 &&
            (_commitment == ResCommitType::HardBook || _entityType == PSARsEntityType::Quotation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskAssignCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get task assign capacity by comparing the planned task assigned capacity and the unfilled task capacity.
    /// </summary>
    /// <param name = "_plannedTaskAssignCapacity">Capacity to be assigned.</param>
    /// <param name = "_unfilledTaskCapacity">Unfilled task capacity.</param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_entityType">Schedulable entity type.</param>
    /// <returns>The unfull task capacity.</returns>
    protected real getTaskAssignCapacity(real _plannedTaskAssignCapacity, real _unfilledTaskCapacity, ResCommitType _commitment, PSARsEntityType _entityType)
    {
        real assignCapacity = _plannedTaskAssignCapacity;
        if ((_plannedTaskAssignCapacity > _unfilledTaskCapacity) && (_commitment == ResCommitType::HardBook || _entityType == PSARsEntityType::Quotation))
        {
            assignCapacity = _unfilledTaskCapacity;
        }
        return assignCapacity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>