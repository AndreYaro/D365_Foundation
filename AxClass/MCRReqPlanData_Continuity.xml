<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReqPlanData_Continuity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRReqPlanData_Continuity</c> controls
/// logic needed for continuity plans to be included in
/// master planning.
/// </summary>
[ReqPlanTypeFactoryAttribute(ReqPlanType::MCRContPlan)]
class MCRReqPlanData_Continuity extends ReqPlanData
{
    MCRReqPlanContinuity mcrReqPlanContinuity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public boolean init()
    {
        super();

        mcrReqPlanContinuity = MCRReqPlanContinuity::find(reqPlanId);
        if (!mcrReqPlanContinuity.RecId && reqParameters.RecId)
            throw error(strFmt("@SYS25369", reqPlanId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of days allowed in case of issues in continuity payment.
    /// </summary>
    /// <param name="_setupDim">
    /// The <c>ReqSetupDim</c> record used in the calculation of extra days.
    /// </param>
    /// <returns>
    /// The number of days allowed for issues.
    /// </returns>
    public MarginIssue marginIssue(ReqSetupDim _setupDim)
    {
        return mcrReqPlanContinuity.IssueMargin  + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of days betweeen continuity orders.
    /// </summary>
    /// <param name="_setupDim">
    /// The <c>ReqSetupDim</c> record used in the calculation of the ordering margin.
    /// </param>
    /// <returns>
    /// The number of days between continuity orders.
    /// </returns>
    public MarginOrder  marginOrder(ReqSetupDim _setupDim)
    {
        return mcrReqPlanContinuity.OrderingMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of extra days for the receipt to process.
    /// </summary>
    /// <param name="_setupDim">
    /// The <c>ReqSetupDim</c> record used in the calculation.
    /// </param>
    /// <returns>
    /// The number of days that the receipt can take to process.
    /// </returns>
    public MarginReceipt marginReceipt(ReqSetupDim     _setupDim)
    {
        return mcrReqPlanContinuity.ReceiptMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUseContinuityPlan</Name>
				<Source><![CDATA[
        public NoYes mcrUseContinuityPlan()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUseProbabilisticContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a boolean about whether to multiply a probability factor for
    ///     the continuity demand that is generated during continuity scheduling.
    /// </summary>
    /// <returns>
    /// true when the probability factor should be multipled for the continuity demand
    /// that is generated during continuity scheduling; otherwise, false.
    /// </returns>
    public NoYes mcrUseProbabilisticContinuity()
    {
        return mcrReqPlanContinuity.UseProbabalisticContinuity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceLogId</Name>
				<Source><![CDATA[
        public ReqSequenceJobRefRecId sequenceLogId()
    {
        return mcrReqPlanContinuity.ReqPlanSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequencePlannedOrder</Name>
				<Source><![CDATA[
        public ReqSequencePORefRecId sequencePlannedOrder()
    {
        return mcrReqPlanContinuity.PlannedOrderSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fixed capacity time fence in days.
    /// </summary>
    /// <param name="setupDim">
    /// The <c>ReqSetupDim</c> record used in the calculation.
    /// </param>
    /// <returns>
    /// The number of days relating to the fixed capacity.
    /// </returns>
    public TimeFenceCapacity timeFenceCapacity(ReqSetupDim    setupDim)
    {
        return mcrReqPlanContinuity.TimeFenceCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of days for the time fence coverage.
    /// </summary>
    /// <param name="setupDim">
    /// The <c>ReqSetupDim</c> object used in parent calculations.
    /// </param>
    /// <returns>
    /// The number of days for the time fence coverage.
    /// </returns>
    public TimeFenceCoverage timeFenceCoverage(ReqSetupDim    setupDim)
    {
        return mcrReqPlanContinuity.TimeFenceCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceExplosion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the explosion time fence.
    /// </summary>
    /// <param name="setupDim">
    /// The <c>ReqSetupDim</c> object used in parent calculations.
    /// </param>
    /// <returns>
    /// The explosion time fence in days.
    /// </returns>
    public TimeFenceExplosion timeFenceExplosion(ReqSetupDim     setupDim)
    {
        return mcrReqPlanContinuity.TimeFenceExplosion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>