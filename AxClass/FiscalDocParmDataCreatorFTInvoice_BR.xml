<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorFTInvoice_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a <c>FiscalDocumentParmData_BR</c> object and its
/// components for a free text invoice posting scenario.
/// </summary>
class FiscalDocParmDataCreatorFTInvoice_BR extends FiscalDocumentParmDataCreator_BR
{
    CustInvoiceTable            custInvoiceTable;
    CustInvoiceJour             custInvoiceJour;
    CustFreeInvoiceCalcTotals   custFreeInvoiceCalcTotals;
    SalesCarrier                salesCarrier;
    CustTrans                   custTrans;
    CustTable                   custTable;

    FiscalDocumentType_BR   fiscalDocumentType;
    Query                   queryCustInvoiceTrans;

    // Bill of landing info
    WMSFreightChargeTerms   freightChargeTerms;
    WMSCarrierName          carrierName;
    DlvNoOfCarrier_BR       vehicleLicensePlate_BR;
    DlvStateRegistered_BR   vehicleLicensePlateState_BR;
    DlvTransportBrand_BR    dlvTransportBrand;

    VolumeType_BR           volumeType;
    VolumeQty_BR            volumeQty;
    ItemNetWeight           netWeight;
    GrossWeight             grossWeight;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custInvoiceLine</Name>
				<Source><![CDATA[
    private CustInvoiceLine custInvoiceLine(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly custInvoiceLine
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId
                && custInvoiceLine.LineNum == _custInvoiceTrans.LineNum;

        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fiscalEstablishment()
    {
        FiscalEstablishment_BR fiscalEstablishment = custInvoiceTable.fiscalEstablishment();

        return fiscalEstablishment.IsClosedWarehouse ? FiscalEstablishment_BR::find(fiscalEstablishment.FiscalEstablishmentSalesIssuer) : fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected recId fiscalReferenceSourceRecId()
    {
        return custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected tableId fiscalReferenceSourceTableId()
    {
        return custInvoiceTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return custTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        List                installments = new List(Types::Class);
        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        FiscalDocumentCustVendTransParmData_BR custVendTransParmData = new FiscalDocumentCustVendTransParmData_BR();
        FiscalDocumentInstallmentParmData_BR installmentParmData;

        custVendTransParmData.parmAmount(custTrans.AmountMST);
        custVendTransParmData.parmDocumentType(CustPaymModeTable::find(custInvoiceJour.paymMode()).PrimaryMethod_BR);
        custVendTransParmData.parmDueDate(custTrans.DueDate);

        while select DueDate, DueAmount from custPaymSchedLine
            join recId from custPaymSched
            where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                && custPaymSched.ExtRecId == custInvoiceJour.RecId
                && custPaymSched.ExtTableId == custInvoiceJour.TableId
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            installmentParmData.parmDueDate(custPaymSchedLine.DueDate);
            installmentParmData.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate));

            custVendTransParmData.addInstallment(installmentParmData);
        }

        return custVendTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocument = new FiscalDocumentParmData_BR();

        fiscalDocument.parmAccountingDate                   (custInvoiceJour.InvoiceDate);
        fiscalDocument.parmFiscalDocumentDate               (fiscalDocument.parmAccountingDate());
        fiscalDocument.parmFiscalDocumentAccountNum         (custInvoiceJour.InvoiceAccount);
        fiscalDocument.parmFiscalDocumentAccountType        (CustVendType_BR::Customer);
        fiscalDocument.parmFinalUser                        (custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR);
        if (fiscalDocument.parmFinalUser())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00087, funcName());
        }
        fiscalDocument.parmPresenceType                     (custInvoiceJour.custInvoiceJour_BR().PresenceType);
        fiscalDocument.parmPaymentMethod                    (FiscalDocumentParmDataCreator_BR::nfePaymentMethod_BR(custInvoiceJour, this.getFiscalDocumentPurpose()));
        fiscalDocument.parmPaymentAmount                    (CustInvoiceJour.InvoiceAmountMST);
    
        fiscalDocument.parmCFPSId                           (custInvoiceTable.CFPSId_BR);
        fiscalDocument.parmServiceCodeOnDlvAddress          (custInvoiceTable.ServiceCodeOnDlvAddress_BR);
        fiscalDocument.parmDeliveryMode                     (custInvoiceJour.DlvMode);
        fiscalDocument.parmDeliveryTerm                     (custInvoiceJour.DlvTerm);

        fiscalDocument.parmFiscalEstablishmentName          (this.fiscalEstablishment().Name);
        fiscalDocument.parmFiscalEstablishmentID            (this.fiscalEstablishment().FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (this.fiscalEstablishment().postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (this.fiscalEstablishment().CNPJCPFNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (this.fiscalEstablishment().IENum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (this.fiscalEstablishment().CCMNum_BR);
        fiscalDocument.parmFiscalEstablishmentPhone         (this.fiscalEstablishment().phone());

        fiscalDocument.parmThirdPartyName                   (custTable.name());
        fiscalDocument.parmThirdPartyCNPJCPF                (custTable.CNPJCPFNum_BR);
        fiscalDocument.parmThirdPartyIE                     (custTable.IENum_BR);
        fiscalDocument.parmThirdPartyCCMNum                 (custTable.CCMNum_BR);
        fiscalDocument.parmThirdPartyPhone                  (custTable.phone());
        fiscalDocument.parmThirdPartyFax                    (custTable.teleFax());
        fiscalDocument.parmThirdPartyIcmsContributor        (custTable.ICMSContributor_BR);
        fiscalDocument.parmThirdPartyPostalAddress          (custInvoiceJour.InvoicePostalAddress);
        fiscalDocument.parmThirdPartyFax                    (custTable.telefax());

        fiscalDocument.parmDirection                        (FiscalDocDirection_BR::Outgoing);

        fiscalDocument.parmFiscalDocumentIssuer             (FiscalDocumentIssuer_BR::OwnEstablishment);
        fiscalDocument.parmFiscalDocumentType               (fiscalDocumentType);

        fiscalDocument.parmModel                            (fiscalDocumentType.FiscalDocumentModel);
        fiscalDocument.parmFiscalDocumentSeries             (FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));
        fiscalDocument.parmSpecie                           (fiscalDocumentType.FiscalDocumentSpecie);

        fiscalDocument.parmFiscalDocumentDate               (custInvoiceJour.InvoiceDate);
        fiscalDocument.parmFiscalDocumentNumber             (this.getInvoiceIdWithoutSeriesPrefix(custInvoiceJour.InvoiceId, FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId)));

        fiscalDocument.parmFreightChargeTerms               (FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(freightChargeTerms));
        fiscalDocument.parmInventoryVoucher                 (custInvoiceJour.LedgerVoucher);

        fiscalDocument.parmRefRecId                         (custInvoiceJour.RecId);
        fiscalDocument.parmRefTableId                       (custInvoiceJour.TableId);

        fiscalDocument.parmSalesCarrier                     (salesCarrier.RecId);
        fiscalDocument.parmSalesCarrierPostalAddress        (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);
        fiscalDocument.parmVehicleLicensePlateNumber        (vehicleLicensePlate_BR);
        fiscalDocument.parmVehicleLicensePlateState         (vehicleLicensePlateState_BR);
        fiscalDocument.parmPackingBrand                     (dlvTransportBrand);

        fiscalDocument.parmVoucher                          (custInvoiceJour.LedgerVoucher);

        fiscalDocument.parmTotalAmount                      (custInvoiceJour.InvoiceAmountMST);
        fiscalDocument.parmTotalMarkupFreightAmount         (custFreeInvoiceCalcTotals.markupFreightAmountMST_BR());
        fiscalDocument.parmTotalMarkupInsuranceAmount       (custFreeInvoiceCalcTotals.markupInsuranceAmountMST_BR());
        fiscalDocument.parmTotalMarkupOtherAmount           (custFreeInvoiceCalcTotals.markupOthersAmountMST_BR());

        this.initTagReplacer(fiscalDocument.parmTextTagReplacer());

        fiscalDocument.parmListOfTextsParmData              (this.addTexts(custInvoiceTable));

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        List lines = new List(Types::Class);

        QueryRun queryRun;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceLine custInvoiceLine;
        InventTable inventTable;
        FiscalDocumentLineParmData_BR fiscalDocumentLineParmData;
        LogisticsPostalAddress logisticsPostalAddress;
        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading;
        CFOPId_BR cfopId;

        CFOPId_BR cfop(recId _cfopRecId)
        {
            return CFOPTable_BR::find(_cfopRecId).CFOPId;
        }

        if (!queryCustInvoiceTrans)
        {
            return lines;
        }

        boolean isAnyAsset, isAnyService;

        boolean creditNote;
        AmountCur invoiceAmount = custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
        if ((invoiceAmount == 0 && custFreeInvoiceCalcTotals.custFreeInvoiceQty() < 0) || (invoiceAmount < 0 || custInvoiceTable.creditNote_W()))
        {
            creditNote = NoYes::Yes;
        }
            
        if (!creditNote && custInvoiceJour.InvoiceAmount >= 0)
        {
            logisticsPostalAddress = this.fiscalEstablishment().postalAddress();
        }
        else
        {
            logisticsPostalAddress = custInvoiceJour.custTable_InvoiceAccount().postalAddress();
        }

        taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        queryRun = new QueryRun(queryCustInvoiceTrans);
        while (queryRun.next())
        {
            custInvoiceTrans = queryRun.get(tablenum(CustInvoiceTrans));
            custInvoiceLine = this.custInvoiceLine(custInvoiceTrans);

            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            if (custInvoiceLine.ServiceInvoice_BR == false)
            {
                inventTable = inventTable::find(BrazilParameters::find().FreeTextInvoiceItemId);
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Product);
                fiscalDocumentLineParmData.parmFiscalClassification (inventTable.TaxFiscalClassification_BR);
            }
            else
            {
                inventTable = inventTable::find(BrazilParameters::find().FreeTextInvoiceServiceItemId);
                fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Service);
                fiscalDocumentLineParmData.parmServiceCode          (custInvoiceLine.TaxServiceCode_BR);
                isAnyService = true;
            }
            cfopId = cfop(custInvoiceLine.CFOPTable_BR);
            fiscalDocumentLineParmData.parmItemId                   (inventTable.ItemId);
            fiscalDocumentLineParmData.parmDescription              (custInvoiceTrans.Name);
            fiscalDocumentLineParmData.parmCFOP                     (cfopId);
            fiscalDocumentLineParmData.parmQuantity                 (custInvoiceTrans.Qty);
            fiscalDocumentLineParmData.parmUnit                     (inventTable.inventTableModuleSales().UnitId);
            fiscalDocumentLineParmData.parmLineAmount               (custInvoiceTrans.LineAmountMST);

            if (fiscalDocumentLineParmData.parmQuantity())
            {
                fiscalDocumentLineParmData.parmUnitPrice            (fiscalDocumentLineParmData.parmLineAmount() / fiscalDocumentLineParmData.parmQuantity());
            }

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (custInvoiceTrans.LedgerDimension);
            fiscalDocumentLineParmData.parmOrigin                   (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode            (inventTable.ExceptionCode_BR);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);

            fiscalDocumentLineParmData.parmBenefitCode          (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::FreeTextInvoice));
            fiscalDocumentLineParmData.parmAdjustmentCode53     (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::FreeTextInvoice));
            fiscalDocumentLineParmData.parmObservationCode      (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                    taxBenefitCodeSetupHeading.RecId,
                                                                    inventTable.ItemId,
                                                                    CustVendType_BR::Customer,
                                                                    custInvoiceJour.InvoiceAccount,
                                                                    cfopId,
                                                                    SalesPurchTrntype_BR::FreeTextInvoice));

            fiscalDocumentLineParmData.parmInventTransId            (custInvoiceTrans.InventRefTransId);

            fiscalDocumentLineParmData.parmAssetId                  (custInvoiceTrans.AssetId);

            if (custInvoiceTrans.AssetId)
            {
                isAnyAsset = true;
            }

            fiscalDocumentLineParmData.parmRefTableId               (custInvoiceTrans.TableId);
            fiscalDocumentLineParmData.parmRefRecId                 (custInvoiceTrans.RecId);

            fiscalDocumentLineParmData.parmListOfTextsParmData(this.addTexts(custInvoiceLine));
            this.initTagReplacer(fiscalDocumentLineParmData.parmTextTagReplacer());

            if (this.shouldHaveApproximateTaxDescription())
            {
                fiscalDocumentLineParmData.parmApproximateTaxAmount     (round(inventTable.approximateTaxValue_BR() * custInvoiceTrans.lineAmount / 100, 0.01));
                totalApproxTaxAmount += fiscalDocumentLineParmData.parmApproximateTaxAmount();

                fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextLine(inventTable, fiscalDocumentLineParmData));
            }

            lines.addEnd(fiscalDocumentLineParmData);
        }

        if (isAnyAsset)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00085, funcName());
        }
        if (isAnyService)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00084, funcName());
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        int installmentNum;

        List list = new List(Types::Class);

        FiscalDocumentInstallmentParmData_BR installment;

        CustPaymSched       custPaymSched;
        CustPaymSchedLine   custPaymSchedLine;

        select recId from custPaymSched
            where custPaymSched.ExtTableId == custInvoiceJour.TableId
                && custPaymSched.ExtRecId == custInvoiceJour.RecId;

        if (custPaymSched)
        {
            while select DueDate, DueAmount from custPaymSchedLine
                    where CustPaymSchedLine.ParentRecID == custPaymSched.RecId
            {
                installmentNum++;

                installment = new FiscalDocumentInstallmentParmData_BR();

                installment.parmDueDate(custPaymSchedLine.DueDate);
                installment.parmAmount(CurrencyExchangeHelper::amountCur2MST(custPaymSchedLine.DueAmount, custInvoiceJour.CurrencyCode, custInvoiceJour.ExchRate));
                installment.parmInstallmentNumber(installmentNum);

                list.addEnd(installment);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List shipmentStatList = new List(Types::Class);
        FiscalDocumentShipmentStatParmData_BR shipmentStatParmData;

        shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();

        shipmentStatParmData.parmVolumeType(volumeType);
        shipmentStatParmData.parmVolumeQuantity(volumeQty);
        shipmentStatParmData.parmGrossWeight(grossWeight);
        shipmentStatParmData.parmNetWeight(netWeight);

        shipmentStatList.addEnd(shipmentStatParmData);

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTagReplacer</Name>
				<Source><![CDATA[
    private void initTagReplacer(FiscalDocumentTextTagReplacer_BR _replacer)
    {
        _replacer.parmCustomer_Address  (LogisticsPostalAddress::findRecId(custInvoiceTable.PostalAddress).Address);
        _replacer.parmCustomer_CnpjCpf  (custInvoiceJour.custTable_InvoiceAccount().CNPJCPFNum_BR);
        _replacer.parmCustomer_IE       (custInvoiceJour.custTable_InvoiceAccount().IENum_BR);
        _replacer.parmCustomer_Name     (custInvoiceJour.custTable_InvoiceAccount().name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFiscalDocumentText</Name>
				<Source><![CDATA[
    protected void prepareFiscalDocumentText(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        _fiscalDocumentParmData.parmListOfTextsParmData().appendList(this.addApproximateTaxTextHeader(custInvoiceJour.SalesBalanceMST));

        super(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillOfLadingInformation_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bill of lading information that will be used to generate the fiscal document parm data.
    /// </summary>
    /// <param name="_carrierName">
    /// Sales carrier name.
    /// </param>
    /// <param name="_freightChargeTerms">
    /// <c>WMSFreightChargeTerms</c> freight charge terms.
    /// </param>
    /// <param name="_dlvNoOfCarrier">
    /// The vehicle license plate.
    /// </param>
    /// <param name="_dlvStateRegitered">
    /// The state where the vehicle is registered.
    /// </param>
    /// <param name="_dlvTransportBrand">
    /// The brand of the transporting vehicle.
    /// </param>
    /// <param name="_volumeType">
    /// The type of the volume used to transport the goods.
    /// </param>
    /// <param name="_volumeQty">
    /// The volume quantity used to transport the goods.
    /// </param>
    /// <param name="_netWeight">
    /// The net weight of the item.
    /// </param>
    /// <param name="_grossWeight">
    /// The gross weight of the item.
    /// </param>
    public void setBillOfLadingInformation_BR(WMSCarrierName      _carrierName       = carrierName,
                                            WMSFreightChargeTerms _freightChargeTerms = freightChargeTerms,
                                            DlvNoOfCarrier_BR     _dlvNoOfCarrier    = vehicleLicensePlate_BR,
                                            DlvStateRegistered_BR _dlvStateRegitered = vehicleLicensePlateState_BR,
                                            DlvTransportBrand_BR  _dlvTransportBrand = dlvTransportBrand,
                                            VolumeType_BR         _volumeType        = volumeType,
                                            VolumeQty_BR          _volumeQty         = volumeQty,
                                            ItemNetWeight         _netWeight         = netWeight,
                                            GrossWeight           _grossWeight       = grossWeight)
    {
        carrierName                 = _carrierName;
        freightChargeTerms          = _freightChargeTerms;
        vehicleLicensePlate_BR      = _dlvNoOfCarrier;
        vehicleLicensePlateState_BR = _dlvStateRegitered;
        dlvTransportBrand           = _dlvTransportBrand;
        volumeType                  = _volumeType;
        volumeQty                   = _volumeQty;
        netWeight                   = _netWeight;
        grossWeight                 = _grossWeight;

        salesCarrier = salesCarrier::find(carrierName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustFreeInvoiceCalcTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>CustFreeInvoiceCalcTotals</c> class that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custFreeInvoiceCalcTotals">
    ///     The <c>CustFreeInvoiceCalcTotals</c> instance from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    public void setCustFreeInvoiceCalcTotals(CustFreeInvoiceCalcTotals _custFreeInvoiceCalcTotals)
    {
        custFreeInvoiceCalcTotals = _custFreeInvoiceCalcTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>CustInvoiceJour</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///     The <c>CustInvoiceJour</c> table buffer from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    public void setCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;

        queryCustInvoiceTrans   = custInvoiceJour.queryCustInvoiceTrans();
        custTrans               = custInvoiceJour.custTrans();
        custTable               = custInvoiceJour.custTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setcustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the instance of the <c>custInvoiceTable</c> table buffer that will be used in the fiscal document posting process.
    /// </summary>
    /// <param name="_custInvoiceTable">
    ///     The <c>custInvoiceTable</c> table buffer from which values will be retrieved to be used in the fiscal document posting.
    /// </param>
    public void setcustInvoiceTable(custInvoiceTable _custInvoiceTable)
    {
        custInvoiceTable = _custInvoiceTable;

        fiscalDocumentType = FiscalDocumentType_BR::findRecID(custInvoiceTable.FiscalDocumentType_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldHaveApproximateTaxDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the approximate tax description should be written.
    /// </summary>
    /// <returns>
    /// True if the text that describe the approximate taxes should be exported, false otherwise.
    /// </returns>
    public boolean shouldHaveApproximateTaxDescription()
    {
        RecId           SalesPurchOperationType;

        if (BrazilParameters.ApproxTaxPrintOnlyFinalUser && !custInvoiceTable.CustFinalUser_BR)
        {
            return false;
        }

        SalesPurchOperationType = custInvoiceJour.custInvoiceJour_BR().SalesPurchOperationType_BR;

        if ((!SalesPurchOperationType || SalesPurchOperationType_BR::find(SalesPurchOperationType).CreateFinancialTrans != NoYes::Yes))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the purpose of the fiscal document generated from the free text invoice
    /// </summary>
    /// <returns>
    /// The purpose of the fiscal document being posted
    /// </returns>
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR    fiscalDocumentPurpose;
        CustInvoiceTrans            custInvoiceTrans;
        QueryRun                    queryRun;

        queryRun = new QueryRun(queryCustInvoiceTrans);
        if (queryRun.next())
        {
            custInvoiceTrans = queryRun.get(tablenum(CustInvoiceTrans));
            if (CFOPTable_BR::find(this.custInvoiceLine(custInvoiceTrans).CFOPTable_BR).Purpose == CFOPPurpose_BR::ReturnOrder)
            {
                fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Return;
            }
            else
            {
                fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Regular;
            }
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>