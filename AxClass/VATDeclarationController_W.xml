<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationController_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller of ER VAT declaration file generation.
/// </summary>
public class VATDeclarationController_W extends ERFormatMappingRunBaseController implements BatchRetryable
{
    #ISOCountryRegionCodes

    protected LogisticsAddressCountryRegionISOCode  isoCodeFromTaxRegistration;
    TaxPeriod                                       taxPeriod;
    FromDate                                        fromDate;
    TaxRepVersion                                   taxRepVersion;
    TransDate                                       transactionDate;
    ToDate                                          toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VATDeclarationController_W        controller;
        SalesTaxReportingByTaxIdEngine    salesTaxReportingByTaxIdEngine = _args.caller() as SalesTaxReportingByTaxIdEngine;

        if (salesTaxReportingByTaxIdEngine != null) 
        {
            if (_args && _args.parmObject().name() == classStr(TaxReport))
            {
                TaxPeriod taxPeriodDialog = _args.parmObject().taxPeriod();
                TaxRegistrationNumber taxRegistrationNumber = VATDeclarationController_W::getTaxRegistrationNumberFromTaxPeriod(taxPeriodDialog);

                controller = VATDeclarationController_W::constructByTaxRegistration(taxRegistrationNumber);
            }
            else
            {
                TaxReportVoucher taxReportVoucher = _args.record();

                controller = VATDeclarationController_W::constructByTaxRegistration(
                    VATDeclarationController_W::getTaxRegistrationNumberFromVoucher(taxReportVoucher));
            }
        }
        else
        {
            controller = VATDeclarationController_W::construct();
        }

        controller.parmArgs(_args);
        controller.prePromptModifyContract(_args);

        if (_args.menuItemName() != menuItemOutputStr(TaxReportExport_W))
        {
            controller.parmShowDialog(false);
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies controller inheritors Class Name to construct.
    /// </summary>
    /// <param name = "_isoCode">
    /// Country ISO Code to make a switch choice.
    /// </param>
    /// <returns>
    /// The Class Name.
    /// </returns>
    protected static str getClassName(LogisticsAddressCountryRegionISOCode _isoCode)
    {
        ClassName className;

        switch (_isoCode)
        {
            case #isoEE:
                className = classStr(VATDeclarationService_EE);
                break;

            case #isoCZ:
                className = classStr(VATDeclarationService_CZ);
                break;

            case #isoLV:
                className = classStr(VATDeclarationService_LV);
                break;

            default:
                className = classStr(VATDeclarationService_W);
        }
        return className;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a VATDeclarationController_W child class depending on the current CountryRegionCode.
    /// </summary>
    /// <returns>
    /// Returns new instance of chosen controller class.
    /// </returns>
    public static VATDeclarationController_W construct()
    {
        ClassName className = VATDeclarationController_W::getClassName(SysCountryRegionCode::countryInfo(curExt()));

        VATDeclarationController_W controller = new VATDeclarationController_W(className, methodStr(VATDeclarationService_W, generateXml), SysOperationExecutionMode::Synchronous);
        controller.parmLoadFromSysLastValue(false);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a VATDeclarationController_W child class depending on the current CountryRegionCode.
    /// This constructor is only used for enabled GTE, so caller() is SalesTaxReportingByTaxIdEngine
    /// </summary>
    /// <param name="_taxRegistrationNumber">
    /// The tax registration number is used to find desired country by ISOCode.
    /// </param>
    /// <returns>
    /// Returns new instance of chosen controller class.
    /// </returns>
    public static VATDeclarationController_W constructByTaxRegistration(TaxRegistrationNumber _taxRegistrationNumber)
    {
        LogisticsAddressCountryRegionId            reportCountryRegionId = VATDeclarationController_W::
            getCountryRegionIDFromTaxRegNumber(_taxRegistrationNumber);
        LogisticsAddressCountryRegionISOCode    isoCode = VATDeclarationController_W::getISOCodeFromCountryRegionCode(reportCountryRegionId);
        ClassName                                className = VATDeclarationController_W::getClassName(isoCode);

        VATDeclarationController_W vatDeclarationController_W = new VATDeclarationController_W(className,
                methodStr(VATDeclarationService_W, generateXml), SysOperationExecutionMode::Synchronous);
        vatDeclarationController_W.parmISOCodeFromTaxRegistration(isoCode);
        vatDeclarationController_W.parmLoadFromSysLastValue(false);

        return vatDeclarationController_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tax Registration Number from Tax Report Voucher.
    /// </summary>
    /// <param name="_taxReportVoucher">
    /// The Tax Report Voucher.
    /// </param>
    /// <returns>
    /// Returns Tax Registration Number.
    /// </returns>
    protected static str getTaxRegistrationNumberFromVoucher(TaxReportVoucher _taxReportVoucher)
    {
        TaxReportVoucher    taxReportVoucher;
        TaxPeriodHead        taxPeriodHead;
        TaxRegistration        taxRegistration;

        select firstonly taxRegistration
        join taxPeriodHead
            where taxPeriodHead.TaxID == taxRegistration.RecId
        join taxReportVoucher
            where taxReportVoucher.TaxPeriod == taxPeriodHead.TaxPeriod
                && taxReportVoucher.Voucher == _taxReportVoucher.Voucher;

        return taxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberFromTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tax Registration Number from Tax Period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The Tax Period.
    /// </param>
    /// <returns>
    /// Returns Tax Registration Number.
    /// </returns>
    protected static str getTaxRegistrationNumberFromTaxPeriod(TaxPeriod _taxPeriod)
    {
        return MultipleTaxIdReportingHelper::getTaxRegistrationNumberFromTaxPeriod(_taxPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getISOCodeFromCountryRegionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Country ISO Code from Country Region ID.
    /// </summary>
    /// <param name="_reportCountryRegionId">
    /// The Country Regon ID.
    /// </param>
    /// <returns>
    /// Returns ISO Code.
    /// </returns>
    protected static LogisticsAddressCountryRegionISOCode getISOCodeFromCountryRegionCode(LogisticsAddressCountryRegionId _reportCountryRegionId)
    {
        DirPartyPostalAddressView dirPartyPostalAddressView;

        select firstonly dirPartyPostalAddressView
            where dirPartyPostalAddressView.CountryRegionId == _reportCountryRegionId;

        return dirPartyPostalAddressView.ISOCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionIDFromTaxRegNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Country Region ID from Tax Registration Number.
    /// </summary>
    /// <param name="_taxRegistrationNumber">
    /// The Tax Registration Number.
    /// </param>
    /// <returns>
    /// Returns Country Region ID.
    /// </returns>
    protected static LogisticsAddressCountryRegionId getCountryRegionIDFromTaxRegNumber(TaxRegistrationNumber _taxRegistrationNumber)
    {
        return MultipleTaxIdReportingHelper::getCountryRegionIDFromTaxRegNumber(_taxRegistrationNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares for data contract.
    /// </summary>
    /// <param name = "_args">Current args.</param>
    /// <remarks>
    /// Has an if-else case to distinguish entry points (TaxReportVoucher form and menu items in Tax menu)
    /// </remarks>
    protected void prePromptModifyContract(Args _args)
    {
        Common common;
        TransDate dsFromDate;
        TransDate dsToDate;
        TaxPeriod dsTaxPeriod;
        Counter recordCounter = 0;
        TaxReportVoucher taxReportVoucher;
        ERReportFormatMappingId reportFormatMappingId;
        Query query;

        VATDeclaraitonContract_W contract = this.getDataContractObject() as VATDeclaraitonContract_W;

        if (_args && _args.dataset() == tableNum(TaxReportVoucher))
        {
            taxReportVoucher = _args.record();
            LogisticsAddressCountryRegionId reportCountryRegionId = VATDeclarationController_W::
                getCountryRegionIDFromTaxRegNumber(VATDeclarationController_W::getTaxRegistrationNumberFromVoucher(taxReportVoucher));

            query = new Query();
            QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxReportVoucher));           

            if (taxReportVoucher)
            {
                FormDataSource fds = taxReportVoucher.dataSource();
                TaxRepVersion recordTaxRepVersion;

                for (common = (fds && fds.getFirst(true)) ? fds.getFirst(true) : taxReportVoucher; common; common = (fds ? fds.getNext() : null))
                {
                    taxReportVoucher = common;

                    if (recordCounter != 0)
                    {
                        if (taxReportVoucher.TaxPeriod != dsTaxPeriod ||
                            taxReportVoucher.FromDate != dsFromDate ||
                            taxReportVoucher.ToDate != dsToDate)
                        {
                            throw error("@GLS114634");
                        }
                    }

                    qbds.addRange(fieldNum(TaxReportVoucher, RecId)).value(queryValue(taxReportVoucher.RecId));
                    dsTaxPeriod = taxReportVoucher.TaxPeriod;
                    dsFromDate = taxReportVoucher.FromDate;
                    dsToDate = taxReportVoucher.ToDate;
                    recordTaxRepVersion = TaxReportVoucher.TaxRepVersion;
                    recordCounter++;
                }

                reportFormatMappingId = EUSalesListReportingParameter::findByCountryRegionIdAndReport(
                    reportCountryRegionId, ReportingParameterReportCallerName::VATDeclaration).ReportERFormatMappingId;
                contract.parmFormatMapping(reportFormatMappingId);

                contract.parmTaxRepVersion(recordTaxRepVersion);
                contract.parmTaxReportVoucherRecId(taxReportVoucher.RecId);
                contract.parmFromDate(taxReportVoucher.FromDate);
                contract.parmToDate(taxReportVoucher.ToDate);
                contract.parmYear(int2str(year(taxReportVoucher.FromDate)));
                contract.parmTaxPeriod(taxReportVoucher.TaxPeriod);
                contract.parmISOCodeFromTaxRegistration(isoCodeFromTaxRegistration);

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
                {
                    contract.parmTaxReportPeriodCode(TaxReportPeriod::findByPeriodFromDateAndEndDate(taxReportVoucher.TaxPeriod, taxReportVoucher.FromDate, taxReportVoucher.ToDate).TaxReportPeriodCode_NO);
                    contract.parmTaxRepVersion((recordCounter > 1)? TaxRepVersion::Correct: recordTaxRepVersion);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
                {
                    contract.parmTaxRepVersion((recordCounter > 1)? TaxRepVersion::Correct: recordTaxRepVersion);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    int monthDiff = mthOfYr(taxReportVoucher.ToDate) - mthOfYr(taxReportVoucher.FromDate);
                    switch (monthDiff)
                    {
                        case 0:
                            contract.parmMonth(int2str(mthOfYr(taxReportVoucher.FromDate)));
                            break;

                        case 2:
                            contract.parmQuarterly(true);

                            Quarter quarter = new DictEnum(enumNum(Quarter))
                                .index2Value(date2Qtr(taxReportVoucher.FromDate));

                            contract.parmQuarter(quarter);
                            break;

                        default:
                            break;
                    }
                }
                else
                {
                    contract.parmMonth(int2str(mthOfYr(taxReportVoucher.FromDate)));
                }

                contract.parmQuery(query);
            }
        }
        else
        {
            TaxReportPeriod taxReportPeriod;
            taxPeriod= this.parmArgs().parmObject().taxPeriod();
            fromDate = this.parmArgs().parmObject().fromDate();
            taxReportPeriod  = TaxReportPeriod::find(taxPeriod, fromDate);
            taxRepVersion = this.parmArgs().parmObject().taxRepVersion();
            toDate = taxReportPeriod.ToDate;

            LogisticsAddressCountryRegionId reportCountryRegionId = VATDeclarationController_W::
                getCountryRegionIDFromTaxRegNumber(VATDeclarationController_W::getTaxRegistrationNumberFromTaxPeriod(taxPeriod));

            reportFormatMappingId = EUSalesListReportingParameter::findByCountryRegionIdAndReport(
                reportCountryRegionId, ReportingParameterReportCallerName::VATDeclaration).ReportERFormatMappingId;

            contract.parmFromDate(fromDate);
            contract.parmTaxPeriod(taxPeriod);
            contract.parmTaxRepVersion(taxRepVersion);
            contract.parmToDate(toDate);
            contract.parmFormatMapping(reportFormatMappingId);
            contract.parmISOCodeFromTaxRegistration(isoCodeFromTaxRegistration);
            
            TaxReport taxReport = this.parmArgs().parmObject() as TaxReport;
            TaxReportAdjustTrans taxReportAdjustmentTrans = this.parmArgs().parmObject() as TaxReportAdjustTrans;

            contract.parmUpdateNow(
                taxReport ? taxReport.update() :
                    (taxReportAdjustmentTrans ? taxReportAdjustmentTrans.update() : false));

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmISOCodeFromTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// The ISO Code got from Tax Registration
    /// </summary>
    /// <param name = "_isoCodeFromTaxRegistration">ISO Code to save.</param>
    /// <returns>The ISO Code.</returns>
    public LogisticsAddressCountryRegionISOCode parmISOCodeFromTaxRegistration(
        LogisticsAddressCountryRegionISOCode _isoCodeFromTaxRegistration = ISOCodeFromTaxRegistration)
    {
        isoCodeFromTaxRegistration = _isoCodeFromTaxRegistration;
        return isoCodeFromTaxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromSysLastValue</Name>
				<Source><![CDATA[
    protected void loadFromSysLastValue()
    {
        if (loadFromSysLastValue)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>