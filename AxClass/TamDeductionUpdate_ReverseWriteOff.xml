<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate_ReverseWriteOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_ReverseWriteOff</c> class manages teh update of deductions for
/// the reverse write-off action.
/// </summary>
class TamDeductionUpdate_ReverseWriteOff extends TAMDeductionUpdate
{
    TAMDeduction deduction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TAMDeduction _deduction)
    {
        super(_deduction);
        deduction.data(_deduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::ReverseWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        #OCCRetryCount
        TAMDeductionUpdateHistory   deductionUpdateHistory;
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalCheckPost      ledgerJournalCheckPost;
        RecordSortedList            listLedgerJournalTrans;
        TAMPromotionParameters      tamPromotionParameters;

        this.initLedgerJournalTable(ledgerJournalTable);

        // Store LedgerJournalTrans in a list.  Purpose is to initialize outside TTS
        // and insert all records at once inside TTS
        listLedgerJournalTrans = new RecordSortedList(tableNum(LedgerJournalTrans));
        listLedgerJournalTrans.sortOrder(fieldNum(LedgerJournalTrans, LineNum));

        // Initialize LedgerJournalTrans and add to list
        // Reverse write-off so amount is negative
        this.initLedgerJournalTrans(ledgerJournalTrans,
                                    deduction,
                                    - deduction.WriteOffAmountCur);

        listLedgerJournalTrans.ins(ledgerJournalTrans);

        try
        {
            ttsbegin;

            // Record that write-off was reversed
            select forupdate deductionUpdateHistory
                where deductionUpdateHistory.tamDeductionID == deduction.tamDeductionID
                    && deductionUpdateHistory.tamDeductionUpdateType == TAMDeductionUpdateType::WriteOff
                    && deductionUpdateHistory.Reversed == NoYes::No;

            deductionUpdateHistory.Reversed = NoYes::Yes;
            deductionUpdateHistory.update();

            ledgerJournalTable = this.insertJournalAndLines(ledgerJournalTable, listLedgerJournalTrans);

            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
            ledgerJournalCheckPost.parmBeQuiet(true);

            tamPromotionParameters = TAMPromotionParameters::find();

            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            this.updateDeductionsAfterPost(ledgerJournalTable.JournalNum);
            this.insertDeductionUpdateHistory(listLedgerJournalTrans);

            ttscommit;
            this.parmUpdateOccurred(true);
        }

        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionsAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionsAfterPost(LedgerJournalId _ledgerJournalId)
    {
        TAMDeduction deductionLocal;

        ttsbegin;

        select forupdate deductionLocal
            where deductionLocal.tamDeductionID == deduction.tamDeductionID;

        this.updateDeductionAfterPost(deductionLocal, _ledgerJournalId);

        if (deductionLocal.validateWrite())
        {
            deductionLocal.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionAfterPost(TAMDeduction _deductionLocal, LedgerJournalId _ledgerJournalId)
    {
        // Erase previous write-off data
        _deductionLocal.tamDeductionWriteOffReason = '';
        _deductionLocal.WriteOffJournalID = '';
        _deductionLocal.DeductWriteOffLedgerDimension = 0;

        // Add write-off amount back to deduction and set status to open
        _deductionLocal.RemainAmountCur = _deductionLocal.WriteOffAmountCur;
        _deductionLocal.WriteOffAmountCur = 0;
        _deductionLocal.tamDeductionStatus = TAMDeductionStatus::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
        ret = true;

        // Status must be closed
        if (deduction.tamDeductionStatus != TAMDeductionStatus::Closed)
        {
            ret = checkFailed(strFmt("@MCR27647",
                                     deduction.tamDeductionID,
                                     deduction.tamDeductionStatus,
                                     TAMDeductionStatus::Closed));
        }

        // Must be write-off amount specified
        if (ret
            && ! deduction.WriteOffAmountCur)
        {
            ret = checkFailed(strFmt("@MCR27648",
                                     deduction.tamDeductionID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>TAMDeductionUpdate_ReverseWriteOff</c> object.
    /// </summary>
    /// <param name="_deduction">
    /// The deduction record used to initalize the new object.
    /// </param>
    /// <returns>
    /// An initialized <c>TAMDeductionUpdate_ReverseWriteOff</c> object.
    /// </returns>
    public static TAMDeductionUpdate_ReverseWriteOff construct(TAMDeduction _deduction)
    {
        TAMDeductionUpdate_ReverseWriteOff tamDeductionUpdate_ReverseWriteOff;

        tamDeductionUpdate_ReverseWriteOff = new TAMDeductionUpdate_ReverseWriteOff(_deduction);

        return tamDeductionUpdate_ReverseWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TAMDeduction                        deduction;
        TAMDeductionUpdate_ReverseWriteOff  tamDeductionUpdate_ReverseWriteOff;
        FormObjectSet                       formObjectSet;

        if (_args.dataset() != tableNum(TAMDeduction))
        {
            throw error(strFmt("@MCR27651",
                               classId2Name(classIdGet(tamDeductionUpdate_ReverseWriteOff)),
                                            tablePName(TAMDeduction)));
        }

        deduction = _args.record();

        tamDeductionUpdate_ReverseWriteOff = TAMDeductionUpdate_ReverseWriteOff::construct(deduction);
        tamDeductionUpdate_ReverseWriteOff.run();

        if (FormDataUtil::isFormDataSource(deduction))
        {
            formObjectSet = FormDataUtil::getFormDataSource(deduction);
            formObjectSet.reread();
            formObjectSet.refresh();
            formObjectSet.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>