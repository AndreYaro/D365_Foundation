<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInitDepreciationProfile_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>AssetInitDepreciationProfile_PL</c> contains logic to calculate Polish depreciation amounts forecast.
/// </summary>
internal class AssetInitDepreciationProfile_PL extends AssetInitDepreciationProfile
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates depreciation amounts forecast.
    /// </summary>
    /// <returns>Temporary table buffer that contains the depreciation amounts.</returns>
    internal TmpDateSum calcDepreciationProfile()
    {
        TmpDateSum tmpDateSum;
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;
        AssetTableMethod assetTableMethodPrimaryReportingCurrency;
        AssetTableMethod assetTableMethodSecondaryReportingCurrency;
        AssetAmount depreciationAcc;
        AssetAmountReportingCurrency depreciationAccReportingCurrency;
        AssetAmount depreciationNotCost;
        AssetAmountReportingCurrency depreciationNotCostReportingCurrency;
        AssetAmount saleScrapProfitAmount;
        AssetAmountReportingCurrency saleScrapProfitAmountReportingCurrency;
        AssetTransDate transDate;
        AssetTransDate lastDateSaleScrapSum;
        boolean checkForSaleScrapTrans;
        boolean leaveNetBookValueReached;
        boolean leaveNetBookValueReachedReportingCurrency;
        AssetBookTable assetBookTable = AssetBookTable::find(book.BookId);
        AmountMST netBookValueRest = assetBookTable.NetBookValueRest;

        tmpDateSum.ttsbegin();

        boolean hasSameAccountingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
        boolean executeReportingCurrencyLogic;

        if (!hasSameAccountingAndReportingCurrency)
        {
            executeReportingCurrencyLogic = !calculateOnlyDepreciation && Ledger::reportingCurrency() != '';
        }

        if (book.depreciationAltProfile())
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax(),'',true);
            assetTableMethodSecondary = AssetTableMethod::construct(book, dateMax(),'',true,true);
            assetTableMethodSecondary.parmUseFactor_PL(true);

            if (executeReportingCurrencyLogic)
            {
                assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax(),'',true);
                assetTableMethodSecondaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax(),'',true,true);
                assetTableMethodSecondaryReportingCurrency.parmUseFactor_PL(true);
            }
        }
        else
        {
            assetTableMethodPrimary = AssetTableMethod::construct(book, dateMax());
            
            if (executeReportingCurrencyLogic)
            {
                assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(book, dateMax());
            }
        }

        AssetTableInterval assetTableInterval = AssetTableInterval::construct(book.depreciationProfile());

        tmpDateSum.TmpNumerals01 = 0;

        if (executeReportingCurrencyLogic || hasSameAccountingAndReportingCurrency)
        {
            tmpDateSum.TmpNumeralsReportingCurrency01 = 0;
        }

        tmpDateSum.TransDate = assetTableMethodPrimary.oneTimeDepreciation_PL() ?
            endmth(max(book.DepreciationStartDate, book.LastDepreciationDate + 1)) - 1 :
            assetTableInterval.endPeriod(max(book.DepreciationStartDate - 1, book.LastDepreciationDate) + 1) - 1;

        if (book.AcquisitionDate <= tmpDateSum.TransDate && isBookAcquired)
        {
            depreciationAcc = -(AssetTrans::amountMSTPerDateTransTypes(
                book.AssetId,
                book.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj,
                AssetTransType::PostOffAccDepreciation_PL,
                AssetTransType::DepreciationNotCost_PL, AssetTransType::AccumulatedDepreciation_PL],
                dateNull(),
                tmpDateSum.TransDate));

            // The posted amount need to reflect partial sales/scrps transactions thare posted untill the last period.
            saleScrapProfitAmount = AssetTrans::getSalesScrapValue(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);

            if (executeReportingCurrencyLogic)
            {
                depreciationAccReportingCurrency = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                    book.AssetId,
                    book.BookId,
                    [AssetTransType::Depreciation, AssetTransType::DepreciationAdj,
                    AssetTransType::PostOffAccDepreciation_PL,
                    AssetTransType::DepreciationNotCost_PL, AssetTransType::AccumulatedDepreciation_PL],
                    dateNull(),
                    tmpDateSum.TransDate));
                
                if (saleScrapProfitAmount)
                {
                    saleScrapProfitAmountReportingCurrency = AssetTrans::getSalesScrapValueReportingCurrency(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);
                }
            }
        }
        else
        {
            depreciationAcc = book.DeprPrevPeriods_PL;
            if (executeReportingCurrencyLogic)
            {
                depreciationAccReportingCurrency = this.getAmountInReportingCurrency(book.DeprPrevPeriods_PL);
            }
        }

        AssetAmount amountToDepreciate = this.amountToDepreciate(tmpDateSum.TransDate, saleScrapProfitAmount);

        if (!amountToDepreciate)
        {
            tmpDateSum.ttsabort();
            tmpDateSum.clear();
            return tmpDateSum;
        }
        tmpDateSum.TmpNumerals02 = amountToDepreciate;

        if (executeReportingCurrencyLogic)
        {
            tmpDateSum.TmpNumeralsReportingCurrency02 = this.amountToDepreciateInReportingCurrency(tmpDateSum.TransDate, saleScrapProfitAmountReportingCurrency);
        }
        else if (hasSameAccountingAndReportingCurrency)
        {
            tmpDateSum.TmpNumeralsReportingCurrency02 = amountToDepreciate;
        }

        tmpDateSum.DepreciationNotCost_PL = book.DeprPrevPeriodsNonCost_PL;
        
        if (executeReportingCurrencyLogic)
        {
            tmpDateSum.DepreciationNotCostReportingCurrency_PL = this.getAmountInReportingCurrency(book.DeprPrevPeriodsNonCost_PL);
        }

        tmpDateSum.insert();

        // Verify if there are any sales/scrap transactions posted in periods ahead of the current one.
        // If there are transactions, the transactions need to update the Posted amount in the period in
        // which they are posted.
        lastDateSaleScrapSum = tmpDateSum.TransDate;
        if (AssetTrans::existSaleScrapTrans(book.AssetId, book.BookId, lastDateSaleScrapSum))
        {
            checkForSaleScrapTrans = true;
        }

        if (book.Status == AssetStatus::NoAcquisition || book.Status == AssetStatus::Open)
        {
            AssetAmount depreciation;
            AssetAmountReportingCurrency depreciationReportingCurrency;

            if (!book.depreciationAltProfile())
            {
                while (!cancellationToken.IsCancellationRequested
                    && transDate <= maxPlanDate
                    && assetTableMethodPrimary.next())
                {
                    depreciation = assetTableMethodPrimary.calc();

                    if (depreciation)
                    {
                        depreciationNotCost = assetTableMethodPrimary.periodAmountNotCost_PL();
                        transDate = assetTableMethodPrimary.oneTimeDepreciation_PL() ?
                            endmth(max(book.DepreciationStartDate, book.LastDepreciationDate + 1)) :
                            assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                        // Ensure depreciation does not go over the "leave net book value" setting
                        if (netBookValueRest)
                        {
                            AssetAmount remainingDepreciableNetBookValue = tmpDateSum.TmpNumerals02 - depreciationAcc - netBookValueRest;
                            if (depreciation > remainingDepreciableNetBookValue)
                            {
                                depreciation = remainingDepreciableNetBookValue;
                                leaveNetBookValueReached = true;
                            }
                        }

                        if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next())
                        {
                            depreciationReportingCurrency = assetTableMethodPrimaryReportingCurrency.calc();
                            depreciationNotCostReportingCurrency = assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();

                            if (!leaveNetBookValueReachedReportingCurrency &&
                                (leaveNetBookValueReached || assetTableMethodPrimary.parmIsEndOfAccountingDepreciation()))
                            {
                                while (transDate <= maxPlanDate &&
                                    assetTableMethodPrimaryReportingCurrency.next())
                                {
                                    depreciationReportingCurrency += assetTableMethodPrimaryReportingCurrency.calc();
                                    depreciationNotCostReportingCurrency += assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                                }
                            }

                            if (depreciationReportingCurrency)
                            {
                                AssetAmountReportingCurrency remainingDepreciableNetBookValueReportingCurrency = tmpDateSum.TmpNumeralsReportingCurrency02 - depreciationAccReportingCurrency - assetBookTable.NetBookValueRestReportingCurrency;
                                if (depreciationReportingCurrency > remainingDepreciableNetBookValueReportingCurrency)
                                {
                                    depreciationReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                    leaveNetBookValueReachedReportingCurrency = true;
                                }
                            }
                        }
                        else
                        {
                            depreciationReportingCurrency = 0;
                        }

                        if (tmpDateSum.TransDate != transDate)
                        {
                            if (tmpDateSum.TransDate)
                            {
                                tmpDateSum.Total = depreciationAcc;
                                tmpDateSum.TmpNumerals02 -= depreciationAcc;

                                if (executeReportingCurrencyLogic)
                                {
                                    tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                                    tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                                }
                                else if (hasSameAccountingAndReportingCurrency)
                                {
                                    tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                                    tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                                }

                                // If the sales/scrap transaction are posted in a given period, update Posted Amount.
                                if (checkForSaleScrapTrans
                                    && assetTableInterval.endPeriod(lastDateSaleScrapSum) != assetTableInterval.endPeriod(tmpDateSum.TransDate))
                                {
                                    var periodSaleScrapProfitAmount = AssetTrans::getSalesScrapValue(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);
                                    tmpDateSum.TmpNumerals02 -= periodSaleScrapProfitAmount;
                                    saleScrapProfitAmount += periodSaleScrapProfitAmount;

                                    if (executeReportingCurrencyLogic && periodSaleScrapProfitAmount)
                                    {
                                        var periodSaleScrapProfitAmountReportingCurrency = AssetTrans::getSalesScrapValueReportingCurrency(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);
                                        tmpDateSum.TmpNumeralsReportingCurrency02 -= periodSaleScrapProfitAmountReportingCurrency;
                                        saleScrapProfitAmountReportingCurrency += periodSaleScrapProfitAmountReportingCurrency;
                                    }
                                }
                                tmpDateSum.write();

                                lastDateSaleScrapSum = tmpDateSum.TransDate;
                            }

                            tmpDateSum.clear();
                            tmpDateSum.TransDate = transDate;
                            tmpDateSum.TmpNumerals02 = this.amountToDepreciate(tmpDateSum.TransDate, saleScrapProfitAmount);

                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = this.amountToDepreciateInReportingCurrency(tmpDateSum.TransDate, saleScrapProfitAmountReportingCurrency);
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }
                        }

                        depreciationAcc += depreciation;

                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals01 += depreciation;
                        tmpDateSum.DepreciationNotCost_PL += depreciationNotCost;

                        if (executeReportingCurrencyLogic)
                        {
                            depreciationAccReportingCurrency += depreciationReportingCurrency;
                            tmpDateSum.TmpNumeralsReportingCurrency01 += depreciationReportingCurrency;
                            tmpDateSum.DepreciationNotCostReportingCurrency_PL += depreciationNotCostReportingCurrency;
                        }
                        else if (hasSameAccountingAndReportingCurrency)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency01 = tmpDateSum.TmpNumerals01;
                        }

                        if (leaveNetBookValueReached)
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                AssetAmount currentYearDepreciation;
                AssetAmountReportingCurrency currentYearDepreciationReportingCurrency;
                var amountToDepreciateByMaxDate = AssetTrans::amountToDepriciate(book.AssetId, maxDate(), book.BookId);
                boolean isPrimaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationProfile().Method);
                boolean isSecondaryMethodReducingBalance = AssetDepreciationProfile::isReducingBalanceDepreciationMethod(book.depreciationAltProfile().Method);
    
                while (!cancellationToken.IsCancellationRequested
                    && transDate <= maxPlanDate
                    && assetTableMethodPrimary.next() && assetTableMethodSecondary.next()
                    && ((abs(tmpDateSum.TmpNumerals02 - depreciationAcc) ||
                        (amountToDepreciateByMaxDate - AssetTrans::amountToDepriciate(book.AssetId, prevMth(tmpDateSum.TransDate), book.BookId) > 0))))
                {
                    AssetAmount depreciationPrimary = assetTableMethodPrimary.calc();
                    AssetAmount depreciationSecondary = assetTableMethodSecondary.calc();

                    if (depreciationPrimary || depreciationSecondary)
                    {
                        // Ensure depreciation does not go over the "leave net book value" setting
                        if (netBookValueRest)
                        {
                            AssetAmount remainingDepreciableNetBookValue = tmpDateSum.TmpNumerals02 - depreciationAcc - netBookValueRest;
                            if (depreciationPrimary > remainingDepreciableNetBookValue)
                            {
                                depreciationPrimary = remainingDepreciableNetBookValue;
                                leaveNetBookValueReached = true;
                            }
                            if (depreciationSecondary > remainingDepreciableNetBookValue)
                            {
                                depreciationSecondary = remainingDepreciableNetBookValue;
                                leaveNetBookValueReached = true;
                            }
                        }

                        if (abs(depreciationPrimary) > abs(depreciationSecondary))
                        {
                            if (isPrimaryMethodReducingBalance)
                            {
                                currentYearDepreciation += depreciationPrimary - depreciationSecondary;

                                if (assetTableMethodPrimary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodPrimary.depDate()))
                                {
                                    assetTableMethodSecondary.addPrevDepAmountExternal(currentYearDepreciation);
                                    currentYearDepreciation = 0;
                                }
                            }
                            else
                            {
                                assetTableMethodSecondary.addPrevDepAmountExternal(depreciationPrimary - depreciationSecondary);
                            }
                            assetTableMethodSecondary.addPrevDepAmountCost_PL(assetTableMethodPrimary.periodAmountCost_PL() - assetTableMethodSecondary.periodAmountCost_PL());
                            depreciation = depreciationPrimary;
                            depreciationNotCost = assetTableMethodPrimary.periodAmountNotCost_PL();
                        }
                        else
                        {
                            if (isSecondaryMethodReducingBalance)
                            {
                                currentYearDepreciation += depreciationSecondary - depreciationPrimary;

                                if (assetTableMethodSecondary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodSecondary.depDate()))
                                {
                                    assetTableMethodPrimary.addPrevDepAmountExternal(currentYearDepreciation);
                                    currentYearDepreciation = 0;
                                }
                            }
                            else
                            {
                                assetTableMethodPrimary.addPrevDepAmountExternal(depreciationSecondary - depreciationPrimary);
                            }
                            assetTableMethodPrimary.addPrevDepAmountCost_PL(assetTableMethodSecondary.periodAmountCost_PL() - assetTableMethodPrimary.periodAmountCost_PL());
                            depreciation = depreciationSecondary;
                            depreciationNotCost = assetTableMethodSecondary.periodAmountNotCost_PL();
                        }

                        AssetAmountReportingCurrency depreciationPrimaryReportingCurrency;
                        AssetAmountReportingCurrency depreciationSecondaryReportingCurrency;

                        if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                        {
                            depreciationPrimaryReportingCurrency = assetTableMethodPrimaryReportingCurrency.calc();
                            depreciationSecondaryReportingCurrency = assetTableMethodSecondaryReportingCurrency.calc();

                            if (!leaveNetBookValueReachedReportingCurrency
                                && (leaveNetBookValueReached
                                || (assetTableMethodPrimary.parmIsEndOfAccountingDepreciation() || assetTableMethodSecondary.parmIsEndOfAccountingDepreciation())))
                            {
                                while (transDate <= maxPlanDate &&
                                   assetTableMethodPrimaryReportingCurrency.next() &&
                                   assetTableMethodSecondaryReportingCurrency.next())
                                {
                                    depreciationPrimaryReportingCurrency += assetTableMethodPrimaryReportingCurrency.calc();
                                    depreciationSecondaryReportingCurrency += assetTableMethodSecondaryReportingCurrency.calc();
                                }
                            }

                            if (depreciationPrimaryReportingCurrency || depreciationSecondaryReportingCurrency)
                            {
                                AssetAmountReportingCurrency remainingDepreciableNetBookValueReportingCurrency = tmpDateSum.TmpNumeralsReportingCurrency02 - depreciationAccReportingCurrency - assetBookTable.NetBookValueRestReportingCurrency;
                                if (depreciationPrimaryReportingCurrency > remainingDepreciableNetBookValueReportingCurrency)
                                {
                                    depreciationPrimaryReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                    leaveNetBookValueReachedReportingCurrency = true;
                                }

                                if (depreciationSecondaryReportingCurrency > remainingDepreciableNetBookValueReportingCurrency)
                                {
                                    depreciationSecondaryReportingCurrency = remainingDepreciableNetBookValueReportingCurrency;
                                    leaveNetBookValueReachedReportingCurrency = true;
                                }
                            }

                            if (abs(depreciationPrimaryReportingCurrency) > abs(depreciationSecondaryReportingCurrency))
                            {
                                if (isPrimaryMethodReducingBalance)
                                {
                                    currentYearDepreciationReportingCurrency += depreciationPrimaryReportingCurrency - depreciationSecondaryReportingCurrency;

                                    if (assetTableMethodPrimary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodPrimary.depDate()))
                                    {
                                        assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(currentYearDepreciationReportingCurrency);
                                        currentYearDepreciationReportingCurrency = 0;
                                    }
                                }
                                else
                                {
                                    assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(depreciationPrimaryReportingCurrency - depreciationSecondaryReportingCurrency);
                                }

                                assetTableMethodSecondaryReportingCurrency.addPrevDepAmountCost_PL(assetTableMethodPrimaryReportingCurrency.periodAmountCost_PL() - assetTableMethodSecondaryReportingCurrency.periodAmountCost_PL());
                                depreciationReportingCurrency = depreciationPrimaryReportingCurrency;
                                depreciationNotCostReportingCurrency = assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                            }
                            else
                            {
                                if (isSecondaryMethodReducingBalance)
                                {
                                    currentYearDepreciationReportingCurrency += depreciationSecondaryReportingCurrency - depreciationPrimaryReportingCurrency;

                                    if (assetTableMethodSecondary.depDate() == assetTableInterval.findLastDayOfYear(assetTableMethodSecondary.depDate()))
                                    {
                                        assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(currentYearDepreciationReportingCurrency);
                                        currentYearDepreciationReportingCurrency = 0;
                                    }
                                }
                                else
                                {
                                    assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(depreciationSecondaryReportingCurrency - depreciationPrimaryReportingCurrency);
                                }
                                assetTableMethodPrimaryReportingCurrency.addPrevDepAmountCost_PL(assetTableMethodSecondaryReportingCurrency.periodAmountCost_PL() - assetTableMethodPrimaryReportingCurrency.periodAmountCost_PL());
                                depreciationReportingCurrency = depreciationSecondaryReportingCurrency;
                                depreciationNotCostReportingCurrency = assetTableMethodSecondaryReportingCurrency.periodAmountNotCost_PL();
                            }
                        }
                        else
                        {
                            depreciationReportingCurrency = 0;
                        }

                        transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                        if (tmpDateSum.TransDate != transDate)
                        {
                            if (tmpDateSum.TransDate)
                            {
                                tmpDateSum.Total = depreciationAcc;
                                tmpDateSum.TmpNumerals02 -= depreciationAcc;

                                if (executeReportingCurrencyLogic)
                                {
                                    tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                                    tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                                }
                                else if (hasSameAccountingAndReportingCurrency)
                                {
                                    tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                                    tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                                }

                                // If the sales/scrap transaction are posted in a given period,
                                // update Posted Amount.
                                if (checkForSaleScrapTrans
                                    && assetTableInterval.endPeriod(lastDateSaleScrapSum) !=
                                    assetTableInterval.endPeriod(tmpDateSum.TransDate))
                                {
                                    var periodSaleScrapProfitAmount = AssetTrans::getSalesScrapValue(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);
                                    tmpDateSum.TmpNumerals02 -= periodSaleScrapProfitAmount;
                                    saleScrapProfitAmount += periodSaleScrapProfitAmount;

                                    if (executeReportingCurrencyLogic && periodSaleScrapProfitAmount)
                                    {
                                        var periodSaleScrapProfitAmountReportingCurrency = AssetTrans::getSalesScrapValueReportingCurrency(book.AssetId, book.BookId, lastDateSaleScrapSum, tmpDateSum.TransDate);
                                        tmpDateSum.TmpNumeralsReportingCurrency02 -= periodSaleScrapProfitAmountReportingCurrency;
                                        saleScrapProfitAmountReportingCurrency += periodSaleScrapProfitAmountReportingCurrency;
                                    }
                                }

                                tmpDateSum.write();

                                lastDateSaleScrapSum = tmpDateSum.TransDate;
                            }

                            tmpDateSum.clear();
                            tmpDateSum.TransDate = transDate;
                            tmpDateSum.TmpNumerals02 = this.amountToDepreciate(tmpDateSum.TransDate, saleScrapProfitAmount);

                            if (executeReportingCurrencyLogic)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = this.amountToDepreciateInReportingCurrency(tmpDateSum.TransDate, saleScrapProfitAmountReportingCurrency);
                            }
                            else if (hasSameAccountingAndReportingCurrency)
                            {
                                tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                            }
                        }
                        if (tmpDateSum.TmpNumerals01 && tmpDateSum.TmpNumerals01 < depreciation)
                        {
                            depreciation = tmpDateSum.TmpNumerals01;

                            if (executeReportingCurrencyLogic)
                            {
                                depreciationReportingCurrency = tmpDateSum.TmpNumeralsReportingCurrency01;
                            }
                        }
                        if (depreciation > tmpDateSum.TmpNumerals02 - depreciationAcc)
                        {
                            depreciation = tmpDateSum.TmpNumerals02 - depreciationAcc;

                            if (executeReportingCurrencyLogic)
                            {
                                depreciationReportingCurrency =  tmpDateSum.TmpNumeralsReportingCurrency02 - depreciationAccReportingCurrency;
                            }
                        }

                        depreciationAcc += depreciation;

                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals01 += depreciation;
                        tmpDateSum.TmpNumerals03 += depreciationPrimary;
                        tmpDateSum.TmpNumerals04 += depreciationSecondary;

                        tmpDateSum.DepreciationNotCost_PL += depreciationNotCost;

                        if (executeReportingCurrencyLogic)
                        {
                            depreciationAccReportingCurrency += depreciationReportingCurrency;
                            tmpDateSum.TmpNumeralsReportingCurrency01 += depreciationReportingCurrency;
                            tmpDateSum.TmpNumeralsReportingCurrency03 += depreciationPrimaryReportingCurrency;
                            tmpDateSum.TmpNumeralsReportingCurrency04 += depreciationSecondaryReportingCurrency;
                        }
                        else if (hasSameAccountingAndReportingCurrency)
                        {
                            tmpDateSum.TmpNumeralsReportingCurrency01 = tmpDateSum.TmpNumerals01;
                            tmpDateSum.TmpNumeralsReportingCurrency03 = tmpDateSum.TmpNumerals03;
                            tmpDateSum.TmpNumeralsReportingCurrency04 = tmpDateSum.TmpNumerals04;
                        }

                        if (leaveNetBookValueReached)
                        {
                            break;
                        }
                    }
                }
            }

            if (tmpDateSum.TransDate && depreciation)
            {
                tmpDateSum.Total = depreciationAcc;
                tmpDateSum.TmpNumerals02 -= depreciationAcc;

                if (executeReportingCurrencyLogic)
                {
                    tmpDateSum.TotalReportingCurrency = depreciationAccReportingCurrency;
                    tmpDateSum.TmpNumeralsReportingCurrency02 -= depreciationAccReportingCurrency;
                }
                else if (hasSameAccountingAndReportingCurrency)
                {
                    tmpDateSum.TotalReportingCurrency = tmpDateSum.Total;
                    tmpDateSum.TmpNumeralsReportingCurrency02 = tmpDateSum.TmpNumerals02;
                }

                tmpDateSum.write();
            }
        }

        if (cancellationToken.IsCancellationRequested)
        {
            tmpDateSum.ttsabort();
        }
        else
        {
            tmpDateSum.ttscommit();
        }
    
        return tmpDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciate</Name>
				<Source><![CDATA[
    private AssetAmount amountToDepreciate(AssetTransDate _transDate, AssetAmount _saleScrapProfitAmount)
    {
        AssetAmount ret;
        if (book.AcquisitionDate <= _transDate && isBookAcquired)
        {
            ret = AssetTrans::amountToDepriciate(book.AssetId, _transDate, book.BookId)
                + AssetTrans::amountMSTPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::ExtraordinaryDepreciation)
                - _saleScrapProfitAmount;
        }
        else
        {
            ret = book.AcquisitionPrice;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciateInReportingCurrency</Name>
				<Source><![CDATA[
    private AssetAmount amountToDepreciateInReportingCurrency(AssetTransDate _transDate, AssetAmount _saleScrapProfitAmount)
    {
        AssetAmount ret;
        if (book.AcquisitionDate <= _transDate && isBookAcquired)
        {
            ret = AssetTrans::amountToDepriciateInReportingCurrency(book.AssetId, _transDate, book.BookId)
                + AssetTrans::amountReportingCurrencyPerDateTranstype(book.AssetId, _transDate, book.BookId, AssetTransType::ExtraordinaryDepreciation)
                - _saleScrapProfitAmount;
        }
        else
        {
            ret = book.AcquisitionPriceReportingCurrency;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInReportingCurrency</Name>
				<Source><![CDATA[
    internal AssetAmount getAmountInReportingCurrency(AssetAmount _amount)
    {
        TransDate transdate = book.AcquisitionDate ? book.AcquisitionDate : DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), book.AcquisitionDate);
        return currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(), _amount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>