<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostOnAcc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostOnAcc extends ProjForecastPost
{
    ProjForecastOnAcc     projForecastOnAcc;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditOnAcc</Name>
				<Source><![CDATA[
    boolean checkCreditOnAcc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterAccruedOnAcc</Name>
				<Source><![CDATA[
    protected boolean checkEnterAccruedOnAcc()
    {
        if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice &&
            projGroup.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        boolean ret;

        if (projGroup.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            ret = false;
        }
        else
        {
            if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice)
            {
                ret = super();
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the account for posting the credit side of transactions for on-account accounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger account for posting credit amounts for the on-account account.
    /// </returns>
    LedgerDimensionDefaultAccount creditAccountOnAcc(ProjFundingSourceRefId _fundingSourceId)
    {
        if (projGroup.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            return projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
        }

        return projTrans.accountOnAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger account that is used for posting revenue amounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that will be used by this
    ///    transaction.
    /// </param>
    /// <returns>
    ///    The ledger account that is used for posting revenue amounts.
    /// </returns>
    protected LedgerDimensionDefaultAccount creditAccountTurnover(ProjFundingSourceRefId _fundingSourceId)
    {
        return projTrans.accountOnAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
        // Method to get the payment date as per the crieteria
    public TransDate getPaymentDate(LedgerPostingType _postingType)
    {
        TransDate paymentDate;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjOnAccount,
                 LedgerPostingType::ProjWIPInvoicedOnAccount,
                 LedgerPostingType::ProjAccruedRevenueOnAccount:
                paymentDate = projForecastOnAcc.SalesPaymDate;
                break;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentStatus</Name>
				<Source><![CDATA[
        // Method to get the payment status as per the crieteria
    public ProjPaymentStatus getPaymentStatus(LedgerPostingType _postingType)
    {
        ProjPaymentStatus paymentStatus;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjOnAccount,
                 LedgerPostingType::ProjWIPInvoicedOnAccount,
                 LedgerPostingType::ProjAccruedRevenueOnAccount:
                paymentStatus = ProjPaymentStatus::Paid;
                break;
        }

        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelId</Name>
				<Source><![CDATA[
    ForecastModelId modelId()
    {
        return projTrans.forecastModelId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projForecastOnAcc   = _buffer;
        projTrans           = ProjTrans::newProjForecastOnAcc(projForecastOnAcc);

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeTurnover</Name>
				<Source><![CDATA[
    protected LedgerPostingType postingTypeTurnover()
    {
        if (projGroup.InvoicePosting == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            return LedgerPostingType::ProjWIPInvoicedOnAccount;
        }

        return LedgerPostingType::ProjOnAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>