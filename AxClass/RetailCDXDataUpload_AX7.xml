<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataUpload_AX7</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX data upload for AX 7.
/// </summary>
class RetailCDXDataUpload_AX7 extends RetailCDXDataUpload implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (RetailCDXUploadSessionTracker::hasAny(this.paramCorrelationId()))
        {
            this.processUploadSessionsFromTracker();
        }
        else
        {
            this.processUploadSessions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUploadSessionsFromTracker</Name>
				<Source><![CDATA[
    private void processUploadSessionsFromTracker()
    {
        RecId   previousUploadSessionRecId = 0;
        boolean errorOccurred = false;
        int     infoLogLine;

        RetailCDXUploadSessionTracker uploadSessionTracker;
        UserConnection uploadSessionTrackerConnection = new UserConnection();

        do
        {
            try
            {
                // Using a transaction scope from the separate connection for two reasons:
                // 1- so that any exception thrown while processing the upload session using RetailCDXJobUploadTargetContext class
                //    doesnt skip failure loggers in catch blocks in RetailCDXJobUploadTargetContext class.
                // 2- separate transaction scope also allow us not to revert the applied upload session data if the tracker fails while deleting the session from the tracking table.
                 uploadSessionTrackerConnection.ttsbegin();
                
                uploadSessionTracker.setConnection(uploadSessionTrackerConnection);
                uploadSessionTracker.readPast(true);

                select pessimisticlock firstonly UploadSessionRecId, DataStore
                from uploadSessionTracker
                order by uploadSessionTracker.UploadSessionRecId
                where uploadSessionTracker.TrackingId == guid2Str(this.paramCorrelationId()) &&
                      uploadSessionTracker.UploadSessionRecId > previousUploadSessionRecId;

                if (uploadSessionTracker)
                {
                    try
                    {
                        previousUploadSessionRecId = uploadSessionTracker.UploadSessionRecId;
                        infoLogLine = Global::infologLine();

                        str datastoreName = RetailConnDatabaseProfile::findByRecId(uploadSessionTracker.DataStore).Name;
                        
                        RetailCDXJobUploadTargetContext context = new RetailCDXJobUploadTargetContext(scheduleRecId, uploadSessionTracker.UploadSessionRecId, datastoreName, this.paramCorrelationId());
                        context.execute();
                    }
                    catch
                    {
                        errorOccurred = true;
                    }
                    
                    uploadSessionTracker.delete();
                }

                uploadSessionTrackerConnection.ttscommit();
            }
            catch
            {
                errorOccurred = true;
            }

        }
        while (uploadSessionTracker);

        uploadSessionTrackerConnection.finalize();

        if (errorOccurred)
        {
            str errMsg = RetailUtilities::getInfologMessages(infoLogLine);
            // fail this batch task
            throw error(strFmt("@REX4161331", errMsg));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUploadSessions</Name>
				<Source><![CDATA[
    private void processUploadSessions()
    {
        RetailCDXUploadSession    uploadSessionTable;
        RetailCDXDataGroup        dataGroup;
        RetailConnDatabaseProfile dataStore;

        int     infoLogLine;
        boolean errorOccurred = false;

        while select RecId, DataStore
            from uploadSessionTable
                order by uploadSessionTable.createdDateTime
                where (this.jobId == '' || uploadSessionTable.JobId == this.jobId) &&
                     (uploadSessionTable.Status == RetailCDXUploadSessionStatus::Uploaded ||
                      uploadSessionTable.Status == RetailCDXUploadSessionStatus::ApplyFailed)
            join DataGroup, Name from dataStore
                where uploadSessionTable.DataStore == dataStore.RecId
            exists join dataGroup
                where dataStore.DataGroup == dataGroup.RecId &&
                      (this.dataGroupRecId == 0 || dataGroup.RecId == this.dataGroupRecId)
        {
            try
            {
                infoLogLine = Global::infologLine();

                RetailCDXJobUploadTargetContext context = new RetailCDXJobUploadTargetContext(scheduleRecId, uploadSessionTable.RecId, dataStore.Name, this.paramCorrelationId());

                context.execute();
            }
            catch
            {
                errorOccurred = true;
            }
        }

        if (errorOccurred)
        {
            str errMsg = RetailUtilities::getInfologMessages(infoLogLine);
            // fail this batch task
            throw error(strFmt("@REX4161331", errMsg));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailCDXDataUpload_AX7</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailCDXDataUpload_AX7</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>