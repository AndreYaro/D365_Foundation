<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableType_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentTableType_Invoice</c> class is used for validation and to apply default values
/// to invoices.
/// </summary>
public class VendDocumentTableType_Invoice extends VendDocumentTableType
{
    VendInvoiceInfoTable vendInvoiceInfoTable;
    PurchAgreementHeader purchAgreementHeader;
    private boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

    #VendInvoiceFaults
    // <GEERU>
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areExchangeValuesSet</Name>
				<Source><![CDATA[
    private boolean areExchangeValuesSet()
    {
        return vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, EuroTriangulation), vendDocumentTableMap.TableId))
            && vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, ExchRate), vendDocumentTableMap.TableId))
            && vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, ExchrateSecondary), vendDocumentTableMap.TableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentTableMap</Name>
				<Source><![CDATA[
    public VendDocumentTableMap vendDocumentTableMap(VendDocumentTableMap _vendDocumentTableMap = vendDocumentTableMap)
    {
        if (!prmisdefault(_vendDocumentTableMap))
        {
            vendInvoiceInfoTable = _vendDocumentTableMap;
        }

        return super(_vendDocumentTableMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>PaymDueDateLimit_ES</c> record that fits the criteria.
    /// </summary>
    /// <param name="_paymTerm">
    /// The <c>PaymTerm</c> record containing the selection criteria.
    /// </param>
    /// <param name="_transDate">
    /// The date to base the limit off of.
    /// </param>
    /// <returns>
    /// The <c>PaymDueDateLimit_ES</c> record that fits the criteria.
    /// </returns>
    protected PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        PaymDueDateLimit_ES dueDateLimit;
        PaymDueDateLimit_ES itemDueDateLimit;
        PaymDueDateLimit_ES dueDateLimitMin;
        InventTable inventTable;
        InventItemGroup inventItemGroup;
        InventItemGroupItem inventItemGroupItem;
        PurchTable purchTableLocal;
        PurchLine purchLine;

        dueDateLimit = PaymDueDateLimit_ES::getCurrentValues(_paymTerm.DueDateLimitGroupId_ES);
        dueDateLimitMin.data(dueDateLimit);

        purchTableLocal = this.purchTable();

        while select * from itemDueDateLimit
            exists join inventItemGroup
                where itemDueDateLimit.GroupId == inventItemGroup.DueDateLimitGroupId_ES
            exists join inventItemGroupItem
                where inventItemGroup.ItemGroupId == inventItemGroupItem.ItemGroupId
            exists join inventTable
                where inventItemGroupItem.ItemDataAreaId == inventTable.dataAreaId
                    && inventItemGroupItem.ItemId == inventTable.ItemId
            exists join purchLine
                where inventTable.ItemId == purchLine.ItemId
                    && purchLine.PurchId == purchTableLocal.PurchId
        {
            if (!dueDateLimitMin ||
                (itemDueDateLimit &&
                itemDueDateLimit.getLastValidDate(_transDate) < dueDateLimitMin.getLastValidDate(_transDate)))
            {
                dueDateLimitMin.data(itemDueDateLimit);
            }
        }

        return dueDateLimitMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnallocatedMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there are no unallocated miscellaneous charges associated with the invoice header record.
    /// </summary>
    /// <returns>
    /// true if there are not unallocated miscellaneous charges associated with the invoice header record or the commitments feature is disabled; otherwise, false.
    /// </returns>
    public boolean checkUnallocatedMiscCharge()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && vendInvoiceInfoTable.existUnallocatedMiscCharge())
        {
            warning("@SPS2201");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    protected void defaultAccountingDistributionTemplate()
    {
        RefRecId accountingDistributionTemplate;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, AccountingDistributionTemplate)))
        {
            accountingDistributionTemplate = this.determineDefaultDistributionTemplate();
            vendInvoiceInfoTable.AccountingDistributionTemplate = accountingDistributionTemplate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultedVendInvoiceAdditionalFields</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute("This method has been deprecated in favor of utilizing the chain of command pattern to extend the defaultAdditionalFields() functionality.", true, 30\6\2019)]
    delegate void defaultedVendInvoiceAdditionalFields(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields that are specific to invoice to the default values.
    /// </summary>
    protected void defaultAdditionalFields()
    {
        #EECountryRegionCodes
        VendTable localVendTable;

        super();

        this.defaultVendInvoiceSaveStatus();
        this.defaultMarkupGroup();
        this.defaultInventSiteId();
        this.defaultInventLocationId();
        this.defaultDefaultDimension();
        this.defaultAccountingDistributionTemplate();
        this.defaultAddressRefRecId();
        this.defaultAddressRefTableId();
        this.defaultLogisticsElectronicAddress();
        this.defaultVendInvoiceGroup();
        this.defaultApproved();
        this.defaultApprover();
        this.defaultVendorRequestedWorkerEmail();
        this.defaultListCode();
        this.defaultPurchAgreementHeader_PSN();
        this.defaultNum();
        this.defaultReceivedDate();

        if (isFinTagConfigurationSetForCurrent && PurchaseOrderFinTagFeature::isEnabled())
        {
            this.defaultFinTag();
        }

        if (vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::Service
            && VendInvoiceAutomationStateManagement::isAutomationInvoice(vendInvoiceInfoTable))
        {
            this.defaultIncludeInAutomatedProcessing();
            this.defaultAutomationStatus();
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.defaultVatOperationCode_RU();
            this.defaultVATChargeSource_RU();
            this.defaultInventProfileId_RU();
            this.defaultInventProfileType_RU();
            this.defaultAgreementHeaderExt_RU();
            this.defaultPurchBookVATPrcPrmsRecId();
            this.defaultProcessVAT();
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            this.defaultDocRegister_LT();
        }

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            this.defaultTransportationDocument();
        }

        if (BrazilParameters::isEnabled())
        {
            this.defaultNum_BR();
            this.defaultTypeOfCTe_BR();

            if (this.purchTable())
            {
                vendDocumentTableMap.VendDocumentTableMap::parmVendFineSetup_BR(this.purchTable().purchTable_BR().VendFineSetup_BR);
                vendDocumentTableMap.VendDocumentTableMap::parmVendInterestSetup_BR(this.purchTable().purchTable_BR().VendInterestSetup_BR);
            }
            else
            {
                localVendTable = vendTable::find(vendDocumentTableMap.InvoiceAccount);

                vendDocumentTableMap.VendDocumentTableMap::parmVendFineSetup_BR(localVendTable.FineCode_BR);
                vendDocumentTableMap.VendDocumentTableMap::parmVendInterestSetup_BR(localVendTable.InterestCode_BR);
            }
        }

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            vendDocumentTableMap.VendDocumentTableMap::parmVatDueDate_W(
                TaxVATDueDateUtility::determineVATDueDateForVendDocumentTableMap(vendDocumentTableMap, this.purchTable()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVATDueDateManually</Name>
				<Source><![CDATA[
    private void calculateVATDueDateManually()
    {
        TaxGroup taxGroup = (vendInvoiceInfoTable.TaxGroup)? vendInvoiceInfoTable.TaxGroup : this.purchTable().TaxGroup;
        TaxGroupHeading taxGroupHeading = TaxGroupHeading::find(taxGroup);

        if (TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(taxGroupHeading))
        {
            VatDueDate_W vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(taxGroupHeading, vendDocumentTableMap.TransDate);
            vendDocumentTableMap.VendDocumentTableMap::parmVatDueDate_W(vatDueDate);
        }
        else if (TaxVATDueDateUtility::isVATDueDateBasedOnDocumentDate(taxGroupHeading))
        {
            VatDueDate_W vatDueDate = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(taxGroupHeading, vendDocumentTableMap.DocumentDate);
            vendDocumentTableMap.VendDocumentTableMap::parmVatDueDate_W(vatDueDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddressRefRecId</Name>
				<Source><![CDATA[
    protected void defaultAddressRefRecId()
    {
        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, AddressRefRecId)))
        {
            this.defaultDeliveryPostalAddress();

            vendInvoiceInfoTable.AddressRefRecId = this.determineDefaultAddressRefRecId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddressRefTableId</Name>
				<Source><![CDATA[
    protected void defaultAddressRefTableId()
    {
        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, AddressRefTableId)))
        {
            this.defaultDeliveryPostalAddress();

            vendInvoiceInfoTable.AddressRefTableId = this.determineDefaultAddressRefTableId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AgreementHeaderExt_RU</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultAgreementHeaderExt_RU()
    {
        AgreementHeaderExtRecId_RU agreementHeaderExtRecId = this.determineDefaultAgreementHeaderExt_RU();
        vendDocumentTableMap.VendDocumentTableMap::parmAgreementHeaderExt_RU(agreementHeaderExtRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultApproved</Name>
				<Source><![CDATA[
    protected void defaultApproved()
    {
        Approved approved;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, Approved)))
        {
            approved = this.determineDefaultApproved();
            vendInvoiceInfoTable.Approved = approved;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultApprover</Name>
				<Source><![CDATA[
    protected void defaultApprover()
    {
        HcmApprover approver;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, Approver)))
        {
            approver = this.determineDefaultApprover();
            vendInvoiceInfoTable.Approver = approver;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultDefaultDimension()
    {
        DimensionDefault defaultDimension;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, DefaultDimension)))
        {
            defaultDimension = this.determineDefaultDefaultDimension();
            vendInvoiceInfoTable.DefaultDimension = defaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryName</Name>
				<Source><![CDATA[
    protected void defaultDeliveryName()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, DeliveryName), vendDocumentTableMap.TableId)))
        {
            this.defaultDeliveryPostalAddress();

            vendDocumentTableMap.DeliveryName = this.determineDefaultDeliveryName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected void defaultDeliveryPostalAddress()
    {
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, DeliveryPostalAddress), vendDocumentTableMap.TableId)))
        {
            this.defaultInventSiteId();
            this.defaultInventLocationId();

            vendDocumentTableMap.DeliveryPostalAddress = this.determineDefaultDeliveryPostalAddress();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDistributionTemplate</Name>
				<Source><![CDATA[
    protected void defaultDistributionTemplate()
    {
        RefRecId distributionTemplate;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, AccountingDistributionTemplate)))
        {
            distributionTemplate = this.determineDefaultDistributionTemplate();
            vendInvoiceInfoTable.AccountingDistributionTemplate = distributionTemplate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFinTag</Name>
				<Source><![CDATA[
    internal void defaultFinTag()
    {
        FinTagRecId finTag;
        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, FinTag), vendDocumentTableMap.TableId)))
        {
            finTag = this.determineDefaultFinTag();
            vendDocumentTableMap.FinTag = finTag;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationId</Name>
				<Source><![CDATA[
    protected void defaultInventLocationId()
    {
        PurchInventLocationId inventLocationId;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, InventLocationId)))
        {
            this.defaultInventSiteId();

            inventLocationId = this.determineDefaultInventLocationId();
            vendInvoiceInfoTable.InventLocationId = inventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventProfileId_RU</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultInventProfileId_RU()
    {
        InventProfileId_RU inventProfileId = this.determineDefaultInventProfileId_RU();
        vendDocumentTableMap.VendDocumentTableMap::parmInventProfileId_RU(inventProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventProfileType_RU</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultInventProfileType_RU()
    {
        InventProfileType_RU inventProfileType = this.determineDefaultInventProfileType_RU();
        vendDocumentTableMap.VendDocumentTableMap::parmInventProfileType_RU(inventProfileType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventSiteId</Name>
				<Source><![CDATA[
    protected void defaultInventSiteId()
    {
        InventSiteId inventSiteId;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, InventSiteId)))
        {
            inventSiteId = this.determineDefaultInventSiteId();
            vendInvoiceInfoTable.InventSiteId = inventSiteId;

            vendInvoiceInfoTable.InventStorageDimMap::modifiedInventSiteFromParent(vendInvoiceInfoTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultListCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ListCode</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultListCode()
    {
        ListCode listCode;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, ListCode)))
        {
            listCode = this.determineDefaultListCode();
            vendInvoiceInfoTable.ListCode = listCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default value for the Logistics electronic address.
    /// </summary>
    protected void defaultLogisticsElectronicAddress()
    {
        RefRecId logisticsElectronicAddress;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, LogisticsElectronicAddress)))
        {
            logisticsElectronicAddress = this.determineDefaultLogisticsElectronicAddr();
            vendInvoiceInfoTable.LogisticsElectronicAddress = logisticsElectronicAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarkupGroup</Name>
				<Source><![CDATA[
    protected void defaultMarkupGroup()
    {
        VendMarkupGroupId markupGroup;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, MarkupGroup)))
        {
            markupGroup = this.determineDefaultMarkupGroup();
            vendInvoiceInfoTable.MarkupGroup = markupGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines default invoice number
    /// </summary>
    protected void defaultNum_BR()
    {
        Num num = this.determineDefaultNum_BR();

        if (num != '')
        {
            vendDocumentTableMap.VendDocumentTableMap::parmNum(num);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ProcessVAT</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultProcessVAT()
    {
        FacturePostProcessVAT processVAT = this.determineDefaultProcessVAT();
        vendDocumentTableMap.VendDocumentTableMap::parmProcessVAT(processVAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchBookVATPrcPrmsRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PurchBookVATProcessParametersRecId</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultPurchBookVATPrcPrmsRecId()
    {
        PurchBookVATProcessParametersRecId_RU purchBookVATProcessParametersRecId = this.determineDefaultPurchBookVATPrcPrmsRecId();
        vendDocumentTableMap.VendDocumentTableMap::parmPurchBookVATProcessParametersRecId(purchBookVATProcessParametersRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReceivedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ReceivedDate</c> field for the invoice to the default value.
    /// </summary>
    private void defaultReceivedDate()
    {
        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            if (vendInvoiceInfoTable.DocumentDate != dateNull() && vendInvoiceInfoTable.ReceivedDate == dateNull())
            {
                vendInvoiceInfoTable.ReceivedDate = vendInvoiceInfoTable.DocumentDate;
            }
            else if (vendInvoiceInfoTable.ReceivedDate == dateNull())
            {
                vendInvoiceInfoTable.ReceivedDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIncludeInAutomatedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>IncludeInAutomatedProcessing</c> field for the invoice to the default value.
    /// </summary>
    private void defaultIncludeInAutomatedProcessing()
    {
        if (vendInvoiceInfoTable.RecId == 0)
        {
            vendInvoiceInfoTable.IncludeInAutomatedProcessing = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAutomationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AutomationStatus</c> field for the invoice to the default value.
    /// </summary>
    private void defaultAutomationStatus()
    {
        if (vendInvoiceInfoTable.RecId == 0)
        {
            vendInvoiceInfoTable.AutomationStatus = VendInvoiceAutomationStatus::Included;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransportationDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the transportation data information from the <c>PurchTable</c> record to the <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    protected void defaultTransportationDocument()
    {
        if (!vendInvoiceInfoTable.isFieldSet(fieldnum(VendInvoiceInfoTable, TransportationDocument)))
        {
            TransportationDocument::copy(this.purchTable(), vendInvoiceInfoTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTypeOfCTe_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the type of CTe with default value
    /// </summary>
    protected void defaultTypeOfCTe_BR()
    {
        vendDocumentTableMap.VendDocumentTableMap::parmTypeOfCTe_BR(TypeOfCTe_BR::Blank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVATChargeSource_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VATChargeSource_RU</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultVATChargeSource_RU()
    {
        VATChargeSource_RU chargeSource = this.determineDefaultVATChargeSource_RU();
        vendDocumentTableMap.VendDocumentTableMap::parmVATChargeSource_RU(chargeSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVatOperationCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VatOperationCode_RU</c> field for the invoice to the default
    /// value.
    /// </summary>
    protected void defaultVatOperationCode_RU()
    {
        VatOperationCode_RU vatOperationCode = this.determineDefaultVatOperationCode_RU();
        vendDocumentTableMap.VendDocumentTableMap::parmVatOperationCode_RU(vatOperationCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VendInvoiceGroup</c> field for the <c>vendDocumentTableMap</c> map to the default
    /// value.
    /// </summary>
    protected void defaultVendInvoiceGroup()
    {
        VendInvoiceGrouping vendInvoiceGroup;

        if (VendInvoiceInfoTable.VendInvoiceGroup == "")
        {
            vendInvoiceGroup = this.determineDefaultVendInvoiceGroup();
            vendDocumentTableMap.VendInvoiceGroup = vendInvoiceGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    protected void defaultVendInvoiceSaveStatus()
    {
        VendInvoiceSaveStatus vendInvoiceSaveStatus;

        if (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldNum(VendDocumentTableMap, VendInvoiceSaveStatus), vendDocumentTableMap.TableId)))
        {
            vendInvoiceSaveStatus = this.physicalStrategy().determineDefaultVendInvoiceSaveStatus();
            vendDocumentTableMap.VendInvoiceSaveStatus = vendInvoiceSaveStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendorRequestedWorkerEmail</Name>
				<Source><![CDATA[
    protected void defaultVendorRequestedWorkerEmail()
    {
        Email email;

        if (!vendInvoiceInfoTable.isFieldSet(fieldNum(VendInvoiceInfoTable, VendorRequestedWorkerEmail)))
        {
            this.defaultApprover();
            email = this.determineDfltVendorRequestedWorkerEmail();
            vendInvoiceInfoTable.VendorRequestedWorkerEmail = email;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchAgreementHeader_PSN</Name>
				<Source><![CDATA[
    protected void defaultPurchAgreementHeader_PSN()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            &&  this.purchTable().MatchingAgreement
            && (!vendDocumentTableMap.isFieldSet(this.getfieldNum(fieldnum(VendDocumentTableMap, PurchAgreementHeader_PSN), vendDocumentTableMap.TableId))))
        {
            PurchAgreementHeaderRefRecId purchAgreementHeaderRecId = this.purchTable().MatchingAgreement;
            vendInvoiceInfoTable.PurchAgreementHeader_PSN = purchAgreementHeaderRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>AgreementHeaderExt_RU</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>AgreementHeaderExt_RU</c> field for the current record.
    /// </returns>
    protected AgreementHeaderExtRecId_RU determineDefaultAgreementHeaderExt_RU()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return 0;
        }
        else
        {
            return this.purchTable().purchTable_RU().AgreementHeaderExt_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultApproved</Name>
				<Source><![CDATA[
    protected Approved determineDefaultApproved()
    {
        Approved approved = NoYes::Yes;

        return approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultApprover</Name>
				<Source><![CDATA[
    protected HcmApprover determineDefaultApprover()
    {
        HcmApprover approver = HcmWorker::userId2Worker(curUserId());

        return approver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscCode</Name>
				<Source><![CDATA[
    protected VendCashDiscCode determineDefaultCashDiscCode()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().agreementHeaderDefault().CashDiscountCode;
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().CashDisc;
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            return ''; //No discount in case of Advance
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscDate</Name>
				<Source><![CDATA[
    protected CashDiscdate determineDefaultCashDiscDate()
    {
        CashDiscdate cashDiscdate;

        if (vendDocumentTableMap.isNonPO())
        {
            if (vendDocumentTableMap.DocumentDate == dateNull())
            {
                cashDiscdate = CashDisc::cashDiscDate(vendDocumentTableMap.CashDiscCode, vendDocumentTableMap.TransDate);
            }
            else
            {
                cashDiscdate = CashDisc::cashDiscDate(vendDocumentTableMap.CashDiscCode, vendDocumentTableMap.DocumentDate);
            }
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            return dateNull();
        }
        else
        {
            return super();
        }

        return cashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCashDiscPercent</Name>
				<Source><![CDATA[
    protected DiscPct determineDefaultCashDiscPercent()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            if (vendDocumentTableMap.CashDiscCode != '')
            {
                return CashDisc::find(vendDocumentTableMap.CashDiscCode).Percent;
            }
            else
            {
                return 0.0;
            }
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            return 0.0;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCountyOrigDest</Name>
				<Source><![CDATA[
    protected AddressCountyOrigDest determineDefaultCountyOrigDest()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return IntrastatParameters::find().CountyOrigDest;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().Currency;
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().Currency;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultDefaultDimension()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return vendInvoiceInfoTable.copyDimension(this.vendTable().DefaultDimension);
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            if (this.purchTable().DefaultDimension > 0)
            {
                return vendInvoiceInfoTable.copyDimension(this.purchTable().DefaultDimension);
            }
            else
            {
                return vendInvoiceInfoTable.copyDimension(this.vendTable().DefaultDimension);
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryLocation</Name>
				<Source><![CDATA[
    protected LogisticsLocationRecId determineDefaultDeliveryLocation()
    {
        LogisticsLocationRecId deliveryLocation;
        InventLocation inventLocation;
        InventSite inventSite;
        CompanyInfo companyInfo;
        VendTable locationVendTable;

        Debug::assert(vendDocumentTableMap.isNonPO());

        // Default the address from the inventory location, if set
        if (vendInvoiceInfoTable.InventLocationId)
        {
            inventLocation = InventLocation::find(vendInvoiceInfoTable.InventLocationId);
            deliveryLocation = InventLocation::getLocationFromRole(inventLocation.RecId, LogisticsLocationRoleType::Delivery);

            if (deliveryLocation)
            {
                vendInvoiceInfoTable.setLocation(deliveryLocation, inventLocation);

                return deliveryLocation;
            }

            if (inventLocation.VendAccount)
            {
                locationVendTable = VendTable::find(inventLocation.VendAccount);
                deliveryLocation = LogisticsPostalAddress::getLocation(DirParty::primaryPostalAddress(locationVendTable.Party).RecId);

                if (deliveryLocation)
                {
                    vendInvoiceInfoTable.setLocation(deliveryLocation, locationVendTable);
                    vendInvoiceInfoTable.DeliveryName = locationVendTable.name();

                    return deliveryLocation;
                }
            }
        }

        // Default the address from the inventory site, if set
        if (vendInvoiceInfoTable.InventSiteId)
        {
            inventSite = InventSite::find(vendInvoiceInfoTable.InventSiteId);
            deliveryLocation = InventSite::getLocationFromRole(inventSite.RecId, LogisticsLocationRoleType::Delivery);

            if (deliveryLocation)
            {
                vendInvoiceInfoTable.setLocation(deliveryLocation, inventSite);

                return deliveryLocation;
            }
        }

        // Default the address from the company
        companyInfo = CompanyInfo::find();

        deliveryLocation = LogisticsLocationEntity::findLocation(companyInfo, LogisticsLocationRoleType::Delivery).parmLocationRecId();

        if (deliveryLocation)
        {
            vendInvoiceInfoTable.setLocation(deliveryLocation, companyInfo);

            return deliveryLocation;
        }

        deliveryLocation = LogisticsLocationDefaultAppUtil::warehouseSiteDefaultLocation(
                                LogisticsLocationRoleType::Delivery,
                                vendInvoiceInfoTable.InventLocationId,
                                vendInvoiceInfoTable.InventSiteId);

        if (deliveryLocation)
        {
            vendInvoiceInfoTable.setLocation(deliveryLocation);

            return deliveryLocation;
        }

        // Warehouse, site, and company didn't have location, use simple company address
        deliveryLocation = LogisticsLocationDefault::findSimpleDefault(companyInfo, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

        if (deliveryLocation)
        {
            vendInvoiceInfoTable.setLocation(deliveryLocation, companyInfo);

            return deliveryLocation;
        }

        return deliveryLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAddressRefRecId</Name>
				<Source><![CDATA[
    protected AddressRefRecId determineDefaultAddressRefRecId()
    {
        if (vendInvoiceInfoTable.isNonPO())
        {
            return vendInvoiceInfoTable.AddressRefRecId;
        }
        else
        {
            return this.purchTable().AddressRefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAddressRefTableId</Name>
				<Source><![CDATA[
    protected AddressRefTableId determineDefaultAddressRefTableId()
    {
        if (vendInvoiceInfoTable.isNonPO())
        {
            return vendInvoiceInfoTable.AddressRefTableId;
        }
        else
        {
            return this.purchTable().AddressRefTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryName</Name>
				<Source><![CDATA[
    protected VendName determineDefaultDeliveryName()
    {
        VendName deliveryName;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && vendDocumentTableMap.isDirectInvoice())
        {
            deliveryName = this.purchAgreementHeader().agreementHeaderDefault().DeliveryName;
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            //This field should already be set at this point.
            deliveryName = vendDocumentTableMap.DeliveryName;
        }
        else
        {
            deliveryName = super();
        }

        return deliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddressRecId determineDefaultDeliveryPostalAddress()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return LogisticsPostalAddress::addressRecIdFromLocationRecId(this.determineDefaultDeliveryLocation());
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDistributionTemplate</Name>
				<Source><![CDATA[
    protected RefRecId determineDefaultDistributionTemplate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocRegister_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>DocRegister_LT</c>.
    /// </summary>
    /// <returns>
    /// Default <c>DocRegister_LT</c>.
    /// </returns>
    protected LtDocRegister determineDefaultDocRegister_LT()
    {
        return this.purchTable().InvoiceAutoNumbering_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determine the default document date for the invoice.
    /// </summary>
    /// <returns>
    ///    The default document date.
    /// </returns>
    /// <remarks>
    ///    This will return the value the user entered, if any, prior to the default row taking place.
    /// </remarks>
    protected DocumentDate determineDefaultDocumentDate()
    {
        return vendDocumentTableMap.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultEnterpriseNumber</Name>
				<Source><![CDATA[
    protected TaxEnterpriseNumber determineDefaultEnterpriseNumber()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendDocumentTableMap.TransDate);
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultEuroTriangulation</Name>
				<Source><![CDATA[
    protected EUROTriangulation determineDefaultEuroTriangulation()
    {
        return conPeek(this.initExchValues(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>ExchRate</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>ExchRate</c> field for the current record.
    /// </returns>
    protected ExchRate determineDefaultExchRate()
    {
        ExchRate exchRate;
        container exchValues;

        // <GEERU>
        if (this.purchTable().FixedExchRate)
        {
            exchRate = this.purchTable().FixedExchRate;
        }
        else
        {
            // </GEERU>
            exchValues = this.initExchValues();
            exchRate = conPeek(exchValues, 2);
            // <GEERU>
        }
        // </GEERU>

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFinTag</Name>
				<Source><![CDATA[
    internal FinTagRecId determineDefaultFinTag()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return vendInvoiceInfoTable.FinTag;
        }
        else
        {
            return this.purchTable().FinTag;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary determineDefaultExchRateSecondary()
    {
        return conPeek(this.initExchValues(), 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate determineDefaultReportingCurrencyFixedExchangeRate()
    {
        ReportingCurrencyExchRate exchRate;

        if (this.purchTable().ReportingCurrencyFixedExchRate != 0.0)
        {
            exchRate = this.purchTable().ReportingCurrencyFixedExchRate;
        }
        else
        {
            exchRate = this.initReportingCurrencyExchangeRate();
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedDueDate</Name>
				<Source><![CDATA[
    protected FixedDueDate determineDefaultFixedDueDate()
    {
        TransDate dueDate = dateNull();
        PaymTerm paymTerm;
        TransDate transDate;
        PaymDueDateLimit_ES dueDateLimit;
        purchTable purchTableForTesting;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            dueDate = this.getDocumentDate();
            dueDate = PaymTerm::find(vendDocumentTableMap.Payment).due(dueDate, this.vendTable().PaymDayId);
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            // Only default the due date if there is a vendor, and if there is not a payment schedule
            if ((vendDocumentTableMap.InvoiceAccount != '') && (vendDocumentTableMap.PaymentSched == ''))
            {
                dueDate = this.getDocumentDate();
                paymTerm = PaymTerm::find(vendDocumentTableMap.Payment);
                dueDate = paymTerm.due(dueDate, this.vendTable().PaymDayId);

                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar))
                    && paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                {
                    dueDate = PaymCalendarSourceVendor::adjustDate(dueDate, paymTerm.VendorUpdateDueDate, this.vendTable(), paymTerm.PaymTermId);
                }
            }
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            dueDate = this.getDocumentDate();
        }
        else
        {
            purchTableForTesting = this.purchTable();
            //if there is a dueDate from the PO, return it.
            if (purchTableForTesting.FixedDueDate)
            {
                dueDate = purchTableForTesting.FixedDueDate;
            }
            else
            {
                // Only default the due date if there is a vendor, and if there is not a payment schedule
                if ((vendDocumentTableMap.InvoiceAccount != '') && (purchTableForTesting.PaymentSched == ''))
                {
                    dueDate = this.getDocumentDate();
                    paymTerm = PaymTerm::find(purchTableForTesting.Payment);
                    dueDate = paymTerm.due(dueDate, purchTableForTesting.paymDayId());

                    if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar))
                        && paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                    {
                        dueDate = PaymCalendarSourcePurchaseOrder::adjustDate(dueDate, paymTerm.VendorUpdateDueDate, purchTableForTesting);
                    }

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                    {
                        if (paymTerm.UseDeliveryDateForDueDate_ES)
                        {
                            // Clean up pre-calculated due date to force the recalculation later because it can depend on the delivery date of possible packing slip
                            dueDate = dateNull();
                        }
                        else
                        {
                            transDate = this.getDocumentDate();
                            dueDateLimit = this.calcDueDateLimit_ES(paymTerm, transDate);
                            dueDate = paymTerm.due(transDate, purchTableForTesting.paymDayId(), false, dueDateLimit);
                        }
                    }
                }
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFixedExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>FixedExchRate</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>FixedExchRate</c> field for the current record.
    /// </returns>
    protected FixedExchRate determineDefaultFixedExchRate()
    {
        if (this.purchTable().FixedExchRate)
        {
            return NoYes::Yes;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInclTax</Name>
				<Source><![CDATA[
    protected InclTax determineDefaultInclTax()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().InclTax;
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            return NoYes::Yes; //in case of Advance Inclusive Tax is always Yes
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventLocationId</Name>
				<Source><![CDATA[
    protected PurchInventLocationId determineDefaultInventLocationId()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().InventLocation;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>InventProfileId_RU</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>InventProfileId_RU</c> field for the current record.
    /// </returns>
    protected InventProfileId_RU determineDefaultInventProfileId_RU()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>InventProfileType_RU</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>InventProfileType_RU</c> field for the current record.
    /// </returns>
    protected InventProfileType_RU determineDefaultInventProfileType_RU()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return InventProfileType_RU::General;
        }

        return InventProfileType_RU::NotSpecified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId determineDefaultInventSiteId()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            if (this.vendTable().InventSiteId)
            {
                return this.vendTable().InventSiteId;
            }

            if (this.vendTable().InventLocation != '')
            {
                return InventLocation::find(this.vendTable().InventLocation).InventSiteId;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultInvoiceAccount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().purchAgreementHeaderDefault().VendorInvoiceAccount;
        }
        else if (vendDocumentTableMap.isNonPO() || vendInvoiceInfoTable.isAdvance())
        {
            return this.vendTable().AccountNum;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultListCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>ListCode</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>ListCode</c> field for the current record.
    /// </returns>
    protected ListCode determineDefaultListCode()
    {
        return EUSalesList::resolveListCodeByCountryState(this.vendTable().postalAddress());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLogisticsElectronicAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the Logistics electronic address.
    /// </summary>
    /// <returns>
    /// The <c>Location</c> field from the <c> LogisticsElectronicsAddress</c> table.
    /// </returns>
    protected RefRecId determineDefaultLogisticsElectronicAddr()
    {
        LogisticsElectronicAddress logisticsElectronicAddress;

        if (vendInvoiceInfoTable.VendorRequestedWorkerEmail != '')
        {
            select Location
                from logisticsElectronicAddress
                    where logisticsElectronicAddress.Locator == vendInvoiceInfoTable.VendorRequestedWorkerEmail;
        }

        return logisticsElectronicAddress.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultMarkupGroup</Name>
				<Source><![CDATA[
    protected VendMarkupGroupId determineDefaultMarkupGroup()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().MarkupGroup;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultNum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines default invoice number
    /// </summary>
    /// <returns>
    /// Default number
    /// </returns>
    /// <remarks>
    /// Taxable vendors or Return invoices gets default number value 'Automatic'
    /// </remarks>
    protected Num determineDefaultNum_BR()
    {
        Num num = vendInvoiceInfoTable.Num;

        if (vendInvoiceInfoTable.IsTheFiscalDocumentIssuer_BR())
        {
            num = "@SYS11318";
        }

        return num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultNumberSequenceGroup</Name>
				<Source><![CDATA[
    protected NumberSequenceGroupId determineDefaultNumberSequenceGroup()
    {
        if (vendDocumentTableMap.isNonPO() || vendInvoiceInfoTable.isAdvance())
        {
            return this.vendTable().NumberSequenceGroup;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultOrderAccount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().VendAccount;
        }
        else if (vendDocumentTableMap.isNonPO() || vendInvoiceInfoTable.isAdvance())
        {
            return this.vendTable().AccountNum;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPayment</Name>
				<Source><![CDATA[
    protected VendPaymTermId determineDefaultPayment()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            if (this.purchAgreementHeader().agreementHeaderDefault().PaymentTerms)
            {
                return this.purchAgreementHeader().agreementHeaderDefault().PaymentTerms;
            }
            else if (VendTable::find(this.purchAgreementHeader().VendAccount).PaymTermId)
            {
                return VendTable::find(this.purchAgreementHeader().VendAccount).PaymTermId;
            }
            else
            {
                return PaymTerm::getDefaultPaymTerm().PaymTermId;
            }
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().PaymTermId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymentSched</Name>
				<Source><![CDATA[
    protected PaymSchedId determineDefaultPaymentSched()
    {
        PaymSchedId paymentSched;
        PaymTerm paymentTerm;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().agreementHeaderDefault().PaymentSchedule;
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            paymentTerm = PaymTerm::find(vendDocumentTableMap.Payment);

            // Do not default payment schedule if cash payment term was defaulted
            if (paymentTerm.CashLedgerDimension != 0)
            {
                return '';
            }

            paymentSched = this.vendTable().PaymSched;
            if (paymentSched == '')
            {
                paymentSched = paymentTerm.PaymSched;
            }

            return paymentSched;
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            return '';
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymId</Name>
				<Source><![CDATA[
    protected PaymId determineDefaultPaymId()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().PaymId;
        }

        return VendTable::find(this.purchTable().InvoiceAccount).PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymMode</Name>
				<Source><![CDATA[
    protected VendPaymMode determineDefaultPaymMode()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().purchAgreementHeaderDefault().MethodOfPayment;
        }
        else if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().PaymMode;
        }

        return this.purchTable().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPaymSpec</Name>
				<Source><![CDATA[
    protected VendPaymSpec determineDefaultPaymSpec()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendDocumentTableMap.isDirectInvoice())
        {
            return this.purchAgreementHeader().purchAgreementHeaderDefault().PaymentSpecification;
        }
        else
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().PaymSpec;
        }

        return this.purchTable().PaymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPort</Name>
				<Source><![CDATA[
    protected IntrastatPortId determineDefaultPort()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return IntrastatParameters::find().PortParm;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPostingProfile</Name>
				<Source><![CDATA[
    protected VendPostingProfile determineDefaultPostingProfile()
    {
        VendPostingProfile advancePostingProfile;

        if (vendDocumentTableMap.isNonPO())
        {
            return VendParameters::find().PostingProfile;
        }
        else if (vendInvoiceInfoTable.isAdvance())
        {
            advancePostingProfile = VendParameters::find().AdvancePostingProfile;

            if (advancePostingProfile != '')
            {
                return advancePostingProfile;
            }
            else
            {
                return VendParameters::find().PostingProfile;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>ProcessVAT</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>ProcessVAT</c> field for the current record.
    /// </returns>
    protected FacturePostProcessVAT determineDefaultProcessVAT()
    {
        PurchBookVATProcessParameters_RU parameters;

        select firstonly parameters
            where parameters.IsDefault == NoYes::Yes &&
                  parameters.ProcessingType == PurchBookProcessingType_RU::Standard;

        if (parameters)
        {
            return parameters.ProcessVAT;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchBookVATPrcPrmsRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>PurchBookVATPrcPrmsRecId</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>PurchBookVATPrcPrmsRecId</c> field for the current record.
    /// </returns>
    protected PurchBookVATProcessParametersRecId_RU determineDefaultPurchBookVATPrcPrmsRecId()
    {
        PurchBookVATProcessParameters_RU parameters;

        select firstonly parameters
            where parameters.IsDefault == NoYes::Yes &&
                  parameters.ProcessingType == PurchBookProcessingType_RU::Standard;

        if (parameters)
        {
            return parameters.RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchId</Name>
				<Source><![CDATA[
    protected PurchId determineDefaultPurchId()
    {
        if (this.isNonPO())
        {
            return '';
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchName</Name>
				<Source><![CDATA[
    protected Name determineDefaultPurchName()
    {
        Name purchName, vatPurchName;

        if (vendDocumentTableMap.isNonPO())
        {
            if (VendParameters::find().VendNameFromVATNum)
            {
                vatPurchName = TaxVATNumTable::name(this.vendTable().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, vendDocumentTableMap.TransDate), this.vendTable().postalAddress().CountryRegionId);
            }

            if (vatPurchName == '')
            {
                purchName = this.vendTable().name();
            }
            else
            {
                purchName = vatPurchName;
            }
        }
        else
        {
            if (this.purchTable().InvoiceAccount != purchTable.OrderAccount)
            {
                purchName = purchTable.vendTable_InvoiceAccount().name();
            }
            else
            {
                purchName = super();
            }
        }

        return purchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the recalculate field.
    /// </summary>
    /// <returns>
    /// The default value of the recalculate field for the current record.
    /// </returns>
    protected NoYes determineDefaultRecalculate()
    {
        return this.physicalStrategy().determineDefaultRecalculate(super());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRemittanceLocation</Name>
				<Source><![CDATA[
    protected RemittanceLocation determineDefaultRemittanceLocation()
    {
        return VendTable::getDefaultRemittanceLocation(this.vendTable().AccountNum, this.vendTable().company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultSettleVoucher</Name>
				<Source><![CDATA[
    protected PurchSettlementType determineDefaultSettleVoucher()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            if (VendParameters::find().AutoSettle == NoYes::Yes)
            {
                return SettlementType::OpenTransact;
            }
            else
            {
                return SettlementType::None;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultStatProcId</Name>
				<Source><![CDATA[
    protected IntrastatProcId determineDefaultStatProcId()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return IntrastatParameters::find().StatProcIdParm;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroup determineDefaultTaxGroup()
    {
        if ((vendDocumentTableMap.isNonPO() || vendInvoiceInfoTable.isAdvance()))
        {
            return this.vendTable().TaxGroup;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAccrueSalesTaxType</Name>
				<Source><![CDATA[
    protected TaxAccrueSalesTaxType determineDefaultAccrueSalesTaxType()
    {
        return this.vendTable().AccrueSalesTaxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultOverrideSalesTax()
    {
        if ((vendDocumentTableMap.isNonPO() || vendInvoiceInfoTable.isAdvance()))
        {
            return this.vendTable().OverrideSalesTax;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransactionCode</Name>
				<Source><![CDATA[
    protected IntrastatTransactionCodeId determineDefaultTransactionCode()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return IntrastatParameters::find().DefaultSalePurchase;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransDate</Name>
				<Source><![CDATA[
    protected TransDate determineDefaultTransDate()
    {
        TransDate transDate = vendDocumentTableMap.TransDate;

        if (TransDate == dateNull())
        {
            transDate = super();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransport</Name>
				<Source><![CDATA[
    protected IntrastatTransport determineDefaultTransport()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            IntrastatTransport transport = DlvMode::find(vendTable.DlvMode).Transport;
            return transport ? transport : IntrastatParameters::find().TransportModeParm;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVATChargeSource_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VATChargeSource_RU</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>VATChargeSource_RU</c> field for the current record.
    /// </returns>
    protected VATChargeSource_RU determineDefaultVATChargeSource_RU()
    {
        return VATChargeSource_RU::VendorFunds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVATNum</Name>
				<Source><![CDATA[
    protected VATNumJournal determineDefaultVATNum()
    {
        if (vendDocumentTableMap.isNonPO() || vendDocumentTableMap.isAdvance())
        {
            this.vendTable().copyPrimaryRegistrationNumberToVATMap(vendDocumentTableMap, vendDocumentTableMap.TransDate);
            return vendDocumentTableMap.VATNum;
        }

        if (VendInvoiceFetchVATNumFromPOV2Flight::instance().isEnabled())
        {
            return this.purchTable().VATNum;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVatOperationCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VatOperationCode_RU</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>VatOperationCode_RU</c> field for the current record.
    /// </returns>
    protected VatOperationCode_RU determineDefaultVatOperationCode_RU()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().VatOperationCode_RU;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendBankAccountId</Name>
				<Source><![CDATA[
    protected VendBankAccountId determineDefaultVendBankAccountId()
    {
        if (vendDocumentTableMap.isNonPO())
        {
            return this.vendTable().BankAccount;
        }

        return this.purchTable().vendTable_InvoiceAccount().BankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VendInvoiceGroup</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>VendInvoiceGroup</c> field for the current record.
    /// </returns>
    /// <remarks>
    /// The default <c>InvoiceGroup</c> value for web services is returned if the current invoice is
    /// created from a Web service; otherwise, the default <c>VendInvoiceGroup</c> value for invoices that
    /// are created internally is returned.
    /// </remarks>
    protected VendInvoiceGrouping determineDefaultVendInvoiceGroup()
    {
        return this.physicalStrategy().determineDefaultVendInvoiceGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VendInvoiceSaveStatus</c> field.
    /// </summary>
    /// <returns>
    /// The default value of the <c>VendInvoiceSaveStatus</c> field for the current record.
    /// </returns>
    protected VendInvoiceSaveStatus determineDefaultVendInvoiceSaveStatus()
    {
        return this.physicalStrategy().determineDefaultVendInvoiceSaveStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDfltVendorRequestedWorkerEmail</Name>
				<Source><![CDATA[
    protected Email determineDfltVendorRequestedWorkerEmail()
    {
        return HcmWorker::find(vendInvoiceInfoTable.Approver).email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    private TransDate getDocumentDate()
    {
        if (vendDocumentTableMap.DocumentDate == dateNull())
        {
            return vendDocumentTableMap.TransDate;
        }

        return vendDocumentTableMap.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExchValues</Name>
				<Source><![CDATA[
    protected container initExchValues()
    {
        container exchValues;

        if (!this.areExchangeValuesSet())
        {
            EUROTriangulation euroTriangulation = Currency::triangulation(vendDocumentTableMap.CurrencyCode, this.updateDate());
            ExchRate exchRate = ExchangeRateHelper::exchRate(vendDocumentTableMap.CurrencyCode, this.updateDate(), Currency::noYes2UnknownNoYes(euroTriangulation));
            ExchrateSecondary exchrateSecondary = ExchangeRateHelper::exchRateSecond(vendDocumentTableMap.CurrencyCode, this.updateDate(), Currency::noYes2UnknownNoYes(euroTriangulation));

            exchValues = [euroTriangulation, exchRate, exchrateSecondary];
        }

        return exchValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    private ExchRate initReportingCurrencyExchangeRate()
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate;

        if (Ledger::isReportingCurrencyDefined())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), vendDocumentTableMap.CurrencyCode);
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            exchangeRateHelper.parmExchangeDate(this.updateDate());

            reportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
        }
        else
        {
            reportingCurrencyExchRate = 0.0;
        }

        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    private boolean isNonPO()
    {
        return (purchTable.RecId == 0 && vendDocumentTableMap.PurchId == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDefaultAdditionalFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method to determine default invoice number
    /// </summary>
    public void postDefaultAdditionalFields_BR()
    {
        this.defaultNum_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets local <c>PurchAgreementHeader</c> buffer and provides access to it.
    /// </summary>
    /// <returns>
    /// local <c>PurchAgreementHeader</c> buffer.
    /// </returns>
    public PurchAgreementHeader purchAgreementHeader()
    {
        if (!purchAgreementHeader && vendDocumentTableMap.PurchAgreementHeader_PSN)
        {
            purchAgreementHeader = PurchAgreementHeader::find(vendDocumentTableMap.PurchAgreementHeader_PSN);
        }

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementHeader_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>AgreementHeaderExt_RU</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateAgreementHeader_RU()
    {
        return vendInvoiceInfoTable.checkAgreement_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    protected boolean validateCurrencyCode()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validateCurrencyCodeForInvoice();
        }

        if (vendInvoiceInfoTable.orig().CurrencyCode != '' && vendInvoiceInfoTable.orig().CurrencyCode != vendInvoiceInfoTable.CurrencyCode)
        {
            if (VendInvoiceInfoLine::existDifferentCurrency(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId, vendInvoiceInfoTable.CurrencyCode))
            {
                isValid = checkFailed("@SYS341260");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentDate</Name>
				<Source><![CDATA[
    protected boolean validateDocumentDate()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validateDocumentDateForInvoice();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnterpriseNumber</Name>
				<Source><![CDATA[
    protected boolean validateEnterpriseNumber()
    {
        return super() && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(vendDocumentTableMap.EnterpriseNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHold</Name>
				<Source><![CDATA[
    protected boolean validateHold()
    {
        if (vendDocumentTableMap.Hold == NoYes::Yes && vendDocumentTableMap.Num == '')
        {
            checkFailed("@SYS108808", #MissingInvoiceNumber);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationId</Name>
				<Source><![CDATA[
    protected boolean validateInventLocationId()
    {
        boolean isValid = super();

        if (vendInvoiceInfoTable.InventSiteId != '' &&
            vendInvoiceInfoTable.InventLocationId != '')
        {
            if (InventLocation::find(vendInvoiceInfoTable.InventLocationId).InventSiteId !=
                         vendInvoiceInfoTable.InventSiteId)
            {
                isValid = checkFailed(strFmt("@SYS104861",
                                  vendInvoiceInfoTable.InventLocationId,
                                  vendInvoiceInfoTable.InventSiteId));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates the value of the <c>InventProfileType_RU</c> field.
    /// </summary>
    /// <returns>
    ///  true if the <c>InventProfileType_RU</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateInventProfileType_RU()
    {
        if (this.isNonPO())
        {
            if (vendDocumentTableMap.VendDocumentTableMap::parmInventProfileType_RU() != InventProfileType_RU::General ||
                vendDocumentTableMap.VendDocumentTableMap::parmInventProfileType_RU() != InventProfileType_RU::NotSpecified)
            {
                return checkFailed(strfmt("@GLS115622", InventProfileType_RU::General));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccount</Name>
				<Source><![CDATA[
    protected boolean validateInvoiceAccount()
    {
        boolean isValid = super();
        VendTable vendTableLoc = VendTable::find(vendDocumentTableMap.InvoiceAccount);
        VendBlockedReleaseDate vendReleaseDate = vendTableLoc.BlockedReleaseDate;
        boolean isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(vendDocumentTableMap.InvoiceAccount);

        if (isValid)
        {
            isValid = this.physicalStrategy().validateInvoiceAccountForInvoice();
        }

        if (VendTable::blocked(vendDocumentTableMap.InvoiceAccount) == CustVendorBlocked::All)
        {
            if (!vendReleaseDate)
            {
                checkFailed(strFmt("@SYS128411", vendDocumentTableMap.InvoiceAccount, vendTableLoc.Blocked));
                isValid = false;
            }
            else if (!isVendReleaseDateExpired)
            {
                checkFailed(strFmt("@SYS128412", vendDocumentTableMap.InvoiceAccount, vendTableLoc.Blocked, DateTimeUtil::date(vendReleaseDate)));
                isValid = false;
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && vendDocumentTableMap.isDirectInvoice()
            && VendTable::blocked(vendDocumentTableMap.InvoiceAccount) == CustVendorBlocked::Invoice)
        {
            checkFailed(strFmt("@SYS128411", vendDocumentTableMap.InvoiceAccount, CustVendorBlocked::Invoice));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceReleaseDate</Name>
				<Source><![CDATA[
    protected boolean validateInvoiceReleaseDate()
    {
        InvoiceReleaseDate invoiceReleaseDate = vendDocumentTableMap.InvoiceReleaseDate;

        if (invoiceReleaseDate != utcDateTimeNull() && DateTimeUtil::addDays(invoiceReleaseDate, 1) < DateTimeUtil::utcNow())
        {
            checkFailed("@SYS114595");

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNum</Name>
				<Source><![CDATA[
    protected boolean validateNum()
    {
        boolean isValid = super();
        Num invoice;

        if (isValid)
        {
            isValid = this.physicalStrategy().validateNumForInvoice();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayment</Name>
				<Source><![CDATA[
    protected boolean validatePayment()
    {
        PaymTermHold paymTermHold;
        boolean isValid = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PurchFrenchRegulatory_PSN)) && PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly paymTermHold
                where paymTermHold.PaymTerm_PSN == vendInvoiceInfoTable.Payment;

            // Payment field is valid only if a hold rule exists for this Term of Payment.
            if (!paymTermHold)
            {
                isValid = checkFailed("@SPS1896");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PaymId</c> field for invoice documents.
    /// </summary>
    /// <returns>true if the <c>PaymId</c> field is valid; otherwise, false.</returns>
    protected boolean validatePaymId()
    {
        boolean ret = true;

        if (VendParameters::find().VendInvoiceRefNumValidation_FI)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00005, funcName());

            ret = CustVendInvoiceRefNum_FI::checkReferenceNumber(vendDocumentTableMap.PaymId);

            if (!ret)
            {
                warning("@SYS97602");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentSched</Name>
				<Source><![CDATA[
    protected boolean validatePaymentSched()
    {
        boolean isValid = super();

        // <GEERU>
        if ((PaymTerm::isCashAccount(vendDocumentTableMap.Payment) ||
             vendDocumentTableMap.VendDocumentTableMap::parmEmplAccount_RU()) &&
             vendDocumentTableMap.PaymentSched)
        // </GEERU>
        {
            checkFailed("@SYS28733");
            isValid = false;
        }

        isValid = isValid && VendPaymentGroupManager::validatePaymentSched(vendDocumentTableMap, true);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>PurchId</c> field of a <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>
    /// true when the value of the <c>PurchId</c> field of a <c>VendInvoiceInfoTable</c> record has passed
    /// all validation checks; otherwise, false.
    /// </returns>
    protected boolean validatePurchId()
    {
        boolean isValid;

        if (this.isNonPO())
        {
            return true;
        }

        isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validatePurchIdForInvoice();
        }

        if (isValid && !(PurchFormletterParmData::allowJournal(vendInvoiceInfoTable.Ordering, this.purchTable())))
        {
            isValid = checkFailed(strFmt("@SYS62423", this.purchTable().PurchaseType, this.purchTable().PurchId));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchAgreementHeader_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PurchAgreementHeader_PSN</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>PurchAgreementHeader_PSN</c> field is valid; otherwise, false.
    /// </returns>
    [Wrappable(false)]
    protected boolean validatePurchAgreementHeader_PSN()
    {
        return this.checkInSilentModePurchAgreementHeader_PSN()
            && this.isAgreementHeaderEffective()
            && this.doesAgreementVendorMatchInvoiceVendor()
            && this.isAgreementHeaderValidForDirectInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAgreementHeaderEffective</Name>
				<Source><![CDATA[
    private boolean isAgreementHeaderEffective()
    {
        boolean isAgreementEffective = this.purchAgreementHeader().AgreementState == AgreementState::Effective;

        if (!isAgreementEffective)
        {
            checkFailed("@AccountsPayable:OnlyEffectivePurchaseAgreementsOnInvoices");
        }

        return isAgreementEffective;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAgreementVendorMatchInvoiceVendor</Name>
				<Source><![CDATA[
    private boolean doesAgreementVendorMatchInvoiceVendor()
    {
        boolean vendorsMatch = this.vendTable().AccountNum == PurchAgreementHeaderDefault::findPurchAgreementHeader(this.purchAgreementHeader().RecId).VendorInvoiceAccount;

        if (!vendorsMatch)
        {
            checkFailed("@AccountsPayable:InvoiceAndAgreementVendorsDoNotMatch");
        }

        return vendorsMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInSilentModePurchAgreementHeader_PSN</Name>
				<Source><![CDATA[
    protected boolean checkInSilentModePurchAgreementHeader_PSN(boolean _runInSilentMode = false)
    {
        CurrencyCode agreementCurrency;
        CurrencyCode invoiceCurrency;
        boolean isValid = true;

        agreementCurrency = this.purchAgreementHeader().Currency;
        invoiceCurrency = vendInvoiceInfoTable.CurrencyCode;

        if (agreementCurrency != strMin() && (agreementCurrency != invoiceCurrency))
        {
            if (_runInSilentMode)
            {
                isValid = false;
            }
            else
            {
                isValid = checkFailed("@AccountsPayable:MatchingPurchaseAgreementCurrencyWithInvoiceCurrency");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAgreementHeaderValidForDirectInvoice</Name>
				<Source><![CDATA[
    private boolean isAgreementHeaderValidForDirectInvoice()
    {
        boolean isAgreementValidForDirectInvoice = AgreementClassification::find(this.purchAgreementHeader().AgreementClassification).DirectInvoiceEnable_PSN;

        if (!isAgreementValidForDirectInvoice)
        {
            checkFailed("@AccountsPayable:OnlyDirectInvoicePurchaseAgreementAllowedError");
        }

        return isAgreementValidForDirectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>RemittanceLocation</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>RemittanceLocation</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateRemittanceLocation()
    {
        return VendPaymentGroupManager::validatePaymentGroup(vendDocumentTableMap, true, fieldNum(VendDocumentTableMap, RemittanceLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    public boolean validateRow()
    {
        boolean isValid = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && isValid)
        {
            this.checkUnallocatedMiscCharge();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            isValid && this.isNonPO() &&
            VendTable::find(vendInvoiceInfoTable.OrderAccount).VATTaxAgent_RU &&
            !vendDocumentTableMap.VendDocumentTableMap::parmVatOperationCode_RU())
        {
            isValid = checkFailed("@GLS112883");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransDate</Name>
				<Source><![CDATA[
    protected boolean validateTransDate()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validateTransDateForInvoice();
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (vendInvoiceInfoTable.vendInvoiceInfoTable_RU().AgreementHeaderExt_RU)
            {
                if (PurchAgreementHeaderExt_RU::purchAgreementHeader(vendInvoiceInfoTable.vendInvoiceInfoTable_RU().AgreementHeaderExt_RU).canReleaseAgreement(vendInvoiceInfoTable.TransDate) != true)
                {
                    isValid = checkFailed(strFmt("@GLS221056", fieldPname(VendInvoiceInfoTable, TransDate)));
                }
            }
        }
        // </GEERU>

        if (isValid)
        {
            isValid = VendDocumentTableType_Invoice::validateBudgetReservation_PSN(vendDocumentTableMap);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVatNum</Name>
				<Source><![CDATA[
    protected boolean validateVatNum()
    {
        FieldId fieldId;
        boolean isValid = super();

        switch (vendDocumentTableMap.TableId)
        {
            case (tableNum(PurchParmTable)):
                fieldId = fieldNum(PurchParmTable, vatNum);
                break;

            case (tableNum(VendInvoiceInfoTable)):
                fieldId = fieldNum(VendInvoiceInfoTable, vatNum);
                break;
        }

        isValid = isValid && TaxVATNumTable::checkVATNum(vendDocumentTableMap.VATNum,
                                                         vendDocumentTableMap,
                                                         fieldId,
                                                         this.vendTable().postalAddress().CountryRegionId);

        isValid = isValid && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(vendDocumentTableMap.EnterpriseNumber,
                                                                                 vendDocumentTableMap.VATNum,
                                                                                 true);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    protected boolean validateVendInvoiceSaveStatus()
    {
        if (vendDocumentTableMap.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending && vendDocumentTableMap.Num == '')
        {
            checkFailed("@SYS108809", #PendingInvoiceNeedsInvoiceNumber);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendPaymentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>VendPaymentGroup</c> object for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>VendPaymentGroup</c> object is valid; otherwise, false.
    /// </returns>
    protected boolean validateVendPaymentGroup()
    {
        boolean isValid = VendPaymentGroupManager::validatePaymentGroup(vendDocumentTableMap, true)
            && VendPaymentGroupManager::validatePaymentGroupNotMarkedInSeparateJournal(vendDocumentTableMap.VendPaymentGroup);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendFineSetup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field num default value.
    /// </summary>
    protected void VendFineSetup_BR()
    {
        Num num = this.determineDefaultNum_BR();
        vendDocumentTableMap.VendDocumentTableMap::parmNum(num);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservation_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>BudgetReservationLine_PSN</c> field of each <c>VendInvoiceInfoLine</c> line record associated
    /// with the specified <c>VendInvoiceInfoTable</c> object.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> object associated with the <c>VendInvoiceInfoLine</c> records to be validated.
    /// </param>
    /// <returns>
    /// true if all validations pass or the budget reservation feature is disabled; otherwise, false.
    /// </returns>
    protected static boolean validateBudgetReservation_PSN(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        boolean isValid = true;

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            BudgetReservationLine_PSN budgetReservationLine;

            while select BudgetReservationHeader_PSN from budgetReservationLine
                group by budgetReservationLine.BudgetReservationHeader_PSN
                exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoTable.TableRefId
                    && vendInvoiceInfoLine.ParmId != ''
                    && vendInvoiceInfoLine.OrigPurchId == ''
                    && vendInvoiceInfoLine.BudgetReservationLine_PSN == budgetReservationLine.RecId
                    && vendInvoiceInfoLine.BudgetReservationLine_PSN != 0
            {
                if (!isValid) 
                {
                    break;
                }

                isValid = BudgetReservation_PSN::validateBudgetReservationToBeRelieved(
                    _vendInvoiceInfoTable.TransDate,
                    budgetReservationLine.BudgetReservationHeader_PSN,
                    BudgetReservationRelievingDocument_PSN::VendorInvoice,
                    "@Budgeting_BudgetReservationPS:VIAccountingDateNotInGBRFiscalYearError",
                    "@Budgeting_BudgetReservationPS:VIAccountingDateNotWithinGBRStartEndDatesError")
                    && isValid;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDocumentNum</Name>
				<Source><![CDATA[
    protected void defaultDocumentNum()
    {
        if (!vendInvoiceInfoTable.DocumentNum)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set field num with intercompany Sales order last invoice number.
    /// </summary>
    private void defaultNum()
    {
        if (!vendInvoiceInfoTable.Num)
        {
            Num num = this.determineDefaultNum();
            vendInvoiceInfoTable.Num = num;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany sales order last invoice number.
    /// </summary>
    /// <returns>
    /// returns the last invoice number of intercompany Sales order.
    /// </returns>
    private Num determineDefaultNum()
    {
        Num num;

        if (purchTable.isInterCompanyOrder())
        {
            changecompany(purchTable.InterCompanyCompanyId)
            {
                num = purchTable.interCompanySalesTable().lastInvoice(true);  
            }
        }

        return num; 
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>