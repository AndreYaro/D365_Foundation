<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostJournalPostingBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProjAdvancedJournalPostJournalPostingBatchTask extends RunBaseBatch
{
    private container projAdvancedJournalList;
    private Integer nextIndexInListForPosting;

    private Integer version;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        switch (version)
        {
            case #CurrentVersion:
                return [#CurrentVersion, projAdvancedJournalList, nextIndexInListForPosting];

            default:
                return [#CurrentVersion, projAdvancedJournalList, nextIndexInListForPosting];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, projAdvancedJournalList, nextIndexInListForPosting] = _packedClass;
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    /// This class must always run with the currently passed values. Therefore, no last values are
    /// retrieved from the <see cref="T:SysLastValue" /> table.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostJournalPostingBatchTask));
        using (var activityContext = logger.integrationJournalActivity().postAdvancedJournalContext())
        {
            boolean isEnhancedPostingEnabled = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());

            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Processing journal posting via Multi-Task');
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, 'True');
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::EnhancedPosting, any2Str(isEnhancedPostingEnabled));

            ProjAdvancedJournal journal = this.nextJournalForProcessing();
            while (journal != null)
            {
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, journal.ProjAdvancedJournalId);
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(journal.numOfLines()));

                try
                {
                    ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(journal);
                    projAdvancedJournalPost.runOperation();
                }
                catch
                {
                    logger.logWarning(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), journal.ProjAdvancedJournalId, journal.numOfLines(), Exception::Error, xSession::currentRetryCount()));
                }

                journal = this.nextJournalForProcessing();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalForProcessing</Name>
				<Source><![CDATA[
    private ProjAdvancedJournal nextJournalForProcessing()
    {
        switch (version)
        {
            case #CurrentVersion:
                return this.nextJournalFromList();

            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJournalFromList</Name>
				<Source><![CDATA[
    private ProjAdvancedJournal nextJournalFromList()
    {
        ProjAdvancedJournal projAdvancedJournal;
        if (nextIndexInListForPosting <= conLen(projAdvancedJournalList))
        {
            ProjAdvancedJournalRecId nextRecId = conPeek(projAdvancedJournalList, nextIndexInListForPosting);
            projAdvancedJournal = ProjAdvancedJournal::findNoCache(nextRecId);
            nextIndexInListForPosting++;

            if (projAdvancedJournal && projAdvancedJournal.Status != ProjAdvancedJournalStatus::Draft)
            {
                projAdvancedJournal = this.nextJournalFromList();
            }
        }
        else
        {
            projAdvancedJournal = null;
        }

        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalList</Name>
				<Source><![CDATA[
    public container parmProjAdvancedJournalList(container _projAdvancedJournalList = projAdvancedJournalList)
    {
        projAdvancedJournalList = _projAdvancedJournalList;
        return projAdvancedJournalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjAdvancedJournalPostJournalPostingBatchTask construct(container _projAdvancedJournalList)
    {
        ProjAdvancedJournalPostJournalPostingBatchTask batch = new ProjAdvancedJournalPostJournalPostingBatchTask();
        batch.parmProjAdvancedJournalList(_projAdvancedJournalList);
        batch.version = 1;
        batch.nextIndexInListForPosting = 1;

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// True if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>