<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class LedgerRRGOp_Ledger_RU extends LedgerRRGOp_RU
{
    boolean                 invertResult;
    Query                   query;
    QueryBuildDataSource    queryBuildDataSource;
    QueryBuildRange         mainAccountRange;
    UnknownNoYes            crediting;
    private const str TmpLedgerDimensionDSName = 'LedgerDimCombinations';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimensionRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addDimensionRange()
    {
        MapEnumerator   me;
        QueryBuildRange dimRage;
        str             dimensionAttributeName;
        Map             defaultDimensionFilterMap;

        defaultDimensionFilterMap = parms.defaultDimensionFilterMap();
        if (defaultDimensionFilterMap)
        {
            me = defaultDimensionFilterMap.getEnumerator();
            while (me.moveNext())
            {
                dimensionAttributeName = DimensionAttribute::find(me.currentKey()).Name;
                if (dimensionAttributeName)
                {
                    dimRage = SysQuery::addDimensionAttributeRange(
                                query,
                                queryBuildDataSource.name(),
                                fieldId2name(this.ledgerTableId(), this.dimensionFieldId()),
                                DimensionComponent::DimensionAttribute,
                                SysQuery::valueNotEmptyString(),
                                dimensionAttributeName);
                }
                else
                {
                    dimRage = SysQuery::addDimensionAttributeRange(
                                query,
                                queryBuildDataSource.name(),
                                fieldId2name(this.ledgerTableId(), this.dimensionFieldId()),
                                DimensionComponent::LedgerDimensionDisplayValue,
                                SysQuery::valueNotEmptyString());
                }

                dimRage.value(me.currentValue());
                dimRage.dataSource().joinMode(JoinMode::ExistsJoin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds main account range on the main account field.
    /// </summary>
    /// <param name="_fieldId">
    ///     Main account field ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addMainAccountRange(FieldId _fieldId)
    {
        mainAccountRange = SysQuery::addDimensionAttributeRange(
                           query,
                           queryBuildDataSource.name(),
                           fieldId2name(this.ledgerTableId(), this.mainAccountFieldId()),
                           DimensionComponent::DimensionAttribute,
                           ' ',
                           DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);

        mainAccountRange.dataSource().joinMode(JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addRange(FieldId _fieldId, str _value)
    {
        queryBuildDataSource.addRange(_fieldId).value(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainAccountRangeByGJAE</Name>
				<Source><![CDATA[
    private void addMainAccountRangeByGJAE(str _accountNumFilter, QueryBuildDataSource _parentQBDS)
    {
        _parentQBDS.addRange(fieldNum(GeneralJournalAccountEntry, MainAccount)).value(_accountNumFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultDimensionRange</Name>
				<Source><![CDATA[
    private void addDefaultDimensionRange(QueryBuildDataSource _qbds)
    {
        Map defaultDimensionFilterMap = parms.defaultDimensionFilterMap();
        if (defaultDimensionFilterMap)
        {
            MapEnumerator me = defaultDimensionFilterMap.getEnumerator();
            while (me.moveNext())
            {
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(me.currentKey());
                if (dimensionAttribute.Name)
                {
                    FieldId dimensionFieldId = fieldName2Id(_qbds.table(), dimensionAttribute.DimensionValueColumnName);
                    _qbds.addRange(dimensionFieldId).value(me.currentValue());
                }
                else
                {
                    _qbds.addRange(fieldNum(DimensionAttributeValueCombination, DisplayValue)).value(me.currentValue());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionTmp</Name>
				<Source><![CDATA[
    private TmpLedgerDimension fillLedgerDimensionTmp(str _accountNumFilter)
    {
        TmpLedgerDimension ret;

        RecordInsertList ril = new RecordInsertList(tableNum(TmpLedgerDimension), true, true, true, true, true, ret);
        Query dimQuery = new Query();
        QueryBuildDataSource qbds = dimQuery.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbds.addSelectionField(fieldNum(DimensionAttributeValueCombination, RecId));
        qbds.addRange(fieldNum(DimensionAttributeValueCombination, MainAccount)).value(_accountNumFilter);
        this.addDefaultDimensionRange(qbds);

        QueryRun qr = new QueryRun(dimQuery);
        while (qr.next())
        {
            DimensionAttributeValueCombination current = qr.get(tableNum(DimensionAttributeValueCombination));
            ret.LedgerDimension = current.RecId;
            ril.add(ret);
        }
        ril.insertDatabase();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinWithGeneratedLedgerDimensionTmp</Name>
				<Source><![CDATA[
    private TmpLedgerDimension joinWithGeneratedLedgerDimensionTmp(str _accountNumFilter, QueryBuildDataSource _parentQBDS, str _dsName)
    {
        TmpLedgerDimension ret = this.fillLedgerDimensionTmp(_accountNumFilter);
        QueryBuildDataSource qbds = query.dataSourceName(_dsName);
        if (!qbds)
        {
            qbds = _parentQBDS.addDataSource(tableNum(TmpLedgerDimension), _dsName);
        }
        qbds.addLink(this.mainAccountFieldId(), fieldNum(TmpLedgerDimension, LedgerDimension));
        qbds.joinMode(JoinMode::ExistsJoin);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AmountMST calc()
    {
        const int QueryForceLiterals = 0;

        QueryRun    queryRun;
        AmountMST   amount;
        boolean useTmpTablesInComplexDimensionQueryFeature = parms.operation().DataType == LedgerRRGDataType_RU::Trans;
        boolean operationWithCorr = parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorr
            || parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrDebit
            || parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrCredit;

        Amount internalCalc(str _accountNumFilter)
        {
            Amount ret;
            TmpLedgerDimension ledgerDimensionTmp;

            query = this.query();
            query.literals(QueryForceLiterals);

            if (useTmpTablesInComplexDimensionQueryFeature)
            {
                this.addMainAccountRangeByGJAE(_accountNumFilter, queryBuildDataSource);
                if (parms.defaultDimensionFilterMap())
                {
                    ledgerDimensionTmp = this.joinWithGeneratedLedgerDimensionTmp(_accountNumFilter, queryBuildDataSource, TmpLedgerDimensionDSName);
                }
            }
            else
            {
                if (mainAccountRange)
                {
                    mainAccountRange.value(_accountNumFilter);
                }
            }

            if (useTmpTablesInComplexDimensionQueryFeature)
            {
                if (operationWithCorr)
                {
                    queryRun = new QueryRun(query);
                    if (parms.defaultDimensionFilterMap())
                    {
                        queryRun.setRecord(ledgerDimensionTmp);
                    }

                    GeneralJournalAccountEntryBondTmp bond;
                    RecordInsertList ril = new RecordInsertList(tableNum(GeneralJournalAccountEntryBondTmp), true, true, true, true, true, bond);
                    
                    while (queryRun.next())
                    {
                        GeneralJournalAccountEntry gjae = queryRun.get(tableNum(GeneralJournalAccountEntry));
                        bond.AccountingCurrencyAmount = gjae.AccountingCurrencyAmount;
                        bond.GeneralJournalAccountEntry = gjae.RecId;
                        bond.GeneralJournalEntry = gjae.GeneralJournalEntry;
                        bond.IsCredit = gjae.IsCredit;
                        GeneralJournalAccountEntry_W gjae_W = queryRun.get(tableNum(GeneralJournalAccountEntry_W));
                        bond.BondBatchTrans_RU = gjae_W.BondBatchTrans_RU;
                        ril.add(bond);
                    }                  

                    if (ril.insertDatabase())
                    {
                        Query queryCorr = new Query();
                        QueryBuildDataSource qbdsCorr = queryCorr.addDataSource(this.ledgerTableId());
                        queryCorr.literals(QueryForceLiterals);
                        qbdsCorr.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
                        qbdsCorr.addSelectionField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
                        if (crediting != UnknownNoYes::Unknown)
                        {
                            findOrCreateRange_W(qbdsCorr, fieldNum(GeneralJournalAccountEntry, IsCredit), crediting == UnknownNoYes::Yes ? SysQuery::value(NoYes::No) : SysQuery::value(NoYes::Yes));
                        }
                        if (parms.offsetAccountFilterRecId())
                        {
                            this.addMainAccountRangeByGJAE(parms.offsetAccountFilterRecId(), qbdsCorr);
                        }
                        QueryBuildDataSource qbdsGJE;
                        qbdsGJE = qbdsCorr.addDataSource(tableNum(GeneralJournalAccountEntryBondTmp));
                        qbdsGJE.joinMode(JoinMode::ExistsJoin);
                        qbdsGJE.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalAccountEntryBondTmp, GeneralJournalEntry));

                        QueryBuildDataSource dsW = qbdsCorr.addDataSource(tableNum(GeneralJournalAccountEntry_W));
                        dsW.addSelectionField(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
                        dsW.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
                        dsW.fetchMode(QueryFetchMode::One2One);
                        dsW.joinMode(JoinMode::InnerJoin);
                        dsW.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNotEmptyString());

                        queryRun = new QueryRun(queryCorr);
                        queryRun.setRecord(bond);

                        GeneralJournalAccountEntryBondCorrTmp bondCorr;
                        ril = new RecordInsertList(tableNum(GeneralJournalAccountEntryBondCorrTmp), true, true, true, true, true, bondCorr);

                        while (queryRun.next())
                        {
                            GeneralJournalAccountEntry gjae = queryRun.get(tableNum(GeneralJournalAccountEntry));
                            bondCorr.GeneralJournalEntry = gjae.GeneralJournalEntry;
                            bondCorr.IsCredit = gjae.IsCredit;
                            GeneralJournalAccountEntry_W gjae_W = queryRun.get(tableNum(GeneralJournalAccountEntry_W));
                            bondCorr.BondBatchTrans_RU = gjae_W.BondBatchTrans_RU;
                            ril.add(bondCorr);
                        }
                        ril.insertDatabase();

                        if (ril.insertDatabase())
                        {
                            select firstonly sum(AccountingCurrencyAmount) from bond
                                exists join bondCorr
                                where bondCorr.IsCredit != bond.IsCredit
                                    && bondCorr.BondBatchTrans_RU == bond.BondBatchTrans_RU
                                    && bondCorr.GeneralJournalEntry == bond.GeneralJournalEntry;

                            ret = bond.AccountingCurrencyAmount;
                        }
                    }
                }
                else
                {
                    queryRun = new QueryRun(query);

                    if (parms.defaultDimensionFilterMap())
                    {
                        queryRun.setRecord(ledgerDimensionTmp);
                    }

                    while (queryRun.next())
                    {
                        ret += this.processQueryRun(queryRun);
                    }
                }
            }
            else
            {
                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    ret += this.processQueryRun(queryRun);
                }
            }

            return ret;
        }

        str accountFilter = useTmpTablesInComplexDimensionQueryFeature ? parms.accountFilterRecId() : parms.accountFilter();
        str accountReverseFilter = useTmpTablesInComplexDimensionQueryFeature ? parms.accountReverseFilterRecId() : parms.accountReverseFilter();

        // Calculating accounts
        if (accountFilter != SysQuery::valueEmptyString())
        {
            amount = internalCalc(accountFilter);
        }
        // Calculating reverse accounts
        if (accountReverseFilter != SysQuery::valueEmptyString())
        {
            amount -= internalCalc(accountReverseFilter);
        }

        if (invertResult)
        {
            return -amount;
        }
    
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionFieldId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected FieldId dimensionFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract AmountMST ledgerAmount(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected TableId ledgerTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines main account field ID.
    /// </summary>
    /// <returns>
    ///     Main account field ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected FieldId mainAccountFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Processes the given <c>QueryRun</c> class instance.
    /// </summary>
    /// <param name="_queryRun">
    ///   A <c>QueryRun</c> class instance.
    /// </param>
    /// <returns>
    ///   Amount from the table with id from <c>ledgerTableID</c> method.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST processQueryRun(QueryRun _queryRun)
    {
        AmountMST ret;

        if (_queryRun.changed(this.ledgerTableId()))
        {
            ret = this.ledgerAmount(_queryRun.get(this.ledgerTableId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query query()
    {
        if (!query)
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(this.ledgerTableId());
            this.addMainAccountRange(this.mainAccountFieldId());
            this.initQuery();
        }
        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>