<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_T6</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_T6 extends RHRMReportVacation implements BatchRetryable
{
    RHRMOrderTable          hrmOrderTable;
    RHRMOrderTrans          hrmOrderTrans;
    FormDataSource          hrmOrderTrans_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1721";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1811";
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;
        RHRMOrderTrans          orderTransMarked1, orderTransMarked2;

        ret = super();

        if (hrmOrderTrans_ds.anyMarked())
        {
            orderTransMarked1 = hrmOrderTrans_ds.getFirst(true, false);
            orderTransMarked2 = hrmOrderTrans_ds.getNext();

            if (orderTransMarked2.RecId &&
               !((orderTransMarked1.EmplId == orderTransMarked2.EmplId) &&
                  this.isJoinForcedly(orderTransMarked1, orderTransMarked2)))
            {
                ret = checkFailed("@RUP2087");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        hrmOrderTrans = _args.record();
        hrmOrderTable = RHRMOrderTable::find(hrmOrderTrans.OrderTableRecId);
        if (FormDataUtil::getFormDataSource(_args.record()))
        {
            hrmOrderTrans_ds = FormDataUtil::getFormDataSource(_args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    private void printReport(RHRMOrderTrans _orderTransX, RHRMOrderTrans _orderTransY, boolean _isY = true)
    {
        RPayHistory         rpayHistoryLast;
        RHRMOrderTrans      orderTransBasic, orderTransExtra;
        RPayVacationType    vacationTypeX, vacationTypeY;
        TransDate           startDateTotal, endDateTotal;
        RHRMPeriod          calendarDayNumberTotal;

        if (_orderTransX.RecId != hrmOrderTrans.RecId)
        {
            if (_orderTransY.RecId && _isY)
            {
                if (_orderTransY.RecId != hrmOrderTrans.RecId)
                {
                    return;
                }
            }
            else
            {
                return;
            }
        }

        vacationTypeX = _orderTransX.payVacationType();
        if (_orderTransY.RecId && _isY)
        {
            vacationTypeY = _orderTransY.payVacationType();
        }

        if (vacationTypeX == RPayVacationType::Basic)
        {
            orderTransBasic = _orderTransX;
        }
        else
        {
            orderTransExtra = _orderTransX;
        }

        if (_orderTransY.RecId && _isY)
        {
            if (vacationTypeY == RPayVacationType::Basic)
            {
                orderTransBasic = _orderTransY;
            }
            else
            {
                orderTransExtra = _orderTransY;
            }
        }

        if (orderTransBasic.RecId)
        {
            if (orderTransBasic.StartDate)
            {
                wordDocument.insertFieldValue(#PVT_startDateBasic, this.dateInWord(orderTransBasic.StartDate));
            }
            if (orderTransBasic.EndDate)
            {
                wordDocument.insertFieldValue(#PVT_endDateBasic, this.dateInWord(orderTransBasic.EndDate));
            }
            wordDocument.insertFieldValue(#PVT_DayNumberBasic, int2str(orderTransBasic.calendarDayNumber()));
        }

        if (orderTransExtra.RecId)
        {
            if (orderTransExtra.StartDate)
            {
                wordDocument.insertFieldValue(#PVT_startDateExtra, this.dateInWord(orderTransExtra.StartDate));
            }
            if (orderTransExtra.EndDate)
            {
                wordDocument.insertFieldValue(#PVT_endDateExtra, this.dateInWord(orderTransExtra.EndDate));
            }
            wordDocument.insertFieldValue(#PVT_DayNumberExtra, int2str(orderTransExtra.calendarDayNumber()));
            wordDocument.insertFieldValue(#PVT_PayVacationType, this.codeDescription(orderTransExtra.VacationTypeId,
                                                                                      RHRMVacationType::find(orderTransExtra.VacationTypeId).Description));
        }

        startDateTotal = _orderTransX.StartDate;
        calendarDayNumberTotal = _orderTransX.calendarDayNumber();
        if (_orderTransY.RecId && _isY)
        {
            endDateTotal = _orderTransY.EndDate;
            calendarDayNumberTotal += _orderTransY.calendarDayNumber();
        }
        else
        {
            endDateTotal = _orderTransX.EndDate;
        }

        wordDocument.insertFieldValue(#PVT_DayNumberTotal, int2str(calendarDayNumberTotal));

        if (startDateTotal)
        {
            wordDocument.insertFieldValue(#PVT_startDateTotal, this.dateInWord(startDateTotal));
        }
        if (endDateTotal)
        {
            wordDocument.insertFieldValue(#PVT_endDateTotal, this.dateInWord(endDateTotal));
        }

        wordDocument.insertFieldValue(#CI_Name, CompanyInfo::find().Name);
        wordDocument.insertFieldValue(#CI_CodeOKPO_RU, CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), hrmOrderTable.TransDate));
        wordDocument.insertFieldValue(#PVT_hrmOrderNum, hrmOrderTable.OrderNum);
        wordDocument.insertFieldValue(#PVT_hrmOrderDate, this.dateInNumber(hrmOrderTable.TransDate));
        wordDocument.insertFieldValue(#ET_Name, _orderTransX.emplName());
        wordDocument.insertFieldValue(#PVT_EmplId, _orderTransX.EmplId);

        rpayHistoryLast = RPayHistory::findLastSignOnMove(_orderTransX.EmplId, _orderTransX.StartDate, _orderTransX.RecId);

        wordDocument.insertFieldValue(#ET_Title, rpayHistoryLast.titleId());
        wordDocument.insertFieldValue(#ET_Organistion, rpayHistoryLast.organizationDescription());

        if (hrmOrderTrans.StartPeriodDate)
        {
            wordDocument.insertFieldValue(#PVT_hrmStartWorkDate,  this.dateInWord(_orderTransX.StartPeriodDate));
        }

        if (hrmOrderTrans.EndPeriodDate)
        {
            wordDocument.insertFieldValue(#PVT_hrmEndWorkDate, this.dateInWord(_orderTransX.EndPeriodDate));
        }
        wordDocument.insertFieldValue(#OTR_title, OfficialsTable_RU::findDirector().Title);
        wordDocument.insertFieldValue(#OTR_name, OfficialsTable_RU::findDirector().Name);
        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMOrderTrans          orderTransX, orderTransY, orderTransMarked1, orderTransMarked2;

        if (hrmOrderTrans_ds.anyMarked())
        {
            orderTransMarked1 = hrmOrderTrans_ds.getFirst(true, false);
            orderTransMarked2 = hrmOrderTrans_ds.getNext();

            if (orderTransMarked2.RecId &&
               (orderTransMarked1.EmplId == orderTransMarked2.EmplId) &&
                this.isJoinForcedly(orderTransMarked1, orderTransMarked2))
            {
                if (orderTransMarked1.StartDate < orderTransMarked2.StartDate)
                {
                    this.printReport(orderTransMarked1, orderTransMarked2);
                }
                else
                {
                    this.printReport(orderTransMarked2, orderTransMarked1);
                }
                return;
            }
        }

        select orderTransY
            order by StartDate
            where orderTransY.OrderTableRecId == hrmOrderTrans.OrderTableRecId &&
                  orderTransY.EmplId          == hrmOrderTrans.EmplId;

        while select  orderTransX
            order by StartDate
            where orderTransX.OrderTableRecId == hrmOrderTrans.OrderTableRecId &&
                  orderTransX.EmplId          == hrmOrderTrans.EmplId
        {
            next orderTransY;

            if (orderTransY.RecId)
            {
                if (this.isJoin(orderTransX, orderTransY))
                {
                    this.printReport(orderTransX, orderTransY);
                    next orderTransX;
                    next orderTransY;
                }
                else
                {
                    this.printReport(orderTransX, orderTransY, false);
                }
            }
            else
            {
                this.printReport(orderTransX, orderTransY, false);
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>