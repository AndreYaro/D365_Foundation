<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalPostingAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalPostingAllocator</c> class handles the allocation of bank - foreign currency revaluation values from the bank account level into individual
/// values across the various ledger dimension values on the bank account transactions.
/// </summary>
public final class BankCurrencyRevalPostingAllocator
{
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalPostingAllocator</c> class given a <c>BankCurrencyRevalTmp</c> table buffer containing currency revaluation
    /// values summarized at the bank account level.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">
    /// A <c>BankCurrencyRevalTmp</c> table buffer containing currency revaluation values summarized at the bank account level.
    /// </param>
    /// <returns>A new instance of the <c>BankCurrencyRevalPostingAllocator</c> class.</returns>
    internal static BankCurrencyRevalPostingAllocator newFromBankCurrencyRevalTmp(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        BankCurrencyRevalPostingAllocator postingAllocator = new BankCurrencyRevalPostingAllocator();
        postingAllocator.initialize(_bankCurrencyRevalTmp);

        return postingAllocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        bankCurrencyRevalTmp.useExistingTempDBTable(_bankCurrencyRevalTmp.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateRevaluationsAcrossDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the existing <c>BankCurrencyRevalTmp</c> table buffer records containing bank account level adjustments into individual values across the various
    /// ledger dimension values on the bank account transactions.
    /// </summary>
    /// <returns>A <c>BankCurrencyRevalTmp</c> table buffer with values allocated across dimension values.</returns>
    internal BankCurrencyRevalTmp allocateRevaluationsAcrossDimensions()
    {
        BankAccountBalanceCalculator bankAccountBalanceCalculator;
        List bankAccountDefaultDimensionBalanceList;
        BankCurrencyRevalTmp expandedBankCurrencyRevalTmp;

        while select * from bankCurrencyRevalTmp
            where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
        {
            bankAccountBalanceCalculator = BankAccountBalanceCalculator::newFromBankAccountTable(BankAccountTable::find(bankCurrencyRevalTmp.BankAccountId));

            bankAccountDefaultDimensionBalanceList = new List(Types::Class);
            bankAccountDefaultDimensionBalanceList.appendList(bankAccountBalanceCalculator.calculateByDefaultDimension(bankCurrencyRevalTmp.TransDate));

            this.allocateRevaluation(expandedBankCurrencyRevalTmp, bankAccountDefaultDimensionBalanceList);
        }

        BankCurrencyRevalDataTrimmer trimmer = BankCurrencyRevalDataTrimmer::newFromBankCurrencyRevalTmp(expandedBankCurrencyRevalTmp);
        trimmer.trim();

        return expandedBankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateRevaluation</Name>
				<Source><![CDATA[
    private void allocateRevaluation(BankCurrencyRevalTmp _expandedBankCurrencyRevalTmp, List _bankAccountDefaultDimensionBalanceList)
    {
        int distributionsProcessed;
        AmountCur amountAllocatedAccountingCur;
        AmountCur amountAllocatedReportingCur;

        Ledger ledger = Ledger::find(Ledger::current());

        AmountCur amountToAllocateAccountingCur = bankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount;
        AmountCur amountToAllocateReportingCur = bankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount;

        int distributionCount = _bankAccountDefaultDimensionBalanceList.elements();

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(BankInstrumentationConstants::BankCurrencyRevaluationAllocate, distributionCount);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            ListEnumerator bankAccountDefaultDimensionBalanceListEnumerator = _bankAccountDefaultDimensionBalanceList.getEnumerator();

            while (bankAccountDefaultDimensionBalanceListEnumerator.moveNext())
            {
                BankAccountDefaultDimensionBalance bankAccountDefaultDimensionBalance = bankAccountDefaultDimensionBalanceListEnumerator.current() as bankAccountDefaultDimensionBalance;
                BankAccountBalance bankAccountBalance = bankAccountDefaultDimensionBalance.parmBankAccountBalance();

                _expandedBankCurrencyRevalTmp.clear();
                _expandedBankCurrencyRevalTmp.data(bankCurrencyRevalTmp);
                _expandedBankCurrencyRevalTmp.DefaultDimension = bankAccountDefaultDimensionBalance.parmDefaultDimension();

                AmountCur bankCurrencyAmount = bankAccountBalance.parmAmountCurBalance();
                _expandedBankCurrencyRevalTmp.BankCurrencyAmount = bankCurrencyAmount;
                _expandedBankCurrencyRevalTmp.AccountingCurrencyAmount = bankAccountBalance.parmAmountMstBalance();
                _expandedBankCurrencyRevalTmp.ReportingCurrencyAmount = bankAccountBalance.parmReportingCurrencyBalance();

                if (distributionCount == 1)
                {
                    _expandedBankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount = amountToAllocateAccountingCur;
                    _expandedBankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount = amountToAllocateReportingCur;
                }
                else if (distributionsProcessed == distributionCount - 1)
                {
                    // Allocate the final percentage to the last record in order to account for any penny differences throughout the process.
                    _expandedBankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount = amountToAllocateAccountingCur - amountAllocatedAccountingCur;
                    _expandedBankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount = amountToAllocateReportingCur - amountAllocatedReportingCur;
                }
                else
                {
                    Money percentOfTotal = bankCurrencyRevalTmp.BankCurrencyAmount == 0 ? 0 : (bankCurrencyAmount / bankCurrencyRevalTmp.BankCurrencyAmount);

                    _expandedBankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount =
                        this.calculateAdjustmentAmount(amountToAllocateAccountingCur, percentOfTotal, ledger.AccountingCurrency);

                    _expandedBankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount =
                        this.calculateAdjustmentAmount(amountToAllocateReportingCur, percentOfTotal, ledger.ReportingCurrency);

                    amountAllocatedAccountingCur = amountAllocatedAccountingCur + _expandedBankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount;
                    amountAllocatedReportingCur = amountAllocatedReportingCur + _expandedBankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount;
                }

                BankCurrencyRevalPostingAllocatorContract postingAllocatorContract = BankCurrencyRevalPostingAllocatorContract::construct();
                postingAllocatorContract.expandedBankCurrencyRevalTmp = _expandedBankCurrencyRevalTmp;
                postingAllocatorContract.bankCurrencyRevalTmp = bankCurrencyRevalTmp;
                postingAllocatorContract.bankAccountDefaultDimensionBalance = bankAccountDefaultDimensionBalance;

                this.populateAdditionalBankCurrencyRevalTmpValues(postingAllocatorContract);

                _expandedBankCurrencyRevalTmp.insert();

                distributionsProcessed++;
                progressLogger.trackProgress(distributionsProcessed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAdditionalBankCurrencyRevalTmpValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for participation in setting expanded values on the expanded <c>BankCurrencyReval</c>table buffer.
    /// </summary>
    /// <param name = "_postingAllocatorContract"></param>
    protected void populateAdditionalBankCurrencyRevalTmpValues(BankCurrencyRevalPostingAllocatorContract _postingAllocatorContract)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAdjustmentAmount</Name>
				<Source><![CDATA[
    private AmountMST calculateAdjustmentAmount(AmountCur _amountToAllocate, Money _percentOfTotal, CurrencyCode _currencyCode)
    {
        AmountMST adjustmentAmount;

        if (_amountToAllocate != 0 && _percentOfTotal != 0)
        {
            adjustmentAmount = CurrencyExchange::round(_amountToAllocate * _percentOfTotal, _currencyCode);
        }

        return adjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::SourceNameBankCurrencyRevaluation, BankInstrumentationConstants::BankNamespace);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>