<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMDependencyAnalyzer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The BOMDependencyAnalyzer class is a specialized ReqDependencyAnalyzer that does circularity check.
/// </summary>
class BOMDependencyAnalyzer extends ReqDependencyAnalyzer
{
    StackBase   tasksOnStack;
    boolean     circularDependency;
    List        dependencyCheckQueue;
    Set         enqueuedDependencyCheckTaskSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDependency</Name>
				<Source><![CDATA[
    public void addDependency(anytype _taskBefore, anytype _taskAfter)
    {
        super(_taskBefore, _taskAfter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dequeueDependencyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Dequeue the next task.
    /// </summary>
    /// <returns>
    ///     The next tasks that needs to be checked, or null if there are no more tasks.
    /// </returns>
    protected anytype dequeueDependencyCheck()
    {
        ListIterator it;
        anytype task;

        if (dependencyCheckQueue.empty())
        {
            return null;
        }

        it = new ListIterator(dependencyCheckQueue);
        task = it.value();
        it.delete();

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueueDependencyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enqueues a task for dependency check.
    /// </summary>
    /// <param name="_task">
    ///     The task to enqueue.
    /// </param>
    protected void enqueueDependencyCheck(anytype _task)
    {
        if (!enqueuedDependencyCheckTaskSet.in(_task))
        {
            enqueuedDependencyCheckTaskSet.add(_task);
            dependencyCheckQueue.addEnd(_task);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeSearch</Name>
				<Source><![CDATA[
    protected void finalizeSearch()
    {
        super();

        dependencyCheckQueue = null;
        enqueuedDependencyCheckTaskSet = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduleDFS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a schedule using a depth first search (DFS) algorithm and checking sibling nodes.
    ///     Does not throw an exception in case a circular dependency is found.
    /// </summary>
    /// <param name="_task">
    ///    The task currently being examined.
    /// </param>
    protected void getScheduleDFS(anytype _task)
    {
        if (circularDependency)
        {
            return;
        }
        else
        {
            tasksOnStack.push(_task);
        }

        if (onStack.in(_task))
        {
            circularDependency = true;
            return;
        }

        super(_task);

        if (!circularDependency)
        {
            tasksOnStack.pop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the stack of tasks at the time that circularity was detected.
    /// </summary>
    /// <returns>
    ///     A stack of tasks.
    /// </returns>
    public StackBase getStack()
    {
        return tasksOnStack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskReverseDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets reverse dependencies of the given task, i.e. tasks that depend on the given task.
    /// </summary>
    /// <param name="_task">
    ///     Task to get reverse dependencies of.
    /// </param>
    /// <returns>
    ///     A set of tasks that depend on the given task.
    /// </returns>
    protected Set getTaskReverseDependencies(anytype _task)
    {
        return emptySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCircularDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a boolean value indicating whether the given task has circular dependencies.
    /// </summary>
    /// <param name="_task">
    ///     The task to check.
    /// </param>
    /// <returns>
    ///     <c>true</c> if a circular dependency was found; otherwise, <c>false</c>.
    /// </returns>
    public boolean hasCircularDependency(anytype _task)
    {
        this.initSearch();

        this.enqueueDependencyCheck(_task);

        while (this.hasQueuedDependencyCheck())
        {
            this.getScheduleDFS(this.dequeueDependencyCheck());
        }

        this.finalizeSearch();

        return circularDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQueuedDependencyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a boolean value indicating whether there are more tasks
    ///     queued for dependency check.
    /// </summary>
    /// <returns>
    ///     <c>true</c> if there are more tasks queued for dependency check; otherwise, <c>false</c>.
    /// </returns>
    protected boolean hasQueuedDependencyCheck()
    {
        return !dependencyCheckQueue.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize search.
    /// </summary>
    protected void initSearch()
    {
        visited  = new Set (types);
        onStack  = new Set (types);
        schedule = new List(types);

        dependencyCheckQueue = new List(Types::Class);
        enqueuedDependencyCheckTaskSet = new Set(Types::Class);

        circularDependency = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super(Types::Class);

        tasksOnStack = new StackBase(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMDependencyAnalyzer construct()
    {
        return new BOMDependencyAnalyzer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>