<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceVendPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdvicePrint</c> class provides the ability to generate and print
/// payment advice reports for vendors.
/// </summary>
[SysObsolete('This class is obsolete. Please use the BankPaymAdviceCustControllerV2 or BankPaymAdviceVendControllerV2 classes.', true, 10\5\2023)]
public class BankPaymAdviceVendPrint extends BankPaymAdvicePrint implements CustVendPaymIPrinterSettingsProvider
{
    private VendAccount vendAccount;

    private DialogField dialogVendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogAddAccount</Name>
				<Source><![CDATA[
    protected void dialogAddAccount()
    {
        dialogVendAccount = dialog.addFieldValue(extendedTypeStr(VendAccount), vendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentAdviceMenuItemActionStr</Name>
				<Source><![CDATA[
    protected str getPaymentAdviceMenuItemActionStr()
    {
        return menuItemActionStr(BankPaymAdviceVendPrintOption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        vendAccount = dialogVendAccount.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;
        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query query = super();

        if (vendAccount)
        {
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(LedgerJournalTrans));

            SysQuery::addDimensionAttributeRange(query, qbds.name(), fieldStr(LedgerJournalTrans, LedgerDimension), DimensionComponent::LedgerDimensionDisplayValue, vendAccount);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayments</Name>
				<Source><![CDATA[
    protected List getPayments()
    {
        QueryRun queryRun = new QueryRun(this.buildQuery());
        queryRun.setRecord(this.generatePaymentLineAccountNames());

        LedgerJournalTrans ledgerJournalTrans;
        List paymList = new List(Types::Record);

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            ledgerJournalTrans ledgerJournalTransCopy;
            ledgerJournalTransCopy.data(ledgerJournalTrans);

            paymList.addEnd(ledgerJournalTransCopy);
        }

        return paymList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the payment advice report for the given payments.
    /// </summary>
    /// <param name = "_outPaymRecords">
    /// A list of payments.
    /// </param>
    protected void generateReport(List _paymList)
    {
        Args args = new Args();

        args.caller(this);
        args.parmObject(_paymList);
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(printPaymAdvicePrintMgmt);

        new MenuFunction(menuItemOutputStr(BankPaymAdviceVend), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankPaymAdviceVendPrint bankPaymAdviceVendPrint;

        if (args.menuItemName() == menuItemActionStr(BankPaymAdviceVendPrintOption))
        {
            bankPaymAdviceVendPrint = args.caller().runBase();
            bankPaymAdviceVendPrint.callPrinterSettings();

            return;
        }

        if (args.dataset() != tableNum(LedgerJournalTrans))
        {
            throw error(Error::wrongUseOfFunction("@SYS55191"));
        }

        LedgerJournalTrans ledgerJournalTrans = args.record();

        bankPaymAdviceVendPrint = new BankPaymAdviceVendPrint();
        bankPaymAdviceVendPrint.parmLedgerJournalId(ledgerJournalTrans.JournalNum);
        bankPaymAdviceVendPrint.parmPaymMode(ledgerJournalTrans.PaymMode);

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            bankPaymAdviceVendPrint.parmVendAccount(ledgerJournalTrans.parmAccount());
            bankPaymAdviceVendPrint.parmAccountType(ledgerJournalTrans.AccountType);
        }

        if (ledgerJournalTrans.OffsetAccountType == ledgerJournalACType::Bank)
        {
            bankPaymAdviceVendPrint.parmBankAccountId(ledgerJournalTrans.parmOffsetAccount());
        }

        Debug::assert(args.parmEnumType(enumNum(UserInteractive)));

        UserInteractive userInteractive = args.parmEnum();
        boolean promptResult = true;

        if (userInteractive == UserInteractive::Yes)
        {
            promptResult = bankPaymAdviceVendPrint.prompt();
        }

        if (promptResult)
        {
            bankPaymAdviceVendPrint.getPaymentsAndGenerateReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>