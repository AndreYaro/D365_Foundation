<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetEntryQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TSTimesheetEntryQuery</c> class initializes the query for the timesheet entry form.
/// </summary>
class TSTimesheetEntryQuery
{
    FormDataSource          formDataSource;
    ResourceRecId           resourceRecId;
    ProjPeriodId            periodId;
    QueryBuildDataSource    qbdsTSTimesheetTable;

    QueryBuildDataSource    qbdsTSAppEmplSub;
    QueryBuildDataSource    qbdsTSTimesheetLine;
    QueryBuildRange         qbRTSTimesheetTableRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TSTimesheetEntryQuery</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>TSTimesheetEntryQuery</c> class.
    /// </returns>
    private static TSTimesheetEntryQuery construct()
    {
        return new TSTimesheetEntryQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TSTimesheetEntryQuery</c> class.
    /// </summary>
    /// <param name = "_formDataSource">
    ///    The main form datasource.
    /// </param>
    /// <param name = "_currentResourceRecId">
    ///    The current resource record id.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>TSTimesheetEntryQuery</c> class.
    /// </returns>
    public static TSTimesheetEntryQuery newStandard(FormDataSource _formDataSource, ResourceRecId _currentResourceRecId = ResourceFacade::findByCurrentWorker())
    {
        if (!_formDataSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TSTimesheetEntryQuery tsTimesheetEntryQuery = TSTimesheetEntryQuery::construct();

        tsTimesheetEntryQuery.parmFormDataSource(_formDataSource);
        tsTimesheetEntryQuery.parmResourceRecId(_currentResourceRecId);
        tsTimesheetEntryQuery.init();

        return tsTimesheetEntryQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    protected formDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceRecId</Name>
				<Source><![CDATA[
    protected ResourceRecId parmResourceRecId(ResourceRecId _currentResourceRecId = resourceRecId)
    {
        resourceRecId = _currentResourceRecId;
        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    protected void init()
    {
        periodId             = ResourceFacade::getPeriodId(resourceRecId);
        qbdsTSTimesheetTable = formDataSource.queryBuildDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the form datasource query.
    /// </summary>
    /// <param name = "_tsTimesheetEntryGridView">
    ///    An enumeration value that defines the grid view.
    /// </param>
    /// <param name = "_myTimesheetFilter">
    ///    An enumeration value that defines a filter for 'My timesheets'.
    /// </param>
    public void initializeQuery(
        TSTimesheetEntryGridView  _tsTimesheetEntryGridView,
        TSTimesheetListPageFilter _myTimesheetFilter)
    {
        this.initializeQueryBasedOnTSGridViewType(_tsTimesheetEntryGridView, _myTimesheetFilter);
        formDataSource.query().clearOrderBy();
        qbdsTSTimesheetTable.addSortField(fieldnum(TSTimesheetTable, TimesheetNbr), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryBasedOnTSGridViewType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the form datasource query based on <c>TSTimesheetEntryGridView</c>.
    ///     In order to modify query initialization, extend each query method separately.
    /// </summary>
    /// <param name = "_tsTimesheetEntryGridView">
    ///    An enumeration value that defines the grid view.
    /// </param>
    /// <param name = "_myTimesheetFilter">
    ///    An enumeration value that defines a filter for 'My timesheets'.
    /// </param>
    protected void initializeQueryBasedOnTSGridViewType(TSTimesheetEntryGridView  _tsTimesheetEntryGridView,
        TSTimesheetListPageFilter _myTimesheetFilter)
    {
        switch (_tsTimesheetEntryGridView)
        {
            case TSTimesheetEntryGridView::AllTimesheets:
                this.initializeQueryAllTimesheets();
                break;
            case TSTimesheetEntryGridView::MyTimesheets:
                this.initializeQueryMyTimesheets(_myTimesheetFilter);
                break;
            case TSTimesheetEntryGridView::TimesheetsForMyReview:
                this.initializeQueryTimesheetsForMyReview();
                break;
            case TSTimesheetEntryGridView::UnpostedTimesheets:
                this.initializeQueryUnpostedTimesheets();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryAllTimesheets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a query for 'All timesheets'
    /// </summary>
    protected void initializeQueryAllTimesheets()
    {
        QueryBuildRange qbR = qbdsTSTimesheetTable.addRange(fieldNum(TSTimesheetTable,DataAreaId));
        qbR.status(RangeStatus::Hidden);
        qbR.value(queryValue(curext()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryMyTimesheets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a query for 'My timesheets'
    /// </summary>
    /// <param name = "_myTimesheetFilter">
    ///    An enumeration value that defines a filter for 'My timesheets'.
    /// </param>
    public void initializeQueryMyTimesheets(TSTimesheetListPageFilter _myTimesheetFilter)
    {
        switch (_myTimesheetFilter)
        {
            case TSTimesheetListPageFilter::All:
                this.clearTimesheetLineMyProjectsRange();
                this.clearTimesheetTableMyDelegatesRange();
                this.setTimesheetTableResourceRange();
                this.setTimesheetTablePeriodRange(null);
                break;
            case TSTimesheetListPageFilter::CurrentPeriod:
                this.clearTimesheetLineMyProjectsRange();
                this.clearTimesheetTableMyDelegatesRange();
                this.setTimesheetTableResourceRange();
                this.setTimesheetTablePeriodRange(ProjPeriodLine::findFromPeriod(periodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                break;
            case TSTimesheetListPageFilter::PreviousPeriod:
                this.clearTimesheetLineMyProjectsRange();
                this.clearTimesheetTableMyDelegatesRange();
                this.setTimesheetTableResourceRange();
                this.setTimesheetTablePeriodRange(ProjPeriodLine::findPrevFromDate(periodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
                break;
            case TSTimesheetListPageFilter::MyProjects:
                this.clearTimesheetTableMyDelegatesRange();
                this.setTimesheetTableResourceRange(SysQuery::valueUnlimited());
                this.setTimesheetTablePeriodRange(null);
                this.setTimesheetLineMyProjectsRange();
                break;
            case TSTimesheetListPageFilter::MyDelegates:
                this.clearTimesheetLineMyProjectsRange();
                this.setTimesheetTableResourceRange(SysQuery::valueNot(resourceRecId));
                this.setTimesheetTablePeriodRange(null);
                this.setTimesheetTableMyDelegatesRange();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryAllTimesheetsAssignedToMeOrDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the query to retrieve all timesheets assigned to me or to a delegate
    /// </summary>
    public void initializeQueryAllTimesheetsAssignedToMeOrDelegate()
    {
        qbdsTSTimesheetTable.clearRange(fieldNum(TSTimesheetTable,Resource));
        this.clearTimesheetLineMyProjectsRange();
        this.setTimesheetTableMyDelegatesRange();
        this.setTimesheetTablePeriodRange(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryTimesheetsForMyReview</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines a query for 'Timesheets for my review'.
    /// </summary>
    protected void initializeQueryTimesheetsForMyReview()
    {
        QueryBuildDataSource qbdsTSTimesheetsPendingView = qbdsTSTimesheetTable.addDataSource(tableNum(TsTimesheetsPendingView));
        qbdsTSTimesheetsPendingView.addLink(fieldNum(TSTimesheetTable,RecId),fieldNum(TsTimesheetsPendingView,RefRecId));
        qbdsTSTimesheetsPendingView.fetchMode(QueryFetchMode::One2One);
        qbdsTSTimesheetsPendingView.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange qbR = SysQuery::findOrCreateRange(qbdsTSTimesheetsPendingView,FieldNum(TsTimesheetsPendingView,UserId));
        qbR.status(RangeStatus::Hidden);
        qbR.value(queryValue(curuserid()));

        qbR = SysQuery::findOrCreateRange(qbdsTSTimesheetTable,FieldNum(TsTimesheetTable,ApprovalStatus));
        qbR.status(RangeStatus::Hidden);
        qbR.value(strFmt('%1, %2', queryValue(TSAppStatus::Pending), queryValue(TSAppStatus::Returned)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryUnpostedTimesheets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines a query for 'Unposted timesheets'.
    /// </summary>
    protected void initializeQueryUnpostedTimesheets()
    {
        QueryBuildRange qbR = qbdsTSTimesheetTable.addRange(fieldNum(TSTimesheetTable,ApprovalStatus));
        qbR.status(RangeStatus::Hidden);
        qbR.value(queryValue(TSAppStatus::Approved));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheetTableResourceRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a query range value for the timesheet worker.
    /// </summary>
    /// <param name = "_resourceRangeValue">
    ///    The range value; optional.
    /// </param>
    protected void setTimesheetTableResourceRange(str _resourceRangeValue = queryValue(resourceRecId))
    {
        QueryBuildRange qbR = SysQuery::findOrCreateRange(qbdsTSTimesheetTable,fieldNum(TSTimesheetTable,Resource));
        qbR.status(RangeStatus::Hidden);
        qbR.value(_resourceRangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheetTablePeriodRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a period range on the timesheet.
    /// </summary>
    /// <param name = "_projPeriodLine">
    ///    The period line that is used to initialize the range.
    /// </param>
    protected void setTimesheetTablePeriodRange(projPeriodLine _projPeriodLine)
    {
        QueryBuildRange qbR = SysQuery::findOrCreateRange(qbdsTSTimesheetTable,fieldNum(TSTimesheetTable,PeriodFrom));        

        if (_projPeriodLine)
        {
            qbR.value(SysQueryRangeUtil::dateRange(_projPeriodLine.PeriodFrom,_projPeriodLine.PeriodTo));
        }
        else
        {
            qbR.value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheetTableMyDelegatesRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the delegate range.
    /// </summary>
    protected void setTimesheetTableMyDelegatesRange()
    {
        if (!qbdsTSAppEmplSub)
        {
            qbdsTSAppEmplSub = qbdsTSTimesheetTable.addDataSource(tableNum(TSAppEmplSub));
            qbdsTSAppEmplSub.addLink(fieldNum(TSTimesheetTable,Resource), fieldNum(TSAppEmplSub,TimesheetResource));
            qbdsTSAppEmplSub.fetchMode(QueryFetchMode::One2One);
            qbdsTSAppEmplSub.joinMode(JoinMode::OuterJoin);

            QueryBuildRange qbR = qbdsTSTimesheetTable.addRange(fieldNum(TSTimesheetTable,CreatedDateTime));
            qbR.status(RangeStatus::Hidden);
            qbR.value(strfmt('((((%1.%2 >= %3.%4) && ((%1.%2 <= %3.%5) || (%3.%5 == %6))) && (%3.%7 == %1.%10)) || (%1.%8 == %9)))',
                  qbdsTSTimesheetTable.name(),
                  fieldStr(TSTimesheetTable, CreatedDateTime),
                  qbdsTSAppEmplSub.name(),
                  fieldStr(TSAppEmplSub,DateFrom),
                  fieldStr(TSAppEmplSub, DateTo),
                  date2StrXpp(dateNull()),
                  fieldStr(TSAppEmplSub,DelegatedUser),
                  fieldStr(TSTimesheetTable,Resource),
                  queryValue(resourceRecId),
                  fieldStr(TSTimesheetTable, CreatedBy)
                ));

            QueryBuildRange qbrCreatedBy = qbdsTSTimesheetTable.addRange(fieldNum(TSTimesheetTable, CreatedBy));
            qbrCreatedBy.status(RangeStatus::Hidden);
            qbrCreatedBy.value(queryValue(curUserId()));
        }
        else
        {
            qbdsTSAppEmplSub.enabled(true);

            QueryBuildRange qbr = qbdsTSTimesheetTable.findRange(fieldNum(TSTimesheetTable,CreatedDateTime));
            qbr.enabled(true);

            qbr = qbdsTSTimesheetTable.findRange(fieldNum(TSTimesheetTable,CreatedBy));
            qbr.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTimesheetTableMyDelegatesRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the delegate range.
    /// </summary>
    protected void clearTimesheetTableMyDelegatesRange()
    {
        if (qbdsTSAppEmplSub)
        {
            qbdsTSAppEmplSub.enabled(false);

            QueryBuildRange qbr = qbdsTSTimesheetTable.findRange(fieldNum(TSTimesheetTable,CreatedDateTime));
            qbr.enabled(false);

            qbr = qbdsTSTimesheetTable.findRange(fieldNum(TSTimesheetTable,CreatedBy));
            qbr.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheetLineMyProjectsRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the 'my projects' range.
    /// </summary>
    protected void setTimesheetLineMyProjectsRange()
    {
        HcmWorkerRecId hcmWorkerRecId = TSResource::workerRecId(resourceRecId);

        if (DirPersonUser::current() && hcmWorkerRecId)
        {
            if (!qbdsTSTimesheetLine)
            {
                qbdsTSTimesheetLine = qbdsTSTimesheetTable.addDataSource(tableNum(TSTimesheetLine));
                qbdsTSTimesheetLine.addLink(fieldNum(TSTimesheetTable,TimesheetNbr),fieldNum(TSTimesheetLine,TimesheetNbr));
                qbdsTSTimesheetLine.fetchMode(QueryFetchMode::One2One);
                qbdsTSTimesheetLine.joinMode(JoinMode::ExistsJoin);

                QueryBuildDataSource qbdsProjTable = qbdsTSTimesheetLine.addDataSource(tableNum(ProjTable));
                qbdsProjTable.addLink(fieldNum(TSTimesheetLine,ProjId),fieldNum(ProjTable,ProjId));
                qbdsProjTable.fetchMode(QueryFetchMode::One2One);
                qbdsProjTable.joinMode(JoinMode::InnerJoin);

                QueryBuildRange qbR = qbdsProjTable.addRange(fieldNum(ProjTable,RecId));
                qbR.status(RangeStatus::Hidden);
                qbR.value(strFmt('((%1.%2 == %5) || (%1.%3 == %5) || (%1.%4 == %5))',
                          qbdsProjTable.name(),
                          fieldStr(ProjTable,WorkerResponsibleFinancial),
                          fieldStr(ProjTable, WorkerResponsible),
                          fieldStr(ProjTable, WorkerResponsibleSales),
                          queryValue(hcmWorkerRecId)));
            }
            else
            {
                qbdsTSTimesheetLine.enabled(true);
            }
        }
        else // dont return anything
        {
            if (qbRTSTimesheetTableRecId)
            {
                qbRTSTimesheetTableRecId.enabled(true);
            }
            else
            {
                qbRTSTimesheetTableRecId = qbdsTSTimesheetTable.addRange(fieldNum(TSTimesheetTable,RecId));
                qbRTSTimesheetTableRecId.status(RangeStatus::Hidden);
                qbRTSTimesheetTableRecId.value(queryValue(0));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTimesheetLineMyProjectsRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the 'my projects' range.
    /// </summary>
    protected void clearTimesheetLineMyProjectsRange()
    {
        if (qbdsTSTimesheetLine)
        {
            qbdsTSTimesheetLine.enabled(false);
        }

        if (qbRTSTimesheetTableRecId)
        {
            qbRTSTimesheetTableRecId.enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>