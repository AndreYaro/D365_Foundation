<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobStatusSummaryQueryable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgJobStatusSummaryQueryable</c> class updates the job status summary cache.
/// </summary>
public final class JmgJobStatusSummaryQueryable implements SysIQueryableObjectExecutable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void execute(SysIDataCacheContext _cacheContext)
    {
        SysDataCacheContextId contextId = _cacheContext.parmId();

        ttsbegin;

        this.resetCache(contextId);

        QueryRun qr = new QueryRun(this.buildQuery(_cacheContext));
        while (qr.next())
        {
            if (qr.changed(tableNum(JmgJobStatusNotCompletedView)))
            {
                JmgJobStatusNotCompletedView jobStatus = qr.get(tableNum(JmgJobStatusNotCompletedView));
                this.updateCache(contextId, jobStatus.JobStatus, int642int(jobStatus.RecId));
            }
            if (qr.changed(tableNum(JmgJobStatusCompletedView)))
            {
                JmgJobStatusCompletedView jobStatus = qr.get(tableNum(JmgJobStatusCompletedView));
                this.updateCache(contextId, jobStatus.JobStatus, int642int(jobStatus.RecId));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCache</Name>
				<Source><![CDATA[
    private void resetCache(SysDataCacheContextId  _contextId)
    {
        JmgJobStatusSummaryDataSetTable jmgJobStatusSummaryDataSetTable;

        update_recordset jmgJobStatusSummaryDataSetTable
        setting CountOfJobs = 0
        where jmgJobStatusSummaryDataSetTable.SysDataCacheContextId == _contextId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCache</Name>
				<Source><![CDATA[
    private void updateCache(SysDataCacheContextId  _contextId,
                             JmgJobStatus           _jobStatus,
                             int                    _countOfJobs)
    {
        JmgJobStatusSummaryDataSetTable jmgJobStatusSummaryDataSetTable;

        select forupdate jmgJobStatusSummaryDataSetTable
        where jmgJobStatusSummaryDataSetTable.SysDataCacheContextId == _contextId
           && jmgJobStatusSummaryDataSetTable.JobStatus == _jobStatus;

        jmgJobStatusSummaryDataSetTable.SysDataCacheContextId = _contextId;
        jmgJobStatusSummaryDataSetTable.JobStatus = _jobStatus;
        jmgJobStatusSummaryDataSetTable.CountOfJobs += _countOfJobs;
        jmgJobStatusSummaryDataSetTable.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCache</Name>
				<Source><![CDATA[
    private void insertCache(SysDataCacheContextId  _contextId, 
                             JmgJobStatus           _jobStatus,
                             int                    _countOfJobs)
    {
        JmgJobStatusSummaryDataSetTable jmgJobStatusSummaryDataSetTable;
        jmgJobStatusSummaryDataSetTable.SysDataCacheContextId = _contextId;
        jmgJobStatusSummaryDataSetTable.JobStatus = _jobStatus;
        jmgJobStatusSummaryDataSetTable.CountOfJobs = _countOfJobs;
        jmgJobStatusSummaryDataSetTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery(SysIDataCacheContext _cacheContext)
    {
        SysDataContextValueFilter dataContextValueFilter = _cacheContext.parmDataContextValue(SysDataContextValueTypeEnum::Filter) as SysDataContextValueFilter;
        SysIFilter filter = dataContextValueFilter.parmSourceFilter();
        date fromDate = SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::Date, extendedTypeNum(JmgFilterDate));
        str resourceFilter = SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::String, extendedTypeNum(WrkCtrId));
        str resourceGroupFilter = SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::String, extendedTypeNum(WrkCtrGroupId));
        ProdUnitTable prodUnitTable = ProdUnitTable::findRecId(SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::Record, tableNum(ProdUnitTable)));
        utcdatetime startDateTime = SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::DateTime, extendedTypeNum(JmgAbsenceToDateTime));
        utcdatetime endDateTime = DateTimeUtil::addDays(startDateTime, 1);
        
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(JmgJobStatusNotCompletedView));
        qbds.addSelectionField(fieldNum(JmgJobStatusNotCompletedView, RecId), SelectionField::Count);
        qbds.addGroupByField(fieldNum(JmgJobStatusNotCompletedView, JobStatus));
        qbds.addRange(fieldNum(JmgJobStatusNotCompletedView, FromDate)).value(queryRange(dateNull(), fromDate));
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusNotCompletedView, WrkCtrId), resourceFilter);
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusNotCompletedView, ResourceGroup), resourceGroupFilter);
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusNotCompletedView, ProdUnitId), prodUnitTable.ProdUnitId);

        qbds = q.addDataSource(tableNum(JmgJobStatusCompletedView));
        qbds.unionType(UnionType::UnionAll);
        qbds.addSelectionField(fieldNum(JmgJobStatusCompletedView, RecId), SelectionField::Count);
        qbds.addGroupByField(fieldNum(JmgJobStatusCompletedView, JobStatus));
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusCompletedView, WrkCtrId), resourceFilter);
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusCompletedView, ResourceGroup), resourceGroupFilter);
        this.addRangeIfSet(qbds, fieldNum(JmgJobStatusCompletedView, ProdUnitId), prodUnitTable.ProdUnitId);
        qbds = qbds.addDataSource(tableNum(JmgTermReg));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldNum(JmgTermReg, RegDateTime)).value(queryRange(startDateTime, EndDateTime));
        qbds.addLink(fieldNum(JmgJobStatusCompletedView, JobId), fieldNum(JmgTermReg, JobId));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeIfSet</Name>
				<Source><![CDATA[
    private void addRangeIfSet(QueryBuildDataSource _qbds,
                               FieldId              _fieldId,
                               str                  _range)
    {
        if (_range)
        {
            _qbds.addRange(_fieldId).value(queryValue(_range));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdentifier</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SysQueryableIdentifier parmIdentifier()
    {
        return classStr(JmgJobStatusSummaryQueryable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public str parmDescription()
    {
        return '@SCM:JobsByStatus';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependencySet</Name>
				<Source><![CDATA[
    public SysIDataChangeDetectionDependencySet parmDependencySet()
    {
        SysIDataChangeDetectionDependencySet dependencySet = SysDataChangeDetectionDependencySetFactory::newFromType(SysDataChangeDetectionDependencyTypeEnum::None);

        return dependencySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    public SysDataChangeDetectionMethodEnum parmMethod()
    {
        return SysDataChangeDetectionMethodEnum::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public SysQueryablePacked pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(SysQueryablePacked _packed)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgJobStatusSummaryQueryable construct()
    {
        return new JmgJobStatusSummaryQueryable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>