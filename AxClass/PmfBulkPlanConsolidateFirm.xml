<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBulkPlanConsolidateFirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfBulkPlanConsolidateFirm</c> batchable class firms planned bulk and pack batch orders and creates consolidated orders
/// </summary>
public class PmfBulkPlanConsolidateFirm extends ReqTransPoMarkFirm
{
    private DialogField dialogStopExplosion;
    private NoYes       stopExplosion; 
    private container   consolidatedPlannedBatchOrders;
    private container   bulkPlannedBatchOrdersToFirm;
    private container   packPlannedBatchOrdersToFirm;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        consolidatedPlannedBatchOrders,
        bulkPlannedBatchOrdersToFirm,
        packPlannedBatchOrdersToFirm,
        stopExplosion
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, super(), #CurrentList];
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer   version = RunBase::getVersion(_packedClass);
        container base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Firms planned bulk and pack batch orders and creates consolidated orders
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        var logLineTry = infologLine();

        try
        {
            ttsbegin;
            this.processBulkPlannedBatchOrders();
            this.processPackPlannedBatchOrders();
            
            // firm bulk and pack planned batch orders
            super();
            
            this.createConsolidatedOrders();
            this.markConsolidatedReferenceFirmedBulkBatchOrders();
            this.markConsolidatedReferenceFirmedPackBatchOrders();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            var currentRetryCount = xSession::currentRetryCount();
            if (currentRetryCount < #RetryNum && ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
            {
                ReqTransientSqlConnectionErrorHandlingHelper::delayRetry(currentRetryCount);
                retry;
            }
            this.handleSettingHasErrorsWhenFirming(logLineTry);
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            this.handleSettingHasErrorsWhenFirming(logLineTry);
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            this.handleSettingHasErrorsWhenFirming(logLineTry);
        }
        catch (Exception::Error)
        {
            this.handleSettingHasErrorsWhenFirming(logLineTry);
        }
        catch (Exception::CLRError)
        {
            this.handleCLRException(logLineTry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBulkPlannedBatchOrder</Name>
				<Source><![CDATA[
    private void updateBulkPlannedBatchOrder(TmpPmfConsolidatedBulk _bulkPlannedOrder)
    {
        ReqTrans reqTrans = ReqTrans::findRecId(_bulkPlannedOrder.ReqTransRecId);
        ReqPO reqPO = reqTrans.reqPo(true);

        reqPO.Qty  = _bulkPlannedOrder.Qty;
        reqPO.PurchQty = _bulkPlannedOrder.Qty;
        reqPO.PmfBulkOrd = true;
        reqPO.update(null, null, '', stopExplosion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackPlannedBatchOrder</Name>
				<Source><![CDATA[
    private void updatePackPlannedBatchOrder(TmpPmfConsolidatedPack _packPlannedOrder)
    {
        ReqTrans reqTrans = ReqTrans::findRecId(_packPlannedOrder.ReqTransRecId);
        ReqPO reqPO = reqTrans.reqPo(true);

        reqPO.Qty  = _packPlannedOrder.Qty;
        reqPO.PurchQty = _packPlannedOrder.Qty;
        reqPO.PmfBulkOrd = false;
        reqPO.update(null, null, '', true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBulkPlannedBatchOrders</Name>
				<Source><![CDATA[
    private void processBulkPlannedBatchOrders()
    {
        if (conLen(bulkPlannedBatchOrdersToFirm) > 0)
        {
            Set recordset = Set::create(bulkPlannedBatchOrdersToFirm);
            SetEnumerator se = recordset.getEnumerator();
            TmpPmfConsolidatedBulk bulkPlannedOrder;
            while (se.moveNext())
            {
                bulkPlannedOrder = se.current() as TmpPmfConsolidatedBulk;
                this.updateBulkPlannedBatchOrder(bulkPlannedOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPackPlannedBatchOrders</Name>
				<Source><![CDATA[
    private void processPackPlannedBatchOrders()
    {
        if (conLen(packPlannedBatchOrdersToFirm) > 0)
        {
            Set recordset = Set::create(packPlannedBatchOrdersToFirm);
            SetEnumerator se = recordset.getEnumerator();
            TmpPmfConsolidatedPack packPlannedOrder;
            while (se.moveNext())
            {
                packPlannedOrder = se.current() as TmpPmfConsolidatedPack;
                this.updatePackPlannedBatchOrder(packPlannedOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedOrders</Name>
				<Source><![CDATA[
    private void createConsolidatedOrders()
    {
        RecordInsertList risConsolidatedOrder = new RecordInsertList(tableNum(PmfConsOrd));

        if (conLen(consolidatedPlannedBatchOrders) > 0)
        {
            Set recordset = Set::create(consolidatedPlannedBatchOrders);
            SetEnumerator se = recordset.getEnumerator();
            
            PmfConsOrd              consolidatedOrder;
            TmpPmfConsolidatedOrder tmpConsolidatedOrder;
            while (se.moveNext())
            {
                tmpConsolidatedOrder = se.current() as TmpPmfConsolidatedOrder;
                consolidatedOrder.ConsOrdId     = tmpConsolidatedOrder.ConsOrdId;
                consolidatedOrder.ItemName      = tmpConsolidatedOrder.ItemName;
                consolidatedOrder.ConsQty       = tmpConsolidatedOrder.ConsQty;
                consolidatedOrder.bomUnitId     = tmpConsolidatedOrder.bomUnitId;
                consolidatedOrder.ReqDateOrder  = tmpConsolidatedOrder.ReqDateOrder;
                consolidatedOrder.ReqDateDlv    = tmpConsolidatedOrder.ReqDateDlv;
                consolidatedOrder.ReqTime       = tmpConsolidatedOrder.ReqTime;
                consolidatedOrder.ReqTimeOrder  = tmpConsolidatedOrder.ReqTimeOrder;
                risConsolidatedOrder.add(consolidatedOrder);
            }
        }
        risConsolidatedOrder.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markConsolidatedReferenceFirmedBulkBatchOrders</Name>
				<Source><![CDATA[
    private void markConsolidatedReferenceFirmedBulkBatchOrders()
    {
        if (conLen(bulkPlannedBatchOrdersToFirm) > 0)
        {
            Set recordset = Set::create(bulkPlannedBatchOrdersToFirm);
            SetEnumerator se = recordset.getEnumerator();
            TmpPmfConsolidatedBulk bulkPlannedOrder;
            ProdTable bulkBatchOrder;              
            while (se.moveNext())
            {
                bulkPlannedOrder = se.current() as TmpPmfConsolidatedBulk;

                update_recordset bulkBatchOrder
                    setting PmfConsOrdId = bulkPlannedOrder.ConsOrdId
                    where bulkBatchOrder.ReqPOId == bulkPlannedOrder.RefId &&
                          bulkBatchOrder.ItemId  == bulkPlannedOrder.ItemId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markConsolidatedReferenceFirmedPackBatchOrders</Name>
				<Source><![CDATA[
    private void markConsolidatedReferenceFirmedPackBatchOrders()
    {
        if (conLen(packPlannedBatchOrdersToFirm) > 0)
        {
            Set recordset = Set::create(packPlannedBatchOrdersToFirm);
            SetEnumerator se = recordset.getEnumerator();
            TmpPmfConsolidatedPack packPlannedOrder;
            ProdTable packBatchOrder;
            while (se.moveNext())
            {
                packPlannedOrder = se.current() as TmpPmfConsolidatedPack;

                update_recordset packBatchOrder
                    setting PmfConsOrdId = packPlannedOrder.ConsOrdId
                    where packBatchOrder.ReqPOId == packPlannedOrder.RefId &&
                          packBatchOrder.ItemId  == packPlannedOrder.ItemId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PmfBulkPlanConsolidateFirm construct()
    {
        return new PmfBulkPlanConsolidateFirm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            PmfBulkPlanConsolidateFirm bulkPlanConsolidateFirm = PmfBulkPlanConsolidateFirm::construct();

            bulkPlanConsolidateFirm.getLast();
            bulkPlanConsolidateFirm.initializeFromArgs(_args);
            bulkPlanConsolidateFirm.executeAction();
            bulkPlanConsolidateFirm.cleanTempStorage(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMap</Name>
				<Source><![CDATA[
    public static PmfBulkPlanConsolidateFirm newMap(TmpPmfConsolidatedOrder _plannedBatchOrdersConsolidate, TmpPmfConsolidatedBulk _plannedBatchOrdersBulk, TmpPmfConsolidatedPack _plannedBatchOrdersPack)
    {
        PmfBulkPlanConsolidateFirm bulkPlanConsolidateFirm = PmfBulkPlanConsolidateFirm::construct();

        bulkPlanConsolidateFirm.initializeFromTmpSource(_plannedBatchOrdersConsolidate, _plannedBatchOrdersBulk, _plannedBatchOrdersPack);

        return bulkPlanConsolidateFirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromArgs</Name>
				<Source><![CDATA[
    protected void initializeFromArgs(Args _args)
    {
        FormRun caller = _args.caller() as FormRun;

        if (!caller || !caller.args().caller())
        {
            throw error("@SYS111577");
        }

        FormDataSource tmpConsOrd_ds = caller.dataSource(formDataSourceStr(PmfBulkPlanConsolidate, tmpConsOrd)) as FormDataSource;
        PmfBulkPlanMarkValidate bulkPlanMarkValidate = caller.args().caller();

        this.initializeFromTmpSource(tmpConsOrd_ds.cursor(), bulkPlanMarkValidate.parmTmpConsBulk(), bulkPlanMarkValidate.parmTmpConsPack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpSource</Name>
				<Source><![CDATA[
    private void initializeFromTmpSource(TmpPmfConsolidatedOrder _plannedBatchOrdersConsolidate, TmpPmfConsolidatedBulk _plannedBatchOrdersBulk, TmpPmfConsolidatedPack _plannedBatchOrdersPack)
    {
        TmpPmfConsolidatedOrder plannedBatchOrdersConsolidate;
        plannedBatchOrdersConsolidate.setTmpData(_plannedBatchOrdersConsolidate);

        TmpPmfConsolidatedBulk  plannedBatchOrdersBulk;
        TmpPmfConsolidatedPack  plannedBatchOrdersPack;
        Map markedRecordsMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

        plannedBatchOrdersBulk.setTmpData(_plannedBatchOrdersBulk);
        plannedBatchOrdersPack.setTmpData(_plannedBatchOrdersPack);
        
        this.populateConsolidatedOrders(plannedBatchOrdersConsolidate);
        this.populateConsolidatedBulkOrders(plannedBatchOrdersConsolidate, plannedBatchOrdersBulk, markedRecordsMap);
        this.populateConsolidatedPackOrders(plannedBatchOrdersConsolidate, plannedBatchOrdersPack, markedRecordsMap);
        this.parmConReqTransMark(markedRecordsMap.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateConsolidatedOrders</Name>
				<Source><![CDATA[
    private void populateConsolidatedOrders(TmpPmfConsolidatedOrder plannedBatchOrdersConsolidate)
    {
        List listConsolidatedPlannedBatchOrders = new List(Types::Record);
        while select plannedBatchOrdersConsolidate
            where plannedBatchOrdersConsolidate.ReqTransMark
        {
            listConsolidatedPlannedBatchOrders.addEnd(plannedBatchOrdersConsolidate);
        }

        if (!listConsolidatedPlannedBatchOrders.elements())
        {
            throw error("@SCM:PmfBulkPlanConsolidateBatchableFirmNoConsolidatedOrders");
        }

        consolidatedPlannedBatchOrders = listConsolidatedPlannedBatchOrders.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateConsolidatedBulkOrders</Name>
				<Source><![CDATA[
    private void populateConsolidatedBulkOrders(TmpPmfConsolidatedOrder plannedBatchOrdersConsolidate, TmpPmfConsolidatedBulk plannedBatchOrdersBulk, Map markedRecordsMap)
    {
        List     listBulkPlannedBatchOrdersToFirm = new List(Types::Record);
        ReqTrans reqTrans;

        while select RecId
            from plannedBatchOrdersConsolidate
            join plannedBatchOrdersBulk
            where plannedBatchOrdersConsolidate.ReqTransMark
               && plannedBatchOrdersConsolidate.ConsOrdId == plannedBatchOrdersBulk.ConsOrdId
               && (plannedBatchOrdersBulk.Qty != 0)
        {
            listBulkPlannedBatchOrdersToFirm.addEnd(plannedBatchOrdersBulk);
            reqTrans = ReqTrans::findRecId(plannedBatchOrdersBulk.ReqTransRecId);
            markedRecordsMap.insert(reqTrans.RecId, reqTrans);
        }

        bulkPlannedBatchOrdersToFirm = listBulkPlannedBatchOrdersToFirm.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateConsolidatedPackOrders</Name>
				<Source><![CDATA[
    private void populateConsolidatedPackOrders(TmpPmfConsolidatedOrder plannedBatchOrdersConsolidate, TmpPmfConsolidatedPack plannedBatchOrdersPack, Map markedRecordsMap)
    {
        List     listPackPlannedBatchOrdersToFirm = new List(Types::Record);
        ReqTrans reqTrans;

        while select RecId
            from plannedBatchOrdersConsolidate
            join plannedBatchOrdersPack
            where plannedBatchOrdersConsolidate.ReqTransMark
               && plannedBatchOrdersConsolidate.ConsOrdId == plannedBatchOrdersPack.ConsOrdId
               && (plannedBatchOrdersPack.Qty != 0)
        {
            listPackPlannedBatchOrdersToFirm.addEnd(plannedBatchOrdersPack);
            reqTrans = ReqTrans::findRecId(plannedBatchOrdersPack.ReqTransRecId);
            markedRecordsMap.insert(reqTrans.RecId, reqTrans);
        }

        packPlannedBatchOrdersToFirm = listPackPlannedBatchOrdersToFirm.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanTempStorage</Name>
				<Source><![CDATA[
    private void cleanTempStorage(Args _args)
    {
        if (this.mustGoBatch() || !this.dialogCanceled)
        {
            FormRun form = _args.caller();
            FormDataSource tmpConsolidatedOrders_ds = form.dataSource(formDataSourceStr(PmfBulkPlanConsolidate, tmpConsOrd)) as FormDataSource;
            TmpPmfConsolidatedOrder plannedBatchOrdersConsolidate;

            plannedBatchOrdersConsolidate.setTmpData(tmpConsolidatedOrders_ds.cursor());

            delete_from plannedBatchOrdersConsolidate
                where plannedBatchOrdersConsolidate.ReqTransMark;

            tmpConsolidatedOrders_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = this.dialogInternal();

        this.dialogAddDefaultFields(dialog, true, false);

        dialogStopExplosion = dialog.addFieldValue(enumStr(NoYes), stopExplosion, "@SYS22004");
        dialogMarkUpdate = dialog.addFieldValue(enumStr(ReqMarkUpdate), reqMarkUpdate);
        dialogMarkUpdate.visible(false);

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dialogStopExplosion)
        {
            stopExplosion = dialogStopExplosion.value();
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunExplosion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if explosion logic can run during firming of planned order.
    /// </summary>
    /// <returns>True if explosion logic can run; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean canRunExplosion()
    {
        return !stopExplosion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>