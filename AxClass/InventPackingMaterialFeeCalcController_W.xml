<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPackingMaterialFeeCalcController_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPackingMaterialFeeCalcController_W</c> class implements a custom controller
/// for the <c>InventPackingMaterialFeeCalc_W</c> report.
/// </summary>
public class InventPackingMaterialFeeCalcController_W extends SrsReportRunController implements BatchRetryable
{
    private InventPackagingJour_W packagingJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPackagingJour</Name>
				<Source><![CDATA[
    public InventPackagingJour_W parmPackagingJour(InventPackagingJour_W _packagingJour = packagingJour)
    {
        packagingJour = _packagingJour;
        return packagingJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (InventParameters::isPackingMaterialTariffCatEnabled_W())
        {
            InventPackingMaterialFeeCalcContract_W contract = this.parmReportContract().parmRdpContract() as InventPackingMaterialFeeCalcContract_W;

            contract.parmFromDate(packagingJour.FromDate);
            contract.parmToDate(packagingJour.ToDate);
            contract.parmJourRecId(packagingJour.RecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Choose the report by using the caller and country region code, and process report.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>InventPackingMaterialFeeCalcController_W</c> class.
    /// </param>
    public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        InventPackingMaterialFeeCalcController_W controller = new InventPackingMaterialFeeCalcController_W();

        controller.parmArgs(_args);

        if (InventParameters::isPackingMaterialTariffCatEnabled_W())
        {
            GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
                [#isoAT, GlobalizationConstants::FeatureReferenceAT00013] ],
                funcName()
            );

            if (! _args.record())
            {
                throw error("@PackingMaterial:InventPackingMaterialJour");
            }
            else
            {
                if (_args.dataset() != tableNum(InventPackagingJour_W))
                {
                    throw error(Error::missingRecord("@PackingMaterial:InventPackagingJour"));
                }

                controller.parmPackagingJour(_args.record());
            }

            controller.parmReportName(ssrsReportStr(InventPackingMaterialFeeCalc_W, Report));
            controller.parmReportContract();
            controller.run();
        }
        else
        {
            controller.parmReportName(ssrsReportStr(InventPackingMaterialFeeCalc, Report));
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>