<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSalesOrderCancellation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchCancelSalesLine</c> class cancels sales orders and sales order lines attached to purchase order.
/// </summary>
class PurchSalesOrderCancellation extends McrSalesOrderCancellation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrSalesOrderCancelInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the call center order cancellation.
    /// </summary>
    /// <param name = "_mcrSalesOrderCancellation">The call center order cancellation record.</param>
    /// <param name = "_purchLineRefTransId">The linked purchase line.</param>
    /// <returns>The <c>MCRSalesOrderCancellation</c> class which cancels sales orders and sales order lines.</returns>
    public MCRSalesOrderCancellation mcrSalesOrderCancelInit(MCRSalesOrderCancellation _mcrSalesOrderCancellation, TradeInventTransId _purchLineRefTransId)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            SalesLine salesLine = SalesLine::findInventTransId(_purchLineRefTransId, true);

            using (var activityContext = this.instrumentationLogger().purchSalesOrderCancellationActivities().mcrSalesOrderCancelInit(salesLine))
            {
                if (salesLine)
                {
                    _mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
                    _mcrSalesOrderCancellation.preCancel(SalesTable::find(salesLine.SalesId));
                }
            }
        }
        return _mcrSalesOrderCancellation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesOrderCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the call center order cancellation.
    /// </summary>
    /// <param name = "_mcrSalesOrderCancellation">The call center order cancellation record.</param>
    /// <param name = "_purchLineRefTransId">The linked purchase line.</param>
    public void mcrSalesOrderCancel(MCRSalesOrderCancellation _mcrSalesOrderCancellation, TradeInventTransId _purchLineRefTransId)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            SalesLine salesLine = SalesLine::findInventTransId(_purchLineRefTransId,true);

            using (var activityContext = this.instrumentationLogger().purchSalesOrderCancellationActivities().mcrSalesOrderCancel(salesLine))
            {
                if (salesLine)
                {
                    SalesTable salesTable = SalesTable::find(salesLine.SalesId, true);
                    if (salesLine.SalesStatus == SalesStatus::Canceled)
                    {
                        SalesLine salesLineLocal = SalesLine::findRecId(salesLine.RecId);
                        _mcrSalesOrderCancellation.postCancelLine(salesLineLocal);
                        // Additional find in case the status changed in the postCancelLine method
                        salesTable = SalesTable::find(salesLine.SalesId,true);

                        if (salesTable.SalesStatus == SalesStatus::Canceled)
                        {
                            _mcrSalesOrderCancellation.postCancelOrder(salesTable);
                        }
                    }

                    // Additional find in case the status changed in the postCancelLine or postCancelOrder method
                    salesTable = SalesTable::find(salesLine.SalesId, true);
                    _mcrSalesOrderCancellation.postCancelAdjPayment(salesTable);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>