<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionActionDetailFormExtensionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite form extension events for the <c>HcmPositionActionDetail</c> form.
/// </summary>
/// <remarks>
/// The HcmTmpBudgetPurposeType table is added to the list of datasources on the form extesnion for
/// security purposes only.
/// This table is used to build the data for the budget purpose type custom lookup and must be made
/// accessible to all roles that can access this form and the lookup.
/// Removing this table from the list of datasources could cause functionality problems.
/// </remarks>
public static class HcmPositionActionDetailFormExtensionAppSuiteHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmPositionActionDetail_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitialized event handler for the HcmPositionActionDetail.ExtensionAppSuite form extension.
    /// </summary>
    /// <param name="_sender">The instance of the HcmPositionActionDetail form being initialized.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmPositionActionDetail), FormEventType::Initialized)]
    public static void HcmPositionActionDetail_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        FormRun positionActionDetailForm = _sender as FormRun;

        if (positionActionDetailForm)
        {
            FormGridControl defaultDimensionsGrid = positionActionDetailForm.design().controlName(formControlStr(HcmPositionActionDetail, PositionActionDefaultDimensions));
            FormTabPageControl dimensionGridTabPage = positionActionDetailForm.design().controlName(formControlStr(HcmPositionActionDetail, DimensionsGridTabPage));
            FormGroupControl budgetDefaultGroup = positionActionDetailForm.design().controlName(formControlStr(HcmPositionActionDetail, BudgetDefaultGroup));
            FormGroupControl budgetAcctLineGroup = positionActionDetailForm.design().controlName(formControlStr(HcmPositionActionDetail, BudgetAcctLineGroup));

            if (defaultDimensionsGrid 
                && dimensionGridTabPage 
                && budgetDefaultGroup
                && budgetAcctLineGroup)
            {
                dimensionGridTabPage.moveControl(budgetDefaultGroup.id(), defaultDimensionsGrid.id());
                dimensionGridTabPage.moveControl(budgetAcctLineGroup.id(), budgetDefaultGroup.id());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetAccountLine_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnActivated event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetAccountLine data source.
    /// </summary>
    /// <param name="_sender">The form data source being activated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine), FormDataSourceEventType::Activated)]
    public static void HcmPositionActionBudgetAccountLine_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun positionActionDetailForm = _sender.formRun();
        FormDataSource hcmActionState_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionState)) as FormDataSource;
        HcmActionState hcmActionState = hcmActionState_ds.cursor();
        FormDataSource hcmActionTypeSetup_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionTypeSetup)) as FormDataSource;
        HcmActionTypeSetup hcmActionTypeSetup = hcmActionTypeSetup_ds.cursor();
        FormDataSource hcmPositionAction_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionAction)) as FormDataSource;
        HcmPositionAction hcmPositionAction = hcmPositionAction_ds.cursor();
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine = _sender.cursor();
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(positionActionDetailForm);

        boolean allowWorkflowEdit = hcmActionState.isApprovalEditable() && hcmActionState.canUserEditApproval(hcmActionState);
        boolean isMissingPositionReference = (hcmActionTypeSetup.ActionType == HcmActionType::PositionEdit && hcmPositionAction.PositionReference == 0);
        boolean allowEdit = allowWorkflowEdit
                        && !isMissingPositionReference
                        && hcmPositionActionBudgetAccountLine.isLastEffectiveVersion(hcmPositionAction.PositionReference,
                                                                             selectedDataAreaRecId,
                                                                             hcmPositionActionBudgetAccountLine.BudgetPurposeType,
                                                                             hcmPositionAction.EffectiveOn);

        _sender.allowEdit(allowEdit);
        _sender.allowDelete(allowEdit);

        FormDataObject okToExpireAccountLineDataObject = _sender.object(fieldNum(HcmPositionActionBudgetAccountLine, OkToExpire));
        okToExpireAccountLineDataObject.allowEdit(any2int(hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetAccountLine_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnQueryExecuting event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetAccountLine data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine), FormDataSourceEventType::QueryExecuting)]
    public static void HcmPositionActionBudgetAccountLine_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.formRun());
        QueryBuildRange rangeBudgetAccountLineLegalEntity;

        rangeBudgetAccountLineLegalEntity = SysQuery::findOrCreateRange(_sender.query().dataSourceTable(tablenum(HcmPositionActionBudgetAccountLine)), fieldnum(HcmPositionActionBudgetAccountLine, LegalEntity));
        rangeBudgetAccountLineLegalEntity.value(queryValue(selectedDataAreaRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetAccountLine_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitValue event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetAccountLine data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine), FormDataSourceEventType::InitValue)]
    public static void HcmPositionActionBudgetAccountLine_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.FormRun());
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine = _sender.cursor();
        hcmPositionActionBudgetAccountLine.LegalEntity = selectedDataAreaRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetDefaultValue_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnActivated event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetDefaultValue data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetDefaultValue form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetDefaultValue), FormDataSourceEventType::Activated)]
    public static void HcmPositionActionBudgetDefaultValue_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun positionActionDetailForm = _sender.formRun();
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.formRun());
        FormDataSource hcmActionState_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionState)) as FormDataSource;
        HcmActionState hcmActionState = hcmActionState_ds.cursor();
        HcmPositionActionBudgetDefaultValue hcmPositionActionBudgetDefaultValue = _sender.cursor();
        FormDataSource hcmActionTypeSetup_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionTypeSetup)) as FormDataSource;
        HcmActionTypeSetup hcmActionTypeSetup = hcmActionTypeSetup_ds.cursor();
        FormDataSource hcmPositionAction_ds = positionActionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionAction)) as FormDataSource;
        HcmPositionAction hcmPositionAction = hcmPositionAction_ds.cursor();

        boolean allowWorkflowEdit = hcmActionState.isApprovalEditable() && hcmActionState.canUserEditApproval(hcmActionState);
        boolean isMissingPositionReference = (hcmActionTypeSetup.ActionType == HcmActionType::PositionEdit && hcmPositionAction.PositionReference == 0);
        boolean allowEdit = allowWorkflowEdit && !isMissingPositionReference;

        _sender.allowEdit(allowEdit && hcmPositionActionBudgetDefaultValue.isLastEffectiveVersion(hcmPositionAction.PositionReference, selectedDataAreaRecId, hcmPositionAction.EffectiveOn));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetDefaultValue_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitValue event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetDefaultValue data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetDefaultValue form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetDefaultValue), FormDataSourceEventType::InitValue)]
    public static void HcmPositionActionBudgetDefaultValue_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.formRun());
        HcmPositionActionBudgetDefaultValue hcmPositionActionBudgetDefaultValue = _sender.cursor();
        FormDataSource hcmActionState_ds = _sender.formRun().dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionState)) as FormDataSource;
        HcmActionState hcmActionState = hcmActionState_ds.cursor();

        hcmPositionActionBudgetDefaultValue.ActionState = hcmActionState.RecId;
        hcmPositionActionBudgetDefaultValue.LegalEntity = selectedDataAreaRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetDefaultValue_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnQueryExecuting event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetDefaultValue data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetDefaultValue form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetDefaultValue), FormDataSourceEventType::QueryExecuting)]
    public static void HcmPositionActionBudgetDefaultValue_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.formRun());
        QueryBuildRange rangeBudgetDefaultLegalEntity;

        rangeBudgetDefaultLegalEntity = SysQuery::findOrCreateRange(_sender.query().dataSourceTable(tablenum(HcmPositionActionBudgetDefaultValue)), fieldnum(HcmPositionActionBudgetDefaultValue, LegalEntity));
        rangeBudgetDefaultLegalEntity.value(queryValue(selectedDataAreaRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>BudgetAcctLineDeleteButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnClicked event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// BudgetAcctLineDeleteButton control.
    /// </summary>
    /// <param name="_sender">The form control being clicked.</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmPositionActionDetail, BudgetAcctLineDeleteButton), FormControlEventType::Clicked)]
    public static void BudgetAcctLineDeleteButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun actionDetailForm = _sender.formRun();
        FormDataSource hcmPositionActionBudgetAccountLine_ds = actionDetailForm.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine)) as FormDataSource;
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine = hcmPositionActionBudgetAccountLine_ds.cursor();

        if (hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId)
        {
            HcmPositionActionDetailFormExtensionAppSuiteHandler::expireHcmPositionActionBudgetAccountLineDS(hcmPositionActionBudgetAccountLine_ds, hcmPositionActionBudgetAccountLine);

            FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionBudgetAccountLine_OnValidatedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnValidated event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmPositionActionBudgetAccountLine data source.
    /// </summary>
    /// <param name="_sender">The HcmPositionActionBudgetAccountLine form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine), FormDataSourceEventType::ValidatedDelete)]
    public static void HcmPositionActionBudgetAccountLine_OnValidatedDelete(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        HcmPositionActionBudgetAccountLine hcmPositionActionBudgetAccountLine = _sender.cursor();

        if (hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId)
        {
            HcmPositionActionDetailFormExtensionAppSuiteHandler::expireHcmPositionActionBudgetAccountLineDS(_sender, hcmPositionActionBudgetAccountLine);

            // The record is based on existing position data and con only be expired.
            throw error("@Workforce:TheSelectedLineCannotBeRemovedBecauseItsHistoryMustBeTracked");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmPositionActionDetail_legalEntityModifiedCalled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the legalEntityModifiedCalled delegate from the <c>HcmPositionActionDetail</c> form.
    /// </summary>
    /// <param name="_formElement">The form from which the instance was initiated.</param>
    /// <param name="_actionStateRecId">The action state record identifier.</param>
    /// <param name="_selectedDataAreaRecId">The selected Legal Entity value from the form.</param>
    [SubscribesTo(formStr(HcmPositionActionDetail), delegateStr(HcmPositionActionDetail, legalEntityModifiedCalled))]
    public static void HcmPositionActionDetail_legalEntityModifiedCalled(FormRun _formElement, RefRecId _actionStateRecId, RefRecId _selectedDataAreaRecId)
    {
        HcmPositionActionBudgetDefaultValue defaultBudgetDefaultReset;
        HcmPositionActionBudgetAccountLine defaultBudgetAccountReset;

        // Find the existing record or set the default values if it doesn't exist
        defaultBudgetDefaultReset = HcmPositionActionBudgetDefaultValue::findByActionStateLegalEntity(_actionStateRecId, _selectedDataAreaRecId);

        if (!defaultBudgetDefaultReset)
        {
            defaultBudgetDefaultReset.ActionState = _actionStateRecId;
            defaultBudgetDefaultReset.LegalEntity = _selectedDataAreaRecId;
        }
        // Reset the datasource so it knows to do an insert vs. update based on new LE choice
        FormDataSource hcmPositionActionBudgetDefaultValue_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetDefaultValue)) as FormDataSource;
        HcmPositionActionBudgetDefaultValue hcmPositionActionBudgetDefaultValue = hcmPositionActionBudgetDefaultValue_ds.cursor();
        hcmPositionActionBudgetDefaultValue.data(defaultBudgetDefaultReset);
        hcmPositionActionBudgetDefaultValue_ds.executeQuery();

        // Find the existing record or set the default values if it doesn't exist
        _formElement.setLDDAC_COAContext();
        defaultBudgetAccountReset = HcmPositionActionBudgetAccountLine::findByActionStateLegalEntity(_actionStateRecId, _selectedDataAreaRecId);

        if (!defaultBudgetAccountReset)
        {
            defaultBudgetAccountReset.ActionState = _actionStateRecId;
            defaultBudgetAccountReset.LegalEntity = _selectedDataAreaRecId;
        }

        // Reset the datasource so it knows to do an insert vs. update based on new LE choice
        FormDataSource hcmPositionActionBudgetAccountLine_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine)) as FormDataSource;
        hcmPositionActionBudgetAccountLine_ds.cursor().data(defaultBudgetAccountReset);
        hcmPositionActionBudgetAccountLine_ds.executeQuery();

        HcmPositionActionDetailFormExtensionAppSuiteHandler::setDataSourceAndControlProperties(_formElement, _selectedDataAreaRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmActionState_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnValidated event handler for the <c>HcmPositionActionDetail.ExtensionAppSuite</c> form extension's
    /// HcmActionState data source.
    /// </summary>
    /// <param name="_sender">The HcmActionState form data source.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmPositionActionDetail, HcmActionState), FormDataSourceEventType::Activated)]
    public static void HcmActionState_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RefRecId selectedDataAreaRecId = HcmPositionActionDetailFormExtensionAppSuiteHandler::getSelectedDataAreaRecId(_sender.formRun());
        HcmPositionActionDetailFormExtensionAppSuiteHandler::setDataSourceAndControlProperties(_sender.formRun(), selectedDataAreaRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedDataAreaRecId</Name>
				<Source><![CDATA[
    private static RefRecId getSelectedDataAreaRecId(FormRun _positionActionDetailForm)
    {
        FormStringControl legalEntityControl = _positionActionDetailForm.design().controlName(formControlStr(HcmPositionActionDetail, LegalEntity)) as FormStringControl;
        return CompanyInfo::findDataArea(legalEntityControl.text()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSourceAndControlProperties</Name>
				<Source><![CDATA[
    private static void setDataSourceAndControlProperties(FormRun _formElement, RefRecId _selectedDataAreaRecId)
    {
        FormDataSource hcmActionState_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionState)) as FormDataSource;
        HcmActionState hcmActionState = hcmActionState_ds.cursor();
        FormDataSource hcmPositionAction_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionAction)) as FormDataSource;
        HcmPositionAction hcmPositionAction = hcmPositionAction_ds.cursor();
        FormDataSource hcmActionTypeSetup_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmActionTypeSetup)) as FormDataSource;
        HcmActionTypeSetup hcmActionTypeSetup = hcmActionTypeSetup_ds.cursor();

        boolean allowWorkflowEdit = hcmActionState.isApprovalEditable() && hcmActionState.canUserEditApproval(hcmActionState);
        boolean isMissingPositionReference = (hcmActionTypeSetup.ActionType == HcmActionType::PositionEdit && hcmPositionAction.PositionReference == 0);
        boolean allowEdit = allowWorkflowEdit && !isMissingPositionReference;

        FormDataSource hcmPositionActionBudgetAccountLine_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetAccountLine)) as FormDataSource;
        hcmPositionActionBudgetAccountLine_ds.allowCreate(allowEdit);
        FormDataSource hcmPositionActionBudgetDefaultValue_ds = _formElement.dataSource(formDataSourceStr(HcmPositionActionDetail, HcmPositionActionBudgetDefaultValue)) as FormDataSource;
        hcmPositionActionBudgetDefaultValue_ds.allowEdit(allowEdit && hcmPositionActionBudgetDefaultValue_ds.cursor().isLastEffectiveVersion(hcmPositionAction.PositionReference, _selectedDataAreaRecId, hcmPositionAction.EffectiveOn));

        FormActionPaneControl budgetAcctLineActionPaneControl = _formElement.design().controlName(formControlStr(HcmPositionActionDetail, BudgetAcctLineActionPane)) as FormActionPaneControl;
        budgetAcctLineActionPaneControl.enabled(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireHcmPositionActionBudgetAccountLineDS</Name>
				<Source><![CDATA[
    private static void expireHcmPositionActionBudgetAccountLineDS(FormDataSource _hcmPositionActionBudgetAccountLine_ds, HcmPositionActionBudgetAccountLine _hcmPositionActionBudgetAccountLine)
    {
        if (_hcmPositionActionBudgetAccountLine.PositionBudgetAccountLineRecId)
        {
            _hcmPositionActionBudgetAccountLine.OkToExpire = true;
            _hcmPositionActionBudgetAccountLine_ds.leaveRecord();

            FormGridControl budgetAccountLineGridControl = _hcmPositionActionBudgetAccountLine_ds.formRun().design().controlName(formControlStr(HcmPositionActionDetail, BudgetAccountLineGrid)) as FormGridControl;
            budgetAccountLineGridControl.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>