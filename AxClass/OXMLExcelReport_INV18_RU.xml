<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_INV18_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form INV-18 to excel
/// </summary>
class OxmlExcelReport_INV18_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    DialogField             dialogStandardId;
    RAssetInventoryTable    assetInventoryTable;
    RAssetInventoryTrans    assetInventoryTrans;

    RAssetStandardId        assetStandardId;
    DialogField             dialogInventoryDate;
    RAssetTransDate         inventoryDate;
    RAssetInventoryNum      inventoryNum;

    RAssetTable             assetTable;

    Counter                 item,
                            totalItem;

    HrmDescription          responsibleDescr1,
                            responsibleDescr2;
    HcmWorkerName           responsibleName1,
                            responsibleName2;

    InventQtyJournal        totalQtySurplus,
                            totalQtyDeficit;

    RAssetAmount            totalAmountSurplus,
                            totalAmountDeficit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    protected void addTotals()
    {
        totalQtySurplus    += this.surplusQty();
        totalQtyDeficit    += this.deficitQty();
        totalAmountSurplus += this.surplusAmount();
        totalAmountDeficit += this.deficitAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return document.getNamedRangeHeightWrapped('Name', assetTable.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    protected void clearTotals()
    {
        totalQtySurplus    = 0;
        totalQtyDeficit    = 0;
        totalAmountSurplus = 0;
        totalAmountDeficit = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeOKPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to get OKPO code
    /// </summary>
    /// <returns>
    /// Current company's OKPO Code
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected OKPO_RU codeOKPO()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), inventoryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        const int width22 = 22;

        curWorkSheetNum = 1;
        widthCols       = width22;

        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for day of month
    /// </summary>
    /// <returns>
    /// Display value for day of month
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DateValue_RU dayOfEndDate()
    {
        return int2str(dayOfMth(assetInventoryTable.EndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deficitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns deficit(loss) amount for current asset
    /// </summary>
    /// <returns>
    /// Deficit(loss) amount for current asset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetAmount deficitAmount()
    {
        if (assetInventoryTrans.FactQty < assetInventoryTrans.AccountingQty)
            return assetInventoryTrans.NetBookValue;
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deficitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns deficit(loss) qty for current asset
    /// </summary>
    /// <returns>
    /// Deficit(loss) qty for current asset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQtyJournal deficitQty()
    {
        if (assetInventoryTrans.FactQty < assetInventoryTrans.AccountingQty)
            return 1;
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through header recordset, fetching data associated with it
    /// </summary>
    /// <returns>
    /// true if data successfully fetched
    /// </returns>
    protected boolean fetchHeader()
    {
        EmployeeTable_RU employeeTable;

        if (queryRunHeader.next())
        {
            assetInventoryTable = queryRunHeader.get(tableNum(RAssetInventoryTable));

            numOfLines = this.getNumOfLines();

            employeeTable = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable1);

            responsibleDescr1 = HcmPosition::findByPosition(employeeTable.worker().primaryPositionId()).description();
            responsibleDescr1 = responsibleDescr1 ? responsibleDescr1 : employeeTable.worker().primaryPositionId();
            responsibleName1  = employeeTable.employeeName();

            employeeTable = EmployeeTable_RU::findByEmployeeId(assetInventoryTable.EmployeeTable2);

            responsibleDescr2 = HcmPosition::findByPosition(employeeTable.worker().primaryPositionId()).description();
            responsibleDescr2 = responsibleDescr2 ? responsibleDescr2 : employeeTable.worker().primaryPositionId();
            responsibleName2  = employeeTable.employeeName();

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through lines recordset, fetching data associated with it
    /// </summary>
    /// <returns>
    /// true if data successfully fetched
    /// </returns>
    protected boolean fetchLines()
    {
        if (queryRunLines.next())
        {
            assetTable          = queryRunLines.get(tableNum(RAssetTable));
            assetInventoryTrans = queryRunLines.get(tableNum(RAssetInventoryTrans));
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'INV_18';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// inventory number
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return inventoryNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'INV18';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection('LineNo'        , lineNo);
        this.insertValueToSection('Name'          , assetTable.Name);
        this.insertValueToSection('YearOfRelease' , this.guaranteeDate());
        this.insertValueToSection('InventoryNum'  , assetInventoryTrans.AccountNum);
        this.insertValueToSection('SerialNum'     , assetTable.SerialNum);
        this.insertValueToSection('SurplusQty'    , this.surplusQty());
        this.insertValueToSection('SurplusAmount' , this.surplusAmount());
        this.insertValueToSection('DeficitQty'    , this.deficitQty());
        this.insertValueToSection('DeficitAmount' , this.deficitAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('pageNum', this.pageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection('surplusQtyTotal'   , totalQtySurplus);
        this.insertValueToSection('surplusAmountTotal', totalAmountSurplus);
        this.insertValueToSection('deficitQtyTotal'   , totalQtyDeficit);
        this.insertValueToSection('deficitAmountTotal', totalAmountDeficit);
        this.insertValueToSection('Accountant'        , this.getAccountant());
        this.insertValueToSection('RespTitle1'        , responsibleDescr1);
        this.insertValueToSection('RespName1'         , responsibleName1);
        this.insertValueToSection('RespTitle2'        , responsibleDescr2);
        this.insertValueToSection('RespName2'         , responsibleName2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        this.insertValueToSection('CompanyName'         , this.organizationName());
        this.insertValueToSection('Department'          , assetInventoryTable.Location);
        this.insertValueToSection('OKPO'                , this.codeOKPO());
        this.insertValueToSection('InventoryOrder'      , assetInventoryTable.InventoryOrder);
        this.insertValueToSection('inventoryDate'       , inventoryDate);
        this.insertValueToSection('StartDate'           , assetInventoryTable.StartDate);
        this.insertValueToSection('EndDate'             , assetInventoryTable.EndDate);
        this.insertValueToSection('OrderNum'            , assetInventoryTable.InventoryOrder);
        this.insertValueToSection('OrderDate'           , inventoryDate);
        this.insertValueToSection('DayDateEnd'          , this.dayOfEndDate());
        this.insertValueToSection('MonthDateEnd'        , this.monthOfEndDate());
        this.insertValueToSection('YearDateEnd'         , this.yearOfEndDate());
        this.insertValueToSection('ResponsibleTitle1'   , responsibleDescr1);
        this.insertValueToSection('ResponsibleName1'    , responsibleName1);
        this.insertValueToSection('ResponsibleTitle2'   , responsibleDescr2);
        this.insertValueToSection('ResponsibleName2'    , responsibleName2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to get accountant name
    /// </summary>
    /// <returns>
    /// Accountant name
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Name getAccountant()
    {
        return OfficialsTable_RU::find(OffReportType_RU::InventINV19, OffPosition_RU::Accountant).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of lines in lines recordset
    /// </summary>
    /// <returns>
    /// Number of lines in lines recordset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int getNumOfLines()
    {
        return int642int((select count(RecId) from rAssetInventoryTrans
            where rAssetInventoryTrans.InventoryTableRecId == assetInventoryTable.RecId &&
                  rAssetInventoryTrans.AssetStandardId     == assetStandardId           &&
                  rAssetInventoryTrans.AccountingQty       != rAssetInventoryTrans.FactQty).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>guaranteeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Guarantee date for current asset
    /// </summary>
    /// <returns>
    /// Guarantee date for current asset converted to string
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DateValue_RU guaranteeDate()
    {
        if (assetTable.GuaranteeDate)
        {
            return int2str(assetTable.ReleaseYear);
        }
        else
        {
            return "@GLS102907";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if parameters specified
    /// </returns>
    public boolean init()
    {
        RAssetCollationStatementReport caller;

        boolean ret = false;

        if (args)
        {
            assetInventoryTable = args.record();
            caller              = args.caller();

            assetStandardId = caller.assetStandard();
            inventoryDate   = caller.inventoryDate();

            inventoryNum    = assetInventoryTable.InventoryOrder;

            ret                 = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for header
    /// </summary>
    protected void initQueryRunHeader()
    {
        QueryBuildDataSource    qbds;
        Query                   query = new Query();

        qbds = query.addDataSource(tableNum(RAssetInventoryTable));
        qbds.addRange(fieldNum(RAssetInventoryTable, RecId)).value(queryValue(assetInventoryTable.RecId));

        queryRunHeader = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for lines
    /// </summary>
    protected void initQueryRunLines()
    {
        const str RangeQty = '(AccountingQty != FactQty)';

        QueryBuildDataSource    qbds;
        Query                   query = new Query();

        qbds = query.addDataSource(tableNum(RAssetInventoryTrans));
        qbds.addRange(fieldNum(RAssetInventoryTrans, InventoryTableRecId)).value(queryValue(assetInventoryTable.RecId));
        qbds.addRange(fieldNum(RAssetInventoryTrans, AssetStandardId)).value(queryValue(assetStandardId));
        qbds.addRange(fieldNum(RAssetInventoryTrans, AccountingQty)).value(RangeQty);

        qbds = qbds.addDataSource(tableNum(RAssetTable));
        qbds.relations(true);

        queryRunLines = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthOfEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for month of end date
    /// </summary>
    /// <returns>
    /// Display value for month of end date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr monthOfEndDate()
    {
        return RNumDateInWordConverter::construct().date2strMonth(assetInventoryTable.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display gets name of current company
    /// </summary>
    /// <returns>
    /// Name of current company
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Name organizationName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PageNoTxt pageNum()
    {
        return pageNum > 1 ? strFmt("@SYS24160", pageNum) : #Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>surplusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns surplus(profit) amount for current asset
    /// </summary>
    /// <returns>
    /// Surplus(profit) amount for current asset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetAmount surplusAmount()
    {
        if (assetInventoryTrans.FactQty > assetInventoryTrans.AccountingQty)
            return assetInventoryTrans.NetBookValue;
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>surplusQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns surplus(profit) qty for current asset
    /// </summary>
    /// <returns>
    /// Surplus(profit) qty for current asset
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQtyJournal surplusQty()
    {
        if (assetInventoryTrans.FactQty > assetInventoryTrans.AccountingQty)
            return 1;
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(INV18_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    protected Counter totalCells()
    {
        const int CellsBody = 9;
        const int CellsOther = 26;

        return this.getNumOfLines() * CellsBody  + CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearOfEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns display value for year of end date
    /// </summary>
    /// <returns>
    /// Display value for year of end date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DateValue_RU yearOfEndDate()
    {
        return int2str(year(assetInventoryTable.EndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_INV18_RU construct()
    {
        return new OXMLExcelReport_INV18_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>