<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationVendInvoiceInfoTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationVendInvoiceInfoTableDataRetrieval</c> class retrieves data from <c>VendInvoiceInfoTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(VendInvoiceInfoTable))]
public class TaxIntegrationVendInvoiceInfoTableDataRetrieval
    extends TaxIntegrationPurchTableDataRetrieval
{
    protected VendInvoiceInfoTable vendInvoiceInfoTable;
    protected VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
    protected VendInvoiceInfoLine vendInvoiceInfoLine;
    protected VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

    protected InventDim inventDimNonPO;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        SysDaQueryObjectBuilder documentQueryObjectBuilder;
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            vendInvoiceInfoTable = document.getLocalRecord();

            documentQueryObjectBuilder = SysDaQueryObjectBuilder::from(this.vendInvoiceInfoSubTable)
                .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, ParmId))
                    .isEqualToLiteral(this.vendInvoiceInfoTable.ParmId)
                .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, TableRefId))
                    .isEqualToLiteral(this.vendInvoiceInfoTable.TableRefId)
                .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, OrigPurchId))
                    .isEqualToLiteral(this.vendInvoiceInfoTable.PurchId)
                .outerJoin(this.purchTable)
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.PurchId)
                .outerJoin(this.transportationDocument) // primary key
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.TransportationDocument)
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.OrderAccount)
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.InvoiceAccount);

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                documentQueryObjectBuilder.outerJoin(this.vendInvoiceInfoTable_W)
                    .where(this.vendInvoiceInfoTable_W, fieldStr(VendInvoiceInfoTable_W, VendInvoiceInfoTable))
                        .isEqualToLiteral(this.vendInvoiceInfoTable.RecId);
            }
        }
        else
        {
            documentQueryObjectBuilder = SysDaQueryObjectBuilder::from(this.vendInvoiceInfoTable)
                .where(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .outerJoin(this.vendInvoiceInfoSubTable) // alternate key
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, ParmId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, ParmId))
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, TableRefId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, TableRefId))
                    .where(this.vendInvoiceInfoSubTable, fieldStr(VendInvoiceInfoSubTable, OrigPurchId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, PurchId))
                .outerJoin(this.purchTable) // alternate key
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, PurchId))
                .outerJoin(this.transportationDocument) // primary key
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, TransportationDocument))
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, OrderAccount))
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, InvoiceAccount));

            if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
            {
                documentQueryObjectBuilder.outerJoin(this.vendInvoiceInfoTable_W)
                    .where(this.vendInvoiceInfoTable_W, fieldStr(VendInvoiceInfoTable_W, VendInvoiceInfoTable))
                        .isEqualTo(this.vendInvoiceInfoTable, fieldStr(VendInvoiceInfoTable, RecId));
            }
        }

        return documentQueryObjectBuilder.toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryBuilder = SysDaQueryObjectBuilder::from(this.vendInvoiceInfoLine)
            .where(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, ParmId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.ParmId)
            .where(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, TableRefId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.TableRefId)
            .outerJoin(this.inventDimNonPO) // alternate key
                .where(this.inventDimNonPO, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, InventDimId))
            .outerJoin(this.purchLine) // primary key
                .where(this.purchLine, fieldStr(PurchLine, RecId))
                    .isEqualTo(this.vendInvoiceInfoLine, fieldStr(VendInvoiceInfoLine, PurchLineRecId))
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.purchLine, fieldStr(VendInvoiceInfoLine, InventDimId));

        if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled())
        {
            queryBuilder.outerJoin(this.originalPurchLine)
                .where(this.originalPurchLine, fieldStr(PurchLine, InventTransId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventRefTransId));
        }

        return queryBuilder.toSysDaQueryObject();;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        if (this.vendInvoiceInfoSubTable)
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTableLocal;

            // Scenario:
            // 1. Create two purchase orders with charges in header.
            // 2. Add two or more purchase orders to a pending invoice.
            // 3. Create charges in pending invoice header.
            // Query should find all header charges in pending invoice with two or more purchase orders,
            // includes the header charges in table VendInvoiceInfoSubTable and VendInvoiceInfoTable.

            // SELECT * FROM MarkupTrans
            //     LEFT JOIN VendInvoiceInfoSubTable
            //         ON VendInvoiceInfoSubTable.ParmId = this.vendInvoiceInfoSubTable.ParmId
            //             AND MarkupTrans.TransTableId = TableId(VendInvoiceInfoSubTable)
            //             AND MarkupTrans.TransRecId = VendInvoiceInfoSubTable.RecId
            //     WHERE VendInvoiceInfoSubTable.RECID IS NOT NULL
            //         OR (MarkupTrans.TransTableId = VendInvoiceInfoTable.TableId
            //             AND MarkupTrans.TransRecId = this.vendInvoiceInfoTable.RecId)
            return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .wherever(new SysDaOrExpression(
                    // Find header charges on VendInvoiceInfoTable
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)),
                            new SysDaValueExpression(this.vendInvoiceInfoTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)),
                            new SysDaValueExpression(this.vendInvoiceInfoTable.RecId))),
                    // VendInvoiceInfoSubTable.RECID IS NOT NULL to find header charges on VendInvoiceInfoSubTable
                    new SysDaFieldExpression(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, RecId))))
                .outerJoin(vendInvoiceInfoSubTableLocal)
                    // ON clause
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                        .isEqualToLiteral(this.vendInvoiceInfoSubTable.TableId)
                    .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                        .isEqualTo(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, RecId))
                    .where(vendInvoiceInfoSubTableLocal, fieldStr(VendInvoiceInfoSubTable, ParmId))
                        .isEqualToLiteral(this.vendInvoiceInfoSubTable.ParmId)
                .toSysDaQueryObject();
        }
        else if (this.vendInvoiceInfoSubTable)
        {
            return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
                .wherever(new SysDaOrExpression(
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(this.vendInvoiceInfoSubTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)), new SysDaValueExpression(this.vendInvoiceInfoSubTable.RecId))),
                    new SysDaAndExpression(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId)), new SysDaValueExpression(this.vendInvoiceInfoTable.TableId)),
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId)), new SysDaValueExpression(this.vendInvoiceInfoTable.RecId)))))
                .toSysDaQueryObject();
        }
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.vendInvoiceInfoTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.vendInvoiceInfoLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.vendInvoiceInfoLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.vendInvoiceInfoLine.TableId,
            this.vendInvoiceInfoLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        // no super();
        document.setInvoiceAccount(this.vendInvoiceInfoTable.InvoiceAccount);
        document.setInvoiceAccountGroup(this.vendTableInvoice.VendGroup);

        if (this.vendInvoiceInfoTable.isNonPO() || this.vendInvoiceInfoTable.isAdvance())
        {
            this.copyToDocumentFromInventStorageDimMap(document, this.vendInvoiceInfoTable);
            document.setIncludingTax(this.vendInvoiceInfoTable.InclTax);
            document.setOrderAccount(this.vendInvoiceInfoTable.OrderAccount);
            document.setOrderAccountGroup(this.vendTable.VendGroup);
            this.copyToDocumentFromVATNum(
                this.vendInvoiceInfoTable.VATNum,
                this.vendInvoiceInfoTable.VATNumTableType,
                this.vendInvoiceInfoTable.VATNumRecId);
        }
        else
        {
            this.copyToDocumentFromInventStorageDimMap(document, this.purchTable);
            document.setIncludingTax(this.purchTable.InclTax);
            document.setOrderAccount(this.purchTable.OrderAccount);
            document.setOrderAccountGroup(this.purchTable.VendGroup);
            this.copyToDocumentFromVATNum(
                this.purchTable.VATNum,
                this.purchTable.VATNumTableType,
                this.purchTable.VATNumRecId);
        }

        // Don't set list code for purchase order vendor invoice.
        // For normal purchase order invoice, list code is saved in PurchTable. It should not be updated during invoicing.
        // For purchase order prepayment invoice, there is no list code.
        if (this.vendInvoiceInfoTable.isNonPO())
        {
            document.setListCode(this.vendInvoiceInfoTable.ListCode);
        }
        else
        {
            document.setPurchaseType(this.purchTable.PurchaseType);
            document.setIntercompanyDirectDelivery(this.purchTable.InterCompanyDirectDelivery);
            document.setDirectDelivery(this.purchTable.MCRDropShipment);
            document.setDeliveryTerm(this.purchTable.DlvTerm);
        }

        document.setTransactionCurrencyCode(this.vendInvoiceInfoTable.CurrencyCode);
        document.setAccountingCurrencyFixedExchangeRate(this.vendInvoiceInfoTable.ExchRate);
        document.setReportingCurrencyFixedExchangeRate(this.vendInvoiceInfoTable.ReportingCurrencyExchangeRate);
        
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setVATRegisterDate(this.vendInvoiceInfoTable_W.VatDueDate_W);
            document.setVendorVATDate(this.vendInvoiceInfoTable.VendorVATDate);
            document.setReceivedDate(this.vendInvoiceInfoTable.ReceivedDate);
            document.setDocumentDate(this.vendInvoiceInfoTable.documentDate); //invoice date
        }

        if (isTaxIntegrationISVAccrueUseTaxEnabled
            && (this.vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::AccrueUseTax)
                || this.vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced)
        {
            document.setAccrueUseTax(this.getAccrueUseTaxParameter());
            document.setAccrueSalesTaxType(this.vendInvoiceInfoTable.AccrueSalesTaxType);
            document.setVendorChargedSalesTax(this.vendInvoiceInfoTable.VendorChargedSalesTax);

            if (this.vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced)
            {
                document.setVendorChargedTaxToleranceAmount(this.vendTableInvoice.TaxVendorChargeTaxToleranceAmount);
                document.setVendorChargedTaxTolerancePercent(this.vendTableInvoice.TaxVendorChargeTaxTolerancePercent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        if (!this.vendInvoiceInfoTable.isNonPO()
            && this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            super();
            return;
        }

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrVendor(
            this.transportationDocument,
            this.vendTable,
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.vendInvoiceInfoTable.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTableInvoice,
            LogisticsLocationRoleType::Invoice);
        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        if (this.isInvoiceLineFromPO())
        {
            super(_line);

            _line.setTaxGroup(this.vendInvoiceInfoLine.TaxGroup);
            _line.setTaxItemGroup(this.vendInvoiceInfoLine.TaxItemGroup);
            _line.setOverrideSalesTax(this.vendInvoiceInfoLine.OverrideSalesTax);

            return;
        }

        // no super();

        this.copyToLineFromSalesPurchJournalLine(_line, this.vendInvoiceInfoLine);
        this.copyToLineFromInventDim(_line, this.inventDimNonPO);
        this.copyToLineFromInventTable(_line, this.vendInvoiceInfoLine.inventTable());

        // InventTransId is copied

        // no _line.setProductVariant
        _line.setIntrastatCommodityId(this.vendInvoiceInfoLine.IntrastatCommodity);
        if (_line.getIntrastatCommodityId())
        {
            EcoResCategory ecoResCategory = EcoResCategory::find(_line.getIntrastatCommodityId());
            _line.setIntrastatCommodityCode(EcoResCategory.Code);
        }

        // no _line.setDirectDelivery
        // no _line.setDeliveryTerm
        _line.setDeliveryDate(this.vendInvoiceInfoLine.deliveryDate(this.vendInvoiceInfoLine));

        _line.setLedgerDimension(this.vendInvoiceInfoLine.DefaultDimension);
        if (this.vendInvoiceInfoLine.isCategoryBased() || !this.vendInvoiceInfoLine.inventoried())
        {
            _line.setOperationLedgerDimension(this.vendInvoiceInfoLine.accountItemLedgerDimension(InventAccountType::PurchExpense));
        }

        if (InventTable::modelGroupByItemId(this.vendInvoiceInfoLine.ItemId).PostOnhandFinancial)
        {
            _line.setOperationLedgerDimension(this.vendInvoiceInfoLine.accountItemLedgerDimension(InventAccountType::PurchReceipt));
        }
        else
        {
            _line.setOperationLedgerDimension(this.vendInvoiceInfoLine.accountItemLedgerDimension(InventAccountType::PurchConsump));
        }
 
        _line.setProjectId(this.vendInvoiceInfoLine.vendInvoiceInfoLine_Project().ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        // no super();

        _line.setQuantity(this.vendInvoiceInfoLine.ReceiveNow);
        _line.setLineAmount(this.vendInvoiceInfoLine.LineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCopyAddressToLineWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should copy address to line with cache or not.
    /// Override this method to return true to leverage cache for better performance.
    /// </summary>
    /// <returns>true if copy with cache; otherwise, false.</returns>
    protected boolean shouldCopyAddressToLineWithCache()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentOriginAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentOriginAddress()
    {
        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromLadingAddressOrVendor(
            this.transportationDocument,
            this.vendTable, // document
            LogisticsLocationRoleType::Delivery);

        return shipmentOriginLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentOriginAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment origin address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentOriginAddressCacheKey()
    {
        return int642Str(this.transportationDocument.LoadedPostalAddress) + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + int642Str(this.vendTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddress</c>.</returns>
    /// <remarks>
    /// When updating this method, check getShipmentDestinationAddressCacheKey method to make sure the cache key was aligned with the change.
    /// </remarks>
    protected LogisticsPostalAddress getShipmentDestinationAddress()
    {
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress;
        if (!this.vendInvoiceInfoTable.isNonPO()
            && this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalPurchLine)
            {
                shipmentDestinationLogisticsPostalAddress = this.originalPurchLine.deliveryAddress();
            }
            else
            {
                shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromInventoryDimensionOrCompanyInformation(
                    this.vendInvoiceInfoLine.inventDim(),
                    CompanyInfo::find(),
                    LogisticsLocationRoleType::Delivery);
            }
        }
        else
        {
            shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.vendInvoiceInfoLine.DeliveryPostalAddress);
        }

        return shipmentDestinationLogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentDestinationAddressCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shipment destination address cache key.
    /// </summary>
    /// <returns>The cache key.</returns>
    protected str getShipmentDestinationAddressCacheKey()
    {
        str result;

        if (!this.vendInvoiceInfoTable.isNonPO()
            && this.purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled()
                && this.originalPurchLine)
            {
                result = strFmt('%1|%2', tableNum(LogisticsPostalAddress), this.originalPurchLine.DeliveryPostalAddress);
            }
            else
            {
                InventDim inventDimLocal = this.vendInvoiceInfoLine.inventDim();
                result = inventDimLocal.InventLocationId + TaxIntegrationTaxServiceConstants::CacheKeyDelimiter + inventDimLocal.InventSiteId;
            }
        }
        else
        {
            result = strFmt('%1|%2', tableNum(LogisticsPostalAddress), this.vendInvoiceInfoLine.DeliveryPostalAddress);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        if (this.isInvoiceLineFromPO())
        {
            super(_line);
            return;
        }

        _line.determineCalculationDate();
        // no super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>PurchTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        if (!this.vendInvoiceInfoTable.isNonPO() && !this.vendInvoiceInfoTable.isAdvance())
        {
            super(_charge);
            return;
        }

        _charge.setLedgerDimension(this.vendInvoiceInfoTable.defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>PurchLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        if (this.isInvoiceLineFromPO())
        {
            super(_charge);
            return;
        }

        _charge.setLedgerDimension(this.vendInvoiceInfoLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        if (this.vendInvoiceInfoTable.isNonPO() || this.vendInvoiceInfoTable.isAdvance())
        {
            switch (markupTable.CustType)
            {
                case MarkupType::LedgerAccount :
                    _charge.setOperationLedgerDimension(markupTable.parmCustomerLedgerDimension());
                    break;

                case MarkupType::CustVend :
                    _charge.setOperationLedgerDimension(markupTable.parmVendorLedgerDimension());
                    break;
            }
        }
        else
        {
            super(_charge, _markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceLineFromPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the vendor invoice line is generated from PO or not.
    /// </summary>
    /// <returns>true if tax ID should be processed and set to document object; otherwise, false.</returns>
    protected boolean isInvoiceLineFromPO()
    {
        return !this.vendInvoiceInfoLine.isNonPO() && !this.vendInvoiceInfoLine.isAdvance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxabilityForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be calculated for current line and set isTaxable.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void determineTaxabilityForLine(TaxIntegrationLineObject _line)
    {
        // empty method to override the method in parent class
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>