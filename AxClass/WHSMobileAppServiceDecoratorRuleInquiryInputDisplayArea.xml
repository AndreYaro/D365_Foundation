<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceDecoratorRuleInquiryInputDisplayArea</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceDecoratorRuleItemInquiryInputDisplayArea</c> class populates the DisplayArea for the inquiry input screen.
/// </summary>
public class WHSMobileAppServiceDecoratorRuleInquiryInputDisplayArea implements WHSIMobileAppServiceXMLDecoratorRule
{
    #WHSRF
    #XmlDocumentation

    private boolean inputFiledProcessed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileAppServiceDecoratorRuleInquiryInputDisplayArea construct()
    {
        return new WHSMobileAppServiceDecoratorRuleInquiryInputDisplayArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to run the transformation.
    /// </summary>
    /// <param name = "_pageInfo">
    /// The <c>WHSMobileAppPageInfo</c> containing controls and information to carry out the transformation.
    /// </param>
    public void run(WHSMobileAppPageInfo _pageInfo)
    {
        ListEnumerator le = _pageInfo.parmControlsEnumerator();
        while (le.moveNext())
        {
            Map controlMap = le.current();

            var displayArea = this.calculateDisplayArea(controlMap);
            if (displayArea != WHSMobileAppXMLDisplayArea::EmptyArea)
            {
                controlMap.insert(#XMLControlDisplayArea, displayArea);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayArea</Name>
				<Source><![CDATA[
    private WHSMobileAppDisplayArea calculateDisplayArea(Map _controlMap)
    {
        var displayArea = WHSMobileAppXMLDisplayArea::EmptyArea;
        var controlType = _controlMap.lookup(#XMLControlCtrlType);

        switch (controlType)
        {
            case #RFButton:
                if (_controlMap.lookup(#XMLControlDefaultButton) == '1')
                {
                    displayArea = WHSMobileAppXMLDisplayArea::PrimaryActionArea;
                }
                break;
            case #RFDetourButton:
                displayArea = WHSMobileAppXMLDisplayArea::EmptyArea;
                break;
            case #RFLabel:
                displayArea = this.calculateDisplayAreaForLabel(_controlMap);
                break;
            default:
                displayArea = this.calculateDisplayAreaForOthers(_controlMap);
                break;
        }

        if (this.isInputFieldType(controlType))
        {
            inputFiledProcessed = true;
        }

        return displayArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInputFieldType</Name>
				<Source><![CDATA[
    private boolean isInputFieldType(WHSMobileAppControlType type)
    {
        return type == #RFListbox 
            || type == #RFCombobox 
            || type == #RFText 
            || type == #RFPassword;         
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForLabel</Name>
				<Source><![CDATA[
    private WHSMobileAppDisplayArea calculateDisplayAreaForLabel(Map _controlMap)
    {
        if (this.isLabelInSubHeaderArea(_controlMap))
        {
            return WHSMobileAppXMLDisplayArea::SubHeaderArea;
        }

        return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelInSubHeaderArea</Name>
				<Source><![CDATA[
    private boolean isLabelInSubHeaderArea(Map _controlMap)
    {
        return (!inputFiledProcessed
            && (_controlMap.lookup(#XMLControlName) != #RFError)
            && (_controlMap.lookup(#XMLControlInputType) == #WHSRFUndefinedDataType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledInputField</Name>
				<Source><![CDATA[
    private boolean isEnabledInputField(boolean _enabled, WHSMobileAppControlType _controlType)
    {
        return _enabled &&
            ((_controlType == #RFText) || (_controlType == #RFPassword) ||
            (_controlType == #RFListbox) || (_controlType == #RFCombobox));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDisplayAreaForOthers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets display area for non button nor label types.
    /// </summary>
    /// <param name = "_controlMap">The <c>Map</c> containing info of the control for which is the display area is being get.</param>
    /// <returns>Display area of the given control type.</returns>
    private WHSMobileAppDisplayArea calculateDisplayAreaForOthers(Map _controlMap)
    {        
        boolean enabled = _controlMap.lookup(#XMLControlEnabled) == '1';
        var controlType = _controlMap.lookup(#XMLControlCtrlType);

        if (this.isEnabledInputField(enabled, controlType))
        {
            return WHSMobileAppXMLDisplayArea::PrimaryInputArea;
        } 
        else 
        {
            return WHSMobileAppXMLDisplayArea::InfoAndSecondaryInputArea;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>