<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAbsenceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgAbsenceDP</c> class declares the variables and tables for the <c>JmgAbsence</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(JmgAbsenceQuery)),
    SRSReportParameterAttribute(classStr(JmgAbsenceContract))
]
public class JmgAbsenceDP extends SRSReportDataProviderBase
{
    //Report Parameters
    JmgDate         dateTo;
    JmgDate         dateFrom;

    //Report Variables
    JmgTmpAbsence   jmgTmpAbsence;
    Map             arrayMap;
    real            sumSeconds[];
    real            sumSecondsWeek[];
    real            sumProfileSeconds;
    JmgEmployee     jmgEmployeeLocal;
    HcmWorker       hcmWorkerLocal;
    JmgStampTrans   jmgStampTrans;
    HRMAbsenceCode  hrmAbsenceCode;
    Integer         wrkIndex;

    //Column Labels
    JmgLabel        colLabel1;
    JmgLabel        colLabel2;
    JmgLabel        colLabel3;
    JmgLabel        colLabel4;
    JmgLabel        colLabel5;
    JmgLabel        colLabel6;
    JmgLabel        colLabel7;
    JmgLabel        colLabel8;
    JmgLabel        colLabel9;
    JmgLabel        colLabel10;

    //Parameter Macros
    #define.MaxColumns(10)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearSecondsBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the internal seconds buffer.
    /// </summary>
    private void clearSecondsBuffer()
    {
        Counter i;

        for (i = 0; i <= #MaxColumns + 1; i++)
            sumSeconds[i] = 0;

        for (i = 0; i <= 7; i++)
            sumSecondsWeek[i] = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsenceSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal seconds buffer with information about time that is spend on absence jobs.
    /// </summary>
    private void getAbsenceSeconds()
    {
        JmgJobId    jobId;
        Counter     i;

        while select sum(Seconds) from jmgStampTrans
            group by JobIDAbs, JobId
            where jmgStampTrans.Worker                  ==  jmgEmployeeLocal.Worker
                  && jmgStampTrans.StartDate            >=  dateFrom
                  && jmgStampTrans.StartDate            <=  dateTo
                  && jmgStampTrans.StampType            ==  JmgStampTypeEnum::Absence
            exists join hrmAbsenceCode
            where hrmAbsenceCode.HrmAbsenceCodeId       ==  jmgStampTrans.ActOprID
                  && hrmAbsenceCode.JmgIncludeInReport  ==  NoYes::Yes
        {
            jobId = jmgStampTrans.JobIDAbs;
            if (jobId == '')
            {
                jobId = jmgStampTrans.JobId;
            }
            if (arrayMap.exists(jobId))
            {
                sumSeconds[arrayMap.lookup(jobId)] += jmgStampTrans.Seconds;
            }
        }

        for (i = 1; i <= #MaxColumns+1; i++)
        {
            sumSeconds[i] = sumSeconds[i] / 3600;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsenceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total amount of time that is spent on absence.
    /// </summary>
    /// <returns>
    /// The total amount of time that is spent on absence.
    /// </returns>
    private TempReal getAbsenceTotal()
    {
        real    tempSum;
        Counter i;

        for (i = 1; i <= #MaxColumns + 1; i++)
            tempSum += sumSeconds[i];

        return tempSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the column labels based on absence code settings.
    /// </summary>
    private void getColumnLabels()
    {
        Counter             c;

        void addcolumnprops()
        {
            c++;
            arrayMap.insert(hrmAbsenceCode.JmgJobId, c <= #MaxColumns ? c : #MaxColumns + 1);
            switch (c)
            {
                case 1:
                    colLabel1 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 2:
                    colLabel2 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 3:
                    colLabel3 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 4:
                    colLabel4 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 5:
                    colLabel5 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 6:
                    colLabel6 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 7:
                    colLabel7 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 8:
                    colLabel8 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 9:
                    colLabel9 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
                case 10:
                    colLabel10 = hrmAbsenceCode.HrmAbsenceCodeId;
                    break;
            }
        }

        arrayMap = new Map(Types::String, Types::Integer);

        while select JmgJobId, HrmAbsenceCodeId
            from hrmAbsenceCode
            order by JmgColIndex, HrmAbsenceCodeId
            where hrmAbsenceCode.JmgColIndex                        &&
                    hrmAbsenceCode.JmgIncludeInReport == NoYes::Yes
        {
            addcolumnprops();
        }

        while select JmgJobId, HrmAbsenceCodeId from hrmAbsenceCode
            order by HrmAbsenceCodeId
            where !hrmAbsenceCode.JmgColIndex                       &&
                    hrmAbsenceCode.JmgIncludeInReport == NoYes::Yes
        {
            addcolumnprops();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJmgTmpAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>JmgTmpIndirectActivity</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>JmgTmpIndirectActivity</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(JmgTmpAbsence))
    ]
    public JmgTmpAbsence getJmgTmpAbsence()
    {
        select jmgTmpAbsence;
        return jmgTmpAbsence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount of profile seconds.
    /// </summary>
    private void getProfileSeconds()
    {
        sumProfileSeconds =  (select sum(ProfileSeconds) from jmgStampJournalTable
                              where jmgStampJournalTable.Worker         ==  jmgEmployeeLocal.Worker
                                    && jmgStampJournalTable.ProfileDate >=  dateFrom
                                    && jmgStampJournalTable.ProfileDate <=  dateTo).ProfileSeconds / 3600;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeeklyTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the weekly total.
    /// </summary>
    /// <returns>
    /// the weekly total.
    /// </returns>
    private TempReal getWeeklyTotal()
    {
        real    tempSum;
        Counter i;

        for (i = 1; i <= 7; i++)
            tempSum += sumSecondsWeek[i];

        return tempSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeekSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the weekly sums for time spend on absence.
    /// </summary>
    private void getWeekSeconds()
    {
        Counter     i;

        while select sum(Seconds) from jmgStampTrans
            group by ProfileDate
            where jmgStampTrans.Worker                  ==  jmgEmployeeLocal.Worker
                  && jmgStampTrans.StartDate            >=  dateFrom
                  && jmgStampTrans.StartDate            <=  dateTo
                  && jmgStampTrans.StampType            ==  JmgStampTypeEnum::Absence
            exists join hrmAbsenceCode
            where hrmAbsenceCode.HrmAbsenceCodeId       ==  jmgStampTrans.ActOprID
                  && hrmAbsenceCode.JmgIncludeInReport  ==  NoYes::Yes
        {
            sumSecondsWeek[dayOfWk(jmgStampTrans.ProfileDate)] += jmgStampTrans.Seconds;
        }

        for (i = 1; i <= 7; i++)
        {
            sumSecondsWeek[i] = sumSecondsWeek[i] / 3600;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJmgTmpAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the <c>JmgTmpAbsence</c> temporary buffer, based on the calculated sums.
    /// </summary>
    private void insertJmgTmpAbsence()
    {
                    jmgTmpAbsence.Column1Value          = sumSeconds[1];
                    jmgTmpAbsence.Column2Value          = sumSeconds[2];
                    jmgTmpAbsence.Column3Value          = sumSeconds[3];
                    jmgTmpAbsence.Column4Value          = sumSeconds[4];
                    jmgTmpAbsence.Column5Value          = sumSeconds[5];
                    jmgTmpAbsence.Column6Value          = sumSeconds[6];
                    jmgTmpAbsence.Column7Value          = sumSeconds[7];
                    jmgTmpAbsence.Column8Value          = sumSeconds[8];
                    jmgTmpAbsence.Column9Value          = sumSeconds[9];
                    jmgTmpAbsence.Column10Value         = sumSeconds[10];
                    jmgTmpAbsence.ColumnOther           = sumSeconds[11];

                    jmgTmpAbsence.Column1Label          = colLabel1;
                    jmgTmpAbsence.Column2Label          = colLabel2;
                    jmgTmpAbsence.Column3Label          = colLabel3;
                    jmgTmpAbsence.Column4Label          = colLabel4;
                    jmgTmpAbsence.Column5Label          = colLabel5;
                    jmgTmpAbsence.Column6Label          = colLabel6;
                    jmgTmpAbsence.Column7Label          = colLabel7;
                    jmgTmpAbsence.Column8Label          = colLabel8;
                    jmgTmpAbsence.Column9Label          = colLabel9;
                    jmgTmpAbsence.Column10Label         = colLabel10;

                    jmgTmpAbsence.ColumnMonday          = sumSecondsWeek[1];
                    jmgTmpAbsence.ColumnTuesday         = sumSecondsWeek[2];
                    jmgTmpAbsence.ColumnWednesday       = sumSecondsWeek[3];
                    jmgTmpAbsence.ColumnThursday        = sumSecondsWeek[4];
                    jmgTmpAbsence.ColumnFriday          = sumSecondsWeek[5];
                    jmgTmpAbsence.ColumnSaturday        = sumSecondsWeek[6];
                    jmgTmpAbsence.ColumnSunday          = sumSecondsWeek[7];

                    jmgTmpAbsence.ColumnProfileTime     = sumProfileSeconds;

                    jmgTmpAbsence.ColumnAbsenceTotal    = this.getAbsenceTotal();
                    jmgTmpAbsence.ColumnAbsencePercent  = (jmgTmpAbsence.ColumnAbsenceTotal * 100 / minOne(sumProfileSeconds));

                    jmgTmpAbsence.ColumnWeekTotal       = this.getWeeklyTotal();
                    jmgTmpAbsence.ColumnWeekPercent     = (jmgTmpAbsence.ColumnWeekTotal * 100 / minOne(sumProfileSeconds));

                    jmgTmpAbsence.Worker                = jmgEmployeeLocal.Worker;
                    jmgTmpAbsence.PersonnelNumber       = hcmWorkerLocal.PersonnelNumber;

                    jmgTmpAbsence.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fetches the required data for the <c>JmgAbsence</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                qR;
        JmgAbsenceContract      contract;

        contract    =   this.parmDataContract() as JmgAbsenceContract;
        qR          =   new SysQueryRun(this.parmQuery());
        dateTo      =   contract.parmDateTo();
        dateFrom    =   contract.parmDateFrom();

        this.getColumnLabels();

        while (qR.next())
        {
            jmgEmployeeLocal    = qR.get(tableNum(JmgEmployee));
            hcmWorkerLocal      = qR.get(tableNum(HcmWorker));
            this.clearSecondsBuffer();

            this.getProfileSeconds();
            this.getAbsenceSeconds();
            this.getWeekSeconds();

            this.insertJmgTmpAbsence();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>