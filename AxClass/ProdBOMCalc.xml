<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdBOMCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdBOMCalc
{
    ProdBOM                 prodBOM;
    InventTable             inventTable;
    ProdBOMConsumpProposal  prodBOMConsumpProposal;
    BOMAutoConsump          bomAutoConsump;
    InventQty               qtyCalc;
    NoYes                   skipAccError;
    NoYes                   includeConstantConsump;
    BOMCalcData             bomCalcData;

    boolean                 isStart;
    boolean                 isReportAsFinished;

    // result

    UnitQty                 bomProposal;
    UnitQty                 bomConsump;

    InventQty               inventProposal;
    InventQty               inventConsump;

    boolean                 cwItem;
    PdsCWInventQty          cwQtyCalc;
    PdsCWInventQty          cwInventProposal;
    PdsCWInventQty          cwInventConsump;

    boolean                 isService;
    NoYes                   completePickListJournal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomConsump</Name>
				<Source><![CDATA[
    UnitQty bomConsump()
    {
        return bomConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomProposal</Name>
				<Source><![CDATA[
    UnitQty bomProposal()
    {
        return bomProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQty</Name>
				<Source><![CDATA[
    boolean hasQty()
    {
        return (this.inventConsump()            ||
                this.bomConsump()               ||
                this.bomProposal()              ||
                this.inventProposal()           ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        if (!prodBOM)
        {
            throw error(strFmt("@SYS23455", funcname()));
        }

        inventTable = prodBOM.inventTable();
        if (!inventTable.RecId)
        {
            throw error("@SYS54765");
        }

        cwItem      = PdsGlobal::pdsIsCWItem(inventTable.ItemId);

        isService   = inventTable.ItemType == ItemType::Service;

        this.setProposal();
        this.setConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventConsump</Name>
				<Source><![CDATA[
    InventQty inventConsump()
    {
        return inventConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProposal</Name>
				<Source><![CDATA[
    InventQty inventProposal()
    {
        return inventProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubContractedWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the line type is fulfilled by a subcontracted work.
    /// </summary>
    /// <returns>
    ///     true if the item is service, the type of line is vendor, it is associated with an operation and it has the information of the vendor associated with it.
    /// </returns>
    private boolean isSubContractedWork()
    {
        return isService
            && this.hasVendorSupply()
            && prodBOM.OprNum != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVendorSupply</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the demand is covered by a vendor supply
    /// </summary>
    /// <returns>
    ///     true if the line has a vendor type and has an association to a vendor account; otherwise false;
    /// </returns>
    private boolean hasVendorSupply()
    {
        return prodBOM.ProdLineType == BOMType::Vendor && prodBOM.VendId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoConsump</Name>
				<Source><![CDATA[
    public BOMAutoConsump parmAutoConsump(BOMAutoConsump _bomAutoConsump = bomAutoConsump)
    {
        bomAutoConsump = _bomAutoConsump;
        return bomAutoConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCalcData</Name>
				<Source><![CDATA[
    public BOMCalcData parmBOMCalcData(BOMCalcData _bomCalcData = bomCalcData)
    {
        bomCalcData = _bomCalcData;
        return bomCalcData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompletePickListJournal</Name>
				<Source><![CDATA[
    public NoYes parmCompletePickListJournal(NoYes _completePickListJournal = completePickListJournal)
    {
        completePickListJournal = _completePickListJournal;
        return completePickListJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumpProposal</Name>
				<Source><![CDATA[
    public ProdBOMConsumpProposal parmConsumpProposal(ProdBOMConsumpProposal _prodBOMConsumpProposal = prodBOMConsumpProposal)
    {
        prodBOMConsumpProposal = _prodBOMConsumpProposal;
        return prodBOMConsumpProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeConstantConsump</Name>
				<Source><![CDATA[
    public NoYes parmIncludeConstantConsump(NoYes _includeconstantConsump = includeconstantConsump)
    {
        includeconstantConsump = _includeconstantConsump;
        return includeconstantConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReportAsFinished</Name>
				<Source><![CDATA[
    public boolean parmIsReportAsFinished(boolean _isReportAsFinished = isReportAsFinished)
    {
        isReportAsFinished = _isReportAsFinished;
        return isReportAsFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsStart</Name>
				<Source><![CDATA[
    public boolean parmIsStart(boolean _isStart = isStart)
    {
        isStart = _isStart;
        return isStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQtyCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// This gets sets the CW calculation quantity.
    /// </summary>
    /// <param name="_cwQtyCalc">CW quantity for calculation</param>
    /// <returns>returns CW quantity</returns>
    public PdsCWInventQty parmPdsCWQtyCalc(PdsCWInventQty _cwQtyCalc = cwQtyCalc)
    {
        cwQtyCalc = _cwQtyCalc;
        return cwQtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
    public ProdBOM parmProdBOM(ProdBOM _prodBOM = prodBOM)
    {
        prodBOM = _prodBOM;
        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyCalc</Name>
				<Source><![CDATA[
    public InventQty parmQtyCalc(InventQty _qtyCalc = qtyCalc)
    {
        qtyCalc = _qtyCalc;
        return qtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAccError</Name>
				<Source><![CDATA[
    public NoYes parmSkipAccError(NoYes _skipAccError = skipAccError)
    {
        skipAccError = _skipAccError;
        return skipAccError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventConsump</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight inventory consumption quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWInventConsump()
    {
        return cwInventConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight inventory proposal quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWInventProposal()
    {
        return cwInventProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceIsAlreadyConsumedByFlushingPrinc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the service represents subcontracted work and it has already been reported.
    /// </summary>
    /// <returns>
    ///     true if the item is a service item and its operation is concluded.
    /// </returns>
    private boolean serviceIsAlreadyConsumedByFlushingPrinc()
    {
        if ((bomAutoConsump != BOMAutoConsump::FlushingPrincip)
            || !this.isSubContractedWork())
        {
            return false;
        }

        //
        // Subcontracted items can only be picked once if the consumption is flushing principle.
        // this can be at: Start, PO finish, Finish
        // If picked already, the consumption remaining to report is zero.
        //
        return prodBOM.EndConsump == NoYes::Yes                 //has been picked (with marked as end)
            && prodBOM.prodRoute().OprFinished == NoYes::Yes;   //operation is concluded
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConsumpFlushingPrincipBOM</Name>
				<Source><![CDATA[
    void setConsumpFlushingPrincipBOM()
    {
        if (   inventProposal == 0
            || (inventProposal < 0
            &&  inventTable.bomManualReceipt)
            ||  this.serviceIsAlreadyConsumedByFlushingPrinc())
        {
            inventConsump  = 0;
            bomConsump     = 0;
            cwInventConsump = 0;
        }
        else
        {
            switch (prodBOM.ProdFlushingPrincip)
            {
                case ProdFlushingPrincipBOM::Manual         :

                    inventConsump  = 0;
                    bomConsump     = 0;
                    cwInventConsump = 0;
                    break;

                case ProdFlushingPrincipBOM::Picked:
                    if (isStart)
                    {
                        this.setConsumpValuesForPickedFlushingPrinciple();
                    }
                    break;

                case ProdFlushingPrincipBOM::Start          :

                    if (isStart)
                    {
                        inventConsump  = inventProposal;
                        bomConsump     = bomProposal;
                        cwInventConsump = cwInventProposal;
                    }
                    break;

                case ProdFlushingPrincipBOM::Finish         :

                    if (isReportAsFinished)
                    {
                        inventConsump  = inventProposal;
                        bomConsump     = bomProposal;
                        cwInventConsump = cwInventProposal;
                    }
                    break;

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConsumpValuesForPickedFlushingPrinciple</Name>
				<Source><![CDATA[
    protected void setConsumpValuesForPickedFlushingPrinciple()
    {
        inventConsump = prodBOM.getPickedBOMQty() - ProdJournalBOM::getTotalInventConsump(prodBOM.InventTransId);

        if (inventConsump > 0)
        {
            bomConsump	  = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                  prodBOM.InventDimId,
                                                                                                  inventConsump,
                                                                                                  InventTableModule::find(prodBOM.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                  prodBOM.UnitId,
                                                                                                  NoYes::Yes);
        
            // Available on location flushing principle only works with WHS items.
            cwInventConsump = cwInventProposal;
        }
        else
        {
            inventConsump = 0;
            bomConsump = 0;
            cwInventProposal = 0;
            cwInventConsump = 0;
        }

        // Reset the proposal quantities based on the actual quantity picked.
        inventProposal = inventConsump;
        bomProposal = bomConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConsumpFlushingPrincipItem</Name>
				<Source><![CDATA[
    void setConsumpFlushingPrincipItem()
    {
        if (inventProposal == 0
            || (inventProposal < 0
            &&  inventTable.bomManualReceipt))
        {
            inventConsump  = 0;
            bomConsump     = 0;
            cwInventConsump = 0;
        }
        else
        {
            switch (inventTable.ProdFlushingPrincip)
            {
                case ProdFlushingPrincipItem::Manual         :

                    inventConsump  = 0;
                    bomConsump     = 0;
                    cwInventConsump = 0;
                    break;

                case ProdFlushingPrincipItem::Picked:
                    if (isStart)
                    {
                        this.setConsumpValuesForPickedFlushingPrinciple();
                    }
                    break;

                case ProdFlushingPrincipItem::Start          :

                    if (isStart)
                    {
                        inventConsump  = inventProposal;
                        bomConsump     = bomProposal;
                        cwInventConsump = cwInventProposal;
                    }
                    break;

                case ProdFlushingPrincipItem::Finish         :

                    if (isReportAsFinished)
                    {
                        inventConsump  = inventProposal;
                        bomConsump     = bomProposal;
                        cwInventConsump = cwInventProposal;
                    }
                    break;

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConsumption</Name>
				<Source><![CDATA[
    void setConsumption()
    {
        switch (bomAutoConsump)
        {
            case BOMAutoConsump::FlushingPrincip    :
                    if (prodBOM.ProdFlushingPrincip != ProdFlushingPrincipBOM::Blank)
                    {
                        this.setConsumpFlushingPrincipBOM();
                    }
                    else
                    {
                        this.setConsumpFlushingPrincipItem();
                    }
                    break;

            case BOMAutoConsump::Always             :
                    inventConsump  = inventProposal;
                    bomConsump     = bomProposal;
                    cwInventConsump = cwInventProposal;
                    break;

            case BOMAutoConsump::Never              :
                    inventConsump  = 0;
                    bomConsump     = 0;
                    cwInventConsump = 0;
                    break;

            default:
                throw error("@SYS27126");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdJournalBOM</Name>
				<Source><![CDATA[
    void setProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        _prodJournalBOM.bomConsump      = bomConsump;
        _prodJournalBOM.bomProposal     = bomProposal;
        _prodJournalBOM.InventConsump   = inventConsump;
        _prodJournalBOM.InventProposal  = inventProposal;
        _prodJournalBOM.PdsCWInventConsump = cwInventConsump;
        _prodJournalBOM.PdsCWInventProposal= cwInventProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProposal</Name>
				<Source><![CDATA[
    void setProposal()
    {
        if (this.skipProposal())
        {
            return;
        }

        switch (prodBOMConsumpProposal)
        {
            case ProdBOMConsumpProposal::RemainQty:
                bomProposal       = prodBOM.RemainBOMPhysical;
                inventProposal    = prodBOM.RemainInventPhysical;
                cwInventProposal  = prodBOM.PdsCWRemainPhysical;
                break;

            case ProdBOMConsumpProposal::StUpQty:
                bomProposal       = prodBOM.QtyBOMStUp;
                inventProposal    = prodBOM.QtyInventStUp;
                cwInventProposal  = prodBOM.PdsCWInventStup;
                break;

            case ProdBOMConsumpProposal::StUpReleasedQty:
                InventTransIdSum transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId));

                bomProposal       = prodBOM.QtyBOMStUp        - prodBOM.RemainBOMFinancial;
                inventProposal    = prodBOM.QtyInventStUp     + transIdSum.physical();
                cwInventProposal  = prodBOM.PdsCWInventStup   + transIdSum.pdsCWPhysical();
                break;

            case ProdBOMConsumpProposal::EstimatedQty:
                bomProposal       = prodBOM.QtyBOMCalc;
                inventProposal    = prodBOM.QtyInventCalc;
                cwInventProposal  = prodBOM.PdsCWInventCalc;
                break;

            case ProdBOMConsumpProposal::Zero:
                bomProposal       = 0;
                inventProposal    = 0;
                cwInventProposal  = 0;
                break;

            case ProdBOMConsumpProposal::Picked:
                transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId));

                inventProposal    = - transIdSum.wms();
                cwInventProposal  = - transIdSum.pdsCWWMS();

                bomProposal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                    prodBOM.InventDimId,
                                                                                                    inventProposal,
                                                                                                    InventTableModule::find(prodBOM.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                                    prodBOM.UnitId,
                                                                                                    NoYes::Yes);
                break;

            case ProdBOMConsumpProposal::Qty:
                if (! bomCalcData)
                    bomCalcData = BOMCalcData::newProdTable(qtyCalc,ProdTable::find(prodBOM.ProdId));

                BOMCalcConsumption itemCalcLine = BOMCalcConsumption::construct(prodBOM.Formula, bomCalcData);
                
                // BOM consumption not related to subcontracting picking should consider variable/constant scrap 
                NoYes includeScrap = this.hasVendorSupply() ? bomCalcData.parmApplyScrap() : NoYes::Yes;

                bomProposal     = this.calculateBomProposal(itemCalcLine, includeScrap);
                
                inventProposal  = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                        prodBOM.InventDimId,
                                                                                                        bomProposal,
                                                                                                        prodBOM.UnitId,
                                                                                                        InventTableModule::find(prodBOM.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                                        NoYes::Yes);

                if (cwItem)
                {
                    [inventProposal, cwInventProposal] =
                        itemCalcLine.pdsCWCalcConsumption(prodBOM);

                    if (isStart
                        && WHSInventEnabled::exist(prodBOM.ItemId))
                    {
                        var prodBomItemInventTable = InventTable::find(prodBOM.ItemId);

                        boolean batchAboveLocOnInventTransOnly = WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(prodBomItemInventTable) && !prodBOM.inventDim().inventBatchId;
                        boolean serialAboveLocOnInventTransOnly = WHSReservationHierarchyInventDimUtil::isSerialAboveLocation(prodBomItemInventTable) && !prodBOM.inventDim().inventSerialId;
                        boolean dimensionAboveLocOnInventTransOnly = batchAboveLocOnInventTransOnly || serialAboveLocOnInventTransOnly;

                        if (dimensionAboveLocOnInventTransOnly)
                        {
                            inventProposal = PdsCatchWeight::minInventQty(prodBOM.ItemId, cwInventProposal);
                        }
                    }

                    if (inventProposal < prodBOM.RemainInventPhysical)
                    {
                        inventProposal = prodBOM.RemainInventPhysical;
                    }

                    bomProposal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                        prodBOM.InventDimId,
                                                                                                        inventProposal,
                                                                                                        InventTableModule::find(prodBOM.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                                        prodBOM.UnitId,
                                                                                                        NoYes::Yes);
                }

                break;

            case ProdBOMConsumpProposal::Reversed:
                transIdSum = InventTransIdSum::newTransOriginId(InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId));

                inventProposal     =  transIdSum.deducted() + transIdSum.received();

                if (cwItem)
                {
                    cwInventProposal = transIdSum.pdsCWDeducted()
                                        + transIdSum.pdsCWReceived();
                }

                bomProposal        = -prodBOM.RemainBOMFinancial;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the calculation of the proposal should be skipped (be zero).
    /// </summary>
    /// <returns>
    ///    true if the calculation of proposal should be skipped; otherwise false.
    /// </returns>
    protected boolean skipProposal()
    {
        if (completePickListJournal || bomAutoConsump != BOMAutoConsump::FlushingPrincip)
        {
            return false;
        }

        return this.checkProposalForFlushingPrinciple();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProposalForFlushingPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluate the need of proposal based on the flushing principle for the production BOM line.
    /// </summary>
    /// <returns>
    ///    true if the flushing principle is Manual or Flushing principle and prod order state are not matching; otherwise false.
    /// </returns>
    [Replaceable]
    protected boolean checkProposalForFlushingPrinciple()
    {
        switch (prodBOM.flushingPrinciple())
        {
            case ProdFlushingPrincipBOM::Manual:
                return true;
            case ProdFlushingPrincipBOM::Picked:
            case ProdFlushingPrincipBOM::Start:
                return !isStart;
            case ProdFlushingPrincipBOM::Finish:
                return !isReportAsFinished;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBomProposal</Name>
				<Source><![CDATA[
    protected UnitQty calculateBomProposal(BOMCalcConsumption _itemCalcLine, NoYes _scrap)
    {
        UnitQty proposalQty;

        if (prodBOM.PDSIngredientType != PDSIngredientTypeEnum::None && prodBOM.PDSBatchBalanced == NoYes::Yes)
        {
            proposalQty = _itemCalcLine.pdsBatchBalanceCalcConsumption(prodBOM);
        }
        else
        {
            proposalQty = _itemCalcLine.calcConsumption(
                        prodBOM,
                        skipAccError   ? 1: ProdRoute::accError(prodBOM.ProdId,prodBOM.OprNum),
                        includeConstantConsump, _scrap, _scrap);
        }

        return proposalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcData</Name>
				<Source><![CDATA[
    static ProdBOMCalc newBOMCalcData(
        BOMCalcData             _bomCalcData,
        ProdBOM                 _prodBOM,
        ProdBOMConsumpProposal  _consumpProposal,
        BOMAutoConsump          _autoConsump,
        NoYes                   _includeConstantConsump,
        NoYes                   _skipAccError               = NoYes::No,
        boolean                 _isStart                    = false,
        boolean                 _isReportAsFinished         = false,
        NoYes                   _completePickListJournal    = NoYes::No)
    {
        ProdBOMCalc prodBOMCalc = new ProdBOMCalc();

        prodBOMCalc.parmAutoConsump(_autoConsump);
        prodBOMCalc.parmBOMCalcData(_bomCalcData);
        prodBOMCalc.parmConsumpProposal(_consumpProposal);
        prodBOMCalc.parmProdBOM(_prodBOM);
        prodBOMCalc.parmSkipAccError(_skipAccError);
        prodBOMCalc.parmQtyCalc(_bomCalcData.seriesSize());
        prodBOMCalc.parmIncludeConstantConsump(_includeConstantConsump);
        prodBOMCalc.parmIsStart(_isStart);
        prodBOMCalc.parmIsReportAsFinished(_isReportAsFinished);
        prodBOMCalc.parmCompletePickListJournal(_completePickListJournal);

        prodBOMCalc.init();

        return prodBOMCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>