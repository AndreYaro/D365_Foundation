<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCharacteristicsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource characteristics controller.
/// </summary>
public class ResCharacteristicsController
{
    private ResSearchCriteria searchCriteria;
    private boolean enableRole;
    private boolean enableProject;
    private ResCharacteristicReqEntityType requiringEntityType;
    private RefRecId requiringEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>requiringEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the type of entity requiring characteristics.
    /// </summary>
    /// <param name = "_requiringEntityType">Characteristic requirement entity type.</param>
    /// <returns>Characteristic requirement entity type.</returns>
    public ResCharacteristicReqEntityType requiringEntityType(ResCharacteristicReqEntityType _requiringEntityType = requiringEntityType)
    {
        requiringEntityType = _requiringEntityType;
        return requiringEntityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiringEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the requiring entity record identifier.
    /// </summary>
    /// <param name = "_requiringEntity">Requiring entity record identifier.</param>
    /// <returns>Requiring entity record identifier.</returns>
    public RefRecId requiringEntity(RefRecId _requiringEntity = requiringEntity)
    {
        requiringEntity = _requiringEntity;
        return requiringEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets resource characteristics criteria.
    /// </summary>
    /// <param name = "_searchCriteria">Resource characteristics in search criteria object.</param>
    /// <returns>Search criteria.</returns>
    public ResSearchCriteria searchCriteria(ResSearchCriteria _searchCriteria = searchCriteria)
    {
        searchCriteria = _searchCriteria;
        return searchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableRoleSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets flag to determine if role is available in the criteria selection form.
    /// </summary>
    /// <param name = "_enableRole">Enable roles selection flag.</param>
    /// <returns>Roles selection flag state.</returns>
    public boolean enableRoleSelection(boolean _enableRole = enableRole)
    {
        enableRole = _enableRole;
        return enableRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjectSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets flag to determine if project is available in the criteria selection form.
    /// </summary>
    /// <param name = "_enableProject">Enable projects selection flag.</param>
    /// <returns>Projects selection flag state.</returns>
    public boolean enableProjectSelection(boolean _enableProject = enableProject)
    {
        enableProject = _enableProject;
        return enableProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save search criteria to requirements and requirement lines.
    /// </summary>
    public void saveToRequirements()
    {
        ttsbegin;

        ResCharacteristicRequirement requirement = ResCharacteristicRequirement::findOrCreateEntity(requiringEntityType, requiringEntity);
        this.flushRemovedRequirements(requirement.RecId, searchCriteria);
        this.addNewRequirements(requirement.RecId, searchCriteria);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the search criteria requirements.
    /// </summary>
    public void retrieveRequirements()
    {
        ResCharacteristicRequirement requirement = ResCharacteristicRequirement::findByEntity(requiringEntityType, requiringEntity);
        ResCharacteristicRequirementLine requirementLines;
        ResCharacteristicSetEnum characteristicSet;
        ResISearchCriteriaItem searchCriteriaItem;

        while select requirementLines
            order by requirementLines.CharacteristicSet
            where requirementLines.CharacteristicRequirement == requirement.RecId
        {
            if (characteristicSet != requirementLines.CharacteristicSet || !searchCriteriaItem)
            {
                characteristicSet = requirementLines.CharacteristicSet;
                searchCriteriaItem = ResSearchCriteriaItemFactory::createSearchCriteriaItem(requirementLines.CharacteristicSet);
            }

            searchCriteriaItem.addValue(requirementLines.CharacteristicId);
            searchCriteria.setCriteriaItem(searchCriteriaItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add new search criteria requirement lines.
    /// </summary>
    /// <param name = "_requirement">Characteristic requirement.</param>
    /// <param name = "_searchCriteria">Search criteria.</param>
    protected void addNewRequirements(RecId _requirement, ResSearchCriteria _searchCriteria)
    {
        // add new requirements
        MapEnumerator criteriaItems = _searchCriteria.getCriteriaEnumerator();
        while (criteriaItems.moveNext())
        {
            ResCharacteristicSetEnum characteristicSet = ResSearchCriteriaItemFactory::getCharacteristicSet(criteriaItems.currentKey());
            ResISearchCriteriaItem searchCriteriaItem = criteriaItems.currentValue();
            Enumerator enumerator = searchCriteriaItem.getCriteriaItemValuesEnumerator();

            while (enumerator.moveNext())
            {
                ResCharacteristicRequirementLine::findOrCreateRequirementLine(_requirement,
                    characteristicSet, enumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushRemovedRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flush removed search criteria requirement lines.
    /// </summary>
    /// <param name = "_requirement">Characteristic requirement.</param>
    /// <param name = "_searchCriteria">Search criteria.</param>
    protected void flushRemovedRequirements(RecId _requirement, ResSearchCriteria _searchCriteria)
    {
        ResISearchCriteriaItem searchCriteriaItem;
        ResCharacteristicSetEnum characteristicSet;
        Enumerator enumerator;

        // flush removed requirement lines
        ResCharacteristicRequirementLine requirementLine;
        while select forupdate requirementLine
            order by requirementLine.CharacteristicSet
            where requirementLine.CharacteristicRequirement == _requirement
        {
            if (characteristicSet != requirementLine.CharacteristicSet || !searchCriteriaItem)
            {
                characteristicSet = requirementLine.CharacteristicSet;
                searchCriteriaItem = _searchCriteria.getCriteriaItem(ResSearchCriteriaItemFactory::getSearchCriteriaItemId(characteristicSet));

                if (searchCriteriaItem)
                {
                    enumerator = searchCriteriaItem.getCriteriaItemValuesEnumerator();
                }
            }

            boolean keepRequirementLine = false;

            if (enumerator)
            {
                enumerator.reset();
                while (enumerator.moveNext())
                {
                    if (enumerator.current() == requirementLine.CharacteristicId)
                    {
                        keepRequirementLine = true;
                        break;
                    }
                }
            }

            if (!keepRequirementLine)
            {
                requirementLine.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the resource characteristics form.
    /// </summary>
    public void showForm()
    {
        Args formArgs = new Args();
        formArgs.caller(this);

        new MenuFunction(menuitemdisplaystr(ResCharacteristicFormMenuItem),
            MenuItemType::Display).run(formArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResCharacteristicForm_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle closing of Resource search characteristics form.
    /// </summary>
    /// <param name="sender">resource characteristics form.</param>
    /// <param name="e">Event arguments.</param>
    [FormEventHandler(formStr(ResCharacteristicForm), FormEventType::Closing)]
    public static void ResCharacteristicForm_OnClosing(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        if (formRun.closedOk())
        {
            ResCharacteristicsController controller = formRun.resourceCharacteristics();
            controller.searchCriteriaReady();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchCriteriaReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event that gets raised when search criteria is ready.
    /// </summary>
    delegate void searchCriteriaReady()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of resource characteristics controller.
    /// </summary>
    protected void new ()
    {
        searchCriteria = ResSearchCriteria::construct();
        enableRole = true;
        enableProject = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of resource characteristics controller.
    /// </summary>
    /// <returns>Resource characteristics object.</returns>
    public static ResCharacteristicsController construct()
    {
        ResCharacteristicsController controller = new ResCharacteristicsController();
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCharacteristics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of resource characteristics controller using the specified search criteria.
    /// </summary>
    /// <param name = "_searchCriteria">Search criteria.</param>
    /// <returns>Resource characteristics object.</returns>
    public static ResCharacteristicsController createCharacteristics(ResSearchCriteria _searchCriteria)
    {
        ResCharacteristicsController controller = new ResCharacteristicsController();
        controller.searchCriteria(_searchCriteria);
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
