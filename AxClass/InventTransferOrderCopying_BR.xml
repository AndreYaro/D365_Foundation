<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrderCopying_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>InventTransferOrderCopying_BR</c> provides functions to copyng delete transfer order
/// </summary>
class InventTransferOrderCopying_BR
{
    RecId inventTransferTableRecId;
    FiscalDocument_BR fiscalDocument;
    AxInventTransferTable axInventTransferTable;
    InventTransferJour inventTransferJourToCancel;
    InventTransferTableFiscalInfo_BR inventTransferTableFiscalInfo;

    InventTransferCancelReturn_BR cancelReturn;
    ReasonTableRefRecId           cancelReason;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReturnFiscalreference</Name>
				<Source><![CDATA[
    private void createReturnFiscalreference(InventTransferTable _transferOrder, RecId _fiscalDocumentRecId)
    {
        FiscalReferenceParm_BR  fiscalReferenceParm;
        FiscalDocumentLine_BR   fiscalDocumentLine;

        select firstOnly cfop from fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId;

        fiscalReferenceParm.IsAutomatic     = true;
        fiscalReferenceParm.SourceTableId   = tableNum(InventTransferTable);
        fiscalReferenceParm.SourceRecId     = _transferOrder.RecId;
        fiscalReferenceParm.RefTableId      = tableNum(FiscalDocument_BR);
        fiscalReferenceParm.RefRecID        = _fiscalDocumentRecId;
        fiscalReferenceParm.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLines</Name>
				<Source><![CDATA[
    private void createTransferLines()
    {
        FiscalDocumentLine_BR fiscalDocumentLine;
        InventTransferJourLine inventTransferJourLine;


        while select RecId from fiscalDocumentLine
                               where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                               join inventTransferJourLine
                                               order by LineNum
                                               where inventTransferJourLine.RecId  == fiscalDocumentLine.RefRecId
                                                               && inventTransferJourLine.TableId == fiscalDocumentLine.RefTableId
        {
            AxInventTransferLine axInventTransferLine = new AxInventTransferLine();
            axInventTransferLine.initFromAxInventTransferTable(axInventTransferTable);
            axInventTransferLine.initFromInventTransferJourLine(inventTransferJourLine);
                               
            InventTransferLine inventTransferLine = axInventTransferLine.currentRecord();
            inventTransferLine.initFromInventTransferTable(axInventTransferTable.currentRecord(), true);
            inventTransferLine.initFromInventTable(InventTable::find(inventTransferJourLine.ItemId));
            inventTransferLine.initFromInventTransferJourLine(inventTransferJourLine, inventTransferJourToCancel.UpdateType);
                
            InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo;
            inventTransferLineFiscalInfo.InventTransferTable = axInventTransferTable.parmTransferId();

            inventTransferLine.packInventTransferLineFiscalInfo_BR(inventTransferLineFiscalInfo);

            axInventTransferLine.setCurrentRecordFromExternal(inventTransferLine);

            axInventTransferLine.parmInventDimId(
                inventTransferLine.inventDimMergeWarehouse(
                    axInventTransferTable.parmInventLocationIdFrom(), 
                    axInventTransferTable.currentRecord(), 
                    InventDim::find(inventTransferJourLine.inventDimId)).inventDimId);
                               
            axInventTransferLine.save();

            this.fillInventTransferLineFiscalInfo_BR(inventTransferJourLine, inventTransferLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInventTransferLineFiscalInfo_BR</Name>
				<Source><![CDATA[
    private void fillInventTransferLineFiscalInfo_BR(InventTransferJourLine _inventTransferJourLine, InventTransferLine _inventTransferLine)
    {
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo = _inventTransferLine.inventTransferLineFiscalInfo_BR();

        inventTransferLineFiscalInfo.selectForUpdate(true);
        inventTransferLineFiscalInfo.setShipDefaultCFOP_BR();

        if (this.getReturnOrderType() == InventTransferOrderType_BR::ThirdPartyReturn)
        {
            inventTransferLineFiscalInfo.ShipPrice = InventTransferLine::findTransIdShip(_inventTransferJourLine.InventTransId).inventTransferLineFiscalInfo_BR().ShipPrice;
            inventTransferLineFiscalInfo.setShipPriceModifiedManually();
        }

        inventTransferLineFiscalInfo.update();

        _inventTransferLine.packInventTransferLineFiscalInfo_BR(inventTransferLineFiscalInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrder</Name>
				<Source><![CDATA[
    private void createTransferOrder()
    {
        InventTransferTableFiscalInfo_BR newInventTransferTableFiscalInfo;

        axInventTransferTable = AxInventTransferTable::createFromInventTransferJour(inventTransferJourToCancel);

        axInventTransferTable.save();

        newInventTransferTableFiscalInfo.clear();
        newInventTransferTableFiscalInfo.InventTransferTable = axInventTransferTable.parmRecId();
        newInventTransferTableFiscalInfo.setOrderType();

        newInventTransferTableFiscalInfo.InventTransferOrderType = this.getReturnOrderType();
        newInventTransferTableFiscalInfo.setFiscalDocumentType();
        newInventTransferTableFiscalInfo.insert();

        this.createReturnFiscalreference(axInventTransferTable.inventTransferTable(), fiscalDocument.RecId);

        inventTransferTableRecId = axInventTransferTable.parmRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCancelReturnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of cancel\return of invent transfer order.
    /// </summary>
    /// <returns>The type of cancel\return.</returns>
    /// <exception cref="Exception::Error">
    /// If transaction type cannot be recognized.
    /// </exception>
    [Replaceable]
    protected InventTransferCancelReturn_BR getCancelReturnType()
    {
        InventTransferCancelReturn_BR ret;

        switch (inventTransferTableFiscalInfo.InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
                ret = InventTransferCancelReturn_BR::FiscalEstablishmentReturn;
                break;
            case InventTransferOrderType_BR::ThirdPartyTransfer:
                ret = InventTransferCancelReturn_BR::ThirdPartyReturn;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of return order.
    /// </summary>
    /// <returns>The type of return order.</returns>
    /// <exception cref="Exception::Error">
    /// If transfer order type cannot be recognized.
    /// </exception>
    [Replaceable]
    protected InventTransferOrderType_BR getReturnOrderType()
    {
        InventTransferOrderType_BR ret;

        switch (inventTransferTableFiscalInfo.InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
                ret = InventTransferOrderType_BR::FiscalEstablishmentReturn;
                break;
            case InventTransferOrderType_BR::ThirdPartyTransfer          :
                ret = InventTransferOrderType_BR::ThirdPartyReturn;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(InventTransferJour _inventTransferJour, boolean _isReturn = true)
    {
        inventTransferJourToCancel = _inventTransferJour;

        fiscalDocument = FiscalDocument_BR::findByRef(inventTransferJourToCancel.TableId, inventTransferJourToCancel.RecId);

        inventTransferTableFiscalInfo = InventTransferTable::find(_inventTransferJour.TransferId).inventTransferTableFiscalInfo_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelReason</Name>
				<Source><![CDATA[
    public ReasonTableRefRecId parmCancelReason(ReasonTableRefRecId _cancelReason = cancelReason)
    {
        cancelReason = _cancelReason;
        return cancelReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelReturn</Name>
				<Source><![CDATA[
    public InventTransferCancelReturn_BR parmCancelReturn(InventTransferCancelReturn_BR _cancelReturn = cancelReturn)
    {
        cancelReturn = _cancelReturn;
        return cancelReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventTransJour</Name>
				<Source><![CDATA[
    private void postInventTransJour()
    {
        InventTransferTable parentInventTransferTable;
        InventTransferParmTable inventTransferParmTable;

        InventTransferMulti         inventTransferMulti;

        InventTransferShipUpdateQty     inventTransferShipUpdateQty;
        InventTransferReceiveUpdateQty  inventTransferReceiveUpdateQty;

        ttsbegin;

        inventTransferJourToCancel.selectForUpdate(true);
        inventTransferJourToCancel.ReasonTableRef_BR = cancelReason;
        inventTransferJourToCancel.update();

        select parentInventTransferTable
            where parentInventTransferTable.TransferId == inventTransferJourToCancel.TransferId;

        if (inventTransferJourToCancel.UpdateType == InventTransferUpdateType::Shipment)
        {
            inventTransferMulti = InventTransferMultiShip::construct();
            inventTransferShipUpdateQty = InventTransferShipUpdateQty::DocumentReturn_RU;
            inventTransferParmTable.EditLines = true;
        }
        else if (inventTransferJourToCancel.UpdateType == InventTransferUpdateType::Receive)
        {
            inventTransferMulti = InventTransferMultiReceive::construct();
            inventTransferReceiveUpdateQty = InventTransferReceiveUpdateQty::DocumentReturn_RU;
        }

        RunBaseMultiParm::initParm(inventTransferMulti); //Make sure parmId is set
        InventTransferParmUpdate inventTransferParmUpdate = inventTransferMulti.defaultParmUpdate();

        inventTransferMulti.insertParmUpdate(inventTransferParmUpdate); //init and insert overall update table for this update
        inventTransferMulti.parmCalledFromWMS(false);

        inventTransferParmTable = inventTransferMulti.defaultParmBuffer();

        inventTransferParmTable.ShipUpdateQty = inventTransferShipUpdateQty;
        inventTransferParmTable.ReceiveUpdateQty = inventTransferReceiveUpdateQty;

        inventTransferParmTable.VoucherShipmentId = inventTransferJourToCancel.VoucherId;

        inventTransferMulti.parmStandardParm(inventTransferParmTable);
        inventTransferMulti.insert(parentInventTransferTable, inventTransferParmTable);

        inventTransferMulti.runOnServer();

        inventTransferTableRecId = parentInventTransferTable.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the transfer order copying for cancel or return transfer orders
    /// </summary>
    /// <returns>
    ///     The new transfer order recId
    /// </returns>
    public RecId run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            if (cancelReturn == InventTransferCancelReturn_BR::Cancel)
            {
                this.postInventTransJour();
            }
            else if (cancelReturn == InventTransferCancelReturn_BR::FiscalEstablishmentReturn
                || cancelReturn == InventTransferCancelReturn_BR::ThirdPartyReturn)
            {
                this.createTransferOrder();
                this.createTransferLines();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return inventTransferTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCancelInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferOrderCopying_BR</c> object to cancel the related fiscal document
    /// </summary>
    /// <param name="_inventTransferJour">
    ///     The record used to initialize the <c>InventTransferOrderCopying_BR</c> class
    /// </param>
    /// <param name="_reasonRefRecId">
    ///     The cancel reason reference
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferOrderCopying_BR</c>
    /// </returns>
    public static InventTransferOrderCopying_BR newCancelInventTransferJour(InventTransferJour _inventTransferJour,
                                                                            ReasonTableRefRecId _reasonRefRecId = 0)
    {
        InventTransferOrderCopying_BR inventTransferOrderCopying = new InventTransferOrderCopying_BR(_inventTransferJour);
        inventTransferOrderCopying.parmCancelReturn(InventTransferCancelReturn_BR::Cancel);
        inventTransferOrderCopying.parmCancelReason(_reasonRefRecId);

        return inventTransferOrderCopying;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReturnInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferOrderCopying_BR</c> object to create a return transfer order for the related order
    /// </summary>
    /// <param name="_inventTransferJour">
    ///     The record used to initialize the <c>InventTransferOrderCopying_BR</c> class
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferOrderCopying_BR</c>
    /// </returns>
    public static InventTransferOrderCopying_BR newReturnInventTransferJour(InventTransferJour _inventTransferJour)
    {
        InventTransferOrderCopying_BR inventTransferOrderCopying = new InventTransferOrderCopying_BR(_inventTransferJour);
        inventTransferOrderCopying.parmCancelReturn(inventTransferOrderCopying.getCancelReturnType());

        return  inventTransferOrderCopying;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>